// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 2 ) ;
  63: LD_INT 2
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2217 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3152 0 0
// Action ;
  88: CALL 1285 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( vpos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( vpos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( vpos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// hc_gallery := skirmish ;
 562: LD_ADDR_OWVAR 33
 566: PUSH
 567: LD_STRING skirmish
 569: ST_TO_ADDR
// hc_face_number := 5 ;
 570: LD_ADDR_OWVAR 34
 574: PUSH
 575: LD_INT 5
 577: ST_TO_ADDR
// player_commander := CreateHuman ;
 578: LD_ADDR_EXP 6
 582: PUSH
 583: CALL_OW 44
 587: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 588: LD_ADDR_EXP 5
 592: PUSH
 593: LD_EXP 5
 597: PUSH
 598: LD_EXP 6
 602: ADD
 603: ST_TO_ADDR
// hc_importance := 0 ;
 604: LD_ADDR_OWVAR 32
 608: PUSH
 609: LD_INT 0
 611: ST_TO_ADDR
// hc_gallery :=  ;
 612: LD_ADDR_OWVAR 33
 616: PUSH
 617: LD_STRING 
 619: ST_TO_ADDR
// case difficulty of 1 :
 620: LD_OWVAR 67
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 655
 633: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 4
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: ST_TO_ADDR
 653: GO 716
 655: LD_INT 2
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 685
 663: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 3
 671: PUSH
 672: LD_INT 2
 674: PUSH
 675: LD_INT 2
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: ST_TO_ADDR
 683: GO 716
 685: LD_INT 3
 687: DOUBLE
 688: EQUAL
 689: IFTRUE 693
 691: GO 715
 693: POP
// s = [ 3 , 1 , 1 ] ; end ;
 694: LD_ADDR_VAR 0 4
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: ST_TO_ADDR
 713: GO 716
 715: POP
// ChangeSideFog ( 3 , 6 ) ;
 716: LD_INT 3
 718: PPUSH
 719: LD_INT 6
 721: PPUSH
 722: CALL_OW 343
// for i = 1 to s [ 1 ] do
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: DOUBLE
 732: LD_INT 1
 734: DEC
 735: ST_TO_ADDR
 736: LD_VAR 0 4
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PUSH
 745: FOR_TO
 746: IFFALSE 791
// begin PrepareHuman ( false , 1 , sk ) ;
 748: LD_INT 0
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_VAR 0 5
 758: PPUSH
 759: CALL_OW 380
// un := CreateHuman ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 44
 772: ST_TO_ADDR
// player_force := player_force ^ un ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_EXP 5
 782: PUSH
 783: LD_VAR 0 3
 787: ADD
 788: ST_TO_ADDR
// end ;
 789: GO 745
 791: POP
 792: POP
// SetClass ( un , class_bazooker ) ;
 793: LD_VAR 0 3
 797: PPUSH
 798: LD_INT 9
 800: PPUSH
 801: CALL_OW 336
// for i = 1 to s [ 2 ] do
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_VAR 0 4
 819: PUSH
 820: LD_INT 2
 822: ARRAY
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1023
// begin if Prob ( 30 ) then
 827: LD_INT 30
 829: PPUSH
 830: CALL_OW 13
 834: IFFALSE 889
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 836: LD_ADDR_VAR 0 6
 840: PUSH
 841: LD_INT 3
 843: PPUSH
 844: LD_INT 3
 846: PPUSH
 847: LD_INT 22
 849: PPUSH
 850: LD_INT 3
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 43
 858: PUSH
 859: LD_INT 42
 861: PUSH
 862: LD_INT 44
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 3
 875: PPUSH
 876: CALL_OW 12
 880: ARRAY
 881: PPUSH
 882: CALL 7106 0 6
 886: ST_TO_ADDR
 887: GO 948
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 889: LD_ADDR_VAR 0 6
 893: PUSH
 894: LD_INT 3
 896: PPUSH
 897: LD_INT 3
 899: PPUSH
 900: LD_INT 22
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 43
 911: PUSH
 912: LD_INT 42
 914: PUSH
 915: LD_INT 44
 917: PUSH
 918: LD_INT 42
 920: PUSH
 921: LD_INT 44
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_INT 5
 936: PPUSH
 937: CALL_OW 12
 941: ARRAY
 942: PPUSH
 943: CALL 7106 0 6
 947: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 948: LD_INT 0
 950: PPUSH
 951: LD_INT 3
 953: PPUSH
 954: LD_VAR 0 5
 958: PPUSH
 959: CALL_OW 380
// mech := CreateHuman ;
 963: LD_ADDR_VAR 0 8
 967: PUSH
 968: CALL_OW 44
 972: ST_TO_ADDR
// vehs := vehs ^ veh ;
 973: LD_ADDR_VAR 0 7
 977: PUSH
 978: LD_VAR 0 7
 982: PUSH
 983: LD_VAR 0 6
 987: ADD
 988: ST_TO_ADDR
// player_force := player_force ^ veh ;
 989: LD_ADDR_EXP 5
 993: PUSH
 994: LD_EXP 5
 998: PUSH
 999: LD_VAR 0 6
1003: ADD
1004: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
1005: LD_ADDR_VAR 0 9
1009: PUSH
1010: LD_VAR 0 9
1014: PUSH
1015: LD_VAR 0 8
1019: ADD
1020: ST_TO_ADDR
// end ;
1021: GO 824
1023: POP
1024: POP
// for i = 1 to s [ 3 ] do
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_VAR 0 4
1039: PUSH
1040: LD_INT 3
1042: ARRAY
1043: PUSH
1044: FOR_TO
1045: IFFALSE 1090
// begin PrepareHuman ( false , 4 , sk ) ;
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 4
1052: PPUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: CALL_OW 380
// un := CreateHuman ;
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: CALL_OW 44
1071: ST_TO_ADDR
// player_force := player_force ^ un ;
1072: LD_ADDR_EXP 5
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_VAR 0 3
1086: ADD
1087: ST_TO_ADDR
// end ;
1088: GO 1044
1090: POP
1091: POP
// case road of 1 :
1092: LD_EXP 2
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1124
1105: POP
// begin start_area := vpos2 ;
1106: LD_ADDR_EXP 7
1110: PUSH
1111: LD_INT 4
1113: ST_TO_ADDR
// finish_area := vpos3 ;
1114: LD_ADDR_EXP 8
1118: PUSH
1119: LD_INT 6
1121: ST_TO_ADDR
// end ; 2 :
1122: GO 1152
1124: LD_INT 2
1126: DOUBLE
1127: EQUAL
1128: IFTRUE 1132
1130: GO 1151
1132: POP
// begin start_area := vpos1 ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_INT 2
1140: ST_TO_ADDR
// finish_area := vpos2 ;
1141: LD_ADDR_EXP 8
1145: PUSH
1146: LD_INT 4
1148: ST_TO_ADDR
// end ; end ;
1149: GO 1152
1151: POP
// for i = 1 to player_force do
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: DOUBLE
1158: LD_INT 1
1160: DEC
1161: ST_TO_ADDR
1162: LD_EXP 5
1166: PUSH
1167: FOR_TO
1168: IFFALSE 1226
// begin SetDir ( player_force [ i ] , [ 1 , 2 ] [ road ] ) ;
1170: LD_EXP 5
1174: PUSH
1175: LD_VAR 0 2
1179: ARRAY
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 2
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_EXP 2
1195: ARRAY
1196: PPUSH
1197: CALL_OW 233
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1201: LD_EXP 5
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PPUSH
1212: LD_EXP 7
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 49
// end ;
1224: GO 1167
1226: POP
1227: POP
// for i = 1 to s [ 2 ] do
1228: LD_ADDR_VAR 0 2
1232: PUSH
1233: DOUBLE
1234: LD_INT 1
1236: DEC
1237: ST_TO_ADDR
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 2
1245: ARRAY
1246: PUSH
1247: FOR_TO
1248: IFFALSE 1278
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1250: LD_VAR 0 9
1254: PUSH
1255: LD_VAR 0 2
1259: ARRAY
1260: PPUSH
1261: LD_VAR 0 7
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PPUSH
1272: CALL_OW 52
1276: GO 1247
1278: POP
1279: POP
// end ;
1280: LD_VAR 0 1
1284: RET
// export function Action ; begin
1285: LD_INT 0
1287: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1288: LD_EXP 6
1292: PPUSH
1293: CALL_OW 87
// InGameOn ;
1297: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1301: LD_EXP 6
1305: PPUSH
1306: LD_STRING DS1
1308: PPUSH
1309: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1313: LD_EXP 6
1317: PPUSH
1318: LD_STRING DS2
1320: PPUSH
1321: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1325: LD_EXP 6
1329: PPUSH
1330: LD_STRING DS3
1332: PPUSH
1333: CALL_OW 88
// InGameOff ;
1337: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1341: LD_STRING ObConv
1343: PPUSH
1344: CALL_OW 337
// if road = 1 then
1348: LD_EXP 2
1352: PUSH
1353: LD_INT 1
1355: EQUAL
1356: IFFALSE 1370
// SetAreaMapShow ( vpos3 , 1 ) else
1358: LD_INT 6
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: CALL_OW 424
1368: GO 1390
// if road = 2 then
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 2
1377: EQUAL
1378: IFFALSE 1390
// SetAreaMapShow ( vpos2 , 1 ) ;
1380: LD_INT 4
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 424
// end ;
1390: LD_VAR 0 1
1394: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_INT 34
1402: PUSH
1403: LD_INT 51
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 70
1414: PUSH
1415: LD_INT 0
1417: GREATER
1418: PUSH
1419: LD_INT 22
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 69
1433: PUSH
1434: LD_INT 0
1436: EQUAL
1437: PUSH
1438: LD_EXP 1
1442: NOT
1443: AND
1444: OR
1445: IFFALSE 1586
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1453: LD_EXP 6
1457: PPUSH
1458: LD_STRING DS-6
1460: PPUSH
1461: CALL_OW 88
// Wait ( 0 0$01 ) ;
1465: LD_INT 35
1467: PPUSH
1468: CALL_OW 67
// AddMedal ( med , 1 ) ;
1472: LD_STRING med
1474: PPUSH
1475: LD_INT 1
1477: PPUSH
1478: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1482: LD_INT 22
1484: PUSH
1485: LD_INT 2
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PPUSH
1492: CALL_OW 69
1496: PUSH
1497: LD_INT 0
1499: EQUAL
1500: IFFALSE 1514
// AddMedal ( convoy_clear , 1 ) else
1502: LD_STRING convoy_clear
1504: PPUSH
1505: LD_INT 1
1507: PPUSH
1508: CALL_OW 101
1512: GO 1525
// AddMedal ( convoy_clear , - 1 ) ;
1514: LD_STRING convoy_clear
1516: PPUSH
1517: LD_INT 1
1519: NEG
1520: PPUSH
1521: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1525: LD_INT 22
1527: PUSH
1528: LD_INT 6
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PPUSH
1535: CALL_OW 69
1539: PUSH
1540: LD_INT 2
1542: GREATEREQUAL
1543: IFFALSE 1564
// begin SetAchievement ( ACH_SAFECARGO ) ;
1545: LD_STRING ACH_SAFECARGO
1547: PPUSH
1548: CALL_OW 543
// AddMedal ( convoy_cargos , 1 ) ;
1552: LD_STRING convoy_cargos
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 101
// end else
1562: GO 1575
// AddMedal ( convoy_cargos , - 1 ) ;
1564: LD_STRING convoy_cargos
1566: PPUSH
1567: LD_INT 1
1569: NEG
1570: PPUSH
1571: CALL_OW 101
// GiveMedals ( MAIN ) ;
1575: LD_STRING MAIN
1577: PPUSH
1578: CALL_OW 102
// YouWin ;
1582: CALL_OW 103
// end ;
1586: PPOPN 1
1588: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1589: LD_VAR 0 1
1593: PPUSH
1594: CALL_OW 255
1598: PUSH
1599: LD_INT 3
1601: EQUAL
1602: PUSH
1603: LD_VAR 0 1
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: AND
1617: PUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 26
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PPUSH
1642: CALL_OW 69
1646: PUSH
1647: LD_INT 1
1649: GREATER
1650: AND
1651: PUSH
1652: LD_EXP 9
1656: NOT
1657: AND
1658: IFFALSE 1714
// begin hurt := true ;
1660: LD_ADDR_EXP 9
1664: PUSH
1665: LD_INT 1
1667: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1668: LD_INT 22
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 1
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 69
1696: PUSH
1697: LD_EXP 6
1701: DIFF
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: LD_STRING DM4
1709: PPUSH
1710: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1714: LD_VAR 0 1
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL_OW 69
1747: IN
1748: IFFALSE 1873
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1750: LD_INT 280
1752: PPUSH
1753: LD_INT 490
1755: PPUSH
1756: CALL_OW 12
1760: PPUSH
1761: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1765: LD_VAR 0 1
1769: PPUSH
1770: CALL_OW 250
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: CALL_OW 251
1784: PPUSH
1785: LD_INT 10
1787: PPUSH
1788: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 250
1801: PPUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 251
1811: PPUSH
1812: LD_INT 10
1814: PPUSH
1815: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 250
1828: PPUSH
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 251
1838: PPUSH
1839: LD_INT 10
1841: PPUSH
1842: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1846: LD_VAR 0 1
1850: PPUSH
1851: CALL_OW 250
1855: PPUSH
1856: LD_VAR 0 1
1860: PPUSH
1861: CALL_OW 251
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: CALL_OW 453
// end ; end ;
1873: PPOPN 1
1875: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 31
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PPUSH
1889: CALL_OW 69
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PPUSH
1898: CALL_OW 292
1902: IFFALSE 1953
1904: GO 1906
1906: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: PUSH
1936: LD_EXP 6
1940: DIFF
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: LD_STRING DM2
1948: PPUSH
1949: CALL_OW 88
// end ;
1953: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 22
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 25
1969: PUSH
1970: LD_INT 1
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PPUSH
1981: CALL_OW 69
1985: PPUSH
1986: LD_EXP 6
1990: PPUSH
1991: CALL_OW 74
1995: PPUSH
1996: CALL_OW 292
2000: IFFALSE 2051
2002: GO 2004
2004: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
2005: LD_INT 22
2007: PUSH
2008: LD_INT 3
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 26
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_EXP 6
2038: DIFF
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PPUSH
2044: LD_STRING DM3
2046: PPUSH
2047: CALL_OW 88
// end ;
2051: END
// every 0 0$01 trigger mines_trigger do
2052: LD_EXP 10
2056: IFFALSE 2127
2058: GO 2060
2060: DISABLE
// begin DialogueOn ;
2061: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
2065: LD_INT 22
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 26
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 69
2093: PUSH
2094: LD_EXP 6
2098: DIFF
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_STRING DM1
2106: PPUSH
2107: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2111: LD_EXP 6
2115: PPUSH
2116: LD_STRING DS4
2118: PPUSH
2119: CALL_OW 88
// DialogueOff ;
2123: CALL_OW 7
// end ;
2127: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2128: LD_INT 34
2130: PUSH
2131: LD_INT 51
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PPUSH
2138: CALL_OW 69
2142: PUSH
2143: LD_INT 1
2145: EQUAL
2146: IFFALSE 2163
2148: GO 2150
2150: DISABLE
// begin Say ( player_commander , DS5 ) ;
2151: LD_EXP 6
2155: PPUSH
2156: LD_STRING DS5
2158: PPUSH
2159: CALL_OW 88
// end ;
2163: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2164: LD_INT 34
2166: PUSH
2167: LD_INT 51
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PPUSH
2174: CALL_OW 69
2178: PUSH
2179: LD_INT 0
2181: EQUAL
2182: IFFALSE 2194
2184: GO 2186
2186: DISABLE
// begin YouLost ( qconvl ) ;
2187: LD_STRING qconvl
2189: PPUSH
2190: CALL_OW 104
// end ;
2194: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2195: LD_EXP 6
2199: PPUSH
2200: CALL_OW 301
2204: IFFALSE 2216
2206: GO 2208
2208: DISABLE
// begin YouLost ( qcom ) ;
2209: LD_STRING qcom
2211: PPUSH
2212: CALL_OW 104
// end ; end_of_file
2216: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2224: LD_INT 3
2226: PPUSH
2227: LD_INT 6
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
// case road of 1 :
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2279
2253: POP
// begin area := vpos2 ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 4
2261: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2262: LD_ADDR_VAR 0 5
2266: PUSH
2267: LD_INT 30
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: ST_TO_ADDR
// end ; 2 :
2277: GO 2314
2279: LD_INT 2
2281: DOUBLE
2282: EQUAL
2283: IFTRUE 2287
2285: GO 2313
2287: POP
// begin area := vpos1 ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2296: LD_ADDR_VAR 0 5
2300: PUSH
2301: LD_INT 18
2303: PUSH
2304: LD_INT 3
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// end ; end ;
2311: GO 2314
2313: POP
// if road = 1 then
2314: LD_EXP 2
2318: PUSH
2319: LD_INT 1
2321: EQUAL
2322: IFFALSE 2435
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2324: LD_ADDR_EXP 13
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: LD_INT 43
2334: PUSH
2335: LD_INT 40
2337: PUSH
2338: LD_INT 29
2340: PUSH
2341: LD_INT 56
2343: PUSH
2344: LD_INT 37
2346: PUSH
2347: LD_INT 70
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 63
2355: PUSH
2356: LD_INT 6
2358: PUSH
2359: LD_INT 84
2361: PUSH
2362: LD_INT 8
2364: PUSH
2365: LD_INT 90
2367: PUSH
2368: LD_INT 24
2370: PUSH
2371: LD_INT 96
2373: PUSH
2374: LD_INT 47
2376: PUSH
2377: LD_INT 110
2379: PUSH
2380: LD_INT 73
2382: PUSH
2383: LD_INT 143
2385: PUSH
2386: LD_INT 102
2388: PUSH
2389: LD_INT 121
2391: PUSH
2392: LD_INT 93
2394: PUSH
2395: LD_INT 98
2397: PUSH
2398: LD_INT 100
2400: PUSH
2401: LD_INT 62
2403: PUSH
2404: LD_INT 114
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: ST_TO_ADDR
// if road = 2 then
2435: LD_EXP 2
2439: PUSH
2440: LD_INT 2
2442: EQUAL
2443: IFFALSE 2580
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2445: LD_ADDR_EXP 13
2449: PUSH
2450: LD_INT 39
2452: PUSH
2453: LD_INT 18
2455: PUSH
2456: LD_INT 61
2458: PUSH
2459: LD_INT 36
2461: PUSH
2462: LD_INT 62
2464: PUSH
2465: LD_INT 15
2467: PUSH
2468: LD_INT 75
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 97
2476: PUSH
2477: LD_INT 17
2479: PUSH
2480: LD_INT 98
2482: PUSH
2483: LD_INT 30
2485: PUSH
2486: LD_INT 95
2488: PUSH
2489: LD_INT 49
2491: PUSH
2492: LD_INT 110
2494: PUSH
2495: LD_INT 71
2497: PUSH
2498: LD_INT 146
2500: PUSH
2501: LD_INT 112
2503: PUSH
2504: LD_INT 100
2506: PUSH
2507: LD_INT 81
2509: PUSH
2510: LD_INT 99
2512: PUSH
2513: LD_INT 115
2515: PUSH
2516: LD_INT 77
2518: PUSH
2519: LD_INT 105
2521: PUSH
2522: LD_INT 65
2524: PUSH
2525: LD_INT 75
2527: PUSH
2528: LD_INT 45
2530: PUSH
2531: LD_INT 46
2533: PUSH
2534: LD_INT 26
2536: PUSH
2537: LD_INT 47
2539: PUSH
2540: LD_INT 29
2542: PUSH
2543: LD_INT 54
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// conv_am := 1 ;
2580: LD_ADDR_EXP 12
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// conv := 0 ;
2588: LD_ADDR_EXP 11
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// uc_side := 6 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 6
2603: ST_TO_ADDR
// uc_nation := 3 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 3
2611: ST_TO_ADDR
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2731
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: LD_INT 6
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: LD_INT 22
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 51
2650: PPUSH
2651: CALL 7106 0 6
2655: ST_TO_ADDR
// cargos := cargos ^ un ;
2656: LD_ADDR_EXP 4
2660: PUSH
2661: LD_EXP 4
2665: PUSH
2666: LD_VAR 0 2
2670: ADD
2671: ST_TO_ADDR
// SetDir ( un , [ 1 , 2 ] [ road ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_INT 1
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_EXP 2
2691: ARRAY
2692: PPUSH
2693: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
2697: LD_VAR 0 2
2701: PPUSH
2702: LD_VAR 0 3
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2714: LD_VAR 0 2
2718: PPUSH
2719: LD_INT 3
2721: PPUSH
2722: LD_INT 100
2724: PPUSH
2725: CALL_OW 290
// end ;
2729: GO 2625
2731: POP
2732: POP
// end ;
2733: LD_VAR 0 1
2737: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2738: LD_EXP 4
2742: IFFALSE 2854
2744: GO 2746
2746: DISABLE
// begin enable ;
2747: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2748: LD_EXP 4
2752: PUSH
2753: LD_INT 1
2755: ARRAY
2756: PPUSH
2757: CALL_OW 306
2761: PUSH
2762: LD_EXP 4
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 306
2775: OR
2776: IFFALSE 2854
// begin if debug then
2778: LD_EXP 1
2782: IFFALSE 2794
// display_strings := conv ;
2784: LD_ADDR_OWVAR 47
2788: PUSH
2789: LD_EXP 11
2793: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2794: LD_STRING QConv
2796: PPUSH
2797: CALL_OW 97
2801: PUSH
2802: LD_INT 1
2804: DOUBLE
2805: EQUAL
2806: IFTRUE 2810
2808: GO 2821
2810: POP
// conv := 0 ; 2 :
2811: LD_ADDR_EXP 11
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
2819: GO 2841
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2840
2829: POP
// conv := 1 ; end ;
2830: LD_ADDR_EXP 11
2834: PUSH
2835: LD_INT 1
2837: ST_TO_ADDR
2838: GO 2841
2840: POP
// disable ( 01 ) ;
2841: LD_INT 1
2843: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2844: LD_INT 175
2846: PPUSH
2847: CALL_OW 67
// enable ( 01 ) ;
2851: LD_INT 1
2853: ENABLE_MARKED
// end ; end ;
2854: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2855: LD_EXP 11
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: IFFALSE 3075
2865: GO 2867
2867: DISABLE
2868: LD_INT 0
2870: PPUSH
2871: PPUSH
2872: PPUSH
// begin enable ;
2873: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 34
2881: PUSH
2882: LD_INT 51
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if debug then
2894: LD_EXP 1
2898: IFFALSE 2935
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2900: LD_ADDR_OWVAR 47
2904: PUSH
2905: LD_EXP 13
2909: PUSH
2910: LD_EXP 12
2914: ARRAY
2915: PUSH
2916: LD_EXP 13
2920: PUSH
2921: LD_EXP 12
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: ARRAY
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// for i = 1 to car do
2935: LD_ADDR_VAR 0 1
2939: PUSH
2940: DOUBLE
2941: LD_INT 1
2943: DEC
2944: ST_TO_ADDR
2945: LD_VAR 0 3
2949: PUSH
2950: FOR_TO
2951: IFFALSE 3073
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2953: LD_VAR 0 3
2957: PUSH
2958: LD_VAR 0 1
2962: ARRAY
2963: PPUSH
2964: LD_EXP 13
2968: PUSH
2969: LD_EXP 12
2973: ARRAY
2974: PPUSH
2975: LD_EXP 13
2979: PUSH
2980: LD_EXP 12
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: CALL 7184 0 3
2994: IFFALSE 3012
// conv_am := conv_am + 2 else
2996: LD_ADDR_EXP 12
3000: PUSH
3001: LD_EXP 12
3005: PUSH
3006: LD_INT 2
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3071
// if not HasTask ( car [ i ] ) then
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 314
3027: NOT
3028: IFFALSE 3071
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
3030: LD_VAR 0 3
3034: PUSH
3035: LD_VAR 0 1
3039: ARRAY
3040: PPUSH
3041: LD_EXP 13
3045: PUSH
3046: LD_EXP 12
3050: ARRAY
3051: PPUSH
3052: LD_EXP 13
3056: PUSH
3057: LD_EXP 12
3061: PUSH
3062: LD_INT 1
3064: PLUS
3065: ARRAY
3066: PPUSH
3067: CALL_OW 111
// end ;
3071: GO 2950
3073: POP
3074: POP
// end ;
3075: PPOPN 3
3077: END
// every 0 0$01 trigger conv = 0 do var i ;
3078: LD_EXP 11
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3149
3088: GO 3090
3090: DISABLE
3091: LD_INT 0
3093: PPUSH
// begin enable ;
3094: ENABLE
// for i = 1 to cargos do
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_EXP 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3147
// if HasTask ( cargos [ i ] ) then
3113: LD_EXP 4
3117: PUSH
3118: LD_VAR 0 1
3122: ARRAY
3123: PPUSH
3124: CALL_OW 314
3128: IFFALSE 3145
// ComStop ( cargos [ i ] ) ;
3130: LD_EXP 4
3134: PUSH
3135: LD_VAR 0 1
3139: ARRAY
3140: PPUSH
3141: CALL_OW 141
3145: GO 3110
3147: POP
3148: POP
// end ; end_of_file
3149: PPOPN 1
3151: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3152: LD_INT 0
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
3165: PPUSH
3166: PPUSH
3167: PPUSH
3168: PPUSH
3169: PPUSH
// uc_side := 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation := 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// if road = 1 then
3186: LD_EXP 2
3190: PUSH
3191: LD_INT 1
3193: EQUAL
3194: IFFALSE 3956
// begin case Difficulty of 1 :
3196: LD_OWVAR 67
3200: PUSH
3201: LD_INT 1
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3516
3209: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_INT 56
3217: PUSH
3218: LD_INT 37
3220: PUSH
3221: LD_INT 2
3223: PUSH
3224: LD_INT 81
3226: PUSH
3227: LD_INT 6
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 90
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 3
3241: PUSH
3242: LD_INT 105
3244: PUSH
3245: LD_INT 68
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 96
3253: PUSH
3254: LD_INT 82
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 80
3262: PUSH
3263: LD_INT 109
3265: PUSH
3266: LD_INT 4
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 7
3296: PUSH
3297: LD_INT 9
3299: PUSH
3300: LD_INT 10
3302: PUSH
3303: LD_INT 11
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_INT 13
3319: PUSH
3320: LD_INT 14
3322: PUSH
3323: LD_INT 15
3325: PUSH
3326: LD_INT 16
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3335: LD_ADDR_VAR 0 15
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3358: LD_ADDR_VAR 0 8
3362: PUSH
3363: LD_INT 68
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: LD_INT 96
3371: PUSH
3372: LD_INT 53
3374: PUSH
3375: LD_INT 142
3377: PUSH
3378: LD_INT 98
3380: PUSH
3381: LD_INT 96
3383: PUSH
3384: LD_INT 82
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3397: LD_ADDR_VAR 0 6
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: LD_INT 100
3428: PUSH
3429: LD_INT 21
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3443: LD_ADDR_VAR 0 7
3447: PUSH
3448: LD_INT 38
3450: PUSH
3451: LD_INT 28
3453: PUSH
3454: LD_INT 41
3456: PUSH
3457: LD_INT 29
3459: PUSH
3460: LD_INT 62
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 65
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 95
3474: PUSH
3475: LD_INT 55
3477: PUSH
3478: LD_INT 98
3480: PUSH
3481: LD_INT 54
3483: PUSH
3484: LD_INT 96
3486: PUSH
3487: LD_INT 111
3489: PUSH
3490: LD_INT 99
3492: PUSH
3493: LD_INT 112
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// end ; 2 , 3 :
3514: GO 3954
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3530
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3953
3530: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 56
3538: PUSH
3539: LD_INT 37
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 81
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 90
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 68
3568: PUSH
3569: LD_INT 2
3571: PUSH
3572: LD_INT 96
3574: PUSH
3575: LD_INT 82
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 80
3583: PUSH
3584: LD_INT 109
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: LD_INT 7
3617: PUSH
3618: LD_INT 8
3620: PUSH
3621: LD_INT 9
3623: PUSH
3624: LD_INT 10
3626: PUSH
3627: LD_INT 11
3629: PUSH
3630: LD_INT 12
3632: PUSH
3633: LD_INT 42
3635: PUSH
3636: LD_INT 43
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 14
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3672: LD_ADDR_VAR 0 15
3676: PUSH
3677: LD_INT 4
3679: PUSH
3680: LD_INT 5
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3695: LD_ADDR_VAR 0 8
3699: PUSH
3700: LD_INT 68
3702: PUSH
3703: LD_INT 5
3705: PUSH
3706: LD_INT 96
3708: PUSH
3709: LD_INT 53
3711: PUSH
3712: LD_INT 142
3714: PUSH
3715: LD_INT 98
3717: PUSH
3718: LD_INT 96
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3734: LD_ADDR_VAR 0 6
3738: PUSH
3739: LD_INT 17
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 104
3756: PUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 100
3765: PUSH
3766: LD_INT 21
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 91
3774: PUSH
3775: LD_INT 28
3777: PUSH
3778: LD_INT 0
3780: PUSH
3781: LD_INT 92
3783: PUSH
3784: LD_INT 31
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 71
3792: PUSH
3793: LD_INT 106
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 71
3801: PUSH
3802: LD_INT 103
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 66
3810: PUSH
3811: LD_INT 102
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3840: LD_ADDR_VAR 0 7
3844: PUSH
3845: LD_INT 38
3847: PUSH
3848: LD_INT 28
3850: PUSH
3851: LD_INT 41
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 62
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: LD_INT 65
3865: PUSH
3866: LD_INT 7
3868: PUSH
3869: LD_INT 95
3871: PUSH
3872: LD_INT 55
3874: PUSH
3875: LD_INT 98
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: LD_INT 96
3883: PUSH
3884: LD_INT 111
3886: PUSH
3887: LD_INT 99
3889: PUSH
3890: LD_INT 112
3892: PUSH
3893: LD_INT 86
3895: PUSH
3896: LD_INT 17
3898: PUSH
3899: LD_INT 89
3901: PUSH
3902: LD_INT 17
3904: PUSH
3905: LD_INT 136
3907: PUSH
3908: LD_INT 91
3910: PUSH
3911: LD_INT 140
3913: PUSH
3914: LD_INT 91
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 54
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
// end ; end ;
3951: GO 3954
3953: POP
// end else
3954: GO 4896
// if road = 2 then
3956: LD_EXP 2
3960: PUSH
3961: LD_INT 2
3963: EQUAL
3964: IFFALSE 4896
// begin case Difficulty of 1 :
3966: LD_OWVAR 67
3970: PUSH
3971: LD_INT 1
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4390
3979: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 44
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 62
3996: PUSH
3997: LD_INT 8
3999: PUSH
4000: LD_INT 0
4002: PUSH
4003: LD_INT 106
4005: PUSH
4006: LD_INT 68
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 143
4014: PUSH
4015: LD_INT 96
4017: PUSH
4018: LD_INT 3
4020: PUSH
4021: LD_INT 90
4023: PUSH
4024: LD_INT 115
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: LD_INT 56
4032: PUSH
4033: LD_INT 59
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 45
4066: PUSH
4067: LD_INT 46
4069: PUSH
4070: LD_INT 47
4072: PUSH
4073: LD_INT 48
4075: PUSH
4076: LD_INT 49
4078: PUSH
4079: LD_INT 50
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4090: LD_ADDR_VAR 0 4
4094: PUSH
4095: LD_INT 45
4097: PUSH
4098: LD_INT 46
4100: PUSH
4101: LD_INT 47
4103: PUSH
4104: LD_INT 48
4106: PUSH
4107: LD_INT 49
4109: PUSH
4110: LD_INT 50
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4121: LD_ADDR_VAR 0 15
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 5
4134: PUSH
4135: LD_INT 0
4137: PUSH
4138: LD_INT 1
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 44
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 62
4165: PUSH
4166: LD_INT 8
4168: PUSH
4169: LD_INT 106
4171: PUSH
4172: LD_INT 68
4174: PUSH
4175: LD_INT 143
4177: PUSH
4178: LD_INT 96
4180: PUSH
4181: LD_INT 90
4183: PUSH
4184: LD_INT 115
4186: PUSH
4187: LD_INT 56
4189: PUSH
4190: LD_INT 59
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_INT 17
4214: PUSH
4215: LD_INT 3
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_INT 51
4229: PUSH
4230: LD_INT 29
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 55
4238: PUSH
4239: LD_INT 33
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4253: LD_ADDR_VAR 0 7
4257: PUSH
4258: LD_INT 31
4260: PUSH
4261: LD_INT 13
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 13
4269: PUSH
4270: LD_INT 35
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 98
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 102
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 97
4290: PUSH
4291: LD_INT 33
4293: PUSH
4294: LD_INT 101
4296: PUSH
4297: LD_INT 54
4299: PUSH
4300: LD_INT 98
4302: PUSH
4303: LD_INT 54
4305: PUSH
4306: LD_INT 96
4308: PUSH
4309: LD_INT 55
4311: PUSH
4312: LD_INT 94
4314: PUSH
4315: LD_INT 56
4317: PUSH
4318: LD_INT 145
4320: PUSH
4321: LD_INT 102
4323: PUSH
4324: LD_INT 146
4326: PUSH
4327: LD_INT 100
4329: PUSH
4330: LD_INT 97
4332: PUSH
4333: LD_INT 114
4335: PUSH
4336: LD_INT 99
4338: PUSH
4339: LD_INT 117
4341: PUSH
4342: LD_INT 54
4344: PUSH
4345: LD_INT 58
4347: PUSH
4348: LD_INT 55
4350: PUSH
4351: LD_INT 56
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ; 2 , 3 :
4388: GO 4896
4390: LD_INT 2
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4404
4396: LD_INT 3
4398: DOUBLE
4399: EQUAL
4400: IFTRUE 4404
4402: GO 4895
4404: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4405: LD_ADDR_VAR 0 2
4409: PUSH
4410: LD_INT 44
4412: PUSH
4413: LD_INT 22
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 62
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 106
4430: PUSH
4431: LD_INT 68
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 143
4439: PUSH
4440: LD_INT 96
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 90
4448: PUSH
4449: LD_INT 115
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 56
4457: PUSH
4458: LD_INT 59
4460: PUSH
4461: LD_INT 5
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 45
4491: PUSH
4492: LD_INT 46
4494: PUSH
4495: LD_INT 47
4497: PUSH
4498: LD_INT 48
4500: PUSH
4501: LD_INT 49
4503: PUSH
4504: LD_INT 50
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 45
4522: PUSH
4523: LD_INT 46
4525: PUSH
4526: LD_INT 47
4528: PUSH
4529: LD_INT 48
4531: PUSH
4532: LD_INT 49
4534: PUSH
4535: LD_INT 50
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4546: LD_ADDR_VAR 0 15
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 5
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 27
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 22
4593: PUSH
4594: LD_INT 62
4596: PUSH
4597: LD_INT 8
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 68
4605: PUSH
4606: LD_INT 143
4608: PUSH
4609: LD_INT 96
4611: PUSH
4612: LD_INT 90
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 56
4620: PUSH
4621: LD_INT 59
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4640: LD_ADDR_VAR 0 6
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4655: LD_ADDR_VAR 0 5
4659: PUSH
4660: LD_INT 51
4662: PUSH
4663: LD_INT 29
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: LD_INT 55
4671: PUSH
4672: LD_INT 33
4674: PUSH
4675: LD_INT 5
4677: PUSH
4678: LD_INT 97
4680: PUSH
4681: LD_INT 37
4683: PUSH
4684: LD_INT 0
4686: PUSH
4687: LD_INT 112
4689: PUSH
4690: LD_INT 72
4692: PUSH
4693: LD_INT 5
4695: PUSH
4696: LD_INT 120
4698: PUSH
4699: LD_INT 93
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 25
4707: PUSH
4708: LD_INT 45
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 27
4716: PUSH
4717: LD_INT 48
4719: PUSH
4720: LD_INT 1
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 51
4728: PUSH
4729: LD_INT 1
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 13
4774: PUSH
4775: LD_INT 35
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 98
4783: PUSH
4784: LD_INT 20
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 97
4795: PUSH
4796: LD_INT 33
4798: PUSH
4799: LD_INT 101
4801: PUSH
4802: LD_INT 54
4804: PUSH
4805: LD_INT 98
4807: PUSH
4808: LD_INT 54
4810: PUSH
4811: LD_INT 96
4813: PUSH
4814: LD_INT 55
4816: PUSH
4817: LD_INT 94
4819: PUSH
4820: LD_INT 56
4822: PUSH
4823: LD_INT 145
4825: PUSH
4826: LD_INT 102
4828: PUSH
4829: LD_INT 146
4831: PUSH
4832: LD_INT 100
4834: PUSH
4835: LD_INT 97
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: LD_INT 99
4843: PUSH
4844: LD_INT 117
4846: PUSH
4847: LD_INT 54
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 55
4855: PUSH
4856: LD_INT 56
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// end ; end ;
4893: GO 4896
4895: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4896: LD_ADDR_EXP 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_OWVAR 67
4919: ARRAY
4920: ST_TO_ADDR
// if Difficulty > 1 then
4921: LD_OWVAR 67
4925: PUSH
4926: LD_INT 1
4928: GREATER
4929: IFFALSE 4944
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4931: LD_INT 5
4933: PPUSH
4934: LD_INT 2
4936: PPUSH
4937: LD_INT 2
4939: PPUSH
4940: CALL_OW 322
// if Difficulty > 1 then
4944: LD_OWVAR 67
4948: PUSH
4949: LD_INT 1
4951: GREATER
4952: IFFALSE 4967
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4954: LD_INT 52
4956: PPUSH
4957: LD_INT 2
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 322
// miners := [ ] ;
4967: LD_ADDR_EXP 15
4971: PUSH
4972: EMPTY
4973: ST_TO_ADDR
// hovers := [ ] ;
4974: LD_ADDR_EXP 16
4978: PUSH
4979: EMPTY
4980: ST_TO_ADDR
// hovers_driver := [ ] ;
4981: LD_ADDR_EXP 17
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tanks := [ ] ;
4988: LD_ADDR_EXP 18
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// p := 1 ;
4995: LD_ADDR_VAR 0 10
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
5003: LD_ADDR_OWVAR 43
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: LD_INT 6
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: PUSH
5031: LD_INT 1
5033: PLUS
5034: ARRAY
5035: ST_TO_ADDR
// bc_type = b_breastwork ;
5036: LD_ADDR_OWVAR 42
5040: PUSH
5041: LD_INT 31
5043: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
5044: LD_ADDR_VAR 0 9
5048: PUSH
5049: DOUBLE
5050: LD_INT 1
5052: DEC
5053: ST_TO_ADDR
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 3
5061: DIVREAL
5062: PUSH
5063: FOR_TO
5064: IFFALSE 5241
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
5066: LD_ADDR_VAR 0 13
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 10
5080: ARRAY
5081: PPUSH
5082: LD_VAR 0 2
5086: PUSH
5087: LD_VAR 0 10
5091: PUSH
5092: LD_INT 1
5094: PLUS
5095: ARRAY
5096: PPUSH
5097: LD_VAR 0 2
5101: PUSH
5102: LD_VAR 0 10
5106: PUSH
5107: LD_INT 2
5109: PLUS
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5117: LD_INT 0
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: LD_EXP 3
5127: PPUSH
5128: CALL_OW 380
// un := CreateHuman ;
5132: LD_ADDR_VAR 0 12
5136: PUSH
5137: CALL_OW 44
5141: ST_TO_ADDR
// dir := GetDir ( b ) ;
5142: LD_ADDR_VAR 0 16
5146: PUSH
5147: LD_VAR 0 13
5151: PPUSH
5152: CALL_OW 254
5156: ST_TO_ADDR
// if dir < 3 then
5157: LD_VAR 0 16
5161: PUSH
5162: LD_INT 3
5164: LESS
5165: IFFALSE 5183
// dir := dir + 3 else
5167: LD_ADDR_VAR 0 16
5171: PUSH
5172: LD_VAR 0 16
5176: PUSH
5177: LD_INT 3
5179: PLUS
5180: ST_TO_ADDR
5181: GO 5197
// dir := dir - 3 ;
5183: LD_ADDR_VAR 0 16
5187: PUSH
5188: LD_VAR 0 16
5192: PUSH
5193: LD_INT 3
5195: MINUS
5196: ST_TO_ADDR
// SetDir ( un , dir ) ;
5197: LD_VAR 0 12
5201: PPUSH
5202: LD_VAR 0 16
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5211: LD_VAR 0 12
5215: PPUSH
5216: LD_VAR 0 13
5220: PPUSH
5221: CALL_OW 52
// p := p + 3 ;
5225: LD_ADDR_VAR 0 10
5229: PUSH
5230: LD_VAR 0 10
5234: PUSH
5235: LD_INT 3
5237: PLUS
5238: ST_TO_ADDR
// end ;
5239: GO 5063
5241: POP
5242: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5243: LD_ADDR_VAR 0 14
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: LD_INT 4
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_OWVAR 67
5266: ARRAY
5267: ST_TO_ADDR
// for i = 1 to sold_stand do
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_VAR 0 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5463
// for p = 1 to x do
5286: LD_ADDR_VAR 0 10
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 14
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5459
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 9
5313: ARRAY
5314: PUSH
5315: LD_INT 10
5317: EQUAL
5318: PUSH
5319: LD_EXP 2
5323: PUSH
5324: LD_INT 2
5326: EQUAL
5327: PUSH
5328: LD_OWVAR 67
5332: PUSH
5333: LD_INT 1
5335: GREATER
5336: AND
5337: PUSH
5338: LD_VAR 0 10
5342: PUSH
5343: LD_VAR 0 14
5347: EQUAL
5348: AND
5349: OR
5350: IFFALSE 5369
// PrepareHuman ( false , class_mortar , skill ) else
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 8
5357: PPUSH
5358: LD_EXP 3
5362: PPUSH
5363: CALL_OW 380
5367: GO 5384
// PrepareHuman ( false , 1 , skill ) ;
5369: LD_INT 0
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_EXP 3
5379: PPUSH
5380: CALL_OW 380
// un := CreateHuman ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: CALL_OW 44
5393: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5394: LD_VAR 0 12
5398: PPUSH
5399: CALL_OW 257
5403: PUSH
5404: LD_INT 1
5406: EQUAL
5407: IFFALSE 5425
// miners := miners ^ un ;
5409: LD_ADDR_EXP 15
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_VAR 0 12
5423: ADD
5424: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5425: LD_VAR 0 12
5429: PPUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 9
5439: ARRAY
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: CALL_OW 49
// ComHold ( un ) ;
5448: LD_VAR 0 12
5452: PPUSH
5453: CALL_OW 140
// end ;
5457: GO 5301
5459: POP
5460: POP
5461: GO 5283
5463: POP
5464: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5465: LD_ADDR_VAR 0 14
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: ST_TO_ADDR
// for i = 1 to sold_crawl do
5490: LD_ADDR_VAR 0 9
5494: PUSH
5495: DOUBLE
5496: LD_INT 1
5498: DEC
5499: ST_TO_ADDR
5500: LD_VAR 0 4
5504: PUSH
5505: FOR_TO
5506: IFFALSE 5618
// for p = 1 to x do
5508: LD_ADDR_VAR 0 10
5512: PUSH
5513: DOUBLE
5514: LD_INT 1
5516: DEC
5517: ST_TO_ADDR
5518: LD_VAR 0 14
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5614
// begin PrepareHuman ( false , 1 , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_EXP 3
5536: PPUSH
5537: CALL_OW 380
// un := CreateHuman ;
5541: LD_ADDR_VAR 0 12
5545: PUSH
5546: CALL_OW 44
5550: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5551: LD_VAR 0 12
5555: PPUSH
5556: LD_VAR 0 15
5560: PUSH
5561: LD_VAR 0 9
5565: ARRAY
5566: PPUSH
5567: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5571: LD_VAR 0 12
5575: PPUSH
5576: LD_VAR 0 4
5580: PUSH
5581: LD_VAR 0 9
5585: ARRAY
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 49
// ComCrawl ( un ) ;
5594: LD_VAR 0 12
5598: PPUSH
5599: CALL_OW 137
// AddComHold ( un ) ;
5603: LD_VAR 0 12
5607: PPUSH
5608: CALL_OW 200
// end ;
5612: GO 5523
5614: POP
5615: POP
5616: GO 5505
5618: POP
5619: POP
// p := 1 ;
5620: LD_ADDR_VAR 0 10
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5628: LD_ADDR_VAR 0 9
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_VAR 0 8
5642: PUSH
5643: LD_INT 2
5645: DIVREAL
5646: PUSH
5647: FOR_TO
5648: IFFALSE 5702
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5650: LD_VAR 0 8
5654: PUSH
5655: LD_VAR 0 10
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 8
5665: PUSH
5666: LD_VAR 0 10
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: LD_INT 2
5678: PPUSH
5679: LD_INT 10
5681: PPUSH
5682: CALL_OW 330
// p := p + 2 ;
5686: LD_ADDR_VAR 0 10
5690: PUSH
5691: LD_VAR 0 10
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: GO 5647
5702: POP
5703: POP
// for i = 1 to hover_x [ 2 ] do
5704: LD_ADDR_VAR 0 9
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_VAR 0 6
5718: PUSH
5719: LD_INT 2
5721: ARRAY
5722: PUSH
5723: FOR_TO
5724: IFFALSE 5873
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5726: LD_INT 0
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 3
5736: PUSH
5737: LD_INT 1
5739: PLUS
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 12
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5755: LD_ADDR_EXP 17
5759: PUSH
5760: LD_EXP 17
5764: PUSH
5765: LD_VAR 0 12
5769: ADD
5770: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ 92 , ar_double_machine_gun ] [ i mod 2 + 1 ] ) ;
5771: LD_ADDR_VAR 0 11
5775: PUSH
5776: LD_INT 2
5778: PPUSH
5779: LD_INT 2
5781: PPUSH
5782: LD_INT 11
5784: PPUSH
5785: LD_INT 2
5787: PPUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_INT 92
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_VAR 0 9
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL 7106 0 6
5819: ST_TO_ADDR
// hovers := hovers ^ veh ;
5820: LD_ADDR_EXP 16
5824: PUSH
5825: LD_EXP 16
5829: PUSH
5830: LD_VAR 0 11
5834: ADD
5835: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5836: LD_VAR 0 11
5840: PPUSH
5841: LD_VAR 0 6
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5857: LD_VAR 0 12
5861: PPUSH
5862: LD_VAR 0 11
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5723
5873: POP
5874: POP
// p := 1 ;
5875: LD_ADDR_VAR 0 10
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5883: LD_ADDR_VAR 0 9
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 5
5897: PUSH
5898: LD_INT 3
5900: DIVREAL
5901: PUSH
5902: FOR_TO
5903: IFFALSE 6077
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_EXP 3
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 380
// un := CreateHuman ;
5924: LD_ADDR_VAR 0 12
5928: PUSH
5929: CALL_OW 44
5933: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5934: LD_ADDR_VAR 0 11
5938: PUSH
5939: LD_INT 2
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: LD_INT 14
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 27
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 12
5978: ARRAY
5979: PPUSH
5980: CALL 7106 0 6
5984: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5985: LD_VAR 0 11
5989: PPUSH
5990: LD_VAR 0 5
5994: PUSH
5995: LD_VAR 0 10
5999: PUSH
6000: LD_INT 2
6002: PLUS
6003: ARRAY
6004: PPUSH
6005: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
6009: LD_VAR 0 11
6013: PPUSH
6014: LD_VAR 0 5
6018: PUSH
6019: LD_VAR 0 10
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 10
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ARRAY
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
6047: LD_VAR 0 12
6051: PPUSH
6052: LD_VAR 0 11
6056: PPUSH
6057: CALL_OW 52
// p := p + 3 ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 10
6070: PUSH
6071: LD_INT 3
6073: PLUS
6074: ST_TO_ADDR
// end ;
6075: GO 5902
6077: POP
6078: POP
// p := 1 ;
6079: LD_ADDR_VAR 0 10
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
6087: LD_ADDR_VAR 0 9
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_VAR 0 7
6101: PUSH
6102: LD_INT 2
6104: DIVREAL
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6161
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6109: LD_VAR 0 7
6113: PUSH
6114: LD_VAR 0 10
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 7
6124: PUSH
6125: LD_VAR 0 10
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: ARRAY
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 454
// p := p + 2 ;
6145: LD_ADDR_VAR 0 10
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: LD_INT 2
6157: PLUS
6158: ST_TO_ADDR
// end ;
6159: GO 6106
6161: POP
6162: POP
// mines := mines_xy ;
6163: LD_ADDR_EXP 14
6167: PUSH
6168: LD_VAR 0 7
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 1
6177: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6178: GO 6180
6180: DISABLE
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// begin enable ;
6186: ENABLE
// if tanks > 0 then
6187: LD_EXP 18
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: IFFALSE 6303
// begin for i = 1 to tanks do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_EXP 18
6211: PUSH
6212: FOR_TO
6213: IFFALSE 6301
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6215: LD_INT 2
6217: PPUSH
6218: LD_EXP 18
6222: PUSH
6223: LD_VAR 0 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 292
6233: PUSH
6234: LD_EXP 18
6238: PUSH
6239: LD_VAR 0 3
6243: ARRAY
6244: PPUSH
6245: CALL_OW 314
6249: NOT
6250: AND
6251: IFFALSE 6299
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6253: LD_EXP 18
6257: PUSH
6258: LD_VAR 0 3
6262: ARRAY
6263: PPUSH
6264: LD_INT 22
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PPUSH
6279: LD_EXP 18
6283: PUSH
6284: LD_VAR 0 3
6288: ARRAY
6289: PPUSH
6290: CALL_OW 74
6294: PPUSH
6295: CALL_OW 115
6299: GO 6212
6301: POP
6302: POP
// end ; if hovers > 0 then
6303: LD_EXP 16
6307: PUSH
6308: LD_INT 0
6310: GREATER
6311: IFFALSE 6636
// begin for i = 1 to hovers do
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_EXP 16
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6634
// begin if GetLives ( hovers [ i ] ) < 600 then
6331: LD_EXP 16
6335: PUSH
6336: LD_VAR 0 3
6340: ARRAY
6341: PPUSH
6342: CALL_OW 256
6346: PUSH
6347: LD_INT 600
6349: LESS
6350: IFFALSE 6461
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6352: LD_EXP 16
6356: PUSH
6357: LD_VAR 0 3
6361: ARRAY
6362: PPUSH
6363: LD_INT 18
6365: PPUSH
6366: CALL_OW 308
6370: NOT
6371: IFFALSE 6393
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6373: LD_EXP 16
6377: PUSH
6378: LD_VAR 0 3
6382: ARRAY
6383: PPUSH
6384: LD_INT 18
6386: PPUSH
6387: CALL_OW 113
6391: GO 6461
// if IsDrivenBy ( hovers [ i ] ) then
6393: LD_EXP 16
6397: PUSH
6398: LD_VAR 0 3
6402: ARRAY
6403: PPUSH
6404: CALL_OW 311
6408: IFFALSE 6461
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6410: LD_EXP 16
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: PPUSH
6421: CALL_OW 311
6425: PPUSH
6426: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6430: LD_EXP 16
6434: PUSH
6435: LD_VAR 0 3
6439: ARRAY
6440: PPUSH
6441: CALL_OW 311
6445: PPUSH
6446: LD_EXP 16
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PPUSH
6457: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6461: LD_EXP 16
6465: PUSH
6466: LD_VAR 0 3
6470: ARRAY
6471: PPUSH
6472: CALL_OW 256
6476: PUSH
6477: LD_INT 998
6479: GREATER
6480: IFFALSE 6632
// begin if not IsDrivenBy ( hovers [ i ] ) then
6482: LD_EXP 16
6486: PUSH
6487: LD_VAR 0 3
6491: ARRAY
6492: PPUSH
6493: CALL_OW 311
6497: NOT
6498: IFFALSE 6535
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6500: LD_EXP 17
6504: PUSH
6505: LD_VAR 0 3
6509: ARRAY
6510: PPUSH
6511: LD_EXP 16
6515: PPUSH
6516: LD_INT 58
6518: PUSH
6519: EMPTY
6520: LIST
6521: PPUSH
6522: CALL_OW 72
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6535: LD_INT 19
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: PUSH
6553: LD_INT 0
6555: GREATER
6556: IFFALSE 6632
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6558: LD_EXP 16
6562: PUSH
6563: LD_VAR 0 3
6567: ARRAY
6568: PPUSH
6569: CALL_OW 311
6573: PPUSH
6574: CALL_OW 314
6578: NOT
6579: IFFALSE 6632
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6581: LD_EXP 16
6585: PUSH
6586: LD_VAR 0 3
6590: ARRAY
6591: PPUSH
6592: CALL_OW 311
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 69
6611: PPUSH
6612: LD_EXP 16
6616: PUSH
6617: LD_VAR 0 3
6621: ARRAY
6622: PPUSH
6623: CALL_OW 74
6627: PPUSH
6628: CALL_OW 115
// end ; end ;
6632: GO 6328
6634: POP
6635: POP
// end ; p := 1 ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 14
6658: PUSH
6659: LD_INT 2
6661: DIVREAL
6662: PUSH
6663: FOR_TO
6664: IFFALSE 6882
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6666: LD_EXP 14
6670: PUSH
6671: LD_VAR 0 2
6675: ARRAY
6676: PPUSH
6677: LD_EXP 14
6681: PUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_INT 1
6689: PLUS
6690: ARRAY
6691: PPUSH
6692: CALL_OW 428
6696: PPUSH
6697: CALL_OW 255
6701: PUSH
6702: LD_INT 3
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: IN
6712: IFFALSE 6866
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6714: LD_EXP 14
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PPUSH
6725: LD_EXP 14
6729: PUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PPUSH
6740: CALL_OW 458
6744: IFFALSE 6866
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6746: LD_EXP 15
6750: PPUSH
6751: LD_EXP 14
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PPUSH
6762: LD_EXP 14
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: PLUS
6775: ARRAY
6776: PPUSH
6777: CALL_OW 73
6781: PPUSH
6782: LD_EXP 14
6786: PUSH
6787: LD_VAR 0 2
6791: ARRAY
6792: PPUSH
6793: LD_EXP 14
6797: PUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: PUSH
6813: LD_INT 30
6815: LESS
6816: IFFALSE 6866
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6818: LD_EXP 14
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: PPUSH
6829: LD_EXP 14
6833: PUSH
6834: LD_VAR 0 2
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: CALL_OW 456
// if not mines_trigger then
6851: LD_EXP 10
6855: NOT
6856: IFFALSE 6866
// mines_trigger := true ;
6858: LD_ADDR_EXP 10
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// end ; p := p + 2 ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: ST_TO_ADDR
// end ;
6880: GO 6663
6882: POP
6883: POP
// end ;
6884: PPOPN 3
6886: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6887: LD_EXP 4
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: LD_EXP 6
6900: PPUSH
6901: CALL_OW 296
6905: PUSH
6906: LD_INT 20
6908: GREATER
6909: PUSH
6910: LD_EXP 4
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 6
6923: PPUSH
6924: CALL_OW 296
6928: PUSH
6929: LD_INT 20
6931: GREATER
6932: OR
6933: IFFALSE 7048
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin for i = 1 to Difficulty + 1 do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_OWVAR 67
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7046
// begin uc_side := 2 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 2
6971: ST_TO_ADDR
// uc_nation := 2 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 2
6979: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6980: LD_INT 0
6982: PPUSH
6983: LD_INT 1
6985: PPUSH
6986: LD_EXP 3
6990: PPUSH
6991: CALL_OW 380
// un := CreateHuman ;
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: CALL_OW 44
7004: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 44
7012: PPUSH
7013: LD_INT 0
7015: PPUSH
7016: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
7020: LD_VAR 0 2
7024: PPUSH
7025: LD_EXP 4
7029: PPUSH
7030: LD_VAR 0 2
7034: PPUSH
7035: CALL_OW 74
7039: PPUSH
7040: CALL_OW 115
// end ;
7044: GO 6961
7046: POP
7047: POP
// end ;
7048: PPOPN 2
7050: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
7051: LD_VAR 0 2
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 31
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: IN
7092: IFFALSE 7103
// ComRetreat ( driver ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: CALL 7235 0 1
// end ; end_of_file
7103: PPOPN 4
7105: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7106: LD_INT 0
7108: PPUSH
// uc_side := side ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_VAR 0 1
7118: ST_TO_ADDR
// uc_nation := nation ;
7119: LD_ADDR_OWVAR 21
7123: PUSH
7124: LD_VAR 0 2
7128: ST_TO_ADDR
// vc_chassis := chassis ;
7129: LD_ADDR_OWVAR 37
7133: PUSH
7134: LD_VAR 0 3
7138: ST_TO_ADDR
// vc_engine := engine ;
7139: LD_ADDR_OWVAR 39
7143: PUSH
7144: LD_VAR 0 4
7148: ST_TO_ADDR
// vc_control := control ;
7149: LD_ADDR_OWVAR 38
7153: PUSH
7154: LD_VAR 0 5
7158: ST_TO_ADDR
// vc_weapon := weapon ;
7159: LD_ADDR_OWVAR 40
7163: PUSH
7164: LD_VAR 0 6
7168: ST_TO_ADDR
// result := CreateVehicle ;
7169: LD_ADDR_VAR 0 7
7173: PUSH
7174: CALL_OW 45
7178: ST_TO_ADDR
// end ;
7179: LD_VAR 0 7
7183: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7184: LD_INT 0
7186: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_VAR 0 3
7201: PPUSH
7202: CALL_OW 297
7206: PUSH
7207: LD_INT 6
7209: LESS
7210: IFFALSE 7222
// result := true else
7212: LD_ADDR_VAR 0 4
7216: PUSH
7217: LD_INT 1
7219: ST_TO_ADDR
7220: GO 7230
// result := false ;
7222: LD_ADDR_VAR 0 4
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 4
7234: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 81
7249: PUSH
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL_OW 255
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 74
7278: PPUSH
7279: CALL_OW 119
// dir := GetDir ( un ) ;
7283: LD_ADDR_VAR 0 4
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 254
7297: ST_TO_ADDR
// dir := dir - 3 ;
7298: LD_ADDR_VAR 0 4
7302: PUSH
7303: LD_VAR 0 4
7307: PUSH
7308: LD_INT 3
7310: MINUS
7311: ST_TO_ADDR
// if dir < 0 then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_INT 0
7319: LESS
7320: IFFALSE 7336
// dir := dir + 6 ;
7322: LD_ADDR_VAR 0 4
7326: PUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_INT 6
7334: PLUS
7335: ST_TO_ADDR
// while true do
7336: LD_INT 1
7338: IFFALSE 7709
// begin coord_dist := 3 ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 250
7362: PPUSH
7363: LD_VAR 0 4
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL_OW 272
7377: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 1
7387: PPUSH
7388: CALL_OW 251
7392: PPUSH
7393: LD_VAR 0 4
7397: PPUSH
7398: LD_VAR 0 3
7402: PPUSH
7403: CALL_OW 273
7407: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7408: LD_VAR 0 5
7412: PPUSH
7413: LD_VAR 0 6
7417: PPUSH
7418: CALL_OW 351
7422: PUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 488
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: OR
7442: PUSH
7443: LD_VAR 0 5
7447: PPUSH
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 428
7457: PUSH
7458: LD_INT 0
7460: NONEQUAL
7461: OR
7462: IFFALSE 7623
// begin repeat begin coord_dist := coord_dist + 1 ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_VAR 0 3
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ST_TO_ADDR
// dir := dir + 1 ;
7478: LD_ADDR_VAR 0 4
7482: PUSH
7483: LD_VAR 0 4
7487: PUSH
7488: LD_INT 1
7490: PLUS
7491: ST_TO_ADDR
// if dir > 5 then
7492: LD_VAR 0 4
7496: PUSH
7497: LD_INT 5
7499: GREATER
7500: IFFALSE 7510
// dir = 0 ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 250
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: LD_VAR 0 3
7534: PPUSH
7535: CALL_OW 272
7539: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7540: LD_ADDR_VAR 0 6
7544: PUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 251
7554: PPUSH
7555: LD_VAR 0 4
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 273
7569: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7570: LD_VAR 0 5
7574: PPUSH
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 351
7584: NOT
7585: PUSH
7586: LD_VAR 0 5
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 488
7600: AND
7601: PUSH
7602: LD_VAR 0 5
7606: PPUSH
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 428
7616: PUSH
7617: LD_INT 0
7619: EQUAL
7620: AND
7621: IFFALSE 7464
// end ; ComMoveXY ( un , x , y ) ;
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_VAR 0 5
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 111
// Wait ( 0 0$1 ) ;
7642: LD_INT 35
7644: PPUSH
7645: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7649: LD_VAR 0 1
7653: PPUSH
7654: LD_INT 81
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: PPUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: CALL_OW 74
7685: PPUSH
7686: CALL_OW 296
7690: PUSH
7691: LD_INT 10
7693: GREATEREQUAL
7694: IFFALSE 7707
// begin ComStop ( un ) ;
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 141
// break ;
7705: GO 7709
// end ; end ;
7707: GO 7336
// end ; end_of_file end_of_file
7709: LD_VAR 0 2
7713: RET
// every 0 0$1 do
7714: GO 7716
7716: DISABLE
// begin enable ;
7717: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7718: LD_STRING updateTimer(
7720: PUSH
7721: LD_OWVAR 1
7725: STR
7726: PUSH
7727: LD_STRING );
7729: STR
7730: PPUSH
7731: CALL_OW 559
// end ;
7735: END
// on MapStart ( p ) do begin if streamModeActive then
7736: LD_EXP 19
7740: IFFALSE 7749
// DefineStreamItems ( true ) ;
7742: LD_INT 1
7744: PPUSH
7745: CALL 9397 0 1
// UpdateFactoryWaypoints ( ) ;
7749: CALL 63403 0 0
// end ;
7753: PPOPN 1
7755: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7756: LD_INT 0
7758: PPUSH
// if p2 = 100 then
7759: LD_VAR 0 2
7763: PUSH
7764: LD_INT 100
7766: EQUAL
7767: IFFALSE 8770
// begin if not StreamModeActive then
7769: LD_EXP 19
7773: NOT
7774: IFFALSE 7784
// StreamModeActive := true ;
7776: LD_ADDR_EXP 19
7780: PUSH
7781: LD_INT 1
7783: ST_TO_ADDR
// if p3 = 0 then
7784: LD_VAR 0 3
7788: PUSH
7789: LD_INT 0
7791: EQUAL
7792: IFFALSE 7798
// InitStreamMode ;
7794: CALL 8933 0 0
// if p3 = 1 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 1
7805: EQUAL
7806: IFFALSE 7816
// sRocket := true ;
7808: LD_ADDR_EXP 24
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 2 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 2
7823: EQUAL
7824: IFFALSE 7834
// sSpeed := true ;
7826: LD_ADDR_EXP 23
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 3 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 3
7841: EQUAL
7842: IFFALSE 7852
// sEngine := true ;
7844: LD_ADDR_EXP 25
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 4 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 4
7859: EQUAL
7860: IFFALSE 7870
// sSpec := true ;
7862: LD_ADDR_EXP 22
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 5 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 5
7877: EQUAL
7878: IFFALSE 7888
// sLevel := true ;
7880: LD_ADDR_EXP 26
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 6 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 6
7895: EQUAL
7896: IFFALSE 7906
// sArmoury := true ;
7898: LD_ADDR_EXP 27
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 7 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 7
7913: EQUAL
7914: IFFALSE 7924
// sRadar := true ;
7916: LD_ADDR_EXP 28
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 8 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 8
7931: EQUAL
7932: IFFALSE 7942
// sBunker := true ;
7934: LD_ADDR_EXP 29
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 9 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 9
7949: EQUAL
7950: IFFALSE 7960
// sHack := true ;
7952: LD_ADDR_EXP 30
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 10 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 10
7967: EQUAL
7968: IFFALSE 7978
// sFire := true ;
7970: LD_ADDR_EXP 31
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 11 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 11
7985: EQUAL
7986: IFFALSE 7996
// sRefresh := true ;
7988: LD_ADDR_EXP 32
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 12 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 12
8003: EQUAL
8004: IFFALSE 8014
// sExp := true ;
8006: LD_ADDR_EXP 33
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 13 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 13
8021: EQUAL
8022: IFFALSE 8032
// sDepot := true ;
8024: LD_ADDR_EXP 34
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 14 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 14
8039: EQUAL
8040: IFFALSE 8050
// sFlag := true ;
8042: LD_ADDR_EXP 35
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 15 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 15
8057: EQUAL
8058: IFFALSE 8068
// sKamikadze := true ;
8060: LD_ADDR_EXP 43
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 16 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 16
8075: EQUAL
8076: IFFALSE 8086
// sTroll := true ;
8078: LD_ADDR_EXP 44
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 17 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 17
8093: EQUAL
8094: IFFALSE 8104
// sSlow := true ;
8096: LD_ADDR_EXP 45
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 18 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 18
8111: EQUAL
8112: IFFALSE 8122
// sLack := true ;
8114: LD_ADDR_EXP 46
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 19 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 19
8129: EQUAL
8130: IFFALSE 8140
// sTank := true ;
8132: LD_ADDR_EXP 48
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 20 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 20
8147: EQUAL
8148: IFFALSE 8158
// sRemote := true ;
8150: LD_ADDR_EXP 49
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 21 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 21
8165: EQUAL
8166: IFFALSE 8176
// sPowell := true ;
8168: LD_ADDR_EXP 50
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 22 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 22
8183: EQUAL
8184: IFFALSE 8194
// sTeleport := true ;
8186: LD_ADDR_EXP 53
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 23 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 23
8201: EQUAL
8202: IFFALSE 8212
// sOilTower := true ;
8204: LD_ADDR_EXP 55
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 24 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 24
8219: EQUAL
8220: IFFALSE 8230
// sShovel := true ;
8222: LD_ADDR_EXP 56
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 25 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 25
8237: EQUAL
8238: IFFALSE 8248
// sSheik := true ;
8240: LD_ADDR_EXP 57
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 26 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 26
8255: EQUAL
8256: IFFALSE 8266
// sEarthquake := true ;
8258: LD_ADDR_EXP 59
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 27 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 27
8273: EQUAL
8274: IFFALSE 8284
// sAI := true ;
8276: LD_ADDR_EXP 60
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 28 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 28
8291: EQUAL
8292: IFFALSE 8302
// sCargo := true ;
8294: LD_ADDR_EXP 63
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 29 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 29
8309: EQUAL
8310: IFFALSE 8320
// sDLaser := true ;
8312: LD_ADDR_EXP 64
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 30 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 30
8327: EQUAL
8328: IFFALSE 8338
// sExchange := true ;
8330: LD_ADDR_EXP 65
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 31 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 31
8345: EQUAL
8346: IFFALSE 8356
// sFac := true ;
8348: LD_ADDR_EXP 66
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 32 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 32
8363: EQUAL
8364: IFFALSE 8374
// sPower := true ;
8366: LD_ADDR_EXP 67
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 33 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 33
8381: EQUAL
8382: IFFALSE 8392
// sRandom := true ;
8384: LD_ADDR_EXP 68
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 34 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 34
8399: EQUAL
8400: IFFALSE 8410
// sShield := true ;
8402: LD_ADDR_EXP 69
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 35 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 35
8417: EQUAL
8418: IFFALSE 8428
// sTime := true ;
8420: LD_ADDR_EXP 70
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 36 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 36
8435: EQUAL
8436: IFFALSE 8446
// sTools := true ;
8438: LD_ADDR_EXP 71
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 101 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 101
8453: EQUAL
8454: IFFALSE 8464
// sSold := true ;
8456: LD_ADDR_EXP 36
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 102 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 102
8471: EQUAL
8472: IFFALSE 8482
// sDiff := true ;
8474: LD_ADDR_EXP 37
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 103 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 103
8489: EQUAL
8490: IFFALSE 8500
// sFog := true ;
8492: LD_ADDR_EXP 40
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 104 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 104
8507: EQUAL
8508: IFFALSE 8518
// sReset := true ;
8510: LD_ADDR_EXP 41
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 105 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 105
8525: EQUAL
8526: IFFALSE 8536
// sSun := true ;
8528: LD_ADDR_EXP 42
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 106 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 106
8543: EQUAL
8544: IFFALSE 8554
// sTiger := true ;
8546: LD_ADDR_EXP 38
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 107 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 107
8561: EQUAL
8562: IFFALSE 8572
// sBomb := true ;
8564: LD_ADDR_EXP 39
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 108 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 108
8579: EQUAL
8580: IFFALSE 8590
// sWound := true ;
8582: LD_ADDR_EXP 47
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 109 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 109
8597: EQUAL
8598: IFFALSE 8608
// sBetray := true ;
8600: LD_ADDR_EXP 51
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 110 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 110
8615: EQUAL
8616: IFFALSE 8626
// sContamin := true ;
8618: LD_ADDR_EXP 52
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 111 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 111
8633: EQUAL
8634: IFFALSE 8644
// sOil := true ;
8636: LD_ADDR_EXP 54
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 112 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 112
8651: EQUAL
8652: IFFALSE 8662
// sStu := true ;
8654: LD_ADDR_EXP 58
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 113 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 113
8669: EQUAL
8670: IFFALSE 8680
// sBazooka := true ;
8672: LD_ADDR_EXP 61
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 114 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 114
8687: EQUAL
8688: IFFALSE 8698
// sMortar := true ;
8690: LD_ADDR_EXP 62
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 115 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 115
8705: EQUAL
8706: IFFALSE 8716
// sRanger := true ;
8708: LD_ADDR_EXP 72
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 116 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 116
8723: EQUAL
8724: IFFALSE 8734
// sComputer := true ;
8726: LD_ADDR_EXP 73
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 117 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 117
8741: EQUAL
8742: IFFALSE 8752
// s30 := true ;
8744: LD_ADDR_EXP 74
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 118 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 118
8759: EQUAL
8760: IFFALSE 8770
// s60 := true ;
8762: LD_ADDR_EXP 75
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// end ; if p2 = 101 then
8770: LD_VAR 0 2
8774: PUSH
8775: LD_INT 101
8777: EQUAL
8778: IFFALSE 8906
// begin case p3 of 1 :
8780: LD_VAR 0 3
8784: PUSH
8785: LD_INT 1
8787: DOUBLE
8788: EQUAL
8789: IFTRUE 8793
8791: GO 8800
8793: POP
// hHackUnlimitedResources ; 2 :
8794: CALL 21004 0 0
8798: GO 8906
8800: LD_INT 2
8802: DOUBLE
8803: EQUAL
8804: IFTRUE 8808
8806: GO 8815
8808: POP
// hHackSetLevel10 ; 3 :
8809: CALL 21137 0 0
8813: GO 8906
8815: LD_INT 3
8817: DOUBLE
8818: EQUAL
8819: IFTRUE 8823
8821: GO 8830
8823: POP
// hHackSetLevel10YourUnits ; 4 :
8824: CALL 21222 0 0
8828: GO 8906
8830: LD_INT 4
8832: DOUBLE
8833: EQUAL
8834: IFTRUE 8838
8836: GO 8845
8838: POP
// hHackInvincible ; 5 :
8839: CALL 21670 0 0
8843: GO 8906
8845: LD_INT 5
8847: DOUBLE
8848: EQUAL
8849: IFTRUE 8853
8851: GO 8860
8853: POP
// hHackInvisible ; 6 :
8854: CALL 21781 0 0
8858: GO 8906
8860: LD_INT 6
8862: DOUBLE
8863: EQUAL
8864: IFTRUE 8868
8866: GO 8875
8868: POP
// hHackChangeYourSide ; 7 :
8869: CALL 21838 0 0
8873: GO 8906
8875: LD_INT 7
8877: DOUBLE
8878: EQUAL
8879: IFTRUE 8883
8881: GO 8890
8883: POP
// hHackChangeUnitSide ; 8 :
8884: CALL 21880 0 0
8888: GO 8906
8890: LD_INT 8
8892: DOUBLE
8893: EQUAL
8894: IFTRUE 8898
8896: GO 8905
8898: POP
// hHackFog ; end ;
8899: CALL 21981 0 0
8903: GO 8906
8905: POP
// end ; end ;
8906: LD_VAR 0 7
8910: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8911: GO 8913
8913: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8914: LD_STRING initStreamRollete();
8916: PPUSH
8917: CALL_OW 559
// InitStreamMode ;
8921: CALL 8933 0 0
// DefineStreamItems ( false ) ;
8925: LD_INT 0
8927: PPUSH
8928: CALL 9397 0 1
// end ;
8932: END
// function InitStreamMode ; begin
8933: LD_INT 0
8935: PPUSH
// streamModeActive := false ;
8936: LD_ADDR_EXP 19
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// normalCounter := 36 ;
8944: LD_ADDR_EXP 20
8948: PUSH
8949: LD_INT 36
8951: ST_TO_ADDR
// hardcoreCounter := 18 ;
8952: LD_ADDR_EXP 21
8956: PUSH
8957: LD_INT 18
8959: ST_TO_ADDR
// sRocket := false ;
8960: LD_ADDR_EXP 24
8964: PUSH
8965: LD_INT 0
8967: ST_TO_ADDR
// sSpeed := false ;
8968: LD_ADDR_EXP 23
8972: PUSH
8973: LD_INT 0
8975: ST_TO_ADDR
// sEngine := false ;
8976: LD_ADDR_EXP 25
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// sSpec := false ;
8984: LD_ADDR_EXP 22
8988: PUSH
8989: LD_INT 0
8991: ST_TO_ADDR
// sLevel := false ;
8992: LD_ADDR_EXP 26
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// sArmoury := false ;
9000: LD_ADDR_EXP 27
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// sRadar := false ;
9008: LD_ADDR_EXP 28
9012: PUSH
9013: LD_INT 0
9015: ST_TO_ADDR
// sBunker := false ;
9016: LD_ADDR_EXP 29
9020: PUSH
9021: LD_INT 0
9023: ST_TO_ADDR
// sHack := false ;
9024: LD_ADDR_EXP 30
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// sFire := false ;
9032: LD_ADDR_EXP 31
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// sRefresh := false ;
9040: LD_ADDR_EXP 32
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// sExp := false ;
9048: LD_ADDR_EXP 33
9052: PUSH
9053: LD_INT 0
9055: ST_TO_ADDR
// sDepot := false ;
9056: LD_ADDR_EXP 34
9060: PUSH
9061: LD_INT 0
9063: ST_TO_ADDR
// sFlag := false ;
9064: LD_ADDR_EXP 35
9068: PUSH
9069: LD_INT 0
9071: ST_TO_ADDR
// sKamikadze := false ;
9072: LD_ADDR_EXP 43
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// sTroll := false ;
9080: LD_ADDR_EXP 44
9084: PUSH
9085: LD_INT 0
9087: ST_TO_ADDR
// sSlow := false ;
9088: LD_ADDR_EXP 45
9092: PUSH
9093: LD_INT 0
9095: ST_TO_ADDR
// sLack := false ;
9096: LD_ADDR_EXP 46
9100: PUSH
9101: LD_INT 0
9103: ST_TO_ADDR
// sTank := false ;
9104: LD_ADDR_EXP 48
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// sRemote := false ;
9112: LD_ADDR_EXP 49
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// sPowell := false ;
9120: LD_ADDR_EXP 50
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// sTeleport := false ;
9128: LD_ADDR_EXP 53
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// sOilTower := false ;
9136: LD_ADDR_EXP 55
9140: PUSH
9141: LD_INT 0
9143: ST_TO_ADDR
// sShovel := false ;
9144: LD_ADDR_EXP 56
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// sSheik := false ;
9152: LD_ADDR_EXP 57
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// sEarthquake := false ;
9160: LD_ADDR_EXP 59
9164: PUSH
9165: LD_INT 0
9167: ST_TO_ADDR
// sAI := false ;
9168: LD_ADDR_EXP 60
9172: PUSH
9173: LD_INT 0
9175: ST_TO_ADDR
// sCargo := false ;
9176: LD_ADDR_EXP 63
9180: PUSH
9181: LD_INT 0
9183: ST_TO_ADDR
// sDLaser := false ;
9184: LD_ADDR_EXP 64
9188: PUSH
9189: LD_INT 0
9191: ST_TO_ADDR
// sExchange := false ;
9192: LD_ADDR_EXP 65
9196: PUSH
9197: LD_INT 0
9199: ST_TO_ADDR
// sFac := false ;
9200: LD_ADDR_EXP 66
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// sPower := false ;
9208: LD_ADDR_EXP 67
9212: PUSH
9213: LD_INT 0
9215: ST_TO_ADDR
// sRandom := false ;
9216: LD_ADDR_EXP 68
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// sShield := false ;
9224: LD_ADDR_EXP 69
9228: PUSH
9229: LD_INT 0
9231: ST_TO_ADDR
// sTime := false ;
9232: LD_ADDR_EXP 70
9236: PUSH
9237: LD_INT 0
9239: ST_TO_ADDR
// sTools := false ;
9240: LD_ADDR_EXP 71
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// sSold := false ;
9248: LD_ADDR_EXP 36
9252: PUSH
9253: LD_INT 0
9255: ST_TO_ADDR
// sDiff := false ;
9256: LD_ADDR_EXP 37
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// sFog := false ;
9264: LD_ADDR_EXP 40
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// sReset := false ;
9272: LD_ADDR_EXP 41
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// sSun := false ;
9280: LD_ADDR_EXP 42
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// sTiger := false ;
9288: LD_ADDR_EXP 38
9292: PUSH
9293: LD_INT 0
9295: ST_TO_ADDR
// sBomb := false ;
9296: LD_ADDR_EXP 39
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// sWound := false ;
9304: LD_ADDR_EXP 47
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// sBetray := false ;
9312: LD_ADDR_EXP 51
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// sContamin := false ;
9320: LD_ADDR_EXP 52
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sOil := false ;
9328: LD_ADDR_EXP 54
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sStu := false ;
9336: LD_ADDR_EXP 58
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sBazooka := false ;
9344: LD_ADDR_EXP 61
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sMortar := false ;
9352: LD_ADDR_EXP 62
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sRanger := false ;
9360: LD_ADDR_EXP 72
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sComputer := false ;
9368: LD_ADDR_EXP 73
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// s30 := false ;
9376: LD_ADDR_EXP 74
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// s60 := false ;
9384: LD_ADDR_EXP 75
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// end ;
9392: LD_VAR 0 1
9396: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9397: LD_INT 0
9399: PPUSH
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
// result := [ ] ;
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: EMPTY
9412: ST_TO_ADDR
// if campaign_id = 1 then
9413: LD_OWVAR 69
9417: PUSH
9418: LD_INT 1
9420: EQUAL
9421: IFFALSE 12587
// begin case mission_number of 1 :
9423: LD_OWVAR 70
9427: PUSH
9428: LD_INT 1
9430: DOUBLE
9431: EQUAL
9432: IFTRUE 9436
9434: GO 9512
9436: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9437: LD_ADDR_VAR 0 2
9441: PUSH
9442: LD_INT 2
9444: PUSH
9445: LD_INT 4
9447: PUSH
9448: LD_INT 11
9450: PUSH
9451: LD_INT 12
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 22
9462: PUSH
9463: LD_INT 23
9465: PUSH
9466: LD_INT 26
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 101
9482: PUSH
9483: LD_INT 102
9485: PUSH
9486: LD_INT 106
9488: PUSH
9489: LD_INT 116
9491: PUSH
9492: LD_INT 117
9494: PUSH
9495: LD_INT 118
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: ST_TO_ADDR
9510: GO 12585
9512: LD_INT 2
9514: DOUBLE
9515: EQUAL
9516: IFTRUE 9520
9518: GO 9604
9520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9521: LD_ADDR_VAR 0 2
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: LD_INT 4
9531: PUSH
9532: LD_INT 11
9534: PUSH
9535: LD_INT 12
9537: PUSH
9538: LD_INT 15
9540: PUSH
9541: LD_INT 16
9543: PUSH
9544: LD_INT 22
9546: PUSH
9547: LD_INT 23
9549: PUSH
9550: LD_INT 26
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 101
9566: PUSH
9567: LD_INT 102
9569: PUSH
9570: LD_INT 105
9572: PUSH
9573: LD_INT 106
9575: PUSH
9576: LD_INT 108
9578: PUSH
9579: LD_INT 116
9581: PUSH
9582: LD_INT 117
9584: PUSH
9585: LD_INT 118
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: ST_TO_ADDR
9602: GO 12585
9604: LD_INT 3
9606: DOUBLE
9607: EQUAL
9608: IFTRUE 9612
9610: GO 9700
9612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9613: LD_ADDR_VAR 0 2
9617: PUSH
9618: LD_INT 2
9620: PUSH
9621: LD_INT 4
9623: PUSH
9624: LD_INT 5
9626: PUSH
9627: LD_INT 11
9629: PUSH
9630: LD_INT 12
9632: PUSH
9633: LD_INT 15
9635: PUSH
9636: LD_INT 16
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 26
9644: PUSH
9645: LD_INT 36
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 101
9662: PUSH
9663: LD_INT 102
9665: PUSH
9666: LD_INT 105
9668: PUSH
9669: LD_INT 106
9671: PUSH
9672: LD_INT 108
9674: PUSH
9675: LD_INT 116
9677: PUSH
9678: LD_INT 117
9680: PUSH
9681: LD_INT 118
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: ST_TO_ADDR
9698: GO 12585
9700: LD_INT 4
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9804
9708: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9709: LD_ADDR_VAR 0 2
9713: PUSH
9714: LD_INT 2
9716: PUSH
9717: LD_INT 4
9719: PUSH
9720: LD_INT 5
9722: PUSH
9723: LD_INT 8
9725: PUSH
9726: LD_INT 11
9728: PUSH
9729: LD_INT 12
9731: PUSH
9732: LD_INT 15
9734: PUSH
9735: LD_INT 16
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 23
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 36
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 101
9766: PUSH
9767: LD_INT 102
9769: PUSH
9770: LD_INT 105
9772: PUSH
9773: LD_INT 106
9775: PUSH
9776: LD_INT 108
9778: PUSH
9779: LD_INT 116
9781: PUSH
9782: LD_INT 117
9784: PUSH
9785: LD_INT 118
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: ST_TO_ADDR
9802: GO 12585
9804: LD_INT 5
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 9924
9812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9813: LD_ADDR_VAR 0 2
9817: PUSH
9818: LD_INT 2
9820: PUSH
9821: LD_INT 4
9823: PUSH
9824: LD_INT 5
9826: PUSH
9827: LD_INT 6
9829: PUSH
9830: LD_INT 8
9832: PUSH
9833: LD_INT 11
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 15
9841: PUSH
9842: LD_INT 16
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 23
9850: PUSH
9851: LD_INT 25
9853: PUSH
9854: LD_INT 26
9856: PUSH
9857: LD_INT 36
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 101
9878: PUSH
9879: LD_INT 102
9881: PUSH
9882: LD_INT 105
9884: PUSH
9885: LD_INT 106
9887: PUSH
9888: LD_INT 108
9890: PUSH
9891: LD_INT 109
9893: PUSH
9894: LD_INT 112
9896: PUSH
9897: LD_INT 116
9899: PUSH
9900: LD_INT 117
9902: PUSH
9903: LD_INT 118
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: ST_TO_ADDR
9922: GO 12585
9924: LD_INT 6
9926: DOUBLE
9927: EQUAL
9928: IFTRUE 9932
9930: GO 10064
9932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9933: LD_ADDR_VAR 0 2
9937: PUSH
9938: LD_INT 2
9940: PUSH
9941: LD_INT 4
9943: PUSH
9944: LD_INT 5
9946: PUSH
9947: LD_INT 6
9949: PUSH
9950: LD_INT 8
9952: PUSH
9953: LD_INT 11
9955: PUSH
9956: LD_INT 12
9958: PUSH
9959: LD_INT 15
9961: PUSH
9962: LD_INT 16
9964: PUSH
9965: LD_INT 20
9967: PUSH
9968: LD_INT 21
9970: PUSH
9971: LD_INT 22
9973: PUSH
9974: LD_INT 23
9976: PUSH
9977: LD_INT 25
9979: PUSH
9980: LD_INT 26
9982: PUSH
9983: LD_INT 30
9985: PUSH
9986: LD_INT 31
9988: PUSH
9989: LD_INT 32
9991: PUSH
9992: LD_INT 36
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 101
10018: PUSH
10019: LD_INT 102
10021: PUSH
10022: LD_INT 105
10024: PUSH
10025: LD_INT 106
10027: PUSH
10028: LD_INT 108
10030: PUSH
10031: LD_INT 109
10033: PUSH
10034: LD_INT 112
10036: PUSH
10037: LD_INT 116
10039: PUSH
10040: LD_INT 117
10042: PUSH
10043: LD_INT 118
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: ST_TO_ADDR
10062: GO 12585
10064: LD_INT 7
10066: DOUBLE
10067: EQUAL
10068: IFTRUE 10072
10070: GO 10184
10072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10073: LD_ADDR_VAR 0 2
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: LD_INT 5
10086: PUSH
10087: LD_INT 7
10089: PUSH
10090: LD_INT 11
10092: PUSH
10093: LD_INT 12
10095: PUSH
10096: LD_INT 15
10098: PUSH
10099: LD_INT 16
10101: PUSH
10102: LD_INT 20
10104: PUSH
10105: LD_INT 21
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 23
10113: PUSH
10114: LD_INT 25
10116: PUSH
10117: LD_INT 26
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 101
10138: PUSH
10139: LD_INT 102
10141: PUSH
10142: LD_INT 103
10144: PUSH
10145: LD_INT 105
10147: PUSH
10148: LD_INT 106
10150: PUSH
10151: LD_INT 108
10153: PUSH
10154: LD_INT 112
10156: PUSH
10157: LD_INT 116
10159: PUSH
10160: LD_INT 117
10162: PUSH
10163: LD_INT 118
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: ST_TO_ADDR
10182: GO 12585
10184: LD_INT 8
10186: DOUBLE
10187: EQUAL
10188: IFTRUE 10192
10190: GO 10332
10192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: LD_INT 2
10200: PUSH
10201: LD_INT 4
10203: PUSH
10204: LD_INT 5
10206: PUSH
10207: LD_INT 6
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: LD_INT 8
10215: PUSH
10216: LD_INT 11
10218: PUSH
10219: LD_INT 12
10221: PUSH
10222: LD_INT 15
10224: PUSH
10225: LD_INT 16
10227: PUSH
10228: LD_INT 20
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 23
10239: PUSH
10240: LD_INT 25
10242: PUSH
10243: LD_INT 26
10245: PUSH
10246: LD_INT 30
10248: PUSH
10249: LD_INT 31
10251: PUSH
10252: LD_INT 32
10254: PUSH
10255: LD_INT 36
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 101
10282: PUSH
10283: LD_INT 102
10285: PUSH
10286: LD_INT 103
10288: PUSH
10289: LD_INT 105
10291: PUSH
10292: LD_INT 106
10294: PUSH
10295: LD_INT 108
10297: PUSH
10298: LD_INT 109
10300: PUSH
10301: LD_INT 112
10303: PUSH
10304: LD_INT 116
10306: PUSH
10307: LD_INT 117
10309: PUSH
10310: LD_INT 118
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: ST_TO_ADDR
10330: GO 12585
10332: LD_INT 9
10334: DOUBLE
10335: EQUAL
10336: IFTRUE 10340
10338: GO 10488
10340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 4
10351: PUSH
10352: LD_INT 5
10354: PUSH
10355: LD_INT 6
10357: PUSH
10358: LD_INT 7
10360: PUSH
10361: LD_INT 8
10363: PUSH
10364: LD_INT 11
10366: PUSH
10367: LD_INT 12
10369: PUSH
10370: LD_INT 15
10372: PUSH
10373: LD_INT 16
10375: PUSH
10376: LD_INT 20
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_INT 23
10387: PUSH
10388: LD_INT 25
10390: PUSH
10391: LD_INT 26
10393: PUSH
10394: LD_INT 28
10396: PUSH
10397: LD_INT 30
10399: PUSH
10400: LD_INT 31
10402: PUSH
10403: LD_INT 32
10405: PUSH
10406: LD_INT 36
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 101
10434: PUSH
10435: LD_INT 102
10437: PUSH
10438: LD_INT 103
10440: PUSH
10441: LD_INT 105
10443: PUSH
10444: LD_INT 106
10446: PUSH
10447: LD_INT 108
10449: PUSH
10450: LD_INT 109
10452: PUSH
10453: LD_INT 112
10455: PUSH
10456: LD_INT 114
10458: PUSH
10459: LD_INT 116
10461: PUSH
10462: LD_INT 117
10464: PUSH
10465: LD_INT 118
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: ST_TO_ADDR
10486: GO 12585
10488: LD_INT 10
10490: DOUBLE
10491: EQUAL
10492: IFTRUE 10496
10494: GO 10692
10496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10497: LD_ADDR_VAR 0 2
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: LD_INT 4
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: LD_INT 6
10513: PUSH
10514: LD_INT 7
10516: PUSH
10517: LD_INT 8
10519: PUSH
10520: LD_INT 9
10522: PUSH
10523: LD_INT 10
10525: PUSH
10526: LD_INT 11
10528: PUSH
10529: LD_INT 12
10531: PUSH
10532: LD_INT 13
10534: PUSH
10535: LD_INT 14
10537: PUSH
10538: LD_INT 15
10540: PUSH
10541: LD_INT 16
10543: PUSH
10544: LD_INT 17
10546: PUSH
10547: LD_INT 18
10549: PUSH
10550: LD_INT 19
10552: PUSH
10553: LD_INT 20
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 22
10561: PUSH
10562: LD_INT 23
10564: PUSH
10565: LD_INT 24
10567: PUSH
10568: LD_INT 25
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 28
10576: PUSH
10577: LD_INT 30
10579: PUSH
10580: LD_INT 31
10582: PUSH
10583: LD_INT 32
10585: PUSH
10586: LD_INT 36
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 103
10628: PUSH
10629: LD_INT 104
10631: PUSH
10632: LD_INT 105
10634: PUSH
10635: LD_INT 106
10637: PUSH
10638: LD_INT 107
10640: PUSH
10641: LD_INT 108
10643: PUSH
10644: LD_INT 109
10646: PUSH
10647: LD_INT 110
10649: PUSH
10650: LD_INT 111
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 114
10658: PUSH
10659: LD_INT 116
10661: PUSH
10662: LD_INT 117
10664: PUSH
10665: LD_INT 118
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: ST_TO_ADDR
10690: GO 12585
10692: LD_INT 11
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10904
10700: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 3
10711: PUSH
10712: LD_INT 4
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: LD_INT 6
10720: PUSH
10721: LD_INT 7
10723: PUSH
10724: LD_INT 8
10726: PUSH
10727: LD_INT 9
10729: PUSH
10730: LD_INT 10
10732: PUSH
10733: LD_INT 11
10735: PUSH
10736: LD_INT 12
10738: PUSH
10739: LD_INT 13
10741: PUSH
10742: LD_INT 14
10744: PUSH
10745: LD_INT 15
10747: PUSH
10748: LD_INT 16
10750: PUSH
10751: LD_INT 17
10753: PUSH
10754: LD_INT 18
10756: PUSH
10757: LD_INT 19
10759: PUSH
10760: LD_INT 20
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 24
10774: PUSH
10775: LD_INT 25
10777: PUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 28
10783: PUSH
10784: LD_INT 30
10786: PUSH
10787: LD_INT 31
10789: PUSH
10790: LD_INT 32
10792: PUSH
10793: LD_INT 34
10795: PUSH
10796: LD_INT 36
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 101
10834: PUSH
10835: LD_INT 102
10837: PUSH
10838: LD_INT 103
10840: PUSH
10841: LD_INT 104
10843: PUSH
10844: LD_INT 105
10846: PUSH
10847: LD_INT 106
10849: PUSH
10850: LD_INT 107
10852: PUSH
10853: LD_INT 108
10855: PUSH
10856: LD_INT 109
10858: PUSH
10859: LD_INT 110
10861: PUSH
10862: LD_INT 111
10864: PUSH
10865: LD_INT 112
10867: PUSH
10868: LD_INT 114
10870: PUSH
10871: LD_INT 116
10873: PUSH
10874: LD_INT 117
10876: PUSH
10877: LD_INT 118
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: ST_TO_ADDR
10902: GO 12585
10904: LD_INT 12
10906: DOUBLE
10907: EQUAL
10908: IFTRUE 10912
10910: GO 11132
10912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10913: LD_ADDR_VAR 0 2
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: LD_INT 3
10926: PUSH
10927: LD_INT 4
10929: PUSH
10930: LD_INT 5
10932: PUSH
10933: LD_INT 6
10935: PUSH
10936: LD_INT 7
10938: PUSH
10939: LD_INT 8
10941: PUSH
10942: LD_INT 9
10944: PUSH
10945: LD_INT 10
10947: PUSH
10948: LD_INT 11
10950: PUSH
10951: LD_INT 12
10953: PUSH
10954: LD_INT 13
10956: PUSH
10957: LD_INT 14
10959: PUSH
10960: LD_INT 15
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 17
10968: PUSH
10969: LD_INT 18
10971: PUSH
10972: LD_INT 19
10974: PUSH
10975: LD_INT 20
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 22
10983: PUSH
10984: LD_INT 23
10986: PUSH
10987: LD_INT 24
10989: PUSH
10990: LD_INT 25
10992: PUSH
10993: LD_INT 26
10995: PUSH
10996: LD_INT 27
10998: PUSH
10999: LD_INT 28
11001: PUSH
11002: LD_INT 30
11004: PUSH
11005: LD_INT 31
11007: PUSH
11008: LD_INT 32
11010: PUSH
11011: LD_INT 33
11013: PUSH
11014: LD_INT 34
11016: PUSH
11017: LD_INT 36
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 101
11058: PUSH
11059: LD_INT 102
11061: PUSH
11062: LD_INT 103
11064: PUSH
11065: LD_INT 104
11067: PUSH
11068: LD_INT 105
11070: PUSH
11071: LD_INT 106
11073: PUSH
11074: LD_INT 107
11076: PUSH
11077: LD_INT 108
11079: PUSH
11080: LD_INT 109
11082: PUSH
11083: LD_INT 110
11085: PUSH
11086: LD_INT 111
11088: PUSH
11089: LD_INT 112
11091: PUSH
11092: LD_INT 113
11094: PUSH
11095: LD_INT 114
11097: PUSH
11098: LD_INT 116
11100: PUSH
11101: LD_INT 117
11103: PUSH
11104: LD_INT 118
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: ST_TO_ADDR
11130: GO 12585
11132: LD_INT 13
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11348
11140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: LD_INT 2
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: LD_INT 4
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: LD_INT 8
11163: PUSH
11164: LD_INT 9
11166: PUSH
11167: LD_INT 10
11169: PUSH
11170: LD_INT 11
11172: PUSH
11173: LD_INT 12
11175: PUSH
11176: LD_INT 14
11178: PUSH
11179: LD_INT 15
11181: PUSH
11182: LD_INT 16
11184: PUSH
11185: LD_INT 17
11187: PUSH
11188: LD_INT 18
11190: PUSH
11191: LD_INT 19
11193: PUSH
11194: LD_INT 20
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 23
11205: PUSH
11206: LD_INT 24
11208: PUSH
11209: LD_INT 25
11211: PUSH
11212: LD_INT 26
11214: PUSH
11215: LD_INT 27
11217: PUSH
11218: LD_INT 28
11220: PUSH
11221: LD_INT 30
11223: PUSH
11224: LD_INT 31
11226: PUSH
11227: LD_INT 32
11229: PUSH
11230: LD_INT 33
11232: PUSH
11233: LD_INT 34
11235: PUSH
11236: LD_INT 36
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 102
11277: PUSH
11278: LD_INT 103
11280: PUSH
11281: LD_INT 104
11283: PUSH
11284: LD_INT 105
11286: PUSH
11287: LD_INT 106
11289: PUSH
11290: LD_INT 107
11292: PUSH
11293: LD_INT 108
11295: PUSH
11296: LD_INT 109
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 111
11304: PUSH
11305: LD_INT 112
11307: PUSH
11308: LD_INT 113
11310: PUSH
11311: LD_INT 114
11313: PUSH
11314: LD_INT 116
11316: PUSH
11317: LD_INT 117
11319: PUSH
11320: LD_INT 118
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: ST_TO_ADDR
11346: GO 12585
11348: LD_INT 14
11350: DOUBLE
11351: EQUAL
11352: IFTRUE 11356
11354: GO 11580
11356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 1
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 3
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: LD_INT 5
11376: PUSH
11377: LD_INT 6
11379: PUSH
11380: LD_INT 7
11382: PUSH
11383: LD_INT 8
11385: PUSH
11386: LD_INT 9
11388: PUSH
11389: LD_INT 10
11391: PUSH
11392: LD_INT 11
11394: PUSH
11395: LD_INT 12
11397: PUSH
11398: LD_INT 13
11400: PUSH
11401: LD_INT 14
11403: PUSH
11404: LD_INT 15
11406: PUSH
11407: LD_INT 16
11409: PUSH
11410: LD_INT 17
11412: PUSH
11413: LD_INT 18
11415: PUSH
11416: LD_INT 19
11418: PUSH
11419: LD_INT 20
11421: PUSH
11422: LD_INT 21
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: LD_INT 23
11430: PUSH
11431: LD_INT 24
11433: PUSH
11434: LD_INT 25
11436: PUSH
11437: LD_INT 26
11439: PUSH
11440: LD_INT 27
11442: PUSH
11443: LD_INT 28
11445: PUSH
11446: LD_INT 29
11448: PUSH
11449: LD_INT 30
11451: PUSH
11452: LD_INT 31
11454: PUSH
11455: LD_INT 32
11457: PUSH
11458: LD_INT 33
11460: PUSH
11461: LD_INT 34
11463: PUSH
11464: LD_INT 36
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 101
11506: PUSH
11507: LD_INT 102
11509: PUSH
11510: LD_INT 103
11512: PUSH
11513: LD_INT 104
11515: PUSH
11516: LD_INT 105
11518: PUSH
11519: LD_INT 106
11521: PUSH
11522: LD_INT 107
11524: PUSH
11525: LD_INT 108
11527: PUSH
11528: LD_INT 109
11530: PUSH
11531: LD_INT 110
11533: PUSH
11534: LD_INT 111
11536: PUSH
11537: LD_INT 112
11539: PUSH
11540: LD_INT 113
11542: PUSH
11543: LD_INT 114
11545: PUSH
11546: LD_INT 116
11548: PUSH
11549: LD_INT 117
11551: PUSH
11552: LD_INT 118
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: ST_TO_ADDR
11578: GO 12585
11580: LD_INT 15
11582: DOUBLE
11583: EQUAL
11584: IFTRUE 11588
11586: GO 11812
11588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11589: LD_ADDR_VAR 0 2
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 3
11602: PUSH
11603: LD_INT 4
11605: PUSH
11606: LD_INT 5
11608: PUSH
11609: LD_INT 6
11611: PUSH
11612: LD_INT 7
11614: PUSH
11615: LD_INT 8
11617: PUSH
11618: LD_INT 9
11620: PUSH
11621: LD_INT 10
11623: PUSH
11624: LD_INT 11
11626: PUSH
11627: LD_INT 12
11629: PUSH
11630: LD_INT 13
11632: PUSH
11633: LD_INT 14
11635: PUSH
11636: LD_INT 15
11638: PUSH
11639: LD_INT 16
11641: PUSH
11642: LD_INT 17
11644: PUSH
11645: LD_INT 18
11647: PUSH
11648: LD_INT 19
11650: PUSH
11651: LD_INT 20
11653: PUSH
11654: LD_INT 21
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_INT 23
11662: PUSH
11663: LD_INT 24
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 26
11671: PUSH
11672: LD_INT 27
11674: PUSH
11675: LD_INT 28
11677: PUSH
11678: LD_INT 29
11680: PUSH
11681: LD_INT 30
11683: PUSH
11684: LD_INT 31
11686: PUSH
11687: LD_INT 32
11689: PUSH
11690: LD_INT 33
11692: PUSH
11693: LD_INT 34
11695: PUSH
11696: LD_INT 36
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 101
11738: PUSH
11739: LD_INT 102
11741: PUSH
11742: LD_INT 103
11744: PUSH
11745: LD_INT 104
11747: PUSH
11748: LD_INT 105
11750: PUSH
11751: LD_INT 106
11753: PUSH
11754: LD_INT 107
11756: PUSH
11757: LD_INT 108
11759: PUSH
11760: LD_INT 109
11762: PUSH
11763: LD_INT 110
11765: PUSH
11766: LD_INT 111
11768: PUSH
11769: LD_INT 112
11771: PUSH
11772: LD_INT 113
11774: PUSH
11775: LD_INT 114
11777: PUSH
11778: LD_INT 116
11780: PUSH
11781: LD_INT 117
11783: PUSH
11784: LD_INT 118
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: ST_TO_ADDR
11810: GO 12585
11812: LD_INT 16
11814: DOUBLE
11815: EQUAL
11816: IFTRUE 11820
11818: GO 11956
11820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11821: LD_ADDR_VAR 0 2
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: LD_INT 4
11831: PUSH
11832: LD_INT 5
11834: PUSH
11835: LD_INT 7
11837: PUSH
11838: LD_INT 11
11840: PUSH
11841: LD_INT 12
11843: PUSH
11844: LD_INT 15
11846: PUSH
11847: LD_INT 16
11849: PUSH
11850: LD_INT 20
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 26
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 31
11873: PUSH
11874: LD_INT 32
11876: PUSH
11877: LD_INT 33
11879: PUSH
11880: LD_INT 34
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 101
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 103
11912: PUSH
11913: LD_INT 106
11915: PUSH
11916: LD_INT 108
11918: PUSH
11919: LD_INT 112
11921: PUSH
11922: LD_INT 113
11924: PUSH
11925: LD_INT 114
11927: PUSH
11928: LD_INT 116
11930: PUSH
11931: LD_INT 117
11933: PUSH
11934: LD_INT 118
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: ST_TO_ADDR
11954: GO 12585
11956: LD_INT 17
11958: DOUBLE
11959: EQUAL
11960: IFTRUE 11964
11962: GO 12188
11964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11965: LD_ADDR_VAR 0 2
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: LD_INT 6
11987: PUSH
11988: LD_INT 7
11990: PUSH
11991: LD_INT 8
11993: PUSH
11994: LD_INT 9
11996: PUSH
11997: LD_INT 10
11999: PUSH
12000: LD_INT 11
12002: PUSH
12003: LD_INT 12
12005: PUSH
12006: LD_INT 13
12008: PUSH
12009: LD_INT 14
12011: PUSH
12012: LD_INT 15
12014: PUSH
12015: LD_INT 16
12017: PUSH
12018: LD_INT 17
12020: PUSH
12021: LD_INT 18
12023: PUSH
12024: LD_INT 19
12026: PUSH
12027: LD_INT 20
12029: PUSH
12030: LD_INT 21
12032: PUSH
12033: LD_INT 22
12035: PUSH
12036: LD_INT 23
12038: PUSH
12039: LD_INT 24
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 26
12047: PUSH
12048: LD_INT 27
12050: PUSH
12051: LD_INT 28
12053: PUSH
12054: LD_INT 29
12056: PUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 31
12062: PUSH
12063: LD_INT 32
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: LD_INT 34
12071: PUSH
12072: LD_INT 36
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 101
12114: PUSH
12115: LD_INT 102
12117: PUSH
12118: LD_INT 103
12120: PUSH
12121: LD_INT 104
12123: PUSH
12124: LD_INT 105
12126: PUSH
12127: LD_INT 106
12129: PUSH
12130: LD_INT 107
12132: PUSH
12133: LD_INT 108
12135: PUSH
12136: LD_INT 109
12138: PUSH
12139: LD_INT 110
12141: PUSH
12142: LD_INT 111
12144: PUSH
12145: LD_INT 112
12147: PUSH
12148: LD_INT 113
12150: PUSH
12151: LD_INT 114
12153: PUSH
12154: LD_INT 116
12156: PUSH
12157: LD_INT 117
12159: PUSH
12160: LD_INT 118
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: ST_TO_ADDR
12186: GO 12585
12188: LD_INT 18
12190: DOUBLE
12191: EQUAL
12192: IFTRUE 12196
12194: GO 12344
12196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12197: LD_ADDR_VAR 0 2
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 4
12207: PUSH
12208: LD_INT 5
12210: PUSH
12211: LD_INT 7
12213: PUSH
12214: LD_INT 11
12216: PUSH
12217: LD_INT 12
12219: PUSH
12220: LD_INT 15
12222: PUSH
12223: LD_INT 16
12225: PUSH
12226: LD_INT 20
12228: PUSH
12229: LD_INT 21
12231: PUSH
12232: LD_INT 22
12234: PUSH
12235: LD_INT 23
12237: PUSH
12238: LD_INT 25
12240: PUSH
12241: LD_INT 26
12243: PUSH
12244: LD_INT 30
12246: PUSH
12247: LD_INT 31
12249: PUSH
12250: LD_INT 32
12252: PUSH
12253: LD_INT 33
12255: PUSH
12256: LD_INT 34
12258: PUSH
12259: LD_INT 35
12261: PUSH
12262: LD_INT 36
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 101
12290: PUSH
12291: LD_INT 102
12293: PUSH
12294: LD_INT 103
12296: PUSH
12297: LD_INT 106
12299: PUSH
12300: LD_INT 108
12302: PUSH
12303: LD_INT 112
12305: PUSH
12306: LD_INT 113
12308: PUSH
12309: LD_INT 114
12311: PUSH
12312: LD_INT 115
12314: PUSH
12315: LD_INT 116
12317: PUSH
12318: LD_INT 117
12320: PUSH
12321: LD_INT 118
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: ST_TO_ADDR
12342: GO 12585
12344: LD_INT 19
12346: DOUBLE
12347: EQUAL
12348: IFTRUE 12352
12350: GO 12584
12352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12353: LD_ADDR_VAR 0 2
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: LD_INT 5
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 7
12378: PUSH
12379: LD_INT 8
12381: PUSH
12382: LD_INT 9
12384: PUSH
12385: LD_INT 10
12387: PUSH
12388: LD_INT 11
12390: PUSH
12391: LD_INT 12
12393: PUSH
12394: LD_INT 13
12396: PUSH
12397: LD_INT 14
12399: PUSH
12400: LD_INT 15
12402: PUSH
12403: LD_INT 16
12405: PUSH
12406: LD_INT 17
12408: PUSH
12409: LD_INT 18
12411: PUSH
12412: LD_INT 19
12414: PUSH
12415: LD_INT 20
12417: PUSH
12418: LD_INT 21
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: LD_INT 23
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 26
12435: PUSH
12436: LD_INT 27
12438: PUSH
12439: LD_INT 28
12441: PUSH
12442: LD_INT 29
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 31
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 33
12456: PUSH
12457: LD_INT 34
12459: PUSH
12460: LD_INT 35
12462: PUSH
12463: LD_INT 36
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 102
12509: PUSH
12510: LD_INT 103
12512: PUSH
12513: LD_INT 104
12515: PUSH
12516: LD_INT 105
12518: PUSH
12519: LD_INT 106
12521: PUSH
12522: LD_INT 107
12524: PUSH
12525: LD_INT 108
12527: PUSH
12528: LD_INT 109
12530: PUSH
12531: LD_INT 110
12533: PUSH
12534: LD_INT 111
12536: PUSH
12537: LD_INT 112
12539: PUSH
12540: LD_INT 113
12542: PUSH
12543: LD_INT 114
12545: PUSH
12546: LD_INT 115
12548: PUSH
12549: LD_INT 116
12551: PUSH
12552: LD_INT 117
12554: PUSH
12555: LD_INT 118
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: ST_TO_ADDR
12582: GO 12585
12584: POP
// end else
12585: GO 12816
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12587: LD_ADDR_VAR 0 2
12591: PUSH
12592: LD_INT 1
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: LD_INT 3
12600: PUSH
12601: LD_INT 4
12603: PUSH
12604: LD_INT 5
12606: PUSH
12607: LD_INT 6
12609: PUSH
12610: LD_INT 7
12612: PUSH
12613: LD_INT 8
12615: PUSH
12616: LD_INT 9
12618: PUSH
12619: LD_INT 10
12621: PUSH
12622: LD_INT 11
12624: PUSH
12625: LD_INT 12
12627: PUSH
12628: LD_INT 13
12630: PUSH
12631: LD_INT 14
12633: PUSH
12634: LD_INT 15
12636: PUSH
12637: LD_INT 16
12639: PUSH
12640: LD_INT 17
12642: PUSH
12643: LD_INT 18
12645: PUSH
12646: LD_INT 19
12648: PUSH
12649: LD_INT 20
12651: PUSH
12652: LD_INT 21
12654: PUSH
12655: LD_INT 22
12657: PUSH
12658: LD_INT 23
12660: PUSH
12661: LD_INT 24
12663: PUSH
12664: LD_INT 25
12666: PUSH
12667: LD_INT 26
12669: PUSH
12670: LD_INT 27
12672: PUSH
12673: LD_INT 28
12675: PUSH
12676: LD_INT 29
12678: PUSH
12679: LD_INT 30
12681: PUSH
12682: LD_INT 31
12684: PUSH
12685: LD_INT 32
12687: PUSH
12688: LD_INT 33
12690: PUSH
12691: LD_INT 34
12693: PUSH
12694: LD_INT 35
12696: PUSH
12697: LD_INT 36
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 101
12740: PUSH
12741: LD_INT 102
12743: PUSH
12744: LD_INT 103
12746: PUSH
12747: LD_INT 104
12749: PUSH
12750: LD_INT 105
12752: PUSH
12753: LD_INT 106
12755: PUSH
12756: LD_INT 107
12758: PUSH
12759: LD_INT 108
12761: PUSH
12762: LD_INT 109
12764: PUSH
12765: LD_INT 110
12767: PUSH
12768: LD_INT 111
12770: PUSH
12771: LD_INT 112
12773: PUSH
12774: LD_INT 113
12776: PUSH
12777: LD_INT 114
12779: PUSH
12780: LD_INT 115
12782: PUSH
12783: LD_INT 116
12785: PUSH
12786: LD_INT 117
12788: PUSH
12789: LD_INT 118
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: ST_TO_ADDR
// if result then
12816: LD_VAR 0 2
12820: IFFALSE 13606
// begin normal :=  ;
12822: LD_ADDR_VAR 0 5
12826: PUSH
12827: LD_STRING 
12829: ST_TO_ADDR
// hardcore :=  ;
12830: LD_ADDR_VAR 0 6
12834: PUSH
12835: LD_STRING 
12837: ST_TO_ADDR
// active :=  ;
12838: LD_ADDR_VAR 0 7
12842: PUSH
12843: LD_STRING 
12845: ST_TO_ADDR
// for i = 1 to normalCounter do
12846: LD_ADDR_VAR 0 8
12850: PUSH
12851: DOUBLE
12852: LD_INT 1
12854: DEC
12855: ST_TO_ADDR
12856: LD_EXP 20
12860: PUSH
12861: FOR_TO
12862: IFFALSE 12963
// begin tmp := 0 ;
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_STRING 0
12871: ST_TO_ADDR
// if result [ 1 ] then
12872: LD_VAR 0 2
12876: PUSH
12877: LD_INT 1
12879: ARRAY
12880: IFFALSE 12945
// if result [ 1 ] [ 1 ] = i then
12882: LD_VAR 0 2
12886: PUSH
12887: LD_INT 1
12889: ARRAY
12890: PUSH
12891: LD_INT 1
12893: ARRAY
12894: PUSH
12895: LD_VAR 0 8
12899: EQUAL
12900: IFFALSE 12945
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12902: LD_ADDR_VAR 0 2
12906: PUSH
12907: LD_VAR 0 2
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: LD_VAR 0 2
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 3
12931: PPUSH
12932: CALL_OW 1
12936: ST_TO_ADDR
// tmp := 1 ;
12937: LD_ADDR_VAR 0 3
12941: PUSH
12942: LD_STRING 1
12944: ST_TO_ADDR
// end ; normal := normal & tmp ;
12945: LD_ADDR_VAR 0 5
12949: PUSH
12950: LD_VAR 0 5
12954: PUSH
12955: LD_VAR 0 3
12959: STR
12960: ST_TO_ADDR
// end ;
12961: GO 12861
12963: POP
12964: POP
// for i = 1 to hardcoreCounter do
12965: LD_ADDR_VAR 0 8
12969: PUSH
12970: DOUBLE
12971: LD_INT 1
12973: DEC
12974: ST_TO_ADDR
12975: LD_EXP 21
12979: PUSH
12980: FOR_TO
12981: IFFALSE 13086
// begin tmp := 0 ;
12983: LD_ADDR_VAR 0 3
12987: PUSH
12988: LD_STRING 0
12990: ST_TO_ADDR
// if result [ 2 ] then
12991: LD_VAR 0 2
12995: PUSH
12996: LD_INT 2
12998: ARRAY
12999: IFFALSE 13068
// if result [ 2 ] [ 1 ] = 100 + i then
13001: LD_VAR 0 2
13005: PUSH
13006: LD_INT 2
13008: ARRAY
13009: PUSH
13010: LD_INT 1
13012: ARRAY
13013: PUSH
13014: LD_INT 100
13016: PUSH
13017: LD_VAR 0 8
13021: PLUS
13022: EQUAL
13023: IFFALSE 13068
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13025: LD_ADDR_VAR 0 2
13029: PUSH
13030: LD_VAR 0 2
13034: PPUSH
13035: LD_INT 2
13037: PPUSH
13038: LD_VAR 0 2
13042: PUSH
13043: LD_INT 2
13045: ARRAY
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: CALL_OW 3
13054: PPUSH
13055: CALL_OW 1
13059: ST_TO_ADDR
// tmp := 1 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_STRING 1
13067: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 6
13077: PUSH
13078: LD_VAR 0 3
13082: STR
13083: ST_TO_ADDR
// end ;
13084: GO 12980
13086: POP
13087: POP
// if isGameLoad then
13088: LD_VAR 0 1
13092: IFFALSE 13567
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13094: LD_ADDR_VAR 0 4
13098: PUSH
13099: LD_EXP 24
13103: PUSH
13104: LD_EXP 23
13108: PUSH
13109: LD_EXP 25
13113: PUSH
13114: LD_EXP 22
13118: PUSH
13119: LD_EXP 26
13123: PUSH
13124: LD_EXP 27
13128: PUSH
13129: LD_EXP 28
13133: PUSH
13134: LD_EXP 29
13138: PUSH
13139: LD_EXP 30
13143: PUSH
13144: LD_EXP 31
13148: PUSH
13149: LD_EXP 32
13153: PUSH
13154: LD_EXP 33
13158: PUSH
13159: LD_EXP 34
13163: PUSH
13164: LD_EXP 35
13168: PUSH
13169: LD_EXP 43
13173: PUSH
13174: LD_EXP 44
13178: PUSH
13179: LD_EXP 45
13183: PUSH
13184: LD_EXP 46
13188: PUSH
13189: LD_EXP 48
13193: PUSH
13194: LD_EXP 49
13198: PUSH
13199: LD_EXP 50
13203: PUSH
13204: LD_EXP 53
13208: PUSH
13209: LD_EXP 55
13213: PUSH
13214: LD_EXP 56
13218: PUSH
13219: LD_EXP 57
13223: PUSH
13224: LD_EXP 59
13228: PUSH
13229: LD_EXP 60
13233: PUSH
13234: LD_EXP 63
13238: PUSH
13239: LD_EXP 64
13243: PUSH
13244: LD_EXP 65
13248: PUSH
13249: LD_EXP 66
13253: PUSH
13254: LD_EXP 67
13258: PUSH
13259: LD_EXP 68
13263: PUSH
13264: LD_EXP 69
13268: PUSH
13269: LD_EXP 70
13273: PUSH
13274: LD_EXP 71
13278: PUSH
13279: LD_EXP 36
13283: PUSH
13284: LD_EXP 37
13288: PUSH
13289: LD_EXP 40
13293: PUSH
13294: LD_EXP 41
13298: PUSH
13299: LD_EXP 42
13303: PUSH
13304: LD_EXP 38
13308: PUSH
13309: LD_EXP 39
13313: PUSH
13314: LD_EXP 47
13318: PUSH
13319: LD_EXP 51
13323: PUSH
13324: LD_EXP 52
13328: PUSH
13329: LD_EXP 54
13333: PUSH
13334: LD_EXP 58
13338: PUSH
13339: LD_EXP 61
13343: PUSH
13344: LD_EXP 62
13348: PUSH
13349: LD_EXP 72
13353: PUSH
13354: LD_EXP 73
13358: PUSH
13359: LD_EXP 74
13363: PUSH
13364: LD_EXP 75
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: ST_TO_ADDR
// tmp :=  ;
13425: LD_ADDR_VAR 0 3
13429: PUSH
13430: LD_STRING 
13432: ST_TO_ADDR
// for i = 1 to normalCounter do
13433: LD_ADDR_VAR 0 8
13437: PUSH
13438: DOUBLE
13439: LD_INT 1
13441: DEC
13442: ST_TO_ADDR
13443: LD_EXP 20
13447: PUSH
13448: FOR_TO
13449: IFFALSE 13485
// begin if flags [ i ] then
13451: LD_VAR 0 4
13455: PUSH
13456: LD_VAR 0 8
13460: ARRAY
13461: IFFALSE 13483
// tmp := tmp & i & ; ;
13463: LD_ADDR_VAR 0 3
13467: PUSH
13468: LD_VAR 0 3
13472: PUSH
13473: LD_VAR 0 8
13477: STR
13478: PUSH
13479: LD_STRING ;
13481: STR
13482: ST_TO_ADDR
// end ;
13483: GO 13448
13485: POP
13486: POP
// for i = 1 to hardcoreCounter do
13487: LD_ADDR_VAR 0 8
13491: PUSH
13492: DOUBLE
13493: LD_INT 1
13495: DEC
13496: ST_TO_ADDR
13497: LD_EXP 21
13501: PUSH
13502: FOR_TO
13503: IFFALSE 13549
// begin if flags [ normalCounter + i ] then
13505: LD_VAR 0 4
13509: PUSH
13510: LD_EXP 20
13514: PUSH
13515: LD_VAR 0 8
13519: PLUS
13520: ARRAY
13521: IFFALSE 13547
// tmp := tmp & ( 100 + i ) & ; ;
13523: LD_ADDR_VAR 0 3
13527: PUSH
13528: LD_VAR 0 3
13532: PUSH
13533: LD_INT 100
13535: PUSH
13536: LD_VAR 0 8
13540: PLUS
13541: STR
13542: PUSH
13543: LD_STRING ;
13545: STR
13546: ST_TO_ADDR
// end ;
13547: GO 13502
13549: POP
13550: POP
// if tmp then
13551: LD_VAR 0 3
13555: IFFALSE 13567
// active := tmp ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_VAR 0 3
13566: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13567: LD_STRING getStreamItemsFromMission("
13569: PUSH
13570: LD_VAR 0 5
13574: STR
13575: PUSH
13576: LD_STRING ","
13578: STR
13579: PUSH
13580: LD_VAR 0 6
13584: STR
13585: PUSH
13586: LD_STRING ","
13588: STR
13589: PUSH
13590: LD_VAR 0 7
13594: STR
13595: PUSH
13596: LD_STRING ")
13598: STR
13599: PPUSH
13600: CALL_OW 559
// end else
13604: GO 13613
// ToLua ( getStreamItemsFromMission("","","") ) ;
13606: LD_STRING getStreamItemsFromMission("","","")
13608: PPUSH
13609: CALL_OW 559
// end ;
13613: LD_VAR 0 2
13617: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13618: LD_EXP 19
13622: PUSH
13623: LD_EXP 24
13627: AND
13628: IFFALSE 13752
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
// begin enable ;
13637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13638: LD_ADDR_VAR 0 2
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_OWVAR 2
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 2
13657: PUSH
13658: LD_INT 34
13660: PUSH
13661: LD_INT 7
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 34
13670: PUSH
13671: LD_INT 45
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 34
13680: PUSH
13681: LD_INT 28
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 34
13690: PUSH
13691: LD_INT 47
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 69
13713: ST_TO_ADDR
// if not tmp then
13714: LD_VAR 0 2
13718: NOT
13719: IFFALSE 13723
// exit ;
13721: GO 13752
// for i in tmp do
13723: LD_ADDR_VAR 0 1
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: FOR_IN
13734: IFFALSE 13750
// begin SetLives ( i , 0 ) ;
13736: LD_VAR 0 1
13740: PPUSH
13741: LD_INT 0
13743: PPUSH
13744: CALL_OW 234
// end ;
13748: GO 13733
13750: POP
13751: POP
// end ;
13752: PPOPN 2
13754: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13755: LD_EXP 19
13759: PUSH
13760: LD_EXP 25
13764: AND
13765: IFFALSE 13849
13767: GO 13769
13769: DISABLE
13770: LD_INT 0
13772: PPUSH
13773: PPUSH
// begin enable ;
13774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_OWVAR 2
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 32
13794: PUSH
13795: LD_INT 3
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: ST_TO_ADDR
// if not tmp then
13811: LD_VAR 0 2
13815: NOT
13816: IFFALSE 13820
// exit ;
13818: GO 13849
// for i in tmp do
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_VAR 0 2
13829: PUSH
13830: FOR_IN
13831: IFFALSE 13847
// begin SetLives ( i , 0 ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_INT 0
13840: PPUSH
13841: CALL_OW 234
// end ;
13845: GO 13830
13847: POP
13848: POP
// end ;
13849: PPOPN 2
13851: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13852: LD_EXP 19
13856: PUSH
13857: LD_EXP 22
13861: AND
13862: IFFALSE 13955
13864: GO 13866
13866: DISABLE
13867: LD_INT 0
13869: PPUSH
// begin enable ;
13870: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13871: LD_ADDR_VAR 0 1
13875: PUSH
13876: LD_INT 22
13878: PUSH
13879: LD_OWVAR 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 5
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 9
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: PUSH
13936: FOR_IN
13937: IFFALSE 13953
// begin SetClass ( i , 1 ) ;
13939: LD_VAR 0 1
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 336
// end ;
13951: GO 13936
13953: POP
13954: POP
// end ;
13955: PPOPN 1
13957: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13958: LD_EXP 19
13962: PUSH
13963: LD_EXP 23
13967: AND
13968: PUSH
13969: LD_OWVAR 65
13973: PUSH
13974: LD_INT 7
13976: LESS
13977: AND
13978: IFFALSE 13992
13980: GO 13982
13982: DISABLE
// begin enable ;
13983: ENABLE
// game_speed := 7 ;
13984: LD_ADDR_OWVAR 65
13988: PUSH
13989: LD_INT 7
13991: ST_TO_ADDR
// end ;
13992: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13993: LD_EXP 19
13997: PUSH
13998: LD_EXP 26
14002: AND
14003: IFFALSE 14205
14005: GO 14007
14007: DISABLE
14008: LD_INT 0
14010: PPUSH
14011: PPUSH
14012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14013: LD_ADDR_VAR 0 3
14017: PUSH
14018: LD_INT 81
14020: PUSH
14021: LD_OWVAR 2
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: ST_TO_ADDR
// if not tmp then
14049: LD_VAR 0 3
14053: NOT
14054: IFFALSE 14058
// exit ;
14056: GO 14205
// if tmp > 5 then
14058: LD_VAR 0 3
14062: PUSH
14063: LD_INT 5
14065: GREATER
14066: IFFALSE 14078
// k := 5 else
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 5
14075: ST_TO_ADDR
14076: GO 14088
// k := tmp ;
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_VAR 0 3
14087: ST_TO_ADDR
// for i := 1 to k do
14088: LD_ADDR_VAR 0 1
14092: PUSH
14093: DOUBLE
14094: LD_INT 1
14096: DEC
14097: ST_TO_ADDR
14098: LD_VAR 0 2
14102: PUSH
14103: FOR_TO
14104: IFFALSE 14203
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14106: LD_VAR 0 3
14110: PUSH
14111: LD_VAR 0 1
14115: ARRAY
14116: PPUSH
14117: LD_VAR 0 1
14121: PUSH
14122: LD_INT 4
14124: MOD
14125: PUSH
14126: LD_INT 1
14128: PLUS
14129: PPUSH
14130: CALL_OW 259
14134: PUSH
14135: LD_INT 10
14137: LESS
14138: IFFALSE 14201
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14140: LD_VAR 0 3
14144: PUSH
14145: LD_VAR 0 1
14149: ARRAY
14150: PPUSH
14151: LD_VAR 0 1
14155: PUSH
14156: LD_INT 4
14158: MOD
14159: PUSH
14160: LD_INT 1
14162: PLUS
14163: PPUSH
14164: LD_VAR 0 3
14168: PUSH
14169: LD_VAR 0 1
14173: ARRAY
14174: PPUSH
14175: LD_VAR 0 1
14179: PUSH
14180: LD_INT 4
14182: MOD
14183: PUSH
14184: LD_INT 1
14186: PLUS
14187: PPUSH
14188: CALL_OW 259
14192: PUSH
14193: LD_INT 1
14195: PLUS
14196: PPUSH
14197: CALL_OW 237
14201: GO 14103
14203: POP
14204: POP
// end ;
14205: PPOPN 3
14207: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14208: LD_EXP 19
14212: PUSH
14213: LD_EXP 27
14217: AND
14218: IFFALSE 14238
14220: GO 14222
14222: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14223: LD_INT 4
14225: PPUSH
14226: LD_OWVAR 2
14230: PPUSH
14231: LD_INT 0
14233: PPUSH
14234: CALL_OW 324
14238: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14239: LD_EXP 19
14243: PUSH
14244: LD_EXP 56
14248: AND
14249: IFFALSE 14269
14251: GO 14253
14253: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14254: LD_INT 19
14256: PPUSH
14257: LD_OWVAR 2
14261: PPUSH
14262: LD_INT 0
14264: PPUSH
14265: CALL_OW 324
14269: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14270: LD_EXP 19
14274: PUSH
14275: LD_EXP 28
14279: AND
14280: IFFALSE 14382
14282: GO 14284
14284: DISABLE
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
// begin enable ;
14289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14290: LD_ADDR_VAR 0 2
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_OWVAR 2
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 2
14309: PUSH
14310: LD_INT 34
14312: PUSH
14313: LD_INT 11
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 34
14322: PUSH
14323: LD_INT 30
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 69
14343: ST_TO_ADDR
// if not tmp then
14344: LD_VAR 0 2
14348: NOT
14349: IFFALSE 14353
// exit ;
14351: GO 14382
// for i in tmp do
14353: LD_ADDR_VAR 0 1
14357: PUSH
14358: LD_VAR 0 2
14362: PUSH
14363: FOR_IN
14364: IFFALSE 14380
// begin SetLives ( i , 0 ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: LD_INT 0
14373: PPUSH
14374: CALL_OW 234
// end ;
14378: GO 14363
14380: POP
14381: POP
// end ;
14382: PPOPN 2
14384: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14385: LD_EXP 19
14389: PUSH
14390: LD_EXP 29
14394: AND
14395: IFFALSE 14415
14397: GO 14399
14399: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14400: LD_INT 32
14402: PPUSH
14403: LD_OWVAR 2
14407: PPUSH
14408: LD_INT 0
14410: PPUSH
14411: CALL_OW 324
14415: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14416: LD_EXP 19
14420: PUSH
14421: LD_EXP 30
14425: AND
14426: IFFALSE 14607
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
14435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14436: LD_ADDR_VAR 0 2
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_OWVAR 2
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 33
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 69
14471: ST_TO_ADDR
// if not tmp then
14472: LD_VAR 0 2
14476: NOT
14477: IFFALSE 14481
// exit ;
14479: GO 14607
// side := 0 ;
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// for i := 1 to 8 do
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_INT 8
14501: PUSH
14502: FOR_TO
14503: IFFALSE 14551
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14505: LD_OWVAR 2
14509: PUSH
14510: LD_VAR 0 1
14514: NONEQUAL
14515: PUSH
14516: LD_OWVAR 2
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 81
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: AND
14535: IFFALSE 14549
// begin side := i ;
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_VAR 0 1
14546: ST_TO_ADDR
// break ;
14547: GO 14551
// end ;
14549: GO 14502
14551: POP
14552: POP
// if not side then
14553: LD_VAR 0 3
14557: NOT
14558: IFFALSE 14562
// exit ;
14560: GO 14607
// for i := 1 to tmp do
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: DOUBLE
14568: LD_INT 1
14570: DEC
14571: ST_TO_ADDR
14572: LD_VAR 0 2
14576: PUSH
14577: FOR_TO
14578: IFFALSE 14605
// if Prob ( 60 ) then
14580: LD_INT 60
14582: PPUSH
14583: CALL_OW 13
14587: IFFALSE 14603
// SetSide ( i , side ) ;
14589: LD_VAR 0 1
14593: PPUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: CALL_OW 235
14603: GO 14577
14605: POP
14606: POP
// end ;
14607: PPOPN 3
14609: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14610: LD_EXP 19
14614: PUSH
14615: LD_EXP 32
14619: AND
14620: IFFALSE 14739
14622: GO 14624
14624: DISABLE
14625: LD_INT 0
14627: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_OWVAR 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 21
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 3
14657: PUSH
14658: LD_INT 23
14660: PUSH
14661: LD_INT 0
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: PUSH
14682: FOR_IN
14683: IFFALSE 14737
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 257
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: LD_INT 3
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: IN
14713: IFFALSE 14735
// SetClass ( un , rand ( 1 , 4 ) ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: LD_INT 4
14725: PPUSH
14726: CALL_OW 12
14730: PPUSH
14731: CALL_OW 336
14735: GO 14682
14737: POP
14738: POP
// end ;
14739: PPOPN 1
14741: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14742: LD_EXP 19
14746: PUSH
14747: LD_EXP 31
14751: AND
14752: IFFALSE 14831
14754: GO 14756
14756: DISABLE
14757: LD_INT 0
14759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_OWVAR 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: ST_TO_ADDR
// if not tmp then
14796: LD_VAR 0 1
14800: NOT
14801: IFFALSE 14805
// exit ;
14803: GO 14831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 1
14812: PPUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 12
14822: ARRAY
14823: PPUSH
14824: LD_INT 100
14826: PPUSH
14827: CALL_OW 234
// end ;
14831: PPOPN 1
14833: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14834: LD_EXP 19
14838: PUSH
14839: LD_EXP 33
14843: AND
14844: IFFALSE 14942
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14852: LD_ADDR_VAR 0 1
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_OWVAR 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 21
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: ST_TO_ADDR
// if not tmp then
14888: LD_VAR 0 1
14892: NOT
14893: IFFALSE 14897
// exit ;
14895: GO 14942
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14897: LD_VAR 0 1
14901: PUSH
14902: LD_INT 1
14904: PPUSH
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 12
14914: ARRAY
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: LD_INT 4
14921: PPUSH
14922: CALL_OW 12
14926: PPUSH
14927: LD_INT 3000
14929: PPUSH
14930: LD_INT 9000
14932: PPUSH
14933: CALL_OW 12
14937: PPUSH
14938: CALL_OW 492
// end ;
14942: PPOPN 1
14944: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14945: LD_EXP 19
14949: PUSH
14950: LD_EXP 34
14954: AND
14955: IFFALSE 14975
14957: GO 14959
14959: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14960: LD_INT 1
14962: PPUSH
14963: LD_OWVAR 2
14967: PPUSH
14968: LD_INT 0
14970: PPUSH
14971: CALL_OW 324
14975: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14976: LD_EXP 19
14980: PUSH
14981: LD_EXP 35
14985: AND
14986: IFFALSE 15069
14988: GO 14990
14990: DISABLE
14991: LD_INT 0
14993: PPUSH
14994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14995: LD_ADDR_VAR 0 2
14999: PUSH
15000: LD_INT 22
15002: PUSH
15003: LD_OWVAR 2
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 3
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// if not tmp then
15031: LD_VAR 0 2
15035: NOT
15036: IFFALSE 15040
// exit ;
15038: GO 15069
// for i in tmp do
15040: LD_ADDR_VAR 0 1
15044: PUSH
15045: LD_VAR 0 2
15049: PUSH
15050: FOR_IN
15051: IFFALSE 15067
// SetBLevel ( i , 10 ) ;
15053: LD_VAR 0 1
15057: PPUSH
15058: LD_INT 10
15060: PPUSH
15061: CALL_OW 241
15065: GO 15050
15067: POP
15068: POP
// end ;
15069: PPOPN 2
15071: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15072: LD_EXP 19
15076: PUSH
15077: LD_EXP 36
15081: AND
15082: IFFALSE 15193
15084: GO 15086
15086: DISABLE
15087: LD_INT 0
15089: PPUSH
15090: PPUSH
15091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_INT 22
15099: PUSH
15100: LD_OWVAR 2
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 25
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: ST_TO_ADDR
// if not tmp then
15128: LD_VAR 0 3
15132: NOT
15133: IFFALSE 15137
// exit ;
15135: GO 15193
// un := tmp [ rand ( 1 , tmp ) ] ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_VAR 0 3
15146: PUSH
15147: LD_INT 1
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: CALL_OW 12
15159: ARRAY
15160: ST_TO_ADDR
// if Crawls ( un ) then
15161: LD_VAR 0 2
15165: PPUSH
15166: CALL_OW 318
15170: IFFALSE 15181
// ComWalk ( un ) ;
15172: LD_VAR 0 2
15176: PPUSH
15177: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15181: LD_VAR 0 2
15185: PPUSH
15186: LD_INT 5
15188: PPUSH
15189: CALL_OW 336
// end ;
15193: PPOPN 3
15195: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15196: LD_EXP 19
15200: PUSH
15201: LD_EXP 37
15205: AND
15206: PUSH
15207: LD_OWVAR 67
15211: PUSH
15212: LD_INT 4
15214: LESS
15215: AND
15216: IFFALSE 15235
15218: GO 15220
15220: DISABLE
// begin Difficulty := Difficulty + 1 ;
15221: LD_ADDR_OWVAR 67
15225: PUSH
15226: LD_OWVAR 67
15230: PUSH
15231: LD_INT 1
15233: PLUS
15234: ST_TO_ADDR
// end ;
15235: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15236: LD_EXP 19
15240: PUSH
15241: LD_EXP 38
15245: AND
15246: IFFALSE 15349
15248: GO 15250
15250: DISABLE
15251: LD_INT 0
15253: PPUSH
// begin for i := 1 to 5 do
15254: LD_ADDR_VAR 0 1
15258: PUSH
15259: DOUBLE
15260: LD_INT 1
15262: DEC
15263: ST_TO_ADDR
15264: LD_INT 5
15266: PUSH
15267: FOR_TO
15268: IFFALSE 15347
// begin uc_nation := nation_nature ;
15270: LD_ADDR_OWVAR 21
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_side := 0 ;
15278: LD_ADDR_OWVAR 20
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15286: LD_ADDR_OWVAR 29
15290: PUSH
15291: LD_INT 12
15293: PUSH
15294: LD_INT 12
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: ST_TO_ADDR
// hc_agressivity := 20 ;
15301: LD_ADDR_OWVAR 35
15305: PUSH
15306: LD_INT 20
15308: ST_TO_ADDR
// hc_class := class_tiger ;
15309: LD_ADDR_OWVAR 28
15313: PUSH
15314: LD_INT 14
15316: ST_TO_ADDR
// hc_gallery :=  ;
15317: LD_ADDR_OWVAR 33
15321: PUSH
15322: LD_STRING 
15324: ST_TO_ADDR
// hc_name :=  ;
15325: LD_ADDR_OWVAR 26
15329: PUSH
15330: LD_STRING 
15332: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15333: CALL_OW 44
15337: PPUSH
15338: LD_INT 0
15340: PPUSH
15341: CALL_OW 51
// end ;
15345: GO 15267
15347: POP
15348: POP
// end ;
15349: PPOPN 1
15351: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15352: LD_EXP 19
15356: PUSH
15357: LD_EXP 39
15361: AND
15362: IFFALSE 15371
15364: GO 15366
15366: DISABLE
// StreamSibBomb ;
15367: CALL 15372 0 0
15371: END
// export function StreamSibBomb ; var i , x , y ; begin
15372: LD_INT 0
15374: PPUSH
15375: PPUSH
15376: PPUSH
15377: PPUSH
// result := false ;
15378: LD_ADDR_VAR 0 1
15382: PUSH
15383: LD_INT 0
15385: ST_TO_ADDR
// for i := 1 to 16 do
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: DOUBLE
15392: LD_INT 1
15394: DEC
15395: ST_TO_ADDR
15396: LD_INT 16
15398: PUSH
15399: FOR_TO
15400: IFFALSE 15599
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15402: LD_ADDR_VAR 0 3
15406: PUSH
15407: LD_INT 10
15409: PUSH
15410: LD_INT 20
15412: PUSH
15413: LD_INT 30
15415: PUSH
15416: LD_INT 40
15418: PUSH
15419: LD_INT 50
15421: PUSH
15422: LD_INT 60
15424: PUSH
15425: LD_INT 70
15427: PUSH
15428: LD_INT 80
15430: PUSH
15431: LD_INT 90
15433: PUSH
15434: LD_INT 100
15436: PUSH
15437: LD_INT 110
15439: PUSH
15440: LD_INT 120
15442: PUSH
15443: LD_INT 130
15445: PUSH
15446: LD_INT 140
15448: PUSH
15449: LD_INT 150
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 1
15471: PPUSH
15472: LD_INT 15
15474: PPUSH
15475: CALL_OW 12
15479: ARRAY
15480: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15481: LD_ADDR_VAR 0 4
15485: PUSH
15486: LD_INT 10
15488: PUSH
15489: LD_INT 20
15491: PUSH
15492: LD_INT 30
15494: PUSH
15495: LD_INT 40
15497: PUSH
15498: LD_INT 50
15500: PUSH
15501: LD_INT 60
15503: PUSH
15504: LD_INT 70
15506: PUSH
15507: LD_INT 80
15509: PUSH
15510: LD_INT 90
15512: PUSH
15513: LD_INT 100
15515: PUSH
15516: LD_INT 110
15518: PUSH
15519: LD_INT 120
15521: PUSH
15522: LD_INT 130
15524: PUSH
15525: LD_INT 140
15527: PUSH
15528: LD_INT 150
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 1
15550: PPUSH
15551: LD_INT 15
15553: PPUSH
15554: CALL_OW 12
15558: ARRAY
15559: ST_TO_ADDR
// if ValidHex ( x , y ) then
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_VAR 0 4
15569: PPUSH
15570: CALL_OW 488
15574: IFFALSE 15597
// begin result := [ x , y ] ;
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 4
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: ST_TO_ADDR
// break ;
15595: GO 15599
// end ; end ;
15597: GO 15399
15599: POP
15600: POP
// if result then
15601: LD_VAR 0 1
15605: IFFALSE 15665
// begin ToLua ( playSibBomb() ) ;
15607: LD_STRING playSibBomb()
15609: PPUSH
15610: CALL_OW 559
// wait ( 0 0$14 ) ;
15614: LD_INT 490
15616: PPUSH
15617: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 2
15637: ARRAY
15638: PPUSH
15639: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15643: LD_VAR 0 1
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_VAR 0 1
15656: PUSH
15657: LD_INT 2
15659: ARRAY
15660: PPUSH
15661: CALL_OW 429
// end ; end ;
15665: LD_VAR 0 1
15669: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15670: LD_EXP 19
15674: PUSH
15675: LD_EXP 41
15679: AND
15680: IFFALSE 15692
15682: GO 15684
15684: DISABLE
// YouLost (  ) ;
15685: LD_STRING 
15687: PPUSH
15688: CALL_OW 104
15692: END
// every 0 0$1 trigger StreamModeActive and sFog do
15693: LD_EXP 19
15697: PUSH
15698: LD_EXP 40
15702: AND
15703: IFFALSE 15717
15705: GO 15707
15707: DISABLE
// FogOff ( your_side ) ;
15708: LD_OWVAR 2
15712: PPUSH
15713: CALL_OW 344
15717: END
// every 0 0$1 trigger StreamModeActive and sSun do
15718: LD_EXP 19
15722: PUSH
15723: LD_EXP 42
15727: AND
15728: IFFALSE 15756
15730: GO 15732
15732: DISABLE
// begin solar_recharge_percent := 0 ;
15733: LD_ADDR_OWVAR 79
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15741: LD_INT 10500
15743: PPUSH
15744: CALL_OW 67
// solar_recharge_percent := 100 ;
15748: LD_ADDR_OWVAR 79
15752: PUSH
15753: LD_INT 100
15755: ST_TO_ADDR
// end ;
15756: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15757: LD_EXP 19
15761: PUSH
15762: LD_EXP 43
15766: AND
15767: IFFALSE 16006
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
15776: PPUSH
// begin tmp := [ ] ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: EMPTY
15783: ST_TO_ADDR
// for i := 1 to 6 do
15784: LD_ADDR_VAR 0 1
15788: PUSH
15789: DOUBLE
15790: LD_INT 1
15792: DEC
15793: ST_TO_ADDR
15794: LD_INT 6
15796: PUSH
15797: FOR_TO
15798: IFFALSE 15903
// begin uc_nation := nation_nature ;
15800: LD_ADDR_OWVAR 21
15804: PUSH
15805: LD_INT 0
15807: ST_TO_ADDR
// uc_side := 0 ;
15808: LD_ADDR_OWVAR 20
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15816: LD_ADDR_OWVAR 29
15820: PUSH
15821: LD_INT 12
15823: PUSH
15824: LD_INT 12
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: ST_TO_ADDR
// hc_agressivity := 20 ;
15831: LD_ADDR_OWVAR 35
15835: PUSH
15836: LD_INT 20
15838: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15839: LD_ADDR_OWVAR 28
15843: PUSH
15844: LD_INT 17
15846: ST_TO_ADDR
// hc_gallery :=  ;
15847: LD_ADDR_OWVAR 33
15851: PUSH
15852: LD_STRING 
15854: ST_TO_ADDR
// hc_name :=  ;
15855: LD_ADDR_OWVAR 26
15859: PUSH
15860: LD_STRING 
15862: ST_TO_ADDR
// un := CreateHuman ;
15863: LD_ADDR_VAR 0 2
15867: PUSH
15868: CALL_OW 44
15872: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15873: LD_VAR 0 2
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 51
// tmp := tmp ^ un ;
15885: LD_ADDR_VAR 0 3
15889: PUSH
15890: LD_VAR 0 3
15894: PUSH
15895: LD_VAR 0 2
15899: ADD
15900: ST_TO_ADDR
// end ;
15901: GO 15797
15903: POP
15904: POP
// repeat wait ( 0 0$1 ) ;
15905: LD_INT 35
15907: PPUSH
15908: CALL_OW 67
// for un in tmp do
15912: LD_ADDR_VAR 0 2
15916: PUSH
15917: LD_VAR 0 3
15921: PUSH
15922: FOR_IN
15923: IFFALSE 15997
// begin if IsDead ( un ) then
15925: LD_VAR 0 2
15929: PPUSH
15930: CALL_OW 301
15934: IFFALSE 15954
// begin tmp := tmp diff un ;
15936: LD_ADDR_VAR 0 3
15940: PUSH
15941: LD_VAR 0 3
15945: PUSH
15946: LD_VAR 0 2
15950: DIFF
15951: ST_TO_ADDR
// continue ;
15952: GO 15922
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15954: LD_VAR 0 2
15958: PPUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 22
15964: PUSH
15965: LD_INT 0
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 74
15990: PPUSH
15991: CALL_OW 115
// end ;
15995: GO 15922
15997: POP
15998: POP
// until not tmp ;
15999: LD_VAR 0 3
16003: NOT
16004: IFFALSE 15905
// end ;
16006: PPOPN 3
16008: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16009: LD_EXP 19
16013: PUSH
16014: LD_EXP 44
16018: AND
16019: IFFALSE 16073
16021: GO 16023
16023: DISABLE
// begin ToLua ( displayTroll(); ) ;
16024: LD_STRING displayTroll();
16026: PPUSH
16027: CALL_OW 559
// wait ( 3 3$00 ) ;
16031: LD_INT 6300
16033: PPUSH
16034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16038: LD_STRING hideTroll();
16040: PPUSH
16041: CALL_OW 559
// wait ( 1 1$00 ) ;
16045: LD_INT 2100
16047: PPUSH
16048: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16052: LD_STRING displayTroll();
16054: PPUSH
16055: CALL_OW 559
// wait ( 1 1$00 ) ;
16059: LD_INT 2100
16061: PPUSH
16062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16066: LD_STRING hideTroll();
16068: PPUSH
16069: CALL_OW 559
// end ;
16073: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16074: LD_EXP 19
16078: PUSH
16079: LD_EXP 45
16083: AND
16084: IFFALSE 16147
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
// begin p := 0 ;
16092: LD_ADDR_VAR 0 1
16096: PUSH
16097: LD_INT 0
16099: ST_TO_ADDR
// repeat game_speed := 1 ;
16100: LD_ADDR_OWVAR 65
16104: PUSH
16105: LD_INT 1
16107: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16108: LD_INT 35
16110: PPUSH
16111: CALL_OW 67
// p := p + 1 ;
16115: LD_ADDR_VAR 0 1
16119: PUSH
16120: LD_VAR 0 1
16124: PUSH
16125: LD_INT 1
16127: PLUS
16128: ST_TO_ADDR
// until p >= 60 ;
16129: LD_VAR 0 1
16133: PUSH
16134: LD_INT 60
16136: GREATEREQUAL
16137: IFFALSE 16100
// game_speed := 4 ;
16139: LD_ADDR_OWVAR 65
16143: PUSH
16144: LD_INT 4
16146: ST_TO_ADDR
// end ;
16147: PPOPN 1
16149: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16150: LD_EXP 19
16154: PUSH
16155: LD_EXP 46
16159: AND
16160: IFFALSE 16306
16162: GO 16164
16164: DISABLE
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16169: LD_ADDR_VAR 0 1
16173: PUSH
16174: LD_INT 22
16176: PUSH
16177: LD_OWVAR 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: LD_INT 30
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 30
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PPUSH
16218: CALL_OW 69
16222: ST_TO_ADDR
// if not depot then
16223: LD_VAR 0 1
16227: NOT
16228: IFFALSE 16232
// exit ;
16230: GO 16306
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 1
16244: PPUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL_OW 12
16254: ARRAY
16255: PPUSH
16256: CALL_OW 274
16260: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 0
16271: PPUSH
16272: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16276: LD_VAR 0 2
16280: PPUSH
16281: LD_INT 2
16283: PPUSH
16284: LD_INT 0
16286: PPUSH
16287: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16291: LD_VAR 0 2
16295: PPUSH
16296: LD_INT 3
16298: PPUSH
16299: LD_INT 0
16301: PPUSH
16302: CALL_OW 277
// end ;
16306: PPOPN 2
16308: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16309: LD_EXP 19
16313: PUSH
16314: LD_EXP 47
16318: AND
16319: IFFALSE 16416
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 21
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 3
16356: PUSH
16357: LD_INT 23
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 1
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16390: LD_VAR 0 1
16394: PUSH
16395: LD_INT 1
16397: PPUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 12
16407: ARRAY
16408: PPUSH
16409: LD_INT 200
16411: PPUSH
16412: CALL_OW 234
// end ;
16416: PPOPN 1
16418: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16419: LD_EXP 19
16423: PUSH
16424: LD_EXP 48
16428: AND
16429: IFFALSE 16508
16431: GO 16433
16433: DISABLE
16434: LD_INT 0
16436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16437: LD_ADDR_VAR 0 1
16441: PUSH
16442: LD_INT 22
16444: PUSH
16445: LD_OWVAR 2
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 21
16456: PUSH
16457: LD_INT 2
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// if not tmp then
16473: LD_VAR 0 1
16477: NOT
16478: IFFALSE 16482
// exit ;
16480: GO 16508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16482: LD_VAR 0 1
16486: PUSH
16487: LD_INT 1
16489: PPUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 12
16499: ARRAY
16500: PPUSH
16501: LD_INT 60
16503: PPUSH
16504: CALL_OW 234
// end ;
16508: PPOPN 1
16510: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16511: LD_EXP 19
16515: PUSH
16516: LD_EXP 49
16520: AND
16521: IFFALSE 16620
16523: GO 16525
16525: DISABLE
16526: LD_INT 0
16528: PPUSH
16529: PPUSH
// begin enable ;
16530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16531: LD_ADDR_VAR 0 1
16535: PUSH
16536: LD_INT 22
16538: PUSH
16539: LD_OWVAR 2
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 61
16550: PUSH
16551: EMPTY
16552: LIST
16553: PUSH
16554: LD_INT 33
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 69
16573: ST_TO_ADDR
// if not tmp then
16574: LD_VAR 0 1
16578: NOT
16579: IFFALSE 16583
// exit ;
16581: GO 16620
// for i in tmp do
16583: LD_ADDR_VAR 0 2
16587: PUSH
16588: LD_VAR 0 1
16592: PUSH
16593: FOR_IN
16594: IFFALSE 16618
// if IsControledBy ( i ) then
16596: LD_VAR 0 2
16600: PPUSH
16601: CALL_OW 312
16605: IFFALSE 16616
// ComUnlink ( i ) ;
16607: LD_VAR 0 2
16611: PPUSH
16612: CALL_OW 136
16616: GO 16593
16618: POP
16619: POP
// end ;
16620: PPOPN 2
16622: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16623: LD_EXP 19
16627: PUSH
16628: LD_EXP 50
16632: AND
16633: IFFALSE 16773
16635: GO 16637
16637: DISABLE
16638: LD_INT 0
16640: PPUSH
16641: PPUSH
// begin ToLua ( displayPowell(); ) ;
16642: LD_STRING displayPowell();
16644: PPUSH
16645: CALL_OW 559
// uc_side := 0 ;
16649: LD_ADDR_OWVAR 20
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// uc_nation := 2 ;
16657: LD_ADDR_OWVAR 21
16661: PUSH
16662: LD_INT 2
16664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16665: LD_ADDR_OWVAR 37
16669: PUSH
16670: LD_INT 14
16672: ST_TO_ADDR
// vc_engine := engine_siberite ;
16673: LD_ADDR_OWVAR 39
16677: PUSH
16678: LD_INT 3
16680: ST_TO_ADDR
// vc_control := control_apeman ;
16681: LD_ADDR_OWVAR 38
16685: PUSH
16686: LD_INT 5
16688: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16689: LD_ADDR_OWVAR 40
16693: PUSH
16694: LD_INT 29
16696: ST_TO_ADDR
// un := CreateVehicle ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: CALL_OW 45
16706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16707: LD_VAR 0 2
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16726: LD_VAR 0 2
16730: PPUSH
16731: LD_INT 22
16733: PUSH
16734: LD_OWVAR 2
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PPUSH
16743: CALL_OW 69
16747: PPUSH
16748: LD_VAR 0 2
16752: PPUSH
16753: CALL_OW 74
16757: PPUSH
16758: CALL_OW 115
// until IsDead ( un ) ;
16762: LD_VAR 0 2
16766: PPUSH
16767: CALL_OW 301
16771: IFFALSE 16719
// end ;
16773: PPOPN 2
16775: END
// every 0 0$1 trigger StreamModeActive and sStu do
16776: LD_EXP 19
16780: PUSH
16781: LD_EXP 58
16785: AND
16786: IFFALSE 16802
16788: GO 16790
16790: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16791: LD_STRING displayStucuk();
16793: PPUSH
16794: CALL_OW 559
// ResetFog ;
16798: CALL_OW 335
// end ;
16802: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16803: LD_EXP 19
16807: PUSH
16808: LD_EXP 51
16812: AND
16813: IFFALSE 16954
16815: GO 16817
16817: DISABLE
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_INT 22
16829: PUSH
16830: LD_OWVAR 2
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 21
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PPUSH
16853: CALL_OW 69
16857: ST_TO_ADDR
// if not tmp then
16858: LD_VAR 0 2
16862: NOT
16863: IFFALSE 16867
// exit ;
16865: GO 16954
// un := tmp [ rand ( 1 , tmp ) ] ;
16867: LD_ADDR_VAR 0 1
16871: PUSH
16872: LD_VAR 0 2
16876: PUSH
16877: LD_INT 1
16879: PPUSH
16880: LD_VAR 0 2
16884: PPUSH
16885: CALL_OW 12
16889: ARRAY
16890: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16903: LD_VAR 0 1
16907: PPUSH
16908: LD_OWVAR 3
16912: PUSH
16913: LD_VAR 0 1
16917: DIFF
16918: PPUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 74
16928: PPUSH
16929: CALL_OW 115
// wait ( 0 0$20 ) ;
16933: LD_INT 700
16935: PPUSH
16936: CALL_OW 67
// SetSide ( un , your_side ) ;
16940: LD_VAR 0 1
16944: PPUSH
16945: LD_OWVAR 2
16949: PPUSH
16950: CALL_OW 235
// end ;
16954: PPOPN 2
16956: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16957: LD_EXP 19
16961: PUSH
16962: LD_EXP 52
16966: AND
16967: IFFALSE 17073
16969: GO 16971
16971: DISABLE
16972: LD_INT 0
16974: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_OWVAR 2
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: LD_INT 30
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: ST_TO_ADDR
// if not depot then
17029: LD_VAR 0 1
17033: NOT
17034: IFFALSE 17038
// exit ;
17036: GO 17073
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17038: LD_VAR 0 1
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: CALL_OW 250
17051: PPUSH
17052: LD_VAR 0 1
17056: PUSH
17057: LD_INT 1
17059: ARRAY
17060: PPUSH
17061: CALL_OW 251
17065: PPUSH
17066: LD_INT 70
17068: PPUSH
17069: CALL_OW 495
// end ;
17073: PPOPN 1
17075: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17076: LD_EXP 19
17080: PUSH
17081: LD_EXP 53
17085: AND
17086: IFFALSE 17297
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17098: LD_ADDR_VAR 0 5
17102: PUSH
17103: LD_INT 22
17105: PUSH
17106: LD_OWVAR 2
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if not tmp then
17134: LD_VAR 0 5
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17297
// for i in tmp do
17143: LD_ADDR_VAR 0 1
17147: PUSH
17148: LD_VAR 0 5
17152: PUSH
17153: FOR_IN
17154: IFFALSE 17295
// begin d := rand ( 0 , 5 ) ;
17156: LD_ADDR_VAR 0 4
17160: PUSH
17161: LD_INT 0
17163: PPUSH
17164: LD_INT 5
17166: PPUSH
17167: CALL_OW 12
17171: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17172: LD_ADDR_VAR 0 2
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 250
17186: PPUSH
17187: LD_VAR 0 4
17191: PPUSH
17192: LD_INT 3
17194: PPUSH
17195: LD_INT 12
17197: PPUSH
17198: CALL_OW 12
17202: PPUSH
17203: CALL_OW 272
17207: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17208: LD_ADDR_VAR 0 3
17212: PUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 251
17222: PPUSH
17223: LD_VAR 0 4
17227: PPUSH
17228: LD_INT 3
17230: PPUSH
17231: LD_INT 12
17233: PPUSH
17234: CALL_OW 12
17238: PPUSH
17239: CALL_OW 273
17243: ST_TO_ADDR
// if ValidHex ( x , y ) then
17244: LD_VAR 0 2
17248: PPUSH
17249: LD_VAR 0 3
17253: PPUSH
17254: CALL_OW 488
17258: IFFALSE 17293
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_INT 3
17277: PPUSH
17278: LD_INT 6
17280: PPUSH
17281: CALL_OW 12
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 483
// end ;
17293: GO 17153
17295: POP
17296: POP
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17300: LD_EXP 19
17304: PUSH
17305: LD_EXP 54
17309: AND
17310: IFFALSE 17404
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_OWVAR 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 32
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ST_TO_ADDR
// if not tmp then
17366: LD_VAR 0 2
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17404
// for i in tmp do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17402
// SetFuel ( i , 0 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 0
17395: PPUSH
17396: CALL_OW 240
17400: GO 17385
17402: POP
17403: POP
// end ;
17404: PPOPN 2
17406: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17407: LD_EXP 19
17411: PUSH
17412: LD_EXP 55
17416: AND
17417: IFFALSE 17483
17419: GO 17421
17421: DISABLE
17422: LD_INT 0
17424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17425: LD_ADDR_VAR 0 1
17429: PUSH
17430: LD_INT 22
17432: PUSH
17433: LD_OWVAR 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: LD_INT 29
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 69
17460: ST_TO_ADDR
// if not tmp then
17461: LD_VAR 0 1
17465: NOT
17466: IFFALSE 17470
// exit ;
17468: GO 17483
// DestroyUnit ( tmp [ 1 ] ) ;
17470: LD_VAR 0 1
17474: PUSH
17475: LD_INT 1
17477: ARRAY
17478: PPUSH
17479: CALL_OW 65
// end ;
17483: PPOPN 1
17485: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17486: LD_EXP 19
17490: PUSH
17491: LD_EXP 57
17495: AND
17496: IFFALSE 17625
17498: GO 17500
17500: DISABLE
17501: LD_INT 0
17503: PPUSH
// begin uc_side := 0 ;
17504: LD_ADDR_OWVAR 20
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// uc_nation := nation_arabian ;
17512: LD_ADDR_OWVAR 21
17516: PUSH
17517: LD_INT 2
17519: ST_TO_ADDR
// hc_gallery :=  ;
17520: LD_ADDR_OWVAR 33
17524: PUSH
17525: LD_STRING 
17527: ST_TO_ADDR
// hc_name :=  ;
17528: LD_ADDR_OWVAR 26
17532: PUSH
17533: LD_STRING 
17535: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 11
17541: PPUSH
17542: LD_INT 10
17544: PPUSH
17545: CALL_OW 380
// un := CreateHuman ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: CALL_OW 44
17558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17559: LD_VAR 0 1
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17571: LD_INT 35
17573: PPUSH
17574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17578: LD_VAR 0 1
17582: PPUSH
17583: LD_INT 22
17585: PUSH
17586: LD_OWVAR 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL_OW 69
17599: PPUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 74
17609: PPUSH
17610: CALL_OW 115
// until IsDead ( un ) ;
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 301
17623: IFFALSE 17571
// end ;
17625: PPOPN 1
17627: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17628: LD_EXP 19
17632: PUSH
17633: LD_EXP 59
17637: AND
17638: IFFALSE 17650
17640: GO 17642
17642: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17643: LD_STRING earthquake(getX(game), 0, 32)
17645: PPUSH
17646: CALL_OW 559
17650: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17651: LD_EXP 19
17655: PUSH
17656: LD_EXP 60
17660: AND
17661: IFFALSE 17752
17663: GO 17665
17665: DISABLE
17666: LD_INT 0
17668: PPUSH
// begin enable ;
17669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: LD_INT 22
17677: PUSH
17678: LD_OWVAR 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 21
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 33
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: ST_TO_ADDR
// if not tmp then
17717: LD_VAR 0 1
17721: NOT
17722: IFFALSE 17726
// exit ;
17724: GO 17752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17726: LD_VAR 0 1
17730: PUSH
17731: LD_INT 1
17733: PPUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: CALL_OW 234
// end ;
17752: PPOPN 1
17754: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17755: LD_EXP 19
17759: PUSH
17760: LD_EXP 61
17764: AND
17765: IFFALSE 17906
17767: GO 17769
17769: DISABLE
17770: LD_INT 0
17772: PPUSH
17773: PPUSH
17774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: LD_OWVAR 2
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 25
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 3
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17906
// un := tmp [ rand ( 1 , tmp ) ] ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_VAR 0 3
17829: PUSH
17830: LD_INT 1
17832: PPUSH
17833: LD_VAR 0 3
17837: PPUSH
17838: CALL_OW 12
17842: ARRAY
17843: ST_TO_ADDR
// if Crawls ( un ) then
17844: LD_VAR 0 2
17848: PPUSH
17849: CALL_OW 318
17853: IFFALSE 17864
// ComWalk ( un ) ;
17855: LD_VAR 0 2
17859: PPUSH
17860: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17864: LD_VAR 0 2
17868: PPUSH
17869: LD_INT 9
17871: PPUSH
17872: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17876: LD_INT 28
17878: PPUSH
17879: LD_OWVAR 2
17883: PPUSH
17884: LD_INT 2
17886: PPUSH
17887: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17891: LD_INT 29
17893: PPUSH
17894: LD_OWVAR 2
17898: PPUSH
17899: LD_INT 2
17901: PPUSH
17902: CALL_OW 322
// end ;
17906: PPOPN 3
17908: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17909: LD_EXP 19
17913: PUSH
17914: LD_EXP 62
17918: AND
17919: IFFALSE 18030
17921: GO 17923
17923: DISABLE
17924: LD_INT 0
17926: PPUSH
17927: PPUSH
17928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17929: LD_ADDR_VAR 0 3
17933: PUSH
17934: LD_INT 22
17936: PUSH
17937: LD_OWVAR 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 25
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PPUSH
17960: CALL_OW 69
17964: ST_TO_ADDR
// if not tmp then
17965: LD_VAR 0 3
17969: NOT
17970: IFFALSE 17974
// exit ;
17972: GO 18030
// un := tmp [ rand ( 1 , tmp ) ] ;
17974: LD_ADDR_VAR 0 2
17978: PUSH
17979: LD_VAR 0 3
17983: PUSH
17984: LD_INT 1
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: CALL_OW 12
17996: ARRAY
17997: ST_TO_ADDR
// if Crawls ( un ) then
17998: LD_VAR 0 2
18002: PPUSH
18003: CALL_OW 318
18007: IFFALSE 18018
// ComWalk ( un ) ;
18009: LD_VAR 0 2
18013: PPUSH
18014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: LD_INT 8
18025: PPUSH
18026: CALL_OW 336
// end ;
18030: PPOPN 3
18032: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18033: LD_EXP 19
18037: PUSH
18038: LD_EXP 63
18042: AND
18043: IFFALSE 18187
18045: GO 18047
18047: DISABLE
18048: LD_INT 0
18050: PPUSH
18051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18052: LD_ADDR_VAR 0 2
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 21
18071: PUSH
18072: LD_INT 2
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 2
18081: PUSH
18082: LD_INT 34
18084: PUSH
18085: LD_INT 12
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 34
18094: PUSH
18095: LD_INT 51
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 34
18104: PUSH
18105: LD_INT 32
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: ST_TO_ADDR
// if not tmp then
18128: LD_VAR 0 2
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 18187
// for i in tmp do
18137: LD_ADDR_VAR 0 1
18141: PUSH
18142: LD_VAR 0 2
18146: PUSH
18147: FOR_IN
18148: IFFALSE 18185
// if GetCargo ( i , mat_artifact ) = 0 then
18150: LD_VAR 0 1
18154: PPUSH
18155: LD_INT 4
18157: PPUSH
18158: CALL_OW 289
18162: PUSH
18163: LD_INT 0
18165: EQUAL
18166: IFFALSE 18183
// SetCargo ( i , mat_siberit , 100 ) ;
18168: LD_VAR 0 1
18172: PPUSH
18173: LD_INT 3
18175: PPUSH
18176: LD_INT 100
18178: PPUSH
18179: CALL_OW 290
18183: GO 18147
18185: POP
18186: POP
// end ;
18187: PPOPN 2
18189: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18190: LD_EXP 19
18194: PUSH
18195: LD_EXP 64
18199: AND
18200: IFFALSE 18383
18202: GO 18204
18204: DISABLE
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18209: LD_ADDR_VAR 0 2
18213: PUSH
18214: LD_INT 22
18216: PUSH
18217: LD_OWVAR 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: ST_TO_ADDR
// if not tmp then
18231: LD_VAR 0 2
18235: NOT
18236: IFFALSE 18240
// exit ;
18238: GO 18383
// for i := 1 to 2 do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: DOUBLE
18246: LD_INT 1
18248: DEC
18249: ST_TO_ADDR
18250: LD_INT 2
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18381
// begin uc_side := your_side ;
18256: LD_ADDR_OWVAR 20
18260: PUSH
18261: LD_OWVAR 2
18265: ST_TO_ADDR
// uc_nation := nation_american ;
18266: LD_ADDR_OWVAR 21
18270: PUSH
18271: LD_INT 1
18273: ST_TO_ADDR
// vc_chassis := us_morphling ;
18274: LD_ADDR_OWVAR 37
18278: PUSH
18279: LD_INT 5
18281: ST_TO_ADDR
// vc_engine := engine_siberite ;
18282: LD_ADDR_OWVAR 39
18286: PUSH
18287: LD_INT 3
18289: ST_TO_ADDR
// vc_control := control_computer ;
18290: LD_ADDR_OWVAR 38
18294: PUSH
18295: LD_INT 3
18297: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18298: LD_ADDR_OWVAR 40
18302: PUSH
18303: LD_INT 10
18305: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18306: LD_VAR 0 2
18310: PUSH
18311: LD_INT 1
18313: ARRAY
18314: PPUSH
18315: CALL_OW 310
18319: NOT
18320: IFFALSE 18367
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18322: CALL_OW 45
18326: PPUSH
18327: LD_VAR 0 2
18331: PUSH
18332: LD_INT 1
18334: ARRAY
18335: PPUSH
18336: CALL_OW 250
18340: PPUSH
18341: LD_VAR 0 2
18345: PUSH
18346: LD_INT 1
18348: ARRAY
18349: PPUSH
18350: CALL_OW 251
18354: PPUSH
18355: LD_INT 12
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 50
18365: GO 18379
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18367: CALL_OW 45
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 51
// end ;
18379: GO 18253
18381: POP
18382: POP
// end ;
18383: PPOPN 2
18385: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18386: LD_EXP 19
18390: PUSH
18391: LD_EXP 65
18395: AND
18396: IFFALSE 18618
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
18408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18409: LD_ADDR_VAR 0 6
18413: PUSH
18414: LD_INT 22
18416: PUSH
18417: LD_OWVAR 2
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 21
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 3
18438: PUSH
18439: LD_INT 23
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: PPUSH
18458: CALL_OW 69
18462: ST_TO_ADDR
// if not tmp then
18463: LD_VAR 0 6
18467: NOT
18468: IFFALSE 18472
// exit ;
18470: GO 18618
// s1 := rand ( 1 , 4 ) ;
18472: LD_ADDR_VAR 0 2
18476: PUSH
18477: LD_INT 1
18479: PPUSH
18480: LD_INT 4
18482: PPUSH
18483: CALL_OW 12
18487: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18488: LD_ADDR_VAR 0 4
18492: PUSH
18493: LD_VAR 0 6
18497: PUSH
18498: LD_INT 1
18500: ARRAY
18501: PPUSH
18502: LD_VAR 0 2
18506: PPUSH
18507: CALL_OW 259
18511: ST_TO_ADDR
// if s1 = 1 then
18512: LD_VAR 0 2
18516: PUSH
18517: LD_INT 1
18519: EQUAL
18520: IFFALSE 18540
// s2 := rand ( 2 , 4 ) else
18522: LD_ADDR_VAR 0 3
18526: PUSH
18527: LD_INT 2
18529: PPUSH
18530: LD_INT 4
18532: PPUSH
18533: CALL_OW 12
18537: ST_TO_ADDR
18538: GO 18548
// s2 := 1 ;
18540: LD_ADDR_VAR 0 3
18544: PUSH
18545: LD_INT 1
18547: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18548: LD_ADDR_VAR 0 5
18552: PUSH
18553: LD_VAR 0 6
18557: PUSH
18558: LD_INT 1
18560: ARRAY
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: CALL_OW 259
18571: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18572: LD_VAR 0 6
18576: PUSH
18577: LD_INT 1
18579: ARRAY
18580: PPUSH
18581: LD_VAR 0 2
18585: PPUSH
18586: LD_VAR 0 5
18590: PPUSH
18591: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18595: LD_VAR 0 6
18599: PUSH
18600: LD_INT 1
18602: ARRAY
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_VAR 0 4
18613: PPUSH
18614: CALL_OW 237
// end ;
18618: PPOPN 6
18620: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18621: LD_EXP 19
18625: PUSH
18626: LD_EXP 66
18630: AND
18631: IFFALSE 18710
18633: GO 18635
18635: DISABLE
18636: LD_INT 0
18638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18639: LD_ADDR_VAR 0 1
18643: PUSH
18644: LD_INT 22
18646: PUSH
18647: LD_OWVAR 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 30
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PPUSH
18670: CALL_OW 69
18674: ST_TO_ADDR
// if not tmp then
18675: LD_VAR 0 1
18679: NOT
18680: IFFALSE 18684
// exit ;
18682: GO 18710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18684: LD_VAR 0 1
18688: PUSH
18689: LD_INT 1
18691: PPUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 12
18701: ARRAY
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 234
// end ;
18710: PPOPN 1
18712: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18713: LD_EXP 19
18717: PUSH
18718: LD_EXP 67
18722: AND
18723: IFFALSE 18835
18725: GO 18727
18727: DISABLE
18728: LD_INT 0
18730: PPUSH
18731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_OWVAR 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 27
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_INT 26
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 30
18774: PUSH
18775: LD_INT 28
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PPUSH
18792: CALL_OW 69
18796: ST_TO_ADDR
// if not tmp then
18797: LD_VAR 0 2
18801: NOT
18802: IFFALSE 18806
// exit ;
18804: GO 18835
// for i in tmp do
18806: LD_ADDR_VAR 0 1
18810: PUSH
18811: LD_VAR 0 2
18815: PUSH
18816: FOR_IN
18817: IFFALSE 18833
// SetLives ( i , 1 ) ;
18819: LD_VAR 0 1
18823: PPUSH
18824: LD_INT 1
18826: PPUSH
18827: CALL_OW 234
18831: GO 18816
18833: POP
18834: POP
// end ;
18835: PPOPN 2
18837: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18838: LD_EXP 19
18842: PUSH
18843: LD_EXP 68
18847: AND
18848: IFFALSE 19135
18850: GO 18852
18852: DISABLE
18853: LD_INT 0
18855: PPUSH
18856: PPUSH
18857: PPUSH
// begin i := rand ( 1 , 7 ) ;
18858: LD_ADDR_VAR 0 1
18862: PUSH
18863: LD_INT 1
18865: PPUSH
18866: LD_INT 7
18868: PPUSH
18869: CALL_OW 12
18873: ST_TO_ADDR
// case i of 1 :
18874: LD_VAR 0 1
18878: PUSH
18879: LD_INT 1
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18897
18887: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18888: LD_STRING earthquake(getX(game), 0, 32)
18890: PPUSH
18891: CALL_OW 559
18895: GO 19135
18897: LD_INT 2
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18919
18905: POP
// begin ToLua ( displayStucuk(); ) ;
18906: LD_STRING displayStucuk();
18908: PPUSH
18909: CALL_OW 559
// ResetFog ;
18913: CALL_OW 335
// end ; 3 :
18917: GO 19135
18919: LD_INT 3
18921: DOUBLE
18922: EQUAL
18923: IFTRUE 18927
18925: GO 19031
18927: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18928: LD_ADDR_VAR 0 2
18932: PUSH
18933: LD_INT 22
18935: PUSH
18936: LD_OWVAR 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 25
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: ST_TO_ADDR
// if not tmp then
18964: LD_VAR 0 2
18968: NOT
18969: IFFALSE 18973
// exit ;
18971: GO 19135
// un := tmp [ rand ( 1 , tmp ) ] ;
18973: LD_ADDR_VAR 0 3
18977: PUSH
18978: LD_VAR 0 2
18982: PUSH
18983: LD_INT 1
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: CALL_OW 12
18995: ARRAY
18996: ST_TO_ADDR
// if Crawls ( un ) then
18997: LD_VAR 0 3
19001: PPUSH
19002: CALL_OW 318
19006: IFFALSE 19017
// ComWalk ( un ) ;
19008: LD_VAR 0 3
19012: PPUSH
19013: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19017: LD_VAR 0 3
19021: PPUSH
19022: LD_INT 8
19024: PPUSH
19025: CALL_OW 336
// end ; 4 :
19029: GO 19135
19031: LD_INT 4
19033: DOUBLE
19034: EQUAL
19035: IFTRUE 19039
19037: GO 19113
19039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19040: LD_ADDR_VAR 0 2
19044: PUSH
19045: LD_INT 22
19047: PUSH
19048: LD_OWVAR 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: LD_INT 29
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 69
19075: ST_TO_ADDR
// if not tmp then
19076: LD_VAR 0 2
19080: NOT
19081: IFFALSE 19085
// exit ;
19083: GO 19135
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19085: LD_VAR 0 2
19089: PUSH
19090: LD_INT 1
19092: ARRAY
19093: PPUSH
19094: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19098: LD_VAR 0 2
19102: PUSH
19103: LD_INT 1
19105: ARRAY
19106: PPUSH
19107: CALL_OW 65
// end ; 5 .. 7 :
19111: GO 19135
19113: LD_INT 5
19115: DOUBLE
19116: GREATEREQUAL
19117: IFFALSE 19125
19119: LD_INT 7
19121: DOUBLE
19122: LESSEQUAL
19123: IFTRUE 19127
19125: GO 19134
19127: POP
// StreamSibBomb ; end ;
19128: CALL 15372 0 0
19132: GO 19135
19134: POP
// end ;
19135: PPOPN 3
19137: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19138: LD_EXP 19
19142: PUSH
19143: LD_EXP 69
19147: AND
19148: IFFALSE 19304
19150: GO 19152
19152: DISABLE
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
19157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19158: LD_ADDR_VAR 0 2
19162: PUSH
19163: LD_INT 81
19165: PUSH
19166: LD_OWVAR 2
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 21
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: ST_TO_ADDR
// if not tmp then
19212: LD_VAR 0 2
19216: NOT
19217: IFFALSE 19221
// exit ;
19219: GO 19304
// p := 0 ;
19221: LD_ADDR_VAR 0 3
19225: PUSH
19226: LD_INT 0
19228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19229: LD_INT 35
19231: PPUSH
19232: CALL_OW 67
// p := p + 1 ;
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 1
19248: PLUS
19249: ST_TO_ADDR
// for i in tmp do
19250: LD_ADDR_VAR 0 1
19254: PUSH
19255: LD_VAR 0 2
19259: PUSH
19260: FOR_IN
19261: IFFALSE 19292
// if GetLives ( i ) < 1000 then
19263: LD_VAR 0 1
19267: PPUSH
19268: CALL_OW 256
19272: PUSH
19273: LD_INT 1000
19275: LESS
19276: IFFALSE 19290
// SetLives ( i , 1000 ) ;
19278: LD_VAR 0 1
19282: PPUSH
19283: LD_INT 1000
19285: PPUSH
19286: CALL_OW 234
19290: GO 19260
19292: POP
19293: POP
// until p > 20 ;
19294: LD_VAR 0 3
19298: PUSH
19299: LD_INT 20
19301: GREATER
19302: IFFALSE 19229
// end ;
19304: PPOPN 3
19306: END
// every 0 0$1 trigger StreamModeActive and sTime do
19307: LD_EXP 19
19311: PUSH
19312: LD_EXP 70
19316: AND
19317: IFFALSE 19352
19319: GO 19321
19321: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19322: LD_INT 28
19324: PPUSH
19325: LD_OWVAR 2
19329: PPUSH
19330: LD_INT 2
19332: PPUSH
19333: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19337: LD_INT 30
19339: PPUSH
19340: LD_OWVAR 2
19344: PPUSH
19345: LD_INT 2
19347: PPUSH
19348: CALL_OW 322
// end ;
19352: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19353: LD_EXP 19
19357: PUSH
19358: LD_EXP 71
19362: AND
19363: IFFALSE 19484
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19372: LD_ADDR_VAR 0 2
19376: PUSH
19377: LD_INT 22
19379: PUSH
19380: LD_OWVAR 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 3
19401: PUSH
19402: LD_INT 23
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: LIST
19420: PPUSH
19421: CALL_OW 69
19425: ST_TO_ADDR
// if not tmp then
19426: LD_VAR 0 2
19430: NOT
19431: IFFALSE 19435
// exit ;
19433: GO 19484
// for i in tmp do
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_VAR 0 2
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19482
// begin if Crawls ( i ) then
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 318
19457: IFFALSE 19468
// ComWalk ( i ) ;
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 138
// SetClass ( i , 2 ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 2
19475: PPUSH
19476: CALL_OW 336
// end ;
19480: GO 19445
19482: POP
19483: POP
// end ;
19484: PPOPN 2
19486: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19487: LD_EXP 19
19491: PUSH
19492: LD_EXP 72
19496: AND
19497: IFFALSE 19785
19499: GO 19501
19501: DISABLE
19502: LD_INT 0
19504: PPUSH
19505: PPUSH
19506: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19507: LD_OWVAR 2
19511: PPUSH
19512: LD_INT 9
19514: PPUSH
19515: LD_INT 1
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19525: LD_INT 9
19527: PPUSH
19528: LD_OWVAR 2
19532: PPUSH
19533: CALL_OW 343
// uc_side := 9 ;
19537: LD_ADDR_OWVAR 20
19541: PUSH
19542: LD_INT 9
19544: ST_TO_ADDR
// uc_nation := 2 ;
19545: LD_ADDR_OWVAR 21
19549: PUSH
19550: LD_INT 2
19552: ST_TO_ADDR
// hc_name := Dark Warrior ;
19553: LD_ADDR_OWVAR 26
19557: PUSH
19558: LD_STRING Dark Warrior
19560: ST_TO_ADDR
// hc_gallery :=  ;
19561: LD_ADDR_OWVAR 33
19565: PUSH
19566: LD_STRING 
19568: ST_TO_ADDR
// hc_noskilllimit := true ;
19569: LD_ADDR_OWVAR 76
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19577: LD_ADDR_OWVAR 31
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 30
19587: PUSH
19588: LD_INT 30
19590: PUSH
19591: LD_INT 30
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: ST_TO_ADDR
// un := CreateHuman ;
19600: LD_ADDR_VAR 0 3
19604: PUSH
19605: CALL_OW 44
19609: ST_TO_ADDR
// hc_noskilllimit := false ;
19610: LD_ADDR_OWVAR 76
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19618: LD_VAR 0 3
19622: PPUSH
19623: LD_INT 1
19625: PPUSH
19626: CALL_OW 51
// ToLua ( playRanger() ) ;
19630: LD_STRING playRanger()
19632: PPUSH
19633: CALL_OW 559
// p := 0 ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_INT 0
19644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19645: LD_INT 35
19647: PPUSH
19648: CALL_OW 67
// p := p + 1 ;
19652: LD_ADDR_VAR 0 2
19656: PUSH
19657: LD_VAR 0 2
19661: PUSH
19662: LD_INT 1
19664: PLUS
19665: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19666: LD_VAR 0 3
19670: PPUSH
19671: CALL_OW 256
19675: PUSH
19676: LD_INT 1000
19678: LESS
19679: IFFALSE 19693
// SetLives ( un , 1000 ) ;
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_INT 1000
19688: PPUSH
19689: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19693: LD_VAR 0 3
19697: PPUSH
19698: LD_INT 81
19700: PUSH
19701: LD_OWVAR 2
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 91
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 30
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: CALL_OW 69
19734: PPUSH
19735: LD_VAR 0 3
19739: PPUSH
19740: CALL_OW 74
19744: PPUSH
19745: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19749: LD_VAR 0 2
19753: PUSH
19754: LD_INT 80
19756: GREATER
19757: PUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: CALL_OW 301
19767: OR
19768: IFFALSE 19645
// if un then
19770: LD_VAR 0 3
19774: IFFALSE 19785
// RemoveUnit ( un ) ;
19776: LD_VAR 0 3
19780: PPUSH
19781: CALL_OW 64
// end ;
19785: PPOPN 3
19787: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19788: LD_EXP 73
19792: IFFALSE 19908
19794: GO 19796
19796: DISABLE
19797: LD_INT 0
19799: PPUSH
19800: PPUSH
19801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19802: LD_ADDR_VAR 0 2
19806: PUSH
19807: LD_INT 81
19809: PUSH
19810: LD_OWVAR 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 21
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19838: LD_STRING playComputer()
19840: PPUSH
19841: CALL_OW 559
// if not tmp then
19845: LD_VAR 0 2
19849: NOT
19850: IFFALSE 19854
// exit ;
19852: GO 19908
// for i in tmp do
19854: LD_ADDR_VAR 0 1
19858: PUSH
19859: LD_VAR 0 2
19863: PUSH
19864: FOR_IN
19865: IFFALSE 19906
// for j := 1 to 4 do
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: DOUBLE
19873: LD_INT 1
19875: DEC
19876: ST_TO_ADDR
19877: LD_INT 4
19879: PUSH
19880: FOR_TO
19881: IFFALSE 19902
// SetSkill ( i , j , 10 ) ;
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_VAR 0 3
19892: PPUSH
19893: LD_INT 10
19895: PPUSH
19896: CALL_OW 237
19900: GO 19880
19902: POP
19903: POP
19904: GO 19864
19906: POP
19907: POP
// end ;
19908: PPOPN 3
19910: END
// every 0 0$1 trigger s30 do var i , tmp ;
19911: LD_EXP 74
19915: IFFALSE 19984
19917: GO 19919
19919: DISABLE
19920: LD_INT 0
19922: PPUSH
19923: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19924: LD_ADDR_VAR 0 2
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_OWVAR 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PPUSH
19941: CALL_OW 69
19945: ST_TO_ADDR
// if not tmp then
19946: LD_VAR 0 2
19950: NOT
19951: IFFALSE 19955
// exit ;
19953: GO 19984
// for i in tmp do
19955: LD_ADDR_VAR 0 1
19959: PUSH
19960: LD_VAR 0 2
19964: PUSH
19965: FOR_IN
19966: IFFALSE 19982
// SetLives ( i , 300 ) ;
19968: LD_VAR 0 1
19972: PPUSH
19973: LD_INT 300
19975: PPUSH
19976: CALL_OW 234
19980: GO 19965
19982: POP
19983: POP
// end ;
19984: PPOPN 2
19986: END
// every 0 0$1 trigger s60 do var i , tmp ;
19987: LD_EXP 75
19991: IFFALSE 20060
19993: GO 19995
19995: DISABLE
19996: LD_INT 0
19998: PPUSH
19999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20000: LD_ADDR_VAR 0 2
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_OWVAR 2
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: CALL_OW 69
20021: ST_TO_ADDR
// if not tmp then
20022: LD_VAR 0 2
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20060
// for i in tmp do
20031: LD_ADDR_VAR 0 1
20035: PUSH
20036: LD_VAR 0 2
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20058
// SetLives ( i , 600 ) ;
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_INT 600
20051: PPUSH
20052: CALL_OW 234
20056: GO 20041
20058: POP
20059: POP
// end ;
20060: PPOPN 2
20062: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20063: LD_INT 0
20065: PPUSH
// case cmd of 301 :
20066: LD_VAR 0 1
20070: PUSH
20071: LD_INT 301
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20111
20079: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20080: LD_VAR 0 6
20084: PPUSH
20085: LD_VAR 0 7
20089: PPUSH
20090: LD_VAR 0 8
20094: PPUSH
20095: LD_VAR 0 4
20099: PPUSH
20100: LD_VAR 0 5
20104: PPUSH
20105: CALL 21312 0 5
20109: GO 20232
20111: LD_INT 302
20113: DOUBLE
20114: EQUAL
20115: IFTRUE 20119
20117: GO 20156
20119: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20120: LD_VAR 0 6
20124: PPUSH
20125: LD_VAR 0 7
20129: PPUSH
20130: LD_VAR 0 8
20134: PPUSH
20135: LD_VAR 0 9
20139: PPUSH
20140: LD_VAR 0 4
20144: PPUSH
20145: LD_VAR 0 5
20149: PPUSH
20150: CALL 21403 0 6
20154: GO 20232
20156: LD_INT 303
20158: DOUBLE
20159: EQUAL
20160: IFTRUE 20164
20162: GO 20201
20164: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20165: LD_VAR 0 6
20169: PPUSH
20170: LD_VAR 0 7
20174: PPUSH
20175: LD_VAR 0 8
20179: PPUSH
20180: LD_VAR 0 9
20184: PPUSH
20185: LD_VAR 0 4
20189: PPUSH
20190: LD_VAR 0 5
20194: PPUSH
20195: CALL 20237 0 6
20199: GO 20232
20201: LD_INT 304
20203: DOUBLE
20204: EQUAL
20205: IFTRUE 20209
20207: GO 20231
20209: POP
// hHackTeleport ( unit , x , y ) ; end ;
20210: LD_VAR 0 2
20214: PPUSH
20215: LD_VAR 0 4
20219: PPUSH
20220: LD_VAR 0 5
20224: PPUSH
20225: CALL 21996 0 3
20229: GO 20232
20231: POP
// end ;
20232: LD_VAR 0 12
20236: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20237: LD_INT 0
20239: PPUSH
20240: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20241: LD_VAR 0 1
20245: PUSH
20246: LD_INT 1
20248: LESS
20249: PUSH
20250: LD_VAR 0 1
20254: PUSH
20255: LD_INT 3
20257: GREATER
20258: OR
20259: PUSH
20260: LD_VAR 0 5
20264: PPUSH
20265: LD_VAR 0 6
20269: PPUSH
20270: CALL_OW 428
20274: OR
20275: IFFALSE 20279
// exit ;
20277: GO 20999
// uc_side := your_side ;
20279: LD_ADDR_OWVAR 20
20283: PUSH
20284: LD_OWVAR 2
20288: ST_TO_ADDR
// uc_nation := nation ;
20289: LD_ADDR_OWVAR 21
20293: PUSH
20294: LD_VAR 0 1
20298: ST_TO_ADDR
// bc_level = 1 ;
20299: LD_ADDR_OWVAR 43
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// case btype of 1 :
20307: LD_VAR 0 2
20311: PUSH
20312: LD_INT 1
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20331
20320: POP
// bc_type := b_depot ; 2 :
20321: LD_ADDR_OWVAR 42
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
20329: GO 20943
20331: LD_INT 2
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20350
20339: POP
// bc_type := b_warehouse ; 3 :
20340: LD_ADDR_OWVAR 42
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
20348: GO 20943
20350: LD_INT 3
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20369
20358: POP
// bc_type := b_lab ; 4 .. 9 :
20359: LD_ADDR_OWVAR 42
20363: PUSH
20364: LD_INT 6
20366: ST_TO_ADDR
20367: GO 20943
20369: LD_INT 4
20371: DOUBLE
20372: GREATEREQUAL
20373: IFFALSE 20381
20375: LD_INT 9
20377: DOUBLE
20378: LESSEQUAL
20379: IFTRUE 20383
20381: GO 20435
20383: POP
// begin bc_type := b_lab_half ;
20384: LD_ADDR_OWVAR 42
20388: PUSH
20389: LD_INT 7
20391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20392: LD_ADDR_OWVAR 44
20396: PUSH
20397: LD_INT 10
20399: PUSH
20400: LD_INT 11
20402: PUSH
20403: LD_INT 12
20405: PUSH
20406: LD_INT 15
20408: PUSH
20409: LD_INT 14
20411: PUSH
20412: LD_INT 13
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: LD_VAR 0 2
20427: PUSH
20428: LD_INT 3
20430: MINUS
20431: ARRAY
20432: ST_TO_ADDR
// end ; 10 .. 13 :
20433: GO 20943
20435: LD_INT 10
20437: DOUBLE
20438: GREATEREQUAL
20439: IFFALSE 20447
20441: LD_INT 13
20443: DOUBLE
20444: LESSEQUAL
20445: IFTRUE 20449
20447: GO 20526
20449: POP
// begin bc_type := b_lab_full ;
20450: LD_ADDR_OWVAR 42
20454: PUSH
20455: LD_INT 8
20457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20458: LD_ADDR_OWVAR 44
20462: PUSH
20463: LD_INT 10
20465: PUSH
20466: LD_INT 12
20468: PUSH
20469: LD_INT 14
20471: PUSH
20472: LD_INT 13
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: PUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_INT 9
20488: MINUS
20489: ARRAY
20490: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20491: LD_ADDR_OWVAR 45
20495: PUSH
20496: LD_INT 11
20498: PUSH
20499: LD_INT 15
20501: PUSH
20502: LD_INT 12
20504: PUSH
20505: LD_INT 15
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: PUSH
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 9
20521: MINUS
20522: ARRAY
20523: ST_TO_ADDR
// end ; 14 :
20524: GO 20943
20526: LD_INT 14
20528: DOUBLE
20529: EQUAL
20530: IFTRUE 20534
20532: GO 20545
20534: POP
// bc_type := b_workshop ; 15 :
20535: LD_ADDR_OWVAR 42
20539: PUSH
20540: LD_INT 2
20542: ST_TO_ADDR
20543: GO 20943
20545: LD_INT 15
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20564
20553: POP
// bc_type := b_factory ; 16 :
20554: LD_ADDR_OWVAR 42
20558: PUSH
20559: LD_INT 3
20561: ST_TO_ADDR
20562: GO 20943
20564: LD_INT 16
20566: DOUBLE
20567: EQUAL
20568: IFTRUE 20572
20570: GO 20583
20572: POP
// bc_type := b_ext_gun ; 17 :
20573: LD_ADDR_OWVAR 42
20577: PUSH
20578: LD_INT 17
20580: ST_TO_ADDR
20581: GO 20943
20583: LD_INT 17
20585: DOUBLE
20586: EQUAL
20587: IFTRUE 20591
20589: GO 20619
20591: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20592: LD_ADDR_OWVAR 42
20596: PUSH
20597: LD_INT 19
20599: PUSH
20600: LD_INT 23
20602: PUSH
20603: LD_INT 19
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: LIST
20610: PUSH
20611: LD_VAR 0 1
20615: ARRAY
20616: ST_TO_ADDR
20617: GO 20943
20619: LD_INT 18
20621: DOUBLE
20622: EQUAL
20623: IFTRUE 20627
20625: GO 20638
20627: POP
// bc_type := b_ext_radar ; 19 :
20628: LD_ADDR_OWVAR 42
20632: PUSH
20633: LD_INT 20
20635: ST_TO_ADDR
20636: GO 20943
20638: LD_INT 19
20640: DOUBLE
20641: EQUAL
20642: IFTRUE 20646
20644: GO 20657
20646: POP
// bc_type := b_ext_radio ; 20 :
20647: LD_ADDR_OWVAR 42
20651: PUSH
20652: LD_INT 22
20654: ST_TO_ADDR
20655: GO 20943
20657: LD_INT 20
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20676
20665: POP
// bc_type := b_ext_siberium ; 21 :
20666: LD_ADDR_OWVAR 42
20670: PUSH
20671: LD_INT 21
20673: ST_TO_ADDR
20674: GO 20943
20676: LD_INT 21
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20695
20684: POP
// bc_type := b_ext_computer ; 22 :
20685: LD_ADDR_OWVAR 42
20689: PUSH
20690: LD_INT 24
20692: ST_TO_ADDR
20693: GO 20943
20695: LD_INT 22
20697: DOUBLE
20698: EQUAL
20699: IFTRUE 20703
20701: GO 20714
20703: POP
// bc_type := b_ext_track ; 23 :
20704: LD_ADDR_OWVAR 42
20708: PUSH
20709: LD_INT 16
20711: ST_TO_ADDR
20712: GO 20943
20714: LD_INT 23
20716: DOUBLE
20717: EQUAL
20718: IFTRUE 20722
20720: GO 20733
20722: POP
// bc_type := b_ext_laser ; 24 :
20723: LD_ADDR_OWVAR 42
20727: PUSH
20728: LD_INT 25
20730: ST_TO_ADDR
20731: GO 20943
20733: LD_INT 24
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20752
20741: POP
// bc_type := b_control_tower ; 25 :
20742: LD_ADDR_OWVAR 42
20746: PUSH
20747: LD_INT 36
20749: ST_TO_ADDR
20750: GO 20943
20752: LD_INT 25
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20771
20760: POP
// bc_type := b_breastwork ; 26 :
20761: LD_ADDR_OWVAR 42
20765: PUSH
20766: LD_INT 31
20768: ST_TO_ADDR
20769: GO 20943
20771: LD_INT 26
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20790
20779: POP
// bc_type := b_bunker ; 27 :
20780: LD_ADDR_OWVAR 42
20784: PUSH
20785: LD_INT 32
20787: ST_TO_ADDR
20788: GO 20943
20790: LD_INT 27
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 20809
20798: POP
// bc_type := b_turret ; 28 :
20799: LD_ADDR_OWVAR 42
20803: PUSH
20804: LD_INT 33
20806: ST_TO_ADDR
20807: GO 20943
20809: LD_INT 28
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20828
20817: POP
// bc_type := b_armoury ; 29 :
20818: LD_ADDR_OWVAR 42
20822: PUSH
20823: LD_INT 4
20825: ST_TO_ADDR
20826: GO 20943
20828: LD_INT 29
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20847
20836: POP
// bc_type := b_barracks ; 30 :
20837: LD_ADDR_OWVAR 42
20841: PUSH
20842: LD_INT 5
20844: ST_TO_ADDR
20845: GO 20943
20847: LD_INT 30
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20866
20855: POP
// bc_type := b_solar_power ; 31 :
20856: LD_ADDR_OWVAR 42
20860: PUSH
20861: LD_INT 27
20863: ST_TO_ADDR
20864: GO 20943
20866: LD_INT 31
20868: DOUBLE
20869: EQUAL
20870: IFTRUE 20874
20872: GO 20885
20874: POP
// bc_type := b_oil_power ; 32 :
20875: LD_ADDR_OWVAR 42
20879: PUSH
20880: LD_INT 26
20882: ST_TO_ADDR
20883: GO 20943
20885: LD_INT 32
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20904
20893: POP
// bc_type := b_siberite_power ; 33 :
20894: LD_ADDR_OWVAR 42
20898: PUSH
20899: LD_INT 28
20901: ST_TO_ADDR
20902: GO 20943
20904: LD_INT 33
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20923
20912: POP
// bc_type := b_oil_mine ; 34 :
20913: LD_ADDR_OWVAR 42
20917: PUSH
20918: LD_INT 29
20920: ST_TO_ADDR
20921: GO 20943
20923: LD_INT 34
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 20942
20931: POP
// bc_type := b_siberite_mine ; end ;
20932: LD_ADDR_OWVAR 42
20936: PUSH
20937: LD_INT 30
20939: ST_TO_ADDR
20940: GO 20943
20942: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20943: LD_ADDR_VAR 0 8
20947: PUSH
20948: LD_VAR 0 5
20952: PPUSH
20953: LD_VAR 0 6
20957: PPUSH
20958: LD_VAR 0 3
20962: PPUSH
20963: CALL_OW 47
20967: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20968: LD_OWVAR 42
20972: PUSH
20973: LD_INT 32
20975: PUSH
20976: LD_INT 33
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: IN
20983: IFFALSE 20999
// PlaceWeaponTurret ( b , weapon ) ;
20985: LD_VAR 0 8
20989: PPUSH
20990: LD_VAR 0 4
20994: PPUSH
20995: CALL_OW 431
// end ;
20999: LD_VAR 0 7
21003: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21004: LD_INT 0
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21010: LD_ADDR_VAR 0 4
21014: PUSH
21015: LD_INT 22
21017: PUSH
21018: LD_OWVAR 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: LD_INT 30
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 30
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: ST_TO_ADDR
// if not tmp then
21064: LD_VAR 0 4
21068: NOT
21069: IFFALSE 21073
// exit ;
21071: GO 21132
// for i in tmp do
21073: LD_ADDR_VAR 0 2
21077: PUSH
21078: LD_VAR 0 4
21082: PUSH
21083: FOR_IN
21084: IFFALSE 21130
// for j = 1 to 3 do
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: DOUBLE
21092: LD_INT 1
21094: DEC
21095: ST_TO_ADDR
21096: LD_INT 3
21098: PUSH
21099: FOR_TO
21100: IFFALSE 21126
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21102: LD_VAR 0 2
21106: PPUSH
21107: CALL_OW 274
21111: PPUSH
21112: LD_VAR 0 3
21116: PPUSH
21117: LD_INT 99999
21119: PPUSH
21120: CALL_OW 277
21124: GO 21099
21126: POP
21127: POP
21128: GO 21083
21130: POP
21131: POP
// end ;
21132: LD_VAR 0 1
21136: RET
// export function hHackSetLevel10 ; var i , j ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21142: LD_ADDR_VAR 0 2
21146: PUSH
21147: LD_INT 21
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: PUSH
21162: FOR_IN
21163: IFFALSE 21215
// if IsSelected ( i ) then
21165: LD_VAR 0 2
21169: PPUSH
21170: CALL_OW 306
21174: IFFALSE 21213
// begin for j := 1 to 4 do
21176: LD_ADDR_VAR 0 3
21180: PUSH
21181: DOUBLE
21182: LD_INT 1
21184: DEC
21185: ST_TO_ADDR
21186: LD_INT 4
21188: PUSH
21189: FOR_TO
21190: IFFALSE 21211
// SetSkill ( i , j , 10 ) ;
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 3
21201: PPUSH
21202: LD_INT 10
21204: PPUSH
21205: CALL_OW 237
21209: GO 21189
21211: POP
21212: POP
// end ;
21213: GO 21162
21215: POP
21216: POP
// end ;
21217: LD_VAR 0 1
21221: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
21226: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21227: LD_ADDR_VAR 0 2
21231: PUSH
21232: LD_INT 22
21234: PUSH
21235: LD_OWVAR 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 21
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PPUSH
21258: CALL_OW 69
21262: PUSH
21263: FOR_IN
21264: IFFALSE 21305
// begin for j := 1 to 4 do
21266: LD_ADDR_VAR 0 3
21270: PUSH
21271: DOUBLE
21272: LD_INT 1
21274: DEC
21275: ST_TO_ADDR
21276: LD_INT 4
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21301
// SetSkill ( i , j , 10 ) ;
21282: LD_VAR 0 2
21286: PPUSH
21287: LD_VAR 0 3
21291: PPUSH
21292: LD_INT 10
21294: PPUSH
21295: CALL_OW 237
21299: GO 21279
21301: POP
21302: POP
// end ;
21303: GO 21263
21305: POP
21306: POP
// end ;
21307: LD_VAR 0 1
21311: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21312: LD_INT 0
21314: PPUSH
// uc_side := your_side ;
21315: LD_ADDR_OWVAR 20
21319: PUSH
21320: LD_OWVAR 2
21324: ST_TO_ADDR
// uc_nation := nation ;
21325: LD_ADDR_OWVAR 21
21329: PUSH
21330: LD_VAR 0 1
21334: ST_TO_ADDR
// InitHc ;
21335: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21339: LD_INT 0
21341: PPUSH
21342: LD_VAR 0 2
21346: PPUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21356: LD_VAR 0 4
21360: PPUSH
21361: LD_VAR 0 5
21365: PPUSH
21366: CALL_OW 428
21370: PUSH
21371: LD_INT 0
21373: EQUAL
21374: IFFALSE 21398
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21376: CALL_OW 44
21380: PPUSH
21381: LD_VAR 0 4
21385: PPUSH
21386: LD_VAR 0 5
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 48
// end ;
21398: LD_VAR 0 6
21402: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// uc_side := your_side ;
21407: LD_ADDR_OWVAR 20
21411: PUSH
21412: LD_OWVAR 2
21416: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21417: LD_VAR 0 1
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: LD_INT 4
21433: PUSH
21434: LD_INT 5
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: IN
21444: IFFALSE 21456
// uc_nation := nation_american else
21446: LD_ADDR_OWVAR 21
21450: PUSH
21451: LD_INT 1
21453: ST_TO_ADDR
21454: GO 21499
// if chassis in [ 11 , 12 , 13 , 14 ] then
21456: LD_VAR 0 1
21460: PUSH
21461: LD_INT 11
21463: PUSH
21464: LD_INT 12
21466: PUSH
21467: LD_INT 13
21469: PUSH
21470: LD_INT 14
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: IN
21479: IFFALSE 21491
// uc_nation := nation_arabian else
21481: LD_ADDR_OWVAR 21
21485: PUSH
21486: LD_INT 2
21488: ST_TO_ADDR
21489: GO 21499
// uc_nation := nation_russian ;
21491: LD_ADDR_OWVAR 21
21495: PUSH
21496: LD_INT 3
21498: ST_TO_ADDR
// vc_chassis := chassis ;
21499: LD_ADDR_OWVAR 37
21503: PUSH
21504: LD_VAR 0 1
21508: ST_TO_ADDR
// vc_engine := engine ;
21509: LD_ADDR_OWVAR 39
21513: PUSH
21514: LD_VAR 0 2
21518: ST_TO_ADDR
// vc_control := control ;
21519: LD_ADDR_OWVAR 38
21523: PUSH
21524: LD_VAR 0 3
21528: ST_TO_ADDR
// vc_weapon := weapon ;
21529: LD_ADDR_OWVAR 40
21533: PUSH
21534: LD_VAR 0 4
21538: ST_TO_ADDR
// un := CreateVehicle ;
21539: LD_ADDR_VAR 0 8
21543: PUSH
21544: CALL_OW 45
21548: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21549: LD_VAR 0 8
21553: PPUSH
21554: LD_INT 0
21556: PPUSH
21557: LD_INT 5
21559: PPUSH
21560: CALL_OW 12
21564: PPUSH
21565: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21569: LD_VAR 0 8
21573: PPUSH
21574: LD_VAR 0 5
21578: PPUSH
21579: LD_VAR 0 6
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: CALL_OW 48
// end ;
21591: LD_VAR 0 7
21595: RET
// export hInvincible ; every 1 do
21596: GO 21598
21598: DISABLE
// hInvincible := [ ] ;
21599: LD_ADDR_EXP 76
21603: PUSH
21604: EMPTY
21605: ST_TO_ADDR
21606: END
// every 10 do var i ;
21607: GO 21609
21609: DISABLE
21610: LD_INT 0
21612: PPUSH
// begin enable ;
21613: ENABLE
// if not hInvincible then
21614: LD_EXP 76
21618: NOT
21619: IFFALSE 21623
// exit ;
21621: GO 21667
// for i in hInvincible do
21623: LD_ADDR_VAR 0 1
21627: PUSH
21628: LD_EXP 76
21632: PUSH
21633: FOR_IN
21634: IFFALSE 21665
// if GetLives ( i ) < 1000 then
21636: LD_VAR 0 1
21640: PPUSH
21641: CALL_OW 256
21645: PUSH
21646: LD_INT 1000
21648: LESS
21649: IFFALSE 21663
// SetLives ( i , 1000 ) ;
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 1000
21658: PPUSH
21659: CALL_OW 234
21663: GO 21633
21665: POP
21666: POP
// end ;
21667: PPOPN 1
21669: END
// export function hHackInvincible ; var i ; begin
21670: LD_INT 0
21672: PPUSH
21673: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 21
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: PPUSH
21707: CALL_OW 69
21711: PUSH
21712: FOR_IN
21713: IFFALSE 21774
// if IsSelected ( i ) then
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 306
21724: IFFALSE 21772
// begin if i in hInvincible then
21726: LD_VAR 0 2
21730: PUSH
21731: LD_EXP 76
21735: IN
21736: IFFALSE 21756
// hInvincible := hInvincible diff i else
21738: LD_ADDR_EXP 76
21742: PUSH
21743: LD_EXP 76
21747: PUSH
21748: LD_VAR 0 2
21752: DIFF
21753: ST_TO_ADDR
21754: GO 21772
// hInvincible := hInvincible union i ;
21756: LD_ADDR_EXP 76
21760: PUSH
21761: LD_EXP 76
21765: PUSH
21766: LD_VAR 0 2
21770: UNION
21771: ST_TO_ADDR
// end ;
21772: GO 21712
21774: POP
21775: POP
// end ;
21776: LD_VAR 0 1
21780: RET
// export function hHackInvisible ; var i , j ; begin
21781: LD_INT 0
21783: PPUSH
21784: PPUSH
21785: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: CALL_OW 69
21805: PUSH
21806: FOR_IN
21807: IFFALSE 21831
// if IsSelected ( i ) then
21809: LD_VAR 0 2
21813: PPUSH
21814: CALL_OW 306
21818: IFFALSE 21829
// ComForceInvisible ( i ) ;
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 496
21829: GO 21806
21831: POP
21832: POP
// end ;
21833: LD_VAR 0 1
21837: RET
// export function hHackChangeYourSide ; begin
21838: LD_INT 0
21840: PPUSH
// if your_side = 8 then
21841: LD_OWVAR 2
21845: PUSH
21846: LD_INT 8
21848: EQUAL
21849: IFFALSE 21861
// your_side := 0 else
21851: LD_ADDR_OWVAR 2
21855: PUSH
21856: LD_INT 0
21858: ST_TO_ADDR
21859: GO 21875
// your_side := your_side + 1 ;
21861: LD_ADDR_OWVAR 2
21865: PUSH
21866: LD_OWVAR 2
21870: PUSH
21871: LD_INT 1
21873: PLUS
21874: ST_TO_ADDR
// end ;
21875: LD_VAR 0 1
21879: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21880: LD_INT 0
21882: PPUSH
21883: PPUSH
21884: PPUSH
// for i in all_units do
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_OWVAR 3
21894: PUSH
21895: FOR_IN
21896: IFFALSE 21974
// if IsSelected ( i ) then
21898: LD_VAR 0 2
21902: PPUSH
21903: CALL_OW 306
21907: IFFALSE 21972
// begin j := GetSide ( i ) ;
21909: LD_ADDR_VAR 0 3
21913: PUSH
21914: LD_VAR 0 2
21918: PPUSH
21919: CALL_OW 255
21923: ST_TO_ADDR
// if j = 8 then
21924: LD_VAR 0 3
21928: PUSH
21929: LD_INT 8
21931: EQUAL
21932: IFFALSE 21944
// j := 0 else
21934: LD_ADDR_VAR 0 3
21938: PUSH
21939: LD_INT 0
21941: ST_TO_ADDR
21942: GO 21958
// j := j + 1 ;
21944: LD_ADDR_VAR 0 3
21948: PUSH
21949: LD_VAR 0 3
21953: PUSH
21954: LD_INT 1
21956: PLUS
21957: ST_TO_ADDR
// SetSide ( i , j ) ;
21958: LD_VAR 0 2
21962: PPUSH
21963: LD_VAR 0 3
21967: PPUSH
21968: CALL_OW 235
// end ;
21972: GO 21895
21974: POP
21975: POP
// end ;
21976: LD_VAR 0 1
21980: RET
// export function hHackFog ; begin
21981: LD_INT 0
21983: PPUSH
// FogOff ( true ) ;
21984: LD_INT 1
21986: PPUSH
21987: CALL_OW 344
// end ;
21991: LD_VAR 0 1
21995: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21996: LD_INT 0
21998: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21999: LD_VAR 0 1
22003: PPUSH
22004: LD_VAR 0 2
22008: PPUSH
22009: LD_VAR 0 3
22013: PPUSH
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 1
22019: PPUSH
22020: CALL_OW 483
// CenterOnXY ( x , y ) ;
22024: LD_VAR 0 2
22028: PPUSH
22029: LD_VAR 0 3
22033: PPUSH
22034: CALL_OW 84
// end ; end_of_file
22038: LD_VAR 0 4
22042: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
// if exist_mode then
22047: LD_VAR 0 2
22051: IFFALSE 22076
// unit := CreateCharacter ( prefix & ident ) else
22053: LD_ADDR_VAR 0 5
22057: PUSH
22058: LD_VAR 0 3
22062: PUSH
22063: LD_VAR 0 1
22067: STR
22068: PPUSH
22069: CALL_OW 34
22073: ST_TO_ADDR
22074: GO 22091
// unit := NewCharacter ( ident ) ;
22076: LD_ADDR_VAR 0 5
22080: PUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 25
22090: ST_TO_ADDR
// result := unit ;
22091: LD_ADDR_VAR 0 4
22095: PUSH
22096: LD_VAR 0 5
22100: ST_TO_ADDR
// end ;
22101: LD_VAR 0 4
22105: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22106: LD_INT 0
22108: PPUSH
22109: PPUSH
// if not side or not nation then
22110: LD_VAR 0 1
22114: NOT
22115: PUSH
22116: LD_VAR 0 2
22120: NOT
22121: OR
22122: IFFALSE 22126
// exit ;
22124: GO 22894
// case nation of nation_american :
22126: LD_VAR 0 2
22130: PUSH
22131: LD_INT 1
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22353
22139: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22140: LD_ADDR_VAR 0 4
22144: PUSH
22145: LD_INT 35
22147: PUSH
22148: LD_INT 45
22150: PUSH
22151: LD_INT 46
22153: PUSH
22154: LD_INT 47
22156: PUSH
22157: LD_INT 82
22159: PUSH
22160: LD_INT 83
22162: PUSH
22163: LD_INT 84
22165: PUSH
22166: LD_INT 85
22168: PUSH
22169: LD_INT 86
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 6
22180: PUSH
22181: LD_INT 15
22183: PUSH
22184: LD_INT 16
22186: PUSH
22187: LD_INT 7
22189: PUSH
22190: LD_INT 12
22192: PUSH
22193: LD_INT 13
22195: PUSH
22196: LD_INT 10
22198: PUSH
22199: LD_INT 14
22201: PUSH
22202: LD_INT 20
22204: PUSH
22205: LD_INT 21
22207: PUSH
22208: LD_INT 22
22210: PUSH
22211: LD_INT 25
22213: PUSH
22214: LD_INT 32
22216: PUSH
22217: LD_INT 27
22219: PUSH
22220: LD_INT 36
22222: PUSH
22223: LD_INT 69
22225: PUSH
22226: LD_INT 39
22228: PUSH
22229: LD_INT 34
22231: PUSH
22232: LD_INT 40
22234: PUSH
22235: LD_INT 48
22237: PUSH
22238: LD_INT 49
22240: PUSH
22241: LD_INT 50
22243: PUSH
22244: LD_INT 51
22246: PUSH
22247: LD_INT 52
22249: PUSH
22250: LD_INT 53
22252: PUSH
22253: LD_INT 54
22255: PUSH
22256: LD_INT 55
22258: PUSH
22259: LD_INT 56
22261: PUSH
22262: LD_INT 57
22264: PUSH
22265: LD_INT 58
22267: PUSH
22268: LD_INT 59
22270: PUSH
22271: LD_INT 60
22273: PUSH
22274: LD_INT 61
22276: PUSH
22277: LD_INT 62
22279: PUSH
22280: LD_INT 80
22282: PUSH
22283: LD_INT 82
22285: PUSH
22286: LD_INT 83
22288: PUSH
22289: LD_INT 84
22291: PUSH
22292: LD_INT 85
22294: PUSH
22295: LD_INT 86
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
22351: GO 22818
22353: LD_INT 2
22355: DOUBLE
22356: EQUAL
22357: IFTRUE 22361
22359: GO 22587
22361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22362: LD_ADDR_VAR 0 4
22366: PUSH
22367: LD_INT 35
22369: PUSH
22370: LD_INT 45
22372: PUSH
22373: LD_INT 46
22375: PUSH
22376: LD_INT 47
22378: PUSH
22379: LD_INT 82
22381: PUSH
22382: LD_INT 83
22384: PUSH
22385: LD_INT 84
22387: PUSH
22388: LD_INT 85
22390: PUSH
22391: LD_INT 87
22393: PUSH
22394: LD_INT 70
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 11
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: LD_INT 4
22408: PUSH
22409: LD_INT 5
22411: PUSH
22412: LD_INT 6
22414: PUSH
22415: LD_INT 15
22417: PUSH
22418: LD_INT 18
22420: PUSH
22421: LD_INT 7
22423: PUSH
22424: LD_INT 17
22426: PUSH
22427: LD_INT 8
22429: PUSH
22430: LD_INT 20
22432: PUSH
22433: LD_INT 21
22435: PUSH
22436: LD_INT 22
22438: PUSH
22439: LD_INT 72
22441: PUSH
22442: LD_INT 26
22444: PUSH
22445: LD_INT 69
22447: PUSH
22448: LD_INT 39
22450: PUSH
22451: LD_INT 40
22453: PUSH
22454: LD_INT 41
22456: PUSH
22457: LD_INT 42
22459: PUSH
22460: LD_INT 43
22462: PUSH
22463: LD_INT 48
22465: PUSH
22466: LD_INT 49
22468: PUSH
22469: LD_INT 50
22471: PUSH
22472: LD_INT 51
22474: PUSH
22475: LD_INT 52
22477: PUSH
22478: LD_INT 53
22480: PUSH
22481: LD_INT 54
22483: PUSH
22484: LD_INT 55
22486: PUSH
22487: LD_INT 56
22489: PUSH
22490: LD_INT 60
22492: PUSH
22493: LD_INT 61
22495: PUSH
22496: LD_INT 62
22498: PUSH
22499: LD_INT 66
22501: PUSH
22502: LD_INT 67
22504: PUSH
22505: LD_INT 68
22507: PUSH
22508: LD_INT 81
22510: PUSH
22511: LD_INT 82
22513: PUSH
22514: LD_INT 83
22516: PUSH
22517: LD_INT 84
22519: PUSH
22520: LD_INT 85
22522: PUSH
22523: LD_INT 87
22525: PUSH
22526: LD_INT 88
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: ST_TO_ADDR
22585: GO 22818
22587: LD_INT 3
22589: DOUBLE
22590: EQUAL
22591: IFTRUE 22595
22593: GO 22817
22595: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22596: LD_ADDR_VAR 0 4
22600: PUSH
22601: LD_INT 46
22603: PUSH
22604: LD_INT 47
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 82
22615: PUSH
22616: LD_INT 83
22618: PUSH
22619: LD_INT 84
22621: PUSH
22622: LD_INT 85
22624: PUSH
22625: LD_INT 86
22627: PUSH
22628: LD_INT 11
22630: PUSH
22631: LD_INT 9
22633: PUSH
22634: LD_INT 20
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: LD_INT 21
22642: PUSH
22643: LD_INT 24
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 25
22651: PUSH
22652: LD_INT 28
22654: PUSH
22655: LD_INT 29
22657: PUSH
22658: LD_INT 30
22660: PUSH
22661: LD_INT 31
22663: PUSH
22664: LD_INT 37
22666: PUSH
22667: LD_INT 38
22669: PUSH
22670: LD_INT 32
22672: PUSH
22673: LD_INT 27
22675: PUSH
22676: LD_INT 33
22678: PUSH
22679: LD_INT 69
22681: PUSH
22682: LD_INT 39
22684: PUSH
22685: LD_INT 34
22687: PUSH
22688: LD_INT 40
22690: PUSH
22691: LD_INT 71
22693: PUSH
22694: LD_INT 23
22696: PUSH
22697: LD_INT 44
22699: PUSH
22700: LD_INT 48
22702: PUSH
22703: LD_INT 49
22705: PUSH
22706: LD_INT 50
22708: PUSH
22709: LD_INT 51
22711: PUSH
22712: LD_INT 52
22714: PUSH
22715: LD_INT 53
22717: PUSH
22718: LD_INT 54
22720: PUSH
22721: LD_INT 55
22723: PUSH
22724: LD_INT 56
22726: PUSH
22727: LD_INT 57
22729: PUSH
22730: LD_INT 58
22732: PUSH
22733: LD_INT 59
22735: PUSH
22736: LD_INT 63
22738: PUSH
22739: LD_INT 64
22741: PUSH
22742: LD_INT 65
22744: PUSH
22745: LD_INT 82
22747: PUSH
22748: LD_INT 83
22750: PUSH
22751: LD_INT 84
22753: PUSH
22754: LD_INT 85
22756: PUSH
22757: LD_INT 86
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: ST_TO_ADDR
22815: GO 22818
22817: POP
// if state > - 1 and state < 3 then
22818: LD_VAR 0 3
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: GREATER
22827: PUSH
22828: LD_VAR 0 3
22832: PUSH
22833: LD_INT 3
22835: LESS
22836: AND
22837: IFFALSE 22894
// for i in result do
22839: LD_ADDR_VAR 0 5
22843: PUSH
22844: LD_VAR 0 4
22848: PUSH
22849: FOR_IN
22850: IFFALSE 22892
// if GetTech ( i , side ) <> state then
22852: LD_VAR 0 5
22856: PPUSH
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 321
22866: PUSH
22867: LD_VAR 0 3
22871: NONEQUAL
22872: IFFALSE 22890
// result := result diff i ;
22874: LD_ADDR_VAR 0 4
22878: PUSH
22879: LD_VAR 0 4
22883: PUSH
22884: LD_VAR 0 5
22888: DIFF
22889: ST_TO_ADDR
22890: GO 22849
22892: POP
22893: POP
// end ;
22894: LD_VAR 0 4
22898: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22899: LD_INT 0
22901: PPUSH
22902: PPUSH
22903: PPUSH
// result := true ;
22904: LD_ADDR_VAR 0 3
22908: PUSH
22909: LD_INT 1
22911: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22912: LD_ADDR_VAR 0 5
22916: PUSH
22917: LD_VAR 0 2
22921: PPUSH
22922: CALL_OW 480
22926: ST_TO_ADDR
// if not tmp then
22927: LD_VAR 0 5
22931: NOT
22932: IFFALSE 22936
// exit ;
22934: GO 22985
// for i in tmp do
22936: LD_ADDR_VAR 0 4
22940: PUSH
22941: LD_VAR 0 5
22945: PUSH
22946: FOR_IN
22947: IFFALSE 22983
// if GetTech ( i , side ) <> state_researched then
22949: LD_VAR 0 4
22953: PPUSH
22954: LD_VAR 0 1
22958: PPUSH
22959: CALL_OW 321
22963: PUSH
22964: LD_INT 2
22966: NONEQUAL
22967: IFFALSE 22981
// begin result := false ;
22969: LD_ADDR_VAR 0 3
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
// exit ;
22977: POP
22978: POP
22979: GO 22985
// end ;
22981: GO 22946
22983: POP
22984: POP
// end ;
22985: LD_VAR 0 3
22989: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22990: LD_INT 0
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
23002: PPUSH
23003: PPUSH
23004: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23005: LD_VAR 0 1
23009: NOT
23010: PUSH
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL_OW 257
23020: PUSH
23021: LD_INT 9
23023: NONEQUAL
23024: OR
23025: IFFALSE 23029
// exit ;
23027: GO 23602
// side := GetSide ( unit ) ;
23029: LD_ADDR_VAR 0 9
23033: PUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL_OW 255
23043: ST_TO_ADDR
// tech_space := tech_spacanom ;
23044: LD_ADDR_VAR 0 12
23048: PUSH
23049: LD_INT 29
23051: ST_TO_ADDR
// tech_time := tech_taurad ;
23052: LD_ADDR_VAR 0 13
23056: PUSH
23057: LD_INT 28
23059: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23060: LD_ADDR_VAR 0 11
23064: PUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 310
23074: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23075: LD_VAR 0 11
23079: PPUSH
23080: CALL_OW 247
23084: PUSH
23085: LD_INT 2
23087: EQUAL
23088: IFFALSE 23092
// exit ;
23090: GO 23602
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23092: LD_ADDR_VAR 0 8
23096: PUSH
23097: LD_INT 81
23099: PUSH
23100: LD_VAR 0 9
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 3
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PPUSH
23130: CALL_OW 69
23134: ST_TO_ADDR
// if not tmp then
23135: LD_VAR 0 8
23139: NOT
23140: IFFALSE 23144
// exit ;
23142: GO 23602
// if in_unit then
23144: LD_VAR 0 11
23148: IFFALSE 23172
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23150: LD_ADDR_VAR 0 10
23154: PUSH
23155: LD_VAR 0 8
23159: PPUSH
23160: LD_VAR 0 11
23164: PPUSH
23165: CALL_OW 74
23169: ST_TO_ADDR
23170: GO 23192
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23172: LD_ADDR_VAR 0 10
23176: PUSH
23177: LD_VAR 0 8
23181: PPUSH
23182: LD_VAR 0 1
23186: PPUSH
23187: CALL_OW 74
23191: ST_TO_ADDR
// if not enemy then
23192: LD_VAR 0 10
23196: NOT
23197: IFFALSE 23201
// exit ;
23199: GO 23602
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23201: LD_VAR 0 11
23205: PUSH
23206: LD_VAR 0 11
23210: PPUSH
23211: LD_VAR 0 10
23215: PPUSH
23216: CALL_OW 296
23220: PUSH
23221: LD_INT 13
23223: GREATER
23224: AND
23225: PUSH
23226: LD_VAR 0 1
23230: PPUSH
23231: LD_VAR 0 10
23235: PPUSH
23236: CALL_OW 296
23240: PUSH
23241: LD_INT 12
23243: GREATER
23244: OR
23245: IFFALSE 23249
// exit ;
23247: GO 23602
// missile := [ 1 ] ;
23249: LD_ADDR_VAR 0 14
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23260: LD_VAR 0 9
23264: PPUSH
23265: LD_VAR 0 12
23269: PPUSH
23270: CALL_OW 325
23274: IFFALSE 23303
// missile := Insert ( missile , missile + 1 , 2 ) ;
23276: LD_ADDR_VAR 0 14
23280: PUSH
23281: LD_VAR 0 14
23285: PPUSH
23286: LD_VAR 0 14
23290: PUSH
23291: LD_INT 1
23293: PLUS
23294: PPUSH
23295: LD_INT 2
23297: PPUSH
23298: CALL_OW 2
23302: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23303: LD_VAR 0 9
23307: PPUSH
23308: LD_VAR 0 13
23312: PPUSH
23313: CALL_OW 325
23317: PUSH
23318: LD_VAR 0 10
23322: PPUSH
23323: CALL_OW 255
23327: PPUSH
23328: LD_VAR 0 13
23332: PPUSH
23333: CALL_OW 325
23337: NOT
23338: AND
23339: IFFALSE 23368
// missile := Insert ( missile , missile + 1 , 3 ) ;
23341: LD_ADDR_VAR 0 14
23345: PUSH
23346: LD_VAR 0 14
23350: PPUSH
23351: LD_VAR 0 14
23355: PUSH
23356: LD_INT 1
23358: PLUS
23359: PPUSH
23360: LD_INT 3
23362: PPUSH
23363: CALL_OW 2
23367: ST_TO_ADDR
// if missile < 2 then
23368: LD_VAR 0 14
23372: PUSH
23373: LD_INT 2
23375: LESS
23376: IFFALSE 23380
// exit ;
23378: GO 23602
// x := GetX ( enemy ) ;
23380: LD_ADDR_VAR 0 4
23384: PUSH
23385: LD_VAR 0 10
23389: PPUSH
23390: CALL_OW 250
23394: ST_TO_ADDR
// y := GetY ( enemy ) ;
23395: LD_ADDR_VAR 0 5
23399: PUSH
23400: LD_VAR 0 10
23404: PPUSH
23405: CALL_OW 251
23409: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23410: LD_ADDR_VAR 0 6
23414: PUSH
23415: LD_VAR 0 4
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PPUSH
23424: LD_INT 1
23426: PPUSH
23427: CALL_OW 12
23431: PLUS
23432: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23433: LD_ADDR_VAR 0 7
23437: PUSH
23438: LD_VAR 0 5
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PPUSH
23447: LD_INT 1
23449: PPUSH
23450: CALL_OW 12
23454: PLUS
23455: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23456: LD_VAR 0 6
23460: PPUSH
23461: LD_VAR 0 7
23465: PPUSH
23466: CALL_OW 488
23470: NOT
23471: IFFALSE 23493
// begin _x := x ;
23473: LD_ADDR_VAR 0 6
23477: PUSH
23478: LD_VAR 0 4
23482: ST_TO_ADDR
// _y := y ;
23483: LD_ADDR_VAR 0 7
23487: PUSH
23488: LD_VAR 0 5
23492: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23493: LD_ADDR_VAR 0 3
23497: PUSH
23498: LD_INT 1
23500: PPUSH
23501: LD_VAR 0 14
23505: PPUSH
23506: CALL_OW 12
23510: ST_TO_ADDR
// case i of 1 :
23511: LD_VAR 0 3
23515: PUSH
23516: LD_INT 1
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23541
23524: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_VAR 0 10
23534: PPUSH
23535: CALL_OW 115
23539: GO 23602
23541: LD_INT 2
23543: DOUBLE
23544: EQUAL
23545: IFTRUE 23549
23547: GO 23571
23549: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23550: LD_VAR 0 1
23554: PPUSH
23555: LD_VAR 0 6
23559: PPUSH
23560: LD_VAR 0 7
23564: PPUSH
23565: CALL_OW 153
23569: GO 23602
23571: LD_INT 3
23573: DOUBLE
23574: EQUAL
23575: IFTRUE 23579
23577: GO 23601
23579: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23580: LD_VAR 0 1
23584: PPUSH
23585: LD_VAR 0 6
23589: PPUSH
23590: LD_VAR 0 7
23594: PPUSH
23595: CALL_OW 154
23599: GO 23602
23601: POP
// end ;
23602: LD_VAR 0 2
23606: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23607: LD_INT 0
23609: PPUSH
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
23614: PPUSH
// if not unit or not building then
23615: LD_VAR 0 1
23619: NOT
23620: PUSH
23621: LD_VAR 0 2
23625: NOT
23626: OR
23627: IFFALSE 23631
// exit ;
23629: GO 23789
// x := GetX ( building ) ;
23631: LD_ADDR_VAR 0 5
23635: PUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: CALL_OW 250
23645: ST_TO_ADDR
// y := GetY ( building ) ;
23646: LD_ADDR_VAR 0 6
23650: PUSH
23651: LD_VAR 0 2
23655: PPUSH
23656: CALL_OW 251
23660: ST_TO_ADDR
// for i = 0 to 5 do
23661: LD_ADDR_VAR 0 4
23665: PUSH
23666: DOUBLE
23667: LD_INT 0
23669: DEC
23670: ST_TO_ADDR
23671: LD_INT 5
23673: PUSH
23674: FOR_TO
23675: IFFALSE 23787
// begin _x := ShiftX ( x , i , 3 ) ;
23677: LD_ADDR_VAR 0 7
23681: PUSH
23682: LD_VAR 0 5
23686: PPUSH
23687: LD_VAR 0 4
23691: PPUSH
23692: LD_INT 3
23694: PPUSH
23695: CALL_OW 272
23699: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23700: LD_ADDR_VAR 0 8
23704: PUSH
23705: LD_VAR 0 6
23709: PPUSH
23710: LD_VAR 0 4
23714: PPUSH
23715: LD_INT 3
23717: PPUSH
23718: CALL_OW 273
23722: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23723: LD_VAR 0 7
23727: PPUSH
23728: LD_VAR 0 8
23732: PPUSH
23733: CALL_OW 488
23737: NOT
23738: IFFALSE 23742
// continue ;
23740: GO 23674
// if HexInfo ( _x , _y ) = 0 then
23742: LD_VAR 0 7
23746: PPUSH
23747: LD_VAR 0 8
23751: PPUSH
23752: CALL_OW 428
23756: PUSH
23757: LD_INT 0
23759: EQUAL
23760: IFFALSE 23785
// begin ComMoveXY ( unit , _x , _y ) ;
23762: LD_VAR 0 1
23766: PPUSH
23767: LD_VAR 0 7
23771: PPUSH
23772: LD_VAR 0 8
23776: PPUSH
23777: CALL_OW 111
// exit ;
23781: POP
23782: POP
23783: GO 23789
// end ; end ;
23785: GO 23674
23787: POP
23788: POP
// end ;
23789: LD_VAR 0 3
23793: RET
// export function ScanBase ( side , base_area ) ; begin
23794: LD_INT 0
23796: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23797: LD_ADDR_VAR 0 3
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_INT 81
23809: PUSH
23810: LD_VAR 0 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PPUSH
23819: CALL_OW 70
23823: ST_TO_ADDR
// end ;
23824: LD_VAR 0 3
23828: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23829: LD_INT 0
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
// result := false ;
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_INT 0
23842: ST_TO_ADDR
// side := GetSide ( unit ) ;
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 255
23857: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23858: LD_ADDR_VAR 0 4
23862: PUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 248
23872: ST_TO_ADDR
// case nat of 1 :
23873: LD_VAR 0 4
23877: PUSH
23878: LD_INT 1
23880: DOUBLE
23881: EQUAL
23882: IFTRUE 23886
23884: GO 23897
23886: POP
// tech := tech_lassight ; 2 :
23887: LD_ADDR_VAR 0 5
23891: PUSH
23892: LD_INT 12
23894: ST_TO_ADDR
23895: GO 23936
23897: LD_INT 2
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23916
23905: POP
// tech := tech_mortar ; 3 :
23906: LD_ADDR_VAR 0 5
23910: PUSH
23911: LD_INT 41
23913: ST_TO_ADDR
23914: GO 23936
23916: LD_INT 3
23918: DOUBLE
23919: EQUAL
23920: IFTRUE 23924
23922: GO 23935
23924: POP
// tech := tech_bazooka ; end ;
23925: LD_ADDR_VAR 0 5
23929: PUSH
23930: LD_INT 44
23932: ST_TO_ADDR
23933: GO 23936
23935: POP
// if Researched ( side , tech ) then
23936: LD_VAR 0 3
23940: PPUSH
23941: LD_VAR 0 5
23945: PPUSH
23946: CALL_OW 325
23950: IFFALSE 23977
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23952: LD_ADDR_VAR 0 2
23956: PUSH
23957: LD_INT 5
23959: PUSH
23960: LD_INT 8
23962: PUSH
23963: LD_INT 9
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: LD_VAR 0 4
23975: ARRAY
23976: ST_TO_ADDR
// end ;
23977: LD_VAR 0 2
23981: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23982: LD_INT 0
23984: PPUSH
23985: PPUSH
23986: PPUSH
// if not mines then
23987: LD_VAR 0 2
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24140
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23996: LD_ADDR_VAR 0 5
24000: PUSH
24001: LD_INT 81
24003: PUSH
24004: LD_VAR 0 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PPUSH
24034: CALL_OW 69
24038: ST_TO_ADDR
// for i in mines do
24039: LD_ADDR_VAR 0 4
24043: PUSH
24044: LD_VAR 0 2
24048: PUSH
24049: FOR_IN
24050: IFFALSE 24138
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24052: LD_VAR 0 4
24056: PUSH
24057: LD_INT 1
24059: ARRAY
24060: PPUSH
24061: LD_VAR 0 4
24065: PUSH
24066: LD_INT 2
24068: ARRAY
24069: PPUSH
24070: CALL_OW 458
24074: NOT
24075: IFFALSE 24079
// continue ;
24077: GO 24049
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24079: LD_VAR 0 4
24083: PUSH
24084: LD_INT 1
24086: ARRAY
24087: PPUSH
24088: LD_VAR 0 4
24092: PUSH
24093: LD_INT 2
24095: ARRAY
24096: PPUSH
24097: CALL_OW 428
24101: PUSH
24102: LD_VAR 0 5
24106: IN
24107: IFFALSE 24136
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24109: LD_VAR 0 4
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PPUSH
24118: LD_VAR 0 4
24122: PUSH
24123: LD_INT 2
24125: ARRAY
24126: PPUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 456
// end ;
24136: GO 24049
24138: POP
24139: POP
// end ;
24140: LD_VAR 0 3
24144: RET
// export function Count ( array ) ; var i ; begin
24145: LD_INT 0
24147: PPUSH
24148: PPUSH
// result := 0 ;
24149: LD_ADDR_VAR 0 2
24153: PUSH
24154: LD_INT 0
24156: ST_TO_ADDR
// for i in array do
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: LD_VAR 0 1
24166: PUSH
24167: FOR_IN
24168: IFFALSE 24192
// if i then
24170: LD_VAR 0 3
24174: IFFALSE 24190
// result := result + 1 ;
24176: LD_ADDR_VAR 0 2
24180: PUSH
24181: LD_VAR 0 2
24185: PUSH
24186: LD_INT 1
24188: PLUS
24189: ST_TO_ADDR
24190: GO 24167
24192: POP
24193: POP
// end ;
24194: LD_VAR 0 2
24198: RET
// export function IsEmpty ( building ) ; begin
24199: LD_INT 0
24201: PPUSH
// if not building then
24202: LD_VAR 0 1
24206: NOT
24207: IFFALSE 24211
// exit ;
24209: GO 24254
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_VAR 0 1
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 255
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 58
24240: PUSH
24241: EMPTY
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PPUSH
24248: CALL_OW 69
24252: IN
24253: ST_TO_ADDR
// end ;
24254: LD_VAR 0 2
24258: RET
// export function IsNotFull ( building ) ; begin
24259: LD_INT 0
24261: PPUSH
// if not building then
24262: LD_VAR 0 1
24266: NOT
24267: IFFALSE 24271
// exit ;
24269: GO 24290
// result := UnitsInside ( building ) < 6 ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 313
24285: PUSH
24286: LD_INT 6
24288: LESS
24289: ST_TO_ADDR
// end ;
24290: LD_VAR 0 2
24294: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24295: LD_INT 0
24297: PPUSH
24298: PPUSH
24299: PPUSH
24300: PPUSH
// tmp := [ ] ;
24301: LD_ADDR_VAR 0 3
24305: PUSH
24306: EMPTY
24307: ST_TO_ADDR
// list := [ ] ;
24308: LD_ADDR_VAR 0 5
24312: PUSH
24313: EMPTY
24314: ST_TO_ADDR
// for i = 16 to 25 do
24315: LD_ADDR_VAR 0 4
24319: PUSH
24320: DOUBLE
24321: LD_INT 16
24323: DEC
24324: ST_TO_ADDR
24325: LD_INT 25
24327: PUSH
24328: FOR_TO
24329: IFFALSE 24402
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_VAR 0 3
24340: PUSH
24341: LD_INT 22
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 255
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 91
24360: PUSH
24361: LD_VAR 0 1
24365: PUSH
24366: LD_INT 6
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_VAR 0 4
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: PPUSH
24394: CALL_OW 69
24398: ADD
24399: ST_TO_ADDR
24400: GO 24328
24402: POP
24403: POP
// for i = 1 to tmp do
24404: LD_ADDR_VAR 0 4
24408: PUSH
24409: DOUBLE
24410: LD_INT 1
24412: DEC
24413: ST_TO_ADDR
24414: LD_VAR 0 3
24418: PUSH
24419: FOR_TO
24420: IFFALSE 24508
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24422: LD_ADDR_VAR 0 5
24426: PUSH
24427: LD_VAR 0 5
24431: PUSH
24432: LD_VAR 0 3
24436: PUSH
24437: LD_VAR 0 4
24441: ARRAY
24442: PPUSH
24443: CALL_OW 266
24447: PUSH
24448: LD_VAR 0 3
24452: PUSH
24453: LD_VAR 0 4
24457: ARRAY
24458: PPUSH
24459: CALL_OW 250
24463: PUSH
24464: LD_VAR 0 3
24468: PUSH
24469: LD_VAR 0 4
24473: ARRAY
24474: PPUSH
24475: CALL_OW 251
24479: PUSH
24480: LD_VAR 0 3
24484: PUSH
24485: LD_VAR 0 4
24489: ARRAY
24490: PPUSH
24491: CALL_OW 254
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: ADD
24505: ST_TO_ADDR
24506: GO 24419
24508: POP
24509: POP
// result := list ;
24510: LD_ADDR_VAR 0 2
24514: PUSH
24515: LD_VAR 0 5
24519: ST_TO_ADDR
// end ;
24520: LD_VAR 0 2
24524: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24525: LD_INT 0
24527: PPUSH
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
// if not factory then
24534: LD_VAR 0 1
24538: NOT
24539: IFFALSE 24543
// exit ;
24541: GO 25136
// if control = control_apeman then
24543: LD_VAR 0 4
24547: PUSH
24548: LD_INT 5
24550: EQUAL
24551: IFFALSE 24660
// begin tmp := UnitsInside ( factory ) ;
24553: LD_ADDR_VAR 0 8
24557: PUSH
24558: LD_VAR 0 1
24562: PPUSH
24563: CALL_OW 313
24567: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24568: LD_VAR 0 8
24572: PPUSH
24573: LD_INT 25
24575: PUSH
24576: LD_INT 12
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 72
24587: NOT
24588: IFFALSE 24598
// control := control_manual ;
24590: LD_ADDR_VAR 0 4
24594: PUSH
24595: LD_INT 1
24597: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24598: LD_ADDR_VAR 0 8
24602: PUSH
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL 24295 0 1
24612: ST_TO_ADDR
// if tmp then
24613: LD_VAR 0 8
24617: IFFALSE 24660
// begin for i in tmp do
24619: LD_ADDR_VAR 0 7
24623: PUSH
24624: LD_VAR 0 8
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24658
// if i [ 1 ] = b_ext_radio then
24632: LD_VAR 0 7
24636: PUSH
24637: LD_INT 1
24639: ARRAY
24640: PUSH
24641: LD_INT 22
24643: EQUAL
24644: IFFALSE 24656
// begin control := control_remote ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: LD_INT 2
24653: ST_TO_ADDR
// break ;
24654: GO 24658
// end ;
24656: GO 24629
24658: POP
24659: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24660: LD_VAR 0 1
24664: PPUSH
24665: LD_VAR 0 2
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_VAR 0 4
24679: PPUSH
24680: LD_VAR 0 5
24684: PPUSH
24685: CALL_OW 448
24689: IFFALSE 24724
// begin result := [ chassis , engine , control , weapon ] ;
24691: LD_ADDR_VAR 0 6
24695: PUSH
24696: LD_VAR 0 2
24700: PUSH
24701: LD_VAR 0 3
24705: PUSH
24706: LD_VAR 0 4
24710: PUSH
24711: LD_VAR 0 5
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: ST_TO_ADDR
// exit ;
24722: GO 25136
// end ; _chassis := AvailableChassisList ( factory ) ;
24724: LD_ADDR_VAR 0 9
24728: PUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL_OW 475
24738: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24739: LD_ADDR_VAR 0 11
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 476
24753: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24754: LD_ADDR_VAR 0 12
24758: PUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 477
24768: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24769: LD_ADDR_VAR 0 10
24773: PUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 478
24783: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24784: LD_VAR 0 9
24788: NOT
24789: PUSH
24790: LD_VAR 0 11
24794: NOT
24795: OR
24796: PUSH
24797: LD_VAR 0 12
24801: NOT
24802: OR
24803: PUSH
24804: LD_VAR 0 10
24808: NOT
24809: OR
24810: IFFALSE 24845
// begin result := [ chassis , engine , control , weapon ] ;
24812: LD_ADDR_VAR 0 6
24816: PUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_VAR 0 3
24826: PUSH
24827: LD_VAR 0 4
24831: PUSH
24832: LD_VAR 0 5
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
// exit ;
24843: GO 25136
// end ; if not chassis in _chassis then
24845: LD_VAR 0 2
24849: PUSH
24850: LD_VAR 0 9
24854: IN
24855: NOT
24856: IFFALSE 24882
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_VAR 0 9
24867: PUSH
24868: LD_INT 1
24870: PPUSH
24871: LD_VAR 0 9
24875: PPUSH
24876: CALL_OW 12
24880: ARRAY
24881: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24882: LD_VAR 0 2
24886: PPUSH
24887: LD_VAR 0 3
24891: PPUSH
24892: CALL 25141 0 2
24896: NOT
24897: IFFALSE 24956
// repeat engine := _engine [ 1 ] ;
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_VAR 0 11
24908: PUSH
24909: LD_INT 1
24911: ARRAY
24912: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24913: LD_ADDR_VAR 0 11
24917: PUSH
24918: LD_VAR 0 11
24922: PPUSH
24923: LD_INT 1
24925: PPUSH
24926: CALL_OW 3
24930: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24931: LD_VAR 0 2
24935: PPUSH
24936: LD_VAR 0 3
24940: PPUSH
24941: CALL 25141 0 2
24945: PUSH
24946: LD_VAR 0 11
24950: PUSH
24951: EMPTY
24952: EQUAL
24953: OR
24954: IFFALSE 24899
// if not control in _control then
24956: LD_VAR 0 4
24960: PUSH
24961: LD_VAR 0 12
24965: IN
24966: NOT
24967: IFFALSE 24993
// control := _control [ rand ( 1 , _control ) ] ;
24969: LD_ADDR_VAR 0 4
24973: PUSH
24974: LD_VAR 0 12
24978: PUSH
24979: LD_INT 1
24981: PPUSH
24982: LD_VAR 0 12
24986: PPUSH
24987: CALL_OW 12
24991: ARRAY
24992: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24993: LD_VAR 0 2
24997: PPUSH
24998: LD_VAR 0 5
25002: PPUSH
25003: CALL 25361 0 2
25007: NOT
25008: IFFALSE 25067
// repeat weapon := _weapon [ 1 ] ;
25010: LD_ADDR_VAR 0 5
25014: PUSH
25015: LD_VAR 0 10
25019: PUSH
25020: LD_INT 1
25022: ARRAY
25023: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25024: LD_ADDR_VAR 0 10
25028: PUSH
25029: LD_VAR 0 10
25033: PPUSH
25034: LD_INT 1
25036: PPUSH
25037: CALL_OW 3
25041: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_VAR 0 5
25051: PPUSH
25052: CALL 25361 0 2
25056: PUSH
25057: LD_VAR 0 10
25061: PUSH
25062: EMPTY
25063: EQUAL
25064: OR
25065: IFFALSE 25010
// result := [ ] ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: EMPTY
25073: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25074: LD_VAR 0 1
25078: PPUSH
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: LD_VAR 0 4
25093: PPUSH
25094: LD_VAR 0 5
25098: PPUSH
25099: CALL_OW 448
25103: IFFALSE 25136
// result := [ chassis , engine , control , weapon ] ;
25105: LD_ADDR_VAR 0 6
25109: PUSH
25110: LD_VAR 0 2
25114: PUSH
25115: LD_VAR 0 3
25119: PUSH
25120: LD_VAR 0 4
25124: PUSH
25125: LD_VAR 0 5
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: ST_TO_ADDR
// end ;
25136: LD_VAR 0 6
25140: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25141: LD_INT 0
25143: PPUSH
// if not chassis or not engine then
25144: LD_VAR 0 1
25148: NOT
25149: PUSH
25150: LD_VAR 0 2
25154: NOT
25155: OR
25156: IFFALSE 25160
// exit ;
25158: GO 25356
// case engine of engine_solar :
25160: LD_VAR 0 2
25164: PUSH
25165: LD_INT 2
25167: DOUBLE
25168: EQUAL
25169: IFTRUE 25173
25171: GO 25211
25173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: LD_INT 12
25184: PUSH
25185: LD_INT 13
25187: PUSH
25188: LD_INT 14
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 25340
25211: LD_INT 1
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25281
25219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 11
25227: PUSH
25228: LD_INT 12
25230: PUSH
25231: LD_INT 13
25233: PUSH
25234: LD_INT 14
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: LD_INT 4
25248: PUSH
25249: LD_INT 5
25251: PUSH
25252: LD_INT 21
25254: PUSH
25255: LD_INT 23
25257: PUSH
25258: LD_INT 22
25260: PUSH
25261: LD_INT 24
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: ST_TO_ADDR
25279: GO 25340
25281: LD_INT 3
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25339
25289: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25290: LD_ADDR_VAR 0 3
25294: PUSH
25295: LD_INT 13
25297: PUSH
25298: LD_INT 14
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 3
25306: PUSH
25307: LD_INT 4
25309: PUSH
25310: LD_INT 5
25312: PUSH
25313: LD_INT 21
25315: PUSH
25316: LD_INT 22
25318: PUSH
25319: LD_INT 23
25321: PUSH
25322: LD_INT 24
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25340
25339: POP
// result := ( chassis in result ) ;
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_VAR 0 1
25349: PUSH
25350: LD_VAR 0 3
25354: IN
25355: ST_TO_ADDR
// end ;
25356: LD_VAR 0 3
25360: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25361: LD_INT 0
25363: PPUSH
// if not chassis or not weapon then
25364: LD_VAR 0 1
25368: NOT
25369: PUSH
25370: LD_VAR 0 2
25374: NOT
25375: OR
25376: IFFALSE 25380
// exit ;
25378: GO 26442
// case weapon of us_machine_gun :
25380: LD_VAR 0 2
25384: PUSH
25385: LD_INT 2
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25423
25393: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 4
25410: PUSH
25411: LD_INT 5
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
25421: GO 26426
25423: LD_INT 3
25425: DOUBLE
25426: EQUAL
25427: IFTRUE 25431
25429: GO 25461
25431: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25432: LD_ADDR_VAR 0 3
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: LD_INT 4
25448: PUSH
25449: LD_INT 5
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: ST_TO_ADDR
25459: GO 26426
25461: LD_INT 11
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25499
25469: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 4
25486: PUSH
25487: LD_INT 5
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
25497: GO 26426
25499: LD_INT 4
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25533
25507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: LD_INT 4
25521: PUSH
25522: LD_INT 5
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 26426
25533: LD_INT 5
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25567
25541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 3
25552: PUSH
25553: LD_INT 4
25555: PUSH
25556: LD_INT 5
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
25565: GO 26426
25567: LD_INT 9
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25575
25573: GO 25601
25575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 4
25589: PUSH
25590: LD_INT 5
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
25599: GO 26426
25601: LD_INT 7
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25635
25609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 4
25623: PUSH
25624: LD_INT 5
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: ST_TO_ADDR
25633: GO 26426
25635: LD_INT 12
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25669
25643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: LD_INT 4
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: ST_TO_ADDR
25667: GO 26426
25669: LD_INT 13
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25703
25677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: LD_INT 4
25691: PUSH
25692: LD_INT 5
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: ST_TO_ADDR
25701: GO 26426
25703: LD_INT 14
25705: DOUBLE
25706: EQUAL
25707: IFTRUE 25711
25709: GO 25729
25711: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_INT 4
25719: PUSH
25720: LD_INT 5
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: ST_TO_ADDR
25727: GO 26426
25729: LD_INT 6
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25737
25735: GO 25755
25737: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25738: LD_ADDR_VAR 0 3
25742: PUSH
25743: LD_INT 4
25745: PUSH
25746: LD_INT 5
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: ST_TO_ADDR
25753: GO 26426
25755: LD_INT 10
25757: DOUBLE
25758: EQUAL
25759: IFTRUE 25763
25761: GO 25781
25763: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25764: LD_ADDR_VAR 0 3
25768: PUSH
25769: LD_INT 4
25771: PUSH
25772: LD_INT 5
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 26426
25781: LD_INT 22
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 25815
25789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_INT 11
25797: PUSH
25798: LD_INT 12
25800: PUSH
25801: LD_INT 13
25803: PUSH
25804: LD_INT 14
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
25813: GO 26426
25815: LD_INT 23
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25849
25823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 11
25831: PUSH
25832: LD_INT 12
25834: PUSH
25835: LD_INT 13
25837: PUSH
25838: LD_INT 14
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
25847: GO 26426
25849: LD_INT 24
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25883
25857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 11
25865: PUSH
25866: LD_INT 12
25868: PUSH
25869: LD_INT 13
25871: PUSH
25872: LD_INT 14
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
25881: GO 26426
25883: LD_INT 30
25885: DOUBLE
25886: EQUAL
25887: IFTRUE 25891
25889: GO 25917
25891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25892: LD_ADDR_VAR 0 3
25896: PUSH
25897: LD_INT 11
25899: PUSH
25900: LD_INT 12
25902: PUSH
25903: LD_INT 13
25905: PUSH
25906: LD_INT 14
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: ST_TO_ADDR
25915: GO 26426
25917: LD_INT 25
25919: DOUBLE
25920: EQUAL
25921: IFTRUE 25925
25923: GO 25943
25925: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_INT 13
25933: PUSH
25934: LD_INT 14
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: ST_TO_ADDR
25941: GO 26426
25943: LD_INT 27
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 25969
25951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_INT 13
25959: PUSH
25960: LD_INT 14
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: ST_TO_ADDR
25967: GO 26426
25969: LD_EXP 82
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26005
25979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 11
25987: PUSH
25988: LD_INT 12
25990: PUSH
25991: LD_INT 13
25993: PUSH
25994: LD_INT 14
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26426
26005: LD_INT 28
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26031
26013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 13
26021: PUSH
26022: LD_INT 14
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: ST_TO_ADDR
26029: GO 26426
26031: LD_INT 29
26033: DOUBLE
26034: EQUAL
26035: IFTRUE 26039
26037: GO 26057
26039: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: LD_INT 13
26047: PUSH
26048: LD_INT 14
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: ST_TO_ADDR
26055: GO 26426
26057: LD_INT 31
26059: DOUBLE
26060: EQUAL
26061: IFTRUE 26065
26063: GO 26083
26065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26066: LD_ADDR_VAR 0 3
26070: PUSH
26071: LD_INT 13
26073: PUSH
26074: LD_INT 14
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: ST_TO_ADDR
26081: GO 26426
26083: LD_INT 26
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26109
26091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 13
26099: PUSH
26100: LD_INT 14
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: ST_TO_ADDR
26107: GO 26426
26109: LD_INT 42
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26143
26117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26118: LD_ADDR_VAR 0 3
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 22
26128: PUSH
26129: LD_INT 23
26131: PUSH
26132: LD_INT 24
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: ST_TO_ADDR
26141: GO 26426
26143: LD_INT 43
26145: DOUBLE
26146: EQUAL
26147: IFTRUE 26151
26149: GO 26177
26151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_INT 21
26159: PUSH
26160: LD_INT 22
26162: PUSH
26163: LD_INT 23
26165: PUSH
26166: LD_INT 24
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: ST_TO_ADDR
26175: GO 26426
26177: LD_INT 44
26179: DOUBLE
26180: EQUAL
26181: IFTRUE 26185
26183: GO 26211
26185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26186: LD_ADDR_VAR 0 3
26190: PUSH
26191: LD_INT 21
26193: PUSH
26194: LD_INT 22
26196: PUSH
26197: LD_INT 23
26199: PUSH
26200: LD_INT 24
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: ST_TO_ADDR
26209: GO 26426
26211: LD_INT 45
26213: DOUBLE
26214: EQUAL
26215: IFTRUE 26219
26217: GO 26245
26219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26220: LD_ADDR_VAR 0 3
26224: PUSH
26225: LD_INT 21
26227: PUSH
26228: LD_INT 22
26230: PUSH
26231: LD_INT 23
26233: PUSH
26234: LD_INT 24
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: ST_TO_ADDR
26243: GO 26426
26245: LD_INT 49
26247: DOUBLE
26248: EQUAL
26249: IFTRUE 26253
26251: GO 26279
26253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26254: LD_ADDR_VAR 0 3
26258: PUSH
26259: LD_INT 21
26261: PUSH
26262: LD_INT 22
26264: PUSH
26265: LD_INT 23
26267: PUSH
26268: LD_INT 24
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: ST_TO_ADDR
26277: GO 26426
26279: LD_INT 51
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 26313
26287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: LD_INT 21
26295: PUSH
26296: LD_INT 22
26298: PUSH
26299: LD_INT 23
26301: PUSH
26302: LD_INT 24
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
26311: GO 26426
26313: LD_INT 52
26315: DOUBLE
26316: EQUAL
26317: IFTRUE 26321
26319: GO 26347
26321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26322: LD_ADDR_VAR 0 3
26326: PUSH
26327: LD_INT 21
26329: PUSH
26330: LD_INT 22
26332: PUSH
26333: LD_INT 23
26335: PUSH
26336: LD_INT 24
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: ST_TO_ADDR
26345: GO 26426
26347: LD_INT 53
26349: DOUBLE
26350: EQUAL
26351: IFTRUE 26355
26353: GO 26373
26355: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: LD_INT 23
26363: PUSH
26364: LD_INT 24
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: ST_TO_ADDR
26371: GO 26426
26373: LD_INT 46
26375: DOUBLE
26376: EQUAL
26377: IFTRUE 26381
26379: GO 26399
26381: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26382: LD_ADDR_VAR 0 3
26386: PUSH
26387: LD_INT 23
26389: PUSH
26390: LD_INT 24
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: ST_TO_ADDR
26397: GO 26426
26399: LD_INT 47
26401: DOUBLE
26402: EQUAL
26403: IFTRUE 26407
26405: GO 26425
26407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_INT 23
26415: PUSH
26416: LD_INT 24
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: ST_TO_ADDR
26423: GO 26426
26425: POP
// result := ( chassis in result ) ;
26426: LD_ADDR_VAR 0 3
26430: PUSH
26431: LD_VAR 0 1
26435: PUSH
26436: LD_VAR 0 3
26440: IN
26441: ST_TO_ADDR
// end ;
26442: LD_VAR 0 3
26446: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26447: LD_INT 0
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
26455: PPUSH
// result := array ;
26456: LD_ADDR_VAR 0 5
26460: PUSH
26461: LD_VAR 0 1
26465: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26466: LD_VAR 0 1
26470: NOT
26471: PUSH
26472: LD_VAR 0 2
26476: NOT
26477: OR
26478: PUSH
26479: LD_VAR 0 3
26483: NOT
26484: OR
26485: PUSH
26486: LD_VAR 0 2
26490: PUSH
26491: LD_VAR 0 1
26495: GREATER
26496: OR
26497: PUSH
26498: LD_VAR 0 3
26502: PUSH
26503: LD_VAR 0 1
26507: GREATER
26508: OR
26509: IFFALSE 26513
// exit ;
26511: GO 26809
// if direction then
26513: LD_VAR 0 4
26517: IFFALSE 26581
// begin d := 1 ;
26519: LD_ADDR_VAR 0 9
26523: PUSH
26524: LD_INT 1
26526: ST_TO_ADDR
// if i_from > i_to then
26527: LD_VAR 0 2
26531: PUSH
26532: LD_VAR 0 3
26536: GREATER
26537: IFFALSE 26563
// length := ( array - i_from ) + i_to else
26539: LD_ADDR_VAR 0 11
26543: PUSH
26544: LD_VAR 0 1
26548: PUSH
26549: LD_VAR 0 2
26553: MINUS
26554: PUSH
26555: LD_VAR 0 3
26559: PLUS
26560: ST_TO_ADDR
26561: GO 26579
// length := i_to - i_from ;
26563: LD_ADDR_VAR 0 11
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_VAR 0 2
26577: MINUS
26578: ST_TO_ADDR
// end else
26579: GO 26642
// begin d := - 1 ;
26581: LD_ADDR_VAR 0 9
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: ST_TO_ADDR
// if i_from > i_to then
26590: LD_VAR 0 2
26594: PUSH
26595: LD_VAR 0 3
26599: GREATER
26600: IFFALSE 26620
// length := i_from - i_to else
26602: LD_ADDR_VAR 0 11
26606: PUSH
26607: LD_VAR 0 2
26611: PUSH
26612: LD_VAR 0 3
26616: MINUS
26617: ST_TO_ADDR
26618: GO 26642
// length := ( array - i_to ) + i_from ;
26620: LD_ADDR_VAR 0 11
26624: PUSH
26625: LD_VAR 0 1
26629: PUSH
26630: LD_VAR 0 3
26634: MINUS
26635: PUSH
26636: LD_VAR 0 2
26640: PLUS
26641: ST_TO_ADDR
// end ; if not length then
26642: LD_VAR 0 11
26646: NOT
26647: IFFALSE 26651
// exit ;
26649: GO 26809
// tmp := array ;
26651: LD_ADDR_VAR 0 10
26655: PUSH
26656: LD_VAR 0 1
26660: ST_TO_ADDR
// for i = 1 to length do
26661: LD_ADDR_VAR 0 6
26665: PUSH
26666: DOUBLE
26667: LD_INT 1
26669: DEC
26670: ST_TO_ADDR
26671: LD_VAR 0 11
26675: PUSH
26676: FOR_TO
26677: IFFALSE 26797
// begin for j = 1 to array do
26679: LD_ADDR_VAR 0 7
26683: PUSH
26684: DOUBLE
26685: LD_INT 1
26687: DEC
26688: ST_TO_ADDR
26689: LD_VAR 0 1
26693: PUSH
26694: FOR_TO
26695: IFFALSE 26783
// begin k := j + d ;
26697: LD_ADDR_VAR 0 8
26701: PUSH
26702: LD_VAR 0 7
26706: PUSH
26707: LD_VAR 0 9
26711: PLUS
26712: ST_TO_ADDR
// if k > array then
26713: LD_VAR 0 8
26717: PUSH
26718: LD_VAR 0 1
26722: GREATER
26723: IFFALSE 26733
// k := 1 ;
26725: LD_ADDR_VAR 0 8
26729: PUSH
26730: LD_INT 1
26732: ST_TO_ADDR
// if not k then
26733: LD_VAR 0 8
26737: NOT
26738: IFFALSE 26750
// k := array ;
26740: LD_ADDR_VAR 0 8
26744: PUSH
26745: LD_VAR 0 1
26749: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26750: LD_ADDR_VAR 0 10
26754: PUSH
26755: LD_VAR 0 10
26759: PPUSH
26760: LD_VAR 0 8
26764: PPUSH
26765: LD_VAR 0 1
26769: PUSH
26770: LD_VAR 0 7
26774: ARRAY
26775: PPUSH
26776: CALL_OW 1
26780: ST_TO_ADDR
// end ;
26781: GO 26694
26783: POP
26784: POP
// array := tmp ;
26785: LD_ADDR_VAR 0 1
26789: PUSH
26790: LD_VAR 0 10
26794: ST_TO_ADDR
// end ;
26795: GO 26676
26797: POP
26798: POP
// result := array ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: LD_VAR 0 1
26808: ST_TO_ADDR
// end ;
26809: LD_VAR 0 5
26813: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
// result := 0 ;
26818: LD_ADDR_VAR 0 3
26822: PUSH
26823: LD_INT 0
26825: ST_TO_ADDR
// if not array or not value in array then
26826: LD_VAR 0 1
26830: NOT
26831: PUSH
26832: LD_VAR 0 2
26836: PUSH
26837: LD_VAR 0 1
26841: IN
26842: NOT
26843: OR
26844: IFFALSE 26848
// exit ;
26846: GO 26902
// for i = 1 to array do
26848: LD_ADDR_VAR 0 4
26852: PUSH
26853: DOUBLE
26854: LD_INT 1
26856: DEC
26857: ST_TO_ADDR
26858: LD_VAR 0 1
26862: PUSH
26863: FOR_TO
26864: IFFALSE 26900
// if value = array [ i ] then
26866: LD_VAR 0 2
26870: PUSH
26871: LD_VAR 0 1
26875: PUSH
26876: LD_VAR 0 4
26880: ARRAY
26881: EQUAL
26882: IFFALSE 26898
// begin result := i ;
26884: LD_ADDR_VAR 0 3
26888: PUSH
26889: LD_VAR 0 4
26893: ST_TO_ADDR
// exit ;
26894: POP
26895: POP
26896: GO 26902
// end ;
26898: GO 26863
26900: POP
26901: POP
// end ;
26902: LD_VAR 0 3
26906: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26907: LD_INT 0
26909: PPUSH
// vc_chassis := chassis ;
26910: LD_ADDR_OWVAR 37
26914: PUSH
26915: LD_VAR 0 1
26919: ST_TO_ADDR
// vc_engine := engine ;
26920: LD_ADDR_OWVAR 39
26924: PUSH
26925: LD_VAR 0 2
26929: ST_TO_ADDR
// vc_control := control ;
26930: LD_ADDR_OWVAR 38
26934: PUSH
26935: LD_VAR 0 3
26939: ST_TO_ADDR
// vc_weapon := weapon ;
26940: LD_ADDR_OWVAR 40
26944: PUSH
26945: LD_VAR 0 4
26949: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26950: LD_ADDR_OWVAR 41
26954: PUSH
26955: LD_VAR 0 5
26959: ST_TO_ADDR
// end ;
26960: LD_VAR 0 6
26964: RET
// export function WantPlant ( unit ) ; var task ; begin
26965: LD_INT 0
26967: PPUSH
26968: PPUSH
// result := false ;
26969: LD_ADDR_VAR 0 2
26973: PUSH
26974: LD_INT 0
26976: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26977: LD_ADDR_VAR 0 3
26981: PUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 437
26991: ST_TO_ADDR
// if task then
26992: LD_VAR 0 3
26996: IFFALSE 27024
// if task [ 1 ] [ 1 ] = p then
26998: LD_VAR 0 3
27002: PUSH
27003: LD_INT 1
27005: ARRAY
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: PUSH
27011: LD_STRING p
27013: EQUAL
27014: IFFALSE 27024
// result := true ;
27016: LD_ADDR_VAR 0 2
27020: PUSH
27021: LD_INT 1
27023: ST_TO_ADDR
// end ;
27024: LD_VAR 0 2
27028: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
// if pos < 1 then
27035: LD_VAR 0 2
27039: PUSH
27040: LD_INT 1
27042: LESS
27043: IFFALSE 27047
// exit ;
27045: GO 27350
// if pos = 1 then
27047: LD_VAR 0 2
27051: PUSH
27052: LD_INT 1
27054: EQUAL
27055: IFFALSE 27088
// result := Replace ( arr , pos [ 1 ] , value ) else
27057: LD_ADDR_VAR 0 4
27061: PUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_INT 1
27074: ARRAY
27075: PPUSH
27076: LD_VAR 0 3
27080: PPUSH
27081: CALL_OW 1
27085: ST_TO_ADDR
27086: GO 27350
// begin tmp := arr ;
27088: LD_ADDR_VAR 0 6
27092: PUSH
27093: LD_VAR 0 1
27097: ST_TO_ADDR
// s_arr := [ tmp ] ;
27098: LD_ADDR_VAR 0 7
27102: PUSH
27103: LD_VAR 0 6
27107: PUSH
27108: EMPTY
27109: LIST
27110: ST_TO_ADDR
// for i = 1 to pos - 1 do
27111: LD_ADDR_VAR 0 5
27115: PUSH
27116: DOUBLE
27117: LD_INT 1
27119: DEC
27120: ST_TO_ADDR
27121: LD_VAR 0 2
27125: PUSH
27126: LD_INT 1
27128: MINUS
27129: PUSH
27130: FOR_TO
27131: IFFALSE 27176
// begin tmp := tmp [ pos [ i ] ] ;
27133: LD_ADDR_VAR 0 6
27137: PUSH
27138: LD_VAR 0 6
27142: PUSH
27143: LD_VAR 0 2
27147: PUSH
27148: LD_VAR 0 5
27152: ARRAY
27153: ARRAY
27154: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27155: LD_ADDR_VAR 0 7
27159: PUSH
27160: LD_VAR 0 7
27164: PUSH
27165: LD_VAR 0 6
27169: PUSH
27170: EMPTY
27171: LIST
27172: ADD
27173: ST_TO_ADDR
// end ;
27174: GO 27130
27176: POP
27177: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27178: LD_ADDR_VAR 0 6
27182: PUSH
27183: LD_VAR 0 6
27187: PPUSH
27188: LD_VAR 0 2
27192: PUSH
27193: LD_VAR 0 2
27197: ARRAY
27198: PPUSH
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL_OW 1
27208: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27209: LD_ADDR_VAR 0 7
27213: PUSH
27214: LD_VAR 0 7
27218: PPUSH
27219: LD_VAR 0 7
27223: PPUSH
27224: LD_VAR 0 6
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
// for i = s_arr downto 2 do
27234: LD_ADDR_VAR 0 5
27238: PUSH
27239: DOUBLE
27240: LD_VAR 0 7
27244: INC
27245: ST_TO_ADDR
27246: LD_INT 2
27248: PUSH
27249: FOR_DOWNTO
27250: IFFALSE 27334
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27252: LD_ADDR_VAR 0 6
27256: PUSH
27257: LD_VAR 0 7
27261: PUSH
27262: LD_VAR 0 5
27266: PUSH
27267: LD_INT 1
27269: MINUS
27270: ARRAY
27271: PPUSH
27272: LD_VAR 0 2
27276: PUSH
27277: LD_VAR 0 5
27281: PUSH
27282: LD_INT 1
27284: MINUS
27285: ARRAY
27286: PPUSH
27287: LD_VAR 0 7
27291: PUSH
27292: LD_VAR 0 5
27296: ARRAY
27297: PPUSH
27298: CALL_OW 1
27302: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27303: LD_ADDR_VAR 0 7
27307: PUSH
27308: LD_VAR 0 7
27312: PPUSH
27313: LD_VAR 0 5
27317: PUSH
27318: LD_INT 1
27320: MINUS
27321: PPUSH
27322: LD_VAR 0 6
27326: PPUSH
27327: CALL_OW 1
27331: ST_TO_ADDR
// end ;
27332: GO 27249
27334: POP
27335: POP
// result := s_arr [ 1 ] ;
27336: LD_ADDR_VAR 0 4
27340: PUSH
27341: LD_VAR 0 7
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: ST_TO_ADDR
// end ; end ;
27350: LD_VAR 0 4
27354: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// if not list then
27359: LD_VAR 0 1
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27459
// i := list [ pos1 ] ;
27368: LD_ADDR_VAR 0 5
27372: PUSH
27373: LD_VAR 0 1
27377: PUSH
27378: LD_VAR 0 2
27382: ARRAY
27383: ST_TO_ADDR
// if not i then
27384: LD_VAR 0 5
27388: NOT
27389: IFFALSE 27393
// exit ;
27391: GO 27459
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27393: LD_ADDR_VAR 0 1
27397: PUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 1
27412: PUSH
27413: LD_VAR 0 3
27417: ARRAY
27418: PPUSH
27419: CALL_OW 1
27423: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27424: LD_ADDR_VAR 0 1
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: LD_VAR 0 3
27438: PPUSH
27439: LD_VAR 0 5
27443: PPUSH
27444: CALL_OW 1
27448: ST_TO_ADDR
// result := list ;
27449: LD_ADDR_VAR 0 4
27453: PUSH
27454: LD_VAR 0 1
27458: ST_TO_ADDR
// end ;
27459: LD_VAR 0 4
27463: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27464: LD_INT 0
27466: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27467: LD_ADDR_VAR 0 5
27471: PUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 250
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 251
27491: PPUSH
27492: LD_VAR 0 2
27496: PPUSH
27497: LD_VAR 0 3
27501: PPUSH
27502: LD_VAR 0 4
27506: PPUSH
27507: CALL 27517 0 5
27511: ST_TO_ADDR
// end ;
27512: LD_VAR 0 5
27516: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27517: LD_INT 0
27519: PPUSH
27520: PPUSH
27521: PPUSH
27522: PPUSH
// if not list then
27523: LD_VAR 0 3
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27920
// result := [ ] ;
27532: LD_ADDR_VAR 0 6
27536: PUSH
27537: EMPTY
27538: ST_TO_ADDR
// for i in list do
27539: LD_ADDR_VAR 0 7
27543: PUSH
27544: LD_VAR 0 3
27548: PUSH
27549: FOR_IN
27550: IFFALSE 27752
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27552: LD_ADDR_VAR 0 9
27556: PUSH
27557: LD_VAR 0 7
27561: PPUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: CALL_OW 297
27576: ST_TO_ADDR
// if not result then
27577: LD_VAR 0 6
27581: NOT
27582: IFFALSE 27608
// result := [ [ i , tmp ] ] else
27584: LD_ADDR_VAR 0 6
27588: PUSH
27589: LD_VAR 0 7
27593: PUSH
27594: LD_VAR 0 9
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: ST_TO_ADDR
27606: GO 27750
// begin if result [ result ] [ 2 ] < tmp then
27608: LD_VAR 0 6
27612: PUSH
27613: LD_VAR 0 6
27617: ARRAY
27618: PUSH
27619: LD_INT 2
27621: ARRAY
27622: PUSH
27623: LD_VAR 0 9
27627: LESS
27628: IFFALSE 27670
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27630: LD_ADDR_VAR 0 6
27634: PUSH
27635: LD_VAR 0 6
27639: PPUSH
27640: LD_VAR 0 6
27644: PUSH
27645: LD_INT 1
27647: PLUS
27648: PPUSH
27649: LD_VAR 0 7
27653: PUSH
27654: LD_VAR 0 9
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PPUSH
27663: CALL_OW 2
27667: ST_TO_ADDR
27668: GO 27750
// for j = 1 to result do
27670: LD_ADDR_VAR 0 8
27674: PUSH
27675: DOUBLE
27676: LD_INT 1
27678: DEC
27679: ST_TO_ADDR
27680: LD_VAR 0 6
27684: PUSH
27685: FOR_TO
27686: IFFALSE 27748
// begin if tmp < result [ j ] [ 2 ] then
27688: LD_VAR 0 9
27692: PUSH
27693: LD_VAR 0 6
27697: PUSH
27698: LD_VAR 0 8
27702: ARRAY
27703: PUSH
27704: LD_INT 2
27706: ARRAY
27707: LESS
27708: IFFALSE 27746
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27710: LD_ADDR_VAR 0 6
27714: PUSH
27715: LD_VAR 0 6
27719: PPUSH
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 7
27729: PUSH
27730: LD_VAR 0 9
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PPUSH
27739: CALL_OW 2
27743: ST_TO_ADDR
// break ;
27744: GO 27748
// end ; end ;
27746: GO 27685
27748: POP
27749: POP
// end ; end ;
27750: GO 27549
27752: POP
27753: POP
// if result and not asc then
27754: LD_VAR 0 6
27758: PUSH
27759: LD_VAR 0 4
27763: NOT
27764: AND
27765: IFFALSE 27840
// begin tmp := result ;
27767: LD_ADDR_VAR 0 9
27771: PUSH
27772: LD_VAR 0 6
27776: ST_TO_ADDR
// for i = tmp downto 1 do
27777: LD_ADDR_VAR 0 7
27781: PUSH
27782: DOUBLE
27783: LD_VAR 0 9
27787: INC
27788: ST_TO_ADDR
27789: LD_INT 1
27791: PUSH
27792: FOR_DOWNTO
27793: IFFALSE 27838
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27795: LD_ADDR_VAR 0 6
27799: PUSH
27800: LD_VAR 0 6
27804: PPUSH
27805: LD_VAR 0 9
27809: PUSH
27810: LD_VAR 0 7
27814: MINUS
27815: PUSH
27816: LD_INT 1
27818: PLUS
27819: PPUSH
27820: LD_VAR 0 9
27824: PUSH
27825: LD_VAR 0 7
27829: ARRAY
27830: PPUSH
27831: CALL_OW 1
27835: ST_TO_ADDR
27836: GO 27792
27838: POP
27839: POP
// end ; tmp := [ ] ;
27840: LD_ADDR_VAR 0 9
27844: PUSH
27845: EMPTY
27846: ST_TO_ADDR
// if mode then
27847: LD_VAR 0 5
27851: IFFALSE 27920
// begin for i = 1 to result do
27853: LD_ADDR_VAR 0 7
27857: PUSH
27858: DOUBLE
27859: LD_INT 1
27861: DEC
27862: ST_TO_ADDR
27863: LD_VAR 0 6
27867: PUSH
27868: FOR_TO
27869: IFFALSE 27908
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27871: LD_ADDR_VAR 0 9
27875: PUSH
27876: LD_VAR 0 9
27880: PPUSH
27881: LD_VAR 0 7
27885: PPUSH
27886: LD_VAR 0 6
27890: PUSH
27891: LD_VAR 0 7
27895: ARRAY
27896: PUSH
27897: LD_INT 1
27899: ARRAY
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
27906: GO 27868
27908: POP
27909: POP
// result := tmp ;
27910: LD_ADDR_VAR 0 6
27914: PUSH
27915: LD_VAR 0 9
27919: ST_TO_ADDR
// end ; end ;
27920: LD_VAR 0 6
27924: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
27931: PPUSH
27932: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27933: LD_ADDR_VAR 0 5
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
// if not x or not y then
27955: LD_VAR 0 2
27959: NOT
27960: PUSH
27961: LD_VAR 0 3
27965: NOT
27966: OR
27967: IFFALSE 27971
// exit ;
27969: GO 29623
// if not range then
27971: LD_VAR 0 4
27975: NOT
27976: IFFALSE 27986
// range := 10 ;
27978: LD_ADDR_VAR 0 4
27982: PUSH
27983: LD_INT 10
27985: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27986: LD_ADDR_VAR 0 8
27990: PUSH
27991: LD_INT 81
27993: PUSH
27994: LD_VAR 0 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 92
28005: PUSH
28006: LD_VAR 0 2
28010: PUSH
28011: LD_VAR 0 3
28015: PUSH
28016: LD_VAR 0 4
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: LD_INT 21
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: ST_TO_ADDR
// if not tmp then
28054: LD_VAR 0 8
28058: NOT
28059: IFFALSE 28063
// exit ;
28061: GO 29623
// for i in tmp do
28063: LD_ADDR_VAR 0 6
28067: PUSH
28068: LD_VAR 0 8
28072: PUSH
28073: FOR_IN
28074: IFFALSE 29598
// begin points := [ 0 , 0 , 0 ] ;
28076: LD_ADDR_VAR 0 9
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// bpoints := 1 ;
28095: LD_ADDR_VAR 0 10
28099: PUSH
28100: LD_INT 1
28102: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28103: LD_VAR 0 6
28107: PPUSH
28108: CALL_OW 247
28112: PUSH
28113: LD_INT 1
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28699
28121: POP
// begin if GetClass ( i ) = 1 then
28122: LD_VAR 0 6
28126: PPUSH
28127: CALL_OW 257
28131: PUSH
28132: LD_INT 1
28134: EQUAL
28135: IFFALSE 28156
// points := [ 10 , 5 , 3 ] ;
28137: LD_ADDR_VAR 0 9
28141: PUSH
28142: LD_INT 10
28144: PUSH
28145: LD_INT 5
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28156: LD_VAR 0 6
28160: PPUSH
28161: CALL_OW 257
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 4
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: IN
28180: IFFALSE 28201
// points := [ 3 , 2 , 1 ] ;
28182: LD_ADDR_VAR 0 9
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28201: LD_VAR 0 6
28205: PPUSH
28206: CALL_OW 257
28210: PUSH
28211: LD_INT 5
28213: EQUAL
28214: IFFALSE 28235
// points := [ 130 , 5 , 2 ] ;
28216: LD_ADDR_VAR 0 9
28220: PUSH
28221: LD_INT 130
28223: PUSH
28224: LD_INT 5
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28235: LD_VAR 0 6
28239: PPUSH
28240: CALL_OW 257
28244: PUSH
28245: LD_INT 8
28247: EQUAL
28248: IFFALSE 28269
// points := [ 35 , 35 , 30 ] ;
28250: LD_ADDR_VAR 0 9
28254: PUSH
28255: LD_INT 35
28257: PUSH
28258: LD_INT 35
28260: PUSH
28261: LD_INT 30
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28269: LD_VAR 0 6
28273: PPUSH
28274: CALL_OW 257
28278: PUSH
28279: LD_INT 9
28281: EQUAL
28282: IFFALSE 28303
// points := [ 20 , 55 , 40 ] ;
28284: LD_ADDR_VAR 0 9
28288: PUSH
28289: LD_INT 20
28291: PUSH
28292: LD_INT 55
28294: PUSH
28295: LD_INT 40
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28303: LD_VAR 0 6
28307: PPUSH
28308: CALL_OW 257
28312: PUSH
28313: LD_INT 12
28315: PUSH
28316: LD_INT 16
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: IN
28323: IFFALSE 28344
// points := [ 5 , 3 , 2 ] ;
28325: LD_ADDR_VAR 0 9
28329: PUSH
28330: LD_INT 5
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28344: LD_VAR 0 6
28348: PPUSH
28349: CALL_OW 257
28353: PUSH
28354: LD_INT 17
28356: EQUAL
28357: IFFALSE 28378
// points := [ 100 , 50 , 75 ] ;
28359: LD_ADDR_VAR 0 9
28363: PUSH
28364: LD_INT 100
28366: PUSH
28367: LD_INT 50
28369: PUSH
28370: LD_INT 75
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28378: LD_VAR 0 6
28382: PPUSH
28383: CALL_OW 257
28387: PUSH
28388: LD_INT 15
28390: EQUAL
28391: IFFALSE 28412
// points := [ 10 , 5 , 3 ] ;
28393: LD_ADDR_VAR 0 9
28397: PUSH
28398: LD_INT 10
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: LD_INT 3
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 257
28421: PUSH
28422: LD_INT 14
28424: EQUAL
28425: IFFALSE 28446
// points := [ 10 , 0 , 0 ] ;
28427: LD_ADDR_VAR 0 9
28431: PUSH
28432: LD_INT 10
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28446: LD_VAR 0 6
28450: PPUSH
28451: CALL_OW 257
28455: PUSH
28456: LD_INT 11
28458: EQUAL
28459: IFFALSE 28480
// points := [ 30 , 10 , 5 ] ;
28461: LD_ADDR_VAR 0 9
28465: PUSH
28466: LD_INT 30
28468: PUSH
28469: LD_INT 10
28471: PUSH
28472: LD_INT 5
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28480: LD_VAR 0 1
28484: PPUSH
28485: LD_INT 5
28487: PPUSH
28488: CALL_OW 321
28492: PUSH
28493: LD_INT 2
28495: EQUAL
28496: IFFALSE 28513
// bpoints := bpoints * 1.8 ;
28498: LD_ADDR_VAR 0 10
28502: PUSH
28503: LD_VAR 0 10
28507: PUSH
28508: LD_REAL  1.80000000000000E+0000
28511: MUL
28512: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28513: LD_VAR 0 6
28517: PPUSH
28518: CALL_OW 257
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: LD_INT 4
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: IN
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: LD_INT 51
28549: PPUSH
28550: CALL_OW 321
28554: PUSH
28555: LD_INT 2
28557: EQUAL
28558: AND
28559: IFFALSE 28576
// bpoints := bpoints * 1.2 ;
28561: LD_ADDR_VAR 0 10
28565: PUSH
28566: LD_VAR 0 10
28570: PUSH
28571: LD_REAL  1.20000000000000E+0000
28574: MUL
28575: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28576: LD_VAR 0 6
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 5
28588: PUSH
28589: LD_INT 7
28591: PUSH
28592: LD_INT 9
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: IN
28600: PUSH
28601: LD_VAR 0 1
28605: PPUSH
28606: LD_INT 52
28608: PPUSH
28609: CALL_OW 321
28613: PUSH
28614: LD_INT 2
28616: EQUAL
28617: AND
28618: IFFALSE 28635
// bpoints := bpoints * 1.5 ;
28620: LD_ADDR_VAR 0 10
28624: PUSH
28625: LD_VAR 0 10
28629: PUSH
28630: LD_REAL  1.50000000000000E+0000
28633: MUL
28634: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28635: LD_VAR 0 1
28639: PPUSH
28640: LD_INT 66
28642: PPUSH
28643: CALL_OW 321
28647: PUSH
28648: LD_INT 2
28650: EQUAL
28651: IFFALSE 28668
// bpoints := bpoints * 1.1 ;
28653: LD_ADDR_VAR 0 10
28657: PUSH
28658: LD_VAR 0 10
28662: PUSH
28663: LD_REAL  1.10000000000000E+0000
28666: MUL
28667: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28668: LD_ADDR_VAR 0 10
28672: PUSH
28673: LD_VAR 0 10
28677: PUSH
28678: LD_VAR 0 6
28682: PPUSH
28683: LD_INT 1
28685: PPUSH
28686: CALL_OW 259
28690: PUSH
28691: LD_REAL  1.15000000000000E+0000
28694: MUL
28695: MUL
28696: ST_TO_ADDR
// end ; unit_vehicle :
28697: GO 29527
28699: LD_INT 2
28701: DOUBLE
28702: EQUAL
28703: IFTRUE 28707
28705: GO 29515
28707: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28708: LD_VAR 0 6
28712: PPUSH
28713: CALL_OW 264
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: LD_INT 42
28723: PUSH
28724: LD_INT 24
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: IN
28732: IFFALSE 28753
// points := [ 25 , 5 , 3 ] ;
28734: LD_ADDR_VAR 0 9
28738: PUSH
28739: LD_INT 25
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28753: LD_VAR 0 6
28757: PPUSH
28758: CALL_OW 264
28762: PUSH
28763: LD_INT 4
28765: PUSH
28766: LD_INT 43
28768: PUSH
28769: LD_INT 25
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: IN
28777: IFFALSE 28798
// points := [ 40 , 15 , 5 ] ;
28779: LD_ADDR_VAR 0 9
28783: PUSH
28784: LD_INT 40
28786: PUSH
28787: LD_INT 15
28789: PUSH
28790: LD_INT 5
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28798: LD_VAR 0 6
28802: PPUSH
28803: CALL_OW 264
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: LD_INT 23
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: IN
28818: IFFALSE 28839
// points := [ 7 , 25 , 8 ] ;
28820: LD_ADDR_VAR 0 9
28824: PUSH
28825: LD_INT 7
28827: PUSH
28828: LD_INT 25
28830: PUSH
28831: LD_INT 8
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28839: LD_VAR 0 6
28843: PPUSH
28844: CALL_OW 264
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: LD_INT 27
28854: PUSH
28855: LD_INT 44
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: IN
28863: IFFALSE 28884
// points := [ 14 , 50 , 16 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 14
28872: PUSH
28873: LD_INT 50
28875: PUSH
28876: LD_INT 16
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 264
28893: PUSH
28894: LD_INT 6
28896: PUSH
28897: LD_INT 46
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: IN
28904: IFFALSE 28925
// points := [ 32 , 120 , 70 ] ;
28906: LD_ADDR_VAR 0 9
28910: PUSH
28911: LD_INT 32
28913: PUSH
28914: LD_INT 120
28916: PUSH
28917: LD_INT 70
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28925: LD_VAR 0 6
28929: PPUSH
28930: CALL_OW 264
28934: PUSH
28935: LD_INT 7
28937: PUSH
28938: LD_INT 28
28940: PUSH
28941: LD_INT 45
28943: PUSH
28944: LD_EXP 82
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: IN
28955: IFFALSE 28976
// points := [ 35 , 20 , 45 ] ;
28957: LD_ADDR_VAR 0 9
28961: PUSH
28962: LD_INT 35
28964: PUSH
28965: LD_INT 20
28967: PUSH
28968: LD_INT 45
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28976: LD_VAR 0 6
28980: PPUSH
28981: CALL_OW 264
28985: PUSH
28986: LD_INT 47
28988: PUSH
28989: EMPTY
28990: LIST
28991: IN
28992: IFFALSE 29013
// points := [ 67 , 45 , 75 ] ;
28994: LD_ADDR_VAR 0 9
28998: PUSH
28999: LD_INT 67
29001: PUSH
29002: LD_INT 45
29004: PUSH
29005: LD_INT 75
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29013: LD_VAR 0 6
29017: PPUSH
29018: CALL_OW 264
29022: PUSH
29023: LD_INT 26
29025: PUSH
29026: EMPTY
29027: LIST
29028: IN
29029: IFFALSE 29050
// points := [ 120 , 30 , 80 ] ;
29031: LD_ADDR_VAR 0 9
29035: PUSH
29036: LD_INT 120
29038: PUSH
29039: LD_INT 30
29041: PUSH
29042: LD_INT 80
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29050: LD_VAR 0 6
29054: PPUSH
29055: CALL_OW 264
29059: PUSH
29060: LD_INT 22
29062: PUSH
29063: EMPTY
29064: LIST
29065: IN
29066: IFFALSE 29087
// points := [ 40 , 1 , 1 ] ;
29068: LD_ADDR_VAR 0 9
29072: PUSH
29073: LD_INT 40
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29087: LD_VAR 0 6
29091: PPUSH
29092: CALL_OW 264
29096: PUSH
29097: LD_INT 29
29099: PUSH
29100: EMPTY
29101: LIST
29102: IN
29103: IFFALSE 29124
// points := [ 70 , 200 , 400 ] ;
29105: LD_ADDR_VAR 0 9
29109: PUSH
29110: LD_INT 70
29112: PUSH
29113: LD_INT 200
29115: PUSH
29116: LD_INT 400
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29124: LD_VAR 0 6
29128: PPUSH
29129: CALL_OW 264
29133: PUSH
29134: LD_INT 14
29136: PUSH
29137: LD_INT 53
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: IN
29144: IFFALSE 29165
// points := [ 40 , 10 , 20 ] ;
29146: LD_ADDR_VAR 0 9
29150: PUSH
29151: LD_INT 40
29153: PUSH
29154: LD_INT 10
29156: PUSH
29157: LD_INT 20
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29165: LD_VAR 0 6
29169: PPUSH
29170: CALL_OW 264
29174: PUSH
29175: LD_INT 9
29177: PUSH
29178: EMPTY
29179: LIST
29180: IN
29181: IFFALSE 29202
// points := [ 5 , 70 , 20 ] ;
29183: LD_ADDR_VAR 0 9
29187: PUSH
29188: LD_INT 5
29190: PUSH
29191: LD_INT 70
29193: PUSH
29194: LD_INT 20
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29202: LD_VAR 0 6
29206: PPUSH
29207: CALL_OW 264
29211: PUSH
29212: LD_INT 10
29214: PUSH
29215: EMPTY
29216: LIST
29217: IN
29218: IFFALSE 29239
// points := [ 35 , 110 , 70 ] ;
29220: LD_ADDR_VAR 0 9
29224: PUSH
29225: LD_INT 35
29227: PUSH
29228: LD_INT 110
29230: PUSH
29231: LD_INT 70
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29239: LD_VAR 0 6
29243: PPUSH
29244: CALL_OW 265
29248: PUSH
29249: LD_INT 25
29251: EQUAL
29252: IFFALSE 29273
// points := [ 80 , 65 , 100 ] ;
29254: LD_ADDR_VAR 0 9
29258: PUSH
29259: LD_INT 80
29261: PUSH
29262: LD_INT 65
29264: PUSH
29265: LD_INT 100
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29273: LD_VAR 0 6
29277: PPUSH
29278: CALL_OW 263
29282: PUSH
29283: LD_INT 1
29285: EQUAL
29286: IFFALSE 29321
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29288: LD_ADDR_VAR 0 10
29292: PUSH
29293: LD_VAR 0 10
29297: PUSH
29298: LD_VAR 0 6
29302: PPUSH
29303: CALL_OW 311
29307: PPUSH
29308: LD_INT 3
29310: PPUSH
29311: CALL_OW 259
29315: PUSH
29316: LD_INT 4
29318: MUL
29319: MUL
29320: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29321: LD_VAR 0 6
29325: PPUSH
29326: CALL_OW 263
29330: PUSH
29331: LD_INT 2
29333: EQUAL
29334: IFFALSE 29385
// begin j := IsControledBy ( i ) ;
29336: LD_ADDR_VAR 0 7
29340: PUSH
29341: LD_VAR 0 6
29345: PPUSH
29346: CALL_OW 312
29350: ST_TO_ADDR
// if j then
29351: LD_VAR 0 7
29355: IFFALSE 29385
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29357: LD_ADDR_VAR 0 10
29361: PUSH
29362: LD_VAR 0 10
29366: PUSH
29367: LD_VAR 0 7
29371: PPUSH
29372: LD_INT 3
29374: PPUSH
29375: CALL_OW 259
29379: PUSH
29380: LD_INT 3
29382: MUL
29383: MUL
29384: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29385: LD_VAR 0 6
29389: PPUSH
29390: CALL_OW 264
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: LD_INT 6
29400: PUSH
29401: LD_INT 46
29403: PUSH
29404: LD_INT 44
29406: PUSH
29407: LD_INT 47
29409: PUSH
29410: LD_INT 45
29412: PUSH
29413: LD_INT 28
29415: PUSH
29416: LD_INT 7
29418: PUSH
29419: LD_INT 27
29421: PUSH
29422: LD_INT 29
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: IN
29437: PUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: LD_INT 52
29445: PPUSH
29446: CALL_OW 321
29450: PUSH
29451: LD_INT 2
29453: EQUAL
29454: AND
29455: IFFALSE 29472
// bpoints := bpoints * 1.2 ;
29457: LD_ADDR_VAR 0 10
29461: PUSH
29462: LD_VAR 0 10
29466: PUSH
29467: LD_REAL  1.20000000000000E+0000
29470: MUL
29471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29472: LD_VAR 0 6
29476: PPUSH
29477: CALL_OW 264
29481: PUSH
29482: LD_INT 6
29484: PUSH
29485: LD_INT 46
29487: PUSH
29488: LD_INT 47
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: IN
29496: IFFALSE 29513
// bpoints := bpoints * 1.2 ;
29498: LD_ADDR_VAR 0 10
29502: PUSH
29503: LD_VAR 0 10
29507: PUSH
29508: LD_REAL  1.20000000000000E+0000
29511: MUL
29512: ST_TO_ADDR
// end ; unit_building :
29513: GO 29527
29515: LD_INT 3
29517: DOUBLE
29518: EQUAL
29519: IFTRUE 29523
29521: GO 29526
29523: POP
// ; end ;
29524: GO 29527
29526: POP
// for j = 1 to 3 do
29527: LD_ADDR_VAR 0 7
29531: PUSH
29532: DOUBLE
29533: LD_INT 1
29535: DEC
29536: ST_TO_ADDR
29537: LD_INT 3
29539: PUSH
29540: FOR_TO
29541: IFFALSE 29594
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29543: LD_ADDR_VAR 0 5
29547: PUSH
29548: LD_VAR 0 5
29552: PPUSH
29553: LD_VAR 0 7
29557: PPUSH
29558: LD_VAR 0 5
29562: PUSH
29563: LD_VAR 0 7
29567: ARRAY
29568: PUSH
29569: LD_VAR 0 9
29573: PUSH
29574: LD_VAR 0 7
29578: ARRAY
29579: PUSH
29580: LD_VAR 0 10
29584: MUL
29585: PLUS
29586: PPUSH
29587: CALL_OW 1
29591: ST_TO_ADDR
29592: GO 29540
29594: POP
29595: POP
// end ;
29596: GO 28073
29598: POP
29599: POP
// result := Replace ( result , 4 , tmp ) ;
29600: LD_ADDR_VAR 0 5
29604: PUSH
29605: LD_VAR 0 5
29609: PPUSH
29610: LD_INT 4
29612: PPUSH
29613: LD_VAR 0 8
29617: PPUSH
29618: CALL_OW 1
29622: ST_TO_ADDR
// end ;
29623: LD_VAR 0 5
29627: RET
// export function DangerAtRange ( unit , range ) ; begin
29628: LD_INT 0
29630: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29631: LD_ADDR_VAR 0 3
29635: PUSH
29636: LD_VAR 0 1
29640: PPUSH
29641: CALL_OW 255
29645: PPUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 250
29655: PPUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 251
29665: PPUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: CALL 27925 0 4
29675: ST_TO_ADDR
// end ;
29676: LD_VAR 0 3
29680: RET
// export function DangerInArea ( side , area ) ; begin
29681: LD_INT 0
29683: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_VAR 0 2
29693: PPUSH
29694: LD_INT 81
29696: PUSH
29697: LD_VAR 0 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PPUSH
29706: CALL_OW 70
29710: ST_TO_ADDR
// end ;
29711: LD_VAR 0 3
29715: RET
// export function IsExtension ( b ) ; begin
29716: LD_INT 0
29718: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 23
29731: PUSH
29732: LD_INT 20
29734: PUSH
29735: LD_INT 22
29737: PUSH
29738: LD_INT 17
29740: PUSH
29741: LD_INT 24
29743: PUSH
29744: LD_INT 21
29746: PUSH
29747: LD_INT 19
29749: PUSH
29750: LD_INT 16
29752: PUSH
29753: LD_INT 25
29755: PUSH
29756: LD_INT 18
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: IN
29771: ST_TO_ADDR
// end ;
29772: LD_VAR 0 2
29776: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29777: LD_INT 0
29779: PPUSH
29780: PPUSH
29781: PPUSH
// result := [ ] ;
29782: LD_ADDR_VAR 0 4
29786: PUSH
29787: EMPTY
29788: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29789: LD_ADDR_VAR 0 5
29793: PUSH
29794: LD_VAR 0 2
29798: PPUSH
29799: LD_INT 21
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PPUSH
29809: CALL_OW 70
29813: ST_TO_ADDR
// if not tmp then
29814: LD_VAR 0 5
29818: NOT
29819: IFFALSE 29823
// exit ;
29821: GO 29887
// if checkLink then
29823: LD_VAR 0 3
29827: IFFALSE 29877
// begin for i in tmp do
29829: LD_ADDR_VAR 0 6
29833: PUSH
29834: LD_VAR 0 5
29838: PUSH
29839: FOR_IN
29840: IFFALSE 29875
// if GetBase ( i ) <> base then
29842: LD_VAR 0 6
29846: PPUSH
29847: CALL_OW 274
29851: PUSH
29852: LD_VAR 0 1
29856: NONEQUAL
29857: IFFALSE 29873
// ComLinkToBase ( base , i ) ;
29859: LD_VAR 0 1
29863: PPUSH
29864: LD_VAR 0 6
29868: PPUSH
29869: CALL_OW 169
29873: GO 29839
29875: POP
29876: POP
// end ; result := tmp ;
29877: LD_ADDR_VAR 0 4
29881: PUSH
29882: LD_VAR 0 5
29886: ST_TO_ADDR
// end ;
29887: LD_VAR 0 4
29891: RET
// export function ComComplete ( units , b ) ; var i ; begin
29892: LD_INT 0
29894: PPUSH
29895: PPUSH
// if not units then
29896: LD_VAR 0 1
29900: NOT
29901: IFFALSE 29905
// exit ;
29903: GO 29995
// for i in units do
29905: LD_ADDR_VAR 0 4
29909: PUSH
29910: LD_VAR 0 1
29914: PUSH
29915: FOR_IN
29916: IFFALSE 29993
// if BuildingStatus ( b ) = bs_build then
29918: LD_VAR 0 2
29922: PPUSH
29923: CALL_OW 461
29927: PUSH
29928: LD_INT 1
29930: EQUAL
29931: IFFALSE 29991
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29933: LD_VAR 0 4
29937: PPUSH
29938: LD_STRING h
29940: PUSH
29941: LD_VAR 0 2
29945: PPUSH
29946: CALL_OW 250
29950: PUSH
29951: LD_VAR 0 2
29955: PPUSH
29956: CALL_OW 251
29960: PUSH
29961: LD_VAR 0 2
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: PPUSH
29987: CALL_OW 446
29991: GO 29915
29993: POP
29994: POP
// end ;
29995: LD_VAR 0 3
29999: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30008: LD_VAR 0 1
30012: NOT
30013: PUSH
30014: LD_VAR 0 1
30018: PPUSH
30019: CALL_OW 263
30023: PUSH
30024: LD_INT 2
30026: NONEQUAL
30027: OR
30028: IFFALSE 30032
// exit ;
30030: GO 30348
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30032: LD_ADDR_VAR 0 6
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 30
30059: PUSH
30060: LD_INT 36
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 34
30069: PUSH
30070: LD_INT 31
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PPUSH
30086: CALL_OW 69
30090: ST_TO_ADDR
// if not tmp then
30091: LD_VAR 0 6
30095: NOT
30096: IFFALSE 30100
// exit ;
30098: GO 30348
// result := [ ] ;
30100: LD_ADDR_VAR 0 2
30104: PUSH
30105: EMPTY
30106: ST_TO_ADDR
// for i in tmp do
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_VAR 0 6
30116: PUSH
30117: FOR_IN
30118: IFFALSE 30189
// begin t := UnitsInside ( i ) ;
30120: LD_ADDR_VAR 0 4
30124: PUSH
30125: LD_VAR 0 3
30129: PPUSH
30130: CALL_OW 313
30134: ST_TO_ADDR
// if t then
30135: LD_VAR 0 4
30139: IFFALSE 30187
// for j in t do
30141: LD_ADDR_VAR 0 7
30145: PUSH
30146: LD_VAR 0 4
30150: PUSH
30151: FOR_IN
30152: IFFALSE 30185
// result := Replace ( result , result + 1 , j ) ;
30154: LD_ADDR_VAR 0 2
30158: PUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_VAR 0 2
30168: PUSH
30169: LD_INT 1
30171: PLUS
30172: PPUSH
30173: LD_VAR 0 7
30177: PPUSH
30178: CALL_OW 1
30182: ST_TO_ADDR
30183: GO 30151
30185: POP
30186: POP
// end ;
30187: GO 30117
30189: POP
30190: POP
// if not result then
30191: LD_VAR 0 2
30195: NOT
30196: IFFALSE 30200
// exit ;
30198: GO 30348
// mech := result [ 1 ] ;
30200: LD_ADDR_VAR 0 5
30204: PUSH
30205: LD_VAR 0 2
30209: PUSH
30210: LD_INT 1
30212: ARRAY
30213: ST_TO_ADDR
// if result > 1 then
30214: LD_VAR 0 2
30218: PUSH
30219: LD_INT 1
30221: GREATER
30222: IFFALSE 30334
// begin for i = 2 to result do
30224: LD_ADDR_VAR 0 3
30228: PUSH
30229: DOUBLE
30230: LD_INT 2
30232: DEC
30233: ST_TO_ADDR
30234: LD_VAR 0 2
30238: PUSH
30239: FOR_TO
30240: IFFALSE 30332
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30242: LD_ADDR_VAR 0 4
30246: PUSH
30247: LD_VAR 0 2
30251: PUSH
30252: LD_VAR 0 3
30256: ARRAY
30257: PPUSH
30258: LD_INT 3
30260: PPUSH
30261: CALL_OW 259
30265: PUSH
30266: LD_VAR 0 2
30270: PUSH
30271: LD_VAR 0 3
30275: ARRAY
30276: PPUSH
30277: CALL_OW 432
30281: MINUS
30282: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30283: LD_VAR 0 4
30287: PUSH
30288: LD_VAR 0 5
30292: PPUSH
30293: LD_INT 3
30295: PPUSH
30296: CALL_OW 259
30300: PUSH
30301: LD_VAR 0 5
30305: PPUSH
30306: CALL_OW 432
30310: MINUS
30311: GREATEREQUAL
30312: IFFALSE 30330
// mech := result [ i ] ;
30314: LD_ADDR_VAR 0 5
30318: PUSH
30319: LD_VAR 0 2
30323: PUSH
30324: LD_VAR 0 3
30328: ARRAY
30329: ST_TO_ADDR
// end ;
30330: GO 30239
30332: POP
30333: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30334: LD_VAR 0 1
30338: PPUSH
30339: LD_VAR 0 5
30343: PPUSH
30344: CALL_OW 135
// end ;
30348: LD_VAR 0 2
30352: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30353: LD_INT 0
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
// result := [ ] ;
30368: LD_ADDR_VAR 0 7
30372: PUSH
30373: EMPTY
30374: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 266
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: IN
30395: NOT
30396: IFFALSE 30400
// exit ;
30398: GO 32034
// if name then
30400: LD_VAR 0 3
30404: IFFALSE 30420
// SetBName ( base_dep , name ) ;
30406: LD_VAR 0 1
30410: PPUSH
30411: LD_VAR 0 3
30415: PPUSH
30416: CALL_OW 500
// base := GetBase ( base_dep ) ;
30420: LD_ADDR_VAR 0 15
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 274
30434: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30435: LD_ADDR_VAR 0 16
30439: PUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 255
30449: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30450: LD_ADDR_VAR 0 17
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 248
30464: ST_TO_ADDR
// if sources then
30465: LD_VAR 0 5
30469: IFFALSE 30516
// for i = 1 to 3 do
30471: LD_ADDR_VAR 0 8
30475: PUSH
30476: DOUBLE
30477: LD_INT 1
30479: DEC
30480: ST_TO_ADDR
30481: LD_INT 3
30483: PUSH
30484: FOR_TO
30485: IFFALSE 30514
// AddResourceType ( base , i , sources [ i ] ) ;
30487: LD_VAR 0 15
30491: PPUSH
30492: LD_VAR 0 8
30496: PPUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_VAR 0 8
30506: ARRAY
30507: PPUSH
30508: CALL_OW 276
30512: GO 30484
30514: POP
30515: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30516: LD_ADDR_VAR 0 18
30520: PUSH
30521: LD_VAR 0 15
30525: PPUSH
30526: LD_VAR 0 2
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL 29777 0 3
30538: ST_TO_ADDR
// InitHc ;
30539: CALL_OW 19
// InitUc ;
30543: CALL_OW 18
// uc_side := side ;
30547: LD_ADDR_OWVAR 20
30551: PUSH
30552: LD_VAR 0 16
30556: ST_TO_ADDR
// uc_nation := nation ;
30557: LD_ADDR_OWVAR 21
30561: PUSH
30562: LD_VAR 0 17
30566: ST_TO_ADDR
// if buildings then
30567: LD_VAR 0 18
30571: IFFALSE 31893
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30573: LD_ADDR_VAR 0 19
30577: PUSH
30578: LD_VAR 0 18
30582: PPUSH
30583: LD_INT 2
30585: PUSH
30586: LD_INT 30
30588: PUSH
30589: LD_INT 29
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 30
30598: PUSH
30599: LD_INT 30
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 72
30615: ST_TO_ADDR
// if tmp then
30616: LD_VAR 0 19
30620: IFFALSE 30668
// for i in tmp do
30622: LD_ADDR_VAR 0 8
30626: PUSH
30627: LD_VAR 0 19
30631: PUSH
30632: FOR_IN
30633: IFFALSE 30666
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30635: LD_VAR 0 8
30639: PPUSH
30640: CALL_OW 250
30644: PPUSH
30645: LD_VAR 0 8
30649: PPUSH
30650: CALL_OW 251
30654: PPUSH
30655: LD_VAR 0 16
30659: PPUSH
30660: CALL_OW 441
30664: GO 30632
30666: POP
30667: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30668: LD_VAR 0 18
30672: PPUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 30
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 30
30688: PUSH
30689: LD_INT 33
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: PPUSH
30701: CALL_OW 72
30705: IFFALSE 30793
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30707: LD_ADDR_VAR 0 8
30711: PUSH
30712: LD_VAR 0 18
30716: PPUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 30
30722: PUSH
30723: LD_INT 32
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 30
30732: PUSH
30733: LD_INT 33
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 72
30749: PUSH
30750: FOR_IN
30751: IFFALSE 30791
// begin if not GetBWeapon ( i ) then
30753: LD_VAR 0 8
30757: PPUSH
30758: CALL_OW 269
30762: NOT
30763: IFFALSE 30789
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30765: LD_VAR 0 8
30769: PPUSH
30770: LD_VAR 0 8
30774: PPUSH
30775: LD_VAR 0 2
30779: PPUSH
30780: CALL 32039 0 2
30784: PPUSH
30785: CALL_OW 431
// end ;
30789: GO 30750
30791: POP
30792: POP
// end ; for i = 1 to personel do
30793: LD_ADDR_VAR 0 8
30797: PUSH
30798: DOUBLE
30799: LD_INT 1
30801: DEC
30802: ST_TO_ADDR
30803: LD_VAR 0 6
30807: PUSH
30808: FOR_TO
30809: IFFALSE 31873
// begin if i > 4 then
30811: LD_VAR 0 8
30815: PUSH
30816: LD_INT 4
30818: GREATER
30819: IFFALSE 30823
// break ;
30821: GO 31873
// case i of 1 :
30823: LD_VAR 0 8
30827: PUSH
30828: LD_INT 1
30830: DOUBLE
30831: EQUAL
30832: IFTRUE 30836
30834: GO 30916
30836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30837: LD_ADDR_VAR 0 12
30841: PUSH
30842: LD_VAR 0 18
30846: PPUSH
30847: LD_INT 22
30849: PUSH
30850: LD_VAR 0 16
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 58
30861: PUSH
30862: EMPTY
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 30
30870: PUSH
30871: LD_INT 32
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 30
30880: PUSH
30881: LD_INT 4
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 30
30890: PUSH
30891: LD_INT 5
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: PPUSH
30909: CALL_OW 72
30913: ST_TO_ADDR
30914: GO 31138
30916: LD_INT 2
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30986
30924: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30925: LD_ADDR_VAR 0 12
30929: PUSH
30930: LD_VAR 0 18
30934: PPUSH
30935: LD_INT 22
30937: PUSH
30938: LD_VAR 0 16
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PPUSH
30979: CALL_OW 72
30983: ST_TO_ADDR
30984: GO 31138
30986: LD_INT 3
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31056
30994: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30995: LD_ADDR_VAR 0 12
30999: PUSH
31000: LD_VAR 0 18
31004: PPUSH
31005: LD_INT 22
31007: PUSH
31008: LD_VAR 0 16
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 30
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 30
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PPUSH
31049: CALL_OW 72
31053: ST_TO_ADDR
31054: GO 31138
31056: LD_INT 4
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31137
31064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31065: LD_ADDR_VAR 0 12
31069: PUSH
31070: LD_VAR 0 18
31074: PPUSH
31075: LD_INT 22
31077: PUSH
31078: LD_VAR 0 16
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 30
31092: PUSH
31093: LD_INT 6
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 30
31102: PUSH
31103: LD_INT 7
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 30
31112: PUSH
31113: LD_INT 8
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PPUSH
31130: CALL_OW 72
31134: ST_TO_ADDR
31135: GO 31138
31137: POP
// if i = 1 then
31138: LD_VAR 0 8
31142: PUSH
31143: LD_INT 1
31145: EQUAL
31146: IFFALSE 31257
// begin tmp := [ ] ;
31148: LD_ADDR_VAR 0 19
31152: PUSH
31153: EMPTY
31154: ST_TO_ADDR
// for j in f do
31155: LD_ADDR_VAR 0 9
31159: PUSH
31160: LD_VAR 0 12
31164: PUSH
31165: FOR_IN
31166: IFFALSE 31239
// if GetBType ( j ) = b_bunker then
31168: LD_VAR 0 9
31172: PPUSH
31173: CALL_OW 266
31177: PUSH
31178: LD_INT 32
31180: EQUAL
31181: IFFALSE 31208
// tmp := Insert ( tmp , 1 , j ) else
31183: LD_ADDR_VAR 0 19
31187: PUSH
31188: LD_VAR 0 19
31192: PPUSH
31193: LD_INT 1
31195: PPUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: CALL_OW 2
31205: ST_TO_ADDR
31206: GO 31237
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31208: LD_ADDR_VAR 0 19
31212: PUSH
31213: LD_VAR 0 19
31217: PPUSH
31218: LD_VAR 0 19
31222: PUSH
31223: LD_INT 1
31225: PLUS
31226: PPUSH
31227: LD_VAR 0 9
31231: PPUSH
31232: CALL_OW 2
31236: ST_TO_ADDR
31237: GO 31165
31239: POP
31240: POP
// if tmp then
31241: LD_VAR 0 19
31245: IFFALSE 31257
// f := tmp ;
31247: LD_ADDR_VAR 0 12
31251: PUSH
31252: LD_VAR 0 19
31256: ST_TO_ADDR
// end ; x := personel [ i ] ;
31257: LD_ADDR_VAR 0 13
31261: PUSH
31262: LD_VAR 0 6
31266: PUSH
31267: LD_VAR 0 8
31271: ARRAY
31272: ST_TO_ADDR
// if x = - 1 then
31273: LD_VAR 0 13
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: EQUAL
31282: IFFALSE 31491
// begin for j in f do
31284: LD_ADDR_VAR 0 9
31288: PUSH
31289: LD_VAR 0 12
31293: PUSH
31294: FOR_IN
31295: IFFALSE 31487
// repeat InitHc ;
31297: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31301: LD_VAR 0 9
31305: PPUSH
31306: CALL_OW 266
31310: PUSH
31311: LD_INT 5
31313: EQUAL
31314: IFFALSE 31384
// begin if UnitsInside ( j ) < 3 then
31316: LD_VAR 0 9
31320: PPUSH
31321: CALL_OW 313
31325: PUSH
31326: LD_INT 3
31328: LESS
31329: IFFALSE 31365
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31331: LD_INT 0
31333: PPUSH
31334: LD_INT 5
31336: PUSH
31337: LD_INT 8
31339: PUSH
31340: LD_INT 9
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: PUSH
31348: LD_VAR 0 17
31352: ARRAY
31353: PPUSH
31354: LD_VAR 0 4
31358: PPUSH
31359: CALL_OW 380
31363: GO 31382
// PrepareHuman ( false , i , skill ) ;
31365: LD_INT 0
31367: PPUSH
31368: LD_VAR 0 8
31372: PPUSH
31373: LD_VAR 0 4
31377: PPUSH
31378: CALL_OW 380
// end else
31382: GO 31401
// PrepareHuman ( false , i , skill ) ;
31384: LD_INT 0
31386: PPUSH
31387: LD_VAR 0 8
31391: PPUSH
31392: LD_VAR 0 4
31396: PPUSH
31397: CALL_OW 380
// un := CreateHuman ;
31401: LD_ADDR_VAR 0 14
31405: PUSH
31406: CALL_OW 44
31410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31411: LD_ADDR_VAR 0 7
31415: PUSH
31416: LD_VAR 0 7
31420: PPUSH
31421: LD_INT 1
31423: PPUSH
31424: LD_VAR 0 14
31428: PPUSH
31429: CALL_OW 2
31433: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31434: LD_VAR 0 14
31438: PPUSH
31439: LD_VAR 0 9
31443: PPUSH
31444: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31448: LD_VAR 0 9
31452: PPUSH
31453: CALL_OW 313
31457: PUSH
31458: LD_INT 6
31460: EQUAL
31461: PUSH
31462: LD_VAR 0 9
31466: PPUSH
31467: CALL_OW 266
31471: PUSH
31472: LD_INT 32
31474: PUSH
31475: LD_INT 31
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: IN
31482: OR
31483: IFFALSE 31297
31485: GO 31294
31487: POP
31488: POP
// end else
31489: GO 31871
// for j = 1 to x do
31491: LD_ADDR_VAR 0 9
31495: PUSH
31496: DOUBLE
31497: LD_INT 1
31499: DEC
31500: ST_TO_ADDR
31501: LD_VAR 0 13
31505: PUSH
31506: FOR_TO
31507: IFFALSE 31869
// begin InitHc ;
31509: CALL_OW 19
// if not f then
31513: LD_VAR 0 12
31517: NOT
31518: IFFALSE 31607
// begin PrepareHuman ( false , i , skill ) ;
31520: LD_INT 0
31522: PPUSH
31523: LD_VAR 0 8
31527: PPUSH
31528: LD_VAR 0 4
31532: PPUSH
31533: CALL_OW 380
// un := CreateHuman ;
31537: LD_ADDR_VAR 0 14
31541: PUSH
31542: CALL_OW 44
31546: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31547: LD_ADDR_VAR 0 7
31551: PUSH
31552: LD_VAR 0 7
31556: PPUSH
31557: LD_INT 1
31559: PPUSH
31560: LD_VAR 0 14
31564: PPUSH
31565: CALL_OW 2
31569: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31570: LD_VAR 0 14
31574: PPUSH
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 250
31584: PPUSH
31585: LD_VAR 0 1
31589: PPUSH
31590: CALL_OW 251
31594: PPUSH
31595: LD_INT 10
31597: PPUSH
31598: LD_INT 0
31600: PPUSH
31601: CALL_OW 50
// continue ;
31605: GO 31506
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31607: LD_VAR 0 12
31611: PUSH
31612: LD_INT 1
31614: ARRAY
31615: PPUSH
31616: CALL_OW 313
31620: PUSH
31621: LD_VAR 0 12
31625: PUSH
31626: LD_INT 1
31628: ARRAY
31629: PPUSH
31630: CALL_OW 266
31634: PUSH
31635: LD_INT 32
31637: PUSH
31638: LD_INT 31
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: IN
31645: AND
31646: PUSH
31647: LD_VAR 0 12
31651: PUSH
31652: LD_INT 1
31654: ARRAY
31655: PPUSH
31656: CALL_OW 313
31660: PUSH
31661: LD_INT 6
31663: EQUAL
31664: OR
31665: IFFALSE 31685
// f := Delete ( f , 1 ) ;
31667: LD_ADDR_VAR 0 12
31671: PUSH
31672: LD_VAR 0 12
31676: PPUSH
31677: LD_INT 1
31679: PPUSH
31680: CALL_OW 3
31684: ST_TO_ADDR
// if not f then
31685: LD_VAR 0 12
31689: NOT
31690: IFFALSE 31708
// begin x := x + 2 ;
31692: LD_ADDR_VAR 0 13
31696: PUSH
31697: LD_VAR 0 13
31701: PUSH
31702: LD_INT 2
31704: PLUS
31705: ST_TO_ADDR
// continue ;
31706: GO 31506
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31708: LD_VAR 0 12
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 266
31721: PUSH
31722: LD_INT 5
31724: EQUAL
31725: IFFALSE 31799
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31727: LD_VAR 0 12
31731: PUSH
31732: LD_INT 1
31734: ARRAY
31735: PPUSH
31736: CALL_OW 313
31740: PUSH
31741: LD_INT 3
31743: LESS
31744: IFFALSE 31780
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31746: LD_INT 0
31748: PPUSH
31749: LD_INT 5
31751: PUSH
31752: LD_INT 8
31754: PUSH
31755: LD_INT 9
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: LD_VAR 0 17
31767: ARRAY
31768: PPUSH
31769: LD_VAR 0 4
31773: PPUSH
31774: CALL_OW 380
31778: GO 31797
// PrepareHuman ( false , i , skill ) ;
31780: LD_INT 0
31782: PPUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 4
31792: PPUSH
31793: CALL_OW 380
// end else
31797: GO 31816
// PrepareHuman ( false , i , skill ) ;
31799: LD_INT 0
31801: PPUSH
31802: LD_VAR 0 8
31806: PPUSH
31807: LD_VAR 0 4
31811: PPUSH
31812: CALL_OW 380
// un := CreateHuman ;
31816: LD_ADDR_VAR 0 14
31820: PUSH
31821: CALL_OW 44
31825: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31826: LD_ADDR_VAR 0 7
31830: PUSH
31831: LD_VAR 0 7
31835: PPUSH
31836: LD_INT 1
31838: PPUSH
31839: LD_VAR 0 14
31843: PPUSH
31844: CALL_OW 2
31848: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31849: LD_VAR 0 14
31853: PPUSH
31854: LD_VAR 0 12
31858: PUSH
31859: LD_INT 1
31861: ARRAY
31862: PPUSH
31863: CALL_OW 52
// end ;
31867: GO 31506
31869: POP
31870: POP
// end ;
31871: GO 30808
31873: POP
31874: POP
// result := result ^ buildings ;
31875: LD_ADDR_VAR 0 7
31879: PUSH
31880: LD_VAR 0 7
31884: PUSH
31885: LD_VAR 0 18
31889: ADD
31890: ST_TO_ADDR
// end else
31891: GO 32034
// begin for i = 1 to personel do
31893: LD_ADDR_VAR 0 8
31897: PUSH
31898: DOUBLE
31899: LD_INT 1
31901: DEC
31902: ST_TO_ADDR
31903: LD_VAR 0 6
31907: PUSH
31908: FOR_TO
31909: IFFALSE 32032
// begin if i > 4 then
31911: LD_VAR 0 8
31915: PUSH
31916: LD_INT 4
31918: GREATER
31919: IFFALSE 31923
// break ;
31921: GO 32032
// x := personel [ i ] ;
31923: LD_ADDR_VAR 0 13
31927: PUSH
31928: LD_VAR 0 6
31932: PUSH
31933: LD_VAR 0 8
31937: ARRAY
31938: ST_TO_ADDR
// if x = - 1 then
31939: LD_VAR 0 13
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: EQUAL
31948: IFFALSE 31952
// continue ;
31950: GO 31908
// PrepareHuman ( false , i , skill ) ;
31952: LD_INT 0
31954: PPUSH
31955: LD_VAR 0 8
31959: PPUSH
31960: LD_VAR 0 4
31964: PPUSH
31965: CALL_OW 380
// un := CreateHuman ;
31969: LD_ADDR_VAR 0 14
31973: PUSH
31974: CALL_OW 44
31978: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31979: LD_VAR 0 14
31983: PPUSH
31984: LD_VAR 0 1
31988: PPUSH
31989: CALL_OW 250
31993: PPUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL_OW 251
32003: PPUSH
32004: LD_INT 10
32006: PPUSH
32007: LD_INT 0
32009: PPUSH
32010: CALL_OW 50
// result := result ^ un ;
32014: LD_ADDR_VAR 0 7
32018: PUSH
32019: LD_VAR 0 7
32023: PUSH
32024: LD_VAR 0 14
32028: ADD
32029: ST_TO_ADDR
// end ;
32030: GO 31908
32032: POP
32033: POP
// end ; end ;
32034: LD_VAR 0 7
32038: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
// result := false ;
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32065: LD_VAR 0 1
32069: NOT
32070: PUSH
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 266
32080: PUSH
32081: LD_INT 32
32083: PUSH
32084: LD_INT 33
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: IN
32091: NOT
32092: OR
32093: IFFALSE 32097
// exit ;
32095: GO 33206
// nat := GetNation ( tower ) ;
32097: LD_ADDR_VAR 0 12
32101: PUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 248
32111: ST_TO_ADDR
// side := GetSide ( tower ) ;
32112: LD_ADDR_VAR 0 16
32116: PUSH
32117: LD_VAR 0 1
32121: PPUSH
32122: CALL_OW 255
32126: ST_TO_ADDR
// x := GetX ( tower ) ;
32127: LD_ADDR_VAR 0 10
32131: PUSH
32132: LD_VAR 0 1
32136: PPUSH
32137: CALL_OW 250
32141: ST_TO_ADDR
// y := GetY ( tower ) ;
32142: LD_ADDR_VAR 0 11
32146: PUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: CALL_OW 251
32156: ST_TO_ADDR
// if not x or not y then
32157: LD_VAR 0 10
32161: NOT
32162: PUSH
32163: LD_VAR 0 11
32167: NOT
32168: OR
32169: IFFALSE 32173
// exit ;
32171: GO 33206
// weapon := 0 ;
32173: LD_ADDR_VAR 0 18
32177: PUSH
32178: LD_INT 0
32180: ST_TO_ADDR
// fac_list := [ ] ;
32181: LD_ADDR_VAR 0 17
32185: PUSH
32186: EMPTY
32187: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32188: LD_ADDR_VAR 0 6
32192: PUSH
32193: LD_VAR 0 1
32197: PPUSH
32198: CALL_OW 274
32202: PPUSH
32203: LD_VAR 0 2
32207: PPUSH
32208: LD_INT 0
32210: PPUSH
32211: CALL 29777 0 3
32215: PPUSH
32216: LD_INT 30
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PPUSH
32226: CALL_OW 72
32230: ST_TO_ADDR
// if not factories then
32231: LD_VAR 0 6
32235: NOT
32236: IFFALSE 32240
// exit ;
32238: GO 33206
// for i in factories do
32240: LD_ADDR_VAR 0 8
32244: PUSH
32245: LD_VAR 0 6
32249: PUSH
32250: FOR_IN
32251: IFFALSE 32276
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32253: LD_ADDR_VAR 0 17
32257: PUSH
32258: LD_VAR 0 17
32262: PUSH
32263: LD_VAR 0 8
32267: PPUSH
32268: CALL_OW 478
32272: UNION
32273: ST_TO_ADDR
32274: GO 32250
32276: POP
32277: POP
// if not fac_list then
32278: LD_VAR 0 17
32282: NOT
32283: IFFALSE 32287
// exit ;
32285: GO 33206
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32287: LD_ADDR_VAR 0 5
32291: PUSH
32292: LD_INT 4
32294: PUSH
32295: LD_INT 5
32297: PUSH
32298: LD_INT 9
32300: PUSH
32301: LD_INT 10
32303: PUSH
32304: LD_INT 6
32306: PUSH
32307: LD_INT 7
32309: PUSH
32310: LD_INT 11
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 27
32324: PUSH
32325: LD_INT 28
32327: PUSH
32328: LD_INT 26
32330: PUSH
32331: LD_INT 30
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 43
32342: PUSH
32343: LD_INT 44
32345: PUSH
32346: LD_INT 46
32348: PUSH
32349: LD_INT 45
32351: PUSH
32352: LD_INT 47
32354: PUSH
32355: LD_INT 49
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: PUSH
32371: LD_VAR 0 12
32375: ARRAY
32376: ST_TO_ADDR
// list := list isect fac_list ;
32377: LD_ADDR_VAR 0 5
32381: PUSH
32382: LD_VAR 0 5
32386: PUSH
32387: LD_VAR 0 17
32391: ISECT
32392: ST_TO_ADDR
// if not list then
32393: LD_VAR 0 5
32397: NOT
32398: IFFALSE 32402
// exit ;
32400: GO 33206
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32402: LD_VAR 0 12
32406: PUSH
32407: LD_INT 3
32409: EQUAL
32410: PUSH
32411: LD_INT 49
32413: PUSH
32414: LD_VAR 0 5
32418: IN
32419: AND
32420: PUSH
32421: LD_INT 31
32423: PPUSH
32424: LD_VAR 0 16
32428: PPUSH
32429: CALL_OW 321
32433: PUSH
32434: LD_INT 2
32436: EQUAL
32437: AND
32438: IFFALSE 32498
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32440: LD_INT 22
32442: PUSH
32443: LD_VAR 0 16
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 35
32454: PUSH
32455: LD_INT 49
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 91
32464: PUSH
32465: LD_VAR 0 1
32469: PUSH
32470: LD_INT 10
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: PPUSH
32483: CALL_OW 69
32487: NOT
32488: IFFALSE 32498
// weapon := ru_time_lapser ;
32490: LD_ADDR_VAR 0 18
32494: PUSH
32495: LD_INT 49
32497: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32498: LD_VAR 0 12
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: IN
32513: PUSH
32514: LD_INT 11
32516: PUSH
32517: LD_VAR 0 5
32521: IN
32522: PUSH
32523: LD_INT 30
32525: PUSH
32526: LD_VAR 0 5
32530: IN
32531: OR
32532: AND
32533: PUSH
32534: LD_INT 6
32536: PPUSH
32537: LD_VAR 0 16
32541: PPUSH
32542: CALL_OW 321
32546: PUSH
32547: LD_INT 2
32549: EQUAL
32550: AND
32551: IFFALSE 32716
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32553: LD_INT 22
32555: PUSH
32556: LD_VAR 0 16
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 35
32570: PUSH
32571: LD_INT 11
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 35
32580: PUSH
32581: LD_INT 30
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 91
32595: PUSH
32596: LD_VAR 0 1
32600: PUSH
32601: LD_INT 18
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: PPUSH
32614: CALL_OW 69
32618: NOT
32619: PUSH
32620: LD_INT 22
32622: PUSH
32623: LD_VAR 0 16
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 30
32637: PUSH
32638: LD_INT 32
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 30
32647: PUSH
32648: LD_INT 33
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 91
32662: PUSH
32663: LD_VAR 0 1
32667: PUSH
32668: LD_INT 12
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: PPUSH
32684: CALL_OW 69
32688: PUSH
32689: LD_INT 2
32691: GREATER
32692: AND
32693: IFFALSE 32716
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32695: LD_ADDR_VAR 0 18
32699: PUSH
32700: LD_INT 11
32702: PUSH
32703: LD_INT 30
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_VAR 0 12
32714: ARRAY
32715: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32716: LD_VAR 0 18
32720: NOT
32721: PUSH
32722: LD_INT 40
32724: PPUSH
32725: LD_VAR 0 16
32729: PPUSH
32730: CALL_OW 321
32734: PUSH
32735: LD_INT 2
32737: EQUAL
32738: AND
32739: PUSH
32740: LD_INT 7
32742: PUSH
32743: LD_VAR 0 5
32747: IN
32748: PUSH
32749: LD_INT 28
32751: PUSH
32752: LD_VAR 0 5
32756: IN
32757: OR
32758: PUSH
32759: LD_INT 45
32761: PUSH
32762: LD_VAR 0 5
32766: IN
32767: OR
32768: AND
32769: IFFALSE 33023
// begin hex := GetHexInfo ( x , y ) ;
32771: LD_ADDR_VAR 0 4
32775: PUSH
32776: LD_VAR 0 10
32780: PPUSH
32781: LD_VAR 0 11
32785: PPUSH
32786: CALL_OW 546
32790: ST_TO_ADDR
// if hex [ 1 ] then
32791: LD_VAR 0 4
32795: PUSH
32796: LD_INT 1
32798: ARRAY
32799: IFFALSE 32803
// exit ;
32801: GO 33206
// height := hex [ 2 ] ;
32803: LD_ADDR_VAR 0 15
32807: PUSH
32808: LD_VAR 0 4
32812: PUSH
32813: LD_INT 2
32815: ARRAY
32816: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32817: LD_ADDR_VAR 0 14
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: LD_INT 5
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
// for i in tmp do
32840: LD_ADDR_VAR 0 8
32844: PUSH
32845: LD_VAR 0 14
32849: PUSH
32850: FOR_IN
32851: IFFALSE 33021
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 10
32862: PPUSH
32863: LD_VAR 0 8
32867: PPUSH
32868: LD_INT 5
32870: PPUSH
32871: CALL_OW 272
32875: PUSH
32876: LD_VAR 0 11
32880: PPUSH
32881: LD_VAR 0 8
32885: PPUSH
32886: LD_INT 5
32888: PPUSH
32889: CALL_OW 273
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32898: LD_VAR 0 9
32902: PUSH
32903: LD_INT 1
32905: ARRAY
32906: PPUSH
32907: LD_VAR 0 9
32911: PUSH
32912: LD_INT 2
32914: ARRAY
32915: PPUSH
32916: CALL_OW 488
32920: IFFALSE 33019
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_VAR 0 9
32931: PUSH
32932: LD_INT 1
32934: ARRAY
32935: PPUSH
32936: LD_VAR 0 9
32940: PUSH
32941: LD_INT 2
32943: ARRAY
32944: PPUSH
32945: CALL_OW 546
32949: ST_TO_ADDR
// if hex [ 1 ] then
32950: LD_VAR 0 4
32954: PUSH
32955: LD_INT 1
32957: ARRAY
32958: IFFALSE 32962
// continue ;
32960: GO 32850
// h := hex [ 2 ] ;
32962: LD_ADDR_VAR 0 13
32966: PUSH
32967: LD_VAR 0 4
32971: PUSH
32972: LD_INT 2
32974: ARRAY
32975: ST_TO_ADDR
// if h + 7 < height then
32976: LD_VAR 0 13
32980: PUSH
32981: LD_INT 7
32983: PLUS
32984: PUSH
32985: LD_VAR 0 15
32989: LESS
32990: IFFALSE 33019
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32992: LD_ADDR_VAR 0 18
32996: PUSH
32997: LD_INT 7
32999: PUSH
33000: LD_INT 28
33002: PUSH
33003: LD_INT 45
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: PUSH
33011: LD_VAR 0 12
33015: ARRAY
33016: ST_TO_ADDR
// break ;
33017: GO 33021
// end ; end ; end ;
33019: GO 32850
33021: POP
33022: POP
// end ; if not weapon then
33023: LD_VAR 0 18
33027: NOT
33028: IFFALSE 33088
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33030: LD_ADDR_VAR 0 5
33034: PUSH
33035: LD_VAR 0 5
33039: PUSH
33040: LD_INT 11
33042: PUSH
33043: LD_INT 30
33045: PUSH
33046: LD_INT 49
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: DIFF
33054: ST_TO_ADDR
// if not list then
33055: LD_VAR 0 5
33059: NOT
33060: IFFALSE 33064
// exit ;
33062: GO 33206
// weapon := list [ rand ( 1 , list ) ] ;
33064: LD_ADDR_VAR 0 18
33068: PUSH
33069: LD_VAR 0 5
33073: PUSH
33074: LD_INT 1
33076: PPUSH
33077: LD_VAR 0 5
33081: PPUSH
33082: CALL_OW 12
33086: ARRAY
33087: ST_TO_ADDR
// end ; if weapon then
33088: LD_VAR 0 18
33092: IFFALSE 33206
// begin tmp := CostOfWeapon ( weapon ) ;
33094: LD_ADDR_VAR 0 14
33098: PUSH
33099: LD_VAR 0 18
33103: PPUSH
33104: CALL_OW 451
33108: ST_TO_ADDR
// j := GetBase ( tower ) ;
33109: LD_ADDR_VAR 0 9
33113: PUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: CALL_OW 274
33123: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33124: LD_VAR 0 9
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 275
33136: PUSH
33137: LD_VAR 0 14
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: GREATEREQUAL
33146: PUSH
33147: LD_VAR 0 9
33151: PPUSH
33152: LD_INT 2
33154: PPUSH
33155: CALL_OW 275
33159: PUSH
33160: LD_VAR 0 14
33164: PUSH
33165: LD_INT 2
33167: ARRAY
33168: GREATEREQUAL
33169: AND
33170: PUSH
33171: LD_VAR 0 9
33175: PPUSH
33176: LD_INT 3
33178: PPUSH
33179: CALL_OW 275
33183: PUSH
33184: LD_VAR 0 14
33188: PUSH
33189: LD_INT 3
33191: ARRAY
33192: GREATEREQUAL
33193: AND
33194: IFFALSE 33206
// result := weapon ;
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_VAR 0 18
33205: ST_TO_ADDR
// end ; end ;
33206: LD_VAR 0 3
33210: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
// result := true ;
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_INT 1
33222: ST_TO_ADDR
// if array1 = array2 then
33223: LD_VAR 0 1
33227: PUSH
33228: LD_VAR 0 2
33232: EQUAL
33233: IFFALSE 33293
// begin for i = 1 to array1 do
33235: LD_ADDR_VAR 0 4
33239: PUSH
33240: DOUBLE
33241: LD_INT 1
33243: DEC
33244: ST_TO_ADDR
33245: LD_VAR 0 1
33249: PUSH
33250: FOR_TO
33251: IFFALSE 33289
// if array1 [ i ] <> array2 [ i ] then
33253: LD_VAR 0 1
33257: PUSH
33258: LD_VAR 0 4
33262: ARRAY
33263: PUSH
33264: LD_VAR 0 2
33268: PUSH
33269: LD_VAR 0 4
33273: ARRAY
33274: NONEQUAL
33275: IFFALSE 33287
// begin result := false ;
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 0
33284: ST_TO_ADDR
// break ;
33285: GO 33289
// end ;
33287: GO 33250
33289: POP
33290: POP
// end else
33291: GO 33301
// result := false ;
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_INT 0
33300: ST_TO_ADDR
// end ;
33301: LD_VAR 0 3
33305: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33306: LD_INT 0
33308: PPUSH
33309: PPUSH
// if not array1 or not array2 then
33310: LD_VAR 0 1
33314: NOT
33315: PUSH
33316: LD_VAR 0 2
33320: NOT
33321: OR
33322: IFFALSE 33326
// exit ;
33324: GO 33390
// result := true ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 1
33333: ST_TO_ADDR
// for i = 1 to array1 do
33334: LD_ADDR_VAR 0 4
33338: PUSH
33339: DOUBLE
33340: LD_INT 1
33342: DEC
33343: ST_TO_ADDR
33344: LD_VAR 0 1
33348: PUSH
33349: FOR_TO
33350: IFFALSE 33388
// if array1 [ i ] <> array2 [ i ] then
33352: LD_VAR 0 1
33356: PUSH
33357: LD_VAR 0 4
33361: ARRAY
33362: PUSH
33363: LD_VAR 0 2
33367: PUSH
33368: LD_VAR 0 4
33372: ARRAY
33373: NONEQUAL
33374: IFFALSE 33386
// begin result := false ;
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: LD_INT 0
33383: ST_TO_ADDR
// break ;
33384: GO 33388
// end ;
33386: GO 33349
33388: POP
33389: POP
// end ;
33390: LD_VAR 0 3
33394: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33395: LD_INT 0
33397: PPUSH
33398: PPUSH
33399: PPUSH
// pom := GetBase ( fac ) ;
33400: LD_ADDR_VAR 0 5
33404: PUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 274
33414: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33415: LD_ADDR_VAR 0 4
33419: PUSH
33420: LD_VAR 0 2
33424: PUSH
33425: LD_INT 1
33427: ARRAY
33428: PPUSH
33429: LD_VAR 0 2
33433: PUSH
33434: LD_INT 2
33436: ARRAY
33437: PPUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_INT 3
33445: ARRAY
33446: PPUSH
33447: LD_VAR 0 2
33451: PUSH
33452: LD_INT 4
33454: ARRAY
33455: PPUSH
33456: CALL_OW 449
33460: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_VAR 0 5
33470: PPUSH
33471: LD_INT 1
33473: PPUSH
33474: CALL_OW 275
33478: PUSH
33479: LD_VAR 0 4
33483: PUSH
33484: LD_INT 1
33486: ARRAY
33487: GREATEREQUAL
33488: PUSH
33489: LD_VAR 0 5
33493: PPUSH
33494: LD_INT 2
33496: PPUSH
33497: CALL_OW 275
33501: PUSH
33502: LD_VAR 0 4
33506: PUSH
33507: LD_INT 2
33509: ARRAY
33510: GREATEREQUAL
33511: AND
33512: PUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: LD_INT 3
33520: PPUSH
33521: CALL_OW 275
33525: PUSH
33526: LD_VAR 0 4
33530: PUSH
33531: LD_INT 3
33533: ARRAY
33534: GREATEREQUAL
33535: AND
33536: ST_TO_ADDR
// end ;
33537: LD_VAR 0 3
33541: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
33546: PPUSH
33547: PPUSH
// pom := GetBase ( building ) ;
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_VAR 0 1
33557: PPUSH
33558: CALL_OW 274
33562: ST_TO_ADDR
// if not pom then
33563: LD_VAR 0 3
33567: NOT
33568: IFFALSE 33572
// exit ;
33570: GO 33742
// btype := GetBType ( building ) ;
33572: LD_ADDR_VAR 0 5
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 266
33586: ST_TO_ADDR
// if btype = b_armoury then
33587: LD_VAR 0 5
33591: PUSH
33592: LD_INT 4
33594: EQUAL
33595: IFFALSE 33605
// btype := b_barracks ;
33597: LD_ADDR_VAR 0 5
33601: PUSH
33602: LD_INT 5
33604: ST_TO_ADDR
// if btype = b_depot then
33605: LD_VAR 0 5
33609: PUSH
33610: LD_INT 0
33612: EQUAL
33613: IFFALSE 33623
// btype := b_warehouse ;
33615: LD_ADDR_VAR 0 5
33619: PUSH
33620: LD_INT 1
33622: ST_TO_ADDR
// if btype = b_workshop then
33623: LD_VAR 0 5
33627: PUSH
33628: LD_INT 2
33630: EQUAL
33631: IFFALSE 33641
// btype := b_factory ;
33633: LD_ADDR_VAR 0 5
33637: PUSH
33638: LD_INT 3
33640: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: LD_VAR 0 5
33650: PPUSH
33651: LD_VAR 0 1
33655: PPUSH
33656: CALL_OW 248
33660: PPUSH
33661: CALL_OW 450
33665: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33666: LD_ADDR_VAR 0 2
33670: PUSH
33671: LD_VAR 0 3
33675: PPUSH
33676: LD_INT 1
33678: PPUSH
33679: CALL_OW 275
33683: PUSH
33684: LD_VAR 0 4
33688: PUSH
33689: LD_INT 1
33691: ARRAY
33692: GREATEREQUAL
33693: PUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_INT 2
33701: PPUSH
33702: CALL_OW 275
33706: PUSH
33707: LD_VAR 0 4
33711: PUSH
33712: LD_INT 2
33714: ARRAY
33715: GREATEREQUAL
33716: AND
33717: PUSH
33718: LD_VAR 0 3
33722: PPUSH
33723: LD_INT 3
33725: PPUSH
33726: CALL_OW 275
33730: PUSH
33731: LD_VAR 0 4
33735: PUSH
33736: LD_INT 3
33738: ARRAY
33739: GREATEREQUAL
33740: AND
33741: ST_TO_ADDR
// end ;
33742: LD_VAR 0 2
33746: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33747: LD_INT 0
33749: PPUSH
33750: PPUSH
33751: PPUSH
// pom := GetBase ( building ) ;
33752: LD_ADDR_VAR 0 4
33756: PUSH
33757: LD_VAR 0 1
33761: PPUSH
33762: CALL_OW 274
33766: ST_TO_ADDR
// if not pom then
33767: LD_VAR 0 4
33771: NOT
33772: IFFALSE 33776
// exit ;
33774: GO 33877
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33776: LD_ADDR_VAR 0 5
33780: PUSH
33781: LD_VAR 0 2
33785: PPUSH
33786: LD_VAR 0 1
33790: PPUSH
33791: CALL_OW 248
33795: PPUSH
33796: CALL_OW 450
33800: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33801: LD_ADDR_VAR 0 3
33805: PUSH
33806: LD_VAR 0 4
33810: PPUSH
33811: LD_INT 1
33813: PPUSH
33814: CALL_OW 275
33818: PUSH
33819: LD_VAR 0 5
33823: PUSH
33824: LD_INT 1
33826: ARRAY
33827: GREATEREQUAL
33828: PUSH
33829: LD_VAR 0 4
33833: PPUSH
33834: LD_INT 2
33836: PPUSH
33837: CALL_OW 275
33841: PUSH
33842: LD_VAR 0 5
33846: PUSH
33847: LD_INT 2
33849: ARRAY
33850: GREATEREQUAL
33851: AND
33852: PUSH
33853: LD_VAR 0 4
33857: PPUSH
33858: LD_INT 3
33860: PPUSH
33861: CALL_OW 275
33865: PUSH
33866: LD_VAR 0 5
33870: PUSH
33871: LD_INT 3
33873: ARRAY
33874: GREATEREQUAL
33875: AND
33876: ST_TO_ADDR
// end ;
33877: LD_VAR 0 3
33881: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33882: LD_INT 0
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
// result := false ;
33895: LD_ADDR_VAR 0 8
33899: PUSH
33900: LD_INT 0
33902: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33903: LD_VAR 0 5
33907: NOT
33908: PUSH
33909: LD_VAR 0 1
33913: NOT
33914: OR
33915: PUSH
33916: LD_VAR 0 2
33920: NOT
33921: OR
33922: PUSH
33923: LD_VAR 0 3
33927: NOT
33928: OR
33929: IFFALSE 33933
// exit ;
33931: GO 34747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33933: LD_ADDR_VAR 0 14
33937: PUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: LD_VAR 0 2
33947: PPUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: LD_VAR 0 4
33957: PPUSH
33958: LD_VAR 0 5
33962: PUSH
33963: LD_INT 1
33965: ARRAY
33966: PPUSH
33967: CALL_OW 248
33971: PPUSH
33972: LD_INT 0
33974: PPUSH
33975: CALL 35984 0 6
33979: ST_TO_ADDR
// if not hexes then
33980: LD_VAR 0 14
33984: NOT
33985: IFFALSE 33989
// exit ;
33987: GO 34747
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33989: LD_ADDR_VAR 0 17
33993: PUSH
33994: LD_VAR 0 5
33998: PPUSH
33999: LD_INT 22
34001: PUSH
34002: LD_VAR 0 13
34006: PPUSH
34007: CALL_OW 255
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 30
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 30
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PPUSH
34048: CALL_OW 72
34052: ST_TO_ADDR
// for i = 1 to hexes do
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_VAR 0 14
34067: PUSH
34068: FOR_TO
34069: IFFALSE 34745
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34071: LD_ADDR_VAR 0 13
34075: PUSH
34076: LD_VAR 0 14
34080: PUSH
34081: LD_VAR 0 9
34085: ARRAY
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: LD_VAR 0 14
34095: PUSH
34096: LD_VAR 0 9
34100: ARRAY
34101: PUSH
34102: LD_INT 2
34104: ARRAY
34105: PPUSH
34106: CALL_OW 428
34110: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34111: LD_VAR 0 14
34115: PUSH
34116: LD_VAR 0 9
34120: ARRAY
34121: PUSH
34122: LD_INT 1
34124: ARRAY
34125: PPUSH
34126: LD_VAR 0 14
34130: PUSH
34131: LD_VAR 0 9
34135: ARRAY
34136: PUSH
34137: LD_INT 2
34139: ARRAY
34140: PPUSH
34141: CALL_OW 351
34145: PUSH
34146: LD_VAR 0 14
34150: PUSH
34151: LD_VAR 0 9
34155: ARRAY
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: PPUSH
34161: LD_VAR 0 14
34165: PUSH
34166: LD_VAR 0 9
34170: ARRAY
34171: PUSH
34172: LD_INT 2
34174: ARRAY
34175: PPUSH
34176: CALL_OW 488
34180: NOT
34181: OR
34182: PUSH
34183: LD_VAR 0 13
34187: PPUSH
34188: CALL_OW 247
34192: PUSH
34193: LD_INT 3
34195: EQUAL
34196: OR
34197: IFFALSE 34203
// exit ;
34199: POP
34200: POP
34201: GO 34747
// if not tmp then
34203: LD_VAR 0 13
34207: NOT
34208: IFFALSE 34212
// continue ;
34210: GO 34068
// result := true ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_INT 1
34219: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34220: LD_VAR 0 6
34224: PUSH
34225: LD_VAR 0 13
34229: PPUSH
34230: CALL_OW 247
34234: PUSH
34235: LD_INT 2
34237: EQUAL
34238: AND
34239: PUSH
34240: LD_VAR 0 13
34244: PPUSH
34245: CALL_OW 263
34249: PUSH
34250: LD_INT 1
34252: EQUAL
34253: AND
34254: IFFALSE 34418
// begin if IsDrivenBy ( tmp ) then
34256: LD_VAR 0 13
34260: PPUSH
34261: CALL_OW 311
34265: IFFALSE 34269
// continue ;
34267: GO 34068
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34269: LD_VAR 0 6
34273: PPUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 60
34279: PUSH
34280: EMPTY
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: LD_INT 55
34292: PUSH
34293: EMPTY
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PPUSH
34304: CALL_OW 72
34308: IFFALSE 34416
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34310: LD_ADDR_VAR 0 18
34314: PUSH
34315: LD_VAR 0 6
34319: PPUSH
34320: LD_INT 3
34322: PUSH
34323: LD_INT 60
34325: PUSH
34326: EMPTY
34327: LIST
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 55
34338: PUSH
34339: EMPTY
34340: LIST
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PPUSH
34350: CALL_OW 72
34354: PUSH
34355: LD_INT 1
34357: ARRAY
34358: ST_TO_ADDR
// if IsInUnit ( driver ) then
34359: LD_VAR 0 18
34363: PPUSH
34364: CALL_OW 310
34368: IFFALSE 34379
// ComExit ( driver ) ;
34370: LD_VAR 0 18
34374: PPUSH
34375: CALL 59168 0 1
// AddComEnterUnit ( driver , tmp ) ;
34379: LD_VAR 0 18
34383: PPUSH
34384: LD_VAR 0 13
34388: PPUSH
34389: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34393: LD_VAR 0 18
34397: PPUSH
34398: LD_VAR 0 7
34402: PPUSH
34403: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34407: LD_VAR 0 18
34411: PPUSH
34412: CALL_OW 181
// end ; continue ;
34416: GO 34068
// end ; if not cleaners or not tmp in cleaners then
34418: LD_VAR 0 6
34422: NOT
34423: PUSH
34424: LD_VAR 0 13
34428: PUSH
34429: LD_VAR 0 6
34433: IN
34434: NOT
34435: OR
34436: IFFALSE 34743
// begin if dep then
34438: LD_VAR 0 17
34442: IFFALSE 34578
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34444: LD_ADDR_VAR 0 16
34448: PUSH
34449: LD_VAR 0 17
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: CALL_OW 250
34462: PPUSH
34463: LD_VAR 0 17
34467: PUSH
34468: LD_INT 1
34470: ARRAY
34471: PPUSH
34472: CALL_OW 254
34476: PPUSH
34477: LD_INT 5
34479: PPUSH
34480: CALL_OW 272
34484: PUSH
34485: LD_VAR 0 17
34489: PUSH
34490: LD_INT 1
34492: ARRAY
34493: PPUSH
34494: CALL_OW 251
34498: PPUSH
34499: LD_VAR 0 17
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: PPUSH
34508: CALL_OW 254
34512: PPUSH
34513: LD_INT 5
34515: PPUSH
34516: CALL_OW 273
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34525: LD_VAR 0 16
34529: PUSH
34530: LD_INT 1
34532: ARRAY
34533: PPUSH
34534: LD_VAR 0 16
34538: PUSH
34539: LD_INT 2
34541: ARRAY
34542: PPUSH
34543: CALL_OW 488
34547: IFFALSE 34578
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34549: LD_VAR 0 13
34553: PPUSH
34554: LD_VAR 0 16
34558: PUSH
34559: LD_INT 1
34561: ARRAY
34562: PPUSH
34563: LD_VAR 0 16
34567: PUSH
34568: LD_INT 2
34570: ARRAY
34571: PPUSH
34572: CALL_OW 111
// continue ;
34576: GO 34068
// end ; end ; r := GetDir ( tmp ) ;
34578: LD_ADDR_VAR 0 15
34582: PUSH
34583: LD_VAR 0 13
34587: PPUSH
34588: CALL_OW 254
34592: ST_TO_ADDR
// if r = 5 then
34593: LD_VAR 0 15
34597: PUSH
34598: LD_INT 5
34600: EQUAL
34601: IFFALSE 34611
// r := 0 ;
34603: LD_ADDR_VAR 0 15
34607: PUSH
34608: LD_INT 0
34610: ST_TO_ADDR
// for j = r to 5 do
34611: LD_ADDR_VAR 0 10
34615: PUSH
34616: DOUBLE
34617: LD_VAR 0 15
34621: DEC
34622: ST_TO_ADDR
34623: LD_INT 5
34625: PUSH
34626: FOR_TO
34627: IFFALSE 34741
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34629: LD_ADDR_VAR 0 11
34633: PUSH
34634: LD_VAR 0 13
34638: PPUSH
34639: CALL_OW 250
34643: PPUSH
34644: LD_VAR 0 10
34648: PPUSH
34649: LD_INT 2
34651: PPUSH
34652: CALL_OW 272
34656: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34657: LD_ADDR_VAR 0 12
34661: PUSH
34662: LD_VAR 0 13
34666: PPUSH
34667: CALL_OW 251
34671: PPUSH
34672: LD_VAR 0 10
34676: PPUSH
34677: LD_INT 2
34679: PPUSH
34680: CALL_OW 273
34684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34685: LD_VAR 0 11
34689: PPUSH
34690: LD_VAR 0 12
34694: PPUSH
34695: CALL_OW 488
34699: PUSH
34700: LD_VAR 0 11
34704: PPUSH
34705: LD_VAR 0 12
34709: PPUSH
34710: CALL_OW 428
34714: NOT
34715: AND
34716: IFFALSE 34739
// begin ComMoveXY ( tmp , _x , _y ) ;
34718: LD_VAR 0 13
34722: PPUSH
34723: LD_VAR 0 11
34727: PPUSH
34728: LD_VAR 0 12
34732: PPUSH
34733: CALL_OW 111
// break ;
34737: GO 34741
// end ; end ;
34739: GO 34626
34741: POP
34742: POP
// end ; end ;
34743: GO 34068
34745: POP
34746: POP
// end ;
34747: LD_VAR 0 8
34751: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34752: LD_INT 0
34754: PPUSH
// result := true ;
34755: LD_ADDR_VAR 0 3
34759: PUSH
34760: LD_INT 1
34762: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34763: LD_VAR 0 2
34767: PUSH
34768: LD_INT 24
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34782
34774: LD_INT 33
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 34807
34782: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 32
34790: PPUSH
34791: LD_VAR 0 1
34795: PPUSH
34796: CALL_OW 321
34800: PUSH
34801: LD_INT 2
34803: EQUAL
34804: ST_TO_ADDR
34805: GO 35127
34807: LD_INT 20
34809: DOUBLE
34810: EQUAL
34811: IFTRUE 34815
34813: GO 34840
34815: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34816: LD_ADDR_VAR 0 3
34820: PUSH
34821: LD_INT 6
34823: PPUSH
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL_OW 321
34833: PUSH
34834: LD_INT 2
34836: EQUAL
34837: ST_TO_ADDR
34838: GO 35127
34840: LD_INT 22
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34854
34846: LD_INT 36
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34854
34852: GO 34879
34854: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34855: LD_ADDR_VAR 0 3
34859: PUSH
34860: LD_INT 15
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 321
34872: PUSH
34873: LD_INT 2
34875: EQUAL
34876: ST_TO_ADDR
34877: GO 35127
34879: LD_INT 30
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34887
34885: GO 34912
34887: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34888: LD_ADDR_VAR 0 3
34892: PUSH
34893: LD_INT 20
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 321
34905: PUSH
34906: LD_INT 2
34908: EQUAL
34909: ST_TO_ADDR
34910: GO 35127
34912: LD_INT 28
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34926
34918: LD_INT 21
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34951
34926: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 21
34934: PPUSH
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 321
34944: PUSH
34945: LD_INT 2
34947: EQUAL
34948: ST_TO_ADDR
34949: GO 35127
34951: LD_INT 16
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34986
34959: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_EXP 89
34969: PPUSH
34970: LD_VAR 0 1
34974: PPUSH
34975: CALL_OW 321
34979: PUSH
34980: LD_INT 2
34982: EQUAL
34983: ST_TO_ADDR
34984: GO 35127
34986: LD_INT 19
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 35000
34992: LD_INT 23
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35000
34998: GO 35027
35000: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35001: LD_ADDR_VAR 0 3
35005: PUSH
35006: LD_EXP 88
35010: PPUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 321
35020: PUSH
35021: LD_INT 2
35023: EQUAL
35024: ST_TO_ADDR
35025: GO 35127
35027: LD_INT 17
35029: DOUBLE
35030: EQUAL
35031: IFTRUE 35035
35033: GO 35060
35035: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35036: LD_ADDR_VAR 0 3
35040: PUSH
35041: LD_INT 39
35043: PPUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL_OW 321
35053: PUSH
35054: LD_INT 2
35056: EQUAL
35057: ST_TO_ADDR
35058: GO 35127
35060: LD_INT 18
35062: DOUBLE
35063: EQUAL
35064: IFTRUE 35068
35066: GO 35093
35068: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35069: LD_ADDR_VAR 0 3
35073: PUSH
35074: LD_INT 40
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 321
35086: PUSH
35087: LD_INT 2
35089: EQUAL
35090: ST_TO_ADDR
35091: GO 35127
35093: LD_INT 27
35095: DOUBLE
35096: EQUAL
35097: IFTRUE 35101
35099: GO 35126
35101: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35102: LD_ADDR_VAR 0 3
35106: PUSH
35107: LD_INT 35
35109: PPUSH
35110: LD_VAR 0 1
35114: PPUSH
35115: CALL_OW 321
35119: PUSH
35120: LD_INT 2
35122: EQUAL
35123: ST_TO_ADDR
35124: GO 35127
35126: POP
// end ;
35127: LD_VAR 0 3
35131: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35132: LD_INT 0
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
// result := false ;
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_INT 0
35152: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35153: LD_VAR 0 1
35157: NOT
35158: PUSH
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 266
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: IN
35179: NOT
35180: OR
35181: PUSH
35182: LD_VAR 0 2
35186: NOT
35187: OR
35188: PUSH
35189: LD_VAR 0 5
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: LD_INT 4
35208: PUSH
35209: LD_INT 5
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: IN
35220: NOT
35221: OR
35222: PUSH
35223: LD_VAR 0 3
35227: PPUSH
35228: LD_VAR 0 4
35232: PPUSH
35233: CALL_OW 488
35237: NOT
35238: OR
35239: IFFALSE 35243
// exit ;
35241: GO 35979
// side := GetSide ( depot ) ;
35243: LD_ADDR_VAR 0 9
35247: PUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: CALL_OW 255
35257: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35258: LD_VAR 0 9
35262: PPUSH
35263: LD_VAR 0 2
35267: PPUSH
35268: CALL 34752 0 2
35272: NOT
35273: IFFALSE 35277
// exit ;
35275: GO 35979
// pom := GetBase ( depot ) ;
35277: LD_ADDR_VAR 0 10
35281: PUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 274
35291: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35292: LD_ADDR_VAR 0 11
35296: PUSH
35297: LD_VAR 0 2
35301: PPUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 248
35311: PPUSH
35312: CALL_OW 450
35316: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35317: LD_VAR 0 10
35321: PPUSH
35322: LD_INT 1
35324: PPUSH
35325: CALL_OW 275
35329: PUSH
35330: LD_VAR 0 11
35334: PUSH
35335: LD_INT 1
35337: ARRAY
35338: GREATEREQUAL
35339: PUSH
35340: LD_VAR 0 10
35344: PPUSH
35345: LD_INT 2
35347: PPUSH
35348: CALL_OW 275
35352: PUSH
35353: LD_VAR 0 11
35357: PUSH
35358: LD_INT 2
35360: ARRAY
35361: GREATEREQUAL
35362: AND
35363: PUSH
35364: LD_VAR 0 10
35368: PPUSH
35369: LD_INT 3
35371: PPUSH
35372: CALL_OW 275
35376: PUSH
35377: LD_VAR 0 11
35381: PUSH
35382: LD_INT 3
35384: ARRAY
35385: GREATEREQUAL
35386: AND
35387: NOT
35388: IFFALSE 35392
// exit ;
35390: GO 35979
// if GetBType ( depot ) = b_depot then
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 266
35401: PUSH
35402: LD_INT 0
35404: EQUAL
35405: IFFALSE 35417
// dist := 28 else
35407: LD_ADDR_VAR 0 14
35411: PUSH
35412: LD_INT 28
35414: ST_TO_ADDR
35415: GO 35425
// dist := 36 ;
35417: LD_ADDR_VAR 0 14
35421: PUSH
35422: LD_INT 36
35424: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35425: LD_VAR 0 1
35429: PPUSH
35430: LD_VAR 0 3
35434: PPUSH
35435: LD_VAR 0 4
35439: PPUSH
35440: CALL_OW 297
35444: PUSH
35445: LD_VAR 0 14
35449: GREATER
35450: IFFALSE 35454
// exit ;
35452: GO 35979
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35454: LD_ADDR_VAR 0 12
35458: PUSH
35459: LD_VAR 0 2
35463: PPUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_VAR 0 4
35473: PPUSH
35474: LD_VAR 0 5
35478: PPUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 248
35488: PPUSH
35489: LD_INT 0
35491: PPUSH
35492: CALL 35984 0 6
35496: ST_TO_ADDR
// if not hexes then
35497: LD_VAR 0 12
35501: NOT
35502: IFFALSE 35506
// exit ;
35504: GO 35979
// hex := GetHexInfo ( x , y ) ;
35506: LD_ADDR_VAR 0 15
35510: PUSH
35511: LD_VAR 0 3
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: CALL_OW 546
35525: ST_TO_ADDR
// if hex [ 1 ] then
35526: LD_VAR 0 15
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: IFFALSE 35538
// exit ;
35536: GO 35979
// height := hex [ 2 ] ;
35538: LD_ADDR_VAR 0 13
35542: PUSH
35543: LD_VAR 0 15
35547: PUSH
35548: LD_INT 2
35550: ARRAY
35551: ST_TO_ADDR
// for i = 1 to hexes do
35552: LD_ADDR_VAR 0 7
35556: PUSH
35557: DOUBLE
35558: LD_INT 1
35560: DEC
35561: ST_TO_ADDR
35562: LD_VAR 0 12
35566: PUSH
35567: FOR_TO
35568: IFFALSE 35898
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35570: LD_VAR 0 12
35574: PUSH
35575: LD_VAR 0 7
35579: ARRAY
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PPUSH
35585: LD_VAR 0 12
35589: PUSH
35590: LD_VAR 0 7
35594: ARRAY
35595: PUSH
35596: LD_INT 2
35598: ARRAY
35599: PPUSH
35600: CALL_OW 488
35604: NOT
35605: PUSH
35606: LD_VAR 0 12
35610: PUSH
35611: LD_VAR 0 7
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: LD_VAR 0 12
35625: PUSH
35626: LD_VAR 0 7
35630: ARRAY
35631: PUSH
35632: LD_INT 2
35634: ARRAY
35635: PPUSH
35636: CALL_OW 428
35640: PUSH
35641: LD_INT 0
35643: GREATER
35644: OR
35645: PUSH
35646: LD_VAR 0 12
35650: PUSH
35651: LD_VAR 0 7
35655: ARRAY
35656: PUSH
35657: LD_INT 1
35659: ARRAY
35660: PPUSH
35661: LD_VAR 0 12
35665: PUSH
35666: LD_VAR 0 7
35670: ARRAY
35671: PUSH
35672: LD_INT 2
35674: ARRAY
35675: PPUSH
35676: CALL_OW 351
35680: OR
35681: IFFALSE 35687
// exit ;
35683: POP
35684: POP
35685: GO 35979
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35687: LD_ADDR_VAR 0 8
35691: PUSH
35692: LD_VAR 0 12
35696: PUSH
35697: LD_VAR 0 7
35701: ARRAY
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: LD_VAR 0 12
35711: PUSH
35712: LD_VAR 0 7
35716: ARRAY
35717: PUSH
35718: LD_INT 2
35720: ARRAY
35721: PPUSH
35722: CALL_OW 546
35726: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35727: LD_VAR 0 8
35731: PUSH
35732: LD_INT 1
35734: ARRAY
35735: PUSH
35736: LD_VAR 0 8
35740: PUSH
35741: LD_INT 2
35743: ARRAY
35744: PUSH
35745: LD_VAR 0 13
35749: PUSH
35750: LD_INT 2
35752: PLUS
35753: GREATER
35754: OR
35755: PUSH
35756: LD_VAR 0 8
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PUSH
35765: LD_VAR 0 13
35769: PUSH
35770: LD_INT 2
35772: MINUS
35773: LESS
35774: OR
35775: PUSH
35776: LD_VAR 0 8
35780: PUSH
35781: LD_INT 3
35783: ARRAY
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 8
35790: PUSH
35791: LD_INT 9
35793: PUSH
35794: LD_INT 10
35796: PUSH
35797: LD_INT 11
35799: PUSH
35800: LD_INT 12
35802: PUSH
35803: LD_INT 13
35805: PUSH
35806: LD_INT 16
35808: PUSH
35809: LD_INT 17
35811: PUSH
35812: LD_INT 18
35814: PUSH
35815: LD_INT 19
35817: PUSH
35818: LD_INT 20
35820: PUSH
35821: LD_INT 21
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: IN
35839: NOT
35840: OR
35841: PUSH
35842: LD_VAR 0 8
35846: PUSH
35847: LD_INT 5
35849: ARRAY
35850: NOT
35851: OR
35852: PUSH
35853: LD_VAR 0 8
35857: PUSH
35858: LD_INT 6
35860: ARRAY
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 7
35870: PUSH
35871: LD_INT 9
35873: PUSH
35874: LD_INT 10
35876: PUSH
35877: LD_INT 11
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: IN
35888: NOT
35889: OR
35890: IFFALSE 35896
// exit ;
35892: POP
35893: POP
35894: GO 35979
// end ;
35896: GO 35567
35898: POP
35899: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35900: LD_VAR 0 9
35904: PPUSH
35905: LD_VAR 0 3
35909: PPUSH
35910: LD_VAR 0 4
35914: PPUSH
35915: LD_INT 20
35917: PPUSH
35918: CALL 27925 0 4
35922: PUSH
35923: LD_INT 4
35925: ARRAY
35926: IFFALSE 35930
// exit ;
35928: GO 35979
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35930: LD_VAR 0 2
35934: PUSH
35935: LD_INT 29
35937: PUSH
35938: LD_INT 30
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: IN
35945: PUSH
35946: LD_VAR 0 3
35950: PPUSH
35951: LD_VAR 0 4
35955: PPUSH
35956: LD_VAR 0 9
35960: PPUSH
35961: CALL_OW 440
35965: NOT
35966: AND
35967: IFFALSE 35971
// exit ;
35969: GO 35979
// result := true ;
35971: LD_ADDR_VAR 0 6
35975: PUSH
35976: LD_INT 1
35978: ST_TO_ADDR
// end ;
35979: LD_VAR 0 6
35983: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
// result = [ ] ;
36044: LD_ADDR_VAR 0 7
36048: PUSH
36049: EMPTY
36050: ST_TO_ADDR
// temp_list = [ ] ;
36051: LD_ADDR_VAR 0 9
36055: PUSH
36056: EMPTY
36057: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36058: LD_VAR 0 4
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 4
36077: PUSH
36078: LD_INT 5
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: IN
36089: NOT
36090: PUSH
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: IN
36106: PUSH
36107: LD_VAR 0 5
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: IN
36126: NOT
36127: AND
36128: OR
36129: IFFALSE 36133
// exit ;
36131: GO 54524
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36133: LD_VAR 0 1
36137: PUSH
36138: LD_INT 6
36140: PUSH
36141: LD_INT 7
36143: PUSH
36144: LD_INT 8
36146: PUSH
36147: LD_INT 13
36149: PUSH
36150: LD_INT 12
36152: PUSH
36153: LD_INT 15
36155: PUSH
36156: LD_INT 11
36158: PUSH
36159: LD_INT 14
36161: PUSH
36162: LD_INT 10
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: IN
36176: IFFALSE 36186
// btype = b_lab ;
36178: LD_ADDR_VAR 0 1
36182: PUSH
36183: LD_INT 6
36185: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36186: LD_VAR 0 6
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: IN
36205: NOT
36206: PUSH
36207: LD_VAR 0 1
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: LD_INT 6
36226: PUSH
36227: LD_INT 36
36229: PUSH
36230: LD_INT 4
36232: PUSH
36233: LD_INT 5
36235: PUSH
36236: LD_INT 31
36238: PUSH
36239: LD_INT 32
36241: PUSH
36242: LD_INT 33
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: IN
36258: NOT
36259: PUSH
36260: LD_VAR 0 6
36264: PUSH
36265: LD_INT 1
36267: EQUAL
36268: AND
36269: OR
36270: PUSH
36271: LD_VAR 0 1
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: IN
36286: NOT
36287: PUSH
36288: LD_VAR 0 6
36292: PUSH
36293: LD_INT 2
36295: EQUAL
36296: AND
36297: OR
36298: IFFALSE 36308
// mode = 0 ;
36300: LD_ADDR_VAR 0 6
36304: PUSH
36305: LD_INT 0
36307: ST_TO_ADDR
// case mode of 0 :
36308: LD_VAR 0 6
36312: PUSH
36313: LD_INT 0
36315: DOUBLE
36316: EQUAL
36317: IFTRUE 36321
36319: GO 47774
36321: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36322: LD_ADDR_VAR 0 11
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36515: LD_ADDR_VAR 0 12
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 3
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 3
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36711: LD_ADDR_VAR 0 13
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 3
36882: NEG
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36910: LD_ADDR_VAR 0 14
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 3
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 3
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37106: LD_ADDR_VAR 0 15
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 3
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37299: LD_ADDR_VAR 0 16
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37492: LD_ADDR_VAR 0 17
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: NEG
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37722: LD_ADDR_VAR 0 18
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37952: LD_ADDR_VAR 0 19
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: NEG
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38182: LD_ADDR_VAR 0 20
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38412: LD_ADDR_VAR 0 21
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38642: LD_ADDR_VAR 0 22
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 2
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38872: LD_ADDR_VAR 0 23
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 3
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39152: LD_ADDR_VAR 0 24
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 3
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 3
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39428: LD_ADDR_VAR 0 25
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39702: LD_ADDR_VAR 0 26
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39978: LD_ADDR_VAR 0 27
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40258: LD_ADDR_VAR 0 28
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 3
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 3
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 3
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40540: LD_ADDR_VAR 0 29
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 2
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 3
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40819: LD_ADDR_VAR 0 30
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 3
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 3
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41097: LD_ADDR_VAR 0 31
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 3
41340: NEG
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41375: LD_ADDR_VAR 0 32
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 3
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 3
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41653: LD_ADDR_VAR 0 33
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41932: LD_ADDR_VAR 0 34
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42212: LD_ADDR_VAR 0 35
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42324: LD_ADDR_VAR 0 36
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42436: LD_ADDR_VAR 0 37
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42548: LD_ADDR_VAR 0 38
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42660: LD_ADDR_VAR 0 39
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42772: LD_ADDR_VAR 0 40
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42884: LD_ADDR_VAR 0 41
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 3
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: NEG
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43234: LD_ADDR_VAR 0 42
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 3
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: NEG
43544: PUSH
43545: LD_INT 3
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43584: LD_ADDR_VAR 0 43
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43932: LD_ADDR_VAR 0 44
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 3
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 3
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44282: LD_ADDR_VAR 0 45
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 3
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 3
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: NEG
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44632: LD_ADDR_VAR 0 46
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 3
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 3
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 2
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 3
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44980: LD_ADDR_VAR 0 47
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45131: LD_ADDR_VAR 0 48
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45278: LD_ADDR_VAR 0 49
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45422: LD_ADDR_VAR 0 50
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45566: LD_ADDR_VAR 0 51
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45713: LD_ADDR_VAR 0 52
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45864: LD_ADDR_VAR 0 53
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46094: LD_ADDR_VAR 0 54
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46324: LD_ADDR_VAR 0 55
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46554: LD_ADDR_VAR 0 56
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46784: LD_ADDR_VAR 0 57
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47014: LD_ADDR_VAR 0 58
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47244: LD_ADDR_VAR 0 59
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47332: LD_ADDR_VAR 0 60
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47420: LD_ADDR_VAR 0 61
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47508: LD_ADDR_VAR 0 62
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47596: LD_ADDR_VAR 0 63
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47684: LD_ADDR_VAR 0 64
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// end ; 1 :
47772: GO 53669
47774: LD_INT 1
47776: DOUBLE
47777: EQUAL
47778: IFTRUE 47782
47780: GO 50405
47782: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47783: LD_ADDR_VAR 0 11
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47827: LD_ADDR_VAR 0 12
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47868: LD_ADDR_VAR 0 13
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47908: LD_ADDR_VAR 0 14
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47949: LD_ADDR_VAR 0 15
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47993: LD_ADDR_VAR 0 16
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48039: LD_ADDR_VAR 0 17
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48083: LD_ADDR_VAR 0 18
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48124: LD_ADDR_VAR 0 19
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 3
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48164: LD_ADDR_VAR 0 20
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48205: LD_ADDR_VAR 0 21
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48249: LD_ADDR_VAR 0 22
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48295: LD_ADDR_VAR 0 23
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 4
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48339: LD_ADDR_VAR 0 24
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48380: LD_ADDR_VAR 0 25
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 4
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48420: LD_ADDR_VAR 0 26
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 27
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 4
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48505: LD_ADDR_VAR 0 28
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: LD_INT 3
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: LD_INT 4
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 4
48536: NEG
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48551: LD_ADDR_VAR 0 29
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 3
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: LD_INT 4
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 5
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 5
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 4
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 6
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 6
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 5
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48706: LD_ADDR_VAR 0 30
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 4
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 5
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 5
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 6
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 6
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48849: LD_ADDR_VAR 0 31
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 3
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 4
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 4
48896: PUSH
48897: LD_INT 4
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: LD_INT 4
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 5
48916: PUSH
48917: LD_INT 4
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 5
48926: PUSH
48927: LD_INT 5
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 4
48936: PUSH
48937: LD_INT 5
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 6
48946: PUSH
48947: LD_INT 5
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 6
48956: PUSH
48957: LD_INT 6
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 5
48966: PUSH
48967: LD_INT 6
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48988: LD_ADDR_VAR 0 32
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: LD_INT 4
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 4
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 5
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 5
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: LD_INT 4
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 6
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 6
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 5
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49131: LD_ADDR_VAR 0 33
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: NEG
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: NEG
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 4
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 5
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 5
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 5
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 6
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 6
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49286: LD_ADDR_VAR 0 34
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: LD_INT 4
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 4
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 4
49353: NEG
49354: PUSH
49355: LD_INT 4
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 4
49365: NEG
49366: PUSH
49367: LD_INT 5
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 5
49377: NEG
49378: PUSH
49379: LD_INT 4
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 5
49389: NEG
49390: PUSH
49391: LD_INT 5
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: NEG
49402: PUSH
49403: LD_INT 6
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 6
49413: NEG
49414: PUSH
49415: LD_INT 5
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 6
49425: NEG
49426: PUSH
49427: LD_INT 6
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49449: LD_ADDR_VAR 0 41
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49493: LD_ADDR_VAR 0 42
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49534: LD_ADDR_VAR 0 43
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49574: LD_ADDR_VAR 0 44
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 45
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49659: LD_ADDR_VAR 0 46
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49705: LD_ADDR_VAR 0 47
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49738: LD_ADDR_VAR 0 48
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49769: LD_ADDR_VAR 0 49
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49798: LD_ADDR_VAR 0 50
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49827: LD_ADDR_VAR 0 51
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49858: LD_ADDR_VAR 0 52
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 53
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49935: LD_ADDR_VAR 0 54
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49976: LD_ADDR_VAR 0 55
49980: PUSH
49981: LD_INT 3
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 3
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50016: LD_ADDR_VAR 0 56
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50057: LD_ADDR_VAR 0 57
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50101: LD_ADDR_VAR 0 58
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: LD_INT 3
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50147: LD_ADDR_VAR 0 59
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50191: LD_ADDR_VAR 0 60
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50232: LD_ADDR_VAR 0 61
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: LIST
50271: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50272: LD_ADDR_VAR 0 62
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50313: LD_ADDR_VAR 0 63
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50357: LD_ADDR_VAR 0 64
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// end ; 2 :
50403: GO 53669
50405: LD_INT 2
50407: DOUBLE
50408: EQUAL
50409: IFTRUE 50413
50411: GO 53668
50413: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50414: LD_ADDR_VAR 0 29
50418: PUSH
50419: LD_INT 4
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 4
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 5
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 5
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 4
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: LD_INT 4
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: LD_INT 4
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 4
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 4
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 5
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 4
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 4
50799: NEG
50800: PUSH
50801: LD_INT 4
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 4
50811: NEG
50812: PUSH
50813: LD_INT 5
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 4
50847: NEG
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 5
50859: NEG
50860: PUSH
50861: LD_INT 4
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 5
50871: NEG
50872: PUSH
50873: LD_INT 5
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: LD_INT 5
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 5
50895: NEG
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50952: LD_ADDR_VAR 0 30
50956: PUSH
50957: LD_INT 4
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: LD_INT 4
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 5
50989: PUSH
50990: LD_INT 5
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 4
50999: PUSH
51000: LD_INT 5
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 5
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: LD_INT 5
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 4
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 4
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 4
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 5
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 5
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: LD_INT 4
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 4
51304: NEG
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 4
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 4
51340: NEG
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 4
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 5
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 4
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 5
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 3
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: LD_INT 5
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51499: LD_ADDR_VAR 0 31
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 4
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 5
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 5
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 4
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 5
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: NEG
51702: PUSH
51703: LD_INT 4
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: NEG
51714: PUSH
51715: LD_INT 5
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 4
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 5
51761: NEG
51762: PUSH
51763: LD_INT 4
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 5
51773: NEG
51774: PUSH
51775: LD_INT 5
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: LD_INT 5
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 5
51797: NEG
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 4
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: LD_INT 4
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 5
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 5
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 5
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52049: LD_ADDR_VAR 0 32
52053: PUSH
52054: LD_INT 4
52056: NEG
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 4
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 4
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 5
52112: NEG
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 5
52123: NEG
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 5
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: LD_INT 4
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 4
52230: NEG
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 4
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 5
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 4
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 4
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 5
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: LD_INT 5
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 4
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 4
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 4
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 4
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 4
52471: PUSH
52472: LD_INT 3
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 5
52481: PUSH
52482: LD_INT 4
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 5
52491: PUSH
52492: LD_INT 5
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 4
52501: PUSH
52502: LD_INT 5
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52596: LD_ADDR_VAR 0 33
52600: PUSH
52601: LD_INT 4
52603: NEG
52604: PUSH
52605: LD_INT 4
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: NEG
52616: PUSH
52617: LD_INT 5
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: LD_INT 4
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 4
52651: NEG
52652: PUSH
52653: LD_INT 3
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 5
52663: NEG
52664: PUSH
52665: LD_INT 4
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 5
52675: NEG
52676: PUSH
52677: LD_INT 5
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: LD_INT 5
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 5
52699: NEG
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 4
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 4
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 4
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 4
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 5
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 5
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 5
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 4
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 4
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 4
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 4
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 4
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 5
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53134: LD_ADDR_VAR 0 34
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 4
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 5
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 3
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 4
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 5
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 5
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 4
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 4
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 5
53356: PUSH
53357: LD_INT 4
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: LD_INT 5
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 4
53376: PUSH
53377: LD_INT 5
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 4
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 5
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 4
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 4
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 4
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 4
53519: NEG
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 4
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: NEG
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 5
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 5
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// end ; end ;
53666: GO 53669
53668: POP
// case btype of b_depot , b_warehouse :
53669: LD_VAR 0 1
53673: PUSH
53674: LD_INT 0
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53688
53680: LD_INT 1
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53688
53686: GO 53889
53688: POP
// case nation of nation_american :
53689: LD_VAR 0 5
53693: PUSH
53694: LD_INT 1
53696: DOUBLE
53697: EQUAL
53698: IFTRUE 53702
53700: GO 53758
53702: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53703: LD_ADDR_VAR 0 9
53707: PUSH
53708: LD_VAR 0 11
53712: PUSH
53713: LD_VAR 0 12
53717: PUSH
53718: LD_VAR 0 13
53722: PUSH
53723: LD_VAR 0 14
53727: PUSH
53728: LD_VAR 0 15
53732: PUSH
53733: LD_VAR 0 16
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: PUSH
53746: LD_VAR 0 4
53750: PUSH
53751: LD_INT 1
53753: PLUS
53754: ARRAY
53755: ST_TO_ADDR
53756: GO 53887
53758: LD_INT 2
53760: DOUBLE
53761: EQUAL
53762: IFTRUE 53766
53764: GO 53822
53766: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53767: LD_ADDR_VAR 0 9
53771: PUSH
53772: LD_VAR 0 17
53776: PUSH
53777: LD_VAR 0 18
53781: PUSH
53782: LD_VAR 0 19
53786: PUSH
53787: LD_VAR 0 20
53791: PUSH
53792: LD_VAR 0 21
53796: PUSH
53797: LD_VAR 0 22
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: PUSH
53810: LD_VAR 0 4
53814: PUSH
53815: LD_INT 1
53817: PLUS
53818: ARRAY
53819: ST_TO_ADDR
53820: GO 53887
53822: LD_INT 3
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53830
53828: GO 53886
53830: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53831: LD_ADDR_VAR 0 9
53835: PUSH
53836: LD_VAR 0 23
53840: PUSH
53841: LD_VAR 0 24
53845: PUSH
53846: LD_VAR 0 25
53850: PUSH
53851: LD_VAR 0 26
53855: PUSH
53856: LD_VAR 0 27
53860: PUSH
53861: LD_VAR 0 28
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: PUSH
53874: LD_VAR 0 4
53878: PUSH
53879: LD_INT 1
53881: PLUS
53882: ARRAY
53883: ST_TO_ADDR
53884: GO 53887
53886: POP
53887: GO 54442
53889: LD_INT 2
53891: DOUBLE
53892: EQUAL
53893: IFTRUE 53903
53895: LD_INT 3
53897: DOUBLE
53898: EQUAL
53899: IFTRUE 53903
53901: GO 53959
53903: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53904: LD_ADDR_VAR 0 9
53908: PUSH
53909: LD_VAR 0 29
53913: PUSH
53914: LD_VAR 0 30
53918: PUSH
53919: LD_VAR 0 31
53923: PUSH
53924: LD_VAR 0 32
53928: PUSH
53929: LD_VAR 0 33
53933: PUSH
53934: LD_VAR 0 34
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: PUSH
53947: LD_VAR 0 4
53951: PUSH
53952: LD_INT 1
53954: PLUS
53955: ARRAY
53956: ST_TO_ADDR
53957: GO 54442
53959: LD_INT 16
53961: DOUBLE
53962: EQUAL
53963: IFTRUE 54021
53965: LD_INT 17
53967: DOUBLE
53968: EQUAL
53969: IFTRUE 54021
53971: LD_INT 18
53973: DOUBLE
53974: EQUAL
53975: IFTRUE 54021
53977: LD_INT 19
53979: DOUBLE
53980: EQUAL
53981: IFTRUE 54021
53983: LD_INT 22
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 54021
53989: LD_INT 20
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 54021
53995: LD_INT 21
53997: DOUBLE
53998: EQUAL
53999: IFTRUE 54021
54001: LD_INT 23
54003: DOUBLE
54004: EQUAL
54005: IFTRUE 54021
54007: LD_INT 24
54009: DOUBLE
54010: EQUAL
54011: IFTRUE 54021
54013: LD_INT 25
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54021
54019: GO 54077
54021: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54022: LD_ADDR_VAR 0 9
54026: PUSH
54027: LD_VAR 0 35
54031: PUSH
54032: LD_VAR 0 36
54036: PUSH
54037: LD_VAR 0 37
54041: PUSH
54042: LD_VAR 0 38
54046: PUSH
54047: LD_VAR 0 39
54051: PUSH
54052: LD_VAR 0 40
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: PUSH
54065: LD_VAR 0 4
54069: PUSH
54070: LD_INT 1
54072: PLUS
54073: ARRAY
54074: ST_TO_ADDR
54075: GO 54442
54077: LD_INT 6
54079: DOUBLE
54080: EQUAL
54081: IFTRUE 54133
54083: LD_INT 7
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54133
54089: LD_INT 8
54091: DOUBLE
54092: EQUAL
54093: IFTRUE 54133
54095: LD_INT 13
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54133
54101: LD_INT 12
54103: DOUBLE
54104: EQUAL
54105: IFTRUE 54133
54107: LD_INT 15
54109: DOUBLE
54110: EQUAL
54111: IFTRUE 54133
54113: LD_INT 11
54115: DOUBLE
54116: EQUAL
54117: IFTRUE 54133
54119: LD_INT 14
54121: DOUBLE
54122: EQUAL
54123: IFTRUE 54133
54125: LD_INT 10
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54133
54131: GO 54189
54133: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54134: LD_ADDR_VAR 0 9
54138: PUSH
54139: LD_VAR 0 41
54143: PUSH
54144: LD_VAR 0 42
54148: PUSH
54149: LD_VAR 0 43
54153: PUSH
54154: LD_VAR 0 44
54158: PUSH
54159: LD_VAR 0 45
54163: PUSH
54164: LD_VAR 0 46
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: PUSH
54177: LD_VAR 0 4
54181: PUSH
54182: LD_INT 1
54184: PLUS
54185: ARRAY
54186: ST_TO_ADDR
54187: GO 54442
54189: LD_INT 36
54191: DOUBLE
54192: EQUAL
54193: IFTRUE 54197
54195: GO 54253
54197: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54198: LD_ADDR_VAR 0 9
54202: PUSH
54203: LD_VAR 0 47
54207: PUSH
54208: LD_VAR 0 48
54212: PUSH
54213: LD_VAR 0 49
54217: PUSH
54218: LD_VAR 0 50
54222: PUSH
54223: LD_VAR 0 51
54227: PUSH
54228: LD_VAR 0 52
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: PUSH
54241: LD_VAR 0 4
54245: PUSH
54246: LD_INT 1
54248: PLUS
54249: ARRAY
54250: ST_TO_ADDR
54251: GO 54442
54253: LD_INT 4
54255: DOUBLE
54256: EQUAL
54257: IFTRUE 54279
54259: LD_INT 5
54261: DOUBLE
54262: EQUAL
54263: IFTRUE 54279
54265: LD_INT 34
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54279
54271: LD_INT 37
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54279
54277: GO 54335
54279: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54280: LD_ADDR_VAR 0 9
54284: PUSH
54285: LD_VAR 0 53
54289: PUSH
54290: LD_VAR 0 54
54294: PUSH
54295: LD_VAR 0 55
54299: PUSH
54300: LD_VAR 0 56
54304: PUSH
54305: LD_VAR 0 57
54309: PUSH
54310: LD_VAR 0 58
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: PUSH
54323: LD_VAR 0 4
54327: PUSH
54328: LD_INT 1
54330: PLUS
54331: ARRAY
54332: ST_TO_ADDR
54333: GO 54442
54335: LD_INT 31
54337: DOUBLE
54338: EQUAL
54339: IFTRUE 54385
54341: LD_INT 32
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54385
54347: LD_INT 33
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54385
54353: LD_INT 27
54355: DOUBLE
54356: EQUAL
54357: IFTRUE 54385
54359: LD_INT 26
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54385
54365: LD_INT 28
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54385
54371: LD_INT 29
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54385
54377: LD_INT 30
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54385
54383: GO 54441
54385: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54386: LD_ADDR_VAR 0 9
54390: PUSH
54391: LD_VAR 0 59
54395: PUSH
54396: LD_VAR 0 60
54400: PUSH
54401: LD_VAR 0 61
54405: PUSH
54406: LD_VAR 0 62
54410: PUSH
54411: LD_VAR 0 63
54415: PUSH
54416: LD_VAR 0 64
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: PUSH
54429: LD_VAR 0 4
54433: PUSH
54434: LD_INT 1
54436: PLUS
54437: ARRAY
54438: ST_TO_ADDR
54439: GO 54442
54441: POP
// temp_list2 = [ ] ;
54442: LD_ADDR_VAR 0 10
54446: PUSH
54447: EMPTY
54448: ST_TO_ADDR
// for i in temp_list do
54449: LD_ADDR_VAR 0 8
54453: PUSH
54454: LD_VAR 0 9
54458: PUSH
54459: FOR_IN
54460: IFFALSE 54512
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54462: LD_ADDR_VAR 0 10
54466: PUSH
54467: LD_VAR 0 10
54471: PUSH
54472: LD_VAR 0 8
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: PUSH
54481: LD_VAR 0 2
54485: PLUS
54486: PUSH
54487: LD_VAR 0 8
54491: PUSH
54492: LD_INT 2
54494: ARRAY
54495: PUSH
54496: LD_VAR 0 3
54500: PLUS
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: EMPTY
54507: LIST
54508: ADD
54509: ST_TO_ADDR
54510: GO 54459
54512: POP
54513: POP
// result = temp_list2 ;
54514: LD_ADDR_VAR 0 7
54518: PUSH
54519: LD_VAR 0 10
54523: ST_TO_ADDR
// end ;
54524: LD_VAR 0 7
54528: RET
// export function EnemyInRange ( unit , dist ) ; begin
54529: LD_INT 0
54531: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54532: LD_ADDR_VAR 0 3
54536: PUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 255
54546: PPUSH
54547: LD_VAR 0 1
54551: PPUSH
54552: CALL_OW 250
54556: PPUSH
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL_OW 251
54566: PPUSH
54567: LD_VAR 0 2
54571: PPUSH
54572: CALL 27925 0 4
54576: PUSH
54577: LD_INT 4
54579: ARRAY
54580: ST_TO_ADDR
// end ;
54581: LD_VAR 0 3
54585: RET
// export function PlayerSeeMe ( unit ) ; begin
54586: LD_INT 0
54588: PPUSH
// result := See ( your_side , unit ) ;
54589: LD_ADDR_VAR 0 2
54593: PUSH
54594: LD_OWVAR 2
54598: PPUSH
54599: LD_VAR 0 1
54603: PPUSH
54604: CALL_OW 292
54608: ST_TO_ADDR
// end ;
54609: LD_VAR 0 2
54613: RET
// export function ReverseDir ( unit ) ; begin
54614: LD_INT 0
54616: PPUSH
// if not unit then
54617: LD_VAR 0 1
54621: NOT
54622: IFFALSE 54626
// exit ;
54624: GO 54649
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54626: LD_ADDR_VAR 0 2
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 254
54640: PUSH
54641: LD_INT 3
54643: PLUS
54644: PUSH
54645: LD_INT 6
54647: MOD
54648: ST_TO_ADDR
// end ;
54649: LD_VAR 0 2
54653: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54654: LD_INT 0
54656: PPUSH
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
// if not hexes then
54661: LD_VAR 0 2
54665: NOT
54666: IFFALSE 54670
// exit ;
54668: GO 54818
// dist := 9999 ;
54670: LD_ADDR_VAR 0 5
54674: PUSH
54675: LD_INT 9999
54677: ST_TO_ADDR
// for i = 1 to hexes do
54678: LD_ADDR_VAR 0 4
54682: PUSH
54683: DOUBLE
54684: LD_INT 1
54686: DEC
54687: ST_TO_ADDR
54688: LD_VAR 0 2
54692: PUSH
54693: FOR_TO
54694: IFFALSE 54806
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54696: LD_VAR 0 1
54700: PPUSH
54701: LD_VAR 0 2
54705: PUSH
54706: LD_VAR 0 4
54710: ARRAY
54711: PUSH
54712: LD_INT 1
54714: ARRAY
54715: PPUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_VAR 0 4
54725: ARRAY
54726: PUSH
54727: LD_INT 2
54729: ARRAY
54730: PPUSH
54731: CALL_OW 297
54735: PUSH
54736: LD_VAR 0 5
54740: LESS
54741: IFFALSE 54804
// begin hex := hexes [ i ] ;
54743: LD_ADDR_VAR 0 7
54747: PUSH
54748: LD_VAR 0 2
54752: PUSH
54753: LD_VAR 0 4
54757: ARRAY
54758: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54759: LD_ADDR_VAR 0 5
54763: PUSH
54764: LD_VAR 0 1
54768: PPUSH
54769: LD_VAR 0 2
54773: PUSH
54774: LD_VAR 0 4
54778: ARRAY
54779: PUSH
54780: LD_INT 1
54782: ARRAY
54783: PPUSH
54784: LD_VAR 0 2
54788: PUSH
54789: LD_VAR 0 4
54793: ARRAY
54794: PUSH
54795: LD_INT 2
54797: ARRAY
54798: PPUSH
54799: CALL_OW 297
54803: ST_TO_ADDR
// end ; end ;
54804: GO 54693
54806: POP
54807: POP
// result := hex ;
54808: LD_ADDR_VAR 0 3
54812: PUSH
54813: LD_VAR 0 7
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 3
54822: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54827: LD_VAR 0 1
54831: NOT
54832: PUSH
54833: LD_VAR 0 1
54837: PUSH
54838: LD_INT 21
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 23
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PPUSH
54862: CALL_OW 69
54866: IN
54867: NOT
54868: OR
54869: IFFALSE 54873
// exit ;
54871: GO 54920
// for i = 1 to 3 do
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: DOUBLE
54879: LD_INT 1
54881: DEC
54882: ST_TO_ADDR
54883: LD_INT 3
54885: PUSH
54886: FOR_TO
54887: IFFALSE 54918
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 250
54898: PPUSH
54899: LD_VAR 0 1
54903: PPUSH
54904: CALL_OW 251
54908: PPUSH
54909: LD_INT 1
54911: PPUSH
54912: CALL_OW 453
54916: GO 54886
54918: POP
54919: POP
// end ;
54920: LD_VAR 0 2
54924: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54925: LD_INT 0
54927: PPUSH
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54933: LD_VAR 0 1
54937: NOT
54938: PUSH
54939: LD_VAR 0 2
54943: NOT
54944: OR
54945: PUSH
54946: LD_VAR 0 1
54950: PPUSH
54951: CALL_OW 314
54955: OR
54956: IFFALSE 54960
// exit ;
54958: GO 55401
// x := GetX ( enemy_unit ) ;
54960: LD_ADDR_VAR 0 7
54964: PUSH
54965: LD_VAR 0 2
54969: PPUSH
54970: CALL_OW 250
54974: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54975: LD_ADDR_VAR 0 8
54979: PUSH
54980: LD_VAR 0 2
54984: PPUSH
54985: CALL_OW 251
54989: ST_TO_ADDR
// if not x or not y then
54990: LD_VAR 0 7
54994: NOT
54995: PUSH
54996: LD_VAR 0 8
55000: NOT
55001: OR
55002: IFFALSE 55006
// exit ;
55004: GO 55401
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55006: LD_ADDR_VAR 0 6
55010: PUSH
55011: LD_VAR 0 7
55015: PPUSH
55016: LD_INT 0
55018: PPUSH
55019: LD_INT 4
55021: PPUSH
55022: CALL_OW 272
55026: PUSH
55027: LD_VAR 0 8
55031: PPUSH
55032: LD_INT 0
55034: PPUSH
55035: LD_INT 4
55037: PPUSH
55038: CALL_OW 273
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_VAR 0 7
55051: PPUSH
55052: LD_INT 1
55054: PPUSH
55055: LD_INT 4
55057: PPUSH
55058: CALL_OW 272
55062: PUSH
55063: LD_VAR 0 8
55067: PPUSH
55068: LD_INT 1
55070: PPUSH
55071: LD_INT 4
55073: PPUSH
55074: CALL_OW 273
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_VAR 0 7
55087: PPUSH
55088: LD_INT 2
55090: PPUSH
55091: LD_INT 4
55093: PPUSH
55094: CALL_OW 272
55098: PUSH
55099: LD_VAR 0 8
55103: PPUSH
55104: LD_INT 2
55106: PPUSH
55107: LD_INT 4
55109: PPUSH
55110: CALL_OW 273
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_VAR 0 7
55123: PPUSH
55124: LD_INT 3
55126: PPUSH
55127: LD_INT 4
55129: PPUSH
55130: CALL_OW 272
55134: PUSH
55135: LD_VAR 0 8
55139: PPUSH
55140: LD_INT 3
55142: PPUSH
55143: LD_INT 4
55145: PPUSH
55146: CALL_OW 273
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_VAR 0 7
55159: PPUSH
55160: LD_INT 4
55162: PPUSH
55163: LD_INT 4
55165: PPUSH
55166: CALL_OW 272
55170: PUSH
55171: LD_VAR 0 8
55175: PPUSH
55176: LD_INT 4
55178: PPUSH
55179: LD_INT 4
55181: PPUSH
55182: CALL_OW 273
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_VAR 0 7
55195: PPUSH
55196: LD_INT 5
55198: PPUSH
55199: LD_INT 4
55201: PPUSH
55202: CALL_OW 272
55206: PUSH
55207: LD_VAR 0 8
55211: PPUSH
55212: LD_INT 5
55214: PPUSH
55215: LD_INT 4
55217: PPUSH
55218: CALL_OW 273
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// for i = tmp downto 1 do
55235: LD_ADDR_VAR 0 4
55239: PUSH
55240: DOUBLE
55241: LD_VAR 0 6
55245: INC
55246: ST_TO_ADDR
55247: LD_INT 1
55249: PUSH
55250: FOR_DOWNTO
55251: IFFALSE 55352
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55253: LD_VAR 0 6
55257: PUSH
55258: LD_VAR 0 4
55262: ARRAY
55263: PUSH
55264: LD_INT 1
55266: ARRAY
55267: PPUSH
55268: LD_VAR 0 6
55272: PUSH
55273: LD_VAR 0 4
55277: ARRAY
55278: PUSH
55279: LD_INT 2
55281: ARRAY
55282: PPUSH
55283: CALL_OW 488
55287: NOT
55288: PUSH
55289: LD_VAR 0 6
55293: PUSH
55294: LD_VAR 0 4
55298: ARRAY
55299: PUSH
55300: LD_INT 1
55302: ARRAY
55303: PPUSH
55304: LD_VAR 0 6
55308: PUSH
55309: LD_VAR 0 4
55313: ARRAY
55314: PUSH
55315: LD_INT 2
55317: ARRAY
55318: PPUSH
55319: CALL_OW 428
55323: PUSH
55324: LD_INT 0
55326: NONEQUAL
55327: OR
55328: IFFALSE 55350
// tmp := Delete ( tmp , i ) ;
55330: LD_ADDR_VAR 0 6
55334: PUSH
55335: LD_VAR 0 6
55339: PPUSH
55340: LD_VAR 0 4
55344: PPUSH
55345: CALL_OW 3
55349: ST_TO_ADDR
55350: GO 55250
55352: POP
55353: POP
// j := GetClosestHex ( unit , tmp ) ;
55354: LD_ADDR_VAR 0 5
55358: PUSH
55359: LD_VAR 0 1
55363: PPUSH
55364: LD_VAR 0 6
55368: PPUSH
55369: CALL 54654 0 2
55373: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55374: LD_VAR 0 1
55378: PPUSH
55379: LD_VAR 0 5
55383: PUSH
55384: LD_INT 1
55386: ARRAY
55387: PPUSH
55388: LD_VAR 0 5
55392: PUSH
55393: LD_INT 2
55395: ARRAY
55396: PPUSH
55397: CALL_OW 111
// end ;
55401: LD_VAR 0 3
55405: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55406: LD_INT 0
55408: PPUSH
55409: PPUSH
55410: PPUSH
// uc_side = 0 ;
55411: LD_ADDR_OWVAR 20
55415: PUSH
55416: LD_INT 0
55418: ST_TO_ADDR
// uc_nation = 0 ;
55419: LD_ADDR_OWVAR 21
55423: PUSH
55424: LD_INT 0
55426: ST_TO_ADDR
// InitHc_All ( ) ;
55427: CALL_OW 584
// InitVc ;
55431: CALL_OW 20
// if mastodonts then
55435: LD_VAR 0 6
55439: IFFALSE 55506
// for i = 1 to mastodonts do
55441: LD_ADDR_VAR 0 11
55445: PUSH
55446: DOUBLE
55447: LD_INT 1
55449: DEC
55450: ST_TO_ADDR
55451: LD_VAR 0 6
55455: PUSH
55456: FOR_TO
55457: IFFALSE 55504
// begin vc_chassis := 31 ;
55459: LD_ADDR_OWVAR 37
55463: PUSH
55464: LD_INT 31
55466: ST_TO_ADDR
// vc_control := control_rider ;
55467: LD_ADDR_OWVAR 38
55471: PUSH
55472: LD_INT 4
55474: ST_TO_ADDR
// animal := CreateVehicle ;
55475: LD_ADDR_VAR 0 12
55479: PUSH
55480: CALL_OW 45
55484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55485: LD_VAR 0 12
55489: PPUSH
55490: LD_VAR 0 8
55494: PPUSH
55495: LD_INT 0
55497: PPUSH
55498: CALL 57694 0 3
// end ;
55502: GO 55456
55504: POP
55505: POP
// if horses then
55506: LD_VAR 0 5
55510: IFFALSE 55577
// for i = 1 to horses do
55512: LD_ADDR_VAR 0 11
55516: PUSH
55517: DOUBLE
55518: LD_INT 1
55520: DEC
55521: ST_TO_ADDR
55522: LD_VAR 0 5
55526: PUSH
55527: FOR_TO
55528: IFFALSE 55575
// begin hc_class := 21 ;
55530: LD_ADDR_OWVAR 28
55534: PUSH
55535: LD_INT 21
55537: ST_TO_ADDR
// hc_gallery :=  ;
55538: LD_ADDR_OWVAR 33
55542: PUSH
55543: LD_STRING 
55545: ST_TO_ADDR
// animal := CreateHuman ;
55546: LD_ADDR_VAR 0 12
55550: PUSH
55551: CALL_OW 44
55555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55556: LD_VAR 0 12
55560: PPUSH
55561: LD_VAR 0 8
55565: PPUSH
55566: LD_INT 0
55568: PPUSH
55569: CALL 57694 0 3
// end ;
55573: GO 55527
55575: POP
55576: POP
// if birds then
55577: LD_VAR 0 1
55581: IFFALSE 55648
// for i = 1 to birds do
55583: LD_ADDR_VAR 0 11
55587: PUSH
55588: DOUBLE
55589: LD_INT 1
55591: DEC
55592: ST_TO_ADDR
55593: LD_VAR 0 1
55597: PUSH
55598: FOR_TO
55599: IFFALSE 55646
// begin hc_class = 18 ;
55601: LD_ADDR_OWVAR 28
55605: PUSH
55606: LD_INT 18
55608: ST_TO_ADDR
// hc_gallery =  ;
55609: LD_ADDR_OWVAR 33
55613: PUSH
55614: LD_STRING 
55616: ST_TO_ADDR
// animal := CreateHuman ;
55617: LD_ADDR_VAR 0 12
55621: PUSH
55622: CALL_OW 44
55626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55627: LD_VAR 0 12
55631: PPUSH
55632: LD_VAR 0 8
55636: PPUSH
55637: LD_INT 0
55639: PPUSH
55640: CALL 57694 0 3
// end ;
55644: GO 55598
55646: POP
55647: POP
// if tigers then
55648: LD_VAR 0 2
55652: IFFALSE 55736
// for i = 1 to tigers do
55654: LD_ADDR_VAR 0 11
55658: PUSH
55659: DOUBLE
55660: LD_INT 1
55662: DEC
55663: ST_TO_ADDR
55664: LD_VAR 0 2
55668: PUSH
55669: FOR_TO
55670: IFFALSE 55734
// begin hc_class = class_tiger ;
55672: LD_ADDR_OWVAR 28
55676: PUSH
55677: LD_INT 14
55679: ST_TO_ADDR
// hc_gallery =  ;
55680: LD_ADDR_OWVAR 33
55684: PUSH
55685: LD_STRING 
55687: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55688: LD_ADDR_OWVAR 35
55692: PUSH
55693: LD_INT 7
55695: NEG
55696: PPUSH
55697: LD_INT 7
55699: PPUSH
55700: CALL_OW 12
55704: ST_TO_ADDR
// animal := CreateHuman ;
55705: LD_ADDR_VAR 0 12
55709: PUSH
55710: CALL_OW 44
55714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55715: LD_VAR 0 12
55719: PPUSH
55720: LD_VAR 0 8
55724: PPUSH
55725: LD_INT 0
55727: PPUSH
55728: CALL 57694 0 3
// end ;
55732: GO 55669
55734: POP
55735: POP
// if apemans then
55736: LD_VAR 0 3
55740: IFFALSE 55863
// for i = 1 to apemans do
55742: LD_ADDR_VAR 0 11
55746: PUSH
55747: DOUBLE
55748: LD_INT 1
55750: DEC
55751: ST_TO_ADDR
55752: LD_VAR 0 3
55756: PUSH
55757: FOR_TO
55758: IFFALSE 55861
// begin hc_class = class_apeman ;
55760: LD_ADDR_OWVAR 28
55764: PUSH
55765: LD_INT 12
55767: ST_TO_ADDR
// hc_gallery =  ;
55768: LD_ADDR_OWVAR 33
55772: PUSH
55773: LD_STRING 
55775: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55776: LD_ADDR_OWVAR 35
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PPUSH
55785: LD_INT 2
55787: PPUSH
55788: CALL_OW 12
55792: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55793: LD_ADDR_OWVAR 31
55797: PUSH
55798: LD_INT 1
55800: PPUSH
55801: LD_INT 3
55803: PPUSH
55804: CALL_OW 12
55808: PUSH
55809: LD_INT 1
55811: PPUSH
55812: LD_INT 3
55814: PPUSH
55815: CALL_OW 12
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// animal := CreateHuman ;
55832: LD_ADDR_VAR 0 12
55836: PUSH
55837: CALL_OW 44
55841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55842: LD_VAR 0 12
55846: PPUSH
55847: LD_VAR 0 8
55851: PPUSH
55852: LD_INT 0
55854: PPUSH
55855: CALL 57694 0 3
// end ;
55859: GO 55757
55861: POP
55862: POP
// if enchidnas then
55863: LD_VAR 0 4
55867: IFFALSE 55934
// for i = 1 to enchidnas do
55869: LD_ADDR_VAR 0 11
55873: PUSH
55874: DOUBLE
55875: LD_INT 1
55877: DEC
55878: ST_TO_ADDR
55879: LD_VAR 0 4
55883: PUSH
55884: FOR_TO
55885: IFFALSE 55932
// begin hc_class = 13 ;
55887: LD_ADDR_OWVAR 28
55891: PUSH
55892: LD_INT 13
55894: ST_TO_ADDR
// hc_gallery =  ;
55895: LD_ADDR_OWVAR 33
55899: PUSH
55900: LD_STRING 
55902: ST_TO_ADDR
// animal := CreateHuman ;
55903: LD_ADDR_VAR 0 12
55907: PUSH
55908: CALL_OW 44
55912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55913: LD_VAR 0 12
55917: PPUSH
55918: LD_VAR 0 8
55922: PPUSH
55923: LD_INT 0
55925: PPUSH
55926: CALL 57694 0 3
// end ;
55930: GO 55884
55932: POP
55933: POP
// if fishes then
55934: LD_VAR 0 7
55938: IFFALSE 56005
// for i = 1 to fishes do
55940: LD_ADDR_VAR 0 11
55944: PUSH
55945: DOUBLE
55946: LD_INT 1
55948: DEC
55949: ST_TO_ADDR
55950: LD_VAR 0 7
55954: PUSH
55955: FOR_TO
55956: IFFALSE 56003
// begin hc_class = 20 ;
55958: LD_ADDR_OWVAR 28
55962: PUSH
55963: LD_INT 20
55965: ST_TO_ADDR
// hc_gallery =  ;
55966: LD_ADDR_OWVAR 33
55970: PUSH
55971: LD_STRING 
55973: ST_TO_ADDR
// animal := CreateHuman ;
55974: LD_ADDR_VAR 0 12
55978: PUSH
55979: CALL_OW 44
55983: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55984: LD_VAR 0 12
55988: PPUSH
55989: LD_VAR 0 9
55993: PPUSH
55994: LD_INT 0
55996: PPUSH
55997: CALL 57694 0 3
// end ;
56001: GO 55955
56003: POP
56004: POP
// end ;
56005: LD_VAR 0 10
56009: RET
// export function WantHeal ( sci , unit ) ; begin
56010: LD_INT 0
56012: PPUSH
// if GetTaskList ( sci ) > 0 then
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 437
56022: PUSH
56023: LD_INT 0
56025: GREATER
56026: IFFALSE 56096
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 437
56037: PUSH
56038: LD_INT 1
56040: ARRAY
56041: PUSH
56042: LD_INT 1
56044: ARRAY
56045: PUSH
56046: LD_STRING l
56048: EQUAL
56049: PUSH
56050: LD_VAR 0 1
56054: PPUSH
56055: CALL_OW 437
56059: PUSH
56060: LD_INT 1
56062: ARRAY
56063: PUSH
56064: LD_INT 4
56066: ARRAY
56067: PUSH
56068: LD_VAR 0 2
56072: EQUAL
56073: AND
56074: IFFALSE 56086
// result := true else
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_INT 1
56083: ST_TO_ADDR
56084: GO 56094
// result := false ;
56086: LD_ADDR_VAR 0 3
56090: PUSH
56091: LD_INT 0
56093: ST_TO_ADDR
// end else
56094: GO 56104
// result := false ;
56096: LD_ADDR_VAR 0 3
56100: PUSH
56101: LD_INT 0
56103: ST_TO_ADDR
// end ;
56104: LD_VAR 0 3
56108: RET
// export function HealTarget ( sci ) ; begin
56109: LD_INT 0
56111: PPUSH
// if not sci then
56112: LD_VAR 0 1
56116: NOT
56117: IFFALSE 56121
// exit ;
56119: GO 56186
// result := 0 ;
56121: LD_ADDR_VAR 0 2
56125: PUSH
56126: LD_INT 0
56128: ST_TO_ADDR
// if GetTaskList ( sci ) then
56129: LD_VAR 0 1
56133: PPUSH
56134: CALL_OW 437
56138: IFFALSE 56186
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56140: LD_VAR 0 1
56144: PPUSH
56145: CALL_OW 437
56149: PUSH
56150: LD_INT 1
56152: ARRAY
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_STRING l
56160: EQUAL
56161: IFFALSE 56186
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56163: LD_ADDR_VAR 0 2
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: CALL_OW 437
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PUSH
56182: LD_INT 4
56184: ARRAY
56185: ST_TO_ADDR
// end ;
56186: LD_VAR 0 2
56190: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56191: LD_INT 0
56193: PPUSH
56194: PPUSH
56195: PPUSH
56196: PPUSH
// if not base_units then
56197: LD_VAR 0 1
56201: NOT
56202: IFFALSE 56206
// exit ;
56204: GO 56293
// result := false ;
56206: LD_ADDR_VAR 0 2
56210: PUSH
56211: LD_INT 0
56213: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56214: LD_ADDR_VAR 0 5
56218: PUSH
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_INT 21
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PPUSH
56234: CALL_OW 72
56238: ST_TO_ADDR
// if not tmp then
56239: LD_VAR 0 5
56243: NOT
56244: IFFALSE 56248
// exit ;
56246: GO 56293
// for i in tmp do
56248: LD_ADDR_VAR 0 3
56252: PUSH
56253: LD_VAR 0 5
56257: PUSH
56258: FOR_IN
56259: IFFALSE 56291
// begin result := EnemyInRange ( i , 22 ) ;
56261: LD_ADDR_VAR 0 2
56265: PUSH
56266: LD_VAR 0 3
56270: PPUSH
56271: LD_INT 22
56273: PPUSH
56274: CALL 54529 0 2
56278: ST_TO_ADDR
// if result then
56279: LD_VAR 0 2
56283: IFFALSE 56289
// exit ;
56285: POP
56286: POP
56287: GO 56293
// end ;
56289: GO 56258
56291: POP
56292: POP
// end ;
56293: LD_VAR 0 2
56297: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
// if not units then
56302: LD_VAR 0 1
56306: NOT
56307: IFFALSE 56311
// exit ;
56309: GO 56381
// result := [ ] ;
56311: LD_ADDR_VAR 0 3
56315: PUSH
56316: EMPTY
56317: ST_TO_ADDR
// for i in units do
56318: LD_ADDR_VAR 0 4
56322: PUSH
56323: LD_VAR 0 1
56327: PUSH
56328: FOR_IN
56329: IFFALSE 56379
// if GetTag ( i ) = tag then
56331: LD_VAR 0 4
56335: PPUSH
56336: CALL_OW 110
56340: PUSH
56341: LD_VAR 0 2
56345: EQUAL
56346: IFFALSE 56377
// result := Replace ( result , result + 1 , i ) ;
56348: LD_ADDR_VAR 0 3
56352: PUSH
56353: LD_VAR 0 3
56357: PPUSH
56358: LD_VAR 0 3
56362: PUSH
56363: LD_INT 1
56365: PLUS
56366: PPUSH
56367: LD_VAR 0 4
56371: PPUSH
56372: CALL_OW 1
56376: ST_TO_ADDR
56377: GO 56328
56379: POP
56380: POP
// end ;
56381: LD_VAR 0 3
56385: RET
// export function IsDriver ( un ) ; begin
56386: LD_INT 0
56388: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56389: LD_ADDR_VAR 0 2
56393: PUSH
56394: LD_VAR 0 1
56398: PUSH
56399: LD_INT 55
56401: PUSH
56402: EMPTY
56403: LIST
56404: PPUSH
56405: CALL_OW 69
56409: IN
56410: ST_TO_ADDR
// end ;
56411: LD_VAR 0 2
56415: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56416: LD_INT 0
56418: PPUSH
56419: PPUSH
// list := [ ] ;
56420: LD_ADDR_VAR 0 5
56424: PUSH
56425: EMPTY
56426: ST_TO_ADDR
// case d of 0 :
56427: LD_VAR 0 3
56431: PUSH
56432: LD_INT 0
56434: DOUBLE
56435: EQUAL
56436: IFTRUE 56440
56438: GO 56573
56440: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56441: LD_ADDR_VAR 0 5
56445: PUSH
56446: LD_VAR 0 1
56450: PUSH
56451: LD_INT 4
56453: MINUS
56454: PUSH
56455: LD_VAR 0 2
56459: PUSH
56460: LD_INT 4
56462: MINUS
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: PUSH
56472: LD_VAR 0 1
56476: PUSH
56477: LD_INT 3
56479: MINUS
56480: PUSH
56481: LD_VAR 0 2
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: PUSH
56494: LD_VAR 0 1
56498: PUSH
56499: LD_INT 4
56501: PLUS
56502: PUSH
56503: LD_VAR 0 2
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: PUSH
56516: LD_VAR 0 1
56520: PUSH
56521: LD_INT 3
56523: PLUS
56524: PUSH
56525: LD_VAR 0 2
56529: PUSH
56530: LD_INT 3
56532: PLUS
56533: PUSH
56534: LD_INT 5
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: PUSH
56542: LD_VAR 0 1
56546: PUSH
56547: LD_VAR 0 2
56551: PUSH
56552: LD_INT 4
56554: PLUS
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// end ; 1 :
56571: GO 57271
56573: LD_INT 1
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56581
56579: GO 56714
56581: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56582: LD_ADDR_VAR 0 5
56586: PUSH
56587: LD_VAR 0 1
56591: PUSH
56592: LD_VAR 0 2
56596: PUSH
56597: LD_INT 4
56599: MINUS
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_VAR 0 1
56613: PUSH
56614: LD_INT 3
56616: MINUS
56617: PUSH
56618: LD_VAR 0 2
56622: PUSH
56623: LD_INT 3
56625: MINUS
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: PUSH
56635: LD_VAR 0 1
56639: PUSH
56640: LD_INT 4
56642: MINUS
56643: PUSH
56644: LD_VAR 0 2
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_VAR 0 1
56661: PUSH
56662: LD_VAR 0 2
56666: PUSH
56667: LD_INT 3
56669: PLUS
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: LD_VAR 0 1
56683: PUSH
56684: LD_INT 4
56686: PLUS
56687: PUSH
56688: LD_VAR 0 2
56692: PUSH
56693: LD_INT 4
56695: PLUS
56696: PUSH
56697: LD_INT 5
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// end ; 2 :
56712: GO 57271
56714: LD_INT 2
56716: DOUBLE
56717: EQUAL
56718: IFTRUE 56722
56720: GO 56851
56722: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56723: LD_ADDR_VAR 0 5
56727: PUSH
56728: LD_VAR 0 1
56732: PUSH
56733: LD_VAR 0 2
56737: PUSH
56738: LD_INT 3
56740: MINUS
56741: PUSH
56742: LD_INT 3
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: PUSH
56750: LD_VAR 0 1
56754: PUSH
56755: LD_INT 4
56757: PLUS
56758: PUSH
56759: LD_VAR 0 2
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: PUSH
56772: LD_VAR 0 1
56776: PUSH
56777: LD_VAR 0 2
56781: PUSH
56782: LD_INT 4
56784: PLUS
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: PUSH
56794: LD_VAR 0 1
56798: PUSH
56799: LD_INT 3
56801: MINUS
56802: PUSH
56803: LD_VAR 0 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: PUSH
56816: LD_VAR 0 1
56820: PUSH
56821: LD_INT 4
56823: MINUS
56824: PUSH
56825: LD_VAR 0 2
56829: PUSH
56830: LD_INT 4
56832: MINUS
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// end ; 3 :
56849: GO 57271
56851: LD_INT 3
56853: DOUBLE
56854: EQUAL
56855: IFTRUE 56859
56857: GO 56992
56859: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56860: LD_ADDR_VAR 0 5
56864: PUSH
56865: LD_VAR 0 1
56869: PUSH
56870: LD_INT 3
56872: PLUS
56873: PUSH
56874: LD_VAR 0 2
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: LIST
56886: PUSH
56887: LD_VAR 0 1
56891: PUSH
56892: LD_INT 4
56894: PLUS
56895: PUSH
56896: LD_VAR 0 2
56900: PUSH
56901: LD_INT 4
56903: PLUS
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: PUSH
56913: LD_VAR 0 1
56917: PUSH
56918: LD_INT 4
56920: MINUS
56921: PUSH
56922: LD_VAR 0 2
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: PUSH
56935: LD_VAR 0 1
56939: PUSH
56940: LD_VAR 0 2
56944: PUSH
56945: LD_INT 4
56947: MINUS
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: LIST
56956: PUSH
56957: LD_VAR 0 1
56961: PUSH
56962: LD_INT 3
56964: MINUS
56965: PUSH
56966: LD_VAR 0 2
56970: PUSH
56971: LD_INT 3
56973: MINUS
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// end ; 4 :
56990: GO 57271
56992: LD_INT 4
56994: DOUBLE
56995: EQUAL
56996: IFTRUE 57000
56998: GO 57133
57000: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57001: LD_ADDR_VAR 0 5
57005: PUSH
57006: LD_VAR 0 1
57010: PUSH
57011: LD_VAR 0 2
57015: PUSH
57016: LD_INT 4
57018: PLUS
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: PUSH
57028: LD_VAR 0 1
57032: PUSH
57033: LD_INT 3
57035: PLUS
57036: PUSH
57037: LD_VAR 0 2
57041: PUSH
57042: LD_INT 3
57044: PLUS
57045: PUSH
57046: LD_INT 5
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: PUSH
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 4
57061: PLUS
57062: PUSH
57063: LD_VAR 0 2
57067: PUSH
57068: LD_INT 4
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: PUSH
57076: LD_VAR 0 1
57080: PUSH
57081: LD_VAR 0 2
57085: PUSH
57086: LD_INT 3
57088: MINUS
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: PUSH
57098: LD_VAR 0 1
57102: PUSH
57103: LD_INT 4
57105: MINUS
57106: PUSH
57107: LD_VAR 0 2
57111: PUSH
57112: LD_INT 4
57114: MINUS
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// end ; 5 :
57131: GO 57271
57133: LD_INT 5
57135: DOUBLE
57136: EQUAL
57137: IFTRUE 57141
57139: GO 57270
57141: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57142: LD_ADDR_VAR 0 5
57146: PUSH
57147: LD_VAR 0 1
57151: PUSH
57152: LD_INT 4
57154: MINUS
57155: PUSH
57156: LD_VAR 0 2
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: PUSH
57169: LD_VAR 0 1
57173: PUSH
57174: LD_VAR 0 2
57178: PUSH
57179: LD_INT 4
57181: MINUS
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: PUSH
57191: LD_VAR 0 1
57195: PUSH
57196: LD_INT 4
57198: PLUS
57199: PUSH
57200: LD_VAR 0 2
57204: PUSH
57205: LD_INT 4
57207: PLUS
57208: PUSH
57209: LD_INT 5
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: PUSH
57217: LD_VAR 0 1
57221: PUSH
57222: LD_INT 3
57224: PLUS
57225: PUSH
57226: LD_VAR 0 2
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: PUSH
57239: LD_VAR 0 1
57243: PUSH
57244: LD_VAR 0 2
57248: PUSH
57249: LD_INT 3
57251: PLUS
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// end ; end ;
57268: GO 57271
57270: POP
// result := list ;
57271: LD_ADDR_VAR 0 4
57275: PUSH
57276: LD_VAR 0 5
57280: ST_TO_ADDR
// end ;
57281: LD_VAR 0 4
57285: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57286: LD_INT 0
57288: PPUSH
57289: PPUSH
57290: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57291: LD_VAR 0 1
57295: NOT
57296: PUSH
57297: LD_VAR 0 2
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: IN
57320: NOT
57321: OR
57322: IFFALSE 57326
// exit ;
57324: GO 57418
// tmp := [ ] ;
57326: LD_ADDR_VAR 0 5
57330: PUSH
57331: EMPTY
57332: ST_TO_ADDR
// for i in units do
57333: LD_ADDR_VAR 0 4
57337: PUSH
57338: LD_VAR 0 1
57342: PUSH
57343: FOR_IN
57344: IFFALSE 57387
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57346: LD_ADDR_VAR 0 5
57350: PUSH
57351: LD_VAR 0 5
57355: PPUSH
57356: LD_VAR 0 5
57360: PUSH
57361: LD_INT 1
57363: PLUS
57364: PPUSH
57365: LD_VAR 0 4
57369: PPUSH
57370: LD_VAR 0 2
57374: PPUSH
57375: CALL_OW 259
57379: PPUSH
57380: CALL_OW 2
57384: ST_TO_ADDR
57385: GO 57343
57387: POP
57388: POP
// if not tmp then
57389: LD_VAR 0 5
57393: NOT
57394: IFFALSE 57398
// exit ;
57396: GO 57418
// result := SortListByListDesc ( units , tmp ) ;
57398: LD_ADDR_VAR 0 3
57402: PUSH
57403: LD_VAR 0 1
57407: PPUSH
57408: LD_VAR 0 5
57412: PPUSH
57413: CALL_OW 77
57417: ST_TO_ADDR
// end ;
57418: LD_VAR 0 3
57422: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57423: LD_INT 0
57425: PPUSH
57426: PPUSH
57427: PPUSH
// result := false ;
57428: LD_ADDR_VAR 0 3
57432: PUSH
57433: LD_INT 0
57435: ST_TO_ADDR
// x := GetX ( building ) ;
57436: LD_ADDR_VAR 0 4
57440: PUSH
57441: LD_VAR 0 2
57445: PPUSH
57446: CALL_OW 250
57450: ST_TO_ADDR
// y := GetY ( building ) ;
57451: LD_ADDR_VAR 0 5
57455: PUSH
57456: LD_VAR 0 2
57460: PPUSH
57461: CALL_OW 251
57465: ST_TO_ADDR
// if not building or not x or not y then
57466: LD_VAR 0 2
57470: NOT
57471: PUSH
57472: LD_VAR 0 4
57476: NOT
57477: OR
57478: PUSH
57479: LD_VAR 0 5
57483: NOT
57484: OR
57485: IFFALSE 57489
// exit ;
57487: GO 57581
// if GetTaskList ( unit ) then
57489: LD_VAR 0 1
57493: PPUSH
57494: CALL_OW 437
57498: IFFALSE 57581
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57500: LD_STRING e
57502: PUSH
57503: LD_VAR 0 1
57507: PPUSH
57508: CALL_OW 437
57512: PUSH
57513: LD_INT 1
57515: ARRAY
57516: PUSH
57517: LD_INT 1
57519: ARRAY
57520: EQUAL
57521: PUSH
57522: LD_VAR 0 4
57526: PUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 437
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: LD_INT 2
57543: ARRAY
57544: EQUAL
57545: AND
57546: PUSH
57547: LD_VAR 0 5
57551: PUSH
57552: LD_VAR 0 1
57556: PPUSH
57557: CALL_OW 437
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PUSH
57566: LD_INT 3
57568: ARRAY
57569: EQUAL
57570: AND
57571: IFFALSE 57581
// result := true end ;
57573: LD_ADDR_VAR 0 3
57577: PUSH
57578: LD_INT 1
57580: ST_TO_ADDR
// end ;
57581: LD_VAR 0 3
57585: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57586: LD_INT 0
57588: PPUSH
// result := false ;
57589: LD_ADDR_VAR 0 4
57593: PUSH
57594: LD_INT 0
57596: ST_TO_ADDR
// if GetTaskList ( unit ) then
57597: LD_VAR 0 1
57601: PPUSH
57602: CALL_OW 437
57606: IFFALSE 57689
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57608: LD_STRING M
57610: PUSH
57611: LD_VAR 0 1
57615: PPUSH
57616: CALL_OW 437
57620: PUSH
57621: LD_INT 1
57623: ARRAY
57624: PUSH
57625: LD_INT 1
57627: ARRAY
57628: EQUAL
57629: PUSH
57630: LD_VAR 0 2
57634: PUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: CALL_OW 437
57644: PUSH
57645: LD_INT 1
57647: ARRAY
57648: PUSH
57649: LD_INT 2
57651: ARRAY
57652: EQUAL
57653: AND
57654: PUSH
57655: LD_VAR 0 3
57659: PUSH
57660: LD_VAR 0 1
57664: PPUSH
57665: CALL_OW 437
57669: PUSH
57670: LD_INT 1
57672: ARRAY
57673: PUSH
57674: LD_INT 3
57676: ARRAY
57677: EQUAL
57678: AND
57679: IFFALSE 57689
// result := true ;
57681: LD_ADDR_VAR 0 4
57685: PUSH
57686: LD_INT 1
57688: ST_TO_ADDR
// end ; end ;
57689: LD_VAR 0 4
57693: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57694: LD_INT 0
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
// if not unit or not area then
57700: LD_VAR 0 1
57704: NOT
57705: PUSH
57706: LD_VAR 0 2
57710: NOT
57711: OR
57712: IFFALSE 57716
// exit ;
57714: GO 57880
// tmp := AreaToList ( area , i ) ;
57716: LD_ADDR_VAR 0 6
57720: PUSH
57721: LD_VAR 0 2
57725: PPUSH
57726: LD_VAR 0 5
57730: PPUSH
57731: CALL_OW 517
57735: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57736: LD_ADDR_VAR 0 5
57740: PUSH
57741: DOUBLE
57742: LD_INT 1
57744: DEC
57745: ST_TO_ADDR
57746: LD_VAR 0 6
57750: PUSH
57751: LD_INT 1
57753: ARRAY
57754: PUSH
57755: FOR_TO
57756: IFFALSE 57878
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57758: LD_ADDR_VAR 0 7
57762: PUSH
57763: LD_VAR 0 6
57767: PUSH
57768: LD_INT 1
57770: ARRAY
57771: PUSH
57772: LD_VAR 0 5
57776: ARRAY
57777: PUSH
57778: LD_VAR 0 6
57782: PUSH
57783: LD_INT 2
57785: ARRAY
57786: PUSH
57787: LD_VAR 0 5
57791: ARRAY
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57797: LD_VAR 0 7
57801: PUSH
57802: LD_INT 1
57804: ARRAY
57805: PPUSH
57806: LD_VAR 0 7
57810: PUSH
57811: LD_INT 2
57813: ARRAY
57814: PPUSH
57815: CALL_OW 428
57819: PUSH
57820: LD_INT 0
57822: EQUAL
57823: IFFALSE 57876
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57825: LD_VAR 0 1
57829: PPUSH
57830: LD_VAR 0 7
57834: PUSH
57835: LD_INT 1
57837: ARRAY
57838: PPUSH
57839: LD_VAR 0 7
57843: PUSH
57844: LD_INT 2
57846: ARRAY
57847: PPUSH
57848: LD_VAR 0 3
57852: PPUSH
57853: CALL_OW 48
// result := IsPlaced ( unit ) ;
57857: LD_ADDR_VAR 0 4
57861: PUSH
57862: LD_VAR 0 1
57866: PPUSH
57867: CALL_OW 305
57871: ST_TO_ADDR
// exit ;
57872: POP
57873: POP
57874: GO 57880
// end ; end ;
57876: GO 57755
57878: POP
57879: POP
// end ;
57880: LD_VAR 0 4
57884: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57885: LD_INT 0
57887: PPUSH
57888: PPUSH
57889: PPUSH
// if not side or side > 8 then
57890: LD_VAR 0 1
57894: NOT
57895: PUSH
57896: LD_VAR 0 1
57900: PUSH
57901: LD_INT 8
57903: GREATER
57904: OR
57905: IFFALSE 57909
// exit ;
57907: GO 58096
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57909: LD_ADDR_VAR 0 4
57913: PUSH
57914: LD_INT 22
57916: PUSH
57917: LD_VAR 0 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 21
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PPUSH
57940: CALL_OW 69
57944: ST_TO_ADDR
// if not tmp then
57945: LD_VAR 0 4
57949: NOT
57950: IFFALSE 57954
// exit ;
57952: GO 58096
// enable_addtolog := true ;
57954: LD_ADDR_OWVAR 81
57958: PUSH
57959: LD_INT 1
57961: ST_TO_ADDR
// AddToLog ( [ ) ;
57962: LD_STRING [
57964: PPUSH
57965: CALL_OW 561
// for i in tmp do
57969: LD_ADDR_VAR 0 3
57973: PUSH
57974: LD_VAR 0 4
57978: PUSH
57979: FOR_IN
57980: IFFALSE 58087
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57982: LD_STRING [
57984: PUSH
57985: LD_VAR 0 3
57989: PPUSH
57990: CALL_OW 266
57994: STR
57995: PUSH
57996: LD_STRING , 
57998: STR
57999: PUSH
58000: LD_VAR 0 3
58004: PPUSH
58005: CALL_OW 250
58009: STR
58010: PUSH
58011: LD_STRING , 
58013: STR
58014: PUSH
58015: LD_VAR 0 3
58019: PPUSH
58020: CALL_OW 251
58024: STR
58025: PUSH
58026: LD_STRING , 
58028: STR
58029: PUSH
58030: LD_VAR 0 3
58034: PPUSH
58035: CALL_OW 254
58039: STR
58040: PUSH
58041: LD_STRING , 
58043: STR
58044: PUSH
58045: LD_VAR 0 3
58049: PPUSH
58050: LD_INT 1
58052: PPUSH
58053: CALL_OW 268
58057: STR
58058: PUSH
58059: LD_STRING , 
58061: STR
58062: PUSH
58063: LD_VAR 0 3
58067: PPUSH
58068: LD_INT 2
58070: PPUSH
58071: CALL_OW 268
58075: STR
58076: PUSH
58077: LD_STRING ],
58079: STR
58080: PPUSH
58081: CALL_OW 561
// end ;
58085: GO 57979
58087: POP
58088: POP
// AddToLog ( ]; ) ;
58089: LD_STRING ];
58091: PPUSH
58092: CALL_OW 561
// end ;
58096: LD_VAR 0 2
58100: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58101: LD_INT 0
58103: PPUSH
58104: PPUSH
58105: PPUSH
58106: PPUSH
58107: PPUSH
// if not area or not rate or not max then
58108: LD_VAR 0 1
58112: NOT
58113: PUSH
58114: LD_VAR 0 2
58118: NOT
58119: OR
58120: PUSH
58121: LD_VAR 0 4
58125: NOT
58126: OR
58127: IFFALSE 58131
// exit ;
58129: GO 58323
// while 1 do
58131: LD_INT 1
58133: IFFALSE 58323
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58135: LD_ADDR_VAR 0 9
58139: PUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: LD_INT 1
58147: PPUSH
58148: CALL_OW 287
58152: PUSH
58153: LD_INT 10
58155: MUL
58156: ST_TO_ADDR
// r := rate / 10 ;
58157: LD_ADDR_VAR 0 7
58161: PUSH
58162: LD_VAR 0 2
58166: PUSH
58167: LD_INT 10
58169: DIVREAL
58170: ST_TO_ADDR
// time := 1 1$00 ;
58171: LD_ADDR_VAR 0 8
58175: PUSH
58176: LD_INT 2100
58178: ST_TO_ADDR
// if amount < min then
58179: LD_VAR 0 9
58183: PUSH
58184: LD_VAR 0 3
58188: LESS
58189: IFFALSE 58207
// r := r * 2 else
58191: LD_ADDR_VAR 0 7
58195: PUSH
58196: LD_VAR 0 7
58200: PUSH
58201: LD_INT 2
58203: MUL
58204: ST_TO_ADDR
58205: GO 58233
// if amount > max then
58207: LD_VAR 0 9
58211: PUSH
58212: LD_VAR 0 4
58216: GREATER
58217: IFFALSE 58233
// r := r / 2 ;
58219: LD_ADDR_VAR 0 7
58223: PUSH
58224: LD_VAR 0 7
58228: PUSH
58229: LD_INT 2
58231: DIVREAL
58232: ST_TO_ADDR
// time := time / r ;
58233: LD_ADDR_VAR 0 8
58237: PUSH
58238: LD_VAR 0 8
58242: PUSH
58243: LD_VAR 0 7
58247: DIVREAL
58248: ST_TO_ADDR
// if time < 0 then
58249: LD_VAR 0 8
58253: PUSH
58254: LD_INT 0
58256: LESS
58257: IFFALSE 58274
// time := time * - 1 ;
58259: LD_ADDR_VAR 0 8
58263: PUSH
58264: LD_VAR 0 8
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: MUL
58273: ST_TO_ADDR
// wait ( time ) ;
58274: LD_VAR 0 8
58278: PPUSH
58279: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58283: LD_INT 35
58285: PPUSH
58286: LD_INT 875
58288: PPUSH
58289: CALL_OW 12
58293: PPUSH
58294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58298: LD_INT 1
58300: PPUSH
58301: LD_INT 5
58303: PPUSH
58304: CALL_OW 12
58308: PPUSH
58309: LD_VAR 0 1
58313: PPUSH
58314: LD_INT 1
58316: PPUSH
58317: CALL_OW 55
// end ;
58321: GO 58131
// end ;
58323: LD_VAR 0 5
58327: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58328: LD_INT 0
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
// if not turrets or not factories then
58338: LD_VAR 0 1
58342: NOT
58343: PUSH
58344: LD_VAR 0 2
58348: NOT
58349: OR
58350: IFFALSE 58354
// exit ;
58352: GO 58661
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58354: LD_ADDR_VAR 0 10
58358: PUSH
58359: LD_INT 5
58361: PUSH
58362: LD_INT 6
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 24
58396: PUSH
58397: LD_INT 25
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 23
58406: PUSH
58407: LD_INT 27
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 42
58420: PUSH
58421: LD_INT 43
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 44
58430: PUSH
58431: LD_INT 46
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 45
58440: PUSH
58441: LD_INT 47
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// result := [ ] ;
58458: LD_ADDR_VAR 0 3
58462: PUSH
58463: EMPTY
58464: ST_TO_ADDR
// for i in turrets do
58465: LD_ADDR_VAR 0 4
58469: PUSH
58470: LD_VAR 0 1
58474: PUSH
58475: FOR_IN
58476: IFFALSE 58659
// begin nat := GetNation ( i ) ;
58478: LD_ADDR_VAR 0 7
58482: PUSH
58483: LD_VAR 0 4
58487: PPUSH
58488: CALL_OW 248
58492: ST_TO_ADDR
// weapon := 0 ;
58493: LD_ADDR_VAR 0 8
58497: PUSH
58498: LD_INT 0
58500: ST_TO_ADDR
// if not nat then
58501: LD_VAR 0 7
58505: NOT
58506: IFFALSE 58510
// continue ;
58508: GO 58475
// for j in list [ nat ] do
58510: LD_ADDR_VAR 0 5
58514: PUSH
58515: LD_VAR 0 10
58519: PUSH
58520: LD_VAR 0 7
58524: ARRAY
58525: PUSH
58526: FOR_IN
58527: IFFALSE 58568
// if GetBWeapon ( i ) = j [ 1 ] then
58529: LD_VAR 0 4
58533: PPUSH
58534: CALL_OW 269
58538: PUSH
58539: LD_VAR 0 5
58543: PUSH
58544: LD_INT 1
58546: ARRAY
58547: EQUAL
58548: IFFALSE 58566
// begin weapon := j [ 2 ] ;
58550: LD_ADDR_VAR 0 8
58554: PUSH
58555: LD_VAR 0 5
58559: PUSH
58560: LD_INT 2
58562: ARRAY
58563: ST_TO_ADDR
// break ;
58564: GO 58568
// end ;
58566: GO 58526
58568: POP
58569: POP
// if not weapon then
58570: LD_VAR 0 8
58574: NOT
58575: IFFALSE 58579
// continue ;
58577: GO 58475
// for k in factories do
58579: LD_ADDR_VAR 0 6
58583: PUSH
58584: LD_VAR 0 2
58588: PUSH
58589: FOR_IN
58590: IFFALSE 58655
// begin weapons := AvailableWeaponList ( k ) ;
58592: LD_ADDR_VAR 0 9
58596: PUSH
58597: LD_VAR 0 6
58601: PPUSH
58602: CALL_OW 478
58606: ST_TO_ADDR
// if not weapons then
58607: LD_VAR 0 9
58611: NOT
58612: IFFALSE 58616
// continue ;
58614: GO 58589
// if weapon in weapons then
58616: LD_VAR 0 8
58620: PUSH
58621: LD_VAR 0 9
58625: IN
58626: IFFALSE 58653
// begin result := [ i , weapon ] ;
58628: LD_ADDR_VAR 0 3
58632: PUSH
58633: LD_VAR 0 4
58637: PUSH
58638: LD_VAR 0 8
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: ST_TO_ADDR
// exit ;
58647: POP
58648: POP
58649: POP
58650: POP
58651: GO 58661
// end ; end ;
58653: GO 58589
58655: POP
58656: POP
// end ;
58657: GO 58475
58659: POP
58660: POP
// end ;
58661: LD_VAR 0 3
58665: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58666: LD_INT 0
58668: PPUSH
// if not side or side > 8 then
58669: LD_VAR 0 3
58673: NOT
58674: PUSH
58675: LD_VAR 0 3
58679: PUSH
58680: LD_INT 8
58682: GREATER
58683: OR
58684: IFFALSE 58688
// exit ;
58686: GO 58747
// if not range then
58688: LD_VAR 0 4
58692: NOT
58693: IFFALSE 58704
// range := - 12 ;
58695: LD_ADDR_VAR 0 4
58699: PUSH
58700: LD_INT 12
58702: NEG
58703: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_VAR 0 2
58713: PPUSH
58714: LD_VAR 0 3
58718: PPUSH
58719: LD_VAR 0 4
58723: PPUSH
58724: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58728: LD_VAR 0 1
58732: PPUSH
58733: LD_VAR 0 2
58737: PPUSH
58738: LD_VAR 0 3
58742: PPUSH
58743: CALL_OW 331
// end ;
58747: LD_VAR 0 5
58751: RET
// export function Video ( mode ) ; begin
58752: LD_INT 0
58754: PPUSH
// ingame_video = mode ;
58755: LD_ADDR_OWVAR 52
58759: PUSH
58760: LD_VAR 0 1
58764: ST_TO_ADDR
// interface_hidden = mode ;
58765: LD_ADDR_OWVAR 54
58769: PUSH
58770: LD_VAR 0 1
58774: ST_TO_ADDR
// end ;
58775: LD_VAR 0 2
58779: RET
// export function Join ( array , element ) ; begin
58780: LD_INT 0
58782: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58783: LD_ADDR_VAR 0 3
58787: PUSH
58788: LD_VAR 0 1
58792: PPUSH
58793: LD_VAR 0 1
58797: PUSH
58798: LD_INT 1
58800: PLUS
58801: PPUSH
58802: LD_VAR 0 2
58806: PPUSH
58807: CALL_OW 1
58811: ST_TO_ADDR
// end ;
58812: LD_VAR 0 3
58816: RET
// export function JoinUnion ( array , element ) ; begin
58817: LD_INT 0
58819: PPUSH
// result := array union element ;
58820: LD_ADDR_VAR 0 3
58824: PUSH
58825: LD_VAR 0 1
58829: PUSH
58830: LD_VAR 0 2
58834: UNION
58835: ST_TO_ADDR
// end ;
58836: LD_VAR 0 3
58840: RET
// export function GetBehemoths ( side ) ; begin
58841: LD_INT 0
58843: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58844: LD_ADDR_VAR 0 2
58848: PUSH
58849: LD_INT 22
58851: PUSH
58852: LD_VAR 0 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 31
58863: PUSH
58864: LD_INT 25
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PPUSH
58875: CALL_OW 69
58879: ST_TO_ADDR
// end ;
58880: LD_VAR 0 2
58884: RET
// export function Shuffle ( array ) ; var i , index ; begin
58885: LD_INT 0
58887: PPUSH
58888: PPUSH
58889: PPUSH
// result := [ ] ;
58890: LD_ADDR_VAR 0 2
58894: PUSH
58895: EMPTY
58896: ST_TO_ADDR
// if not array then
58897: LD_VAR 0 1
58901: NOT
58902: IFFALSE 58906
// exit ;
58904: GO 59005
// Randomize ;
58906: CALL_OW 10
// for i = array downto 1 do
58910: LD_ADDR_VAR 0 3
58914: PUSH
58915: DOUBLE
58916: LD_VAR 0 1
58920: INC
58921: ST_TO_ADDR
58922: LD_INT 1
58924: PUSH
58925: FOR_DOWNTO
58926: IFFALSE 59003
// begin index := rand ( 1 , array ) ;
58928: LD_ADDR_VAR 0 4
58932: PUSH
58933: LD_INT 1
58935: PPUSH
58936: LD_VAR 0 1
58940: PPUSH
58941: CALL_OW 12
58945: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58946: LD_ADDR_VAR 0 2
58950: PUSH
58951: LD_VAR 0 2
58955: PPUSH
58956: LD_VAR 0 2
58960: PUSH
58961: LD_INT 1
58963: PLUS
58964: PPUSH
58965: LD_VAR 0 1
58969: PUSH
58970: LD_VAR 0 4
58974: ARRAY
58975: PPUSH
58976: CALL_OW 2
58980: ST_TO_ADDR
// array := Delete ( array , index ) ;
58981: LD_ADDR_VAR 0 1
58985: PUSH
58986: LD_VAR 0 1
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: CALL_OW 3
59000: ST_TO_ADDR
// end ;
59001: GO 58925
59003: POP
59004: POP
// end ;
59005: LD_VAR 0 2
59009: RET
// export function GetBaseMaterials ( base ) ; begin
59010: LD_INT 0
59012: PPUSH
// result := [ 0 , 0 , 0 ] ;
59013: LD_ADDR_VAR 0 2
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// if not base then
59032: LD_VAR 0 1
59036: NOT
59037: IFFALSE 59041
// exit ;
59039: GO 59090
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59041: LD_ADDR_VAR 0 2
59045: PUSH
59046: LD_VAR 0 1
59050: PPUSH
59051: LD_INT 1
59053: PPUSH
59054: CALL_OW 275
59058: PUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: LD_INT 2
59066: PPUSH
59067: CALL_OW 275
59071: PUSH
59072: LD_VAR 0 1
59076: PPUSH
59077: LD_INT 3
59079: PPUSH
59080: CALL_OW 275
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// end ;
59090: LD_VAR 0 2
59094: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
// result := array ;
59099: LD_ADDR_VAR 0 3
59103: PUSH
59104: LD_VAR 0 1
59108: ST_TO_ADDR
// if size > 0 then
59109: LD_VAR 0 2
59113: PUSH
59114: LD_INT 0
59116: GREATER
59117: IFFALSE 59163
// for i := array downto size do
59119: LD_ADDR_VAR 0 4
59123: PUSH
59124: DOUBLE
59125: LD_VAR 0 1
59129: INC
59130: ST_TO_ADDR
59131: LD_VAR 0 2
59135: PUSH
59136: FOR_DOWNTO
59137: IFFALSE 59161
// result := Delete ( result , result ) ;
59139: LD_ADDR_VAR 0 3
59143: PUSH
59144: LD_VAR 0 3
59148: PPUSH
59149: LD_VAR 0 3
59153: PPUSH
59154: CALL_OW 3
59158: ST_TO_ADDR
59159: GO 59136
59161: POP
59162: POP
// end ;
59163: LD_VAR 0 3
59167: RET
// export function ComExit ( unit ) ; var tmp ; begin
59168: LD_INT 0
59170: PPUSH
59171: PPUSH
// if not IsInUnit ( unit ) then
59172: LD_VAR 0 1
59176: PPUSH
59177: CALL_OW 310
59181: NOT
59182: IFFALSE 59186
// exit ;
59184: GO 59246
// tmp := IsInUnit ( unit ) ;
59186: LD_ADDR_VAR 0 3
59190: PUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL_OW 310
59200: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59201: LD_VAR 0 3
59205: PPUSH
59206: CALL_OW 247
59210: PUSH
59211: LD_INT 2
59213: EQUAL
59214: IFFALSE 59227
// ComExitVehicle ( unit ) else
59216: LD_VAR 0 1
59220: PPUSH
59221: CALL_OW 121
59225: GO 59236
// ComExitBuilding ( unit ) ;
59227: LD_VAR 0 1
59231: PPUSH
59232: CALL_OW 122
// result := tmp ;
59236: LD_ADDR_VAR 0 2
59240: PUSH
59241: LD_VAR 0 3
59245: ST_TO_ADDR
// end ;
59246: LD_VAR 0 2
59250: RET
// export function ComExitAll ( units ) ; var i ; begin
59251: LD_INT 0
59253: PPUSH
59254: PPUSH
// if not units then
59255: LD_VAR 0 1
59259: NOT
59260: IFFALSE 59264
// exit ;
59262: GO 59290
// for i in units do
59264: LD_ADDR_VAR 0 3
59268: PUSH
59269: LD_VAR 0 1
59273: PUSH
59274: FOR_IN
59275: IFFALSE 59288
// ComExit ( i ) ;
59277: LD_VAR 0 3
59281: PPUSH
59282: CALL 59168 0 1
59286: GO 59274
59288: POP
59289: POP
// end ;
59290: LD_VAR 0 2
59294: RET
// export function ResetHc ; begin
59295: LD_INT 0
59297: PPUSH
// InitHc ;
59298: CALL_OW 19
// hc_importance := 0 ;
59302: LD_ADDR_OWVAR 32
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// end ;
59310: LD_VAR 0 1
59314: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59315: LD_INT 0
59317: PPUSH
59318: PPUSH
59319: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59320: LD_ADDR_VAR 0 6
59324: PUSH
59325: LD_VAR 0 1
59329: PUSH
59330: LD_VAR 0 3
59334: PLUS
59335: PUSH
59336: LD_INT 2
59338: DIV
59339: ST_TO_ADDR
// if _x < 0 then
59340: LD_VAR 0 6
59344: PUSH
59345: LD_INT 0
59347: LESS
59348: IFFALSE 59365
// _x := _x * - 1 ;
59350: LD_ADDR_VAR 0 6
59354: PUSH
59355: LD_VAR 0 6
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: MUL
59364: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59365: LD_ADDR_VAR 0 7
59369: PUSH
59370: LD_VAR 0 2
59374: PUSH
59375: LD_VAR 0 4
59379: PLUS
59380: PUSH
59381: LD_INT 2
59383: DIV
59384: ST_TO_ADDR
// if _y < 0 then
59385: LD_VAR 0 7
59389: PUSH
59390: LD_INT 0
59392: LESS
59393: IFFALSE 59410
// _y := _y * - 1 ;
59395: LD_ADDR_VAR 0 7
59399: PUSH
59400: LD_VAR 0 7
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: MUL
59409: ST_TO_ADDR
// result := [ _x , _y ] ;
59410: LD_ADDR_VAR 0 5
59414: PUSH
59415: LD_VAR 0 6
59419: PUSH
59420: LD_VAR 0 7
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: ST_TO_ADDR
// end ;
59429: LD_VAR 0 5
59433: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
// task := GetTaskList ( unit ) ;
59440: LD_ADDR_VAR 0 7
59444: PUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 437
59454: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59455: LD_VAR 0 7
59459: NOT
59460: PUSH
59461: LD_VAR 0 1
59465: PPUSH
59466: LD_VAR 0 2
59470: PPUSH
59471: CALL_OW 308
59475: NOT
59476: AND
59477: IFFALSE 59481
// exit ;
59479: GO 59599
// if IsInArea ( unit , area ) then
59481: LD_VAR 0 1
59485: PPUSH
59486: LD_VAR 0 2
59490: PPUSH
59491: CALL_OW 308
59495: IFFALSE 59513
// begin ComMoveToArea ( unit , goAway ) ;
59497: LD_VAR 0 1
59501: PPUSH
59502: LD_VAR 0 3
59506: PPUSH
59507: CALL_OW 113
// exit ;
59511: GO 59599
// end ; if task [ 1 ] [ 1 ] <> M then
59513: LD_VAR 0 7
59517: PUSH
59518: LD_INT 1
59520: ARRAY
59521: PUSH
59522: LD_INT 1
59524: ARRAY
59525: PUSH
59526: LD_STRING M
59528: NONEQUAL
59529: IFFALSE 59533
// exit ;
59531: GO 59599
// x := task [ 1 ] [ 2 ] ;
59533: LD_ADDR_VAR 0 5
59537: PUSH
59538: LD_VAR 0 7
59542: PUSH
59543: LD_INT 1
59545: ARRAY
59546: PUSH
59547: LD_INT 2
59549: ARRAY
59550: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59551: LD_ADDR_VAR 0 6
59555: PUSH
59556: LD_VAR 0 7
59560: PUSH
59561: LD_INT 1
59563: ARRAY
59564: PUSH
59565: LD_INT 3
59567: ARRAY
59568: ST_TO_ADDR
// if InArea ( x , y , area ) then
59569: LD_VAR 0 5
59573: PPUSH
59574: LD_VAR 0 6
59578: PPUSH
59579: LD_VAR 0 2
59583: PPUSH
59584: CALL_OW 309
59588: IFFALSE 59599
// ComStop ( unit ) ;
59590: LD_VAR 0 1
59594: PPUSH
59595: CALL_OW 141
// end ;
59599: LD_VAR 0 4
59603: RET
// export function Abs ( value ) ; begin
59604: LD_INT 0
59606: PPUSH
// result := value ;
59607: LD_ADDR_VAR 0 2
59611: PUSH
59612: LD_VAR 0 1
59616: ST_TO_ADDR
// if value < 0 then
59617: LD_VAR 0 1
59621: PUSH
59622: LD_INT 0
59624: LESS
59625: IFFALSE 59642
// result := value * - 1 ;
59627: LD_ADDR_VAR 0 2
59631: PUSH
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: MUL
59641: ST_TO_ADDR
// end ;
59642: LD_VAR 0 2
59646: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59647: LD_INT 0
59649: PPUSH
59650: PPUSH
59651: PPUSH
59652: PPUSH
59653: PPUSH
59654: PPUSH
59655: PPUSH
59656: PPUSH
// if not unit or not building then
59657: LD_VAR 0 1
59661: NOT
59662: PUSH
59663: LD_VAR 0 2
59667: NOT
59668: OR
59669: IFFALSE 59673
// exit ;
59671: GO 59899
// x := GetX ( building ) ;
59673: LD_ADDR_VAR 0 4
59677: PUSH
59678: LD_VAR 0 2
59682: PPUSH
59683: CALL_OW 250
59687: ST_TO_ADDR
// y := GetY ( building ) ;
59688: LD_ADDR_VAR 0 6
59692: PUSH
59693: LD_VAR 0 2
59697: PPUSH
59698: CALL_OW 251
59702: ST_TO_ADDR
// d := GetDir ( building ) ;
59703: LD_ADDR_VAR 0 8
59707: PUSH
59708: LD_VAR 0 2
59712: PPUSH
59713: CALL_OW 254
59717: ST_TO_ADDR
// r := 4 ;
59718: LD_ADDR_VAR 0 9
59722: PUSH
59723: LD_INT 4
59725: ST_TO_ADDR
// for i := 1 to 5 do
59726: LD_ADDR_VAR 0 10
59730: PUSH
59731: DOUBLE
59732: LD_INT 1
59734: DEC
59735: ST_TO_ADDR
59736: LD_INT 5
59738: PUSH
59739: FOR_TO
59740: IFFALSE 59897
// begin _x := ShiftX ( x , d , r + i ) ;
59742: LD_ADDR_VAR 0 5
59746: PUSH
59747: LD_VAR 0 4
59751: PPUSH
59752: LD_VAR 0 8
59756: PPUSH
59757: LD_VAR 0 9
59761: PUSH
59762: LD_VAR 0 10
59766: PLUS
59767: PPUSH
59768: CALL_OW 272
59772: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59773: LD_ADDR_VAR 0 7
59777: PUSH
59778: LD_VAR 0 6
59782: PPUSH
59783: LD_VAR 0 8
59787: PPUSH
59788: LD_VAR 0 9
59792: PUSH
59793: LD_VAR 0 10
59797: PLUS
59798: PPUSH
59799: CALL_OW 273
59803: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59804: LD_VAR 0 5
59808: PPUSH
59809: LD_VAR 0 7
59813: PPUSH
59814: CALL_OW 488
59818: PUSH
59819: LD_VAR 0 5
59823: PPUSH
59824: LD_VAR 0 7
59828: PPUSH
59829: CALL_OW 428
59833: PPUSH
59834: CALL_OW 247
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: IN
59849: NOT
59850: AND
59851: IFFALSE 59895
// begin ComMoveXY ( unit , _x , _y ) ;
59853: LD_VAR 0 1
59857: PPUSH
59858: LD_VAR 0 5
59862: PPUSH
59863: LD_VAR 0 7
59867: PPUSH
59868: CALL_OW 111
// result := [ _x , _y ] ;
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: LD_VAR 0 5
59881: PUSH
59882: LD_VAR 0 7
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: ST_TO_ADDR
// exit ;
59891: POP
59892: POP
59893: GO 59899
// end ; end ;
59895: GO 59739
59897: POP
59898: POP
// end ;
59899: LD_VAR 0 3
59903: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59904: LD_INT 0
59906: PPUSH
59907: PPUSH
59908: PPUSH
// result := 0 ;
59909: LD_ADDR_VAR 0 3
59913: PUSH
59914: LD_INT 0
59916: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59917: LD_VAR 0 1
59921: PUSH
59922: LD_INT 0
59924: LESS
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: LD_INT 8
59933: GREATER
59934: OR
59935: PUSH
59936: LD_VAR 0 2
59940: PUSH
59941: LD_INT 0
59943: LESS
59944: OR
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 8
59953: GREATER
59954: OR
59955: IFFALSE 59959
// exit ;
59957: GO 60034
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59959: LD_ADDR_VAR 0 4
59963: PUSH
59964: LD_INT 22
59966: PUSH
59967: LD_VAR 0 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PPUSH
59976: CALL_OW 69
59980: PUSH
59981: FOR_IN
59982: IFFALSE 60032
// begin un := UnitShoot ( i ) ;
59984: LD_ADDR_VAR 0 5
59988: PUSH
59989: LD_VAR 0 4
59993: PPUSH
59994: CALL_OW 504
59998: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59999: LD_VAR 0 5
60003: PPUSH
60004: CALL_OW 255
60008: PUSH
60009: LD_VAR 0 1
60013: EQUAL
60014: IFFALSE 60030
// begin result := un ;
60016: LD_ADDR_VAR 0 3
60020: PUSH
60021: LD_VAR 0 5
60025: ST_TO_ADDR
// exit ;
60026: POP
60027: POP
60028: GO 60034
// end ; end ;
60030: GO 59981
60032: POP
60033: POP
// end ;
60034: LD_VAR 0 3
60038: RET
// export function GetCargoBay ( units ) ; begin
60039: LD_INT 0
60041: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60042: LD_ADDR_VAR 0 2
60046: PUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 34
60057: PUSH
60058: LD_INT 12
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 34
60067: PUSH
60068: LD_INT 51
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 34
60077: PUSH
60078: LD_INT 32
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 34
60087: PUSH
60088: LD_EXP 78
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: PPUSH
60104: CALL_OW 72
60108: ST_TO_ADDR
// end ;
60109: LD_VAR 0 2
60113: RET
// export function Negate ( value ) ; begin
60114: LD_INT 0
60116: PPUSH
// result := not value ;
60117: LD_ADDR_VAR 0 2
60121: PUSH
60122: LD_VAR 0 1
60126: NOT
60127: ST_TO_ADDR
// end ;
60128: LD_VAR 0 2
60132: RET
// export function Inc ( value ) ; begin
60133: LD_INT 0
60135: PPUSH
// result := value + 1 ;
60136: LD_ADDR_VAR 0 2
60140: PUSH
60141: LD_VAR 0 1
60145: PUSH
60146: LD_INT 1
60148: PLUS
60149: ST_TO_ADDR
// end ;
60150: LD_VAR 0 2
60154: RET
// export function Dec ( value ) ; begin
60155: LD_INT 0
60157: PPUSH
// result := value - 1 ;
60158: LD_ADDR_VAR 0 2
60162: PUSH
60163: LD_VAR 0 1
60167: PUSH
60168: LD_INT 1
60170: MINUS
60171: ST_TO_ADDR
// end ;
60172: LD_VAR 0 2
60176: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60177: LD_INT 0
60179: PPUSH
60180: PPUSH
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
60185: PPUSH
60186: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60187: LD_VAR 0 1
60191: PPUSH
60192: LD_VAR 0 2
60196: PPUSH
60197: CALL_OW 488
60201: NOT
60202: PUSH
60203: LD_VAR 0 3
60207: PPUSH
60208: LD_VAR 0 4
60212: PPUSH
60213: CALL_OW 488
60217: NOT
60218: OR
60219: IFFALSE 60232
// begin result := - 1 ;
60221: LD_ADDR_VAR 0 5
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: ST_TO_ADDR
// exit ;
60230: GO 60467
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60232: LD_ADDR_VAR 0 12
60236: PUSH
60237: LD_VAR 0 1
60241: PPUSH
60242: LD_VAR 0 2
60246: PPUSH
60247: LD_VAR 0 3
60251: PPUSH
60252: LD_VAR 0 4
60256: PPUSH
60257: CALL 59315 0 4
60261: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60262: LD_ADDR_VAR 0 11
60266: PUSH
60267: LD_VAR 0 1
60271: PPUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: LD_VAR 0 12
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: PPUSH
60286: LD_VAR 0 12
60290: PUSH
60291: LD_INT 2
60293: ARRAY
60294: PPUSH
60295: CALL_OW 298
60299: ST_TO_ADDR
// distance := 9999 ;
60300: LD_ADDR_VAR 0 10
60304: PUSH
60305: LD_INT 9999
60307: ST_TO_ADDR
// for i := 0 to 5 do
60308: LD_ADDR_VAR 0 6
60312: PUSH
60313: DOUBLE
60314: LD_INT 0
60316: DEC
60317: ST_TO_ADDR
60318: LD_INT 5
60320: PUSH
60321: FOR_TO
60322: IFFALSE 60465
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60324: LD_ADDR_VAR 0 7
60328: PUSH
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_VAR 0 6
60338: PPUSH
60339: LD_VAR 0 11
60343: PPUSH
60344: CALL_OW 272
60348: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60349: LD_ADDR_VAR 0 8
60353: PUSH
60354: LD_VAR 0 2
60358: PPUSH
60359: LD_VAR 0 6
60363: PPUSH
60364: LD_VAR 0 11
60368: PPUSH
60369: CALL_OW 273
60373: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60374: LD_VAR 0 7
60378: PPUSH
60379: LD_VAR 0 8
60383: PPUSH
60384: CALL_OW 488
60388: NOT
60389: IFFALSE 60393
// continue ;
60391: GO 60321
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60393: LD_ADDR_VAR 0 9
60397: PUSH
60398: LD_VAR 0 12
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PPUSH
60407: LD_VAR 0 12
60411: PUSH
60412: LD_INT 2
60414: ARRAY
60415: PPUSH
60416: LD_VAR 0 7
60420: PPUSH
60421: LD_VAR 0 8
60425: PPUSH
60426: CALL_OW 298
60430: ST_TO_ADDR
// if tmp < distance then
60431: LD_VAR 0 9
60435: PUSH
60436: LD_VAR 0 10
60440: LESS
60441: IFFALSE 60463
// begin result := i ;
60443: LD_ADDR_VAR 0 5
60447: PUSH
60448: LD_VAR 0 6
60452: ST_TO_ADDR
// distance := tmp ;
60453: LD_ADDR_VAR 0 10
60457: PUSH
60458: LD_VAR 0 9
60462: ST_TO_ADDR
// end ; end ;
60463: GO 60321
60465: POP
60466: POP
// end ;
60467: LD_VAR 0 5
60471: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60472: LD_INT 0
60474: PPUSH
60475: PPUSH
// if not driver or not IsInUnit ( driver ) then
60476: LD_VAR 0 1
60480: NOT
60481: PUSH
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 310
60491: NOT
60492: OR
60493: IFFALSE 60497
// exit ;
60495: GO 60587
// vehicle := IsInUnit ( driver ) ;
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 310
60511: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60512: LD_VAR 0 1
60516: PPUSH
60517: LD_STRING \
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: PUSH
60547: LD_STRING E
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_VAR 0 3
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PPUSH
60583: CALL_OW 446
// end ;
60587: LD_VAR 0 2
60591: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60592: LD_INT 0
60594: PPUSH
60595: PPUSH
// if not driver or not IsInUnit ( driver ) then
60596: LD_VAR 0 1
60600: NOT
60601: PUSH
60602: LD_VAR 0 1
60606: PPUSH
60607: CALL_OW 310
60611: NOT
60612: OR
60613: IFFALSE 60617
// exit ;
60615: GO 60707
// vehicle := IsInUnit ( driver ) ;
60617: LD_ADDR_VAR 0 3
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 310
60631: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60632: LD_VAR 0 1
60636: PPUSH
60637: LD_STRING \
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: PUSH
60667: LD_STRING E
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_VAR 0 3
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PPUSH
60703: CALL_OW 447
// end ;
60707: LD_VAR 0 2
60711: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60712: LD_INT 0
60714: PPUSH
60715: PPUSH
60716: PPUSH
// tmp := [ ] ;
60717: LD_ADDR_VAR 0 5
60721: PUSH
60722: EMPTY
60723: ST_TO_ADDR
// for i in units do
60724: LD_ADDR_VAR 0 4
60728: PUSH
60729: LD_VAR 0 1
60733: PUSH
60734: FOR_IN
60735: IFFALSE 60773
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60737: LD_ADDR_VAR 0 5
60741: PUSH
60742: LD_VAR 0 5
60746: PPUSH
60747: LD_VAR 0 5
60751: PUSH
60752: LD_INT 1
60754: PLUS
60755: PPUSH
60756: LD_VAR 0 4
60760: PPUSH
60761: CALL_OW 256
60765: PPUSH
60766: CALL_OW 2
60770: ST_TO_ADDR
60771: GO 60734
60773: POP
60774: POP
// if not tmp then
60775: LD_VAR 0 5
60779: NOT
60780: IFFALSE 60784
// exit ;
60782: GO 60832
// if asc then
60784: LD_VAR 0 2
60788: IFFALSE 60812
// result := SortListByListAsc ( units , tmp ) else
60790: LD_ADDR_VAR 0 3
60794: PUSH
60795: LD_VAR 0 1
60799: PPUSH
60800: LD_VAR 0 5
60804: PPUSH
60805: CALL_OW 76
60809: ST_TO_ADDR
60810: GO 60832
// result := SortListByListDesc ( units , tmp ) ;
60812: LD_ADDR_VAR 0 3
60816: PUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: LD_VAR 0 5
60826: PPUSH
60827: CALL_OW 77
60831: ST_TO_ADDR
// end ;
60832: LD_VAR 0 3
60836: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60837: LD_INT 0
60839: PPUSH
60840: PPUSH
// task := GetTaskList ( mech ) ;
60841: LD_ADDR_VAR 0 4
60845: PUSH
60846: LD_VAR 0 1
60850: PPUSH
60851: CALL_OW 437
60855: ST_TO_ADDR
// if not task then
60856: LD_VAR 0 4
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 60907
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60865: LD_ADDR_VAR 0 3
60869: PUSH
60870: LD_VAR 0 4
60874: PUSH
60875: LD_INT 1
60877: ARRAY
60878: PUSH
60879: LD_INT 1
60881: ARRAY
60882: PUSH
60883: LD_STRING r
60885: EQUAL
60886: PUSH
60887: LD_VAR 0 4
60891: PUSH
60892: LD_INT 1
60894: ARRAY
60895: PUSH
60896: LD_INT 4
60898: ARRAY
60899: PUSH
60900: LD_VAR 0 2
60904: EQUAL
60905: AND
60906: ST_TO_ADDR
// end ;
60907: LD_VAR 0 3
60911: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60912: LD_INT 0
60914: PPUSH
// SetDir ( unit , d ) ;
60915: LD_VAR 0 1
60919: PPUSH
60920: LD_VAR 0 4
60924: PPUSH
60925: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60929: LD_VAR 0 1
60933: PPUSH
60934: LD_VAR 0 2
60938: PPUSH
60939: LD_VAR 0 3
60943: PPUSH
60944: LD_VAR 0 5
60948: PPUSH
60949: CALL_OW 48
// end ;
60953: LD_VAR 0 6
60957: RET
// export function ToNaturalNumber ( number ) ; begin
60958: LD_INT 0
60960: PPUSH
// result := number div 1 ;
60961: LD_ADDR_VAR 0 2
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 1
60973: DIV
60974: ST_TO_ADDR
// if number < 0 then
60975: LD_VAR 0 1
60979: PUSH
60980: LD_INT 0
60982: LESS
60983: IFFALSE 60993
// result := 0 ;
60985: LD_ADDR_VAR 0 2
60989: PUSH
60990: LD_INT 0
60992: ST_TO_ADDR
// end ;
60993: LD_VAR 0 2
60997: RET
// export function SortByClass ( units , class ) ; var un ; begin
60998: LD_INT 0
61000: PPUSH
61001: PPUSH
// if not units or not class then
61002: LD_VAR 0 1
61006: NOT
61007: PUSH
61008: LD_VAR 0 2
61012: NOT
61013: OR
61014: IFFALSE 61018
// exit ;
61016: GO 61113
// result := [ ] ;
61018: LD_ADDR_VAR 0 3
61022: PUSH
61023: EMPTY
61024: ST_TO_ADDR
// for un in units do
61025: LD_ADDR_VAR 0 4
61029: PUSH
61030: LD_VAR 0 1
61034: PUSH
61035: FOR_IN
61036: IFFALSE 61111
// if GetClass ( un ) = class then
61038: LD_VAR 0 4
61042: PPUSH
61043: CALL_OW 257
61047: PUSH
61048: LD_VAR 0 2
61052: EQUAL
61053: IFFALSE 61080
// result := Insert ( result , 1 , un ) else
61055: LD_ADDR_VAR 0 3
61059: PUSH
61060: LD_VAR 0 3
61064: PPUSH
61065: LD_INT 1
61067: PPUSH
61068: LD_VAR 0 4
61072: PPUSH
61073: CALL_OW 2
61077: ST_TO_ADDR
61078: GO 61109
// result := Replace ( result , result + 1 , un ) ;
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_VAR 0 3
61089: PPUSH
61090: LD_VAR 0 3
61094: PUSH
61095: LD_INT 1
61097: PLUS
61098: PPUSH
61099: LD_VAR 0 4
61103: PPUSH
61104: CALL_OW 1
61108: ST_TO_ADDR
61109: GO 61035
61111: POP
61112: POP
// end ;
61113: LD_VAR 0 3
61117: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61118: LD_INT 0
61120: PPUSH
61121: PPUSH
61122: PPUSH
61123: PPUSH
61124: PPUSH
61125: PPUSH
61126: PPUSH
// result := [ ] ;
61127: LD_ADDR_VAR 0 4
61131: PUSH
61132: EMPTY
61133: ST_TO_ADDR
// if x - r < 0 then
61134: LD_VAR 0 1
61138: PUSH
61139: LD_VAR 0 3
61143: MINUS
61144: PUSH
61145: LD_INT 0
61147: LESS
61148: IFFALSE 61160
// min_x := 0 else
61150: LD_ADDR_VAR 0 8
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
61158: GO 61176
// min_x := x - r ;
61160: LD_ADDR_VAR 0 8
61164: PUSH
61165: LD_VAR 0 1
61169: PUSH
61170: LD_VAR 0 3
61174: MINUS
61175: ST_TO_ADDR
// if y - r < 0 then
61176: LD_VAR 0 2
61180: PUSH
61181: LD_VAR 0 3
61185: MINUS
61186: PUSH
61187: LD_INT 0
61189: LESS
61190: IFFALSE 61202
// min_y := 0 else
61192: LD_ADDR_VAR 0 7
61196: PUSH
61197: LD_INT 0
61199: ST_TO_ADDR
61200: GO 61218
// min_y := y - r ;
61202: LD_ADDR_VAR 0 7
61206: PUSH
61207: LD_VAR 0 2
61211: PUSH
61212: LD_VAR 0 3
61216: MINUS
61217: ST_TO_ADDR
// max_x := x + r ;
61218: LD_ADDR_VAR 0 9
61222: PUSH
61223: LD_VAR 0 1
61227: PUSH
61228: LD_VAR 0 3
61232: PLUS
61233: ST_TO_ADDR
// max_y := y + r ;
61234: LD_ADDR_VAR 0 10
61238: PUSH
61239: LD_VAR 0 2
61243: PUSH
61244: LD_VAR 0 3
61248: PLUS
61249: ST_TO_ADDR
// for _x = min_x to max_x do
61250: LD_ADDR_VAR 0 5
61254: PUSH
61255: DOUBLE
61256: LD_VAR 0 8
61260: DEC
61261: ST_TO_ADDR
61262: LD_VAR 0 9
61266: PUSH
61267: FOR_TO
61268: IFFALSE 61369
// for _y = min_y to max_y do
61270: LD_ADDR_VAR 0 6
61274: PUSH
61275: DOUBLE
61276: LD_VAR 0 7
61280: DEC
61281: ST_TO_ADDR
61282: LD_VAR 0 10
61286: PUSH
61287: FOR_TO
61288: IFFALSE 61365
// begin if not ValidHex ( _x , _y ) then
61290: LD_VAR 0 5
61294: PPUSH
61295: LD_VAR 0 6
61299: PPUSH
61300: CALL_OW 488
61304: NOT
61305: IFFALSE 61309
// continue ;
61307: GO 61287
// if GetResourceTypeXY ( _x , _y ) then
61309: LD_VAR 0 5
61313: PPUSH
61314: LD_VAR 0 6
61318: PPUSH
61319: CALL_OW 283
61323: IFFALSE 61363
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61325: LD_ADDR_VAR 0 4
61329: PUSH
61330: LD_VAR 0 4
61334: PPUSH
61335: LD_VAR 0 4
61339: PUSH
61340: LD_INT 1
61342: PLUS
61343: PPUSH
61344: LD_VAR 0 5
61348: PUSH
61349: LD_VAR 0 6
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PPUSH
61358: CALL_OW 1
61362: ST_TO_ADDR
// end ;
61363: GO 61287
61365: POP
61366: POP
61367: GO 61267
61369: POP
61370: POP
// end ;
61371: LD_VAR 0 4
61375: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61376: LD_INT 0
61378: PPUSH
61379: PPUSH
61380: PPUSH
61381: PPUSH
61382: PPUSH
61383: PPUSH
61384: PPUSH
61385: PPUSH
// if not units then
61386: LD_VAR 0 1
61390: NOT
61391: IFFALSE 61395
// exit ;
61393: GO 61820
// result := UnitFilter ( units , [ f_ok ] ) ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: LD_INT 50
61407: PUSH
61408: EMPTY
61409: LIST
61410: PPUSH
61411: CALL_OW 72
61415: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61416: LD_ADDR_VAR 0 8
61420: PUSH
61421: LD_VAR 0 1
61425: PUSH
61426: LD_INT 1
61428: ARRAY
61429: PPUSH
61430: CALL_OW 255
61434: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
61435: LD_ADDR_VAR 0 10
61439: PUSH
61440: LD_INT 29
61442: PUSH
61443: LD_EXP 81
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// if not result then
61452: LD_VAR 0 3
61456: NOT
61457: IFFALSE 61461
// exit ;
61459: GO 61820
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61461: LD_ADDR_VAR 0 5
61465: PUSH
61466: LD_INT 81
61468: PUSH
61469: LD_VAR 0 8
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PPUSH
61478: CALL_OW 69
61482: ST_TO_ADDR
// for i in result do
61483: LD_ADDR_VAR 0 4
61487: PUSH
61488: LD_VAR 0 3
61492: PUSH
61493: FOR_IN
61494: IFFALSE 61818
// begin tag := GetTag ( i ) + 1 ;
61496: LD_ADDR_VAR 0 9
61500: PUSH
61501: LD_VAR 0 4
61505: PPUSH
61506: CALL_OW 110
61510: PUSH
61511: LD_INT 1
61513: PLUS
61514: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61515: LD_ADDR_VAR 0 7
61519: PUSH
61520: LD_VAR 0 4
61524: PPUSH
61525: CALL_OW 250
61529: PPUSH
61530: LD_VAR 0 4
61534: PPUSH
61535: CALL_OW 251
61539: PPUSH
61540: LD_INT 6
61542: PPUSH
61543: CALL 61118 0 3
61547: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61548: LD_VAR 0 7
61552: PUSH
61553: LD_VAR 0 4
61557: PPUSH
61558: CALL_OW 264
61562: PUSH
61563: LD_VAR 0 10
61567: IN
61568: NOT
61569: AND
61570: IFFALSE 61609
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61572: LD_VAR 0 4
61576: PPUSH
61577: LD_VAR 0 7
61581: PUSH
61582: LD_INT 1
61584: ARRAY
61585: PUSH
61586: LD_INT 1
61588: ARRAY
61589: PPUSH
61590: LD_VAR 0 7
61594: PUSH
61595: LD_INT 1
61597: ARRAY
61598: PUSH
61599: LD_INT 2
61601: ARRAY
61602: PPUSH
61603: CALL_OW 116
61607: GO 61816
// if path > tag then
61609: LD_VAR 0 2
61613: PUSH
61614: LD_VAR 0 9
61618: GREATER
61619: IFFALSE 61786
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
61621: LD_ADDR_VAR 0 6
61625: PUSH
61626: LD_VAR 0 5
61630: PPUSH
61631: LD_INT 91
61633: PUSH
61634: LD_VAR 0 4
61638: PUSH
61639: LD_INT 12
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: PPUSH
61647: CALL_OW 72
61651: ST_TO_ADDR
// if nearEnemy then
61652: LD_VAR 0 6
61656: IFFALSE 61684
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61658: LD_VAR 0 4
61662: PPUSH
61663: LD_VAR 0 6
61667: PPUSH
61668: LD_VAR 0 4
61672: PPUSH
61673: CALL_OW 74
61677: PPUSH
61678: CALL_OW 115
61682: GO 61784
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61684: LD_VAR 0 4
61688: PPUSH
61689: LD_VAR 0 2
61693: PUSH
61694: LD_VAR 0 9
61698: ARRAY
61699: PUSH
61700: LD_INT 1
61702: ARRAY
61703: PPUSH
61704: LD_VAR 0 2
61708: PUSH
61709: LD_VAR 0 9
61713: ARRAY
61714: PUSH
61715: LD_INT 2
61717: ARRAY
61718: PPUSH
61719: CALL_OW 297
61723: PUSH
61724: LD_INT 6
61726: GREATER
61727: IFFALSE 61770
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61729: LD_VAR 0 4
61733: PPUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_VAR 0 9
61743: ARRAY
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PPUSH
61749: LD_VAR 0 2
61753: PUSH
61754: LD_VAR 0 9
61758: ARRAY
61759: PUSH
61760: LD_INT 2
61762: ARRAY
61763: PPUSH
61764: CALL_OW 114
61768: GO 61784
// SetTag ( i , tag ) ;
61770: LD_VAR 0 4
61774: PPUSH
61775: LD_VAR 0 9
61779: PPUSH
61780: CALL_OW 109
// end else
61784: GO 61816
// if enemy then
61786: LD_VAR 0 5
61790: IFFALSE 61816
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61792: LD_VAR 0 4
61796: PPUSH
61797: LD_VAR 0 5
61801: PPUSH
61802: LD_VAR 0 4
61806: PPUSH
61807: CALL_OW 74
61811: PPUSH
61812: CALL_OW 115
// end ;
61816: GO 61493
61818: POP
61819: POP
// end ;
61820: LD_VAR 0 3
61824: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61825: LD_INT 0
61827: PPUSH
61828: PPUSH
61829: PPUSH
// if not unit or IsInUnit ( unit ) then
61830: LD_VAR 0 1
61834: NOT
61835: PUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 310
61845: OR
61846: IFFALSE 61850
// exit ;
61848: GO 61941
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61850: LD_ADDR_VAR 0 4
61854: PUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 250
61864: PPUSH
61865: LD_VAR 0 2
61869: PPUSH
61870: LD_INT 1
61872: PPUSH
61873: CALL_OW 272
61877: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61878: LD_ADDR_VAR 0 5
61882: PUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: CALL_OW 251
61892: PPUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: LD_INT 1
61900: PPUSH
61901: CALL_OW 273
61905: ST_TO_ADDR
// if ValidHex ( x , y ) then
61906: LD_VAR 0 4
61910: PPUSH
61911: LD_VAR 0 5
61915: PPUSH
61916: CALL_OW 488
61920: IFFALSE 61941
// ComTurnXY ( unit , x , y ) ;
61922: LD_VAR 0 1
61926: PPUSH
61927: LD_VAR 0 4
61931: PPUSH
61932: LD_VAR 0 5
61936: PPUSH
61937: CALL_OW 118
// end ;
61941: LD_VAR 0 3
61945: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61946: LD_INT 0
61948: PPUSH
61949: PPUSH
// result := false ;
61950: LD_ADDR_VAR 0 3
61954: PUSH
61955: LD_INT 0
61957: ST_TO_ADDR
// if not units then
61958: LD_VAR 0 2
61962: NOT
61963: IFFALSE 61967
// exit ;
61965: GO 62012
// for i in units do
61967: LD_ADDR_VAR 0 4
61971: PUSH
61972: LD_VAR 0 2
61976: PUSH
61977: FOR_IN
61978: IFFALSE 62010
// if See ( side , i ) then
61980: LD_VAR 0 1
61984: PPUSH
61985: LD_VAR 0 4
61989: PPUSH
61990: CALL_OW 292
61994: IFFALSE 62008
// begin result := true ;
61996: LD_ADDR_VAR 0 3
62000: PUSH
62001: LD_INT 1
62003: ST_TO_ADDR
// exit ;
62004: POP
62005: POP
62006: GO 62012
// end ;
62008: GO 61977
62010: POP
62011: POP
// end ;
62012: LD_VAR 0 3
62016: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62017: LD_INT 0
62019: PPUSH
62020: PPUSH
62021: PPUSH
62022: PPUSH
// if not unit or not points then
62023: LD_VAR 0 1
62027: NOT
62028: PUSH
62029: LD_VAR 0 2
62033: NOT
62034: OR
62035: IFFALSE 62039
// exit ;
62037: GO 62129
// dist := 99999 ;
62039: LD_ADDR_VAR 0 5
62043: PUSH
62044: LD_INT 99999
62046: ST_TO_ADDR
// for i in points do
62047: LD_ADDR_VAR 0 4
62051: PUSH
62052: LD_VAR 0 2
62056: PUSH
62057: FOR_IN
62058: IFFALSE 62127
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62060: LD_ADDR_VAR 0 6
62064: PUSH
62065: LD_VAR 0 1
62069: PPUSH
62070: LD_VAR 0 4
62074: PUSH
62075: LD_INT 1
62077: ARRAY
62078: PPUSH
62079: LD_VAR 0 4
62083: PUSH
62084: LD_INT 2
62086: ARRAY
62087: PPUSH
62088: CALL_OW 297
62092: ST_TO_ADDR
// if tmpDist < dist then
62093: LD_VAR 0 6
62097: PUSH
62098: LD_VAR 0 5
62102: LESS
62103: IFFALSE 62125
// begin result := i ;
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: LD_VAR 0 4
62114: ST_TO_ADDR
// dist := tmpDist ;
62115: LD_ADDR_VAR 0 5
62119: PUSH
62120: LD_VAR 0 6
62124: ST_TO_ADDR
// end ; end ;
62125: GO 62057
62127: POP
62128: POP
// end ; end_of_file
62129: LD_VAR 0 3
62133: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
62134: LD_INT 0
62136: PPUSH
// ar_miner := 81 ;
62137: LD_ADDR_EXP 84
62141: PUSH
62142: LD_INT 81
62144: ST_TO_ADDR
// ar_crane := 88 ;
62145: LD_ADDR_EXP 83
62149: PUSH
62150: LD_INT 88
62152: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62153: LD_ADDR_EXP 78
62157: PUSH
62158: LD_INT 89
62160: ST_TO_ADDR
// us_hack := 99 ;
62161: LD_ADDR_EXP 79
62165: PUSH
62166: LD_INT 99
62168: ST_TO_ADDR
// us_artillery := 97 ;
62169: LD_ADDR_EXP 80
62173: PUSH
62174: LD_INT 97
62176: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62177: LD_ADDR_EXP 81
62181: PUSH
62182: LD_INT 91
62184: ST_TO_ADDR
// ar_mortar := 92 ;
62185: LD_ADDR_EXP 82
62189: PUSH
62190: LD_INT 92
62192: ST_TO_ADDR
// ru_radar := 98 ;
62193: LD_ADDR_EXP 77
62197: PUSH
62198: LD_INT 98
62200: ST_TO_ADDR
// tech_Artillery := 80 ;
62201: LD_ADDR_EXP 85
62205: PUSH
62206: LD_INT 80
62208: ST_TO_ADDR
// tech_RadMat := 81 ;
62209: LD_ADDR_EXP 86
62213: PUSH
62214: LD_INT 81
62216: ST_TO_ADDR
// tech_BasicTools := 82 ;
62217: LD_ADDR_EXP 87
62221: PUSH
62222: LD_INT 82
62224: ST_TO_ADDR
// tech_Cargo := 83 ;
62225: LD_ADDR_EXP 88
62229: PUSH
62230: LD_INT 83
62232: ST_TO_ADDR
// tech_Track := 84 ;
62233: LD_ADDR_EXP 89
62237: PUSH
62238: LD_INT 84
62240: ST_TO_ADDR
// tech_Crane := 85 ;
62241: LD_ADDR_EXP 90
62245: PUSH
62246: LD_INT 85
62248: ST_TO_ADDR
// tech_Bulldozer := 86 ;
62249: LD_ADDR_EXP 91
62253: PUSH
62254: LD_INT 86
62256: ST_TO_ADDR
// tech_Hovercraft := 87 ;
62257: LD_ADDR_EXP 92
62261: PUSH
62262: LD_INT 87
62264: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
62265: LD_ADDR_EXP 93
62269: PUSH
62270: LD_INT 88
62272: ST_TO_ADDR
// class_mastodont := 31 ;
62273: LD_ADDR_EXP 94
62277: PUSH
62278: LD_INT 31
62280: ST_TO_ADDR
// class_horse := 21 ;
62281: LD_ADDR_EXP 95
62285: PUSH
62286: LD_INT 21
62288: ST_TO_ADDR
// end ;
62289: LD_VAR 0 1
62293: RET
// every 1 do
62294: GO 62296
62296: DISABLE
// InitGlobalVariables ; end_of_file
62297: CALL 62134 0 0
62301: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 200
62309: DOUBLE
62310: GREATEREQUAL
62311: IFFALSE 62319
62313: LD_INT 299
62315: DOUBLE
62316: LESSEQUAL
62317: IFTRUE 62321
62319: GO 62353
62321: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62322: LD_VAR 0 1
62326: PPUSH
62327: LD_VAR 0 2
62331: PPUSH
62332: LD_VAR 0 3
62336: PPUSH
62337: LD_VAR 0 4
62341: PPUSH
62342: LD_VAR 0 5
62346: PPUSH
62347: CALL 62843 0 5
62351: GO 62430
62353: LD_INT 300
62355: DOUBLE
62356: GREATEREQUAL
62357: IFFALSE 62365
62359: LD_INT 399
62361: DOUBLE
62362: LESSEQUAL
62363: IFTRUE 62367
62365: GO 62429
62367: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62368: LD_VAR 0 1
62372: PPUSH
62373: LD_VAR 0 2
62377: PPUSH
62378: LD_VAR 0 3
62382: PPUSH
62383: LD_VAR 0 4
62387: PPUSH
62388: LD_VAR 0 5
62392: PPUSH
62393: LD_VAR 0 6
62397: PPUSH
62398: LD_VAR 0 7
62402: PPUSH
62403: LD_VAR 0 8
62407: PPUSH
62408: LD_VAR 0 9
62412: PPUSH
62413: LD_VAR 0 10
62417: PPUSH
62418: LD_VAR 0 11
62422: PPUSH
62423: CALL 20063 0 11
62427: GO 62430
62429: POP
// end ;
62430: PPOPN 11
62432: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62433: LD_VAR 0 1
62437: PPUSH
62438: LD_VAR 0 2
62442: PPUSH
62443: LD_VAR 0 3
62447: PPUSH
62448: LD_VAR 0 4
62452: PPUSH
62453: LD_VAR 0 5
62457: PPUSH
62458: CALL 62579 0 5
// end ; end_of_file
62462: PPOPN 5
62464: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62465: LD_INT 0
62467: PPUSH
62468: PPUSH
62469: PPUSH
62470: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 264
62480: PUSH
62481: LD_EXP 81
62485: EQUAL
62486: IFFALSE 62558
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62488: LD_INT 68
62490: PPUSH
62491: LD_VAR 0 1
62495: PPUSH
62496: CALL_OW 255
62500: PPUSH
62501: CALL_OW 321
62505: PUSH
62506: LD_INT 2
62508: EQUAL
62509: IFFALSE 62521
// eff := 70 else
62511: LD_ADDR_VAR 0 4
62515: PUSH
62516: LD_INT 70
62518: ST_TO_ADDR
62519: GO 62529
// eff := 30 ;
62521: LD_ADDR_VAR 0 4
62525: PUSH
62526: LD_INT 30
62528: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62529: LD_VAR 0 1
62533: PPUSH
62534: CALL_OW 250
62538: PPUSH
62539: LD_VAR 0 1
62543: PPUSH
62544: CALL_OW 251
62548: PPUSH
62549: LD_VAR 0 4
62553: PPUSH
62554: CALL_OW 495
// end ; end ;
62558: LD_VAR 0 2
62562: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62563: LD_INT 0
62565: PPUSH
// end ;
62566: LD_VAR 0 4
62570: RET
// export function SOS_Command ( cmd ) ; begin
62571: LD_INT 0
62573: PPUSH
// end ;
62574: LD_VAR 0 2
62578: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62579: LD_INT 0
62581: PPUSH
// end ;
62582: LD_VAR 0 6
62586: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62587: LD_INT 0
62589: PPUSH
62590: PPUSH
// if not vehicle or not factory then
62591: LD_VAR 0 1
62595: NOT
62596: PUSH
62597: LD_VAR 0 2
62601: NOT
62602: OR
62603: IFFALSE 62607
// exit ;
62605: GO 62838
// if factoryWaypoints >= factory then
62607: LD_EXP 96
62611: PUSH
62612: LD_VAR 0 2
62616: GREATEREQUAL
62617: IFFALSE 62838
// if factoryWaypoints [ factory ] then
62619: LD_EXP 96
62623: PUSH
62624: LD_VAR 0 2
62628: ARRAY
62629: IFFALSE 62838
// begin if GetControl ( vehicle ) = control_manual then
62631: LD_VAR 0 1
62635: PPUSH
62636: CALL_OW 263
62640: PUSH
62641: LD_INT 1
62643: EQUAL
62644: IFFALSE 62725
// begin driver := IsDrivenBy ( vehicle ) ;
62646: LD_ADDR_VAR 0 4
62650: PUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: CALL_OW 311
62660: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
62661: LD_VAR 0 4
62665: PPUSH
62666: LD_EXP 96
62670: PUSH
62671: LD_VAR 0 2
62675: ARRAY
62676: PUSH
62677: LD_INT 1
62679: ARRAY
62680: PPUSH
62681: LD_EXP 96
62685: PUSH
62686: LD_VAR 0 2
62690: ARRAY
62691: PUSH
62692: LD_INT 2
62694: ARRAY
62695: PPUSH
62696: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62700: LD_VAR 0 4
62704: PPUSH
62705: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62709: LD_VAR 0 4
62713: PPUSH
62714: LD_VAR 0 2
62718: PPUSH
62719: CALL_OW 180
// end else
62723: GO 62838
// if GetControl ( vehicle ) = control_remote then
62725: LD_VAR 0 1
62729: PPUSH
62730: CALL_OW 263
62734: PUSH
62735: LD_INT 2
62737: EQUAL
62738: IFFALSE 62799
// begin wait ( 0 0$2 ) ;
62740: LD_INT 70
62742: PPUSH
62743: CALL_OW 67
// if Connect ( vehicle ) then
62747: LD_VAR 0 1
62751: PPUSH
62752: CALL 30000 0 1
62756: IFFALSE 62797
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
62758: LD_VAR 0 1
62762: PPUSH
62763: LD_EXP 96
62767: PUSH
62768: LD_VAR 0 2
62772: ARRAY
62773: PUSH
62774: LD_INT 1
62776: ARRAY
62777: PPUSH
62778: LD_EXP 96
62782: PUSH
62783: LD_VAR 0 2
62787: ARRAY
62788: PUSH
62789: LD_INT 2
62791: ARRAY
62792: PPUSH
62793: CALL_OW 171
// end else
62797: GO 62838
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
62799: LD_VAR 0 1
62803: PPUSH
62804: LD_EXP 96
62808: PUSH
62809: LD_VAR 0 2
62813: ARRAY
62814: PUSH
62815: LD_INT 1
62817: ARRAY
62818: PPUSH
62819: LD_EXP 96
62823: PUSH
62824: LD_VAR 0 2
62828: ARRAY
62829: PUSH
62830: LD_INT 2
62832: ARRAY
62833: PPUSH
62834: CALL_OW 171
// end ; end ;
62838: LD_VAR 0 3
62842: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62843: LD_INT 0
62845: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62846: LD_VAR 0 1
62850: PUSH
62851: LD_INT 250
62853: EQUAL
62854: PUSH
62855: LD_VAR 0 2
62859: PPUSH
62860: CALL_OW 264
62864: PUSH
62865: LD_EXP 84
62869: EQUAL
62870: AND
62871: IFFALSE 62892
// MinerPlaceMine ( unit , x , y ) ;
62873: LD_VAR 0 2
62877: PPUSH
62878: LD_VAR 0 4
62882: PPUSH
62883: LD_VAR 0 5
62887: PPUSH
62888: CALL 65620 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62892: LD_VAR 0 1
62896: PUSH
62897: LD_INT 251
62899: EQUAL
62900: PUSH
62901: LD_VAR 0 2
62905: PPUSH
62906: CALL_OW 264
62910: PUSH
62911: LD_EXP 84
62915: EQUAL
62916: AND
62917: IFFALSE 62938
// MinerDetonateMine ( unit , x , y ) ;
62919: LD_VAR 0 2
62923: PPUSH
62924: LD_VAR 0 4
62928: PPUSH
62929: LD_VAR 0 5
62933: PPUSH
62934: CALL 65897 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62938: LD_VAR 0 1
62942: PUSH
62943: LD_INT 252
62945: EQUAL
62946: PUSH
62947: LD_VAR 0 2
62951: PPUSH
62952: CALL_OW 264
62956: PUSH
62957: LD_EXP 84
62961: EQUAL
62962: AND
62963: IFFALSE 62984
// MinerCreateMinefield ( unit , x , y ) ;
62965: LD_VAR 0 2
62969: PPUSH
62970: LD_VAR 0 4
62974: PPUSH
62975: LD_VAR 0 5
62979: PPUSH
62980: CALL 66314 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62984: LD_VAR 0 1
62988: PUSH
62989: LD_INT 253
62991: EQUAL
62992: PUSH
62993: LD_VAR 0 2
62997: PPUSH
62998: CALL_OW 257
63002: PUSH
63003: LD_INT 5
63005: EQUAL
63006: AND
63007: IFFALSE 63028
// ComBinocular ( unit , x , y ) ;
63009: LD_VAR 0 2
63013: PPUSH
63014: LD_VAR 0 4
63018: PPUSH
63019: LD_VAR 0 5
63023: PPUSH
63024: CALL 66685 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63028: LD_VAR 0 1
63032: PUSH
63033: LD_INT 254
63035: EQUAL
63036: PUSH
63037: LD_VAR 0 2
63041: PPUSH
63042: CALL_OW 264
63046: PUSH
63047: LD_EXP 79
63051: EQUAL
63052: AND
63053: PUSH
63054: LD_VAR 0 3
63058: PPUSH
63059: CALL_OW 263
63063: PUSH
63064: LD_INT 3
63066: EQUAL
63067: AND
63068: IFFALSE 63084
// HackDestroyVehicle ( unit , selectedUnit ) ;
63070: LD_VAR 0 2
63074: PPUSH
63075: LD_VAR 0 3
63079: PPUSH
63080: CALL 64980 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63084: LD_VAR 0 1
63088: PUSH
63089: LD_INT 255
63091: EQUAL
63092: PUSH
63093: LD_VAR 0 2
63097: PPUSH
63098: CALL_OW 264
63102: PUSH
63103: LD_INT 14
63105: PUSH
63106: LD_INT 53
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: IN
63113: AND
63114: PUSH
63115: LD_VAR 0 4
63119: PPUSH
63120: LD_VAR 0 5
63124: PPUSH
63125: CALL_OW 488
63129: AND
63130: IFFALSE 63154
// CutTreeXYR ( unit , x , y , 12 ) ;
63132: LD_VAR 0 2
63136: PPUSH
63137: LD_VAR 0 4
63141: PPUSH
63142: LD_VAR 0 5
63146: PPUSH
63147: LD_INT 12
63149: PPUSH
63150: CALL 63546 0 4
// if cmd = 256 then
63154: LD_VAR 0 1
63158: PUSH
63159: LD_INT 256
63161: EQUAL
63162: IFFALSE 63183
// SetFactoryWaypoint ( unit , x , y ) ;
63164: LD_VAR 0 2
63168: PPUSH
63169: LD_VAR 0 4
63173: PPUSH
63174: LD_VAR 0 5
63178: PPUSH
63179: CALL 63188 0 3
// end ;
63183: LD_VAR 0 6
63187: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63188: LD_INT 0
63190: PPUSH
63191: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63192: LD_VAR 0 1
63196: NOT
63197: PUSH
63198: LD_VAR 0 2
63202: PPUSH
63203: LD_VAR 0 3
63207: PPUSH
63208: CALL_OW 488
63212: NOT
63213: OR
63214: PUSH
63215: LD_VAR 0 1
63219: PPUSH
63220: CALL_OW 266
63224: PUSH
63225: LD_INT 3
63227: NONEQUAL
63228: PUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: CALL_OW 247
63238: PUSH
63239: LD_INT 1
63241: EQUAL
63242: NOT
63243: AND
63244: OR
63245: IFFALSE 63249
// exit ;
63247: GO 63398
// if GetType ( factory ) = unit_human then
63249: LD_VAR 0 1
63253: PPUSH
63254: CALL_OW 247
63258: PUSH
63259: LD_INT 1
63261: EQUAL
63262: IFFALSE 63279
// factory := IsInUnit ( factory ) ;
63264: LD_ADDR_VAR 0 1
63268: PUSH
63269: LD_VAR 0 1
63273: PPUSH
63274: CALL_OW 310
63278: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63279: LD_VAR 0 1
63283: PPUSH
63284: CALL_OW 266
63288: PUSH
63289: LD_INT 3
63291: NONEQUAL
63292: IFFALSE 63296
// exit ;
63294: GO 63398
// if HexInfo ( x , y ) = factory then
63296: LD_VAR 0 2
63300: PPUSH
63301: LD_VAR 0 3
63305: PPUSH
63306: CALL_OW 428
63310: PUSH
63311: LD_VAR 0 1
63315: EQUAL
63316: IFFALSE 63343
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63318: LD_ADDR_EXP 96
63322: PUSH
63323: LD_EXP 96
63327: PPUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: LD_INT 0
63335: PPUSH
63336: CALL_OW 1
63340: ST_TO_ADDR
63341: GO 63394
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63343: LD_ADDR_EXP 96
63347: PUSH
63348: LD_EXP 96
63352: PPUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: LD_VAR 0 1
63362: PPUSH
63363: CALL_OW 255
63367: PUSH
63368: LD_VAR 0 1
63372: PUSH
63373: LD_VAR 0 2
63377: PUSH
63378: LD_VAR 0 3
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: PPUSH
63389: CALL_OW 1
63393: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63394: CALL 63403 0 0
// end ;
63398: LD_VAR 0 4
63402: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
63403: LD_INT 0
63405: PPUSH
63406: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63407: LD_STRING resetFactoryWaypoint();
63409: PPUSH
63410: CALL_OW 559
// if factoryWaypoints then
63414: LD_EXP 96
63418: IFFALSE 63541
// begin for i := 1 to factoryWaypoints do
63420: LD_ADDR_VAR 0 2
63424: PUSH
63425: DOUBLE
63426: LD_INT 1
63428: DEC
63429: ST_TO_ADDR
63430: LD_EXP 96
63434: PUSH
63435: FOR_TO
63436: IFFALSE 63539
// if factoryWaypoints [ i ] then
63438: LD_EXP 96
63442: PUSH
63443: LD_VAR 0 2
63447: ARRAY
63448: IFFALSE 63537
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
63450: LD_STRING setFactoryWaypointXY(
63452: PUSH
63453: LD_EXP 96
63457: PUSH
63458: LD_VAR 0 2
63462: ARRAY
63463: PUSH
63464: LD_INT 1
63466: ARRAY
63467: STR
63468: PUSH
63469: LD_STRING ,
63471: STR
63472: PUSH
63473: LD_EXP 96
63477: PUSH
63478: LD_VAR 0 2
63482: ARRAY
63483: PUSH
63484: LD_INT 2
63486: ARRAY
63487: STR
63488: PUSH
63489: LD_STRING ,
63491: STR
63492: PUSH
63493: LD_EXP 96
63497: PUSH
63498: LD_VAR 0 2
63502: ARRAY
63503: PUSH
63504: LD_INT 3
63506: ARRAY
63507: STR
63508: PUSH
63509: LD_STRING ,
63511: STR
63512: PUSH
63513: LD_EXP 96
63517: PUSH
63518: LD_VAR 0 2
63522: ARRAY
63523: PUSH
63524: LD_INT 4
63526: ARRAY
63527: STR
63528: PUSH
63529: LD_STRING )
63531: STR
63532: PPUSH
63533: CALL_OW 559
63537: GO 63435
63539: POP
63540: POP
// end ; end ;
63541: LD_VAR 0 1
63545: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63546: LD_INT 0
63548: PPUSH
63549: PPUSH
63550: PPUSH
63551: PPUSH
63552: PPUSH
63553: PPUSH
63554: PPUSH
63555: PPUSH
63556: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
63557: LD_VAR 0 1
63561: NOT
63562: PUSH
63563: LD_VAR 0 2
63567: PPUSH
63568: LD_VAR 0 3
63572: PPUSH
63573: CALL_OW 488
63577: NOT
63578: OR
63579: PUSH
63580: LD_VAR 0 4
63584: NOT
63585: OR
63586: IFFALSE 63590
// exit ;
63588: GO 63930
// list := [ ] ;
63590: LD_ADDR_VAR 0 13
63594: PUSH
63595: EMPTY
63596: ST_TO_ADDR
// if x - r < 0 then
63597: LD_VAR 0 2
63601: PUSH
63602: LD_VAR 0 4
63606: MINUS
63607: PUSH
63608: LD_INT 0
63610: LESS
63611: IFFALSE 63623
// min_x := 0 else
63613: LD_ADDR_VAR 0 7
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
63621: GO 63639
// min_x := x - r ;
63623: LD_ADDR_VAR 0 7
63627: PUSH
63628: LD_VAR 0 2
63632: PUSH
63633: LD_VAR 0 4
63637: MINUS
63638: ST_TO_ADDR
// if y - r < 0 then
63639: LD_VAR 0 3
63643: PUSH
63644: LD_VAR 0 4
63648: MINUS
63649: PUSH
63650: LD_INT 0
63652: LESS
63653: IFFALSE 63665
// min_y := 0 else
63655: LD_ADDR_VAR 0 8
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
63663: GO 63681
// min_y := y - r ;
63665: LD_ADDR_VAR 0 8
63669: PUSH
63670: LD_VAR 0 3
63674: PUSH
63675: LD_VAR 0 4
63679: MINUS
63680: ST_TO_ADDR
// max_x := x + r ;
63681: LD_ADDR_VAR 0 9
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_VAR 0 4
63695: PLUS
63696: ST_TO_ADDR
// max_y := y + r ;
63697: LD_ADDR_VAR 0 10
63701: PUSH
63702: LD_VAR 0 3
63706: PUSH
63707: LD_VAR 0 4
63711: PLUS
63712: ST_TO_ADDR
// for _x = min_x to max_x do
63713: LD_ADDR_VAR 0 11
63717: PUSH
63718: DOUBLE
63719: LD_VAR 0 7
63723: DEC
63724: ST_TO_ADDR
63725: LD_VAR 0 9
63729: PUSH
63730: FOR_TO
63731: IFFALSE 63848
// for _y = min_y to max_y do
63733: LD_ADDR_VAR 0 12
63737: PUSH
63738: DOUBLE
63739: LD_VAR 0 8
63743: DEC
63744: ST_TO_ADDR
63745: LD_VAR 0 10
63749: PUSH
63750: FOR_TO
63751: IFFALSE 63844
// begin if not ValidHex ( _x , _y ) then
63753: LD_VAR 0 11
63757: PPUSH
63758: LD_VAR 0 12
63762: PPUSH
63763: CALL_OW 488
63767: NOT
63768: IFFALSE 63772
// continue ;
63770: GO 63750
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63772: LD_VAR 0 11
63776: PPUSH
63777: LD_VAR 0 12
63781: PPUSH
63782: CALL_OW 351
63786: PUSH
63787: LD_VAR 0 11
63791: PPUSH
63792: LD_VAR 0 12
63796: PPUSH
63797: CALL_OW 554
63801: AND
63802: IFFALSE 63842
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63804: LD_ADDR_VAR 0 13
63808: PUSH
63809: LD_VAR 0 13
63813: PPUSH
63814: LD_VAR 0 13
63818: PUSH
63819: LD_INT 1
63821: PLUS
63822: PPUSH
63823: LD_VAR 0 11
63827: PUSH
63828: LD_VAR 0 12
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PPUSH
63837: CALL_OW 2
63841: ST_TO_ADDR
// end ;
63842: GO 63750
63844: POP
63845: POP
63846: GO 63730
63848: POP
63849: POP
// if not list then
63850: LD_VAR 0 13
63854: NOT
63855: IFFALSE 63859
// exit ;
63857: GO 63930
// for i in list do
63859: LD_ADDR_VAR 0 6
63863: PUSH
63864: LD_VAR 0 13
63868: PUSH
63869: FOR_IN
63870: IFFALSE 63928
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_STRING M
63879: PUSH
63880: LD_VAR 0 6
63884: PUSH
63885: LD_INT 1
63887: ARRAY
63888: PUSH
63889: LD_VAR 0 6
63893: PUSH
63894: LD_INT 2
63896: ARRAY
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: PPUSH
63922: CALL_OW 447
63926: GO 63869
63928: POP
63929: POP
// end ;
63930: LD_VAR 0 5
63934: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63935: LD_EXP 97
63939: NOT
63940: IFFALSE 63990
63942: GO 63944
63944: DISABLE
// begin initHack := true ;
63945: LD_ADDR_EXP 97
63949: PUSH
63950: LD_INT 1
63952: ST_TO_ADDR
// hackTanks := [ ] ;
63953: LD_ADDR_EXP 98
63957: PUSH
63958: EMPTY
63959: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63960: LD_ADDR_EXP 99
63964: PUSH
63965: EMPTY
63966: ST_TO_ADDR
// hackLimit := 3 ;
63967: LD_ADDR_EXP 100
63971: PUSH
63972: LD_INT 3
63974: ST_TO_ADDR
// hackDist := 12 ;
63975: LD_ADDR_EXP 101
63979: PUSH
63980: LD_INT 12
63982: ST_TO_ADDR
// hackCounter := [ ] ;
63983: LD_ADDR_EXP 102
63987: PUSH
63988: EMPTY
63989: ST_TO_ADDR
// end ;
63990: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63991: LD_EXP 97
63995: PUSH
63996: LD_INT 34
63998: PUSH
63999: LD_EXP 79
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PPUSH
64008: CALL_OW 69
64012: AND
64013: IFFALSE 64268
64015: GO 64017
64017: DISABLE
64018: LD_INT 0
64020: PPUSH
64021: PPUSH
// begin enable ;
64022: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64023: LD_ADDR_VAR 0 1
64027: PUSH
64028: LD_INT 34
64030: PUSH
64031: LD_EXP 79
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PPUSH
64040: CALL_OW 69
64044: PUSH
64045: FOR_IN
64046: IFFALSE 64266
// begin if not i in hackTanks then
64048: LD_VAR 0 1
64052: PUSH
64053: LD_EXP 98
64057: IN
64058: NOT
64059: IFFALSE 64142
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64061: LD_ADDR_EXP 98
64065: PUSH
64066: LD_EXP 98
64070: PPUSH
64071: LD_EXP 98
64075: PUSH
64076: LD_INT 1
64078: PLUS
64079: PPUSH
64080: LD_VAR 0 1
64084: PPUSH
64085: CALL_OW 1
64089: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64090: LD_ADDR_EXP 99
64094: PUSH
64095: LD_EXP 99
64099: PPUSH
64100: LD_EXP 99
64104: PUSH
64105: LD_INT 1
64107: PLUS
64108: PPUSH
64109: EMPTY
64110: PPUSH
64111: CALL_OW 1
64115: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64116: LD_ADDR_EXP 102
64120: PUSH
64121: LD_EXP 102
64125: PPUSH
64126: LD_EXP 102
64130: PUSH
64131: LD_INT 1
64133: PLUS
64134: PPUSH
64135: EMPTY
64136: PPUSH
64137: CALL_OW 1
64141: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64142: LD_VAR 0 1
64146: PPUSH
64147: CALL_OW 302
64151: NOT
64152: IFFALSE 64165
// begin HackUnlinkAll ( i ) ;
64154: LD_VAR 0 1
64158: PPUSH
64159: CALL 64271 0 1
// continue ;
64163: GO 64045
// end ; HackCheckCapturedStatus ( i ) ;
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL 64714 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64174: LD_ADDR_VAR 0 2
64178: PUSH
64179: LD_INT 81
64181: PUSH
64182: LD_VAR 0 1
64186: PPUSH
64187: CALL_OW 255
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 33
64198: PUSH
64199: LD_INT 3
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 91
64208: PUSH
64209: LD_VAR 0 1
64213: PUSH
64214: LD_EXP 101
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 50
64226: PUSH
64227: EMPTY
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: PPUSH
64236: CALL_OW 69
64240: ST_TO_ADDR
// if not tmp then
64241: LD_VAR 0 2
64245: NOT
64246: IFFALSE 64250
// continue ;
64248: GO 64045
// HackLink ( i , tmp ) ;
64250: LD_VAR 0 1
64254: PPUSH
64255: LD_VAR 0 2
64259: PPUSH
64260: CALL 64407 0 2
// end ;
64264: GO 64045
64266: POP
64267: POP
// end ;
64268: PPOPN 2
64270: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64271: LD_INT 0
64273: PPUSH
64274: PPUSH
64275: PPUSH
// if not hack in hackTanks then
64276: LD_VAR 0 1
64280: PUSH
64281: LD_EXP 98
64285: IN
64286: NOT
64287: IFFALSE 64291
// exit ;
64289: GO 64402
// index := GetElementIndex ( hackTanks , hack ) ;
64291: LD_ADDR_VAR 0 4
64295: PUSH
64296: LD_EXP 98
64300: PPUSH
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL 26814 0 2
64310: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64311: LD_EXP 99
64315: PUSH
64316: LD_VAR 0 4
64320: ARRAY
64321: IFFALSE 64402
// begin for i in hackTanksCaptured [ index ] do
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_EXP 99
64332: PUSH
64333: LD_VAR 0 4
64337: ARRAY
64338: PUSH
64339: FOR_IN
64340: IFFALSE 64366
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64342: LD_VAR 0 3
64346: PUSH
64347: LD_INT 1
64349: ARRAY
64350: PPUSH
64351: LD_VAR 0 3
64355: PUSH
64356: LD_INT 2
64358: ARRAY
64359: PPUSH
64360: CALL_OW 235
64364: GO 64339
64366: POP
64367: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64368: LD_ADDR_EXP 99
64372: PUSH
64373: LD_EXP 99
64377: PPUSH
64378: LD_VAR 0 4
64382: PPUSH
64383: EMPTY
64384: PPUSH
64385: CALL_OW 1
64389: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64390: LD_VAR 0 1
64394: PPUSH
64395: LD_INT 0
64397: PPUSH
64398: CALL_OW 505
// end ; end ;
64402: LD_VAR 0 2
64406: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
64407: LD_INT 0
64409: PPUSH
64410: PPUSH
64411: PPUSH
// if not hack in hackTanks or not vehicles then
64412: LD_VAR 0 1
64416: PUSH
64417: LD_EXP 98
64421: IN
64422: NOT
64423: PUSH
64424: LD_VAR 0 2
64428: NOT
64429: OR
64430: IFFALSE 64434
// exit ;
64432: GO 64709
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
64434: LD_ADDR_VAR 0 2
64438: PUSH
64439: LD_VAR 0 1
64443: PPUSH
64444: LD_VAR 0 2
64448: PPUSH
64449: LD_INT 1
64451: PPUSH
64452: LD_INT 1
64454: PPUSH
64455: CALL 27464 0 4
64459: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
64460: LD_ADDR_VAR 0 5
64464: PUSH
64465: LD_EXP 98
64469: PPUSH
64470: LD_VAR 0 1
64474: PPUSH
64475: CALL 26814 0 2
64479: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
64480: LD_EXP 99
64484: PUSH
64485: LD_VAR 0 5
64489: ARRAY
64490: PUSH
64491: LD_EXP 100
64495: LESS
64496: IFFALSE 64685
// begin for i := 1 to vehicles do
64498: LD_ADDR_VAR 0 4
64502: PUSH
64503: DOUBLE
64504: LD_INT 1
64506: DEC
64507: ST_TO_ADDR
64508: LD_VAR 0 2
64512: PUSH
64513: FOR_TO
64514: IFFALSE 64683
// begin if hackTanksCaptured [ index ] = hackLimit then
64516: LD_EXP 99
64520: PUSH
64521: LD_VAR 0 5
64525: ARRAY
64526: PUSH
64527: LD_EXP 100
64531: EQUAL
64532: IFFALSE 64536
// break ;
64534: GO 64683
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64536: LD_ADDR_EXP 102
64540: PUSH
64541: LD_EXP 102
64545: PPUSH
64546: LD_VAR 0 5
64550: PPUSH
64551: LD_EXP 102
64555: PUSH
64556: LD_VAR 0 5
64560: ARRAY
64561: PUSH
64562: LD_INT 1
64564: PLUS
64565: PPUSH
64566: CALL_OW 1
64570: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64571: LD_ADDR_EXP 99
64575: PUSH
64576: LD_EXP 99
64580: PPUSH
64581: LD_VAR 0 5
64585: PUSH
64586: LD_EXP 99
64590: PUSH
64591: LD_VAR 0 5
64595: ARRAY
64596: PUSH
64597: LD_INT 1
64599: PLUS
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PPUSH
64605: LD_VAR 0 2
64609: PUSH
64610: LD_VAR 0 4
64614: ARRAY
64615: PUSH
64616: LD_VAR 0 2
64620: PUSH
64621: LD_VAR 0 4
64625: ARRAY
64626: PPUSH
64627: CALL_OW 255
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PPUSH
64636: CALL 27029 0 3
64640: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64641: LD_VAR 0 2
64645: PUSH
64646: LD_VAR 0 4
64650: ARRAY
64651: PPUSH
64652: LD_VAR 0 1
64656: PPUSH
64657: CALL_OW 255
64661: PPUSH
64662: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64666: LD_VAR 0 2
64670: PUSH
64671: LD_VAR 0 4
64675: ARRAY
64676: PPUSH
64677: CALL_OW 141
// end ;
64681: GO 64513
64683: POP
64684: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64685: LD_VAR 0 1
64689: PPUSH
64690: LD_EXP 99
64694: PUSH
64695: LD_VAR 0 5
64699: ARRAY
64700: PUSH
64701: LD_INT 0
64703: PLUS
64704: PPUSH
64705: CALL_OW 505
// end ;
64709: LD_VAR 0 3
64713: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64714: LD_INT 0
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
// if not hack in hackTanks then
64720: LD_VAR 0 1
64724: PUSH
64725: LD_EXP 98
64729: IN
64730: NOT
64731: IFFALSE 64735
// exit ;
64733: GO 64975
// index := GetElementIndex ( hackTanks , hack ) ;
64735: LD_ADDR_VAR 0 4
64739: PUSH
64740: LD_EXP 98
64744: PPUSH
64745: LD_VAR 0 1
64749: PPUSH
64750: CALL 26814 0 2
64754: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64755: LD_ADDR_VAR 0 3
64759: PUSH
64760: DOUBLE
64761: LD_EXP 99
64765: PUSH
64766: LD_VAR 0 4
64770: ARRAY
64771: INC
64772: ST_TO_ADDR
64773: LD_INT 1
64775: PUSH
64776: FOR_DOWNTO
64777: IFFALSE 64949
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64779: LD_ADDR_VAR 0 5
64783: PUSH
64784: LD_EXP 99
64788: PUSH
64789: LD_VAR 0 4
64793: ARRAY
64794: PUSH
64795: LD_VAR 0 3
64799: ARRAY
64800: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64801: LD_VAR 0 5
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PPUSH
64810: CALL_OW 302
64814: NOT
64815: PUSH
64816: LD_VAR 0 5
64820: PUSH
64821: LD_INT 1
64823: ARRAY
64824: PPUSH
64825: CALL_OW 255
64829: PUSH
64830: LD_VAR 0 1
64834: PPUSH
64835: CALL_OW 255
64839: NONEQUAL
64840: OR
64841: IFFALSE 64947
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64843: LD_VAR 0 5
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PPUSH
64852: CALL_OW 305
64856: PUSH
64857: LD_VAR 0 5
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PPUSH
64866: CALL_OW 255
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: CALL_OW 255
64880: EQUAL
64881: AND
64882: IFFALSE 64906
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64884: LD_VAR 0 5
64888: PUSH
64889: LD_INT 1
64891: ARRAY
64892: PPUSH
64893: LD_VAR 0 5
64897: PUSH
64898: LD_INT 2
64900: ARRAY
64901: PPUSH
64902: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64906: LD_ADDR_EXP 99
64910: PUSH
64911: LD_EXP 99
64915: PPUSH
64916: LD_VAR 0 4
64920: PPUSH
64921: LD_EXP 99
64925: PUSH
64926: LD_VAR 0 4
64930: ARRAY
64931: PPUSH
64932: LD_VAR 0 3
64936: PPUSH
64937: CALL_OW 3
64941: PPUSH
64942: CALL_OW 1
64946: ST_TO_ADDR
// end ; end ;
64947: GO 64776
64949: POP
64950: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64951: LD_VAR 0 1
64955: PPUSH
64956: LD_EXP 99
64960: PUSH
64961: LD_VAR 0 4
64965: ARRAY
64966: PUSH
64967: LD_INT 0
64969: PLUS
64970: PPUSH
64971: CALL_OW 505
// end ;
64975: LD_VAR 0 2
64979: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64980: LD_INT 0
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
// if not hack in hackTanks then
64986: LD_VAR 0 1
64990: PUSH
64991: LD_EXP 98
64995: IN
64996: NOT
64997: IFFALSE 65001
// exit ;
64999: GO 65086
// index := GetElementIndex ( hackTanks , hack ) ;
65001: LD_ADDR_VAR 0 5
65005: PUSH
65006: LD_EXP 98
65010: PPUSH
65011: LD_VAR 0 1
65015: PPUSH
65016: CALL 26814 0 2
65020: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65021: LD_ADDR_VAR 0 4
65025: PUSH
65026: DOUBLE
65027: LD_INT 1
65029: DEC
65030: ST_TO_ADDR
65031: LD_EXP 99
65035: PUSH
65036: LD_VAR 0 5
65040: ARRAY
65041: PUSH
65042: FOR_TO
65043: IFFALSE 65084
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65045: LD_EXP 99
65049: PUSH
65050: LD_VAR 0 5
65054: ARRAY
65055: PUSH
65056: LD_VAR 0 4
65060: ARRAY
65061: PUSH
65062: LD_INT 1
65064: ARRAY
65065: PUSH
65066: LD_VAR 0 2
65070: EQUAL
65071: IFFALSE 65082
// KillUnit ( vehicle ) ;
65073: LD_VAR 0 2
65077: PPUSH
65078: CALL_OW 66
65082: GO 65042
65084: POP
65085: POP
// end ;
65086: LD_VAR 0 3
65090: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65091: LD_EXP 103
65095: NOT
65096: IFFALSE 65131
65098: GO 65100
65100: DISABLE
// begin initMiner := true ;
65101: LD_ADDR_EXP 103
65105: PUSH
65106: LD_INT 1
65108: ST_TO_ADDR
// minersList := [ ] ;
65109: LD_ADDR_EXP 104
65113: PUSH
65114: EMPTY
65115: ST_TO_ADDR
// minerMinesList := [ ] ;
65116: LD_ADDR_EXP 105
65120: PUSH
65121: EMPTY
65122: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65123: LD_ADDR_EXP 106
65127: PUSH
65128: LD_INT 5
65130: ST_TO_ADDR
// end ;
65131: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65132: LD_EXP 103
65136: PUSH
65137: LD_INT 34
65139: PUSH
65140: LD_EXP 84
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PPUSH
65149: CALL_OW 69
65153: AND
65154: IFFALSE 65617
65156: GO 65158
65158: DISABLE
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
// begin enable ;
65165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65166: LD_ADDR_VAR 0 1
65170: PUSH
65171: LD_INT 34
65173: PUSH
65174: LD_EXP 84
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PPUSH
65183: CALL_OW 69
65187: PUSH
65188: FOR_IN
65189: IFFALSE 65261
// begin if not i in minersList then
65191: LD_VAR 0 1
65195: PUSH
65196: LD_EXP 104
65200: IN
65201: NOT
65202: IFFALSE 65259
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65204: LD_ADDR_EXP 104
65208: PUSH
65209: LD_EXP 104
65213: PPUSH
65214: LD_EXP 104
65218: PUSH
65219: LD_INT 1
65221: PLUS
65222: PPUSH
65223: LD_VAR 0 1
65227: PPUSH
65228: CALL_OW 1
65232: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65233: LD_ADDR_EXP 105
65237: PUSH
65238: LD_EXP 105
65242: PPUSH
65243: LD_EXP 105
65247: PUSH
65248: LD_INT 1
65250: PLUS
65251: PPUSH
65252: EMPTY
65253: PPUSH
65254: CALL_OW 1
65258: ST_TO_ADDR
// end end ;
65259: GO 65188
65261: POP
65262: POP
// for i := minerMinesList downto 1 do
65263: LD_ADDR_VAR 0 1
65267: PUSH
65268: DOUBLE
65269: LD_EXP 105
65273: INC
65274: ST_TO_ADDR
65275: LD_INT 1
65277: PUSH
65278: FOR_DOWNTO
65279: IFFALSE 65615
// begin if IsLive ( minersList [ i ] ) then
65281: LD_EXP 104
65285: PUSH
65286: LD_VAR 0 1
65290: ARRAY
65291: PPUSH
65292: CALL_OW 300
65296: IFFALSE 65324
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65298: LD_EXP 104
65302: PUSH
65303: LD_VAR 0 1
65307: ARRAY
65308: PPUSH
65309: LD_EXP 105
65313: PUSH
65314: LD_VAR 0 1
65318: ARRAY
65319: PPUSH
65320: CALL_OW 505
// if not minerMinesList [ i ] then
65324: LD_EXP 105
65328: PUSH
65329: LD_VAR 0 1
65333: ARRAY
65334: NOT
65335: IFFALSE 65339
// continue ;
65337: GO 65278
// for j := minerMinesList [ i ] downto 1 do
65339: LD_ADDR_VAR 0 2
65343: PUSH
65344: DOUBLE
65345: LD_EXP 105
65349: PUSH
65350: LD_VAR 0 1
65354: ARRAY
65355: INC
65356: ST_TO_ADDR
65357: LD_INT 1
65359: PUSH
65360: FOR_DOWNTO
65361: IFFALSE 65611
// begin side := GetSide ( minersList [ i ] ) ;
65363: LD_ADDR_VAR 0 3
65367: PUSH
65368: LD_EXP 104
65372: PUSH
65373: LD_VAR 0 1
65377: ARRAY
65378: PPUSH
65379: CALL_OW 255
65383: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65384: LD_ADDR_VAR 0 4
65388: PUSH
65389: LD_EXP 105
65393: PUSH
65394: LD_VAR 0 1
65398: ARRAY
65399: PUSH
65400: LD_VAR 0 2
65404: ARRAY
65405: PUSH
65406: LD_INT 1
65408: ARRAY
65409: PPUSH
65410: LD_EXP 105
65414: PUSH
65415: LD_VAR 0 1
65419: ARRAY
65420: PUSH
65421: LD_VAR 0 2
65425: ARRAY
65426: PUSH
65427: LD_INT 2
65429: ARRAY
65430: PPUSH
65431: CALL_OW 428
65435: ST_TO_ADDR
// if not tmp then
65436: LD_VAR 0 4
65440: NOT
65441: IFFALSE 65445
// continue ;
65443: GO 65360
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
65445: LD_VAR 0 4
65449: PUSH
65450: LD_INT 81
65452: PUSH
65453: LD_VAR 0 3
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PPUSH
65462: CALL_OW 69
65466: IN
65467: PUSH
65468: LD_EXP 105
65472: PUSH
65473: LD_VAR 0 1
65477: ARRAY
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: PUSH
65485: LD_INT 1
65487: ARRAY
65488: PPUSH
65489: LD_EXP 105
65493: PUSH
65494: LD_VAR 0 1
65498: ARRAY
65499: PUSH
65500: LD_VAR 0 2
65504: ARRAY
65505: PUSH
65506: LD_INT 2
65508: ARRAY
65509: PPUSH
65510: CALL_OW 458
65514: AND
65515: IFFALSE 65609
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
65517: LD_EXP 105
65521: PUSH
65522: LD_VAR 0 1
65526: ARRAY
65527: PUSH
65528: LD_VAR 0 2
65532: ARRAY
65533: PUSH
65534: LD_INT 1
65536: ARRAY
65537: PPUSH
65538: LD_EXP 105
65542: PUSH
65543: LD_VAR 0 1
65547: ARRAY
65548: PUSH
65549: LD_VAR 0 2
65553: ARRAY
65554: PUSH
65555: LD_INT 2
65557: ARRAY
65558: PPUSH
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65568: LD_ADDR_EXP 105
65572: PUSH
65573: LD_EXP 105
65577: PPUSH
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_EXP 105
65587: PUSH
65588: LD_VAR 0 1
65592: ARRAY
65593: PPUSH
65594: LD_VAR 0 2
65598: PPUSH
65599: CALL_OW 3
65603: PPUSH
65604: CALL_OW 1
65608: ST_TO_ADDR
// end ; end ;
65609: GO 65360
65611: POP
65612: POP
// end ;
65613: GO 65278
65615: POP
65616: POP
// end ;
65617: PPOPN 4
65619: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65620: LD_INT 0
65622: PPUSH
65623: PPUSH
// result := false ;
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: LD_INT 0
65631: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65632: LD_VAR 0 1
65636: PPUSH
65637: CALL_OW 264
65641: PUSH
65642: LD_EXP 84
65646: EQUAL
65647: NOT
65648: IFFALSE 65652
// exit ;
65650: GO 65892
// index := GetElementIndex ( minersList , unit ) ;
65652: LD_ADDR_VAR 0 5
65656: PUSH
65657: LD_EXP 104
65661: PPUSH
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL 26814 0 2
65671: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65672: LD_EXP 105
65676: PUSH
65677: LD_VAR 0 5
65681: ARRAY
65682: PUSH
65683: LD_EXP 106
65687: GREATEREQUAL
65688: IFFALSE 65692
// exit ;
65690: GO 65892
// ComMoveXY ( unit , x , y ) ;
65692: LD_VAR 0 1
65696: PPUSH
65697: LD_VAR 0 2
65701: PPUSH
65702: LD_VAR 0 3
65706: PPUSH
65707: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65711: LD_INT 35
65713: PPUSH
65714: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65718: LD_VAR 0 1
65722: PPUSH
65723: LD_VAR 0 2
65727: PPUSH
65728: LD_VAR 0 3
65732: PPUSH
65733: CALL 57586 0 3
65737: NOT
65738: PUSH
65739: LD_VAR 0 1
65743: PPUSH
65744: CALL_OW 314
65748: AND
65749: IFFALSE 65753
// exit ;
65751: GO 65892
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65753: LD_VAR 0 2
65757: PPUSH
65758: LD_VAR 0 3
65762: PPUSH
65763: CALL_OW 428
65767: PUSH
65768: LD_VAR 0 1
65772: EQUAL
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 314
65783: NOT
65784: AND
65785: IFFALSE 65711
// PlaySoundXY ( x , y , PlantMine ) ;
65787: LD_VAR 0 2
65791: PPUSH
65792: LD_VAR 0 3
65796: PPUSH
65797: LD_STRING PlantMine
65799: PPUSH
65800: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65804: LD_VAR 0 2
65808: PPUSH
65809: LD_VAR 0 3
65813: PPUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: CALL_OW 255
65823: PPUSH
65824: LD_INT 0
65826: PPUSH
65827: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65831: LD_ADDR_EXP 105
65835: PUSH
65836: LD_EXP 105
65840: PPUSH
65841: LD_VAR 0 5
65845: PUSH
65846: LD_EXP 105
65850: PUSH
65851: LD_VAR 0 5
65855: ARRAY
65856: PUSH
65857: LD_INT 1
65859: PLUS
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PPUSH
65865: LD_VAR 0 2
65869: PUSH
65870: LD_VAR 0 3
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PPUSH
65879: CALL 27029 0 3
65883: ST_TO_ADDR
// result := true ;
65884: LD_ADDR_VAR 0 4
65888: PUSH
65889: LD_INT 1
65891: ST_TO_ADDR
// end ;
65892: LD_VAR 0 4
65896: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
65901: PPUSH
// if not unit in minersList then
65902: LD_VAR 0 1
65906: PUSH
65907: LD_EXP 104
65911: IN
65912: NOT
65913: IFFALSE 65917
// exit ;
65915: GO 66309
// index := GetElementIndex ( minersList , unit ) ;
65917: LD_ADDR_VAR 0 6
65921: PUSH
65922: LD_EXP 104
65926: PPUSH
65927: LD_VAR 0 1
65931: PPUSH
65932: CALL 26814 0 2
65936: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: DOUBLE
65943: LD_EXP 105
65947: PUSH
65948: LD_VAR 0 6
65952: ARRAY
65953: INC
65954: ST_TO_ADDR
65955: LD_INT 1
65957: PUSH
65958: FOR_DOWNTO
65959: IFFALSE 66120
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65961: LD_EXP 105
65965: PUSH
65966: LD_VAR 0 6
65970: ARRAY
65971: PUSH
65972: LD_VAR 0 5
65976: ARRAY
65977: PUSH
65978: LD_INT 1
65980: ARRAY
65981: PUSH
65982: LD_VAR 0 2
65986: EQUAL
65987: PUSH
65988: LD_EXP 105
65992: PUSH
65993: LD_VAR 0 6
65997: ARRAY
65998: PUSH
65999: LD_VAR 0 5
66003: ARRAY
66004: PUSH
66005: LD_INT 2
66007: ARRAY
66008: PUSH
66009: LD_VAR 0 3
66013: EQUAL
66014: AND
66015: IFFALSE 66118
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66017: LD_EXP 105
66021: PUSH
66022: LD_VAR 0 6
66026: ARRAY
66027: PUSH
66028: LD_VAR 0 5
66032: ARRAY
66033: PUSH
66034: LD_INT 1
66036: ARRAY
66037: PPUSH
66038: LD_EXP 105
66042: PUSH
66043: LD_VAR 0 6
66047: ARRAY
66048: PUSH
66049: LD_VAR 0 5
66053: ARRAY
66054: PUSH
66055: LD_INT 2
66057: ARRAY
66058: PPUSH
66059: LD_VAR 0 1
66063: PPUSH
66064: CALL_OW 255
66068: PPUSH
66069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66073: LD_ADDR_EXP 105
66077: PUSH
66078: LD_EXP 105
66082: PPUSH
66083: LD_VAR 0 6
66087: PPUSH
66088: LD_EXP 105
66092: PUSH
66093: LD_VAR 0 6
66097: ARRAY
66098: PPUSH
66099: LD_VAR 0 5
66103: PPUSH
66104: CALL_OW 3
66108: PPUSH
66109: CALL_OW 1
66113: ST_TO_ADDR
// exit ;
66114: POP
66115: POP
66116: GO 66309
// end ; end ;
66118: GO 65958
66120: POP
66121: POP
// for i := minerMinesList [ index ] downto 1 do
66122: LD_ADDR_VAR 0 5
66126: PUSH
66127: DOUBLE
66128: LD_EXP 105
66132: PUSH
66133: LD_VAR 0 6
66137: ARRAY
66138: INC
66139: ST_TO_ADDR
66140: LD_INT 1
66142: PUSH
66143: FOR_DOWNTO
66144: IFFALSE 66307
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66146: LD_EXP 105
66150: PUSH
66151: LD_VAR 0 6
66155: ARRAY
66156: PUSH
66157: LD_VAR 0 5
66161: ARRAY
66162: PUSH
66163: LD_INT 1
66165: ARRAY
66166: PPUSH
66167: LD_EXP 105
66171: PUSH
66172: LD_VAR 0 6
66176: ARRAY
66177: PUSH
66178: LD_VAR 0 5
66182: ARRAY
66183: PUSH
66184: LD_INT 2
66186: ARRAY
66187: PPUSH
66188: LD_VAR 0 2
66192: PPUSH
66193: LD_VAR 0 3
66197: PPUSH
66198: CALL_OW 298
66202: PUSH
66203: LD_INT 6
66205: LESS
66206: IFFALSE 66305
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66208: LD_EXP 105
66212: PUSH
66213: LD_VAR 0 6
66217: ARRAY
66218: PUSH
66219: LD_VAR 0 5
66223: ARRAY
66224: PUSH
66225: LD_INT 1
66227: ARRAY
66228: PPUSH
66229: LD_EXP 105
66233: PUSH
66234: LD_VAR 0 6
66238: ARRAY
66239: PUSH
66240: LD_VAR 0 5
66244: ARRAY
66245: PUSH
66246: LD_INT 2
66248: ARRAY
66249: PPUSH
66250: LD_VAR 0 1
66254: PPUSH
66255: CALL_OW 255
66259: PPUSH
66260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66264: LD_ADDR_EXP 105
66268: PUSH
66269: LD_EXP 105
66273: PPUSH
66274: LD_VAR 0 6
66278: PPUSH
66279: LD_EXP 105
66283: PUSH
66284: LD_VAR 0 6
66288: ARRAY
66289: PPUSH
66290: LD_VAR 0 5
66294: PPUSH
66295: CALL_OW 3
66299: PPUSH
66300: CALL_OW 1
66304: ST_TO_ADDR
// end ; end ;
66305: GO 66143
66307: POP
66308: POP
// end ;
66309: LD_VAR 0 4
66313: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66314: LD_INT 0
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
66320: PPUSH
66321: PPUSH
66322: PPUSH
66323: PPUSH
66324: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66325: LD_VAR 0 1
66329: PPUSH
66330: CALL_OW 264
66334: PUSH
66335: LD_EXP 84
66339: EQUAL
66340: NOT
66341: PUSH
66342: LD_VAR 0 1
66346: PUSH
66347: LD_EXP 104
66351: IN
66352: NOT
66353: OR
66354: IFFALSE 66358
// exit ;
66356: GO 66680
// index := GetElementIndex ( minersList , unit ) ;
66358: LD_ADDR_VAR 0 6
66362: PUSH
66363: LD_EXP 104
66367: PPUSH
66368: LD_VAR 0 1
66372: PPUSH
66373: CALL 26814 0 2
66377: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66378: LD_ADDR_VAR 0 8
66382: PUSH
66383: LD_EXP 106
66387: PUSH
66388: LD_EXP 105
66392: PUSH
66393: LD_VAR 0 6
66397: ARRAY
66398: MINUS
66399: ST_TO_ADDR
// if not minesFreeAmount then
66400: LD_VAR 0 8
66404: NOT
66405: IFFALSE 66409
// exit ;
66407: GO 66680
// tmp := [ ] ;
66409: LD_ADDR_VAR 0 7
66413: PUSH
66414: EMPTY
66415: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: DOUBLE
66422: LD_INT 1
66424: DEC
66425: ST_TO_ADDR
66426: LD_VAR 0 8
66430: PUSH
66431: FOR_TO
66432: IFFALSE 66627
// begin _d := rand ( 0 , 5 ) ;
66434: LD_ADDR_VAR 0 11
66438: PUSH
66439: LD_INT 0
66441: PPUSH
66442: LD_INT 5
66444: PPUSH
66445: CALL_OW 12
66449: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
66450: LD_ADDR_VAR 0 12
66454: PUSH
66455: LD_INT 2
66457: PPUSH
66458: LD_INT 6
66460: PPUSH
66461: CALL_OW 12
66465: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
66466: LD_ADDR_VAR 0 9
66470: PUSH
66471: LD_VAR 0 2
66475: PPUSH
66476: LD_VAR 0 11
66480: PPUSH
66481: LD_VAR 0 12
66485: PPUSH
66486: CALL_OW 272
66490: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
66491: LD_ADDR_VAR 0 10
66495: PUSH
66496: LD_VAR 0 3
66500: PPUSH
66501: LD_VAR 0 11
66505: PPUSH
66506: LD_VAR 0 12
66510: PPUSH
66511: CALL_OW 273
66515: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
66516: LD_VAR 0 9
66520: PPUSH
66521: LD_VAR 0 10
66525: PPUSH
66526: CALL_OW 488
66530: PUSH
66531: LD_VAR 0 9
66535: PUSH
66536: LD_VAR 0 10
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_VAR 0 7
66549: IN
66550: NOT
66551: AND
66552: PUSH
66553: LD_VAR 0 9
66557: PPUSH
66558: LD_VAR 0 10
66562: PPUSH
66563: CALL_OW 458
66567: NOT
66568: AND
66569: IFFALSE 66611
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66571: LD_ADDR_VAR 0 7
66575: PUSH
66576: LD_VAR 0 7
66580: PPUSH
66581: LD_VAR 0 7
66585: PUSH
66586: LD_INT 1
66588: PLUS
66589: PPUSH
66590: LD_VAR 0 9
66594: PUSH
66595: LD_VAR 0 10
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PPUSH
66604: CALL_OW 1
66608: ST_TO_ADDR
66609: GO 66625
// i := i - 1 ;
66611: LD_ADDR_VAR 0 5
66615: PUSH
66616: LD_VAR 0 5
66620: PUSH
66621: LD_INT 1
66623: MINUS
66624: ST_TO_ADDR
// end ;
66625: GO 66431
66627: POP
66628: POP
// for i in tmp do
66629: LD_ADDR_VAR 0 5
66633: PUSH
66634: LD_VAR 0 7
66638: PUSH
66639: FOR_IN
66640: IFFALSE 66678
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_VAR 0 5
66651: PUSH
66652: LD_INT 1
66654: ARRAY
66655: PPUSH
66656: LD_VAR 0 5
66660: PUSH
66661: LD_INT 2
66663: ARRAY
66664: PPUSH
66665: CALL 65620 0 3
66669: NOT
66670: IFFALSE 66676
// exit ;
66672: POP
66673: POP
66674: GO 66680
66676: GO 66639
66678: POP
66679: POP
// end ;
66680: LD_VAR 0 4
66684: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66685: LD_INT 0
66687: PPUSH
66688: PPUSH
66689: PPUSH
66690: PPUSH
66691: PPUSH
66692: PPUSH
66693: PPUSH
// if not GetClass ( unit ) = class_sniper then
66694: LD_VAR 0 1
66698: PPUSH
66699: CALL_OW 257
66703: PUSH
66704: LD_INT 5
66706: EQUAL
66707: NOT
66708: IFFALSE 66712
// exit ;
66710: GO 67100
// dist := 8 ;
66712: LD_ADDR_VAR 0 5
66716: PUSH
66717: LD_INT 8
66719: ST_TO_ADDR
// viewRange := 12 ;
66720: LD_ADDR_VAR 0 7
66724: PUSH
66725: LD_INT 12
66727: ST_TO_ADDR
// side := GetSide ( unit ) ;
66728: LD_ADDR_VAR 0 6
66732: PUSH
66733: LD_VAR 0 1
66737: PPUSH
66738: CALL_OW 255
66742: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66743: LD_INT 61
66745: PPUSH
66746: LD_VAR 0 6
66750: PPUSH
66751: CALL_OW 321
66755: PUSH
66756: LD_INT 2
66758: EQUAL
66759: IFFALSE 66769
// viewRange := 16 ;
66761: LD_ADDR_VAR 0 7
66765: PUSH
66766: LD_INT 16
66768: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66769: LD_VAR 0 1
66773: PPUSH
66774: LD_VAR 0 2
66778: PPUSH
66779: LD_VAR 0 3
66783: PPUSH
66784: CALL_OW 297
66788: PUSH
66789: LD_VAR 0 5
66793: GREATER
66794: IFFALSE 66873
// begin ComMoveXY ( unit , x , y ) ;
66796: LD_VAR 0 1
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: LD_VAR 0 3
66810: PPUSH
66811: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66815: LD_INT 35
66817: PPUSH
66818: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66822: LD_VAR 0 1
66826: PPUSH
66827: LD_VAR 0 2
66831: PPUSH
66832: LD_VAR 0 3
66836: PPUSH
66837: CALL 57586 0 3
66841: NOT
66842: IFFALSE 66846
// exit ;
66844: GO 67100
// until GetDistUnitXY ( unit , x , y ) < dist ;
66846: LD_VAR 0 1
66850: PPUSH
66851: LD_VAR 0 2
66855: PPUSH
66856: LD_VAR 0 3
66860: PPUSH
66861: CALL_OW 297
66865: PUSH
66866: LD_VAR 0 5
66870: LESS
66871: IFFALSE 66815
// end ; ComTurnXY ( unit , x , y ) ;
66873: LD_VAR 0 1
66877: PPUSH
66878: LD_VAR 0 2
66882: PPUSH
66883: LD_VAR 0 3
66887: PPUSH
66888: CALL_OW 118
// wait ( 5 ) ;
66892: LD_INT 5
66894: PPUSH
66895: CALL_OW 67
// _d := GetDir ( unit ) ;
66899: LD_ADDR_VAR 0 10
66903: PUSH
66904: LD_VAR 0 1
66908: PPUSH
66909: CALL_OW 254
66913: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66914: LD_ADDR_VAR 0 8
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: CALL_OW 250
66928: PPUSH
66929: LD_VAR 0 10
66933: PPUSH
66934: LD_VAR 0 5
66938: PPUSH
66939: CALL_OW 272
66943: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66944: LD_ADDR_VAR 0 9
66948: PUSH
66949: LD_VAR 0 1
66953: PPUSH
66954: CALL_OW 251
66958: PPUSH
66959: LD_VAR 0 10
66963: PPUSH
66964: LD_VAR 0 5
66968: PPUSH
66969: CALL_OW 273
66973: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66974: LD_VAR 0 8
66978: PPUSH
66979: LD_VAR 0 9
66983: PPUSH
66984: CALL_OW 488
66988: NOT
66989: IFFALSE 66993
// exit ;
66991: GO 67100
// ComAnimCustom ( unit , 1 ) ;
66993: LD_VAR 0 1
66997: PPUSH
66998: LD_INT 1
67000: PPUSH
67001: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67005: LD_VAR 0 8
67009: PPUSH
67010: LD_VAR 0 9
67014: PPUSH
67015: LD_VAR 0 6
67019: PPUSH
67020: LD_VAR 0 7
67024: PPUSH
67025: CALL_OW 330
// repeat wait ( 1 ) ;
67029: LD_INT 1
67031: PPUSH
67032: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67036: LD_VAR 0 1
67040: PPUSH
67041: CALL_OW 316
67045: PUSH
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 314
67055: OR
67056: PUSH
67057: LD_VAR 0 1
67061: PPUSH
67062: CALL_OW 302
67066: NOT
67067: OR
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 301
67078: OR
67079: IFFALSE 67029
// RemoveSeeing ( _x , _y , side ) ;
67081: LD_VAR 0 8
67085: PPUSH
67086: LD_VAR 0 9
67090: PPUSH
67091: LD_VAR 0 6
67095: PPUSH
67096: CALL_OW 331
// end ; end_of_file
67100: LD_VAR 0 4
67104: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67105: LD_VAR 0 1
67109: PPUSH
67110: LD_VAR 0 2
67114: PPUSH
67115: LD_VAR 0 3
67119: PPUSH
67120: LD_VAR 0 4
67124: PPUSH
67125: LD_VAR 0 5
67129: PPUSH
67130: LD_VAR 0 6
67134: PPUSH
67135: CALL 7756 0 6
// end ;
67139: PPOPN 6
67141: END
