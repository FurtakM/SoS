// export debug ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// InitForest ;
  29: CALL 93 0 0
// music_nat := 3 ;
  33: LD_ADDR_OWVAR 71
  37: PUSH
  38: LD_INT 3
  40: ST_TO_ADDR
// music_class := 3 ;
  41: LD_ADDR_OWVAR 72
  45: PUSH
  46: LD_INT 3
  48: ST_TO_ADDR
// if debug then
  49: LD_EXP 1
  53: IFFALSE 72
// begin Difficulty := 2 ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// SetRoad ( 1 ) ;
  63: LD_INT 1
  65: PPUSH
  66: CALL 251 0 1
// end else
  70: GO 76
// InitSettings ;
  72: CALL 395 0 0
// PrepareConvoy ;
  76: CALL 2143 0 0
// InitPlayer ;
  80: CALL 428 0 0
// InitEnemy ;
  84: CALL 3053 0 0
// Action ;
  88: CALL 1218 0 0
// end ; end_of_file
  92: END
// export function InitForest ; begin
  93: LD_INT 0
  95: PPUSH
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 385 , 100 , 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: LD_INT 21
 101: PUSH
 102: LD_INT 22
 104: PUSH
 105: LD_INT 24
 107: PUSH
 108: LD_INT 21
 110: PUSH
 111: LD_INT 22
 113: PUSH
 114: LD_INT 24
 116: PUSH
 117: LD_INT 38
 119: PUSH
 120: LD_INT 39
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: PPUSH
 133: LD_INT 385
 135: PPUSH
 136: LD_INT 100
 138: PPUSH
 139: LD_INT 1
 141: PPUSH
 142: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 140 , 75 , 2 ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_INT 21
 151: PUSH
 152: LD_INT 22
 154: PUSH
 155: LD_INT 24
 157: PUSH
 158: LD_INT 21
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 24
 166: PUSH
 167: LD_INT 38
 169: PUSH
 170: LD_INT 39
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: PPUSH
 183: LD_INT 140
 185: PPUSH
 186: LD_INT 75
 188: PPUSH
 189: LD_INT 2
 191: PPUSH
 192: CALL_OW 352
// PlaceTreesToArea ( forest , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , 460 , 70 , 2 ) ;
 196: LD_INT 1
 198: PPUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 24
 207: PUSH
 208: LD_INT 21
 210: PUSH
 211: LD_INT 22
 213: PUSH
 214: LD_INT 24
 216: PUSH
 217: LD_INT 38
 219: PUSH
 220: LD_INT 39
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: PPUSH
 233: LD_INT 460
 235: PPUSH
 236: LD_INT 70
 238: PPUSH
 239: LD_INT 2
 241: PPUSH
 242: CALL_OW 352
// end ;
 246: LD_VAR 0 1
 250: RET
// export function SetRoad ( num ) ; begin
 251: LD_INT 0
 253: PPUSH
// case num of 1 :
 254: LD_VAR 0 1
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 319
 267: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 355
// RemoveEnvironmentArea ( pos3 ) ;
 275: LD_INT 6
 277: PPUSH
 278: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 282: LD_INT 5
 284: PPUSH
 285: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 289: LD_INT 5
 291: PPUSH
 292: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 296: LD_INT 5
 298: PPUSH
 299: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 303: LD_INT 5
 305: PPUSH
 306: CALL_OW 355
// RemoveEnvironmentArea ( road2 ) ;
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 355
// end ; 2 :
 317: GO 380
 319: LD_INT 2
 321: DOUBLE
 322: EQUAL
 323: IFTRUE 327
 325: GO 379
 327: POP
// begin RemoveEnvironmentArea ( pos2 ) ;
 328: LD_INT 4
 330: PPUSH
 331: CALL_OW 355
// RemoveEnvironmentArea ( pos1 ) ;
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 342: LD_INT 3
 344: PPUSH
 345: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 349: LD_INT 3
 351: PPUSH
 352: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 356: LD_INT 3
 358: PPUSH
 359: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 363: LD_INT 3
 365: PPUSH
 366: CALL_OW 355
// RemoveEnvironmentArea ( road1 ) ;
 370: LD_INT 3
 372: PPUSH
 373: CALL_OW 355
// end ; end ;
 377: GO 380
 379: POP
// road := num ;
 380: LD_ADDR_EXP 2
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// end ; end_of_file
 390: LD_VAR 0 2
 394: RET
// export road , skill , cargos ; export function InitSettings ; begin
 395: LD_INT 0
 397: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_OWVAR 67
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// SetRoad ( GetMultiplayerSetting ( 1 ) ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 426
 418: PPUSH
 419: CALL 251 0 1
// end ; end_of_file
 423: LD_VAR 0 1
 427: RET
// export player_force , player_commander , start_area , finish_area , hurt , mines_trigger ; export function InitPlayer ; var i , un , s , sk , veh , vehs , mech , mech_group ; begin
 428: LD_INT 0
 430: PPUSH
 431: PPUSH
 432: PPUSH
 433: PPUSH
 434: PPUSH
 435: PPUSH
 436: PPUSH
 437: PPUSH
 438: PPUSH
// uc_nation := nation_russian ;
 439: LD_ADDR_OWVAR 21
 443: PUSH
 444: LD_INT 3
 446: ST_TO_ADDR
// uc_side := your_side ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_OWVAR 2
 456: ST_TO_ADDR
// player_force := [ ] ;
 457: LD_ADDR_EXP 5
 461: PUSH
 462: EMPTY
 463: ST_TO_ADDR
// mech_group := [ ] ;
 464: LD_ADDR_VAR 0 9
 468: PUSH
 469: EMPTY
 470: ST_TO_ADDR
// vehs := [ ] ;
 471: LD_ADDR_VAR 0 7
 475: PUSH
 476: EMPTY
 477: ST_TO_ADDR
// hurt := false ;
 478: LD_ADDR_EXP 9
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// mines_trigger := false ;
 486: LD_ADDR_EXP 10
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// sk := [ 7 , 6 , 5 ] [ Difficulty ] ;
 494: LD_ADDR_VAR 0 5
 498: PUSH
 499: LD_INT 7
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 5
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_OWVAR 67
 517: ARRAY
 518: ST_TO_ADDR
// hc_gallery :=  ;
 519: LD_ADDR_OWVAR 33
 523: PUSH
 524: LD_STRING 
 526: ST_TO_ADDR
// hc_name :=  ;
 527: LD_ADDR_OWVAR 26
 531: PUSH
 532: LD_STRING 
 534: ST_TO_ADDR
// hc_importance := 100 ;
 535: LD_ADDR_OWVAR 32
 539: PUSH
 540: LD_INT 100
 542: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , sk + 1 ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: LD_VAR 0 5
 553: PUSH
 554: LD_INT 1
 556: PLUS
 557: PPUSH
 558: CALL_OW 380
// player_commander := CreateHuman ;
 562: LD_ADDR_EXP 6
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// player_force := player_force ^ player_commander ;
 572: LD_ADDR_EXP 5
 576: PUSH
 577: LD_EXP 5
 581: PUSH
 582: LD_EXP 6
 586: ADD
 587: ST_TO_ADDR
// hc_importance := 0 ;
 588: LD_ADDR_OWVAR 32
 592: PUSH
 593: LD_INT 0
 595: ST_TO_ADDR
// case difficulty of 1 :
 596: LD_OWVAR 67
 600: PUSH
 601: LD_INT 1
 603: DOUBLE
 604: EQUAL
 605: IFTRUE 609
 607: GO 631
 609: POP
// s = [ 4 , 3 , 2 ] ; 2 :
 610: LD_ADDR_VAR 0 4
 614: PUSH
 615: LD_INT 4
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
 629: GO 692
 631: LD_INT 2
 633: DOUBLE
 634: EQUAL
 635: IFTRUE 639
 637: GO 661
 639: POP
// s = [ 3 , 2 , 2 ] ; 3 :
 640: LD_ADDR_VAR 0 4
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: LIST
 658: ST_TO_ADDR
 659: GO 692
 661: LD_INT 3
 663: DOUBLE
 664: EQUAL
 665: IFTRUE 669
 667: GO 691
 669: POP
// s = [ 3 , 1 , 1 ] ; end ;
 670: LD_ADDR_VAR 0 4
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: ST_TO_ADDR
 689: GO 692
 691: POP
// ChangeSideFog ( 3 , 6 ) ;
 692: LD_INT 3
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 343
// for i = 1 to s [ 1 ] do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 4
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 767
// begin PrepareHuman ( false , 1 , sk ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_INT 1
 729: PPUSH
 730: LD_VAR 0 5
 734: PPUSH
 735: CALL_OW 380
// un := CreateHuman ;
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: CALL_OW 44
 748: ST_TO_ADDR
// player_force := player_force ^ un ;
 749: LD_ADDR_EXP 5
 753: PUSH
 754: LD_EXP 5
 758: PUSH
 759: LD_VAR 0 3
 763: ADD
 764: ST_TO_ADDR
// end ;
 765: GO 721
 767: POP
 768: POP
// for i = 1 to s [ 2 ] do
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: DOUBLE
 775: LD_INT 1
 777: DEC
 778: ST_TO_ADDR
 779: LD_VAR 0 4
 783: PUSH
 784: LD_INT 2
 786: ARRAY
 787: PUSH
 788: FOR_TO
 789: IFFALSE 987
// begin if Prob ( 30 ) then
 791: LD_INT 30
 793: PPUSH
 794: CALL_OW 13
 798: IFFALSE 853
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ) else
 800: LD_ADDR_VAR 0 6
 804: PUSH
 805: LD_INT 3
 807: PPUSH
 808: LD_INT 3
 810: PPUSH
 811: LD_INT 22
 813: PPUSH
 814: LD_INT 3
 816: PPUSH
 817: LD_INT 1
 819: PPUSH
 820: LD_INT 43
 822: PUSH
 823: LD_INT 42
 825: PUSH
 826: LD_INT 44
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 1
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: CALL_OW 12
 844: ARRAY
 845: PPUSH
 846: CALL 7005 0 6
 850: ST_TO_ADDR
 851: GO 912
// veh := CreateTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_gun , ru_heavy_machine_gun , ru_gun ] [ Rand ( 1 , 5 ) ] ) ;
 853: LD_ADDR_VAR 0 6
 857: PUSH
 858: LD_INT 3
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 22
 866: PPUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 43
 875: PUSH
 876: LD_INT 42
 878: PUSH
 879: LD_INT 44
 881: PUSH
 882: LD_INT 42
 884: PUSH
 885: LD_INT 44
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 1
 897: PPUSH
 898: LD_INT 5
 900: PPUSH
 901: CALL_OW 12
 905: ARRAY
 906: PPUSH
 907: CALL 7005 0 6
 911: ST_TO_ADDR
// PrepareHuman ( false , 3 , sk ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 3
 917: PPUSH
 918: LD_VAR 0 5
 922: PPUSH
 923: CALL_OW 380
// mech := CreateHuman ;
 927: LD_ADDR_VAR 0 8
 931: PUSH
 932: CALL_OW 44
 936: ST_TO_ADDR
// vehs := vehs ^ veh ;
 937: LD_ADDR_VAR 0 7
 941: PUSH
 942: LD_VAR 0 7
 946: PUSH
 947: LD_VAR 0 6
 951: ADD
 952: ST_TO_ADDR
// player_force := player_force ^ veh ;
 953: LD_ADDR_EXP 5
 957: PUSH
 958: LD_EXP 5
 962: PUSH
 963: LD_VAR 0 6
 967: ADD
 968: ST_TO_ADDR
// mech_group := mech_group ^ mech ;
 969: LD_ADDR_VAR 0 9
 973: PUSH
 974: LD_VAR 0 9
 978: PUSH
 979: LD_VAR 0 8
 983: ADD
 984: ST_TO_ADDR
// end ;
 985: GO 788
 987: POP
 988: POP
// for i = 1 to s [ 3 ] do
 989: LD_ADDR_VAR 0 2
 993: PUSH
 994: DOUBLE
 995: LD_INT 1
 997: DEC
 998: ST_TO_ADDR
 999: LD_VAR 0 4
1003: PUSH
1004: LD_INT 3
1006: ARRAY
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1054
// begin PrepareHuman ( false , 4 , sk ) ;
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 4
1016: PPUSH
1017: LD_VAR 0 5
1021: PPUSH
1022: CALL_OW 380
// un := CreateHuman ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: CALL_OW 44
1035: ST_TO_ADDR
// player_force := player_force ^ un ;
1036: LD_ADDR_EXP 5
1040: PUSH
1041: LD_EXP 5
1045: PUSH
1046: LD_VAR 0 3
1050: ADD
1051: ST_TO_ADDR
// end ;
1052: GO 1008
1054: POP
1055: POP
// case road of 1 :
1056: LD_EXP 2
1060: PUSH
1061: LD_INT 1
1063: DOUBLE
1064: EQUAL
1065: IFTRUE 1069
1067: GO 1088
1069: POP
// begin start_area := pos2 ;
1070: LD_ADDR_EXP 7
1074: PUSH
1075: LD_INT 4
1077: ST_TO_ADDR
// finish_area := pos3 ;
1078: LD_ADDR_EXP 8
1082: PUSH
1083: LD_INT 6
1085: ST_TO_ADDR
// end ; 2 :
1086: GO 1116
1088: LD_INT 2
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1115
1096: POP
// begin start_area := pos1 ;
1097: LD_ADDR_EXP 7
1101: PUSH
1102: LD_INT 2
1104: ST_TO_ADDR
// finish_area := pos2 ;
1105: LD_ADDR_EXP 8
1109: PUSH
1110: LD_INT 4
1112: ST_TO_ADDR
// end ; end ;
1113: GO 1116
1115: POP
// for i = 1 to player_force do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_EXP 5
1130: PUSH
1131: FOR_TO
1132: IFFALSE 1159
// PlaceUnitArea ( player_force [ i ] , start_area , false ) ;
1134: LD_EXP 5
1138: PUSH
1139: LD_VAR 0 2
1143: ARRAY
1144: PPUSH
1145: LD_EXP 7
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL_OW 49
1157: GO 1131
1159: POP
1160: POP
// for i = 1 to s [ 2 ] do
1161: LD_ADDR_VAR 0 2
1165: PUSH
1166: DOUBLE
1167: LD_INT 1
1169: DEC
1170: ST_TO_ADDR
1171: LD_VAR 0 4
1175: PUSH
1176: LD_INT 2
1178: ARRAY
1179: PUSH
1180: FOR_TO
1181: IFFALSE 1211
// PlaceHumanInUnit ( mech_group [ i ] , vehs [ i ] ) ;
1183: LD_VAR 0 9
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: PPUSH
1194: LD_VAR 0 7
1198: PUSH
1199: LD_VAR 0 2
1203: ARRAY
1204: PPUSH
1205: CALL_OW 52
1209: GO 1180
1211: POP
1212: POP
// end ;
1213: LD_VAR 0 1
1217: RET
// export function Action ; begin
1218: LD_INT 0
1220: PPUSH
// CenterNowOnUnits ( player_commander ) ;
1221: LD_EXP 6
1225: PPUSH
1226: CALL_OW 87
// InGameOn ;
1230: CALL_OW 8
// Say ( player_commander , DS1 ) ;
1234: LD_EXP 6
1238: PPUSH
1239: LD_STRING DS1
1241: PPUSH
1242: CALL_OW 88
// Say ( player_commander , DS2 ) ;
1246: LD_EXP 6
1250: PPUSH
1251: LD_STRING DS2
1253: PPUSH
1254: CALL_OW 88
// Say ( player_commander , DS3 ) ;
1258: LD_EXP 6
1262: PPUSH
1263: LD_STRING DS3
1265: PPUSH
1266: CALL_OW 88
// InGameOff ;
1270: CALL_OW 9
// ChangeMissionObjectives ( ObConv ) ;
1274: LD_STRING ObConv
1276: PPUSH
1277: CALL_OW 337
// if road = 1 then
1281: LD_EXP 2
1285: PUSH
1286: LD_INT 1
1288: EQUAL
1289: IFFALSE 1303
// SetAreaMapShow ( pos3 , 1 ) else
1291: LD_INT 6
1293: PPUSH
1294: LD_INT 1
1296: PPUSH
1297: CALL_OW 424
1301: GO 1323
// if road = 2 then
1303: LD_EXP 2
1307: PUSH
1308: LD_INT 2
1310: EQUAL
1311: IFFALSE 1323
// SetAreaMapShow ( pos2 , 1 ) ;
1313: LD_INT 4
1315: PPUSH
1316: LD_INT 1
1318: PPUSH
1319: CALL_OW 424
// end ;
1323: LD_VAR 0 1
1327: RET
// every 0 0$01 trigger FilterUnitsInArea ( finish_area , [ f_weapon , ru_cargo_bay ] ) > 0 or ( FilterAllUnits ( [ f_side , 2 ] ) = 0 and not debug ) do var i ;
1328: LD_EXP 8
1332: PPUSH
1333: LD_INT 34
1335: PUSH
1336: LD_INT 51
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PPUSH
1343: CALL_OW 70
1347: PUSH
1348: LD_INT 0
1350: GREATER
1351: PUSH
1352: LD_INT 22
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PPUSH
1362: CALL_OW 69
1366: PUSH
1367: LD_INT 0
1369: EQUAL
1370: PUSH
1371: LD_EXP 1
1375: NOT
1376: AND
1377: OR
1378: IFFALSE 1512
1380: GO 1382
1382: DISABLE
1383: LD_INT 0
1385: PPUSH
// begin Say ( player_commander , DS-6 ) ;
1386: LD_EXP 6
1390: PPUSH
1391: LD_STRING DS-6
1393: PPUSH
1394: CALL_OW 88
// Wait ( 0 0$01 ) ;
1398: LD_INT 35
1400: PPUSH
1401: CALL_OW 67
// AddMedal ( med , 1 ) ;
1405: LD_STRING med
1407: PPUSH
1408: LD_INT 1
1410: PPUSH
1411: CALL_OW 101
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
1415: LD_INT 22
1417: PUSH
1418: LD_INT 2
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PPUSH
1425: CALL_OW 69
1429: PUSH
1430: LD_INT 0
1432: EQUAL
1433: IFFALSE 1447
// AddMedal ( convoy_clear , 1 ) else
1435: LD_STRING convoy_clear
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: CALL_OW 101
1445: GO 1458
// AddMedal ( convoy_clear , - 1 ) ;
1447: LD_STRING convoy_clear
1449: PPUSH
1450: LD_INT 1
1452: NEG
1453: PPUSH
1454: CALL_OW 101
// if FilterAllUnits ( [ f_side , 6 ] ) >= 2 then
1458: LD_INT 22
1460: PUSH
1461: LD_INT 6
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PPUSH
1468: CALL_OW 69
1472: PUSH
1473: LD_INT 2
1475: GREATEREQUAL
1476: IFFALSE 1490
// AddMedal ( convoy_cargos , 1 ) else
1478: LD_STRING convoy_cargos
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL_OW 101
1488: GO 1501
// AddMedal ( convoy_cargos , - 1 ) ;
1490: LD_STRING convoy_cargos
1492: PPUSH
1493: LD_INT 1
1495: NEG
1496: PPUSH
1497: CALL_OW 101
// GiveMedals ( MAIN ) ;
1501: LD_STRING MAIN
1503: PPUSH
1504: CALL_OW 102
// YouWin ;
1508: CALL_OW 103
// end ;
1512: PPOPN 1
1514: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetType ( un ) = unit_human and FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) > 1 and not hurt then
1515: LD_VAR 0 1
1519: PPUSH
1520: CALL_OW 255
1524: PUSH
1525: LD_INT 3
1527: EQUAL
1528: PUSH
1529: LD_VAR 0 1
1533: PPUSH
1534: CALL_OW 247
1538: PUSH
1539: LD_INT 1
1541: EQUAL
1542: AND
1543: PUSH
1544: LD_INT 22
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 26
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PUSH
1573: LD_INT 1
1575: GREATER
1576: AND
1577: PUSH
1578: LD_EXP 9
1582: NOT
1583: AND
1584: IFFALSE 1640
// begin hurt := true ;
1586: LD_ADDR_EXP 9
1590: PUSH
1591: LD_INT 1
1593: ST_TO_ADDR
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM4 ) ;
1594: LD_INT 22
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_INT 26
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: LD_EXP 6
1627: DIFF
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: LD_STRING DM4
1635: PPUSH
1636: CALL_OW 88
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) then
1640: LD_VAR 0 1
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 21
1657: PUSH
1658: LD_INT 2
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PPUSH
1669: CALL_OW 69
1673: IN
1674: IFFALSE 1799
// begin Wait ( Rand ( 0 0$08 , 0 0$14 ) ) ;
1676: LD_INT 280
1678: PPUSH
1679: LD_INT 490
1681: PPUSH
1682: CALL_OW 12
1686: PPUSH
1687: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1691: LD_VAR 0 1
1695: PPUSH
1696: CALL_OW 250
1700: PPUSH
1701: LD_VAR 0 1
1705: PPUSH
1706: CALL_OW 251
1710: PPUSH
1711: LD_INT 10
1713: PPUSH
1714: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1718: LD_VAR 0 1
1722: PPUSH
1723: CALL_OW 250
1727: PPUSH
1728: LD_VAR 0 1
1732: PPUSH
1733: CALL_OW 251
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
1745: LD_VAR 0 1
1749: PPUSH
1750: CALL_OW 250
1754: PPUSH
1755: LD_VAR 0 1
1759: PPUSH
1760: CALL_OW 251
1764: PPUSH
1765: LD_INT 10
1767: PPUSH
1768: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 5 ) ;
1772: LD_VAR 0 1
1776: PPUSH
1777: CALL_OW 250
1781: PPUSH
1782: LD_VAR 0 1
1786: PPUSH
1787: CALL_OW 251
1791: PPUSH
1792: LD_INT 5
1794: PPUSH
1795: CALL_OW 453
// end ; end ;
1799: PPOPN 1
1801: END
// every 0 0$01 trigger See ( 3 , FilterAllUnits ( [ f_chassis , ar_hovercraft ] ) [ 1 ] ) do
1802: LD_INT 3
1804: PPUSH
1805: LD_INT 31
1807: PUSH
1808: LD_INT 11
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PPUSH
1815: CALL_OW 69
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: PPUSH
1824: CALL_OW 292
1828: IFFALSE 1879
1830: GO 1832
1832: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM2 ) ;
1833: LD_INT 22
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 26
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: PUSH
1862: LD_EXP 6
1866: DIFF
1867: PUSH
1868: LD_INT 1
1870: ARRAY
1871: PPUSH
1872: LD_STRING DM2
1874: PPUSH
1875: CALL_OW 88
// end ;
1879: END
// every 0 0$03 trigger See ( 3 , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , player_commander ) ) do
1880: LD_INT 3
1882: PPUSH
1883: LD_INT 22
1885: PUSH
1886: LD_INT 2
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 25
1895: PUSH
1896: LD_INT 1
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: LD_EXP 6
1916: PPUSH
1917: CALL_OW 74
1921: PPUSH
1922: CALL_OW 292
1926: IFFALSE 1977
1928: GO 1930
1930: DISABLE
// begin Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM3 ) ;
1931: LD_INT 22
1933: PUSH
1934: LD_INT 3
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 26
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PPUSH
1955: CALL_OW 69
1959: PUSH
1960: LD_EXP 6
1964: DIFF
1965: PUSH
1966: LD_INT 1
1968: ARRAY
1969: PPUSH
1970: LD_STRING DM3
1972: PPUSH
1973: CALL_OW 88
// end ;
1977: END
// every 0 0$01 trigger mines_trigger do
1978: LD_EXP 10
1982: IFFALSE 2053
1984: GO 1986
1986: DISABLE
// begin DialogueOn ;
1987: CALL_OW 6
// Say ( ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_sex , sex_male ] ] ) diff player_commander ) [ 1 ] , DM1 ) ;
1991: LD_INT 22
1993: PUSH
1994: LD_INT 3
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 26
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: PUSH
2020: LD_EXP 6
2024: DIFF
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: PPUSH
2030: LD_STRING DM1
2032: PPUSH
2033: CALL_OW 88
// Say ( player_commander , DS4 ) ;
2037: LD_EXP 6
2041: PPUSH
2042: LD_STRING DS4
2044: PPUSH
2045: CALL_OW 88
// DialogueOff ;
2049: CALL_OW 7
// end ;
2053: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 1 do
2054: LD_INT 34
2056: PUSH
2057: LD_INT 51
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: PUSH
2069: LD_INT 1
2071: EQUAL
2072: IFFALSE 2089
2074: GO 2076
2076: DISABLE
// begin Say ( player_commander , DS5 ) ;
2077: LD_EXP 6
2081: PPUSH
2082: LD_STRING DS5
2084: PPUSH
2085: CALL_OW 88
// end ;
2089: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) = 0 do
2090: LD_INT 34
2092: PUSH
2093: LD_INT 51
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: PUSH
2105: LD_INT 0
2107: EQUAL
2108: IFFALSE 2120
2110: GO 2112
2112: DISABLE
// begin YouLost ( qconvl ) ;
2113: LD_STRING qconvl
2115: PPUSH
2116: CALL_OW 104
// end ;
2120: END
// every 0 0$01 trigger IsDead ( player_commander ) do
2121: LD_EXP 6
2125: PPUSH
2126: CALL_OW 301
2130: IFFALSE 2142
2132: GO 2134
2134: DISABLE
// begin YouLost ( qcom ) ;
2135: LD_STRING qcom
2137: PPUSH
2138: CALL_OW 104
// end ; end_of_file
2142: END
// export function PrepareConvoy ; var un , area , i , bull_xy ; begin
2143: LD_INT 0
2145: PPUSH
2146: PPUSH
2147: PPUSH
2148: PPUSH
2149: PPUSH
// SetAttitude ( 3 , 6 , att_friend , true ) ;
2150: LD_INT 3
2152: PPUSH
2153: LD_INT 6
2155: PPUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 1
2161: PPUSH
2162: CALL_OW 80
// case road of 1 :
2166: LD_EXP 2
2170: PUSH
2171: LD_INT 1
2173: DOUBLE
2174: EQUAL
2175: IFTRUE 2179
2177: GO 2205
2179: POP
// begin area := pos2 ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 4
2187: ST_TO_ADDR
// bull_xy := [ 30 , 46 ] ;
2188: LD_ADDR_VAR 0 5
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 46
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: ST_TO_ADDR
// end ; 2 :
2203: GO 2240
2205: LD_INT 2
2207: DOUBLE
2208: EQUAL
2209: IFTRUE 2213
2211: GO 2239
2213: POP
// begin area := pos1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 2
2221: ST_TO_ADDR
// bull_xy := [ 18 , 3 ] ;
2222: LD_ADDR_VAR 0 5
2226: PUSH
2227: LD_INT 18
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: ST_TO_ADDR
// end ; end ;
2237: GO 2240
2239: POP
// if road = 1 then
2240: LD_EXP 2
2244: PUSH
2245: LD_INT 1
2247: EQUAL
2248: IFFALSE 2361
// conv_road := [ 36 , 43 , 40 , 29 , 56 , 37 , 70 , 32 , 63 , 6 , 84 , 8 , 90 , 24 , 96 , 47 , 110 , 73 , 143 , 102 , 121 , 93 , 98 , 100 , 62 , 114 ] ;
2250: LD_ADDR_EXP 13
2254: PUSH
2255: LD_INT 36
2257: PUSH
2258: LD_INT 43
2260: PUSH
2261: LD_INT 40
2263: PUSH
2264: LD_INT 29
2266: PUSH
2267: LD_INT 56
2269: PUSH
2270: LD_INT 37
2272: PUSH
2273: LD_INT 70
2275: PUSH
2276: LD_INT 32
2278: PUSH
2279: LD_INT 63
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: LD_INT 84
2287: PUSH
2288: LD_INT 8
2290: PUSH
2291: LD_INT 90
2293: PUSH
2294: LD_INT 24
2296: PUSH
2297: LD_INT 96
2299: PUSH
2300: LD_INT 47
2302: PUSH
2303: LD_INT 110
2305: PUSH
2306: LD_INT 73
2308: PUSH
2309: LD_INT 143
2311: PUSH
2312: LD_INT 102
2314: PUSH
2315: LD_INT 121
2317: PUSH
2318: LD_INT 93
2320: PUSH
2321: LD_INT 98
2323: PUSH
2324: LD_INT 100
2326: PUSH
2327: LD_INT 62
2329: PUSH
2330: LD_INT 114
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: ST_TO_ADDR
// if road = 2 then
2361: LD_EXP 2
2365: PUSH
2366: LD_INT 2
2368: EQUAL
2369: IFFALSE 2506
// conv_road := [ 39 , 18 , 61 , 36 , 62 , 15 , 75 , 5 , 97 , 17 , 98 , 30 , 95 , 49 , 110 , 71 , 146 , 112 , 100 , 81 , 99 , 115 , 77 , 105 , 65 , 75 , 45 , 46 , 26 , 47 , 29 , 54 ] ;
2371: LD_ADDR_EXP 13
2375: PUSH
2376: LD_INT 39
2378: PUSH
2379: LD_INT 18
2381: PUSH
2382: LD_INT 61
2384: PUSH
2385: LD_INT 36
2387: PUSH
2388: LD_INT 62
2390: PUSH
2391: LD_INT 15
2393: PUSH
2394: LD_INT 75
2396: PUSH
2397: LD_INT 5
2399: PUSH
2400: LD_INT 97
2402: PUSH
2403: LD_INT 17
2405: PUSH
2406: LD_INT 98
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 95
2414: PUSH
2415: LD_INT 49
2417: PUSH
2418: LD_INT 110
2420: PUSH
2421: LD_INT 71
2423: PUSH
2424: LD_INT 146
2426: PUSH
2427: LD_INT 112
2429: PUSH
2430: LD_INT 100
2432: PUSH
2433: LD_INT 81
2435: PUSH
2436: LD_INT 99
2438: PUSH
2439: LD_INT 115
2441: PUSH
2442: LD_INT 77
2444: PUSH
2445: LD_INT 105
2447: PUSH
2448: LD_INT 65
2450: PUSH
2451: LD_INT 75
2453: PUSH
2454: LD_INT 45
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: LD_INT 26
2462: PUSH
2463: LD_INT 47
2465: PUSH
2466: LD_INT 29
2468: PUSH
2469: LD_INT 54
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: ST_TO_ADDR
// conv_am := 1 ;
2506: LD_ADDR_EXP 12
2510: PUSH
2511: LD_INT 1
2513: ST_TO_ADDR
// conv := 0 ;
2514: LD_ADDR_EXP 11
2518: PUSH
2519: LD_INT 0
2521: ST_TO_ADDR
// uc_side := 6 ;
2522: LD_ADDR_OWVAR 20
2526: PUSH
2527: LD_INT 6
2529: ST_TO_ADDR
// uc_nation := 3 ;
2530: LD_ADDR_OWVAR 21
2534: PUSH
2535: LD_INT 3
2537: ST_TO_ADDR
// for i = 1 to 2 do
2538: LD_ADDR_VAR 0 4
2542: PUSH
2543: DOUBLE
2544: LD_INT 1
2546: DEC
2547: ST_TO_ADDR
2548: LD_INT 2
2550: PUSH
2551: FOR_TO
2552: IFFALSE 2632
// begin un := CreateTank ( 6 , 3 , ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay ) ;
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: LD_INT 6
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: LD_INT 22
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: LD_INT 51
2576: PPUSH
2577: CALL 7005 0 6
2581: ST_TO_ADDR
// cargos := cargos ^ un ;
2582: LD_ADDR_EXP 4
2586: PUSH
2587: LD_EXP 4
2591: PUSH
2592: LD_VAR 0 2
2596: ADD
2597: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
2598: LD_VAR 0 2
2602: PPUSH
2603: LD_VAR 0 3
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// SetCargo ( un , 3 , 100 ) ;
2615: LD_VAR 0 2
2619: PPUSH
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 100
2625: PPUSH
2626: CALL_OW 290
// end ;
2630: GO 2551
2632: POP
2633: POP
// end ;
2634: LD_VAR 0 1
2638: RET
// export conv , conv_am , conv_road ; every 0 0$01 trigger cargos marked 01 do
2639: LD_EXP 4
2643: IFFALSE 2755
2645: GO 2647
2647: DISABLE
// begin enable ;
2648: ENABLE
// if IsSelected ( cargos [ 1 ] ) or IsSelected ( cargos [ 2 ] ) then
2649: LD_EXP 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: CALL_OW 306
2662: PUSH
2663: LD_EXP 4
2667: PUSH
2668: LD_INT 2
2670: ARRAY
2671: PPUSH
2672: CALL_OW 306
2676: OR
2677: IFFALSE 2755
// begin if debug then
2679: LD_EXP 1
2683: IFFALSE 2695
// display_strings := conv ;
2685: LD_ADDR_OWVAR 47
2689: PUSH
2690: LD_EXP 11
2694: ST_TO_ADDR
// case Query ( QConv ) of 1 :
2695: LD_STRING QConv
2697: PPUSH
2698: CALL_OW 97
2702: PUSH
2703: LD_INT 1
2705: DOUBLE
2706: EQUAL
2707: IFTRUE 2711
2709: GO 2722
2711: POP
// conv := 0 ; 2 :
2712: LD_ADDR_EXP 11
2716: PUSH
2717: LD_INT 0
2719: ST_TO_ADDR
2720: GO 2742
2722: LD_INT 2
2724: DOUBLE
2725: EQUAL
2726: IFTRUE 2730
2728: GO 2741
2730: POP
// conv := 1 ; end ;
2731: LD_ADDR_EXP 11
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
2739: GO 2742
2741: POP
// disable ( 01 ) ;
2742: LD_INT 1
2744: DISABLE_MARKED
// Wait ( 0 0$05 ) ;
2745: LD_INT 175
2747: PPUSH
2748: CALL_OW 67
// enable ( 01 ) ;
2752: LD_INT 1
2754: ENABLE_MARKED
// end ; end ;
2755: END
// every 0 0$01 trigger conv = 1 do var i , area , car ;
2756: LD_EXP 11
2760: PUSH
2761: LD_INT 1
2763: EQUAL
2764: IFFALSE 2976
2766: GO 2768
2768: DISABLE
2769: LD_INT 0
2771: PPUSH
2772: PPUSH
2773: PPUSH
// begin enable ;
2774: ENABLE
// car := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
2775: LD_ADDR_VAR 0 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 51
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 69
2794: ST_TO_ADDR
// if debug then
2795: LD_EXP 1
2799: IFFALSE 2836
// display_strings := [ conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ] ;
2801: LD_ADDR_OWVAR 47
2805: PUSH
2806: LD_EXP 13
2810: PUSH
2811: LD_EXP 12
2815: ARRAY
2816: PUSH
2817: LD_EXP 13
2821: PUSH
2822: LD_EXP 12
2826: PUSH
2827: LD_INT 1
2829: PLUS
2830: ARRAY
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: ST_TO_ADDR
// for i = 1 to car do
2836: LD_ADDR_VAR 0 1
2840: PUSH
2841: DOUBLE
2842: LD_INT 1
2844: DEC
2845: ST_TO_ADDR
2846: LD_VAR 0 3
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2974
// begin if IsNearbyPoint ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_VAR 0 1
2863: ARRAY
2864: PPUSH
2865: LD_EXP 13
2869: PUSH
2870: LD_EXP 12
2874: ARRAY
2875: PPUSH
2876: LD_EXP 13
2880: PUSH
2881: LD_EXP 12
2885: PUSH
2886: LD_INT 1
2888: PLUS
2889: ARRAY
2890: PPUSH
2891: CALL 7083 0 3
2895: IFFALSE 2913
// conv_am := conv_am + 2 else
2897: LD_ADDR_EXP 12
2901: PUSH
2902: LD_EXP 12
2906: PUSH
2907: LD_INT 2
2909: PLUS
2910: ST_TO_ADDR
2911: GO 2972
// if not HasTask ( car [ i ] ) then
2913: LD_VAR 0 3
2917: PUSH
2918: LD_VAR 0 1
2922: ARRAY
2923: PPUSH
2924: CALL_OW 314
2928: NOT
2929: IFFALSE 2972
// ComMoveXY ( car [ i ] , conv_road [ conv_am ] , conv_road [ conv_am + 1 ] ) ;
2931: LD_VAR 0 3
2935: PUSH
2936: LD_VAR 0 1
2940: ARRAY
2941: PPUSH
2942: LD_EXP 13
2946: PUSH
2947: LD_EXP 12
2951: ARRAY
2952: PPUSH
2953: LD_EXP 13
2957: PUSH
2958: LD_EXP 12
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: ARRAY
2967: PPUSH
2968: CALL_OW 111
// end ;
2972: GO 2851
2974: POP
2975: POP
// end ;
2976: PPOPN 3
2978: END
// every 0 0$01 trigger conv = 0 do var i ;
2979: LD_EXP 11
2983: PUSH
2984: LD_INT 0
2986: EQUAL
2987: IFFALSE 3050
2989: GO 2991
2991: DISABLE
2992: LD_INT 0
2994: PPUSH
// begin enable ;
2995: ENABLE
// for i = 1 to cargos do
2996: LD_ADDR_VAR 0 1
3000: PUSH
3001: DOUBLE
3002: LD_INT 1
3004: DEC
3005: ST_TO_ADDR
3006: LD_EXP 4
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3048
// if HasTask ( cargos [ i ] ) then
3014: LD_EXP 4
3018: PUSH
3019: LD_VAR 0 1
3023: ARRAY
3024: PPUSH
3025: CALL_OW 314
3029: IFFALSE 3046
// ComStop ( cargos [ i ] ) ;
3031: LD_EXP 4
3035: PUSH
3036: LD_VAR 0 1
3040: ARRAY
3041: PPUSH
3042: CALL_OW 141
3046: GO 3011
3048: POP
3049: POP
// end ; end_of_file
3050: PPOPN 1
3052: END
// export function InitEnemy ; var bunker_xy , sold_stand , sold_crawl , tanks_xy , hover_x , mines_xy , camera_xy , i , p , veh , un , b , x , d , dir ; begin
3053: LD_INT 0
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
// uc_side := 2 ;
3071: LD_ADDR_OWVAR 20
3075: PUSH
3076: LD_INT 2
3078: ST_TO_ADDR
// uc_nation := 2 ;
3079: LD_ADDR_OWVAR 21
3083: PUSH
3084: LD_INT 2
3086: ST_TO_ADDR
// if road = 1 then
3087: LD_EXP 2
3091: PUSH
3092: LD_INT 1
3094: EQUAL
3095: IFFALSE 3857
// begin case Difficulty of 1 :
3097: LD_OWVAR 67
3101: PUSH
3102: LD_INT 1
3104: DOUBLE
3105: EQUAL
3106: IFTRUE 3110
3108: GO 3417
3110: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_INT 56
3118: PUSH
3119: LD_INT 37
3121: PUSH
3122: LD_INT 2
3124: PUSH
3125: LD_INT 81
3127: PUSH
3128: LD_INT 6
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 90
3136: PUSH
3137: LD_INT 25
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: LD_INT 105
3145: PUSH
3146: LD_INT 68
3148: PUSH
3149: LD_INT 2
3151: PUSH
3152: LD_INT 96
3154: PUSH
3155: LD_INT 82
3157: PUSH
3158: LD_INT 4
3160: PUSH
3161: LD_INT 80
3163: PUSH
3164: LD_INT 109
3166: PUSH
3167: LD_INT 4
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: ST_TO_ADDR
// sold_stand := [ sold1 , sold3 , sold4 , sold5 ] ;
3190: LD_ADDR_VAR 0 3
3194: PUSH
3195: LD_INT 7
3197: PUSH
3198: LD_INT 9
3200: PUSH
3201: LD_INT 10
3203: PUSH
3204: LD_INT 11
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3213: LD_ADDR_VAR 0 4
3217: PUSH
3218: LD_INT 13
3220: PUSH
3221: LD_INT 14
3223: PUSH
3224: LD_INT 15
3226: PUSH
3227: LD_INT 16
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3236: LD_ADDR_VAR 0 15
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 0
3249: PUSH
3250: LD_INT 1
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3259: LD_ADDR_VAR 0 8
3263: PUSH
3264: LD_INT 68
3266: PUSH
3267: LD_INT 5
3269: PUSH
3270: LD_INT 96
3272: PUSH
3273: LD_INT 53
3275: PUSH
3276: LD_INT 142
3278: PUSH
3279: LD_INT 98
3281: PUSH
3282: LD_INT 96
3284: PUSH
3285: LD_INT 82
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: ST_TO_ADDR
// hover_x := [ hovercraft_area , 2 ] ;
3298: LD_ADDR_VAR 0 6
3302: PUSH
3303: LD_INT 17
3305: PUSH
3306: LD_INT 2
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 ] ;
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: LD_INT 104
3320: PUSH
3321: LD_INT 21
3323: PUSH
3324: LD_INT 4
3326: PUSH
3327: LD_INT 100
3329: PUSH
3330: LD_INT 21
3332: PUSH
3333: LD_INT 4
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 ] ;
3344: LD_ADDR_VAR 0 7
3348: PUSH
3349: LD_INT 38
3351: PUSH
3352: LD_INT 28
3354: PUSH
3355: LD_INT 41
3357: PUSH
3358: LD_INT 29
3360: PUSH
3361: LD_INT 62
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 65
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: LD_INT 95
3375: PUSH
3376: LD_INT 55
3378: PUSH
3379: LD_INT 98
3381: PUSH
3382: LD_INT 54
3384: PUSH
3385: LD_INT 96
3387: PUSH
3388: LD_INT 111
3390: PUSH
3391: LD_INT 99
3393: PUSH
3394: LD_INT 112
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: ST_TO_ADDR
// end ; 2 , 3 :
3415: GO 3855
3417: LD_INT 2
3419: DOUBLE
3420: EQUAL
3421: IFTRUE 3431
3423: LD_INT 3
3425: DOUBLE
3426: EQUAL
3427: IFTRUE 3431
3429: GO 3854
3431: POP
// begin bunker_xy := [ 56 , 37 , 2 , 81 , 6 , 1 , 90 , 25 , 3 , 105 , 68 , 2 , 96 , 82 , 4 , 80 , 109 , 4 ] ;
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_INT 56
3439: PUSH
3440: LD_INT 37
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 81
3448: PUSH
3449: LD_INT 6
3451: PUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 90
3457: PUSH
3458: LD_INT 25
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: LD_INT 105
3466: PUSH
3467: LD_INT 68
3469: PUSH
3470: LD_INT 2
3472: PUSH
3473: LD_INT 96
3475: PUSH
3476: LD_INT 82
3478: PUSH
3479: LD_INT 4
3481: PUSH
3482: LD_INT 80
3484: PUSH
3485: LD_INT 109
3487: PUSH
3488: LD_INT 4
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: ST_TO_ADDR
// sold_stand := [ sold1 , sold2 , sold3 , sold4 , sold5 , sold6 , sold7 , sold8 ] ;
3511: LD_ADDR_VAR 0 3
3515: PUSH
3516: LD_INT 7
3518: PUSH
3519: LD_INT 8
3521: PUSH
3522: LD_INT 9
3524: PUSH
3525: LD_INT 10
3527: PUSH
3528: LD_INT 11
3530: PUSH
3531: LD_INT 12
3533: PUSH
3534: LD_INT 42
3536: PUSH
3537: LD_INT 43
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: ST_TO_ADDR
// sold_crawl := [ cr1 , cr2 , cr3 , cr4 ] ;
3550: LD_ADDR_VAR 0 4
3554: PUSH
3555: LD_INT 13
3557: PUSH
3558: LD_INT 14
3560: PUSH
3561: LD_INT 15
3563: PUSH
3564: LD_INT 16
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: ST_TO_ADDR
// d := [ 4 , 5 , 0 , 1 ] ;
3573: LD_ADDR_VAR 0 15
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: LD_INT 0
3586: PUSH
3587: LD_INT 1
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: ST_TO_ADDR
// camera_xy := [ 68 , 5 , 96 , 53 , 142 , 98 , 96 , 82 ] ;
3596: LD_ADDR_VAR 0 8
3600: PUSH
3601: LD_INT 68
3603: PUSH
3604: LD_INT 5
3606: PUSH
3607: LD_INT 96
3609: PUSH
3610: LD_INT 53
3612: PUSH
3613: LD_INT 142
3615: PUSH
3616: LD_INT 98
3618: PUSH
3619: LD_INT 96
3621: PUSH
3622: LD_INT 82
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
3635: LD_ADDR_VAR 0 6
3639: PUSH
3640: LD_INT 17
3642: PUSH
3643: LD_INT 3
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: ST_TO_ADDR
// tanks_xy := [ 104 , 21 , 4 , 100 , 21 , 4 , 91 , 28 , 0 , 92 , 31 , 1 , 71 , 106 , 2 , 71 , 103 , 2 , 66 , 102 , 2 ] ;
3650: LD_ADDR_VAR 0 5
3654: PUSH
3655: LD_INT 104
3657: PUSH
3658: LD_INT 21
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: LD_INT 100
3666: PUSH
3667: LD_INT 21
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 91
3675: PUSH
3676: LD_INT 28
3678: PUSH
3679: LD_INT 0
3681: PUSH
3682: LD_INT 92
3684: PUSH
3685: LD_INT 31
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: LD_INT 71
3693: PUSH
3694: LD_INT 106
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: LD_INT 71
3702: PUSH
3703: LD_INT 103
3705: PUSH
3706: LD_INT 2
3708: PUSH
3709: LD_INT 66
3711: PUSH
3712: LD_INT 102
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: ST_TO_ADDR
// mines_xy := [ 38 , 28 , 41 , 29 , 62 , 5 , 65 , 7 , 95 , 55 , 98 , 54 , 96 , 111 , 99 , 112 , 86 , 17 , 89 , 17 , 136 , 91 , 140 , 91 , 102 , 54 ] ;
3741: LD_ADDR_VAR 0 7
3745: PUSH
3746: LD_INT 38
3748: PUSH
3749: LD_INT 28
3751: PUSH
3752: LD_INT 41
3754: PUSH
3755: LD_INT 29
3757: PUSH
3758: LD_INT 62
3760: PUSH
3761: LD_INT 5
3763: PUSH
3764: LD_INT 65
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: LD_INT 95
3772: PUSH
3773: LD_INT 55
3775: PUSH
3776: LD_INT 98
3778: PUSH
3779: LD_INT 54
3781: PUSH
3782: LD_INT 96
3784: PUSH
3785: LD_INT 111
3787: PUSH
3788: LD_INT 99
3790: PUSH
3791: LD_INT 112
3793: PUSH
3794: LD_INT 86
3796: PUSH
3797: LD_INT 17
3799: PUSH
3800: LD_INT 89
3802: PUSH
3803: LD_INT 17
3805: PUSH
3806: LD_INT 136
3808: PUSH
3809: LD_INT 91
3811: PUSH
3812: LD_INT 140
3814: PUSH
3815: LD_INT 91
3817: PUSH
3818: LD_INT 102
3820: PUSH
3821: LD_INT 54
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: ST_TO_ADDR
// end ; end ;
3852: GO 3855
3854: POP
// end else
3855: GO 4797
// if road = 2 then
3857: LD_EXP 2
3861: PUSH
3862: LD_INT 2
3864: EQUAL
3865: IFFALSE 4797
// begin case Difficulty of 1 :
3867: LD_OWVAR 67
3871: PUSH
3872: LD_INT 1
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 4291
3880: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 22
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 62
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 0
3903: PUSH
3904: LD_INT 106
3906: PUSH
3907: LD_INT 68
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 143
3915: PUSH
3916: LD_INT 96
3918: PUSH
3919: LD_INT 3
3921: PUSH
3922: LD_INT 90
3924: PUSH
3925: LD_INT 115
3927: PUSH
3928: LD_INT 4
3930: PUSH
3931: LD_INT 56
3933: PUSH
3934: LD_INT 59
3936: PUSH
3937: LD_INT 5
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 45
3967: PUSH
3968: LD_INT 46
3970: PUSH
3971: LD_INT 47
3973: PUSH
3974: LD_INT 48
3976: PUSH
3977: LD_INT 49
3979: PUSH
3980: LD_INT 50
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
3991: LD_ADDR_VAR 0 4
3995: PUSH
3996: LD_INT 45
3998: PUSH
3999: LD_INT 46
4001: PUSH
4002: LD_INT 47
4004: PUSH
4005: LD_INT 48
4007: PUSH
4008: LD_INT 49
4010: PUSH
4011: LD_INT 50
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4022: LD_ADDR_VAR 0 15
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: LD_INT 0
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: LD_INT 1
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: ST_TO_ADDR
// camera_xy := [ 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4053: LD_ADDR_VAR 0 8
4057: PUSH
4058: LD_INT 44
4060: PUSH
4061: LD_INT 22
4063: PUSH
4064: LD_INT 62
4066: PUSH
4067: LD_INT 8
4069: PUSH
4070: LD_INT 106
4072: PUSH
4073: LD_INT 68
4075: PUSH
4076: LD_INT 143
4078: PUSH
4079: LD_INT 96
4081: PUSH
4082: LD_INT 90
4084: PUSH
4085: LD_INT 115
4087: PUSH
4088: LD_INT 56
4090: PUSH
4091: LD_INT 59
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
// hover_x := [ hovercraft_area , 3 ] ;
4108: LD_ADDR_VAR 0 6
4112: PUSH
4113: LD_INT 17
4115: PUSH
4116: LD_INT 3
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 ] ;
4123: LD_ADDR_VAR 0 5
4127: PUSH
4128: LD_INT 51
4130: PUSH
4131: LD_INT 29
4133: PUSH
4134: LD_INT 5
4136: PUSH
4137: LD_INT 55
4139: PUSH
4140: LD_INT 33
4142: PUSH
4143: LD_INT 5
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4154: LD_ADDR_VAR 0 7
4158: PUSH
4159: LD_INT 31
4161: PUSH
4162: LD_INT 13
4164: PUSH
4165: LD_INT 33
4167: PUSH
4168: LD_INT 13
4170: PUSH
4171: LD_INT 35
4173: PUSH
4174: LD_INT 13
4176: PUSH
4177: LD_INT 98
4179: PUSH
4180: LD_INT 20
4182: PUSH
4183: LD_INT 102
4185: PUSH
4186: LD_INT 25
4188: PUSH
4189: LD_INT 97
4191: PUSH
4192: LD_INT 33
4194: PUSH
4195: LD_INT 101
4197: PUSH
4198: LD_INT 54
4200: PUSH
4201: LD_INT 98
4203: PUSH
4204: LD_INT 54
4206: PUSH
4207: LD_INT 96
4209: PUSH
4210: LD_INT 55
4212: PUSH
4213: LD_INT 94
4215: PUSH
4216: LD_INT 56
4218: PUSH
4219: LD_INT 145
4221: PUSH
4222: LD_INT 102
4224: PUSH
4225: LD_INT 146
4227: PUSH
4228: LD_INT 100
4230: PUSH
4231: LD_INT 97
4233: PUSH
4234: LD_INT 114
4236: PUSH
4237: LD_INT 99
4239: PUSH
4240: LD_INT 117
4242: PUSH
4243: LD_INT 54
4245: PUSH
4246: LD_INT 58
4248: PUSH
4249: LD_INT 55
4251: PUSH
4252: LD_INT 56
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: ST_TO_ADDR
// end ; 2 , 3 :
4289: GO 4797
4291: LD_INT 2
4293: DOUBLE
4294: EQUAL
4295: IFTRUE 4305
4297: LD_INT 3
4299: DOUBLE
4300: EQUAL
4301: IFTRUE 4305
4303: GO 4796
4305: POP
// begin bunker_xy := [ 44 , 22 , 2 , 62 , 8 , 0 , 106 , 68 , 2 , 143 , 96 , 3 , 90 , 115 , 4 , 56 , 59 , 5 ] ;
4306: LD_ADDR_VAR 0 2
4310: PUSH
4311: LD_INT 44
4313: PUSH
4314: LD_INT 22
4316: PUSH
4317: LD_INT 2
4319: PUSH
4320: LD_INT 62
4322: PUSH
4323: LD_INT 8
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: LD_INT 106
4331: PUSH
4332: LD_INT 68
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: LD_INT 143
4340: PUSH
4341: LD_INT 96
4343: PUSH
4344: LD_INT 3
4346: PUSH
4347: LD_INT 90
4349: PUSH
4350: LD_INT 115
4352: PUSH
4353: LD_INT 4
4355: PUSH
4356: LD_INT 56
4358: PUSH
4359: LD_INT 59
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: ST_TO_ADDR
// sold_stand := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4385: LD_ADDR_VAR 0 3
4389: PUSH
4390: LD_INT 45
4392: PUSH
4393: LD_INT 46
4395: PUSH
4396: LD_INT 47
4398: PUSH
4399: LD_INT 48
4401: PUSH
4402: LD_INT 49
4404: PUSH
4405: LD_INT 50
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: ST_TO_ADDR
// sold_crawl := [ ccr1 , ccr2 , ccr3 , ccr4 , ccr5 , ccr6 ] ;
4416: LD_ADDR_VAR 0 4
4420: PUSH
4421: LD_INT 45
4423: PUSH
4424: LD_INT 46
4426: PUSH
4427: LD_INT 47
4429: PUSH
4430: LD_INT 48
4432: PUSH
4433: LD_INT 49
4435: PUSH
4436: LD_INT 50
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: ST_TO_ADDR
// d := [ 0 , 0 , 5 , 0 , 1 , 1 ] ;
4447: LD_ADDR_VAR 0 15
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: LD_INT 0
4457: PUSH
4458: LD_INT 5
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: ST_TO_ADDR
// camera_xy := [ 21 , 27 , 44 , 22 , 62 , 8 , 106 , 68 , 143 , 96 , 90 , 115 , 56 , 59 ] ;
4478: LD_ADDR_VAR 0 8
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 27
4488: PUSH
4489: LD_INT 44
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 62
4497: PUSH
4498: LD_INT 8
4500: PUSH
4501: LD_INT 106
4503: PUSH
4504: LD_INT 68
4506: PUSH
4507: LD_INT 143
4509: PUSH
4510: LD_INT 96
4512: PUSH
4513: LD_INT 90
4515: PUSH
4516: LD_INT 115
4518: PUSH
4519: LD_INT 56
4521: PUSH
4522: LD_INT 59
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: ST_TO_ADDR
// hover_x := [ hovercraft_area , 4 ] ;
4541: LD_ADDR_VAR 0 6
4545: PUSH
4546: LD_INT 17
4548: PUSH
4549: LD_INT 4
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: ST_TO_ADDR
// tanks_xy := [ 51 , 29 , 5 , 55 , 33 , 5 , 97 , 37 , 0 , 112 , 72 , 5 , 120 , 93 , 2 , 25 , 45 , 1 , 27 , 48 , 1 , 28 , 51 , 1 ] ;
4556: LD_ADDR_VAR 0 5
4560: PUSH
4561: LD_INT 51
4563: PUSH
4564: LD_INT 29
4566: PUSH
4567: LD_INT 5
4569: PUSH
4570: LD_INT 55
4572: PUSH
4573: LD_INT 33
4575: PUSH
4576: LD_INT 5
4578: PUSH
4579: LD_INT 97
4581: PUSH
4582: LD_INT 37
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: LD_INT 112
4590: PUSH
4591: LD_INT 72
4593: PUSH
4594: LD_INT 5
4596: PUSH
4597: LD_INT 120
4599: PUSH
4600: LD_INT 93
4602: PUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 45
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: LD_INT 27
4617: PUSH
4618: LD_INT 48
4620: PUSH
4621: LD_INT 1
4623: PUSH
4624: LD_INT 28
4626: PUSH
4627: LD_INT 51
4629: PUSH
4630: LD_INT 1
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: ST_TO_ADDR
// mines_xy := [ 31 , 13 , 33 , 13 , 35 , 13 , 98 , 20 , 102 , 25 , 97 , 33 , 101 , 54 , 98 , 54 , 96 , 55 , 94 , 56 , 145 , 102 , 146 , 100 , 97 , 114 , 99 , 117 , 54 , 58 , 55 , 56 ] ;
4659: LD_ADDR_VAR 0 7
4663: PUSH
4664: LD_INT 31
4666: PUSH
4667: LD_INT 13
4669: PUSH
4670: LD_INT 33
4672: PUSH
4673: LD_INT 13
4675: PUSH
4676: LD_INT 35
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: LD_INT 98
4684: PUSH
4685: LD_INT 20
4687: PUSH
4688: LD_INT 102
4690: PUSH
4691: LD_INT 25
4693: PUSH
4694: LD_INT 97
4696: PUSH
4697: LD_INT 33
4699: PUSH
4700: LD_INT 101
4702: PUSH
4703: LD_INT 54
4705: PUSH
4706: LD_INT 98
4708: PUSH
4709: LD_INT 54
4711: PUSH
4712: LD_INT 96
4714: PUSH
4715: LD_INT 55
4717: PUSH
4718: LD_INT 94
4720: PUSH
4721: LD_INT 56
4723: PUSH
4724: LD_INT 145
4726: PUSH
4727: LD_INT 102
4729: PUSH
4730: LD_INT 146
4732: PUSH
4733: LD_INT 100
4735: PUSH
4736: LD_INT 97
4738: PUSH
4739: LD_INT 114
4741: PUSH
4742: LD_INT 99
4744: PUSH
4745: LD_INT 117
4747: PUSH
4748: LD_INT 54
4750: PUSH
4751: LD_INT 58
4753: PUSH
4754: LD_INT 55
4756: PUSH
4757: LD_INT 56
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// end ; end ;
4794: GO 4797
4796: POP
// end ; skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4797: LD_ADDR_EXP 3
4801: PUSH
4802: LD_INT 4
4804: PUSH
4805: LD_INT 5
4807: PUSH
4808: LD_INT 6
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_OWVAR 67
4820: ARRAY
4821: ST_TO_ADDR
// if Difficulty > 1 then
4822: LD_OWVAR 67
4826: PUSH
4827: LD_INT 1
4829: GREATER
4830: IFFALSE 4845
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
4832: LD_INT 5
4834: PPUSH
4835: LD_INT 2
4837: PPUSH
4838: LD_INT 2
4840: PPUSH
4841: CALL_OW 322
// if Difficulty > 1 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 1
4852: GREATER
4853: IFFALSE 4868
// SetTech ( tech_weap2 , 2 , state_researched ) ;
4855: LD_INT 52
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: LD_INT 2
4863: PPUSH
4864: CALL_OW 322
// miners := [ ] ;
4868: LD_ADDR_EXP 15
4872: PUSH
4873: EMPTY
4874: ST_TO_ADDR
// hovers := [ ] ;
4875: LD_ADDR_EXP 16
4879: PUSH
4880: EMPTY
4881: ST_TO_ADDR
// hovers_driver := [ ] ;
4882: LD_ADDR_EXP 17
4886: PUSH
4887: EMPTY
4888: ST_TO_ADDR
// tanks := [ ] ;
4889: LD_ADDR_EXP 18
4893: PUSH
4894: EMPTY
4895: ST_TO_ADDR
// p := 1 ;
4896: LD_ADDR_VAR 0 10
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// bc_level = [ 4 , 5 , 6 , 7 ] [ Difficulty + 1 ] ;
4904: LD_ADDR_OWVAR 43
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: LD_INT 5
4914: PUSH
4915: LD_INT 6
4917: PUSH
4918: LD_INT 7
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: PUSH
4932: LD_INT 1
4934: PLUS
4935: ARRAY
4936: ST_TO_ADDR
// bc_type = b_breastwork ;
4937: LD_ADDR_OWVAR 42
4941: PUSH
4942: LD_INT 31
4944: ST_TO_ADDR
// for i = 1 to ( bunker_xy / 3 ) do
4945: LD_ADDR_VAR 0 9
4949: PUSH
4950: DOUBLE
4951: LD_INT 1
4953: DEC
4954: ST_TO_ADDR
4955: LD_VAR 0 2
4959: PUSH
4960: LD_INT 3
4962: DIVREAL
4963: PUSH
4964: FOR_TO
4965: IFFALSE 5142
// begin b := CreateAndPlaceBuildingXYD ( bunker_xy [ p ] , bunker_xy [ p + 1 ] , bunker_xy [ p + 2 ] ) ;
4967: LD_ADDR_VAR 0 13
4971: PUSH
4972: LD_VAR 0 2
4976: PUSH
4977: LD_VAR 0 10
4981: ARRAY
4982: PPUSH
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 10
4992: PUSH
4993: LD_INT 1
4995: PLUS
4996: ARRAY
4997: PPUSH
4998: LD_VAR 0 2
5002: PUSH
5003: LD_VAR 0 10
5007: PUSH
5008: LD_INT 2
5010: PLUS
5011: ARRAY
5012: PPUSH
5013: CALL_OW 47
5017: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5018: LD_INT 0
5020: PPUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_EXP 3
5028: PPUSH
5029: CALL_OW 380
// un := CreateHuman ;
5033: LD_ADDR_VAR 0 12
5037: PUSH
5038: CALL_OW 44
5042: ST_TO_ADDR
// dir := GetDir ( b ) ;
5043: LD_ADDR_VAR 0 16
5047: PUSH
5048: LD_VAR 0 13
5052: PPUSH
5053: CALL_OW 254
5057: ST_TO_ADDR
// if dir < 3 then
5058: LD_VAR 0 16
5062: PUSH
5063: LD_INT 3
5065: LESS
5066: IFFALSE 5084
// dir := dir + 3 else
5068: LD_ADDR_VAR 0 16
5072: PUSH
5073: LD_VAR 0 16
5077: PUSH
5078: LD_INT 3
5080: PLUS
5081: ST_TO_ADDR
5082: GO 5098
// dir := dir - 3 ;
5084: LD_ADDR_VAR 0 16
5088: PUSH
5089: LD_VAR 0 16
5093: PUSH
5094: LD_INT 3
5096: MINUS
5097: ST_TO_ADDR
// SetDir ( un , dir ) ;
5098: LD_VAR 0 12
5102: PPUSH
5103: LD_VAR 0 16
5107: PPUSH
5108: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5112: LD_VAR 0 12
5116: PPUSH
5117: LD_VAR 0 13
5121: PPUSH
5122: CALL_OW 52
// p := p + 3 ;
5126: LD_ADDR_VAR 0 10
5130: PUSH
5131: LD_VAR 0 10
5135: PUSH
5136: LD_INT 3
5138: PLUS
5139: ST_TO_ADDR
// end ;
5140: GO 4964
5142: POP
5143: POP
// x := [ 2 , 3 , 4 ] [ Difficulty ] ;
5144: LD_ADDR_VAR 0 14
5148: PUSH
5149: LD_INT 2
5151: PUSH
5152: LD_INT 3
5154: PUSH
5155: LD_INT 4
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PUSH
5163: LD_OWVAR 67
5167: ARRAY
5168: ST_TO_ADDR
// for i = 1 to sold_stand do
5169: LD_ADDR_VAR 0 9
5173: PUSH
5174: DOUBLE
5175: LD_INT 1
5177: DEC
5178: ST_TO_ADDR
5179: LD_VAR 0 3
5183: PUSH
5184: FOR_TO
5185: IFFALSE 5364
// for p = 1 to x do
5187: LD_ADDR_VAR 0 10
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_VAR 0 14
5201: PUSH
5202: FOR_TO
5203: IFFALSE 5360
// begin if sold_stand [ i ] = sold4 or ( road = 2 and difficulty > 1 and p = x ) then
5205: LD_VAR 0 3
5209: PUSH
5210: LD_VAR 0 9
5214: ARRAY
5215: PUSH
5216: LD_INT 10
5218: EQUAL
5219: PUSH
5220: LD_EXP 2
5224: PUSH
5225: LD_INT 2
5227: EQUAL
5228: PUSH
5229: LD_OWVAR 67
5233: PUSH
5234: LD_INT 1
5236: GREATER
5237: AND
5238: PUSH
5239: LD_VAR 0 10
5243: PUSH
5244: LD_VAR 0 14
5248: EQUAL
5249: AND
5250: OR
5251: IFFALSE 5270
// PrepareHuman ( false , class_mortar , skill ) else
5253: LD_INT 0
5255: PPUSH
5256: LD_INT 8
5258: PPUSH
5259: LD_EXP 3
5263: PPUSH
5264: CALL_OW 380
5268: GO 5285
// PrepareHuman ( false , 1 , skill ) ;
5270: LD_INT 0
5272: PPUSH
5273: LD_INT 1
5275: PPUSH
5276: LD_EXP 3
5280: PPUSH
5281: CALL_OW 380
// un := CreateHuman ;
5285: LD_ADDR_VAR 0 12
5289: PUSH
5290: CALL_OW 44
5294: ST_TO_ADDR
// if GetClass ( un ) = 1 then
5295: LD_VAR 0 12
5299: PPUSH
5300: CALL_OW 257
5304: PUSH
5305: LD_INT 1
5307: EQUAL
5308: IFFALSE 5326
// miners := miners ^ un ;
5310: LD_ADDR_EXP 15
5314: PUSH
5315: LD_EXP 15
5319: PUSH
5320: LD_VAR 0 12
5324: ADD
5325: ST_TO_ADDR
// PlaceUnitArea ( un , sold_stand [ i ] , false ) ;
5326: LD_VAR 0 12
5330: PPUSH
5331: LD_VAR 0 3
5335: PUSH
5336: LD_VAR 0 9
5340: ARRAY
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// ComHold ( un ) ;
5349: LD_VAR 0 12
5353: PPUSH
5354: CALL_OW 140
// end ;
5358: GO 5202
5360: POP
5361: POP
5362: GO 5184
5364: POP
5365: POP
// x := [ 3 , 4 , 4 ] [ Difficulty ] ;
5366: LD_ADDR_VAR 0 14
5370: PUSH
5371: LD_INT 3
5373: PUSH
5374: LD_INT 4
5376: PUSH
5377: LD_INT 4
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: PUSH
5385: LD_OWVAR 67
5389: ARRAY
5390: ST_TO_ADDR
// for i = 1 to sold_crawl do
5391: LD_ADDR_VAR 0 9
5395: PUSH
5396: DOUBLE
5397: LD_INT 1
5399: DEC
5400: ST_TO_ADDR
5401: LD_VAR 0 4
5405: PUSH
5406: FOR_TO
5407: IFFALSE 5519
// for p = 1 to x do
5409: LD_ADDR_VAR 0 10
5413: PUSH
5414: DOUBLE
5415: LD_INT 1
5417: DEC
5418: ST_TO_ADDR
5419: LD_VAR 0 14
5423: PUSH
5424: FOR_TO
5425: IFFALSE 5515
// begin PrepareHuman ( false , 1 , skill ) ;
5427: LD_INT 0
5429: PPUSH
5430: LD_INT 1
5432: PPUSH
5433: LD_EXP 3
5437: PPUSH
5438: CALL_OW 380
// un := CreateHuman ;
5442: LD_ADDR_VAR 0 12
5446: PUSH
5447: CALL_OW 44
5451: ST_TO_ADDR
// SetDir ( un , d [ i ] ) ;
5452: LD_VAR 0 12
5456: PPUSH
5457: LD_VAR 0 15
5461: PUSH
5462: LD_VAR 0 9
5466: ARRAY
5467: PPUSH
5468: CALL_OW 233
// PlaceUnitArea ( un , sold_crawl [ i ] , false ) ;
5472: LD_VAR 0 12
5476: PPUSH
5477: LD_VAR 0 4
5481: PUSH
5482: LD_VAR 0 9
5486: ARRAY
5487: PPUSH
5488: LD_INT 0
5490: PPUSH
5491: CALL_OW 49
// ComCrawl ( un ) ;
5495: LD_VAR 0 12
5499: PPUSH
5500: CALL_OW 137
// AddComHold ( un ) ;
5504: LD_VAR 0 12
5508: PPUSH
5509: CALL_OW 200
// end ;
5513: GO 5424
5515: POP
5516: POP
5517: GO 5406
5519: POP
5520: POP
// p := 1 ;
5521: LD_ADDR_VAR 0 10
5525: PUSH
5526: LD_INT 1
5528: ST_TO_ADDR
// for i = 1 to ( camera_xy / 2 ) do
5529: LD_ADDR_VAR 0 9
5533: PUSH
5534: DOUBLE
5535: LD_INT 1
5537: DEC
5538: ST_TO_ADDR
5539: LD_VAR 0 8
5543: PUSH
5544: LD_INT 2
5546: DIVREAL
5547: PUSH
5548: FOR_TO
5549: IFFALSE 5603
// begin PlaceSeeing ( camera_xy [ p ] , camera_xy [ p + 1 ] , 2 , 10 ) ;
5551: LD_VAR 0 8
5555: PUSH
5556: LD_VAR 0 10
5560: ARRAY
5561: PPUSH
5562: LD_VAR 0 8
5566: PUSH
5567: LD_VAR 0 10
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: ARRAY
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 10
5582: PPUSH
5583: CALL_OW 330
// p := p + 2 ;
5587: LD_ADDR_VAR 0 10
5591: PUSH
5592: LD_VAR 0 10
5596: PUSH
5597: LD_INT 2
5599: PLUS
5600: ST_TO_ADDR
// end ;
5601: GO 5548
5603: POP
5604: POP
// for i = 1 to hover_x [ 2 ] do
5605: LD_ADDR_VAR 0 9
5609: PUSH
5610: DOUBLE
5611: LD_INT 1
5613: DEC
5614: ST_TO_ADDR
5615: LD_VAR 0 6
5619: PUSH
5620: LD_INT 2
5622: ARRAY
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5772
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
5627: LD_INT 0
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: LD_EXP 3
5637: PUSH
5638: LD_INT 1
5640: PLUS
5641: PPUSH
5642: CALL_OW 380
// un := CreateHuman ;
5646: LD_ADDR_VAR 0 12
5650: PUSH
5651: CALL_OW 44
5655: ST_TO_ADDR
// hovers_driver := hovers_driver ^ un ;
5656: LD_ADDR_EXP 17
5660: PUSH
5661: LD_EXP 17
5665: PUSH
5666: LD_VAR 0 12
5670: ADD
5671: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_hovercraft , engine_solar , control_manual , [ ar_double_machine_gun , 22 ] [ Rand ( 1 , 2 ) ] ) ;
5672: LD_ADDR_VAR 0 11
5676: PUSH
5677: LD_INT 2
5679: PPUSH
5680: LD_INT 2
5682: PPUSH
5683: LD_INT 11
5685: PPUSH
5686: LD_INT 2
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_INT 24
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 2
5707: PPUSH
5708: CALL_OW 12
5712: ARRAY
5713: PPUSH
5714: CALL 7005 0 6
5718: ST_TO_ADDR
// hovers := hovers ^ veh ;
5719: LD_ADDR_EXP 16
5723: PUSH
5724: LD_EXP 16
5728: PUSH
5729: LD_VAR 0 11
5733: ADD
5734: ST_TO_ADDR
// PlaceUnitArea ( veh , hover_x [ 1 ] , false ) ;
5735: LD_VAR 0 11
5739: PPUSH
5740: LD_VAR 0 6
5744: PUSH
5745: LD_INT 1
5747: ARRAY
5748: PPUSH
5749: LD_INT 0
5751: PPUSH
5752: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5756: LD_VAR 0 12
5760: PPUSH
5761: LD_VAR 0 11
5765: PPUSH
5766: CALL_OW 52
// end ;
5770: GO 5624
5772: POP
5773: POP
// p := 1 ;
5774: LD_ADDR_VAR 0 10
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// for i = 1 to ( tanks_xy / 3 ) do
5782: LD_ADDR_VAR 0 9
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 3
5799: DIVREAL
5800: PUSH
5801: FOR_TO
5802: IFFALSE 5976
// begin PrepareHuman ( false , 1 , skill + 1 ) ;
5804: LD_INT 0
5806: PPUSH
5807: LD_INT 1
5809: PPUSH
5810: LD_EXP 3
5814: PUSH
5815: LD_INT 1
5817: PLUS
5818: PPUSH
5819: CALL_OW 380
// un := CreateHuman ;
5823: LD_ADDR_VAR 0 12
5827: PUSH
5828: CALL_OW 44
5832: ST_TO_ADDR
// veh := CreateTank ( 2 , 2 , ar_half_tracked , engine_solar , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ Rand ( 1 , 3 ) ] ) ;
5833: LD_ADDR_VAR 0 11
5837: PUSH
5838: LD_INT 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: LD_INT 14
5846: PPUSH
5847: LD_INT 2
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: LD_INT 27
5855: PUSH
5856: LD_INT 25
5858: PUSH
5859: LD_INT 26
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: CALL_OW 12
5877: ARRAY
5878: PPUSH
5879: CALL 7005 0 6
5883: ST_TO_ADDR
// SetDir ( veh , tanks_xy [ p + 2 ] ) ;
5884: LD_VAR 0 11
5888: PPUSH
5889: LD_VAR 0 5
5893: PUSH
5894: LD_VAR 0 10
5898: PUSH
5899: LD_INT 2
5901: PLUS
5902: ARRAY
5903: PPUSH
5904: CALL_OW 233
// PlaceUnitXY ( veh , tanks_xy [ p ] , tanks_xy [ p + 1 ] , false ) ;
5908: LD_VAR 0 11
5912: PPUSH
5913: LD_VAR 0 5
5917: PUSH
5918: LD_VAR 0 10
5922: ARRAY
5923: PPUSH
5924: LD_VAR 0 5
5928: PUSH
5929: LD_VAR 0 10
5933: PUSH
5934: LD_INT 1
5936: PLUS
5937: ARRAY
5938: PPUSH
5939: LD_INT 0
5941: PPUSH
5942: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
5946: LD_VAR 0 12
5950: PPUSH
5951: LD_VAR 0 11
5955: PPUSH
5956: CALL_OW 52
// p := p + 3 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_VAR 0 10
5969: PUSH
5970: LD_INT 3
5972: PLUS
5973: ST_TO_ADDR
// end ;
5974: GO 5801
5976: POP
5977: POP
// p := 1 ;
5978: LD_ADDR_VAR 0 10
5982: PUSH
5983: LD_INT 1
5985: ST_TO_ADDR
// for i = 1 to ( mines_xy / 2 ) do
5986: LD_ADDR_VAR 0 9
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_VAR 0 7
6000: PUSH
6001: LD_INT 2
6003: DIVREAL
6004: PUSH
6005: FOR_TO
6006: IFFALSE 6060
// begin PlaceMine ( mines_xy [ p ] , mines_xy [ p + 1 ] , 2 , 0 ) ;
6008: LD_VAR 0 7
6012: PUSH
6013: LD_VAR 0 10
6017: ARRAY
6018: PPUSH
6019: LD_VAR 0 7
6023: PUSH
6024: LD_VAR 0 10
6028: PUSH
6029: LD_INT 1
6031: PLUS
6032: ARRAY
6033: PPUSH
6034: LD_INT 2
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 454
// p := p + 2 ;
6044: LD_ADDR_VAR 0 10
6048: PUSH
6049: LD_VAR 0 10
6053: PUSH
6054: LD_INT 2
6056: PLUS
6057: ST_TO_ADDR
// end ;
6058: GO 6005
6060: POP
6061: POP
// mines := mines_xy ;
6062: LD_ADDR_EXP 14
6066: PUSH
6067: LD_VAR 0 7
6071: ST_TO_ADDR
// end ;
6072: LD_VAR 0 1
6076: RET
// export mines , miners , hovers , hovers_driver , tanks ; every 0 0$01 do var un , p , i ;
6077: GO 6079
6079: DISABLE
6080: LD_INT 0
6082: PPUSH
6083: PPUSH
6084: PPUSH
// begin enable ;
6085: ENABLE
// if tanks > 0 then
6086: LD_EXP 18
6090: PUSH
6091: LD_INT 0
6093: GREATER
6094: IFFALSE 6202
// begin for i = 1 to tanks do
6096: LD_ADDR_VAR 0 3
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_EXP 18
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6200
// if See ( 2 , tanks [ i ] ) and not HasTask ( tanks [ i ] ) then
6114: LD_INT 2
6116: PPUSH
6117: LD_EXP 18
6121: PUSH
6122: LD_VAR 0 3
6126: ARRAY
6127: PPUSH
6128: CALL_OW 292
6132: PUSH
6133: LD_EXP 18
6137: PUSH
6138: LD_VAR 0 3
6142: ARRAY
6143: PPUSH
6144: CALL_OW 314
6148: NOT
6149: AND
6150: IFFALSE 6198
// ComAttackUnit ( tanks [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , tanks [ i ] ) ) ;
6152: LD_EXP 18
6156: PUSH
6157: LD_VAR 0 3
6161: ARRAY
6162: PPUSH
6163: LD_INT 22
6165: PUSH
6166: LD_INT 2
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PPUSH
6173: CALL_OW 69
6177: PPUSH
6178: LD_EXP 18
6182: PUSH
6183: LD_VAR 0 3
6187: ARRAY
6188: PPUSH
6189: CALL_OW 74
6193: PPUSH
6194: CALL_OW 115
6198: GO 6111
6200: POP
6201: POP
// end ; if hovers > 0 then
6202: LD_EXP 16
6206: PUSH
6207: LD_INT 0
6209: GREATER
6210: IFFALSE 6535
// begin for i = 1 to hovers do
6212: LD_ADDR_VAR 0 3
6216: PUSH
6217: DOUBLE
6218: LD_INT 1
6220: DEC
6221: ST_TO_ADDR
6222: LD_EXP 16
6226: PUSH
6227: FOR_TO
6228: IFFALSE 6533
// begin if GetLives ( hovers [ i ] ) < 600 then
6230: LD_EXP 16
6234: PUSH
6235: LD_VAR 0 3
6239: ARRAY
6240: PPUSH
6241: CALL_OW 256
6245: PUSH
6246: LD_INT 600
6248: LESS
6249: IFFALSE 6360
// begin if not IsInArea ( hovers [ i ] , hovercraft_park ) then
6251: LD_EXP 16
6255: PUSH
6256: LD_VAR 0 3
6260: ARRAY
6261: PPUSH
6262: LD_INT 18
6264: PPUSH
6265: CALL_OW 308
6269: NOT
6270: IFFALSE 6292
// ComMoveToArea ( hovers [ i ] , hovercraft_park ) else
6272: LD_EXP 16
6276: PUSH
6277: LD_VAR 0 3
6281: ARRAY
6282: PPUSH
6283: LD_INT 18
6285: PPUSH
6286: CALL_OW 113
6290: GO 6360
// if IsDrivenBy ( hovers [ i ] ) then
6292: LD_EXP 16
6296: PUSH
6297: LD_VAR 0 3
6301: ARRAY
6302: PPUSH
6303: CALL_OW 311
6307: IFFALSE 6360
// begin ComExitVehicle ( IsDrivenBy ( hovers [ i ] ) ) ;
6309: LD_EXP 16
6313: PUSH
6314: LD_VAR 0 3
6318: ARRAY
6319: PPUSH
6320: CALL_OW 311
6324: PPUSH
6325: CALL_OW 121
// AddComRepairVehicle ( IsDrivenBy ( hovers [ i ] ) , hovers [ i ] ) ;
6329: LD_EXP 16
6333: PUSH
6334: LD_VAR 0 3
6338: ARRAY
6339: PPUSH
6340: CALL_OW 311
6344: PPUSH
6345: LD_EXP 16
6349: PUSH
6350: LD_VAR 0 3
6354: ARRAY
6355: PPUSH
6356: CALL_OW 189
// end ; end ; if GetLives ( hovers [ i ] ) > 998 then
6360: LD_EXP 16
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: PPUSH
6371: CALL_OW 256
6375: PUSH
6376: LD_INT 998
6378: GREATER
6379: IFFALSE 6531
// begin if not IsDrivenBy ( hovers [ i ] ) then
6381: LD_EXP 16
6385: PUSH
6386: LD_VAR 0 3
6390: ARRAY
6391: PPUSH
6392: CALL_OW 311
6396: NOT
6397: IFFALSE 6434
// ComEnterUnit ( hovers_driver [ i ] , UnitFilter ( hovers , [ f_empty ] ) [ 1 ] ) ;
6399: LD_EXP 17
6403: PUSH
6404: LD_VAR 0 3
6408: ARRAY
6409: PPUSH
6410: LD_EXP 16
6414: PPUSH
6415: LD_INT 58
6417: PUSH
6418: EMPTY
6419: LIST
6420: PPUSH
6421: CALL_OW 72
6425: PUSH
6426: LD_INT 1
6428: ARRAY
6429: PPUSH
6430: CALL_OW 120
// if FilterUnitsInArea ( water_area , [ f_side , 3 ] ) > 0 then
6434: LD_INT 19
6436: PPUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 70
6451: PUSH
6452: LD_INT 0
6454: GREATER
6455: IFFALSE 6531
// if not HasTask ( IsDrivenBy ( hovers [ i ] ) ) then
6457: LD_EXP 16
6461: PUSH
6462: LD_VAR 0 3
6466: ARRAY
6467: PPUSH
6468: CALL_OW 311
6472: PPUSH
6473: CALL_OW 314
6477: NOT
6478: IFFALSE 6531
// ComAttackUnit ( IsDrivenBy ( hovers [ i ] ) , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , hovers [ i ] ) ) ;
6480: LD_EXP 16
6484: PUSH
6485: LD_VAR 0 3
6489: ARRAY
6490: PPUSH
6491: CALL_OW 311
6495: PPUSH
6496: LD_INT 22
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: PPUSH
6511: LD_EXP 16
6515: PUSH
6516: LD_VAR 0 3
6520: ARRAY
6521: PPUSH
6522: CALL_OW 74
6526: PPUSH
6527: CALL_OW 115
// end ; end ;
6531: GO 6227
6533: POP
6534: POP
// end ; p := 1 ;
6535: LD_ADDR_VAR 0 2
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// for i = 1 to ( mines / 2 ) do
6543: LD_ADDR_VAR 0 3
6547: PUSH
6548: DOUBLE
6549: LD_INT 1
6551: DEC
6552: ST_TO_ADDR
6553: LD_EXP 14
6557: PUSH
6558: LD_INT 2
6560: DIVREAL
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6781
// begin if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) in [ 3 , 6 ] then
6565: LD_EXP 14
6569: PUSH
6570: LD_VAR 0 2
6574: ARRAY
6575: PPUSH
6576: LD_EXP 14
6580: PUSH
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: PLUS
6589: ARRAY
6590: PPUSH
6591: CALL_OW 428
6595: PPUSH
6596: CALL_OW 255
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: LD_INT 6
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: IN
6611: IFFALSE 6765
// if MineAtPos ( mines [ p ] , mines [ p + 1 ] ) then
6613: LD_EXP 14
6617: PUSH
6618: LD_VAR 0 2
6622: ARRAY
6623: PPUSH
6624: LD_EXP 14
6628: PUSH
6629: LD_VAR 0 2
6633: PUSH
6634: LD_INT 1
6636: PLUS
6637: ARRAY
6638: PPUSH
6639: CALL_OW 458
6643: IFFALSE 6765
// if GetDistUnitXY ( NearestUnitToXY ( miners , mines [ p ] , mines [ p + 1 ] ) , mines [ p ] , mines [ p + 1 ] ) < 30 then
6645: LD_EXP 15
6649: PPUSH
6650: LD_EXP 14
6654: PUSH
6655: LD_VAR 0 2
6659: ARRAY
6660: PPUSH
6661: LD_EXP 14
6665: PUSH
6666: LD_VAR 0 2
6670: PUSH
6671: LD_INT 1
6673: PLUS
6674: ARRAY
6675: PPUSH
6676: CALL_OW 73
6680: PPUSH
6681: LD_EXP 14
6685: PUSH
6686: LD_VAR 0 2
6690: ARRAY
6691: PPUSH
6692: LD_EXP 14
6696: PUSH
6697: LD_VAR 0 2
6701: PUSH
6702: LD_INT 1
6704: PLUS
6705: ARRAY
6706: PPUSH
6707: CALL_OW 297
6711: PUSH
6712: LD_INT 30
6714: LESS
6715: IFFALSE 6765
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 2 ) ;
6717: LD_EXP 14
6721: PUSH
6722: LD_VAR 0 2
6726: ARRAY
6727: PPUSH
6728: LD_EXP 14
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_INT 1
6740: PLUS
6741: ARRAY
6742: PPUSH
6743: LD_INT 2
6745: PPUSH
6746: CALL_OW 456
// if not mines_trigger then
6750: LD_EXP 10
6754: NOT
6755: IFFALSE 6765
// mines_trigger := true ;
6757: LD_ADDR_EXP 10
6761: PUSH
6762: LD_INT 1
6764: ST_TO_ADDR
// end ; p := p + 2 ;
6765: LD_ADDR_VAR 0 2
6769: PUSH
6770: LD_VAR 0 2
6774: PUSH
6775: LD_INT 2
6777: PLUS
6778: ST_TO_ADDR
// end ;
6779: GO 6562
6781: POP
6782: POP
// end ;
6783: PPOPN 3
6785: END
// every 0 0$30 trigger GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 or GetDistUnits ( cargos [ 1 ] , player_commander ) > 20 do var i , un ;
6786: LD_EXP 4
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PPUSH
6795: LD_EXP 6
6799: PPUSH
6800: CALL_OW 296
6804: PUSH
6805: LD_INT 20
6807: GREATER
6808: PUSH
6809: LD_EXP 4
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: LD_EXP 6
6822: PPUSH
6823: CALL_OW 296
6827: PUSH
6828: LD_INT 20
6830: GREATER
6831: OR
6832: IFFALSE 6947
6834: GO 6836
6836: DISABLE
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
// begin for i = 1 to Difficulty + 1 do
6841: LD_ADDR_VAR 0 1
6845: PUSH
6846: DOUBLE
6847: LD_INT 1
6849: DEC
6850: ST_TO_ADDR
6851: LD_OWVAR 67
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: PUSH
6860: FOR_TO
6861: IFFALSE 6945
// begin uc_side := 2 ;
6863: LD_ADDR_OWVAR 20
6867: PUSH
6868: LD_INT 2
6870: ST_TO_ADDR
// uc_nation := 2 ;
6871: LD_ADDR_OWVAR 21
6875: PUSH
6876: LD_INT 2
6878: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6879: LD_INT 0
6881: PPUSH
6882: LD_INT 1
6884: PPUSH
6885: LD_EXP 3
6889: PPUSH
6890: CALL_OW 380
// un := CreateHuman ;
6894: LD_ADDR_VAR 0 2
6898: PUSH
6899: CALL_OW 44
6903: ST_TO_ADDR
// PlaceUnitArea ( un , back , false ) ;
6904: LD_VAR 0 2
6908: PPUSH
6909: LD_INT 44
6911: PPUSH
6912: LD_INT 0
6914: PPUSH
6915: CALL_OW 49
// ComAttackUnit ( un , NearestUnitToUnit ( cargos , un ) ) ;
6919: LD_VAR 0 2
6923: PPUSH
6924: LD_EXP 4
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: CALL_OW 74
6938: PPUSH
6939: CALL_OW 115
// end ;
6943: GO 6860
6945: POP
6946: POP
// end ;
6947: PPOPN 2
6949: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_chassis , ar_hovercraft ] ] ] ) then
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 31
6970: PUSH
6971: LD_INT 11
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: IN
6991: IFFALSE 7002
// ComRetreat ( driver ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL 7134 0 1
// end ; end_of_file
7002: PPOPN 4
7004: END
// export function CreateTank ( side , nation , chassis , engine , control , weapon ) ; begin
7005: LD_INT 0
7007: PPUSH
// uc_side := side ;
7008: LD_ADDR_OWVAR 20
7012: PUSH
7013: LD_VAR 0 1
7017: ST_TO_ADDR
// uc_nation := nation ;
7018: LD_ADDR_OWVAR 21
7022: PUSH
7023: LD_VAR 0 2
7027: ST_TO_ADDR
// vc_chassis := chassis ;
7028: LD_ADDR_OWVAR 37
7032: PUSH
7033: LD_VAR 0 3
7037: ST_TO_ADDR
// vc_engine := engine ;
7038: LD_ADDR_OWVAR 39
7042: PUSH
7043: LD_VAR 0 4
7047: ST_TO_ADDR
// vc_control := control ;
7048: LD_ADDR_OWVAR 38
7052: PUSH
7053: LD_VAR 0 5
7057: ST_TO_ADDR
// vc_weapon := weapon ;
7058: LD_ADDR_OWVAR 40
7062: PUSH
7063: LD_VAR 0 6
7067: ST_TO_ADDR
// result := CreateVehicle ;
7068: LD_ADDR_VAR 0 7
7072: PUSH
7073: CALL_OW 45
7077: ST_TO_ADDR
// end ;
7078: LD_VAR 0 7
7082: RET
// export function IsNearbyPoint ( un , x , y ) ; begin
7083: LD_INT 0
7085: PPUSH
// if GetDistUnitXY ( un , x , y ) < 6 then
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_VAR 0 3
7100: PPUSH
7101: CALL_OW 297
7105: PUSH
7106: LD_INT 6
7108: LESS
7109: IFFALSE 7121
// result := true else
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_INT 1
7118: ST_TO_ADDR
7119: GO 7129
// result := false ;
7121: LD_ADDR_VAR 0 4
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// end ;
7129: LD_VAR 0 4
7133: RET
// export function ComRetreat ( un ) ; var coord_dist , dir , x , y ; begin
7134: LD_INT 0
7136: PPUSH
7137: PPUSH
7138: PPUSH
7139: PPUSH
7140: PPUSH
// ComTurnUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 81
7148: PUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: CALL_OW 255
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PPUSH
7163: CALL_OW 69
7167: PPUSH
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 74
7177: PPUSH
7178: CALL_OW 119
// dir := GetDir ( un ) ;
7182: LD_ADDR_VAR 0 4
7186: PUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 254
7196: ST_TO_ADDR
// dir := dir - 3 ;
7197: LD_ADDR_VAR 0 4
7201: PUSH
7202: LD_VAR 0 4
7206: PUSH
7207: LD_INT 3
7209: MINUS
7210: ST_TO_ADDR
// if dir < 0 then
7211: LD_VAR 0 4
7215: PUSH
7216: LD_INT 0
7218: LESS
7219: IFFALSE 7235
// dir := dir + 6 ;
7221: LD_ADDR_VAR 0 4
7225: PUSH
7226: LD_VAR 0 4
7230: PUSH
7231: LD_INT 6
7233: PLUS
7234: ST_TO_ADDR
// while true do
7235: LD_INT 1
7237: IFFALSE 7608
// begin coord_dist := 3 ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 250
7261: PPUSH
7262: LD_VAR 0 4
7266: PPUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: CALL_OW 272
7276: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7277: LD_ADDR_VAR 0 6
7281: PUSH
7282: LD_VAR 0 1
7286: PPUSH
7287: CALL_OW 251
7291: PPUSH
7292: LD_VAR 0 4
7296: PPUSH
7297: LD_VAR 0 3
7301: PPUSH
7302: CALL_OW 273
7306: ST_TO_ADDR
// if IsEnvironment ( x , y ) or ValidHex ( x , y ) = 0 or HexInfo ( x , y ) <> 0 then
7307: LD_VAR 0 5
7311: PPUSH
7312: LD_VAR 0 6
7316: PPUSH
7317: CALL_OW 351
7321: PUSH
7322: LD_VAR 0 5
7326: PPUSH
7327: LD_VAR 0 6
7331: PPUSH
7332: CALL_OW 488
7336: PUSH
7337: LD_INT 0
7339: EQUAL
7340: OR
7341: PUSH
7342: LD_VAR 0 5
7346: PPUSH
7347: LD_VAR 0 6
7351: PPUSH
7352: CALL_OW 428
7356: PUSH
7357: LD_INT 0
7359: NONEQUAL
7360: OR
7361: IFFALSE 7522
// begin repeat begin coord_dist := coord_dist + 1 ;
7363: LD_ADDR_VAR 0 3
7367: PUSH
7368: LD_VAR 0 3
7372: PUSH
7373: LD_INT 1
7375: PLUS
7376: ST_TO_ADDR
// dir := dir + 1 ;
7377: LD_ADDR_VAR 0 4
7381: PUSH
7382: LD_VAR 0 4
7386: PUSH
7387: LD_INT 1
7389: PLUS
7390: ST_TO_ADDR
// if dir > 5 then
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 5
7398: GREATER
7399: IFFALSE 7409
// dir = 0 ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// x := ShiftX ( GetX ( un ) , dir , coord_dist ) ;
7409: LD_ADDR_VAR 0 5
7413: PUSH
7414: LD_VAR 0 1
7418: PPUSH
7419: CALL_OW 250
7423: PPUSH
7424: LD_VAR 0 4
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 272
7438: ST_TO_ADDR
// y := ShiftY ( GetY ( un ) , dir , coord_dist ) ;
7439: LD_ADDR_VAR 0 6
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 251
7453: PPUSH
7454: LD_VAR 0 4
7458: PPUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: CALL_OW 273
7468: ST_TO_ADDR
// end until not IsEnvironment ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = 0 ;
7469: LD_VAR 0 5
7473: PPUSH
7474: LD_VAR 0 6
7478: PPUSH
7479: CALL_OW 351
7483: NOT
7484: PUSH
7485: LD_VAR 0 5
7489: PPUSH
7490: LD_VAR 0 6
7494: PPUSH
7495: CALL_OW 488
7499: AND
7500: PUSH
7501: LD_VAR 0 5
7505: PPUSH
7506: LD_VAR 0 6
7510: PPUSH
7511: CALL_OW 428
7515: PUSH
7516: LD_INT 0
7518: EQUAL
7519: AND
7520: IFFALSE 7363
// end ; ComMoveXY ( un , x , y ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 5
7531: PPUSH
7532: LD_VAR 0 6
7536: PPUSH
7537: CALL_OW 111
// Wait ( 0 0$1 ) ;
7541: LD_INT 35
7543: PPUSH
7544: CALL_OW 67
// if GetDistUnits ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( un ) ] ) , un ) ) >= 10 then
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 81
7555: PUSH
7556: LD_VAR 0 1
7560: PPUSH
7561: CALL_OW 255
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PPUSH
7570: CALL_OW 69
7574: PPUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 74
7584: PPUSH
7585: CALL_OW 296
7589: PUSH
7590: LD_INT 10
7592: GREATEREQUAL
7593: IFFALSE 7606
// begin ComStop ( un ) ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 141
// break ;
7604: GO 7608
// end ; end ;
7606: GO 7235
// end ;
7608: LD_VAR 0 2
7612: RET
