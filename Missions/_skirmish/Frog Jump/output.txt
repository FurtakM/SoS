// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 57306 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 99
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11032: LD_VAR 0 1
11036: PUSH
11037: LD_INT 254
11039: EQUAL
11040: PUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 264
11050: PUSH
11051: LD_EXP 97
11055: EQUAL
11056: AND
11057: PUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: CALL_OW 263
11067: PUSH
11068: LD_INT 3
11070: EQUAL
11071: AND
11072: IFFALSE 11083
// DestroyUnit ( selectedUnit ) ;
11074: LD_VAR 0 3
11078: PPUSH
11079: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11083: LD_VAR 0 1
11087: PUSH
11088: LD_INT 255
11090: EQUAL
11091: PUSH
11092: LD_VAR 0 2
11096: PPUSH
11097: CALL_OW 264
11101: PUSH
11102: LD_INT 14
11104: PUSH
11105: LD_INT 53
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: IN
11112: AND
11113: PUSH
11114: LD_VAR 0 4
11118: PPUSH
11119: LD_VAR 0 5
11123: PPUSH
11124: CALL_OW 488
11128: AND
11129: IFFALSE 11153
// CutTreeXYR ( unit , x , y , 12 ) ;
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_VAR 0 5
11145: PPUSH
11146: LD_INT 12
11148: PPUSH
11149: CALL 11156 0 4
// end ;
11153: PPOPN 5
11155: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11167: LD_VAR 0 1
11171: NOT
11172: PUSH
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: CALL_OW 488
11187: NOT
11188: OR
11189: PUSH
11190: LD_VAR 0 4
11194: NOT
11195: OR
11196: IFFALSE 11200
// exit ;
11198: GO 11540
// list := [ ] ;
11200: LD_ADDR_VAR 0 13
11204: PUSH
11205: EMPTY
11206: ST_TO_ADDR
// if x - r < 0 then
11207: LD_VAR 0 2
11211: PUSH
11212: LD_VAR 0 4
11216: MINUS
11217: PUSH
11218: LD_INT 0
11220: LESS
11221: IFFALSE 11233
// min_x := 0 else
11223: LD_ADDR_VAR 0 7
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
11231: GO 11249
// min_x := x - r ;
11233: LD_ADDR_VAR 0 7
11237: PUSH
11238: LD_VAR 0 2
11242: PUSH
11243: LD_VAR 0 4
11247: MINUS
11248: ST_TO_ADDR
// if y - r < 0 then
11249: LD_VAR 0 3
11253: PUSH
11254: LD_VAR 0 4
11258: MINUS
11259: PUSH
11260: LD_INT 0
11262: LESS
11263: IFFALSE 11275
// min_y := 0 else
11265: LD_ADDR_VAR 0 8
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
11273: GO 11291
// min_y := y - r ;
11275: LD_ADDR_VAR 0 8
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 4
11289: MINUS
11290: ST_TO_ADDR
// max_x := x + r ;
11291: LD_ADDR_VAR 0 9
11295: PUSH
11296: LD_VAR 0 2
11300: PUSH
11301: LD_VAR 0 4
11305: PLUS
11306: ST_TO_ADDR
// max_y := y + r ;
11307: LD_ADDR_VAR 0 10
11311: PUSH
11312: LD_VAR 0 3
11316: PUSH
11317: LD_VAR 0 4
11321: PLUS
11322: ST_TO_ADDR
// for _x = min_x to max_x do
11323: LD_ADDR_VAR 0 11
11327: PUSH
11328: DOUBLE
11329: LD_VAR 0 7
11333: DEC
11334: ST_TO_ADDR
11335: LD_VAR 0 9
11339: PUSH
11340: FOR_TO
11341: IFFALSE 11458
// for _y = min_y to max_y do
11343: LD_ADDR_VAR 0 12
11347: PUSH
11348: DOUBLE
11349: LD_VAR 0 8
11353: DEC
11354: ST_TO_ADDR
11355: LD_VAR 0 10
11359: PUSH
11360: FOR_TO
11361: IFFALSE 11454
// begin if not ValidHex ( _x , _y ) then
11363: LD_VAR 0 11
11367: PPUSH
11368: LD_VAR 0 12
11372: PPUSH
11373: CALL_OW 488
11377: NOT
11378: IFFALSE 11382
// continue ;
11380: GO 11360
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11382: LD_VAR 0 11
11386: PPUSH
11387: LD_VAR 0 12
11391: PPUSH
11392: CALL_OW 351
11396: PUSH
11397: LD_VAR 0 11
11401: PPUSH
11402: LD_VAR 0 12
11406: PPUSH
11407: CALL_OW 554
11411: AND
11412: IFFALSE 11452
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11414: LD_ADDR_VAR 0 13
11418: PUSH
11419: LD_VAR 0 13
11423: PPUSH
11424: LD_VAR 0 13
11428: PUSH
11429: LD_INT 1
11431: PLUS
11432: PPUSH
11433: LD_VAR 0 11
11437: PUSH
11438: LD_VAR 0 12
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 2
11451: ST_TO_ADDR
// end ;
11452: GO 11360
11454: POP
11455: POP
11456: GO 11340
11458: POP
11459: POP
// if not list then
11460: LD_VAR 0 13
11464: NOT
11465: IFFALSE 11469
// exit ;
11467: GO 11540
// for i in list do
11469: LD_ADDR_VAR 0 6
11473: PUSH
11474: LD_VAR 0 13
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11538
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11482: LD_VAR 0 1
11486: PPUSH
11487: LD_STRING M
11489: PUSH
11490: LD_VAR 0 6
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PUSH
11499: LD_VAR 0 6
11503: PUSH
11504: LD_INT 2
11506: ARRAY
11507: PUSH
11508: LD_INT 0
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: LD_INT 0
11516: PUSH
11517: LD_INT 0
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: PPUSH
11532: CALL_OW 447
11536: GO 11479
11538: POP
11539: POP
// end ;
11540: LD_VAR 0 5
11544: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
11545: LD_EXP 36
11549: NOT
11550: IFFALSE 11593
11552: GO 11554
11554: DISABLE
// begin initHack := true ;
11555: LD_ADDR_EXP 36
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// hackTanks := [ ] ;
11563: LD_ADDR_EXP 37
11567: PUSH
11568: EMPTY
11569: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11570: LD_ADDR_EXP 38
11574: PUSH
11575: EMPTY
11576: ST_TO_ADDR
// hackLimit := 3 ;
11577: LD_ADDR_EXP 39
11581: PUSH
11582: LD_INT 3
11584: ST_TO_ADDR
// hackDist := 12 ;
11585: LD_ADDR_EXP 40
11589: PUSH
11590: LD_INT 12
11592: ST_TO_ADDR
// end ;
11593: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11594: LD_EXP 36
11598: PUSH
11599: LD_INT 34
11601: PUSH
11602: LD_EXP 97
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PPUSH
11611: CALL_OW 69
11615: AND
11616: IFFALSE 11845
11618: GO 11620
11620: DISABLE
11621: LD_INT 0
11623: PPUSH
11624: PPUSH
// begin enable ;
11625: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11626: LD_ADDR_VAR 0 1
11630: PUSH
11631: LD_INT 34
11633: PUSH
11634: LD_EXP 97
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PUSH
11648: FOR_IN
11649: IFFALSE 11843
// begin if not i in hackTanks then
11651: LD_VAR 0 1
11655: PUSH
11656: LD_EXP 37
11660: IN
11661: NOT
11662: IFFALSE 11719
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11664: LD_ADDR_EXP 37
11668: PUSH
11669: LD_EXP 37
11673: PPUSH
11674: LD_EXP 37
11678: PUSH
11679: LD_INT 1
11681: PLUS
11682: PPUSH
11683: LD_VAR 0 1
11687: PPUSH
11688: CALL_OW 1
11692: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11693: LD_ADDR_EXP 38
11697: PUSH
11698: LD_EXP 38
11702: PPUSH
11703: LD_EXP 38
11707: PUSH
11708: LD_INT 1
11710: PLUS
11711: PPUSH
11712: EMPTY
11713: PPUSH
11714: CALL_OW 1
11718: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL_OW 302
11728: NOT
11729: IFFALSE 11742
// begin HackUnlinkAll ( i ) ;
11731: LD_VAR 0 1
11735: PPUSH
11736: CALL 11848 0 1
// continue ;
11740: GO 11648
// end ; HackCheckCapturedStatus ( i ) ;
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL 12266 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 81
11758: PUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 255
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 33
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 91
11785: PUSH
11786: LD_VAR 0 1
11790: PUSH
11791: LD_EXP 40
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: EMPTY
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: ST_TO_ADDR
// if not tmp then
11818: LD_VAR 0 2
11822: NOT
11823: IFFALSE 11827
// continue ;
11825: GO 11648
// HackLink ( i , tmp ) ;
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_VAR 0 2
11836: PPUSH
11837: CALL 11984 0 2
// end ;
11841: GO 11648
11843: POP
11844: POP
// end ;
11845: PPOPN 2
11847: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
11852: PPUSH
// if not hack in hackTanks then
11853: LD_VAR 0 1
11857: PUSH
11858: LD_EXP 37
11862: IN
11863: NOT
11864: IFFALSE 11868
// exit ;
11866: GO 11979
// index := GetElementIndex ( hackTanks , hack ) ;
11868: LD_ADDR_VAR 0 4
11872: PUSH
11873: LD_EXP 37
11877: PPUSH
11878: LD_VAR 0 1
11882: PPUSH
11883: CALL 28442 0 2
11887: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11888: LD_EXP 38
11892: PUSH
11893: LD_VAR 0 4
11897: ARRAY
11898: IFFALSE 11979
// begin for i in hackTanksCaptured [ index ] do
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_EXP 38
11909: PUSH
11910: LD_VAR 0 4
11914: ARRAY
11915: PUSH
11916: FOR_IN
11917: IFFALSE 11943
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 2
11935: ARRAY
11936: PPUSH
11937: CALL_OW 235
11941: GO 11916
11943: POP
11944: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11945: LD_ADDR_EXP 38
11949: PUSH
11950: LD_EXP 38
11954: PPUSH
11955: LD_VAR 0 4
11959: PPUSH
11960: EMPTY
11961: PPUSH
11962: CALL_OW 1
11966: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11967: LD_VAR 0 1
11971: PPUSH
11972: LD_INT 0
11974: PPUSH
11975: CALL_OW 505
// end ; end ;
11979: LD_VAR 0 2
11983: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11984: LD_INT 0
11986: PPUSH
11987: PPUSH
11988: PPUSH
// if not hack in hackTanks or not vehicles then
11989: LD_VAR 0 1
11993: PUSH
11994: LD_EXP 37
11998: IN
11999: NOT
12000: PUSH
12001: LD_VAR 0 2
12005: NOT
12006: OR
12007: IFFALSE 12011
// exit ;
12009: GO 12261
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12011: LD_ADDR_VAR 0 2
12015: PUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL 29092 0 4
12036: ST_TO_ADDR
// display_strings := vehicles ;
12037: LD_ADDR_OWVAR 47
12041: PUSH
12042: LD_VAR 0 2
12046: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12047: LD_ADDR_VAR 0 5
12051: PUSH
12052: LD_EXP 37
12056: PPUSH
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 28442 0 2
12066: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12067: LD_EXP 38
12071: PUSH
12072: LD_VAR 0 5
12076: ARRAY
12077: PUSH
12078: LD_EXP 39
12082: LESS
12083: IFFALSE 12237
// begin for i := 1 to vehicles do
12085: LD_ADDR_VAR 0 4
12089: PUSH
12090: DOUBLE
12091: LD_INT 1
12093: DEC
12094: ST_TO_ADDR
12095: LD_VAR 0 2
12099: PUSH
12100: FOR_TO
12101: IFFALSE 12235
// begin if hackTanksCaptured [ index ] = hackLimit then
12103: LD_EXP 38
12107: PUSH
12108: LD_VAR 0 5
12112: ARRAY
12113: PUSH
12114: LD_EXP 39
12118: EQUAL
12119: IFFALSE 12123
// break ;
12121: GO 12235
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12123: LD_ADDR_EXP 38
12127: PUSH
12128: LD_EXP 38
12132: PPUSH
12133: LD_VAR 0 5
12137: PUSH
12138: LD_EXP 38
12142: PUSH
12143: LD_VAR 0 5
12147: ARRAY
12148: PUSH
12149: LD_INT 1
12151: PLUS
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: LD_VAR 0 2
12161: PUSH
12162: LD_VAR 0 4
12166: ARRAY
12167: PUSH
12168: LD_VAR 0 2
12172: PUSH
12173: LD_VAR 0 4
12177: ARRAY
12178: PPUSH
12179: CALL_OW 255
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL 28657 0 3
12192: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12193: LD_VAR 0 2
12197: PUSH
12198: LD_VAR 0 4
12202: ARRAY
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 255
12213: PPUSH
12214: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12218: LD_VAR 0 2
12222: PUSH
12223: LD_VAR 0 4
12227: ARRAY
12228: PPUSH
12229: CALL_OW 141
// end ;
12233: GO 12100
12235: POP
12236: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12237: LD_VAR 0 1
12241: PPUSH
12242: LD_EXP 38
12246: PUSH
12247: LD_VAR 0 5
12251: ARRAY
12252: PUSH
12253: LD_INT 0
12255: PLUS
12256: PPUSH
12257: CALL_OW 505
// end ;
12261: LD_VAR 0 3
12265: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12266: LD_INT 0
12268: PPUSH
12269: PPUSH
12270: PPUSH
12271: PPUSH
// if not hack in hackTanks then
12272: LD_VAR 0 1
12276: PUSH
12277: LD_EXP 37
12281: IN
12282: NOT
12283: IFFALSE 12287
// exit ;
12285: GO 12527
// index := GetElementIndex ( hackTanks , hack ) ;
12287: LD_ADDR_VAR 0 4
12291: PUSH
12292: LD_EXP 37
12296: PPUSH
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL 28442 0 2
12306: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: DOUBLE
12313: LD_EXP 38
12317: PUSH
12318: LD_VAR 0 4
12322: ARRAY
12323: INC
12324: ST_TO_ADDR
12325: LD_INT 1
12327: PUSH
12328: FOR_DOWNTO
12329: IFFALSE 12501
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12331: LD_ADDR_VAR 0 5
12335: PUSH
12336: LD_EXP 38
12340: PUSH
12341: LD_VAR 0 4
12345: ARRAY
12346: PUSH
12347: LD_VAR 0 3
12351: ARRAY
12352: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12353: LD_VAR 0 5
12357: PUSH
12358: LD_INT 1
12360: ARRAY
12361: PPUSH
12362: CALL_OW 302
12366: NOT
12367: PUSH
12368: LD_VAR 0 5
12372: PUSH
12373: LD_INT 1
12375: ARRAY
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 1
12386: PPUSH
12387: CALL_OW 255
12391: NONEQUAL
12392: OR
12393: IFFALSE 12499
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12395: LD_VAR 0 5
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: PPUSH
12404: CALL_OW 305
12408: PUSH
12409: LD_VAR 0 5
12413: PUSH
12414: LD_INT 1
12416: ARRAY
12417: PPUSH
12418: CALL_OW 255
12422: PUSH
12423: LD_VAR 0 1
12427: PPUSH
12428: CALL_OW 255
12432: EQUAL
12433: AND
12434: IFFALSE 12458
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12436: LD_VAR 0 5
12440: PUSH
12441: LD_INT 1
12443: ARRAY
12444: PPUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_INT 2
12452: ARRAY
12453: PPUSH
12454: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12458: LD_ADDR_EXP 38
12462: PUSH
12463: LD_EXP 38
12467: PPUSH
12468: LD_VAR 0 4
12472: PPUSH
12473: LD_EXP 38
12477: PUSH
12478: LD_VAR 0 4
12482: ARRAY
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: CALL_OW 3
12493: PPUSH
12494: CALL_OW 1
12498: ST_TO_ADDR
// end ; end ;
12499: GO 12328
12501: POP
12502: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: LD_EXP 38
12512: PUSH
12513: LD_VAR 0 4
12517: ARRAY
12518: PUSH
12519: LD_INT 0
12521: PLUS
12522: PPUSH
12523: CALL_OW 505
// end ; end_of_file
12527: LD_VAR 0 2
12531: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12532: GO 12534
12534: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12535: LD_STRING initStreamRollete();
12537: PPUSH
12538: CALL_OW 559
// InitStreamMode ;
12542: CALL 12551 0 0
// DefineStreamItems ( ) ;
12546: CALL 12991 0 0
// end ;
12550: END
// function InitStreamMode ; begin
12551: LD_INT 0
12553: PPUSH
// streamModeActive := false ;
12554: LD_ADDR_EXP 41
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// normalCounter := 36 ;
12562: LD_ADDR_EXP 42
12566: PUSH
12567: LD_INT 36
12569: ST_TO_ADDR
// hardcoreCounter := 16 ;
12570: LD_ADDR_EXP 43
12574: PUSH
12575: LD_INT 16
12577: ST_TO_ADDR
// sRocket := false ;
12578: LD_ADDR_EXP 46
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sSpeed := false ;
12586: LD_ADDR_EXP 45
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sEngine := false ;
12594: LD_ADDR_EXP 47
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sSpec := false ;
12602: LD_ADDR_EXP 44
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sLevel := false ;
12610: LD_ADDR_EXP 48
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sArmoury := false ;
12618: LD_ADDR_EXP 49
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sRadar := false ;
12626: LD_ADDR_EXP 50
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sBunker := false ;
12634: LD_ADDR_EXP 51
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sHack := false ;
12642: LD_ADDR_EXP 52
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sFire := false ;
12650: LD_ADDR_EXP 53
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sRefresh := false ;
12658: LD_ADDR_EXP 54
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sExp := false ;
12666: LD_ADDR_EXP 55
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sDepot := false ;
12674: LD_ADDR_EXP 56
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sFlag := false ;
12682: LD_ADDR_EXP 57
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sKamikadze := false ;
12690: LD_ADDR_EXP 65
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sTroll := false ;
12698: LD_ADDR_EXP 66
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sSlow := false ;
12706: LD_ADDR_EXP 67
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sLack := false ;
12714: LD_ADDR_EXP 68
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sTank := false ;
12722: LD_ADDR_EXP 70
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sRemote := false ;
12730: LD_ADDR_EXP 71
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sPowell := false ;
12738: LD_ADDR_EXP 72
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sTeleport := false ;
12746: LD_ADDR_EXP 75
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sOilTower := false ;
12754: LD_ADDR_EXP 77
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sShovel := false ;
12762: LD_ADDR_EXP 78
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sSheik := false ;
12770: LD_ADDR_EXP 79
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sEarthquake := false ;
12778: LD_ADDR_EXP 81
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sAI := false ;
12786: LD_ADDR_EXP 82
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sCargo := false ;
12794: LD_ADDR_EXP 85
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sDLaser := false ;
12802: LD_ADDR_EXP 86
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sExchange := false ;
12810: LD_ADDR_EXP 87
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// sFac := false ;
12818: LD_ADDR_EXP 88
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// sPower := false ;
12826: LD_ADDR_EXP 89
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// sRandom := false ;
12834: LD_ADDR_EXP 90
12838: PUSH
12839: LD_INT 0
12841: ST_TO_ADDR
// sShield := false ;
12842: LD_ADDR_EXP 91
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// sTime := false ;
12850: LD_ADDR_EXP 92
12854: PUSH
12855: LD_INT 0
12857: ST_TO_ADDR
// sTools := false ;
12858: LD_ADDR_EXP 93
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// sSold := false ;
12866: LD_ADDR_EXP 58
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// sDiff := false ;
12874: LD_ADDR_EXP 59
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// sFog := false ;
12882: LD_ADDR_EXP 62
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// sReset := false ;
12890: LD_ADDR_EXP 63
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// sSun := false ;
12898: LD_ADDR_EXP 64
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// sTiger := false ;
12906: LD_ADDR_EXP 60
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// sBomb := false ;
12914: LD_ADDR_EXP 61
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// sWound := false ;
12922: LD_ADDR_EXP 69
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// sBetray := false ;
12930: LD_ADDR_EXP 73
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// sContamin := false ;
12938: LD_ADDR_EXP 74
12942: PUSH
12943: LD_INT 0
12945: ST_TO_ADDR
// sOil := false ;
12946: LD_ADDR_EXP 76
12950: PUSH
12951: LD_INT 0
12953: ST_TO_ADDR
// sStu := false ;
12954: LD_ADDR_EXP 80
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// sBazooka := false ;
12962: LD_ADDR_EXP 83
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
// sMortar := false ;
12970: LD_ADDR_EXP 84
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// sRanger := false ;
12978: LD_ADDR_EXP 94
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// end ;
12986: LD_VAR 0 1
12990: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12991: LD_INT 0
12993: PPUSH
12994: PPUSH
12995: PPUSH
12996: PPUSH
12997: PPUSH
// result := [ ] ;
12998: LD_ADDR_VAR 0 1
13002: PUSH
13003: EMPTY
13004: ST_TO_ADDR
// if campaign_id = 1 then
13005: LD_OWVAR 69
13009: PUSH
13010: LD_INT 1
13012: EQUAL
13013: IFFALSE 15951
// begin case mission_number of 1 :
13015: LD_OWVAR 70
13019: PUSH
13020: LD_INT 1
13022: DOUBLE
13023: EQUAL
13024: IFTRUE 13028
13026: GO 13092
13028: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13029: LD_ADDR_VAR 0 1
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 4
13039: PUSH
13040: LD_INT 11
13042: PUSH
13043: LD_INT 12
13045: PUSH
13046: LD_INT 15
13048: PUSH
13049: LD_INT 16
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 23
13057: PUSH
13058: LD_INT 26
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 101
13074: PUSH
13075: LD_INT 102
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: ST_TO_ADDR
13090: GO 15949
13092: LD_INT 2
13094: DOUBLE
13095: EQUAL
13096: IFTRUE 13100
13098: GO 13172
13100: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: LD_INT 11
13114: PUSH
13115: LD_INT 12
13117: PUSH
13118: LD_INT 15
13120: PUSH
13121: LD_INT 16
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: LD_INT 23
13129: PUSH
13130: LD_INT 26
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 101
13146: PUSH
13147: LD_INT 102
13149: PUSH
13150: LD_INT 105
13152: PUSH
13153: LD_INT 106
13155: PUSH
13156: LD_INT 108
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: ST_TO_ADDR
13170: GO 15949
13172: LD_INT 3
13174: DOUBLE
13175: EQUAL
13176: IFTRUE 13180
13178: GO 13256
13180: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_INT 2
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: LD_INT 11
13197: PUSH
13198: LD_INT 12
13200: PUSH
13201: LD_INT 15
13203: PUSH
13204: LD_INT 16
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_INT 26
13212: PUSH
13213: LD_INT 36
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 101
13230: PUSH
13231: LD_INT 102
13233: PUSH
13234: LD_INT 105
13236: PUSH
13237: LD_INT 106
13239: PUSH
13240: LD_INT 108
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: ST_TO_ADDR
13254: GO 15949
13256: LD_INT 4
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13348
13264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13265: LD_ADDR_VAR 0 1
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: LD_INT 4
13275: PUSH
13276: LD_INT 5
13278: PUSH
13279: LD_INT 8
13281: PUSH
13282: LD_INT 11
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: LD_INT 15
13290: PUSH
13291: LD_INT 16
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 23
13299: PUSH
13300: LD_INT 26
13302: PUSH
13303: LD_INT 36
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 101
13322: PUSH
13323: LD_INT 102
13325: PUSH
13326: LD_INT 105
13328: PUSH
13329: LD_INT 106
13331: PUSH
13332: LD_INT 108
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: ST_TO_ADDR
13346: GO 15949
13348: LD_INT 5
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13456
13356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: LD_INT 4
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: LD_INT 6
13373: PUSH
13374: LD_INT 8
13376: PUSH
13377: LD_INT 11
13379: PUSH
13380: LD_INT 12
13382: PUSH
13383: LD_INT 15
13385: PUSH
13386: LD_INT 16
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 23
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 26
13400: PUSH
13401: LD_INT 36
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 101
13422: PUSH
13423: LD_INT 102
13425: PUSH
13426: LD_INT 105
13428: PUSH
13429: LD_INT 106
13431: PUSH
13432: LD_INT 108
13434: PUSH
13435: LD_INT 109
13437: PUSH
13438: LD_INT 112
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: ST_TO_ADDR
13454: GO 15949
13456: LD_INT 6
13458: DOUBLE
13459: EQUAL
13460: IFTRUE 13464
13462: GO 13584
13464: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13465: LD_ADDR_VAR 0 1
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: LD_INT 5
13478: PUSH
13479: LD_INT 6
13481: PUSH
13482: LD_INT 8
13484: PUSH
13485: LD_INT 11
13487: PUSH
13488: LD_INT 12
13490: PUSH
13491: LD_INT 15
13493: PUSH
13494: LD_INT 16
13496: PUSH
13497: LD_INT 20
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 22
13505: PUSH
13506: LD_INT 23
13508: PUSH
13509: LD_INT 25
13511: PUSH
13512: LD_INT 26
13514: PUSH
13515: LD_INT 30
13517: PUSH
13518: LD_INT 31
13520: PUSH
13521: LD_INT 32
13523: PUSH
13524: LD_INT 36
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 101
13550: PUSH
13551: LD_INT 102
13553: PUSH
13554: LD_INT 105
13556: PUSH
13557: LD_INT 106
13559: PUSH
13560: LD_INT 108
13562: PUSH
13563: LD_INT 109
13565: PUSH
13566: LD_INT 112
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: ST_TO_ADDR
13582: GO 15949
13584: LD_INT 7
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13692
13592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13593: LD_ADDR_VAR 0 1
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 4
13603: PUSH
13604: LD_INT 5
13606: PUSH
13607: LD_INT 7
13609: PUSH
13610: LD_INT 11
13612: PUSH
13613: LD_INT 12
13615: PUSH
13616: LD_INT 15
13618: PUSH
13619: LD_INT 16
13621: PUSH
13622: LD_INT 20
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 22
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 26
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 103
13664: PUSH
13665: LD_INT 105
13667: PUSH
13668: LD_INT 106
13670: PUSH
13671: LD_INT 108
13673: PUSH
13674: LD_INT 112
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: ST_TO_ADDR
13690: GO 15949
13692: LD_INT 8
13694: DOUBLE
13695: EQUAL
13696: IFTRUE 13700
13698: GO 13828
13700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13701: LD_ADDR_VAR 0 1
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: LD_INT 4
13711: PUSH
13712: LD_INT 5
13714: PUSH
13715: LD_INT 6
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 8
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: LD_INT 30
13756: PUSH
13757: LD_INT 31
13759: PUSH
13760: LD_INT 32
13762: PUSH
13763: LD_INT 36
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 101
13790: PUSH
13791: LD_INT 102
13793: PUSH
13794: LD_INT 103
13796: PUSH
13797: LD_INT 105
13799: PUSH
13800: LD_INT 106
13802: PUSH
13803: LD_INT 108
13805: PUSH
13806: LD_INT 109
13808: PUSH
13809: LD_INT 112
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: ST_TO_ADDR
13826: GO 15949
13828: LD_INT 9
13830: DOUBLE
13831: EQUAL
13832: IFTRUE 13836
13834: GO 13972
13836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13837: LD_ADDR_VAR 0 1
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: LD_INT 4
13847: PUSH
13848: LD_INT 5
13850: PUSH
13851: LD_INT 6
13853: PUSH
13854: LD_INT 7
13856: PUSH
13857: LD_INT 8
13859: PUSH
13860: LD_INT 11
13862: PUSH
13863: LD_INT 12
13865: PUSH
13866: LD_INT 15
13868: PUSH
13869: LD_INT 16
13871: PUSH
13872: LD_INT 20
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 23
13883: PUSH
13884: LD_INT 25
13886: PUSH
13887: LD_INT 26
13889: PUSH
13890: LD_INT 28
13892: PUSH
13893: LD_INT 30
13895: PUSH
13896: LD_INT 31
13898: PUSH
13899: LD_INT 32
13901: PUSH
13902: LD_INT 36
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 101
13930: PUSH
13931: LD_INT 102
13933: PUSH
13934: LD_INT 103
13936: PUSH
13937: LD_INT 105
13939: PUSH
13940: LD_INT 106
13942: PUSH
13943: LD_INT 108
13945: PUSH
13946: LD_INT 109
13948: PUSH
13949: LD_INT 112
13951: PUSH
13952: LD_INT 114
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: ST_TO_ADDR
13970: GO 15949
13972: LD_INT 10
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 14164
13980: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: LD_INT 6
13997: PUSH
13998: LD_INT 7
14000: PUSH
14001: LD_INT 8
14003: PUSH
14004: LD_INT 9
14006: PUSH
14007: LD_INT 10
14009: PUSH
14010: LD_INT 11
14012: PUSH
14013: LD_INT 12
14015: PUSH
14016: LD_INT 13
14018: PUSH
14019: LD_INT 14
14021: PUSH
14022: LD_INT 15
14024: PUSH
14025: LD_INT 16
14027: PUSH
14028: LD_INT 17
14030: PUSH
14031: LD_INT 18
14033: PUSH
14034: LD_INT 19
14036: PUSH
14037: LD_INT 20
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 22
14045: PUSH
14046: LD_INT 23
14048: PUSH
14049: LD_INT 24
14051: PUSH
14052: LD_INT 25
14054: PUSH
14055: LD_INT 26
14057: PUSH
14058: LD_INT 28
14060: PUSH
14061: LD_INT 30
14063: PUSH
14064: LD_INT 31
14066: PUSH
14067: LD_INT 32
14069: PUSH
14070: LD_INT 36
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 101
14106: PUSH
14107: LD_INT 102
14109: PUSH
14110: LD_INT 103
14112: PUSH
14113: LD_INT 104
14115: PUSH
14116: LD_INT 105
14118: PUSH
14119: LD_INT 106
14121: PUSH
14122: LD_INT 107
14124: PUSH
14125: LD_INT 108
14127: PUSH
14128: LD_INT 109
14130: PUSH
14131: LD_INT 110
14133: PUSH
14134: LD_INT 111
14136: PUSH
14137: LD_INT 112
14139: PUSH
14140: LD_INT 114
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: ST_TO_ADDR
14162: GO 15949
14164: LD_INT 11
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14364
14172: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_INT 2
14180: PUSH
14181: LD_INT 3
14183: PUSH
14184: LD_INT 4
14186: PUSH
14187: LD_INT 5
14189: PUSH
14190: LD_INT 6
14192: PUSH
14193: LD_INT 7
14195: PUSH
14196: LD_INT 8
14198: PUSH
14199: LD_INT 9
14201: PUSH
14202: LD_INT 10
14204: PUSH
14205: LD_INT 11
14207: PUSH
14208: LD_INT 12
14210: PUSH
14211: LD_INT 13
14213: PUSH
14214: LD_INT 14
14216: PUSH
14217: LD_INT 15
14219: PUSH
14220: LD_INT 16
14222: PUSH
14223: LD_INT 17
14225: PUSH
14226: LD_INT 18
14228: PUSH
14229: LD_INT 19
14231: PUSH
14232: LD_INT 20
14234: PUSH
14235: LD_INT 21
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 24
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 26
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 34
14267: PUSH
14268: LD_INT 36
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 101
14306: PUSH
14307: LD_INT 102
14309: PUSH
14310: LD_INT 103
14312: PUSH
14313: LD_INT 104
14315: PUSH
14316: LD_INT 105
14318: PUSH
14319: LD_INT 106
14321: PUSH
14322: LD_INT 107
14324: PUSH
14325: LD_INT 108
14327: PUSH
14328: LD_INT 109
14330: PUSH
14331: LD_INT 110
14333: PUSH
14334: LD_INT 111
14336: PUSH
14337: LD_INT 112
14339: PUSH
14340: LD_INT 114
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: ST_TO_ADDR
14362: GO 15949
14364: LD_INT 12
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14580
14372: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14373: LD_ADDR_VAR 0 1
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: LD_INT 3
14386: PUSH
14387: LD_INT 4
14389: PUSH
14390: LD_INT 5
14392: PUSH
14393: LD_INT 6
14395: PUSH
14396: LD_INT 7
14398: PUSH
14399: LD_INT 8
14401: PUSH
14402: LD_INT 9
14404: PUSH
14405: LD_INT 10
14407: PUSH
14408: LD_INT 11
14410: PUSH
14411: LD_INT 12
14413: PUSH
14414: LD_INT 13
14416: PUSH
14417: LD_INT 14
14419: PUSH
14420: LD_INT 15
14422: PUSH
14423: LD_INT 16
14425: PUSH
14426: LD_INT 17
14428: PUSH
14429: LD_INT 18
14431: PUSH
14432: LD_INT 19
14434: PUSH
14435: LD_INT 20
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 23
14446: PUSH
14447: LD_INT 24
14449: PUSH
14450: LD_INT 25
14452: PUSH
14453: LD_INT 26
14455: PUSH
14456: LD_INT 27
14458: PUSH
14459: LD_INT 28
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 31
14467: PUSH
14468: LD_INT 32
14470: PUSH
14471: LD_INT 33
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 36
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 101
14518: PUSH
14519: LD_INT 102
14521: PUSH
14522: LD_INT 103
14524: PUSH
14525: LD_INT 104
14527: PUSH
14528: LD_INT 105
14530: PUSH
14531: LD_INT 106
14533: PUSH
14534: LD_INT 107
14536: PUSH
14537: LD_INT 108
14539: PUSH
14540: LD_INT 109
14542: PUSH
14543: LD_INT 110
14545: PUSH
14546: LD_INT 111
14548: PUSH
14549: LD_INT 112
14551: PUSH
14552: LD_INT 113
14554: PUSH
14555: LD_INT 114
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: ST_TO_ADDR
14578: GO 15949
14580: LD_INT 13
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14784
14588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14589: LD_ADDR_VAR 0 1
14593: PUSH
14594: LD_INT 1
14596: PUSH
14597: LD_INT 2
14599: PUSH
14600: LD_INT 3
14602: PUSH
14603: LD_INT 4
14605: PUSH
14606: LD_INT 5
14608: PUSH
14609: LD_INT 8
14611: PUSH
14612: LD_INT 9
14614: PUSH
14615: LD_INT 10
14617: PUSH
14618: LD_INT 11
14620: PUSH
14621: LD_INT 12
14623: PUSH
14624: LD_INT 14
14626: PUSH
14627: LD_INT 15
14629: PUSH
14630: LD_INT 16
14632: PUSH
14633: LD_INT 17
14635: PUSH
14636: LD_INT 18
14638: PUSH
14639: LD_INT 19
14641: PUSH
14642: LD_INT 20
14644: PUSH
14645: LD_INT 21
14647: PUSH
14648: LD_INT 22
14650: PUSH
14651: LD_INT 23
14653: PUSH
14654: LD_INT 24
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 26
14662: PUSH
14663: LD_INT 27
14665: PUSH
14666: LD_INT 28
14668: PUSH
14669: LD_INT 30
14671: PUSH
14672: LD_INT 31
14674: PUSH
14675: LD_INT 32
14677: PUSH
14678: LD_INT 33
14680: PUSH
14681: LD_INT 34
14683: PUSH
14684: LD_INT 36
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 101
14722: PUSH
14723: LD_INT 102
14725: PUSH
14726: LD_INT 103
14728: PUSH
14729: LD_INT 104
14731: PUSH
14732: LD_INT 105
14734: PUSH
14735: LD_INT 106
14737: PUSH
14738: LD_INT 107
14740: PUSH
14741: LD_INT 108
14743: PUSH
14744: LD_INT 109
14746: PUSH
14747: LD_INT 110
14749: PUSH
14750: LD_INT 111
14752: PUSH
14753: LD_INT 112
14755: PUSH
14756: LD_INT 113
14758: PUSH
14759: LD_INT 114
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: ST_TO_ADDR
14782: GO 15949
14784: LD_INT 14
14786: DOUBLE
14787: EQUAL
14788: IFTRUE 14792
14790: GO 15004
14792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14793: LD_ADDR_VAR 0 1
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: LD_INT 5
14812: PUSH
14813: LD_INT 6
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: LD_INT 9
14824: PUSH
14825: LD_INT 10
14827: PUSH
14828: LD_INT 11
14830: PUSH
14831: LD_INT 12
14833: PUSH
14834: LD_INT 13
14836: PUSH
14837: LD_INT 14
14839: PUSH
14840: LD_INT 15
14842: PUSH
14843: LD_INT 16
14845: PUSH
14846: LD_INT 17
14848: PUSH
14849: LD_INT 18
14851: PUSH
14852: LD_INT 19
14854: PUSH
14855: LD_INT 20
14857: PUSH
14858: LD_INT 21
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 23
14866: PUSH
14867: LD_INT 24
14869: PUSH
14870: LD_INT 25
14872: PUSH
14873: LD_INT 26
14875: PUSH
14876: LD_INT 27
14878: PUSH
14879: LD_INT 28
14881: PUSH
14882: LD_INT 29
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 31
14890: PUSH
14891: LD_INT 32
14893: PUSH
14894: LD_INT 33
14896: PUSH
14897: LD_INT 34
14899: PUSH
14900: LD_INT 36
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 101
14942: PUSH
14943: LD_INT 102
14945: PUSH
14946: LD_INT 103
14948: PUSH
14949: LD_INT 104
14951: PUSH
14952: LD_INT 105
14954: PUSH
14955: LD_INT 106
14957: PUSH
14958: LD_INT 107
14960: PUSH
14961: LD_INT 108
14963: PUSH
14964: LD_INT 109
14966: PUSH
14967: LD_INT 110
14969: PUSH
14970: LD_INT 111
14972: PUSH
14973: LD_INT 112
14975: PUSH
14976: LD_INT 113
14978: PUSH
14979: LD_INT 114
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 15949
15004: LD_INT 15
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15224
15012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 6
15035: PUSH
15036: LD_INT 7
15038: PUSH
15039: LD_INT 8
15041: PUSH
15042: LD_INT 9
15044: PUSH
15045: LD_INT 10
15047: PUSH
15048: LD_INT 11
15050: PUSH
15051: LD_INT 12
15053: PUSH
15054: LD_INT 13
15056: PUSH
15057: LD_INT 14
15059: PUSH
15060: LD_INT 15
15062: PUSH
15063: LD_INT 16
15065: PUSH
15066: LD_INT 17
15068: PUSH
15069: LD_INT 18
15071: PUSH
15072: LD_INT 19
15074: PUSH
15075: LD_INT 20
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 23
15086: PUSH
15087: LD_INT 24
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 26
15095: PUSH
15096: LD_INT 27
15098: PUSH
15099: LD_INT 28
15101: PUSH
15102: LD_INT 29
15104: PUSH
15105: LD_INT 30
15107: PUSH
15108: LD_INT 31
15110: PUSH
15111: LD_INT 32
15113: PUSH
15114: LD_INT 33
15116: PUSH
15117: LD_INT 34
15119: PUSH
15120: LD_INT 36
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 101
15162: PUSH
15163: LD_INT 102
15165: PUSH
15166: LD_INT 103
15168: PUSH
15169: LD_INT 104
15171: PUSH
15172: LD_INT 105
15174: PUSH
15175: LD_INT 106
15177: PUSH
15178: LD_INT 107
15180: PUSH
15181: LD_INT 108
15183: PUSH
15184: LD_INT 109
15186: PUSH
15187: LD_INT 110
15189: PUSH
15190: LD_INT 111
15192: PUSH
15193: LD_INT 112
15195: PUSH
15196: LD_INT 113
15198: PUSH
15199: LD_INT 114
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: ST_TO_ADDR
15222: GO 15949
15224: LD_INT 16
15226: DOUBLE
15227: EQUAL
15228: IFTRUE 15232
15230: GO 15356
15232: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 4
15243: PUSH
15244: LD_INT 5
15246: PUSH
15247: LD_INT 7
15249: PUSH
15250: LD_INT 11
15252: PUSH
15253: LD_INT 12
15255: PUSH
15256: LD_INT 15
15258: PUSH
15259: LD_INT 16
15261: PUSH
15262: LD_INT 20
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 23
15273: PUSH
15274: LD_INT 25
15276: PUSH
15277: LD_INT 26
15279: PUSH
15280: LD_INT 30
15282: PUSH
15283: LD_INT 31
15285: PUSH
15286: LD_INT 32
15288: PUSH
15289: LD_INT 33
15291: PUSH
15292: LD_INT 34
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 101
15318: PUSH
15319: LD_INT 102
15321: PUSH
15322: LD_INT 103
15324: PUSH
15325: LD_INT 106
15327: PUSH
15328: LD_INT 108
15330: PUSH
15331: LD_INT 112
15333: PUSH
15334: LD_INT 113
15336: PUSH
15337: LD_INT 114
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: ST_TO_ADDR
15354: GO 15949
15356: LD_INT 17
15358: DOUBLE
15359: EQUAL
15360: IFTRUE 15364
15362: GO 15576
15364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15365: LD_ADDR_VAR 0 1
15369: PUSH
15370: LD_INT 1
15372: PUSH
15373: LD_INT 2
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 4
15381: PUSH
15382: LD_INT 5
15384: PUSH
15385: LD_INT 6
15387: PUSH
15388: LD_INT 7
15390: PUSH
15391: LD_INT 8
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_INT 10
15399: PUSH
15400: LD_INT 11
15402: PUSH
15403: LD_INT 12
15405: PUSH
15406: LD_INT 13
15408: PUSH
15409: LD_INT 14
15411: PUSH
15412: LD_INT 15
15414: PUSH
15415: LD_INT 16
15417: PUSH
15418: LD_INT 17
15420: PUSH
15421: LD_INT 18
15423: PUSH
15424: LD_INT 19
15426: PUSH
15427: LD_INT 20
15429: PUSH
15430: LD_INT 21
15432: PUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 23
15438: PUSH
15439: LD_INT 24
15441: PUSH
15442: LD_INT 25
15444: PUSH
15445: LD_INT 26
15447: PUSH
15448: LD_INT 27
15450: PUSH
15451: LD_INT 28
15453: PUSH
15454: LD_INT 29
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 31
15462: PUSH
15463: LD_INT 32
15465: PUSH
15466: LD_INT 33
15468: PUSH
15469: LD_INT 34
15471: PUSH
15472: LD_INT 36
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 101
15514: PUSH
15515: LD_INT 102
15517: PUSH
15518: LD_INT 103
15520: PUSH
15521: LD_INT 104
15523: PUSH
15524: LD_INT 105
15526: PUSH
15527: LD_INT 106
15529: PUSH
15530: LD_INT 107
15532: PUSH
15533: LD_INT 108
15535: PUSH
15536: LD_INT 109
15538: PUSH
15539: LD_INT 110
15541: PUSH
15542: LD_INT 111
15544: PUSH
15545: LD_INT 112
15547: PUSH
15548: LD_INT 113
15550: PUSH
15551: LD_INT 114
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: ST_TO_ADDR
15574: GO 15949
15576: LD_INT 18
15578: DOUBLE
15579: EQUAL
15580: IFTRUE 15584
15582: GO 15720
15584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15585: LD_ADDR_VAR 0 1
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: LD_INT 4
15595: PUSH
15596: LD_INT 5
15598: PUSH
15599: LD_INT 7
15601: PUSH
15602: LD_INT 11
15604: PUSH
15605: LD_INT 12
15607: PUSH
15608: LD_INT 15
15610: PUSH
15611: LD_INT 16
15613: PUSH
15614: LD_INT 20
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_INT 23
15625: PUSH
15626: LD_INT 25
15628: PUSH
15629: LD_INT 26
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 31
15637: PUSH
15638: LD_INT 32
15640: PUSH
15641: LD_INT 33
15643: PUSH
15644: LD_INT 34
15646: PUSH
15647: LD_INT 35
15649: PUSH
15650: LD_INT 36
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 101
15678: PUSH
15679: LD_INT 102
15681: PUSH
15682: LD_INT 103
15684: PUSH
15685: LD_INT 106
15687: PUSH
15688: LD_INT 108
15690: PUSH
15691: LD_INT 112
15693: PUSH
15694: LD_INT 113
15696: PUSH
15697: LD_INT 114
15699: PUSH
15700: LD_INT 115
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: ST_TO_ADDR
15718: GO 15949
15720: LD_INT 19
15722: DOUBLE
15723: EQUAL
15724: IFTRUE 15728
15726: GO 15948
15728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: LD_INT 3
15742: PUSH
15743: LD_INT 4
15745: PUSH
15746: LD_INT 5
15748: PUSH
15749: LD_INT 6
15751: PUSH
15752: LD_INT 7
15754: PUSH
15755: LD_INT 8
15757: PUSH
15758: LD_INT 9
15760: PUSH
15761: LD_INT 10
15763: PUSH
15764: LD_INT 11
15766: PUSH
15767: LD_INT 12
15769: PUSH
15770: LD_INT 13
15772: PUSH
15773: LD_INT 14
15775: PUSH
15776: LD_INT 15
15778: PUSH
15779: LD_INT 16
15781: PUSH
15782: LD_INT 17
15784: PUSH
15785: LD_INT 18
15787: PUSH
15788: LD_INT 19
15790: PUSH
15791: LD_INT 20
15793: PUSH
15794: LD_INT 21
15796: PUSH
15797: LD_INT 22
15799: PUSH
15800: LD_INT 23
15802: PUSH
15803: LD_INT 24
15805: PUSH
15806: LD_INT 25
15808: PUSH
15809: LD_INT 26
15811: PUSH
15812: LD_INT 27
15814: PUSH
15815: LD_INT 28
15817: PUSH
15818: LD_INT 29
15820: PUSH
15821: LD_INT 30
15823: PUSH
15824: LD_INT 31
15826: PUSH
15827: LD_INT 32
15829: PUSH
15830: LD_INT 33
15832: PUSH
15833: LD_INT 34
15835: PUSH
15836: LD_INT 35
15838: PUSH
15839: LD_INT 36
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 101
15882: PUSH
15883: LD_INT 102
15885: PUSH
15886: LD_INT 103
15888: PUSH
15889: LD_INT 104
15891: PUSH
15892: LD_INT 105
15894: PUSH
15895: LD_INT 106
15897: PUSH
15898: LD_INT 107
15900: PUSH
15901: LD_INT 108
15903: PUSH
15904: LD_INT 109
15906: PUSH
15907: LD_INT 110
15909: PUSH
15910: LD_INT 111
15912: PUSH
15913: LD_INT 112
15915: PUSH
15916: LD_INT 113
15918: PUSH
15919: LD_INT 114
15921: PUSH
15922: LD_INT 115
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: ST_TO_ADDR
15946: GO 15949
15948: POP
// end else
15949: GO 16168
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: LD_INT 2
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: LD_INT 4
15967: PUSH
15968: LD_INT 5
15970: PUSH
15971: LD_INT 6
15973: PUSH
15974: LD_INT 7
15976: PUSH
15977: LD_INT 8
15979: PUSH
15980: LD_INT 9
15982: PUSH
15983: LD_INT 10
15985: PUSH
15986: LD_INT 11
15988: PUSH
15989: LD_INT 12
15991: PUSH
15992: LD_INT 13
15994: PUSH
15995: LD_INT 14
15997: PUSH
15998: LD_INT 15
16000: PUSH
16001: LD_INT 16
16003: PUSH
16004: LD_INT 17
16006: PUSH
16007: LD_INT 18
16009: PUSH
16010: LD_INT 19
16012: PUSH
16013: LD_INT 20
16015: PUSH
16016: LD_INT 21
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_INT 23
16024: PUSH
16025: LD_INT 24
16027: PUSH
16028: LD_INT 25
16030: PUSH
16031: LD_INT 26
16033: PUSH
16034: LD_INT 27
16036: PUSH
16037: LD_INT 28
16039: PUSH
16040: LD_INT 29
16042: PUSH
16043: LD_INT 30
16045: PUSH
16046: LD_INT 31
16048: PUSH
16049: LD_INT 32
16051: PUSH
16052: LD_INT 33
16054: PUSH
16055: LD_INT 34
16057: PUSH
16058: LD_INT 35
16060: PUSH
16061: LD_INT 36
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 101
16104: PUSH
16105: LD_INT 102
16107: PUSH
16108: LD_INT 103
16110: PUSH
16111: LD_INT 104
16113: PUSH
16114: LD_INT 105
16116: PUSH
16117: LD_INT 106
16119: PUSH
16120: LD_INT 107
16122: PUSH
16123: LD_INT 108
16125: PUSH
16126: LD_INT 109
16128: PUSH
16129: LD_INT 110
16131: PUSH
16132: LD_INT 111
16134: PUSH
16135: LD_INT 112
16137: PUSH
16138: LD_INT 113
16140: PUSH
16141: LD_INT 114
16143: PUSH
16144: LD_INT 115
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: ST_TO_ADDR
// if result then
16168: LD_VAR 0 1
16172: IFFALSE 16461
// begin normal :=  ;
16174: LD_ADDR_VAR 0 3
16178: PUSH
16179: LD_STRING 
16181: ST_TO_ADDR
// hardcore :=  ;
16182: LD_ADDR_VAR 0 4
16186: PUSH
16187: LD_STRING 
16189: ST_TO_ADDR
// for i = 1 to normalCounter do
16190: LD_ADDR_VAR 0 5
16194: PUSH
16195: DOUBLE
16196: LD_INT 1
16198: DEC
16199: ST_TO_ADDR
16200: LD_EXP 42
16204: PUSH
16205: FOR_TO
16206: IFFALSE 16307
// begin tmp := 0 ;
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_STRING 0
16215: ST_TO_ADDR
// if result [ 1 ] then
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 1
16223: ARRAY
16224: IFFALSE 16289
// if result [ 1 ] [ 1 ] = i then
16226: LD_VAR 0 1
16230: PUSH
16231: LD_INT 1
16233: ARRAY
16234: PUSH
16235: LD_INT 1
16237: ARRAY
16238: PUSH
16239: LD_VAR 0 5
16243: EQUAL
16244: IFFALSE 16289
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_VAR 0 1
16263: PUSH
16264: LD_INT 1
16266: ARRAY
16267: PPUSH
16268: LD_INT 1
16270: PPUSH
16271: CALL_OW 3
16275: PPUSH
16276: CALL_OW 1
16280: ST_TO_ADDR
// tmp := 1 ;
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_STRING 1
16288: ST_TO_ADDR
// end ; normal := normal & tmp ;
16289: LD_ADDR_VAR 0 3
16293: PUSH
16294: LD_VAR 0 3
16298: PUSH
16299: LD_VAR 0 2
16303: STR
16304: ST_TO_ADDR
// end ;
16305: GO 16205
16307: POP
16308: POP
// for i = 1 to hardcoreCounter do
16309: LD_ADDR_VAR 0 5
16313: PUSH
16314: DOUBLE
16315: LD_INT 1
16317: DEC
16318: ST_TO_ADDR
16319: LD_EXP 43
16323: PUSH
16324: FOR_TO
16325: IFFALSE 16430
// begin tmp := 0 ;
16327: LD_ADDR_VAR 0 2
16331: PUSH
16332: LD_STRING 0
16334: ST_TO_ADDR
// if result [ 2 ] then
16335: LD_VAR 0 1
16339: PUSH
16340: LD_INT 2
16342: ARRAY
16343: IFFALSE 16412
// if result [ 2 ] [ 1 ] = 100 + i then
16345: LD_VAR 0 1
16349: PUSH
16350: LD_INT 2
16352: ARRAY
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PUSH
16358: LD_INT 100
16360: PUSH
16361: LD_VAR 0 5
16365: PLUS
16366: EQUAL
16367: IFFALSE 16412
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: LD_INT 2
16381: PPUSH
16382: LD_VAR 0 1
16386: PUSH
16387: LD_INT 2
16389: ARRAY
16390: PPUSH
16391: LD_INT 1
16393: PPUSH
16394: CALL_OW 3
16398: PPUSH
16399: CALL_OW 1
16403: ST_TO_ADDR
// tmp := 1 ;
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_STRING 1
16411: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16412: LD_ADDR_VAR 0 4
16416: PUSH
16417: LD_VAR 0 4
16421: PUSH
16422: LD_VAR 0 2
16426: STR
16427: ST_TO_ADDR
// end ;
16428: GO 16324
16430: POP
16431: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16432: LD_STRING getStreamItemsFromMission("
16434: PUSH
16435: LD_VAR 0 3
16439: STR
16440: PUSH
16441: LD_STRING ","
16443: STR
16444: PUSH
16445: LD_VAR 0 4
16449: STR
16450: PUSH
16451: LD_STRING ")
16453: STR
16454: PPUSH
16455: CALL_OW 559
// end else
16459: GO 16468
// ToLua ( getStreamItemsFromMission("","") ) ;
16461: LD_STRING getStreamItemsFromMission("","")
16463: PPUSH
16464: CALL_OW 559
// end ;
16468: LD_VAR 0 1
16472: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
16473: LD_VAR 0 2
16477: PUSH
16478: LD_INT 100
16480: EQUAL
16481: IFFALSE 17430
// begin if not StreamModeActive then
16483: LD_EXP 41
16487: NOT
16488: IFFALSE 16498
// StreamModeActive := true ;
16490: LD_ADDR_EXP 41
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 0 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 0
16505: EQUAL
16506: IFFALSE 16512
// InitStreamMode ;
16508: CALL 12551 0 0
// if p3 = 1 then
16512: LD_VAR 0 3
16516: PUSH
16517: LD_INT 1
16519: EQUAL
16520: IFFALSE 16530
// sRocket := true ;
16522: LD_ADDR_EXP 46
16526: PUSH
16527: LD_INT 1
16529: ST_TO_ADDR
// if p3 = 2 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 2
16537: EQUAL
16538: IFFALSE 16548
// sSpeed := true ;
16540: LD_ADDR_EXP 45
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// if p3 = 3 then
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 3
16555: EQUAL
16556: IFFALSE 16566
// sEngine := true ;
16558: LD_ADDR_EXP 47
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
// if p3 = 4 then
16566: LD_VAR 0 3
16570: PUSH
16571: LD_INT 4
16573: EQUAL
16574: IFFALSE 16584
// sSpec := true ;
16576: LD_ADDR_EXP 44
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// if p3 = 5 then
16584: LD_VAR 0 3
16588: PUSH
16589: LD_INT 5
16591: EQUAL
16592: IFFALSE 16602
// sLevel := true ;
16594: LD_ADDR_EXP 48
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// if p3 = 6 then
16602: LD_VAR 0 3
16606: PUSH
16607: LD_INT 6
16609: EQUAL
16610: IFFALSE 16620
// sArmoury := true ;
16612: LD_ADDR_EXP 49
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// if p3 = 7 then
16620: LD_VAR 0 3
16624: PUSH
16625: LD_INT 7
16627: EQUAL
16628: IFFALSE 16638
// sRadar := true ;
16630: LD_ADDR_EXP 50
16634: PUSH
16635: LD_INT 1
16637: ST_TO_ADDR
// if p3 = 8 then
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 8
16645: EQUAL
16646: IFFALSE 16656
// sBunker := true ;
16648: LD_ADDR_EXP 51
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
// if p3 = 9 then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_INT 9
16663: EQUAL
16664: IFFALSE 16674
// sHack := true ;
16666: LD_ADDR_EXP 52
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// if p3 = 10 then
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 10
16681: EQUAL
16682: IFFALSE 16692
// sFire := true ;
16684: LD_ADDR_EXP 53
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// if p3 = 11 then
16692: LD_VAR 0 3
16696: PUSH
16697: LD_INT 11
16699: EQUAL
16700: IFFALSE 16710
// sRefresh := true ;
16702: LD_ADDR_EXP 54
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// if p3 = 12 then
16710: LD_VAR 0 3
16714: PUSH
16715: LD_INT 12
16717: EQUAL
16718: IFFALSE 16728
// sExp := true ;
16720: LD_ADDR_EXP 55
16724: PUSH
16725: LD_INT 1
16727: ST_TO_ADDR
// if p3 = 13 then
16728: LD_VAR 0 3
16732: PUSH
16733: LD_INT 13
16735: EQUAL
16736: IFFALSE 16746
// sDepot := true ;
16738: LD_ADDR_EXP 56
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// if p3 = 14 then
16746: LD_VAR 0 3
16750: PUSH
16751: LD_INT 14
16753: EQUAL
16754: IFFALSE 16764
// sFlag := true ;
16756: LD_ADDR_EXP 57
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// if p3 = 15 then
16764: LD_VAR 0 3
16768: PUSH
16769: LD_INT 15
16771: EQUAL
16772: IFFALSE 16782
// sKamikadze := true ;
16774: LD_ADDR_EXP 65
16778: PUSH
16779: LD_INT 1
16781: ST_TO_ADDR
// if p3 = 16 then
16782: LD_VAR 0 3
16786: PUSH
16787: LD_INT 16
16789: EQUAL
16790: IFFALSE 16800
// sTroll := true ;
16792: LD_ADDR_EXP 66
16796: PUSH
16797: LD_INT 1
16799: ST_TO_ADDR
// if p3 = 17 then
16800: LD_VAR 0 3
16804: PUSH
16805: LD_INT 17
16807: EQUAL
16808: IFFALSE 16818
// sSlow := true ;
16810: LD_ADDR_EXP 67
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// if p3 = 18 then
16818: LD_VAR 0 3
16822: PUSH
16823: LD_INT 18
16825: EQUAL
16826: IFFALSE 16836
// sLack := true ;
16828: LD_ADDR_EXP 68
16832: PUSH
16833: LD_INT 1
16835: ST_TO_ADDR
// if p3 = 19 then
16836: LD_VAR 0 3
16840: PUSH
16841: LD_INT 19
16843: EQUAL
16844: IFFALSE 16854
// sTank := true ;
16846: LD_ADDR_EXP 70
16850: PUSH
16851: LD_INT 1
16853: ST_TO_ADDR
// if p3 = 20 then
16854: LD_VAR 0 3
16858: PUSH
16859: LD_INT 20
16861: EQUAL
16862: IFFALSE 16872
// sRemote := true ;
16864: LD_ADDR_EXP 71
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// if p3 = 21 then
16872: LD_VAR 0 3
16876: PUSH
16877: LD_INT 21
16879: EQUAL
16880: IFFALSE 16890
// sPowell := true ;
16882: LD_ADDR_EXP 72
16886: PUSH
16887: LD_INT 1
16889: ST_TO_ADDR
// if p3 = 22 then
16890: LD_VAR 0 3
16894: PUSH
16895: LD_INT 22
16897: EQUAL
16898: IFFALSE 16908
// sTeleport := true ;
16900: LD_ADDR_EXP 75
16904: PUSH
16905: LD_INT 1
16907: ST_TO_ADDR
// if p3 = 23 then
16908: LD_VAR 0 3
16912: PUSH
16913: LD_INT 23
16915: EQUAL
16916: IFFALSE 16926
// sOilTower := true ;
16918: LD_ADDR_EXP 77
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if p3 = 24 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 24
16933: EQUAL
16934: IFFALSE 16944
// sShovel := true ;
16936: LD_ADDR_EXP 78
16940: PUSH
16941: LD_INT 1
16943: ST_TO_ADDR
// if p3 = 25 then
16944: LD_VAR 0 3
16948: PUSH
16949: LD_INT 25
16951: EQUAL
16952: IFFALSE 16962
// sSheik := true ;
16954: LD_ADDR_EXP 79
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// if p3 = 26 then
16962: LD_VAR 0 3
16966: PUSH
16967: LD_INT 26
16969: EQUAL
16970: IFFALSE 16980
// sEarthquake := true ;
16972: LD_ADDR_EXP 81
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// if p3 = 27 then
16980: LD_VAR 0 3
16984: PUSH
16985: LD_INT 27
16987: EQUAL
16988: IFFALSE 16998
// sAI := true ;
16990: LD_ADDR_EXP 82
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
// if p3 = 28 then
16998: LD_VAR 0 3
17002: PUSH
17003: LD_INT 28
17005: EQUAL
17006: IFFALSE 17016
// sCargo := true ;
17008: LD_ADDR_EXP 85
17012: PUSH
17013: LD_INT 1
17015: ST_TO_ADDR
// if p3 = 29 then
17016: LD_VAR 0 3
17020: PUSH
17021: LD_INT 29
17023: EQUAL
17024: IFFALSE 17034
// sDLaser := true ;
17026: LD_ADDR_EXP 86
17030: PUSH
17031: LD_INT 1
17033: ST_TO_ADDR
// if p3 = 30 then
17034: LD_VAR 0 3
17038: PUSH
17039: LD_INT 30
17041: EQUAL
17042: IFFALSE 17052
// sExchange := true ;
17044: LD_ADDR_EXP 87
17048: PUSH
17049: LD_INT 1
17051: ST_TO_ADDR
// if p3 = 31 then
17052: LD_VAR 0 3
17056: PUSH
17057: LD_INT 31
17059: EQUAL
17060: IFFALSE 17070
// sFac := true ;
17062: LD_ADDR_EXP 88
17066: PUSH
17067: LD_INT 1
17069: ST_TO_ADDR
// if p3 = 32 then
17070: LD_VAR 0 3
17074: PUSH
17075: LD_INT 32
17077: EQUAL
17078: IFFALSE 17088
// sPower := true ;
17080: LD_ADDR_EXP 89
17084: PUSH
17085: LD_INT 1
17087: ST_TO_ADDR
// if p3 = 33 then
17088: LD_VAR 0 3
17092: PUSH
17093: LD_INT 33
17095: EQUAL
17096: IFFALSE 17106
// sRandom := true ;
17098: LD_ADDR_EXP 90
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
// if p3 = 34 then
17106: LD_VAR 0 3
17110: PUSH
17111: LD_INT 34
17113: EQUAL
17114: IFFALSE 17124
// sShield := true ;
17116: LD_ADDR_EXP 91
17120: PUSH
17121: LD_INT 1
17123: ST_TO_ADDR
// if p3 = 35 then
17124: LD_VAR 0 3
17128: PUSH
17129: LD_INT 35
17131: EQUAL
17132: IFFALSE 17142
// sTime := true ;
17134: LD_ADDR_EXP 92
17138: PUSH
17139: LD_INT 1
17141: ST_TO_ADDR
// if p3 = 36 then
17142: LD_VAR 0 3
17146: PUSH
17147: LD_INT 36
17149: EQUAL
17150: IFFALSE 17160
// sTools := true ;
17152: LD_ADDR_EXP 93
17156: PUSH
17157: LD_INT 1
17159: ST_TO_ADDR
// if p3 = 101 then
17160: LD_VAR 0 3
17164: PUSH
17165: LD_INT 101
17167: EQUAL
17168: IFFALSE 17178
// sSold := true ;
17170: LD_ADDR_EXP 58
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// if p3 = 102 then
17178: LD_VAR 0 3
17182: PUSH
17183: LD_INT 102
17185: EQUAL
17186: IFFALSE 17196
// sDiff := true ;
17188: LD_ADDR_EXP 59
17192: PUSH
17193: LD_INT 1
17195: ST_TO_ADDR
// if p3 = 103 then
17196: LD_VAR 0 3
17200: PUSH
17201: LD_INT 103
17203: EQUAL
17204: IFFALSE 17214
// sFog := true ;
17206: LD_ADDR_EXP 62
17210: PUSH
17211: LD_INT 1
17213: ST_TO_ADDR
// if p3 = 104 then
17214: LD_VAR 0 3
17218: PUSH
17219: LD_INT 104
17221: EQUAL
17222: IFFALSE 17232
// sReset := true ;
17224: LD_ADDR_EXP 63
17228: PUSH
17229: LD_INT 1
17231: ST_TO_ADDR
// if p3 = 105 then
17232: LD_VAR 0 3
17236: PUSH
17237: LD_INT 105
17239: EQUAL
17240: IFFALSE 17250
// sSun := true ;
17242: LD_ADDR_EXP 64
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// if p3 = 106 then
17250: LD_VAR 0 3
17254: PUSH
17255: LD_INT 106
17257: EQUAL
17258: IFFALSE 17268
// sTiger := true ;
17260: LD_ADDR_EXP 60
17264: PUSH
17265: LD_INT 1
17267: ST_TO_ADDR
// if p3 = 107 then
17268: LD_VAR 0 3
17272: PUSH
17273: LD_INT 107
17275: EQUAL
17276: IFFALSE 17286
// sBomb := true ;
17278: LD_ADDR_EXP 61
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// if p3 = 108 then
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 108
17293: EQUAL
17294: IFFALSE 17304
// sWound := true ;
17296: LD_ADDR_EXP 69
17300: PUSH
17301: LD_INT 1
17303: ST_TO_ADDR
// if p3 = 109 then
17304: LD_VAR 0 3
17308: PUSH
17309: LD_INT 109
17311: EQUAL
17312: IFFALSE 17322
// sBetray := true ;
17314: LD_ADDR_EXP 73
17318: PUSH
17319: LD_INT 1
17321: ST_TO_ADDR
// if p3 = 110 then
17322: LD_VAR 0 3
17326: PUSH
17327: LD_INT 110
17329: EQUAL
17330: IFFALSE 17340
// sContamin := true ;
17332: LD_ADDR_EXP 74
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// if p3 = 111 then
17340: LD_VAR 0 3
17344: PUSH
17345: LD_INT 111
17347: EQUAL
17348: IFFALSE 17358
// sOil := true ;
17350: LD_ADDR_EXP 76
17354: PUSH
17355: LD_INT 1
17357: ST_TO_ADDR
// if p3 = 112 then
17358: LD_VAR 0 3
17362: PUSH
17363: LD_INT 112
17365: EQUAL
17366: IFFALSE 17376
// sStu := true ;
17368: LD_ADDR_EXP 80
17372: PUSH
17373: LD_INT 1
17375: ST_TO_ADDR
// if p3 = 113 then
17376: LD_VAR 0 3
17380: PUSH
17381: LD_INT 113
17383: EQUAL
17384: IFFALSE 17394
// sBazooka := true ;
17386: LD_ADDR_EXP 83
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// if p3 = 114 then
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 114
17401: EQUAL
17402: IFFALSE 17412
// sMortar := true ;
17404: LD_ADDR_EXP 84
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// if p3 = 115 then
17412: LD_VAR 0 3
17416: PUSH
17417: LD_INT 115
17419: EQUAL
17420: IFFALSE 17430
// sRanger := true ;
17422: LD_ADDR_EXP 94
17426: PUSH
17427: LD_INT 1
17429: ST_TO_ADDR
// end ; end ;
17430: PPOPN 6
17432: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17433: LD_EXP 41
17437: PUSH
17438: LD_EXP 46
17442: AND
17443: IFFALSE 17567
17445: GO 17447
17447: DISABLE
17448: LD_INT 0
17450: PPUSH
17451: PPUSH
// begin enable ;
17452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17453: LD_ADDR_VAR 0 2
17457: PUSH
17458: LD_INT 22
17460: PUSH
17461: LD_OWVAR 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 2
17472: PUSH
17473: LD_INT 34
17475: PUSH
17476: LD_INT 7
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 34
17485: PUSH
17486: LD_INT 45
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 34
17495: PUSH
17496: LD_INT 28
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 34
17505: PUSH
17506: LD_INT 47
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: ST_TO_ADDR
// if not tmp then
17529: LD_VAR 0 2
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17567
// for i in tmp do
17538: LD_ADDR_VAR 0 1
17542: PUSH
17543: LD_VAR 0 2
17547: PUSH
17548: FOR_IN
17549: IFFALSE 17565
// begin SetLives ( i , 0 ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_INT 0
17558: PPUSH
17559: CALL_OW 234
// end ;
17563: GO 17548
17565: POP
17566: POP
// end ;
17567: PPOPN 2
17569: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17570: LD_EXP 41
17574: PUSH
17575: LD_EXP 47
17579: AND
17580: IFFALSE 17664
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
// begin enable ;
17589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17590: LD_ADDR_VAR 0 2
17594: PUSH
17595: LD_INT 22
17597: PUSH
17598: LD_OWVAR 2
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 32
17609: PUSH
17610: LD_INT 3
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PPUSH
17621: CALL_OW 69
17625: ST_TO_ADDR
// if not tmp then
17626: LD_VAR 0 2
17630: NOT
17631: IFFALSE 17635
// exit ;
17633: GO 17664
// for i in tmp do
17635: LD_ADDR_VAR 0 1
17639: PUSH
17640: LD_VAR 0 2
17644: PUSH
17645: FOR_IN
17646: IFFALSE 17662
// begin SetLives ( i , 0 ) ;
17648: LD_VAR 0 1
17652: PPUSH
17653: LD_INT 0
17655: PPUSH
17656: CALL_OW 234
// end ;
17660: GO 17645
17662: POP
17663: POP
// end ;
17664: PPOPN 2
17666: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17667: LD_EXP 41
17671: PUSH
17672: LD_EXP 44
17676: AND
17677: IFFALSE 17770
17679: GO 17681
17681: DISABLE
17682: LD_INT 0
17684: PPUSH
// begin enable ;
17685: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17686: LD_ADDR_VAR 0 1
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: LD_INT 25
17708: PUSH
17709: LD_INT 5
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 25
17718: PUSH
17719: LD_INT 9
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 25
17728: PUSH
17729: LD_INT 8
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PPUSH
17746: CALL_OW 69
17750: PUSH
17751: FOR_IN
17752: IFFALSE 17768
// begin SetClass ( i , 1 ) ;
17754: LD_VAR 0 1
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 336
// end ;
17766: GO 17751
17768: POP
17769: POP
// end ;
17770: PPOPN 1
17772: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17773: LD_EXP 41
17777: PUSH
17778: LD_EXP 45
17782: AND
17783: PUSH
17784: LD_OWVAR 65
17788: PUSH
17789: LD_INT 7
17791: LESS
17792: AND
17793: IFFALSE 17807
17795: GO 17797
17797: DISABLE
// begin enable ;
17798: ENABLE
// game_speed := 7 ;
17799: LD_ADDR_OWVAR 65
17803: PUSH
17804: LD_INT 7
17806: ST_TO_ADDR
// end ;
17807: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17808: LD_EXP 41
17812: PUSH
17813: LD_EXP 48
17817: AND
17818: IFFALSE 18020
17820: GO 17822
17822: DISABLE
17823: LD_INT 0
17825: PPUSH
17826: PPUSH
17827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17828: LD_ADDR_VAR 0 3
17832: PUSH
17833: LD_INT 81
17835: PUSH
17836: LD_OWVAR 2
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 21
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 69
17863: ST_TO_ADDR
// if not tmp then
17864: LD_VAR 0 3
17868: NOT
17869: IFFALSE 17873
// exit ;
17871: GO 18020
// if tmp > 5 then
17873: LD_VAR 0 3
17877: PUSH
17878: LD_INT 5
17880: GREATER
17881: IFFALSE 17893
// k := 5 else
17883: LD_ADDR_VAR 0 2
17887: PUSH
17888: LD_INT 5
17890: ST_TO_ADDR
17891: GO 17903
// k := tmp ;
17893: LD_ADDR_VAR 0 2
17897: PUSH
17898: LD_VAR 0 3
17902: ST_TO_ADDR
// for i := 1 to k do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: DOUBLE
17909: LD_INT 1
17911: DEC
17912: ST_TO_ADDR
17913: LD_VAR 0 2
17917: PUSH
17918: FOR_TO
17919: IFFALSE 18018
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17921: LD_VAR 0 3
17925: PUSH
17926: LD_VAR 0 1
17930: ARRAY
17931: PPUSH
17932: LD_VAR 0 1
17936: PUSH
17937: LD_INT 4
17939: MOD
17940: PUSH
17941: LD_INT 1
17943: PLUS
17944: PPUSH
17945: CALL_OW 259
17949: PUSH
17950: LD_INT 10
17952: LESS
17953: IFFALSE 18016
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17955: LD_VAR 0 3
17959: PUSH
17960: LD_VAR 0 1
17964: ARRAY
17965: PPUSH
17966: LD_VAR 0 1
17970: PUSH
17971: LD_INT 4
17973: MOD
17974: PUSH
17975: LD_INT 1
17977: PLUS
17978: PPUSH
17979: LD_VAR 0 3
17983: PUSH
17984: LD_VAR 0 1
17988: ARRAY
17989: PPUSH
17990: LD_VAR 0 1
17994: PUSH
17995: LD_INT 4
17997: MOD
17998: PUSH
17999: LD_INT 1
18001: PLUS
18002: PPUSH
18003: CALL_OW 259
18007: PUSH
18008: LD_INT 1
18010: PLUS
18011: PPUSH
18012: CALL_OW 237
18016: GO 17918
18018: POP
18019: POP
// end ;
18020: PPOPN 3
18022: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18023: LD_EXP 41
18027: PUSH
18028: LD_EXP 49
18032: AND
18033: IFFALSE 18053
18035: GO 18037
18037: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18038: LD_INT 4
18040: PPUSH
18041: LD_OWVAR 2
18045: PPUSH
18046: LD_INT 0
18048: PPUSH
18049: CALL_OW 324
18053: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18054: LD_EXP 41
18058: PUSH
18059: LD_EXP 78
18063: AND
18064: IFFALSE 18084
18066: GO 18068
18068: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18069: LD_INT 19
18071: PPUSH
18072: LD_OWVAR 2
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: CALL_OW 324
18084: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18085: LD_EXP 41
18089: PUSH
18090: LD_EXP 50
18094: AND
18095: IFFALSE 18197
18097: GO 18099
18099: DISABLE
18100: LD_INT 0
18102: PPUSH
18103: PPUSH
// begin enable ;
18104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18105: LD_ADDR_VAR 0 2
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_OWVAR 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: LD_INT 34
18127: PUSH
18128: LD_INT 11
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 34
18137: PUSH
18138: LD_INT 30
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 69
18158: ST_TO_ADDR
// if not tmp then
18159: LD_VAR 0 2
18163: NOT
18164: IFFALSE 18168
// exit ;
18166: GO 18197
// for i in tmp do
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_VAR 0 2
18177: PUSH
18178: FOR_IN
18179: IFFALSE 18195
// begin SetLives ( i , 0 ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: LD_INT 0
18188: PPUSH
18189: CALL_OW 234
// end ;
18193: GO 18178
18195: POP
18196: POP
// end ;
18197: PPOPN 2
18199: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18200: LD_EXP 41
18204: PUSH
18205: LD_EXP 51
18209: AND
18210: IFFALSE 18230
18212: GO 18214
18214: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18215: LD_INT 32
18217: PPUSH
18218: LD_OWVAR 2
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: CALL_OW 324
18230: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18231: LD_EXP 41
18235: PUSH
18236: LD_EXP 52
18240: AND
18241: IFFALSE 18422
18243: GO 18245
18245: DISABLE
18246: LD_INT 0
18248: PPUSH
18249: PPUSH
18250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18251: LD_ADDR_VAR 0 2
18255: PUSH
18256: LD_INT 22
18258: PUSH
18259: LD_OWVAR 2
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 33
18270: PUSH
18271: LD_INT 3
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PPUSH
18282: CALL_OW 69
18286: ST_TO_ADDR
// if not tmp then
18287: LD_VAR 0 2
18291: NOT
18292: IFFALSE 18296
// exit ;
18294: GO 18422
// side := 0 ;
18296: LD_ADDR_VAR 0 3
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// for i := 1 to 8 do
18304: LD_ADDR_VAR 0 1
18308: PUSH
18309: DOUBLE
18310: LD_INT 1
18312: DEC
18313: ST_TO_ADDR
18314: LD_INT 8
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18366
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18320: LD_OWVAR 2
18324: PUSH
18325: LD_VAR 0 1
18329: NONEQUAL
18330: PUSH
18331: LD_OWVAR 2
18335: PPUSH
18336: LD_VAR 0 1
18340: PPUSH
18341: CALL_OW 81
18345: PUSH
18346: LD_INT 2
18348: EQUAL
18349: AND
18350: IFFALSE 18364
// begin side := i ;
18352: LD_ADDR_VAR 0 3
18356: PUSH
18357: LD_VAR 0 1
18361: ST_TO_ADDR
// break ;
18362: GO 18366
// end ;
18364: GO 18317
18366: POP
18367: POP
// if not side then
18368: LD_VAR 0 3
18372: NOT
18373: IFFALSE 18377
// exit ;
18375: GO 18422
// for i := 1 to tmp do
18377: LD_ADDR_VAR 0 1
18381: PUSH
18382: DOUBLE
18383: LD_INT 1
18385: DEC
18386: ST_TO_ADDR
18387: LD_VAR 0 2
18391: PUSH
18392: FOR_TO
18393: IFFALSE 18420
// if Prob ( 60 ) then
18395: LD_INT 60
18397: PPUSH
18398: CALL_OW 13
18402: IFFALSE 18418
// SetSide ( i , side ) ;
18404: LD_VAR 0 1
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL_OW 235
18418: GO 18392
18420: POP
18421: POP
// end ;
18422: PPOPN 3
18424: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18425: LD_EXP 41
18429: PUSH
18430: LD_EXP 54
18434: AND
18435: IFFALSE 18554
18437: GO 18439
18439: DISABLE
18440: LD_INT 0
18442: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18443: LD_ADDR_VAR 0 1
18447: PUSH
18448: LD_INT 22
18450: PUSH
18451: LD_OWVAR 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 21
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 3
18472: PUSH
18473: LD_INT 23
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 69
18496: PUSH
18497: FOR_IN
18498: IFFALSE 18552
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 257
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: LD_INT 3
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: IN
18528: IFFALSE 18550
// SetClass ( un , rand ( 1 , 4 ) ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: LD_INT 4
18540: PPUSH
18541: CALL_OW 12
18545: PPUSH
18546: CALL_OW 336
18550: GO 18497
18552: POP
18553: POP
// end ;
18554: PPOPN 1
18556: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18557: LD_EXP 41
18561: PUSH
18562: LD_EXP 53
18566: AND
18567: IFFALSE 18646
18569: GO 18571
18571: DISABLE
18572: LD_INT 0
18574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18575: LD_ADDR_VAR 0 1
18579: PUSH
18580: LD_INT 22
18582: PUSH
18583: LD_OWVAR 2
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 21
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PPUSH
18606: CALL_OW 69
18610: ST_TO_ADDR
// if not tmp then
18611: LD_VAR 0 1
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 18646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18620: LD_VAR 0 1
18624: PUSH
18625: LD_INT 1
18627: PPUSH
18628: LD_VAR 0 1
18632: PPUSH
18633: CALL_OW 12
18637: ARRAY
18638: PPUSH
18639: LD_INT 100
18641: PPUSH
18642: CALL_OW 234
// end ;
18646: PPOPN 1
18648: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18649: LD_EXP 41
18653: PUSH
18654: LD_EXP 55
18658: AND
18659: IFFALSE 18757
18661: GO 18663
18663: DISABLE
18664: LD_INT 0
18666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18667: LD_ADDR_VAR 0 1
18671: PUSH
18672: LD_INT 22
18674: PUSH
18675: LD_OWVAR 2
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 21
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PPUSH
18698: CALL_OW 69
18702: ST_TO_ADDR
// if not tmp then
18703: LD_VAR 0 1
18707: NOT
18708: IFFALSE 18712
// exit ;
18710: GO 18757
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18712: LD_VAR 0 1
18716: PUSH
18717: LD_INT 1
18719: PPUSH
18720: LD_VAR 0 1
18724: PPUSH
18725: CALL_OW 12
18729: ARRAY
18730: PPUSH
18731: LD_INT 1
18733: PPUSH
18734: LD_INT 4
18736: PPUSH
18737: CALL_OW 12
18741: PPUSH
18742: LD_INT 3000
18744: PPUSH
18745: LD_INT 9000
18747: PPUSH
18748: CALL_OW 12
18752: PPUSH
18753: CALL_OW 492
// end ;
18757: PPOPN 1
18759: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18760: LD_EXP 41
18764: PUSH
18765: LD_EXP 56
18769: AND
18770: IFFALSE 18790
18772: GO 18774
18774: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18775: LD_INT 1
18777: PPUSH
18778: LD_OWVAR 2
18782: PPUSH
18783: LD_INT 0
18785: PPUSH
18786: CALL_OW 324
18790: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18791: LD_EXP 41
18795: PUSH
18796: LD_EXP 57
18800: AND
18801: IFFALSE 18884
18803: GO 18805
18805: DISABLE
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: LD_INT 22
18817: PUSH
18818: LD_OWVAR 2
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 21
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PPUSH
18841: CALL_OW 69
18845: ST_TO_ADDR
// if not tmp then
18846: LD_VAR 0 2
18850: NOT
18851: IFFALSE 18855
// exit ;
18853: GO 18884
// for i in tmp do
18855: LD_ADDR_VAR 0 1
18859: PUSH
18860: LD_VAR 0 2
18864: PUSH
18865: FOR_IN
18866: IFFALSE 18882
// SetBLevel ( i , 10 ) ;
18868: LD_VAR 0 1
18872: PPUSH
18873: LD_INT 10
18875: PPUSH
18876: CALL_OW 241
18880: GO 18865
18882: POP
18883: POP
// end ;
18884: PPOPN 2
18886: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18887: LD_EXP 41
18891: PUSH
18892: LD_EXP 58
18896: AND
18897: IFFALSE 19008
18899: GO 18901
18901: DISABLE
18902: LD_INT 0
18904: PPUSH
18905: PPUSH
18906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_OWVAR 2
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 25
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PPUSH
18938: CALL_OW 69
18942: ST_TO_ADDR
// if not tmp then
18943: LD_VAR 0 3
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19008
// un := tmp [ rand ( 1 , tmp ) ] ;
18952: LD_ADDR_VAR 0 2
18956: PUSH
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 1
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: CALL_OW 12
18974: ARRAY
18975: ST_TO_ADDR
// if Crawls ( un ) then
18976: LD_VAR 0 2
18980: PPUSH
18981: CALL_OW 318
18985: IFFALSE 18996
// ComWalk ( un ) ;
18987: LD_VAR 0 2
18991: PPUSH
18992: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 336
// end ;
19008: PPOPN 3
19010: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19011: LD_EXP 41
19015: PUSH
19016: LD_EXP 59
19020: AND
19021: PUSH
19022: LD_OWVAR 67
19026: PUSH
19027: LD_INT 3
19029: LESS
19030: AND
19031: IFFALSE 19050
19033: GO 19035
19035: DISABLE
// Difficulty := Difficulty + 1 ;
19036: LD_ADDR_OWVAR 67
19040: PUSH
19041: LD_OWVAR 67
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: ST_TO_ADDR
19050: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19051: LD_EXP 41
19055: PUSH
19056: LD_EXP 60
19060: AND
19061: IFFALSE 19164
19063: GO 19065
19065: DISABLE
19066: LD_INT 0
19068: PPUSH
// begin for i := 1 to 5 do
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: DOUBLE
19075: LD_INT 1
19077: DEC
19078: ST_TO_ADDR
19079: LD_INT 5
19081: PUSH
19082: FOR_TO
19083: IFFALSE 19162
// begin uc_nation := nation_nature ;
19085: LD_ADDR_OWVAR 21
19089: PUSH
19090: LD_INT 0
19092: ST_TO_ADDR
// uc_side := 0 ;
19093: LD_ADDR_OWVAR 20
19097: PUSH
19098: LD_INT 0
19100: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19101: LD_ADDR_OWVAR 29
19105: PUSH
19106: LD_INT 12
19108: PUSH
19109: LD_INT 12
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: ST_TO_ADDR
// hc_agressivity := 20 ;
19116: LD_ADDR_OWVAR 35
19120: PUSH
19121: LD_INT 20
19123: ST_TO_ADDR
// hc_class := class_tiger ;
19124: LD_ADDR_OWVAR 28
19128: PUSH
19129: LD_INT 14
19131: ST_TO_ADDR
// hc_gallery :=  ;
19132: LD_ADDR_OWVAR 33
19136: PUSH
19137: LD_STRING 
19139: ST_TO_ADDR
// hc_name :=  ;
19140: LD_ADDR_OWVAR 26
19144: PUSH
19145: LD_STRING 
19147: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19148: CALL_OW 44
19152: PPUSH
19153: LD_INT 0
19155: PPUSH
19156: CALL_OW 51
// end ;
19160: GO 19082
19162: POP
19163: POP
// end ;
19164: PPOPN 1
19166: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19167: LD_EXP 41
19171: PUSH
19172: LD_EXP 61
19176: AND
19177: IFFALSE 19186
19179: GO 19181
19181: DISABLE
// StreamSibBomb ;
19182: CALL 19187 0 0
19186: END
// export function StreamSibBomb ; var i , x , y ; begin
19187: LD_INT 0
19189: PPUSH
19190: PPUSH
19191: PPUSH
19192: PPUSH
// result := false ;
19193: LD_ADDR_VAR 0 1
19197: PUSH
19198: LD_INT 0
19200: ST_TO_ADDR
// for i := 1 to 16 do
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: DOUBLE
19207: LD_INT 1
19209: DEC
19210: ST_TO_ADDR
19211: LD_INT 16
19213: PUSH
19214: FOR_TO
19215: IFFALSE 19414
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19217: LD_ADDR_VAR 0 3
19221: PUSH
19222: LD_INT 10
19224: PUSH
19225: LD_INT 20
19227: PUSH
19228: LD_INT 30
19230: PUSH
19231: LD_INT 40
19233: PUSH
19234: LD_INT 50
19236: PUSH
19237: LD_INT 60
19239: PUSH
19240: LD_INT 70
19242: PUSH
19243: LD_INT 80
19245: PUSH
19246: LD_INT 90
19248: PUSH
19249: LD_INT 100
19251: PUSH
19252: LD_INT 110
19254: PUSH
19255: LD_INT 120
19257: PUSH
19258: LD_INT 130
19260: PUSH
19261: LD_INT 140
19263: PUSH
19264: LD_INT 150
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PPUSH
19287: LD_INT 15
19289: PPUSH
19290: CALL_OW 12
19294: ARRAY
19295: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 20
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: LD_INT 40
19312: PUSH
19313: LD_INT 50
19315: PUSH
19316: LD_INT 60
19318: PUSH
19319: LD_INT 70
19321: PUSH
19322: LD_INT 80
19324: PUSH
19325: LD_INT 90
19327: PUSH
19328: LD_INT 100
19330: PUSH
19331: LD_INT 110
19333: PUSH
19334: LD_INT 120
19336: PUSH
19337: LD_INT 130
19339: PUSH
19340: LD_INT 140
19342: PUSH
19343: LD_INT 150
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 15
19368: PPUSH
19369: CALL_OW 12
19373: ARRAY
19374: ST_TO_ADDR
// if ValidHex ( x , y ) then
19375: LD_VAR 0 3
19379: PPUSH
19380: LD_VAR 0 4
19384: PPUSH
19385: CALL_OW 488
19389: IFFALSE 19412
// begin result := [ x , y ] ;
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_VAR 0 4
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: ST_TO_ADDR
// break ;
19410: GO 19414
// end ; end ;
19412: GO 19214
19414: POP
19415: POP
// if result then
19416: LD_VAR 0 1
19420: IFFALSE 19480
// begin ToLua ( playSibBomb() ) ;
19422: LD_STRING playSibBomb()
19424: PPUSH
19425: CALL_OW 559
// wait ( 0 0$14 ) ;
19429: LD_INT 490
19431: PPUSH
19432: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 1
19443: ARRAY
19444: PPUSH
19445: LD_VAR 0 1
19449: PUSH
19450: LD_INT 2
19452: ARRAY
19453: PPUSH
19454: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19458: LD_VAR 0 1
19462: PUSH
19463: LD_INT 1
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 1
19471: PUSH
19472: LD_INT 2
19474: ARRAY
19475: PPUSH
19476: CALL_OW 429
// end ; end ;
19480: LD_VAR 0 1
19484: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19485: LD_EXP 41
19489: PUSH
19490: LD_EXP 63
19494: AND
19495: IFFALSE 19507
19497: GO 19499
19499: DISABLE
// YouLost (  ) ;
19500: LD_STRING 
19502: PPUSH
19503: CALL_OW 104
19507: END
// every 0 0$1 trigger StreamModeActive and sFog do
19508: LD_EXP 41
19512: PUSH
19513: LD_EXP 62
19517: AND
19518: IFFALSE 19532
19520: GO 19522
19522: DISABLE
// FogOff ( your_side ) ;
19523: LD_OWVAR 2
19527: PPUSH
19528: CALL_OW 344
19532: END
// every 0 0$1 trigger StreamModeActive and sSun do
19533: LD_EXP 41
19537: PUSH
19538: LD_EXP 64
19542: AND
19543: IFFALSE 19571
19545: GO 19547
19547: DISABLE
// begin solar_recharge_percent := 0 ;
19548: LD_ADDR_OWVAR 79
19552: PUSH
19553: LD_INT 0
19555: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19556: LD_INT 10500
19558: PPUSH
19559: CALL_OW 67
// solar_recharge_percent := 100 ;
19563: LD_ADDR_OWVAR 79
19567: PUSH
19568: LD_INT 100
19570: ST_TO_ADDR
// end ;
19571: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19572: LD_EXP 41
19576: PUSH
19577: LD_EXP 65
19581: AND
19582: IFFALSE 19821
19584: GO 19586
19586: DISABLE
19587: LD_INT 0
19589: PPUSH
19590: PPUSH
19591: PPUSH
// begin tmp := [ ] ;
19592: LD_ADDR_VAR 0 3
19596: PUSH
19597: EMPTY
19598: ST_TO_ADDR
// for i := 1 to 6 do
19599: LD_ADDR_VAR 0 1
19603: PUSH
19604: DOUBLE
19605: LD_INT 1
19607: DEC
19608: ST_TO_ADDR
19609: LD_INT 6
19611: PUSH
19612: FOR_TO
19613: IFFALSE 19718
// begin uc_nation := nation_nature ;
19615: LD_ADDR_OWVAR 21
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// uc_side := 0 ;
19623: LD_ADDR_OWVAR 20
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19631: LD_ADDR_OWVAR 29
19635: PUSH
19636: LD_INT 12
19638: PUSH
19639: LD_INT 12
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: ST_TO_ADDR
// hc_agressivity := 20 ;
19646: LD_ADDR_OWVAR 35
19650: PUSH
19651: LD_INT 20
19653: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19654: LD_ADDR_OWVAR 28
19658: PUSH
19659: LD_INT 17
19661: ST_TO_ADDR
// hc_gallery :=  ;
19662: LD_ADDR_OWVAR 33
19666: PUSH
19667: LD_STRING 
19669: ST_TO_ADDR
// hc_name :=  ;
19670: LD_ADDR_OWVAR 26
19674: PUSH
19675: LD_STRING 
19677: ST_TO_ADDR
// un := CreateHuman ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: CALL_OW 44
19687: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19688: LD_VAR 0 2
19692: PPUSH
19693: LD_INT 1
19695: PPUSH
19696: CALL_OW 51
// tmp := tmp ^ un ;
19700: LD_ADDR_VAR 0 3
19704: PUSH
19705: LD_VAR 0 3
19709: PUSH
19710: LD_VAR 0 2
19714: ADD
19715: ST_TO_ADDR
// end ;
19716: GO 19612
19718: POP
19719: POP
// repeat wait ( 0 0$1 ) ;
19720: LD_INT 35
19722: PPUSH
19723: CALL_OW 67
// for un in tmp do
19727: LD_ADDR_VAR 0 2
19731: PUSH
19732: LD_VAR 0 3
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19812
// begin if IsDead ( un ) then
19740: LD_VAR 0 2
19744: PPUSH
19745: CALL_OW 301
19749: IFFALSE 19769
// begin tmp := tmp diff un ;
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_VAR 0 2
19765: DIFF
19766: ST_TO_ADDR
// continue ;
19767: GO 19737
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19769: LD_VAR 0 2
19773: PPUSH
19774: LD_INT 3
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: PPUSH
19796: LD_VAR 0 2
19800: PPUSH
19801: CALL_OW 74
19805: PPUSH
19806: CALL_OW 115
// end ;
19810: GO 19737
19812: POP
19813: POP
// until not tmp ;
19814: LD_VAR 0 3
19818: NOT
19819: IFFALSE 19720
// end ;
19821: PPOPN 3
19823: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19824: LD_EXP 41
19828: PUSH
19829: LD_EXP 66
19833: AND
19834: IFFALSE 19888
19836: GO 19838
19838: DISABLE
// begin ToLua ( displayTroll(); ) ;
19839: LD_STRING displayTroll();
19841: PPUSH
19842: CALL_OW 559
// wait ( 3 3$00 ) ;
19846: LD_INT 6300
19848: PPUSH
19849: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19853: LD_STRING hideTroll();
19855: PPUSH
19856: CALL_OW 559
// wait ( 1 1$00 ) ;
19860: LD_INT 2100
19862: PPUSH
19863: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19867: LD_STRING displayTroll();
19869: PPUSH
19870: CALL_OW 559
// wait ( 1 1$00 ) ;
19874: LD_INT 2100
19876: PPUSH
19877: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19881: LD_STRING hideTroll();
19883: PPUSH
19884: CALL_OW 559
// end ;
19888: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19889: LD_EXP 41
19893: PUSH
19894: LD_EXP 67
19898: AND
19899: IFFALSE 19962
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
// begin p := 0 ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// repeat game_speed := 1 ;
19915: LD_ADDR_OWVAR 65
19919: PUSH
19920: LD_INT 1
19922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19923: LD_INT 35
19925: PPUSH
19926: CALL_OW 67
// p := p + 1 ;
19930: LD_ADDR_VAR 0 1
19934: PUSH
19935: LD_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: PLUS
19943: ST_TO_ADDR
// until p >= 60 ;
19944: LD_VAR 0 1
19948: PUSH
19949: LD_INT 60
19951: GREATEREQUAL
19952: IFFALSE 19915
// game_speed := 4 ;
19954: LD_ADDR_OWVAR 65
19958: PUSH
19959: LD_INT 4
19961: ST_TO_ADDR
// end ;
19962: PPOPN 1
19964: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19965: LD_EXP 41
19969: PUSH
19970: LD_EXP 68
19974: AND
19975: IFFALSE 20121
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
19983: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 30
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 30
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 69
20037: ST_TO_ADDR
// if not depot then
20038: LD_VAR 0 1
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20121
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20047: LD_ADDR_VAR 0 2
20051: PUSH
20052: LD_VAR 0 1
20056: PUSH
20057: LD_INT 1
20059: PPUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 12
20069: ARRAY
20070: PPUSH
20071: CALL_OW 274
20075: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20076: LD_VAR 0 2
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: LD_INT 0
20086: PPUSH
20087: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 2
20098: PPUSH
20099: LD_INT 0
20101: PPUSH
20102: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20106: LD_VAR 0 2
20110: PPUSH
20111: LD_INT 3
20113: PPUSH
20114: LD_INT 0
20116: PPUSH
20117: CALL_OW 277
// end ;
20121: PPOPN 2
20123: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20124: LD_EXP 41
20128: PUSH
20129: LD_EXP 69
20133: AND
20134: IFFALSE 20231
20136: GO 20138
20138: DISABLE
20139: LD_INT 0
20141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20142: LD_ADDR_VAR 0 1
20146: PUSH
20147: LD_INT 22
20149: PUSH
20150: LD_OWVAR 2
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 21
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 3
20171: PUSH
20172: LD_INT 23
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: ST_TO_ADDR
// if not tmp then
20196: LD_VAR 0 1
20200: NOT
20201: IFFALSE 20205
// exit ;
20203: GO 20231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20205: LD_VAR 0 1
20209: PUSH
20210: LD_INT 1
20212: PPUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 12
20222: ARRAY
20223: PPUSH
20224: LD_INT 200
20226: PPUSH
20227: CALL_OW 234
// end ;
20231: PPOPN 1
20233: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20234: LD_EXP 41
20238: PUSH
20239: LD_EXP 70
20243: AND
20244: IFFALSE 20323
20246: GO 20248
20248: DISABLE
20249: LD_INT 0
20251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20252: LD_ADDR_VAR 0 1
20256: PUSH
20257: LD_INT 22
20259: PUSH
20260: LD_OWVAR 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 21
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: ST_TO_ADDR
// if not tmp then
20288: LD_VAR 0 1
20292: NOT
20293: IFFALSE 20297
// exit ;
20295: GO 20323
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20297: LD_VAR 0 1
20301: PUSH
20302: LD_INT 1
20304: PPUSH
20305: LD_VAR 0 1
20309: PPUSH
20310: CALL_OW 12
20314: ARRAY
20315: PPUSH
20316: LD_INT 60
20318: PPUSH
20319: CALL_OW 234
// end ;
20323: PPOPN 1
20325: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20326: LD_EXP 41
20330: PUSH
20331: LD_EXP 71
20335: AND
20336: IFFALSE 20435
20338: GO 20340
20340: DISABLE
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
// begin enable ;
20345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20346: LD_ADDR_VAR 0 1
20350: PUSH
20351: LD_INT 22
20353: PUSH
20354: LD_OWVAR 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 61
20365: PUSH
20366: EMPTY
20367: LIST
20368: PUSH
20369: LD_INT 33
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 1
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20435
// for i in tmp do
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 1
20407: PUSH
20408: FOR_IN
20409: IFFALSE 20433
// if IsControledBy ( i ) then
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 312
20420: IFFALSE 20431
// ComUnlink ( i ) ;
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 136
20431: GO 20408
20433: POP
20434: POP
// end ;
20435: PPOPN 2
20437: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20438: LD_EXP 41
20442: PUSH
20443: LD_EXP 72
20447: AND
20448: IFFALSE 20588
20450: GO 20452
20452: DISABLE
20453: LD_INT 0
20455: PPUSH
20456: PPUSH
// begin ToLua ( displayPowell(); ) ;
20457: LD_STRING displayPowell();
20459: PPUSH
20460: CALL_OW 559
// uc_side := 0 ;
20464: LD_ADDR_OWVAR 20
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// uc_nation := 2 ;
20472: LD_ADDR_OWVAR 21
20476: PUSH
20477: LD_INT 2
20479: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20480: LD_ADDR_OWVAR 37
20484: PUSH
20485: LD_INT 14
20487: ST_TO_ADDR
// vc_engine := engine_siberite ;
20488: LD_ADDR_OWVAR 39
20492: PUSH
20493: LD_INT 3
20495: ST_TO_ADDR
// vc_control := control_apeman ;
20496: LD_ADDR_OWVAR 38
20500: PUSH
20501: LD_INT 5
20503: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20504: LD_ADDR_OWVAR 40
20508: PUSH
20509: LD_INT 29
20511: ST_TO_ADDR
// un := CreateVehicle ;
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: CALL_OW 45
20521: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20534: LD_INT 35
20536: PPUSH
20537: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20541: LD_VAR 0 2
20545: PPUSH
20546: LD_INT 22
20548: PUSH
20549: LD_OWVAR 2
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PPUSH
20558: CALL_OW 69
20562: PPUSH
20563: LD_VAR 0 2
20567: PPUSH
20568: CALL_OW 74
20572: PPUSH
20573: CALL_OW 115
// until IsDead ( un ) ;
20577: LD_VAR 0 2
20581: PPUSH
20582: CALL_OW 301
20586: IFFALSE 20534
// end ;
20588: PPOPN 2
20590: END
// every 0 0$1 trigger StreamModeActive and sStu do
20591: LD_EXP 41
20595: PUSH
20596: LD_EXP 80
20600: AND
20601: IFFALSE 20617
20603: GO 20605
20605: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20606: LD_STRING displayStucuk();
20608: PPUSH
20609: CALL_OW 559
// ResetFog ;
20613: CALL_OW 335
// end ;
20617: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20618: LD_EXP 41
20622: PUSH
20623: LD_EXP 73
20627: AND
20628: IFFALSE 20769
20630: GO 20632
20632: DISABLE
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20637: LD_ADDR_VAR 0 2
20641: PUSH
20642: LD_INT 22
20644: PUSH
20645: LD_OWVAR 2
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 21
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PPUSH
20668: CALL_OW 69
20672: ST_TO_ADDR
// if not tmp then
20673: LD_VAR 0 2
20677: NOT
20678: IFFALSE 20682
// exit ;
20680: GO 20769
// un := tmp [ rand ( 1 , tmp ) ] ;
20682: LD_ADDR_VAR 0 1
20686: PUSH
20687: LD_VAR 0 2
20691: PUSH
20692: LD_INT 1
20694: PPUSH
20695: LD_VAR 0 2
20699: PPUSH
20700: CALL_OW 12
20704: ARRAY
20705: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20706: LD_VAR 0 1
20710: PPUSH
20711: LD_INT 0
20713: PPUSH
20714: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20718: LD_VAR 0 1
20722: PPUSH
20723: LD_OWVAR 3
20727: PUSH
20728: LD_VAR 0 1
20732: DIFF
20733: PPUSH
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL_OW 74
20743: PPUSH
20744: CALL_OW 115
// wait ( 0 0$20 ) ;
20748: LD_INT 700
20750: PPUSH
20751: CALL_OW 67
// SetSide ( un , your_side ) ;
20755: LD_VAR 0 1
20759: PPUSH
20760: LD_OWVAR 2
20764: PPUSH
20765: CALL_OW 235
// end ;
20769: PPOPN 2
20771: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20772: LD_EXP 41
20776: PUSH
20777: LD_EXP 74
20781: AND
20782: IFFALSE 20888
20784: GO 20786
20786: DISABLE
20787: LD_INT 0
20789: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20790: LD_ADDR_VAR 0 1
20794: PUSH
20795: LD_INT 22
20797: PUSH
20798: LD_OWVAR 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: PUSH
20810: LD_INT 30
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 30
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: ST_TO_ADDR
// if not depot then
20844: LD_VAR 0 1
20848: NOT
20849: IFFALSE 20853
// exit ;
20851: GO 20888
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20853: LD_VAR 0 1
20857: PUSH
20858: LD_INT 1
20860: ARRAY
20861: PPUSH
20862: CALL_OW 250
20866: PPUSH
20867: LD_VAR 0 1
20871: PUSH
20872: LD_INT 1
20874: ARRAY
20875: PPUSH
20876: CALL_OW 251
20880: PPUSH
20881: LD_INT 70
20883: PPUSH
20884: CALL_OW 495
// end ;
20888: PPOPN 1
20890: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20891: LD_EXP 41
20895: PUSH
20896: LD_EXP 75
20900: AND
20901: IFFALSE 21112
20903: GO 20905
20905: DISABLE
20906: LD_INT 0
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_INT 22
20920: PUSH
20921: LD_OWVAR 2
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 21
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PPUSH
20944: CALL_OW 69
20948: ST_TO_ADDR
// if not tmp then
20949: LD_VAR 0 5
20953: NOT
20954: IFFALSE 20958
// exit ;
20956: GO 21112
// for i in tmp do
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_VAR 0 5
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21110
// begin d := rand ( 0 , 5 ) ;
20971: LD_ADDR_VAR 0 4
20975: PUSH
20976: LD_INT 0
20978: PPUSH
20979: LD_INT 5
20981: PPUSH
20982: CALL_OW 12
20986: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20987: LD_ADDR_VAR 0 2
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 250
21001: PPUSH
21002: LD_VAR 0 4
21006: PPUSH
21007: LD_INT 3
21009: PPUSH
21010: LD_INT 12
21012: PPUSH
21013: CALL_OW 12
21017: PPUSH
21018: CALL_OW 272
21022: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21023: LD_ADDR_VAR 0 3
21027: PUSH
21028: LD_VAR 0 1
21032: PPUSH
21033: CALL_OW 251
21037: PPUSH
21038: LD_VAR 0 4
21042: PPUSH
21043: LD_INT 3
21045: PPUSH
21046: LD_INT 12
21048: PPUSH
21049: CALL_OW 12
21053: PPUSH
21054: CALL_OW 273
21058: ST_TO_ADDR
// if ValidHex ( x , y ) then
21059: LD_VAR 0 2
21063: PPUSH
21064: LD_VAR 0 3
21068: PPUSH
21069: CALL_OW 488
21073: IFFALSE 21108
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21075: LD_VAR 0 1
21079: PPUSH
21080: LD_VAR 0 2
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: LD_INT 3
21092: PPUSH
21093: LD_INT 6
21095: PPUSH
21096: CALL_OW 12
21100: PPUSH
21101: LD_INT 1
21103: PPUSH
21104: CALL_OW 483
// end ;
21108: GO 20968
21110: POP
21111: POP
// end ;
21112: PPOPN 5
21114: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21115: LD_EXP 41
21119: PUSH
21120: LD_EXP 76
21124: AND
21125: IFFALSE 21219
21127: GO 21129
21129: DISABLE
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_INT 22
21141: PUSH
21142: LD_OWVAR 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 32
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 21
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PPUSH
21176: CALL_OW 69
21180: ST_TO_ADDR
// if not tmp then
21181: LD_VAR 0 2
21185: NOT
21186: IFFALSE 21190
// exit ;
21188: GO 21219
// for i in tmp do
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: PUSH
21200: FOR_IN
21201: IFFALSE 21217
// SetFuel ( i , 0 ) ;
21203: LD_VAR 0 1
21207: PPUSH
21208: LD_INT 0
21210: PPUSH
21211: CALL_OW 240
21215: GO 21200
21217: POP
21218: POP
// end ;
21219: PPOPN 2
21221: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21222: LD_EXP 41
21226: PUSH
21227: LD_EXP 77
21231: AND
21232: IFFALSE 21298
21234: GO 21236
21236: DISABLE
21237: LD_INT 0
21239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21240: LD_ADDR_VAR 0 1
21244: PUSH
21245: LD_INT 22
21247: PUSH
21248: LD_OWVAR 2
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 30
21259: PUSH
21260: LD_INT 29
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PPUSH
21271: CALL_OW 69
21275: ST_TO_ADDR
// if not tmp then
21276: LD_VAR 0 1
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21298
// DestroyUnit ( tmp [ 1 ] ) ;
21285: LD_VAR 0 1
21289: PUSH
21290: LD_INT 1
21292: ARRAY
21293: PPUSH
21294: CALL_OW 65
// end ;
21298: PPOPN 1
21300: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21301: LD_EXP 41
21305: PUSH
21306: LD_EXP 79
21310: AND
21311: IFFALSE 21440
21313: GO 21315
21315: DISABLE
21316: LD_INT 0
21318: PPUSH
// begin uc_side := 0 ;
21319: LD_ADDR_OWVAR 20
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// uc_nation := nation_arabian ;
21327: LD_ADDR_OWVAR 21
21331: PUSH
21332: LD_INT 2
21334: ST_TO_ADDR
// hc_gallery :=  ;
21335: LD_ADDR_OWVAR 33
21339: PUSH
21340: LD_STRING 
21342: ST_TO_ADDR
// hc_name :=  ;
21343: LD_ADDR_OWVAR 26
21347: PUSH
21348: LD_STRING 
21350: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21351: LD_INT 1
21353: PPUSH
21354: LD_INT 11
21356: PPUSH
21357: LD_INT 10
21359: PPUSH
21360: CALL_OW 380
// un := CreateHuman ;
21364: LD_ADDR_VAR 0 1
21368: PUSH
21369: CALL_OW 44
21373: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21386: LD_INT 35
21388: PPUSH
21389: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21393: LD_VAR 0 1
21397: PPUSH
21398: LD_INT 22
21400: PUSH
21401: LD_OWVAR 2
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 69
21414: PPUSH
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 74
21424: PPUSH
21425: CALL_OW 115
// until IsDead ( un ) ;
21429: LD_VAR 0 1
21433: PPUSH
21434: CALL_OW 301
21438: IFFALSE 21386
// end ;
21440: PPOPN 1
21442: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21443: LD_EXP 41
21447: PUSH
21448: LD_EXP 81
21452: AND
21453: IFFALSE 21465
21455: GO 21457
21457: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21458: LD_STRING earthquake(getX(game), 0, 32)
21460: PPUSH
21461: CALL_OW 559
21465: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21466: LD_EXP 41
21470: PUSH
21471: LD_EXP 82
21475: AND
21476: IFFALSE 21567
21478: GO 21480
21480: DISABLE
21481: LD_INT 0
21483: PPUSH
// begin enable ;
21484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21485: LD_ADDR_VAR 0 1
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_OWVAR 2
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 21
21504: PUSH
21505: LD_INT 2
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 33
21514: PUSH
21515: LD_INT 3
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 69
21531: ST_TO_ADDR
// if not tmp then
21532: LD_VAR 0 1
21536: NOT
21537: IFFALSE 21541
// exit ;
21539: GO 21567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21541: LD_VAR 0 1
21545: PUSH
21546: LD_INT 1
21548: PPUSH
21549: LD_VAR 0 1
21553: PPUSH
21554: CALL_OW 12
21558: ARRAY
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 234
// end ;
21567: PPOPN 1
21569: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21570: LD_EXP 41
21574: PUSH
21575: LD_EXP 83
21579: AND
21580: IFFALSE 21721
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
21589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21590: LD_ADDR_VAR 0 3
21594: PUSH
21595: LD_INT 22
21597: PUSH
21598: LD_OWVAR 2
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 25
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 69
21625: ST_TO_ADDR
// if not tmp then
21626: LD_VAR 0 3
21630: NOT
21631: IFFALSE 21635
// exit ;
21633: GO 21721
// un := tmp [ rand ( 1 , tmp ) ] ;
21635: LD_ADDR_VAR 0 2
21639: PUSH
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 1
21647: PPUSH
21648: LD_VAR 0 3
21652: PPUSH
21653: CALL_OW 12
21657: ARRAY
21658: ST_TO_ADDR
// if Crawls ( un ) then
21659: LD_VAR 0 2
21663: PPUSH
21664: CALL_OW 318
21668: IFFALSE 21679
// ComWalk ( un ) ;
21670: LD_VAR 0 2
21674: PPUSH
21675: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21679: LD_VAR 0 2
21683: PPUSH
21684: LD_INT 9
21686: PPUSH
21687: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21691: LD_INT 28
21693: PPUSH
21694: LD_OWVAR 2
21698: PPUSH
21699: LD_INT 2
21701: PPUSH
21702: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21706: LD_INT 29
21708: PPUSH
21709: LD_OWVAR 2
21713: PPUSH
21714: LD_INT 2
21716: PPUSH
21717: CALL_OW 322
// end ;
21721: PPOPN 3
21723: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21724: LD_EXP 41
21728: PUSH
21729: LD_EXP 84
21733: AND
21734: IFFALSE 21845
21736: GO 21738
21738: DISABLE
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
21743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21744: LD_ADDR_VAR 0 3
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_OWVAR 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 25
21763: PUSH
21764: LD_INT 1
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: ST_TO_ADDR
// if not tmp then
21780: LD_VAR 0 3
21784: NOT
21785: IFFALSE 21789
// exit ;
21787: GO 21845
// un := tmp [ rand ( 1 , tmp ) ] ;
21789: LD_ADDR_VAR 0 2
21793: PUSH
21794: LD_VAR 0 3
21798: PUSH
21799: LD_INT 1
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: CALL_OW 12
21811: ARRAY
21812: ST_TO_ADDR
// if Crawls ( un ) then
21813: LD_VAR 0 2
21817: PPUSH
21818: CALL_OW 318
21822: IFFALSE 21833
// ComWalk ( un ) ;
21824: LD_VAR 0 2
21828: PPUSH
21829: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21833: LD_VAR 0 2
21837: PPUSH
21838: LD_INT 8
21840: PPUSH
21841: CALL_OW 336
// end ;
21845: PPOPN 3
21847: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21848: LD_EXP 41
21852: PUSH
21853: LD_EXP 85
21857: AND
21858: IFFALSE 22002
21860: GO 21862
21862: DISABLE
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21867: LD_ADDR_VAR 0 2
21871: PUSH
21872: LD_INT 22
21874: PUSH
21875: LD_OWVAR 2
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 21
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: LD_INT 34
21899: PUSH
21900: LD_INT 12
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 34
21909: PUSH
21910: LD_INT 51
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 34
21919: PUSH
21920: LD_INT 32
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL_OW 69
21942: ST_TO_ADDR
// if not tmp then
21943: LD_VAR 0 2
21947: NOT
21948: IFFALSE 21952
// exit ;
21950: GO 22002
// for i in tmp do
21952: LD_ADDR_VAR 0 1
21956: PUSH
21957: LD_VAR 0 2
21961: PUSH
21962: FOR_IN
21963: IFFALSE 22000
// if GetCargo ( i , mat_artifact ) = 0 then
21965: LD_VAR 0 1
21969: PPUSH
21970: LD_INT 4
21972: PPUSH
21973: CALL_OW 289
21977: PUSH
21978: LD_INT 0
21980: EQUAL
21981: IFFALSE 21998
// SetCargo ( i , mat_siberit , 100 ) ;
21983: LD_VAR 0 1
21987: PPUSH
21988: LD_INT 3
21990: PPUSH
21991: LD_INT 100
21993: PPUSH
21994: CALL_OW 290
21998: GO 21962
22000: POP
22001: POP
// end ;
22002: PPOPN 2
22004: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22005: LD_EXP 41
22009: PUSH
22010: LD_EXP 86
22014: AND
22015: IFFALSE 22198
22017: GO 22019
22019: DISABLE
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22024: LD_ADDR_VAR 0 2
22028: PUSH
22029: LD_INT 22
22031: PUSH
22032: LD_OWVAR 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: ST_TO_ADDR
// if not tmp then
22046: LD_VAR 0 2
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22198
// for i := 1 to 2 do
22055: LD_ADDR_VAR 0 1
22059: PUSH
22060: DOUBLE
22061: LD_INT 1
22063: DEC
22064: ST_TO_ADDR
22065: LD_INT 2
22067: PUSH
22068: FOR_TO
22069: IFFALSE 22196
// begin uc_side := your_side ;
22071: LD_ADDR_OWVAR 20
22075: PUSH
22076: LD_OWVAR 2
22080: ST_TO_ADDR
// uc_nation := nation_american ;
22081: LD_ADDR_OWVAR 21
22085: PUSH
22086: LD_INT 1
22088: ST_TO_ADDR
// vc_chassis := us_morphling ;
22089: LD_ADDR_OWVAR 37
22093: PUSH
22094: LD_INT 5
22096: ST_TO_ADDR
// vc_engine := engine_siberite ;
22097: LD_ADDR_OWVAR 39
22101: PUSH
22102: LD_INT 3
22104: ST_TO_ADDR
// vc_control := control_computer ;
22105: LD_ADDR_OWVAR 38
22109: PUSH
22110: LD_INT 3
22112: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22113: LD_ADDR_OWVAR 40
22117: PUSH
22118: LD_INT 10
22120: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22121: LD_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: ARRAY
22129: PPUSH
22130: CALL_OW 310
22134: NOT
22135: IFFALSE 22182
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22137: CALL_OW 45
22141: PPUSH
22142: LD_VAR 0 2
22146: PUSH
22147: LD_INT 1
22149: ARRAY
22150: PPUSH
22151: CALL_OW 250
22155: PPUSH
22156: LD_VAR 0 2
22160: PUSH
22161: LD_INT 1
22163: ARRAY
22164: PPUSH
22165: CALL_OW 251
22169: PPUSH
22170: LD_INT 12
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 50
22180: GO 22194
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22182: CALL_OW 45
22186: PPUSH
22187: LD_INT 1
22189: PPUSH
22190: CALL_OW 51
// end ;
22194: GO 22068
22196: POP
22197: POP
// end ;
22198: PPOPN 2
22200: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22201: LD_EXP 41
22205: PUSH
22206: LD_EXP 87
22210: AND
22211: IFFALSE 22433
22213: GO 22215
22215: DISABLE
22216: LD_INT 0
22218: PPUSH
22219: PPUSH
22220: PPUSH
22221: PPUSH
22222: PPUSH
22223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22224: LD_ADDR_VAR 0 6
22228: PUSH
22229: LD_INT 22
22231: PUSH
22232: LD_OWVAR 2
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 3
22253: PUSH
22254: LD_INT 23
22256: PUSH
22257: LD_INT 0
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: PPUSH
22273: CALL_OW 69
22277: ST_TO_ADDR
// if not tmp then
22278: LD_VAR 0 6
22282: NOT
22283: IFFALSE 22287
// exit ;
22285: GO 22433
// s1 := rand ( 1 , 4 ) ;
22287: LD_ADDR_VAR 0 2
22291: PUSH
22292: LD_INT 1
22294: PPUSH
22295: LD_INT 4
22297: PPUSH
22298: CALL_OW 12
22302: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22303: LD_ADDR_VAR 0 4
22307: PUSH
22308: LD_VAR 0 6
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 2
22321: PPUSH
22322: CALL_OW 259
22326: ST_TO_ADDR
// if s1 = 1 then
22327: LD_VAR 0 2
22331: PUSH
22332: LD_INT 1
22334: EQUAL
22335: IFFALSE 22355
// s2 := rand ( 2 , 4 ) else
22337: LD_ADDR_VAR 0 3
22341: PUSH
22342: LD_INT 2
22344: PPUSH
22345: LD_INT 4
22347: PPUSH
22348: CALL_OW 12
22352: ST_TO_ADDR
22353: GO 22363
// s2 := 1 ;
22355: LD_ADDR_VAR 0 3
22359: PUSH
22360: LD_INT 1
22362: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22363: LD_ADDR_VAR 0 5
22367: PUSH
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 1
22375: ARRAY
22376: PPUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: CALL_OW 259
22386: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22387: LD_VAR 0 6
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: LD_VAR 0 2
22400: PPUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22410: LD_VAR 0 6
22414: PUSH
22415: LD_INT 1
22417: ARRAY
22418: PPUSH
22419: LD_VAR 0 3
22423: PPUSH
22424: LD_VAR 0 4
22428: PPUSH
22429: CALL_OW 237
// end ;
22433: PPOPN 6
22435: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22436: LD_EXP 41
22440: PUSH
22441: LD_EXP 88
22445: AND
22446: IFFALSE 22525
22448: GO 22450
22450: DISABLE
22451: LD_INT 0
22453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_OWVAR 2
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 30
22473: PUSH
22474: LD_INT 3
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 69
22489: ST_TO_ADDR
// if not tmp then
22490: LD_VAR 0 1
22494: NOT
22495: IFFALSE 22499
// exit ;
22497: GO 22525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22499: LD_VAR 0 1
22503: PUSH
22504: LD_INT 1
22506: PPUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 12
22516: ARRAY
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 234
// end ;
22525: PPOPN 1
22527: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22528: LD_EXP 41
22532: PUSH
22533: LD_EXP 89
22537: AND
22538: IFFALSE 22650
22540: GO 22542
22542: DISABLE
22543: LD_INT 0
22545: PPUSH
22546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22547: LD_ADDR_VAR 0 2
22551: PUSH
22552: LD_INT 22
22554: PUSH
22555: LD_OWVAR 2
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: LD_INT 30
22569: PUSH
22570: LD_INT 27
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 30
22579: PUSH
22580: LD_INT 26
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 30
22589: PUSH
22590: LD_INT 28
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PPUSH
22607: CALL_OW 69
22611: ST_TO_ADDR
// if not tmp then
22612: LD_VAR 0 2
22616: NOT
22617: IFFALSE 22621
// exit ;
22619: GO 22650
// for i in tmp do
22621: LD_ADDR_VAR 0 1
22625: PUSH
22626: LD_VAR 0 2
22630: PUSH
22631: FOR_IN
22632: IFFALSE 22648
// SetLives ( i , 1 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_INT 1
22641: PPUSH
22642: CALL_OW 234
22646: GO 22631
22648: POP
22649: POP
// end ;
22650: PPOPN 2
22652: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22653: LD_EXP 41
22657: PUSH
22658: LD_EXP 90
22662: AND
22663: IFFALSE 22937
22665: GO 22667
22667: DISABLE
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
// begin i := rand ( 1 , 7 ) ;
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_INT 7
22683: PPUSH
22684: CALL_OW 12
22688: ST_TO_ADDR
// case i of 1 :
22689: LD_VAR 0 1
22693: PUSH
22694: LD_INT 1
22696: DOUBLE
22697: EQUAL
22698: IFTRUE 22702
22700: GO 22712
22702: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22703: LD_STRING earthquake(getX(game), 0, 32)
22705: PPUSH
22706: CALL_OW 559
22710: GO 22937
22712: LD_INT 2
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22734
22720: POP
// begin ToLua ( displayStucuk(); ) ;
22721: LD_STRING displayStucuk();
22723: PPUSH
22724: CALL_OW 559
// ResetFog ;
22728: CALL_OW 335
// end ; 3 :
22732: GO 22937
22734: LD_INT 3
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22846
22742: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_INT 22
22750: PUSH
22751: LD_OWVAR 2
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 25
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PPUSH
22774: CALL_OW 69
22778: ST_TO_ADDR
// if not tmp then
22779: LD_VAR 0 2
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 22937
// un := tmp [ rand ( 1 , tmp ) ] ;
22788: LD_ADDR_VAR 0 3
22792: PUSH
22793: LD_VAR 0 2
22797: PUSH
22798: LD_INT 1
22800: PPUSH
22801: LD_VAR 0 2
22805: PPUSH
22806: CALL_OW 12
22810: ARRAY
22811: ST_TO_ADDR
// if Crawls ( un ) then
22812: LD_VAR 0 3
22816: PPUSH
22817: CALL_OW 318
22821: IFFALSE 22832
// ComWalk ( un ) ;
22823: LD_VAR 0 3
22827: PPUSH
22828: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_INT 8
22839: PPUSH
22840: CALL_OW 336
// end ; 4 :
22844: GO 22937
22846: LD_INT 4
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22915
22854: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22855: LD_ADDR_VAR 0 2
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_OWVAR 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 30
22874: PUSH
22875: LD_INT 29
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL_OW 69
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 2
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 22937
// DestroyUnit ( tmp [ 1 ] ) ;
22900: LD_VAR 0 2
22904: PUSH
22905: LD_INT 1
22907: ARRAY
22908: PPUSH
22909: CALL_OW 65
// end ; 5 .. 7 :
22913: GO 22937
22915: LD_INT 5
22917: DOUBLE
22918: GREATEREQUAL
22919: IFFALSE 22927
22921: LD_INT 7
22923: DOUBLE
22924: LESSEQUAL
22925: IFTRUE 22929
22927: GO 22936
22929: POP
// StreamSibBomb ; end ;
22930: CALL 19187 0 0
22934: GO 22937
22936: POP
// end ;
22937: PPOPN 3
22939: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22940: LD_EXP 41
22944: PUSH
22945: LD_EXP 91
22949: AND
22950: IFFALSE 23106
22952: GO 22954
22954: DISABLE
22955: LD_INT 0
22957: PPUSH
22958: PPUSH
22959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22960: LD_ADDR_VAR 0 2
22964: PUSH
22965: LD_INT 81
22967: PUSH
22968: LD_OWVAR 2
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 21
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PPUSH
23009: CALL_OW 69
23013: ST_TO_ADDR
// if not tmp then
23014: LD_VAR 0 2
23018: NOT
23019: IFFALSE 23023
// exit ;
23021: GO 23106
// p := 0 ;
23023: LD_ADDR_VAR 0 3
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23031: LD_INT 35
23033: PPUSH
23034: CALL_OW 67
// p := p + 1 ;
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_VAR 0 3
23047: PUSH
23048: LD_INT 1
23050: PLUS
23051: ST_TO_ADDR
// for i in tmp do
23052: LD_ADDR_VAR 0 1
23056: PUSH
23057: LD_VAR 0 2
23061: PUSH
23062: FOR_IN
23063: IFFALSE 23094
// if GetLives ( i ) < 1000 then
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 256
23074: PUSH
23075: LD_INT 1000
23077: LESS
23078: IFFALSE 23092
// SetLives ( i , 1000 ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_INT 1000
23087: PPUSH
23088: CALL_OW 234
23092: GO 23062
23094: POP
23095: POP
// until p > 20 ;
23096: LD_VAR 0 3
23100: PUSH
23101: LD_INT 20
23103: GREATER
23104: IFFALSE 23031
// end ;
23106: PPOPN 3
23108: END
// every 0 0$1 trigger StreamModeActive and sTime do
23109: LD_EXP 41
23113: PUSH
23114: LD_EXP 92
23118: AND
23119: IFFALSE 23154
23121: GO 23123
23123: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23124: LD_INT 28
23126: PPUSH
23127: LD_OWVAR 2
23131: PPUSH
23132: LD_INT 2
23134: PPUSH
23135: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23139: LD_INT 30
23141: PPUSH
23142: LD_OWVAR 2
23146: PPUSH
23147: LD_INT 2
23149: PPUSH
23150: CALL_OW 322
// end ;
23154: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23155: LD_EXP 41
23159: PUSH
23160: LD_EXP 93
23164: AND
23165: IFFALSE 23286
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if not tmp then
23228: LD_VAR 0 2
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23286
// for i in tmp do
23237: LD_ADDR_VAR 0 1
23241: PUSH
23242: LD_VAR 0 2
23246: PUSH
23247: FOR_IN
23248: IFFALSE 23284
// begin if Crawls ( i ) then
23250: LD_VAR 0 1
23254: PPUSH
23255: CALL_OW 318
23259: IFFALSE 23270
// ComWalk ( i ) ;
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 138
// SetClass ( i , 2 ) ;
23270: LD_VAR 0 1
23274: PPUSH
23275: LD_INT 2
23277: PPUSH
23278: CALL_OW 336
// end ;
23282: GO 23247
23284: POP
23285: POP
// end ;
23286: PPOPN 2
23288: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23289: LD_EXP 41
23293: PUSH
23294: LD_EXP 94
23298: AND
23299: IFFALSE 23580
23301: GO 23303
23303: DISABLE
23304: LD_INT 0
23306: PPUSH
23307: PPUSH
23308: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23309: LD_OWVAR 2
23313: PPUSH
23314: LD_INT 9
23316: PPUSH
23317: LD_INT 1
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23327: LD_INT 9
23329: PPUSH
23330: LD_OWVAR 2
23334: PPUSH
23335: CALL_OW 343
// uc_side := 9 ;
23339: LD_ADDR_OWVAR 20
23343: PUSH
23344: LD_INT 9
23346: ST_TO_ADDR
// uc_nation := 2 ;
23347: LD_ADDR_OWVAR 21
23351: PUSH
23352: LD_INT 2
23354: ST_TO_ADDR
// hc_name := Dark Warrior ;
23355: LD_ADDR_OWVAR 26
23359: PUSH
23360: LD_STRING Dark Warrior
23362: ST_TO_ADDR
// hc_gallery :=  ;
23363: LD_ADDR_OWVAR 33
23367: PUSH
23368: LD_STRING 
23370: ST_TO_ADDR
// hc_noskilllimit := true ;
23371: LD_ADDR_OWVAR 76
23375: PUSH
23376: LD_INT 1
23378: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23379: LD_ADDR_OWVAR 31
23383: PUSH
23384: LD_INT 30
23386: PUSH
23387: LD_INT 30
23389: PUSH
23390: LD_INT 30
23392: PUSH
23393: LD_INT 30
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: ST_TO_ADDR
// un := CreateHuman ;
23402: LD_ADDR_VAR 0 3
23406: PUSH
23407: CALL_OW 44
23411: ST_TO_ADDR
// hc_noskilllimit := false ;
23412: LD_ADDR_OWVAR 76
23416: PUSH
23417: LD_INT 0
23419: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23420: LD_VAR 0 3
23424: PPUSH
23425: LD_INT 1
23427: PPUSH
23428: CALL_OW 51
// p := 0 ;
23432: LD_ADDR_VAR 0 2
23436: PUSH
23437: LD_INT 0
23439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23440: LD_INT 35
23442: PPUSH
23443: CALL_OW 67
// p := p + 1 ;
23447: LD_ADDR_VAR 0 2
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_INT 1
23459: PLUS
23460: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23461: LD_VAR 0 3
23465: PPUSH
23466: CALL_OW 256
23470: PUSH
23471: LD_INT 1000
23473: LESS
23474: IFFALSE 23488
// SetLives ( un , 1000 ) ;
23476: LD_VAR 0 3
23480: PPUSH
23481: LD_INT 1000
23483: PPUSH
23484: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23488: LD_VAR 0 3
23492: PPUSH
23493: LD_INT 81
23495: PUSH
23496: LD_OWVAR 2
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 91
23507: PUSH
23508: LD_VAR 0 3
23512: PUSH
23513: LD_INT 30
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PPUSH
23525: CALL_OW 69
23529: PPUSH
23530: LD_VAR 0 3
23534: PPUSH
23535: CALL_OW 74
23539: PPUSH
23540: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23544: LD_VAR 0 2
23548: PUSH
23549: LD_INT 60
23551: GREATER
23552: PUSH
23553: LD_VAR 0 3
23557: PPUSH
23558: CALL_OW 301
23562: OR
23563: IFFALSE 23440
// if un then
23565: LD_VAR 0 3
23569: IFFALSE 23580
// RemoveUnit ( un ) ;
23571: LD_VAR 0 3
23575: PPUSH
23576: CALL_OW 64
// end ; end_of_file end_of_file
23580: PPOPN 3
23582: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23583: LD_INT 0
23585: PPUSH
// ru_radar := 98 ;
23586: LD_ADDR_EXP 95
23590: PUSH
23591: LD_INT 98
23593: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23594: LD_ADDR_EXP 96
23598: PUSH
23599: LD_INT 89
23601: ST_TO_ADDR
// us_hack := 99 ;
23602: LD_ADDR_EXP 97
23606: PUSH
23607: LD_INT 99
23609: ST_TO_ADDR
// us_artillery := 97 ;
23610: LD_ADDR_EXP 98
23614: PUSH
23615: LD_INT 97
23617: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23618: LD_ADDR_EXP 99
23622: PUSH
23623: LD_INT 91
23625: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23626: LD_ADDR_EXP 100
23630: PUSH
23631: LD_INT 92
23633: ST_TO_ADDR
// tech_Artillery := 80 ;
23634: LD_ADDR_EXP 101
23638: PUSH
23639: LD_INT 80
23641: ST_TO_ADDR
// tech_RadMat := 81 ;
23642: LD_ADDR_EXP 102
23646: PUSH
23647: LD_INT 81
23649: ST_TO_ADDR
// tech_BasicTools := 82 ;
23650: LD_ADDR_EXP 103
23654: PUSH
23655: LD_INT 82
23657: ST_TO_ADDR
// tech_Cargo := 83 ;
23658: LD_ADDR_EXP 104
23662: PUSH
23663: LD_INT 83
23665: ST_TO_ADDR
// tech_Track := 84 ;
23666: LD_ADDR_EXP 105
23670: PUSH
23671: LD_INT 84
23673: ST_TO_ADDR
// tech_Crane := 85 ;
23674: LD_ADDR_EXP 106
23678: PUSH
23679: LD_INT 85
23681: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23682: LD_ADDR_EXP 107
23686: PUSH
23687: LD_INT 86
23689: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23690: LD_ADDR_EXP 108
23694: PUSH
23695: LD_INT 87
23697: ST_TO_ADDR
// end ;
23698: LD_VAR 0 1
23702: RET
// every 1 do
23703: GO 23705
23705: DISABLE
// InitGlobalVariables ; end_of_file
23706: CALL 23583 0 0
23710: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23711: LD_INT 0
23713: PPUSH
23714: PPUSH
// if exist_mode then
23715: LD_VAR 0 2
23719: IFFALSE 23744
// unit := CreateCharacter ( prefix & ident ) else
23721: LD_ADDR_VAR 0 5
23725: PUSH
23726: LD_VAR 0 3
23730: PUSH
23731: LD_VAR 0 1
23735: STR
23736: PPUSH
23737: CALL_OW 34
23741: ST_TO_ADDR
23742: GO 23759
// unit := NewCharacter ( ident ) ;
23744: LD_ADDR_VAR 0 5
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 25
23758: ST_TO_ADDR
// result := unit ;
23759: LD_ADDR_VAR 0 4
23763: PUSH
23764: LD_VAR 0 5
23768: ST_TO_ADDR
// end ;
23769: LD_VAR 0 4
23773: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
// if not side or not nation then
23778: LD_VAR 0 1
23782: NOT
23783: PUSH
23784: LD_VAR 0 2
23788: NOT
23789: OR
23790: IFFALSE 23794
// exit ;
23792: GO 24558
// case nation of nation_american :
23794: LD_VAR 0 2
23798: PUSH
23799: LD_INT 1
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 24021
23807: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23808: LD_ADDR_VAR 0 4
23812: PUSH
23813: LD_INT 35
23815: PUSH
23816: LD_INT 45
23818: PUSH
23819: LD_INT 46
23821: PUSH
23822: LD_INT 47
23824: PUSH
23825: LD_INT 82
23827: PUSH
23828: LD_INT 83
23830: PUSH
23831: LD_INT 84
23833: PUSH
23834: LD_INT 85
23836: PUSH
23837: LD_INT 86
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 6
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 7
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 13
23863: PUSH
23864: LD_INT 10
23866: PUSH
23867: LD_INT 14
23869: PUSH
23870: LD_INT 20
23872: PUSH
23873: LD_INT 21
23875: PUSH
23876: LD_INT 22
23878: PUSH
23879: LD_INT 25
23881: PUSH
23882: LD_INT 32
23884: PUSH
23885: LD_INT 27
23887: PUSH
23888: LD_INT 36
23890: PUSH
23891: LD_INT 69
23893: PUSH
23894: LD_INT 39
23896: PUSH
23897: LD_INT 34
23899: PUSH
23900: LD_INT 40
23902: PUSH
23903: LD_INT 48
23905: PUSH
23906: LD_INT 49
23908: PUSH
23909: LD_INT 50
23911: PUSH
23912: LD_INT 51
23914: PUSH
23915: LD_INT 52
23917: PUSH
23918: LD_INT 53
23920: PUSH
23921: LD_INT 54
23923: PUSH
23924: LD_INT 55
23926: PUSH
23927: LD_INT 56
23929: PUSH
23930: LD_INT 57
23932: PUSH
23933: LD_INT 58
23935: PUSH
23936: LD_INT 59
23938: PUSH
23939: LD_INT 60
23941: PUSH
23942: LD_INT 61
23944: PUSH
23945: LD_INT 62
23947: PUSH
23948: LD_INT 80
23950: PUSH
23951: LD_INT 82
23953: PUSH
23954: LD_INT 83
23956: PUSH
23957: LD_INT 84
23959: PUSH
23960: LD_INT 85
23962: PUSH
23963: LD_INT 86
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: ST_TO_ADDR
24019: GO 24482
24021: LD_INT 2
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24251
24029: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24030: LD_ADDR_VAR 0 4
24034: PUSH
24035: LD_INT 35
24037: PUSH
24038: LD_INT 45
24040: PUSH
24041: LD_INT 46
24043: PUSH
24044: LD_INT 47
24046: PUSH
24047: LD_INT 82
24049: PUSH
24050: LD_INT 83
24052: PUSH
24053: LD_INT 84
24055: PUSH
24056: LD_INT 85
24058: PUSH
24059: LD_INT 87
24061: PUSH
24062: LD_INT 70
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 11
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 4
24076: PUSH
24077: LD_INT 5
24079: PUSH
24080: LD_INT 6
24082: PUSH
24083: LD_INT 15
24085: PUSH
24086: LD_INT 18
24088: PUSH
24089: LD_INT 7
24091: PUSH
24092: LD_INT 17
24094: PUSH
24095: LD_INT 8
24097: PUSH
24098: LD_INT 20
24100: PUSH
24101: LD_INT 21
24103: PUSH
24104: LD_INT 22
24106: PUSH
24107: LD_INT 72
24109: PUSH
24110: LD_INT 26
24112: PUSH
24113: LD_INT 69
24115: PUSH
24116: LD_INT 39
24118: PUSH
24119: LD_INT 40
24121: PUSH
24122: LD_INT 41
24124: PUSH
24125: LD_INT 42
24127: PUSH
24128: LD_INT 43
24130: PUSH
24131: LD_INT 48
24133: PUSH
24134: LD_INT 49
24136: PUSH
24137: LD_INT 50
24139: PUSH
24140: LD_INT 51
24142: PUSH
24143: LD_INT 52
24145: PUSH
24146: LD_INT 53
24148: PUSH
24149: LD_INT 54
24151: PUSH
24152: LD_INT 55
24154: PUSH
24155: LD_INT 56
24157: PUSH
24158: LD_INT 60
24160: PUSH
24161: LD_INT 61
24163: PUSH
24164: LD_INT 62
24166: PUSH
24167: LD_INT 66
24169: PUSH
24170: LD_INT 67
24172: PUSH
24173: LD_INT 68
24175: PUSH
24176: LD_INT 81
24178: PUSH
24179: LD_INT 82
24181: PUSH
24182: LD_INT 83
24184: PUSH
24185: LD_INT 84
24187: PUSH
24188: LD_INT 85
24190: PUSH
24191: LD_INT 87
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: ST_TO_ADDR
24249: GO 24482
24251: LD_INT 3
24253: DOUBLE
24254: EQUAL
24255: IFTRUE 24259
24257: GO 24481
24259: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24260: LD_ADDR_VAR 0 4
24264: PUSH
24265: LD_INT 46
24267: PUSH
24268: LD_INT 47
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 82
24279: PUSH
24280: LD_INT 83
24282: PUSH
24283: LD_INT 84
24285: PUSH
24286: LD_INT 85
24288: PUSH
24289: LD_INT 86
24291: PUSH
24292: LD_INT 11
24294: PUSH
24295: LD_INT 9
24297: PUSH
24298: LD_INT 20
24300: PUSH
24301: LD_INT 19
24303: PUSH
24304: LD_INT 21
24306: PUSH
24307: LD_INT 24
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 25
24315: PUSH
24316: LD_INT 28
24318: PUSH
24319: LD_INT 29
24321: PUSH
24322: LD_INT 30
24324: PUSH
24325: LD_INT 31
24327: PUSH
24328: LD_INT 37
24330: PUSH
24331: LD_INT 38
24333: PUSH
24334: LD_INT 32
24336: PUSH
24337: LD_INT 27
24339: PUSH
24340: LD_INT 33
24342: PUSH
24343: LD_INT 69
24345: PUSH
24346: LD_INT 39
24348: PUSH
24349: LD_INT 34
24351: PUSH
24352: LD_INT 40
24354: PUSH
24355: LD_INT 71
24357: PUSH
24358: LD_INT 23
24360: PUSH
24361: LD_INT 44
24363: PUSH
24364: LD_INT 48
24366: PUSH
24367: LD_INT 49
24369: PUSH
24370: LD_INT 50
24372: PUSH
24373: LD_INT 51
24375: PUSH
24376: LD_INT 52
24378: PUSH
24379: LD_INT 53
24381: PUSH
24382: LD_INT 54
24384: PUSH
24385: LD_INT 55
24387: PUSH
24388: LD_INT 56
24390: PUSH
24391: LD_INT 57
24393: PUSH
24394: LD_INT 58
24396: PUSH
24397: LD_INT 59
24399: PUSH
24400: LD_INT 63
24402: PUSH
24403: LD_INT 64
24405: PUSH
24406: LD_INT 65
24408: PUSH
24409: LD_INT 82
24411: PUSH
24412: LD_INT 83
24414: PUSH
24415: LD_INT 84
24417: PUSH
24418: LD_INT 85
24420: PUSH
24421: LD_INT 86
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: ST_TO_ADDR
24479: GO 24482
24481: POP
// if state > - 1 and state < 3 then
24482: LD_VAR 0 3
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: GREATER
24491: PUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 3
24499: LESS
24500: AND
24501: IFFALSE 24558
// for i in result do
24503: LD_ADDR_VAR 0 5
24507: PUSH
24508: LD_VAR 0 4
24512: PUSH
24513: FOR_IN
24514: IFFALSE 24556
// if GetTech ( i , side ) <> state then
24516: LD_VAR 0 5
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 321
24530: PUSH
24531: LD_VAR 0 3
24535: NONEQUAL
24536: IFFALSE 24554
// result := result diff i ;
24538: LD_ADDR_VAR 0 4
24542: PUSH
24543: LD_VAR 0 4
24547: PUSH
24548: LD_VAR 0 5
24552: DIFF
24553: ST_TO_ADDR
24554: GO 24513
24556: POP
24557: POP
// end ;
24558: LD_VAR 0 4
24562: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24563: LD_INT 0
24565: PPUSH
24566: PPUSH
24567: PPUSH
// result := true ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_INT 1
24575: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24576: LD_ADDR_VAR 0 5
24580: PUSH
24581: LD_VAR 0 2
24585: PPUSH
24586: CALL_OW 480
24590: ST_TO_ADDR
// if not tmp then
24591: LD_VAR 0 5
24595: NOT
24596: IFFALSE 24600
// exit ;
24598: GO 24649
// for i in tmp do
24600: LD_ADDR_VAR 0 4
24604: PUSH
24605: LD_VAR 0 5
24609: PUSH
24610: FOR_IN
24611: IFFALSE 24647
// if GetTech ( i , side ) <> state_researched then
24613: LD_VAR 0 4
24617: PPUSH
24618: LD_VAR 0 1
24622: PPUSH
24623: CALL_OW 321
24627: PUSH
24628: LD_INT 2
24630: NONEQUAL
24631: IFFALSE 24645
// begin result := false ;
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_INT 0
24640: ST_TO_ADDR
// exit ;
24641: POP
24642: POP
24643: GO 24649
// end ;
24645: GO 24610
24647: POP
24648: POP
// end ;
24649: LD_VAR 0 3
24653: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24654: LD_INT 0
24656: PPUSH
24657: PPUSH
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
24662: PPUSH
24663: PPUSH
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
24668: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24669: LD_VAR 0 1
24673: NOT
24674: PUSH
24675: LD_VAR 0 1
24679: PPUSH
24680: CALL_OW 257
24684: PUSH
24685: LD_INT 9
24687: NONEQUAL
24688: OR
24689: IFFALSE 24693
// exit ;
24691: GO 25266
// side := GetSide ( unit ) ;
24693: LD_ADDR_VAR 0 9
24697: PUSH
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 255
24707: ST_TO_ADDR
// tech_space := tech_spacanom ;
24708: LD_ADDR_VAR 0 12
24712: PUSH
24713: LD_INT 29
24715: ST_TO_ADDR
// tech_time := tech_taurad ;
24716: LD_ADDR_VAR 0 13
24720: PUSH
24721: LD_INT 28
24723: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24724: LD_ADDR_VAR 0 11
24728: PUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL_OW 310
24738: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24739: LD_VAR 0 11
24743: PPUSH
24744: CALL_OW 247
24748: PUSH
24749: LD_INT 2
24751: EQUAL
24752: IFFALSE 24756
// exit ;
24754: GO 25266
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24756: LD_ADDR_VAR 0 8
24760: PUSH
24761: LD_INT 81
24763: PUSH
24764: LD_VAR 0 9
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PPUSH
24794: CALL_OW 69
24798: ST_TO_ADDR
// if not tmp then
24799: LD_VAR 0 8
24803: NOT
24804: IFFALSE 24808
// exit ;
24806: GO 25266
// if in_unit then
24808: LD_VAR 0 11
24812: IFFALSE 24836
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24814: LD_ADDR_VAR 0 10
24818: PUSH
24819: LD_VAR 0 8
24823: PPUSH
24824: LD_VAR 0 11
24828: PPUSH
24829: CALL_OW 74
24833: ST_TO_ADDR
24834: GO 24856
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24836: LD_ADDR_VAR 0 10
24840: PUSH
24841: LD_VAR 0 8
24845: PPUSH
24846: LD_VAR 0 1
24850: PPUSH
24851: CALL_OW 74
24855: ST_TO_ADDR
// if not enemy then
24856: LD_VAR 0 10
24860: NOT
24861: IFFALSE 24865
// exit ;
24863: GO 25266
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24865: LD_VAR 0 11
24869: PUSH
24870: LD_VAR 0 11
24874: PPUSH
24875: LD_VAR 0 10
24879: PPUSH
24880: CALL_OW 296
24884: PUSH
24885: LD_INT 13
24887: GREATER
24888: AND
24889: PUSH
24890: LD_VAR 0 1
24894: PPUSH
24895: LD_VAR 0 10
24899: PPUSH
24900: CALL_OW 296
24904: PUSH
24905: LD_INT 12
24907: GREATER
24908: OR
24909: IFFALSE 24913
// exit ;
24911: GO 25266
// missile := [ 1 ] ;
24913: LD_ADDR_VAR 0 14
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24924: LD_VAR 0 9
24928: PPUSH
24929: LD_VAR 0 12
24933: PPUSH
24934: CALL_OW 325
24938: IFFALSE 24967
// missile := Insert ( missile , missile + 1 , 2 ) ;
24940: LD_ADDR_VAR 0 14
24944: PUSH
24945: LD_VAR 0 14
24949: PPUSH
24950: LD_VAR 0 14
24954: PUSH
24955: LD_INT 1
24957: PLUS
24958: PPUSH
24959: LD_INT 2
24961: PPUSH
24962: CALL_OW 2
24966: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24967: LD_VAR 0 9
24971: PPUSH
24972: LD_VAR 0 13
24976: PPUSH
24977: CALL_OW 325
24981: PUSH
24982: LD_VAR 0 10
24986: PPUSH
24987: CALL_OW 255
24991: PPUSH
24992: LD_VAR 0 13
24996: PPUSH
24997: CALL_OW 325
25001: NOT
25002: AND
25003: IFFALSE 25032
// missile := Insert ( missile , missile + 1 , 3 ) ;
25005: LD_ADDR_VAR 0 14
25009: PUSH
25010: LD_VAR 0 14
25014: PPUSH
25015: LD_VAR 0 14
25019: PUSH
25020: LD_INT 1
25022: PLUS
25023: PPUSH
25024: LD_INT 3
25026: PPUSH
25027: CALL_OW 2
25031: ST_TO_ADDR
// if missile < 2 then
25032: LD_VAR 0 14
25036: PUSH
25037: LD_INT 2
25039: LESS
25040: IFFALSE 25044
// exit ;
25042: GO 25266
// x := GetX ( enemy ) ;
25044: LD_ADDR_VAR 0 4
25048: PUSH
25049: LD_VAR 0 10
25053: PPUSH
25054: CALL_OW 250
25058: ST_TO_ADDR
// y := GetY ( enemy ) ;
25059: LD_ADDR_VAR 0 5
25063: PUSH
25064: LD_VAR 0 10
25068: PPUSH
25069: CALL_OW 251
25073: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25074: LD_ADDR_VAR 0 6
25078: PUSH
25079: LD_VAR 0 4
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 12
25095: PLUS
25096: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25097: LD_ADDR_VAR 0 7
25101: PUSH
25102: LD_VAR 0 5
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: CALL_OW 12
25118: PLUS
25119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25120: LD_VAR 0 6
25124: PPUSH
25125: LD_VAR 0 7
25129: PPUSH
25130: CALL_OW 488
25134: NOT
25135: IFFALSE 25157
// begin _x := x ;
25137: LD_ADDR_VAR 0 6
25141: PUSH
25142: LD_VAR 0 4
25146: ST_TO_ADDR
// _y := y ;
25147: LD_ADDR_VAR 0 7
25151: PUSH
25152: LD_VAR 0 5
25156: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_INT 1
25164: PPUSH
25165: LD_VAR 0 14
25169: PPUSH
25170: CALL_OW 12
25174: ST_TO_ADDR
// case i of 1 :
25175: LD_VAR 0 3
25179: PUSH
25180: LD_INT 1
25182: DOUBLE
25183: EQUAL
25184: IFTRUE 25188
25186: GO 25205
25188: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25189: LD_VAR 0 1
25193: PPUSH
25194: LD_VAR 0 10
25198: PPUSH
25199: CALL_OW 115
25203: GO 25266
25205: LD_INT 2
25207: DOUBLE
25208: EQUAL
25209: IFTRUE 25213
25211: GO 25235
25213: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25214: LD_VAR 0 1
25218: PPUSH
25219: LD_VAR 0 6
25223: PPUSH
25224: LD_VAR 0 7
25228: PPUSH
25229: CALL_OW 153
25233: GO 25266
25235: LD_INT 3
25237: DOUBLE
25238: EQUAL
25239: IFTRUE 25243
25241: GO 25265
25243: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_VAR 0 6
25253: PPUSH
25254: LD_VAR 0 7
25258: PPUSH
25259: CALL_OW 154
25263: GO 25266
25265: POP
// end ;
25266: LD_VAR 0 2
25270: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
// if not unit or not building then
25279: LD_VAR 0 1
25283: NOT
25284: PUSH
25285: LD_VAR 0 2
25289: NOT
25290: OR
25291: IFFALSE 25295
// exit ;
25293: GO 25453
// x := GetX ( building ) ;
25295: LD_ADDR_VAR 0 5
25299: PUSH
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 250
25309: ST_TO_ADDR
// y := GetY ( building ) ;
25310: LD_ADDR_VAR 0 6
25314: PUSH
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 251
25324: ST_TO_ADDR
// for i = 0 to 5 do
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: DOUBLE
25331: LD_INT 0
25333: DEC
25334: ST_TO_ADDR
25335: LD_INT 5
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25451
// begin _x := ShiftX ( x , i , 3 ) ;
25341: LD_ADDR_VAR 0 7
25345: PUSH
25346: LD_VAR 0 5
25350: PPUSH
25351: LD_VAR 0 4
25355: PPUSH
25356: LD_INT 3
25358: PPUSH
25359: CALL_OW 272
25363: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25364: LD_ADDR_VAR 0 8
25368: PUSH
25369: LD_VAR 0 6
25373: PPUSH
25374: LD_VAR 0 4
25378: PPUSH
25379: LD_INT 3
25381: PPUSH
25382: CALL_OW 273
25386: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25387: LD_VAR 0 7
25391: PPUSH
25392: LD_VAR 0 8
25396: PPUSH
25397: CALL_OW 488
25401: NOT
25402: IFFALSE 25406
// continue ;
25404: GO 25338
// if HexInfo ( _x , _y ) = 0 then
25406: LD_VAR 0 7
25410: PPUSH
25411: LD_VAR 0 8
25415: PPUSH
25416: CALL_OW 428
25420: PUSH
25421: LD_INT 0
25423: EQUAL
25424: IFFALSE 25449
// begin ComMoveXY ( unit , _x , _y ) ;
25426: LD_VAR 0 1
25430: PPUSH
25431: LD_VAR 0 7
25435: PPUSH
25436: LD_VAR 0 8
25440: PPUSH
25441: CALL_OW 111
// exit ;
25445: POP
25446: POP
25447: GO 25453
// end ; end ;
25449: GO 25338
25451: POP
25452: POP
// end ;
25453: LD_VAR 0 3
25457: RET
// export function ScanBase ( side , base_area ) ; begin
25458: LD_INT 0
25460: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_INT 81
25473: PUSH
25474: LD_VAR 0 1
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 70
25487: ST_TO_ADDR
// end ;
25488: LD_VAR 0 3
25492: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25493: LD_INT 0
25495: PPUSH
25496: PPUSH
25497: PPUSH
25498: PPUSH
// result := false ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_INT 0
25506: ST_TO_ADDR
// side := GetSide ( unit ) ;
25507: LD_ADDR_VAR 0 3
25511: PUSH
25512: LD_VAR 0 1
25516: PPUSH
25517: CALL_OW 255
25521: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25522: LD_ADDR_VAR 0 4
25526: PUSH
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 248
25536: ST_TO_ADDR
// case nat of 1 :
25537: LD_VAR 0 4
25541: PUSH
25542: LD_INT 1
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25561
25550: POP
// tech := tech_lassight ; 2 :
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_INT 12
25558: ST_TO_ADDR
25559: GO 25600
25561: LD_INT 2
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25580
25569: POP
// tech := tech_mortar ; 3 :
25570: LD_ADDR_VAR 0 5
25574: PUSH
25575: LD_INT 41
25577: ST_TO_ADDR
25578: GO 25600
25580: LD_INT 3
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25599
25588: POP
// tech := tech_bazooka ; end ;
25589: LD_ADDR_VAR 0 5
25593: PUSH
25594: LD_INT 44
25596: ST_TO_ADDR
25597: GO 25600
25599: POP
// if Researched ( side , tech ) then
25600: LD_VAR 0 3
25604: PPUSH
25605: LD_VAR 0 5
25609: PPUSH
25610: CALL_OW 325
25614: IFFALSE 25641
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: LD_INT 5
25623: PUSH
25624: LD_INT 8
25626: PUSH
25627: LD_INT 9
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: PUSH
25635: LD_VAR 0 4
25639: ARRAY
25640: ST_TO_ADDR
// end ;
25641: LD_VAR 0 2
25645: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
// if not mines then
25651: LD_VAR 0 2
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25804
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25660: LD_ADDR_VAR 0 5
25664: PUSH
25665: LD_INT 81
25667: PUSH
25668: LD_VAR 0 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: LD_INT 21
25682: PUSH
25683: LD_INT 3
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PPUSH
25698: CALL_OW 69
25702: ST_TO_ADDR
// for i in mines do
25703: LD_ADDR_VAR 0 4
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: FOR_IN
25714: IFFALSE 25802
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25716: LD_VAR 0 4
25720: PUSH
25721: LD_INT 1
25723: ARRAY
25724: PPUSH
25725: LD_VAR 0 4
25729: PUSH
25730: LD_INT 2
25732: ARRAY
25733: PPUSH
25734: CALL_OW 458
25738: NOT
25739: IFFALSE 25743
// continue ;
25741: GO 25713
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25743: LD_VAR 0 4
25747: PUSH
25748: LD_INT 1
25750: ARRAY
25751: PPUSH
25752: LD_VAR 0 4
25756: PUSH
25757: LD_INT 2
25759: ARRAY
25760: PPUSH
25761: CALL_OW 428
25765: PUSH
25766: LD_VAR 0 5
25770: IN
25771: IFFALSE 25800
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25773: LD_VAR 0 4
25777: PUSH
25778: LD_INT 1
25780: ARRAY
25781: PPUSH
25782: LD_VAR 0 4
25786: PUSH
25787: LD_INT 2
25789: ARRAY
25790: PPUSH
25791: LD_VAR 0 1
25795: PPUSH
25796: CALL_OW 456
// end ;
25800: GO 25713
25802: POP
25803: POP
// end ;
25804: LD_VAR 0 3
25808: RET
// export function Count ( array ) ; var i ; begin
25809: LD_INT 0
25811: PPUSH
25812: PPUSH
// result := 0 ;
25813: LD_ADDR_VAR 0 2
25817: PUSH
25818: LD_INT 0
25820: ST_TO_ADDR
// for i in array do
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_VAR 0 1
25830: PUSH
25831: FOR_IN
25832: IFFALSE 25856
// if i then
25834: LD_VAR 0 3
25838: IFFALSE 25854
// result := result + 1 ;
25840: LD_ADDR_VAR 0 2
25844: PUSH
25845: LD_VAR 0 2
25849: PUSH
25850: LD_INT 1
25852: PLUS
25853: ST_TO_ADDR
25854: GO 25831
25856: POP
25857: POP
// end ;
25858: LD_VAR 0 2
25862: RET
// export function IsEmpty ( building ) ; begin
25863: LD_INT 0
25865: PPUSH
// if not building then
25866: LD_VAR 0 1
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 25918
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25875: LD_ADDR_VAR 0 2
25879: PUSH
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 22
25887: PUSH
25888: LD_VAR 0 1
25892: PPUSH
25893: CALL_OW 255
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 58
25904: PUSH
25905: EMPTY
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: IN
25917: ST_TO_ADDR
// end ;
25918: LD_VAR 0 2
25922: RET
// export function IsNotFull ( building ) ; begin
25923: LD_INT 0
25925: PPUSH
// if not building then
25926: LD_VAR 0 1
25930: NOT
25931: IFFALSE 25935
// exit ;
25933: GO 25954
// result := UnitsInside ( building ) < 6 ;
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 313
25949: PUSH
25950: LD_INT 6
25952: LESS
25953: ST_TO_ADDR
// end ;
25954: LD_VAR 0 2
25958: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25959: LD_INT 0
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
// tmp := [ ] ;
25965: LD_ADDR_VAR 0 3
25969: PUSH
25970: EMPTY
25971: ST_TO_ADDR
// list := [ ] ;
25972: LD_ADDR_VAR 0 5
25976: PUSH
25977: EMPTY
25978: ST_TO_ADDR
// for i = 16 to 25 do
25979: LD_ADDR_VAR 0 4
25983: PUSH
25984: DOUBLE
25985: LD_INT 16
25987: DEC
25988: ST_TO_ADDR
25989: LD_INT 25
25991: PUSH
25992: FOR_TO
25993: IFFALSE 26066
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25995: LD_ADDR_VAR 0 3
25999: PUSH
26000: LD_VAR 0 3
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 255
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 91
26024: PUSH
26025: LD_VAR 0 1
26029: PUSH
26030: LD_INT 6
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 30
26040: PUSH
26041: LD_VAR 0 4
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: PPUSH
26058: CALL_OW 69
26062: ADD
26063: ST_TO_ADDR
26064: GO 25992
26066: POP
26067: POP
// for i = 1 to tmp do
26068: LD_ADDR_VAR 0 4
26072: PUSH
26073: DOUBLE
26074: LD_INT 1
26076: DEC
26077: ST_TO_ADDR
26078: LD_VAR 0 3
26082: PUSH
26083: FOR_TO
26084: IFFALSE 26172
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: LD_VAR 0 5
26095: PUSH
26096: LD_VAR 0 3
26100: PUSH
26101: LD_VAR 0 4
26105: ARRAY
26106: PPUSH
26107: CALL_OW 266
26111: PUSH
26112: LD_VAR 0 3
26116: PUSH
26117: LD_VAR 0 4
26121: ARRAY
26122: PPUSH
26123: CALL_OW 250
26127: PUSH
26128: LD_VAR 0 3
26132: PUSH
26133: LD_VAR 0 4
26137: ARRAY
26138: PPUSH
26139: CALL_OW 251
26143: PUSH
26144: LD_VAR 0 3
26148: PUSH
26149: LD_VAR 0 4
26153: ARRAY
26154: PPUSH
26155: CALL_OW 254
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: PUSH
26166: EMPTY
26167: LIST
26168: ADD
26169: ST_TO_ADDR
26170: GO 26083
26172: POP
26173: POP
// result := list ;
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_VAR 0 5
26183: ST_TO_ADDR
// end ;
26184: LD_VAR 0 2
26188: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
26197: PPUSH
// if not factory then
26198: LD_VAR 0 1
26202: NOT
26203: IFFALSE 26207
// exit ;
26205: GO 26800
// if control = control_apeman then
26207: LD_VAR 0 4
26211: PUSH
26212: LD_INT 5
26214: EQUAL
26215: IFFALSE 26324
// begin tmp := UnitsInside ( factory ) ;
26217: LD_ADDR_VAR 0 8
26221: PUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 313
26231: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26232: LD_VAR 0 8
26236: PPUSH
26237: LD_INT 25
26239: PUSH
26240: LD_INT 12
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: NOT
26252: IFFALSE 26262
// control := control_manual ;
26254: LD_ADDR_VAR 0 4
26258: PUSH
26259: LD_INT 1
26261: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26262: LD_ADDR_VAR 0 8
26266: PUSH
26267: LD_VAR 0 1
26271: PPUSH
26272: CALL 25959 0 1
26276: ST_TO_ADDR
// if tmp then
26277: LD_VAR 0 8
26281: IFFALSE 26324
// begin for i in tmp do
26283: LD_ADDR_VAR 0 7
26287: PUSH
26288: LD_VAR 0 8
26292: PUSH
26293: FOR_IN
26294: IFFALSE 26322
// if i [ 1 ] = b_ext_radio then
26296: LD_VAR 0 7
26300: PUSH
26301: LD_INT 1
26303: ARRAY
26304: PUSH
26305: LD_INT 22
26307: EQUAL
26308: IFFALSE 26320
// begin control := control_remote ;
26310: LD_ADDR_VAR 0 4
26314: PUSH
26315: LD_INT 2
26317: ST_TO_ADDR
// break ;
26318: GO 26322
// end ;
26320: GO 26293
26322: POP
26323: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26324: LD_VAR 0 1
26328: PPUSH
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 3
26338: PPUSH
26339: LD_VAR 0 4
26343: PPUSH
26344: LD_VAR 0 5
26348: PPUSH
26349: CALL_OW 448
26353: IFFALSE 26388
// begin result := [ chassis , engine , control , weapon ] ;
26355: LD_ADDR_VAR 0 6
26359: PUSH
26360: LD_VAR 0 2
26364: PUSH
26365: LD_VAR 0 3
26369: PUSH
26370: LD_VAR 0 4
26374: PUSH
26375: LD_VAR 0 5
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: ST_TO_ADDR
// exit ;
26386: GO 26800
// end ; _chassis := AvailableChassisList ( factory ) ;
26388: LD_ADDR_VAR 0 9
26392: PUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 475
26402: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26403: LD_ADDR_VAR 0 11
26407: PUSH
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 476
26417: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26418: LD_ADDR_VAR 0 12
26422: PUSH
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 477
26432: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26433: LD_ADDR_VAR 0 10
26437: PUSH
26438: LD_VAR 0 1
26442: PPUSH
26443: CALL_OW 478
26447: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26448: LD_VAR 0 9
26452: NOT
26453: PUSH
26454: LD_VAR 0 11
26458: NOT
26459: OR
26460: PUSH
26461: LD_VAR 0 12
26465: NOT
26466: OR
26467: PUSH
26468: LD_VAR 0 10
26472: NOT
26473: OR
26474: IFFALSE 26509
// begin result := [ chassis , engine , control , weapon ] ;
26476: LD_ADDR_VAR 0 6
26480: PUSH
26481: LD_VAR 0 2
26485: PUSH
26486: LD_VAR 0 3
26490: PUSH
26491: LD_VAR 0 4
26495: PUSH
26496: LD_VAR 0 5
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// exit ;
26507: GO 26800
// end ; if not chassis in _chassis then
26509: LD_VAR 0 2
26513: PUSH
26514: LD_VAR 0 9
26518: IN
26519: NOT
26520: IFFALSE 26546
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26522: LD_ADDR_VAR 0 2
26526: PUSH
26527: LD_VAR 0 9
26531: PUSH
26532: LD_INT 1
26534: PPUSH
26535: LD_VAR 0 9
26539: PPUSH
26540: CALL_OW 12
26544: ARRAY
26545: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_VAR 0 3
26555: PPUSH
26556: CALL 26805 0 2
26560: NOT
26561: IFFALSE 26620
// repeat engine := _engine [ 1 ] ;
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_VAR 0 11
26572: PUSH
26573: LD_INT 1
26575: ARRAY
26576: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26577: LD_ADDR_VAR 0 11
26581: PUSH
26582: LD_VAR 0 11
26586: PPUSH
26587: LD_INT 1
26589: PPUSH
26590: CALL_OW 3
26594: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26595: LD_VAR 0 2
26599: PPUSH
26600: LD_VAR 0 3
26604: PPUSH
26605: CALL 26805 0 2
26609: PUSH
26610: LD_VAR 0 11
26614: PUSH
26615: EMPTY
26616: EQUAL
26617: OR
26618: IFFALSE 26563
// if not control in _control then
26620: LD_VAR 0 4
26624: PUSH
26625: LD_VAR 0 12
26629: IN
26630: NOT
26631: IFFALSE 26657
// control := _control [ rand ( 1 , _control ) ] ;
26633: LD_ADDR_VAR 0 4
26637: PUSH
26638: LD_VAR 0 12
26642: PUSH
26643: LD_INT 1
26645: PPUSH
26646: LD_VAR 0 12
26650: PPUSH
26651: CALL_OW 12
26655: ARRAY
26656: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 5
26666: PPUSH
26667: CALL 27025 0 2
26671: NOT
26672: IFFALSE 26731
// repeat weapon := _weapon [ 1 ] ;
26674: LD_ADDR_VAR 0 5
26678: PUSH
26679: LD_VAR 0 10
26683: PUSH
26684: LD_INT 1
26686: ARRAY
26687: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26688: LD_ADDR_VAR 0 10
26692: PUSH
26693: LD_VAR 0 10
26697: PPUSH
26698: LD_INT 1
26700: PPUSH
26701: CALL_OW 3
26705: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26706: LD_VAR 0 2
26710: PPUSH
26711: LD_VAR 0 5
26715: PPUSH
26716: CALL 27025 0 2
26720: PUSH
26721: LD_VAR 0 10
26725: PUSH
26726: EMPTY
26727: EQUAL
26728: OR
26729: IFFALSE 26674
// result := [ ] ;
26731: LD_ADDR_VAR 0 6
26735: PUSH
26736: EMPTY
26737: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26738: LD_VAR 0 1
26742: PPUSH
26743: LD_VAR 0 2
26747: PPUSH
26748: LD_VAR 0 3
26752: PPUSH
26753: LD_VAR 0 4
26757: PPUSH
26758: LD_VAR 0 5
26762: PPUSH
26763: CALL_OW 448
26767: IFFALSE 26800
// result := [ chassis , engine , control , weapon ] ;
26769: LD_ADDR_VAR 0 6
26773: PUSH
26774: LD_VAR 0 2
26778: PUSH
26779: LD_VAR 0 3
26783: PUSH
26784: LD_VAR 0 4
26788: PUSH
26789: LD_VAR 0 5
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// end ;
26800: LD_VAR 0 6
26804: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26805: LD_INT 0
26807: PPUSH
// if not chassis or not engine then
26808: LD_VAR 0 1
26812: NOT
26813: PUSH
26814: LD_VAR 0 2
26818: NOT
26819: OR
26820: IFFALSE 26824
// exit ;
26822: GO 27020
// case engine of engine_solar :
26824: LD_VAR 0 2
26828: PUSH
26829: LD_INT 2
26831: DOUBLE
26832: EQUAL
26833: IFTRUE 26837
26835: GO 26875
26837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26838: LD_ADDR_VAR 0 3
26842: PUSH
26843: LD_INT 11
26845: PUSH
26846: LD_INT 12
26848: PUSH
26849: LD_INT 13
26851: PUSH
26852: LD_INT 14
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 3
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: ST_TO_ADDR
26873: GO 27004
26875: LD_INT 1
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26945
26883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26884: LD_ADDR_VAR 0 3
26888: PUSH
26889: LD_INT 11
26891: PUSH
26892: LD_INT 12
26894: PUSH
26895: LD_INT 13
26897: PUSH
26898: LD_INT 14
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: LD_INT 3
26909: PUSH
26910: LD_INT 4
26912: PUSH
26913: LD_INT 5
26915: PUSH
26916: LD_INT 21
26918: PUSH
26919: LD_INT 23
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_INT 24
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
26943: GO 27004
26945: LD_INT 3
26947: DOUBLE
26948: EQUAL
26949: IFTRUE 26953
26951: GO 27003
26953: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26954: LD_ADDR_VAR 0 3
26958: PUSH
26959: LD_INT 13
26961: PUSH
26962: LD_INT 14
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 4
26973: PUSH
26974: LD_INT 5
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_INT 23
26985: PUSH
26986: LD_INT 24
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
27001: GO 27004
27003: POP
// result := ( chassis in result ) ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_VAR 0 1
27013: PUSH
27014: LD_VAR 0 3
27018: IN
27019: ST_TO_ADDR
// end ;
27020: LD_VAR 0 3
27024: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27025: LD_INT 0
27027: PPUSH
// if not chassis or not weapon then
27028: LD_VAR 0 1
27032: NOT
27033: PUSH
27034: LD_VAR 0 2
27038: NOT
27039: OR
27040: IFFALSE 27044
// exit ;
27042: GO 28070
// case weapon of us_machine_gun :
27044: LD_VAR 0 2
27048: PUSH
27049: LD_INT 2
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27087
27057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 3
27071: PUSH
27072: LD_INT 4
27074: PUSH
27075: LD_INT 5
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: ST_TO_ADDR
27085: GO 28054
27087: LD_INT 3
27089: DOUBLE
27090: EQUAL
27091: IFTRUE 27095
27093: GO 27125
27095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27096: LD_ADDR_VAR 0 3
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: LD_INT 3
27109: PUSH
27110: LD_INT 4
27112: PUSH
27113: LD_INT 5
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: ST_TO_ADDR
27123: GO 28054
27125: LD_INT 11
27127: DOUBLE
27128: EQUAL
27129: IFTRUE 27133
27131: GO 27163
27133: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: LD_INT 4
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
27161: GO 28054
27163: LD_INT 4
27165: DOUBLE
27166: EQUAL
27167: IFTRUE 27171
27169: GO 27197
27171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: LD_INT 4
27185: PUSH
27186: LD_INT 5
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: ST_TO_ADDR
27195: GO 28054
27197: LD_INT 5
27199: DOUBLE
27200: EQUAL
27201: IFTRUE 27205
27203: GO 27231
27205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27206: LD_ADDR_VAR 0 3
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 3
27216: PUSH
27217: LD_INT 4
27219: PUSH
27220: LD_INT 5
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: ST_TO_ADDR
27229: GO 28054
27231: LD_INT 9
27233: DOUBLE
27234: EQUAL
27235: IFTRUE 27239
27237: GO 27265
27239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 3
27250: PUSH
27251: LD_INT 4
27253: PUSH
27254: LD_INT 5
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
27263: GO 28054
27265: LD_INT 7
27267: DOUBLE
27268: EQUAL
27269: IFTRUE 27273
27271: GO 27299
27273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 3
27284: PUSH
27285: LD_INT 4
27287: PUSH
27288: LD_INT 5
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: ST_TO_ADDR
27297: GO 28054
27299: LD_INT 12
27301: DOUBLE
27302: EQUAL
27303: IFTRUE 27307
27305: GO 27333
27307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: LD_INT 3
27318: PUSH
27319: LD_INT 4
27321: PUSH
27322: LD_INT 5
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
27331: GO 28054
27333: LD_INT 13
27335: DOUBLE
27336: EQUAL
27337: IFTRUE 27341
27339: GO 27367
27341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: LD_INT 5
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
27365: GO 28054
27367: LD_INT 14
27369: DOUBLE
27370: EQUAL
27371: IFTRUE 27375
27373: GO 27393
27375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27376: LD_ADDR_VAR 0 3
27380: PUSH
27381: LD_INT 4
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: ST_TO_ADDR
27391: GO 28054
27393: LD_INT 6
27395: DOUBLE
27396: EQUAL
27397: IFTRUE 27401
27399: GO 27419
27401: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_INT 4
27409: PUSH
27410: LD_INT 5
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: ST_TO_ADDR
27417: GO 28054
27419: LD_INT 10
27421: DOUBLE
27422: EQUAL
27423: IFTRUE 27427
27425: GO 27445
27427: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: LD_INT 4
27435: PUSH
27436: LD_INT 5
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 28054
27445: LD_INT 22
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27479
27453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_INT 11
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 13
27467: PUSH
27468: LD_INT 14
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: ST_TO_ADDR
27477: GO 28054
27479: LD_INT 23
27481: DOUBLE
27482: EQUAL
27483: IFTRUE 27487
27485: GO 27513
27487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_INT 11
27495: PUSH
27496: LD_INT 12
27498: PUSH
27499: LD_INT 13
27501: PUSH
27502: LD_INT 14
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: ST_TO_ADDR
27511: GO 28054
27513: LD_INT 24
27515: DOUBLE
27516: EQUAL
27517: IFTRUE 27521
27519: GO 27547
27521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27522: LD_ADDR_VAR 0 3
27526: PUSH
27527: LD_INT 11
27529: PUSH
27530: LD_INT 12
27532: PUSH
27533: LD_INT 13
27535: PUSH
27536: LD_INT 14
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: ST_TO_ADDR
27545: GO 28054
27547: LD_INT 30
27549: DOUBLE
27550: EQUAL
27551: IFTRUE 27555
27553: GO 27581
27555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27556: LD_ADDR_VAR 0 3
27560: PUSH
27561: LD_INT 11
27563: PUSH
27564: LD_INT 12
27566: PUSH
27567: LD_INT 13
27569: PUSH
27570: LD_INT 14
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: ST_TO_ADDR
27579: GO 28054
27581: LD_INT 25
27583: DOUBLE
27584: EQUAL
27585: IFTRUE 27589
27587: GO 27607
27589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: LD_INT 13
27597: PUSH
27598: LD_INT 14
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: ST_TO_ADDR
27605: GO 28054
27607: LD_INT 27
27609: DOUBLE
27610: EQUAL
27611: IFTRUE 27615
27613: GO 27633
27615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27616: LD_ADDR_VAR 0 3
27620: PUSH
27621: LD_INT 13
27623: PUSH
27624: LD_INT 14
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: ST_TO_ADDR
27631: GO 28054
27633: LD_INT 28
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27659
27641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 13
27649: PUSH
27650: LD_INT 14
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: ST_TO_ADDR
27657: GO 28054
27659: LD_INT 29
27661: DOUBLE
27662: EQUAL
27663: IFTRUE 27667
27665: GO 27685
27667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27668: LD_ADDR_VAR 0 3
27672: PUSH
27673: LD_INT 13
27675: PUSH
27676: LD_INT 14
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: ST_TO_ADDR
27683: GO 28054
27685: LD_INT 31
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27711
27693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: LD_INT 13
27701: PUSH
27702: LD_INT 14
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 28054
27711: LD_INT 26
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27737
27719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 13
27727: PUSH
27728: LD_INT 14
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 28054
27737: LD_INT 42
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27771
27745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 21
27753: PUSH
27754: LD_INT 22
27756: PUSH
27757: LD_INT 23
27759: PUSH
27760: LD_INT 24
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 28054
27771: LD_INT 43
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27805
27779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 21
27787: PUSH
27788: LD_INT 22
27790: PUSH
27791: LD_INT 23
27793: PUSH
27794: LD_INT 24
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
27803: GO 28054
27805: LD_INT 44
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27813
27811: GO 27839
27813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27814: LD_ADDR_VAR 0 3
27818: PUSH
27819: LD_INT 21
27821: PUSH
27822: LD_INT 22
27824: PUSH
27825: LD_INT 23
27827: PUSH
27828: LD_INT 24
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
27837: GO 28054
27839: LD_INT 45
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27873
27847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27848: LD_ADDR_VAR 0 3
27852: PUSH
27853: LD_INT 21
27855: PUSH
27856: LD_INT 22
27858: PUSH
27859: LD_INT 23
27861: PUSH
27862: LD_INT 24
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: ST_TO_ADDR
27871: GO 28054
27873: LD_INT 49
27875: DOUBLE
27876: EQUAL
27877: IFTRUE 27881
27879: GO 27907
27881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_INT 21
27889: PUSH
27890: LD_INT 22
27892: PUSH
27893: LD_INT 23
27895: PUSH
27896: LD_INT 24
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
27905: GO 28054
27907: LD_INT 51
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27915
27913: GO 27941
27915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: LD_INT 21
27923: PUSH
27924: LD_INT 22
27926: PUSH
27927: LD_INT 23
27929: PUSH
27930: LD_INT 24
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: ST_TO_ADDR
27939: GO 28054
27941: LD_INT 52
27943: DOUBLE
27944: EQUAL
27945: IFTRUE 27949
27947: GO 27975
27949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: LD_INT 21
27957: PUSH
27958: LD_INT 22
27960: PUSH
27961: LD_INT 23
27963: PUSH
27964: LD_INT 24
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
27973: GO 28054
27975: LD_INT 53
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 27983
27981: GO 28001
27983: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 23
27991: PUSH
27992: LD_INT 24
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: ST_TO_ADDR
27999: GO 28054
28001: LD_INT 46
28003: DOUBLE
28004: EQUAL
28005: IFTRUE 28009
28007: GO 28027
28009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28010: LD_ADDR_VAR 0 3
28014: PUSH
28015: LD_INT 23
28017: PUSH
28018: LD_INT 24
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: ST_TO_ADDR
28025: GO 28054
28027: LD_INT 47
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28035
28033: GO 28053
28035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28036: LD_ADDR_VAR 0 3
28040: PUSH
28041: LD_INT 23
28043: PUSH
28044: LD_INT 24
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: ST_TO_ADDR
28051: GO 28054
28053: POP
// result := ( chassis in result ) ;
28054: LD_ADDR_VAR 0 3
28058: PUSH
28059: LD_VAR 0 1
28063: PUSH
28064: LD_VAR 0 3
28068: IN
28069: ST_TO_ADDR
// end ;
28070: LD_VAR 0 3
28074: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28075: LD_INT 0
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
// result := array ;
28084: LD_ADDR_VAR 0 5
28088: PUSH
28089: LD_VAR 0 1
28093: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28094: LD_VAR 0 1
28098: NOT
28099: PUSH
28100: LD_VAR 0 2
28104: NOT
28105: OR
28106: PUSH
28107: LD_VAR 0 3
28111: NOT
28112: OR
28113: PUSH
28114: LD_VAR 0 2
28118: PUSH
28119: LD_VAR 0 1
28123: GREATER
28124: OR
28125: PUSH
28126: LD_VAR 0 3
28130: PUSH
28131: LD_VAR 0 1
28135: GREATER
28136: OR
28137: IFFALSE 28141
// exit ;
28139: GO 28437
// if direction then
28141: LD_VAR 0 4
28145: IFFALSE 28209
// begin d := 1 ;
28147: LD_ADDR_VAR 0 9
28151: PUSH
28152: LD_INT 1
28154: ST_TO_ADDR
// if i_from > i_to then
28155: LD_VAR 0 2
28159: PUSH
28160: LD_VAR 0 3
28164: GREATER
28165: IFFALSE 28191
// length := ( array - i_from ) + i_to else
28167: LD_ADDR_VAR 0 11
28171: PUSH
28172: LD_VAR 0 1
28176: PUSH
28177: LD_VAR 0 2
28181: MINUS
28182: PUSH
28183: LD_VAR 0 3
28187: PLUS
28188: ST_TO_ADDR
28189: GO 28207
// length := i_to - i_from ;
28191: LD_ADDR_VAR 0 11
28195: PUSH
28196: LD_VAR 0 3
28200: PUSH
28201: LD_VAR 0 2
28205: MINUS
28206: ST_TO_ADDR
// end else
28207: GO 28270
// begin d := - 1 ;
28209: LD_ADDR_VAR 0 9
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: ST_TO_ADDR
// if i_from > i_to then
28218: LD_VAR 0 2
28222: PUSH
28223: LD_VAR 0 3
28227: GREATER
28228: IFFALSE 28248
// length := i_from - i_to else
28230: LD_ADDR_VAR 0 11
28234: PUSH
28235: LD_VAR 0 2
28239: PUSH
28240: LD_VAR 0 3
28244: MINUS
28245: ST_TO_ADDR
28246: GO 28270
// length := ( array - i_to ) + i_from ;
28248: LD_ADDR_VAR 0 11
28252: PUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_VAR 0 3
28262: MINUS
28263: PUSH
28264: LD_VAR 0 2
28268: PLUS
28269: ST_TO_ADDR
// end ; if not length then
28270: LD_VAR 0 11
28274: NOT
28275: IFFALSE 28279
// exit ;
28277: GO 28437
// tmp := array ;
28279: LD_ADDR_VAR 0 10
28283: PUSH
28284: LD_VAR 0 1
28288: ST_TO_ADDR
// for i = 1 to length do
28289: LD_ADDR_VAR 0 6
28293: PUSH
28294: DOUBLE
28295: LD_INT 1
28297: DEC
28298: ST_TO_ADDR
28299: LD_VAR 0 11
28303: PUSH
28304: FOR_TO
28305: IFFALSE 28425
// begin for j = 1 to array do
28307: LD_ADDR_VAR 0 7
28311: PUSH
28312: DOUBLE
28313: LD_INT 1
28315: DEC
28316: ST_TO_ADDR
28317: LD_VAR 0 1
28321: PUSH
28322: FOR_TO
28323: IFFALSE 28411
// begin k := j + d ;
28325: LD_ADDR_VAR 0 8
28329: PUSH
28330: LD_VAR 0 7
28334: PUSH
28335: LD_VAR 0 9
28339: PLUS
28340: ST_TO_ADDR
// if k > array then
28341: LD_VAR 0 8
28345: PUSH
28346: LD_VAR 0 1
28350: GREATER
28351: IFFALSE 28361
// k := 1 ;
28353: LD_ADDR_VAR 0 8
28357: PUSH
28358: LD_INT 1
28360: ST_TO_ADDR
// if not k then
28361: LD_VAR 0 8
28365: NOT
28366: IFFALSE 28378
// k := array ;
28368: LD_ADDR_VAR 0 8
28372: PUSH
28373: LD_VAR 0 1
28377: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28378: LD_ADDR_VAR 0 10
28382: PUSH
28383: LD_VAR 0 10
28387: PPUSH
28388: LD_VAR 0 8
28392: PPUSH
28393: LD_VAR 0 1
28397: PUSH
28398: LD_VAR 0 7
28402: ARRAY
28403: PPUSH
28404: CALL_OW 1
28408: ST_TO_ADDR
// end ;
28409: GO 28322
28411: POP
28412: POP
// array := tmp ;
28413: LD_ADDR_VAR 0 1
28417: PUSH
28418: LD_VAR 0 10
28422: ST_TO_ADDR
// end ;
28423: GO 28304
28425: POP
28426: POP
// result := array ;
28427: LD_ADDR_VAR 0 5
28431: PUSH
28432: LD_VAR 0 1
28436: ST_TO_ADDR
// end ;
28437: LD_VAR 0 5
28441: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28442: LD_INT 0
28444: PPUSH
28445: PPUSH
// result := 0 ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 0
28453: ST_TO_ADDR
// if not array or not value in array then
28454: LD_VAR 0 1
28458: NOT
28459: PUSH
28460: LD_VAR 0 2
28464: PUSH
28465: LD_VAR 0 1
28469: IN
28470: NOT
28471: OR
28472: IFFALSE 28476
// exit ;
28474: GO 28530
// for i = 1 to array do
28476: LD_ADDR_VAR 0 4
28480: PUSH
28481: DOUBLE
28482: LD_INT 1
28484: DEC
28485: ST_TO_ADDR
28486: LD_VAR 0 1
28490: PUSH
28491: FOR_TO
28492: IFFALSE 28528
// if value = array [ i ] then
28494: LD_VAR 0 2
28498: PUSH
28499: LD_VAR 0 1
28503: PUSH
28504: LD_VAR 0 4
28508: ARRAY
28509: EQUAL
28510: IFFALSE 28526
// begin result := i ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_VAR 0 4
28521: ST_TO_ADDR
// exit ;
28522: POP
28523: POP
28524: GO 28530
// end ;
28526: GO 28491
28528: POP
28529: POP
// end ;
28530: LD_VAR 0 3
28534: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28535: LD_INT 0
28537: PPUSH
// vc_chassis := chassis ;
28538: LD_ADDR_OWVAR 37
28542: PUSH
28543: LD_VAR 0 1
28547: ST_TO_ADDR
// vc_engine := engine ;
28548: LD_ADDR_OWVAR 39
28552: PUSH
28553: LD_VAR 0 2
28557: ST_TO_ADDR
// vc_control := control ;
28558: LD_ADDR_OWVAR 38
28562: PUSH
28563: LD_VAR 0 3
28567: ST_TO_ADDR
// vc_weapon := weapon ;
28568: LD_ADDR_OWVAR 40
28572: PUSH
28573: LD_VAR 0 4
28577: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28578: LD_ADDR_OWVAR 41
28582: PUSH
28583: LD_VAR 0 5
28587: ST_TO_ADDR
// end ;
28588: LD_VAR 0 6
28592: RET
// export function WantPlant ( unit ) ; var task ; begin
28593: LD_INT 0
28595: PPUSH
28596: PPUSH
// result := false ;
28597: LD_ADDR_VAR 0 2
28601: PUSH
28602: LD_INT 0
28604: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_VAR 0 1
28614: PPUSH
28615: CALL_OW 437
28619: ST_TO_ADDR
// if task then
28620: LD_VAR 0 3
28624: IFFALSE 28652
// if task [ 1 ] [ 1 ] = p then
28626: LD_VAR 0 3
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: PUSH
28635: LD_INT 1
28637: ARRAY
28638: PUSH
28639: LD_STRING p
28641: EQUAL
28642: IFFALSE 28652
// result := true ;
28644: LD_ADDR_VAR 0 2
28648: PUSH
28649: LD_INT 1
28651: ST_TO_ADDR
// end ;
28652: LD_VAR 0 2
28656: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28657: LD_INT 0
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
// if pos < 1 then
28663: LD_VAR 0 2
28667: PUSH
28668: LD_INT 1
28670: LESS
28671: IFFALSE 28675
// exit ;
28673: GO 28978
// if pos = 1 then
28675: LD_VAR 0 2
28679: PUSH
28680: LD_INT 1
28682: EQUAL
28683: IFFALSE 28716
// result := Replace ( arr , pos [ 1 ] , value ) else
28685: LD_ADDR_VAR 0 4
28689: PUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_VAR 0 2
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 1
28713: ST_TO_ADDR
28714: GO 28978
// begin tmp := arr ;
28716: LD_ADDR_VAR 0 6
28720: PUSH
28721: LD_VAR 0 1
28725: ST_TO_ADDR
// s_arr := [ tmp ] ;
28726: LD_ADDR_VAR 0 7
28730: PUSH
28731: LD_VAR 0 6
28735: PUSH
28736: EMPTY
28737: LIST
28738: ST_TO_ADDR
// for i = 1 to pos - 1 do
28739: LD_ADDR_VAR 0 5
28743: PUSH
28744: DOUBLE
28745: LD_INT 1
28747: DEC
28748: ST_TO_ADDR
28749: LD_VAR 0 2
28753: PUSH
28754: LD_INT 1
28756: MINUS
28757: PUSH
28758: FOR_TO
28759: IFFALSE 28804
// begin tmp := tmp [ pos [ i ] ] ;
28761: LD_ADDR_VAR 0 6
28765: PUSH
28766: LD_VAR 0 6
28770: PUSH
28771: LD_VAR 0 2
28775: PUSH
28776: LD_VAR 0 5
28780: ARRAY
28781: ARRAY
28782: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28783: LD_ADDR_VAR 0 7
28787: PUSH
28788: LD_VAR 0 7
28792: PUSH
28793: LD_VAR 0 6
28797: PUSH
28798: EMPTY
28799: LIST
28800: ADD
28801: ST_TO_ADDR
// end ;
28802: GO 28758
28804: POP
28805: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28806: LD_ADDR_VAR 0 6
28810: PUSH
28811: LD_VAR 0 6
28815: PPUSH
28816: LD_VAR 0 2
28820: PUSH
28821: LD_VAR 0 2
28825: ARRAY
28826: PPUSH
28827: LD_VAR 0 3
28831: PPUSH
28832: CALL_OW 1
28836: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28837: LD_ADDR_VAR 0 7
28841: PUSH
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 7
28851: PPUSH
28852: LD_VAR 0 6
28856: PPUSH
28857: CALL_OW 1
28861: ST_TO_ADDR
// for i = s_arr downto 2 do
28862: LD_ADDR_VAR 0 5
28866: PUSH
28867: DOUBLE
28868: LD_VAR 0 7
28872: INC
28873: ST_TO_ADDR
28874: LD_INT 2
28876: PUSH
28877: FOR_DOWNTO
28878: IFFALSE 28962
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28880: LD_ADDR_VAR 0 6
28884: PUSH
28885: LD_VAR 0 7
28889: PUSH
28890: LD_VAR 0 5
28894: PUSH
28895: LD_INT 1
28897: MINUS
28898: ARRAY
28899: PPUSH
28900: LD_VAR 0 2
28904: PUSH
28905: LD_VAR 0 5
28909: PUSH
28910: LD_INT 1
28912: MINUS
28913: ARRAY
28914: PPUSH
28915: LD_VAR 0 7
28919: PUSH
28920: LD_VAR 0 5
28924: ARRAY
28925: PPUSH
28926: CALL_OW 1
28930: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28931: LD_ADDR_VAR 0 7
28935: PUSH
28936: LD_VAR 0 7
28940: PPUSH
28941: LD_VAR 0 5
28945: PUSH
28946: LD_INT 1
28948: MINUS
28949: PPUSH
28950: LD_VAR 0 6
28954: PPUSH
28955: CALL_OW 1
28959: ST_TO_ADDR
// end ;
28960: GO 28877
28962: POP
28963: POP
// result := s_arr [ 1 ] ;
28964: LD_ADDR_VAR 0 4
28968: PUSH
28969: LD_VAR 0 7
28973: PUSH
28974: LD_INT 1
28976: ARRAY
28977: ST_TO_ADDR
// end ; end ;
28978: LD_VAR 0 4
28982: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
// if not list then
28987: LD_VAR 0 1
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29087
// i := list [ pos1 ] ;
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: LD_VAR 0 1
29005: PUSH
29006: LD_VAR 0 2
29010: ARRAY
29011: ST_TO_ADDR
// if not i then
29012: LD_VAR 0 5
29016: NOT
29017: IFFALSE 29021
// exit ;
29019: GO 29087
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29021: LD_ADDR_VAR 0 1
29025: PUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: LD_VAR 0 2
29035: PPUSH
29036: LD_VAR 0 1
29040: PUSH
29041: LD_VAR 0 3
29045: ARRAY
29046: PPUSH
29047: CALL_OW 1
29051: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29052: LD_ADDR_VAR 0 1
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: LD_VAR 0 5
29071: PPUSH
29072: CALL_OW 1
29076: ST_TO_ADDR
// result := list ;
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 1
29086: ST_TO_ADDR
// end ;
29087: LD_VAR 0 4
29091: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29092: LD_INT 0
29094: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29095: LD_ADDR_VAR 0 5
29099: PUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 250
29109: PPUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 251
29119: PPUSH
29120: LD_VAR 0 2
29124: PPUSH
29125: LD_VAR 0 3
29129: PPUSH
29130: LD_VAR 0 4
29134: PPUSH
29135: CALL 29145 0 5
29139: ST_TO_ADDR
// end ;
29140: LD_VAR 0 5
29144: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29145: LD_INT 0
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
// if not list then
29151: LD_VAR 0 3
29155: NOT
29156: IFFALSE 29160
// exit ;
29158: GO 29548
// result := [ ] ;
29160: LD_ADDR_VAR 0 6
29164: PUSH
29165: EMPTY
29166: ST_TO_ADDR
// for i in list do
29167: LD_ADDR_VAR 0 7
29171: PUSH
29172: LD_VAR 0 3
29176: PUSH
29177: FOR_IN
29178: IFFALSE 29380
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29180: LD_ADDR_VAR 0 9
29184: PUSH
29185: LD_VAR 0 7
29189: PPUSH
29190: LD_VAR 0 1
29194: PPUSH
29195: LD_VAR 0 2
29199: PPUSH
29200: CALL_OW 297
29204: ST_TO_ADDR
// if not result then
29205: LD_VAR 0 6
29209: NOT
29210: IFFALSE 29236
// result := [ [ i , tmp ] ] else
29212: LD_ADDR_VAR 0 6
29216: PUSH
29217: LD_VAR 0 7
29221: PUSH
29222: LD_VAR 0 9
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: ST_TO_ADDR
29234: GO 29378
// begin if result [ result ] [ 2 ] < tmp then
29236: LD_VAR 0 6
29240: PUSH
29241: LD_VAR 0 6
29245: ARRAY
29246: PUSH
29247: LD_INT 2
29249: ARRAY
29250: PUSH
29251: LD_VAR 0 9
29255: LESS
29256: IFFALSE 29298
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29258: LD_ADDR_VAR 0 6
29262: PUSH
29263: LD_VAR 0 6
29267: PPUSH
29268: LD_VAR 0 6
29272: PUSH
29273: LD_INT 1
29275: PLUS
29276: PPUSH
29277: LD_VAR 0 7
29281: PUSH
29282: LD_VAR 0 9
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PPUSH
29291: CALL_OW 2
29295: ST_TO_ADDR
29296: GO 29378
// for j = 1 to result do
29298: LD_ADDR_VAR 0 8
29302: PUSH
29303: DOUBLE
29304: LD_INT 1
29306: DEC
29307: ST_TO_ADDR
29308: LD_VAR 0 6
29312: PUSH
29313: FOR_TO
29314: IFFALSE 29376
// begin if tmp < result [ j ] [ 2 ] then
29316: LD_VAR 0 9
29320: PUSH
29321: LD_VAR 0 6
29325: PUSH
29326: LD_VAR 0 8
29330: ARRAY
29331: PUSH
29332: LD_INT 2
29334: ARRAY
29335: LESS
29336: IFFALSE 29374
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29338: LD_ADDR_VAR 0 6
29342: PUSH
29343: LD_VAR 0 6
29347: PPUSH
29348: LD_VAR 0 8
29352: PPUSH
29353: LD_VAR 0 7
29357: PUSH
29358: LD_VAR 0 9
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 2
29371: ST_TO_ADDR
// break ;
29372: GO 29376
// end ; end ;
29374: GO 29313
29376: POP
29377: POP
// end ; end ;
29378: GO 29177
29380: POP
29381: POP
// if result and not asc then
29382: LD_VAR 0 6
29386: PUSH
29387: LD_VAR 0 4
29391: NOT
29392: AND
29393: IFFALSE 29468
// begin tmp := result ;
29395: LD_ADDR_VAR 0 9
29399: PUSH
29400: LD_VAR 0 6
29404: ST_TO_ADDR
// for i = tmp downto 1 do
29405: LD_ADDR_VAR 0 7
29409: PUSH
29410: DOUBLE
29411: LD_VAR 0 9
29415: INC
29416: ST_TO_ADDR
29417: LD_INT 1
29419: PUSH
29420: FOR_DOWNTO
29421: IFFALSE 29466
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29423: LD_ADDR_VAR 0 6
29427: PUSH
29428: LD_VAR 0 6
29432: PPUSH
29433: LD_VAR 0 9
29437: PUSH
29438: LD_VAR 0 7
29442: MINUS
29443: PUSH
29444: LD_INT 1
29446: PLUS
29447: PPUSH
29448: LD_VAR 0 9
29452: PUSH
29453: LD_VAR 0 7
29457: ARRAY
29458: PPUSH
29459: CALL_OW 1
29463: ST_TO_ADDR
29464: GO 29420
29466: POP
29467: POP
// end ; tmp := [ ] ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: EMPTY
29474: ST_TO_ADDR
// if mode then
29475: LD_VAR 0 5
29479: IFFALSE 29548
// begin for i = 1 to result do
29481: LD_ADDR_VAR 0 7
29485: PUSH
29486: DOUBLE
29487: LD_INT 1
29489: DEC
29490: ST_TO_ADDR
29491: LD_VAR 0 6
29495: PUSH
29496: FOR_TO
29497: IFFALSE 29536
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29499: LD_ADDR_VAR 0 9
29503: PUSH
29504: LD_VAR 0 9
29508: PPUSH
29509: LD_VAR 0 7
29513: PPUSH
29514: LD_VAR 0 6
29518: PUSH
29519: LD_VAR 0 7
29523: ARRAY
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: CALL_OW 1
29533: ST_TO_ADDR
29534: GO 29496
29536: POP
29537: POP
// result := tmp ;
29538: LD_ADDR_VAR 0 6
29542: PUSH
29543: LD_VAR 0 9
29547: ST_TO_ADDR
// end ; end ;
29548: LD_VAR 0 6
29552: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// if not x or not y then
29583: LD_VAR 0 2
29587: NOT
29588: PUSH
29589: LD_VAR 0 3
29593: NOT
29594: OR
29595: IFFALSE 29599
// exit ;
29597: GO 31245
// if not range then
29599: LD_VAR 0 4
29603: NOT
29604: IFFALSE 29614
// range := 10 ;
29606: LD_ADDR_VAR 0 4
29610: PUSH
29611: LD_INT 10
29613: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29614: LD_ADDR_VAR 0 8
29618: PUSH
29619: LD_INT 81
29621: PUSH
29622: LD_VAR 0 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 92
29633: PUSH
29634: LD_VAR 0 2
29638: PUSH
29639: LD_VAR 0 3
29643: PUSH
29644: LD_VAR 0 4
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 21
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: PPUSH
29677: CALL_OW 69
29681: ST_TO_ADDR
// if not tmp then
29682: LD_VAR 0 8
29686: NOT
29687: IFFALSE 29691
// exit ;
29689: GO 31245
// for i in tmp do
29691: LD_ADDR_VAR 0 6
29695: PUSH
29696: LD_VAR 0 8
29700: PUSH
29701: FOR_IN
29702: IFFALSE 31220
// begin points := [ 0 , 0 , 0 ] ;
29704: LD_ADDR_VAR 0 9
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// bpoints := 1 ;
29723: LD_ADDR_VAR 0 10
29727: PUSH
29728: LD_INT 1
29730: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29731: LD_VAR 0 6
29735: PPUSH
29736: CALL_OW 247
29740: PUSH
29741: LD_INT 1
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 30327
29749: POP
// begin if GetClass ( i ) = 1 then
29750: LD_VAR 0 6
29754: PPUSH
29755: CALL_OW 257
29759: PUSH
29760: LD_INT 1
29762: EQUAL
29763: IFFALSE 29784
// points := [ 10 , 5 , 3 ] ;
29765: LD_ADDR_VAR 0 9
29769: PUSH
29770: LD_INT 10
29772: PUSH
29773: LD_INT 5
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29784: LD_VAR 0 6
29788: PPUSH
29789: CALL_OW 257
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: IN
29808: IFFALSE 29829
// points := [ 3 , 2 , 1 ] ;
29810: LD_ADDR_VAR 0 9
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29829: LD_VAR 0 6
29833: PPUSH
29834: CALL_OW 257
29838: PUSH
29839: LD_INT 5
29841: EQUAL
29842: IFFALSE 29863
// points := [ 130 , 5 , 2 ] ;
29844: LD_ADDR_VAR 0 9
29848: PUSH
29849: LD_INT 130
29851: PUSH
29852: LD_INT 5
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29863: LD_VAR 0 6
29867: PPUSH
29868: CALL_OW 257
29872: PUSH
29873: LD_INT 8
29875: EQUAL
29876: IFFALSE 29897
// points := [ 35 , 35 , 30 ] ;
29878: LD_ADDR_VAR 0 9
29882: PUSH
29883: LD_INT 35
29885: PUSH
29886: LD_INT 35
29888: PUSH
29889: LD_INT 30
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29897: LD_VAR 0 6
29901: PPUSH
29902: CALL_OW 257
29906: PUSH
29907: LD_INT 9
29909: EQUAL
29910: IFFALSE 29931
// points := [ 20 , 55 , 40 ] ;
29912: LD_ADDR_VAR 0 9
29916: PUSH
29917: LD_INT 20
29919: PUSH
29920: LD_INT 55
29922: PUSH
29923: LD_INT 40
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29931: LD_VAR 0 6
29935: PPUSH
29936: CALL_OW 257
29940: PUSH
29941: LD_INT 12
29943: PUSH
29944: LD_INT 16
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: IN
29951: IFFALSE 29972
// points := [ 5 , 3 , 2 ] ;
29953: LD_ADDR_VAR 0 9
29957: PUSH
29958: LD_INT 5
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29972: LD_VAR 0 6
29976: PPUSH
29977: CALL_OW 257
29981: PUSH
29982: LD_INT 17
29984: EQUAL
29985: IFFALSE 30006
// points := [ 100 , 50 , 75 ] ;
29987: LD_ADDR_VAR 0 9
29991: PUSH
29992: LD_INT 100
29994: PUSH
29995: LD_INT 50
29997: PUSH
29998: LD_INT 75
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30006: LD_VAR 0 6
30010: PPUSH
30011: CALL_OW 257
30015: PUSH
30016: LD_INT 15
30018: EQUAL
30019: IFFALSE 30040
// points := [ 10 , 5 , 3 ] ;
30021: LD_ADDR_VAR 0 9
30025: PUSH
30026: LD_INT 10
30028: PUSH
30029: LD_INT 5
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30040: LD_VAR 0 6
30044: PPUSH
30045: CALL_OW 257
30049: PUSH
30050: LD_INT 14
30052: EQUAL
30053: IFFALSE 30074
// points := [ 10 , 0 , 0 ] ;
30055: LD_ADDR_VAR 0 9
30059: PUSH
30060: LD_INT 10
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30074: LD_VAR 0 6
30078: PPUSH
30079: CALL_OW 257
30083: PUSH
30084: LD_INT 11
30086: EQUAL
30087: IFFALSE 30108
// points := [ 30 , 10 , 5 ] ;
30089: LD_ADDR_VAR 0 9
30093: PUSH
30094: LD_INT 30
30096: PUSH
30097: LD_INT 10
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30108: LD_VAR 0 1
30112: PPUSH
30113: LD_INT 5
30115: PPUSH
30116: CALL_OW 321
30120: PUSH
30121: LD_INT 2
30123: EQUAL
30124: IFFALSE 30141
// bpoints := bpoints * 1.8 ;
30126: LD_ADDR_VAR 0 10
30130: PUSH
30131: LD_VAR 0 10
30135: PUSH
30136: LD_REAL  1.80000000000000E+0000
30139: MUL
30140: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30141: LD_VAR 0 6
30145: PPUSH
30146: CALL_OW 257
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: IN
30169: PUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_INT 51
30177: PPUSH
30178: CALL_OW 321
30182: PUSH
30183: LD_INT 2
30185: EQUAL
30186: AND
30187: IFFALSE 30204
// bpoints := bpoints * 1.2 ;
30189: LD_ADDR_VAR 0 10
30193: PUSH
30194: LD_VAR 0 10
30198: PUSH
30199: LD_REAL  1.20000000000000E+0000
30202: MUL
30203: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30204: LD_VAR 0 6
30208: PPUSH
30209: CALL_OW 257
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 7
30219: PUSH
30220: LD_INT 9
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: IN
30228: PUSH
30229: LD_VAR 0 1
30233: PPUSH
30234: LD_INT 52
30236: PPUSH
30237: CALL_OW 321
30241: PUSH
30242: LD_INT 2
30244: EQUAL
30245: AND
30246: IFFALSE 30263
// bpoints := bpoints * 1.5 ;
30248: LD_ADDR_VAR 0 10
30252: PUSH
30253: LD_VAR 0 10
30257: PUSH
30258: LD_REAL  1.50000000000000E+0000
30261: MUL
30262: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30263: LD_VAR 0 1
30267: PPUSH
30268: LD_INT 66
30270: PPUSH
30271: CALL_OW 321
30275: PUSH
30276: LD_INT 2
30278: EQUAL
30279: IFFALSE 30296
// bpoints := bpoints * 1.1 ;
30281: LD_ADDR_VAR 0 10
30285: PUSH
30286: LD_VAR 0 10
30290: PUSH
30291: LD_REAL  1.10000000000000E+0000
30294: MUL
30295: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30296: LD_ADDR_VAR 0 10
30300: PUSH
30301: LD_VAR 0 10
30305: PUSH
30306: LD_VAR 0 6
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL_OW 259
30318: PUSH
30319: LD_REAL  1.15000000000000E+0000
30322: MUL
30323: MUL
30324: ST_TO_ADDR
// end ; unit_vehicle :
30325: GO 31149
30327: LD_INT 2
30329: DOUBLE
30330: EQUAL
30331: IFTRUE 30335
30333: GO 31137
30335: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30336: LD_VAR 0 6
30340: PPUSH
30341: CALL_OW 264
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: LD_INT 42
30351: PUSH
30352: LD_INT 24
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: IN
30360: IFFALSE 30381
// points := [ 25 , 5 , 3 ] ;
30362: LD_ADDR_VAR 0 9
30366: PUSH
30367: LD_INT 25
30369: PUSH
30370: LD_INT 5
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30381: LD_VAR 0 6
30385: PPUSH
30386: CALL_OW 264
30390: PUSH
30391: LD_INT 4
30393: PUSH
30394: LD_INT 43
30396: PUSH
30397: LD_INT 25
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: IN
30405: IFFALSE 30426
// points := [ 40 , 15 , 5 ] ;
30407: LD_ADDR_VAR 0 9
30411: PUSH
30412: LD_INT 40
30414: PUSH
30415: LD_INT 15
30417: PUSH
30418: LD_INT 5
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30426: LD_VAR 0 6
30430: PPUSH
30431: CALL_OW 264
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: LD_INT 23
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: IN
30446: IFFALSE 30467
// points := [ 7 , 25 , 8 ] ;
30448: LD_ADDR_VAR 0 9
30452: PUSH
30453: LD_INT 7
30455: PUSH
30456: LD_INT 25
30458: PUSH
30459: LD_INT 8
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30467: LD_VAR 0 6
30471: PPUSH
30472: CALL_OW 264
30476: PUSH
30477: LD_INT 5
30479: PUSH
30480: LD_INT 27
30482: PUSH
30483: LD_INT 44
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: IN
30491: IFFALSE 30512
// points := [ 14 , 50 , 16 ] ;
30493: LD_ADDR_VAR 0 9
30497: PUSH
30498: LD_INT 14
30500: PUSH
30501: LD_INT 50
30503: PUSH
30504: LD_INT 16
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30512: LD_VAR 0 6
30516: PPUSH
30517: CALL_OW 264
30521: PUSH
30522: LD_INT 6
30524: PUSH
30525: LD_INT 46
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: IN
30532: IFFALSE 30553
// points := [ 32 , 120 , 70 ] ;
30534: LD_ADDR_VAR 0 9
30538: PUSH
30539: LD_INT 32
30541: PUSH
30542: LD_INT 120
30544: PUSH
30545: LD_INT 70
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30553: LD_VAR 0 6
30557: PPUSH
30558: CALL_OW 264
30562: PUSH
30563: LD_INT 7
30565: PUSH
30566: LD_INT 28
30568: PUSH
30569: LD_INT 45
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: LIST
30576: IN
30577: IFFALSE 30598
// points := [ 35 , 20 , 45 ] ;
30579: LD_ADDR_VAR 0 9
30583: PUSH
30584: LD_INT 35
30586: PUSH
30587: LD_INT 20
30589: PUSH
30590: LD_INT 45
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30598: LD_VAR 0 6
30602: PPUSH
30603: CALL_OW 264
30607: PUSH
30608: LD_INT 47
30610: PUSH
30611: EMPTY
30612: LIST
30613: IN
30614: IFFALSE 30635
// points := [ 67 , 45 , 75 ] ;
30616: LD_ADDR_VAR 0 9
30620: PUSH
30621: LD_INT 67
30623: PUSH
30624: LD_INT 45
30626: PUSH
30627: LD_INT 75
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 264
30644: PUSH
30645: LD_INT 26
30647: PUSH
30648: EMPTY
30649: LIST
30650: IN
30651: IFFALSE 30672
// points := [ 120 , 30 , 80 ] ;
30653: LD_ADDR_VAR 0 9
30657: PUSH
30658: LD_INT 120
30660: PUSH
30661: LD_INT 30
30663: PUSH
30664: LD_INT 80
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30672: LD_VAR 0 6
30676: PPUSH
30677: CALL_OW 264
30681: PUSH
30682: LD_INT 22
30684: PUSH
30685: EMPTY
30686: LIST
30687: IN
30688: IFFALSE 30709
// points := [ 40 , 1 , 1 ] ;
30690: LD_ADDR_VAR 0 9
30694: PUSH
30695: LD_INT 40
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30709: LD_VAR 0 6
30713: PPUSH
30714: CALL_OW 264
30718: PUSH
30719: LD_INT 29
30721: PUSH
30722: EMPTY
30723: LIST
30724: IN
30725: IFFALSE 30746
// points := [ 70 , 200 , 400 ] ;
30727: LD_ADDR_VAR 0 9
30731: PUSH
30732: LD_INT 70
30734: PUSH
30735: LD_INT 200
30737: PUSH
30738: LD_INT 400
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30746: LD_VAR 0 6
30750: PPUSH
30751: CALL_OW 264
30755: PUSH
30756: LD_INT 14
30758: PUSH
30759: LD_INT 53
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: IN
30766: IFFALSE 30787
// points := [ 40 , 10 , 20 ] ;
30768: LD_ADDR_VAR 0 9
30772: PUSH
30773: LD_INT 40
30775: PUSH
30776: LD_INT 10
30778: PUSH
30779: LD_INT 20
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30787: LD_VAR 0 6
30791: PPUSH
30792: CALL_OW 264
30796: PUSH
30797: LD_INT 9
30799: PUSH
30800: EMPTY
30801: LIST
30802: IN
30803: IFFALSE 30824
// points := [ 5 , 70 , 20 ] ;
30805: LD_ADDR_VAR 0 9
30809: PUSH
30810: LD_INT 5
30812: PUSH
30813: LD_INT 70
30815: PUSH
30816: LD_INT 20
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30824: LD_VAR 0 6
30828: PPUSH
30829: CALL_OW 264
30833: PUSH
30834: LD_INT 10
30836: PUSH
30837: EMPTY
30838: LIST
30839: IN
30840: IFFALSE 30861
// points := [ 35 , 110 , 70 ] ;
30842: LD_ADDR_VAR 0 9
30846: PUSH
30847: LD_INT 35
30849: PUSH
30850: LD_INT 110
30852: PUSH
30853: LD_INT 70
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30861: LD_VAR 0 6
30865: PPUSH
30866: CALL_OW 265
30870: PUSH
30871: LD_INT 25
30873: EQUAL
30874: IFFALSE 30895
// points := [ 80 , 65 , 100 ] ;
30876: LD_ADDR_VAR 0 9
30880: PUSH
30881: LD_INT 80
30883: PUSH
30884: LD_INT 65
30886: PUSH
30887: LD_INT 100
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30895: LD_VAR 0 6
30899: PPUSH
30900: CALL_OW 263
30904: PUSH
30905: LD_INT 1
30907: EQUAL
30908: IFFALSE 30943
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30910: LD_ADDR_VAR 0 10
30914: PUSH
30915: LD_VAR 0 10
30919: PUSH
30920: LD_VAR 0 6
30924: PPUSH
30925: CALL_OW 311
30929: PPUSH
30930: LD_INT 3
30932: PPUSH
30933: CALL_OW 259
30937: PUSH
30938: LD_INT 4
30940: MUL
30941: MUL
30942: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30943: LD_VAR 0 6
30947: PPUSH
30948: CALL_OW 263
30952: PUSH
30953: LD_INT 2
30955: EQUAL
30956: IFFALSE 31007
// begin j := IsControledBy ( i ) ;
30958: LD_ADDR_VAR 0 7
30962: PUSH
30963: LD_VAR 0 6
30967: PPUSH
30968: CALL_OW 312
30972: ST_TO_ADDR
// if j then
30973: LD_VAR 0 7
30977: IFFALSE 31007
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30979: LD_ADDR_VAR 0 10
30983: PUSH
30984: LD_VAR 0 10
30988: PUSH
30989: LD_VAR 0 7
30993: PPUSH
30994: LD_INT 3
30996: PPUSH
30997: CALL_OW 259
31001: PUSH
31002: LD_INT 3
31004: MUL
31005: MUL
31006: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31007: LD_VAR 0 6
31011: PPUSH
31012: CALL_OW 264
31016: PUSH
31017: LD_INT 5
31019: PUSH
31020: LD_INT 6
31022: PUSH
31023: LD_INT 46
31025: PUSH
31026: LD_INT 44
31028: PUSH
31029: LD_INT 47
31031: PUSH
31032: LD_INT 45
31034: PUSH
31035: LD_INT 28
31037: PUSH
31038: LD_INT 7
31040: PUSH
31041: LD_INT 27
31043: PUSH
31044: LD_INT 29
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: IN
31059: PUSH
31060: LD_VAR 0 1
31064: PPUSH
31065: LD_INT 52
31067: PPUSH
31068: CALL_OW 321
31072: PUSH
31073: LD_INT 2
31075: EQUAL
31076: AND
31077: IFFALSE 31094
// bpoints := bpoints * 1.2 ;
31079: LD_ADDR_VAR 0 10
31083: PUSH
31084: LD_VAR 0 10
31088: PUSH
31089: LD_REAL  1.20000000000000E+0000
31092: MUL
31093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31094: LD_VAR 0 6
31098: PPUSH
31099: CALL_OW 264
31103: PUSH
31104: LD_INT 6
31106: PUSH
31107: LD_INT 46
31109: PUSH
31110: LD_INT 47
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: IN
31118: IFFALSE 31135
// bpoints := bpoints * 1.2 ;
31120: LD_ADDR_VAR 0 10
31124: PUSH
31125: LD_VAR 0 10
31129: PUSH
31130: LD_REAL  1.20000000000000E+0000
31133: MUL
31134: ST_TO_ADDR
// end ; unit_building :
31135: GO 31149
31137: LD_INT 3
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31148
31145: POP
// ; end ;
31146: GO 31149
31148: POP
// for j = 1 to 3 do
31149: LD_ADDR_VAR 0 7
31153: PUSH
31154: DOUBLE
31155: LD_INT 1
31157: DEC
31158: ST_TO_ADDR
31159: LD_INT 3
31161: PUSH
31162: FOR_TO
31163: IFFALSE 31216
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31165: LD_ADDR_VAR 0 5
31169: PUSH
31170: LD_VAR 0 5
31174: PPUSH
31175: LD_VAR 0 7
31179: PPUSH
31180: LD_VAR 0 5
31184: PUSH
31185: LD_VAR 0 7
31189: ARRAY
31190: PUSH
31191: LD_VAR 0 9
31195: PUSH
31196: LD_VAR 0 7
31200: ARRAY
31201: PUSH
31202: LD_VAR 0 10
31206: MUL
31207: PLUS
31208: PPUSH
31209: CALL_OW 1
31213: ST_TO_ADDR
31214: GO 31162
31216: POP
31217: POP
// end ;
31218: GO 29701
31220: POP
31221: POP
// result := Replace ( result , 4 , tmp ) ;
31222: LD_ADDR_VAR 0 5
31226: PUSH
31227: LD_VAR 0 5
31231: PPUSH
31232: LD_INT 4
31234: PPUSH
31235: LD_VAR 0 8
31239: PPUSH
31240: CALL_OW 1
31244: ST_TO_ADDR
// end ;
31245: LD_VAR 0 5
31249: RET
// export function DangerAtRange ( unit , range ) ; begin
31250: LD_INT 0
31252: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31253: LD_ADDR_VAR 0 3
31257: PUSH
31258: LD_VAR 0 1
31262: PPUSH
31263: CALL_OW 255
31267: PPUSH
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 250
31277: PPUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 251
31287: PPUSH
31288: LD_VAR 0 2
31292: PPUSH
31293: CALL 29553 0 4
31297: ST_TO_ADDR
// end ;
31298: LD_VAR 0 3
31302: RET
// export function DangerInArea ( side , area ) ; begin
31303: LD_INT 0
31305: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31306: LD_ADDR_VAR 0 3
31310: PUSH
31311: LD_VAR 0 2
31315: PPUSH
31316: LD_INT 81
31318: PUSH
31319: LD_VAR 0 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PPUSH
31328: CALL_OW 70
31332: ST_TO_ADDR
// end ;
31333: LD_VAR 0 3
31337: RET
// export function IsExtension ( b ) ; begin
31338: LD_INT 0
31340: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31341: LD_ADDR_VAR 0 2
31345: PUSH
31346: LD_VAR 0 1
31350: PUSH
31351: LD_INT 23
31353: PUSH
31354: LD_INT 20
31356: PUSH
31357: LD_INT 22
31359: PUSH
31360: LD_INT 17
31362: PUSH
31363: LD_INT 24
31365: PUSH
31366: LD_INT 21
31368: PUSH
31369: LD_INT 19
31371: PUSH
31372: LD_INT 16
31374: PUSH
31375: LD_INT 25
31377: PUSH
31378: LD_INT 18
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: IN
31393: ST_TO_ADDR
// end ;
31394: LD_VAR 0 2
31398: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31399: LD_INT 0
31401: PPUSH
31402: PPUSH
31403: PPUSH
// result := [ ] ;
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: EMPTY
31410: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31411: LD_ADDR_VAR 0 4
31415: PUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: LD_INT 21
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 70
31435: ST_TO_ADDR
// if not tmp then
31436: LD_VAR 0 4
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31503
// for i in tmp do
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_VAR 0 4
31454: PUSH
31455: FOR_IN
31456: IFFALSE 31491
// if GetBase ( i ) <> base then
31458: LD_VAR 0 5
31462: PPUSH
31463: CALL_OW 274
31467: PUSH
31468: LD_VAR 0 1
31472: NONEQUAL
31473: IFFALSE 31489
// ComLinkToBase ( base , i ) ;
31475: LD_VAR 0 1
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: CALL_OW 169
31489: GO 31455
31491: POP
31492: POP
// result := tmp ;
31493: LD_ADDR_VAR 0 3
31497: PUSH
31498: LD_VAR 0 4
31502: ST_TO_ADDR
// end ;
31503: LD_VAR 0 3
31507: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31508: LD_INT 0
31510: PPUSH
31511: PPUSH
// if BuildingStatus ( b ) = bs_build then
31512: LD_VAR 0 2
31516: PPUSH
31517: CALL_OW 461
31521: PUSH
31522: LD_INT 1
31524: EQUAL
31525: IFFALSE 31585
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31527: LD_VAR 0 1
31531: PPUSH
31532: LD_STRING h
31534: PUSH
31535: LD_VAR 0 2
31539: PPUSH
31540: CALL_OW 250
31544: PUSH
31545: LD_VAR 0 2
31549: PPUSH
31550: CALL_OW 251
31554: PUSH
31555: LD_VAR 0 2
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: PPUSH
31581: CALL_OW 446
// end ;
31585: LD_VAR 0 3
31589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
31594: PPUSH
31595: PPUSH
31596: PPUSH
31597: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31598: LD_VAR 0 1
31602: NOT
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 263
31613: PUSH
31614: LD_INT 2
31616: EQUAL
31617: NOT
31618: OR
31619: IFFALSE 31623
// exit ;
31621: GO 31939
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31623: LD_ADDR_VAR 0 6
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 255
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 30
31650: PUSH
31651: LD_INT 36
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 34
31660: PUSH
31661: LD_INT 31
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PPUSH
31677: CALL_OW 69
31681: ST_TO_ADDR
// if not tmp then
31682: LD_VAR 0 6
31686: NOT
31687: IFFALSE 31691
// exit ;
31689: GO 31939
// result := [ ] ;
31691: LD_ADDR_VAR 0 2
31695: PUSH
31696: EMPTY
31697: ST_TO_ADDR
// for i in tmp do
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: LD_VAR 0 6
31707: PUSH
31708: FOR_IN
31709: IFFALSE 31780
// begin t := UnitsInside ( i ) ;
31711: LD_ADDR_VAR 0 4
31715: PUSH
31716: LD_VAR 0 3
31720: PPUSH
31721: CALL_OW 313
31725: ST_TO_ADDR
// if t then
31726: LD_VAR 0 4
31730: IFFALSE 31778
// for j in t do
31732: LD_ADDR_VAR 0 7
31736: PUSH
31737: LD_VAR 0 4
31741: PUSH
31742: FOR_IN
31743: IFFALSE 31776
// result := Insert ( result , result + 1 , j ) ;
31745: LD_ADDR_VAR 0 2
31749: PUSH
31750: LD_VAR 0 2
31754: PPUSH
31755: LD_VAR 0 2
31759: PUSH
31760: LD_INT 1
31762: PLUS
31763: PPUSH
31764: LD_VAR 0 7
31768: PPUSH
31769: CALL_OW 2
31773: ST_TO_ADDR
31774: GO 31742
31776: POP
31777: POP
// end ;
31778: GO 31708
31780: POP
31781: POP
// if not result then
31782: LD_VAR 0 2
31786: NOT
31787: IFFALSE 31791
// exit ;
31789: GO 31939
// mech := result [ 1 ] ;
31791: LD_ADDR_VAR 0 5
31795: PUSH
31796: LD_VAR 0 2
31800: PUSH
31801: LD_INT 1
31803: ARRAY
31804: ST_TO_ADDR
// if result > 1 then
31805: LD_VAR 0 2
31809: PUSH
31810: LD_INT 1
31812: GREATER
31813: IFFALSE 31925
// for i = 2 to result do
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: DOUBLE
31821: LD_INT 2
31823: DEC
31824: ST_TO_ADDR
31825: LD_VAR 0 2
31829: PUSH
31830: FOR_TO
31831: IFFALSE 31923
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31833: LD_ADDR_VAR 0 4
31837: PUSH
31838: LD_VAR 0 2
31842: PUSH
31843: LD_VAR 0 3
31847: ARRAY
31848: PPUSH
31849: LD_INT 3
31851: PPUSH
31852: CALL_OW 259
31856: PUSH
31857: LD_VAR 0 2
31861: PUSH
31862: LD_VAR 0 3
31866: ARRAY
31867: PPUSH
31868: CALL_OW 432
31872: MINUS
31873: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31874: LD_VAR 0 4
31878: PUSH
31879: LD_VAR 0 5
31883: PPUSH
31884: LD_INT 3
31886: PPUSH
31887: CALL_OW 259
31891: PUSH
31892: LD_VAR 0 5
31896: PPUSH
31897: CALL_OW 432
31901: MINUS
31902: GREATEREQUAL
31903: IFFALSE 31921
// mech := result [ i ] ;
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_VAR 0 2
31914: PUSH
31915: LD_VAR 0 3
31919: ARRAY
31920: ST_TO_ADDR
// end ;
31921: GO 31830
31923: POP
31924: POP
// ComLinkTo ( vehicle , mech ) ;
31925: LD_VAR 0 1
31929: PPUSH
31930: LD_VAR 0 5
31934: PPUSH
31935: CALL_OW 135
// end ;
31939: LD_VAR 0 2
31943: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31944: LD_INT 0
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
31951: PPUSH
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
// result := [ ] ;
31959: LD_ADDR_VAR 0 7
31963: PUSH
31964: EMPTY
31965: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31966: LD_VAR 0 1
31970: PPUSH
31971: CALL_OW 266
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: IN
31986: NOT
31987: IFFALSE 31991
// exit ;
31989: GO 33622
// if name then
31991: LD_VAR 0 3
31995: IFFALSE 32011
// SetBName ( base_dep , name ) ;
31997: LD_VAR 0 1
32001: PPUSH
32002: LD_VAR 0 3
32006: PPUSH
32007: CALL_OW 500
// base := GetBase ( base_dep ) ;
32011: LD_ADDR_VAR 0 15
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 274
32025: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32026: LD_ADDR_VAR 0 16
32030: PUSH
32031: LD_VAR 0 1
32035: PPUSH
32036: CALL_OW 255
32040: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32041: LD_ADDR_VAR 0 17
32045: PUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: CALL_OW 248
32055: ST_TO_ADDR
// if sources then
32056: LD_VAR 0 5
32060: IFFALSE 32107
// for i = 1 to 3 do
32062: LD_ADDR_VAR 0 8
32066: PUSH
32067: DOUBLE
32068: LD_INT 1
32070: DEC
32071: ST_TO_ADDR
32072: LD_INT 3
32074: PUSH
32075: FOR_TO
32076: IFFALSE 32105
// AddResourceType ( base , i , sources [ i ] ) ;
32078: LD_VAR 0 15
32082: PPUSH
32083: LD_VAR 0 8
32087: PPUSH
32088: LD_VAR 0 5
32092: PUSH
32093: LD_VAR 0 8
32097: ARRAY
32098: PPUSH
32099: CALL_OW 276
32103: GO 32075
32105: POP
32106: POP
// buildings := GetBaseBuildings ( base , area ) ;
32107: LD_ADDR_VAR 0 18
32111: PUSH
32112: LD_VAR 0 15
32116: PPUSH
32117: LD_VAR 0 2
32121: PPUSH
32122: CALL 31399 0 2
32126: ST_TO_ADDR
// InitHc ;
32127: CALL_OW 19
// InitUc ;
32131: CALL_OW 18
// uc_side := side ;
32135: LD_ADDR_OWVAR 20
32139: PUSH
32140: LD_VAR 0 16
32144: ST_TO_ADDR
// uc_nation := nation ;
32145: LD_ADDR_OWVAR 21
32149: PUSH
32150: LD_VAR 0 17
32154: ST_TO_ADDR
// if buildings then
32155: LD_VAR 0 18
32159: IFFALSE 33481
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32161: LD_ADDR_VAR 0 19
32165: PUSH
32166: LD_VAR 0 18
32170: PPUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 30
32176: PUSH
32177: LD_INT 29
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 30
32186: PUSH
32187: LD_INT 30
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: PPUSH
32199: CALL_OW 72
32203: ST_TO_ADDR
// if tmp then
32204: LD_VAR 0 19
32208: IFFALSE 32256
// for i in tmp do
32210: LD_ADDR_VAR 0 8
32214: PUSH
32215: LD_VAR 0 19
32219: PUSH
32220: FOR_IN
32221: IFFALSE 32254
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32223: LD_VAR 0 8
32227: PPUSH
32228: CALL_OW 250
32232: PPUSH
32233: LD_VAR 0 8
32237: PPUSH
32238: CALL_OW 251
32242: PPUSH
32243: LD_VAR 0 16
32247: PPUSH
32248: CALL_OW 441
32252: GO 32220
32254: POP
32255: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32256: LD_VAR 0 18
32260: PPUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 30
32266: PUSH
32267: LD_INT 32
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 30
32276: PUSH
32277: LD_INT 33
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: PPUSH
32289: CALL_OW 72
32293: IFFALSE 32381
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32295: LD_ADDR_VAR 0 8
32299: PUSH
32300: LD_VAR 0 18
32304: PPUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 30
32310: PUSH
32311: LD_INT 32
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 30
32320: PUSH
32321: LD_INT 33
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: PPUSH
32333: CALL_OW 72
32337: PUSH
32338: FOR_IN
32339: IFFALSE 32379
// begin if not GetBWeapon ( i ) then
32341: LD_VAR 0 8
32345: PPUSH
32346: CALL_OW 269
32350: NOT
32351: IFFALSE 32377
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32353: LD_VAR 0 8
32357: PPUSH
32358: LD_VAR 0 8
32362: PPUSH
32363: LD_VAR 0 2
32367: PPUSH
32368: CALL 33627 0 2
32372: PPUSH
32373: CALL_OW 431
// end ;
32377: GO 32338
32379: POP
32380: POP
// end ; for i = 1 to personel do
32381: LD_ADDR_VAR 0 8
32385: PUSH
32386: DOUBLE
32387: LD_INT 1
32389: DEC
32390: ST_TO_ADDR
32391: LD_VAR 0 6
32395: PUSH
32396: FOR_TO
32397: IFFALSE 33461
// begin if i > 4 then
32399: LD_VAR 0 8
32403: PUSH
32404: LD_INT 4
32406: GREATER
32407: IFFALSE 32411
// break ;
32409: GO 33461
// case i of 1 :
32411: LD_VAR 0 8
32415: PUSH
32416: LD_INT 1
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32504
32424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32425: LD_ADDR_VAR 0 12
32429: PUSH
32430: LD_VAR 0 18
32434: PPUSH
32435: LD_INT 22
32437: PUSH
32438: LD_VAR 0 16
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 58
32449: PUSH
32450: EMPTY
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 30
32458: PUSH
32459: LD_INT 32
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 30
32468: PUSH
32469: LD_INT 4
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 30
32478: PUSH
32479: LD_INT 5
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: PPUSH
32497: CALL_OW 72
32501: ST_TO_ADDR
32502: GO 32726
32504: LD_INT 2
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32574
32512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32513: LD_ADDR_VAR 0 12
32517: PUSH
32518: LD_VAR 0 18
32522: PPUSH
32523: LD_INT 22
32525: PUSH
32526: LD_VAR 0 16
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 30
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 30
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PPUSH
32567: CALL_OW 72
32571: ST_TO_ADDR
32572: GO 32726
32574: LD_INT 3
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32644
32582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32583: LD_ADDR_VAR 0 12
32587: PUSH
32588: LD_VAR 0 18
32592: PPUSH
32593: LD_INT 22
32595: PUSH
32596: LD_VAR 0 16
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 30
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 30
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PPUSH
32637: CALL_OW 72
32641: ST_TO_ADDR
32642: GO 32726
32644: LD_INT 4
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32725
32652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32653: LD_ADDR_VAR 0 12
32657: PUSH
32658: LD_VAR 0 18
32662: PPUSH
32663: LD_INT 22
32665: PUSH
32666: LD_VAR 0 16
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 30
32680: PUSH
32681: LD_INT 6
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 30
32690: PUSH
32691: LD_INT 7
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 30
32700: PUSH
32701: LD_INT 8
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PPUSH
32718: CALL_OW 72
32722: ST_TO_ADDR
32723: GO 32726
32725: POP
// if i = 1 then
32726: LD_VAR 0 8
32730: PUSH
32731: LD_INT 1
32733: EQUAL
32734: IFFALSE 32845
// begin tmp := [ ] ;
32736: LD_ADDR_VAR 0 19
32740: PUSH
32741: EMPTY
32742: ST_TO_ADDR
// for j in f do
32743: LD_ADDR_VAR 0 9
32747: PUSH
32748: LD_VAR 0 12
32752: PUSH
32753: FOR_IN
32754: IFFALSE 32827
// if GetBType ( j ) = b_bunker then
32756: LD_VAR 0 9
32760: PPUSH
32761: CALL_OW 266
32765: PUSH
32766: LD_INT 32
32768: EQUAL
32769: IFFALSE 32796
// tmp := Insert ( tmp , 1 , j ) else
32771: LD_ADDR_VAR 0 19
32775: PUSH
32776: LD_VAR 0 19
32780: PPUSH
32781: LD_INT 1
32783: PPUSH
32784: LD_VAR 0 9
32788: PPUSH
32789: CALL_OW 2
32793: ST_TO_ADDR
32794: GO 32825
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32796: LD_ADDR_VAR 0 19
32800: PUSH
32801: LD_VAR 0 19
32805: PPUSH
32806: LD_VAR 0 19
32810: PUSH
32811: LD_INT 1
32813: PLUS
32814: PPUSH
32815: LD_VAR 0 9
32819: PPUSH
32820: CALL_OW 2
32824: ST_TO_ADDR
32825: GO 32753
32827: POP
32828: POP
// if tmp then
32829: LD_VAR 0 19
32833: IFFALSE 32845
// f := tmp ;
32835: LD_ADDR_VAR 0 12
32839: PUSH
32840: LD_VAR 0 19
32844: ST_TO_ADDR
// end ; x := personel [ i ] ;
32845: LD_ADDR_VAR 0 13
32849: PUSH
32850: LD_VAR 0 6
32854: PUSH
32855: LD_VAR 0 8
32859: ARRAY
32860: ST_TO_ADDR
// if x = - 1 then
32861: LD_VAR 0 13
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: EQUAL
32870: IFFALSE 33079
// begin for j in f do
32872: LD_ADDR_VAR 0 9
32876: PUSH
32877: LD_VAR 0 12
32881: PUSH
32882: FOR_IN
32883: IFFALSE 33075
// repeat InitHc ;
32885: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32889: LD_VAR 0 9
32893: PPUSH
32894: CALL_OW 266
32898: PUSH
32899: LD_INT 5
32901: EQUAL
32902: IFFALSE 32972
// begin if UnitsInside ( j ) < 3 then
32904: LD_VAR 0 9
32908: PPUSH
32909: CALL_OW 313
32913: PUSH
32914: LD_INT 3
32916: LESS
32917: IFFALSE 32953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32919: LD_INT 0
32921: PPUSH
32922: LD_INT 5
32924: PUSH
32925: LD_INT 8
32927: PUSH
32928: LD_INT 9
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: PUSH
32936: LD_VAR 0 17
32940: ARRAY
32941: PPUSH
32942: LD_VAR 0 4
32946: PPUSH
32947: CALL_OW 380
32951: GO 32970
// PrepareHuman ( false , i , skill ) ;
32953: LD_INT 0
32955: PPUSH
32956: LD_VAR 0 8
32960: PPUSH
32961: LD_VAR 0 4
32965: PPUSH
32966: CALL_OW 380
// end else
32970: GO 32989
// PrepareHuman ( false , i , skill ) ;
32972: LD_INT 0
32974: PPUSH
32975: LD_VAR 0 8
32979: PPUSH
32980: LD_VAR 0 4
32984: PPUSH
32985: CALL_OW 380
// un := CreateHuman ;
32989: LD_ADDR_VAR 0 14
32993: PUSH
32994: CALL_OW 44
32998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32999: LD_ADDR_VAR 0 7
33003: PUSH
33004: LD_VAR 0 7
33008: PPUSH
33009: LD_INT 1
33011: PPUSH
33012: LD_VAR 0 14
33016: PPUSH
33017: CALL_OW 2
33021: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33022: LD_VAR 0 14
33026: PPUSH
33027: LD_VAR 0 9
33031: PPUSH
33032: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33036: LD_VAR 0 9
33040: PPUSH
33041: CALL_OW 313
33045: PUSH
33046: LD_INT 6
33048: EQUAL
33049: PUSH
33050: LD_VAR 0 9
33054: PPUSH
33055: CALL_OW 266
33059: PUSH
33060: LD_INT 32
33062: PUSH
33063: LD_INT 31
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: IN
33070: OR
33071: IFFALSE 32885
33073: GO 32882
33075: POP
33076: POP
// end else
33077: GO 33459
// for j = 1 to x do
33079: LD_ADDR_VAR 0 9
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_VAR 0 13
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33457
// begin InitHc ;
33097: CALL_OW 19
// if not f then
33101: LD_VAR 0 12
33105: NOT
33106: IFFALSE 33195
// begin PrepareHuman ( false , i , skill ) ;
33108: LD_INT 0
33110: PPUSH
33111: LD_VAR 0 8
33115: PPUSH
33116: LD_VAR 0 4
33120: PPUSH
33121: CALL_OW 380
// un := CreateHuman ;
33125: LD_ADDR_VAR 0 14
33129: PUSH
33130: CALL_OW 44
33134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33135: LD_ADDR_VAR 0 7
33139: PUSH
33140: LD_VAR 0 7
33144: PPUSH
33145: LD_INT 1
33147: PPUSH
33148: LD_VAR 0 14
33152: PPUSH
33153: CALL_OW 2
33157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33158: LD_VAR 0 14
33162: PPUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 250
33172: PPUSH
33173: LD_VAR 0 1
33177: PPUSH
33178: CALL_OW 251
33182: PPUSH
33183: LD_INT 10
33185: PPUSH
33186: LD_INT 0
33188: PPUSH
33189: CALL_OW 50
// continue ;
33193: GO 33094
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33195: LD_VAR 0 12
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PPUSH
33204: CALL_OW 313
33208: PUSH
33209: LD_VAR 0 12
33213: PUSH
33214: LD_INT 1
33216: ARRAY
33217: PPUSH
33218: CALL_OW 266
33222: PUSH
33223: LD_INT 32
33225: PUSH
33226: LD_INT 31
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: IN
33233: AND
33234: PUSH
33235: LD_VAR 0 12
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: PPUSH
33244: CALL_OW 313
33248: PUSH
33249: LD_INT 6
33251: EQUAL
33252: OR
33253: IFFALSE 33273
// f := Delete ( f , 1 ) ;
33255: LD_ADDR_VAR 0 12
33259: PUSH
33260: LD_VAR 0 12
33264: PPUSH
33265: LD_INT 1
33267: PPUSH
33268: CALL_OW 3
33272: ST_TO_ADDR
// if not f then
33273: LD_VAR 0 12
33277: NOT
33278: IFFALSE 33296
// begin x := x + 2 ;
33280: LD_ADDR_VAR 0 13
33284: PUSH
33285: LD_VAR 0 13
33289: PUSH
33290: LD_INT 2
33292: PLUS
33293: ST_TO_ADDR
// continue ;
33294: GO 33094
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33296: LD_VAR 0 12
33300: PUSH
33301: LD_INT 1
33303: ARRAY
33304: PPUSH
33305: CALL_OW 266
33309: PUSH
33310: LD_INT 5
33312: EQUAL
33313: IFFALSE 33387
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33315: LD_VAR 0 12
33319: PUSH
33320: LD_INT 1
33322: ARRAY
33323: PPUSH
33324: CALL_OW 313
33328: PUSH
33329: LD_INT 3
33331: LESS
33332: IFFALSE 33368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33334: LD_INT 0
33336: PPUSH
33337: LD_INT 5
33339: PUSH
33340: LD_INT 8
33342: PUSH
33343: LD_INT 9
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: LD_VAR 0 17
33355: ARRAY
33356: PPUSH
33357: LD_VAR 0 4
33361: PPUSH
33362: CALL_OW 380
33366: GO 33385
// PrepareHuman ( false , i , skill ) ;
33368: LD_INT 0
33370: PPUSH
33371: LD_VAR 0 8
33375: PPUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 380
// end else
33385: GO 33404
// PrepareHuman ( false , i , skill ) ;
33387: LD_INT 0
33389: PPUSH
33390: LD_VAR 0 8
33394: PPUSH
33395: LD_VAR 0 4
33399: PPUSH
33400: CALL_OW 380
// un := CreateHuman ;
33404: LD_ADDR_VAR 0 14
33408: PUSH
33409: CALL_OW 44
33413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33414: LD_ADDR_VAR 0 7
33418: PUSH
33419: LD_VAR 0 7
33423: PPUSH
33424: LD_INT 1
33426: PPUSH
33427: LD_VAR 0 14
33431: PPUSH
33432: CALL_OW 2
33436: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33437: LD_VAR 0 14
33441: PPUSH
33442: LD_VAR 0 12
33446: PUSH
33447: LD_INT 1
33449: ARRAY
33450: PPUSH
33451: CALL_OW 52
// end ;
33455: GO 33094
33457: POP
33458: POP
// end ;
33459: GO 32396
33461: POP
33462: POP
// result := result ^ buildings ;
33463: LD_ADDR_VAR 0 7
33467: PUSH
33468: LD_VAR 0 7
33472: PUSH
33473: LD_VAR 0 18
33477: ADD
33478: ST_TO_ADDR
// end else
33479: GO 33622
// begin for i = 1 to personel do
33481: LD_ADDR_VAR 0 8
33485: PUSH
33486: DOUBLE
33487: LD_INT 1
33489: DEC
33490: ST_TO_ADDR
33491: LD_VAR 0 6
33495: PUSH
33496: FOR_TO
33497: IFFALSE 33620
// begin if i > 4 then
33499: LD_VAR 0 8
33503: PUSH
33504: LD_INT 4
33506: GREATER
33507: IFFALSE 33511
// break ;
33509: GO 33620
// x := personel [ i ] ;
33511: LD_ADDR_VAR 0 13
33515: PUSH
33516: LD_VAR 0 6
33520: PUSH
33521: LD_VAR 0 8
33525: ARRAY
33526: ST_TO_ADDR
// if x = - 1 then
33527: LD_VAR 0 13
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: EQUAL
33536: IFFALSE 33540
// continue ;
33538: GO 33496
// PrepareHuman ( false , i , skill ) ;
33540: LD_INT 0
33542: PPUSH
33543: LD_VAR 0 8
33547: PPUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: CALL_OW 380
// un := CreateHuman ;
33557: LD_ADDR_VAR 0 14
33561: PUSH
33562: CALL_OW 44
33566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33567: LD_VAR 0 14
33571: PPUSH
33572: LD_VAR 0 1
33576: PPUSH
33577: CALL_OW 250
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 251
33591: PPUSH
33592: LD_INT 10
33594: PPUSH
33595: LD_INT 0
33597: PPUSH
33598: CALL_OW 50
// result := result ^ un ;
33602: LD_ADDR_VAR 0 7
33606: PUSH
33607: LD_VAR 0 7
33611: PUSH
33612: LD_VAR 0 14
33616: ADD
33617: ST_TO_ADDR
// end ;
33618: GO 33496
33620: POP
33621: POP
// end ; end ;
33622: LD_VAR 0 7
33626: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
// result := false ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 0
33652: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33653: LD_VAR 0 1
33657: NOT
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 266
33668: PUSH
33669: LD_INT 32
33671: PUSH
33672: LD_INT 33
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: IN
33679: NOT
33680: OR
33681: IFFALSE 33685
// exit ;
33683: GO 34821
// nat := GetNation ( tower ) ;
33685: LD_ADDR_VAR 0 12
33689: PUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 248
33699: ST_TO_ADDR
// side := GetSide ( tower ) ;
33700: LD_ADDR_VAR 0 16
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 255
33714: ST_TO_ADDR
// x := GetX ( tower ) ;
33715: LD_ADDR_VAR 0 10
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 250
33729: ST_TO_ADDR
// y := GetY ( tower ) ;
33730: LD_ADDR_VAR 0 11
33734: PUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 251
33744: ST_TO_ADDR
// if not x or not y then
33745: LD_VAR 0 10
33749: NOT
33750: PUSH
33751: LD_VAR 0 11
33755: NOT
33756: OR
33757: IFFALSE 33761
// exit ;
33759: GO 34821
// weapon := 0 ;
33761: LD_ADDR_VAR 0 18
33765: PUSH
33766: LD_INT 0
33768: ST_TO_ADDR
// fac_list := [ ] ;
33769: LD_ADDR_VAR 0 17
33773: PUSH
33774: EMPTY
33775: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
33776: LD_ADDR_VAR 0 6
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 274
33790: PPUSH
33791: LD_VAR 0 2
33795: PPUSH
33796: CALL 31399 0 2
33800: PPUSH
33801: LD_INT 30
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PPUSH
33811: CALL_OW 72
33815: ST_TO_ADDR
// if not factories then
33816: LD_VAR 0 6
33820: NOT
33821: IFFALSE 33825
// exit ;
33823: GO 34821
// for i in factories do
33825: LD_ADDR_VAR 0 8
33829: PUSH
33830: LD_VAR 0 6
33834: PUSH
33835: FOR_IN
33836: IFFALSE 33861
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33838: LD_ADDR_VAR 0 17
33842: PUSH
33843: LD_VAR 0 17
33847: PUSH
33848: LD_VAR 0 8
33852: PPUSH
33853: CALL_OW 478
33857: UNION
33858: ST_TO_ADDR
33859: GO 33835
33861: POP
33862: POP
// if not fac_list then
33863: LD_VAR 0 17
33867: NOT
33868: IFFALSE 33872
// exit ;
33870: GO 34821
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33872: LD_ADDR_VAR 0 5
33876: PUSH
33877: LD_INT 4
33879: PUSH
33880: LD_INT 5
33882: PUSH
33883: LD_INT 9
33885: PUSH
33886: LD_INT 10
33888: PUSH
33889: LD_INT 6
33891: PUSH
33892: LD_INT 7
33894: PUSH
33895: LD_INT 11
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 27
33909: PUSH
33910: LD_INT 28
33912: PUSH
33913: LD_INT 26
33915: PUSH
33916: LD_INT 30
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 43
33927: PUSH
33928: LD_INT 44
33930: PUSH
33931: LD_INT 46
33933: PUSH
33934: LD_INT 45
33936: PUSH
33937: LD_INT 47
33939: PUSH
33940: LD_INT 49
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: PUSH
33956: LD_VAR 0 12
33960: ARRAY
33961: ST_TO_ADDR
// for i in list do
33962: LD_ADDR_VAR 0 8
33966: PUSH
33967: LD_VAR 0 5
33971: PUSH
33972: FOR_IN
33973: IFFALSE 34006
// if not i in fac_list then
33975: LD_VAR 0 8
33979: PUSH
33980: LD_VAR 0 17
33984: IN
33985: NOT
33986: IFFALSE 34004
// list := list diff i ;
33988: LD_ADDR_VAR 0 5
33992: PUSH
33993: LD_VAR 0 5
33997: PUSH
33998: LD_VAR 0 8
34002: DIFF
34003: ST_TO_ADDR
34004: GO 33972
34006: POP
34007: POP
// if not list then
34008: LD_VAR 0 5
34012: NOT
34013: IFFALSE 34017
// exit ;
34015: GO 34821
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34017: LD_VAR 0 12
34021: PUSH
34022: LD_INT 3
34024: EQUAL
34025: PUSH
34026: LD_INT 49
34028: PUSH
34029: LD_VAR 0 5
34033: IN
34034: AND
34035: PUSH
34036: LD_INT 31
34038: PPUSH
34039: LD_VAR 0 16
34043: PPUSH
34044: CALL_OW 321
34048: PUSH
34049: LD_INT 2
34051: EQUAL
34052: AND
34053: IFFALSE 34113
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34055: LD_INT 22
34057: PUSH
34058: LD_VAR 0 16
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 35
34069: PUSH
34070: LD_INT 49
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 91
34079: PUSH
34080: LD_VAR 0 1
34084: PUSH
34085: LD_INT 10
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: PPUSH
34098: CALL_OW 69
34102: NOT
34103: IFFALSE 34113
// weapon := ru_time_lapser ;
34105: LD_ADDR_VAR 0 18
34109: PUSH
34110: LD_INT 49
34112: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34113: LD_VAR 0 12
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: IN
34128: PUSH
34129: LD_INT 11
34131: PUSH
34132: LD_VAR 0 5
34136: IN
34137: PUSH
34138: LD_INT 30
34140: PUSH
34141: LD_VAR 0 5
34145: IN
34146: OR
34147: AND
34148: PUSH
34149: LD_INT 6
34151: PPUSH
34152: LD_VAR 0 16
34156: PPUSH
34157: CALL_OW 321
34161: PUSH
34162: LD_INT 2
34164: EQUAL
34165: AND
34166: IFFALSE 34331
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34168: LD_INT 22
34170: PUSH
34171: LD_VAR 0 16
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: LD_INT 35
34185: PUSH
34186: LD_INT 11
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 35
34195: PUSH
34196: LD_INT 30
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 91
34210: PUSH
34211: LD_VAR 0 1
34215: PUSH
34216: LD_INT 18
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PPUSH
34229: CALL_OW 69
34233: NOT
34234: PUSH
34235: LD_INT 22
34237: PUSH
34238: LD_VAR 0 16
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 30
34252: PUSH
34253: LD_INT 32
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 30
34262: PUSH
34263: LD_INT 33
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 91
34277: PUSH
34278: LD_VAR 0 1
34282: PUSH
34283: LD_INT 12
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: PPUSH
34299: CALL_OW 69
34303: PUSH
34304: LD_INT 2
34306: GREATER
34307: AND
34308: IFFALSE 34331
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34310: LD_ADDR_VAR 0 18
34314: PUSH
34315: LD_INT 11
34317: PUSH
34318: LD_INT 30
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_VAR 0 12
34329: ARRAY
34330: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34331: LD_VAR 0 18
34335: NOT
34336: PUSH
34337: LD_INT 40
34339: PPUSH
34340: LD_VAR 0 16
34344: PPUSH
34345: CALL_OW 321
34349: PUSH
34350: LD_INT 2
34352: EQUAL
34353: AND
34354: PUSH
34355: LD_INT 7
34357: PUSH
34358: LD_VAR 0 5
34362: IN
34363: PUSH
34364: LD_INT 28
34366: PUSH
34367: LD_VAR 0 5
34371: IN
34372: OR
34373: PUSH
34374: LD_INT 45
34376: PUSH
34377: LD_VAR 0 5
34381: IN
34382: OR
34383: AND
34384: IFFALSE 34638
// begin hex := GetHexInfo ( x , y ) ;
34386: LD_ADDR_VAR 0 4
34390: PUSH
34391: LD_VAR 0 10
34395: PPUSH
34396: LD_VAR 0 11
34400: PPUSH
34401: CALL_OW 546
34405: ST_TO_ADDR
// if hex [ 1 ] then
34406: LD_VAR 0 4
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: IFFALSE 34418
// exit ;
34416: GO 34821
// height := hex [ 2 ] ;
34418: LD_ADDR_VAR 0 15
34422: PUSH
34423: LD_VAR 0 4
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34432: LD_ADDR_VAR 0 14
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: LD_INT 5
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
// for i in tmp do
34455: LD_ADDR_VAR 0 8
34459: PUSH
34460: LD_VAR 0 14
34464: PUSH
34465: FOR_IN
34466: IFFALSE 34636
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34468: LD_ADDR_VAR 0 9
34472: PUSH
34473: LD_VAR 0 10
34477: PPUSH
34478: LD_VAR 0 8
34482: PPUSH
34483: LD_INT 5
34485: PPUSH
34486: CALL_OW 272
34490: PUSH
34491: LD_VAR 0 11
34495: PPUSH
34496: LD_VAR 0 8
34500: PPUSH
34501: LD_INT 5
34503: PPUSH
34504: CALL_OW 273
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34513: LD_VAR 0 9
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PPUSH
34522: LD_VAR 0 9
34526: PUSH
34527: LD_INT 2
34529: ARRAY
34530: PPUSH
34531: CALL_OW 488
34535: IFFALSE 34634
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34537: LD_ADDR_VAR 0 4
34541: PUSH
34542: LD_VAR 0 9
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 9
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: PPUSH
34560: CALL_OW 546
34564: ST_TO_ADDR
// if hex [ 1 ] then
34565: LD_VAR 0 4
34569: PUSH
34570: LD_INT 1
34572: ARRAY
34573: IFFALSE 34577
// continue ;
34575: GO 34465
// h := hex [ 2 ] ;
34577: LD_ADDR_VAR 0 13
34581: PUSH
34582: LD_VAR 0 4
34586: PUSH
34587: LD_INT 2
34589: ARRAY
34590: ST_TO_ADDR
// if h + 7 < height then
34591: LD_VAR 0 13
34595: PUSH
34596: LD_INT 7
34598: PLUS
34599: PUSH
34600: LD_VAR 0 15
34604: LESS
34605: IFFALSE 34634
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34607: LD_ADDR_VAR 0 18
34611: PUSH
34612: LD_INT 7
34614: PUSH
34615: LD_INT 28
34617: PUSH
34618: LD_INT 45
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: PUSH
34626: LD_VAR 0 12
34630: ARRAY
34631: ST_TO_ADDR
// break ;
34632: GO 34636
// end ; end ; end ;
34634: GO 34465
34636: POP
34637: POP
// end ; if not weapon then
34638: LD_VAR 0 18
34642: NOT
34643: IFFALSE 34703
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34645: LD_ADDR_VAR 0 5
34649: PUSH
34650: LD_VAR 0 5
34654: PUSH
34655: LD_INT 11
34657: PUSH
34658: LD_INT 30
34660: PUSH
34661: LD_INT 49
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: LIST
34668: DIFF
34669: ST_TO_ADDR
// if not list then
34670: LD_VAR 0 5
34674: NOT
34675: IFFALSE 34679
// exit ;
34677: GO 34821
// weapon := list [ rand ( 1 , list ) ] ;
34679: LD_ADDR_VAR 0 18
34683: PUSH
34684: LD_VAR 0 5
34688: PUSH
34689: LD_INT 1
34691: PPUSH
34692: LD_VAR 0 5
34696: PPUSH
34697: CALL_OW 12
34701: ARRAY
34702: ST_TO_ADDR
// end ; if weapon then
34703: LD_VAR 0 18
34707: IFFALSE 34821
// begin tmp := CostOfWeapon ( weapon ) ;
34709: LD_ADDR_VAR 0 14
34713: PUSH
34714: LD_VAR 0 18
34718: PPUSH
34719: CALL_OW 451
34723: ST_TO_ADDR
// j := GetBase ( tower ) ;
34724: LD_ADDR_VAR 0 9
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 274
34738: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34739: LD_VAR 0 9
34743: PPUSH
34744: LD_INT 1
34746: PPUSH
34747: CALL_OW 275
34751: PUSH
34752: LD_VAR 0 14
34756: PUSH
34757: LD_INT 1
34759: ARRAY
34760: GREATEREQUAL
34761: PUSH
34762: LD_VAR 0 9
34766: PPUSH
34767: LD_INT 2
34769: PPUSH
34770: CALL_OW 275
34774: PUSH
34775: LD_VAR 0 14
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: GREATEREQUAL
34784: AND
34785: PUSH
34786: LD_VAR 0 9
34790: PPUSH
34791: LD_INT 3
34793: PPUSH
34794: CALL_OW 275
34798: PUSH
34799: LD_VAR 0 14
34803: PUSH
34804: LD_INT 3
34806: ARRAY
34807: GREATEREQUAL
34808: AND
34809: IFFALSE 34821
// result := weapon ;
34811: LD_ADDR_VAR 0 3
34815: PUSH
34816: LD_VAR 0 18
34820: ST_TO_ADDR
// end ; end ;
34821: LD_VAR 0 3
34825: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34826: LD_INT 0
34828: PPUSH
34829: PPUSH
// result := true ;
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 1
34837: ST_TO_ADDR
// if array1 = array2 then
34838: LD_VAR 0 1
34842: PUSH
34843: LD_VAR 0 2
34847: EQUAL
34848: IFFALSE 34908
// begin for i = 1 to array1 do
34850: LD_ADDR_VAR 0 4
34854: PUSH
34855: DOUBLE
34856: LD_INT 1
34858: DEC
34859: ST_TO_ADDR
34860: LD_VAR 0 1
34864: PUSH
34865: FOR_TO
34866: IFFALSE 34904
// if array1 [ i ] <> array2 [ i ] then
34868: LD_VAR 0 1
34872: PUSH
34873: LD_VAR 0 4
34877: ARRAY
34878: PUSH
34879: LD_VAR 0 2
34883: PUSH
34884: LD_VAR 0 4
34888: ARRAY
34889: NONEQUAL
34890: IFFALSE 34902
// begin result := false ;
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_INT 0
34899: ST_TO_ADDR
// break ;
34900: GO 34904
// end ;
34902: GO 34865
34904: POP
34905: POP
// end else
34906: GO 34916
// result := false ;
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 0
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 3
34920: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
// pom := GetBase ( fac ) ;
34926: LD_ADDR_VAR 0 5
34930: PUSH
34931: LD_VAR 0 1
34935: PPUSH
34936: CALL_OW 274
34940: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34941: LD_ADDR_VAR 0 4
34945: PUSH
34946: LD_VAR 0 2
34950: PUSH
34951: LD_INT 1
34953: ARRAY
34954: PPUSH
34955: LD_VAR 0 2
34959: PUSH
34960: LD_INT 2
34962: ARRAY
34963: PPUSH
34964: LD_VAR 0 2
34968: PUSH
34969: LD_INT 3
34971: ARRAY
34972: PPUSH
34973: LD_VAR 0 2
34977: PUSH
34978: LD_INT 4
34980: ARRAY
34981: PPUSH
34982: CALL_OW 449
34986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_VAR 0 5
34996: PPUSH
34997: LD_INT 1
34999: PPUSH
35000: CALL_OW 275
35004: PUSH
35005: LD_VAR 0 4
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: GREATEREQUAL
35014: PUSH
35015: LD_VAR 0 5
35019: PPUSH
35020: LD_INT 2
35022: PPUSH
35023: CALL_OW 275
35027: PUSH
35028: LD_VAR 0 4
35032: PUSH
35033: LD_INT 2
35035: ARRAY
35036: GREATEREQUAL
35037: AND
35038: PUSH
35039: LD_VAR 0 5
35043: PPUSH
35044: LD_INT 3
35046: PPUSH
35047: CALL_OW 275
35051: PUSH
35052: LD_VAR 0 4
35056: PUSH
35057: LD_INT 3
35059: ARRAY
35060: GREATEREQUAL
35061: AND
35062: ST_TO_ADDR
// end ;
35063: LD_VAR 0 3
35067: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
// pom := GetBase ( building ) ;
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 274
35088: ST_TO_ADDR
// if not pom then
35089: LD_VAR 0 3
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35268
// btype := GetBType ( building ) ;
35098: LD_ADDR_VAR 0 5
35102: PUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 266
35112: ST_TO_ADDR
// if btype = b_armoury then
35113: LD_VAR 0 5
35117: PUSH
35118: LD_INT 4
35120: EQUAL
35121: IFFALSE 35131
// btype := b_barracks ;
35123: LD_ADDR_VAR 0 5
35127: PUSH
35128: LD_INT 5
35130: ST_TO_ADDR
// if btype = b_depot then
35131: LD_VAR 0 5
35135: PUSH
35136: LD_INT 0
35138: EQUAL
35139: IFFALSE 35149
// btype := b_warehouse ;
35141: LD_ADDR_VAR 0 5
35145: PUSH
35146: LD_INT 1
35148: ST_TO_ADDR
// if btype = b_workshop then
35149: LD_VAR 0 5
35153: PUSH
35154: LD_INT 2
35156: EQUAL
35157: IFFALSE 35167
// btype := b_factory ;
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: LD_INT 3
35166: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35167: LD_ADDR_VAR 0 4
35171: PUSH
35172: LD_VAR 0 5
35176: PPUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: CALL_OW 248
35186: PPUSH
35187: CALL_OW 450
35191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35192: LD_ADDR_VAR 0 2
35196: PUSH
35197: LD_VAR 0 3
35201: PPUSH
35202: LD_INT 1
35204: PPUSH
35205: CALL_OW 275
35209: PUSH
35210: LD_VAR 0 4
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: GREATEREQUAL
35219: PUSH
35220: LD_VAR 0 3
35224: PPUSH
35225: LD_INT 2
35227: PPUSH
35228: CALL_OW 275
35232: PUSH
35233: LD_VAR 0 4
35237: PUSH
35238: LD_INT 2
35240: ARRAY
35241: GREATEREQUAL
35242: AND
35243: PUSH
35244: LD_VAR 0 3
35248: PPUSH
35249: LD_INT 3
35251: PPUSH
35252: CALL_OW 275
35256: PUSH
35257: LD_VAR 0 4
35261: PUSH
35262: LD_INT 3
35264: ARRAY
35265: GREATEREQUAL
35266: AND
35267: ST_TO_ADDR
// end ;
35268: LD_VAR 0 2
35272: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35273: LD_INT 0
35275: PPUSH
35276: PPUSH
35277: PPUSH
// pom := GetBase ( building ) ;
35278: LD_ADDR_VAR 0 4
35282: PUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL_OW 274
35292: ST_TO_ADDR
// if not pom then
35293: LD_VAR 0 4
35297: NOT
35298: IFFALSE 35302
// exit ;
35300: GO 35403
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35302: LD_ADDR_VAR 0 5
35306: PUSH
35307: LD_VAR 0 2
35311: PPUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 248
35321: PPUSH
35322: CALL_OW 450
35326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35327: LD_ADDR_VAR 0 3
35331: PUSH
35332: LD_VAR 0 4
35336: PPUSH
35337: LD_INT 1
35339: PPUSH
35340: CALL_OW 275
35344: PUSH
35345: LD_VAR 0 5
35349: PUSH
35350: LD_INT 1
35352: ARRAY
35353: GREATEREQUAL
35354: PUSH
35355: LD_VAR 0 4
35359: PPUSH
35360: LD_INT 2
35362: PPUSH
35363: CALL_OW 275
35367: PUSH
35368: LD_VAR 0 5
35372: PUSH
35373: LD_INT 2
35375: ARRAY
35376: GREATEREQUAL
35377: AND
35378: PUSH
35379: LD_VAR 0 4
35383: PPUSH
35384: LD_INT 3
35386: PPUSH
35387: CALL_OW 275
35391: PUSH
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 3
35399: ARRAY
35400: GREATEREQUAL
35401: AND
35402: ST_TO_ADDR
// end ;
35403: LD_VAR 0 3
35407: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35408: LD_INT 0
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
// result := false ;
35420: LD_ADDR_VAR 0 6
35424: PUSH
35425: LD_INT 0
35427: ST_TO_ADDR
// if not base or not btype or not x or not y then
35428: LD_VAR 0 1
35432: NOT
35433: PUSH
35434: LD_VAR 0 2
35438: NOT
35439: OR
35440: PUSH
35441: LD_VAR 0 3
35445: NOT
35446: OR
35447: PUSH
35448: LD_VAR 0 4
35452: NOT
35453: OR
35454: IFFALSE 35458
// exit ;
35456: GO 36067
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35458: LD_ADDR_VAR 0 12
35462: PUSH
35463: LD_VAR 0 2
35467: PPUSH
35468: LD_VAR 0 3
35472: PPUSH
35473: LD_VAR 0 4
35477: PPUSH
35478: LD_VAR 0 5
35482: PPUSH
35483: LD_VAR 0 1
35487: PUSH
35488: LD_INT 1
35490: ARRAY
35491: PPUSH
35492: CALL_OW 248
35496: PPUSH
35497: LD_INT 0
35499: PPUSH
35500: CALL 36904 0 6
35504: ST_TO_ADDR
// if not hexes then
35505: LD_VAR 0 12
35509: NOT
35510: IFFALSE 35514
// exit ;
35512: GO 36067
// for i = 1 to hexes do
35514: LD_ADDR_VAR 0 7
35518: PUSH
35519: DOUBLE
35520: LD_INT 1
35522: DEC
35523: ST_TO_ADDR
35524: LD_VAR 0 12
35528: PUSH
35529: FOR_TO
35530: IFFALSE 36065
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35532: LD_ADDR_VAR 0 11
35536: PUSH
35537: LD_VAR 0 12
35541: PUSH
35542: LD_VAR 0 7
35546: ARRAY
35547: PUSH
35548: LD_INT 1
35550: ARRAY
35551: PPUSH
35552: LD_VAR 0 12
35556: PUSH
35557: LD_VAR 0 7
35561: ARRAY
35562: PUSH
35563: LD_INT 2
35565: ARRAY
35566: PPUSH
35567: CALL_OW 428
35571: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35572: LD_VAR 0 12
35576: PUSH
35577: LD_VAR 0 7
35581: ARRAY
35582: PUSH
35583: LD_INT 1
35585: ARRAY
35586: PPUSH
35587: LD_VAR 0 12
35591: PUSH
35592: LD_VAR 0 7
35596: ARRAY
35597: PUSH
35598: LD_INT 2
35600: ARRAY
35601: PPUSH
35602: CALL_OW 351
35606: PUSH
35607: LD_VAR 0 12
35611: PUSH
35612: LD_VAR 0 7
35616: ARRAY
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: PPUSH
35622: LD_VAR 0 12
35626: PUSH
35627: LD_VAR 0 7
35631: ARRAY
35632: PUSH
35633: LD_INT 2
35635: ARRAY
35636: PPUSH
35637: CALL_OW 488
35641: NOT
35642: OR
35643: PUSH
35644: LD_VAR 0 11
35648: PPUSH
35649: CALL_OW 247
35653: PUSH
35654: LD_INT 3
35656: EQUAL
35657: OR
35658: IFFALSE 35664
// exit ;
35660: POP
35661: POP
35662: GO 36067
// if not tmp or not tmp in base then
35664: LD_VAR 0 11
35668: NOT
35669: PUSH
35670: LD_VAR 0 11
35674: PUSH
35675: LD_VAR 0 1
35679: IN
35680: NOT
35681: OR
35682: IFFALSE 35686
// continue ;
35684: GO 35529
// result := true ;
35686: LD_ADDR_VAR 0 6
35690: PUSH
35691: LD_INT 1
35693: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35694: LD_ADDR_VAR 0 15
35698: PUSH
35699: LD_VAR 0 1
35703: PPUSH
35704: LD_INT 22
35706: PUSH
35707: LD_VAR 0 11
35711: PPUSH
35712: CALL_OW 255
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 30
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 30
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PPUSH
35753: CALL_OW 72
35757: ST_TO_ADDR
// if dep then
35758: LD_VAR 0 15
35762: IFFALSE 35898
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35764: LD_ADDR_VAR 0 14
35768: PUSH
35769: LD_VAR 0 15
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PPUSH
35778: CALL_OW 250
35782: PPUSH
35783: LD_VAR 0 15
35787: PUSH
35788: LD_INT 1
35790: ARRAY
35791: PPUSH
35792: CALL_OW 254
35796: PPUSH
35797: LD_INT 5
35799: PPUSH
35800: CALL_OW 272
35804: PUSH
35805: LD_VAR 0 15
35809: PUSH
35810: LD_INT 1
35812: ARRAY
35813: PPUSH
35814: CALL_OW 251
35818: PPUSH
35819: LD_VAR 0 15
35823: PUSH
35824: LD_INT 1
35826: ARRAY
35827: PPUSH
35828: CALL_OW 254
35832: PPUSH
35833: LD_INT 5
35835: PPUSH
35836: CALL_OW 273
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35845: LD_VAR 0 14
35849: PUSH
35850: LD_INT 1
35852: ARRAY
35853: PPUSH
35854: LD_VAR 0 14
35858: PUSH
35859: LD_INT 2
35861: ARRAY
35862: PPUSH
35863: CALL_OW 488
35867: IFFALSE 35898
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35869: LD_VAR 0 11
35873: PPUSH
35874: LD_VAR 0 14
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PPUSH
35883: LD_VAR 0 14
35887: PUSH
35888: LD_INT 2
35890: ARRAY
35891: PPUSH
35892: CALL_OW 111
// continue ;
35896: GO 35529
// end ; end ; r := GetDir ( tmp ) ;
35898: LD_ADDR_VAR 0 13
35902: PUSH
35903: LD_VAR 0 11
35907: PPUSH
35908: CALL_OW 254
35912: ST_TO_ADDR
// if r = 5 then
35913: LD_VAR 0 13
35917: PUSH
35918: LD_INT 5
35920: EQUAL
35921: IFFALSE 35931
// r := 0 ;
35923: LD_ADDR_VAR 0 13
35927: PUSH
35928: LD_INT 0
35930: ST_TO_ADDR
// for j = r to 5 do
35931: LD_ADDR_VAR 0 8
35935: PUSH
35936: DOUBLE
35937: LD_VAR 0 13
35941: DEC
35942: ST_TO_ADDR
35943: LD_INT 5
35945: PUSH
35946: FOR_TO
35947: IFFALSE 36061
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35949: LD_ADDR_VAR 0 9
35953: PUSH
35954: LD_VAR 0 11
35958: PPUSH
35959: CALL_OW 250
35963: PPUSH
35964: LD_VAR 0 8
35968: PPUSH
35969: LD_INT 2
35971: PPUSH
35972: CALL_OW 272
35976: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35977: LD_ADDR_VAR 0 10
35981: PUSH
35982: LD_VAR 0 11
35986: PPUSH
35987: CALL_OW 251
35991: PPUSH
35992: LD_VAR 0 8
35996: PPUSH
35997: LD_INT 2
35999: PPUSH
36000: CALL_OW 273
36004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36005: LD_VAR 0 9
36009: PPUSH
36010: LD_VAR 0 10
36014: PPUSH
36015: CALL_OW 488
36019: PUSH
36020: LD_VAR 0 9
36024: PPUSH
36025: LD_VAR 0 10
36029: PPUSH
36030: CALL_OW 428
36034: NOT
36035: AND
36036: IFFALSE 36059
// begin ComMoveXY ( tmp , _x , _y ) ;
36038: LD_VAR 0 11
36042: PPUSH
36043: LD_VAR 0 9
36047: PPUSH
36048: LD_VAR 0 10
36052: PPUSH
36053: CALL_OW 111
// break ;
36057: GO 36061
// end ; end ;
36059: GO 35946
36061: POP
36062: POP
// end ;
36063: GO 35529
36065: POP
36066: POP
// end ;
36067: LD_VAR 0 6
36071: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36072: LD_INT 0
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// result := false ;
36084: LD_ADDR_VAR 0 6
36088: PUSH
36089: LD_INT 0
36091: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36092: LD_VAR 0 1
36096: NOT
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 266
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: IN
36118: NOT
36119: OR
36120: PUSH
36121: LD_VAR 0 2
36125: NOT
36126: OR
36127: PUSH
36128: LD_VAR 0 5
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: LD_INT 4
36147: PUSH
36148: LD_INT 5
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: IN
36159: NOT
36160: OR
36161: PUSH
36162: LD_VAR 0 3
36166: PPUSH
36167: LD_VAR 0 4
36171: PPUSH
36172: CALL_OW 488
36176: NOT
36177: OR
36178: IFFALSE 36182
// exit ;
36180: GO 36899
// pom := GetBase ( depot ) ;
36182: LD_ADDR_VAR 0 10
36186: PUSH
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL_OW 274
36196: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36197: LD_ADDR_VAR 0 11
36201: PUSH
36202: LD_VAR 0 2
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 248
36216: PPUSH
36217: CALL_OW 450
36221: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36222: LD_VAR 0 10
36226: PPUSH
36227: LD_INT 1
36229: PPUSH
36230: CALL_OW 275
36234: PUSH
36235: LD_VAR 0 11
36239: PUSH
36240: LD_INT 1
36242: ARRAY
36243: GREATEREQUAL
36244: PUSH
36245: LD_VAR 0 10
36249: PPUSH
36250: LD_INT 2
36252: PPUSH
36253: CALL_OW 275
36257: PUSH
36258: LD_VAR 0 11
36262: PUSH
36263: LD_INT 2
36265: ARRAY
36266: GREATEREQUAL
36267: AND
36268: PUSH
36269: LD_VAR 0 10
36273: PPUSH
36274: LD_INT 3
36276: PPUSH
36277: CALL_OW 275
36281: PUSH
36282: LD_VAR 0 11
36286: PUSH
36287: LD_INT 3
36289: ARRAY
36290: GREATEREQUAL
36291: AND
36292: NOT
36293: IFFALSE 36297
// exit ;
36295: GO 36899
// if GetBType ( depot ) = b_depot then
36297: LD_VAR 0 1
36301: PPUSH
36302: CALL_OW 266
36306: PUSH
36307: LD_INT 0
36309: EQUAL
36310: IFFALSE 36322
// dist := 28 else
36312: LD_ADDR_VAR 0 14
36316: PUSH
36317: LD_INT 28
36319: ST_TO_ADDR
36320: GO 36330
// dist := 36 ;
36322: LD_ADDR_VAR 0 14
36326: PUSH
36327: LD_INT 36
36329: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36330: LD_VAR 0 1
36334: PPUSH
36335: LD_VAR 0 3
36339: PPUSH
36340: LD_VAR 0 4
36344: PPUSH
36345: CALL_OW 297
36349: PUSH
36350: LD_VAR 0 14
36354: GREATER
36355: IFFALSE 36359
// exit ;
36357: GO 36899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36359: LD_ADDR_VAR 0 12
36363: PUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_VAR 0 4
36378: PPUSH
36379: LD_VAR 0 5
36383: PPUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 248
36393: PPUSH
36394: LD_INT 0
36396: PPUSH
36397: CALL 36904 0 6
36401: ST_TO_ADDR
// if not hexes then
36402: LD_VAR 0 12
36406: NOT
36407: IFFALSE 36411
// exit ;
36409: GO 36899
// hex := GetHexInfo ( x , y ) ;
36411: LD_ADDR_VAR 0 15
36415: PUSH
36416: LD_VAR 0 3
36420: PPUSH
36421: LD_VAR 0 4
36425: PPUSH
36426: CALL_OW 546
36430: ST_TO_ADDR
// if hex [ 1 ] then
36431: LD_VAR 0 15
36435: PUSH
36436: LD_INT 1
36438: ARRAY
36439: IFFALSE 36443
// exit ;
36441: GO 36899
// height := hex [ 2 ] ;
36443: LD_ADDR_VAR 0 13
36447: PUSH
36448: LD_VAR 0 15
36452: PUSH
36453: LD_INT 2
36455: ARRAY
36456: ST_TO_ADDR
// for i = 1 to hexes do
36457: LD_ADDR_VAR 0 7
36461: PUSH
36462: DOUBLE
36463: LD_INT 1
36465: DEC
36466: ST_TO_ADDR
36467: LD_VAR 0 12
36471: PUSH
36472: FOR_TO
36473: IFFALSE 36803
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36475: LD_VAR 0 12
36479: PUSH
36480: LD_VAR 0 7
36484: ARRAY
36485: PUSH
36486: LD_INT 1
36488: ARRAY
36489: PPUSH
36490: LD_VAR 0 12
36494: PUSH
36495: LD_VAR 0 7
36499: ARRAY
36500: PUSH
36501: LD_INT 2
36503: ARRAY
36504: PPUSH
36505: CALL_OW 488
36509: NOT
36510: PUSH
36511: LD_VAR 0 12
36515: PUSH
36516: LD_VAR 0 7
36520: ARRAY
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: LD_VAR 0 12
36530: PUSH
36531: LD_VAR 0 7
36535: ARRAY
36536: PUSH
36537: LD_INT 2
36539: ARRAY
36540: PPUSH
36541: CALL_OW 428
36545: PUSH
36546: LD_INT 0
36548: GREATER
36549: OR
36550: PUSH
36551: LD_VAR 0 12
36555: PUSH
36556: LD_VAR 0 7
36560: ARRAY
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: LD_VAR 0 12
36570: PUSH
36571: LD_VAR 0 7
36575: ARRAY
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: PPUSH
36581: CALL_OW 351
36585: OR
36586: IFFALSE 36592
// exit ;
36588: POP
36589: POP
36590: GO 36899
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36592: LD_ADDR_VAR 0 8
36596: PUSH
36597: LD_VAR 0 12
36601: PUSH
36602: LD_VAR 0 7
36606: ARRAY
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: LD_VAR 0 12
36616: PUSH
36617: LD_VAR 0 7
36621: ARRAY
36622: PUSH
36623: LD_INT 2
36625: ARRAY
36626: PPUSH
36627: CALL_OW 546
36631: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36632: LD_VAR 0 8
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PUSH
36641: LD_VAR 0 8
36645: PUSH
36646: LD_INT 2
36648: ARRAY
36649: PUSH
36650: LD_VAR 0 13
36654: PUSH
36655: LD_INT 2
36657: PLUS
36658: GREATER
36659: OR
36660: PUSH
36661: LD_VAR 0 8
36665: PUSH
36666: LD_INT 2
36668: ARRAY
36669: PUSH
36670: LD_VAR 0 13
36674: PUSH
36675: LD_INT 2
36677: MINUS
36678: LESS
36679: OR
36680: PUSH
36681: LD_VAR 0 8
36685: PUSH
36686: LD_INT 3
36688: ARRAY
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: LD_INT 8
36695: PUSH
36696: LD_INT 9
36698: PUSH
36699: LD_INT 10
36701: PUSH
36702: LD_INT 11
36704: PUSH
36705: LD_INT 12
36707: PUSH
36708: LD_INT 13
36710: PUSH
36711: LD_INT 16
36713: PUSH
36714: LD_INT 17
36716: PUSH
36717: LD_INT 18
36719: PUSH
36720: LD_INT 19
36722: PUSH
36723: LD_INT 20
36725: PUSH
36726: LD_INT 21
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: IN
36744: NOT
36745: OR
36746: PUSH
36747: LD_VAR 0 8
36751: PUSH
36752: LD_INT 5
36754: ARRAY
36755: NOT
36756: OR
36757: PUSH
36758: LD_VAR 0 8
36762: PUSH
36763: LD_INT 6
36765: ARRAY
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 7
36775: PUSH
36776: LD_INT 9
36778: PUSH
36779: LD_INT 10
36781: PUSH
36782: LD_INT 11
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: IN
36793: NOT
36794: OR
36795: IFFALSE 36801
// exit ;
36797: POP
36798: POP
36799: GO 36899
// end ;
36801: GO 36472
36803: POP
36804: POP
// side := GetSide ( depot ) ;
36805: LD_ADDR_VAR 0 9
36809: PUSH
36810: LD_VAR 0 1
36814: PPUSH
36815: CALL_OW 255
36819: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36820: LD_VAR 0 9
36824: PPUSH
36825: LD_VAR 0 3
36829: PPUSH
36830: LD_VAR 0 4
36834: PPUSH
36835: LD_INT 20
36837: PPUSH
36838: CALL 29553 0 4
36842: PUSH
36843: LD_INT 4
36845: ARRAY
36846: IFFALSE 36850
// exit ;
36848: GO 36899
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36850: LD_VAR 0 2
36854: PUSH
36855: LD_INT 29
36857: PUSH
36858: LD_INT 30
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: IN
36865: PUSH
36866: LD_VAR 0 3
36870: PPUSH
36871: LD_VAR 0 4
36875: PPUSH
36876: LD_VAR 0 9
36880: PPUSH
36881: CALL_OW 440
36885: NOT
36886: AND
36887: IFFALSE 36891
// exit ;
36889: GO 36899
// result := true ;
36891: LD_ADDR_VAR 0 6
36895: PUSH
36896: LD_INT 1
36898: ST_TO_ADDR
// end ;
36899: LD_VAR 0 6
36903: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
36904: LD_INT 0
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
36927: PPUSH
36928: PPUSH
36929: PPUSH
36930: PPUSH
36931: PPUSH
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
// result = [ ] ;
36964: LD_ADDR_VAR 0 7
36968: PUSH
36969: EMPTY
36970: ST_TO_ADDR
// temp_list = [ ] ;
36971: LD_ADDR_VAR 0 9
36975: PUSH
36976: EMPTY
36977: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36978: LD_VAR 0 4
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 4
36997: PUSH
36998: LD_INT 5
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: IN
37009: NOT
37010: PUSH
37011: LD_VAR 0 1
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: IN
37026: PUSH
37027: LD_VAR 0 5
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: IN
37046: NOT
37047: AND
37048: OR
37049: IFFALSE 37053
// exit ;
37051: GO 55444
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37053: LD_VAR 0 1
37057: PUSH
37058: LD_INT 6
37060: PUSH
37061: LD_INT 7
37063: PUSH
37064: LD_INT 8
37066: PUSH
37067: LD_INT 13
37069: PUSH
37070: LD_INT 12
37072: PUSH
37073: LD_INT 15
37075: PUSH
37076: LD_INT 11
37078: PUSH
37079: LD_INT 14
37081: PUSH
37082: LD_INT 10
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: IN
37096: IFFALSE 37106
// btype = b_lab ;
37098: LD_ADDR_VAR 0 1
37102: PUSH
37103: LD_INT 6
37105: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37106: LD_VAR 0 6
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: IN
37125: NOT
37126: PUSH
37127: LD_VAR 0 1
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 2
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: LD_INT 6
37146: PUSH
37147: LD_INT 36
37149: PUSH
37150: LD_INT 4
37152: PUSH
37153: LD_INT 5
37155: PUSH
37156: LD_INT 31
37158: PUSH
37159: LD_INT 32
37161: PUSH
37162: LD_INT 33
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: IN
37178: NOT
37179: PUSH
37180: LD_VAR 0 6
37184: PUSH
37185: LD_INT 1
37187: EQUAL
37188: AND
37189: OR
37190: PUSH
37191: LD_VAR 0 1
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: IN
37206: NOT
37207: PUSH
37208: LD_VAR 0 6
37212: PUSH
37213: LD_INT 2
37215: EQUAL
37216: AND
37217: OR
37218: IFFALSE 37228
// mode = 0 ;
37220: LD_ADDR_VAR 0 6
37224: PUSH
37225: LD_INT 0
37227: ST_TO_ADDR
// case mode of 0 :
37228: LD_VAR 0 6
37232: PUSH
37233: LD_INT 0
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 48694
37241: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37242: LD_ADDR_VAR 0 11
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 3
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37435: LD_ADDR_VAR 0 12
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 3
37603: NEG
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37631: LD_ADDR_VAR 0 13
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: LD_INT 3
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37830: LD_ADDR_VAR 0 14
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 3
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38026: LD_ADDR_VAR 0 15
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: NEG
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38219: LD_ADDR_VAR 0 16
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38412: LD_ADDR_VAR 0 17
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38642: LD_ADDR_VAR 0 18
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 2
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38872: LD_ADDR_VAR 0 19
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39102: LD_ADDR_VAR 0 20
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39332: LD_ADDR_VAR 0 21
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39562: LD_ADDR_VAR 0 22
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39792: LD_ADDR_VAR 0 23
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 2
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 3
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40072: LD_ADDR_VAR 0 24
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40348: LD_ADDR_VAR 0 25
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40622: LD_ADDR_VAR 0 26
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 3
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40898: LD_ADDR_VAR 0 27
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41178: LD_ADDR_VAR 0 28
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 3
41425: NEG
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41460: LD_ADDR_VAR 0 29
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 2
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 3
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41739: LD_ADDR_VAR 0 30
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 3
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42017: LD_ADDR_VAR 0 31
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 3
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42295: LD_ADDR_VAR 0 32
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 3
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42573: LD_ADDR_VAR 0 33
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 34
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 3
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 3
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43132: LD_ADDR_VAR 0 35
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43244: LD_ADDR_VAR 0 36
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43356: LD_ADDR_VAR 0 37
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43468: LD_ADDR_VAR 0 38
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43580: LD_ADDR_VAR 0 39
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43692: LD_ADDR_VAR 0 40
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43804: LD_ADDR_VAR 0 41
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 2
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 3
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 3
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 3
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: NEG
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 3
44113: NEG
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44154: LD_ADDR_VAR 0 42
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 3
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 3
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 3
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: NEG
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44504: LD_ADDR_VAR 0 43
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44852: LD_ADDR_VAR 0 44
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 3
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 3
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: LD_INT 3
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45202: LD_ADDR_VAR 0 45
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 3
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 3
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: NEG
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45552: LD_ADDR_VAR 0 46
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: NEG
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 3
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45900: LD_ADDR_VAR 0 47
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46051: LD_ADDR_VAR 0 48
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46198: LD_ADDR_VAR 0 49
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46342: LD_ADDR_VAR 0 50
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46486: LD_ADDR_VAR 0 51
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46633: LD_ADDR_VAR 0 52
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46784: LD_ADDR_VAR 0 53
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47014: LD_ADDR_VAR 0 54
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47244: LD_ADDR_VAR 0 55
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47474: LD_ADDR_VAR 0 56
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47704: LD_ADDR_VAR 0 57
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47934: LD_ADDR_VAR 0 58
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48164: LD_ADDR_VAR 0 59
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48252: LD_ADDR_VAR 0 60
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48340: LD_ADDR_VAR 0 61
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48428: LD_ADDR_VAR 0 62
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48516: LD_ADDR_VAR 0 63
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48604: LD_ADDR_VAR 0 64
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// end ; 1 :
48692: GO 54589
48694: LD_INT 1
48696: DOUBLE
48697: EQUAL
48698: IFTRUE 48702
48700: GO 51325
48702: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48703: LD_ADDR_VAR 0 11
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48747: LD_ADDR_VAR 0 12
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48788: LD_ADDR_VAR 0 13
48792: PUSH
48793: LD_INT 3
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 3
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48828: LD_ADDR_VAR 0 14
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48869: LD_ADDR_VAR 0 15
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 3
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48913: LD_ADDR_VAR 0 16
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 3
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48959: LD_ADDR_VAR 0 17
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49003: LD_ADDR_VAR 0 18
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49044: LD_ADDR_VAR 0 19
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49084: LD_ADDR_VAR 0 20
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49125: LD_ADDR_VAR 0 21
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49169: LD_ADDR_VAR 0 22
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49215: LD_ADDR_VAR 0 23
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 4
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 3
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49259: LD_ADDR_VAR 0 24
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 4
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49300: LD_ADDR_VAR 0 25
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 4
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: LD_INT 4
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49340: LD_ADDR_VAR 0 26
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 4
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49381: LD_ADDR_VAR 0 27
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 4
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49425: LD_ADDR_VAR 0 28
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 3
49444: NEG
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 4
49456: NEG
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49471: LD_ADDR_VAR 0 29
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 4
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 4
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 5
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 5
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 4
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 6
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 6
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 5
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49626: LD_ADDR_VAR 0 30
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 4
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 4
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 4
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 5
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 5
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 5
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 6
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 6
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49769: LD_ADDR_VAR 0 31
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: PUSH
49807: LD_INT 3
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: LD_INT 4
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: LD_INT 4
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 5
49836: PUSH
49837: LD_INT 4
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 5
49846: PUSH
49847: LD_INT 5
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 4
49856: PUSH
49857: LD_INT 5
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 6
49866: PUSH
49867: LD_INT 5
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 6
49876: PUSH
49877: LD_INT 6
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 5
49886: PUSH
49887: LD_INT 6
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49908: LD_ADDR_VAR 0 32
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 4
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 4
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 5
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 5
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 6
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 6
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 5
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50051: LD_ADDR_VAR 0 33
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 4
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 4
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 5
50137: NEG
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 5
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 6
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 6
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50206: LD_ADDR_VAR 0 34
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 4
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 4
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: NEG
50274: PUSH
50275: LD_INT 4
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 4
50285: NEG
50286: PUSH
50287: LD_INT 5
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 5
50297: NEG
50298: PUSH
50299: LD_INT 4
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 5
50309: NEG
50310: PUSH
50311: LD_INT 5
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 5
50321: NEG
50322: PUSH
50323: LD_INT 6
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 6
50333: NEG
50334: PUSH
50335: LD_INT 5
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 6
50345: NEG
50346: PUSH
50347: LD_INT 6
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50369: LD_ADDR_VAR 0 41
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 3
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50413: LD_ADDR_VAR 0 42
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50454: LD_ADDR_VAR 0 43
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50494: LD_ADDR_VAR 0 44
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50535: LD_ADDR_VAR 0 45
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50579: LD_ADDR_VAR 0 46
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: NEG
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50625: LD_ADDR_VAR 0 47
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 3
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50658: LD_ADDR_VAR 0 48
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50689: LD_ADDR_VAR 0 49
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50718: LD_ADDR_VAR 0 50
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50747: LD_ADDR_VAR 0 51
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50778: LD_ADDR_VAR 0 52
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50811: LD_ADDR_VAR 0 53
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50855: LD_ADDR_VAR 0 54
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50896: LD_ADDR_VAR 0 55
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50936: LD_ADDR_VAR 0 56
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50977: LD_ADDR_VAR 0 57
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51021: LD_ADDR_VAR 0 58
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51067: LD_ADDR_VAR 0 59
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51111: LD_ADDR_VAR 0 60
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51152: LD_ADDR_VAR 0 61
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51192: LD_ADDR_VAR 0 62
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51233: LD_ADDR_VAR 0 63
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51277: LD_ADDR_VAR 0 64
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// end ; 2 :
51323: GO 54589
51325: LD_INT 2
51327: DOUBLE
51328: EQUAL
51329: IFTRUE 51333
51331: GO 54588
51333: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51334: LD_ADDR_VAR 0 29
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 5
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 5
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 4
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: LD_INT 4
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 4
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 4
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 4
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 4
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 5
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 5
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 4
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 5
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 4
51673: NEG
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 4
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 4
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: LD_INT 4
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 4
51731: NEG
51732: PUSH
51733: LD_INT 5
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 4
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 4
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 5
51779: NEG
51780: PUSH
51781: LD_INT 4
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 5
51791: NEG
51792: PUSH
51793: LD_INT 5
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: NEG
51804: PUSH
51805: LD_INT 5
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 5
51815: NEG
51816: PUSH
51817: LD_INT 3
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51872: LD_ADDR_VAR 0 30
51876: PUSH
51877: LD_INT 4
51879: PUSH
51880: LD_INT 4
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 4
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 5
51899: PUSH
51900: LD_INT 4
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 5
51909: PUSH
51910: LD_INT 5
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 4
51919: PUSH
51920: LD_INT 5
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 5
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: LD_INT 5
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 4
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 4
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 5
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 5
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: NEG
52177: PUSH
52178: LD_INT 4
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 4
52236: NEG
52237: PUSH
52238: LD_INT 4
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 4
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 4
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 5
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 4
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 3
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 5
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52419: LD_ADDR_VAR 0 31
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 5
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 5
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 4
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 5
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 4
52575: NEG
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 4
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 4
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: NEG
52622: PUSH
52623: LD_INT 4
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 4
52633: NEG
52634: PUSH
52635: LD_INT 5
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 4
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 4
52669: NEG
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 5
52681: NEG
52682: PUSH
52683: LD_INT 4
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 5
52693: NEG
52694: PUSH
52695: LD_INT 5
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: LD_INT 5
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 5
52717: NEG
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 4
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 4
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 4
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 4
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 4
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 5
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 5
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 4
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 5
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52969: LD_ADDR_VAR 0 32
52973: PUSH
52974: LD_INT 4
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 4
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 4
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 5
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 5
53055: NEG
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: LD_INT 4
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 4
53138: NEG
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 4
53150: NEG
53151: PUSH
53152: LD_INT 4
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 4
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 4
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 5
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 4
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 4
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 5
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 5
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 4
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 4
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 4
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 5
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 5
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53516: LD_ADDR_VAR 0 33
53520: PUSH
53521: LD_INT 4
53523: NEG
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 4
53535: NEG
53536: PUSH
53537: LD_INT 5
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: LD_INT 4
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 4
53571: NEG
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 5
53583: NEG
53584: PUSH
53585: LD_INT 4
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 5
53595: NEG
53596: PUSH
53597: LD_INT 5
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 5
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 5
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 4
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 4
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 5
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 5
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 4
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 4
53856: PUSH
53857: LD_INT 4
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 4
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 4
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 4
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: LD_INT 5
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54054: LD_ADDR_VAR 0 34
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 4
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 5
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 5
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: LD_INT 5
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 4
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 4
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 4
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 5
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 5
54286: PUSH
54287: LD_INT 5
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 4
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 4
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 5
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 4
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 4
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 5
54518: NEG
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// end ; end ;
54586: GO 54589
54588: POP
// case btype of b_depot , b_warehouse :
54589: LD_VAR 0 1
54593: PUSH
54594: LD_INT 0
54596: DOUBLE
54597: EQUAL
54598: IFTRUE 54608
54600: LD_INT 1
54602: DOUBLE
54603: EQUAL
54604: IFTRUE 54608
54606: GO 54809
54608: POP
// case nation of nation_american :
54609: LD_VAR 0 5
54613: PUSH
54614: LD_INT 1
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54622
54620: GO 54678
54622: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54623: LD_ADDR_VAR 0 9
54627: PUSH
54628: LD_VAR 0 11
54632: PUSH
54633: LD_VAR 0 12
54637: PUSH
54638: LD_VAR 0 13
54642: PUSH
54643: LD_VAR 0 14
54647: PUSH
54648: LD_VAR 0 15
54652: PUSH
54653: LD_VAR 0 16
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: PUSH
54666: LD_VAR 0 4
54670: PUSH
54671: LD_INT 1
54673: PLUS
54674: ARRAY
54675: ST_TO_ADDR
54676: GO 54807
54678: LD_INT 2
54680: DOUBLE
54681: EQUAL
54682: IFTRUE 54686
54684: GO 54742
54686: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54687: LD_ADDR_VAR 0 9
54691: PUSH
54692: LD_VAR 0 17
54696: PUSH
54697: LD_VAR 0 18
54701: PUSH
54702: LD_VAR 0 19
54706: PUSH
54707: LD_VAR 0 20
54711: PUSH
54712: LD_VAR 0 21
54716: PUSH
54717: LD_VAR 0 22
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: PUSH
54730: LD_VAR 0 4
54734: PUSH
54735: LD_INT 1
54737: PLUS
54738: ARRAY
54739: ST_TO_ADDR
54740: GO 54807
54742: LD_INT 3
54744: DOUBLE
54745: EQUAL
54746: IFTRUE 54750
54748: GO 54806
54750: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54751: LD_ADDR_VAR 0 9
54755: PUSH
54756: LD_VAR 0 23
54760: PUSH
54761: LD_VAR 0 24
54765: PUSH
54766: LD_VAR 0 25
54770: PUSH
54771: LD_VAR 0 26
54775: PUSH
54776: LD_VAR 0 27
54780: PUSH
54781: LD_VAR 0 28
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: PUSH
54794: LD_VAR 0 4
54798: PUSH
54799: LD_INT 1
54801: PLUS
54802: ARRAY
54803: ST_TO_ADDR
54804: GO 54807
54806: POP
54807: GO 55362
54809: LD_INT 2
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54823
54815: LD_INT 3
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54823
54821: GO 54879
54823: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54824: LD_ADDR_VAR 0 9
54828: PUSH
54829: LD_VAR 0 29
54833: PUSH
54834: LD_VAR 0 30
54838: PUSH
54839: LD_VAR 0 31
54843: PUSH
54844: LD_VAR 0 32
54848: PUSH
54849: LD_VAR 0 33
54853: PUSH
54854: LD_VAR 0 34
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: PUSH
54867: LD_VAR 0 4
54871: PUSH
54872: LD_INT 1
54874: PLUS
54875: ARRAY
54876: ST_TO_ADDR
54877: GO 55362
54879: LD_INT 16
54881: DOUBLE
54882: EQUAL
54883: IFTRUE 54941
54885: LD_INT 17
54887: DOUBLE
54888: EQUAL
54889: IFTRUE 54941
54891: LD_INT 18
54893: DOUBLE
54894: EQUAL
54895: IFTRUE 54941
54897: LD_INT 19
54899: DOUBLE
54900: EQUAL
54901: IFTRUE 54941
54903: LD_INT 22
54905: DOUBLE
54906: EQUAL
54907: IFTRUE 54941
54909: LD_INT 20
54911: DOUBLE
54912: EQUAL
54913: IFTRUE 54941
54915: LD_INT 21
54917: DOUBLE
54918: EQUAL
54919: IFTRUE 54941
54921: LD_INT 23
54923: DOUBLE
54924: EQUAL
54925: IFTRUE 54941
54927: LD_INT 24
54929: DOUBLE
54930: EQUAL
54931: IFTRUE 54941
54933: LD_INT 25
54935: DOUBLE
54936: EQUAL
54937: IFTRUE 54941
54939: GO 54997
54941: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54942: LD_ADDR_VAR 0 9
54946: PUSH
54947: LD_VAR 0 35
54951: PUSH
54952: LD_VAR 0 36
54956: PUSH
54957: LD_VAR 0 37
54961: PUSH
54962: LD_VAR 0 38
54966: PUSH
54967: LD_VAR 0 39
54971: PUSH
54972: LD_VAR 0 40
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: PUSH
54985: LD_VAR 0 4
54989: PUSH
54990: LD_INT 1
54992: PLUS
54993: ARRAY
54994: ST_TO_ADDR
54995: GO 55362
54997: LD_INT 6
54999: DOUBLE
55000: EQUAL
55001: IFTRUE 55053
55003: LD_INT 7
55005: DOUBLE
55006: EQUAL
55007: IFTRUE 55053
55009: LD_INT 8
55011: DOUBLE
55012: EQUAL
55013: IFTRUE 55053
55015: LD_INT 13
55017: DOUBLE
55018: EQUAL
55019: IFTRUE 55053
55021: LD_INT 12
55023: DOUBLE
55024: EQUAL
55025: IFTRUE 55053
55027: LD_INT 15
55029: DOUBLE
55030: EQUAL
55031: IFTRUE 55053
55033: LD_INT 11
55035: DOUBLE
55036: EQUAL
55037: IFTRUE 55053
55039: LD_INT 14
55041: DOUBLE
55042: EQUAL
55043: IFTRUE 55053
55045: LD_INT 10
55047: DOUBLE
55048: EQUAL
55049: IFTRUE 55053
55051: GO 55109
55053: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
55054: LD_ADDR_VAR 0 9
55058: PUSH
55059: LD_VAR 0 41
55063: PUSH
55064: LD_VAR 0 42
55068: PUSH
55069: LD_VAR 0 43
55073: PUSH
55074: LD_VAR 0 44
55078: PUSH
55079: LD_VAR 0 45
55083: PUSH
55084: LD_VAR 0 46
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: PUSH
55097: LD_VAR 0 4
55101: PUSH
55102: LD_INT 1
55104: PLUS
55105: ARRAY
55106: ST_TO_ADDR
55107: GO 55362
55109: LD_INT 36
55111: DOUBLE
55112: EQUAL
55113: IFTRUE 55117
55115: GO 55173
55117: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55118: LD_ADDR_VAR 0 9
55122: PUSH
55123: LD_VAR 0 47
55127: PUSH
55128: LD_VAR 0 48
55132: PUSH
55133: LD_VAR 0 49
55137: PUSH
55138: LD_VAR 0 50
55142: PUSH
55143: LD_VAR 0 51
55147: PUSH
55148: LD_VAR 0 52
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: PUSH
55161: LD_VAR 0 4
55165: PUSH
55166: LD_INT 1
55168: PLUS
55169: ARRAY
55170: ST_TO_ADDR
55171: GO 55362
55173: LD_INT 4
55175: DOUBLE
55176: EQUAL
55177: IFTRUE 55199
55179: LD_INT 5
55181: DOUBLE
55182: EQUAL
55183: IFTRUE 55199
55185: LD_INT 34
55187: DOUBLE
55188: EQUAL
55189: IFTRUE 55199
55191: LD_INT 37
55193: DOUBLE
55194: EQUAL
55195: IFTRUE 55199
55197: GO 55255
55199: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55200: LD_ADDR_VAR 0 9
55204: PUSH
55205: LD_VAR 0 53
55209: PUSH
55210: LD_VAR 0 54
55214: PUSH
55215: LD_VAR 0 55
55219: PUSH
55220: LD_VAR 0 56
55224: PUSH
55225: LD_VAR 0 57
55229: PUSH
55230: LD_VAR 0 58
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: PUSH
55243: LD_VAR 0 4
55247: PUSH
55248: LD_INT 1
55250: PLUS
55251: ARRAY
55252: ST_TO_ADDR
55253: GO 55362
55255: LD_INT 31
55257: DOUBLE
55258: EQUAL
55259: IFTRUE 55305
55261: LD_INT 32
55263: DOUBLE
55264: EQUAL
55265: IFTRUE 55305
55267: LD_INT 33
55269: DOUBLE
55270: EQUAL
55271: IFTRUE 55305
55273: LD_INT 27
55275: DOUBLE
55276: EQUAL
55277: IFTRUE 55305
55279: LD_INT 26
55281: DOUBLE
55282: EQUAL
55283: IFTRUE 55305
55285: LD_INT 28
55287: DOUBLE
55288: EQUAL
55289: IFTRUE 55305
55291: LD_INT 29
55293: DOUBLE
55294: EQUAL
55295: IFTRUE 55305
55297: LD_INT 30
55299: DOUBLE
55300: EQUAL
55301: IFTRUE 55305
55303: GO 55361
55305: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
55306: LD_ADDR_VAR 0 9
55310: PUSH
55311: LD_VAR 0 59
55315: PUSH
55316: LD_VAR 0 60
55320: PUSH
55321: LD_VAR 0 61
55325: PUSH
55326: LD_VAR 0 62
55330: PUSH
55331: LD_VAR 0 63
55335: PUSH
55336: LD_VAR 0 64
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: PUSH
55349: LD_VAR 0 4
55353: PUSH
55354: LD_INT 1
55356: PLUS
55357: ARRAY
55358: ST_TO_ADDR
55359: GO 55362
55361: POP
// temp_list2 = [ ] ;
55362: LD_ADDR_VAR 0 10
55366: PUSH
55367: EMPTY
55368: ST_TO_ADDR
// for i in temp_list do
55369: LD_ADDR_VAR 0 8
55373: PUSH
55374: LD_VAR 0 9
55378: PUSH
55379: FOR_IN
55380: IFFALSE 55432
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55382: LD_ADDR_VAR 0 10
55386: PUSH
55387: LD_VAR 0 10
55391: PUSH
55392: LD_VAR 0 8
55396: PUSH
55397: LD_INT 1
55399: ARRAY
55400: PUSH
55401: LD_VAR 0 2
55405: PLUS
55406: PUSH
55407: LD_VAR 0 8
55411: PUSH
55412: LD_INT 2
55414: ARRAY
55415: PUSH
55416: LD_VAR 0 3
55420: PLUS
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: ADD
55429: ST_TO_ADDR
55430: GO 55379
55432: POP
55433: POP
// result = temp_list2 ;
55434: LD_ADDR_VAR 0 7
55438: PUSH
55439: LD_VAR 0 10
55443: ST_TO_ADDR
// end ;
55444: LD_VAR 0 7
55448: RET
// export function EnemyInRange ( unit , dist ) ; begin
55449: LD_INT 0
55451: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55452: LD_ADDR_VAR 0 3
55456: PUSH
55457: LD_VAR 0 1
55461: PPUSH
55462: CALL_OW 255
55466: PPUSH
55467: LD_VAR 0 1
55471: PPUSH
55472: CALL_OW 250
55476: PPUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: CALL_OW 251
55486: PPUSH
55487: LD_VAR 0 2
55491: PPUSH
55492: CALL 29553 0 4
55496: PUSH
55497: LD_INT 4
55499: ARRAY
55500: ST_TO_ADDR
// end ;
55501: LD_VAR 0 3
55505: RET
// export function PlayerSeeMe ( unit ) ; begin
55506: LD_INT 0
55508: PPUSH
// result := See ( your_side , unit ) ;
55509: LD_ADDR_VAR 0 2
55513: PUSH
55514: LD_OWVAR 2
55518: PPUSH
55519: LD_VAR 0 1
55523: PPUSH
55524: CALL_OW 292
55528: ST_TO_ADDR
// end ;
55529: LD_VAR 0 2
55533: RET
// export function ReverseDir ( unit ) ; begin
55534: LD_INT 0
55536: PPUSH
// if not unit then
55537: LD_VAR 0 1
55541: NOT
55542: IFFALSE 55546
// exit ;
55544: GO 55569
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55546: LD_ADDR_VAR 0 2
55550: PUSH
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 254
55560: PUSH
55561: LD_INT 3
55563: PLUS
55564: PUSH
55565: LD_INT 6
55567: MOD
55568: ST_TO_ADDR
// end ;
55569: LD_VAR 0 2
55573: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55574: LD_INT 0
55576: PPUSH
55577: PPUSH
55578: PPUSH
55579: PPUSH
55580: PPUSH
// if not hexes then
55581: LD_VAR 0 2
55585: NOT
55586: IFFALSE 55590
// exit ;
55588: GO 55738
// dist := 9999 ;
55590: LD_ADDR_VAR 0 5
55594: PUSH
55595: LD_INT 9999
55597: ST_TO_ADDR
// for i = 1 to hexes do
55598: LD_ADDR_VAR 0 4
55602: PUSH
55603: DOUBLE
55604: LD_INT 1
55606: DEC
55607: ST_TO_ADDR
55608: LD_VAR 0 2
55612: PUSH
55613: FOR_TO
55614: IFFALSE 55726
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55616: LD_VAR 0 1
55620: PPUSH
55621: LD_VAR 0 2
55625: PUSH
55626: LD_VAR 0 4
55630: ARRAY
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PPUSH
55636: LD_VAR 0 2
55640: PUSH
55641: LD_VAR 0 4
55645: ARRAY
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PPUSH
55651: CALL_OW 297
55655: PUSH
55656: LD_VAR 0 5
55660: LESS
55661: IFFALSE 55724
// begin hex := hexes [ i ] ;
55663: LD_ADDR_VAR 0 7
55667: PUSH
55668: LD_VAR 0 2
55672: PUSH
55673: LD_VAR 0 4
55677: ARRAY
55678: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55679: LD_ADDR_VAR 0 5
55683: PUSH
55684: LD_VAR 0 1
55688: PPUSH
55689: LD_VAR 0 2
55693: PUSH
55694: LD_VAR 0 4
55698: ARRAY
55699: PUSH
55700: LD_INT 1
55702: ARRAY
55703: PPUSH
55704: LD_VAR 0 2
55708: PUSH
55709: LD_VAR 0 4
55713: ARRAY
55714: PUSH
55715: LD_INT 2
55717: ARRAY
55718: PPUSH
55719: CALL_OW 297
55723: ST_TO_ADDR
// end ; end ;
55724: GO 55613
55726: POP
55727: POP
// result := hex ;
55728: LD_ADDR_VAR 0 3
55732: PUSH
55733: LD_VAR 0 7
55737: ST_TO_ADDR
// end ;
55738: LD_VAR 0 3
55742: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55743: LD_INT 0
55745: PPUSH
55746: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55747: LD_VAR 0 1
55751: NOT
55752: PUSH
55753: LD_VAR 0 1
55757: PUSH
55758: LD_INT 21
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 23
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PPUSH
55782: CALL_OW 69
55786: IN
55787: NOT
55788: OR
55789: IFFALSE 55793
// exit ;
55791: GO 55840
// for i = 1 to 3 do
55793: LD_ADDR_VAR 0 3
55797: PUSH
55798: DOUBLE
55799: LD_INT 1
55801: DEC
55802: ST_TO_ADDR
55803: LD_INT 3
55805: PUSH
55806: FOR_TO
55807: IFFALSE 55838
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55809: LD_VAR 0 1
55813: PPUSH
55814: CALL_OW 250
55818: PPUSH
55819: LD_VAR 0 1
55823: PPUSH
55824: CALL_OW 251
55828: PPUSH
55829: LD_INT 1
55831: PPUSH
55832: CALL_OW 453
55836: GO 55806
55838: POP
55839: POP
// end ;
55840: LD_VAR 0 2
55844: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
55852: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55853: LD_VAR 0 1
55857: NOT
55858: PUSH
55859: LD_VAR 0 2
55863: NOT
55864: OR
55865: PUSH
55866: LD_VAR 0 1
55870: PPUSH
55871: CALL_OW 314
55875: OR
55876: IFFALSE 55880
// exit ;
55878: GO 56321
// x := GetX ( enemy_unit ) ;
55880: LD_ADDR_VAR 0 7
55884: PUSH
55885: LD_VAR 0 2
55889: PPUSH
55890: CALL_OW 250
55894: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55895: LD_ADDR_VAR 0 8
55899: PUSH
55900: LD_VAR 0 2
55904: PPUSH
55905: CALL_OW 251
55909: ST_TO_ADDR
// if not x or not y then
55910: LD_VAR 0 7
55914: NOT
55915: PUSH
55916: LD_VAR 0 8
55920: NOT
55921: OR
55922: IFFALSE 55926
// exit ;
55924: GO 56321
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55926: LD_ADDR_VAR 0 6
55930: PUSH
55931: LD_VAR 0 7
55935: PPUSH
55936: LD_INT 0
55938: PPUSH
55939: LD_INT 4
55941: PPUSH
55942: CALL_OW 272
55946: PUSH
55947: LD_VAR 0 8
55951: PPUSH
55952: LD_INT 0
55954: PPUSH
55955: LD_INT 4
55957: PPUSH
55958: CALL_OW 273
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_VAR 0 7
55971: PPUSH
55972: LD_INT 1
55974: PPUSH
55975: LD_INT 4
55977: PPUSH
55978: CALL_OW 272
55982: PUSH
55983: LD_VAR 0 8
55987: PPUSH
55988: LD_INT 1
55990: PPUSH
55991: LD_INT 4
55993: PPUSH
55994: CALL_OW 273
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_VAR 0 7
56007: PPUSH
56008: LD_INT 2
56010: PPUSH
56011: LD_INT 4
56013: PPUSH
56014: CALL_OW 272
56018: PUSH
56019: LD_VAR 0 8
56023: PPUSH
56024: LD_INT 2
56026: PPUSH
56027: LD_INT 4
56029: PPUSH
56030: CALL_OW 273
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_VAR 0 7
56043: PPUSH
56044: LD_INT 3
56046: PPUSH
56047: LD_INT 4
56049: PPUSH
56050: CALL_OW 272
56054: PUSH
56055: LD_VAR 0 8
56059: PPUSH
56060: LD_INT 3
56062: PPUSH
56063: LD_INT 4
56065: PPUSH
56066: CALL_OW 273
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_VAR 0 7
56079: PPUSH
56080: LD_INT 4
56082: PPUSH
56083: LD_INT 4
56085: PPUSH
56086: CALL_OW 272
56090: PUSH
56091: LD_VAR 0 8
56095: PPUSH
56096: LD_INT 4
56098: PPUSH
56099: LD_INT 4
56101: PPUSH
56102: CALL_OW 273
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_VAR 0 7
56115: PPUSH
56116: LD_INT 5
56118: PPUSH
56119: LD_INT 4
56121: PPUSH
56122: CALL_OW 272
56126: PUSH
56127: LD_VAR 0 8
56131: PPUSH
56132: LD_INT 5
56134: PPUSH
56135: LD_INT 4
56137: PPUSH
56138: CALL_OW 273
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// for i = tmp downto 1 do
56155: LD_ADDR_VAR 0 4
56159: PUSH
56160: DOUBLE
56161: LD_VAR 0 6
56165: INC
56166: ST_TO_ADDR
56167: LD_INT 1
56169: PUSH
56170: FOR_DOWNTO
56171: IFFALSE 56272
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56173: LD_VAR 0 6
56177: PUSH
56178: LD_VAR 0 4
56182: ARRAY
56183: PUSH
56184: LD_INT 1
56186: ARRAY
56187: PPUSH
56188: LD_VAR 0 6
56192: PUSH
56193: LD_VAR 0 4
56197: ARRAY
56198: PUSH
56199: LD_INT 2
56201: ARRAY
56202: PPUSH
56203: CALL_OW 488
56207: NOT
56208: PUSH
56209: LD_VAR 0 6
56213: PUSH
56214: LD_VAR 0 4
56218: ARRAY
56219: PUSH
56220: LD_INT 1
56222: ARRAY
56223: PPUSH
56224: LD_VAR 0 6
56228: PUSH
56229: LD_VAR 0 4
56233: ARRAY
56234: PUSH
56235: LD_INT 2
56237: ARRAY
56238: PPUSH
56239: CALL_OW 428
56243: PUSH
56244: LD_INT 0
56246: NONEQUAL
56247: OR
56248: IFFALSE 56270
// tmp := Delete ( tmp , i ) ;
56250: LD_ADDR_VAR 0 6
56254: PUSH
56255: LD_VAR 0 6
56259: PPUSH
56260: LD_VAR 0 4
56264: PPUSH
56265: CALL_OW 3
56269: ST_TO_ADDR
56270: GO 56170
56272: POP
56273: POP
// j := GetClosestHex ( unit , tmp ) ;
56274: LD_ADDR_VAR 0 5
56278: PUSH
56279: LD_VAR 0 1
56283: PPUSH
56284: LD_VAR 0 6
56288: PPUSH
56289: CALL 55574 0 2
56293: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56294: LD_VAR 0 1
56298: PPUSH
56299: LD_VAR 0 5
56303: PUSH
56304: LD_INT 1
56306: ARRAY
56307: PPUSH
56308: LD_VAR 0 5
56312: PUSH
56313: LD_INT 2
56315: ARRAY
56316: PPUSH
56317: CALL_OW 111
// end ;
56321: LD_VAR 0 3
56325: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
56330: PPUSH
// uc_side = 0 ;
56331: LD_ADDR_OWVAR 20
56335: PUSH
56336: LD_INT 0
56338: ST_TO_ADDR
// uc_nation = 0 ;
56339: LD_ADDR_OWVAR 21
56343: PUSH
56344: LD_INT 0
56346: ST_TO_ADDR
// InitHc ;
56347: CALL_OW 19
// InitVc ;
56351: CALL_OW 20
// if mastodonts then
56355: LD_VAR 0 6
56359: IFFALSE 56426
// for i = 1 to mastodonts do
56361: LD_ADDR_VAR 0 11
56365: PUSH
56366: DOUBLE
56367: LD_INT 1
56369: DEC
56370: ST_TO_ADDR
56371: LD_VAR 0 6
56375: PUSH
56376: FOR_TO
56377: IFFALSE 56424
// begin vc_chassis := 31 ;
56379: LD_ADDR_OWVAR 37
56383: PUSH
56384: LD_INT 31
56386: ST_TO_ADDR
// vc_control := control_rider ;
56387: LD_ADDR_OWVAR 38
56391: PUSH
56392: LD_INT 4
56394: ST_TO_ADDR
// animal := CreateVehicle ;
56395: LD_ADDR_VAR 0 12
56399: PUSH
56400: CALL_OW 45
56404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56405: LD_VAR 0 12
56409: PPUSH
56410: LD_VAR 0 8
56414: PPUSH
56415: LD_INT 0
56417: PPUSH
56418: CALL 58495 0 3
// end ;
56422: GO 56376
56424: POP
56425: POP
// if horses then
56426: LD_VAR 0 5
56430: IFFALSE 56497
// for i = 1 to horses do
56432: LD_ADDR_VAR 0 11
56436: PUSH
56437: DOUBLE
56438: LD_INT 1
56440: DEC
56441: ST_TO_ADDR
56442: LD_VAR 0 5
56446: PUSH
56447: FOR_TO
56448: IFFALSE 56495
// begin hc_class := 21 ;
56450: LD_ADDR_OWVAR 28
56454: PUSH
56455: LD_INT 21
56457: ST_TO_ADDR
// hc_gallery :=  ;
56458: LD_ADDR_OWVAR 33
56462: PUSH
56463: LD_STRING 
56465: ST_TO_ADDR
// animal := CreateHuman ;
56466: LD_ADDR_VAR 0 12
56470: PUSH
56471: CALL_OW 44
56475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56476: LD_VAR 0 12
56480: PPUSH
56481: LD_VAR 0 8
56485: PPUSH
56486: LD_INT 0
56488: PPUSH
56489: CALL 58495 0 3
// end ;
56493: GO 56447
56495: POP
56496: POP
// if birds then
56497: LD_VAR 0 1
56501: IFFALSE 56568
// for i = 1 to birds do
56503: LD_ADDR_VAR 0 11
56507: PUSH
56508: DOUBLE
56509: LD_INT 1
56511: DEC
56512: ST_TO_ADDR
56513: LD_VAR 0 1
56517: PUSH
56518: FOR_TO
56519: IFFALSE 56566
// begin hc_class = 18 ;
56521: LD_ADDR_OWVAR 28
56525: PUSH
56526: LD_INT 18
56528: ST_TO_ADDR
// hc_gallery =  ;
56529: LD_ADDR_OWVAR 33
56533: PUSH
56534: LD_STRING 
56536: ST_TO_ADDR
// animal := CreateHuman ;
56537: LD_ADDR_VAR 0 12
56541: PUSH
56542: CALL_OW 44
56546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56547: LD_VAR 0 12
56551: PPUSH
56552: LD_VAR 0 8
56556: PPUSH
56557: LD_INT 0
56559: PPUSH
56560: CALL 58495 0 3
// end ;
56564: GO 56518
56566: POP
56567: POP
// if tigers then
56568: LD_VAR 0 2
56572: IFFALSE 56656
// for i = 1 to tigers do
56574: LD_ADDR_VAR 0 11
56578: PUSH
56579: DOUBLE
56580: LD_INT 1
56582: DEC
56583: ST_TO_ADDR
56584: LD_VAR 0 2
56588: PUSH
56589: FOR_TO
56590: IFFALSE 56654
// begin hc_class = class_tiger ;
56592: LD_ADDR_OWVAR 28
56596: PUSH
56597: LD_INT 14
56599: ST_TO_ADDR
// hc_gallery =  ;
56600: LD_ADDR_OWVAR 33
56604: PUSH
56605: LD_STRING 
56607: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56608: LD_ADDR_OWVAR 35
56612: PUSH
56613: LD_INT 7
56615: NEG
56616: PPUSH
56617: LD_INT 7
56619: PPUSH
56620: CALL_OW 12
56624: ST_TO_ADDR
// animal := CreateHuman ;
56625: LD_ADDR_VAR 0 12
56629: PUSH
56630: CALL_OW 44
56634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56635: LD_VAR 0 12
56639: PPUSH
56640: LD_VAR 0 8
56644: PPUSH
56645: LD_INT 0
56647: PPUSH
56648: CALL 58495 0 3
// end ;
56652: GO 56589
56654: POP
56655: POP
// if apemans then
56656: LD_VAR 0 3
56660: IFFALSE 56783
// for i = 1 to apemans do
56662: LD_ADDR_VAR 0 11
56666: PUSH
56667: DOUBLE
56668: LD_INT 1
56670: DEC
56671: ST_TO_ADDR
56672: LD_VAR 0 3
56676: PUSH
56677: FOR_TO
56678: IFFALSE 56781
// begin hc_class = class_apeman ;
56680: LD_ADDR_OWVAR 28
56684: PUSH
56685: LD_INT 12
56687: ST_TO_ADDR
// hc_gallery =  ;
56688: LD_ADDR_OWVAR 33
56692: PUSH
56693: LD_STRING 
56695: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56696: LD_ADDR_OWVAR 35
56700: PUSH
56701: LD_INT 5
56703: NEG
56704: PPUSH
56705: LD_INT 5
56707: PPUSH
56708: CALL_OW 12
56712: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56713: LD_ADDR_OWVAR 31
56717: PUSH
56718: LD_INT 1
56720: PPUSH
56721: LD_INT 3
56723: PPUSH
56724: CALL_OW 12
56728: PUSH
56729: LD_INT 1
56731: PPUSH
56732: LD_INT 3
56734: PPUSH
56735: CALL_OW 12
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// animal := CreateHuman ;
56752: LD_ADDR_VAR 0 12
56756: PUSH
56757: CALL_OW 44
56761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56762: LD_VAR 0 12
56766: PPUSH
56767: LD_VAR 0 8
56771: PPUSH
56772: LD_INT 0
56774: PPUSH
56775: CALL 58495 0 3
// end ;
56779: GO 56677
56781: POP
56782: POP
// if enchidnas then
56783: LD_VAR 0 4
56787: IFFALSE 56854
// for i = 1 to enchidnas do
56789: LD_ADDR_VAR 0 11
56793: PUSH
56794: DOUBLE
56795: LD_INT 1
56797: DEC
56798: ST_TO_ADDR
56799: LD_VAR 0 4
56803: PUSH
56804: FOR_TO
56805: IFFALSE 56852
// begin hc_class = 13 ;
56807: LD_ADDR_OWVAR 28
56811: PUSH
56812: LD_INT 13
56814: ST_TO_ADDR
// hc_gallery =  ;
56815: LD_ADDR_OWVAR 33
56819: PUSH
56820: LD_STRING 
56822: ST_TO_ADDR
// animal := CreateHuman ;
56823: LD_ADDR_VAR 0 12
56827: PUSH
56828: CALL_OW 44
56832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56833: LD_VAR 0 12
56837: PPUSH
56838: LD_VAR 0 8
56842: PPUSH
56843: LD_INT 0
56845: PPUSH
56846: CALL 58495 0 3
// end ;
56850: GO 56804
56852: POP
56853: POP
// if fishes then
56854: LD_VAR 0 7
56858: IFFALSE 56925
// for i = 1 to fishes do
56860: LD_ADDR_VAR 0 11
56864: PUSH
56865: DOUBLE
56866: LD_INT 1
56868: DEC
56869: ST_TO_ADDR
56870: LD_VAR 0 7
56874: PUSH
56875: FOR_TO
56876: IFFALSE 56923
// begin hc_class = 20 ;
56878: LD_ADDR_OWVAR 28
56882: PUSH
56883: LD_INT 20
56885: ST_TO_ADDR
// hc_gallery =  ;
56886: LD_ADDR_OWVAR 33
56890: PUSH
56891: LD_STRING 
56893: ST_TO_ADDR
// animal := CreateHuman ;
56894: LD_ADDR_VAR 0 12
56898: PUSH
56899: CALL_OW 44
56903: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56904: LD_VAR 0 12
56908: PPUSH
56909: LD_VAR 0 9
56913: PPUSH
56914: LD_INT 0
56916: PPUSH
56917: CALL 58495 0 3
// end ;
56921: GO 56875
56923: POP
56924: POP
// end ;
56925: LD_VAR 0 10
56929: RET
// export function WantHeal ( sci , unit ) ; begin
56930: LD_INT 0
56932: PPUSH
// if GetTaskList ( sci ) > 0 then
56933: LD_VAR 0 1
56937: PPUSH
56938: CALL_OW 437
56942: PUSH
56943: LD_INT 0
56945: GREATER
56946: IFFALSE 57016
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56948: LD_VAR 0 1
56952: PPUSH
56953: CALL_OW 437
56957: PUSH
56958: LD_INT 1
56960: ARRAY
56961: PUSH
56962: LD_INT 1
56964: ARRAY
56965: PUSH
56966: LD_STRING l
56968: EQUAL
56969: PUSH
56970: LD_VAR 0 1
56974: PPUSH
56975: CALL_OW 437
56979: PUSH
56980: LD_INT 1
56982: ARRAY
56983: PUSH
56984: LD_INT 4
56986: ARRAY
56987: PUSH
56988: LD_VAR 0 2
56992: EQUAL
56993: AND
56994: IFFALSE 57006
// result := true else
56996: LD_ADDR_VAR 0 3
57000: PUSH
57001: LD_INT 1
57003: ST_TO_ADDR
57004: GO 57014
// result := false ;
57006: LD_ADDR_VAR 0 3
57010: PUSH
57011: LD_INT 0
57013: ST_TO_ADDR
// end else
57014: GO 57024
// result := false ;
57016: LD_ADDR_VAR 0 3
57020: PUSH
57021: LD_INT 0
57023: ST_TO_ADDR
// end ;
57024: LD_VAR 0 3
57028: RET
// export function HealTarget ( sci ) ; begin
57029: LD_INT 0
57031: PPUSH
// if not sci then
57032: LD_VAR 0 1
57036: NOT
57037: IFFALSE 57041
// exit ;
57039: GO 57106
// result := 0 ;
57041: LD_ADDR_VAR 0 2
57045: PUSH
57046: LD_INT 0
57048: ST_TO_ADDR
// if GetTaskList ( sci ) then
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL_OW 437
57058: IFFALSE 57106
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57060: LD_VAR 0 1
57064: PPUSH
57065: CALL_OW 437
57069: PUSH
57070: LD_INT 1
57072: ARRAY
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PUSH
57078: LD_STRING l
57080: EQUAL
57081: IFFALSE 57106
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57083: LD_ADDR_VAR 0 2
57087: PUSH
57088: LD_VAR 0 1
57092: PPUSH
57093: CALL_OW 437
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: PUSH
57102: LD_INT 4
57104: ARRAY
57105: ST_TO_ADDR
// end ;
57106: LD_VAR 0 2
57110: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57111: LD_INT 0
57113: PPUSH
57114: PPUSH
57115: PPUSH
57116: PPUSH
// if not base_units then
57117: LD_VAR 0 1
57121: NOT
57122: IFFALSE 57126
// exit ;
57124: GO 57213
// result := false ;
57126: LD_ADDR_VAR 0 2
57130: PUSH
57131: LD_INT 0
57133: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57134: LD_ADDR_VAR 0 5
57138: PUSH
57139: LD_VAR 0 1
57143: PPUSH
57144: LD_INT 21
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PPUSH
57154: CALL_OW 72
57158: ST_TO_ADDR
// if not tmp then
57159: LD_VAR 0 5
57163: NOT
57164: IFFALSE 57168
// exit ;
57166: GO 57213
// for i in tmp do
57168: LD_ADDR_VAR 0 3
57172: PUSH
57173: LD_VAR 0 5
57177: PUSH
57178: FOR_IN
57179: IFFALSE 57211
// begin result := EnemyInRange ( i , 22 ) ;
57181: LD_ADDR_VAR 0 2
57185: PUSH
57186: LD_VAR 0 3
57190: PPUSH
57191: LD_INT 22
57193: PPUSH
57194: CALL 55449 0 2
57198: ST_TO_ADDR
// if result then
57199: LD_VAR 0 2
57203: IFFALSE 57209
// exit ;
57205: POP
57206: POP
57207: GO 57213
// end ;
57209: GO 57178
57211: POP
57212: POP
// end ;
57213: LD_VAR 0 2
57217: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57218: LD_INT 0
57220: PPUSH
57221: PPUSH
// if not units then
57222: LD_VAR 0 1
57226: NOT
57227: IFFALSE 57231
// exit ;
57229: GO 57301
// result := [ ] ;
57231: LD_ADDR_VAR 0 3
57235: PUSH
57236: EMPTY
57237: ST_TO_ADDR
// for i in units do
57238: LD_ADDR_VAR 0 4
57242: PUSH
57243: LD_VAR 0 1
57247: PUSH
57248: FOR_IN
57249: IFFALSE 57299
// if GetTag ( i ) = tag then
57251: LD_VAR 0 4
57255: PPUSH
57256: CALL_OW 110
57260: PUSH
57261: LD_VAR 0 2
57265: EQUAL
57266: IFFALSE 57297
// result := Insert ( result , result + 1 , i ) ;
57268: LD_ADDR_VAR 0 3
57272: PUSH
57273: LD_VAR 0 3
57277: PPUSH
57278: LD_VAR 0 3
57282: PUSH
57283: LD_INT 1
57285: PLUS
57286: PPUSH
57287: LD_VAR 0 4
57291: PPUSH
57292: CALL_OW 2
57296: ST_TO_ADDR
57297: GO 57248
57299: POP
57300: POP
// end ;
57301: LD_VAR 0 3
57305: RET
// export function IsDriver ( un ) ; begin
57306: LD_INT 0
57308: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57309: LD_ADDR_VAR 0 2
57313: PUSH
57314: LD_VAR 0 1
57318: PUSH
57319: LD_INT 55
57321: PUSH
57322: EMPTY
57323: LIST
57324: PPUSH
57325: CALL_OW 69
57329: IN
57330: ST_TO_ADDR
// end ;
57331: LD_VAR 0 2
57335: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57336: LD_INT 0
57338: PPUSH
57339: PPUSH
// list := [ ] ;
57340: LD_ADDR_VAR 0 5
57344: PUSH
57345: EMPTY
57346: ST_TO_ADDR
// case d of 0 :
57347: LD_VAR 0 3
57351: PUSH
57352: LD_INT 0
57354: DOUBLE
57355: EQUAL
57356: IFTRUE 57360
57358: GO 57493
57360: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57361: LD_ADDR_VAR 0 5
57365: PUSH
57366: LD_VAR 0 1
57370: PUSH
57371: LD_INT 4
57373: MINUS
57374: PUSH
57375: LD_VAR 0 2
57379: PUSH
57380: LD_INT 4
57382: MINUS
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: PUSH
57392: LD_VAR 0 1
57396: PUSH
57397: LD_INT 3
57399: MINUS
57400: PUSH
57401: LD_VAR 0 2
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: LIST
57413: PUSH
57414: LD_VAR 0 1
57418: PUSH
57419: LD_INT 4
57421: PLUS
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: LD_INT 4
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: PUSH
57436: LD_VAR 0 1
57440: PUSH
57441: LD_INT 3
57443: PLUS
57444: PUSH
57445: LD_VAR 0 2
57449: PUSH
57450: LD_INT 3
57452: PLUS
57453: PUSH
57454: LD_INT 5
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: PUSH
57462: LD_VAR 0 1
57466: PUSH
57467: LD_VAR 0 2
57471: PUSH
57472: LD_INT 4
57474: PLUS
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// end ; 1 :
57491: GO 58191
57493: LD_INT 1
57495: DOUBLE
57496: EQUAL
57497: IFTRUE 57501
57499: GO 57634
57501: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57502: LD_ADDR_VAR 0 5
57506: PUSH
57507: LD_VAR 0 1
57511: PUSH
57512: LD_VAR 0 2
57516: PUSH
57517: LD_INT 4
57519: MINUS
57520: PUSH
57521: LD_INT 3
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: PUSH
57529: LD_VAR 0 1
57533: PUSH
57534: LD_INT 3
57536: MINUS
57537: PUSH
57538: LD_VAR 0 2
57542: PUSH
57543: LD_INT 3
57545: MINUS
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: PUSH
57555: LD_VAR 0 1
57559: PUSH
57560: LD_INT 4
57562: MINUS
57563: PUSH
57564: LD_VAR 0 2
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: PUSH
57577: LD_VAR 0 1
57581: PUSH
57582: LD_VAR 0 2
57586: PUSH
57587: LD_INT 3
57589: PLUS
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: LD_VAR 0 1
57603: PUSH
57604: LD_INT 4
57606: PLUS
57607: PUSH
57608: LD_VAR 0 2
57612: PUSH
57613: LD_INT 4
57615: PLUS
57616: PUSH
57617: LD_INT 5
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// end ; 2 :
57632: GO 58191
57634: LD_INT 2
57636: DOUBLE
57637: EQUAL
57638: IFTRUE 57642
57640: GO 57771
57642: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57643: LD_ADDR_VAR 0 5
57647: PUSH
57648: LD_VAR 0 1
57652: PUSH
57653: LD_VAR 0 2
57657: PUSH
57658: LD_INT 3
57660: MINUS
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: PUSH
57670: LD_VAR 0 1
57674: PUSH
57675: LD_INT 4
57677: PLUS
57678: PUSH
57679: LD_VAR 0 2
57683: PUSH
57684: LD_INT 4
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: PUSH
57692: LD_VAR 0 1
57696: PUSH
57697: LD_VAR 0 2
57701: PUSH
57702: LD_INT 4
57704: PLUS
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: PUSH
57714: LD_VAR 0 1
57718: PUSH
57719: LD_INT 3
57721: MINUS
57722: PUSH
57723: LD_VAR 0 2
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: PUSH
57736: LD_VAR 0 1
57740: PUSH
57741: LD_INT 4
57743: MINUS
57744: PUSH
57745: LD_VAR 0 2
57749: PUSH
57750: LD_INT 4
57752: MINUS
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// end ; 3 :
57769: GO 58191
57771: LD_INT 3
57773: DOUBLE
57774: EQUAL
57775: IFTRUE 57779
57777: GO 57912
57779: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57780: LD_ADDR_VAR 0 5
57784: PUSH
57785: LD_VAR 0 1
57789: PUSH
57790: LD_INT 3
57792: PLUS
57793: PUSH
57794: LD_VAR 0 2
57798: PUSH
57799: LD_INT 4
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: PUSH
57807: LD_VAR 0 1
57811: PUSH
57812: LD_INT 4
57814: PLUS
57815: PUSH
57816: LD_VAR 0 2
57820: PUSH
57821: LD_INT 4
57823: PLUS
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: PUSH
57833: LD_VAR 0 1
57837: PUSH
57838: LD_INT 4
57840: MINUS
57841: PUSH
57842: LD_VAR 0 2
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: PUSH
57855: LD_VAR 0 1
57859: PUSH
57860: LD_VAR 0 2
57864: PUSH
57865: LD_INT 4
57867: MINUS
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: PUSH
57877: LD_VAR 0 1
57881: PUSH
57882: LD_INT 3
57884: MINUS
57885: PUSH
57886: LD_VAR 0 2
57890: PUSH
57891: LD_INT 3
57893: MINUS
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// end ; 4 :
57910: GO 58191
57912: LD_INT 4
57914: DOUBLE
57915: EQUAL
57916: IFTRUE 57920
57918: GO 58053
57920: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57921: LD_ADDR_VAR 0 5
57925: PUSH
57926: LD_VAR 0 1
57930: PUSH
57931: LD_VAR 0 2
57935: PUSH
57936: LD_INT 4
57938: PLUS
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: PUSH
57948: LD_VAR 0 1
57952: PUSH
57953: LD_INT 3
57955: PLUS
57956: PUSH
57957: LD_VAR 0 2
57961: PUSH
57962: LD_INT 3
57964: PLUS
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: LD_VAR 0 1
57978: PUSH
57979: LD_INT 4
57981: PLUS
57982: PUSH
57983: LD_VAR 0 2
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 1
58000: PUSH
58001: LD_VAR 0 2
58005: PUSH
58006: LD_INT 3
58008: MINUS
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: PUSH
58018: LD_VAR 0 1
58022: PUSH
58023: LD_INT 4
58025: MINUS
58026: PUSH
58027: LD_VAR 0 2
58031: PUSH
58032: LD_INT 4
58034: MINUS
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// end ; 5 :
58051: GO 58191
58053: LD_INT 5
58055: DOUBLE
58056: EQUAL
58057: IFTRUE 58061
58059: GO 58190
58061: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58062: LD_ADDR_VAR 0 5
58066: PUSH
58067: LD_VAR 0 1
58071: PUSH
58072: LD_INT 4
58074: MINUS
58075: PUSH
58076: LD_VAR 0 2
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: PUSH
58089: LD_VAR 0 1
58093: PUSH
58094: LD_VAR 0 2
58098: PUSH
58099: LD_INT 4
58101: MINUS
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: PUSH
58111: LD_VAR 0 1
58115: PUSH
58116: LD_INT 4
58118: PLUS
58119: PUSH
58120: LD_VAR 0 2
58124: PUSH
58125: LD_INT 4
58127: PLUS
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: PUSH
58137: LD_VAR 0 1
58141: PUSH
58142: LD_INT 3
58144: PLUS
58145: PUSH
58146: LD_VAR 0 2
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: PUSH
58159: LD_VAR 0 1
58163: PUSH
58164: LD_VAR 0 2
58168: PUSH
58169: LD_INT 3
58171: PLUS
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: ST_TO_ADDR
// end ; end ;
58188: GO 58191
58190: POP
// result := list ;
58191: LD_ADDR_VAR 0 4
58195: PUSH
58196: LD_VAR 0 5
58200: ST_TO_ADDR
// end ;
58201: LD_VAR 0 4
58205: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58206: LD_INT 0
58208: PPUSH
58209: PPUSH
58210: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58211: LD_VAR 0 1
58215: NOT
58216: PUSH
58217: LD_VAR 0 2
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: LD_INT 4
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: IN
58240: NOT
58241: OR
58242: IFFALSE 58246
// exit ;
58244: GO 58338
// tmp := [ ] ;
58246: LD_ADDR_VAR 0 5
58250: PUSH
58251: EMPTY
58252: ST_TO_ADDR
// for i in units do
58253: LD_ADDR_VAR 0 4
58257: PUSH
58258: LD_VAR 0 1
58262: PUSH
58263: FOR_IN
58264: IFFALSE 58307
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58266: LD_ADDR_VAR 0 5
58270: PUSH
58271: LD_VAR 0 5
58275: PPUSH
58276: LD_VAR 0 5
58280: PUSH
58281: LD_INT 1
58283: PLUS
58284: PPUSH
58285: LD_VAR 0 4
58289: PPUSH
58290: LD_VAR 0 2
58294: PPUSH
58295: CALL_OW 259
58299: PPUSH
58300: CALL_OW 2
58304: ST_TO_ADDR
58305: GO 58263
58307: POP
58308: POP
// if not tmp then
58309: LD_VAR 0 5
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58338
// result := SortListByListDesc ( units , tmp ) ;
58318: LD_ADDR_VAR 0 3
58322: PUSH
58323: LD_VAR 0 1
58327: PPUSH
58328: LD_VAR 0 5
58332: PPUSH
58333: CALL_OW 77
58337: ST_TO_ADDR
// end ;
58338: LD_VAR 0 3
58342: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58343: LD_INT 0
58345: PPUSH
58346: PPUSH
58347: PPUSH
// x := GetX ( building ) ;
58348: LD_ADDR_VAR 0 4
58352: PUSH
58353: LD_VAR 0 2
58357: PPUSH
58358: CALL_OW 250
58362: ST_TO_ADDR
// y := GetY ( building ) ;
58363: LD_ADDR_VAR 0 5
58367: PUSH
58368: LD_VAR 0 2
58372: PPUSH
58373: CALL_OW 251
58377: ST_TO_ADDR
// if GetTaskList ( unit ) then
58378: LD_VAR 0 1
58382: PPUSH
58383: CALL_OW 437
58387: IFFALSE 58482
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58389: LD_STRING e
58391: PUSH
58392: LD_VAR 0 1
58396: PPUSH
58397: CALL_OW 437
58401: PUSH
58402: LD_INT 1
58404: ARRAY
58405: PUSH
58406: LD_INT 1
58408: ARRAY
58409: EQUAL
58410: PUSH
58411: LD_VAR 0 4
58415: PUSH
58416: LD_VAR 0 1
58420: PPUSH
58421: CALL_OW 437
58425: PUSH
58426: LD_INT 1
58428: ARRAY
58429: PUSH
58430: LD_INT 2
58432: ARRAY
58433: EQUAL
58434: AND
58435: PUSH
58436: LD_VAR 0 5
58440: PUSH
58441: LD_VAR 0 1
58445: PPUSH
58446: CALL_OW 437
58450: PUSH
58451: LD_INT 1
58453: ARRAY
58454: PUSH
58455: LD_INT 3
58457: ARRAY
58458: EQUAL
58459: AND
58460: IFFALSE 58472
// result := true else
58462: LD_ADDR_VAR 0 3
58466: PUSH
58467: LD_INT 1
58469: ST_TO_ADDR
58470: GO 58480
// result := false ;
58472: LD_ADDR_VAR 0 3
58476: PUSH
58477: LD_INT 0
58479: ST_TO_ADDR
// end else
58480: GO 58490
// result := false ;
58482: LD_ADDR_VAR 0 3
58486: PUSH
58487: LD_INT 0
58489: ST_TO_ADDR
// end ;
58490: LD_VAR 0 3
58494: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58495: LD_INT 0
58497: PPUSH
58498: PPUSH
58499: PPUSH
58500: PPUSH
// if not unit or not area then
58501: LD_VAR 0 1
58505: NOT
58506: PUSH
58507: LD_VAR 0 2
58511: NOT
58512: OR
58513: IFFALSE 58517
// exit ;
58515: GO 58681
// tmp := AreaToList ( area , i ) ;
58517: LD_ADDR_VAR 0 6
58521: PUSH
58522: LD_VAR 0 2
58526: PPUSH
58527: LD_VAR 0 5
58531: PPUSH
58532: CALL_OW 517
58536: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58537: LD_ADDR_VAR 0 5
58541: PUSH
58542: DOUBLE
58543: LD_INT 1
58545: DEC
58546: ST_TO_ADDR
58547: LD_VAR 0 6
58551: PUSH
58552: LD_INT 1
58554: ARRAY
58555: PUSH
58556: FOR_TO
58557: IFFALSE 58679
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58559: LD_ADDR_VAR 0 7
58563: PUSH
58564: LD_VAR 0 6
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_VAR 0 5
58577: ARRAY
58578: PUSH
58579: LD_VAR 0 6
58583: PUSH
58584: LD_INT 2
58586: ARRAY
58587: PUSH
58588: LD_VAR 0 5
58592: ARRAY
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58598: LD_VAR 0 7
58602: PUSH
58603: LD_INT 1
58605: ARRAY
58606: PPUSH
58607: LD_VAR 0 7
58611: PUSH
58612: LD_INT 2
58614: ARRAY
58615: PPUSH
58616: CALL_OW 428
58620: PUSH
58621: LD_INT 0
58623: EQUAL
58624: IFFALSE 58677
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58626: LD_VAR 0 1
58630: PPUSH
58631: LD_VAR 0 7
58635: PUSH
58636: LD_INT 1
58638: ARRAY
58639: PPUSH
58640: LD_VAR 0 7
58644: PUSH
58645: LD_INT 2
58647: ARRAY
58648: PPUSH
58649: LD_VAR 0 3
58653: PPUSH
58654: CALL_OW 48
// result := IsPlaced ( unit ) ;
58658: LD_ADDR_VAR 0 4
58662: PUSH
58663: LD_VAR 0 1
58667: PPUSH
58668: CALL_OW 305
58672: ST_TO_ADDR
// exit ;
58673: POP
58674: POP
58675: GO 58681
// end ; end ;
58677: GO 58556
58679: POP
58680: POP
// end ;
58681: LD_VAR 0 4
58685: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58686: LD_INT 0
58688: PPUSH
58689: PPUSH
58690: PPUSH
// if not side or side > 8 then
58691: LD_VAR 0 1
58695: NOT
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_INT 8
58704: GREATER
58705: OR
58706: IFFALSE 58710
// exit ;
58708: GO 58897
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58710: LD_ADDR_VAR 0 4
58714: PUSH
58715: LD_INT 22
58717: PUSH
58718: LD_VAR 0 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 21
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PPUSH
58741: CALL_OW 69
58745: ST_TO_ADDR
// if not tmp then
58746: LD_VAR 0 4
58750: NOT
58751: IFFALSE 58755
// exit ;
58753: GO 58897
// enable_addtolog := true ;
58755: LD_ADDR_OWVAR 81
58759: PUSH
58760: LD_INT 1
58762: ST_TO_ADDR
// AddToLog ( [ ) ;
58763: LD_STRING [
58765: PPUSH
58766: CALL_OW 561
// for i in tmp do
58770: LD_ADDR_VAR 0 3
58774: PUSH
58775: LD_VAR 0 4
58779: PUSH
58780: FOR_IN
58781: IFFALSE 58888
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58783: LD_STRING [
58785: PUSH
58786: LD_VAR 0 3
58790: PPUSH
58791: CALL_OW 266
58795: STR
58796: PUSH
58797: LD_STRING , 
58799: STR
58800: PUSH
58801: LD_VAR 0 3
58805: PPUSH
58806: CALL_OW 250
58810: STR
58811: PUSH
58812: LD_STRING , 
58814: STR
58815: PUSH
58816: LD_VAR 0 3
58820: PPUSH
58821: CALL_OW 251
58825: STR
58826: PUSH
58827: LD_STRING , 
58829: STR
58830: PUSH
58831: LD_VAR 0 3
58835: PPUSH
58836: CALL_OW 254
58840: STR
58841: PUSH
58842: LD_STRING , 
58844: STR
58845: PUSH
58846: LD_VAR 0 3
58850: PPUSH
58851: LD_INT 1
58853: PPUSH
58854: CALL_OW 268
58858: STR
58859: PUSH
58860: LD_STRING , 
58862: STR
58863: PUSH
58864: LD_VAR 0 3
58868: PPUSH
58869: LD_INT 2
58871: PPUSH
58872: CALL_OW 268
58876: STR
58877: PUSH
58878: LD_STRING ],
58880: STR
58881: PPUSH
58882: CALL_OW 561
// end ;
58886: GO 58780
58888: POP
58889: POP
// AddToLog ( ]; ) ;
58890: LD_STRING ];
58892: PPUSH
58893: CALL_OW 561
// end ;
58897: LD_VAR 0 2
58901: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58902: LD_INT 0
58904: PPUSH
58905: PPUSH
58906: PPUSH
58907: PPUSH
58908: PPUSH
// if not area or not rate or not max then
58909: LD_VAR 0 1
58913: NOT
58914: PUSH
58915: LD_VAR 0 2
58919: NOT
58920: OR
58921: PUSH
58922: LD_VAR 0 4
58926: NOT
58927: OR
58928: IFFALSE 58932
// exit ;
58930: GO 59124
// while 1 do
58932: LD_INT 1
58934: IFFALSE 59124
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58936: LD_ADDR_VAR 0 9
58940: PUSH
58941: LD_VAR 0 1
58945: PPUSH
58946: LD_INT 1
58948: PPUSH
58949: CALL_OW 287
58953: PUSH
58954: LD_INT 10
58956: MUL
58957: ST_TO_ADDR
// r := rate / 10 ;
58958: LD_ADDR_VAR 0 7
58962: PUSH
58963: LD_VAR 0 2
58967: PUSH
58968: LD_INT 10
58970: DIVREAL
58971: ST_TO_ADDR
// time := 1 1$00 ;
58972: LD_ADDR_VAR 0 8
58976: PUSH
58977: LD_INT 2100
58979: ST_TO_ADDR
// if amount < min then
58980: LD_VAR 0 9
58984: PUSH
58985: LD_VAR 0 3
58989: LESS
58990: IFFALSE 59008
// r := r * 2 else
58992: LD_ADDR_VAR 0 7
58996: PUSH
58997: LD_VAR 0 7
59001: PUSH
59002: LD_INT 2
59004: MUL
59005: ST_TO_ADDR
59006: GO 59034
// if amount > max then
59008: LD_VAR 0 9
59012: PUSH
59013: LD_VAR 0 4
59017: GREATER
59018: IFFALSE 59034
// r := r / 2 ;
59020: LD_ADDR_VAR 0 7
59024: PUSH
59025: LD_VAR 0 7
59029: PUSH
59030: LD_INT 2
59032: DIVREAL
59033: ST_TO_ADDR
// time := time / r ;
59034: LD_ADDR_VAR 0 8
59038: PUSH
59039: LD_VAR 0 8
59043: PUSH
59044: LD_VAR 0 7
59048: DIVREAL
59049: ST_TO_ADDR
// if time < 0 then
59050: LD_VAR 0 8
59054: PUSH
59055: LD_INT 0
59057: LESS
59058: IFFALSE 59075
// time := time * - 1 ;
59060: LD_ADDR_VAR 0 8
59064: PUSH
59065: LD_VAR 0 8
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: MUL
59074: ST_TO_ADDR
// wait ( time ) ;
59075: LD_VAR 0 8
59079: PPUSH
59080: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59084: LD_INT 35
59086: PPUSH
59087: LD_INT 875
59089: PPUSH
59090: CALL_OW 12
59094: PPUSH
59095: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59099: LD_INT 1
59101: PPUSH
59102: LD_INT 5
59104: PPUSH
59105: CALL_OW 12
59109: PPUSH
59110: LD_VAR 0 1
59114: PPUSH
59115: LD_INT 1
59117: PPUSH
59118: CALL_OW 55
// end ;
59122: GO 58932
// end ;
59124: LD_VAR 0 5
59128: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59129: LD_INT 0
59131: PPUSH
59132: PPUSH
59133: PPUSH
59134: PPUSH
59135: PPUSH
59136: PPUSH
59137: PPUSH
59138: PPUSH
// if not turrets or not factories then
59139: LD_VAR 0 1
59143: NOT
59144: PUSH
59145: LD_VAR 0 2
59149: NOT
59150: OR
59151: IFFALSE 59155
// exit ;
59153: GO 59462
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59155: LD_ADDR_VAR 0 10
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: LD_INT 6
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 4
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 5
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 24
59197: PUSH
59198: LD_INT 25
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 23
59207: PUSH
59208: LD_INT 27
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 42
59221: PUSH
59222: LD_INT 43
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 44
59231: PUSH
59232: LD_INT 46
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 45
59241: PUSH
59242: LD_INT 47
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// result := [ ] ;
59259: LD_ADDR_VAR 0 3
59263: PUSH
59264: EMPTY
59265: ST_TO_ADDR
// for i in turrets do
59266: LD_ADDR_VAR 0 4
59270: PUSH
59271: LD_VAR 0 1
59275: PUSH
59276: FOR_IN
59277: IFFALSE 59460
// begin nat := GetNation ( i ) ;
59279: LD_ADDR_VAR 0 7
59283: PUSH
59284: LD_VAR 0 4
59288: PPUSH
59289: CALL_OW 248
59293: ST_TO_ADDR
// weapon := 0 ;
59294: LD_ADDR_VAR 0 8
59298: PUSH
59299: LD_INT 0
59301: ST_TO_ADDR
// if not nat then
59302: LD_VAR 0 7
59306: NOT
59307: IFFALSE 59311
// continue ;
59309: GO 59276
// for j in list [ nat ] do
59311: LD_ADDR_VAR 0 5
59315: PUSH
59316: LD_VAR 0 10
59320: PUSH
59321: LD_VAR 0 7
59325: ARRAY
59326: PUSH
59327: FOR_IN
59328: IFFALSE 59369
// if GetBWeapon ( i ) = j [ 1 ] then
59330: LD_VAR 0 4
59334: PPUSH
59335: CALL_OW 269
59339: PUSH
59340: LD_VAR 0 5
59344: PUSH
59345: LD_INT 1
59347: ARRAY
59348: EQUAL
59349: IFFALSE 59367
// begin weapon := j [ 2 ] ;
59351: LD_ADDR_VAR 0 8
59355: PUSH
59356: LD_VAR 0 5
59360: PUSH
59361: LD_INT 2
59363: ARRAY
59364: ST_TO_ADDR
// break ;
59365: GO 59369
// end ;
59367: GO 59327
59369: POP
59370: POP
// if not weapon then
59371: LD_VAR 0 8
59375: NOT
59376: IFFALSE 59380
// continue ;
59378: GO 59276
// for k in factories do
59380: LD_ADDR_VAR 0 6
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: FOR_IN
59391: IFFALSE 59456
// begin weapons := AvailableWeaponList ( k ) ;
59393: LD_ADDR_VAR 0 9
59397: PUSH
59398: LD_VAR 0 6
59402: PPUSH
59403: CALL_OW 478
59407: ST_TO_ADDR
// if not weapons then
59408: LD_VAR 0 9
59412: NOT
59413: IFFALSE 59417
// continue ;
59415: GO 59390
// if weapon in weapons then
59417: LD_VAR 0 8
59421: PUSH
59422: LD_VAR 0 9
59426: IN
59427: IFFALSE 59454
// begin result := [ i , weapon ] ;
59429: LD_ADDR_VAR 0 3
59433: PUSH
59434: LD_VAR 0 4
59438: PUSH
59439: LD_VAR 0 8
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: ST_TO_ADDR
// exit ;
59448: POP
59449: POP
59450: POP
59451: POP
59452: GO 59462
// end ; end ;
59454: GO 59390
59456: POP
59457: POP
// end ;
59458: GO 59276
59460: POP
59461: POP
// end ;
59462: LD_VAR 0 3
59466: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59467: LD_INT 0
59469: PPUSH
// if not side or side > 8 then
59470: LD_VAR 0 3
59474: NOT
59475: PUSH
59476: LD_VAR 0 3
59480: PUSH
59481: LD_INT 8
59483: GREATER
59484: OR
59485: IFFALSE 59489
// exit ;
59487: GO 59548
// if not range then
59489: LD_VAR 0 4
59493: NOT
59494: IFFALSE 59505
// range := - 12 ;
59496: LD_ADDR_VAR 0 4
59500: PUSH
59501: LD_INT 12
59503: NEG
59504: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59505: LD_VAR 0 1
59509: PPUSH
59510: LD_VAR 0 2
59514: PPUSH
59515: LD_VAR 0 3
59519: PPUSH
59520: LD_VAR 0 4
59524: PPUSH
59525: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59529: LD_VAR 0 1
59533: PPUSH
59534: LD_VAR 0 2
59538: PPUSH
59539: LD_VAR 0 3
59543: PPUSH
59544: CALL_OW 331
// end ;
59548: LD_VAR 0 5
59552: RET
// export function Video ( mode ) ; begin
59553: LD_INT 0
59555: PPUSH
// ingame_video = mode ;
59556: LD_ADDR_OWVAR 52
59560: PUSH
59561: LD_VAR 0 1
59565: ST_TO_ADDR
// interface_hidden = mode ;
59566: LD_ADDR_OWVAR 54
59570: PUSH
59571: LD_VAR 0 1
59575: ST_TO_ADDR
// end ;
59576: LD_VAR 0 2
59580: RET
// export function Join ( array , element ) ; begin
59581: LD_INT 0
59583: PPUSH
// result := array ^ element ;
59584: LD_ADDR_VAR 0 3
59588: PUSH
59589: LD_VAR 0 1
59593: PUSH
59594: LD_VAR 0 2
59598: ADD
59599: ST_TO_ADDR
// end ;
59600: LD_VAR 0 3
59604: RET
// export function JoinUnion ( array , element ) ; begin
59605: LD_INT 0
59607: PPUSH
// result := array union element ;
59608: LD_ADDR_VAR 0 3
59612: PUSH
59613: LD_VAR 0 1
59617: PUSH
59618: LD_VAR 0 2
59622: UNION
59623: ST_TO_ADDR
// end ;
59624: LD_VAR 0 3
59628: RET
// export function GetBehemoths ( side ) ; begin
59629: LD_INT 0
59631: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59632: LD_ADDR_VAR 0 2
59636: PUSH
59637: LD_INT 22
59639: PUSH
59640: LD_VAR 0 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 31
59651: PUSH
59652: LD_INT 25
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PPUSH
59663: CALL_OW 69
59667: ST_TO_ADDR
// end ;
59668: LD_VAR 0 2
59672: RET
// export function Shuffle ( array ) ; var i , index ; begin
59673: LD_INT 0
59675: PPUSH
59676: PPUSH
59677: PPUSH
// result := [ ] ;
59678: LD_ADDR_VAR 0 2
59682: PUSH
59683: EMPTY
59684: ST_TO_ADDR
// if not array then
59685: LD_VAR 0 1
59689: NOT
59690: IFFALSE 59694
// exit ;
59692: GO 59793
// Randomize ;
59694: CALL_OW 10
// for i = array downto 1 do
59698: LD_ADDR_VAR 0 3
59702: PUSH
59703: DOUBLE
59704: LD_VAR 0 1
59708: INC
59709: ST_TO_ADDR
59710: LD_INT 1
59712: PUSH
59713: FOR_DOWNTO
59714: IFFALSE 59791
// begin index := rand ( 1 , array ) ;
59716: LD_ADDR_VAR 0 4
59720: PUSH
59721: LD_INT 1
59723: PPUSH
59724: LD_VAR 0 1
59728: PPUSH
59729: CALL_OW 12
59733: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59734: LD_ADDR_VAR 0 2
59738: PUSH
59739: LD_VAR 0 2
59743: PPUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_INT 1
59751: PLUS
59752: PPUSH
59753: LD_VAR 0 1
59757: PUSH
59758: LD_VAR 0 4
59762: ARRAY
59763: PPUSH
59764: CALL_OW 2
59768: ST_TO_ADDR
// array := Delete ( array , index ) ;
59769: LD_ADDR_VAR 0 1
59773: PUSH
59774: LD_VAR 0 1
59778: PPUSH
59779: LD_VAR 0 4
59783: PPUSH
59784: CALL_OW 3
59788: ST_TO_ADDR
// end ;
59789: GO 59713
59791: POP
59792: POP
// end ;
59793: LD_VAR 0 2
59797: RET
// export function GetBaseMaterials ( base ) ; begin
59798: LD_INT 0
59800: PPUSH
// result := [ 0 , 0 , 0 ] ;
59801: LD_ADDR_VAR 0 2
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// if not base then
59820: LD_VAR 0 1
59824: NOT
59825: IFFALSE 59829
// exit ;
59827: GO 59878
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59829: LD_ADDR_VAR 0 2
59833: PUSH
59834: LD_VAR 0 1
59838: PPUSH
59839: LD_INT 1
59841: PPUSH
59842: CALL_OW 275
59846: PUSH
59847: LD_VAR 0 1
59851: PPUSH
59852: LD_INT 2
59854: PPUSH
59855: CALL_OW 275
59859: PUSH
59860: LD_VAR 0 1
59864: PPUSH
59865: LD_INT 3
59867: PPUSH
59868: CALL_OW 275
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: ST_TO_ADDR
// end ;
59878: LD_VAR 0 2
59882: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59883: LD_INT 0
59885: PPUSH
59886: PPUSH
// result := array ;
59887: LD_ADDR_VAR 0 3
59891: PUSH
59892: LD_VAR 0 1
59896: ST_TO_ADDR
// if size > 0 then
59897: LD_VAR 0 2
59901: PUSH
59902: LD_INT 0
59904: GREATER
59905: IFFALSE 59951
// for i := array downto size do
59907: LD_ADDR_VAR 0 4
59911: PUSH
59912: DOUBLE
59913: LD_VAR 0 1
59917: INC
59918: ST_TO_ADDR
59919: LD_VAR 0 2
59923: PUSH
59924: FOR_DOWNTO
59925: IFFALSE 59949
// result := Delete ( result , result ) ;
59927: LD_ADDR_VAR 0 3
59931: PUSH
59932: LD_VAR 0 3
59936: PPUSH
59937: LD_VAR 0 3
59941: PPUSH
59942: CALL_OW 3
59946: ST_TO_ADDR
59947: GO 59924
59949: POP
59950: POP
// end ;
59951: LD_VAR 0 3
59955: RET
// export function ComExit ( unit ) ; var tmp ; begin
59956: LD_INT 0
59958: PPUSH
59959: PPUSH
// if not IsInUnit ( unit ) then
59960: LD_VAR 0 1
59964: PPUSH
59965: CALL_OW 310
59969: NOT
59970: IFFALSE 59974
// exit ;
59972: GO 60034
// tmp := IsInUnit ( unit ) ;
59974: LD_ADDR_VAR 0 3
59978: PUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: CALL_OW 310
59988: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59989: LD_VAR 0 3
59993: PPUSH
59994: CALL_OW 247
59998: PUSH
59999: LD_INT 2
60001: EQUAL
60002: IFFALSE 60015
// ComExitVehicle ( unit ) else
60004: LD_VAR 0 1
60008: PPUSH
60009: CALL_OW 121
60013: GO 60024
// ComExitBuilding ( unit ) ;
60015: LD_VAR 0 1
60019: PPUSH
60020: CALL_OW 122
// result := tmp ;
60024: LD_ADDR_VAR 0 2
60028: PUSH
60029: LD_VAR 0 3
60033: ST_TO_ADDR
// end ;
60034: LD_VAR 0 2
60038: RET
// export function ResetHc ; begin
60039: LD_INT 0
60041: PPUSH
// InitHc ;
60042: CALL_OW 19
// hc_importance := 0 ;
60046: LD_ADDR_OWVAR 32
60050: PUSH
60051: LD_INT 0
60053: ST_TO_ADDR
// end ;
60054: LD_VAR 0 1
60058: RET
