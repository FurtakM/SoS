// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9980 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9355 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9800 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38415 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 70381 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10346 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10226 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63290 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10322 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10330 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 65393 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9270
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9260
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: PUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: LD_VAR 0 4
8975: PPUSH
8976: CALL_OW 546
8980: PUSH
8981: LD_INT 6
8983: ARRAY
8984: PUSH
8985: LD_INT 3
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: LD_INT 5
8993: PUSH
8994: LD_INT 6
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: IN
9003: OR
9004: IFFALSE 9008
// exit ;
9006: GO 9270
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9008: LD_ADDR_VAR 0 9
9012: PUSH
9013: LD_EXP 30
9017: PPUSH
9018: CALL_OW 250
9022: PPUSH
9023: LD_EXP 30
9027: PPUSH
9028: CALL_OW 251
9032: PPUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 298
9047: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9048: LD_ADDR_VAR 0 10
9052: PUSH
9053: LD_VAR 0 9
9057: PPUSH
9058: CALL 8039 0 1
9062: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9063: LD_VAR 0 10
9067: PUSH
9068: LD_OWVAR 2
9072: PPUSH
9073: CALL 5639 0 1
9077: GREATER
9078: IFFALSE 9092
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9080: LD_STRING ArtFrogJumpCost
9082: PPUSH
9083: LD_INT 2
9085: PPUSH
9086: CALL_OW 338
// exit ;
9090: GO 9270
// end ; SetSibResources ( your_side , cost ) ;
9092: LD_OWVAR 2
9096: PPUSH
9097: LD_VAR 0 10
9101: PPUSH
9102: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_VAR 0 4
9115: PPUSH
9116: LD_INT 6
9118: PPUSH
9119: LD_INT 5
9121: NEG
9122: PPUSH
9123: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9127: LD_VAR 0 3
9131: PPUSH
9132: LD_VAR 0 4
9136: PPUSH
9137: LD_INT 6
9139: PPUSH
9140: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9144: LD_EXP 30
9148: PPUSH
9149: LD_VAR 0 3
9153: PPUSH
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 0
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9169: LD_VAR 0 3
9173: PPUSH
9174: LD_VAR 0 4
9178: PPUSH
9179: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9183: LD_ADDR_EXP 30
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// player_artifact_researched := false ;
9191: LD_ADDR_EXP 22
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9199: LD_OWVAR 2
9203: PPUSH
9204: LD_EXP 20
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 7
9216: PPUSH
9217: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9221: LD_OWVAR 2
9225: PPUSH
9226: LD_EXP 21
9230: PPUSH
9231: LD_INT 0
9233: PPUSH
9234: LD_VAR 0 7
9238: PPUSH
9239: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9243: LD_EXP 26
9247: PPUSH
9248: CALL_OW 67
// player_artifact_researched := true ;
9252: LD_ADDR_EXP 22
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// end ; if debug then
9260: LD_EXP 6
9264: IFFALSE 9270
// DebugArtifact ;
9266: CALL 7803 0 0
// end ;
9270: PPOPN 10
9272: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 255
9282: PUSH
9283: LD_OWVAR 2
9287: EQUAL
9288: IFFALSE 9327
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9290: LD_OWVAR 2
9294: PPUSH
9295: LD_EXP 25
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 468
// player_artifact_ready := true ;
9312: LD_ADDR_EXP 29
9316: PUSH
9317: LD_INT 1
9319: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9320: LD_STRING ArtFrogJump
9322: PPUSH
9323: CALL_OW 339
// end ; end ;
9327: PPOPN 1
9329: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9330: LD_OWVAR 2
9334: PPUSH
9335: LD_EXP 25
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 468
// end ;
9352: PPOPN 2
9354: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9355: LD_INT 0
9357: PPUSH
9358: PPUSH
9359: PPUSH
9360: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_INT 81
9368: PUSH
9369: LD_INT 7
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 34
9378: PUSH
9379: LD_INT 48
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 69
9394: PUSH
9395: LD_INT 81
9397: PUSH
9398: LD_INT 7
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 30
9407: PUSH
9408: LD_INT 28
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 69
9423: ADD
9424: PUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 7
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 30
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: ADD
9454: PUSH
9455: LD_INT 81
9457: PUSH
9458: LD_INT 7
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 21
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 69
9483: ADD
9484: PUSH
9485: LD_INT 81
9487: PUSH
9488: LD_INT 7
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 30
9497: PUSH
9498: LD_INT 34
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: ADD
9514: PUSH
9515: LD_INT 81
9517: PUSH
9518: LD_INT 7
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 35
9527: PUSH
9528: LD_INT 49
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: ADD
9544: PUSH
9545: LD_INT 81
9547: PUSH
9548: LD_INT 7
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 35
9557: PUSH
9558: LD_INT 47
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 69
9573: ADD
9574: PUSH
9575: LD_INT 81
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 34
9587: PUSH
9588: LD_INT 47
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 69
9603: ADD
9604: PUSH
9605: LD_INT 81
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 31
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: ADD
9634: PUSH
9635: LD_INT 81
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: LD_INT 3
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: ADD
9664: ST_TO_ADDR
// if not tmp then
9665: LD_VAR 0 3
9669: NOT
9670: IFFALSE 9674
// exit ;
9672: GO 9795
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9674: LD_VAR 0 3
9678: PPUSH
9679: LD_INT 34
9681: PUSH
9682: LD_INT 48
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PPUSH
9689: CALL_OW 72
9693: IFFALSE 9726
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_INT 34
9707: PUSH
9708: LD_INT 48
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 72
9719: PUSH
9720: LD_INT 1
9722: ARRAY
9723: ST_TO_ADDR
9724: GO 9750
// un := tmp [ rand ( 1 , tmp ) ] ;
9726: LD_ADDR_VAR 0 4
9730: PUSH
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 1
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: CALL_OW 12
9748: ARRAY
9749: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9750: LD_EXP 10
9754: NOT
9755: IFFALSE 9786
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9757: LD_ADDR_EXP 10
9761: PUSH
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 250
9771: PUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 251
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: ST_TO_ADDR
// KillUnit ( un ) ;
9786: LD_VAR 0 4
9790: PPUSH
9791: CALL_OW 66
// end ;
9795: LD_VAR 0 1
9799: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9806: LD_ADDR_VAR 0 4
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 33
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// if not tmp then
9840: LD_VAR 0 4
9844: NOT
9845: IFFALSE 9849
// exit ;
9847: GO 9975
// un := tmp [ rand ( 1 , tmp ) ] ;
9849: LD_ADDR_VAR 0 3
9853: PUSH
9854: LD_VAR 0 4
9858: PUSH
9859: LD_INT 1
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 12
9871: ARRAY
9872: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9873: LD_VAR 0 3
9877: PPUSH
9878: CALL_OW 264
9882: PUSH
9883: LD_INT 48
9885: EQUAL
9886: IFFALSE 9905
// ComAttackPlace ( un , 194 , 19 ) else
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 194
9895: PPUSH
9896: LD_INT 19
9898: PPUSH
9899: CALL_OW 116
9903: GO 9939
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 81
9912: PUSH
9913: LD_INT 7
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: CALL_OW 74
9934: PPUSH
9935: CALL_OW 115
// if not alliance_used_artifact_2 then
9939: LD_EXP 11
9943: NOT
9944: IFFALSE 9975
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9946: LD_ADDR_EXP 11
9950: PUSH
9951: LD_VAR 0 3
9955: PPUSH
9956: CALL_OW 250
9960: PUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: CALL_OW 251
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: ST_TO_ADDR
// end ; end_of_file
9975: LD_VAR 0 1
9979: RET
// export function DebugMode ; var i , j , b ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
9984: PPUSH
9985: PPUSH
// enable_addtolog = true ;
9986: LD_ADDR_OWVAR 81
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// FogOff ( 6 ) ;
9994: LD_INT 6
9996: PPUSH
9997: CALL_OW 344
// uc_side = 6 ;
10001: LD_ADDR_OWVAR 20
10005: PUSH
10006: LD_INT 6
10008: ST_TO_ADDR
// uc_nation = 3 ;
10009: LD_ADDR_OWVAR 21
10013: PUSH
10014: LD_INT 3
10016: ST_TO_ADDR
// bc_level = 10 ;
10017: LD_ADDR_OWVAR 43
10021: PUSH
10022: LD_INT 10
10024: ST_TO_ADDR
// bc_type := b_lab_full ;
10025: LD_ADDR_OWVAR 42
10029: PUSH
10030: LD_INT 8
10032: ST_TO_ADDR
// bc_kind1 := 11 ;
10033: LD_ADDR_OWVAR 44
10037: PUSH
10038: LD_INT 11
10040: ST_TO_ADDR
// bc_kind2 := 12 ;
10041: LD_ADDR_OWVAR 45
10045: PUSH
10046: LD_INT 12
10048: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10049: LD_INT 189
10051: PPUSH
10052: LD_INT 20
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 47
// bc_type := b_warehouse ;
10062: LD_ADDR_OWVAR 42
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_INT 201
10077: PPUSH
10078: LD_INT 22
10080: PPUSH
10081: LD_INT 4
10083: PPUSH
10084: CALL_OW 47
10088: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10089: LD_VAR 0 4
10093: PPUSH
10094: CALL_OW 274
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_INT 10000
10104: PPUSH
10105: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10109: LD_VAR 0 4
10113: PPUSH
10114: CALL_OW 274
10118: PPUSH
10119: LD_INT 2
10121: PPUSH
10122: LD_INT 10000
10124: PPUSH
10125: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 274
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: LD_INT 10000
10144: PPUSH
10145: CALL_OW 277
// bc_type := b_siberite_power ;
10149: LD_ADDR_OWVAR 42
10153: PUSH
10154: LD_INT 28
10156: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: LD_INT 216
10164: PPUSH
10165: LD_INT 16
10167: PPUSH
10168: LD_INT 4
10170: PPUSH
10171: CALL_OW 47
10175: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10176: LD_ADDR_VAR 0 4
10180: PUSH
10181: LD_INT 219
10183: PPUSH
10184: LD_INT 16
10186: PPUSH
10187: LD_INT 4
10189: PPUSH
10190: CALL_OW 47
10194: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10195: LD_INT 55
10197: PPUSH
10198: LD_INT 6
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10208: LD_INT 56
10210: PPUSH
10211: LD_INT 6
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 322
// end ; end_of_file
10221: LD_VAR 0 1
10225: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 264
10241: PUSH
10242: LD_INT 91
10244: EQUAL
10245: IFFALSE 10317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10247: LD_INT 68
10249: PPUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 255
10259: PPUSH
10260: CALL_OW 321
10264: PUSH
10265: LD_INT 2
10267: EQUAL
10268: IFFALSE 10280
// eff := 70 else
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 70
10277: ST_TO_ADDR
10278: GO 10288
// eff := 30 ;
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: LD_INT 30
10287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 250
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 251
10307: PPUSH
10308: LD_VAR 0 4
10312: PPUSH
10313: CALL_OW 495
// end ; end ;
10317: LD_VAR 0 2
10321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10322: LD_INT 0
10324: PPUSH
// end ;
10325: LD_VAR 0 4
10329: RET
// export function SOS_Command ( cmd ) ; begin
10330: LD_INT 0
10332: PPUSH
// end ;
10333: LD_VAR 0 2
10337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10338: LD_INT 0
10340: PPUSH
// end ;
10341: LD_VAR 0 6
10345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
// if not vehicle or not factory then
10350: LD_VAR 0 1
10354: NOT
10355: PUSH
10356: LD_VAR 0 2
10360: NOT
10361: OR
10362: IFFALSE 10366
// exit ;
10364: GO 10597
// if factoryWaypoints >= factory then
10366: LD_EXP 105
10370: PUSH
10371: LD_VAR 0 2
10375: GREATEREQUAL
10376: IFFALSE 10597
// if factoryWaypoints [ factory ] then
10378: LD_EXP 105
10382: PUSH
10383: LD_VAR 0 2
10387: ARRAY
10388: IFFALSE 10597
// begin if GetControl ( vehicle ) = control_manual then
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 263
10399: PUSH
10400: LD_INT 1
10402: EQUAL
10403: IFFALSE 10484
// begin driver := IsDrivenBy ( vehicle ) ;
10405: LD_ADDR_VAR 0 4
10409: PUSH
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 311
10419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10420: LD_VAR 0 4
10424: PPUSH
10425: LD_EXP 105
10429: PUSH
10430: LD_VAR 0 2
10434: ARRAY
10435: PUSH
10436: LD_INT 3
10438: ARRAY
10439: PPUSH
10440: LD_EXP 105
10444: PUSH
10445: LD_VAR 0 2
10449: ARRAY
10450: PUSH
10451: LD_INT 4
10453: ARRAY
10454: PPUSH
10455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10468: LD_VAR 0 4
10472: PPUSH
10473: LD_VAR 0 2
10477: PPUSH
10478: CALL_OW 180
// end else
10482: GO 10597
// if GetControl ( vehicle ) = control_remote then
10484: LD_VAR 0 1
10488: PPUSH
10489: CALL_OW 263
10493: PUSH
10494: LD_INT 2
10496: EQUAL
10497: IFFALSE 10558
// begin wait ( 0 0$2 ) ;
10499: LD_INT 70
10501: PPUSH
10502: CALL_OW 67
// if Connect ( vehicle ) then
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL 38415 0 1
10515: IFFALSE 10556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10517: LD_VAR 0 1
10521: PPUSH
10522: LD_EXP 105
10526: PUSH
10527: LD_VAR 0 2
10531: ARRAY
10532: PUSH
10533: LD_INT 3
10535: ARRAY
10536: PPUSH
10537: LD_EXP 105
10541: PUSH
10542: LD_VAR 0 2
10546: ARRAY
10547: PUSH
10548: LD_INT 4
10550: ARRAY
10551: PPUSH
10552: CALL_OW 171
// end else
10556: GO 10597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10558: LD_VAR 0 1
10562: PPUSH
10563: LD_EXP 105
10567: PUSH
10568: LD_VAR 0 2
10572: ARRAY
10573: PUSH
10574: LD_INT 3
10576: ARRAY
10577: PPUSH
10578: LD_EXP 105
10582: PUSH
10583: LD_VAR 0 2
10587: ARRAY
10588: PUSH
10589: LD_INT 4
10591: ARRAY
10592: PPUSH
10593: CALL_OW 171
// end ; end ;
10597: LD_VAR 0 3
10601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10602: LD_INT 0
10604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10605: LD_VAR 0 1
10609: PUSH
10610: LD_INT 250
10612: EQUAL
10613: PUSH
10614: LD_VAR 0 2
10618: PPUSH
10619: CALL_OW 264
10623: PUSH
10624: LD_INT 81
10626: EQUAL
10627: AND
10628: IFFALSE 10649
// MinerPlaceMine ( unit , x , y ) ;
10630: LD_VAR 0 2
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL 13034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 251
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PPUSH
10663: CALL_OW 264
10667: PUSH
10668: LD_INT 81
10670: EQUAL
10671: AND
10672: IFFALSE 10693
// MinerDetonateMine ( unit , x , y ) ;
10674: LD_VAR 0 2
10678: PPUSH
10679: LD_VAR 0 4
10683: PPUSH
10684: LD_VAR 0 5
10688: PPUSH
10689: CALL 13309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 252
10700: EQUAL
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 264
10711: PUSH
10712: LD_INT 81
10714: EQUAL
10715: AND
10716: IFFALSE 10737
// MinerCreateMinefield ( unit , x , y ) ;
10718: LD_VAR 0 2
10722: PPUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: LD_VAR 0 5
10732: PPUSH
10733: CALL 13726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10737: LD_VAR 0 1
10741: PUSH
10742: LD_INT 253
10744: EQUAL
10745: PUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 257
10755: PUSH
10756: LD_INT 5
10758: EQUAL
10759: AND
10760: IFFALSE 10781
// ComBinocular ( unit , x , y ) ;
10762: LD_VAR 0 2
10766: PPUSH
10767: LD_VAR 0 4
10771: PPUSH
10772: LD_VAR 0 5
10776: PPUSH
10777: CALL 14095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10781: LD_VAR 0 1
10785: PUSH
10786: LD_INT 254
10788: EQUAL
10789: PUSH
10790: LD_VAR 0 2
10794: PPUSH
10795: CALL_OW 264
10799: PUSH
10800: LD_INT 99
10802: EQUAL
10803: AND
10804: PUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 263
10814: PUSH
10815: LD_INT 3
10817: EQUAL
10818: AND
10819: IFFALSE 10835
// HackDestroyVehicle ( unit , selectedUnit ) ;
10821: LD_VAR 0 2
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: CALL 12398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10835: LD_VAR 0 1
10839: PUSH
10840: LD_INT 255
10842: EQUAL
10843: PUSH
10844: LD_VAR 0 2
10848: PPUSH
10849: CALL_OW 264
10853: PUSH
10854: LD_INT 14
10856: PUSH
10857: LD_INT 53
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: IN
10864: AND
10865: PUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_VAR 0 5
10875: PPUSH
10876: CALL_OW 488
10880: AND
10881: IFFALSE 10905
// CutTreeXYR ( unit , x , y , 12 ) ;
10883: LD_VAR 0 2
10887: PPUSH
10888: LD_VAR 0 4
10892: PPUSH
10893: LD_VAR 0 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL 10968 0 4
// if cmd = 256 then
10905: LD_VAR 0 1
10909: PUSH
10910: LD_INT 256
10912: EQUAL
10913: IFFALSE 10934
// SetFactoryWaypoint ( unit , x , y ) ;
10915: LD_VAR 0 2
10919: PPUSH
10920: LD_VAR 0 4
10924: PPUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: CALL 28998 0 3
// if cmd = 257 then
10934: LD_VAR 0 1
10938: PUSH
10939: LD_INT 257
10941: EQUAL
10942: IFFALSE 10963
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: LD_VAR 0 5
10958: PPUSH
10959: CALL 29360 0 3
// end ;
10963: LD_VAR 0 6
10967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10979: LD_VAR 0 1
10983: NOT
10984: PUSH
10985: LD_VAR 0 2
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: CALL_OW 488
10999: NOT
11000: OR
11001: PUSH
11002: LD_VAR 0 4
11006: NOT
11007: OR
11008: IFFALSE 11012
// exit ;
11010: GO 11352
// list := [ ] ;
11012: LD_ADDR_VAR 0 13
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// if x - r < 0 then
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 4
11028: MINUS
11029: PUSH
11030: LD_INT 0
11032: LESS
11033: IFFALSE 11045
// min_x := 0 else
11035: LD_ADDR_VAR 0 7
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
11043: GO 11061
// min_x := x - r ;
11045: LD_ADDR_VAR 0 7
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_VAR 0 4
11059: MINUS
11060: ST_TO_ADDR
// if y - r < 0 then
11061: LD_VAR 0 3
11065: PUSH
11066: LD_VAR 0 4
11070: MINUS
11071: PUSH
11072: LD_INT 0
11074: LESS
11075: IFFALSE 11087
// min_y := 0 else
11077: LD_ADDR_VAR 0 8
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
11085: GO 11103
// min_y := y - r ;
11087: LD_ADDR_VAR 0 8
11091: PUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 4
11101: MINUS
11102: ST_TO_ADDR
// max_x := x + r ;
11103: LD_ADDR_VAR 0 9
11107: PUSH
11108: LD_VAR 0 2
11112: PUSH
11113: LD_VAR 0 4
11117: PLUS
11118: ST_TO_ADDR
// max_y := y + r ;
11119: LD_ADDR_VAR 0 10
11123: PUSH
11124: LD_VAR 0 3
11128: PUSH
11129: LD_VAR 0 4
11133: PLUS
11134: ST_TO_ADDR
// for _x = min_x to max_x do
11135: LD_ADDR_VAR 0 11
11139: PUSH
11140: DOUBLE
11141: LD_VAR 0 7
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 9
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11270
// for _y = min_y to max_y do
11155: LD_ADDR_VAR 0 12
11159: PUSH
11160: DOUBLE
11161: LD_VAR 0 8
11165: DEC
11166: ST_TO_ADDR
11167: LD_VAR 0 10
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11266
// begin if not ValidHex ( _x , _y ) then
11175: LD_VAR 0 11
11179: PPUSH
11180: LD_VAR 0 12
11184: PPUSH
11185: CALL_OW 488
11189: NOT
11190: IFFALSE 11194
// continue ;
11192: GO 11172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11194: LD_VAR 0 11
11198: PPUSH
11199: LD_VAR 0 12
11203: PPUSH
11204: CALL_OW 351
11208: PUSH
11209: LD_VAR 0 11
11213: PPUSH
11214: LD_VAR 0 12
11218: PPUSH
11219: CALL_OW 554
11223: AND
11224: IFFALSE 11264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11226: LD_ADDR_VAR 0 13
11230: PUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: LD_VAR 0 13
11240: PUSH
11241: LD_INT 1
11243: PLUS
11244: PPUSH
11245: LD_VAR 0 11
11249: PUSH
11250: LD_VAR 0 12
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 2
11263: ST_TO_ADDR
// end ;
11264: GO 11172
11266: POP
11267: POP
11268: GO 11152
11270: POP
11271: POP
// if not list then
11272: LD_VAR 0 13
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11352
// for i in list do
11281: LD_ADDR_VAR 0 6
11285: PUSH
11286: LD_VAR 0 13
11290: PUSH
11291: FOR_IN
11292: IFFALSE 11350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: LD_STRING M
11301: PUSH
11302: LD_VAR 0 6
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_VAR 0 6
11315: PUSH
11316: LD_INT 2
11318: ARRAY
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: LD_INT 0
11325: PUSH
11326: LD_INT 0
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: PPUSH
11344: CALL_OW 447
11348: GO 11291
11350: POP
11351: POP
// end ;
11352: LD_VAR 0 5
11356: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11357: LD_EXP 36
11361: NOT
11362: IFFALSE 11412
11364: GO 11366
11366: DISABLE
// begin initHack := true ;
11367: LD_ADDR_EXP 36
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// hackTanks := [ ] ;
11375: LD_ADDR_EXP 37
11379: PUSH
11380: EMPTY
11381: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11382: LD_ADDR_EXP 38
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// hackLimit := 3 ;
11389: LD_ADDR_EXP 39
11393: PUSH
11394: LD_INT 3
11396: ST_TO_ADDR
// hackDist := 12 ;
11397: LD_ADDR_EXP 40
11401: PUSH
11402: LD_INT 12
11404: ST_TO_ADDR
// hackCounter := [ ] ;
11405: LD_ADDR_EXP 41
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// end ;
11412: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11413: LD_EXP 36
11417: PUSH
11418: LD_INT 34
11420: PUSH
11421: LD_INT 99
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: AND
11433: IFFALSE 11686
11435: GO 11437
11437: DISABLE
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
// begin enable ;
11442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_INT 34
11450: PUSH
11451: LD_INT 99
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11684
// begin if not i in hackTanks then
11466: LD_VAR 0 1
11470: PUSH
11471: LD_EXP 37
11475: IN
11476: NOT
11477: IFFALSE 11560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11479: LD_ADDR_EXP 37
11483: PUSH
11484: LD_EXP 37
11488: PPUSH
11489: LD_EXP 37
11493: PUSH
11494: LD_INT 1
11496: PLUS
11497: PPUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: CALL_OW 1
11507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11508: LD_ADDR_EXP 38
11512: PUSH
11513: LD_EXP 38
11517: PPUSH
11518: LD_EXP 38
11522: PUSH
11523: LD_INT 1
11525: PLUS
11526: PPUSH
11527: EMPTY
11528: PPUSH
11529: CALL_OW 1
11533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11534: LD_ADDR_EXP 41
11538: PUSH
11539: LD_EXP 41
11543: PPUSH
11544: LD_EXP 41
11548: PUSH
11549: LD_INT 1
11551: PLUS
11552: PPUSH
11553: EMPTY
11554: PPUSH
11555: CALL_OW 1
11559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 302
11569: NOT
11570: IFFALSE 11583
// begin HackUnlinkAll ( i ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 11689 0 1
// continue ;
11581: GO 11463
// end ; HackCheckCapturedStatus ( i ) ;
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL 12132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11592: LD_ADDR_VAR 0 2
11596: PUSH
11597: LD_INT 81
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 255
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 33
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 91
11626: PUSH
11627: LD_VAR 0 1
11631: PUSH
11632: LD_EXP 40
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 50
11644: PUSH
11645: EMPTY
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// continue ;
11666: GO 11463
// HackLink ( i , tmp ) ;
11668: LD_VAR 0 1
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL 11825 0 2
// end ;
11682: GO 11463
11684: POP
11685: POP
// end ;
11686: PPOPN 2
11688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if not hack in hackTanks then
11694: LD_VAR 0 1
11698: PUSH
11699: LD_EXP 37
11703: IN
11704: NOT
11705: IFFALSE 11709
// exit ;
11707: GO 11820
// index := GetElementIndex ( hackTanks , hack ) ;
11709: LD_ADDR_VAR 0 4
11713: PUSH
11714: LD_EXP 37
11718: PPUSH
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL 35231 0 2
11728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11729: LD_EXP 38
11733: PUSH
11734: LD_VAR 0 4
11738: ARRAY
11739: IFFALSE 11820
// begin for i in hackTanksCaptured [ index ] do
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_EXP 38
11750: PUSH
11751: LD_VAR 0 4
11755: ARRAY
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 1
11767: ARRAY
11768: PPUSH
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: PPUSH
11778: CALL_OW 235
11782: GO 11757
11784: POP
11785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11786: LD_ADDR_EXP 38
11790: PUSH
11791: LD_EXP 38
11795: PPUSH
11796: LD_VAR 0 4
11800: PPUSH
11801: EMPTY
11802: PPUSH
11803: CALL_OW 1
11807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_INT 0
11815: PPUSH
11816: CALL_OW 505
// end ; end ;
11820: LD_VAR 0 2
11824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11825: LD_INT 0
11827: PPUSH
11828: PPUSH
11829: PPUSH
// if not hack in hackTanks or not vehicles then
11830: LD_VAR 0 1
11834: PUSH
11835: LD_EXP 37
11839: IN
11840: NOT
11841: PUSH
11842: LD_VAR 0 2
11846: NOT
11847: OR
11848: IFFALSE 11852
// exit ;
11850: GO 12127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL 35881 0 4
11877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11878: LD_ADDR_VAR 0 5
11882: PUSH
11883: LD_EXP 37
11887: PPUSH
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL 35231 0 2
11897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11898: LD_EXP 38
11902: PUSH
11903: LD_VAR 0 5
11907: ARRAY
11908: PUSH
11909: LD_EXP 39
11913: LESS
11914: IFFALSE 12103
// begin for i := 1 to vehicles do
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_VAR 0 2
11930: PUSH
11931: FOR_TO
11932: IFFALSE 12101
// begin if hackTanksCaptured [ index ] = hackLimit then
11934: LD_EXP 38
11938: PUSH
11939: LD_VAR 0 5
11943: ARRAY
11944: PUSH
11945: LD_EXP 39
11949: EQUAL
11950: IFFALSE 11954
// break ;
11952: GO 12101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11954: LD_ADDR_EXP 41
11958: PUSH
11959: LD_EXP 41
11963: PPUSH
11964: LD_VAR 0 5
11968: PPUSH
11969: LD_EXP 41
11973: PUSH
11974: LD_VAR 0 5
11978: ARRAY
11979: PUSH
11980: LD_INT 1
11982: PLUS
11983: PPUSH
11984: CALL_OW 1
11988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11989: LD_ADDR_EXP 38
11993: PUSH
11994: LD_EXP 38
11998: PPUSH
11999: LD_VAR 0 5
12003: PUSH
12004: LD_EXP 38
12008: PUSH
12009: LD_VAR 0 5
12013: ARRAY
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: LD_VAR 0 2
12027: PUSH
12028: LD_VAR 0 4
12032: ARRAY
12033: PUSH
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: PPUSH
12045: CALL_OW 255
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL 35446 0 3
12058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12059: LD_VAR 0 2
12063: PUSH
12064: LD_VAR 0 4
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 255
12079: PPUSH
12080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12084: LD_VAR 0 2
12088: PUSH
12089: LD_VAR 0 4
12093: ARRAY
12094: PPUSH
12095: CALL_OW 141
// end ;
12099: GO 11931
12101: POP
12102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_EXP 38
12112: PUSH
12113: LD_VAR 0 5
12117: ARRAY
12118: PUSH
12119: LD_INT 0
12121: PLUS
12122: PPUSH
12123: CALL_OW 505
// end ;
12127: LD_VAR 0 3
12131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
// if not hack in hackTanks then
12138: LD_VAR 0 1
12142: PUSH
12143: LD_EXP 37
12147: IN
12148: NOT
12149: IFFALSE 12153
// exit ;
12151: GO 12393
// index := GetElementIndex ( hackTanks , hack ) ;
12153: LD_ADDR_VAR 0 4
12157: PUSH
12158: LD_EXP 37
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL 35231 0 2
12172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12173: LD_ADDR_VAR 0 3
12177: PUSH
12178: DOUBLE
12179: LD_EXP 38
12183: PUSH
12184: LD_VAR 0 4
12188: ARRAY
12189: INC
12190: ST_TO_ADDR
12191: LD_INT 1
12193: PUSH
12194: FOR_DOWNTO
12195: IFFALSE 12367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12197: LD_ADDR_VAR 0 5
12201: PUSH
12202: LD_EXP 38
12206: PUSH
12207: LD_VAR 0 4
12211: ARRAY
12212: PUSH
12213: LD_VAR 0 3
12217: ARRAY
12218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12219: LD_VAR 0 5
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: CALL_OW 302
12232: NOT
12233: PUSH
12234: LD_VAR 0 5
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PPUSH
12243: CALL_OW 255
12247: PUSH
12248: LD_VAR 0 1
12252: PPUSH
12253: CALL_OW 255
12257: NONEQUAL
12258: OR
12259: IFFALSE 12365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12261: LD_VAR 0 5
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PPUSH
12270: CALL_OW 305
12274: PUSH
12275: LD_VAR 0 5
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: CALL_OW 255
12288: PUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 255
12298: EQUAL
12299: AND
12300: IFFALSE 12324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12302: LD_VAR 0 5
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 5
12315: PUSH
12316: LD_INT 2
12318: ARRAY
12319: PPUSH
12320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12324: LD_ADDR_EXP 38
12328: PUSH
12329: LD_EXP 38
12333: PPUSH
12334: LD_VAR 0 4
12338: PPUSH
12339: LD_EXP 38
12343: PUSH
12344: LD_VAR 0 4
12348: ARRAY
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: CALL_OW 3
12359: PPUSH
12360: CALL_OW 1
12364: ST_TO_ADDR
// end ; end ;
12365: GO 12194
12367: POP
12368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_EXP 38
12378: PUSH
12379: LD_VAR 0 4
12383: ARRAY
12384: PUSH
12385: LD_INT 0
12387: PLUS
12388: PPUSH
12389: CALL_OW 505
// end ;
12393: LD_VAR 0 2
12397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12398: LD_INT 0
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
// if not hack in hackTanks then
12404: LD_VAR 0 1
12408: PUSH
12409: LD_EXP 37
12413: IN
12414: NOT
12415: IFFALSE 12419
// exit ;
12417: GO 12504
// index := GetElementIndex ( hackTanks , hack ) ;
12419: LD_ADDR_VAR 0 5
12423: PUSH
12424: LD_EXP 37
12428: PPUSH
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL 35231 0 2
12438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: DOUBLE
12445: LD_INT 1
12447: DEC
12448: ST_TO_ADDR
12449: LD_EXP 38
12453: PUSH
12454: LD_VAR 0 5
12458: ARRAY
12459: PUSH
12460: FOR_TO
12461: IFFALSE 12502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12463: LD_EXP 38
12467: PUSH
12468: LD_VAR 0 5
12472: ARRAY
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PUSH
12484: LD_VAR 0 2
12488: EQUAL
12489: IFFALSE 12500
// KillUnit ( vehicle ) ;
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 66
12500: GO 12460
12502: POP
12503: POP
// end ;
12504: LD_VAR 0 3
12508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12509: LD_EXP 42
12513: NOT
12514: IFFALSE 12549
12516: GO 12518
12518: DISABLE
// begin initMiner := true ;
12519: LD_ADDR_EXP 42
12523: PUSH
12524: LD_INT 1
12526: ST_TO_ADDR
// minersList := [ ] ;
12527: LD_ADDR_EXP 43
12531: PUSH
12532: EMPTY
12533: ST_TO_ADDR
// minerMinesList := [ ] ;
12534: LD_ADDR_EXP 44
12538: PUSH
12539: EMPTY
12540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12541: LD_ADDR_EXP 45
12545: PUSH
12546: LD_INT 5
12548: ST_TO_ADDR
// end ;
12549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12550: LD_EXP 42
12554: PUSH
12555: LD_INT 34
12557: PUSH
12558: LD_INT 81
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: AND
12570: IFFALSE 13031
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
// begin enable ;
12581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12582: LD_ADDR_VAR 0 1
12586: PUSH
12587: LD_INT 34
12589: PUSH
12590: LD_INT 81
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12675
// begin if not i in minersList then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_EXP 43
12614: IN
12615: NOT
12616: IFFALSE 12673
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12618: LD_ADDR_EXP 43
12622: PUSH
12623: LD_EXP 43
12627: PPUSH
12628: LD_EXP 43
12632: PUSH
12633: LD_INT 1
12635: PLUS
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 1
12646: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12647: LD_ADDR_EXP 44
12651: PUSH
12652: LD_EXP 44
12656: PPUSH
12657: LD_EXP 44
12661: PUSH
12662: LD_INT 1
12664: PLUS
12665: PPUSH
12666: EMPTY
12667: PPUSH
12668: CALL_OW 1
12672: ST_TO_ADDR
// end end ;
12673: GO 12602
12675: POP
12676: POP
// for i := minerMinesList downto 1 do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: DOUBLE
12683: LD_EXP 44
12687: INC
12688: ST_TO_ADDR
12689: LD_INT 1
12691: PUSH
12692: FOR_DOWNTO
12693: IFFALSE 13029
// begin if IsLive ( minersList [ i ] ) then
12695: LD_EXP 43
12699: PUSH
12700: LD_VAR 0 1
12704: ARRAY
12705: PPUSH
12706: CALL_OW 300
12710: IFFALSE 12738
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12712: LD_EXP 43
12716: PUSH
12717: LD_VAR 0 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 44
12727: PUSH
12728: LD_VAR 0 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 505
// if not minerMinesList [ i ] then
12738: LD_EXP 44
12742: PUSH
12743: LD_VAR 0 1
12747: ARRAY
12748: NOT
12749: IFFALSE 12753
// continue ;
12751: GO 12692
// for j := minerMinesList [ i ] downto 1 do
12753: LD_ADDR_VAR 0 2
12757: PUSH
12758: DOUBLE
12759: LD_EXP 44
12763: PUSH
12764: LD_VAR 0 1
12768: ARRAY
12769: INC
12770: ST_TO_ADDR
12771: LD_INT 1
12773: PUSH
12774: FOR_DOWNTO
12775: IFFALSE 13025
// begin side := GetSide ( minersList [ i ] ) ;
12777: LD_ADDR_VAR 0 3
12781: PUSH
12782: LD_EXP 43
12786: PUSH
12787: LD_VAR 0 1
12791: ARRAY
12792: PPUSH
12793: CALL_OW 255
12797: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_EXP 44
12807: PUSH
12808: LD_VAR 0 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 2
12818: ARRAY
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: LD_EXP 44
12828: PUSH
12829: LD_VAR 0 1
12833: ARRAY
12834: PUSH
12835: LD_VAR 0 2
12839: ARRAY
12840: PUSH
12841: LD_INT 2
12843: ARRAY
12844: PPUSH
12845: CALL_OW 428
12849: ST_TO_ADDR
// if not tmp then
12850: LD_VAR 0 4
12854: NOT
12855: IFFALSE 12859
// continue ;
12857: GO 12774
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12859: LD_VAR 0 4
12863: PUSH
12864: LD_INT 81
12866: PUSH
12867: LD_VAR 0 3
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: IN
12881: PUSH
12882: LD_EXP 44
12886: PUSH
12887: LD_VAR 0 1
12891: ARRAY
12892: PUSH
12893: LD_VAR 0 2
12897: ARRAY
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_EXP 44
12907: PUSH
12908: LD_VAR 0 1
12912: ARRAY
12913: PUSH
12914: LD_VAR 0 2
12918: ARRAY
12919: PUSH
12920: LD_INT 2
12922: ARRAY
12923: PPUSH
12924: CALL_OW 458
12928: AND
12929: IFFALSE 13023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12931: LD_EXP 44
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 2
12946: ARRAY
12947: PUSH
12948: LD_INT 1
12950: ARRAY
12951: PPUSH
12952: LD_EXP 44
12956: PUSH
12957: LD_VAR 0 1
12961: ARRAY
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PUSH
12969: LD_INT 2
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12982: LD_ADDR_EXP 44
12986: PUSH
12987: LD_EXP 44
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: LD_EXP 44
13001: PUSH
13002: LD_VAR 0 1
13006: ARRAY
13007: PPUSH
13008: LD_VAR 0 2
13012: PPUSH
13013: CALL_OW 3
13017: PPUSH
13018: CALL_OW 1
13022: ST_TO_ADDR
// end ; end ;
13023: GO 12774
13025: POP
13026: POP
// end ;
13027: GO 12692
13029: POP
13030: POP
// end ;
13031: PPOPN 4
13033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
// result := false ;
13038: LD_ADDR_VAR 0 4
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 264
13055: PUSH
13056: LD_INT 81
13058: EQUAL
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13304
// index := GetElementIndex ( minersList , unit ) ;
13064: LD_ADDR_VAR 0 5
13068: PUSH
13069: LD_EXP 43
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL 35231 0 2
13083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13084: LD_EXP 44
13088: PUSH
13089: LD_VAR 0 5
13093: ARRAY
13094: PUSH
13095: LD_EXP 45
13099: GREATEREQUAL
13100: IFFALSE 13104
// exit ;
13102: GO 13304
// ComMoveXY ( unit , x , y ) ;
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13123: LD_INT 35
13125: PPUSH
13126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: CALL 66586 0 3
13149: NOT
13150: PUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 314
13160: AND
13161: IFFALSE 13165
// exit ;
13163: GO 13304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13165: LD_VAR 0 2
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: CALL_OW 428
13179: PUSH
13180: LD_VAR 0 1
13184: EQUAL
13185: PUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 314
13195: NOT
13196: AND
13197: IFFALSE 13123
// PlaySoundXY ( x , y , PlantMine ) ;
13199: LD_VAR 0 2
13203: PPUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_STRING PlantMine
13211: PPUSH
13212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 255
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13243: LD_ADDR_EXP 44
13247: PUSH
13248: LD_EXP 44
13252: PPUSH
13253: LD_VAR 0 5
13257: PUSH
13258: LD_EXP 44
13262: PUSH
13263: LD_VAR 0 5
13267: ARRAY
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL 35446 0 3
13295: ST_TO_ADDR
// result := true ;
13296: LD_ADDR_VAR 0 4
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// end ;
13304: LD_VAR 0 4
13308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// if not unit in minersList then
13314: LD_VAR 0 1
13318: PUSH
13319: LD_EXP 43
13323: IN
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 13721
// index := GetElementIndex ( minersList , unit ) ;
13329: LD_ADDR_VAR 0 6
13333: PUSH
13334: LD_EXP 43
13338: PPUSH
13339: LD_VAR 0 1
13343: PPUSH
13344: CALL 35231 0 2
13348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13349: LD_ADDR_VAR 0 5
13353: PUSH
13354: DOUBLE
13355: LD_EXP 44
13359: PUSH
13360: LD_VAR 0 6
13364: ARRAY
13365: INC
13366: ST_TO_ADDR
13367: LD_INT 1
13369: PUSH
13370: FOR_DOWNTO
13371: IFFALSE 13532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13373: LD_EXP 44
13377: PUSH
13378: LD_VAR 0 6
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 5
13388: ARRAY
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PUSH
13394: LD_VAR 0 2
13398: EQUAL
13399: PUSH
13400: LD_EXP 44
13404: PUSH
13405: LD_VAR 0 6
13409: ARRAY
13410: PUSH
13411: LD_VAR 0 5
13415: ARRAY
13416: PUSH
13417: LD_INT 2
13419: ARRAY
13420: PUSH
13421: LD_VAR 0 3
13425: EQUAL
13426: AND
13427: IFFALSE 13530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13429: LD_EXP 44
13433: PUSH
13434: LD_VAR 0 6
13438: ARRAY
13439: PUSH
13440: LD_VAR 0 5
13444: ARRAY
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: LD_EXP 44
13454: PUSH
13455: LD_VAR 0 6
13459: ARRAY
13460: PUSH
13461: LD_VAR 0 5
13465: ARRAY
13466: PUSH
13467: LD_INT 2
13469: ARRAY
13470: PPUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 255
13480: PPUSH
13481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13485: LD_ADDR_EXP 44
13489: PUSH
13490: LD_EXP 44
13494: PPUSH
13495: LD_VAR 0 6
13499: PPUSH
13500: LD_EXP 44
13504: PUSH
13505: LD_VAR 0 6
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 5
13515: PPUSH
13516: CALL_OW 3
13520: PPUSH
13521: CALL_OW 1
13525: ST_TO_ADDR
// exit ;
13526: POP
13527: POP
13528: GO 13721
// end ; end ;
13530: GO 13370
13532: POP
13533: POP
// for i := minerMinesList [ index ] downto 1 do
13534: LD_ADDR_VAR 0 5
13538: PUSH
13539: DOUBLE
13540: LD_EXP 44
13544: PUSH
13545: LD_VAR 0 6
13549: ARRAY
13550: INC
13551: ST_TO_ADDR
13552: LD_INT 1
13554: PUSH
13555: FOR_DOWNTO
13556: IFFALSE 13719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13558: LD_EXP 44
13562: PUSH
13563: LD_VAR 0 6
13567: ARRAY
13568: PUSH
13569: LD_VAR 0 5
13573: ARRAY
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: PPUSH
13579: LD_EXP 44
13583: PUSH
13584: LD_VAR 0 6
13588: ARRAY
13589: PUSH
13590: LD_VAR 0 5
13594: ARRAY
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: PPUSH
13600: LD_VAR 0 2
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: CALL_OW 298
13614: PUSH
13615: LD_INT 6
13617: LESS
13618: IFFALSE 13717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13620: LD_EXP 44
13624: PUSH
13625: LD_VAR 0 6
13629: ARRAY
13630: PUSH
13631: LD_VAR 0 5
13635: ARRAY
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_EXP 44
13645: PUSH
13646: LD_VAR 0 6
13650: ARRAY
13651: PUSH
13652: LD_VAR 0 5
13656: ARRAY
13657: PUSH
13658: LD_INT 2
13660: ARRAY
13661: PPUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: CALL_OW 255
13671: PPUSH
13672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13676: LD_ADDR_EXP 44
13680: PUSH
13681: LD_EXP 44
13685: PPUSH
13686: LD_VAR 0 6
13690: PPUSH
13691: LD_EXP 44
13695: PUSH
13696: LD_VAR 0 6
13700: ARRAY
13701: PPUSH
13702: LD_VAR 0 5
13706: PPUSH
13707: CALL_OW 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// end ; end ;
13717: GO 13555
13719: POP
13720: POP
// end ;
13721: LD_VAR 0 4
13725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 81
13749: EQUAL
13750: NOT
13751: PUSH
13752: LD_VAR 0 1
13756: PUSH
13757: LD_EXP 43
13761: IN
13762: NOT
13763: OR
13764: IFFALSE 13768
// exit ;
13766: GO 14090
// index := GetElementIndex ( minersList , unit ) ;
13768: LD_ADDR_VAR 0 6
13772: PUSH
13773: LD_EXP 43
13777: PPUSH
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL 35231 0 2
13787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13788: LD_ADDR_VAR 0 8
13792: PUSH
13793: LD_EXP 45
13797: PUSH
13798: LD_EXP 44
13802: PUSH
13803: LD_VAR 0 6
13807: ARRAY
13808: MINUS
13809: ST_TO_ADDR
// if not minesFreeAmount then
13810: LD_VAR 0 8
13814: NOT
13815: IFFALSE 13819
// exit ;
13817: GO 14090
// tmp := [ ] ;
13819: LD_ADDR_VAR 0 7
13823: PUSH
13824: EMPTY
13825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13826: LD_ADDR_VAR 0 5
13830: PUSH
13831: DOUBLE
13832: LD_INT 1
13834: DEC
13835: ST_TO_ADDR
13836: LD_VAR 0 8
13840: PUSH
13841: FOR_TO
13842: IFFALSE 14037
// begin _d := rand ( 0 , 5 ) ;
13844: LD_ADDR_VAR 0 11
13848: PUSH
13849: LD_INT 0
13851: PPUSH
13852: LD_INT 5
13854: PPUSH
13855: CALL_OW 12
13859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13860: LD_ADDR_VAR 0 12
13864: PUSH
13865: LD_INT 2
13867: PPUSH
13868: LD_INT 6
13870: PPUSH
13871: CALL_OW 12
13875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13876: LD_ADDR_VAR 0 9
13880: PUSH
13881: LD_VAR 0 2
13885: PPUSH
13886: LD_VAR 0 11
13890: PPUSH
13891: LD_VAR 0 12
13895: PPUSH
13896: CALL_OW 272
13900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13901: LD_ADDR_VAR 0 10
13905: PUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: LD_VAR 0 11
13915: PPUSH
13916: LD_VAR 0 12
13920: PPUSH
13921: CALL_OW 273
13925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13926: LD_VAR 0 9
13930: PPUSH
13931: LD_VAR 0 10
13935: PPUSH
13936: CALL_OW 488
13940: PUSH
13941: LD_VAR 0 9
13945: PUSH
13946: LD_VAR 0 10
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_VAR 0 7
13959: IN
13960: NOT
13961: AND
13962: PUSH
13963: LD_VAR 0 9
13967: PPUSH
13968: LD_VAR 0 10
13972: PPUSH
13973: CALL_OW 458
13977: NOT
13978: AND
13979: IFFALSE 14021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13981: LD_ADDR_VAR 0 7
13985: PUSH
13986: LD_VAR 0 7
13990: PPUSH
13991: LD_VAR 0 7
13995: PUSH
13996: LD_INT 1
13998: PLUS
13999: PPUSH
14000: LD_VAR 0 9
14004: PUSH
14005: LD_VAR 0 10
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 1
14018: ST_TO_ADDR
14019: GO 14035
// i := i - 1 ;
14021: LD_ADDR_VAR 0 5
14025: PUSH
14026: LD_VAR 0 5
14030: PUSH
14031: LD_INT 1
14033: MINUS
14034: ST_TO_ADDR
// end ;
14035: GO 13841
14037: POP
14038: POP
// for i in tmp do
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: LD_VAR 0 7
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: LD_VAR 0 5
14070: PUSH
14071: LD_INT 2
14073: ARRAY
14074: PPUSH
14075: CALL 13034 0 3
14079: NOT
14080: IFFALSE 14086
// exit ;
14082: POP
14083: POP
14084: GO 14090
14086: GO 14049
14088: POP
14089: POP
// end ;
14090: LD_VAR 0 4
14094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14095: LD_INT 0
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// if not GetClass ( unit ) = class_sniper then
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 257
14113: PUSH
14114: LD_INT 5
14116: EQUAL
14117: NOT
14118: IFFALSE 14122
// exit ;
14120: GO 14510
// dist := 8 ;
14122: LD_ADDR_VAR 0 5
14126: PUSH
14127: LD_INT 8
14129: ST_TO_ADDR
// viewRange := 12 ;
14130: LD_ADDR_VAR 0 7
14134: PUSH
14135: LD_INT 12
14137: ST_TO_ADDR
// side := GetSide ( unit ) ;
14138: LD_ADDR_VAR 0 6
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 255
14152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14153: LD_INT 61
14155: PPUSH
14156: LD_VAR 0 6
14160: PPUSH
14161: CALL_OW 321
14165: PUSH
14166: LD_INT 2
14168: EQUAL
14169: IFFALSE 14179
// viewRange := 16 ;
14171: LD_ADDR_VAR 0 7
14175: PUSH
14176: LD_INT 16
14178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14179: LD_VAR 0 1
14183: PPUSH
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: CALL_OW 297
14198: PUSH
14199: LD_VAR 0 5
14203: GREATER
14204: IFFALSE 14283
// begin ComMoveXY ( unit , x , y ) ;
14206: LD_VAR 0 1
14210: PPUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14225: LD_INT 35
14227: PPUSH
14228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_VAR 0 2
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: CALL 66586 0 3
14251: NOT
14252: IFFALSE 14256
// exit ;
14254: GO 14510
// until GetDistUnitXY ( unit , x , y ) < dist ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 297
14275: PUSH
14276: LD_VAR 0 5
14280: LESS
14281: IFFALSE 14225
// end ; ComTurnXY ( unit , x , y ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 118
// wait ( 5 ) ;
14302: LD_INT 5
14304: PPUSH
14305: CALL_OW 67
// _d := GetDir ( unit ) ;
14309: LD_ADDR_VAR 0 10
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 254
14323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14324: LD_ADDR_VAR 0 8
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 250
14338: PPUSH
14339: LD_VAR 0 10
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: CALL_OW 272
14353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14354: LD_ADDR_VAR 0 9
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 251
14368: PPUSH
14369: LD_VAR 0 10
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL_OW 273
14383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14384: LD_VAR 0 8
14388: PPUSH
14389: LD_VAR 0 9
14393: PPUSH
14394: CALL_OW 488
14398: NOT
14399: IFFALSE 14403
// exit ;
14401: GO 14510
// ComAnimCustom ( unit , 1 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14415: LD_VAR 0 8
14419: PPUSH
14420: LD_VAR 0 9
14424: PPUSH
14425: LD_VAR 0 6
14429: PPUSH
14430: LD_VAR 0 7
14434: PPUSH
14435: CALL_OW 330
// repeat wait ( 1 ) ;
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 316
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 314
14465: OR
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 302
14476: NOT
14477: OR
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 301
14488: OR
14489: IFFALSE 14439
// RemoveSeeing ( _x , _y , side ) ;
14491: LD_VAR 0 8
14495: PPUSH
14496: LD_VAR 0 9
14500: PPUSH
14501: LD_VAR 0 6
14505: PPUSH
14506: CALL_OW 331
// end ; end_of_file
14510: LD_VAR 0 4
14514: RET
// export globalGameSaveCounter ; every 0 0$1 do
14515: GO 14517
14517: DISABLE
// begin enable ;
14518: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14519: LD_STRING updateTimer(
14521: PUSH
14522: LD_OWVAR 1
14526: STR
14527: PUSH
14528: LD_STRING );
14530: STR
14531: PPUSH
14532: CALL_OW 559
// end ;
14536: END
// every 0 0$1 do
14537: GO 14539
14539: DISABLE
// begin globalGameSaveCounter := 0 ;
14540: LD_ADDR_EXP 46
14544: PUSH
14545: LD_INT 0
14547: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14548: LD_STRING setGameSaveCounter(0)
14550: PPUSH
14551: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14555: LD_STRING initStreamRollete();
14557: PPUSH
14558: CALL_OW 559
// InitStreamMode ;
14562: CALL 15888 0 0
// DefineStreamItems ( false ) ;
14566: LD_INT 0
14568: PPUSH
14569: CALL 16352 0 1
// end ;
14573: END
// export function SOS_MapStart ( ) ; begin
14574: LD_INT 0
14576: PPUSH
// if streamModeActive then
14577: LD_EXP 47
14581: IFFALSE 14590
// DefineStreamItems ( true ) ;
14583: LD_INT 1
14585: PPUSH
14586: CALL 16352 0 1
// UpdateLuaVariables ( ) ;
14590: CALL 14607 0 0
// UpdateFactoryWaypoints ( ) ;
14594: CALL 29213 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14598: CALL 29470 0 0
// end ;
14602: LD_VAR 0 1
14606: RET
// function UpdateLuaVariables ( ) ; begin
14607: LD_INT 0
14609: PPUSH
// if globalGameSaveCounter then
14610: LD_EXP 46
14614: IFFALSE 14648
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14616: LD_ADDR_EXP 46
14620: PUSH
14621: LD_EXP 46
14625: PPUSH
14626: CALL 69138 0 1
14630: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14631: LD_STRING setGameSaveCounter(
14633: PUSH
14634: LD_EXP 46
14638: STR
14639: PUSH
14640: LD_STRING )
14642: STR
14643: PPUSH
14644: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14648: LD_STRING setGameDifficulty(
14650: PUSH
14651: LD_OWVAR 67
14655: STR
14656: PUSH
14657: LD_STRING )
14659: STR
14660: PPUSH
14661: CALL_OW 559
// end ;
14665: LD_VAR 0 1
14669: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14670: LD_INT 0
14672: PPUSH
// if p2 = stream_mode then
14673: LD_VAR 0 2
14677: PUSH
14678: LD_INT 100
14680: EQUAL
14681: IFFALSE 15684
// begin if not StreamModeActive then
14683: LD_EXP 47
14687: NOT
14688: IFFALSE 14698
// StreamModeActive := true ;
14690: LD_ADDR_EXP 47
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if p3 = 0 then
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 0
14705: EQUAL
14706: IFFALSE 14712
// InitStreamMode ;
14708: CALL 15888 0 0
// if p3 = 1 then
14712: LD_VAR 0 3
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14730
// sRocket := true ;
14722: LD_ADDR_EXP 52
14726: PUSH
14727: LD_INT 1
14729: ST_TO_ADDR
// if p3 = 2 then
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 2
14737: EQUAL
14738: IFFALSE 14748
// sSpeed := true ;
14740: LD_ADDR_EXP 51
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// if p3 = 3 then
14748: LD_VAR 0 3
14752: PUSH
14753: LD_INT 3
14755: EQUAL
14756: IFFALSE 14766
// sEngine := true ;
14758: LD_ADDR_EXP 53
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// if p3 = 4 then
14766: LD_VAR 0 3
14770: PUSH
14771: LD_INT 4
14773: EQUAL
14774: IFFALSE 14784
// sSpec := true ;
14776: LD_ADDR_EXP 50
14780: PUSH
14781: LD_INT 1
14783: ST_TO_ADDR
// if p3 = 5 then
14784: LD_VAR 0 3
14788: PUSH
14789: LD_INT 5
14791: EQUAL
14792: IFFALSE 14802
// sLevel := true ;
14794: LD_ADDR_EXP 54
14798: PUSH
14799: LD_INT 1
14801: ST_TO_ADDR
// if p3 = 6 then
14802: LD_VAR 0 3
14806: PUSH
14807: LD_INT 6
14809: EQUAL
14810: IFFALSE 14820
// sArmoury := true ;
14812: LD_ADDR_EXP 55
14816: PUSH
14817: LD_INT 1
14819: ST_TO_ADDR
// if p3 = 7 then
14820: LD_VAR 0 3
14824: PUSH
14825: LD_INT 7
14827: EQUAL
14828: IFFALSE 14838
// sRadar := true ;
14830: LD_ADDR_EXP 56
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// if p3 = 8 then
14838: LD_VAR 0 3
14842: PUSH
14843: LD_INT 8
14845: EQUAL
14846: IFFALSE 14856
// sBunker := true ;
14848: LD_ADDR_EXP 57
14852: PUSH
14853: LD_INT 1
14855: ST_TO_ADDR
// if p3 = 9 then
14856: LD_VAR 0 3
14860: PUSH
14861: LD_INT 9
14863: EQUAL
14864: IFFALSE 14874
// sHack := true ;
14866: LD_ADDR_EXP 58
14870: PUSH
14871: LD_INT 1
14873: ST_TO_ADDR
// if p3 = 10 then
14874: LD_VAR 0 3
14878: PUSH
14879: LD_INT 10
14881: EQUAL
14882: IFFALSE 14892
// sFire := true ;
14884: LD_ADDR_EXP 59
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// if p3 = 11 then
14892: LD_VAR 0 3
14896: PUSH
14897: LD_INT 11
14899: EQUAL
14900: IFFALSE 14910
// sRefresh := true ;
14902: LD_ADDR_EXP 60
14906: PUSH
14907: LD_INT 1
14909: ST_TO_ADDR
// if p3 = 12 then
14910: LD_VAR 0 3
14914: PUSH
14915: LD_INT 12
14917: EQUAL
14918: IFFALSE 14928
// sExp := true ;
14920: LD_ADDR_EXP 61
14924: PUSH
14925: LD_INT 1
14927: ST_TO_ADDR
// if p3 = 13 then
14928: LD_VAR 0 3
14932: PUSH
14933: LD_INT 13
14935: EQUAL
14936: IFFALSE 14946
// sDepot := true ;
14938: LD_ADDR_EXP 62
14942: PUSH
14943: LD_INT 1
14945: ST_TO_ADDR
// if p3 = 14 then
14946: LD_VAR 0 3
14950: PUSH
14951: LD_INT 14
14953: EQUAL
14954: IFFALSE 14964
// sFlag := true ;
14956: LD_ADDR_EXP 63
14960: PUSH
14961: LD_INT 1
14963: ST_TO_ADDR
// if p3 = 15 then
14964: LD_VAR 0 3
14968: PUSH
14969: LD_INT 15
14971: EQUAL
14972: IFFALSE 14982
// sKamikadze := true ;
14974: LD_ADDR_EXP 71
14978: PUSH
14979: LD_INT 1
14981: ST_TO_ADDR
// if p3 = 16 then
14982: LD_VAR 0 3
14986: PUSH
14987: LD_INT 16
14989: EQUAL
14990: IFFALSE 15000
// sTroll := true ;
14992: LD_ADDR_EXP 72
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
// if p3 = 17 then
15000: LD_VAR 0 3
15004: PUSH
15005: LD_INT 17
15007: EQUAL
15008: IFFALSE 15018
// sSlow := true ;
15010: LD_ADDR_EXP 73
15014: PUSH
15015: LD_INT 1
15017: ST_TO_ADDR
// if p3 = 18 then
15018: LD_VAR 0 3
15022: PUSH
15023: LD_INT 18
15025: EQUAL
15026: IFFALSE 15036
// sLack := true ;
15028: LD_ADDR_EXP 74
15032: PUSH
15033: LD_INT 1
15035: ST_TO_ADDR
// if p3 = 19 then
15036: LD_VAR 0 3
15040: PUSH
15041: LD_INT 19
15043: EQUAL
15044: IFFALSE 15054
// sTank := true ;
15046: LD_ADDR_EXP 76
15050: PUSH
15051: LD_INT 1
15053: ST_TO_ADDR
// if p3 = 20 then
15054: LD_VAR 0 3
15058: PUSH
15059: LD_INT 20
15061: EQUAL
15062: IFFALSE 15072
// sRemote := true ;
15064: LD_ADDR_EXP 77
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// if p3 = 21 then
15072: LD_VAR 0 3
15076: PUSH
15077: LD_INT 21
15079: EQUAL
15080: IFFALSE 15090
// sPowell := true ;
15082: LD_ADDR_EXP 78
15086: PUSH
15087: LD_INT 1
15089: ST_TO_ADDR
// if p3 = 22 then
15090: LD_VAR 0 3
15094: PUSH
15095: LD_INT 22
15097: EQUAL
15098: IFFALSE 15108
// sTeleport := true ;
15100: LD_ADDR_EXP 81
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if p3 = 23 then
15108: LD_VAR 0 3
15112: PUSH
15113: LD_INT 23
15115: EQUAL
15116: IFFALSE 15126
// sOilTower := true ;
15118: LD_ADDR_EXP 83
15122: PUSH
15123: LD_INT 1
15125: ST_TO_ADDR
// if p3 = 24 then
15126: LD_VAR 0 3
15130: PUSH
15131: LD_INT 24
15133: EQUAL
15134: IFFALSE 15144
// sShovel := true ;
15136: LD_ADDR_EXP 84
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// if p3 = 25 then
15144: LD_VAR 0 3
15148: PUSH
15149: LD_INT 25
15151: EQUAL
15152: IFFALSE 15162
// sSheik := true ;
15154: LD_ADDR_EXP 85
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// if p3 = 26 then
15162: LD_VAR 0 3
15166: PUSH
15167: LD_INT 26
15169: EQUAL
15170: IFFALSE 15180
// sEarthquake := true ;
15172: LD_ADDR_EXP 87
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// if p3 = 27 then
15180: LD_VAR 0 3
15184: PUSH
15185: LD_INT 27
15187: EQUAL
15188: IFFALSE 15198
// sAI := true ;
15190: LD_ADDR_EXP 88
15194: PUSH
15195: LD_INT 1
15197: ST_TO_ADDR
// if p3 = 28 then
15198: LD_VAR 0 3
15202: PUSH
15203: LD_INT 28
15205: EQUAL
15206: IFFALSE 15216
// sCargo := true ;
15208: LD_ADDR_EXP 91
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if p3 = 29 then
15216: LD_VAR 0 3
15220: PUSH
15221: LD_INT 29
15223: EQUAL
15224: IFFALSE 15234
// sDLaser := true ;
15226: LD_ADDR_EXP 92
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if p3 = 30 then
15234: LD_VAR 0 3
15238: PUSH
15239: LD_INT 30
15241: EQUAL
15242: IFFALSE 15252
// sExchange := true ;
15244: LD_ADDR_EXP 93
15248: PUSH
15249: LD_INT 1
15251: ST_TO_ADDR
// if p3 = 31 then
15252: LD_VAR 0 3
15256: PUSH
15257: LD_INT 31
15259: EQUAL
15260: IFFALSE 15270
// sFac := true ;
15262: LD_ADDR_EXP 94
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// if p3 = 32 then
15270: LD_VAR 0 3
15274: PUSH
15275: LD_INT 32
15277: EQUAL
15278: IFFALSE 15288
// sPower := true ;
15280: LD_ADDR_EXP 95
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// if p3 = 33 then
15288: LD_VAR 0 3
15292: PUSH
15293: LD_INT 33
15295: EQUAL
15296: IFFALSE 15306
// sRandom := true ;
15298: LD_ADDR_EXP 96
15302: PUSH
15303: LD_INT 1
15305: ST_TO_ADDR
// if p3 = 34 then
15306: LD_VAR 0 3
15310: PUSH
15311: LD_INT 34
15313: EQUAL
15314: IFFALSE 15324
// sShield := true ;
15316: LD_ADDR_EXP 97
15320: PUSH
15321: LD_INT 1
15323: ST_TO_ADDR
// if p3 = 35 then
15324: LD_VAR 0 3
15328: PUSH
15329: LD_INT 35
15331: EQUAL
15332: IFFALSE 15342
// sTime := true ;
15334: LD_ADDR_EXP 98
15338: PUSH
15339: LD_INT 1
15341: ST_TO_ADDR
// if p3 = 36 then
15342: LD_VAR 0 3
15346: PUSH
15347: LD_INT 36
15349: EQUAL
15350: IFFALSE 15360
// sTools := true ;
15352: LD_ADDR_EXP 99
15356: PUSH
15357: LD_INT 1
15359: ST_TO_ADDR
// if p3 = 101 then
15360: LD_VAR 0 3
15364: PUSH
15365: LD_INT 101
15367: EQUAL
15368: IFFALSE 15378
// sSold := true ;
15370: LD_ADDR_EXP 64
15374: PUSH
15375: LD_INT 1
15377: ST_TO_ADDR
// if p3 = 102 then
15378: LD_VAR 0 3
15382: PUSH
15383: LD_INT 102
15385: EQUAL
15386: IFFALSE 15396
// sDiff := true ;
15388: LD_ADDR_EXP 65
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// if p3 = 103 then
15396: LD_VAR 0 3
15400: PUSH
15401: LD_INT 103
15403: EQUAL
15404: IFFALSE 15414
// sFog := true ;
15406: LD_ADDR_EXP 68
15410: PUSH
15411: LD_INT 1
15413: ST_TO_ADDR
// if p3 = 104 then
15414: LD_VAR 0 3
15418: PUSH
15419: LD_INT 104
15421: EQUAL
15422: IFFALSE 15432
// sReset := true ;
15424: LD_ADDR_EXP 69
15428: PUSH
15429: LD_INT 1
15431: ST_TO_ADDR
// if p3 = 105 then
15432: LD_VAR 0 3
15436: PUSH
15437: LD_INT 105
15439: EQUAL
15440: IFFALSE 15450
// sSun := true ;
15442: LD_ADDR_EXP 70
15446: PUSH
15447: LD_INT 1
15449: ST_TO_ADDR
// if p3 = 106 then
15450: LD_VAR 0 3
15454: PUSH
15455: LD_INT 106
15457: EQUAL
15458: IFFALSE 15468
// sTiger := true ;
15460: LD_ADDR_EXP 66
15464: PUSH
15465: LD_INT 1
15467: ST_TO_ADDR
// if p3 = 107 then
15468: LD_VAR 0 3
15472: PUSH
15473: LD_INT 107
15475: EQUAL
15476: IFFALSE 15486
// sBomb := true ;
15478: LD_ADDR_EXP 67
15482: PUSH
15483: LD_INT 1
15485: ST_TO_ADDR
// if p3 = 108 then
15486: LD_VAR 0 3
15490: PUSH
15491: LD_INT 108
15493: EQUAL
15494: IFFALSE 15504
// sWound := true ;
15496: LD_ADDR_EXP 75
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// if p3 = 109 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 109
15511: EQUAL
15512: IFFALSE 15522
// sBetray := true ;
15514: LD_ADDR_EXP 79
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// if p3 = 110 then
15522: LD_VAR 0 3
15526: PUSH
15527: LD_INT 110
15529: EQUAL
15530: IFFALSE 15540
// sContamin := true ;
15532: LD_ADDR_EXP 80
15536: PUSH
15537: LD_INT 1
15539: ST_TO_ADDR
// if p3 = 111 then
15540: LD_VAR 0 3
15544: PUSH
15545: LD_INT 111
15547: EQUAL
15548: IFFALSE 15558
// sOil := true ;
15550: LD_ADDR_EXP 82
15554: PUSH
15555: LD_INT 1
15557: ST_TO_ADDR
// if p3 = 112 then
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 112
15565: EQUAL
15566: IFFALSE 15576
// sStu := true ;
15568: LD_ADDR_EXP 86
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// if p3 = 113 then
15576: LD_VAR 0 3
15580: PUSH
15581: LD_INT 113
15583: EQUAL
15584: IFFALSE 15594
// sBazooka := true ;
15586: LD_ADDR_EXP 89
15590: PUSH
15591: LD_INT 1
15593: ST_TO_ADDR
// if p3 = 114 then
15594: LD_VAR 0 3
15598: PUSH
15599: LD_INT 114
15601: EQUAL
15602: IFFALSE 15612
// sMortar := true ;
15604: LD_ADDR_EXP 90
15608: PUSH
15609: LD_INT 1
15611: ST_TO_ADDR
// if p3 = 115 then
15612: LD_VAR 0 3
15616: PUSH
15617: LD_INT 115
15619: EQUAL
15620: IFFALSE 15630
// sRanger := true ;
15622: LD_ADDR_EXP 100
15626: PUSH
15627: LD_INT 1
15629: ST_TO_ADDR
// if p3 = 116 then
15630: LD_VAR 0 3
15634: PUSH
15635: LD_INT 116
15637: EQUAL
15638: IFFALSE 15648
// sComputer := true ;
15640: LD_ADDR_EXP 101
15644: PUSH
15645: LD_INT 1
15647: ST_TO_ADDR
// if p3 = 117 then
15648: LD_VAR 0 3
15652: PUSH
15653: LD_INT 117
15655: EQUAL
15656: IFFALSE 15666
// s30 := true ;
15658: LD_ADDR_EXP 102
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// if p3 = 118 then
15666: LD_VAR 0 3
15670: PUSH
15671: LD_INT 118
15673: EQUAL
15674: IFFALSE 15684
// s60 := true ;
15676: LD_ADDR_EXP 103
15680: PUSH
15681: LD_INT 1
15683: ST_TO_ADDR
// end ; if p2 = hack_mode then
15684: LD_VAR 0 2
15688: PUSH
15689: LD_INT 101
15691: EQUAL
15692: IFFALSE 15820
// begin case p3 of 1 :
15694: LD_VAR 0 3
15698: PUSH
15699: LD_INT 1
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 15714
15707: POP
// hHackUnlimitedResources ; 2 :
15708: CALL 27959 0 0
15712: GO 15820
15714: LD_INT 2
15716: DOUBLE
15717: EQUAL
15718: IFTRUE 15722
15720: GO 15729
15722: POP
// hHackSetLevel10 ; 3 :
15723: CALL 28092 0 0
15727: GO 15820
15729: LD_INT 3
15731: DOUBLE
15732: EQUAL
15733: IFTRUE 15737
15735: GO 15744
15737: POP
// hHackSetLevel10YourUnits ; 4 :
15738: CALL 28177 0 0
15742: GO 15820
15744: LD_INT 4
15746: DOUBLE
15747: EQUAL
15748: IFTRUE 15752
15750: GO 15759
15752: POP
// hHackInvincible ; 5 :
15753: CALL 28625 0 0
15757: GO 15820
15759: LD_INT 5
15761: DOUBLE
15762: EQUAL
15763: IFTRUE 15767
15765: GO 15774
15767: POP
// hHackInvisible ; 6 :
15768: CALL 28736 0 0
15772: GO 15820
15774: LD_INT 6
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 15789
15782: POP
// hHackChangeYourSide ; 7 :
15783: CALL 28793 0 0
15787: GO 15820
15789: LD_INT 7
15791: DOUBLE
15792: EQUAL
15793: IFTRUE 15797
15795: GO 15804
15797: POP
// hHackChangeUnitSide ; 8 :
15798: CALL 28835 0 0
15802: GO 15820
15804: LD_INT 8
15806: DOUBLE
15807: EQUAL
15808: IFTRUE 15812
15810: GO 15819
15812: POP
// hHackFog ; end ;
15813: CALL 28936 0 0
15817: GO 15820
15819: POP
// end ; if p2 = game_save_mode then
15820: LD_VAR 0 2
15824: PUSH
15825: LD_INT 102
15827: EQUAL
15828: IFFALSE 15883
// begin if p3 = 1 then
15830: LD_VAR 0 3
15834: PUSH
15835: LD_INT 1
15837: EQUAL
15838: IFFALSE 15850
// globalGameSaveCounter := p4 ;
15840: LD_ADDR_EXP 46
15844: PUSH
15845: LD_VAR 0 4
15849: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 2
15857: EQUAL
15858: PUSH
15859: LD_EXP 46
15863: AND
15864: IFFALSE 15883
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15866: LD_STRING setGameSaveCounter(
15868: PUSH
15869: LD_EXP 46
15873: STR
15874: PUSH
15875: LD_STRING )
15877: STR
15878: PPUSH
15879: CALL_OW 559
// end ; end ;
15883: LD_VAR 0 7
15887: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15888: LD_INT 0
15890: PPUSH
// streamModeActive := false ;
15891: LD_ADDR_EXP 47
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// normalCounter := 36 ;
15899: LD_ADDR_EXP 48
15903: PUSH
15904: LD_INT 36
15906: ST_TO_ADDR
// hardcoreCounter := 18 ;
15907: LD_ADDR_EXP 49
15911: PUSH
15912: LD_INT 18
15914: ST_TO_ADDR
// sRocket := false ;
15915: LD_ADDR_EXP 52
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sSpeed := false ;
15923: LD_ADDR_EXP 51
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sEngine := false ;
15931: LD_ADDR_EXP 53
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sSpec := false ;
15939: LD_ADDR_EXP 50
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sLevel := false ;
15947: LD_ADDR_EXP 54
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sArmoury := false ;
15955: LD_ADDR_EXP 55
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// sRadar := false ;
15963: LD_ADDR_EXP 56
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// sBunker := false ;
15971: LD_ADDR_EXP 57
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// sHack := false ;
15979: LD_ADDR_EXP 58
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// sFire := false ;
15987: LD_ADDR_EXP 59
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// sRefresh := false ;
15995: LD_ADDR_EXP 60
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// sExp := false ;
16003: LD_ADDR_EXP 61
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// sDepot := false ;
16011: LD_ADDR_EXP 62
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sFlag := false ;
16019: LD_ADDR_EXP 63
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sKamikadze := false ;
16027: LD_ADDR_EXP 71
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sTroll := false ;
16035: LD_ADDR_EXP 72
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// sSlow := false ;
16043: LD_ADDR_EXP 73
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// sLack := false ;
16051: LD_ADDR_EXP 74
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// sTank := false ;
16059: LD_ADDR_EXP 76
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// sRemote := false ;
16067: LD_ADDR_EXP 77
16071: PUSH
16072: LD_INT 0
16074: ST_TO_ADDR
// sPowell := false ;
16075: LD_ADDR_EXP 78
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// sTeleport := false ;
16083: LD_ADDR_EXP 81
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
// sOilTower := false ;
16091: LD_ADDR_EXP 83
16095: PUSH
16096: LD_INT 0
16098: ST_TO_ADDR
// sShovel := false ;
16099: LD_ADDR_EXP 84
16103: PUSH
16104: LD_INT 0
16106: ST_TO_ADDR
// sSheik := false ;
16107: LD_ADDR_EXP 85
16111: PUSH
16112: LD_INT 0
16114: ST_TO_ADDR
// sEarthquake := false ;
16115: LD_ADDR_EXP 87
16119: PUSH
16120: LD_INT 0
16122: ST_TO_ADDR
// sAI := false ;
16123: LD_ADDR_EXP 88
16127: PUSH
16128: LD_INT 0
16130: ST_TO_ADDR
// sCargo := false ;
16131: LD_ADDR_EXP 91
16135: PUSH
16136: LD_INT 0
16138: ST_TO_ADDR
// sDLaser := false ;
16139: LD_ADDR_EXP 92
16143: PUSH
16144: LD_INT 0
16146: ST_TO_ADDR
// sExchange := false ;
16147: LD_ADDR_EXP 93
16151: PUSH
16152: LD_INT 0
16154: ST_TO_ADDR
// sFac := false ;
16155: LD_ADDR_EXP 94
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// sPower := false ;
16163: LD_ADDR_EXP 95
16167: PUSH
16168: LD_INT 0
16170: ST_TO_ADDR
// sRandom := false ;
16171: LD_ADDR_EXP 96
16175: PUSH
16176: LD_INT 0
16178: ST_TO_ADDR
// sShield := false ;
16179: LD_ADDR_EXP 97
16183: PUSH
16184: LD_INT 0
16186: ST_TO_ADDR
// sTime := false ;
16187: LD_ADDR_EXP 98
16191: PUSH
16192: LD_INT 0
16194: ST_TO_ADDR
// sTools := false ;
16195: LD_ADDR_EXP 99
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// sSold := false ;
16203: LD_ADDR_EXP 64
16207: PUSH
16208: LD_INT 0
16210: ST_TO_ADDR
// sDiff := false ;
16211: LD_ADDR_EXP 65
16215: PUSH
16216: LD_INT 0
16218: ST_TO_ADDR
// sFog := false ;
16219: LD_ADDR_EXP 68
16223: PUSH
16224: LD_INT 0
16226: ST_TO_ADDR
// sReset := false ;
16227: LD_ADDR_EXP 69
16231: PUSH
16232: LD_INT 0
16234: ST_TO_ADDR
// sSun := false ;
16235: LD_ADDR_EXP 70
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// sTiger := false ;
16243: LD_ADDR_EXP 66
16247: PUSH
16248: LD_INT 0
16250: ST_TO_ADDR
// sBomb := false ;
16251: LD_ADDR_EXP 67
16255: PUSH
16256: LD_INT 0
16258: ST_TO_ADDR
// sWound := false ;
16259: LD_ADDR_EXP 75
16263: PUSH
16264: LD_INT 0
16266: ST_TO_ADDR
// sBetray := false ;
16267: LD_ADDR_EXP 79
16271: PUSH
16272: LD_INT 0
16274: ST_TO_ADDR
// sContamin := false ;
16275: LD_ADDR_EXP 80
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// sOil := false ;
16283: LD_ADDR_EXP 82
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// sStu := false ;
16291: LD_ADDR_EXP 86
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// sBazooka := false ;
16299: LD_ADDR_EXP 89
16303: PUSH
16304: LD_INT 0
16306: ST_TO_ADDR
// sMortar := false ;
16307: LD_ADDR_EXP 90
16311: PUSH
16312: LD_INT 0
16314: ST_TO_ADDR
// sRanger := false ;
16315: LD_ADDR_EXP 100
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// sComputer := false ;
16323: LD_ADDR_EXP 101
16327: PUSH
16328: LD_INT 0
16330: ST_TO_ADDR
// s30 := false ;
16331: LD_ADDR_EXP 102
16335: PUSH
16336: LD_INT 0
16338: ST_TO_ADDR
// s60 := false ;
16339: LD_ADDR_EXP 103
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// end ;
16347: LD_VAR 0 1
16351: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
// result := [ ] ;
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: EMPTY
16367: ST_TO_ADDR
// if campaign_id = 1 then
16368: LD_OWVAR 69
16372: PUSH
16373: LD_INT 1
16375: EQUAL
16376: IFFALSE 19542
// begin case mission_number of 1 :
16378: LD_OWVAR 70
16382: PUSH
16383: LD_INT 1
16385: DOUBLE
16386: EQUAL
16387: IFTRUE 16391
16389: GO 16467
16391: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16392: LD_ADDR_VAR 0 2
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 4
16402: PUSH
16403: LD_INT 11
16405: PUSH
16406: LD_INT 12
16408: PUSH
16409: LD_INT 15
16411: PUSH
16412: LD_INT 16
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_INT 23
16420: PUSH
16421: LD_INT 26
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 101
16437: PUSH
16438: LD_INT 102
16440: PUSH
16441: LD_INT 106
16443: PUSH
16444: LD_INT 116
16446: PUSH
16447: LD_INT 117
16449: PUSH
16450: LD_INT 118
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 19540
16467: LD_INT 2
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16559
16475: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: LD_INT 2
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 16
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_INT 23
16504: PUSH
16505: LD_INT 26
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 101
16521: PUSH
16522: LD_INT 102
16524: PUSH
16525: LD_INT 105
16527: PUSH
16528: LD_INT 106
16530: PUSH
16531: LD_INT 108
16533: PUSH
16534: LD_INT 116
16536: PUSH
16537: LD_INT 117
16539: PUSH
16540: LD_INT 118
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: ST_TO_ADDR
16557: GO 19540
16559: LD_INT 3
16561: DOUBLE
16562: EQUAL
16563: IFTRUE 16567
16565: GO 16655
16567: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16568: LD_ADDR_VAR 0 2
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 4
16578: PUSH
16579: LD_INT 5
16581: PUSH
16582: LD_INT 11
16584: PUSH
16585: LD_INT 12
16587: PUSH
16588: LD_INT 15
16590: PUSH
16591: LD_INT 16
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_INT 26
16599: PUSH
16600: LD_INT 36
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 101
16617: PUSH
16618: LD_INT 102
16620: PUSH
16621: LD_INT 105
16623: PUSH
16624: LD_INT 106
16626: PUSH
16627: LD_INT 108
16629: PUSH
16630: LD_INT 116
16632: PUSH
16633: LD_INT 117
16635: PUSH
16636: LD_INT 118
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: ST_TO_ADDR
16653: GO 19540
16655: LD_INT 4
16657: DOUBLE
16658: EQUAL
16659: IFTRUE 16663
16661: GO 16759
16663: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: LD_INT 4
16674: PUSH
16675: LD_INT 5
16677: PUSH
16678: LD_INT 8
16680: PUSH
16681: LD_INT 11
16683: PUSH
16684: LD_INT 12
16686: PUSH
16687: LD_INT 15
16689: PUSH
16690: LD_INT 16
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_INT 23
16698: PUSH
16699: LD_INT 26
16701: PUSH
16702: LD_INT 36
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 101
16721: PUSH
16722: LD_INT 102
16724: PUSH
16725: LD_INT 105
16727: PUSH
16728: LD_INT 106
16730: PUSH
16731: LD_INT 108
16733: PUSH
16734: LD_INT 116
16736: PUSH
16737: LD_INT 117
16739: PUSH
16740: LD_INT 118
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: ST_TO_ADDR
16757: GO 19540
16759: LD_INT 5
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16879
16767: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_INT 2
16775: PUSH
16776: LD_INT 4
16778: PUSH
16779: LD_INT 5
16781: PUSH
16782: LD_INT 6
16784: PUSH
16785: LD_INT 8
16787: PUSH
16788: LD_INT 11
16790: PUSH
16791: LD_INT 12
16793: PUSH
16794: LD_INT 15
16796: PUSH
16797: LD_INT 16
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 23
16805: PUSH
16806: LD_INT 25
16808: PUSH
16809: LD_INT 26
16811: PUSH
16812: LD_INT 36
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 101
16833: PUSH
16834: LD_INT 102
16836: PUSH
16837: LD_INT 105
16839: PUSH
16840: LD_INT 106
16842: PUSH
16843: LD_INT 108
16845: PUSH
16846: LD_INT 109
16848: PUSH
16849: LD_INT 112
16851: PUSH
16852: LD_INT 116
16854: PUSH
16855: LD_INT 117
16857: PUSH
16858: LD_INT 118
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: ST_TO_ADDR
16877: GO 19540
16879: LD_INT 6
16881: DOUBLE
16882: EQUAL
16883: IFTRUE 16887
16885: GO 17019
16887: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 4
16898: PUSH
16899: LD_INT 5
16901: PUSH
16902: LD_INT 6
16904: PUSH
16905: LD_INT 8
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 31
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: LD_INT 36
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 101
16973: PUSH
16974: LD_INT 102
16976: PUSH
16977: LD_INT 105
16979: PUSH
16980: LD_INT 106
16982: PUSH
16983: LD_INT 108
16985: PUSH
16986: LD_INT 109
16988: PUSH
16989: LD_INT 112
16991: PUSH
16992: LD_INT 116
16994: PUSH
16995: LD_INT 117
16997: PUSH
16998: LD_INT 118
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: ST_TO_ADDR
17017: GO 19540
17019: LD_INT 7
17021: DOUBLE
17022: EQUAL
17023: IFTRUE 17027
17025: GO 17139
17027: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 4
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: LD_INT 7
17044: PUSH
17045: LD_INT 11
17047: PUSH
17048: LD_INT 12
17050: PUSH
17051: LD_INT 15
17053: PUSH
17054: LD_INT 16
17056: PUSH
17057: LD_INT 20
17059: PUSH
17060: LD_INT 21
17062: PUSH
17063: LD_INT 22
17065: PUSH
17066: LD_INT 23
17068: PUSH
17069: LD_INT 25
17071: PUSH
17072: LD_INT 26
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 101
17093: PUSH
17094: LD_INT 102
17096: PUSH
17097: LD_INT 103
17099: PUSH
17100: LD_INT 105
17102: PUSH
17103: LD_INT 106
17105: PUSH
17106: LD_INT 108
17108: PUSH
17109: LD_INT 112
17111: PUSH
17112: LD_INT 116
17114: PUSH
17115: LD_INT 117
17117: PUSH
17118: LD_INT 118
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: ST_TO_ADDR
17137: GO 19540
17139: LD_INT 8
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17287
17147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17148: LD_ADDR_VAR 0 2
17152: PUSH
17153: LD_INT 2
17155: PUSH
17156: LD_INT 4
17158: PUSH
17159: LD_INT 5
17161: PUSH
17162: LD_INT 6
17164: PUSH
17165: LD_INT 7
17167: PUSH
17168: LD_INT 8
17170: PUSH
17171: LD_INT 11
17173: PUSH
17174: LD_INT 12
17176: PUSH
17177: LD_INT 15
17179: PUSH
17180: LD_INT 16
17182: PUSH
17183: LD_INT 20
17185: PUSH
17186: LD_INT 21
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_INT 23
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: LD_INT 30
17203: PUSH
17204: LD_INT 31
17206: PUSH
17207: LD_INT 32
17209: PUSH
17210: LD_INT 36
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 101
17237: PUSH
17238: LD_INT 102
17240: PUSH
17241: LD_INT 103
17243: PUSH
17244: LD_INT 105
17246: PUSH
17247: LD_INT 106
17249: PUSH
17250: LD_INT 108
17252: PUSH
17253: LD_INT 109
17255: PUSH
17256: LD_INT 112
17258: PUSH
17259: LD_INT 116
17261: PUSH
17262: LD_INT 117
17264: PUSH
17265: LD_INT 118
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: ST_TO_ADDR
17285: GO 19540
17287: LD_INT 9
17289: DOUBLE
17290: EQUAL
17291: IFTRUE 17295
17293: GO 17443
17295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17296: LD_ADDR_VAR 0 2
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 4
17306: PUSH
17307: LD_INT 5
17309: PUSH
17310: LD_INT 6
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: LD_INT 8
17318: PUSH
17319: LD_INT 11
17321: PUSH
17322: LD_INT 12
17324: PUSH
17325: LD_INT 15
17327: PUSH
17328: LD_INT 16
17330: PUSH
17331: LD_INT 20
17333: PUSH
17334: LD_INT 21
17336: PUSH
17337: LD_INT 22
17339: PUSH
17340: LD_INT 23
17342: PUSH
17343: LD_INT 25
17345: PUSH
17346: LD_INT 26
17348: PUSH
17349: LD_INT 28
17351: PUSH
17352: LD_INT 30
17354: PUSH
17355: LD_INT 31
17357: PUSH
17358: LD_INT 32
17360: PUSH
17361: LD_INT 36
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 101
17389: PUSH
17390: LD_INT 102
17392: PUSH
17393: LD_INT 103
17395: PUSH
17396: LD_INT 105
17398: PUSH
17399: LD_INT 106
17401: PUSH
17402: LD_INT 108
17404: PUSH
17405: LD_INT 109
17407: PUSH
17408: LD_INT 112
17410: PUSH
17411: LD_INT 114
17413: PUSH
17414: LD_INT 116
17416: PUSH
17417: LD_INT 117
17419: PUSH
17420: LD_INT 118
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: ST_TO_ADDR
17441: GO 19540
17443: LD_INT 10
17445: DOUBLE
17446: EQUAL
17447: IFTRUE 17451
17449: GO 17647
17451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17452: LD_ADDR_VAR 0 2
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 4
17462: PUSH
17463: LD_INT 5
17465: PUSH
17466: LD_INT 6
17468: PUSH
17469: LD_INT 7
17471: PUSH
17472: LD_INT 8
17474: PUSH
17475: LD_INT 9
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: LD_INT 11
17483: PUSH
17484: LD_INT 12
17486: PUSH
17487: LD_INT 13
17489: PUSH
17490: LD_INT 14
17492: PUSH
17493: LD_INT 15
17495: PUSH
17496: LD_INT 16
17498: PUSH
17499: LD_INT 17
17501: PUSH
17502: LD_INT 18
17504: PUSH
17505: LD_INT 19
17507: PUSH
17508: LD_INT 20
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 23
17519: PUSH
17520: LD_INT 24
17522: PUSH
17523: LD_INT 25
17525: PUSH
17526: LD_INT 26
17528: PUSH
17529: LD_INT 28
17531: PUSH
17532: LD_INT 30
17534: PUSH
17535: LD_INT 31
17537: PUSH
17538: LD_INT 32
17540: PUSH
17541: LD_INT 36
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 101
17577: PUSH
17578: LD_INT 102
17580: PUSH
17581: LD_INT 103
17583: PUSH
17584: LD_INT 104
17586: PUSH
17587: LD_INT 105
17589: PUSH
17590: LD_INT 106
17592: PUSH
17593: LD_INT 107
17595: PUSH
17596: LD_INT 108
17598: PUSH
17599: LD_INT 109
17601: PUSH
17602: LD_INT 110
17604: PUSH
17605: LD_INT 111
17607: PUSH
17608: LD_INT 112
17610: PUSH
17611: LD_INT 114
17613: PUSH
17614: LD_INT 116
17616: PUSH
17617: LD_INT 117
17619: PUSH
17620: LD_INT 118
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: ST_TO_ADDR
17645: GO 19540
17647: LD_INT 11
17649: DOUBLE
17650: EQUAL
17651: IFTRUE 17655
17653: GO 17859
17655: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_INT 2
17663: PUSH
17664: LD_INT 3
17666: PUSH
17667: LD_INT 4
17669: PUSH
17670: LD_INT 5
17672: PUSH
17673: LD_INT 6
17675: PUSH
17676: LD_INT 7
17678: PUSH
17679: LD_INT 8
17681: PUSH
17682: LD_INT 9
17684: PUSH
17685: LD_INT 10
17687: PUSH
17688: LD_INT 11
17690: PUSH
17691: LD_INT 12
17693: PUSH
17694: LD_INT 13
17696: PUSH
17697: LD_INT 14
17699: PUSH
17700: LD_INT 15
17702: PUSH
17703: LD_INT 16
17705: PUSH
17706: LD_INT 17
17708: PUSH
17709: LD_INT 18
17711: PUSH
17712: LD_INT 19
17714: PUSH
17715: LD_INT 20
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_INT 23
17726: PUSH
17727: LD_INT 24
17729: PUSH
17730: LD_INT 25
17732: PUSH
17733: LD_INT 26
17735: PUSH
17736: LD_INT 28
17738: PUSH
17739: LD_INT 30
17741: PUSH
17742: LD_INT 31
17744: PUSH
17745: LD_INT 32
17747: PUSH
17748: LD_INT 34
17750: PUSH
17751: LD_INT 36
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 101
17789: PUSH
17790: LD_INT 102
17792: PUSH
17793: LD_INT 103
17795: PUSH
17796: LD_INT 104
17798: PUSH
17799: LD_INT 105
17801: PUSH
17802: LD_INT 106
17804: PUSH
17805: LD_INT 107
17807: PUSH
17808: LD_INT 108
17810: PUSH
17811: LD_INT 109
17813: PUSH
17814: LD_INT 110
17816: PUSH
17817: LD_INT 111
17819: PUSH
17820: LD_INT 112
17822: PUSH
17823: LD_INT 114
17825: PUSH
17826: LD_INT 116
17828: PUSH
17829: LD_INT 117
17831: PUSH
17832: LD_INT 118
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: ST_TO_ADDR
17857: GO 19540
17859: LD_INT 12
17861: DOUBLE
17862: EQUAL
17863: IFTRUE 17867
17865: GO 18087
17867: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17868: LD_ADDR_VAR 0 2
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: LD_INT 4
17884: PUSH
17885: LD_INT 5
17887: PUSH
17888: LD_INT 6
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: LD_INT 8
17896: PUSH
17897: LD_INT 9
17899: PUSH
17900: LD_INT 10
17902: PUSH
17903: LD_INT 11
17905: PUSH
17906: LD_INT 12
17908: PUSH
17909: LD_INT 13
17911: PUSH
17912: LD_INT 14
17914: PUSH
17915: LD_INT 15
17917: PUSH
17918: LD_INT 16
17920: PUSH
17921: LD_INT 17
17923: PUSH
17924: LD_INT 18
17926: PUSH
17927: LD_INT 19
17929: PUSH
17930: LD_INT 20
17932: PUSH
17933: LD_INT 21
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 24
17944: PUSH
17945: LD_INT 25
17947: PUSH
17948: LD_INT 26
17950: PUSH
17951: LD_INT 27
17953: PUSH
17954: LD_INT 28
17956: PUSH
17957: LD_INT 30
17959: PUSH
17960: LD_INT 31
17962: PUSH
17963: LD_INT 32
17965: PUSH
17966: LD_INT 33
17968: PUSH
17969: LD_INT 34
17971: PUSH
17972: LD_INT 36
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 101
18013: PUSH
18014: LD_INT 102
18016: PUSH
18017: LD_INT 103
18019: PUSH
18020: LD_INT 104
18022: PUSH
18023: LD_INT 105
18025: PUSH
18026: LD_INT 106
18028: PUSH
18029: LD_INT 107
18031: PUSH
18032: LD_INT 108
18034: PUSH
18035: LD_INT 109
18037: PUSH
18038: LD_INT 110
18040: PUSH
18041: LD_INT 111
18043: PUSH
18044: LD_INT 112
18046: PUSH
18047: LD_INT 113
18049: PUSH
18050: LD_INT 114
18052: PUSH
18053: LD_INT 116
18055: PUSH
18056: LD_INT 117
18058: PUSH
18059: LD_INT 118
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: ST_TO_ADDR
18085: GO 19540
18087: LD_INT 13
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18303
18095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 3
18109: PUSH
18110: LD_INT 4
18112: PUSH
18113: LD_INT 5
18115: PUSH
18116: LD_INT 8
18118: PUSH
18119: LD_INT 9
18121: PUSH
18122: LD_INT 10
18124: PUSH
18125: LD_INT 11
18127: PUSH
18128: LD_INT 12
18130: PUSH
18131: LD_INT 14
18133: PUSH
18134: LD_INT 15
18136: PUSH
18137: LD_INT 16
18139: PUSH
18140: LD_INT 17
18142: PUSH
18143: LD_INT 18
18145: PUSH
18146: LD_INT 19
18148: PUSH
18149: LD_INT 20
18151: PUSH
18152: LD_INT 21
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_INT 23
18160: PUSH
18161: LD_INT 24
18163: PUSH
18164: LD_INT 25
18166: PUSH
18167: LD_INT 26
18169: PUSH
18170: LD_INT 27
18172: PUSH
18173: LD_INT 28
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 31
18181: PUSH
18182: LD_INT 32
18184: PUSH
18185: LD_INT 33
18187: PUSH
18188: LD_INT 34
18190: PUSH
18191: LD_INT 36
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 101
18229: PUSH
18230: LD_INT 102
18232: PUSH
18233: LD_INT 103
18235: PUSH
18236: LD_INT 104
18238: PUSH
18239: LD_INT 105
18241: PUSH
18242: LD_INT 106
18244: PUSH
18245: LD_INT 107
18247: PUSH
18248: LD_INT 108
18250: PUSH
18251: LD_INT 109
18253: PUSH
18254: LD_INT 110
18256: PUSH
18257: LD_INT 111
18259: PUSH
18260: LD_INT 112
18262: PUSH
18263: LD_INT 113
18265: PUSH
18266: LD_INT 114
18268: PUSH
18269: LD_INT 116
18271: PUSH
18272: LD_INT 117
18274: PUSH
18275: LD_INT 118
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: ST_TO_ADDR
18301: GO 19540
18303: LD_INT 14
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18311
18309: GO 18535
18311: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: LD_INT 3
18325: PUSH
18326: LD_INT 4
18328: PUSH
18329: LD_INT 5
18331: PUSH
18332: LD_INT 6
18334: PUSH
18335: LD_INT 7
18337: PUSH
18338: LD_INT 8
18340: PUSH
18341: LD_INT 9
18343: PUSH
18344: LD_INT 10
18346: PUSH
18347: LD_INT 11
18349: PUSH
18350: LD_INT 12
18352: PUSH
18353: LD_INT 13
18355: PUSH
18356: LD_INT 14
18358: PUSH
18359: LD_INT 15
18361: PUSH
18362: LD_INT 16
18364: PUSH
18365: LD_INT 17
18367: PUSH
18368: LD_INT 18
18370: PUSH
18371: LD_INT 19
18373: PUSH
18374: LD_INT 20
18376: PUSH
18377: LD_INT 21
18379: PUSH
18380: LD_INT 22
18382: PUSH
18383: LD_INT 23
18385: PUSH
18386: LD_INT 24
18388: PUSH
18389: LD_INT 25
18391: PUSH
18392: LD_INT 26
18394: PUSH
18395: LD_INT 27
18397: PUSH
18398: LD_INT 28
18400: PUSH
18401: LD_INT 29
18403: PUSH
18404: LD_INT 30
18406: PUSH
18407: LD_INT 31
18409: PUSH
18410: LD_INT 32
18412: PUSH
18413: LD_INT 33
18415: PUSH
18416: LD_INT 34
18418: PUSH
18419: LD_INT 36
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 101
18461: PUSH
18462: LD_INT 102
18464: PUSH
18465: LD_INT 103
18467: PUSH
18468: LD_INT 104
18470: PUSH
18471: LD_INT 105
18473: PUSH
18474: LD_INT 106
18476: PUSH
18477: LD_INT 107
18479: PUSH
18480: LD_INT 108
18482: PUSH
18483: LD_INT 109
18485: PUSH
18486: LD_INT 110
18488: PUSH
18489: LD_INT 111
18491: PUSH
18492: LD_INT 112
18494: PUSH
18495: LD_INT 113
18497: PUSH
18498: LD_INT 114
18500: PUSH
18501: LD_INT 116
18503: PUSH
18504: LD_INT 117
18506: PUSH
18507: LD_INT 118
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: ST_TO_ADDR
18533: GO 19540
18535: LD_INT 15
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18767
18543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18544: LD_ADDR_VAR 0 2
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: LD_INT 2
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: LD_INT 4
18560: PUSH
18561: LD_INT 5
18563: PUSH
18564: LD_INT 6
18566: PUSH
18567: LD_INT 7
18569: PUSH
18570: LD_INT 8
18572: PUSH
18573: LD_INT 9
18575: PUSH
18576: LD_INT 10
18578: PUSH
18579: LD_INT 11
18581: PUSH
18582: LD_INT 12
18584: PUSH
18585: LD_INT 13
18587: PUSH
18588: LD_INT 14
18590: PUSH
18591: LD_INT 15
18593: PUSH
18594: LD_INT 16
18596: PUSH
18597: LD_INT 17
18599: PUSH
18600: LD_INT 18
18602: PUSH
18603: LD_INT 19
18605: PUSH
18606: LD_INT 20
18608: PUSH
18609: LD_INT 21
18611: PUSH
18612: LD_INT 22
18614: PUSH
18615: LD_INT 23
18617: PUSH
18618: LD_INT 24
18620: PUSH
18621: LD_INT 25
18623: PUSH
18624: LD_INT 26
18626: PUSH
18627: LD_INT 27
18629: PUSH
18630: LD_INT 28
18632: PUSH
18633: LD_INT 29
18635: PUSH
18636: LD_INT 30
18638: PUSH
18639: LD_INT 31
18641: PUSH
18642: LD_INT 32
18644: PUSH
18645: LD_INT 33
18647: PUSH
18648: LD_INT 34
18650: PUSH
18651: LD_INT 36
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 101
18693: PUSH
18694: LD_INT 102
18696: PUSH
18697: LD_INT 103
18699: PUSH
18700: LD_INT 104
18702: PUSH
18703: LD_INT 105
18705: PUSH
18706: LD_INT 106
18708: PUSH
18709: LD_INT 107
18711: PUSH
18712: LD_INT 108
18714: PUSH
18715: LD_INT 109
18717: PUSH
18718: LD_INT 110
18720: PUSH
18721: LD_INT 111
18723: PUSH
18724: LD_INT 112
18726: PUSH
18727: LD_INT 113
18729: PUSH
18730: LD_INT 114
18732: PUSH
18733: LD_INT 116
18735: PUSH
18736: LD_INT 117
18738: PUSH
18739: LD_INT 118
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: ST_TO_ADDR
18765: GO 19540
18767: LD_INT 16
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18911
18775: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18776: LD_ADDR_VAR 0 2
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 4
18786: PUSH
18787: LD_INT 5
18789: PUSH
18790: LD_INT 7
18792: PUSH
18793: LD_INT 11
18795: PUSH
18796: LD_INT 12
18798: PUSH
18799: LD_INT 15
18801: PUSH
18802: LD_INT 16
18804: PUSH
18805: LD_INT 20
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 22
18813: PUSH
18814: LD_INT 23
18816: PUSH
18817: LD_INT 25
18819: PUSH
18820: LD_INT 26
18822: PUSH
18823: LD_INT 30
18825: PUSH
18826: LD_INT 31
18828: PUSH
18829: LD_INT 32
18831: PUSH
18832: LD_INT 33
18834: PUSH
18835: LD_INT 34
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 101
18861: PUSH
18862: LD_INT 102
18864: PUSH
18865: LD_INT 103
18867: PUSH
18868: LD_INT 106
18870: PUSH
18871: LD_INT 108
18873: PUSH
18874: LD_INT 112
18876: PUSH
18877: LD_INT 113
18879: PUSH
18880: LD_INT 114
18882: PUSH
18883: LD_INT 116
18885: PUSH
18886: LD_INT 117
18888: PUSH
18889: LD_INT 118
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: ST_TO_ADDR
18909: GO 19540
18911: LD_INT 17
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 19143
18919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18920: LD_ADDR_VAR 0 2
18924: PUSH
18925: LD_INT 1
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: LD_INT 4
18936: PUSH
18937: LD_INT 5
18939: PUSH
18940: LD_INT 6
18942: PUSH
18943: LD_INT 7
18945: PUSH
18946: LD_INT 8
18948: PUSH
18949: LD_INT 9
18951: PUSH
18952: LD_INT 10
18954: PUSH
18955: LD_INT 11
18957: PUSH
18958: LD_INT 12
18960: PUSH
18961: LD_INT 13
18963: PUSH
18964: LD_INT 14
18966: PUSH
18967: LD_INT 15
18969: PUSH
18970: LD_INT 16
18972: PUSH
18973: LD_INT 17
18975: PUSH
18976: LD_INT 18
18978: PUSH
18979: LD_INT 19
18981: PUSH
18982: LD_INT 20
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 22
18990: PUSH
18991: LD_INT 23
18993: PUSH
18994: LD_INT 24
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 26
19002: PUSH
19003: LD_INT 27
19005: PUSH
19006: LD_INT 28
19008: PUSH
19009: LD_INT 29
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: LD_INT 31
19017: PUSH
19018: LD_INT 32
19020: PUSH
19021: LD_INT 33
19023: PUSH
19024: LD_INT 34
19026: PUSH
19027: LD_INT 36
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 101
19069: PUSH
19070: LD_INT 102
19072: PUSH
19073: LD_INT 103
19075: PUSH
19076: LD_INT 104
19078: PUSH
19079: LD_INT 105
19081: PUSH
19082: LD_INT 106
19084: PUSH
19085: LD_INT 107
19087: PUSH
19088: LD_INT 108
19090: PUSH
19091: LD_INT 109
19093: PUSH
19094: LD_INT 110
19096: PUSH
19097: LD_INT 111
19099: PUSH
19100: LD_INT 112
19102: PUSH
19103: LD_INT 113
19105: PUSH
19106: LD_INT 114
19108: PUSH
19109: LD_INT 116
19111: PUSH
19112: LD_INT 117
19114: PUSH
19115: LD_INT 118
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: ST_TO_ADDR
19141: GO 19540
19143: LD_INT 18
19145: DOUBLE
19146: EQUAL
19147: IFTRUE 19151
19149: GO 19299
19151: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 4
19162: PUSH
19163: LD_INT 5
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: LD_INT 11
19171: PUSH
19172: LD_INT 12
19174: PUSH
19175: LD_INT 15
19177: PUSH
19178: LD_INT 16
19180: PUSH
19181: LD_INT 20
19183: PUSH
19184: LD_INT 21
19186: PUSH
19187: LD_INT 22
19189: PUSH
19190: LD_INT 23
19192: PUSH
19193: LD_INT 25
19195: PUSH
19196: LD_INT 26
19198: PUSH
19199: LD_INT 30
19201: PUSH
19202: LD_INT 31
19204: PUSH
19205: LD_INT 32
19207: PUSH
19208: LD_INT 33
19210: PUSH
19211: LD_INT 34
19213: PUSH
19214: LD_INT 35
19216: PUSH
19217: LD_INT 36
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 101
19245: PUSH
19246: LD_INT 102
19248: PUSH
19249: LD_INT 103
19251: PUSH
19252: LD_INT 106
19254: PUSH
19255: LD_INT 108
19257: PUSH
19258: LD_INT 112
19260: PUSH
19261: LD_INT 113
19263: PUSH
19264: LD_INT 114
19266: PUSH
19267: LD_INT 115
19269: PUSH
19270: LD_INT 116
19272: PUSH
19273: LD_INT 117
19275: PUSH
19276: LD_INT 118
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: ST_TO_ADDR
19297: GO 19540
19299: LD_INT 19
19301: DOUBLE
19302: EQUAL
19303: IFTRUE 19307
19305: GO 19539
19307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19308: LD_ADDR_VAR 0 2
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: LD_INT 4
19324: PUSH
19325: LD_INT 5
19327: PUSH
19328: LD_INT 6
19330: PUSH
19331: LD_INT 7
19333: PUSH
19334: LD_INT 8
19336: PUSH
19337: LD_INT 9
19339: PUSH
19340: LD_INT 10
19342: PUSH
19343: LD_INT 11
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: LD_INT 13
19351: PUSH
19352: LD_INT 14
19354: PUSH
19355: LD_INT 15
19357: PUSH
19358: LD_INT 16
19360: PUSH
19361: LD_INT 17
19363: PUSH
19364: LD_INT 18
19366: PUSH
19367: LD_INT 19
19369: PUSH
19370: LD_INT 20
19372: PUSH
19373: LD_INT 21
19375: PUSH
19376: LD_INT 22
19378: PUSH
19379: LD_INT 23
19381: PUSH
19382: LD_INT 24
19384: PUSH
19385: LD_INT 25
19387: PUSH
19388: LD_INT 26
19390: PUSH
19391: LD_INT 27
19393: PUSH
19394: LD_INT 28
19396: PUSH
19397: LD_INT 29
19399: PUSH
19400: LD_INT 30
19402: PUSH
19403: LD_INT 31
19405: PUSH
19406: LD_INT 32
19408: PUSH
19409: LD_INT 33
19411: PUSH
19412: LD_INT 34
19414: PUSH
19415: LD_INT 35
19417: PUSH
19418: LD_INT 36
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 101
19461: PUSH
19462: LD_INT 102
19464: PUSH
19465: LD_INT 103
19467: PUSH
19468: LD_INT 104
19470: PUSH
19471: LD_INT 105
19473: PUSH
19474: LD_INT 106
19476: PUSH
19477: LD_INT 107
19479: PUSH
19480: LD_INT 108
19482: PUSH
19483: LD_INT 109
19485: PUSH
19486: LD_INT 110
19488: PUSH
19489: LD_INT 111
19491: PUSH
19492: LD_INT 112
19494: PUSH
19495: LD_INT 113
19497: PUSH
19498: LD_INT 114
19500: PUSH
19501: LD_INT 115
19503: PUSH
19504: LD_INT 116
19506: PUSH
19507: LD_INT 117
19509: PUSH
19510: LD_INT 118
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: ST_TO_ADDR
19537: GO 19540
19539: POP
// end else
19540: GO 19771
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19542: LD_ADDR_VAR 0 2
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 4
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: LD_INT 6
19564: PUSH
19565: LD_INT 7
19567: PUSH
19568: LD_INT 8
19570: PUSH
19571: LD_INT 9
19573: PUSH
19574: LD_INT 10
19576: PUSH
19577: LD_INT 11
19579: PUSH
19580: LD_INT 12
19582: PUSH
19583: LD_INT 13
19585: PUSH
19586: LD_INT 14
19588: PUSH
19589: LD_INT 15
19591: PUSH
19592: LD_INT 16
19594: PUSH
19595: LD_INT 17
19597: PUSH
19598: LD_INT 18
19600: PUSH
19601: LD_INT 19
19603: PUSH
19604: LD_INT 20
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 22
19612: PUSH
19613: LD_INT 23
19615: PUSH
19616: LD_INT 24
19618: PUSH
19619: LD_INT 25
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: LD_INT 27
19627: PUSH
19628: LD_INT 28
19630: PUSH
19631: LD_INT 29
19633: PUSH
19634: LD_INT 30
19636: PUSH
19637: LD_INT 31
19639: PUSH
19640: LD_INT 32
19642: PUSH
19643: LD_INT 33
19645: PUSH
19646: LD_INT 34
19648: PUSH
19649: LD_INT 35
19651: PUSH
19652: LD_INT 36
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 101
19695: PUSH
19696: LD_INT 102
19698: PUSH
19699: LD_INT 103
19701: PUSH
19702: LD_INT 104
19704: PUSH
19705: LD_INT 105
19707: PUSH
19708: LD_INT 106
19710: PUSH
19711: LD_INT 107
19713: PUSH
19714: LD_INT 108
19716: PUSH
19717: LD_INT 109
19719: PUSH
19720: LD_INT 110
19722: PUSH
19723: LD_INT 111
19725: PUSH
19726: LD_INT 112
19728: PUSH
19729: LD_INT 113
19731: PUSH
19732: LD_INT 114
19734: PUSH
19735: LD_INT 115
19737: PUSH
19738: LD_INT 116
19740: PUSH
19741: LD_INT 117
19743: PUSH
19744: LD_INT 118
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: ST_TO_ADDR
// if result then
19771: LD_VAR 0 2
19775: IFFALSE 20561
// begin normal :=  ;
19777: LD_ADDR_VAR 0 5
19781: PUSH
19782: LD_STRING 
19784: ST_TO_ADDR
// hardcore :=  ;
19785: LD_ADDR_VAR 0 6
19789: PUSH
19790: LD_STRING 
19792: ST_TO_ADDR
// active :=  ;
19793: LD_ADDR_VAR 0 7
19797: PUSH
19798: LD_STRING 
19800: ST_TO_ADDR
// for i = 1 to normalCounter do
19801: LD_ADDR_VAR 0 8
19805: PUSH
19806: DOUBLE
19807: LD_INT 1
19809: DEC
19810: ST_TO_ADDR
19811: LD_EXP 48
19815: PUSH
19816: FOR_TO
19817: IFFALSE 19918
// begin tmp := 0 ;
19819: LD_ADDR_VAR 0 3
19823: PUSH
19824: LD_STRING 0
19826: ST_TO_ADDR
// if result [ 1 ] then
19827: LD_VAR 0 2
19831: PUSH
19832: LD_INT 1
19834: ARRAY
19835: IFFALSE 19900
// if result [ 1 ] [ 1 ] = i then
19837: LD_VAR 0 2
19841: PUSH
19842: LD_INT 1
19844: ARRAY
19845: PUSH
19846: LD_INT 1
19848: ARRAY
19849: PUSH
19850: LD_VAR 0 8
19854: EQUAL
19855: IFFALSE 19900
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19857: LD_ADDR_VAR 0 2
19861: PUSH
19862: LD_VAR 0 2
19866: PPUSH
19867: LD_INT 1
19869: PPUSH
19870: LD_VAR 0 2
19874: PUSH
19875: LD_INT 1
19877: ARRAY
19878: PPUSH
19879: LD_INT 1
19881: PPUSH
19882: CALL_OW 3
19886: PPUSH
19887: CALL_OW 1
19891: ST_TO_ADDR
// tmp := 1 ;
19892: LD_ADDR_VAR 0 3
19896: PUSH
19897: LD_STRING 1
19899: ST_TO_ADDR
// end ; normal := normal & tmp ;
19900: LD_ADDR_VAR 0 5
19904: PUSH
19905: LD_VAR 0 5
19909: PUSH
19910: LD_VAR 0 3
19914: STR
19915: ST_TO_ADDR
// end ;
19916: GO 19816
19918: POP
19919: POP
// for i = 1 to hardcoreCounter do
19920: LD_ADDR_VAR 0 8
19924: PUSH
19925: DOUBLE
19926: LD_INT 1
19928: DEC
19929: ST_TO_ADDR
19930: LD_EXP 49
19934: PUSH
19935: FOR_TO
19936: IFFALSE 20041
// begin tmp := 0 ;
19938: LD_ADDR_VAR 0 3
19942: PUSH
19943: LD_STRING 0
19945: ST_TO_ADDR
// if result [ 2 ] then
19946: LD_VAR 0 2
19950: PUSH
19951: LD_INT 2
19953: ARRAY
19954: IFFALSE 20023
// if result [ 2 ] [ 1 ] = 100 + i then
19956: LD_VAR 0 2
19960: PUSH
19961: LD_INT 2
19963: ARRAY
19964: PUSH
19965: LD_INT 1
19967: ARRAY
19968: PUSH
19969: LD_INT 100
19971: PUSH
19972: LD_VAR 0 8
19976: PLUS
19977: EQUAL
19978: IFFALSE 20023
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_VAR 0 2
19989: PPUSH
19990: LD_INT 2
19992: PPUSH
19993: LD_VAR 0 2
19997: PUSH
19998: LD_INT 2
20000: ARRAY
20001: PPUSH
20002: LD_INT 1
20004: PPUSH
20005: CALL_OW 3
20009: PPUSH
20010: CALL_OW 1
20014: ST_TO_ADDR
// tmp := 1 ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_STRING 1
20022: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20023: LD_ADDR_VAR 0 6
20027: PUSH
20028: LD_VAR 0 6
20032: PUSH
20033: LD_VAR 0 3
20037: STR
20038: ST_TO_ADDR
// end ;
20039: GO 19935
20041: POP
20042: POP
// if isGameLoad then
20043: LD_VAR 0 1
20047: IFFALSE 20522
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20049: LD_ADDR_VAR 0 4
20053: PUSH
20054: LD_EXP 52
20058: PUSH
20059: LD_EXP 51
20063: PUSH
20064: LD_EXP 53
20068: PUSH
20069: LD_EXP 50
20073: PUSH
20074: LD_EXP 54
20078: PUSH
20079: LD_EXP 55
20083: PUSH
20084: LD_EXP 56
20088: PUSH
20089: LD_EXP 57
20093: PUSH
20094: LD_EXP 58
20098: PUSH
20099: LD_EXP 59
20103: PUSH
20104: LD_EXP 60
20108: PUSH
20109: LD_EXP 61
20113: PUSH
20114: LD_EXP 62
20118: PUSH
20119: LD_EXP 63
20123: PUSH
20124: LD_EXP 71
20128: PUSH
20129: LD_EXP 72
20133: PUSH
20134: LD_EXP 73
20138: PUSH
20139: LD_EXP 74
20143: PUSH
20144: LD_EXP 76
20148: PUSH
20149: LD_EXP 77
20153: PUSH
20154: LD_EXP 78
20158: PUSH
20159: LD_EXP 81
20163: PUSH
20164: LD_EXP 83
20168: PUSH
20169: LD_EXP 84
20173: PUSH
20174: LD_EXP 85
20178: PUSH
20179: LD_EXP 87
20183: PUSH
20184: LD_EXP 88
20188: PUSH
20189: LD_EXP 91
20193: PUSH
20194: LD_EXP 92
20198: PUSH
20199: LD_EXP 93
20203: PUSH
20204: LD_EXP 94
20208: PUSH
20209: LD_EXP 95
20213: PUSH
20214: LD_EXP 96
20218: PUSH
20219: LD_EXP 97
20223: PUSH
20224: LD_EXP 98
20228: PUSH
20229: LD_EXP 99
20233: PUSH
20234: LD_EXP 64
20238: PUSH
20239: LD_EXP 65
20243: PUSH
20244: LD_EXP 68
20248: PUSH
20249: LD_EXP 69
20253: PUSH
20254: LD_EXP 70
20258: PUSH
20259: LD_EXP 66
20263: PUSH
20264: LD_EXP 67
20268: PUSH
20269: LD_EXP 75
20273: PUSH
20274: LD_EXP 79
20278: PUSH
20279: LD_EXP 80
20283: PUSH
20284: LD_EXP 82
20288: PUSH
20289: LD_EXP 86
20293: PUSH
20294: LD_EXP 89
20298: PUSH
20299: LD_EXP 90
20303: PUSH
20304: LD_EXP 100
20308: PUSH
20309: LD_EXP 101
20313: PUSH
20314: LD_EXP 102
20318: PUSH
20319: LD_EXP 103
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: ST_TO_ADDR
// tmp :=  ;
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_STRING 
20387: ST_TO_ADDR
// for i = 1 to normalCounter do
20388: LD_ADDR_VAR 0 8
20392: PUSH
20393: DOUBLE
20394: LD_INT 1
20396: DEC
20397: ST_TO_ADDR
20398: LD_EXP 48
20402: PUSH
20403: FOR_TO
20404: IFFALSE 20440
// begin if flags [ i ] then
20406: LD_VAR 0 4
20410: PUSH
20411: LD_VAR 0 8
20415: ARRAY
20416: IFFALSE 20438
// tmp := tmp & i & ; ;
20418: LD_ADDR_VAR 0 3
20422: PUSH
20423: LD_VAR 0 3
20427: PUSH
20428: LD_VAR 0 8
20432: STR
20433: PUSH
20434: LD_STRING ;
20436: STR
20437: ST_TO_ADDR
// end ;
20438: GO 20403
20440: POP
20441: POP
// for i = 1 to hardcoreCounter do
20442: LD_ADDR_VAR 0 8
20446: PUSH
20447: DOUBLE
20448: LD_INT 1
20450: DEC
20451: ST_TO_ADDR
20452: LD_EXP 49
20456: PUSH
20457: FOR_TO
20458: IFFALSE 20504
// begin if flags [ normalCounter + i ] then
20460: LD_VAR 0 4
20464: PUSH
20465: LD_EXP 48
20469: PUSH
20470: LD_VAR 0 8
20474: PLUS
20475: ARRAY
20476: IFFALSE 20502
// tmp := tmp & ( 100 + i ) & ; ;
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 100
20490: PUSH
20491: LD_VAR 0 8
20495: PLUS
20496: STR
20497: PUSH
20498: LD_STRING ;
20500: STR
20501: ST_TO_ADDR
// end ;
20502: GO 20457
20504: POP
20505: POP
// if tmp then
20506: LD_VAR 0 3
20510: IFFALSE 20522
// active := tmp ;
20512: LD_ADDR_VAR 0 7
20516: PUSH
20517: LD_VAR 0 3
20521: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20522: LD_STRING getStreamItemsFromMission("
20524: PUSH
20525: LD_VAR 0 5
20529: STR
20530: PUSH
20531: LD_STRING ","
20533: STR
20534: PUSH
20535: LD_VAR 0 6
20539: STR
20540: PUSH
20541: LD_STRING ","
20543: STR
20544: PUSH
20545: LD_VAR 0 7
20549: STR
20550: PUSH
20551: LD_STRING ")
20553: STR
20554: PPUSH
20555: CALL_OW 559
// end else
20559: GO 20568
// ToLua ( getStreamItemsFromMission("","","") ) ;
20561: LD_STRING getStreamItemsFromMission("","","")
20563: PPUSH
20564: CALL_OW 559
// end ;
20568: LD_VAR 0 2
20572: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20573: LD_EXP 47
20577: PUSH
20578: LD_EXP 52
20582: AND
20583: IFFALSE 20707
20585: GO 20587
20587: DISABLE
20588: LD_INT 0
20590: PPUSH
20591: PPUSH
// begin enable ;
20592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20593: LD_ADDR_VAR 0 2
20597: PUSH
20598: LD_INT 22
20600: PUSH
20601: LD_OWVAR 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 34
20615: PUSH
20616: LD_INT 7
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 34
20625: PUSH
20626: LD_INT 45
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 34
20635: PUSH
20636: LD_INT 28
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 34
20645: PUSH
20646: LD_INT 47
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: ST_TO_ADDR
// if not tmp then
20669: LD_VAR 0 2
20673: NOT
20674: IFFALSE 20678
// exit ;
20676: GO 20707
// for i in tmp do
20678: LD_ADDR_VAR 0 1
20682: PUSH
20683: LD_VAR 0 2
20687: PUSH
20688: FOR_IN
20689: IFFALSE 20705
// begin SetLives ( i , 0 ) ;
20691: LD_VAR 0 1
20695: PPUSH
20696: LD_INT 0
20698: PPUSH
20699: CALL_OW 234
// end ;
20703: GO 20688
20705: POP
20706: POP
// end ;
20707: PPOPN 2
20709: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20710: LD_EXP 47
20714: PUSH
20715: LD_EXP 53
20719: AND
20720: IFFALSE 20804
20722: GO 20724
20724: DISABLE
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
// begin enable ;
20729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20730: LD_ADDR_VAR 0 2
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_OWVAR 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 32
20749: PUSH
20750: LD_INT 3
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PPUSH
20761: CALL_OW 69
20765: ST_TO_ADDR
// if not tmp then
20766: LD_VAR 0 2
20770: NOT
20771: IFFALSE 20775
// exit ;
20773: GO 20804
// for i in tmp do
20775: LD_ADDR_VAR 0 1
20779: PUSH
20780: LD_VAR 0 2
20784: PUSH
20785: FOR_IN
20786: IFFALSE 20802
// begin SetLives ( i , 0 ) ;
20788: LD_VAR 0 1
20792: PPUSH
20793: LD_INT 0
20795: PPUSH
20796: CALL_OW 234
// end ;
20800: GO 20785
20802: POP
20803: POP
// end ;
20804: PPOPN 2
20806: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20807: LD_EXP 47
20811: PUSH
20812: LD_EXP 50
20816: AND
20817: IFFALSE 20910
20819: GO 20821
20821: DISABLE
20822: LD_INT 0
20824: PPUSH
// begin enable ;
20825: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20826: LD_ADDR_VAR 0 1
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_OWVAR 2
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: LD_INT 25
20848: PUSH
20849: LD_INT 5
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 25
20858: PUSH
20859: LD_INT 9
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 25
20868: PUSH
20869: LD_INT 8
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PPUSH
20886: CALL_OW 69
20890: PUSH
20891: FOR_IN
20892: IFFALSE 20908
// begin SetClass ( i , 1 ) ;
20894: LD_VAR 0 1
20898: PPUSH
20899: LD_INT 1
20901: PPUSH
20902: CALL_OW 336
// end ;
20906: GO 20891
20908: POP
20909: POP
// end ;
20910: PPOPN 1
20912: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20913: LD_EXP 47
20917: PUSH
20918: LD_EXP 51
20922: AND
20923: PUSH
20924: LD_OWVAR 65
20928: PUSH
20929: LD_INT 7
20931: LESS
20932: AND
20933: IFFALSE 20947
20935: GO 20937
20937: DISABLE
// begin enable ;
20938: ENABLE
// game_speed := 7 ;
20939: LD_ADDR_OWVAR 65
20943: PUSH
20944: LD_INT 7
20946: ST_TO_ADDR
// end ;
20947: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20948: LD_EXP 47
20952: PUSH
20953: LD_EXP 54
20957: AND
20958: IFFALSE 21160
20960: GO 20962
20962: DISABLE
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
20967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_INT 81
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 21
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PPUSH
20999: CALL_OW 69
21003: ST_TO_ADDR
// if not tmp then
21004: LD_VAR 0 3
21008: NOT
21009: IFFALSE 21013
// exit ;
21011: GO 21160
// if tmp > 5 then
21013: LD_VAR 0 3
21017: PUSH
21018: LD_INT 5
21020: GREATER
21021: IFFALSE 21033
// k := 5 else
21023: LD_ADDR_VAR 0 2
21027: PUSH
21028: LD_INT 5
21030: ST_TO_ADDR
21031: GO 21043
// k := tmp ;
21033: LD_ADDR_VAR 0 2
21037: PUSH
21038: LD_VAR 0 3
21042: ST_TO_ADDR
// for i := 1 to k do
21043: LD_ADDR_VAR 0 1
21047: PUSH
21048: DOUBLE
21049: LD_INT 1
21051: DEC
21052: ST_TO_ADDR
21053: LD_VAR 0 2
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21158
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_VAR 0 1
21070: ARRAY
21071: PPUSH
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 4
21079: MOD
21080: PUSH
21081: LD_INT 1
21083: PLUS
21084: PPUSH
21085: CALL_OW 259
21089: PUSH
21090: LD_INT 10
21092: LESS
21093: IFFALSE 21156
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21095: LD_VAR 0 3
21099: PUSH
21100: LD_VAR 0 1
21104: ARRAY
21105: PPUSH
21106: LD_VAR 0 1
21110: PUSH
21111: LD_INT 4
21113: MOD
21114: PUSH
21115: LD_INT 1
21117: PLUS
21118: PPUSH
21119: LD_VAR 0 3
21123: PUSH
21124: LD_VAR 0 1
21128: ARRAY
21129: PPUSH
21130: LD_VAR 0 1
21134: PUSH
21135: LD_INT 4
21137: MOD
21138: PUSH
21139: LD_INT 1
21141: PLUS
21142: PPUSH
21143: CALL_OW 259
21147: PUSH
21148: LD_INT 1
21150: PLUS
21151: PPUSH
21152: CALL_OW 237
21156: GO 21058
21158: POP
21159: POP
// end ;
21160: PPOPN 3
21162: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21163: LD_EXP 47
21167: PUSH
21168: LD_EXP 55
21172: AND
21173: IFFALSE 21193
21175: GO 21177
21177: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21178: LD_INT 4
21180: PPUSH
21181: LD_OWVAR 2
21185: PPUSH
21186: LD_INT 0
21188: PPUSH
21189: CALL_OW 324
21193: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21194: LD_EXP 47
21198: PUSH
21199: LD_EXP 84
21203: AND
21204: IFFALSE 21224
21206: GO 21208
21208: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21209: LD_INT 19
21211: PPUSH
21212: LD_OWVAR 2
21216: PPUSH
21217: LD_INT 0
21219: PPUSH
21220: CALL_OW 324
21224: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21225: LD_EXP 47
21229: PUSH
21230: LD_EXP 56
21234: AND
21235: IFFALSE 21337
21237: GO 21239
21239: DISABLE
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
// begin enable ;
21244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 34
21267: PUSH
21268: LD_INT 11
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 34
21277: PUSH
21278: LD_INT 30
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 69
21298: ST_TO_ADDR
// if not tmp then
21299: LD_VAR 0 2
21303: NOT
21304: IFFALSE 21308
// exit ;
21306: GO 21337
// for i in tmp do
21308: LD_ADDR_VAR 0 1
21312: PUSH
21313: LD_VAR 0 2
21317: PUSH
21318: FOR_IN
21319: IFFALSE 21335
// begin SetLives ( i , 0 ) ;
21321: LD_VAR 0 1
21325: PPUSH
21326: LD_INT 0
21328: PPUSH
21329: CALL_OW 234
// end ;
21333: GO 21318
21335: POP
21336: POP
// end ;
21337: PPOPN 2
21339: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21340: LD_EXP 47
21344: PUSH
21345: LD_EXP 57
21349: AND
21350: IFFALSE 21370
21352: GO 21354
21354: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21355: LD_INT 32
21357: PPUSH
21358: LD_OWVAR 2
21362: PPUSH
21363: LD_INT 0
21365: PPUSH
21366: CALL_OW 324
21370: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21371: LD_EXP 47
21375: PUSH
21376: LD_EXP 58
21380: AND
21381: IFFALSE 21562
21383: GO 21385
21385: DISABLE
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
21390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_OWVAR 2
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 33
21410: PUSH
21411: LD_INT 3
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PPUSH
21422: CALL_OW 69
21426: ST_TO_ADDR
// if not tmp then
21427: LD_VAR 0 2
21431: NOT
21432: IFFALSE 21436
// exit ;
21434: GO 21562
// side := 0 ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_INT 0
21443: ST_TO_ADDR
// for i := 1 to 8 do
21444: LD_ADDR_VAR 0 1
21448: PUSH
21449: DOUBLE
21450: LD_INT 1
21452: DEC
21453: ST_TO_ADDR
21454: LD_INT 8
21456: PUSH
21457: FOR_TO
21458: IFFALSE 21506
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21460: LD_OWVAR 2
21464: PUSH
21465: LD_VAR 0 1
21469: NONEQUAL
21470: PUSH
21471: LD_OWVAR 2
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 81
21485: PUSH
21486: LD_INT 2
21488: EQUAL
21489: AND
21490: IFFALSE 21504
// begin side := i ;
21492: LD_ADDR_VAR 0 3
21496: PUSH
21497: LD_VAR 0 1
21501: ST_TO_ADDR
// break ;
21502: GO 21506
// end ;
21504: GO 21457
21506: POP
21507: POP
// if not side then
21508: LD_VAR 0 3
21512: NOT
21513: IFFALSE 21517
// exit ;
21515: GO 21562
// for i := 1 to tmp do
21517: LD_ADDR_VAR 0 1
21521: PUSH
21522: DOUBLE
21523: LD_INT 1
21525: DEC
21526: ST_TO_ADDR
21527: LD_VAR 0 2
21531: PUSH
21532: FOR_TO
21533: IFFALSE 21560
// if Prob ( 60 ) then
21535: LD_INT 60
21537: PPUSH
21538: CALL_OW 13
21542: IFFALSE 21558
// SetSide ( i , side ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_VAR 0 3
21553: PPUSH
21554: CALL_OW 235
21558: GO 21532
21560: POP
21561: POP
// end ;
21562: PPOPN 3
21564: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21565: LD_EXP 47
21569: PUSH
21570: LD_EXP 60
21574: AND
21575: IFFALSE 21694
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21583: LD_ADDR_VAR 0 1
21587: PUSH
21588: LD_INT 22
21590: PUSH
21591: LD_OWVAR 2
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 21
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 23
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: PPUSH
21632: CALL_OW 69
21636: PUSH
21637: FOR_IN
21638: IFFALSE 21692
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 257
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 3
21658: PUSH
21659: LD_INT 4
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: IN
21668: IFFALSE 21690
// SetClass ( un , rand ( 1 , 4 ) ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: LD_INT 1
21677: PPUSH
21678: LD_INT 4
21680: PPUSH
21681: CALL_OW 12
21685: PPUSH
21686: CALL_OW 336
21690: GO 21637
21692: POP
21693: POP
// end ;
21694: PPOPN 1
21696: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21697: LD_EXP 47
21701: PUSH
21702: LD_EXP 59
21706: AND
21707: IFFALSE 21786
21709: GO 21711
21711: DISABLE
21712: LD_INT 0
21714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21715: LD_ADDR_VAR 0 1
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_OWVAR 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 21
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PPUSH
21746: CALL_OW 69
21750: ST_TO_ADDR
// if not tmp then
21751: LD_VAR 0 1
21755: NOT
21756: IFFALSE 21760
// exit ;
21758: GO 21786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21760: LD_VAR 0 1
21764: PUSH
21765: LD_INT 1
21767: PPUSH
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 12
21777: ARRAY
21778: PPUSH
21779: LD_INT 100
21781: PPUSH
21782: CALL_OW 234
// end ;
21786: PPOPN 1
21788: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21789: LD_EXP 47
21793: PUSH
21794: LD_EXP 61
21798: AND
21799: IFFALSE 21897
21801: GO 21803
21803: DISABLE
21804: LD_INT 0
21806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21807: LD_ADDR_VAR 0 1
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_OWVAR 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PPUSH
21838: CALL_OW 69
21842: ST_TO_ADDR
// if not tmp then
21843: LD_VAR 0 1
21847: NOT
21848: IFFALSE 21852
// exit ;
21850: GO 21897
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21852: LD_VAR 0 1
21856: PUSH
21857: LD_INT 1
21859: PPUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 12
21869: ARRAY
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 4
21876: PPUSH
21877: CALL_OW 12
21881: PPUSH
21882: LD_INT 3000
21884: PPUSH
21885: LD_INT 9000
21887: PPUSH
21888: CALL_OW 12
21892: PPUSH
21893: CALL_OW 492
// end ;
21897: PPOPN 1
21899: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21900: LD_EXP 47
21904: PUSH
21905: LD_EXP 62
21909: AND
21910: IFFALSE 21930
21912: GO 21914
21914: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21915: LD_INT 1
21917: PPUSH
21918: LD_OWVAR 2
21922: PPUSH
21923: LD_INT 0
21925: PPUSH
21926: CALL_OW 324
21930: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21931: LD_EXP 47
21935: PUSH
21936: LD_EXP 63
21940: AND
21941: IFFALSE 22024
21943: GO 21945
21945: DISABLE
21946: LD_INT 0
21948: PPUSH
21949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 21
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: ST_TO_ADDR
// if not tmp then
21986: LD_VAR 0 2
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22024
// for i in tmp do
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_VAR 0 2
22004: PUSH
22005: FOR_IN
22006: IFFALSE 22022
// SetBLevel ( i , 10 ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_INT 10
22015: PPUSH
22016: CALL_OW 241
22020: GO 22005
22022: POP
22023: POP
// end ;
22024: PPOPN 2
22026: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22027: LD_EXP 47
22031: PUSH
22032: LD_EXP 64
22036: AND
22037: IFFALSE 22148
22039: GO 22041
22041: DISABLE
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
22046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22047: LD_ADDR_VAR 0 3
22051: PUSH
22052: LD_INT 22
22054: PUSH
22055: LD_OWVAR 2
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 69
22082: ST_TO_ADDR
// if not tmp then
22083: LD_VAR 0 3
22087: NOT
22088: IFFALSE 22092
// exit ;
22090: GO 22148
// un := tmp [ rand ( 1 , tmp ) ] ;
22092: LD_ADDR_VAR 0 2
22096: PUSH
22097: LD_VAR 0 3
22101: PUSH
22102: LD_INT 1
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL_OW 12
22114: ARRAY
22115: ST_TO_ADDR
// if Crawls ( un ) then
22116: LD_VAR 0 2
22120: PPUSH
22121: CALL_OW 318
22125: IFFALSE 22136
// ComWalk ( un ) ;
22127: LD_VAR 0 2
22131: PPUSH
22132: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 5
22143: PPUSH
22144: CALL_OW 336
// end ;
22148: PPOPN 3
22150: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22151: LD_EXP 47
22155: PUSH
22156: LD_EXP 65
22160: AND
22161: PUSH
22162: LD_OWVAR 67
22166: PUSH
22167: LD_INT 4
22169: LESS
22170: AND
22171: IFFALSE 22190
22173: GO 22175
22175: DISABLE
// begin Difficulty := Difficulty + 1 ;
22176: LD_ADDR_OWVAR 67
22180: PUSH
22181: LD_OWVAR 67
22185: PUSH
22186: LD_INT 1
22188: PLUS
22189: ST_TO_ADDR
// end ;
22190: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22191: LD_EXP 47
22195: PUSH
22196: LD_EXP 66
22200: AND
22201: IFFALSE 22304
22203: GO 22205
22205: DISABLE
22206: LD_INT 0
22208: PPUSH
// begin for i := 1 to 5 do
22209: LD_ADDR_VAR 0 1
22213: PUSH
22214: DOUBLE
22215: LD_INT 1
22217: DEC
22218: ST_TO_ADDR
22219: LD_INT 5
22221: PUSH
22222: FOR_TO
22223: IFFALSE 22302
// begin uc_nation := nation_nature ;
22225: LD_ADDR_OWVAR 21
22229: PUSH
22230: LD_INT 0
22232: ST_TO_ADDR
// uc_side := 0 ;
22233: LD_ADDR_OWVAR 20
22237: PUSH
22238: LD_INT 0
22240: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22241: LD_ADDR_OWVAR 29
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 12
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// hc_agressivity := 20 ;
22256: LD_ADDR_OWVAR 35
22260: PUSH
22261: LD_INT 20
22263: ST_TO_ADDR
// hc_class := class_tiger ;
22264: LD_ADDR_OWVAR 28
22268: PUSH
22269: LD_INT 14
22271: ST_TO_ADDR
// hc_gallery :=  ;
22272: LD_ADDR_OWVAR 33
22276: PUSH
22277: LD_STRING 
22279: ST_TO_ADDR
// hc_name :=  ;
22280: LD_ADDR_OWVAR 26
22284: PUSH
22285: LD_STRING 
22287: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22288: CALL_OW 44
22292: PPUSH
22293: LD_INT 0
22295: PPUSH
22296: CALL_OW 51
// end ;
22300: GO 22222
22302: POP
22303: POP
// end ;
22304: PPOPN 1
22306: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22307: LD_EXP 47
22311: PUSH
22312: LD_EXP 67
22316: AND
22317: IFFALSE 22326
22319: GO 22321
22321: DISABLE
// StreamSibBomb ;
22322: CALL 22327 0 0
22326: END
// export function StreamSibBomb ; var i , x , y ; begin
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
22331: PPUSH
22332: PPUSH
// result := false ;
22333: LD_ADDR_VAR 0 1
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// for i := 1 to 16 do
22341: LD_ADDR_VAR 0 2
22345: PUSH
22346: DOUBLE
22347: LD_INT 1
22349: DEC
22350: ST_TO_ADDR
22351: LD_INT 16
22353: PUSH
22354: FOR_TO
22355: IFFALSE 22554
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22357: LD_ADDR_VAR 0 3
22361: PUSH
22362: LD_INT 10
22364: PUSH
22365: LD_INT 20
22367: PUSH
22368: LD_INT 30
22370: PUSH
22371: LD_INT 40
22373: PUSH
22374: LD_INT 50
22376: PUSH
22377: LD_INT 60
22379: PUSH
22380: LD_INT 70
22382: PUSH
22383: LD_INT 80
22385: PUSH
22386: LD_INT 90
22388: PUSH
22389: LD_INT 100
22391: PUSH
22392: LD_INT 110
22394: PUSH
22395: LD_INT 120
22397: PUSH
22398: LD_INT 130
22400: PUSH
22401: LD_INT 140
22403: PUSH
22404: LD_INT 150
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_INT 15
22429: PPUSH
22430: CALL_OW 12
22434: ARRAY
22435: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22436: LD_ADDR_VAR 0 4
22440: PUSH
22441: LD_INT 10
22443: PUSH
22444: LD_INT 20
22446: PUSH
22447: LD_INT 30
22449: PUSH
22450: LD_INT 40
22452: PUSH
22453: LD_INT 50
22455: PUSH
22456: LD_INT 60
22458: PUSH
22459: LD_INT 70
22461: PUSH
22462: LD_INT 80
22464: PUSH
22465: LD_INT 90
22467: PUSH
22468: LD_INT 100
22470: PUSH
22471: LD_INT 110
22473: PUSH
22474: LD_INT 120
22476: PUSH
22477: LD_INT 130
22479: PUSH
22480: LD_INT 140
22482: PUSH
22483: LD_INT 150
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: PPUSH
22506: LD_INT 15
22508: PPUSH
22509: CALL_OW 12
22513: ARRAY
22514: ST_TO_ADDR
// if ValidHex ( x , y ) then
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_VAR 0 4
22524: PPUSH
22525: CALL_OW 488
22529: IFFALSE 22552
// begin result := [ x , y ] ;
22531: LD_ADDR_VAR 0 1
22535: PUSH
22536: LD_VAR 0 3
22540: PUSH
22541: LD_VAR 0 4
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: ST_TO_ADDR
// break ;
22550: GO 22554
// end ; end ;
22552: GO 22354
22554: POP
22555: POP
// if result then
22556: LD_VAR 0 1
22560: IFFALSE 22620
// begin ToLua ( playSibBomb() ) ;
22562: LD_STRING playSibBomb()
22564: PPUSH
22565: CALL_OW 559
// wait ( 0 0$14 ) ;
22569: LD_INT 490
22571: PPUSH
22572: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22576: LD_VAR 0 1
22580: PUSH
22581: LD_INT 1
22583: ARRAY
22584: PPUSH
22585: LD_VAR 0 1
22589: PUSH
22590: LD_INT 2
22592: ARRAY
22593: PPUSH
22594: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22598: LD_VAR 0 1
22602: PUSH
22603: LD_INT 1
22605: ARRAY
22606: PPUSH
22607: LD_VAR 0 1
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: PPUSH
22616: CALL_OW 429
// end ; end ;
22620: LD_VAR 0 1
22624: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22625: LD_EXP 47
22629: PUSH
22630: LD_EXP 69
22634: AND
22635: IFFALSE 22647
22637: GO 22639
22639: DISABLE
// YouLost (  ) ;
22640: LD_STRING 
22642: PPUSH
22643: CALL_OW 104
22647: END
// every 0 0$1 trigger StreamModeActive and sFog do
22648: LD_EXP 47
22652: PUSH
22653: LD_EXP 68
22657: AND
22658: IFFALSE 22672
22660: GO 22662
22662: DISABLE
// FogOff ( your_side ) ;
22663: LD_OWVAR 2
22667: PPUSH
22668: CALL_OW 344
22672: END
// every 0 0$1 trigger StreamModeActive and sSun do
22673: LD_EXP 47
22677: PUSH
22678: LD_EXP 70
22682: AND
22683: IFFALSE 22711
22685: GO 22687
22687: DISABLE
// begin solar_recharge_percent := 0 ;
22688: LD_ADDR_OWVAR 79
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22696: LD_INT 10500
22698: PPUSH
22699: CALL_OW 67
// solar_recharge_percent := 100 ;
22703: LD_ADDR_OWVAR 79
22707: PUSH
22708: LD_INT 100
22710: ST_TO_ADDR
// end ;
22711: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22712: LD_EXP 47
22716: PUSH
22717: LD_EXP 71
22721: AND
22722: IFFALSE 22961
22724: GO 22726
22726: DISABLE
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin tmp := [ ] ;
22732: LD_ADDR_VAR 0 3
22736: PUSH
22737: EMPTY
22738: ST_TO_ADDR
// for i := 1 to 6 do
22739: LD_ADDR_VAR 0 1
22743: PUSH
22744: DOUBLE
22745: LD_INT 1
22747: DEC
22748: ST_TO_ADDR
22749: LD_INT 6
22751: PUSH
22752: FOR_TO
22753: IFFALSE 22858
// begin uc_nation := nation_nature ;
22755: LD_ADDR_OWVAR 21
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// uc_side := 0 ;
22763: LD_ADDR_OWVAR 20
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22771: LD_ADDR_OWVAR 29
22775: PUSH
22776: LD_INT 12
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: ST_TO_ADDR
// hc_agressivity := 20 ;
22786: LD_ADDR_OWVAR 35
22790: PUSH
22791: LD_INT 20
22793: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22794: LD_ADDR_OWVAR 28
22798: PUSH
22799: LD_INT 17
22801: ST_TO_ADDR
// hc_gallery :=  ;
22802: LD_ADDR_OWVAR 33
22806: PUSH
22807: LD_STRING 
22809: ST_TO_ADDR
// hc_name :=  ;
22810: LD_ADDR_OWVAR 26
22814: PUSH
22815: LD_STRING 
22817: ST_TO_ADDR
// un := CreateHuman ;
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: CALL_OW 44
22827: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22828: LD_VAR 0 2
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 51
// tmp := tmp ^ un ;
22840: LD_ADDR_VAR 0 3
22844: PUSH
22845: LD_VAR 0 3
22849: PUSH
22850: LD_VAR 0 2
22854: ADD
22855: ST_TO_ADDR
// end ;
22856: GO 22752
22858: POP
22859: POP
// repeat wait ( 0 0$1 ) ;
22860: LD_INT 35
22862: PPUSH
22863: CALL_OW 67
// for un in tmp do
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_VAR 0 3
22876: PUSH
22877: FOR_IN
22878: IFFALSE 22952
// begin if IsDead ( un ) then
22880: LD_VAR 0 2
22884: PPUSH
22885: CALL_OW 301
22889: IFFALSE 22909
// begin tmp := tmp diff un ;
22891: LD_ADDR_VAR 0 3
22895: PUSH
22896: LD_VAR 0 3
22900: PUSH
22901: LD_VAR 0 2
22905: DIFF
22906: ST_TO_ADDR
// continue ;
22907: GO 22877
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22909: LD_VAR 0 2
22913: PPUSH
22914: LD_INT 3
22916: PUSH
22917: LD_INT 22
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PPUSH
22931: CALL_OW 69
22935: PPUSH
22936: LD_VAR 0 2
22940: PPUSH
22941: CALL_OW 74
22945: PPUSH
22946: CALL_OW 115
// end ;
22950: GO 22877
22952: POP
22953: POP
// until not tmp ;
22954: LD_VAR 0 3
22958: NOT
22959: IFFALSE 22860
// end ;
22961: PPOPN 3
22963: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22964: LD_EXP 47
22968: PUSH
22969: LD_EXP 72
22973: AND
22974: IFFALSE 23028
22976: GO 22978
22978: DISABLE
// begin ToLua ( displayTroll(); ) ;
22979: LD_STRING displayTroll();
22981: PPUSH
22982: CALL_OW 559
// wait ( 3 3$00 ) ;
22986: LD_INT 6300
22988: PPUSH
22989: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22993: LD_STRING hideTroll();
22995: PPUSH
22996: CALL_OW 559
// wait ( 1 1$00 ) ;
23000: LD_INT 2100
23002: PPUSH
23003: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23007: LD_STRING displayTroll();
23009: PPUSH
23010: CALL_OW 559
// wait ( 1 1$00 ) ;
23014: LD_INT 2100
23016: PPUSH
23017: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23021: LD_STRING hideTroll();
23023: PPUSH
23024: CALL_OW 559
// end ;
23028: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23029: LD_EXP 47
23033: PUSH
23034: LD_EXP 73
23038: AND
23039: IFFALSE 23102
23041: GO 23043
23043: DISABLE
23044: LD_INT 0
23046: PPUSH
// begin p := 0 ;
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_INT 0
23054: ST_TO_ADDR
// repeat game_speed := 1 ;
23055: LD_ADDR_OWVAR 65
23059: PUSH
23060: LD_INT 1
23062: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23063: LD_INT 35
23065: PPUSH
23066: CALL_OW 67
// p := p + 1 ;
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: LD_VAR 0 1
23079: PUSH
23080: LD_INT 1
23082: PLUS
23083: ST_TO_ADDR
// until p >= 60 ;
23084: LD_VAR 0 1
23088: PUSH
23089: LD_INT 60
23091: GREATEREQUAL
23092: IFFALSE 23055
// game_speed := 4 ;
23094: LD_ADDR_OWVAR 65
23098: PUSH
23099: LD_INT 4
23101: ST_TO_ADDR
// end ;
23102: PPOPN 1
23104: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23105: LD_EXP 47
23109: PUSH
23110: LD_EXP 74
23114: AND
23115: IFFALSE 23261
23117: GO 23119
23119: DISABLE
23120: LD_INT 0
23122: PPUSH
23123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23124: LD_ADDR_VAR 0 1
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_OWVAR 2
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 30
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: ST_TO_ADDR
// if not depot then
23178: LD_VAR 0 1
23182: NOT
23183: IFFALSE 23187
// exit ;
23185: GO 23261
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_VAR 0 1
23196: PUSH
23197: LD_INT 1
23199: PPUSH
23200: LD_VAR 0 1
23204: PPUSH
23205: CALL_OW 12
23209: ARRAY
23210: PPUSH
23211: CALL_OW 274
23215: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: LD_INT 0
23226: PPUSH
23227: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23231: LD_VAR 0 2
23235: PPUSH
23236: LD_INT 2
23238: PPUSH
23239: LD_INT 0
23241: PPUSH
23242: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23246: LD_VAR 0 2
23250: PPUSH
23251: LD_INT 3
23253: PPUSH
23254: LD_INT 0
23256: PPUSH
23257: CALL_OW 277
// end ;
23261: PPOPN 2
23263: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23264: LD_EXP 47
23268: PUSH
23269: LD_EXP 75
23273: AND
23274: IFFALSE 23371
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23282: LD_ADDR_VAR 0 1
23286: PUSH
23287: LD_INT 22
23289: PUSH
23290: LD_OWVAR 2
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 21
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: LD_INT 23
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: LIST
23330: PPUSH
23331: CALL_OW 69
23335: ST_TO_ADDR
// if not tmp then
23336: LD_VAR 0 1
23340: NOT
23341: IFFALSE 23345
// exit ;
23343: GO 23371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 1
23352: PPUSH
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 12
23362: ARRAY
23363: PPUSH
23364: LD_INT 200
23366: PPUSH
23367: CALL_OW 234
// end ;
23371: PPOPN 1
23373: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23374: LD_EXP 47
23378: PUSH
23379: LD_EXP 76
23383: AND
23384: IFFALSE 23463
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_INT 22
23399: PUSH
23400: LD_OWVAR 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PPUSH
23423: CALL_OW 69
23427: ST_TO_ADDR
// if not tmp then
23428: LD_VAR 0 1
23432: NOT
23433: IFFALSE 23437
// exit ;
23435: GO 23463
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23437: LD_VAR 0 1
23441: PUSH
23442: LD_INT 1
23444: PPUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 12
23454: ARRAY
23455: PPUSH
23456: LD_INT 60
23458: PPUSH
23459: CALL_OW 234
// end ;
23463: PPOPN 1
23465: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23466: LD_EXP 47
23470: PUSH
23471: LD_EXP 77
23475: AND
23476: IFFALSE 23575
23478: GO 23480
23480: DISABLE
23481: LD_INT 0
23483: PPUSH
23484: PPUSH
// begin enable ;
23485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23486: LD_ADDR_VAR 0 1
23490: PUSH
23491: LD_INT 22
23493: PUSH
23494: LD_OWVAR 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 61
23505: PUSH
23506: EMPTY
23507: LIST
23508: PUSH
23509: LD_INT 33
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: PPUSH
23524: CALL_OW 69
23528: ST_TO_ADDR
// if not tmp then
23529: LD_VAR 0 1
23533: NOT
23534: IFFALSE 23538
// exit ;
23536: GO 23575
// for i in tmp do
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_VAR 0 1
23547: PUSH
23548: FOR_IN
23549: IFFALSE 23573
// if IsControledBy ( i ) then
23551: LD_VAR 0 2
23555: PPUSH
23556: CALL_OW 312
23560: IFFALSE 23571
// ComUnlink ( i ) ;
23562: LD_VAR 0 2
23566: PPUSH
23567: CALL_OW 136
23571: GO 23548
23573: POP
23574: POP
// end ;
23575: PPOPN 2
23577: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23578: LD_EXP 47
23582: PUSH
23583: LD_EXP 78
23587: AND
23588: IFFALSE 23728
23590: GO 23592
23592: DISABLE
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
// begin ToLua ( displayPowell(); ) ;
23597: LD_STRING displayPowell();
23599: PPUSH
23600: CALL_OW 559
// uc_side := 0 ;
23604: LD_ADDR_OWVAR 20
23608: PUSH
23609: LD_INT 0
23611: ST_TO_ADDR
// uc_nation := 2 ;
23612: LD_ADDR_OWVAR 21
23616: PUSH
23617: LD_INT 2
23619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23620: LD_ADDR_OWVAR 37
23624: PUSH
23625: LD_INT 14
23627: ST_TO_ADDR
// vc_engine := engine_siberite ;
23628: LD_ADDR_OWVAR 39
23632: PUSH
23633: LD_INT 3
23635: ST_TO_ADDR
// vc_control := control_apeman ;
23636: LD_ADDR_OWVAR 38
23640: PUSH
23641: LD_INT 5
23643: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23644: LD_ADDR_OWVAR 40
23648: PUSH
23649: LD_INT 29
23651: ST_TO_ADDR
// un := CreateVehicle ;
23652: LD_ADDR_VAR 0 2
23656: PUSH
23657: CALL_OW 45
23661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23662: LD_VAR 0 2
23666: PPUSH
23667: LD_INT 1
23669: PPUSH
23670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23674: LD_INT 35
23676: PPUSH
23677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23681: LD_VAR 0 2
23685: PPUSH
23686: LD_INT 22
23688: PUSH
23689: LD_OWVAR 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 69
23702: PPUSH
23703: LD_VAR 0 2
23707: PPUSH
23708: CALL_OW 74
23712: PPUSH
23713: CALL_OW 115
// until IsDead ( un ) ;
23717: LD_VAR 0 2
23721: PPUSH
23722: CALL_OW 301
23726: IFFALSE 23674
// end ;
23728: PPOPN 2
23730: END
// every 0 0$1 trigger StreamModeActive and sStu do
23731: LD_EXP 47
23735: PUSH
23736: LD_EXP 86
23740: AND
23741: IFFALSE 23757
23743: GO 23745
23745: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23746: LD_STRING displayStucuk();
23748: PPUSH
23749: CALL_OW 559
// ResetFog ;
23753: CALL_OW 335
// end ;
23757: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23758: LD_EXP 47
23762: PUSH
23763: LD_EXP 79
23767: AND
23768: IFFALSE 23909
23770: GO 23772
23772: DISABLE
23773: LD_INT 0
23775: PPUSH
23776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23777: LD_ADDR_VAR 0 2
23781: PUSH
23782: LD_INT 22
23784: PUSH
23785: LD_OWVAR 2
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 21
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: CALL_OW 69
23812: ST_TO_ADDR
// if not tmp then
23813: LD_VAR 0 2
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23909
// un := tmp [ rand ( 1 , tmp ) ] ;
23822: LD_ADDR_VAR 0 1
23826: PUSH
23827: LD_VAR 0 2
23831: PUSH
23832: LD_INT 1
23834: PPUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: CALL_OW 12
23844: ARRAY
23845: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23846: LD_VAR 0 1
23850: PPUSH
23851: LD_INT 0
23853: PPUSH
23854: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: LD_OWVAR 3
23867: PUSH
23868: LD_VAR 0 1
23872: DIFF
23873: PPUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 74
23883: PPUSH
23884: CALL_OW 115
// wait ( 0 0$20 ) ;
23888: LD_INT 700
23890: PPUSH
23891: CALL_OW 67
// SetSide ( un , your_side ) ;
23895: LD_VAR 0 1
23899: PPUSH
23900: LD_OWVAR 2
23904: PPUSH
23905: CALL_OW 235
// end ;
23909: PPOPN 2
23911: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23912: LD_EXP 47
23916: PUSH
23917: LD_EXP 80
23921: AND
23922: IFFALSE 24028
23924: GO 23926
23926: DISABLE
23927: LD_INT 0
23929: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23930: LD_ADDR_VAR 0 1
23934: PUSH
23935: LD_INT 22
23937: PUSH
23938: LD_OWVAR 2
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: LIST
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PPUSH
23979: CALL_OW 69
23983: ST_TO_ADDR
// if not depot then
23984: LD_VAR 0 1
23988: NOT
23989: IFFALSE 23993
// exit ;
23991: GO 24028
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23993: LD_VAR 0 1
23997: PUSH
23998: LD_INT 1
24000: ARRAY
24001: PPUSH
24002: CALL_OW 250
24006: PPUSH
24007: LD_VAR 0 1
24011: PUSH
24012: LD_INT 1
24014: ARRAY
24015: PPUSH
24016: CALL_OW 251
24020: PPUSH
24021: LD_INT 70
24023: PPUSH
24024: CALL_OW 495
// end ;
24028: PPOPN 1
24030: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24031: LD_EXP 47
24035: PUSH
24036: LD_EXP 81
24040: AND
24041: IFFALSE 24252
24043: GO 24045
24045: DISABLE
24046: LD_INT 0
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24053: LD_ADDR_VAR 0 5
24057: PUSH
24058: LD_INT 22
24060: PUSH
24061: LD_OWVAR 2
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 21
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PPUSH
24084: CALL_OW 69
24088: ST_TO_ADDR
// if not tmp then
24089: LD_VAR 0 5
24093: NOT
24094: IFFALSE 24098
// exit ;
24096: GO 24252
// for i in tmp do
24098: LD_ADDR_VAR 0 1
24102: PUSH
24103: LD_VAR 0 5
24107: PUSH
24108: FOR_IN
24109: IFFALSE 24250
// begin d := rand ( 0 , 5 ) ;
24111: LD_ADDR_VAR 0 4
24115: PUSH
24116: LD_INT 0
24118: PPUSH
24119: LD_INT 5
24121: PPUSH
24122: CALL_OW 12
24126: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24127: LD_ADDR_VAR 0 2
24131: PUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 250
24141: PPUSH
24142: LD_VAR 0 4
24146: PPUSH
24147: LD_INT 3
24149: PPUSH
24150: LD_INT 12
24152: PPUSH
24153: CALL_OW 12
24157: PPUSH
24158: CALL_OW 272
24162: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24163: LD_ADDR_VAR 0 3
24167: PUSH
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 251
24177: PPUSH
24178: LD_VAR 0 4
24182: PPUSH
24183: LD_INT 3
24185: PPUSH
24186: LD_INT 12
24188: PPUSH
24189: CALL_OW 12
24193: PPUSH
24194: CALL_OW 273
24198: ST_TO_ADDR
// if ValidHex ( x , y ) then
24199: LD_VAR 0 2
24203: PPUSH
24204: LD_VAR 0 3
24208: PPUSH
24209: CALL_OW 488
24213: IFFALSE 24248
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24215: LD_VAR 0 1
24219: PPUSH
24220: LD_VAR 0 2
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: LD_INT 3
24232: PPUSH
24233: LD_INT 6
24235: PPUSH
24236: CALL_OW 12
24240: PPUSH
24241: LD_INT 1
24243: PPUSH
24244: CALL_OW 483
// end ;
24248: GO 24108
24250: POP
24251: POP
// end ;
24252: PPOPN 5
24254: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24255: LD_EXP 47
24259: PUSH
24260: LD_EXP 82
24264: AND
24265: IFFALSE 24359
24267: GO 24269
24269: DISABLE
24270: LD_INT 0
24272: PPUSH
24273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_INT 22
24281: PUSH
24282: LD_OWVAR 2
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 32
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 21
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: PPUSH
24316: CALL_OW 69
24320: ST_TO_ADDR
// if not tmp then
24321: LD_VAR 0 2
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24359
// for i in tmp do
24330: LD_ADDR_VAR 0 1
24334: PUSH
24335: LD_VAR 0 2
24339: PUSH
24340: FOR_IN
24341: IFFALSE 24357
// SetFuel ( i , 0 ) ;
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_INT 0
24350: PPUSH
24351: CALL_OW 240
24355: GO 24340
24357: POP
24358: POP
// end ;
24359: PPOPN 2
24361: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24362: LD_EXP 47
24366: PUSH
24367: LD_EXP 83
24371: AND
24372: IFFALSE 24438
24374: GO 24376
24376: DISABLE
24377: LD_INT 0
24379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24380: LD_ADDR_VAR 0 1
24384: PUSH
24385: LD_INT 22
24387: PUSH
24388: LD_OWVAR 2
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 30
24399: PUSH
24400: LD_INT 29
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PPUSH
24411: CALL_OW 69
24415: ST_TO_ADDR
// if not tmp then
24416: LD_VAR 0 1
24420: NOT
24421: IFFALSE 24425
// exit ;
24423: GO 24438
// DestroyUnit ( tmp [ 1 ] ) ;
24425: LD_VAR 0 1
24429: PUSH
24430: LD_INT 1
24432: ARRAY
24433: PPUSH
24434: CALL_OW 65
// end ;
24438: PPOPN 1
24440: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24441: LD_EXP 47
24445: PUSH
24446: LD_EXP 85
24450: AND
24451: IFFALSE 24580
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
// begin uc_side := 0 ;
24459: LD_ADDR_OWVAR 20
24463: PUSH
24464: LD_INT 0
24466: ST_TO_ADDR
// uc_nation := nation_arabian ;
24467: LD_ADDR_OWVAR 21
24471: PUSH
24472: LD_INT 2
24474: ST_TO_ADDR
// hc_gallery :=  ;
24475: LD_ADDR_OWVAR 33
24479: PUSH
24480: LD_STRING 
24482: ST_TO_ADDR
// hc_name :=  ;
24483: LD_ADDR_OWVAR 26
24487: PUSH
24488: LD_STRING 
24490: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24491: LD_INT 1
24493: PPUSH
24494: LD_INT 11
24496: PPUSH
24497: LD_INT 10
24499: PPUSH
24500: CALL_OW 380
// un := CreateHuman ;
24504: LD_ADDR_VAR 0 1
24508: PUSH
24509: CALL_OW 44
24513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 1
24521: PPUSH
24522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24526: LD_INT 35
24528: PPUSH
24529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_INT 22
24540: PUSH
24541: LD_OWVAR 2
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 69
24554: PPUSH
24555: LD_VAR 0 1
24559: PPUSH
24560: CALL_OW 74
24564: PPUSH
24565: CALL_OW 115
// until IsDead ( un ) ;
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL_OW 301
24578: IFFALSE 24526
// end ;
24580: PPOPN 1
24582: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24583: LD_EXP 47
24587: PUSH
24588: LD_EXP 87
24592: AND
24593: IFFALSE 24605
24595: GO 24597
24597: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24598: LD_STRING earthquake(getX(game), 0, 32)
24600: PPUSH
24601: CALL_OW 559
24605: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24606: LD_EXP 47
24610: PUSH
24611: LD_EXP 88
24615: AND
24616: IFFALSE 24707
24618: GO 24620
24620: DISABLE
24621: LD_INT 0
24623: PPUSH
// begin enable ;
24624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24625: LD_ADDR_VAR 0 1
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_OWVAR 2
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 21
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 33
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: PPUSH
24667: CALL_OW 69
24671: ST_TO_ADDR
// if not tmp then
24672: LD_VAR 0 1
24676: NOT
24677: IFFALSE 24681
// exit ;
24679: GO 24707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24681: LD_VAR 0 1
24685: PUSH
24686: LD_INT 1
24688: PPUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 12
24698: ARRAY
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: CALL_OW 234
// end ;
24707: PPOPN 1
24709: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24710: LD_EXP 47
24714: PUSH
24715: LD_EXP 89
24719: AND
24720: IFFALSE 24861
24722: GO 24724
24724: DISABLE
24725: LD_INT 0
24727: PPUSH
24728: PPUSH
24729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_OWVAR 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 25
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PPUSH
24761: CALL_OW 69
24765: ST_TO_ADDR
// if not tmp then
24766: LD_VAR 0 3
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 24861
// un := tmp [ rand ( 1 , tmp ) ] ;
24775: LD_ADDR_VAR 0 2
24779: PUSH
24780: LD_VAR 0 3
24784: PUSH
24785: LD_INT 1
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: CALL_OW 12
24797: ARRAY
24798: ST_TO_ADDR
// if Crawls ( un ) then
24799: LD_VAR 0 2
24803: PPUSH
24804: CALL_OW 318
24808: IFFALSE 24819
// ComWalk ( un ) ;
24810: LD_VAR 0 2
24814: PPUSH
24815: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_INT 9
24826: PPUSH
24827: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24831: LD_INT 28
24833: PPUSH
24834: LD_OWVAR 2
24838: PPUSH
24839: LD_INT 2
24841: PPUSH
24842: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24846: LD_INT 29
24848: PPUSH
24849: LD_OWVAR 2
24853: PPUSH
24854: LD_INT 2
24856: PPUSH
24857: CALL_OW 322
// end ;
24861: PPOPN 3
24863: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24864: LD_EXP 47
24868: PUSH
24869: LD_EXP 90
24873: AND
24874: IFFALSE 24985
24876: GO 24878
24878: DISABLE
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
24883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_OWVAR 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 25
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 69
24919: ST_TO_ADDR
// if not tmp then
24920: LD_VAR 0 3
24924: NOT
24925: IFFALSE 24929
// exit ;
24927: GO 24985
// un := tmp [ rand ( 1 , tmp ) ] ;
24929: LD_ADDR_VAR 0 2
24933: PUSH
24934: LD_VAR 0 3
24938: PUSH
24939: LD_INT 1
24941: PPUSH
24942: LD_VAR 0 3
24946: PPUSH
24947: CALL_OW 12
24951: ARRAY
24952: ST_TO_ADDR
// if Crawls ( un ) then
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 318
24962: IFFALSE 24973
// ComWalk ( un ) ;
24964: LD_VAR 0 2
24968: PPUSH
24969: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_INT 8
24980: PPUSH
24981: CALL_OW 336
// end ;
24985: PPOPN 3
24987: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24988: LD_EXP 47
24992: PUSH
24993: LD_EXP 91
24997: AND
24998: IFFALSE 25142
25000: GO 25002
25002: DISABLE
25003: LD_INT 0
25005: PPUSH
25006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25007: LD_ADDR_VAR 0 2
25011: PUSH
25012: LD_INT 22
25014: PUSH
25015: LD_OWVAR 2
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 21
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 34
25039: PUSH
25040: LD_INT 12
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 34
25049: PUSH
25050: LD_INT 51
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 34
25059: PUSH
25060: LD_INT 32
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 69
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 2
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25142
// for i in tmp do
25092: LD_ADDR_VAR 0 1
25096: PUSH
25097: LD_VAR 0 2
25101: PUSH
25102: FOR_IN
25103: IFFALSE 25140
// if GetCargo ( i , mat_artifact ) = 0 then
25105: LD_VAR 0 1
25109: PPUSH
25110: LD_INT 4
25112: PPUSH
25113: CALL_OW 289
25117: PUSH
25118: LD_INT 0
25120: EQUAL
25121: IFFALSE 25138
// SetCargo ( i , mat_siberit , 100 ) ;
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_INT 3
25130: PPUSH
25131: LD_INT 100
25133: PPUSH
25134: CALL_OW 290
25138: GO 25102
25140: POP
25141: POP
// end ;
25142: PPOPN 2
25144: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25145: LD_EXP 47
25149: PUSH
25150: LD_EXP 92
25154: AND
25155: IFFALSE 25338
25157: GO 25159
25159: DISABLE
25160: LD_INT 0
25162: PPUSH
25163: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_INT 22
25171: PUSH
25172: LD_OWVAR 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PPUSH
25181: CALL_OW 69
25185: ST_TO_ADDR
// if not tmp then
25186: LD_VAR 0 2
25190: NOT
25191: IFFALSE 25195
// exit ;
25193: GO 25338
// for i := 1 to 2 do
25195: LD_ADDR_VAR 0 1
25199: PUSH
25200: DOUBLE
25201: LD_INT 1
25203: DEC
25204: ST_TO_ADDR
25205: LD_INT 2
25207: PUSH
25208: FOR_TO
25209: IFFALSE 25336
// begin uc_side := your_side ;
25211: LD_ADDR_OWVAR 20
25215: PUSH
25216: LD_OWVAR 2
25220: ST_TO_ADDR
// uc_nation := nation_american ;
25221: LD_ADDR_OWVAR 21
25225: PUSH
25226: LD_INT 1
25228: ST_TO_ADDR
// vc_chassis := us_morphling ;
25229: LD_ADDR_OWVAR 37
25233: PUSH
25234: LD_INT 5
25236: ST_TO_ADDR
// vc_engine := engine_siberite ;
25237: LD_ADDR_OWVAR 39
25241: PUSH
25242: LD_INT 3
25244: ST_TO_ADDR
// vc_control := control_computer ;
25245: LD_ADDR_OWVAR 38
25249: PUSH
25250: LD_INT 3
25252: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25253: LD_ADDR_OWVAR 40
25257: PUSH
25258: LD_INT 10
25260: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25261: LD_VAR 0 2
25265: PUSH
25266: LD_INT 1
25268: ARRAY
25269: PPUSH
25270: CALL_OW 310
25274: NOT
25275: IFFALSE 25322
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25277: CALL_OW 45
25281: PPUSH
25282: LD_VAR 0 2
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: PPUSH
25291: CALL_OW 250
25295: PPUSH
25296: LD_VAR 0 2
25300: PUSH
25301: LD_INT 1
25303: ARRAY
25304: PPUSH
25305: CALL_OW 251
25309: PPUSH
25310: LD_INT 12
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 50
25320: GO 25334
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25322: CALL_OW 45
25326: PPUSH
25327: LD_INT 1
25329: PPUSH
25330: CALL_OW 51
// end ;
25334: GO 25208
25336: POP
25337: POP
// end ;
25338: PPOPN 2
25340: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25341: LD_EXP 47
25345: PUSH
25346: LD_EXP 93
25350: AND
25351: IFFALSE 25573
25353: GO 25355
25355: DISABLE
25356: LD_INT 0
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25364: LD_ADDR_VAR 0 6
25368: PUSH
25369: LD_INT 22
25371: PUSH
25372: LD_OWVAR 2
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 21
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 23
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: ST_TO_ADDR
// if not tmp then
25418: LD_VAR 0 6
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 25573
// s1 := rand ( 1 , 4 ) ;
25427: LD_ADDR_VAR 0 2
25431: PUSH
25432: LD_INT 1
25434: PPUSH
25435: LD_INT 4
25437: PPUSH
25438: CALL_OW 12
25442: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25443: LD_ADDR_VAR 0 4
25447: PUSH
25448: LD_VAR 0 6
25452: PUSH
25453: LD_INT 1
25455: ARRAY
25456: PPUSH
25457: LD_VAR 0 2
25461: PPUSH
25462: CALL_OW 259
25466: ST_TO_ADDR
// if s1 = 1 then
25467: LD_VAR 0 2
25471: PUSH
25472: LD_INT 1
25474: EQUAL
25475: IFFALSE 25495
// s2 := rand ( 2 , 4 ) else
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_INT 2
25484: PPUSH
25485: LD_INT 4
25487: PPUSH
25488: CALL_OW 12
25492: ST_TO_ADDR
25493: GO 25503
// s2 := 1 ;
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 1
25502: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25503: LD_ADDR_VAR 0 5
25507: PUSH
25508: LD_VAR 0 6
25512: PUSH
25513: LD_INT 1
25515: ARRAY
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 259
25526: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25527: LD_VAR 0 6
25531: PUSH
25532: LD_INT 1
25534: ARRAY
25535: PPUSH
25536: LD_VAR 0 2
25540: PPUSH
25541: LD_VAR 0 5
25545: PPUSH
25546: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25550: LD_VAR 0 6
25554: PUSH
25555: LD_INT 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 3
25563: PPUSH
25564: LD_VAR 0 4
25568: PPUSH
25569: CALL_OW 237
// end ;
25573: PPOPN 6
25575: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25576: LD_EXP 47
25580: PUSH
25581: LD_EXP 94
25585: AND
25586: IFFALSE 25665
25588: GO 25590
25590: DISABLE
25591: LD_INT 0
25593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: LD_INT 22
25601: PUSH
25602: LD_OWVAR 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 30
25613: PUSH
25614: LD_INT 3
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PPUSH
25625: CALL_OW 69
25629: ST_TO_ADDR
// if not tmp then
25630: LD_VAR 0 1
25634: NOT
25635: IFFALSE 25639
// exit ;
25637: GO 25665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25639: LD_VAR 0 1
25643: PUSH
25644: LD_INT 1
25646: PPUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 12
25656: ARRAY
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: CALL_OW 234
// end ;
25665: PPOPN 1
25667: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25668: LD_EXP 47
25672: PUSH
25673: LD_EXP 95
25677: AND
25678: IFFALSE 25790
25680: GO 25682
25682: DISABLE
25683: LD_INT 0
25685: PPUSH
25686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25687: LD_ADDR_VAR 0 2
25691: PUSH
25692: LD_INT 22
25694: PUSH
25695: LD_OWVAR 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 30
25709: PUSH
25710: LD_INT 27
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 30
25719: PUSH
25720: LD_INT 26
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 30
25729: PUSH
25730: LD_INT 28
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 69
25751: ST_TO_ADDR
// if not tmp then
25752: LD_VAR 0 2
25756: NOT
25757: IFFALSE 25761
// exit ;
25759: GO 25790
// for i in tmp do
25761: LD_ADDR_VAR 0 1
25765: PUSH
25766: LD_VAR 0 2
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25788
// SetLives ( i , 1 ) ;
25774: LD_VAR 0 1
25778: PPUSH
25779: LD_INT 1
25781: PPUSH
25782: CALL_OW 234
25786: GO 25771
25788: POP
25789: POP
// end ;
25790: PPOPN 2
25792: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25793: LD_EXP 47
25797: PUSH
25798: LD_EXP 96
25802: AND
25803: IFFALSE 26090
25805: GO 25807
25807: DISABLE
25808: LD_INT 0
25810: PPUSH
25811: PPUSH
25812: PPUSH
// begin i := rand ( 1 , 7 ) ;
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_INT 1
25820: PPUSH
25821: LD_INT 7
25823: PPUSH
25824: CALL_OW 12
25828: ST_TO_ADDR
// case i of 1 :
25829: LD_VAR 0 1
25833: PUSH
25834: LD_INT 1
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25852
25842: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25843: LD_STRING earthquake(getX(game), 0, 32)
25845: PPUSH
25846: CALL_OW 559
25850: GO 26090
25852: LD_INT 2
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 25874
25860: POP
// begin ToLua ( displayStucuk(); ) ;
25861: LD_STRING displayStucuk();
25863: PPUSH
25864: CALL_OW 559
// ResetFog ;
25868: CALL_OW 335
// end ; 3 :
25872: GO 26090
25874: LD_INT 3
25876: DOUBLE
25877: EQUAL
25878: IFTRUE 25882
25880: GO 25986
25882: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25883: LD_ADDR_VAR 0 2
25887: PUSH
25888: LD_INT 22
25890: PUSH
25891: LD_OWVAR 2
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 25
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL_OW 69
25918: ST_TO_ADDR
// if not tmp then
25919: LD_VAR 0 2
25923: NOT
25924: IFFALSE 25928
// exit ;
25926: GO 26090
// un := tmp [ rand ( 1 , tmp ) ] ;
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: LD_VAR 0 2
25937: PUSH
25938: LD_INT 1
25940: PPUSH
25941: LD_VAR 0 2
25945: PPUSH
25946: CALL_OW 12
25950: ARRAY
25951: ST_TO_ADDR
// if Crawls ( un ) then
25952: LD_VAR 0 3
25956: PPUSH
25957: CALL_OW 318
25961: IFFALSE 25972
// ComWalk ( un ) ;
25963: LD_VAR 0 3
25967: PPUSH
25968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25972: LD_VAR 0 3
25976: PPUSH
25977: LD_INT 8
25979: PPUSH
25980: CALL_OW 336
// end ; 4 :
25984: GO 26090
25986: LD_INT 4
25988: DOUBLE
25989: EQUAL
25990: IFTRUE 25994
25992: GO 26068
25994: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25995: LD_ADDR_VAR 0 2
25999: PUSH
26000: LD_INT 22
26002: PUSH
26003: LD_OWVAR 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 30
26014: PUSH
26015: LD_INT 29
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PPUSH
26026: CALL_OW 69
26030: ST_TO_ADDR
// if not tmp then
26031: LD_VAR 0 2
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26090
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26040: LD_VAR 0 2
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26053: LD_VAR 0 2
26057: PUSH
26058: LD_INT 1
26060: ARRAY
26061: PPUSH
26062: CALL_OW 65
// end ; 5 .. 7 :
26066: GO 26090
26068: LD_INT 5
26070: DOUBLE
26071: GREATEREQUAL
26072: IFFALSE 26080
26074: LD_INT 7
26076: DOUBLE
26077: LESSEQUAL
26078: IFTRUE 26082
26080: GO 26089
26082: POP
// StreamSibBomb ; end ;
26083: CALL 22327 0 0
26087: GO 26090
26089: POP
// end ;
26090: PPOPN 3
26092: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26093: LD_EXP 47
26097: PUSH
26098: LD_EXP 97
26102: AND
26103: IFFALSE 26259
26105: GO 26107
26107: DISABLE
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
26112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26113: LD_ADDR_VAR 0 2
26117: PUSH
26118: LD_INT 81
26120: PUSH
26121: LD_OWVAR 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: LD_INT 21
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 21
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PPUSH
26162: CALL_OW 69
26166: ST_TO_ADDR
// if not tmp then
26167: LD_VAR 0 2
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26259
// p := 0 ;
26176: LD_ADDR_VAR 0 3
26180: PUSH
26181: LD_INT 0
26183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26184: LD_INT 35
26186: PPUSH
26187: CALL_OW 67
// p := p + 1 ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_INT 1
26203: PLUS
26204: ST_TO_ADDR
// for i in tmp do
26205: LD_ADDR_VAR 0 1
26209: PUSH
26210: LD_VAR 0 2
26214: PUSH
26215: FOR_IN
26216: IFFALSE 26247
// if GetLives ( i ) < 1000 then
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 256
26227: PUSH
26228: LD_INT 1000
26230: LESS
26231: IFFALSE 26245
// SetLives ( i , 1000 ) ;
26233: LD_VAR 0 1
26237: PPUSH
26238: LD_INT 1000
26240: PPUSH
26241: CALL_OW 234
26245: GO 26215
26247: POP
26248: POP
// until p > 20 ;
26249: LD_VAR 0 3
26253: PUSH
26254: LD_INT 20
26256: GREATER
26257: IFFALSE 26184
// end ;
26259: PPOPN 3
26261: END
// every 0 0$1 trigger StreamModeActive and sTime do
26262: LD_EXP 47
26266: PUSH
26267: LD_EXP 98
26271: AND
26272: IFFALSE 26307
26274: GO 26276
26276: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26277: LD_INT 28
26279: PPUSH
26280: LD_OWVAR 2
26284: PPUSH
26285: LD_INT 2
26287: PPUSH
26288: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26292: LD_INT 30
26294: PPUSH
26295: LD_OWVAR 2
26299: PPUSH
26300: LD_INT 2
26302: PPUSH
26303: CALL_OW 322
// end ;
26307: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26308: LD_EXP 47
26312: PUSH
26313: LD_EXP 99
26317: AND
26318: IFFALSE 26439
26320: GO 26322
26322: DISABLE
26323: LD_INT 0
26325: PPUSH
26326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_INT 22
26334: PUSH
26335: LD_OWVAR 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: LD_INT 23
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: ST_TO_ADDR
// if not tmp then
26381: LD_VAR 0 2
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26439
// for i in tmp do
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: LD_VAR 0 2
26399: PUSH
26400: FOR_IN
26401: IFFALSE 26437
// begin if Crawls ( i ) then
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL_OW 318
26412: IFFALSE 26423
// ComWalk ( i ) ;
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 138
// SetClass ( i , 2 ) ;
26423: LD_VAR 0 1
26427: PPUSH
26428: LD_INT 2
26430: PPUSH
26431: CALL_OW 336
// end ;
26435: GO 26400
26437: POP
26438: POP
// end ;
26439: PPOPN 2
26441: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26442: LD_EXP 47
26446: PUSH
26447: LD_EXP 100
26451: AND
26452: IFFALSE 26740
26454: GO 26456
26456: DISABLE
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26462: LD_OWVAR 2
26466: PPUSH
26467: LD_INT 9
26469: PPUSH
26470: LD_INT 1
26472: PPUSH
26473: LD_INT 1
26475: PPUSH
26476: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26480: LD_INT 9
26482: PPUSH
26483: LD_OWVAR 2
26487: PPUSH
26488: CALL_OW 343
// uc_side := 9 ;
26492: LD_ADDR_OWVAR 20
26496: PUSH
26497: LD_INT 9
26499: ST_TO_ADDR
// uc_nation := 2 ;
26500: LD_ADDR_OWVAR 21
26504: PUSH
26505: LD_INT 2
26507: ST_TO_ADDR
// hc_name := Dark Warrior ;
26508: LD_ADDR_OWVAR 26
26512: PUSH
26513: LD_STRING Dark Warrior
26515: ST_TO_ADDR
// hc_gallery :=  ;
26516: LD_ADDR_OWVAR 33
26520: PUSH
26521: LD_STRING 
26523: ST_TO_ADDR
// hc_noskilllimit := true ;
26524: LD_ADDR_OWVAR 76
26528: PUSH
26529: LD_INT 1
26531: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26532: LD_ADDR_OWVAR 31
26536: PUSH
26537: LD_INT 30
26539: PUSH
26540: LD_INT 30
26542: PUSH
26543: LD_INT 30
26545: PUSH
26546: LD_INT 30
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: ST_TO_ADDR
// un := CreateHuman ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: CALL_OW 44
26564: ST_TO_ADDR
// hc_noskilllimit := false ;
26565: LD_ADDR_OWVAR 76
26569: PUSH
26570: LD_INT 0
26572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26573: LD_VAR 0 3
26577: PPUSH
26578: LD_INT 1
26580: PPUSH
26581: CALL_OW 51
// ToLua ( playRanger() ) ;
26585: LD_STRING playRanger()
26587: PPUSH
26588: CALL_OW 559
// p := 0 ;
26592: LD_ADDR_VAR 0 2
26596: PUSH
26597: LD_INT 0
26599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26600: LD_INT 35
26602: PPUSH
26603: CALL_OW 67
// p := p + 1 ;
26607: LD_ADDR_VAR 0 2
26611: PUSH
26612: LD_VAR 0 2
26616: PUSH
26617: LD_INT 1
26619: PLUS
26620: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26621: LD_VAR 0 3
26625: PPUSH
26626: CALL_OW 256
26630: PUSH
26631: LD_INT 1000
26633: LESS
26634: IFFALSE 26648
// SetLives ( un , 1000 ) ;
26636: LD_VAR 0 3
26640: PPUSH
26641: LD_INT 1000
26643: PPUSH
26644: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26648: LD_VAR 0 3
26652: PPUSH
26653: LD_INT 81
26655: PUSH
26656: LD_OWVAR 2
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 91
26667: PUSH
26668: LD_VAR 0 3
26672: PUSH
26673: LD_INT 30
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 69
26689: PPUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 74
26699: PPUSH
26700: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26704: LD_VAR 0 2
26708: PUSH
26709: LD_INT 80
26711: GREATER
26712: PUSH
26713: LD_VAR 0 3
26717: PPUSH
26718: CALL_OW 301
26722: OR
26723: IFFALSE 26600
// if un then
26725: LD_VAR 0 3
26729: IFFALSE 26740
// RemoveUnit ( un ) ;
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL_OW 64
// end ;
26740: PPOPN 3
26742: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26743: LD_EXP 101
26747: IFFALSE 26863
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
26756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26757: LD_ADDR_VAR 0 2
26761: PUSH
26762: LD_INT 81
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26793: LD_STRING playComputer()
26795: PPUSH
26796: CALL_OW 559
// if not tmp then
26800: LD_VAR 0 2
26804: NOT
26805: IFFALSE 26809
// exit ;
26807: GO 26863
// for i in tmp do
26809: LD_ADDR_VAR 0 1
26813: PUSH
26814: LD_VAR 0 2
26818: PUSH
26819: FOR_IN
26820: IFFALSE 26861
// for j := 1 to 4 do
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: DOUBLE
26828: LD_INT 1
26830: DEC
26831: ST_TO_ADDR
26832: LD_INT 4
26834: PUSH
26835: FOR_TO
26836: IFFALSE 26857
// SetSkill ( i , j , 10 ) ;
26838: LD_VAR 0 1
26842: PPUSH
26843: LD_VAR 0 3
26847: PPUSH
26848: LD_INT 10
26850: PPUSH
26851: CALL_OW 237
26855: GO 26835
26857: POP
26858: POP
26859: GO 26819
26861: POP
26862: POP
// end ;
26863: PPOPN 3
26865: END
// every 0 0$1 trigger s30 do var i , tmp ;
26866: LD_EXP 102
26870: IFFALSE 26939
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PPUSH
26896: CALL_OW 69
26900: ST_TO_ADDR
// if not tmp then
26901: LD_VAR 0 2
26905: NOT
26906: IFFALSE 26910
// exit ;
26908: GO 26939
// for i in tmp do
26910: LD_ADDR_VAR 0 1
26914: PUSH
26915: LD_VAR 0 2
26919: PUSH
26920: FOR_IN
26921: IFFALSE 26937
// SetLives ( i , 300 ) ;
26923: LD_VAR 0 1
26927: PPUSH
26928: LD_INT 300
26930: PPUSH
26931: CALL_OW 234
26935: GO 26920
26937: POP
26938: POP
// end ;
26939: PPOPN 2
26941: END
// every 0 0$1 trigger s60 do var i , tmp ;
26942: LD_EXP 103
26946: IFFALSE 27015
26948: GO 26950
26950: DISABLE
26951: LD_INT 0
26953: PPUSH
26954: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26955: LD_ADDR_VAR 0 2
26959: PUSH
26960: LD_INT 22
26962: PUSH
26963: LD_OWVAR 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: ST_TO_ADDR
// if not tmp then
26977: LD_VAR 0 2
26981: NOT
26982: IFFALSE 26986
// exit ;
26984: GO 27015
// for i in tmp do
26986: LD_ADDR_VAR 0 1
26990: PUSH
26991: LD_VAR 0 2
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27013
// SetLives ( i , 600 ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_INT 600
27006: PPUSH
27007: CALL_OW 234
27011: GO 26996
27013: POP
27014: POP
// end ;
27015: PPOPN 2
27017: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27018: LD_INT 0
27020: PPUSH
// case cmd of 301 :
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 301
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27066
27034: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27035: LD_VAR 0 6
27039: PPUSH
27040: LD_VAR 0 7
27044: PPUSH
27045: LD_VAR 0 8
27049: PPUSH
27050: LD_VAR 0 4
27054: PPUSH
27055: LD_VAR 0 5
27059: PPUSH
27060: CALL 28267 0 5
27064: GO 27187
27066: LD_INT 302
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27111
27074: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27075: LD_VAR 0 6
27079: PPUSH
27080: LD_VAR 0 7
27084: PPUSH
27085: LD_VAR 0 8
27089: PPUSH
27090: LD_VAR 0 9
27094: PPUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: LD_VAR 0 5
27104: PPUSH
27105: CALL 28358 0 6
27109: GO 27187
27111: LD_INT 303
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27156
27119: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27120: LD_VAR 0 6
27124: PPUSH
27125: LD_VAR 0 7
27129: PPUSH
27130: LD_VAR 0 8
27134: PPUSH
27135: LD_VAR 0 9
27139: PPUSH
27140: LD_VAR 0 4
27144: PPUSH
27145: LD_VAR 0 5
27149: PPUSH
27150: CALL 27192 0 6
27154: GO 27187
27156: LD_INT 304
27158: DOUBLE
27159: EQUAL
27160: IFTRUE 27164
27162: GO 27186
27164: POP
// hHackTeleport ( unit , x , y ) ; end ;
27165: LD_VAR 0 2
27169: PPUSH
27170: LD_VAR 0 4
27174: PPUSH
27175: LD_VAR 0 5
27179: PPUSH
27180: CALL 28951 0 3
27184: GO 27187
27186: POP
// end ;
27187: LD_VAR 0 12
27191: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27192: LD_INT 0
27194: PPUSH
27195: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27196: LD_VAR 0 1
27200: PUSH
27201: LD_INT 1
27203: LESS
27204: PUSH
27205: LD_VAR 0 1
27209: PUSH
27210: LD_INT 3
27212: GREATER
27213: OR
27214: PUSH
27215: LD_VAR 0 5
27219: PPUSH
27220: LD_VAR 0 6
27224: PPUSH
27225: CALL_OW 428
27229: OR
27230: IFFALSE 27234
// exit ;
27232: GO 27954
// uc_side := your_side ;
27234: LD_ADDR_OWVAR 20
27238: PUSH
27239: LD_OWVAR 2
27243: ST_TO_ADDR
// uc_nation := nation ;
27244: LD_ADDR_OWVAR 21
27248: PUSH
27249: LD_VAR 0 1
27253: ST_TO_ADDR
// bc_level = 1 ;
27254: LD_ADDR_OWVAR 43
27258: PUSH
27259: LD_INT 1
27261: ST_TO_ADDR
// case btype of 1 :
27262: LD_VAR 0 2
27266: PUSH
27267: LD_INT 1
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27286
27275: POP
// bc_type := b_depot ; 2 :
27276: LD_ADDR_OWVAR 42
27280: PUSH
27281: LD_INT 0
27283: ST_TO_ADDR
27284: GO 27898
27286: LD_INT 2
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27305
27294: POP
// bc_type := b_warehouse ; 3 :
27295: LD_ADDR_OWVAR 42
27299: PUSH
27300: LD_INT 1
27302: ST_TO_ADDR
27303: GO 27898
27305: LD_INT 3
27307: DOUBLE
27308: EQUAL
27309: IFTRUE 27313
27311: GO 27324
27313: POP
// bc_type := b_lab ; 4 .. 9 :
27314: LD_ADDR_OWVAR 42
27318: PUSH
27319: LD_INT 6
27321: ST_TO_ADDR
27322: GO 27898
27324: LD_INT 4
27326: DOUBLE
27327: GREATEREQUAL
27328: IFFALSE 27336
27330: LD_INT 9
27332: DOUBLE
27333: LESSEQUAL
27334: IFTRUE 27338
27336: GO 27390
27338: POP
// begin bc_type := b_lab_half ;
27339: LD_ADDR_OWVAR 42
27343: PUSH
27344: LD_INT 7
27346: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27347: LD_ADDR_OWVAR 44
27351: PUSH
27352: LD_INT 10
27354: PUSH
27355: LD_INT 11
27357: PUSH
27358: LD_INT 12
27360: PUSH
27361: LD_INT 15
27363: PUSH
27364: LD_INT 14
27366: PUSH
27367: LD_INT 13
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: PUSH
27378: LD_VAR 0 2
27382: PUSH
27383: LD_INT 3
27385: MINUS
27386: ARRAY
27387: ST_TO_ADDR
// end ; 10 .. 13 :
27388: GO 27898
27390: LD_INT 10
27392: DOUBLE
27393: GREATEREQUAL
27394: IFFALSE 27402
27396: LD_INT 13
27398: DOUBLE
27399: LESSEQUAL
27400: IFTRUE 27404
27402: GO 27481
27404: POP
// begin bc_type := b_lab_full ;
27405: LD_ADDR_OWVAR 42
27409: PUSH
27410: LD_INT 8
27412: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27413: LD_ADDR_OWVAR 44
27417: PUSH
27418: LD_INT 10
27420: PUSH
27421: LD_INT 12
27423: PUSH
27424: LD_INT 14
27426: PUSH
27427: LD_INT 13
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: PUSH
27436: LD_VAR 0 2
27440: PUSH
27441: LD_INT 9
27443: MINUS
27444: ARRAY
27445: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27446: LD_ADDR_OWVAR 45
27450: PUSH
27451: LD_INT 11
27453: PUSH
27454: LD_INT 15
27456: PUSH
27457: LD_INT 12
27459: PUSH
27460: LD_INT 15
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: PUSH
27469: LD_VAR 0 2
27473: PUSH
27474: LD_INT 9
27476: MINUS
27477: ARRAY
27478: ST_TO_ADDR
// end ; 14 :
27479: GO 27898
27481: LD_INT 14
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27500
27489: POP
// bc_type := b_workshop ; 15 :
27490: LD_ADDR_OWVAR 42
27494: PUSH
27495: LD_INT 2
27497: ST_TO_ADDR
27498: GO 27898
27500: LD_INT 15
27502: DOUBLE
27503: EQUAL
27504: IFTRUE 27508
27506: GO 27519
27508: POP
// bc_type := b_factory ; 16 :
27509: LD_ADDR_OWVAR 42
27513: PUSH
27514: LD_INT 3
27516: ST_TO_ADDR
27517: GO 27898
27519: LD_INT 16
27521: DOUBLE
27522: EQUAL
27523: IFTRUE 27527
27525: GO 27538
27527: POP
// bc_type := b_ext_gun ; 17 :
27528: LD_ADDR_OWVAR 42
27532: PUSH
27533: LD_INT 17
27535: ST_TO_ADDR
27536: GO 27898
27538: LD_INT 17
27540: DOUBLE
27541: EQUAL
27542: IFTRUE 27546
27544: GO 27574
27546: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27547: LD_ADDR_OWVAR 42
27551: PUSH
27552: LD_INT 19
27554: PUSH
27555: LD_INT 23
27557: PUSH
27558: LD_INT 19
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: PUSH
27566: LD_VAR 0 1
27570: ARRAY
27571: ST_TO_ADDR
27572: GO 27898
27574: LD_INT 18
27576: DOUBLE
27577: EQUAL
27578: IFTRUE 27582
27580: GO 27593
27582: POP
// bc_type := b_ext_radar ; 19 :
27583: LD_ADDR_OWVAR 42
27587: PUSH
27588: LD_INT 20
27590: ST_TO_ADDR
27591: GO 27898
27593: LD_INT 19
27595: DOUBLE
27596: EQUAL
27597: IFTRUE 27601
27599: GO 27612
27601: POP
// bc_type := b_ext_radio ; 20 :
27602: LD_ADDR_OWVAR 42
27606: PUSH
27607: LD_INT 22
27609: ST_TO_ADDR
27610: GO 27898
27612: LD_INT 20
27614: DOUBLE
27615: EQUAL
27616: IFTRUE 27620
27618: GO 27631
27620: POP
// bc_type := b_ext_siberium ; 21 :
27621: LD_ADDR_OWVAR 42
27625: PUSH
27626: LD_INT 21
27628: ST_TO_ADDR
27629: GO 27898
27631: LD_INT 21
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27639
27637: GO 27650
27639: POP
// bc_type := b_ext_computer ; 22 :
27640: LD_ADDR_OWVAR 42
27644: PUSH
27645: LD_INT 24
27647: ST_TO_ADDR
27648: GO 27898
27650: LD_INT 22
27652: DOUBLE
27653: EQUAL
27654: IFTRUE 27658
27656: GO 27669
27658: POP
// bc_type := b_ext_track ; 23 :
27659: LD_ADDR_OWVAR 42
27663: PUSH
27664: LD_INT 16
27666: ST_TO_ADDR
27667: GO 27898
27669: LD_INT 23
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27688
27677: POP
// bc_type := b_ext_laser ; 24 :
27678: LD_ADDR_OWVAR 42
27682: PUSH
27683: LD_INT 25
27685: ST_TO_ADDR
27686: GO 27898
27688: LD_INT 24
27690: DOUBLE
27691: EQUAL
27692: IFTRUE 27696
27694: GO 27707
27696: POP
// bc_type := b_control_tower ; 25 :
27697: LD_ADDR_OWVAR 42
27701: PUSH
27702: LD_INT 36
27704: ST_TO_ADDR
27705: GO 27898
27707: LD_INT 25
27709: DOUBLE
27710: EQUAL
27711: IFTRUE 27715
27713: GO 27726
27715: POP
// bc_type := b_breastwork ; 26 :
27716: LD_ADDR_OWVAR 42
27720: PUSH
27721: LD_INT 31
27723: ST_TO_ADDR
27724: GO 27898
27726: LD_INT 26
27728: DOUBLE
27729: EQUAL
27730: IFTRUE 27734
27732: GO 27745
27734: POP
// bc_type := b_bunker ; 27 :
27735: LD_ADDR_OWVAR 42
27739: PUSH
27740: LD_INT 32
27742: ST_TO_ADDR
27743: GO 27898
27745: LD_INT 27
27747: DOUBLE
27748: EQUAL
27749: IFTRUE 27753
27751: GO 27764
27753: POP
// bc_type := b_turret ; 28 :
27754: LD_ADDR_OWVAR 42
27758: PUSH
27759: LD_INT 33
27761: ST_TO_ADDR
27762: GO 27898
27764: LD_INT 28
27766: DOUBLE
27767: EQUAL
27768: IFTRUE 27772
27770: GO 27783
27772: POP
// bc_type := b_armoury ; 29 :
27773: LD_ADDR_OWVAR 42
27777: PUSH
27778: LD_INT 4
27780: ST_TO_ADDR
27781: GO 27898
27783: LD_INT 29
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27802
27791: POP
// bc_type := b_barracks ; 30 :
27792: LD_ADDR_OWVAR 42
27796: PUSH
27797: LD_INT 5
27799: ST_TO_ADDR
27800: GO 27898
27802: LD_INT 30
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 27821
27810: POP
// bc_type := b_solar_power ; 31 :
27811: LD_ADDR_OWVAR 42
27815: PUSH
27816: LD_INT 27
27818: ST_TO_ADDR
27819: GO 27898
27821: LD_INT 31
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27840
27829: POP
// bc_type := b_oil_power ; 32 :
27830: LD_ADDR_OWVAR 42
27834: PUSH
27835: LD_INT 26
27837: ST_TO_ADDR
27838: GO 27898
27840: LD_INT 32
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// bc_type := b_siberite_power ; 33 :
27849: LD_ADDR_OWVAR 42
27853: PUSH
27854: LD_INT 28
27856: ST_TO_ADDR
27857: GO 27898
27859: LD_INT 33
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27878
27867: POP
// bc_type := b_oil_mine ; 34 :
27868: LD_ADDR_OWVAR 42
27872: PUSH
27873: LD_INT 29
27875: ST_TO_ADDR
27876: GO 27898
27878: LD_INT 34
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27886
27884: GO 27897
27886: POP
// bc_type := b_siberite_mine ; end ;
27887: LD_ADDR_OWVAR 42
27891: PUSH
27892: LD_INT 30
27894: ST_TO_ADDR
27895: GO 27898
27897: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27898: LD_ADDR_VAR 0 8
27902: PUSH
27903: LD_VAR 0 5
27907: PPUSH
27908: LD_VAR 0 6
27912: PPUSH
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 47
27922: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27923: LD_OWVAR 42
27927: PUSH
27928: LD_INT 32
27930: PUSH
27931: LD_INT 33
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: IN
27938: IFFALSE 27954
// PlaceWeaponTurret ( b , weapon ) ;
27940: LD_VAR 0 8
27944: PPUSH
27945: LD_VAR 0 4
27949: PPUSH
27950: CALL_OW 431
// end ;
27954: LD_VAR 0 7
27958: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
27963: PPUSH
27964: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27965: LD_ADDR_VAR 0 4
27969: PUSH
27970: LD_INT 22
27972: PUSH
27973: LD_OWVAR 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: LD_INT 30
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PPUSH
28014: CALL_OW 69
28018: ST_TO_ADDR
// if not tmp then
28019: LD_VAR 0 4
28023: NOT
28024: IFFALSE 28028
// exit ;
28026: GO 28087
// for i in tmp do
28028: LD_ADDR_VAR 0 2
28032: PUSH
28033: LD_VAR 0 4
28037: PUSH
28038: FOR_IN
28039: IFFALSE 28085
// for j = 1 to 3 do
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: DOUBLE
28047: LD_INT 1
28049: DEC
28050: ST_TO_ADDR
28051: LD_INT 3
28053: PUSH
28054: FOR_TO
28055: IFFALSE 28081
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 274
28066: PPUSH
28067: LD_VAR 0 3
28071: PPUSH
28072: LD_INT 99999
28074: PPUSH
28075: CALL_OW 277
28079: GO 28054
28081: POP
28082: POP
28083: GO 28038
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 1
28091: RET
// export function hHackSetLevel10 ; var i , j ; begin
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
28096: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28097: LD_ADDR_VAR 0 2
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PPUSH
28112: CALL_OW 69
28116: PUSH
28117: FOR_IN
28118: IFFALSE 28170
// if IsSelected ( i ) then
28120: LD_VAR 0 2
28124: PPUSH
28125: CALL_OW 306
28129: IFFALSE 28168
// begin for j := 1 to 4 do
28131: LD_ADDR_VAR 0 3
28135: PUSH
28136: DOUBLE
28137: LD_INT 1
28139: DEC
28140: ST_TO_ADDR
28141: LD_INT 4
28143: PUSH
28144: FOR_TO
28145: IFFALSE 28166
// SetSkill ( i , j , 10 ) ;
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_VAR 0 3
28156: PPUSH
28157: LD_INT 10
28159: PPUSH
28160: CALL_OW 237
28164: GO 28144
28166: POP
28167: POP
// end ;
28168: GO 28117
28170: POP
28171: POP
// end ;
28172: LD_VAR 0 1
28176: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
28181: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28182: LD_ADDR_VAR 0 2
28186: PUSH
28187: LD_INT 22
28189: PUSH
28190: LD_OWVAR 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 21
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PPUSH
28213: CALL_OW 69
28217: PUSH
28218: FOR_IN
28219: IFFALSE 28260
// begin for j := 1 to 4 do
28221: LD_ADDR_VAR 0 3
28225: PUSH
28226: DOUBLE
28227: LD_INT 1
28229: DEC
28230: ST_TO_ADDR
28231: LD_INT 4
28233: PUSH
28234: FOR_TO
28235: IFFALSE 28256
// SetSkill ( i , j , 10 ) ;
28237: LD_VAR 0 2
28241: PPUSH
28242: LD_VAR 0 3
28246: PPUSH
28247: LD_INT 10
28249: PPUSH
28250: CALL_OW 237
28254: GO 28234
28256: POP
28257: POP
// end ;
28258: GO 28218
28260: POP
28261: POP
// end ;
28262: LD_VAR 0 1
28266: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28267: LD_INT 0
28269: PPUSH
// uc_side := your_side ;
28270: LD_ADDR_OWVAR 20
28274: PUSH
28275: LD_OWVAR 2
28279: ST_TO_ADDR
// uc_nation := nation ;
28280: LD_ADDR_OWVAR 21
28284: PUSH
28285: LD_VAR 0 1
28289: ST_TO_ADDR
// InitHc ;
28290: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28294: LD_INT 0
28296: PPUSH
28297: LD_VAR 0 2
28301: PPUSH
28302: LD_VAR 0 3
28306: PPUSH
28307: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_VAR 0 5
28320: PPUSH
28321: CALL_OW 428
28325: PUSH
28326: LD_INT 0
28328: EQUAL
28329: IFFALSE 28353
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28331: CALL_OW 44
28335: PPUSH
28336: LD_VAR 0 4
28340: PPUSH
28341: LD_VAR 0 5
28345: PPUSH
28346: LD_INT 1
28348: PPUSH
28349: CALL_OW 48
// end ;
28353: LD_VAR 0 6
28357: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28358: LD_INT 0
28360: PPUSH
28361: PPUSH
// uc_side := your_side ;
28362: LD_ADDR_OWVAR 20
28366: PUSH
28367: LD_OWVAR 2
28371: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28372: LD_VAR 0 1
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: LD_INT 5
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: IN
28399: IFFALSE 28411
// uc_nation := nation_american else
28401: LD_ADDR_OWVAR 21
28405: PUSH
28406: LD_INT 1
28408: ST_TO_ADDR
28409: GO 28454
// if chassis in [ 11 , 12 , 13 , 14 ] then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 11
28418: PUSH
28419: LD_INT 12
28421: PUSH
28422: LD_INT 13
28424: PUSH
28425: LD_INT 14
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: IN
28434: IFFALSE 28446
// uc_nation := nation_arabian else
28436: LD_ADDR_OWVAR 21
28440: PUSH
28441: LD_INT 2
28443: ST_TO_ADDR
28444: GO 28454
// uc_nation := nation_russian ;
28446: LD_ADDR_OWVAR 21
28450: PUSH
28451: LD_INT 3
28453: ST_TO_ADDR
// vc_chassis := chassis ;
28454: LD_ADDR_OWVAR 37
28458: PUSH
28459: LD_VAR 0 1
28463: ST_TO_ADDR
// vc_engine := engine ;
28464: LD_ADDR_OWVAR 39
28468: PUSH
28469: LD_VAR 0 2
28473: ST_TO_ADDR
// vc_control := control ;
28474: LD_ADDR_OWVAR 38
28478: PUSH
28479: LD_VAR 0 3
28483: ST_TO_ADDR
// vc_weapon := weapon ;
28484: LD_ADDR_OWVAR 40
28488: PUSH
28489: LD_VAR 0 4
28493: ST_TO_ADDR
// un := CreateVehicle ;
28494: LD_ADDR_VAR 0 8
28498: PUSH
28499: CALL_OW 45
28503: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28504: LD_VAR 0 8
28508: PPUSH
28509: LD_INT 0
28511: PPUSH
28512: LD_INT 5
28514: PPUSH
28515: CALL_OW 12
28519: PPUSH
28520: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28524: LD_VAR 0 8
28528: PPUSH
28529: LD_VAR 0 5
28533: PPUSH
28534: LD_VAR 0 6
28538: PPUSH
28539: LD_INT 1
28541: PPUSH
28542: CALL_OW 48
// end ;
28546: LD_VAR 0 7
28550: RET
// export hInvincible ; every 1 do
28551: GO 28553
28553: DISABLE
// hInvincible := [ ] ;
28554: LD_ADDR_EXP 104
28558: PUSH
28559: EMPTY
28560: ST_TO_ADDR
28561: END
// every 10 do var i ;
28562: GO 28564
28564: DISABLE
28565: LD_INT 0
28567: PPUSH
// begin enable ;
28568: ENABLE
// if not hInvincible then
28569: LD_EXP 104
28573: NOT
28574: IFFALSE 28578
// exit ;
28576: GO 28622
// for i in hInvincible do
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_EXP 104
28587: PUSH
28588: FOR_IN
28589: IFFALSE 28620
// if GetLives ( i ) < 1000 then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 256
28600: PUSH
28601: LD_INT 1000
28603: LESS
28604: IFFALSE 28618
// SetLives ( i , 1000 ) ;
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_INT 1000
28613: PPUSH
28614: CALL_OW 234
28618: GO 28588
28620: POP
28621: POP
// end ;
28622: PPOPN 1
28624: END
// export function hHackInvincible ; var i ; begin
28625: LD_INT 0
28627: PPUSH
28628: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28629: LD_ADDR_VAR 0 2
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 21
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: PPUSH
28662: CALL_OW 69
28666: PUSH
28667: FOR_IN
28668: IFFALSE 28729
// if IsSelected ( i ) then
28670: LD_VAR 0 2
28674: PPUSH
28675: CALL_OW 306
28679: IFFALSE 28727
// begin if i in hInvincible then
28681: LD_VAR 0 2
28685: PUSH
28686: LD_EXP 104
28690: IN
28691: IFFALSE 28711
// hInvincible := hInvincible diff i else
28693: LD_ADDR_EXP 104
28697: PUSH
28698: LD_EXP 104
28702: PUSH
28703: LD_VAR 0 2
28707: DIFF
28708: ST_TO_ADDR
28709: GO 28727
// hInvincible := hInvincible union i ;
28711: LD_ADDR_EXP 104
28715: PUSH
28716: LD_EXP 104
28720: PUSH
28721: LD_VAR 0 2
28725: UNION
28726: ST_TO_ADDR
// end ;
28727: GO 28667
28729: POP
28730: POP
// end ;
28731: LD_VAR 0 1
28735: RET
// export function hHackInvisible ; var i , j ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
28740: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28741: LD_ADDR_VAR 0 2
28745: PUSH
28746: LD_INT 21
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PPUSH
28756: CALL_OW 69
28760: PUSH
28761: FOR_IN
28762: IFFALSE 28786
// if IsSelected ( i ) then
28764: LD_VAR 0 2
28768: PPUSH
28769: CALL_OW 306
28773: IFFALSE 28784
// ComForceInvisible ( i ) ;
28775: LD_VAR 0 2
28779: PPUSH
28780: CALL_OW 496
28784: GO 28761
28786: POP
28787: POP
// end ;
28788: LD_VAR 0 1
28792: RET
// export function hHackChangeYourSide ; begin
28793: LD_INT 0
28795: PPUSH
// if your_side = 8 then
28796: LD_OWVAR 2
28800: PUSH
28801: LD_INT 8
28803: EQUAL
28804: IFFALSE 28816
// your_side := 0 else
28806: LD_ADDR_OWVAR 2
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
28814: GO 28830
// your_side := your_side + 1 ;
28816: LD_ADDR_OWVAR 2
28820: PUSH
28821: LD_OWVAR 2
28825: PUSH
28826: LD_INT 1
28828: PLUS
28829: ST_TO_ADDR
// end ;
28830: LD_VAR 0 1
28834: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
28839: PPUSH
// for i in all_units do
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_OWVAR 3
28849: PUSH
28850: FOR_IN
28851: IFFALSE 28929
// if IsSelected ( i ) then
28853: LD_VAR 0 2
28857: PPUSH
28858: CALL_OW 306
28862: IFFALSE 28927
// begin j := GetSide ( i ) ;
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_VAR 0 2
28873: PPUSH
28874: CALL_OW 255
28878: ST_TO_ADDR
// if j = 8 then
28879: LD_VAR 0 3
28883: PUSH
28884: LD_INT 8
28886: EQUAL
28887: IFFALSE 28899
// j := 0 else
28889: LD_ADDR_VAR 0 3
28893: PUSH
28894: LD_INT 0
28896: ST_TO_ADDR
28897: GO 28913
// j := j + 1 ;
28899: LD_ADDR_VAR 0 3
28903: PUSH
28904: LD_VAR 0 3
28908: PUSH
28909: LD_INT 1
28911: PLUS
28912: ST_TO_ADDR
// SetSide ( i , j ) ;
28913: LD_VAR 0 2
28917: PPUSH
28918: LD_VAR 0 3
28922: PPUSH
28923: CALL_OW 235
// end ;
28927: GO 28850
28929: POP
28930: POP
// end ;
28931: LD_VAR 0 1
28935: RET
// export function hHackFog ; begin
28936: LD_INT 0
28938: PPUSH
// FogOff ( true ) ;
28939: LD_INT 1
28941: PPUSH
28942: CALL_OW 344
// end ;
28946: LD_VAR 0 1
28950: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28951: LD_INT 0
28953: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28954: LD_VAR 0 1
28958: PPUSH
28959: LD_VAR 0 2
28963: PPUSH
28964: LD_VAR 0 3
28968: PPUSH
28969: LD_INT 1
28971: PPUSH
28972: LD_INT 1
28974: PPUSH
28975: CALL_OW 483
// CenterOnXY ( x , y ) ;
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 3
28988: PPUSH
28989: CALL_OW 84
// end ;
28993: LD_VAR 0 4
28997: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28998: LD_INT 0
29000: PPUSH
29001: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29002: LD_VAR 0 1
29006: NOT
29007: PUSH
29008: LD_VAR 0 2
29012: PPUSH
29013: LD_VAR 0 3
29017: PPUSH
29018: CALL_OW 488
29022: NOT
29023: OR
29024: PUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 266
29034: PUSH
29035: LD_INT 3
29037: NONEQUAL
29038: PUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 247
29048: PUSH
29049: LD_INT 1
29051: EQUAL
29052: NOT
29053: AND
29054: OR
29055: IFFALSE 29059
// exit ;
29057: GO 29208
// if GetType ( factory ) = unit_human then
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 247
29068: PUSH
29069: LD_INT 1
29071: EQUAL
29072: IFFALSE 29089
// factory := IsInUnit ( factory ) ;
29074: LD_ADDR_VAR 0 1
29078: PUSH
29079: LD_VAR 0 1
29083: PPUSH
29084: CALL_OW 310
29088: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 266
29098: PUSH
29099: LD_INT 3
29101: NONEQUAL
29102: IFFALSE 29106
// exit ;
29104: GO 29208
// if HexInfo ( x , y ) = factory then
29106: LD_VAR 0 2
29110: PPUSH
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 428
29120: PUSH
29121: LD_VAR 0 1
29125: EQUAL
29126: IFFALSE 29153
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29128: LD_ADDR_EXP 105
29132: PUSH
29133: LD_EXP 105
29137: PPUSH
29138: LD_VAR 0 1
29142: PPUSH
29143: LD_INT 0
29145: PPUSH
29146: CALL_OW 1
29150: ST_TO_ADDR
29151: GO 29204
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29153: LD_ADDR_EXP 105
29157: PUSH
29158: LD_EXP 105
29162: PPUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 255
29177: PUSH
29178: LD_VAR 0 1
29182: PUSH
29183: LD_VAR 0 2
29187: PUSH
29188: LD_VAR 0 3
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: PPUSH
29199: CALL_OW 1
29203: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29204: CALL 29213 0 0
// end ;
29208: LD_VAR 0 4
29212: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29213: LD_INT 0
29215: PPUSH
29216: PPUSH
29217: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29218: LD_STRING resetFactoryWaypoint();
29220: PPUSH
29221: CALL_OW 559
// if factoryWaypoints then
29225: LD_EXP 105
29229: IFFALSE 29355
// begin list := PrepareArray ( factoryWaypoints ) ;
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_EXP 105
29240: PPUSH
29241: CALL 71535 0 1
29245: ST_TO_ADDR
// for i := 1 to list do
29246: LD_ADDR_VAR 0 2
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_VAR 0 3
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29353
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29264: LD_STRING setFactoryWaypointXY(
29266: PUSH
29267: LD_VAR 0 3
29271: PUSH
29272: LD_VAR 0 2
29276: ARRAY
29277: PUSH
29278: LD_INT 1
29280: ARRAY
29281: STR
29282: PUSH
29283: LD_STRING ,
29285: STR
29286: PUSH
29287: LD_VAR 0 3
29291: PUSH
29292: LD_VAR 0 2
29296: ARRAY
29297: PUSH
29298: LD_INT 2
29300: ARRAY
29301: STR
29302: PUSH
29303: LD_STRING ,
29305: STR
29306: PUSH
29307: LD_VAR 0 3
29311: PUSH
29312: LD_VAR 0 2
29316: ARRAY
29317: PUSH
29318: LD_INT 3
29320: ARRAY
29321: STR
29322: PUSH
29323: LD_STRING ,
29325: STR
29326: PUSH
29327: LD_VAR 0 3
29331: PUSH
29332: LD_VAR 0 2
29336: ARRAY
29337: PUSH
29338: LD_INT 4
29340: ARRAY
29341: STR
29342: PUSH
29343: LD_STRING )
29345: STR
29346: PPUSH
29347: CALL_OW 559
29351: GO 29261
29353: POP
29354: POP
// end ; end ;
29355: LD_VAR 0 1
29359: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29360: LD_INT 0
29362: PPUSH
// if HexInfo ( x , y ) = warehouse then
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_VAR 0 3
29372: PPUSH
29373: CALL_OW 428
29377: PUSH
29378: LD_VAR 0 1
29382: EQUAL
29383: IFFALSE 29410
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29385: LD_ADDR_EXP 106
29389: PUSH
29390: LD_EXP 106
29394: PPUSH
29395: LD_VAR 0 1
29399: PPUSH
29400: LD_INT 0
29402: PPUSH
29403: CALL_OW 1
29407: ST_TO_ADDR
29408: GO 29461
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29410: LD_ADDR_EXP 106
29414: PUSH
29415: LD_EXP 106
29419: PPUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 255
29434: PUSH
29435: LD_VAR 0 1
29439: PUSH
29440: LD_VAR 0 2
29444: PUSH
29445: LD_VAR 0 3
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: PPUSH
29456: CALL_OW 1
29460: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29461: CALL 29470 0 0
// end ;
29465: LD_VAR 0 4
29469: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29470: LD_INT 0
29472: PPUSH
29473: PPUSH
29474: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29475: LD_STRING resetWarehouseGatheringPoints();
29477: PPUSH
29478: CALL_OW 559
// if warehouseGatheringPoints then
29482: LD_EXP 106
29486: IFFALSE 29612
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_EXP 106
29497: PPUSH
29498: CALL 71535 0 1
29502: ST_TO_ADDR
// for i := 1 to list do
29503: LD_ADDR_VAR 0 2
29507: PUSH
29508: DOUBLE
29509: LD_INT 1
29511: DEC
29512: ST_TO_ADDR
29513: LD_VAR 0 3
29517: PUSH
29518: FOR_TO
29519: IFFALSE 29610
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29521: LD_STRING setWarehouseGatheringPointXY(
29523: PUSH
29524: LD_VAR 0 3
29528: PUSH
29529: LD_VAR 0 2
29533: ARRAY
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: STR
29539: PUSH
29540: LD_STRING ,
29542: STR
29543: PUSH
29544: LD_VAR 0 3
29548: PUSH
29549: LD_VAR 0 2
29553: ARRAY
29554: PUSH
29555: LD_INT 2
29557: ARRAY
29558: STR
29559: PUSH
29560: LD_STRING ,
29562: STR
29563: PUSH
29564: LD_VAR 0 3
29568: PUSH
29569: LD_VAR 0 2
29573: ARRAY
29574: PUSH
29575: LD_INT 3
29577: ARRAY
29578: STR
29579: PUSH
29580: LD_STRING ,
29582: STR
29583: PUSH
29584: LD_VAR 0 3
29588: PUSH
29589: LD_VAR 0 2
29593: ARRAY
29594: PUSH
29595: LD_INT 4
29597: ARRAY
29598: STR
29599: PUSH
29600: LD_STRING )
29602: STR
29603: PPUSH
29604: CALL_OW 559
29608: GO 29518
29610: POP
29611: POP
// end ; end ;
29612: LD_VAR 0 1
29616: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29617: LD_EXP 106
29621: IFFALSE 30306
29623: GO 29625
29625: DISABLE
29626: LD_INT 0
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
// begin enable ;
29637: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29638: LD_ADDR_VAR 0 3
29642: PUSH
29643: LD_EXP 106
29647: PPUSH
29648: CALL 71535 0 1
29652: ST_TO_ADDR
// if not list then
29653: LD_VAR 0 3
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 30306
// for i := 1 to list do
29662: LD_ADDR_VAR 0 1
29666: PUSH
29667: DOUBLE
29668: LD_INT 1
29670: DEC
29671: ST_TO_ADDR
29672: LD_VAR 0 3
29676: PUSH
29677: FOR_TO
29678: IFFALSE 30304
// begin depot := list [ i ] [ 2 ] ;
29680: LD_ADDR_VAR 0 8
29684: PUSH
29685: LD_VAR 0 3
29689: PUSH
29690: LD_VAR 0 1
29694: ARRAY
29695: PUSH
29696: LD_INT 2
29698: ARRAY
29699: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: LD_VAR 0 3
29709: PUSH
29710: LD_VAR 0 1
29714: ARRAY
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29720: LD_VAR 0 8
29724: PPUSH
29725: CALL_OW 301
29729: PUSH
29730: LD_VAR 0 5
29734: PUSH
29735: LD_VAR 0 8
29739: PPUSH
29740: CALL_OW 255
29744: NONEQUAL
29745: OR
29746: IFFALSE 29775
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29748: LD_ADDR_EXP 106
29752: PUSH
29753: LD_EXP 106
29757: PPUSH
29758: LD_VAR 0 8
29762: PPUSH
29763: LD_INT 0
29765: PPUSH
29766: CALL_OW 1
29770: ST_TO_ADDR
// exit ;
29771: POP
29772: POP
29773: GO 30306
// end ; x := list [ i ] [ 3 ] ;
29775: LD_ADDR_VAR 0 6
29779: PUSH
29780: LD_VAR 0 3
29784: PUSH
29785: LD_VAR 0 1
29789: ARRAY
29790: PUSH
29791: LD_INT 3
29793: ARRAY
29794: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29795: LD_ADDR_VAR 0 7
29799: PUSH
29800: LD_VAR 0 3
29804: PUSH
29805: LD_VAR 0 1
29809: ARRAY
29810: PUSH
29811: LD_INT 4
29813: ARRAY
29814: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29815: LD_ADDR_VAR 0 9
29819: PUSH
29820: LD_VAR 0 6
29824: PPUSH
29825: LD_VAR 0 7
29829: PPUSH
29830: LD_INT 16
29832: PPUSH
29833: CALL 70123 0 3
29837: ST_TO_ADDR
// if not cratesNearbyPoint then
29838: LD_VAR 0 9
29842: NOT
29843: IFFALSE 29849
// exit ;
29845: POP
29846: POP
29847: GO 30306
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29849: LD_ADDR_VAR 0 4
29853: PUSH
29854: LD_INT 22
29856: PUSH
29857: LD_VAR 0 5
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 3
29868: PUSH
29869: LD_INT 60
29871: PUSH
29872: EMPTY
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 91
29881: PUSH
29882: LD_VAR 0 8
29886: PUSH
29887: LD_INT 6
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 25
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 25
29910: PUSH
29911: LD_INT 16
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: PUSH
29934: LD_VAR 0 8
29938: PPUSH
29939: CALL_OW 313
29943: PPUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 60
29949: PUSH
29950: EMPTY
29951: LIST
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: LD_INT 25
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 25
29972: PUSH
29973: LD_INT 16
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PPUSH
29989: CALL_OW 72
29993: UNION
29994: ST_TO_ADDR
// if tmp then
29995: LD_VAR 0 4
29999: IFFALSE 30079
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30001: LD_ADDR_VAR 0 4
30005: PUSH
30006: LD_VAR 0 4
30010: PPUSH
30011: LD_INT 3
30013: PPUSH
30014: CALL 68092 0 2
30018: ST_TO_ADDR
// for j in tmp do
30019: LD_ADDR_VAR 0 2
30023: PUSH
30024: LD_VAR 0 4
30028: PUSH
30029: FOR_IN
30030: IFFALSE 30073
// begin if IsInUnit ( j ) then
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL_OW 310
30041: IFFALSE 30052
// ComExit ( j ) ;
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL 68175 0 1
// AddComCollect ( j , x , y ) ;
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_VAR 0 6
30061: PPUSH
30062: LD_VAR 0 7
30066: PPUSH
30067: CALL_OW 177
// end ;
30071: GO 30029
30073: POP
30074: POP
// exit ;
30075: POP
30076: POP
30077: GO 30306
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30079: LD_ADDR_VAR 0 4
30083: PUSH
30084: LD_INT 22
30086: PUSH
30087: LD_VAR 0 5
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 91
30098: PUSH
30099: LD_VAR 0 8
30103: PUSH
30104: LD_INT 8
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 34
30117: PUSH
30118: LD_INT 12
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 34
30127: PUSH
30128: LD_INT 51
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 34
30137: PUSH
30138: LD_INT 32
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 34
30147: PUSH
30148: LD_INT 89
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: LIST
30166: PPUSH
30167: CALL_OW 69
30171: ST_TO_ADDR
// if tmp then
30172: LD_VAR 0 4
30176: IFFALSE 30302
// begin for j in tmp do
30178: LD_ADDR_VAR 0 2
30182: PUSH
30183: LD_VAR 0 4
30187: PUSH
30188: FOR_IN
30189: IFFALSE 30300
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30191: LD_VAR 0 2
30195: PPUSH
30196: CALL_OW 262
30200: PUSH
30201: LD_INT 3
30203: EQUAL
30204: PUSH
30205: LD_VAR 0 2
30209: PPUSH
30210: CALL_OW 261
30214: PUSH
30215: LD_INT 20
30217: GREATER
30218: OR
30219: PUSH
30220: LD_VAR 0 2
30224: PPUSH
30225: CALL_OW 314
30229: NOT
30230: AND
30231: PUSH
30232: LD_VAR 0 2
30236: PPUSH
30237: CALL_OW 263
30241: PUSH
30242: LD_INT 1
30244: NONEQUAL
30245: PUSH
30246: LD_VAR 0 2
30250: PPUSH
30251: CALL_OW 311
30255: OR
30256: AND
30257: IFFALSE 30298
// begin ComCollect ( j , x , y ) ;
30259: LD_VAR 0 2
30263: PPUSH
30264: LD_VAR 0 6
30268: PPUSH
30269: LD_VAR 0 7
30273: PPUSH
30274: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30278: LD_VAR 0 2
30282: PPUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: CALL_OW 172
// exit ;
30292: POP
30293: POP
30294: POP
30295: POP
30296: GO 30306
// end ;
30298: GO 30188
30300: POP
30301: POP
// end ; end ;
30302: GO 29677
30304: POP
30305: POP
// end ; end_of_file end_of_file
30306: PPOPN 9
30308: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30309: LD_INT 0
30311: PPUSH
30312: PPUSH
// if exist_mode then
30313: LD_VAR 0 2
30317: IFFALSE 30342
// unit := CreateCharacter ( prefix & ident ) else
30319: LD_ADDR_VAR 0 5
30323: PUSH
30324: LD_VAR 0 3
30328: PUSH
30329: LD_VAR 0 1
30333: STR
30334: PPUSH
30335: CALL_OW 34
30339: ST_TO_ADDR
30340: GO 30357
// unit := NewCharacter ( ident ) ;
30342: LD_ADDR_VAR 0 5
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 25
30356: ST_TO_ADDR
// result := unit ;
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: LD_VAR 0 5
30366: ST_TO_ADDR
// end ;
30367: LD_VAR 0 4
30371: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30372: LD_INT 0
30374: PPUSH
30375: PPUSH
// if not side or not nation then
30376: LD_VAR 0 1
30380: NOT
30381: PUSH
30382: LD_VAR 0 2
30386: NOT
30387: OR
30388: IFFALSE 30392
// exit ;
30390: GO 31160
// case nation of nation_american :
30392: LD_VAR 0 2
30396: PUSH
30397: LD_INT 1
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30619
30405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30406: LD_ADDR_VAR 0 4
30410: PUSH
30411: LD_INT 35
30413: PUSH
30414: LD_INT 45
30416: PUSH
30417: LD_INT 46
30419: PUSH
30420: LD_INT 47
30422: PUSH
30423: LD_INT 82
30425: PUSH
30426: LD_INT 83
30428: PUSH
30429: LD_INT 84
30431: PUSH
30432: LD_INT 85
30434: PUSH
30435: LD_INT 86
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 6
30446: PUSH
30447: LD_INT 15
30449: PUSH
30450: LD_INT 16
30452: PUSH
30453: LD_INT 7
30455: PUSH
30456: LD_INT 12
30458: PUSH
30459: LD_INT 13
30461: PUSH
30462: LD_INT 10
30464: PUSH
30465: LD_INT 14
30467: PUSH
30468: LD_INT 20
30470: PUSH
30471: LD_INT 21
30473: PUSH
30474: LD_INT 22
30476: PUSH
30477: LD_INT 25
30479: PUSH
30480: LD_INT 32
30482: PUSH
30483: LD_INT 27
30485: PUSH
30486: LD_INT 36
30488: PUSH
30489: LD_INT 69
30491: PUSH
30492: LD_INT 39
30494: PUSH
30495: LD_INT 34
30497: PUSH
30498: LD_INT 40
30500: PUSH
30501: LD_INT 48
30503: PUSH
30504: LD_INT 49
30506: PUSH
30507: LD_INT 50
30509: PUSH
30510: LD_INT 51
30512: PUSH
30513: LD_INT 52
30515: PUSH
30516: LD_INT 53
30518: PUSH
30519: LD_INT 54
30521: PUSH
30522: LD_INT 55
30524: PUSH
30525: LD_INT 56
30527: PUSH
30528: LD_INT 57
30530: PUSH
30531: LD_INT 58
30533: PUSH
30534: LD_INT 59
30536: PUSH
30537: LD_INT 60
30539: PUSH
30540: LD_INT 61
30542: PUSH
30543: LD_INT 62
30545: PUSH
30546: LD_INT 80
30548: PUSH
30549: LD_INT 82
30551: PUSH
30552: LD_INT 83
30554: PUSH
30555: LD_INT 84
30557: PUSH
30558: LD_INT 85
30560: PUSH
30561: LD_INT 86
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
30617: GO 31084
30619: LD_INT 2
30621: DOUBLE
30622: EQUAL
30623: IFTRUE 30627
30625: GO 30853
30627: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30628: LD_ADDR_VAR 0 4
30632: PUSH
30633: LD_INT 35
30635: PUSH
30636: LD_INT 45
30638: PUSH
30639: LD_INT 46
30641: PUSH
30642: LD_INT 47
30644: PUSH
30645: LD_INT 82
30647: PUSH
30648: LD_INT 83
30650: PUSH
30651: LD_INT 84
30653: PUSH
30654: LD_INT 85
30656: PUSH
30657: LD_INT 87
30659: PUSH
30660: LD_INT 70
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 11
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: LD_INT 6
30680: PUSH
30681: LD_INT 15
30683: PUSH
30684: LD_INT 18
30686: PUSH
30687: LD_INT 7
30689: PUSH
30690: LD_INT 17
30692: PUSH
30693: LD_INT 8
30695: PUSH
30696: LD_INT 20
30698: PUSH
30699: LD_INT 21
30701: PUSH
30702: LD_INT 22
30704: PUSH
30705: LD_INT 72
30707: PUSH
30708: LD_INT 26
30710: PUSH
30711: LD_INT 69
30713: PUSH
30714: LD_INT 39
30716: PUSH
30717: LD_INT 40
30719: PUSH
30720: LD_INT 41
30722: PUSH
30723: LD_INT 42
30725: PUSH
30726: LD_INT 43
30728: PUSH
30729: LD_INT 48
30731: PUSH
30732: LD_INT 49
30734: PUSH
30735: LD_INT 50
30737: PUSH
30738: LD_INT 51
30740: PUSH
30741: LD_INT 52
30743: PUSH
30744: LD_INT 53
30746: PUSH
30747: LD_INT 54
30749: PUSH
30750: LD_INT 55
30752: PUSH
30753: LD_INT 56
30755: PUSH
30756: LD_INT 60
30758: PUSH
30759: LD_INT 61
30761: PUSH
30762: LD_INT 62
30764: PUSH
30765: LD_INT 66
30767: PUSH
30768: LD_INT 67
30770: PUSH
30771: LD_INT 68
30773: PUSH
30774: LD_INT 81
30776: PUSH
30777: LD_INT 82
30779: PUSH
30780: LD_INT 83
30782: PUSH
30783: LD_INT 84
30785: PUSH
30786: LD_INT 85
30788: PUSH
30789: LD_INT 87
30791: PUSH
30792: LD_INT 88
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
30851: GO 31084
30853: LD_INT 3
30855: DOUBLE
30856: EQUAL
30857: IFTRUE 30861
30859: GO 31083
30861: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_INT 46
30869: PUSH
30870: LD_INT 47
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 82
30881: PUSH
30882: LD_INT 83
30884: PUSH
30885: LD_INT 84
30887: PUSH
30888: LD_INT 85
30890: PUSH
30891: LD_INT 86
30893: PUSH
30894: LD_INT 11
30896: PUSH
30897: LD_INT 9
30899: PUSH
30900: LD_INT 20
30902: PUSH
30903: LD_INT 19
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 24
30911: PUSH
30912: LD_INT 22
30914: PUSH
30915: LD_INT 25
30917: PUSH
30918: LD_INT 28
30920: PUSH
30921: LD_INT 29
30923: PUSH
30924: LD_INT 30
30926: PUSH
30927: LD_INT 31
30929: PUSH
30930: LD_INT 37
30932: PUSH
30933: LD_INT 38
30935: PUSH
30936: LD_INT 32
30938: PUSH
30939: LD_INT 27
30941: PUSH
30942: LD_INT 33
30944: PUSH
30945: LD_INT 69
30947: PUSH
30948: LD_INT 39
30950: PUSH
30951: LD_INT 34
30953: PUSH
30954: LD_INT 40
30956: PUSH
30957: LD_INT 71
30959: PUSH
30960: LD_INT 23
30962: PUSH
30963: LD_INT 44
30965: PUSH
30966: LD_INT 48
30968: PUSH
30969: LD_INT 49
30971: PUSH
30972: LD_INT 50
30974: PUSH
30975: LD_INT 51
30977: PUSH
30978: LD_INT 52
30980: PUSH
30981: LD_INT 53
30983: PUSH
30984: LD_INT 54
30986: PUSH
30987: LD_INT 55
30989: PUSH
30990: LD_INT 56
30992: PUSH
30993: LD_INT 57
30995: PUSH
30996: LD_INT 58
30998: PUSH
30999: LD_INT 59
31001: PUSH
31002: LD_INT 63
31004: PUSH
31005: LD_INT 64
31007: PUSH
31008: LD_INT 65
31010: PUSH
31011: LD_INT 82
31013: PUSH
31014: LD_INT 83
31016: PUSH
31017: LD_INT 84
31019: PUSH
31020: LD_INT 85
31022: PUSH
31023: LD_INT 86
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
31081: GO 31084
31083: POP
// if state > - 1 and state < 3 then
31084: LD_VAR 0 3
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: GREATER
31093: PUSH
31094: LD_VAR 0 3
31098: PUSH
31099: LD_INT 3
31101: LESS
31102: AND
31103: IFFALSE 31160
// for i in result do
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 4
31114: PUSH
31115: FOR_IN
31116: IFFALSE 31158
// if GetTech ( i , side ) <> state then
31118: LD_VAR 0 5
31122: PPUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 321
31132: PUSH
31133: LD_VAR 0 3
31137: NONEQUAL
31138: IFFALSE 31156
// result := result diff i ;
31140: LD_ADDR_VAR 0 4
31144: PUSH
31145: LD_VAR 0 4
31149: PUSH
31150: LD_VAR 0 5
31154: DIFF
31155: ST_TO_ADDR
31156: GO 31115
31158: POP
31159: POP
// end ;
31160: LD_VAR 0 4
31164: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
// result := true ;
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_INT 1
31177: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL_OW 480
31192: ST_TO_ADDR
// if not tmp then
31193: LD_VAR 0 5
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31251
// for i in tmp do
31202: LD_ADDR_VAR 0 4
31206: PUSH
31207: LD_VAR 0 5
31211: PUSH
31212: FOR_IN
31213: IFFALSE 31249
// if GetTech ( i , side ) <> state_researched then
31215: LD_VAR 0 4
31219: PPUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL_OW 321
31229: PUSH
31230: LD_INT 2
31232: NONEQUAL
31233: IFFALSE 31247
// begin result := false ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: LD_INT 0
31242: ST_TO_ADDR
// exit ;
31243: POP
31244: POP
31245: GO 31251
// end ;
31247: GO 31212
31249: POP
31250: POP
// end ;
31251: LD_VAR 0 3
31255: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31256: LD_INT 0
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31271: LD_VAR 0 1
31275: NOT
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: CALL_OW 257
31286: PUSH
31287: LD_INT 9
31289: NONEQUAL
31290: OR
31291: IFFALSE 31295
// exit ;
31293: GO 31868
// side := GetSide ( unit ) ;
31295: LD_ADDR_VAR 0 9
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 255
31309: ST_TO_ADDR
// tech_space := tech_spacanom ;
31310: LD_ADDR_VAR 0 12
31314: PUSH
31315: LD_INT 29
31317: ST_TO_ADDR
// tech_time := tech_taurad ;
31318: LD_ADDR_VAR 0 13
31322: PUSH
31323: LD_INT 28
31325: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31326: LD_ADDR_VAR 0 11
31330: PUSH
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 310
31340: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31341: LD_VAR 0 11
31345: PPUSH
31346: CALL_OW 247
31350: PUSH
31351: LD_INT 2
31353: EQUAL
31354: IFFALSE 31358
// exit ;
31356: GO 31868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31358: LD_ADDR_VAR 0 8
31362: PUSH
31363: LD_INT 81
31365: PUSH
31366: LD_VAR 0 9
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 21
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PPUSH
31396: CALL_OW 69
31400: ST_TO_ADDR
// if not tmp then
31401: LD_VAR 0 8
31405: NOT
31406: IFFALSE 31410
// exit ;
31408: GO 31868
// if in_unit then
31410: LD_VAR 0 11
31414: IFFALSE 31438
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31416: LD_ADDR_VAR 0 10
31420: PUSH
31421: LD_VAR 0 8
31425: PPUSH
31426: LD_VAR 0 11
31430: PPUSH
31431: CALL_OW 74
31435: ST_TO_ADDR
31436: GO 31458
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31438: LD_ADDR_VAR 0 10
31442: PUSH
31443: LD_VAR 0 8
31447: PPUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 74
31457: ST_TO_ADDR
// if not enemy then
31458: LD_VAR 0 10
31462: NOT
31463: IFFALSE 31467
// exit ;
31465: GO 31868
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31467: LD_VAR 0 11
31471: PUSH
31472: LD_VAR 0 11
31476: PPUSH
31477: LD_VAR 0 10
31481: PPUSH
31482: CALL_OW 296
31486: PUSH
31487: LD_INT 13
31489: GREATER
31490: AND
31491: PUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: LD_VAR 0 10
31501: PPUSH
31502: CALL_OW 296
31506: PUSH
31507: LD_INT 12
31509: GREATER
31510: OR
31511: IFFALSE 31515
// exit ;
31513: GO 31868
// missile := [ 1 ] ;
31515: LD_ADDR_VAR 0 14
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31526: LD_VAR 0 9
31530: PPUSH
31531: LD_VAR 0 12
31535: PPUSH
31536: CALL_OW 325
31540: IFFALSE 31569
// missile := Replace ( missile , missile + 1 , 2 ) ;
31542: LD_ADDR_VAR 0 14
31546: PUSH
31547: LD_VAR 0 14
31551: PPUSH
31552: LD_VAR 0 14
31556: PUSH
31557: LD_INT 1
31559: PLUS
31560: PPUSH
31561: LD_INT 2
31563: PPUSH
31564: CALL_OW 1
31568: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31569: LD_VAR 0 9
31573: PPUSH
31574: LD_VAR 0 13
31578: PPUSH
31579: CALL_OW 325
31583: PUSH
31584: LD_VAR 0 10
31588: PPUSH
31589: CALL_OW 255
31593: PPUSH
31594: LD_VAR 0 13
31598: PPUSH
31599: CALL_OW 325
31603: NOT
31604: AND
31605: IFFALSE 31634
// missile := Replace ( missile , missile + 1 , 3 ) ;
31607: LD_ADDR_VAR 0 14
31611: PUSH
31612: LD_VAR 0 14
31616: PPUSH
31617: LD_VAR 0 14
31621: PUSH
31622: LD_INT 1
31624: PLUS
31625: PPUSH
31626: LD_INT 3
31628: PPUSH
31629: CALL_OW 1
31633: ST_TO_ADDR
// if missile < 2 then
31634: LD_VAR 0 14
31638: PUSH
31639: LD_INT 2
31641: LESS
31642: IFFALSE 31646
// exit ;
31644: GO 31868
// x := GetX ( enemy ) ;
31646: LD_ADDR_VAR 0 4
31650: PUSH
31651: LD_VAR 0 10
31655: PPUSH
31656: CALL_OW 250
31660: ST_TO_ADDR
// y := GetY ( enemy ) ;
31661: LD_ADDR_VAR 0 5
31665: PUSH
31666: LD_VAR 0 10
31670: PPUSH
31671: CALL_OW 251
31675: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31676: LD_ADDR_VAR 0 6
31680: PUSH
31681: LD_VAR 0 4
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 12
31697: PLUS
31698: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31699: LD_ADDR_VAR 0 7
31703: PUSH
31704: LD_VAR 0 5
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PPUSH
31713: LD_INT 1
31715: PPUSH
31716: CALL_OW 12
31720: PLUS
31721: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31722: LD_VAR 0 6
31726: PPUSH
31727: LD_VAR 0 7
31731: PPUSH
31732: CALL_OW 488
31736: NOT
31737: IFFALSE 31759
// begin _x := x ;
31739: LD_ADDR_VAR 0 6
31743: PUSH
31744: LD_VAR 0 4
31748: ST_TO_ADDR
// _y := y ;
31749: LD_ADDR_VAR 0 7
31753: PUSH
31754: LD_VAR 0 5
31758: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_INT 1
31766: PPUSH
31767: LD_VAR 0 14
31771: PPUSH
31772: CALL_OW 12
31776: ST_TO_ADDR
// case i of 1 :
31777: LD_VAR 0 3
31781: PUSH
31782: LD_INT 1
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31807
31790: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31791: LD_VAR 0 1
31795: PPUSH
31796: LD_VAR 0 10
31800: PPUSH
31801: CALL_OW 115
31805: GO 31868
31807: LD_INT 2
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31837
31815: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31816: LD_VAR 0 1
31820: PPUSH
31821: LD_VAR 0 6
31825: PPUSH
31826: LD_VAR 0 7
31830: PPUSH
31831: CALL_OW 153
31835: GO 31868
31837: LD_INT 3
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31867
31845: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31846: LD_VAR 0 1
31850: PPUSH
31851: LD_VAR 0 6
31855: PPUSH
31856: LD_VAR 0 7
31860: PPUSH
31861: CALL_OW 154
31865: GO 31868
31867: POP
// end ;
31868: LD_VAR 0 2
31872: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31873: LD_INT 0
31875: PPUSH
31876: PPUSH
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
// if not unit or not building then
31881: LD_VAR 0 1
31885: NOT
31886: PUSH
31887: LD_VAR 0 2
31891: NOT
31892: OR
31893: IFFALSE 31897
// exit ;
31895: GO 32055
// x := GetX ( building ) ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_VAR 0 2
31906: PPUSH
31907: CALL_OW 250
31911: ST_TO_ADDR
// y := GetY ( building ) ;
31912: LD_ADDR_VAR 0 6
31916: PUSH
31917: LD_VAR 0 2
31921: PPUSH
31922: CALL_OW 251
31926: ST_TO_ADDR
// for i = 0 to 5 do
31927: LD_ADDR_VAR 0 4
31931: PUSH
31932: DOUBLE
31933: LD_INT 0
31935: DEC
31936: ST_TO_ADDR
31937: LD_INT 5
31939: PUSH
31940: FOR_TO
31941: IFFALSE 32053
// begin _x := ShiftX ( x , i , 3 ) ;
31943: LD_ADDR_VAR 0 7
31947: PUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: LD_VAR 0 4
31957: PPUSH
31958: LD_INT 3
31960: PPUSH
31961: CALL_OW 272
31965: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31966: LD_ADDR_VAR 0 8
31970: PUSH
31971: LD_VAR 0 6
31975: PPUSH
31976: LD_VAR 0 4
31980: PPUSH
31981: LD_INT 3
31983: PPUSH
31984: CALL_OW 273
31988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31989: LD_VAR 0 7
31993: PPUSH
31994: LD_VAR 0 8
31998: PPUSH
31999: CALL_OW 488
32003: NOT
32004: IFFALSE 32008
// continue ;
32006: GO 31940
// if HexInfo ( _x , _y ) = 0 then
32008: LD_VAR 0 7
32012: PPUSH
32013: LD_VAR 0 8
32017: PPUSH
32018: CALL_OW 428
32022: PUSH
32023: LD_INT 0
32025: EQUAL
32026: IFFALSE 32051
// begin ComMoveXY ( unit , _x , _y ) ;
32028: LD_VAR 0 1
32032: PPUSH
32033: LD_VAR 0 7
32037: PPUSH
32038: LD_VAR 0 8
32042: PPUSH
32043: CALL_OW 111
// exit ;
32047: POP
32048: POP
32049: GO 32055
// end ; end ;
32051: GO 31940
32053: POP
32054: POP
// end ;
32055: LD_VAR 0 3
32059: RET
// export function ScanBase ( side , base_area ) ; begin
32060: LD_INT 0
32062: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_INT 81
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 70
32089: ST_TO_ADDR
// end ;
32090: LD_VAR 0 3
32094: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32095: LD_INT 0
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
// result := false ;
32101: LD_ADDR_VAR 0 2
32105: PUSH
32106: LD_INT 0
32108: ST_TO_ADDR
// side := GetSide ( unit ) ;
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 255
32123: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32124: LD_ADDR_VAR 0 4
32128: PUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL_OW 248
32138: ST_TO_ADDR
// case nat of 1 :
32139: LD_VAR 0 4
32143: PUSH
32144: LD_INT 1
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32163
32152: POP
// tech := tech_lassight ; 2 :
32153: LD_ADDR_VAR 0 5
32157: PUSH
32158: LD_INT 12
32160: ST_TO_ADDR
32161: GO 32202
32163: LD_INT 2
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// tech := tech_mortar ; 3 :
32172: LD_ADDR_VAR 0 5
32176: PUSH
32177: LD_INT 41
32179: ST_TO_ADDR
32180: GO 32202
32182: LD_INT 3
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32201
32190: POP
// tech := tech_bazooka ; end ;
32191: LD_ADDR_VAR 0 5
32195: PUSH
32196: LD_INT 44
32198: ST_TO_ADDR
32199: GO 32202
32201: POP
// if Researched ( side , tech ) then
32202: LD_VAR 0 3
32206: PPUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: CALL_OW 325
32216: IFFALSE 32243
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32218: LD_ADDR_VAR 0 2
32222: PUSH
32223: LD_INT 5
32225: PUSH
32226: LD_INT 8
32228: PUSH
32229: LD_INT 9
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: PUSH
32237: LD_VAR 0 4
32241: ARRAY
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 2
32247: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
32252: PPUSH
// if not mines then
32253: LD_VAR 0 2
32257: NOT
32258: IFFALSE 32262
// exit ;
32260: GO 32406
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32262: LD_ADDR_VAR 0 5
32266: PUSH
32267: LD_INT 81
32269: PUSH
32270: LD_VAR 0 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: LD_INT 21
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PPUSH
32300: CALL_OW 69
32304: ST_TO_ADDR
// for i in mines do
32305: LD_ADDR_VAR 0 4
32309: PUSH
32310: LD_VAR 0 2
32314: PUSH
32315: FOR_IN
32316: IFFALSE 32404
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32318: LD_VAR 0 4
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 4
32331: PUSH
32332: LD_INT 2
32334: ARRAY
32335: PPUSH
32336: CALL_OW 458
32340: NOT
32341: IFFALSE 32345
// continue ;
32343: GO 32315
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32345: LD_VAR 0 4
32349: PUSH
32350: LD_INT 1
32352: ARRAY
32353: PPUSH
32354: LD_VAR 0 4
32358: PUSH
32359: LD_INT 2
32361: ARRAY
32362: PPUSH
32363: CALL_OW 428
32367: PUSH
32368: LD_VAR 0 5
32372: IN
32373: IFFALSE 32402
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32375: LD_VAR 0 4
32379: PUSH
32380: LD_INT 1
32382: ARRAY
32383: PPUSH
32384: LD_VAR 0 4
32388: PUSH
32389: LD_INT 2
32391: ARRAY
32392: PPUSH
32393: LD_VAR 0 1
32397: PPUSH
32398: CALL_OW 456
// end ;
32402: GO 32315
32404: POP
32405: POP
// end ;
32406: LD_VAR 0 3
32410: RET
// export function Count ( array ) ; var i ; begin
32411: LD_INT 0
32413: PPUSH
32414: PPUSH
// result := 0 ;
32415: LD_ADDR_VAR 0 2
32419: PUSH
32420: LD_INT 0
32422: ST_TO_ADDR
// for i in array do
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_VAR 0 1
32432: PUSH
32433: FOR_IN
32434: IFFALSE 32458
// if i then
32436: LD_VAR 0 3
32440: IFFALSE 32456
// result := result + 1 ;
32442: LD_ADDR_VAR 0 2
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 1
32454: PLUS
32455: ST_TO_ADDR
32456: GO 32433
32458: POP
32459: POP
// end ;
32460: LD_VAR 0 2
32464: RET
// export function IsEmpty ( building ) ; begin
32465: LD_INT 0
32467: PPUSH
// if not building then
32468: LD_VAR 0 1
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32520
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32477: LD_ADDR_VAR 0 2
32481: PUSH
32482: LD_VAR 0 1
32486: PUSH
32487: LD_INT 22
32489: PUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 255
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 58
32506: PUSH
32507: EMPTY
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 69
32518: IN
32519: ST_TO_ADDR
// end ;
32520: LD_VAR 0 2
32524: RET
// export function IsNotFull ( building ) ; var places ; begin
32525: LD_INT 0
32527: PPUSH
32528: PPUSH
// if not building then
32529: LD_VAR 0 1
32533: NOT
32534: IFFALSE 32538
// exit ;
32536: GO 32709
// result := false ;
32538: LD_ADDR_VAR 0 2
32542: PUSH
32543: LD_INT 0
32545: ST_TO_ADDR
// places := 0 ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_INT 0
32553: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 266
32563: PUSH
32564: LD_INT 0
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32626
32570: LD_INT 1
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32626
32576: LD_INT 6
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32626
32582: LD_INT 7
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32626
32588: LD_INT 8
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32626
32594: LD_INT 4
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32626
32600: LD_INT 5
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32626
32606: LD_INT 2
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32626
32612: LD_INT 3
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32626
32618: LD_INT 35
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32637
32626: POP
// places := 6 ; b_bunker , b_breastwork :
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 6
32634: ST_TO_ADDR
32635: GO 32682
32637: LD_INT 32
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32651
32643: LD_INT 31
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// places := 1 ; b_control_tower :
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 1
32659: ST_TO_ADDR
32660: GO 32682
32662: LD_INT 36
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// places := 3 ; end ;
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 3
32678: ST_TO_ADDR
32679: GO 32682
32681: POP
// if places then
32682: LD_VAR 0 3
32686: IFFALSE 32709
// result := UnitsInside ( building ) < places ;
32688: LD_ADDR_VAR 0 2
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: CALL_OW 313
32702: PUSH
32703: LD_VAR 0 3
32707: LESS
32708: ST_TO_ADDR
// end ;
32709: LD_VAR 0 2
32713: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32714: LD_INT 0
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
// tmp := [ ] ;
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: EMPTY
32726: ST_TO_ADDR
// list := [ ] ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: EMPTY
32733: ST_TO_ADDR
// for i = 16 to 25 do
32734: LD_ADDR_VAR 0 4
32738: PUSH
32739: DOUBLE
32740: LD_INT 16
32742: DEC
32743: ST_TO_ADDR
32744: LD_INT 25
32746: PUSH
32747: FOR_TO
32748: IFFALSE 32821
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_VAR 0 3
32759: PUSH
32760: LD_INT 22
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 255
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 91
32779: PUSH
32780: LD_VAR 0 1
32784: PUSH
32785: LD_INT 6
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: LD_VAR 0 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: PPUSH
32813: CALL_OW 69
32817: ADD
32818: ST_TO_ADDR
32819: GO 32747
32821: POP
32822: POP
// for i = 1 to tmp do
32823: LD_ADDR_VAR 0 4
32827: PUSH
32828: DOUBLE
32829: LD_INT 1
32831: DEC
32832: ST_TO_ADDR
32833: LD_VAR 0 3
32837: PUSH
32838: FOR_TO
32839: IFFALSE 32927
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32841: LD_ADDR_VAR 0 5
32845: PUSH
32846: LD_VAR 0 5
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 4
32860: ARRAY
32861: PPUSH
32862: CALL_OW 266
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_VAR 0 4
32876: ARRAY
32877: PPUSH
32878: CALL_OW 250
32882: PUSH
32883: LD_VAR 0 3
32887: PUSH
32888: LD_VAR 0 4
32892: ARRAY
32893: PPUSH
32894: CALL_OW 251
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_VAR 0 4
32908: ARRAY
32909: PPUSH
32910: CALL_OW 254
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: PUSH
32921: EMPTY
32922: LIST
32923: ADD
32924: ST_TO_ADDR
32925: GO 32838
32927: POP
32928: POP
// result := list ;
32929: LD_ADDR_VAR 0 2
32933: PUSH
32934: LD_VAR 0 5
32938: ST_TO_ADDR
// end ;
32939: LD_VAR 0 2
32943: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32944: LD_INT 0
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
// if not factory then
32953: LD_VAR 0 1
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33555
// if control = control_apeman then
32962: LD_VAR 0 4
32966: PUSH
32967: LD_INT 5
32969: EQUAL
32970: IFFALSE 33079
// begin tmp := UnitsInside ( factory ) ;
32972: LD_ADDR_VAR 0 8
32976: PUSH
32977: LD_VAR 0 1
32981: PPUSH
32982: CALL_OW 313
32986: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_INT 25
32994: PUSH
32995: LD_INT 12
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PPUSH
33002: CALL_OW 72
33006: NOT
33007: IFFALSE 33017
// control := control_manual ;
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: LD_INT 1
33016: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33017: LD_ADDR_VAR 0 8
33021: PUSH
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL 32714 0 1
33031: ST_TO_ADDR
// if tmp then
33032: LD_VAR 0 8
33036: IFFALSE 33079
// begin for i in tmp do
33038: LD_ADDR_VAR 0 7
33042: PUSH
33043: LD_VAR 0 8
33047: PUSH
33048: FOR_IN
33049: IFFALSE 33077
// if i [ 1 ] = b_ext_radio then
33051: LD_VAR 0 7
33055: PUSH
33056: LD_INT 1
33058: ARRAY
33059: PUSH
33060: LD_INT 22
33062: EQUAL
33063: IFFALSE 33075
// begin control := control_remote ;
33065: LD_ADDR_VAR 0 4
33069: PUSH
33070: LD_INT 2
33072: ST_TO_ADDR
// break ;
33073: GO 33077
// end ;
33075: GO 33048
33077: POP
33078: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33079: LD_VAR 0 1
33083: PPUSH
33084: LD_VAR 0 2
33088: PPUSH
33089: LD_VAR 0 3
33093: PPUSH
33094: LD_VAR 0 4
33098: PPUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: CALL_OW 448
33108: IFFALSE 33143
// begin result := [ chassis , engine , control , weapon ] ;
33110: LD_ADDR_VAR 0 6
33114: PUSH
33115: LD_VAR 0 2
33119: PUSH
33120: LD_VAR 0 3
33124: PUSH
33125: LD_VAR 0 4
33129: PUSH
33130: LD_VAR 0 5
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
// exit ;
33141: GO 33555
// end ; _chassis := AvailableChassisList ( factory ) ;
33143: LD_ADDR_VAR 0 9
33147: PUSH
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL_OW 475
33157: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33158: LD_ADDR_VAR 0 11
33162: PUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 476
33172: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33173: LD_ADDR_VAR 0 12
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 477
33187: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33188: LD_ADDR_VAR 0 10
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 478
33202: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33203: LD_VAR 0 9
33207: NOT
33208: PUSH
33209: LD_VAR 0 11
33213: NOT
33214: OR
33215: PUSH
33216: LD_VAR 0 12
33220: NOT
33221: OR
33222: PUSH
33223: LD_VAR 0 10
33227: NOT
33228: OR
33229: IFFALSE 33264
// begin result := [ chassis , engine , control , weapon ] ;
33231: LD_ADDR_VAR 0 6
33235: PUSH
33236: LD_VAR 0 2
33240: PUSH
33241: LD_VAR 0 3
33245: PUSH
33246: LD_VAR 0 4
33250: PUSH
33251: LD_VAR 0 5
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// exit ;
33262: GO 33555
// end ; if not chassis in _chassis then
33264: LD_VAR 0 2
33268: PUSH
33269: LD_VAR 0 9
33273: IN
33274: NOT
33275: IFFALSE 33301
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 9
33286: PUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 9
33294: PPUSH
33295: CALL_OW 12
33299: ARRAY
33300: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33301: LD_VAR 0 2
33305: PPUSH
33306: LD_VAR 0 3
33310: PPUSH
33311: CALL 33560 0 2
33315: NOT
33316: IFFALSE 33375
// repeat engine := _engine [ 1 ] ;
33318: LD_ADDR_VAR 0 3
33322: PUSH
33323: LD_VAR 0 11
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33332: LD_ADDR_VAR 0 11
33336: PUSH
33337: LD_VAR 0 11
33341: PPUSH
33342: LD_INT 1
33344: PPUSH
33345: CALL_OW 3
33349: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 3
33359: PPUSH
33360: CALL 33560 0 2
33364: PUSH
33365: LD_VAR 0 11
33369: PUSH
33370: EMPTY
33371: EQUAL
33372: OR
33373: IFFALSE 33318
// if not control in _control then
33375: LD_VAR 0 4
33379: PUSH
33380: LD_VAR 0 12
33384: IN
33385: NOT
33386: IFFALSE 33412
// control := _control [ rand ( 1 , _control ) ] ;
33388: LD_ADDR_VAR 0 4
33392: PUSH
33393: LD_VAR 0 12
33397: PUSH
33398: LD_INT 1
33400: PPUSH
33401: LD_VAR 0 12
33405: PPUSH
33406: CALL_OW 12
33410: ARRAY
33411: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33412: LD_VAR 0 2
33416: PPUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: CALL 33780 0 2
33426: NOT
33427: IFFALSE 33486
// repeat weapon := _weapon [ 1 ] ;
33429: LD_ADDR_VAR 0 5
33433: PUSH
33434: LD_VAR 0 10
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33443: LD_ADDR_VAR 0 10
33447: PUSH
33448: LD_VAR 0 10
33452: PPUSH
33453: LD_INT 1
33455: PPUSH
33456: CALL_OW 3
33460: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33461: LD_VAR 0 2
33465: PPUSH
33466: LD_VAR 0 5
33470: PPUSH
33471: CALL 33780 0 2
33475: PUSH
33476: LD_VAR 0 10
33480: PUSH
33481: EMPTY
33482: EQUAL
33483: OR
33484: IFFALSE 33429
// result := [ ] ;
33486: LD_ADDR_VAR 0 6
33490: PUSH
33491: EMPTY
33492: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 3
33507: PPUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: LD_VAR 0 5
33517: PPUSH
33518: CALL_OW 448
33522: IFFALSE 33555
// result := [ chassis , engine , control , weapon ] ;
33524: LD_ADDR_VAR 0 6
33528: PUSH
33529: LD_VAR 0 2
33533: PUSH
33534: LD_VAR 0 3
33538: PUSH
33539: LD_VAR 0 4
33543: PUSH
33544: LD_VAR 0 5
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 6
33559: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33560: LD_INT 0
33562: PPUSH
// if not chassis or not engine then
33563: LD_VAR 0 1
33567: NOT
33568: PUSH
33569: LD_VAR 0 2
33573: NOT
33574: OR
33575: IFFALSE 33579
// exit ;
33577: GO 33775
// case engine of engine_solar :
33579: LD_VAR 0 2
33583: PUSH
33584: LD_INT 2
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33630
33592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 11
33600: PUSH
33601: LD_INT 12
33603: PUSH
33604: LD_INT 13
33606: PUSH
33607: LD_INT 14
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: ST_TO_ADDR
33628: GO 33759
33630: LD_INT 1
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33638
33636: GO 33700
33638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33639: LD_ADDR_VAR 0 3
33643: PUSH
33644: LD_INT 11
33646: PUSH
33647: LD_INT 12
33649: PUSH
33650: LD_INT 13
33652: PUSH
33653: LD_INT 14
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: LD_INT 21
33673: PUSH
33674: LD_INT 23
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: LD_INT 24
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
33698: GO 33759
33700: LD_INT 3
33702: DOUBLE
33703: EQUAL
33704: IFTRUE 33708
33706: GO 33758
33708: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: LD_INT 13
33716: PUSH
33717: LD_INT 14
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: LD_INT 4
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: LD_INT 21
33734: PUSH
33735: LD_INT 22
33737: PUSH
33738: LD_INT 23
33740: PUSH
33741: LD_INT 24
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
33756: GO 33759
33758: POP
// result := ( chassis in result ) ;
33759: LD_ADDR_VAR 0 3
33763: PUSH
33764: LD_VAR 0 1
33768: PUSH
33769: LD_VAR 0 3
33773: IN
33774: ST_TO_ADDR
// end ;
33775: LD_VAR 0 3
33779: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33780: LD_INT 0
33782: PPUSH
// if not chassis or not weapon then
33783: LD_VAR 0 1
33787: NOT
33788: PUSH
33789: LD_VAR 0 2
33793: NOT
33794: OR
33795: IFFALSE 33799
// exit ;
33797: GO 34859
// case weapon of us_machine_gun :
33799: LD_VAR 0 2
33803: PUSH
33804: LD_INT 2
33806: DOUBLE
33807: EQUAL
33808: IFTRUE 33812
33810: GO 33842
33812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33813: LD_ADDR_VAR 0 3
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
33840: GO 34843
33842: LD_INT 3
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33880
33850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
33878: GO 34843
33880: LD_INT 11
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33918
33888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33889: LD_ADDR_VAR 0 3
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 4
33905: PUSH
33906: LD_INT 5
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
33916: GO 34843
33918: LD_INT 4
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 33952
33926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33927: LD_ADDR_VAR 0 3
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
33950: GO 34843
33952: LD_INT 5
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 33960
33958: GO 33986
33960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33961: LD_ADDR_VAR 0 3
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: LD_INT 5
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
33984: GO 34843
33986: LD_INT 9
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34020
33994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: LD_INT 4
34008: PUSH
34009: LD_INT 5
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: ST_TO_ADDR
34018: GO 34843
34020: LD_INT 7
34022: DOUBLE
34023: EQUAL
34024: IFTRUE 34028
34026: GO 34054
34028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34029: LD_ADDR_VAR 0 3
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: ST_TO_ADDR
34052: GO 34843
34054: LD_INT 12
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34062
34060: GO 34088
34062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34063: LD_ADDR_VAR 0 3
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: ST_TO_ADDR
34086: GO 34843
34088: LD_INT 13
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34096
34094: GO 34122
34096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34097: LD_ADDR_VAR 0 3
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 5
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
34120: GO 34843
34122: LD_INT 14
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34130
34128: GO 34148
34130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34131: LD_ADDR_VAR 0 3
34135: PUSH
34136: LD_INT 4
34138: PUSH
34139: LD_INT 5
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: ST_TO_ADDR
34146: GO 34843
34148: LD_INT 6
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34174
34156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34157: LD_ADDR_VAR 0 3
34161: PUSH
34162: LD_INT 4
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: ST_TO_ADDR
34172: GO 34843
34174: LD_INT 10
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34200
34182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_INT 4
34190: PUSH
34191: LD_INT 5
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: ST_TO_ADDR
34198: GO 34843
34200: LD_INT 22
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34234
34208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 11
34216: PUSH
34217: LD_INT 12
34219: PUSH
34220: LD_INT 13
34222: PUSH
34223: LD_INT 14
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
34232: GO 34843
34234: LD_INT 23
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34268
34242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 11
34250: PUSH
34251: LD_INT 12
34253: PUSH
34254: LD_INT 13
34256: PUSH
34257: LD_INT 14
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
34266: GO 34843
34268: LD_INT 24
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34276
34274: GO 34302
34276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_INT 11
34284: PUSH
34285: LD_INT 12
34287: PUSH
34288: LD_INT 13
34290: PUSH
34291: LD_INT 14
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: ST_TO_ADDR
34300: GO 34843
34302: LD_INT 30
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34310
34308: GO 34336
34310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_INT 11
34318: PUSH
34319: LD_INT 12
34321: PUSH
34322: LD_INT 13
34324: PUSH
34325: LD_INT 14
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: ST_TO_ADDR
34334: GO 34843
34336: LD_INT 25
34338: DOUBLE
34339: EQUAL
34340: IFTRUE 34344
34342: GO 34362
34344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: LD_INT 13
34352: PUSH
34353: LD_INT 14
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: ST_TO_ADDR
34360: GO 34843
34362: LD_INT 27
34364: DOUBLE
34365: EQUAL
34366: IFTRUE 34370
34368: GO 34388
34370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_INT 13
34378: PUSH
34379: LD_INT 14
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: ST_TO_ADDR
34386: GO 34843
34388: LD_INT 92
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34396
34394: GO 34422
34396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_INT 11
34404: PUSH
34405: LD_INT 12
34407: PUSH
34408: LD_INT 13
34410: PUSH
34411: LD_INT 14
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
34420: GO 34843
34422: LD_INT 28
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34448
34430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_INT 13
34438: PUSH
34439: LD_INT 14
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: ST_TO_ADDR
34446: GO 34843
34448: LD_INT 29
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34474
34456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_INT 13
34464: PUSH
34465: LD_INT 14
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: ST_TO_ADDR
34472: GO 34843
34474: LD_INT 31
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34500
34482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_INT 13
34490: PUSH
34491: LD_INT 14
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: ST_TO_ADDR
34498: GO 34843
34500: LD_INT 26
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34508
34506: GO 34526
34508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34509: LD_ADDR_VAR 0 3
34513: PUSH
34514: LD_INT 13
34516: PUSH
34517: LD_INT 14
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: ST_TO_ADDR
34524: GO 34843
34526: LD_INT 42
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34560
34534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 21
34542: PUSH
34543: LD_INT 22
34545: PUSH
34546: LD_INT 23
34548: PUSH
34549: LD_INT 24
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 34843
34560: LD_INT 43
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34594
34568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 21
34576: PUSH
34577: LD_INT 22
34579: PUSH
34580: LD_INT 23
34582: PUSH
34583: LD_INT 24
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
34592: GO 34843
34594: LD_INT 44
34596: DOUBLE
34597: EQUAL
34598: IFTRUE 34602
34600: GO 34628
34602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_INT 21
34610: PUSH
34611: LD_INT 22
34613: PUSH
34614: LD_INT 23
34616: PUSH
34617: LD_INT 24
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: ST_TO_ADDR
34626: GO 34843
34628: LD_INT 45
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34662
34636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 21
34644: PUSH
34645: LD_INT 22
34647: PUSH
34648: LD_INT 23
34650: PUSH
34651: LD_INT 24
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
34660: GO 34843
34662: LD_INT 49
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34696
34670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_INT 21
34678: PUSH
34679: LD_INT 22
34681: PUSH
34682: LD_INT 23
34684: PUSH
34685: LD_INT 24
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: ST_TO_ADDR
34694: GO 34843
34696: LD_INT 51
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34730
34704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 21
34712: PUSH
34713: LD_INT 22
34715: PUSH
34716: LD_INT 23
34718: PUSH
34719: LD_INT 24
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
34728: GO 34843
34730: LD_INT 52
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34764
34738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34739: LD_ADDR_VAR 0 3
34743: PUSH
34744: LD_INT 21
34746: PUSH
34747: LD_INT 22
34749: PUSH
34750: LD_INT 23
34752: PUSH
34753: LD_INT 24
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
34762: GO 34843
34764: LD_INT 53
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34790
34772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_INT 23
34780: PUSH
34781: LD_INT 24
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: ST_TO_ADDR
34788: GO 34843
34790: LD_INT 46
34792: DOUBLE
34793: EQUAL
34794: IFTRUE 34798
34796: GO 34816
34798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_INT 23
34806: PUSH
34807: LD_INT 24
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 34843
34816: LD_INT 47
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34842
34824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 23
34832: PUSH
34833: LD_INT 24
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: ST_TO_ADDR
34840: GO 34843
34842: POP
// result := ( chassis in result ) ;
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: LD_VAR 0 1
34852: PUSH
34853: LD_VAR 0 3
34857: IN
34858: ST_TO_ADDR
// end ;
34859: LD_VAR 0 3
34863: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34864: LD_INT 0
34866: PPUSH
34867: PPUSH
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
// result := array ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_VAR 0 1
34882: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34883: LD_VAR 0 1
34887: NOT
34888: PUSH
34889: LD_VAR 0 2
34893: NOT
34894: OR
34895: PUSH
34896: LD_VAR 0 3
34900: NOT
34901: OR
34902: PUSH
34903: LD_VAR 0 2
34907: PUSH
34908: LD_VAR 0 1
34912: GREATER
34913: OR
34914: PUSH
34915: LD_VAR 0 3
34919: PUSH
34920: LD_VAR 0 1
34924: GREATER
34925: OR
34926: IFFALSE 34930
// exit ;
34928: GO 35226
// if direction then
34930: LD_VAR 0 4
34934: IFFALSE 34998
// begin d := 1 ;
34936: LD_ADDR_VAR 0 9
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if i_from > i_to then
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 3
34953: GREATER
34954: IFFALSE 34980
// length := ( array - i_from ) + i_to else
34956: LD_ADDR_VAR 0 11
34960: PUSH
34961: LD_VAR 0 1
34965: PUSH
34966: LD_VAR 0 2
34970: MINUS
34971: PUSH
34972: LD_VAR 0 3
34976: PLUS
34977: ST_TO_ADDR
34978: GO 34996
// length := i_to - i_from ;
34980: LD_ADDR_VAR 0 11
34984: PUSH
34985: LD_VAR 0 3
34989: PUSH
34990: LD_VAR 0 2
34994: MINUS
34995: ST_TO_ADDR
// end else
34996: GO 35059
// begin d := - 1 ;
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: ST_TO_ADDR
// if i_from > i_to then
35007: LD_VAR 0 2
35011: PUSH
35012: LD_VAR 0 3
35016: GREATER
35017: IFFALSE 35037
// length := i_from - i_to else
35019: LD_ADDR_VAR 0 11
35023: PUSH
35024: LD_VAR 0 2
35028: PUSH
35029: LD_VAR 0 3
35033: MINUS
35034: ST_TO_ADDR
35035: GO 35059
// length := ( array - i_to ) + i_from ;
35037: LD_ADDR_VAR 0 11
35041: PUSH
35042: LD_VAR 0 1
35046: PUSH
35047: LD_VAR 0 3
35051: MINUS
35052: PUSH
35053: LD_VAR 0 2
35057: PLUS
35058: ST_TO_ADDR
// end ; if not length then
35059: LD_VAR 0 11
35063: NOT
35064: IFFALSE 35068
// exit ;
35066: GO 35226
// tmp := array ;
35068: LD_ADDR_VAR 0 10
35072: PUSH
35073: LD_VAR 0 1
35077: ST_TO_ADDR
// for i = 1 to length do
35078: LD_ADDR_VAR 0 6
35082: PUSH
35083: DOUBLE
35084: LD_INT 1
35086: DEC
35087: ST_TO_ADDR
35088: LD_VAR 0 11
35092: PUSH
35093: FOR_TO
35094: IFFALSE 35214
// begin for j = 1 to array do
35096: LD_ADDR_VAR 0 7
35100: PUSH
35101: DOUBLE
35102: LD_INT 1
35104: DEC
35105: ST_TO_ADDR
35106: LD_VAR 0 1
35110: PUSH
35111: FOR_TO
35112: IFFALSE 35200
// begin k := j + d ;
35114: LD_ADDR_VAR 0 8
35118: PUSH
35119: LD_VAR 0 7
35123: PUSH
35124: LD_VAR 0 9
35128: PLUS
35129: ST_TO_ADDR
// if k > array then
35130: LD_VAR 0 8
35134: PUSH
35135: LD_VAR 0 1
35139: GREATER
35140: IFFALSE 35150
// k := 1 ;
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: LD_INT 1
35149: ST_TO_ADDR
// if not k then
35150: LD_VAR 0 8
35154: NOT
35155: IFFALSE 35167
// k := array ;
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: LD_VAR 0 1
35166: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35167: LD_ADDR_VAR 0 10
35171: PUSH
35172: LD_VAR 0 10
35176: PPUSH
35177: LD_VAR 0 8
35181: PPUSH
35182: LD_VAR 0 1
35186: PUSH
35187: LD_VAR 0 7
35191: ARRAY
35192: PPUSH
35193: CALL_OW 1
35197: ST_TO_ADDR
// end ;
35198: GO 35111
35200: POP
35201: POP
// array := tmp ;
35202: LD_ADDR_VAR 0 1
35206: PUSH
35207: LD_VAR 0 10
35211: ST_TO_ADDR
// end ;
35212: GO 35093
35214: POP
35215: POP
// result := array ;
35216: LD_ADDR_VAR 0 5
35220: PUSH
35221: LD_VAR 0 1
35225: ST_TO_ADDR
// end ;
35226: LD_VAR 0 5
35230: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35231: LD_INT 0
35233: PPUSH
35234: PPUSH
// result := 0 ;
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_INT 0
35242: ST_TO_ADDR
// if not array or not value in array then
35243: LD_VAR 0 1
35247: NOT
35248: PUSH
35249: LD_VAR 0 2
35253: PUSH
35254: LD_VAR 0 1
35258: IN
35259: NOT
35260: OR
35261: IFFALSE 35265
// exit ;
35263: GO 35319
// for i = 1 to array do
35265: LD_ADDR_VAR 0 4
35269: PUSH
35270: DOUBLE
35271: LD_INT 1
35273: DEC
35274: ST_TO_ADDR
35275: LD_VAR 0 1
35279: PUSH
35280: FOR_TO
35281: IFFALSE 35317
// if value = array [ i ] then
35283: LD_VAR 0 2
35287: PUSH
35288: LD_VAR 0 1
35292: PUSH
35293: LD_VAR 0 4
35297: ARRAY
35298: EQUAL
35299: IFFALSE 35315
// begin result := i ;
35301: LD_ADDR_VAR 0 3
35305: PUSH
35306: LD_VAR 0 4
35310: ST_TO_ADDR
// exit ;
35311: POP
35312: POP
35313: GO 35319
// end ;
35315: GO 35280
35317: POP
35318: POP
// end ;
35319: LD_VAR 0 3
35323: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35324: LD_INT 0
35326: PPUSH
// vc_chassis := chassis ;
35327: LD_ADDR_OWVAR 37
35331: PUSH
35332: LD_VAR 0 1
35336: ST_TO_ADDR
// vc_engine := engine ;
35337: LD_ADDR_OWVAR 39
35341: PUSH
35342: LD_VAR 0 2
35346: ST_TO_ADDR
// vc_control := control ;
35347: LD_ADDR_OWVAR 38
35351: PUSH
35352: LD_VAR 0 3
35356: ST_TO_ADDR
// vc_weapon := weapon ;
35357: LD_ADDR_OWVAR 40
35361: PUSH
35362: LD_VAR 0 4
35366: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35367: LD_ADDR_OWVAR 41
35371: PUSH
35372: LD_VAR 0 5
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 6
35381: RET
// export function WantPlant ( unit ) ; var task ; begin
35382: LD_INT 0
35384: PPUSH
35385: PPUSH
// result := false ;
35386: LD_ADDR_VAR 0 2
35390: PUSH
35391: LD_INT 0
35393: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35394: LD_ADDR_VAR 0 3
35398: PUSH
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 437
35408: ST_TO_ADDR
// if task then
35409: LD_VAR 0 3
35413: IFFALSE 35441
// if task [ 1 ] [ 1 ] = p then
35415: LD_VAR 0 3
35419: PUSH
35420: LD_INT 1
35422: ARRAY
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: PUSH
35428: LD_STRING p
35430: EQUAL
35431: IFFALSE 35441
// result := true ;
35433: LD_ADDR_VAR 0 2
35437: PUSH
35438: LD_INT 1
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 2
35445: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
// if pos < 1 then
35452: LD_VAR 0 2
35456: PUSH
35457: LD_INT 1
35459: LESS
35460: IFFALSE 35464
// exit ;
35462: GO 35767
// if pos = 1 then
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 1
35471: EQUAL
35472: IFFALSE 35505
// result := Replace ( arr , pos [ 1 ] , value ) else
35474: LD_ADDR_VAR 0 4
35478: PUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: LD_VAR 0 2
35488: PUSH
35489: LD_INT 1
35491: ARRAY
35492: PPUSH
35493: LD_VAR 0 3
35497: PPUSH
35498: CALL_OW 1
35502: ST_TO_ADDR
35503: GO 35767
// begin tmp := arr ;
35505: LD_ADDR_VAR 0 6
35509: PUSH
35510: LD_VAR 0 1
35514: ST_TO_ADDR
// s_arr := [ tmp ] ;
35515: LD_ADDR_VAR 0 7
35519: PUSH
35520: LD_VAR 0 6
35524: PUSH
35525: EMPTY
35526: LIST
35527: ST_TO_ADDR
// for i = 1 to pos - 1 do
35528: LD_ADDR_VAR 0 5
35532: PUSH
35533: DOUBLE
35534: LD_INT 1
35536: DEC
35537: ST_TO_ADDR
35538: LD_VAR 0 2
35542: PUSH
35543: LD_INT 1
35545: MINUS
35546: PUSH
35547: FOR_TO
35548: IFFALSE 35593
// begin tmp := tmp [ pos [ i ] ] ;
35550: LD_ADDR_VAR 0 6
35554: PUSH
35555: LD_VAR 0 6
35559: PUSH
35560: LD_VAR 0 2
35564: PUSH
35565: LD_VAR 0 5
35569: ARRAY
35570: ARRAY
35571: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35572: LD_ADDR_VAR 0 7
35576: PUSH
35577: LD_VAR 0 7
35581: PUSH
35582: LD_VAR 0 6
35586: PUSH
35587: EMPTY
35588: LIST
35589: ADD
35590: ST_TO_ADDR
// end ;
35591: GO 35547
35593: POP
35594: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35595: LD_ADDR_VAR 0 6
35599: PUSH
35600: LD_VAR 0 6
35604: PPUSH
35605: LD_VAR 0 2
35609: PUSH
35610: LD_VAR 0 2
35614: ARRAY
35615: PPUSH
35616: LD_VAR 0 3
35620: PPUSH
35621: CALL_OW 1
35625: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35626: LD_ADDR_VAR 0 7
35630: PUSH
35631: LD_VAR 0 7
35635: PPUSH
35636: LD_VAR 0 7
35640: PPUSH
35641: LD_VAR 0 6
35645: PPUSH
35646: CALL_OW 1
35650: ST_TO_ADDR
// for i = s_arr downto 2 do
35651: LD_ADDR_VAR 0 5
35655: PUSH
35656: DOUBLE
35657: LD_VAR 0 7
35661: INC
35662: ST_TO_ADDR
35663: LD_INT 2
35665: PUSH
35666: FOR_DOWNTO
35667: IFFALSE 35751
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35669: LD_ADDR_VAR 0 6
35673: PUSH
35674: LD_VAR 0 7
35678: PUSH
35679: LD_VAR 0 5
35683: PUSH
35684: LD_INT 1
35686: MINUS
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 2
35693: PUSH
35694: LD_VAR 0 5
35698: PUSH
35699: LD_INT 1
35701: MINUS
35702: ARRAY
35703: PPUSH
35704: LD_VAR 0 7
35708: PUSH
35709: LD_VAR 0 5
35713: ARRAY
35714: PPUSH
35715: CALL_OW 1
35719: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35720: LD_ADDR_VAR 0 7
35724: PUSH
35725: LD_VAR 0 7
35729: PPUSH
35730: LD_VAR 0 5
35734: PUSH
35735: LD_INT 1
35737: MINUS
35738: PPUSH
35739: LD_VAR 0 6
35743: PPUSH
35744: CALL_OW 1
35748: ST_TO_ADDR
// end ;
35749: GO 35666
35751: POP
35752: POP
// result := s_arr [ 1 ] ;
35753: LD_ADDR_VAR 0 4
35757: PUSH
35758: LD_VAR 0 7
35762: PUSH
35763: LD_INT 1
35765: ARRAY
35766: ST_TO_ADDR
// end ; end ;
35767: LD_VAR 0 4
35771: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35772: LD_INT 0
35774: PPUSH
35775: PPUSH
// if not list then
35776: LD_VAR 0 1
35780: NOT
35781: IFFALSE 35785
// exit ;
35783: GO 35876
// i := list [ pos1 ] ;
35785: LD_ADDR_VAR 0 5
35789: PUSH
35790: LD_VAR 0 1
35794: PUSH
35795: LD_VAR 0 2
35799: ARRAY
35800: ST_TO_ADDR
// if not i then
35801: LD_VAR 0 5
35805: NOT
35806: IFFALSE 35810
// exit ;
35808: GO 35876
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35810: LD_ADDR_VAR 0 1
35814: PUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: LD_VAR 0 2
35824: PPUSH
35825: LD_VAR 0 1
35829: PUSH
35830: LD_VAR 0 3
35834: ARRAY
35835: PPUSH
35836: CALL_OW 1
35840: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35841: LD_ADDR_VAR 0 1
35845: PUSH
35846: LD_VAR 0 1
35850: PPUSH
35851: LD_VAR 0 3
35855: PPUSH
35856: LD_VAR 0 5
35860: PPUSH
35861: CALL_OW 1
35865: ST_TO_ADDR
// result := list ;
35866: LD_ADDR_VAR 0 4
35870: PUSH
35871: LD_VAR 0 1
35875: ST_TO_ADDR
// end ;
35876: LD_VAR 0 4
35880: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35881: LD_INT 0
35883: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35884: LD_ADDR_VAR 0 5
35888: PUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 250
35898: PPUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 251
35908: PPUSH
35909: LD_VAR 0 2
35913: PPUSH
35914: LD_VAR 0 3
35918: PPUSH
35919: LD_VAR 0 4
35923: PPUSH
35924: CALL 35934 0 5
35928: ST_TO_ADDR
// end ;
35929: LD_VAR 0 5
35933: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35934: LD_INT 0
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
// if not list then
35940: LD_VAR 0 3
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36337
// result := [ ] ;
35949: LD_ADDR_VAR 0 6
35953: PUSH
35954: EMPTY
35955: ST_TO_ADDR
// for i in list do
35956: LD_ADDR_VAR 0 7
35960: PUSH
35961: LD_VAR 0 3
35965: PUSH
35966: FOR_IN
35967: IFFALSE 36169
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35969: LD_ADDR_VAR 0 9
35973: PUSH
35974: LD_VAR 0 7
35978: PPUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_VAR 0 2
35988: PPUSH
35989: CALL_OW 297
35993: ST_TO_ADDR
// if not result then
35994: LD_VAR 0 6
35998: NOT
35999: IFFALSE 36025
// result := [ [ i , tmp ] ] else
36001: LD_ADDR_VAR 0 6
36005: PUSH
36006: LD_VAR 0 7
36010: PUSH
36011: LD_VAR 0 9
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: ST_TO_ADDR
36023: GO 36167
// begin if result [ result ] [ 2 ] < tmp then
36025: LD_VAR 0 6
36029: PUSH
36030: LD_VAR 0 6
36034: ARRAY
36035: PUSH
36036: LD_INT 2
36038: ARRAY
36039: PUSH
36040: LD_VAR 0 9
36044: LESS
36045: IFFALSE 36087
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36047: LD_ADDR_VAR 0 6
36051: PUSH
36052: LD_VAR 0 6
36056: PPUSH
36057: LD_VAR 0 6
36061: PUSH
36062: LD_INT 1
36064: PLUS
36065: PPUSH
36066: LD_VAR 0 7
36070: PUSH
36071: LD_VAR 0 9
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PPUSH
36080: CALL_OW 2
36084: ST_TO_ADDR
36085: GO 36167
// for j = 1 to result do
36087: LD_ADDR_VAR 0 8
36091: PUSH
36092: DOUBLE
36093: LD_INT 1
36095: DEC
36096: ST_TO_ADDR
36097: LD_VAR 0 6
36101: PUSH
36102: FOR_TO
36103: IFFALSE 36165
// begin if tmp < result [ j ] [ 2 ] then
36105: LD_VAR 0 9
36109: PUSH
36110: LD_VAR 0 6
36114: PUSH
36115: LD_VAR 0 8
36119: ARRAY
36120: PUSH
36121: LD_INT 2
36123: ARRAY
36124: LESS
36125: IFFALSE 36163
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36127: LD_ADDR_VAR 0 6
36131: PUSH
36132: LD_VAR 0 6
36136: PPUSH
36137: LD_VAR 0 8
36141: PPUSH
36142: LD_VAR 0 7
36146: PUSH
36147: LD_VAR 0 9
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PPUSH
36156: CALL_OW 2
36160: ST_TO_ADDR
// break ;
36161: GO 36165
// end ; end ;
36163: GO 36102
36165: POP
36166: POP
// end ; end ;
36167: GO 35966
36169: POP
36170: POP
// if result and not asc then
36171: LD_VAR 0 6
36175: PUSH
36176: LD_VAR 0 4
36180: NOT
36181: AND
36182: IFFALSE 36257
// begin tmp := result ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_VAR 0 6
36193: ST_TO_ADDR
// for i = tmp downto 1 do
36194: LD_ADDR_VAR 0 7
36198: PUSH
36199: DOUBLE
36200: LD_VAR 0 9
36204: INC
36205: ST_TO_ADDR
36206: LD_INT 1
36208: PUSH
36209: FOR_DOWNTO
36210: IFFALSE 36255
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36212: LD_ADDR_VAR 0 6
36216: PUSH
36217: LD_VAR 0 6
36221: PPUSH
36222: LD_VAR 0 9
36226: PUSH
36227: LD_VAR 0 7
36231: MINUS
36232: PUSH
36233: LD_INT 1
36235: PLUS
36236: PPUSH
36237: LD_VAR 0 9
36241: PUSH
36242: LD_VAR 0 7
36246: ARRAY
36247: PPUSH
36248: CALL_OW 1
36252: ST_TO_ADDR
36253: GO 36209
36255: POP
36256: POP
// end ; tmp := [ ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: EMPTY
36263: ST_TO_ADDR
// if mode then
36264: LD_VAR 0 5
36268: IFFALSE 36337
// begin for i = 1 to result do
36270: LD_ADDR_VAR 0 7
36274: PUSH
36275: DOUBLE
36276: LD_INT 1
36278: DEC
36279: ST_TO_ADDR
36280: LD_VAR 0 6
36284: PUSH
36285: FOR_TO
36286: IFFALSE 36325
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36288: LD_ADDR_VAR 0 9
36292: PUSH
36293: LD_VAR 0 9
36297: PPUSH
36298: LD_VAR 0 7
36302: PPUSH
36303: LD_VAR 0 6
36307: PUSH
36308: LD_VAR 0 7
36312: ARRAY
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: PPUSH
36318: CALL_OW 1
36322: ST_TO_ADDR
36323: GO 36285
36325: POP
36326: POP
// result := tmp ;
36327: LD_ADDR_VAR 0 6
36331: PUSH
36332: LD_VAR 0 9
36336: ST_TO_ADDR
// end ; end ;
36337: LD_VAR 0 6
36341: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36342: LD_INT 0
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36350: LD_ADDR_VAR 0 5
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// if not x or not y then
36372: LD_VAR 0 2
36376: NOT
36377: PUSH
36378: LD_VAR 0 3
36382: NOT
36383: OR
36384: IFFALSE 36388
// exit ;
36386: GO 38038
// if not range then
36388: LD_VAR 0 4
36392: NOT
36393: IFFALSE 36403
// range := 10 ;
36395: LD_ADDR_VAR 0 4
36399: PUSH
36400: LD_INT 10
36402: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36403: LD_ADDR_VAR 0 8
36407: PUSH
36408: LD_INT 81
36410: PUSH
36411: LD_VAR 0 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 92
36422: PUSH
36423: LD_VAR 0 2
36427: PUSH
36428: LD_VAR 0 3
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 21
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PPUSH
36466: CALL_OW 69
36470: ST_TO_ADDR
// if not tmp then
36471: LD_VAR 0 8
36475: NOT
36476: IFFALSE 36480
// exit ;
36478: GO 38038
// for i in tmp do
36480: LD_ADDR_VAR 0 6
36484: PUSH
36485: LD_VAR 0 8
36489: PUSH
36490: FOR_IN
36491: IFFALSE 38013
// begin points := [ 0 , 0 , 0 ] ;
36493: LD_ADDR_VAR 0 9
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: ST_TO_ADDR
// bpoints := 1 ;
36512: LD_ADDR_VAR 0 10
36516: PUSH
36517: LD_INT 1
36519: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36520: LD_VAR 0 6
36524: PPUSH
36525: CALL_OW 247
36529: PUSH
36530: LD_INT 1
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36538
36536: GO 37116
36538: POP
// begin if GetClass ( i ) = 1 then
36539: LD_VAR 0 6
36543: PPUSH
36544: CALL_OW 257
36548: PUSH
36549: LD_INT 1
36551: EQUAL
36552: IFFALSE 36573
// points := [ 10 , 5 , 3 ] ;
36554: LD_ADDR_VAR 0 9
36558: PUSH
36559: LD_INT 10
36561: PUSH
36562: LD_INT 5
36564: PUSH
36565: LD_INT 3
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36573: LD_VAR 0 6
36577: PPUSH
36578: CALL_OW 257
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 4
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: IN
36597: IFFALSE 36618
// points := [ 3 , 2 , 1 ] ;
36599: LD_ADDR_VAR 0 9
36603: PUSH
36604: LD_INT 3
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36618: LD_VAR 0 6
36622: PPUSH
36623: CALL_OW 257
36627: PUSH
36628: LD_INT 5
36630: EQUAL
36631: IFFALSE 36652
// points := [ 130 , 5 , 2 ] ;
36633: LD_ADDR_VAR 0 9
36637: PUSH
36638: LD_INT 130
36640: PUSH
36641: LD_INT 5
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36652: LD_VAR 0 6
36656: PPUSH
36657: CALL_OW 257
36661: PUSH
36662: LD_INT 8
36664: EQUAL
36665: IFFALSE 36686
// points := [ 35 , 35 , 30 ] ;
36667: LD_ADDR_VAR 0 9
36671: PUSH
36672: LD_INT 35
36674: PUSH
36675: LD_INT 35
36677: PUSH
36678: LD_INT 30
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36686: LD_VAR 0 6
36690: PPUSH
36691: CALL_OW 257
36695: PUSH
36696: LD_INT 9
36698: EQUAL
36699: IFFALSE 36720
// points := [ 20 , 55 , 40 ] ;
36701: LD_ADDR_VAR 0 9
36705: PUSH
36706: LD_INT 20
36708: PUSH
36709: LD_INT 55
36711: PUSH
36712: LD_INT 40
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36720: LD_VAR 0 6
36724: PPUSH
36725: CALL_OW 257
36729: PUSH
36730: LD_INT 12
36732: PUSH
36733: LD_INT 16
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: IN
36740: IFFALSE 36761
// points := [ 5 , 3 , 2 ] ;
36742: LD_ADDR_VAR 0 9
36746: PUSH
36747: LD_INT 5
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 257
36770: PUSH
36771: LD_INT 17
36773: EQUAL
36774: IFFALSE 36795
// points := [ 100 , 50 , 75 ] ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_INT 100
36783: PUSH
36784: LD_INT 50
36786: PUSH
36787: LD_INT 75
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 257
36804: PUSH
36805: LD_INT 15
36807: EQUAL
36808: IFFALSE 36829
// points := [ 10 , 5 , 3 ] ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_INT 10
36817: PUSH
36818: LD_INT 5
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 257
36838: PUSH
36839: LD_INT 14
36841: EQUAL
36842: IFFALSE 36863
// points := [ 10 , 0 , 0 ] ;
36844: LD_ADDR_VAR 0 9
36848: PUSH
36849: LD_INT 10
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36863: LD_VAR 0 6
36867: PPUSH
36868: CALL_OW 257
36872: PUSH
36873: LD_INT 11
36875: EQUAL
36876: IFFALSE 36897
// points := [ 30 , 10 , 5 ] ;
36878: LD_ADDR_VAR 0 9
36882: PUSH
36883: LD_INT 30
36885: PUSH
36886: LD_INT 10
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36897: LD_VAR 0 1
36901: PPUSH
36902: LD_INT 5
36904: PPUSH
36905: CALL_OW 321
36909: PUSH
36910: LD_INT 2
36912: EQUAL
36913: IFFALSE 36930
// bpoints := bpoints * 1.8 ;
36915: LD_ADDR_VAR 0 10
36919: PUSH
36920: LD_VAR 0 10
36924: PUSH
36925: LD_REAL  1.80000000000000E+0000
36928: MUL
36929: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36930: LD_VAR 0 6
36934: PPUSH
36935: CALL_OW 257
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: LD_INT 4
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: IN
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: LD_INT 51
36966: PPUSH
36967: CALL_OW 321
36971: PUSH
36972: LD_INT 2
36974: EQUAL
36975: AND
36976: IFFALSE 36993
// bpoints := bpoints * 1.2 ;
36978: LD_ADDR_VAR 0 10
36982: PUSH
36983: LD_VAR 0 10
36987: PUSH
36988: LD_REAL  1.20000000000000E+0000
36991: MUL
36992: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 257
37002: PUSH
37003: LD_INT 5
37005: PUSH
37006: LD_INT 7
37008: PUSH
37009: LD_INT 9
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: IN
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_INT 52
37025: PPUSH
37026: CALL_OW 321
37030: PUSH
37031: LD_INT 2
37033: EQUAL
37034: AND
37035: IFFALSE 37052
// bpoints := bpoints * 1.5 ;
37037: LD_ADDR_VAR 0 10
37041: PUSH
37042: LD_VAR 0 10
37046: PUSH
37047: LD_REAL  1.50000000000000E+0000
37050: MUL
37051: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37052: LD_VAR 0 1
37056: PPUSH
37057: LD_INT 66
37059: PPUSH
37060: CALL_OW 321
37064: PUSH
37065: LD_INT 2
37067: EQUAL
37068: IFFALSE 37085
// bpoints := bpoints * 1.1 ;
37070: LD_ADDR_VAR 0 10
37074: PUSH
37075: LD_VAR 0 10
37079: PUSH
37080: LD_REAL  1.10000000000000E+0000
37083: MUL
37084: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37085: LD_ADDR_VAR 0 10
37089: PUSH
37090: LD_VAR 0 10
37094: PUSH
37095: LD_VAR 0 6
37099: PPUSH
37100: LD_INT 1
37102: PPUSH
37103: CALL_OW 259
37107: PUSH
37108: LD_REAL  1.15000000000000E+0000
37111: MUL
37112: MUL
37113: ST_TO_ADDR
// end ; unit_vehicle :
37114: GO 37942
37116: LD_INT 2
37118: DOUBLE
37119: EQUAL
37120: IFTRUE 37124
37122: GO 37930
37124: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37125: LD_VAR 0 6
37129: PPUSH
37130: CALL_OW 264
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: LD_INT 42
37140: PUSH
37141: LD_INT 24
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: IN
37149: IFFALSE 37170
// points := [ 25 , 5 , 3 ] ;
37151: LD_ADDR_VAR 0 9
37155: PUSH
37156: LD_INT 25
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: LD_INT 3
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37170: LD_VAR 0 6
37174: PPUSH
37175: CALL_OW 264
37179: PUSH
37180: LD_INT 4
37182: PUSH
37183: LD_INT 43
37185: PUSH
37186: LD_INT 25
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: IN
37194: IFFALSE 37215
// points := [ 40 , 15 , 5 ] ;
37196: LD_ADDR_VAR 0 9
37200: PUSH
37201: LD_INT 40
37203: PUSH
37204: LD_INT 15
37206: PUSH
37207: LD_INT 5
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37215: LD_VAR 0 6
37219: PPUSH
37220: CALL_OW 264
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: LD_INT 23
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: IN
37235: IFFALSE 37256
// points := [ 7 , 25 , 8 ] ;
37237: LD_ADDR_VAR 0 9
37241: PUSH
37242: LD_INT 7
37244: PUSH
37245: LD_INT 25
37247: PUSH
37248: LD_INT 8
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37256: LD_VAR 0 6
37260: PPUSH
37261: CALL_OW 264
37265: PUSH
37266: LD_INT 5
37268: PUSH
37269: LD_INT 27
37271: PUSH
37272: LD_INT 44
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: IN
37280: IFFALSE 37301
// points := [ 14 , 50 , 16 ] ;
37282: LD_ADDR_VAR 0 9
37286: PUSH
37287: LD_INT 14
37289: PUSH
37290: LD_INT 50
37292: PUSH
37293: LD_INT 16
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37301: LD_VAR 0 6
37305: PPUSH
37306: CALL_OW 264
37310: PUSH
37311: LD_INT 6
37313: PUSH
37314: LD_INT 46
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: IN
37321: IFFALSE 37342
// points := [ 32 , 120 , 70 ] ;
37323: LD_ADDR_VAR 0 9
37327: PUSH
37328: LD_INT 32
37330: PUSH
37331: LD_INT 120
37333: PUSH
37334: LD_INT 70
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37342: LD_VAR 0 6
37346: PPUSH
37347: CALL_OW 264
37351: PUSH
37352: LD_INT 7
37354: PUSH
37355: LD_INT 28
37357: PUSH
37358: LD_INT 45
37360: PUSH
37361: LD_INT 92
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: IN
37370: IFFALSE 37391
// points := [ 35 , 20 , 45 ] ;
37372: LD_ADDR_VAR 0 9
37376: PUSH
37377: LD_INT 35
37379: PUSH
37380: LD_INT 20
37382: PUSH
37383: LD_INT 45
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 264
37400: PUSH
37401: LD_INT 47
37403: PUSH
37404: EMPTY
37405: LIST
37406: IN
37407: IFFALSE 37428
// points := [ 67 , 45 , 75 ] ;
37409: LD_ADDR_VAR 0 9
37413: PUSH
37414: LD_INT 67
37416: PUSH
37417: LD_INT 45
37419: PUSH
37420: LD_INT 75
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37428: LD_VAR 0 6
37432: PPUSH
37433: CALL_OW 264
37437: PUSH
37438: LD_INT 26
37440: PUSH
37441: EMPTY
37442: LIST
37443: IN
37444: IFFALSE 37465
// points := [ 120 , 30 , 80 ] ;
37446: LD_ADDR_VAR 0 9
37450: PUSH
37451: LD_INT 120
37453: PUSH
37454: LD_INT 30
37456: PUSH
37457: LD_INT 80
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37465: LD_VAR 0 6
37469: PPUSH
37470: CALL_OW 264
37474: PUSH
37475: LD_INT 22
37477: PUSH
37478: EMPTY
37479: LIST
37480: IN
37481: IFFALSE 37502
// points := [ 40 , 1 , 1 ] ;
37483: LD_ADDR_VAR 0 9
37487: PUSH
37488: LD_INT 40
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37502: LD_VAR 0 6
37506: PPUSH
37507: CALL_OW 264
37511: PUSH
37512: LD_INT 29
37514: PUSH
37515: EMPTY
37516: LIST
37517: IN
37518: IFFALSE 37539
// points := [ 70 , 200 , 400 ] ;
37520: LD_ADDR_VAR 0 9
37524: PUSH
37525: LD_INT 70
37527: PUSH
37528: LD_INT 200
37530: PUSH
37531: LD_INT 400
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37539: LD_VAR 0 6
37543: PPUSH
37544: CALL_OW 264
37548: PUSH
37549: LD_INT 14
37551: PUSH
37552: LD_INT 53
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: IN
37559: IFFALSE 37580
// points := [ 40 , 10 , 20 ] ;
37561: LD_ADDR_VAR 0 9
37565: PUSH
37566: LD_INT 40
37568: PUSH
37569: LD_INT 10
37571: PUSH
37572: LD_INT 20
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37580: LD_VAR 0 6
37584: PPUSH
37585: CALL_OW 264
37589: PUSH
37590: LD_INT 9
37592: PUSH
37593: EMPTY
37594: LIST
37595: IN
37596: IFFALSE 37617
// points := [ 5 , 70 , 20 ] ;
37598: LD_ADDR_VAR 0 9
37602: PUSH
37603: LD_INT 5
37605: PUSH
37606: LD_INT 70
37608: PUSH
37609: LD_INT 20
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37617: LD_VAR 0 6
37621: PPUSH
37622: CALL_OW 264
37626: PUSH
37627: LD_INT 10
37629: PUSH
37630: EMPTY
37631: LIST
37632: IN
37633: IFFALSE 37654
// points := [ 35 , 110 , 70 ] ;
37635: LD_ADDR_VAR 0 9
37639: PUSH
37640: LD_INT 35
37642: PUSH
37643: LD_INT 110
37645: PUSH
37646: LD_INT 70
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37654: LD_VAR 0 6
37658: PPUSH
37659: CALL_OW 265
37663: PUSH
37664: LD_INT 25
37666: EQUAL
37667: IFFALSE 37688
// points := [ 80 , 65 , 100 ] ;
37669: LD_ADDR_VAR 0 9
37673: PUSH
37674: LD_INT 80
37676: PUSH
37677: LD_INT 65
37679: PUSH
37680: LD_INT 100
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37688: LD_VAR 0 6
37692: PPUSH
37693: CALL_OW 263
37697: PUSH
37698: LD_INT 1
37700: EQUAL
37701: IFFALSE 37736
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37703: LD_ADDR_VAR 0 10
37707: PUSH
37708: LD_VAR 0 10
37712: PUSH
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 311
37722: PPUSH
37723: LD_INT 3
37725: PPUSH
37726: CALL_OW 259
37730: PUSH
37731: LD_INT 4
37733: MUL
37734: MUL
37735: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37736: LD_VAR 0 6
37740: PPUSH
37741: CALL_OW 263
37745: PUSH
37746: LD_INT 2
37748: EQUAL
37749: IFFALSE 37800
// begin j := IsControledBy ( i ) ;
37751: LD_ADDR_VAR 0 7
37755: PUSH
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 312
37765: ST_TO_ADDR
// if j then
37766: LD_VAR 0 7
37770: IFFALSE 37800
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37772: LD_ADDR_VAR 0 10
37776: PUSH
37777: LD_VAR 0 10
37781: PUSH
37782: LD_VAR 0 7
37786: PPUSH
37787: LD_INT 3
37789: PPUSH
37790: CALL_OW 259
37794: PUSH
37795: LD_INT 3
37797: MUL
37798: MUL
37799: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37800: LD_VAR 0 6
37804: PPUSH
37805: CALL_OW 264
37809: PUSH
37810: LD_INT 5
37812: PUSH
37813: LD_INT 6
37815: PUSH
37816: LD_INT 46
37818: PUSH
37819: LD_INT 44
37821: PUSH
37822: LD_INT 47
37824: PUSH
37825: LD_INT 45
37827: PUSH
37828: LD_INT 28
37830: PUSH
37831: LD_INT 7
37833: PUSH
37834: LD_INT 27
37836: PUSH
37837: LD_INT 29
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: IN
37852: PUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: LD_INT 52
37860: PPUSH
37861: CALL_OW 321
37865: PUSH
37866: LD_INT 2
37868: EQUAL
37869: AND
37870: IFFALSE 37887
// bpoints := bpoints * 1.2 ;
37872: LD_ADDR_VAR 0 10
37876: PUSH
37877: LD_VAR 0 10
37881: PUSH
37882: LD_REAL  1.20000000000000E+0000
37885: MUL
37886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37887: LD_VAR 0 6
37891: PPUSH
37892: CALL_OW 264
37896: PUSH
37897: LD_INT 6
37899: PUSH
37900: LD_INT 46
37902: PUSH
37903: LD_INT 47
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: IN
37911: IFFALSE 37928
// bpoints := bpoints * 1.2 ;
37913: LD_ADDR_VAR 0 10
37917: PUSH
37918: LD_VAR 0 10
37922: PUSH
37923: LD_REAL  1.20000000000000E+0000
37926: MUL
37927: ST_TO_ADDR
// end ; unit_building :
37928: GO 37942
37930: LD_INT 3
37932: DOUBLE
37933: EQUAL
37934: IFTRUE 37938
37936: GO 37941
37938: POP
// ; end ;
37939: GO 37942
37941: POP
// for j = 1 to 3 do
37942: LD_ADDR_VAR 0 7
37946: PUSH
37947: DOUBLE
37948: LD_INT 1
37950: DEC
37951: ST_TO_ADDR
37952: LD_INT 3
37954: PUSH
37955: FOR_TO
37956: IFFALSE 38009
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37958: LD_ADDR_VAR 0 5
37962: PUSH
37963: LD_VAR 0 5
37967: PPUSH
37968: LD_VAR 0 7
37972: PPUSH
37973: LD_VAR 0 5
37977: PUSH
37978: LD_VAR 0 7
37982: ARRAY
37983: PUSH
37984: LD_VAR 0 9
37988: PUSH
37989: LD_VAR 0 7
37993: ARRAY
37994: PUSH
37995: LD_VAR 0 10
37999: MUL
38000: PLUS
38001: PPUSH
38002: CALL_OW 1
38006: ST_TO_ADDR
38007: GO 37955
38009: POP
38010: POP
// end ;
38011: GO 36490
38013: POP
38014: POP
// result := Replace ( result , 4 , tmp ) ;
38015: LD_ADDR_VAR 0 5
38019: PUSH
38020: LD_VAR 0 5
38024: PPUSH
38025: LD_INT 4
38027: PPUSH
38028: LD_VAR 0 8
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
// end ;
38038: LD_VAR 0 5
38042: RET
// export function DangerAtRange ( unit , range ) ; begin
38043: LD_INT 0
38045: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: CALL_OW 255
38060: PPUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: CALL_OW 250
38070: PPUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: CALL_OW 251
38080: PPUSH
38081: LD_VAR 0 2
38085: PPUSH
38086: CALL 36342 0 4
38090: ST_TO_ADDR
// end ;
38091: LD_VAR 0 3
38095: RET
// export function DangerInArea ( side , area ) ; begin
38096: LD_INT 0
38098: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_VAR 0 2
38108: PPUSH
38109: LD_INT 81
38111: PUSH
38112: LD_VAR 0 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PPUSH
38121: CALL_OW 70
38125: ST_TO_ADDR
// end ;
38126: LD_VAR 0 3
38130: RET
// export function IsExtension ( b ) ; begin
38131: LD_INT 0
38133: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38134: LD_ADDR_VAR 0 2
38138: PUSH
38139: LD_VAR 0 1
38143: PUSH
38144: LD_INT 23
38146: PUSH
38147: LD_INT 20
38149: PUSH
38150: LD_INT 22
38152: PUSH
38153: LD_INT 17
38155: PUSH
38156: LD_INT 24
38158: PUSH
38159: LD_INT 21
38161: PUSH
38162: LD_INT 19
38164: PUSH
38165: LD_INT 16
38167: PUSH
38168: LD_INT 25
38170: PUSH
38171: LD_INT 18
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: IN
38186: ST_TO_ADDR
// end ;
38187: LD_VAR 0 2
38191: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
38196: PPUSH
// result := [ ] ;
38197: LD_ADDR_VAR 0 4
38201: PUSH
38202: EMPTY
38203: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: LD_VAR 0 2
38213: PPUSH
38214: LD_INT 21
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PPUSH
38224: CALL_OW 70
38228: ST_TO_ADDR
// if not tmp then
38229: LD_VAR 0 5
38233: NOT
38234: IFFALSE 38238
// exit ;
38236: GO 38302
// if checkLink then
38238: LD_VAR 0 3
38242: IFFALSE 38292
// begin for i in tmp do
38244: LD_ADDR_VAR 0 6
38248: PUSH
38249: LD_VAR 0 5
38253: PUSH
38254: FOR_IN
38255: IFFALSE 38290
// if GetBase ( i ) <> base then
38257: LD_VAR 0 6
38261: PPUSH
38262: CALL_OW 274
38266: PUSH
38267: LD_VAR 0 1
38271: NONEQUAL
38272: IFFALSE 38288
// ComLinkToBase ( base , i ) ;
38274: LD_VAR 0 1
38278: PPUSH
38279: LD_VAR 0 6
38283: PPUSH
38284: CALL_OW 169
38288: GO 38254
38290: POP
38291: POP
// end ; result := tmp ;
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_VAR 0 5
38301: ST_TO_ADDR
// end ;
38302: LD_VAR 0 4
38306: RET
// export function ComComplete ( units , b ) ; var i ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
// if not units then
38311: LD_VAR 0 1
38315: NOT
38316: IFFALSE 38320
// exit ;
38318: GO 38410
// for i in units do
38320: LD_ADDR_VAR 0 4
38324: PUSH
38325: LD_VAR 0 1
38329: PUSH
38330: FOR_IN
38331: IFFALSE 38408
// if BuildingStatus ( b ) = bs_build then
38333: LD_VAR 0 2
38337: PPUSH
38338: CALL_OW 461
38342: PUSH
38343: LD_INT 1
38345: EQUAL
38346: IFFALSE 38406
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38348: LD_VAR 0 4
38352: PPUSH
38353: LD_STRING h
38355: PUSH
38356: LD_VAR 0 2
38360: PPUSH
38361: CALL_OW 250
38365: PUSH
38366: LD_VAR 0 2
38370: PPUSH
38371: CALL_OW 251
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: PPUSH
38402: CALL_OW 446
38406: GO 38330
38408: POP
38409: POP
// end ;
38410: LD_VAR 0 3
38414: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38415: LD_INT 0
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38423: LD_VAR 0 1
38427: NOT
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 263
38438: PUSH
38439: LD_INT 2
38441: NONEQUAL
38442: OR
38443: IFFALSE 38447
// exit ;
38445: GO 38763
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38447: LD_ADDR_VAR 0 6
38451: PUSH
38452: LD_INT 22
38454: PUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 255
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 30
38474: PUSH
38475: LD_INT 36
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 34
38484: PUSH
38485: LD_INT 31
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PPUSH
38501: CALL_OW 69
38505: ST_TO_ADDR
// if not tmp then
38506: LD_VAR 0 6
38510: NOT
38511: IFFALSE 38515
// exit ;
38513: GO 38763
// result := [ ] ;
38515: LD_ADDR_VAR 0 2
38519: PUSH
38520: EMPTY
38521: ST_TO_ADDR
// for i in tmp do
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_VAR 0 6
38531: PUSH
38532: FOR_IN
38533: IFFALSE 38604
// begin t := UnitsInside ( i ) ;
38535: LD_ADDR_VAR 0 4
38539: PUSH
38540: LD_VAR 0 3
38544: PPUSH
38545: CALL_OW 313
38549: ST_TO_ADDR
// if t then
38550: LD_VAR 0 4
38554: IFFALSE 38602
// for j in t do
38556: LD_ADDR_VAR 0 7
38560: PUSH
38561: LD_VAR 0 4
38565: PUSH
38566: FOR_IN
38567: IFFALSE 38600
// result := Replace ( result , result + 1 , j ) ;
38569: LD_ADDR_VAR 0 2
38573: PUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 2
38583: PUSH
38584: LD_INT 1
38586: PLUS
38587: PPUSH
38588: LD_VAR 0 7
38592: PPUSH
38593: CALL_OW 1
38597: ST_TO_ADDR
38598: GO 38566
38600: POP
38601: POP
// end ;
38602: GO 38532
38604: POP
38605: POP
// if not result then
38606: LD_VAR 0 2
38610: NOT
38611: IFFALSE 38615
// exit ;
38613: GO 38763
// mech := result [ 1 ] ;
38615: LD_ADDR_VAR 0 5
38619: PUSH
38620: LD_VAR 0 2
38624: PUSH
38625: LD_INT 1
38627: ARRAY
38628: ST_TO_ADDR
// if result > 1 then
38629: LD_VAR 0 2
38633: PUSH
38634: LD_INT 1
38636: GREATER
38637: IFFALSE 38749
// begin for i = 2 to result do
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: DOUBLE
38645: LD_INT 2
38647: DEC
38648: ST_TO_ADDR
38649: LD_VAR 0 2
38653: PUSH
38654: FOR_TO
38655: IFFALSE 38747
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38657: LD_ADDR_VAR 0 4
38661: PUSH
38662: LD_VAR 0 2
38666: PUSH
38667: LD_VAR 0 3
38671: ARRAY
38672: PPUSH
38673: LD_INT 3
38675: PPUSH
38676: CALL_OW 259
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_VAR 0 3
38690: ARRAY
38691: PPUSH
38692: CALL_OW 432
38696: MINUS
38697: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38698: LD_VAR 0 4
38702: PUSH
38703: LD_VAR 0 5
38707: PPUSH
38708: LD_INT 3
38710: PPUSH
38711: CALL_OW 259
38715: PUSH
38716: LD_VAR 0 5
38720: PPUSH
38721: CALL_OW 432
38725: MINUS
38726: GREATEREQUAL
38727: IFFALSE 38745
// mech := result [ i ] ;
38729: LD_ADDR_VAR 0 5
38733: PUSH
38734: LD_VAR 0 2
38738: PUSH
38739: LD_VAR 0 3
38743: ARRAY
38744: ST_TO_ADDR
// end ;
38745: GO 38654
38747: POP
38748: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38749: LD_VAR 0 1
38753: PPUSH
38754: LD_VAR 0 5
38758: PPUSH
38759: CALL_OW 135
// end ;
38763: LD_VAR 0 2
38767: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38768: LD_INT 0
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
// result := [ ] ;
38783: LD_ADDR_VAR 0 7
38787: PUSH
38788: EMPTY
38789: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 266
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: IN
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 40449
// if name then
38815: LD_VAR 0 3
38819: IFFALSE 38835
// SetBName ( base_dep , name ) ;
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_VAR 0 3
38830: PPUSH
38831: CALL_OW 500
// base := GetBase ( base_dep ) ;
38835: LD_ADDR_VAR 0 15
38839: PUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 274
38849: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38850: LD_ADDR_VAR 0 16
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 255
38864: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38865: LD_ADDR_VAR 0 17
38869: PUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL_OW 248
38879: ST_TO_ADDR
// if sources then
38880: LD_VAR 0 5
38884: IFFALSE 38931
// for i = 1 to 3 do
38886: LD_ADDR_VAR 0 8
38890: PUSH
38891: DOUBLE
38892: LD_INT 1
38894: DEC
38895: ST_TO_ADDR
38896: LD_INT 3
38898: PUSH
38899: FOR_TO
38900: IFFALSE 38929
// AddResourceType ( base , i , sources [ i ] ) ;
38902: LD_VAR 0 15
38906: PPUSH
38907: LD_VAR 0 8
38911: PPUSH
38912: LD_VAR 0 5
38916: PUSH
38917: LD_VAR 0 8
38921: ARRAY
38922: PPUSH
38923: CALL_OW 276
38927: GO 38899
38929: POP
38930: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38931: LD_ADDR_VAR 0 18
38935: PUSH
38936: LD_VAR 0 15
38940: PPUSH
38941: LD_VAR 0 2
38945: PPUSH
38946: LD_INT 1
38948: PPUSH
38949: CALL 38192 0 3
38953: ST_TO_ADDR
// InitHc ;
38954: CALL_OW 19
// InitUc ;
38958: CALL_OW 18
// uc_side := side ;
38962: LD_ADDR_OWVAR 20
38966: PUSH
38967: LD_VAR 0 16
38971: ST_TO_ADDR
// uc_nation := nation ;
38972: LD_ADDR_OWVAR 21
38976: PUSH
38977: LD_VAR 0 17
38981: ST_TO_ADDR
// if buildings then
38982: LD_VAR 0 18
38986: IFFALSE 40308
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38988: LD_ADDR_VAR 0 19
38992: PUSH
38993: LD_VAR 0 18
38997: PPUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 30
39003: PUSH
39004: LD_INT 29
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 30
39013: PUSH
39014: LD_INT 30
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PPUSH
39026: CALL_OW 72
39030: ST_TO_ADDR
// if tmp then
39031: LD_VAR 0 19
39035: IFFALSE 39083
// for i in tmp do
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: LD_VAR 0 19
39046: PUSH
39047: FOR_IN
39048: IFFALSE 39081
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39050: LD_VAR 0 8
39054: PPUSH
39055: CALL_OW 250
39059: PPUSH
39060: LD_VAR 0 8
39064: PPUSH
39065: CALL_OW 251
39069: PPUSH
39070: LD_VAR 0 16
39074: PPUSH
39075: CALL_OW 441
39079: GO 39047
39081: POP
39082: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39083: LD_VAR 0 18
39087: PPUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 30
39093: PUSH
39094: LD_INT 32
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 30
39103: PUSH
39104: LD_INT 33
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PPUSH
39116: CALL_OW 72
39120: IFFALSE 39208
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39122: LD_ADDR_VAR 0 8
39126: PUSH
39127: LD_VAR 0 18
39131: PPUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 30
39137: PUSH
39138: LD_INT 32
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 30
39147: PUSH
39148: LD_INT 33
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: PPUSH
39160: CALL_OW 72
39164: PUSH
39165: FOR_IN
39166: IFFALSE 39206
// begin if not GetBWeapon ( i ) then
39168: LD_VAR 0 8
39172: PPUSH
39173: CALL_OW 269
39177: NOT
39178: IFFALSE 39204
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39180: LD_VAR 0 8
39184: PPUSH
39185: LD_VAR 0 8
39189: PPUSH
39190: LD_VAR 0 2
39194: PPUSH
39195: CALL 40454 0 2
39199: PPUSH
39200: CALL_OW 431
// end ;
39204: GO 39165
39206: POP
39207: POP
// end ; for i = 1 to personel do
39208: LD_ADDR_VAR 0 8
39212: PUSH
39213: DOUBLE
39214: LD_INT 1
39216: DEC
39217: ST_TO_ADDR
39218: LD_VAR 0 6
39222: PUSH
39223: FOR_TO
39224: IFFALSE 40288
// begin if i > 4 then
39226: LD_VAR 0 8
39230: PUSH
39231: LD_INT 4
39233: GREATER
39234: IFFALSE 39238
// break ;
39236: GO 40288
// case i of 1 :
39238: LD_VAR 0 8
39242: PUSH
39243: LD_INT 1
39245: DOUBLE
39246: EQUAL
39247: IFTRUE 39251
39249: GO 39331
39251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39252: LD_ADDR_VAR 0 12
39256: PUSH
39257: LD_VAR 0 18
39261: PPUSH
39262: LD_INT 22
39264: PUSH
39265: LD_VAR 0 16
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 58
39276: PUSH
39277: EMPTY
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 30
39285: PUSH
39286: LD_INT 32
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 30
39295: PUSH
39296: LD_INT 4
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 30
39305: PUSH
39306: LD_INT 5
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: PPUSH
39324: CALL_OW 72
39328: ST_TO_ADDR
39329: GO 39553
39331: LD_INT 2
39333: DOUBLE
39334: EQUAL
39335: IFTRUE 39339
39337: GO 39401
39339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39340: LD_ADDR_VAR 0 12
39344: PUSH
39345: LD_VAR 0 18
39349: PPUSH
39350: LD_INT 22
39352: PUSH
39353: LD_VAR 0 16
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 30
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 30
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PPUSH
39394: CALL_OW 72
39398: ST_TO_ADDR
39399: GO 39553
39401: LD_INT 3
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39409
39407: GO 39471
39409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39410: LD_ADDR_VAR 0 12
39414: PUSH
39415: LD_VAR 0 18
39419: PPUSH
39420: LD_INT 22
39422: PUSH
39423: LD_VAR 0 16
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 30
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 30
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PPUSH
39464: CALL_OW 72
39468: ST_TO_ADDR
39469: GO 39553
39471: LD_INT 4
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39552
39479: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39480: LD_ADDR_VAR 0 12
39484: PUSH
39485: LD_VAR 0 18
39489: PPUSH
39490: LD_INT 22
39492: PUSH
39493: LD_VAR 0 16
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 30
39507: PUSH
39508: LD_INT 6
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 30
39517: PUSH
39518: LD_INT 7
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 30
39527: PUSH
39528: LD_INT 8
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PPUSH
39545: CALL_OW 72
39549: ST_TO_ADDR
39550: GO 39553
39552: POP
// if i = 1 then
39553: LD_VAR 0 8
39557: PUSH
39558: LD_INT 1
39560: EQUAL
39561: IFFALSE 39672
// begin tmp := [ ] ;
39563: LD_ADDR_VAR 0 19
39567: PUSH
39568: EMPTY
39569: ST_TO_ADDR
// for j in f do
39570: LD_ADDR_VAR 0 9
39574: PUSH
39575: LD_VAR 0 12
39579: PUSH
39580: FOR_IN
39581: IFFALSE 39654
// if GetBType ( j ) = b_bunker then
39583: LD_VAR 0 9
39587: PPUSH
39588: CALL_OW 266
39592: PUSH
39593: LD_INT 32
39595: EQUAL
39596: IFFALSE 39623
// tmp := Insert ( tmp , 1 , j ) else
39598: LD_ADDR_VAR 0 19
39602: PUSH
39603: LD_VAR 0 19
39607: PPUSH
39608: LD_INT 1
39610: PPUSH
39611: LD_VAR 0 9
39615: PPUSH
39616: CALL_OW 2
39620: ST_TO_ADDR
39621: GO 39652
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39623: LD_ADDR_VAR 0 19
39627: PUSH
39628: LD_VAR 0 19
39632: PPUSH
39633: LD_VAR 0 19
39637: PUSH
39638: LD_INT 1
39640: PLUS
39641: PPUSH
39642: LD_VAR 0 9
39646: PPUSH
39647: CALL_OW 2
39651: ST_TO_ADDR
39652: GO 39580
39654: POP
39655: POP
// if tmp then
39656: LD_VAR 0 19
39660: IFFALSE 39672
// f := tmp ;
39662: LD_ADDR_VAR 0 12
39666: PUSH
39667: LD_VAR 0 19
39671: ST_TO_ADDR
// end ; x := personel [ i ] ;
39672: LD_ADDR_VAR 0 13
39676: PUSH
39677: LD_VAR 0 6
39681: PUSH
39682: LD_VAR 0 8
39686: ARRAY
39687: ST_TO_ADDR
// if x = - 1 then
39688: LD_VAR 0 13
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: EQUAL
39697: IFFALSE 39906
// begin for j in f do
39699: LD_ADDR_VAR 0 9
39703: PUSH
39704: LD_VAR 0 12
39708: PUSH
39709: FOR_IN
39710: IFFALSE 39902
// repeat InitHc ;
39712: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39716: LD_VAR 0 9
39720: PPUSH
39721: CALL_OW 266
39725: PUSH
39726: LD_INT 5
39728: EQUAL
39729: IFFALSE 39799
// begin if UnitsInside ( j ) < 3 then
39731: LD_VAR 0 9
39735: PPUSH
39736: CALL_OW 313
39740: PUSH
39741: LD_INT 3
39743: LESS
39744: IFFALSE 39780
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39746: LD_INT 0
39748: PPUSH
39749: LD_INT 5
39751: PUSH
39752: LD_INT 8
39754: PUSH
39755: LD_INT 9
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: PUSH
39763: LD_VAR 0 17
39767: ARRAY
39768: PPUSH
39769: LD_VAR 0 4
39773: PPUSH
39774: CALL_OW 380
39778: GO 39797
// PrepareHuman ( false , i , skill ) ;
39780: LD_INT 0
39782: PPUSH
39783: LD_VAR 0 8
39787: PPUSH
39788: LD_VAR 0 4
39792: PPUSH
39793: CALL_OW 380
// end else
39797: GO 39816
// PrepareHuman ( false , i , skill ) ;
39799: LD_INT 0
39801: PPUSH
39802: LD_VAR 0 8
39806: PPUSH
39807: LD_VAR 0 4
39811: PPUSH
39812: CALL_OW 380
// un := CreateHuman ;
39816: LD_ADDR_VAR 0 14
39820: PUSH
39821: CALL_OW 44
39825: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_VAR 0 7
39835: PPUSH
39836: LD_INT 1
39838: PPUSH
39839: LD_VAR 0 14
39843: PPUSH
39844: CALL_OW 2
39848: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39849: LD_VAR 0 14
39853: PPUSH
39854: LD_VAR 0 9
39858: PPUSH
39859: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39863: LD_VAR 0 9
39867: PPUSH
39868: CALL_OW 313
39872: PUSH
39873: LD_INT 6
39875: EQUAL
39876: PUSH
39877: LD_VAR 0 9
39881: PPUSH
39882: CALL_OW 266
39886: PUSH
39887: LD_INT 32
39889: PUSH
39890: LD_INT 31
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: IN
39897: OR
39898: IFFALSE 39712
39900: GO 39709
39902: POP
39903: POP
// end else
39904: GO 40286
// for j = 1 to x do
39906: LD_ADDR_VAR 0 9
39910: PUSH
39911: DOUBLE
39912: LD_INT 1
39914: DEC
39915: ST_TO_ADDR
39916: LD_VAR 0 13
39920: PUSH
39921: FOR_TO
39922: IFFALSE 40284
// begin InitHc ;
39924: CALL_OW 19
// if not f then
39928: LD_VAR 0 12
39932: NOT
39933: IFFALSE 40022
// begin PrepareHuman ( false , i , skill ) ;
39935: LD_INT 0
39937: PPUSH
39938: LD_VAR 0 8
39942: PPUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: CALL_OW 380
// un := CreateHuman ;
39952: LD_ADDR_VAR 0 14
39956: PUSH
39957: CALL_OW 44
39961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: LD_VAR 0 7
39971: PPUSH
39972: LD_INT 1
39974: PPUSH
39975: LD_VAR 0 14
39979: PPUSH
39980: CALL_OW 2
39984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 250
39999: PPUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 251
40009: PPUSH
40010: LD_INT 10
40012: PPUSH
40013: LD_INT 0
40015: PPUSH
40016: CALL_OW 50
// continue ;
40020: GO 39921
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40022: LD_VAR 0 12
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: PPUSH
40031: CALL_OW 313
40035: PUSH
40036: LD_VAR 0 12
40040: PUSH
40041: LD_INT 1
40043: ARRAY
40044: PPUSH
40045: CALL_OW 266
40049: PUSH
40050: LD_INT 32
40052: PUSH
40053: LD_INT 31
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: IN
40060: AND
40061: PUSH
40062: LD_VAR 0 12
40066: PUSH
40067: LD_INT 1
40069: ARRAY
40070: PPUSH
40071: CALL_OW 313
40075: PUSH
40076: LD_INT 6
40078: EQUAL
40079: OR
40080: IFFALSE 40100
// f := Delete ( f , 1 ) ;
40082: LD_ADDR_VAR 0 12
40086: PUSH
40087: LD_VAR 0 12
40091: PPUSH
40092: LD_INT 1
40094: PPUSH
40095: CALL_OW 3
40099: ST_TO_ADDR
// if not f then
40100: LD_VAR 0 12
40104: NOT
40105: IFFALSE 40123
// begin x := x + 2 ;
40107: LD_ADDR_VAR 0 13
40111: PUSH
40112: LD_VAR 0 13
40116: PUSH
40117: LD_INT 2
40119: PLUS
40120: ST_TO_ADDR
// continue ;
40121: GO 39921
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40123: LD_VAR 0 12
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: PPUSH
40132: CALL_OW 266
40136: PUSH
40137: LD_INT 5
40139: EQUAL
40140: IFFALSE 40214
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40142: LD_VAR 0 12
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PPUSH
40151: CALL_OW 313
40155: PUSH
40156: LD_INT 3
40158: LESS
40159: IFFALSE 40195
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40161: LD_INT 0
40163: PPUSH
40164: LD_INT 5
40166: PUSH
40167: LD_INT 8
40169: PUSH
40170: LD_INT 9
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: PUSH
40178: LD_VAR 0 17
40182: ARRAY
40183: PPUSH
40184: LD_VAR 0 4
40188: PPUSH
40189: CALL_OW 380
40193: GO 40212
// PrepareHuman ( false , i , skill ) ;
40195: LD_INT 0
40197: PPUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 4
40207: PPUSH
40208: CALL_OW 380
// end else
40212: GO 40231
// PrepareHuman ( false , i , skill ) ;
40214: LD_INT 0
40216: PPUSH
40217: LD_VAR 0 8
40221: PPUSH
40222: LD_VAR 0 4
40226: PPUSH
40227: CALL_OW 380
// un := CreateHuman ;
40231: LD_ADDR_VAR 0 14
40235: PUSH
40236: CALL_OW 44
40240: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40241: LD_ADDR_VAR 0 7
40245: PUSH
40246: LD_VAR 0 7
40250: PPUSH
40251: LD_INT 1
40253: PPUSH
40254: LD_VAR 0 14
40258: PPUSH
40259: CALL_OW 2
40263: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40264: LD_VAR 0 14
40268: PPUSH
40269: LD_VAR 0 12
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PPUSH
40278: CALL_OW 52
// end ;
40282: GO 39921
40284: POP
40285: POP
// end ;
40286: GO 39223
40288: POP
40289: POP
// result := result ^ buildings ;
40290: LD_ADDR_VAR 0 7
40294: PUSH
40295: LD_VAR 0 7
40299: PUSH
40300: LD_VAR 0 18
40304: ADD
40305: ST_TO_ADDR
// end else
40306: GO 40449
// begin for i = 1 to personel do
40308: LD_ADDR_VAR 0 8
40312: PUSH
40313: DOUBLE
40314: LD_INT 1
40316: DEC
40317: ST_TO_ADDR
40318: LD_VAR 0 6
40322: PUSH
40323: FOR_TO
40324: IFFALSE 40447
// begin if i > 4 then
40326: LD_VAR 0 8
40330: PUSH
40331: LD_INT 4
40333: GREATER
40334: IFFALSE 40338
// break ;
40336: GO 40447
// x := personel [ i ] ;
40338: LD_ADDR_VAR 0 13
40342: PUSH
40343: LD_VAR 0 6
40347: PUSH
40348: LD_VAR 0 8
40352: ARRAY
40353: ST_TO_ADDR
// if x = - 1 then
40354: LD_VAR 0 13
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: EQUAL
40363: IFFALSE 40367
// continue ;
40365: GO 40323
// PrepareHuman ( false , i , skill ) ;
40367: LD_INT 0
40369: PPUSH
40370: LD_VAR 0 8
40374: PPUSH
40375: LD_VAR 0 4
40379: PPUSH
40380: CALL_OW 380
// un := CreateHuman ;
40384: LD_ADDR_VAR 0 14
40388: PUSH
40389: CALL_OW 44
40393: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40394: LD_VAR 0 14
40398: PPUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: CALL_OW 250
40408: PPUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 251
40418: PPUSH
40419: LD_INT 10
40421: PPUSH
40422: LD_INT 0
40424: PPUSH
40425: CALL_OW 50
// result := result ^ un ;
40429: LD_ADDR_VAR 0 7
40433: PUSH
40434: LD_VAR 0 7
40438: PUSH
40439: LD_VAR 0 14
40443: ADD
40444: ST_TO_ADDR
// end ;
40445: GO 40323
40447: POP
40448: POP
// end ; end ;
40449: LD_VAR 0 7
40453: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40454: LD_INT 0
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
// result := false ;
40472: LD_ADDR_VAR 0 3
40476: PUSH
40477: LD_INT 0
40479: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40480: LD_VAR 0 1
40484: NOT
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 266
40495: PUSH
40496: LD_INT 32
40498: PUSH
40499: LD_INT 33
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: IN
40506: NOT
40507: OR
40508: IFFALSE 40512
// exit ;
40510: GO 41621
// nat := GetNation ( tower ) ;
40512: LD_ADDR_VAR 0 12
40516: PUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 248
40526: ST_TO_ADDR
// side := GetSide ( tower ) ;
40527: LD_ADDR_VAR 0 16
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 255
40541: ST_TO_ADDR
// x := GetX ( tower ) ;
40542: LD_ADDR_VAR 0 10
40546: PUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 250
40556: ST_TO_ADDR
// y := GetY ( tower ) ;
40557: LD_ADDR_VAR 0 11
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: CALL_OW 251
40571: ST_TO_ADDR
// if not x or not y then
40572: LD_VAR 0 10
40576: NOT
40577: PUSH
40578: LD_VAR 0 11
40582: NOT
40583: OR
40584: IFFALSE 40588
// exit ;
40586: GO 41621
// weapon := 0 ;
40588: LD_ADDR_VAR 0 18
40592: PUSH
40593: LD_INT 0
40595: ST_TO_ADDR
// fac_list := [ ] ;
40596: LD_ADDR_VAR 0 17
40600: PUSH
40601: EMPTY
40602: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40603: LD_ADDR_VAR 0 6
40607: PUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 274
40617: PPUSH
40618: LD_VAR 0 2
40622: PPUSH
40623: LD_INT 0
40625: PPUSH
40626: CALL 38192 0 3
40630: PPUSH
40631: LD_INT 30
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PPUSH
40641: CALL_OW 72
40645: ST_TO_ADDR
// if not factories then
40646: LD_VAR 0 6
40650: NOT
40651: IFFALSE 40655
// exit ;
40653: GO 41621
// for i in factories do
40655: LD_ADDR_VAR 0 8
40659: PUSH
40660: LD_VAR 0 6
40664: PUSH
40665: FOR_IN
40666: IFFALSE 40691
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40668: LD_ADDR_VAR 0 17
40672: PUSH
40673: LD_VAR 0 17
40677: PUSH
40678: LD_VAR 0 8
40682: PPUSH
40683: CALL_OW 478
40687: UNION
40688: ST_TO_ADDR
40689: GO 40665
40691: POP
40692: POP
// if not fac_list then
40693: LD_VAR 0 17
40697: NOT
40698: IFFALSE 40702
// exit ;
40700: GO 41621
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40702: LD_ADDR_VAR 0 5
40706: PUSH
40707: LD_INT 4
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: LD_INT 9
40715: PUSH
40716: LD_INT 10
40718: PUSH
40719: LD_INT 6
40721: PUSH
40722: LD_INT 7
40724: PUSH
40725: LD_INT 11
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 27
40739: PUSH
40740: LD_INT 28
40742: PUSH
40743: LD_INT 26
40745: PUSH
40746: LD_INT 30
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 43
40757: PUSH
40758: LD_INT 44
40760: PUSH
40761: LD_INT 46
40763: PUSH
40764: LD_INT 45
40766: PUSH
40767: LD_INT 47
40769: PUSH
40770: LD_INT 49
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: PUSH
40786: LD_VAR 0 12
40790: ARRAY
40791: ST_TO_ADDR
// list := list isect fac_list ;
40792: LD_ADDR_VAR 0 5
40796: PUSH
40797: LD_VAR 0 5
40801: PUSH
40802: LD_VAR 0 17
40806: ISECT
40807: ST_TO_ADDR
// if not list then
40808: LD_VAR 0 5
40812: NOT
40813: IFFALSE 40817
// exit ;
40815: GO 41621
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40817: LD_VAR 0 12
40821: PUSH
40822: LD_INT 3
40824: EQUAL
40825: PUSH
40826: LD_INT 49
40828: PUSH
40829: LD_VAR 0 5
40833: IN
40834: AND
40835: PUSH
40836: LD_INT 31
40838: PPUSH
40839: LD_VAR 0 16
40843: PPUSH
40844: CALL_OW 321
40848: PUSH
40849: LD_INT 2
40851: EQUAL
40852: AND
40853: IFFALSE 40913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40855: LD_INT 22
40857: PUSH
40858: LD_VAR 0 16
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 35
40869: PUSH
40870: LD_INT 49
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 91
40879: PUSH
40880: LD_VAR 0 1
40884: PUSH
40885: LD_INT 10
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: PPUSH
40898: CALL_OW 69
40902: NOT
40903: IFFALSE 40913
// weapon := ru_time_lapser ;
40905: LD_ADDR_VAR 0 18
40909: PUSH
40910: LD_INT 49
40912: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40913: LD_VAR 0 12
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: IN
40928: PUSH
40929: LD_INT 11
40931: PUSH
40932: LD_VAR 0 5
40936: IN
40937: PUSH
40938: LD_INT 30
40940: PUSH
40941: LD_VAR 0 5
40945: IN
40946: OR
40947: AND
40948: PUSH
40949: LD_INT 6
40951: PPUSH
40952: LD_VAR 0 16
40956: PPUSH
40957: CALL_OW 321
40961: PUSH
40962: LD_INT 2
40964: EQUAL
40965: AND
40966: IFFALSE 41131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40968: LD_INT 22
40970: PUSH
40971: LD_VAR 0 16
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 35
40985: PUSH
40986: LD_INT 11
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 35
40995: PUSH
40996: LD_INT 30
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 91
41010: PUSH
41011: LD_VAR 0 1
41015: PUSH
41016: LD_INT 18
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: PPUSH
41029: CALL_OW 69
41033: NOT
41034: PUSH
41035: LD_INT 22
41037: PUSH
41038: LD_VAR 0 16
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 30
41052: PUSH
41053: LD_INT 32
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 30
41062: PUSH
41063: LD_INT 33
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 91
41077: PUSH
41078: LD_VAR 0 1
41082: PUSH
41083: LD_INT 12
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: PPUSH
41099: CALL_OW 69
41103: PUSH
41104: LD_INT 2
41106: GREATER
41107: AND
41108: IFFALSE 41131
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41110: LD_ADDR_VAR 0 18
41114: PUSH
41115: LD_INT 11
41117: PUSH
41118: LD_INT 30
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_VAR 0 12
41129: ARRAY
41130: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41131: LD_VAR 0 18
41135: NOT
41136: PUSH
41137: LD_INT 40
41139: PPUSH
41140: LD_VAR 0 16
41144: PPUSH
41145: CALL_OW 321
41149: PUSH
41150: LD_INT 2
41152: EQUAL
41153: AND
41154: PUSH
41155: LD_INT 7
41157: PUSH
41158: LD_VAR 0 5
41162: IN
41163: PUSH
41164: LD_INT 28
41166: PUSH
41167: LD_VAR 0 5
41171: IN
41172: OR
41173: PUSH
41174: LD_INT 45
41176: PUSH
41177: LD_VAR 0 5
41181: IN
41182: OR
41183: AND
41184: IFFALSE 41438
// begin hex := GetHexInfo ( x , y ) ;
41186: LD_ADDR_VAR 0 4
41190: PUSH
41191: LD_VAR 0 10
41195: PPUSH
41196: LD_VAR 0 11
41200: PPUSH
41201: CALL_OW 546
41205: ST_TO_ADDR
// if hex [ 1 ] then
41206: LD_VAR 0 4
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: IFFALSE 41218
// exit ;
41216: GO 41621
// height := hex [ 2 ] ;
41218: LD_ADDR_VAR 0 15
41222: PUSH
41223: LD_VAR 0 4
41227: PUSH
41228: LD_INT 2
41230: ARRAY
41231: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41232: LD_ADDR_VAR 0 14
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: LD_INT 5
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// for i in tmp do
41255: LD_ADDR_VAR 0 8
41259: PUSH
41260: LD_VAR 0 14
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41436
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41268: LD_ADDR_VAR 0 9
41272: PUSH
41273: LD_VAR 0 10
41277: PPUSH
41278: LD_VAR 0 8
41282: PPUSH
41283: LD_INT 5
41285: PPUSH
41286: CALL_OW 272
41290: PUSH
41291: LD_VAR 0 11
41295: PPUSH
41296: LD_VAR 0 8
41300: PPUSH
41301: LD_INT 5
41303: PPUSH
41304: CALL_OW 273
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41313: LD_VAR 0 9
41317: PUSH
41318: LD_INT 1
41320: ARRAY
41321: PPUSH
41322: LD_VAR 0 9
41326: PUSH
41327: LD_INT 2
41329: ARRAY
41330: PPUSH
41331: CALL_OW 488
41335: IFFALSE 41434
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41337: LD_ADDR_VAR 0 4
41341: PUSH
41342: LD_VAR 0 9
41346: PUSH
41347: LD_INT 1
41349: ARRAY
41350: PPUSH
41351: LD_VAR 0 9
41355: PUSH
41356: LD_INT 2
41358: ARRAY
41359: PPUSH
41360: CALL_OW 546
41364: ST_TO_ADDR
// if hex [ 1 ] then
41365: LD_VAR 0 4
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: IFFALSE 41377
// continue ;
41375: GO 41265
// h := hex [ 2 ] ;
41377: LD_ADDR_VAR 0 13
41381: PUSH
41382: LD_VAR 0 4
41386: PUSH
41387: LD_INT 2
41389: ARRAY
41390: ST_TO_ADDR
// if h + 7 < height then
41391: LD_VAR 0 13
41395: PUSH
41396: LD_INT 7
41398: PLUS
41399: PUSH
41400: LD_VAR 0 15
41404: LESS
41405: IFFALSE 41434
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41407: LD_ADDR_VAR 0 18
41411: PUSH
41412: LD_INT 7
41414: PUSH
41415: LD_INT 28
41417: PUSH
41418: LD_INT 45
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: PUSH
41426: LD_VAR 0 12
41430: ARRAY
41431: ST_TO_ADDR
// break ;
41432: GO 41436
// end ; end ; end ;
41434: GO 41265
41436: POP
41437: POP
// end ; if not weapon then
41438: LD_VAR 0 18
41442: NOT
41443: IFFALSE 41503
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41445: LD_ADDR_VAR 0 5
41449: PUSH
41450: LD_VAR 0 5
41454: PUSH
41455: LD_INT 11
41457: PUSH
41458: LD_INT 30
41460: PUSH
41461: LD_INT 49
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: DIFF
41469: ST_TO_ADDR
// if not list then
41470: LD_VAR 0 5
41474: NOT
41475: IFFALSE 41479
// exit ;
41477: GO 41621
// weapon := list [ rand ( 1 , list ) ] ;
41479: LD_ADDR_VAR 0 18
41483: PUSH
41484: LD_VAR 0 5
41488: PUSH
41489: LD_INT 1
41491: PPUSH
41492: LD_VAR 0 5
41496: PPUSH
41497: CALL_OW 12
41501: ARRAY
41502: ST_TO_ADDR
// end ; if weapon then
41503: LD_VAR 0 18
41507: IFFALSE 41621
// begin tmp := CostOfWeapon ( weapon ) ;
41509: LD_ADDR_VAR 0 14
41513: PUSH
41514: LD_VAR 0 18
41518: PPUSH
41519: CALL_OW 451
41523: ST_TO_ADDR
// j := GetBase ( tower ) ;
41524: LD_ADDR_VAR 0 9
41528: PUSH
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 274
41538: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41539: LD_VAR 0 9
41543: PPUSH
41544: LD_INT 1
41546: PPUSH
41547: CALL_OW 275
41551: PUSH
41552: LD_VAR 0 14
41556: PUSH
41557: LD_INT 1
41559: ARRAY
41560: GREATEREQUAL
41561: PUSH
41562: LD_VAR 0 9
41566: PPUSH
41567: LD_INT 2
41569: PPUSH
41570: CALL_OW 275
41574: PUSH
41575: LD_VAR 0 14
41579: PUSH
41580: LD_INT 2
41582: ARRAY
41583: GREATEREQUAL
41584: AND
41585: PUSH
41586: LD_VAR 0 9
41590: PPUSH
41591: LD_INT 3
41593: PPUSH
41594: CALL_OW 275
41598: PUSH
41599: LD_VAR 0 14
41603: PUSH
41604: LD_INT 3
41606: ARRAY
41607: GREATEREQUAL
41608: AND
41609: IFFALSE 41621
// result := weapon ;
41611: LD_ADDR_VAR 0 3
41615: PUSH
41616: LD_VAR 0 18
41620: ST_TO_ADDR
// end ; end ;
41621: LD_VAR 0 3
41625: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41626: LD_INT 0
41628: PPUSH
41629: PPUSH
// result := true ;
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_INT 1
41637: ST_TO_ADDR
// if array1 = array2 then
41638: LD_VAR 0 1
41642: PUSH
41643: LD_VAR 0 2
41647: EQUAL
41648: IFFALSE 41708
// begin for i = 1 to array1 do
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: DOUBLE
41656: LD_INT 1
41658: DEC
41659: ST_TO_ADDR
41660: LD_VAR 0 1
41664: PUSH
41665: FOR_TO
41666: IFFALSE 41704
// if array1 [ i ] <> array2 [ i ] then
41668: LD_VAR 0 1
41672: PUSH
41673: LD_VAR 0 4
41677: ARRAY
41678: PUSH
41679: LD_VAR 0 2
41683: PUSH
41684: LD_VAR 0 4
41688: ARRAY
41689: NONEQUAL
41690: IFFALSE 41702
// begin result := false ;
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_INT 0
41699: ST_TO_ADDR
// break ;
41700: GO 41704
// end ;
41702: GO 41665
41704: POP
41705: POP
// end else
41706: GO 41716
// result := false ;
41708: LD_ADDR_VAR 0 3
41712: PUSH
41713: LD_INT 0
41715: ST_TO_ADDR
// end ;
41716: LD_VAR 0 3
41720: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41721: LD_INT 0
41723: PPUSH
41724: PPUSH
// if not array1 or not array2 then
41725: LD_VAR 0 1
41729: NOT
41730: PUSH
41731: LD_VAR 0 2
41735: NOT
41736: OR
41737: IFFALSE 41741
// exit ;
41739: GO 41805
// result := true ;
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_INT 1
41748: ST_TO_ADDR
// for i = 1 to array1 do
41749: LD_ADDR_VAR 0 4
41753: PUSH
41754: DOUBLE
41755: LD_INT 1
41757: DEC
41758: ST_TO_ADDR
41759: LD_VAR 0 1
41763: PUSH
41764: FOR_TO
41765: IFFALSE 41803
// if array1 [ i ] <> array2 [ i ] then
41767: LD_VAR 0 1
41771: PUSH
41772: LD_VAR 0 4
41776: ARRAY
41777: PUSH
41778: LD_VAR 0 2
41782: PUSH
41783: LD_VAR 0 4
41787: ARRAY
41788: NONEQUAL
41789: IFFALSE 41801
// begin result := false ;
41791: LD_ADDR_VAR 0 3
41795: PUSH
41796: LD_INT 0
41798: ST_TO_ADDR
// break ;
41799: GO 41803
// end ;
41801: GO 41764
41803: POP
41804: POP
// end ;
41805: LD_VAR 0 3
41809: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41810: LD_INT 0
41812: PPUSH
41813: PPUSH
41814: PPUSH
// pom := GetBase ( fac ) ;
41815: LD_ADDR_VAR 0 5
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 274
41829: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41830: LD_ADDR_VAR 0 4
41834: PUSH
41835: LD_VAR 0 2
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PPUSH
41844: LD_VAR 0 2
41848: PUSH
41849: LD_INT 2
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 2
41857: PUSH
41858: LD_INT 3
41860: ARRAY
41861: PPUSH
41862: LD_VAR 0 2
41866: PUSH
41867: LD_INT 4
41869: ARRAY
41870: PPUSH
41871: CALL_OW 449
41875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_VAR 0 5
41885: PPUSH
41886: LD_INT 1
41888: PPUSH
41889: CALL_OW 275
41893: PUSH
41894: LD_VAR 0 4
41898: PUSH
41899: LD_INT 1
41901: ARRAY
41902: GREATEREQUAL
41903: PUSH
41904: LD_VAR 0 5
41908: PPUSH
41909: LD_INT 2
41911: PPUSH
41912: CALL_OW 275
41916: PUSH
41917: LD_VAR 0 4
41921: PUSH
41922: LD_INT 2
41924: ARRAY
41925: GREATEREQUAL
41926: AND
41927: PUSH
41928: LD_VAR 0 5
41932: PPUSH
41933: LD_INT 3
41935: PPUSH
41936: CALL_OW 275
41940: PUSH
41941: LD_VAR 0 4
41945: PUSH
41946: LD_INT 3
41948: ARRAY
41949: GREATEREQUAL
41950: AND
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 3
41956: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
// pom := GetBase ( building ) ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 274
41977: ST_TO_ADDR
// if not pom then
41978: LD_VAR 0 3
41982: NOT
41983: IFFALSE 41987
// exit ;
41985: GO 42157
// btype := GetBType ( building ) ;
41987: LD_ADDR_VAR 0 5
41991: PUSH
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 266
42001: ST_TO_ADDR
// if btype = b_armoury then
42002: LD_VAR 0 5
42006: PUSH
42007: LD_INT 4
42009: EQUAL
42010: IFFALSE 42020
// btype := b_barracks ;
42012: LD_ADDR_VAR 0 5
42016: PUSH
42017: LD_INT 5
42019: ST_TO_ADDR
// if btype = b_depot then
42020: LD_VAR 0 5
42024: PUSH
42025: LD_INT 0
42027: EQUAL
42028: IFFALSE 42038
// btype := b_warehouse ;
42030: LD_ADDR_VAR 0 5
42034: PUSH
42035: LD_INT 1
42037: ST_TO_ADDR
// if btype = b_workshop then
42038: LD_VAR 0 5
42042: PUSH
42043: LD_INT 2
42045: EQUAL
42046: IFFALSE 42056
// btype := b_factory ;
42048: LD_ADDR_VAR 0 5
42052: PUSH
42053: LD_INT 3
42055: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42056: LD_ADDR_VAR 0 4
42060: PUSH
42061: LD_VAR 0 5
42065: PPUSH
42066: LD_VAR 0 1
42070: PPUSH
42071: CALL_OW 248
42075: PPUSH
42076: CALL_OW 450
42080: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42081: LD_ADDR_VAR 0 2
42085: PUSH
42086: LD_VAR 0 3
42090: PPUSH
42091: LD_INT 1
42093: PPUSH
42094: CALL_OW 275
42098: PUSH
42099: LD_VAR 0 4
42103: PUSH
42104: LD_INT 1
42106: ARRAY
42107: GREATEREQUAL
42108: PUSH
42109: LD_VAR 0 3
42113: PPUSH
42114: LD_INT 2
42116: PPUSH
42117: CALL_OW 275
42121: PUSH
42122: LD_VAR 0 4
42126: PUSH
42127: LD_INT 2
42129: ARRAY
42130: GREATEREQUAL
42131: AND
42132: PUSH
42133: LD_VAR 0 3
42137: PPUSH
42138: LD_INT 3
42140: PPUSH
42141: CALL_OW 275
42145: PUSH
42146: LD_VAR 0 4
42150: PUSH
42151: LD_INT 3
42153: ARRAY
42154: GREATEREQUAL
42155: AND
42156: ST_TO_ADDR
// end ;
42157: LD_VAR 0 2
42161: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42162: LD_INT 0
42164: PPUSH
42165: PPUSH
42166: PPUSH
// pom := GetBase ( building ) ;
42167: LD_ADDR_VAR 0 4
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 274
42181: ST_TO_ADDR
// if not pom then
42182: LD_VAR 0 4
42186: NOT
42187: IFFALSE 42191
// exit ;
42189: GO 42292
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42191: LD_ADDR_VAR 0 5
42195: PUSH
42196: LD_VAR 0 2
42200: PPUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 248
42210: PPUSH
42211: CALL_OW 450
42215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_VAR 0 4
42225: PPUSH
42226: LD_INT 1
42228: PPUSH
42229: CALL_OW 275
42233: PUSH
42234: LD_VAR 0 5
42238: PUSH
42239: LD_INT 1
42241: ARRAY
42242: GREATEREQUAL
42243: PUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: LD_INT 2
42251: PPUSH
42252: CALL_OW 275
42256: PUSH
42257: LD_VAR 0 5
42261: PUSH
42262: LD_INT 2
42264: ARRAY
42265: GREATEREQUAL
42266: AND
42267: PUSH
42268: LD_VAR 0 4
42272: PPUSH
42273: LD_INT 3
42275: PPUSH
42276: CALL_OW 275
42280: PUSH
42281: LD_VAR 0 5
42285: PUSH
42286: LD_INT 3
42288: ARRAY
42289: GREATEREQUAL
42290: AND
42291: ST_TO_ADDR
// end ;
42292: LD_VAR 0 3
42296: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42297: LD_INT 0
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
// result := false ;
42310: LD_ADDR_VAR 0 8
42314: PUSH
42315: LD_INT 0
42317: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42318: LD_VAR 0 5
42322: NOT
42323: PUSH
42324: LD_VAR 0 1
42328: NOT
42329: OR
42330: PUSH
42331: LD_VAR 0 2
42335: NOT
42336: OR
42337: PUSH
42338: LD_VAR 0 3
42342: NOT
42343: OR
42344: IFFALSE 42348
// exit ;
42346: GO 43162
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42348: LD_ADDR_VAR 0 14
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: LD_VAR 0 2
42362: PPUSH
42363: LD_VAR 0 3
42367: PPUSH
42368: LD_VAR 0 4
42372: PPUSH
42373: LD_VAR 0 5
42377: PUSH
42378: LD_INT 1
42380: ARRAY
42381: PPUSH
42382: CALL_OW 248
42386: PPUSH
42387: LD_INT 0
42389: PPUSH
42390: CALL 44395 0 6
42394: ST_TO_ADDR
// if not hexes then
42395: LD_VAR 0 14
42399: NOT
42400: IFFALSE 42404
// exit ;
42402: GO 43162
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42404: LD_ADDR_VAR 0 17
42408: PUSH
42409: LD_VAR 0 5
42413: PPUSH
42414: LD_INT 22
42416: PUSH
42417: LD_VAR 0 13
42421: PPUSH
42422: CALL_OW 255
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 30
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 30
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PPUSH
42463: CALL_OW 72
42467: ST_TO_ADDR
// for i = 1 to hexes do
42468: LD_ADDR_VAR 0 9
42472: PUSH
42473: DOUBLE
42474: LD_INT 1
42476: DEC
42477: ST_TO_ADDR
42478: LD_VAR 0 14
42482: PUSH
42483: FOR_TO
42484: IFFALSE 43160
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42486: LD_ADDR_VAR 0 13
42490: PUSH
42491: LD_VAR 0 14
42495: PUSH
42496: LD_VAR 0 9
42500: ARRAY
42501: PUSH
42502: LD_INT 1
42504: ARRAY
42505: PPUSH
42506: LD_VAR 0 14
42510: PUSH
42511: LD_VAR 0 9
42515: ARRAY
42516: PUSH
42517: LD_INT 2
42519: ARRAY
42520: PPUSH
42521: CALL_OW 428
42525: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42526: LD_VAR 0 14
42530: PUSH
42531: LD_VAR 0 9
42535: ARRAY
42536: PUSH
42537: LD_INT 1
42539: ARRAY
42540: PPUSH
42541: LD_VAR 0 14
42545: PUSH
42546: LD_VAR 0 9
42550: ARRAY
42551: PUSH
42552: LD_INT 2
42554: ARRAY
42555: PPUSH
42556: CALL_OW 351
42560: PUSH
42561: LD_VAR 0 14
42565: PUSH
42566: LD_VAR 0 9
42570: ARRAY
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 14
42580: PUSH
42581: LD_VAR 0 9
42585: ARRAY
42586: PUSH
42587: LD_INT 2
42589: ARRAY
42590: PPUSH
42591: CALL_OW 488
42595: NOT
42596: OR
42597: PUSH
42598: LD_VAR 0 13
42602: PPUSH
42603: CALL_OW 247
42607: PUSH
42608: LD_INT 3
42610: EQUAL
42611: OR
42612: IFFALSE 42618
// exit ;
42614: POP
42615: POP
42616: GO 43162
// if not tmp then
42618: LD_VAR 0 13
42622: NOT
42623: IFFALSE 42627
// continue ;
42625: GO 42483
// result := true ;
42627: LD_ADDR_VAR 0 8
42631: PUSH
42632: LD_INT 1
42634: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42635: LD_VAR 0 6
42639: PUSH
42640: LD_VAR 0 13
42644: PPUSH
42645: CALL_OW 247
42649: PUSH
42650: LD_INT 2
42652: EQUAL
42653: AND
42654: PUSH
42655: LD_VAR 0 13
42659: PPUSH
42660: CALL_OW 263
42664: PUSH
42665: LD_INT 1
42667: EQUAL
42668: AND
42669: IFFALSE 42833
// begin if IsDrivenBy ( tmp ) then
42671: LD_VAR 0 13
42675: PPUSH
42676: CALL_OW 311
42680: IFFALSE 42684
// continue ;
42682: GO 42483
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42684: LD_VAR 0 6
42688: PPUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 60
42694: PUSH
42695: EMPTY
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 55
42707: PUSH
42708: EMPTY
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PPUSH
42719: CALL_OW 72
42723: IFFALSE 42831
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42725: LD_ADDR_VAR 0 18
42729: PUSH
42730: LD_VAR 0 6
42734: PPUSH
42735: LD_INT 3
42737: PUSH
42738: LD_INT 60
42740: PUSH
42741: EMPTY
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: PUSH
42751: LD_INT 55
42753: PUSH
42754: EMPTY
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PPUSH
42765: CALL_OW 72
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: ST_TO_ADDR
// if IsInUnit ( driver ) then
42774: LD_VAR 0 18
42778: PPUSH
42779: CALL_OW 310
42783: IFFALSE 42794
// ComExit ( driver ) ;
42785: LD_VAR 0 18
42789: PPUSH
42790: CALL 68175 0 1
// AddComEnterUnit ( driver , tmp ) ;
42794: LD_VAR 0 18
42798: PPUSH
42799: LD_VAR 0 13
42803: PPUSH
42804: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42808: LD_VAR 0 18
42812: PPUSH
42813: LD_VAR 0 7
42817: PPUSH
42818: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42822: LD_VAR 0 18
42826: PPUSH
42827: CALL_OW 181
// end ; continue ;
42831: GO 42483
// end ; if not cleaners or not tmp in cleaners then
42833: LD_VAR 0 6
42837: NOT
42838: PUSH
42839: LD_VAR 0 13
42843: PUSH
42844: LD_VAR 0 6
42848: IN
42849: NOT
42850: OR
42851: IFFALSE 43158
// begin if dep then
42853: LD_VAR 0 17
42857: IFFALSE 42993
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42859: LD_ADDR_VAR 0 16
42863: PUSH
42864: LD_VAR 0 17
42868: PUSH
42869: LD_INT 1
42871: ARRAY
42872: PPUSH
42873: CALL_OW 250
42877: PPUSH
42878: LD_VAR 0 17
42882: PUSH
42883: LD_INT 1
42885: ARRAY
42886: PPUSH
42887: CALL_OW 254
42891: PPUSH
42892: LD_INT 5
42894: PPUSH
42895: CALL_OW 272
42899: PUSH
42900: LD_VAR 0 17
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: PPUSH
42909: CALL_OW 251
42913: PPUSH
42914: LD_VAR 0 17
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: CALL_OW 254
42927: PPUSH
42928: LD_INT 5
42930: PPUSH
42931: CALL_OW 273
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42940: LD_VAR 0 16
42944: PUSH
42945: LD_INT 1
42947: ARRAY
42948: PPUSH
42949: LD_VAR 0 16
42953: PUSH
42954: LD_INT 2
42956: ARRAY
42957: PPUSH
42958: CALL_OW 488
42962: IFFALSE 42993
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42964: LD_VAR 0 13
42968: PPUSH
42969: LD_VAR 0 16
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: LD_VAR 0 16
42982: PUSH
42983: LD_INT 2
42985: ARRAY
42986: PPUSH
42987: CALL_OW 111
// continue ;
42991: GO 42483
// end ; end ; r := GetDir ( tmp ) ;
42993: LD_ADDR_VAR 0 15
42997: PUSH
42998: LD_VAR 0 13
43002: PPUSH
43003: CALL_OW 254
43007: ST_TO_ADDR
// if r = 5 then
43008: LD_VAR 0 15
43012: PUSH
43013: LD_INT 5
43015: EQUAL
43016: IFFALSE 43026
// r := 0 ;
43018: LD_ADDR_VAR 0 15
43022: PUSH
43023: LD_INT 0
43025: ST_TO_ADDR
// for j = r to 5 do
43026: LD_ADDR_VAR 0 10
43030: PUSH
43031: DOUBLE
43032: LD_VAR 0 15
43036: DEC
43037: ST_TO_ADDR
43038: LD_INT 5
43040: PUSH
43041: FOR_TO
43042: IFFALSE 43156
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43044: LD_ADDR_VAR 0 11
43048: PUSH
43049: LD_VAR 0 13
43053: PPUSH
43054: CALL_OW 250
43058: PPUSH
43059: LD_VAR 0 10
43063: PPUSH
43064: LD_INT 2
43066: PPUSH
43067: CALL_OW 272
43071: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43072: LD_ADDR_VAR 0 12
43076: PUSH
43077: LD_VAR 0 13
43081: PPUSH
43082: CALL_OW 251
43086: PPUSH
43087: LD_VAR 0 10
43091: PPUSH
43092: LD_INT 2
43094: PPUSH
43095: CALL_OW 273
43099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43100: LD_VAR 0 11
43104: PPUSH
43105: LD_VAR 0 12
43109: PPUSH
43110: CALL_OW 488
43114: PUSH
43115: LD_VAR 0 11
43119: PPUSH
43120: LD_VAR 0 12
43124: PPUSH
43125: CALL_OW 428
43129: NOT
43130: AND
43131: IFFALSE 43154
// begin ComMoveXY ( tmp , _x , _y ) ;
43133: LD_VAR 0 13
43137: PPUSH
43138: LD_VAR 0 11
43142: PPUSH
43143: LD_VAR 0 12
43147: PPUSH
43148: CALL_OW 111
// break ;
43152: GO 43156
// end ; end ;
43154: GO 43041
43156: POP
43157: POP
// end ; end ;
43158: GO 42483
43160: POP
43161: POP
// end ;
43162: LD_VAR 0 8
43166: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43167: LD_INT 0
43169: PPUSH
// result := true ;
43170: LD_ADDR_VAR 0 3
43174: PUSH
43175: LD_INT 1
43177: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43178: LD_VAR 0 2
43182: PUSH
43183: LD_INT 24
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43197
43189: LD_INT 33
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43197
43195: GO 43222
43197: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43198: LD_ADDR_VAR 0 3
43202: PUSH
43203: LD_INT 32
43205: PPUSH
43206: LD_VAR 0 1
43210: PPUSH
43211: CALL_OW 321
43215: PUSH
43216: LD_INT 2
43218: EQUAL
43219: ST_TO_ADDR
43220: GO 43538
43222: LD_INT 20
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 43255
43230: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43231: LD_ADDR_VAR 0 3
43235: PUSH
43236: LD_INT 6
43238: PPUSH
43239: LD_VAR 0 1
43243: PPUSH
43244: CALL_OW 321
43248: PUSH
43249: LD_INT 2
43251: EQUAL
43252: ST_TO_ADDR
43253: GO 43538
43255: LD_INT 22
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43269
43261: LD_INT 36
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43269
43267: GO 43294
43269: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43270: LD_ADDR_VAR 0 3
43274: PUSH
43275: LD_INT 15
43277: PPUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 321
43287: PUSH
43288: LD_INT 2
43290: EQUAL
43291: ST_TO_ADDR
43292: GO 43538
43294: LD_INT 30
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43327
43302: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_INT 20
43310: PPUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: CALL_OW 321
43320: PUSH
43321: LD_INT 2
43323: EQUAL
43324: ST_TO_ADDR
43325: GO 43538
43327: LD_INT 28
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43341
43333: LD_INT 21
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43366
43341: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 21
43349: PPUSH
43350: LD_VAR 0 1
43354: PPUSH
43355: CALL_OW 321
43359: PUSH
43360: LD_INT 2
43362: EQUAL
43363: ST_TO_ADDR
43364: GO 43538
43366: LD_INT 16
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43399
43374: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 84
43382: PPUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 321
43392: PUSH
43393: LD_INT 2
43395: EQUAL
43396: ST_TO_ADDR
43397: GO 43538
43399: LD_INT 19
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43413
43405: LD_INT 23
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 43438
43413: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 83
43421: PPUSH
43422: LD_VAR 0 1
43426: PPUSH
43427: CALL_OW 321
43431: PUSH
43432: LD_INT 2
43434: EQUAL
43435: ST_TO_ADDR
43436: GO 43538
43438: LD_INT 17
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43471
43446: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_INT 39
43454: PPUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 321
43464: PUSH
43465: LD_INT 2
43467: EQUAL
43468: ST_TO_ADDR
43469: GO 43538
43471: LD_INT 18
43473: DOUBLE
43474: EQUAL
43475: IFTRUE 43479
43477: GO 43504
43479: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_INT 40
43487: PPUSH
43488: LD_VAR 0 1
43492: PPUSH
43493: CALL_OW 321
43497: PUSH
43498: LD_INT 2
43500: EQUAL
43501: ST_TO_ADDR
43502: GO 43538
43504: LD_INT 27
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43512
43510: GO 43537
43512: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 35
43520: PPUSH
43521: LD_VAR 0 1
43525: PPUSH
43526: CALL_OW 321
43530: PUSH
43531: LD_INT 2
43533: EQUAL
43534: ST_TO_ADDR
43535: GO 43538
43537: POP
// end ;
43538: LD_VAR 0 3
43542: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43543: LD_INT 0
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
// result := false ;
43556: LD_ADDR_VAR 0 6
43560: PUSH
43561: LD_INT 0
43563: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43564: LD_VAR 0 1
43568: NOT
43569: PUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: CALL_OW 266
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: IN
43590: NOT
43591: OR
43592: PUSH
43593: LD_VAR 0 2
43597: NOT
43598: OR
43599: PUSH
43600: LD_VAR 0 5
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: IN
43631: NOT
43632: OR
43633: PUSH
43634: LD_VAR 0 3
43638: PPUSH
43639: LD_VAR 0 4
43643: PPUSH
43644: CALL_OW 488
43648: NOT
43649: OR
43650: IFFALSE 43654
// exit ;
43652: GO 44390
// side := GetSide ( depot ) ;
43654: LD_ADDR_VAR 0 9
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 255
43668: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43669: LD_VAR 0 9
43673: PPUSH
43674: LD_VAR 0 2
43678: PPUSH
43679: CALL 43167 0 2
43683: NOT
43684: IFFALSE 43688
// exit ;
43686: GO 44390
// pom := GetBase ( depot ) ;
43688: LD_ADDR_VAR 0 10
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 274
43702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43703: LD_ADDR_VAR 0 11
43707: PUSH
43708: LD_VAR 0 2
43712: PPUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 248
43722: PPUSH
43723: CALL_OW 450
43727: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43728: LD_VAR 0 10
43732: PPUSH
43733: LD_INT 1
43735: PPUSH
43736: CALL_OW 275
43740: PUSH
43741: LD_VAR 0 11
43745: PUSH
43746: LD_INT 1
43748: ARRAY
43749: GREATEREQUAL
43750: PUSH
43751: LD_VAR 0 10
43755: PPUSH
43756: LD_INT 2
43758: PPUSH
43759: CALL_OW 275
43763: PUSH
43764: LD_VAR 0 11
43768: PUSH
43769: LD_INT 2
43771: ARRAY
43772: GREATEREQUAL
43773: AND
43774: PUSH
43775: LD_VAR 0 10
43779: PPUSH
43780: LD_INT 3
43782: PPUSH
43783: CALL_OW 275
43787: PUSH
43788: LD_VAR 0 11
43792: PUSH
43793: LD_INT 3
43795: ARRAY
43796: GREATEREQUAL
43797: AND
43798: NOT
43799: IFFALSE 43803
// exit ;
43801: GO 44390
// if GetBType ( depot ) = b_depot then
43803: LD_VAR 0 1
43807: PPUSH
43808: CALL_OW 266
43812: PUSH
43813: LD_INT 0
43815: EQUAL
43816: IFFALSE 43828
// dist := 28 else
43818: LD_ADDR_VAR 0 14
43822: PUSH
43823: LD_INT 28
43825: ST_TO_ADDR
43826: GO 43836
// dist := 36 ;
43828: LD_ADDR_VAR 0 14
43832: PUSH
43833: LD_INT 36
43835: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43836: LD_VAR 0 1
43840: PPUSH
43841: LD_VAR 0 3
43845: PPUSH
43846: LD_VAR 0 4
43850: PPUSH
43851: CALL_OW 297
43855: PUSH
43856: LD_VAR 0 14
43860: GREATER
43861: IFFALSE 43865
// exit ;
43863: GO 44390
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43865: LD_ADDR_VAR 0 12
43869: PUSH
43870: LD_VAR 0 2
43874: PPUSH
43875: LD_VAR 0 3
43879: PPUSH
43880: LD_VAR 0 4
43884: PPUSH
43885: LD_VAR 0 5
43889: PPUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: CALL_OW 248
43899: PPUSH
43900: LD_INT 0
43902: PPUSH
43903: CALL 44395 0 6
43907: ST_TO_ADDR
// if not hexes then
43908: LD_VAR 0 12
43912: NOT
43913: IFFALSE 43917
// exit ;
43915: GO 44390
// hex := GetHexInfo ( x , y ) ;
43917: LD_ADDR_VAR 0 15
43921: PUSH
43922: LD_VAR 0 3
43926: PPUSH
43927: LD_VAR 0 4
43931: PPUSH
43932: CALL_OW 546
43936: ST_TO_ADDR
// if hex [ 1 ] then
43937: LD_VAR 0 15
43941: PUSH
43942: LD_INT 1
43944: ARRAY
43945: IFFALSE 43949
// exit ;
43947: GO 44390
// height := hex [ 2 ] ;
43949: LD_ADDR_VAR 0 13
43953: PUSH
43954: LD_VAR 0 15
43958: PUSH
43959: LD_INT 2
43961: ARRAY
43962: ST_TO_ADDR
// for i = 1 to hexes do
43963: LD_ADDR_VAR 0 7
43967: PUSH
43968: DOUBLE
43969: LD_INT 1
43971: DEC
43972: ST_TO_ADDR
43973: LD_VAR 0 12
43977: PUSH
43978: FOR_TO
43979: IFFALSE 44309
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43981: LD_VAR 0 12
43985: PUSH
43986: LD_VAR 0 7
43990: ARRAY
43991: PUSH
43992: LD_INT 1
43994: ARRAY
43995: PPUSH
43996: LD_VAR 0 12
44000: PUSH
44001: LD_VAR 0 7
44005: ARRAY
44006: PUSH
44007: LD_INT 2
44009: ARRAY
44010: PPUSH
44011: CALL_OW 488
44015: NOT
44016: PUSH
44017: LD_VAR 0 12
44021: PUSH
44022: LD_VAR 0 7
44026: ARRAY
44027: PUSH
44028: LD_INT 1
44030: ARRAY
44031: PPUSH
44032: LD_VAR 0 12
44036: PUSH
44037: LD_VAR 0 7
44041: ARRAY
44042: PUSH
44043: LD_INT 2
44045: ARRAY
44046: PPUSH
44047: CALL_OW 428
44051: PUSH
44052: LD_INT 0
44054: GREATER
44055: OR
44056: PUSH
44057: LD_VAR 0 12
44061: PUSH
44062: LD_VAR 0 7
44066: ARRAY
44067: PUSH
44068: LD_INT 1
44070: ARRAY
44071: PPUSH
44072: LD_VAR 0 12
44076: PUSH
44077: LD_VAR 0 7
44081: ARRAY
44082: PUSH
44083: LD_INT 2
44085: ARRAY
44086: PPUSH
44087: CALL_OW 351
44091: OR
44092: IFFALSE 44098
// exit ;
44094: POP
44095: POP
44096: GO 44390
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_VAR 0 12
44107: PUSH
44108: LD_VAR 0 7
44112: ARRAY
44113: PUSH
44114: LD_INT 1
44116: ARRAY
44117: PPUSH
44118: LD_VAR 0 12
44122: PUSH
44123: LD_VAR 0 7
44127: ARRAY
44128: PUSH
44129: LD_INT 2
44131: ARRAY
44132: PPUSH
44133: CALL_OW 546
44137: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44138: LD_VAR 0 8
44142: PUSH
44143: LD_INT 1
44145: ARRAY
44146: PUSH
44147: LD_VAR 0 8
44151: PUSH
44152: LD_INT 2
44154: ARRAY
44155: PUSH
44156: LD_VAR 0 13
44160: PUSH
44161: LD_INT 2
44163: PLUS
44164: GREATER
44165: OR
44166: PUSH
44167: LD_VAR 0 8
44171: PUSH
44172: LD_INT 2
44174: ARRAY
44175: PUSH
44176: LD_VAR 0 13
44180: PUSH
44181: LD_INT 2
44183: MINUS
44184: LESS
44185: OR
44186: PUSH
44187: LD_VAR 0 8
44191: PUSH
44192: LD_INT 3
44194: ARRAY
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 8
44201: PUSH
44202: LD_INT 9
44204: PUSH
44205: LD_INT 10
44207: PUSH
44208: LD_INT 11
44210: PUSH
44211: LD_INT 12
44213: PUSH
44214: LD_INT 13
44216: PUSH
44217: LD_INT 16
44219: PUSH
44220: LD_INT 17
44222: PUSH
44223: LD_INT 18
44225: PUSH
44226: LD_INT 19
44228: PUSH
44229: LD_INT 20
44231: PUSH
44232: LD_INT 21
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: IN
44250: NOT
44251: OR
44252: PUSH
44253: LD_VAR 0 8
44257: PUSH
44258: LD_INT 5
44260: ARRAY
44261: NOT
44262: OR
44263: PUSH
44264: LD_VAR 0 8
44268: PUSH
44269: LD_INT 6
44271: ARRAY
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 7
44281: PUSH
44282: LD_INT 9
44284: PUSH
44285: LD_INT 10
44287: PUSH
44288: LD_INT 11
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: IN
44299: NOT
44300: OR
44301: IFFALSE 44307
// exit ;
44303: POP
44304: POP
44305: GO 44390
// end ;
44307: GO 43978
44309: POP
44310: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44311: LD_VAR 0 9
44315: PPUSH
44316: LD_VAR 0 3
44320: PPUSH
44321: LD_VAR 0 4
44325: PPUSH
44326: LD_INT 20
44328: PPUSH
44329: CALL 36342 0 4
44333: PUSH
44334: LD_INT 4
44336: ARRAY
44337: IFFALSE 44341
// exit ;
44339: GO 44390
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44341: LD_VAR 0 2
44345: PUSH
44346: LD_INT 29
44348: PUSH
44349: LD_INT 30
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: IN
44356: PUSH
44357: LD_VAR 0 3
44361: PPUSH
44362: LD_VAR 0 4
44366: PPUSH
44367: LD_VAR 0 9
44371: PPUSH
44372: CALL_OW 440
44376: NOT
44377: AND
44378: IFFALSE 44382
// exit ;
44380: GO 44390
// result := true ;
44382: LD_ADDR_VAR 0 6
44386: PUSH
44387: LD_INT 1
44389: ST_TO_ADDR
// end ;
44390: LD_VAR 0 6
44394: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44395: LD_INT 0
44397: PPUSH
44398: PPUSH
44399: PPUSH
44400: PPUSH
44401: PPUSH
44402: PPUSH
44403: PPUSH
44404: PPUSH
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
44454: PPUSH
// result = [ ] ;
44455: LD_ADDR_VAR 0 7
44459: PUSH
44460: EMPTY
44461: ST_TO_ADDR
// temp_list = [ ] ;
44462: LD_ADDR_VAR 0 9
44466: PUSH
44467: EMPTY
44468: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44469: LD_VAR 0 4
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: LD_INT 5
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: IN
44500: NOT
44501: PUSH
44502: LD_VAR 0 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: IN
44517: PUSH
44518: LD_VAR 0 5
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: IN
44537: NOT
44538: AND
44539: OR
44540: IFFALSE 44544
// exit ;
44542: GO 62935
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44544: LD_VAR 0 1
44548: PUSH
44549: LD_INT 6
44551: PUSH
44552: LD_INT 7
44554: PUSH
44555: LD_INT 8
44557: PUSH
44558: LD_INT 13
44560: PUSH
44561: LD_INT 12
44563: PUSH
44564: LD_INT 15
44566: PUSH
44567: LD_INT 11
44569: PUSH
44570: LD_INT 14
44572: PUSH
44573: LD_INT 10
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: IN
44587: IFFALSE 44597
// btype = b_lab ;
44589: LD_ADDR_VAR 0 1
44593: PUSH
44594: LD_INT 6
44596: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44597: LD_VAR 0 6
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: IN
44616: NOT
44617: PUSH
44618: LD_VAR 0 1
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 6
44637: PUSH
44638: LD_INT 36
44640: PUSH
44641: LD_INT 4
44643: PUSH
44644: LD_INT 5
44646: PUSH
44647: LD_INT 31
44649: PUSH
44650: LD_INT 32
44652: PUSH
44653: LD_INT 33
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: IN
44669: NOT
44670: PUSH
44671: LD_VAR 0 6
44675: PUSH
44676: LD_INT 1
44678: EQUAL
44679: AND
44680: OR
44681: PUSH
44682: LD_VAR 0 1
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: IN
44697: NOT
44698: PUSH
44699: LD_VAR 0 6
44703: PUSH
44704: LD_INT 2
44706: EQUAL
44707: AND
44708: OR
44709: IFFALSE 44719
// mode = 0 ;
44711: LD_ADDR_VAR 0 6
44715: PUSH
44716: LD_INT 0
44718: ST_TO_ADDR
// case mode of 0 :
44719: LD_VAR 0 6
44723: PUSH
44724: LD_INT 0
44726: DOUBLE
44727: EQUAL
44728: IFTRUE 44732
44730: GO 56185
44732: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44733: LD_ADDR_VAR 0 11
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44926: LD_ADDR_VAR 0 12
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45122: LD_ADDR_VAR 0 13
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 2
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: NEG
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45321: LD_ADDR_VAR 0 14
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45517: LD_ADDR_VAR 0 15
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45710: LD_ADDR_VAR 0 16
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 3
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 3
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45903: LD_ADDR_VAR 0 17
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46133: LD_ADDR_VAR 0 18
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46363: LD_ADDR_VAR 0 19
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46593: LD_ADDR_VAR 0 20
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46823: LD_ADDR_VAR 0 21
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47053: LD_ADDR_VAR 0 22
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47283: LD_ADDR_VAR 0 23
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47563: LD_ADDR_VAR 0 24
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47839: LD_ADDR_VAR 0 25
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48113: LD_ADDR_VAR 0 26
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48389: LD_ADDR_VAR 0 27
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48669: LD_ADDR_VAR 0 28
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48951: LD_ADDR_VAR 0 29
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49230: LD_ADDR_VAR 0 30
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49508: LD_ADDR_VAR 0 31
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49786: LD_ADDR_VAR 0 32
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50064: LD_ADDR_VAR 0 33
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50343: LD_ADDR_VAR 0 34
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50623: LD_ADDR_VAR 0 35
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50735: LD_ADDR_VAR 0 36
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50847: LD_ADDR_VAR 0 37
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50959: LD_ADDR_VAR 0 38
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51071: LD_ADDR_VAR 0 39
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51183: LD_ADDR_VAR 0 40
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51295: LD_ADDR_VAR 0 41
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51645: LD_ADDR_VAR 0 42
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: LD_INT 3
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51995: LD_ADDR_VAR 0 43
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 3
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52343: LD_ADDR_VAR 0 44
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 3
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 3
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52693: LD_ADDR_VAR 0 45
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53043: LD_ADDR_VAR 0 46
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 3
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53391: LD_ADDR_VAR 0 47
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53542: LD_ADDR_VAR 0 48
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53689: LD_ADDR_VAR 0 49
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53833: LD_ADDR_VAR 0 50
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53977: LD_ADDR_VAR 0 51
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54124: LD_ADDR_VAR 0 52
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54275: LD_ADDR_VAR 0 53
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54505: LD_ADDR_VAR 0 54
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54735: LD_ADDR_VAR 0 55
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54965: LD_ADDR_VAR 0 56
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55195: LD_ADDR_VAR 0 57
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55425: LD_ADDR_VAR 0 58
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: NEG
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55655: LD_ADDR_VAR 0 59
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55743: LD_ADDR_VAR 0 60
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 61
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55919: LD_ADDR_VAR 0 62
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56007: LD_ADDR_VAR 0 63
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56095: LD_ADDR_VAR 0 64
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// end ; 1 :
56183: GO 62080
56185: LD_INT 1
56187: DOUBLE
56188: EQUAL
56189: IFTRUE 56193
56191: GO 58816
56193: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56194: LD_ADDR_VAR 0 11
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56238: LD_ADDR_VAR 0 12
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56279: LD_ADDR_VAR 0 13
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56319: LD_ADDR_VAR 0 14
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56360: LD_ADDR_VAR 0 15
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56404: LD_ADDR_VAR 0 16
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: LD_INT 3
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56450: LD_ADDR_VAR 0 17
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56494: LD_ADDR_VAR 0 18
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: LIST
56534: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56535: LD_ADDR_VAR 0 19
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56575: LD_ADDR_VAR 0 20
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56616: LD_ADDR_VAR 0 21
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56660: LD_ADDR_VAR 0 22
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: NEG
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56706: LD_ADDR_VAR 0 23
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 4
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56750: LD_ADDR_VAR 0 24
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56791: LD_ADDR_VAR 0 25
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56831: LD_ADDR_VAR 0 26
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 4
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56872: LD_ADDR_VAR 0 27
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56916: LD_ADDR_VAR 0 28
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: LD_INT 4
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 4
56947: NEG
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56962: LD_ADDR_VAR 0 29
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 3
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 4
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 4
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 5
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 5
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 6
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 6
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 5
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57117: LD_ADDR_VAR 0 30
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 5
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 6
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 6
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57260: LD_ADDR_VAR 0 31
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 4
57297: PUSH
57298: LD_INT 3
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 4
57307: PUSH
57308: LD_INT 4
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: LD_INT 4
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 5
57327: PUSH
57328: LD_INT 4
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: LD_INT 5
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: LD_INT 5
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 6
57357: PUSH
57358: LD_INT 5
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 6
57367: PUSH
57368: LD_INT 6
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 5
57377: PUSH
57378: LD_INT 6
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57399: LD_ADDR_VAR 0 32
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 4
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 5
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 5
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 6
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 6
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 5
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57542: LD_ADDR_VAR 0 33
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 4
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 5
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 5
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 5
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 6
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 6
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57697: LD_ADDR_VAR 0 34
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: NEG
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 4
57764: NEG
57765: PUSH
57766: LD_INT 4
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: LD_INT 5
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 5
57788: NEG
57789: PUSH
57790: LD_INT 4
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 5
57800: NEG
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 5
57812: NEG
57813: PUSH
57814: LD_INT 6
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 6
57824: NEG
57825: PUSH
57826: LD_INT 5
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 6
57836: NEG
57837: PUSH
57838: LD_INT 6
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57860: LD_ADDR_VAR 0 41
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57904: LD_ADDR_VAR 0 42
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57945: LD_ADDR_VAR 0 43
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 3
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57985: LD_ADDR_VAR 0 44
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58026: LD_ADDR_VAR 0 45
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58070: LD_ADDR_VAR 0 46
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58116: LD_ADDR_VAR 0 47
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58149: LD_ADDR_VAR 0 48
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58180: LD_ADDR_VAR 0 49
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58209: LD_ADDR_VAR 0 50
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58238: LD_ADDR_VAR 0 51
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58269: LD_ADDR_VAR 0 52
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58302: LD_ADDR_VAR 0 53
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58346: LD_ADDR_VAR 0 54
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58387: LD_ADDR_VAR 0 55
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58427: LD_ADDR_VAR 0 56
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58468: LD_ADDR_VAR 0 57
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58512: LD_ADDR_VAR 0 58
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58558: LD_ADDR_VAR 0 59
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58602: LD_ADDR_VAR 0 60
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58643: LD_ADDR_VAR 0 61
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58683: LD_ADDR_VAR 0 62
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58724: LD_ADDR_VAR 0 63
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58768: LD_ADDR_VAR 0 64
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// end ; 2 :
58814: GO 62080
58816: LD_INT 2
58818: DOUBLE
58819: EQUAL
58820: IFTRUE 58824
58822: GO 62079
58824: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58825: LD_ADDR_VAR 0 29
58829: PUSH
58830: LD_INT 4
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 5
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 5
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 5
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 4
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: LD_INT 4
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: LD_INT 4
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 4
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 5
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 5
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: LD_INT 4
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: LD_INT 5
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 4
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: NEG
59271: PUSH
59272: LD_INT 4
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: LD_INT 5
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 5
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 5
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59363: LD_ADDR_VAR 0 30
59367: PUSH
59368: LD_INT 4
59370: PUSH
59371: LD_INT 4
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: PUSH
59381: LD_INT 3
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 5
59390: PUSH
59391: LD_INT 4
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 5
59400: PUSH
59401: LD_INT 5
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 5
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 4
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 4
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 4
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 4
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 5
59609: NEG
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 5
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: LD_INT 4
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: LD_INT 3
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 2
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: NEG
59728: PUSH
59729: LD_INT 4
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 4
59751: NEG
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 5
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 3
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 3
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 4
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 5
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 5
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59910: LD_ADDR_VAR 0 31
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 4
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 4
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 5
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 5
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 5
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: NEG
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 4
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: LD_INT 5
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 4
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: NEG
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: LD_INT 5
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 5
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 5
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 4
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60460: LD_ADDR_VAR 0 32
60464: PUSH
60465: LD_INT 4
60467: NEG
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 5
60523: NEG
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 5
60546: NEG
60547: PUSH
60548: LD_INT 2
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: LD_INT 4
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: NEG
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 4
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 5
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 4
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 5
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: LD_INT 5
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 4
60872: PUSH
60873: LD_INT 4
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 5
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: PUSH
60903: LD_INT 5
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 4
60912: PUSH
60913: LD_INT 5
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: LD_INT 4
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 5
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 5
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61007: LD_ADDR_VAR 0 33
61011: PUSH
61012: LD_INT 4
61014: NEG
61015: PUSH
61016: LD_INT 4
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: LD_INT 5
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 3
61038: NEG
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 4
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 5
61074: NEG
61075: PUSH
61076: LD_INT 4
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 5
61086: NEG
61087: PUSH
61088: LD_INT 5
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: LD_INT 5
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 5
61110: NEG
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 4
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 2
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 4
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 4
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 4
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 5
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 5
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: LD_INT 4
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 5
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 5
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: LD_INT 5
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61545: LD_ADDR_VAR 0 34
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 4
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: LD_INT 5
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 4
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 4
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 5
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 5
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 4
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 4
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 5
61767: PUSH
61768: LD_INT 4
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 5
61777: PUSH
61778: LD_INT 5
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: LD_INT 5
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: LD_INT 4
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 5
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: LD_INT 5
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 4
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 4
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: NEG
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 5
61986: NEG
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 5
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 5
62009: NEG
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: ST_TO_ADDR
// end ; end ;
62077: GO 62080
62079: POP
// case btype of b_depot , b_warehouse :
62080: LD_VAR 0 1
62084: PUSH
62085: LD_INT 0
62087: DOUBLE
62088: EQUAL
62089: IFTRUE 62099
62091: LD_INT 1
62093: DOUBLE
62094: EQUAL
62095: IFTRUE 62099
62097: GO 62300
62099: POP
// case nation of nation_american :
62100: LD_VAR 0 5
62104: PUSH
62105: LD_INT 1
62107: DOUBLE
62108: EQUAL
62109: IFTRUE 62113
62111: GO 62169
62113: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62114: LD_ADDR_VAR 0 9
62118: PUSH
62119: LD_VAR 0 11
62123: PUSH
62124: LD_VAR 0 12
62128: PUSH
62129: LD_VAR 0 13
62133: PUSH
62134: LD_VAR 0 14
62138: PUSH
62139: LD_VAR 0 15
62143: PUSH
62144: LD_VAR 0 16
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: PUSH
62157: LD_VAR 0 4
62161: PUSH
62162: LD_INT 1
62164: PLUS
62165: ARRAY
62166: ST_TO_ADDR
62167: GO 62298
62169: LD_INT 2
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62177
62175: GO 62233
62177: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62178: LD_ADDR_VAR 0 9
62182: PUSH
62183: LD_VAR 0 17
62187: PUSH
62188: LD_VAR 0 18
62192: PUSH
62193: LD_VAR 0 19
62197: PUSH
62198: LD_VAR 0 20
62202: PUSH
62203: LD_VAR 0 21
62207: PUSH
62208: LD_VAR 0 22
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: PUSH
62221: LD_VAR 0 4
62225: PUSH
62226: LD_INT 1
62228: PLUS
62229: ARRAY
62230: ST_TO_ADDR
62231: GO 62298
62233: LD_INT 3
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62241
62239: GO 62297
62241: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62242: LD_ADDR_VAR 0 9
62246: PUSH
62247: LD_VAR 0 23
62251: PUSH
62252: LD_VAR 0 24
62256: PUSH
62257: LD_VAR 0 25
62261: PUSH
62262: LD_VAR 0 26
62266: PUSH
62267: LD_VAR 0 27
62271: PUSH
62272: LD_VAR 0 28
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: PUSH
62285: LD_VAR 0 4
62289: PUSH
62290: LD_INT 1
62292: PLUS
62293: ARRAY
62294: ST_TO_ADDR
62295: GO 62298
62297: POP
62298: GO 62853
62300: LD_INT 2
62302: DOUBLE
62303: EQUAL
62304: IFTRUE 62314
62306: LD_INT 3
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62314
62312: GO 62370
62314: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62315: LD_ADDR_VAR 0 9
62319: PUSH
62320: LD_VAR 0 29
62324: PUSH
62325: LD_VAR 0 30
62329: PUSH
62330: LD_VAR 0 31
62334: PUSH
62335: LD_VAR 0 32
62339: PUSH
62340: LD_VAR 0 33
62344: PUSH
62345: LD_VAR 0 34
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: PUSH
62358: LD_VAR 0 4
62362: PUSH
62363: LD_INT 1
62365: PLUS
62366: ARRAY
62367: ST_TO_ADDR
62368: GO 62853
62370: LD_INT 16
62372: DOUBLE
62373: EQUAL
62374: IFTRUE 62432
62376: LD_INT 17
62378: DOUBLE
62379: EQUAL
62380: IFTRUE 62432
62382: LD_INT 18
62384: DOUBLE
62385: EQUAL
62386: IFTRUE 62432
62388: LD_INT 19
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62432
62394: LD_INT 22
62396: DOUBLE
62397: EQUAL
62398: IFTRUE 62432
62400: LD_INT 20
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62432
62406: LD_INT 21
62408: DOUBLE
62409: EQUAL
62410: IFTRUE 62432
62412: LD_INT 23
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62432
62418: LD_INT 24
62420: DOUBLE
62421: EQUAL
62422: IFTRUE 62432
62424: LD_INT 25
62426: DOUBLE
62427: EQUAL
62428: IFTRUE 62432
62430: GO 62488
62432: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62433: LD_ADDR_VAR 0 9
62437: PUSH
62438: LD_VAR 0 35
62442: PUSH
62443: LD_VAR 0 36
62447: PUSH
62448: LD_VAR 0 37
62452: PUSH
62453: LD_VAR 0 38
62457: PUSH
62458: LD_VAR 0 39
62462: PUSH
62463: LD_VAR 0 40
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 4
62480: PUSH
62481: LD_INT 1
62483: PLUS
62484: ARRAY
62485: ST_TO_ADDR
62486: GO 62853
62488: LD_INT 6
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62544
62494: LD_INT 7
62496: DOUBLE
62497: EQUAL
62498: IFTRUE 62544
62500: LD_INT 8
62502: DOUBLE
62503: EQUAL
62504: IFTRUE 62544
62506: LD_INT 13
62508: DOUBLE
62509: EQUAL
62510: IFTRUE 62544
62512: LD_INT 12
62514: DOUBLE
62515: EQUAL
62516: IFTRUE 62544
62518: LD_INT 15
62520: DOUBLE
62521: EQUAL
62522: IFTRUE 62544
62524: LD_INT 11
62526: DOUBLE
62527: EQUAL
62528: IFTRUE 62544
62530: LD_INT 14
62532: DOUBLE
62533: EQUAL
62534: IFTRUE 62544
62536: LD_INT 10
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62600
62544: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62545: LD_ADDR_VAR 0 9
62549: PUSH
62550: LD_VAR 0 41
62554: PUSH
62555: LD_VAR 0 42
62559: PUSH
62560: LD_VAR 0 43
62564: PUSH
62565: LD_VAR 0 44
62569: PUSH
62570: LD_VAR 0 45
62574: PUSH
62575: LD_VAR 0 46
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: PUSH
62588: LD_VAR 0 4
62592: PUSH
62593: LD_INT 1
62595: PLUS
62596: ARRAY
62597: ST_TO_ADDR
62598: GO 62853
62600: LD_INT 36
62602: DOUBLE
62603: EQUAL
62604: IFTRUE 62608
62606: GO 62664
62608: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62609: LD_ADDR_VAR 0 9
62613: PUSH
62614: LD_VAR 0 47
62618: PUSH
62619: LD_VAR 0 48
62623: PUSH
62624: LD_VAR 0 49
62628: PUSH
62629: LD_VAR 0 50
62633: PUSH
62634: LD_VAR 0 51
62638: PUSH
62639: LD_VAR 0 52
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: PUSH
62652: LD_VAR 0 4
62656: PUSH
62657: LD_INT 1
62659: PLUS
62660: ARRAY
62661: ST_TO_ADDR
62662: GO 62853
62664: LD_INT 4
62666: DOUBLE
62667: EQUAL
62668: IFTRUE 62690
62670: LD_INT 5
62672: DOUBLE
62673: EQUAL
62674: IFTRUE 62690
62676: LD_INT 34
62678: DOUBLE
62679: EQUAL
62680: IFTRUE 62690
62682: LD_INT 37
62684: DOUBLE
62685: EQUAL
62686: IFTRUE 62690
62688: GO 62746
62690: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62691: LD_ADDR_VAR 0 9
62695: PUSH
62696: LD_VAR 0 53
62700: PUSH
62701: LD_VAR 0 54
62705: PUSH
62706: LD_VAR 0 55
62710: PUSH
62711: LD_VAR 0 56
62715: PUSH
62716: LD_VAR 0 57
62720: PUSH
62721: LD_VAR 0 58
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 4
62738: PUSH
62739: LD_INT 1
62741: PLUS
62742: ARRAY
62743: ST_TO_ADDR
62744: GO 62853
62746: LD_INT 31
62748: DOUBLE
62749: EQUAL
62750: IFTRUE 62796
62752: LD_INT 32
62754: DOUBLE
62755: EQUAL
62756: IFTRUE 62796
62758: LD_INT 33
62760: DOUBLE
62761: EQUAL
62762: IFTRUE 62796
62764: LD_INT 27
62766: DOUBLE
62767: EQUAL
62768: IFTRUE 62796
62770: LD_INT 26
62772: DOUBLE
62773: EQUAL
62774: IFTRUE 62796
62776: LD_INT 28
62778: DOUBLE
62779: EQUAL
62780: IFTRUE 62796
62782: LD_INT 29
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62796
62788: LD_INT 30
62790: DOUBLE
62791: EQUAL
62792: IFTRUE 62796
62794: GO 62852
62796: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62797: LD_ADDR_VAR 0 9
62801: PUSH
62802: LD_VAR 0 59
62806: PUSH
62807: LD_VAR 0 60
62811: PUSH
62812: LD_VAR 0 61
62816: PUSH
62817: LD_VAR 0 62
62821: PUSH
62822: LD_VAR 0 63
62826: PUSH
62827: LD_VAR 0 64
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: LD_VAR 0 4
62844: PUSH
62845: LD_INT 1
62847: PLUS
62848: ARRAY
62849: ST_TO_ADDR
62850: GO 62853
62852: POP
// temp_list2 = [ ] ;
62853: LD_ADDR_VAR 0 10
62857: PUSH
62858: EMPTY
62859: ST_TO_ADDR
// for i in temp_list do
62860: LD_ADDR_VAR 0 8
62864: PUSH
62865: LD_VAR 0 9
62869: PUSH
62870: FOR_IN
62871: IFFALSE 62923
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62873: LD_ADDR_VAR 0 10
62877: PUSH
62878: LD_VAR 0 10
62882: PUSH
62883: LD_VAR 0 8
62887: PUSH
62888: LD_INT 1
62890: ARRAY
62891: PUSH
62892: LD_VAR 0 2
62896: PLUS
62897: PUSH
62898: LD_VAR 0 8
62902: PUSH
62903: LD_INT 2
62905: ARRAY
62906: PUSH
62907: LD_VAR 0 3
62911: PLUS
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: ADD
62920: ST_TO_ADDR
62921: GO 62870
62923: POP
62924: POP
// result = temp_list2 ;
62925: LD_ADDR_VAR 0 7
62929: PUSH
62930: LD_VAR 0 10
62934: ST_TO_ADDR
// end ;
62935: LD_VAR 0 7
62939: RET
// export function EnemyInRange ( unit , dist ) ; begin
62940: LD_INT 0
62942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: CALL_OW 255
62957: PPUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: CALL_OW 250
62967: PPUSH
62968: LD_VAR 0 1
62972: PPUSH
62973: CALL_OW 251
62977: PPUSH
62978: LD_VAR 0 2
62982: PPUSH
62983: CALL 36342 0 4
62987: PUSH
62988: LD_INT 4
62990: ARRAY
62991: ST_TO_ADDR
// end ;
62992: LD_VAR 0 3
62996: RET
// export function PlayerSeeMe ( unit ) ; begin
62997: LD_INT 0
62999: PPUSH
// result := See ( your_side , unit ) ;
63000: LD_ADDR_VAR 0 2
63004: PUSH
63005: LD_OWVAR 2
63009: PPUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL_OW 292
63019: ST_TO_ADDR
// end ;
63020: LD_VAR 0 2
63024: RET
// export function ReverseDir ( unit ) ; begin
63025: LD_INT 0
63027: PPUSH
// if not unit then
63028: LD_VAR 0 1
63032: NOT
63033: IFFALSE 63037
// exit ;
63035: GO 63060
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63037: LD_ADDR_VAR 0 2
63041: PUSH
63042: LD_VAR 0 1
63046: PPUSH
63047: CALL_OW 254
63051: PUSH
63052: LD_INT 3
63054: PLUS
63055: PUSH
63056: LD_INT 6
63058: MOD
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 2
63064: RET
// export function ReverseArray ( array ) ; var i ; begin
63065: LD_INT 0
63067: PPUSH
63068: PPUSH
// if not array then
63069: LD_VAR 0 1
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63133
// result := [ ] ;
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: EMPTY
63084: ST_TO_ADDR
// for i := array downto 1 do
63085: LD_ADDR_VAR 0 3
63089: PUSH
63090: DOUBLE
63091: LD_VAR 0 1
63095: INC
63096: ST_TO_ADDR
63097: LD_INT 1
63099: PUSH
63100: FOR_DOWNTO
63101: IFFALSE 63131
// result := Join ( result , array [ i ] ) ;
63103: LD_ADDR_VAR 0 2
63107: PUSH
63108: LD_VAR 0 2
63112: PPUSH
63113: LD_VAR 0 1
63117: PUSH
63118: LD_VAR 0 3
63122: ARRAY
63123: PPUSH
63124: CALL 67777 0 2
63128: ST_TO_ADDR
63129: GO 63100
63131: POP
63132: POP
// end ;
63133: LD_VAR 0 2
63137: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
// if not unit or not hexes then
63146: LD_VAR 0 1
63150: NOT
63151: PUSH
63152: LD_VAR 0 2
63156: NOT
63157: OR
63158: IFFALSE 63162
// exit ;
63160: GO 63285
// dist := 9999 ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: LD_INT 9999
63169: ST_TO_ADDR
// for i = 1 to hexes do
63170: LD_ADDR_VAR 0 4
63174: PUSH
63175: DOUBLE
63176: LD_INT 1
63178: DEC
63179: ST_TO_ADDR
63180: LD_VAR 0 2
63184: PUSH
63185: FOR_TO
63186: IFFALSE 63273
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63188: LD_ADDR_VAR 0 6
63192: PUSH
63193: LD_VAR 0 1
63197: PPUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_VAR 0 4
63207: ARRAY
63208: PUSH
63209: LD_INT 1
63211: ARRAY
63212: PPUSH
63213: LD_VAR 0 2
63217: PUSH
63218: LD_VAR 0 4
63222: ARRAY
63223: PUSH
63224: LD_INT 2
63226: ARRAY
63227: PPUSH
63228: CALL_OW 297
63232: ST_TO_ADDR
// if tdist < dist then
63233: LD_VAR 0 6
63237: PUSH
63238: LD_VAR 0 5
63242: LESS
63243: IFFALSE 63271
// begin hex := hexes [ i ] ;
63245: LD_ADDR_VAR 0 8
63249: PUSH
63250: LD_VAR 0 2
63254: PUSH
63255: LD_VAR 0 4
63259: ARRAY
63260: ST_TO_ADDR
// dist := tdist ;
63261: LD_ADDR_VAR 0 5
63265: PUSH
63266: LD_VAR 0 6
63270: ST_TO_ADDR
// end ; end ;
63271: GO 63185
63273: POP
63274: POP
// result := hex ;
63275: LD_ADDR_VAR 0 3
63279: PUSH
63280: LD_VAR 0 8
63284: ST_TO_ADDR
// end ;
63285: LD_VAR 0 3
63289: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63290: LD_INT 0
63292: PPUSH
63293: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63294: LD_VAR 0 1
63298: NOT
63299: PUSH
63300: LD_VAR 0 1
63304: PUSH
63305: LD_INT 21
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 23
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PPUSH
63329: CALL_OW 69
63333: IN
63334: NOT
63335: OR
63336: IFFALSE 63340
// exit ;
63338: GO 63387
// for i = 1 to 3 do
63340: LD_ADDR_VAR 0 3
63344: PUSH
63345: DOUBLE
63346: LD_INT 1
63348: DEC
63349: ST_TO_ADDR
63350: LD_INT 3
63352: PUSH
63353: FOR_TO
63354: IFFALSE 63385
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 250
63365: PPUSH
63366: LD_VAR 0 1
63370: PPUSH
63371: CALL_OW 251
63375: PPUSH
63376: LD_INT 1
63378: PPUSH
63379: CALL_OW 453
63383: GO 63353
63385: POP
63386: POP
// end ;
63387: LD_VAR 0 2
63391: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63392: LD_INT 0
63394: PPUSH
63395: PPUSH
63396: PPUSH
63397: PPUSH
63398: PPUSH
63399: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63400: LD_VAR 0 1
63404: NOT
63405: PUSH
63406: LD_VAR 0 2
63410: NOT
63411: OR
63412: PUSH
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 314
63422: OR
63423: IFFALSE 63427
// exit ;
63425: GO 63894
// if GetLives ( i ) < 250 then
63427: LD_VAR 0 4
63431: PPUSH
63432: CALL_OW 256
63436: PUSH
63437: LD_INT 250
63439: LESS
63440: IFFALSE 63453
// begin ComAutodestruct ( i ) ;
63442: LD_VAR 0 4
63446: PPUSH
63447: CALL 63290 0 1
// exit ;
63451: GO 63894
// end ; x := GetX ( enemy_unit ) ;
63453: LD_ADDR_VAR 0 7
63457: PUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: CALL_OW 250
63467: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63468: LD_ADDR_VAR 0 8
63472: PUSH
63473: LD_VAR 0 2
63477: PPUSH
63478: CALL_OW 251
63482: ST_TO_ADDR
// if not x or not y then
63483: LD_VAR 0 7
63487: NOT
63488: PUSH
63489: LD_VAR 0 8
63493: NOT
63494: OR
63495: IFFALSE 63499
// exit ;
63497: GO 63894
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63499: LD_ADDR_VAR 0 6
63503: PUSH
63504: LD_VAR 0 7
63508: PPUSH
63509: LD_INT 0
63511: PPUSH
63512: LD_INT 4
63514: PPUSH
63515: CALL_OW 272
63519: PUSH
63520: LD_VAR 0 8
63524: PPUSH
63525: LD_INT 0
63527: PPUSH
63528: LD_INT 4
63530: PPUSH
63531: CALL_OW 273
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_VAR 0 7
63544: PPUSH
63545: LD_INT 1
63547: PPUSH
63548: LD_INT 4
63550: PPUSH
63551: CALL_OW 272
63555: PUSH
63556: LD_VAR 0 8
63560: PPUSH
63561: LD_INT 1
63563: PPUSH
63564: LD_INT 4
63566: PPUSH
63567: CALL_OW 273
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_VAR 0 7
63580: PPUSH
63581: LD_INT 2
63583: PPUSH
63584: LD_INT 4
63586: PPUSH
63587: CALL_OW 272
63591: PUSH
63592: LD_VAR 0 8
63596: PPUSH
63597: LD_INT 2
63599: PPUSH
63600: LD_INT 4
63602: PPUSH
63603: CALL_OW 273
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_VAR 0 7
63616: PPUSH
63617: LD_INT 3
63619: PPUSH
63620: LD_INT 4
63622: PPUSH
63623: CALL_OW 272
63627: PUSH
63628: LD_VAR 0 8
63632: PPUSH
63633: LD_INT 3
63635: PPUSH
63636: LD_INT 4
63638: PPUSH
63639: CALL_OW 273
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_VAR 0 7
63652: PPUSH
63653: LD_INT 4
63655: PPUSH
63656: LD_INT 4
63658: PPUSH
63659: CALL_OW 272
63663: PUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: LD_INT 4
63671: PPUSH
63672: LD_INT 4
63674: PPUSH
63675: CALL_OW 273
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_VAR 0 7
63688: PPUSH
63689: LD_INT 5
63691: PPUSH
63692: LD_INT 4
63694: PPUSH
63695: CALL_OW 272
63699: PUSH
63700: LD_VAR 0 8
63704: PPUSH
63705: LD_INT 5
63707: PPUSH
63708: LD_INT 4
63710: PPUSH
63711: CALL_OW 273
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: ST_TO_ADDR
// for i = tmp downto 1 do
63728: LD_ADDR_VAR 0 4
63732: PUSH
63733: DOUBLE
63734: LD_VAR 0 6
63738: INC
63739: ST_TO_ADDR
63740: LD_INT 1
63742: PUSH
63743: FOR_DOWNTO
63744: IFFALSE 63845
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63746: LD_VAR 0 6
63750: PUSH
63751: LD_VAR 0 4
63755: ARRAY
63756: PUSH
63757: LD_INT 1
63759: ARRAY
63760: PPUSH
63761: LD_VAR 0 6
63765: PUSH
63766: LD_VAR 0 4
63770: ARRAY
63771: PUSH
63772: LD_INT 2
63774: ARRAY
63775: PPUSH
63776: CALL_OW 488
63780: NOT
63781: PUSH
63782: LD_VAR 0 6
63786: PUSH
63787: LD_VAR 0 4
63791: ARRAY
63792: PUSH
63793: LD_INT 1
63795: ARRAY
63796: PPUSH
63797: LD_VAR 0 6
63801: PUSH
63802: LD_VAR 0 4
63806: ARRAY
63807: PUSH
63808: LD_INT 2
63810: ARRAY
63811: PPUSH
63812: CALL_OW 428
63816: PUSH
63817: LD_INT 0
63819: NONEQUAL
63820: OR
63821: IFFALSE 63843
// tmp := Delete ( tmp , i ) ;
63823: LD_ADDR_VAR 0 6
63827: PUSH
63828: LD_VAR 0 6
63832: PPUSH
63833: LD_VAR 0 4
63837: PPUSH
63838: CALL_OW 3
63842: ST_TO_ADDR
63843: GO 63743
63845: POP
63846: POP
// j := GetClosestHex ( unit , tmp ) ;
63847: LD_ADDR_VAR 0 5
63851: PUSH
63852: LD_VAR 0 1
63856: PPUSH
63857: LD_VAR 0 6
63861: PPUSH
63862: CALL 63138 0 2
63866: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63867: LD_VAR 0 1
63871: PPUSH
63872: LD_VAR 0 5
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: PPUSH
63881: LD_VAR 0 5
63885: PUSH
63886: LD_INT 2
63888: ARRAY
63889: PPUSH
63890: CALL_OW 111
// end ;
63894: LD_VAR 0 3
63898: RET
// export function PrepareApemanSoldier ( ) ; begin
63899: LD_INT 0
63901: PPUSH
// uc_nation := 0 ;
63902: LD_ADDR_OWVAR 21
63906: PUSH
63907: LD_INT 0
63909: ST_TO_ADDR
// hc_sex := sex_male ;
63910: LD_ADDR_OWVAR 27
63914: PUSH
63915: LD_INT 1
63917: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63918: LD_ADDR_OWVAR 28
63922: PUSH
63923: LD_INT 15
63925: ST_TO_ADDR
// hc_gallery :=  ;
63926: LD_ADDR_OWVAR 33
63930: PUSH
63931: LD_STRING 
63933: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63934: LD_ADDR_OWVAR 31
63938: PUSH
63939: LD_INT 0
63941: PPUSH
63942: LD_INT 3
63944: PPUSH
63945: CALL_OW 12
63949: PUSH
63950: LD_INT 0
63952: PPUSH
63953: LD_INT 3
63955: PPUSH
63956: CALL_OW 12
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// end ;
63973: LD_VAR 0 1
63977: RET
// export function PrepareApemanEngineer ( ) ; begin
63978: LD_INT 0
63980: PPUSH
// uc_nation := 0 ;
63981: LD_ADDR_OWVAR 21
63985: PUSH
63986: LD_INT 0
63988: ST_TO_ADDR
// hc_sex := sex_male ;
63989: LD_ADDR_OWVAR 27
63993: PUSH
63994: LD_INT 1
63996: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63997: LD_ADDR_OWVAR 28
64001: PUSH
64002: LD_INT 16
64004: ST_TO_ADDR
// hc_gallery :=  ;
64005: LD_ADDR_OWVAR 33
64009: PUSH
64010: LD_STRING 
64012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64013: LD_ADDR_OWVAR 31
64017: PUSH
64018: LD_INT 0
64020: PPUSH
64021: LD_INT 3
64023: PPUSH
64024: CALL_OW 12
64028: PUSH
64029: LD_INT 0
64031: PPUSH
64032: LD_INT 3
64034: PPUSH
64035: CALL_OW 12
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: ST_TO_ADDR
// end ;
64052: LD_VAR 0 1
64056: RET
// export function PrepareApeman ( agressivity ) ; begin
64057: LD_INT 0
64059: PPUSH
// uc_side := 0 ;
64060: LD_ADDR_OWVAR 20
64064: PUSH
64065: LD_INT 0
64067: ST_TO_ADDR
// uc_nation := 0 ;
64068: LD_ADDR_OWVAR 21
64072: PUSH
64073: LD_INT 0
64075: ST_TO_ADDR
// hc_sex := sex_male ;
64076: LD_ADDR_OWVAR 27
64080: PUSH
64081: LD_INT 1
64083: ST_TO_ADDR
// hc_class := class_apeman ;
64084: LD_ADDR_OWVAR 28
64088: PUSH
64089: LD_INT 12
64091: ST_TO_ADDR
// hc_gallery :=  ;
64092: LD_ADDR_OWVAR 33
64096: PUSH
64097: LD_STRING 
64099: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64100: LD_ADDR_OWVAR 35
64104: PUSH
64105: LD_VAR 0 1
64109: NEG
64110: PPUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 12
64120: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64121: LD_ADDR_OWVAR 31
64125: PUSH
64126: LD_INT 0
64128: PPUSH
64129: LD_INT 3
64131: PPUSH
64132: CALL_OW 12
64136: PUSH
64137: LD_INT 0
64139: PPUSH
64140: LD_INT 3
64142: PPUSH
64143: CALL_OW 12
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// end ;
64160: LD_VAR 0 2
64164: RET
// export function PrepareTiger ( agressivity ) ; begin
64165: LD_INT 0
64167: PPUSH
// uc_side := 0 ;
64168: LD_ADDR_OWVAR 20
64172: PUSH
64173: LD_INT 0
64175: ST_TO_ADDR
// uc_nation := 0 ;
64176: LD_ADDR_OWVAR 21
64180: PUSH
64181: LD_INT 0
64183: ST_TO_ADDR
// hc_class := class_tiger ;
64184: LD_ADDR_OWVAR 28
64188: PUSH
64189: LD_INT 14
64191: ST_TO_ADDR
// hc_gallery :=  ;
64192: LD_ADDR_OWVAR 33
64196: PUSH
64197: LD_STRING 
64199: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64200: LD_ADDR_OWVAR 35
64204: PUSH
64205: LD_VAR 0 1
64209: NEG
64210: PPUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 12
64220: ST_TO_ADDR
// end ;
64221: LD_VAR 0 2
64225: RET
// export function PrepareEnchidna ( ) ; begin
64226: LD_INT 0
64228: PPUSH
// uc_side := 0 ;
64229: LD_ADDR_OWVAR 20
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// uc_nation := 0 ;
64237: LD_ADDR_OWVAR 21
64241: PUSH
64242: LD_INT 0
64244: ST_TO_ADDR
// hc_class := class_baggie ;
64245: LD_ADDR_OWVAR 28
64249: PUSH
64250: LD_INT 13
64252: ST_TO_ADDR
// hc_gallery :=  ;
64253: LD_ADDR_OWVAR 33
64257: PUSH
64258: LD_STRING 
64260: ST_TO_ADDR
// end ;
64261: LD_VAR 0 1
64265: RET
// export function PrepareFrog ( ) ; begin
64266: LD_INT 0
64268: PPUSH
// uc_side := 0 ;
64269: LD_ADDR_OWVAR 20
64273: PUSH
64274: LD_INT 0
64276: ST_TO_ADDR
// uc_nation := 0 ;
64277: LD_ADDR_OWVAR 21
64281: PUSH
64282: LD_INT 0
64284: ST_TO_ADDR
// hc_class := class_frog ;
64285: LD_ADDR_OWVAR 28
64289: PUSH
64290: LD_INT 19
64292: ST_TO_ADDR
// hc_gallery :=  ;
64293: LD_ADDR_OWVAR 33
64297: PUSH
64298: LD_STRING 
64300: ST_TO_ADDR
// end ;
64301: LD_VAR 0 1
64305: RET
// export function PrepareFish ( ) ; begin
64306: LD_INT 0
64308: PPUSH
// uc_side := 0 ;
64309: LD_ADDR_OWVAR 20
64313: PUSH
64314: LD_INT 0
64316: ST_TO_ADDR
// uc_nation := 0 ;
64317: LD_ADDR_OWVAR 21
64321: PUSH
64322: LD_INT 0
64324: ST_TO_ADDR
// hc_class := class_fish ;
64325: LD_ADDR_OWVAR 28
64329: PUSH
64330: LD_INT 20
64332: ST_TO_ADDR
// hc_gallery :=  ;
64333: LD_ADDR_OWVAR 33
64337: PUSH
64338: LD_STRING 
64340: ST_TO_ADDR
// end ;
64341: LD_VAR 0 1
64345: RET
// export function PrepareBird ( ) ; begin
64346: LD_INT 0
64348: PPUSH
// uc_side := 0 ;
64349: LD_ADDR_OWVAR 20
64353: PUSH
64354: LD_INT 0
64356: ST_TO_ADDR
// uc_nation := 0 ;
64357: LD_ADDR_OWVAR 21
64361: PUSH
64362: LD_INT 0
64364: ST_TO_ADDR
// hc_class := class_phororhacos ;
64365: LD_ADDR_OWVAR 28
64369: PUSH
64370: LD_INT 18
64372: ST_TO_ADDR
// hc_gallery :=  ;
64373: LD_ADDR_OWVAR 33
64377: PUSH
64378: LD_STRING 
64380: ST_TO_ADDR
// end ;
64381: LD_VAR 0 1
64385: RET
// export function PrepareHorse ( ) ; begin
64386: LD_INT 0
64388: PPUSH
// uc_side := 0 ;
64389: LD_ADDR_OWVAR 20
64393: PUSH
64394: LD_INT 0
64396: ST_TO_ADDR
// uc_nation := 0 ;
64397: LD_ADDR_OWVAR 21
64401: PUSH
64402: LD_INT 0
64404: ST_TO_ADDR
// hc_class := class_horse ;
64405: LD_ADDR_OWVAR 28
64409: PUSH
64410: LD_INT 21
64412: ST_TO_ADDR
// hc_gallery :=  ;
64413: LD_ADDR_OWVAR 33
64417: PUSH
64418: LD_STRING 
64420: ST_TO_ADDR
// end ;
64421: LD_VAR 0 1
64425: RET
// export function PrepareMastodont ( ) ; begin
64426: LD_INT 0
64428: PPUSH
// uc_side := 0 ;
64429: LD_ADDR_OWVAR 20
64433: PUSH
64434: LD_INT 0
64436: ST_TO_ADDR
// uc_nation := 0 ;
64437: LD_ADDR_OWVAR 21
64441: PUSH
64442: LD_INT 0
64444: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64445: LD_ADDR_OWVAR 37
64449: PUSH
64450: LD_INT 31
64452: ST_TO_ADDR
// vc_control := control_rider ;
64453: LD_ADDR_OWVAR 38
64457: PUSH
64458: LD_INT 4
64460: ST_TO_ADDR
// end ;
64461: LD_VAR 0 1
64465: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64466: LD_INT 0
64468: PPUSH
64469: PPUSH
64470: PPUSH
// uc_side = 0 ;
64471: LD_ADDR_OWVAR 20
64475: PUSH
64476: LD_INT 0
64478: ST_TO_ADDR
// uc_nation = 0 ;
64479: LD_ADDR_OWVAR 21
64483: PUSH
64484: LD_INT 0
64486: ST_TO_ADDR
// InitHc_All ( ) ;
64487: CALL_OW 584
// InitVc ;
64491: CALL_OW 20
// if mastodonts then
64495: LD_VAR 0 6
64499: IFFALSE 64566
// for i = 1 to mastodonts do
64501: LD_ADDR_VAR 0 11
64505: PUSH
64506: DOUBLE
64507: LD_INT 1
64509: DEC
64510: ST_TO_ADDR
64511: LD_VAR 0 6
64515: PUSH
64516: FOR_TO
64517: IFFALSE 64564
// begin vc_chassis := 31 ;
64519: LD_ADDR_OWVAR 37
64523: PUSH
64524: LD_INT 31
64526: ST_TO_ADDR
// vc_control := control_rider ;
64527: LD_ADDR_OWVAR 38
64531: PUSH
64532: LD_INT 4
64534: ST_TO_ADDR
// animal := CreateVehicle ;
64535: LD_ADDR_VAR 0 12
64539: PUSH
64540: CALL_OW 45
64544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64545: LD_VAR 0 12
64549: PPUSH
64550: LD_VAR 0 8
64554: PPUSH
64555: LD_INT 0
64557: PPUSH
64558: CALL 66694 0 3
// end ;
64562: GO 64516
64564: POP
64565: POP
// if horses then
64566: LD_VAR 0 5
64570: IFFALSE 64637
// for i = 1 to horses do
64572: LD_ADDR_VAR 0 11
64576: PUSH
64577: DOUBLE
64578: LD_INT 1
64580: DEC
64581: ST_TO_ADDR
64582: LD_VAR 0 5
64586: PUSH
64587: FOR_TO
64588: IFFALSE 64635
// begin hc_class := 21 ;
64590: LD_ADDR_OWVAR 28
64594: PUSH
64595: LD_INT 21
64597: ST_TO_ADDR
// hc_gallery :=  ;
64598: LD_ADDR_OWVAR 33
64602: PUSH
64603: LD_STRING 
64605: ST_TO_ADDR
// animal := CreateHuman ;
64606: LD_ADDR_VAR 0 12
64610: PUSH
64611: CALL_OW 44
64615: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64616: LD_VAR 0 12
64620: PPUSH
64621: LD_VAR 0 8
64625: PPUSH
64626: LD_INT 0
64628: PPUSH
64629: CALL 66694 0 3
// end ;
64633: GO 64587
64635: POP
64636: POP
// if birds then
64637: LD_VAR 0 1
64641: IFFALSE 64708
// for i = 1 to birds do
64643: LD_ADDR_VAR 0 11
64647: PUSH
64648: DOUBLE
64649: LD_INT 1
64651: DEC
64652: ST_TO_ADDR
64653: LD_VAR 0 1
64657: PUSH
64658: FOR_TO
64659: IFFALSE 64706
// begin hc_class = 18 ;
64661: LD_ADDR_OWVAR 28
64665: PUSH
64666: LD_INT 18
64668: ST_TO_ADDR
// hc_gallery =  ;
64669: LD_ADDR_OWVAR 33
64673: PUSH
64674: LD_STRING 
64676: ST_TO_ADDR
// animal := CreateHuman ;
64677: LD_ADDR_VAR 0 12
64681: PUSH
64682: CALL_OW 44
64686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64687: LD_VAR 0 12
64691: PPUSH
64692: LD_VAR 0 8
64696: PPUSH
64697: LD_INT 0
64699: PPUSH
64700: CALL 66694 0 3
// end ;
64704: GO 64658
64706: POP
64707: POP
// if tigers then
64708: LD_VAR 0 2
64712: IFFALSE 64796
// for i = 1 to tigers do
64714: LD_ADDR_VAR 0 11
64718: PUSH
64719: DOUBLE
64720: LD_INT 1
64722: DEC
64723: ST_TO_ADDR
64724: LD_VAR 0 2
64728: PUSH
64729: FOR_TO
64730: IFFALSE 64794
// begin hc_class = class_tiger ;
64732: LD_ADDR_OWVAR 28
64736: PUSH
64737: LD_INT 14
64739: ST_TO_ADDR
// hc_gallery =  ;
64740: LD_ADDR_OWVAR 33
64744: PUSH
64745: LD_STRING 
64747: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64748: LD_ADDR_OWVAR 35
64752: PUSH
64753: LD_INT 7
64755: NEG
64756: PPUSH
64757: LD_INT 7
64759: PPUSH
64760: CALL_OW 12
64764: ST_TO_ADDR
// animal := CreateHuman ;
64765: LD_ADDR_VAR 0 12
64769: PUSH
64770: CALL_OW 44
64774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64775: LD_VAR 0 12
64779: PPUSH
64780: LD_VAR 0 8
64784: PPUSH
64785: LD_INT 0
64787: PPUSH
64788: CALL 66694 0 3
// end ;
64792: GO 64729
64794: POP
64795: POP
// if apemans then
64796: LD_VAR 0 3
64800: IFFALSE 64923
// for i = 1 to apemans do
64802: LD_ADDR_VAR 0 11
64806: PUSH
64807: DOUBLE
64808: LD_INT 1
64810: DEC
64811: ST_TO_ADDR
64812: LD_VAR 0 3
64816: PUSH
64817: FOR_TO
64818: IFFALSE 64921
// begin hc_class = class_apeman ;
64820: LD_ADDR_OWVAR 28
64824: PUSH
64825: LD_INT 12
64827: ST_TO_ADDR
// hc_gallery =  ;
64828: LD_ADDR_OWVAR 33
64832: PUSH
64833: LD_STRING 
64835: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64836: LD_ADDR_OWVAR 35
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PPUSH
64845: LD_INT 2
64847: PPUSH
64848: CALL_OW 12
64852: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64853: LD_ADDR_OWVAR 31
64857: PUSH
64858: LD_INT 1
64860: PPUSH
64861: LD_INT 3
64863: PPUSH
64864: CALL_OW 12
64868: PUSH
64869: LD_INT 1
64871: PPUSH
64872: LD_INT 3
64874: PPUSH
64875: CALL_OW 12
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: ST_TO_ADDR
// animal := CreateHuman ;
64892: LD_ADDR_VAR 0 12
64896: PUSH
64897: CALL_OW 44
64901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64902: LD_VAR 0 12
64906: PPUSH
64907: LD_VAR 0 8
64911: PPUSH
64912: LD_INT 0
64914: PPUSH
64915: CALL 66694 0 3
// end ;
64919: GO 64817
64921: POP
64922: POP
// if enchidnas then
64923: LD_VAR 0 4
64927: IFFALSE 64994
// for i = 1 to enchidnas do
64929: LD_ADDR_VAR 0 11
64933: PUSH
64934: DOUBLE
64935: LD_INT 1
64937: DEC
64938: ST_TO_ADDR
64939: LD_VAR 0 4
64943: PUSH
64944: FOR_TO
64945: IFFALSE 64992
// begin hc_class = 13 ;
64947: LD_ADDR_OWVAR 28
64951: PUSH
64952: LD_INT 13
64954: ST_TO_ADDR
// hc_gallery =  ;
64955: LD_ADDR_OWVAR 33
64959: PUSH
64960: LD_STRING 
64962: ST_TO_ADDR
// animal := CreateHuman ;
64963: LD_ADDR_VAR 0 12
64967: PUSH
64968: CALL_OW 44
64972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64973: LD_VAR 0 12
64977: PPUSH
64978: LD_VAR 0 8
64982: PPUSH
64983: LD_INT 0
64985: PPUSH
64986: CALL 66694 0 3
// end ;
64990: GO 64944
64992: POP
64993: POP
// if fishes then
64994: LD_VAR 0 7
64998: IFFALSE 65065
// for i = 1 to fishes do
65000: LD_ADDR_VAR 0 11
65004: PUSH
65005: DOUBLE
65006: LD_INT 1
65008: DEC
65009: ST_TO_ADDR
65010: LD_VAR 0 7
65014: PUSH
65015: FOR_TO
65016: IFFALSE 65063
// begin hc_class = 20 ;
65018: LD_ADDR_OWVAR 28
65022: PUSH
65023: LD_INT 20
65025: ST_TO_ADDR
// hc_gallery =  ;
65026: LD_ADDR_OWVAR 33
65030: PUSH
65031: LD_STRING 
65033: ST_TO_ADDR
// animal := CreateHuman ;
65034: LD_ADDR_VAR 0 12
65038: PUSH
65039: CALL_OW 44
65043: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65044: LD_VAR 0 12
65048: PPUSH
65049: LD_VAR 0 9
65053: PPUSH
65054: LD_INT 0
65056: PPUSH
65057: CALL 66694 0 3
// end ;
65061: GO 65015
65063: POP
65064: POP
// end ;
65065: LD_VAR 0 10
65069: RET
// export function WantHeal ( sci , unit ) ; begin
65070: LD_INT 0
65072: PPUSH
// if GetTaskList ( sci ) > 0 then
65073: LD_VAR 0 1
65077: PPUSH
65078: CALL_OW 437
65082: PUSH
65083: LD_INT 0
65085: GREATER
65086: IFFALSE 65156
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 437
65097: PUSH
65098: LD_INT 1
65100: ARRAY
65101: PUSH
65102: LD_INT 1
65104: ARRAY
65105: PUSH
65106: LD_STRING l
65108: EQUAL
65109: PUSH
65110: LD_VAR 0 1
65114: PPUSH
65115: CALL_OW 437
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PUSH
65124: LD_INT 4
65126: ARRAY
65127: PUSH
65128: LD_VAR 0 2
65132: EQUAL
65133: AND
65134: IFFALSE 65146
// result := true else
65136: LD_ADDR_VAR 0 3
65140: PUSH
65141: LD_INT 1
65143: ST_TO_ADDR
65144: GO 65154
// result := false ;
65146: LD_ADDR_VAR 0 3
65150: PUSH
65151: LD_INT 0
65153: ST_TO_ADDR
// end else
65154: GO 65164
// result := false ;
65156: LD_ADDR_VAR 0 3
65160: PUSH
65161: LD_INT 0
65163: ST_TO_ADDR
// end ;
65164: LD_VAR 0 3
65168: RET
// export function HealTarget ( sci ) ; begin
65169: LD_INT 0
65171: PPUSH
// if not sci then
65172: LD_VAR 0 1
65176: NOT
65177: IFFALSE 65181
// exit ;
65179: GO 65246
// result := 0 ;
65181: LD_ADDR_VAR 0 2
65185: PUSH
65186: LD_INT 0
65188: ST_TO_ADDR
// if GetTaskList ( sci ) then
65189: LD_VAR 0 1
65193: PPUSH
65194: CALL_OW 437
65198: IFFALSE 65246
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 437
65209: PUSH
65210: LD_INT 1
65212: ARRAY
65213: PUSH
65214: LD_INT 1
65216: ARRAY
65217: PUSH
65218: LD_STRING l
65220: EQUAL
65221: IFFALSE 65246
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65223: LD_ADDR_VAR 0 2
65227: PUSH
65228: LD_VAR 0 1
65232: PPUSH
65233: CALL_OW 437
65237: PUSH
65238: LD_INT 1
65240: ARRAY
65241: PUSH
65242: LD_INT 4
65244: ARRAY
65245: ST_TO_ADDR
// end ;
65246: LD_VAR 0 2
65250: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65251: LD_INT 0
65253: PPUSH
65254: PPUSH
65255: PPUSH
65256: PPUSH
// if not base_units then
65257: LD_VAR 0 1
65261: NOT
65262: IFFALSE 65266
// exit ;
65264: GO 65353
// result := false ;
65266: LD_ADDR_VAR 0 2
65270: PUSH
65271: LD_INT 0
65273: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65274: LD_ADDR_VAR 0 5
65278: PUSH
65279: LD_VAR 0 1
65283: PPUSH
65284: LD_INT 21
65286: PUSH
65287: LD_INT 3
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PPUSH
65294: CALL_OW 72
65298: ST_TO_ADDR
// if not tmp then
65299: LD_VAR 0 5
65303: NOT
65304: IFFALSE 65308
// exit ;
65306: GO 65353
// for i in tmp do
65308: LD_ADDR_VAR 0 3
65312: PUSH
65313: LD_VAR 0 5
65317: PUSH
65318: FOR_IN
65319: IFFALSE 65351
// begin result := EnemyInRange ( i , 22 ) ;
65321: LD_ADDR_VAR 0 2
65325: PUSH
65326: LD_VAR 0 3
65330: PPUSH
65331: LD_INT 22
65333: PPUSH
65334: CALL 62940 0 2
65338: ST_TO_ADDR
// if result then
65339: LD_VAR 0 2
65343: IFFALSE 65349
// exit ;
65345: POP
65346: POP
65347: GO 65353
// end ;
65349: GO 65318
65351: POP
65352: POP
// end ;
65353: LD_VAR 0 2
65357: RET
// export function FilterByTag ( units , tag ) ; begin
65358: LD_INT 0
65360: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65361: LD_ADDR_VAR 0 3
65365: PUSH
65366: LD_VAR 0 1
65370: PPUSH
65371: LD_INT 120
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PPUSH
65383: CALL_OW 72
65387: ST_TO_ADDR
// end ;
65388: LD_VAR 0 3
65392: RET
// export function IsDriver ( un ) ; begin
65393: LD_INT 0
65395: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65396: LD_ADDR_VAR 0 2
65400: PUSH
65401: LD_VAR 0 1
65405: PUSH
65406: LD_INT 55
65408: PUSH
65409: EMPTY
65410: LIST
65411: PPUSH
65412: CALL_OW 69
65416: IN
65417: ST_TO_ADDR
// end ;
65418: LD_VAR 0 2
65422: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65423: LD_INT 0
65425: PPUSH
65426: PPUSH
// list := [ ] ;
65427: LD_ADDR_VAR 0 5
65431: PUSH
65432: EMPTY
65433: ST_TO_ADDR
// case d of 0 :
65434: LD_VAR 0 3
65438: PUSH
65439: LD_INT 0
65441: DOUBLE
65442: EQUAL
65443: IFTRUE 65447
65445: GO 65580
65447: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65448: LD_ADDR_VAR 0 5
65452: PUSH
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 4
65460: MINUS
65461: PUSH
65462: LD_VAR 0 2
65466: PUSH
65467: LD_INT 4
65469: MINUS
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 1
65483: PUSH
65484: LD_INT 3
65486: MINUS
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: LD_VAR 0 1
65505: PUSH
65506: LD_INT 4
65508: PLUS
65509: PUSH
65510: LD_VAR 0 2
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 3
65530: PLUS
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 3
65539: PLUS
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: PLUS
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: ST_TO_ADDR
// end ; 1 :
65578: GO 66278
65580: LD_INT 1
65582: DOUBLE
65583: EQUAL
65584: IFTRUE 65588
65586: GO 65721
65588: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65589: LD_ADDR_VAR 0 5
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: LD_VAR 0 2
65603: PUSH
65604: LD_INT 4
65606: MINUS
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: LD_INT 3
65623: MINUS
65624: PUSH
65625: LD_VAR 0 2
65629: PUSH
65630: LD_INT 3
65632: MINUS
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: LD_INT 4
65649: MINUS
65650: PUSH
65651: LD_VAR 0 2
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: PUSH
65664: LD_VAR 0 1
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 3
65676: PLUS
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 4
65693: PLUS
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 4
65702: PLUS
65703: PUSH
65704: LD_INT 5
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// end ; 2 :
65719: GO 66278
65721: LD_INT 2
65723: DOUBLE
65724: EQUAL
65725: IFTRUE 65729
65727: GO 65858
65729: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65730: LD_ADDR_VAR 0 5
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_VAR 0 2
65744: PUSH
65745: LD_INT 3
65747: MINUS
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 4
65764: PLUS
65765: PUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 4
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_VAR 0 2
65788: PUSH
65789: LD_INT 4
65791: PLUS
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_INT 3
65808: MINUS
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: LD_INT 4
65830: MINUS
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_INT 4
65839: MINUS
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// end ; 3 :
65856: GO 66278
65858: LD_INT 3
65860: DOUBLE
65861: EQUAL
65862: IFTRUE 65866
65864: GO 65999
65866: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65867: LD_ADDR_VAR 0 5
65871: PUSH
65872: LD_VAR 0 1
65876: PUSH
65877: LD_INT 3
65879: PLUS
65880: PUSH
65881: LD_VAR 0 2
65885: PUSH
65886: LD_INT 4
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: PUSH
65894: LD_VAR 0 1
65898: PUSH
65899: LD_INT 4
65901: PLUS
65902: PUSH
65903: LD_VAR 0 2
65907: PUSH
65908: LD_INT 4
65910: PLUS
65911: PUSH
65912: LD_INT 5
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: PUSH
65920: LD_VAR 0 1
65924: PUSH
65925: LD_INT 4
65927: MINUS
65928: PUSH
65929: LD_VAR 0 2
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: PUSH
65942: LD_VAR 0 1
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 4
65954: MINUS
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: PUSH
65964: LD_VAR 0 1
65968: PUSH
65969: LD_INT 3
65971: MINUS
65972: PUSH
65973: LD_VAR 0 2
65977: PUSH
65978: LD_INT 3
65980: MINUS
65981: PUSH
65982: LD_INT 2
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: LIST
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: ST_TO_ADDR
// end ; 4 :
65997: GO 66278
65999: LD_INT 4
66001: DOUBLE
66002: EQUAL
66003: IFTRUE 66007
66005: GO 66140
66007: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66008: LD_ADDR_VAR 0 5
66012: PUSH
66013: LD_VAR 0 1
66017: PUSH
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 4
66025: PLUS
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: PUSH
66035: LD_VAR 0 1
66039: PUSH
66040: LD_INT 3
66042: PLUS
66043: PUSH
66044: LD_VAR 0 2
66048: PUSH
66049: LD_INT 3
66051: PLUS
66052: PUSH
66053: LD_INT 5
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: LD_VAR 0 1
66065: PUSH
66066: LD_INT 4
66068: PLUS
66069: PUSH
66070: LD_VAR 0 2
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: PUSH
66083: LD_VAR 0 1
66087: PUSH
66088: LD_VAR 0 2
66092: PUSH
66093: LD_INT 3
66095: MINUS
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: LIST
66104: PUSH
66105: LD_VAR 0 1
66109: PUSH
66110: LD_INT 4
66112: MINUS
66113: PUSH
66114: LD_VAR 0 2
66118: PUSH
66119: LD_INT 4
66121: MINUS
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// end ; 5 :
66138: GO 66278
66140: LD_INT 5
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66148
66146: GO 66277
66148: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66149: LD_ADDR_VAR 0 5
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: LD_INT 4
66161: MINUS
66162: PUSH
66163: LD_VAR 0 2
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: LD_VAR 0 2
66185: PUSH
66186: LD_INT 4
66188: MINUS
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: PUSH
66198: LD_VAR 0 1
66202: PUSH
66203: LD_INT 4
66205: PLUS
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: LD_INT 4
66214: PLUS
66215: PUSH
66216: LD_INT 5
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: LD_VAR 0 1
66228: PUSH
66229: LD_INT 3
66231: PLUS
66232: PUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: LD_VAR 0 1
66250: PUSH
66251: LD_VAR 0 2
66255: PUSH
66256: LD_INT 3
66258: PLUS
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: LIST
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// end ; end ;
66275: GO 66278
66277: POP
// result := list ;
66278: LD_ADDR_VAR 0 4
66282: PUSH
66283: LD_VAR 0 5
66287: ST_TO_ADDR
// end ;
66288: LD_VAR 0 4
66292: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66293: LD_INT 0
66295: PPUSH
66296: PPUSH
66297: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66298: LD_VAR 0 1
66302: NOT
66303: PUSH
66304: LD_VAR 0 2
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: LD_INT 4
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: IN
66327: NOT
66328: OR
66329: IFFALSE 66333
// exit ;
66331: GO 66416
// tmp := [ ] ;
66333: LD_ADDR_VAR 0 5
66337: PUSH
66338: EMPTY
66339: ST_TO_ADDR
// for i in units do
66340: LD_ADDR_VAR 0 4
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: FOR_IN
66351: IFFALSE 66385
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66353: LD_ADDR_VAR 0 5
66357: PUSH
66358: LD_VAR 0 5
66362: PPUSH
66363: LD_VAR 0 4
66367: PPUSH
66368: LD_VAR 0 2
66372: PPUSH
66373: CALL_OW 259
66377: PPUSH
66378: CALL 67777 0 2
66382: ST_TO_ADDR
66383: GO 66350
66385: POP
66386: POP
// if not tmp then
66387: LD_VAR 0 5
66391: NOT
66392: IFFALSE 66396
// exit ;
66394: GO 66416
// result := SortListByListDesc ( units , tmp ) ;
66396: LD_ADDR_VAR 0 3
66400: PUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: LD_VAR 0 5
66410: PPUSH
66411: CALL_OW 77
66415: ST_TO_ADDR
// end ;
66416: LD_VAR 0 3
66420: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66421: LD_INT 0
66423: PPUSH
66424: PPUSH
66425: PPUSH
// result := false ;
66426: LD_ADDR_VAR 0 3
66430: PUSH
66431: LD_INT 0
66433: ST_TO_ADDR
// if not building then
66434: LD_VAR 0 2
66438: NOT
66439: IFFALSE 66443
// exit ;
66441: GO 66581
// x := GetX ( building ) ;
66443: LD_ADDR_VAR 0 4
66447: PUSH
66448: LD_VAR 0 2
66452: PPUSH
66453: CALL_OW 250
66457: ST_TO_ADDR
// y := GetY ( building ) ;
66458: LD_ADDR_VAR 0 5
66462: PUSH
66463: LD_VAR 0 2
66467: PPUSH
66468: CALL_OW 251
66472: ST_TO_ADDR
// if not x or not y then
66473: LD_VAR 0 4
66477: NOT
66478: PUSH
66479: LD_VAR 0 5
66483: NOT
66484: OR
66485: IFFALSE 66489
// exit ;
66487: GO 66581
// if GetTaskList ( unit ) then
66489: LD_VAR 0 1
66493: PPUSH
66494: CALL_OW 437
66498: IFFALSE 66581
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66500: LD_STRING e
66502: PUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: CALL_OW 437
66512: PUSH
66513: LD_INT 1
66515: ARRAY
66516: PUSH
66517: LD_INT 1
66519: ARRAY
66520: EQUAL
66521: PUSH
66522: LD_VAR 0 4
66526: PUSH
66527: LD_VAR 0 1
66531: PPUSH
66532: CALL_OW 437
66536: PUSH
66537: LD_INT 1
66539: ARRAY
66540: PUSH
66541: LD_INT 2
66543: ARRAY
66544: EQUAL
66545: AND
66546: PUSH
66547: LD_VAR 0 5
66551: PUSH
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 437
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: PUSH
66566: LD_INT 3
66568: ARRAY
66569: EQUAL
66570: AND
66571: IFFALSE 66581
// result := true end ;
66573: LD_ADDR_VAR 0 3
66577: PUSH
66578: LD_INT 1
66580: ST_TO_ADDR
// end ;
66581: LD_VAR 0 3
66585: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66586: LD_INT 0
66588: PPUSH
// result := false ;
66589: LD_ADDR_VAR 0 4
66593: PUSH
66594: LD_INT 0
66596: ST_TO_ADDR
// if GetTaskList ( unit ) then
66597: LD_VAR 0 1
66601: PPUSH
66602: CALL_OW 437
66606: IFFALSE 66689
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66608: LD_STRING M
66610: PUSH
66611: LD_VAR 0 1
66615: PPUSH
66616: CALL_OW 437
66620: PUSH
66621: LD_INT 1
66623: ARRAY
66624: PUSH
66625: LD_INT 1
66627: ARRAY
66628: EQUAL
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: LD_VAR 0 1
66639: PPUSH
66640: CALL_OW 437
66644: PUSH
66645: LD_INT 1
66647: ARRAY
66648: PUSH
66649: LD_INT 2
66651: ARRAY
66652: EQUAL
66653: AND
66654: PUSH
66655: LD_VAR 0 3
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 437
66669: PUSH
66670: LD_INT 1
66672: ARRAY
66673: PUSH
66674: LD_INT 3
66676: ARRAY
66677: EQUAL
66678: AND
66679: IFFALSE 66689
// result := true ;
66681: LD_ADDR_VAR 0 4
66685: PUSH
66686: LD_INT 1
66688: ST_TO_ADDR
// end ; end ;
66689: LD_VAR 0 4
66693: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66694: LD_INT 0
66696: PPUSH
66697: PPUSH
66698: PPUSH
66699: PPUSH
// if not unit or not area then
66700: LD_VAR 0 1
66704: NOT
66705: PUSH
66706: LD_VAR 0 2
66710: NOT
66711: OR
66712: IFFALSE 66716
// exit ;
66714: GO 66880
// tmp := AreaToList ( area , i ) ;
66716: LD_ADDR_VAR 0 6
66720: PUSH
66721: LD_VAR 0 2
66725: PPUSH
66726: LD_VAR 0 5
66730: PPUSH
66731: CALL_OW 517
66735: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66736: LD_ADDR_VAR 0 5
66740: PUSH
66741: DOUBLE
66742: LD_INT 1
66744: DEC
66745: ST_TO_ADDR
66746: LD_VAR 0 6
66750: PUSH
66751: LD_INT 1
66753: ARRAY
66754: PUSH
66755: FOR_TO
66756: IFFALSE 66878
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66758: LD_ADDR_VAR 0 7
66762: PUSH
66763: LD_VAR 0 6
66767: PUSH
66768: LD_INT 1
66770: ARRAY
66771: PUSH
66772: LD_VAR 0 5
66776: ARRAY
66777: PUSH
66778: LD_VAR 0 6
66782: PUSH
66783: LD_INT 2
66785: ARRAY
66786: PUSH
66787: LD_VAR 0 5
66791: ARRAY
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66797: LD_VAR 0 7
66801: PUSH
66802: LD_INT 1
66804: ARRAY
66805: PPUSH
66806: LD_VAR 0 7
66810: PUSH
66811: LD_INT 2
66813: ARRAY
66814: PPUSH
66815: CALL_OW 428
66819: PUSH
66820: LD_INT 0
66822: EQUAL
66823: IFFALSE 66876
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66825: LD_VAR 0 1
66829: PPUSH
66830: LD_VAR 0 7
66834: PUSH
66835: LD_INT 1
66837: ARRAY
66838: PPUSH
66839: LD_VAR 0 7
66843: PUSH
66844: LD_INT 2
66846: ARRAY
66847: PPUSH
66848: LD_VAR 0 3
66852: PPUSH
66853: CALL_OW 48
// result := IsPlaced ( unit ) ;
66857: LD_ADDR_VAR 0 4
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: CALL_OW 305
66871: ST_TO_ADDR
// exit ;
66872: POP
66873: POP
66874: GO 66880
// end ; end ;
66876: GO 66755
66878: POP
66879: POP
// end ;
66880: LD_VAR 0 4
66884: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66885: LD_INT 0
66887: PPUSH
66888: PPUSH
66889: PPUSH
// if not side or side > 8 then
66890: LD_VAR 0 1
66894: NOT
66895: PUSH
66896: LD_VAR 0 1
66900: PUSH
66901: LD_INT 8
66903: GREATER
66904: OR
66905: IFFALSE 66909
// exit ;
66907: GO 67096
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66909: LD_ADDR_VAR 0 4
66913: PUSH
66914: LD_INT 22
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 21
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PPUSH
66940: CALL_OW 69
66944: ST_TO_ADDR
// if not tmp then
66945: LD_VAR 0 4
66949: NOT
66950: IFFALSE 66954
// exit ;
66952: GO 67096
// enable_addtolog := true ;
66954: LD_ADDR_OWVAR 81
66958: PUSH
66959: LD_INT 1
66961: ST_TO_ADDR
// AddToLog ( [ ) ;
66962: LD_STRING [
66964: PPUSH
66965: CALL_OW 561
// for i in tmp do
66969: LD_ADDR_VAR 0 3
66973: PUSH
66974: LD_VAR 0 4
66978: PUSH
66979: FOR_IN
66980: IFFALSE 67087
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66982: LD_STRING [
66984: PUSH
66985: LD_VAR 0 3
66989: PPUSH
66990: CALL_OW 266
66994: STR
66995: PUSH
66996: LD_STRING , 
66998: STR
66999: PUSH
67000: LD_VAR 0 3
67004: PPUSH
67005: CALL_OW 250
67009: STR
67010: PUSH
67011: LD_STRING , 
67013: STR
67014: PUSH
67015: LD_VAR 0 3
67019: PPUSH
67020: CALL_OW 251
67024: STR
67025: PUSH
67026: LD_STRING , 
67028: STR
67029: PUSH
67030: LD_VAR 0 3
67034: PPUSH
67035: CALL_OW 254
67039: STR
67040: PUSH
67041: LD_STRING , 
67043: STR
67044: PUSH
67045: LD_VAR 0 3
67049: PPUSH
67050: LD_INT 1
67052: PPUSH
67053: CALL_OW 268
67057: STR
67058: PUSH
67059: LD_STRING , 
67061: STR
67062: PUSH
67063: LD_VAR 0 3
67067: PPUSH
67068: LD_INT 2
67070: PPUSH
67071: CALL_OW 268
67075: STR
67076: PUSH
67077: LD_STRING ],
67079: STR
67080: PPUSH
67081: CALL_OW 561
// end ;
67085: GO 66979
67087: POP
67088: POP
// AddToLog ( ]; ) ;
67089: LD_STRING ];
67091: PPUSH
67092: CALL_OW 561
// end ;
67096: LD_VAR 0 2
67100: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67101: LD_INT 0
67103: PPUSH
67104: PPUSH
67105: PPUSH
67106: PPUSH
67107: PPUSH
// if not area or not rate or not max then
67108: LD_VAR 0 1
67112: NOT
67113: PUSH
67114: LD_VAR 0 2
67118: NOT
67119: OR
67120: PUSH
67121: LD_VAR 0 4
67125: NOT
67126: OR
67127: IFFALSE 67131
// exit ;
67129: GO 67320
// while 1 do
67131: LD_INT 1
67133: IFFALSE 67320
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67135: LD_ADDR_VAR 0 9
67139: PUSH
67140: LD_VAR 0 1
67144: PPUSH
67145: LD_INT 1
67147: PPUSH
67148: CALL_OW 287
67152: PUSH
67153: LD_INT 10
67155: MUL
67156: ST_TO_ADDR
// r := rate / 10 ;
67157: LD_ADDR_VAR 0 7
67161: PUSH
67162: LD_VAR 0 2
67166: PUSH
67167: LD_INT 10
67169: DIVREAL
67170: ST_TO_ADDR
// time := 1 1$00 ;
67171: LD_ADDR_VAR 0 8
67175: PUSH
67176: LD_INT 2100
67178: ST_TO_ADDR
// if amount < min then
67179: LD_VAR 0 9
67183: PUSH
67184: LD_VAR 0 3
67188: LESS
67189: IFFALSE 67207
// r := r * 2 else
67191: LD_ADDR_VAR 0 7
67195: PUSH
67196: LD_VAR 0 7
67200: PUSH
67201: LD_INT 2
67203: MUL
67204: ST_TO_ADDR
67205: GO 67233
// if amount > max then
67207: LD_VAR 0 9
67211: PUSH
67212: LD_VAR 0 4
67216: GREATER
67217: IFFALSE 67233
// r := r / 2 ;
67219: LD_ADDR_VAR 0 7
67223: PUSH
67224: LD_VAR 0 7
67228: PUSH
67229: LD_INT 2
67231: DIVREAL
67232: ST_TO_ADDR
// time := time / r ;
67233: LD_ADDR_VAR 0 8
67237: PUSH
67238: LD_VAR 0 8
67242: PUSH
67243: LD_VAR 0 7
67247: DIVREAL
67248: ST_TO_ADDR
// if time < 0 then
67249: LD_VAR 0 8
67253: PUSH
67254: LD_INT 0
67256: LESS
67257: IFFALSE 67274
// time := time * - 1 ;
67259: LD_ADDR_VAR 0 8
67263: PUSH
67264: LD_VAR 0 8
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: MUL
67273: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67274: LD_VAR 0 8
67278: PUSH
67279: LD_INT 35
67281: PPUSH
67282: LD_INT 875
67284: PPUSH
67285: CALL_OW 12
67289: PLUS
67290: PPUSH
67291: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67295: LD_INT 1
67297: PPUSH
67298: LD_INT 5
67300: PPUSH
67301: CALL_OW 12
67305: PPUSH
67306: LD_VAR 0 1
67310: PPUSH
67311: LD_INT 1
67313: PPUSH
67314: CALL_OW 55
// end ;
67318: GO 67131
// end ;
67320: LD_VAR 0 5
67324: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67325: LD_INT 0
67327: PPUSH
67328: PPUSH
67329: PPUSH
67330: PPUSH
67331: PPUSH
67332: PPUSH
67333: PPUSH
67334: PPUSH
// if not turrets or not factories then
67335: LD_VAR 0 1
67339: NOT
67340: PUSH
67341: LD_VAR 0 2
67345: NOT
67346: OR
67347: IFFALSE 67351
// exit ;
67349: GO 67658
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67351: LD_ADDR_VAR 0 10
67355: PUSH
67356: LD_INT 5
67358: PUSH
67359: LD_INT 6
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 24
67393: PUSH
67394: LD_INT 25
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 23
67403: PUSH
67404: LD_INT 27
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 42
67417: PUSH
67418: LD_INT 43
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 44
67427: PUSH
67428: LD_INT 46
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 45
67437: PUSH
67438: LD_INT 47
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// result := [ ] ;
67455: LD_ADDR_VAR 0 3
67459: PUSH
67460: EMPTY
67461: ST_TO_ADDR
// for i in turrets do
67462: LD_ADDR_VAR 0 4
67466: PUSH
67467: LD_VAR 0 1
67471: PUSH
67472: FOR_IN
67473: IFFALSE 67656
// begin nat := GetNation ( i ) ;
67475: LD_ADDR_VAR 0 7
67479: PUSH
67480: LD_VAR 0 4
67484: PPUSH
67485: CALL_OW 248
67489: ST_TO_ADDR
// weapon := 0 ;
67490: LD_ADDR_VAR 0 8
67494: PUSH
67495: LD_INT 0
67497: ST_TO_ADDR
// if not nat then
67498: LD_VAR 0 7
67502: NOT
67503: IFFALSE 67507
// continue ;
67505: GO 67472
// for j in list [ nat ] do
67507: LD_ADDR_VAR 0 5
67511: PUSH
67512: LD_VAR 0 10
67516: PUSH
67517: LD_VAR 0 7
67521: ARRAY
67522: PUSH
67523: FOR_IN
67524: IFFALSE 67565
// if GetBWeapon ( i ) = j [ 1 ] then
67526: LD_VAR 0 4
67530: PPUSH
67531: CALL_OW 269
67535: PUSH
67536: LD_VAR 0 5
67540: PUSH
67541: LD_INT 1
67543: ARRAY
67544: EQUAL
67545: IFFALSE 67563
// begin weapon := j [ 2 ] ;
67547: LD_ADDR_VAR 0 8
67551: PUSH
67552: LD_VAR 0 5
67556: PUSH
67557: LD_INT 2
67559: ARRAY
67560: ST_TO_ADDR
// break ;
67561: GO 67565
// end ;
67563: GO 67523
67565: POP
67566: POP
// if not weapon then
67567: LD_VAR 0 8
67571: NOT
67572: IFFALSE 67576
// continue ;
67574: GO 67472
// for k in factories do
67576: LD_ADDR_VAR 0 6
67580: PUSH
67581: LD_VAR 0 2
67585: PUSH
67586: FOR_IN
67587: IFFALSE 67652
// begin weapons := AvailableWeaponList ( k ) ;
67589: LD_ADDR_VAR 0 9
67593: PUSH
67594: LD_VAR 0 6
67598: PPUSH
67599: CALL_OW 478
67603: ST_TO_ADDR
// if not weapons then
67604: LD_VAR 0 9
67608: NOT
67609: IFFALSE 67613
// continue ;
67611: GO 67586
// if weapon in weapons then
67613: LD_VAR 0 8
67617: PUSH
67618: LD_VAR 0 9
67622: IN
67623: IFFALSE 67650
// begin result := [ i , weapon ] ;
67625: LD_ADDR_VAR 0 3
67629: PUSH
67630: LD_VAR 0 4
67634: PUSH
67635: LD_VAR 0 8
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: ST_TO_ADDR
// exit ;
67644: POP
67645: POP
67646: POP
67647: POP
67648: GO 67658
// end ; end ;
67650: GO 67586
67652: POP
67653: POP
// end ;
67654: GO 67472
67656: POP
67657: POP
// end ;
67658: LD_VAR 0 3
67662: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67663: LD_INT 0
67665: PPUSH
// if not side or side > 8 then
67666: LD_VAR 0 3
67670: NOT
67671: PUSH
67672: LD_VAR 0 3
67676: PUSH
67677: LD_INT 8
67679: GREATER
67680: OR
67681: IFFALSE 67685
// exit ;
67683: GO 67744
// if not range then
67685: LD_VAR 0 4
67689: NOT
67690: IFFALSE 67701
// range := - 12 ;
67692: LD_ADDR_VAR 0 4
67696: PUSH
67697: LD_INT 12
67699: NEG
67700: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67701: LD_VAR 0 1
67705: PPUSH
67706: LD_VAR 0 2
67710: PPUSH
67711: LD_VAR 0 3
67715: PPUSH
67716: LD_VAR 0 4
67720: PPUSH
67721: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 2
67734: PPUSH
67735: LD_VAR 0 3
67739: PPUSH
67740: CALL_OW 331
// end ;
67744: LD_VAR 0 5
67748: RET
// export function Video ( mode ) ; begin
67749: LD_INT 0
67751: PPUSH
// ingame_video = mode ;
67752: LD_ADDR_OWVAR 52
67756: PUSH
67757: LD_VAR 0 1
67761: ST_TO_ADDR
// interface_hidden = mode ;
67762: LD_ADDR_OWVAR 54
67766: PUSH
67767: LD_VAR 0 1
67771: ST_TO_ADDR
// end ;
67772: LD_VAR 0 2
67776: RET
// export function Join ( array , element ) ; begin
67777: LD_INT 0
67779: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67780: LD_ADDR_VAR 0 3
67784: PUSH
67785: LD_VAR 0 1
67789: PPUSH
67790: LD_VAR 0 1
67794: PUSH
67795: LD_INT 1
67797: PLUS
67798: PPUSH
67799: LD_VAR 0 2
67803: PPUSH
67804: CALL_OW 1
67808: ST_TO_ADDR
// end ;
67809: LD_VAR 0 3
67813: RET
// export function JoinUnion ( array , element ) ; begin
67814: LD_INT 0
67816: PPUSH
// result := array union element ;
67817: LD_ADDR_VAR 0 3
67821: PUSH
67822: LD_VAR 0 1
67826: PUSH
67827: LD_VAR 0 2
67831: UNION
67832: ST_TO_ADDR
// end ;
67833: LD_VAR 0 3
67837: RET
// export function GetBehemoths ( side ) ; begin
67838: LD_INT 0
67840: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67841: LD_ADDR_VAR 0 2
67845: PUSH
67846: LD_INT 22
67848: PUSH
67849: LD_VAR 0 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 31
67860: PUSH
67861: LD_INT 25
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PPUSH
67872: CALL_OW 69
67876: ST_TO_ADDR
// end ;
67877: LD_VAR 0 2
67881: RET
// export function Shuffle ( array ) ; var i , index ; begin
67882: LD_INT 0
67884: PPUSH
67885: PPUSH
67886: PPUSH
// result := [ ] ;
67887: LD_ADDR_VAR 0 2
67891: PUSH
67892: EMPTY
67893: ST_TO_ADDR
// if not array then
67894: LD_VAR 0 1
67898: NOT
67899: IFFALSE 67903
// exit ;
67901: GO 68002
// Randomize ;
67903: CALL_OW 10
// for i = array downto 1 do
67907: LD_ADDR_VAR 0 3
67911: PUSH
67912: DOUBLE
67913: LD_VAR 0 1
67917: INC
67918: ST_TO_ADDR
67919: LD_INT 1
67921: PUSH
67922: FOR_DOWNTO
67923: IFFALSE 68000
// begin index := rand ( 1 , array ) ;
67925: LD_ADDR_VAR 0 4
67929: PUSH
67930: LD_INT 1
67932: PPUSH
67933: LD_VAR 0 1
67937: PPUSH
67938: CALL_OW 12
67942: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67943: LD_ADDR_VAR 0 2
67947: PUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: LD_VAR 0 2
67957: PUSH
67958: LD_INT 1
67960: PLUS
67961: PPUSH
67962: LD_VAR 0 1
67966: PUSH
67967: LD_VAR 0 4
67971: ARRAY
67972: PPUSH
67973: CALL_OW 2
67977: ST_TO_ADDR
// array := Delete ( array , index ) ;
67978: LD_ADDR_VAR 0 1
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_VAR 0 4
67992: PPUSH
67993: CALL_OW 3
67997: ST_TO_ADDR
// end ;
67998: GO 67922
68000: POP
68001: POP
// end ;
68002: LD_VAR 0 2
68006: RET
// export function GetBaseMaterials ( base ) ; begin
68007: LD_INT 0
68009: PPUSH
// result := [ 0 , 0 , 0 ] ;
68010: LD_ADDR_VAR 0 2
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: ST_TO_ADDR
// if not base then
68029: LD_VAR 0 1
68033: NOT
68034: IFFALSE 68038
// exit ;
68036: GO 68087
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68038: LD_ADDR_VAR 0 2
68042: PUSH
68043: LD_VAR 0 1
68047: PPUSH
68048: LD_INT 1
68050: PPUSH
68051: CALL_OW 275
68055: PUSH
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_INT 2
68063: PPUSH
68064: CALL_OW 275
68068: PUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: LD_INT 3
68076: PPUSH
68077: CALL_OW 275
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// end ;
68087: LD_VAR 0 2
68091: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68092: LD_INT 0
68094: PPUSH
68095: PPUSH
// result := array ;
68096: LD_ADDR_VAR 0 3
68100: PUSH
68101: LD_VAR 0 1
68105: ST_TO_ADDR
// if size >= result then
68106: LD_VAR 0 2
68110: PUSH
68111: LD_VAR 0 3
68115: GREATEREQUAL
68116: IFFALSE 68120
// exit ;
68118: GO 68170
// if size then
68120: LD_VAR 0 2
68124: IFFALSE 68170
// for i := array downto size do
68126: LD_ADDR_VAR 0 4
68130: PUSH
68131: DOUBLE
68132: LD_VAR 0 1
68136: INC
68137: ST_TO_ADDR
68138: LD_VAR 0 2
68142: PUSH
68143: FOR_DOWNTO
68144: IFFALSE 68168
// result := Delete ( result , result ) ;
68146: LD_ADDR_VAR 0 3
68150: PUSH
68151: LD_VAR 0 3
68155: PPUSH
68156: LD_VAR 0 3
68160: PPUSH
68161: CALL_OW 3
68165: ST_TO_ADDR
68166: GO 68143
68168: POP
68169: POP
// end ;
68170: LD_VAR 0 3
68174: RET
// export function ComExit ( unit ) ; var tmp ; begin
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
// if not IsInUnit ( unit ) then
68179: LD_VAR 0 1
68183: PPUSH
68184: CALL_OW 310
68188: NOT
68189: IFFALSE 68193
// exit ;
68191: GO 68253
// tmp := IsInUnit ( unit ) ;
68193: LD_ADDR_VAR 0 3
68197: PUSH
68198: LD_VAR 0 1
68202: PPUSH
68203: CALL_OW 310
68207: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68208: LD_VAR 0 3
68212: PPUSH
68213: CALL_OW 247
68217: PUSH
68218: LD_INT 2
68220: EQUAL
68221: IFFALSE 68234
// ComExitVehicle ( unit ) else
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 121
68232: GO 68243
// ComExitBuilding ( unit ) ;
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 122
// result := tmp ;
68243: LD_ADDR_VAR 0 2
68247: PUSH
68248: LD_VAR 0 3
68252: ST_TO_ADDR
// end ;
68253: LD_VAR 0 2
68257: RET
// export function ComExitAll ( units ) ; var i ; begin
68258: LD_INT 0
68260: PPUSH
68261: PPUSH
// if not units then
68262: LD_VAR 0 1
68266: NOT
68267: IFFALSE 68271
// exit ;
68269: GO 68297
// for i in units do
68271: LD_ADDR_VAR 0 3
68275: PUSH
68276: LD_VAR 0 1
68280: PUSH
68281: FOR_IN
68282: IFFALSE 68295
// ComExit ( i ) ;
68284: LD_VAR 0 3
68288: PPUSH
68289: CALL 68175 0 1
68293: GO 68281
68295: POP
68296: POP
// end ;
68297: LD_VAR 0 2
68301: RET
// export function ResetHc ; begin
68302: LD_INT 0
68304: PPUSH
// InitHc ;
68305: CALL_OW 19
// hc_importance := 0 ;
68309: LD_ADDR_OWVAR 32
68313: PUSH
68314: LD_INT 0
68316: ST_TO_ADDR
// end ;
68317: LD_VAR 0 1
68321: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68322: LD_INT 0
68324: PPUSH
68325: PPUSH
68326: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68327: LD_ADDR_VAR 0 6
68331: PUSH
68332: LD_VAR 0 1
68336: PUSH
68337: LD_VAR 0 3
68341: PLUS
68342: PUSH
68343: LD_INT 2
68345: DIV
68346: ST_TO_ADDR
// if _x < 0 then
68347: LD_VAR 0 6
68351: PUSH
68352: LD_INT 0
68354: LESS
68355: IFFALSE 68372
// _x := _x * - 1 ;
68357: LD_ADDR_VAR 0 6
68361: PUSH
68362: LD_VAR 0 6
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: MUL
68371: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68372: LD_ADDR_VAR 0 7
68376: PUSH
68377: LD_VAR 0 2
68381: PUSH
68382: LD_VAR 0 4
68386: PLUS
68387: PUSH
68388: LD_INT 2
68390: DIV
68391: ST_TO_ADDR
// if _y < 0 then
68392: LD_VAR 0 7
68396: PUSH
68397: LD_INT 0
68399: LESS
68400: IFFALSE 68417
// _y := _y * - 1 ;
68402: LD_ADDR_VAR 0 7
68406: PUSH
68407: LD_VAR 0 7
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: MUL
68416: ST_TO_ADDR
// result := [ _x , _y ] ;
68417: LD_ADDR_VAR 0 5
68421: PUSH
68422: LD_VAR 0 6
68426: PUSH
68427: LD_VAR 0 7
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: ST_TO_ADDR
// end ;
68436: LD_VAR 0 5
68440: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68441: LD_INT 0
68443: PPUSH
68444: PPUSH
68445: PPUSH
68446: PPUSH
// task := GetTaskList ( unit ) ;
68447: LD_ADDR_VAR 0 7
68451: PUSH
68452: LD_VAR 0 1
68456: PPUSH
68457: CALL_OW 437
68461: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68462: LD_VAR 0 7
68466: NOT
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: CALL_OW 308
68482: NOT
68483: AND
68484: IFFALSE 68488
// exit ;
68486: GO 68606
// if IsInArea ( unit , area ) then
68488: LD_VAR 0 1
68492: PPUSH
68493: LD_VAR 0 2
68497: PPUSH
68498: CALL_OW 308
68502: IFFALSE 68520
// begin ComMoveToArea ( unit , goAway ) ;
68504: LD_VAR 0 1
68508: PPUSH
68509: LD_VAR 0 3
68513: PPUSH
68514: CALL_OW 113
// exit ;
68518: GO 68606
// end ; if task [ 1 ] [ 1 ] <> M then
68520: LD_VAR 0 7
68524: PUSH
68525: LD_INT 1
68527: ARRAY
68528: PUSH
68529: LD_INT 1
68531: ARRAY
68532: PUSH
68533: LD_STRING M
68535: NONEQUAL
68536: IFFALSE 68540
// exit ;
68538: GO 68606
// x := task [ 1 ] [ 2 ] ;
68540: LD_ADDR_VAR 0 5
68544: PUSH
68545: LD_VAR 0 7
68549: PUSH
68550: LD_INT 1
68552: ARRAY
68553: PUSH
68554: LD_INT 2
68556: ARRAY
68557: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68558: LD_ADDR_VAR 0 6
68562: PUSH
68563: LD_VAR 0 7
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: PUSH
68572: LD_INT 3
68574: ARRAY
68575: ST_TO_ADDR
// if InArea ( x , y , area ) then
68576: LD_VAR 0 5
68580: PPUSH
68581: LD_VAR 0 6
68585: PPUSH
68586: LD_VAR 0 2
68590: PPUSH
68591: CALL_OW 309
68595: IFFALSE 68606
// ComStop ( unit ) ;
68597: LD_VAR 0 1
68601: PPUSH
68602: CALL_OW 141
// end ;
68606: LD_VAR 0 4
68610: RET
// export function Abs ( value ) ; begin
68611: LD_INT 0
68613: PPUSH
// result := value ;
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: LD_VAR 0 1
68623: ST_TO_ADDR
// if value < 0 then
68624: LD_VAR 0 1
68628: PUSH
68629: LD_INT 0
68631: LESS
68632: IFFALSE 68649
// result := value * - 1 ;
68634: LD_ADDR_VAR 0 2
68638: PUSH
68639: LD_VAR 0 1
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: MUL
68648: ST_TO_ADDR
// end ;
68649: LD_VAR 0 2
68653: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68654: LD_INT 0
68656: PPUSH
68657: PPUSH
68658: PPUSH
68659: PPUSH
68660: PPUSH
68661: PPUSH
68662: PPUSH
68663: PPUSH
// if not unit or not building then
68664: LD_VAR 0 1
68668: NOT
68669: PUSH
68670: LD_VAR 0 2
68674: NOT
68675: OR
68676: IFFALSE 68680
// exit ;
68678: GO 68906
// x := GetX ( building ) ;
68680: LD_ADDR_VAR 0 4
68684: PUSH
68685: LD_VAR 0 2
68689: PPUSH
68690: CALL_OW 250
68694: ST_TO_ADDR
// y := GetY ( building ) ;
68695: LD_ADDR_VAR 0 6
68699: PUSH
68700: LD_VAR 0 2
68704: PPUSH
68705: CALL_OW 251
68709: ST_TO_ADDR
// d := GetDir ( building ) ;
68710: LD_ADDR_VAR 0 8
68714: PUSH
68715: LD_VAR 0 2
68719: PPUSH
68720: CALL_OW 254
68724: ST_TO_ADDR
// r := 4 ;
68725: LD_ADDR_VAR 0 9
68729: PUSH
68730: LD_INT 4
68732: ST_TO_ADDR
// for i := 1 to 5 do
68733: LD_ADDR_VAR 0 10
68737: PUSH
68738: DOUBLE
68739: LD_INT 1
68741: DEC
68742: ST_TO_ADDR
68743: LD_INT 5
68745: PUSH
68746: FOR_TO
68747: IFFALSE 68904
// begin _x := ShiftX ( x , d , r + i ) ;
68749: LD_ADDR_VAR 0 5
68753: PUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: LD_VAR 0 8
68763: PPUSH
68764: LD_VAR 0 9
68768: PUSH
68769: LD_VAR 0 10
68773: PLUS
68774: PPUSH
68775: CALL_OW 272
68779: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68780: LD_ADDR_VAR 0 7
68784: PUSH
68785: LD_VAR 0 6
68789: PPUSH
68790: LD_VAR 0 8
68794: PPUSH
68795: LD_VAR 0 9
68799: PUSH
68800: LD_VAR 0 10
68804: PLUS
68805: PPUSH
68806: CALL_OW 273
68810: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68811: LD_VAR 0 5
68815: PPUSH
68816: LD_VAR 0 7
68820: PPUSH
68821: CALL_OW 488
68825: PUSH
68826: LD_VAR 0 5
68830: PPUSH
68831: LD_VAR 0 7
68835: PPUSH
68836: CALL_OW 428
68840: PPUSH
68841: CALL_OW 247
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: LD_INT 2
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: IN
68856: NOT
68857: AND
68858: IFFALSE 68902
// begin ComMoveXY ( unit , _x , _y ) ;
68860: LD_VAR 0 1
68864: PPUSH
68865: LD_VAR 0 5
68869: PPUSH
68870: LD_VAR 0 7
68874: PPUSH
68875: CALL_OW 111
// result := [ _x , _y ] ;
68879: LD_ADDR_VAR 0 3
68883: PUSH
68884: LD_VAR 0 5
68888: PUSH
68889: LD_VAR 0 7
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: ST_TO_ADDR
// exit ;
68898: POP
68899: POP
68900: GO 68906
// end ; end ;
68902: GO 68746
68904: POP
68905: POP
// end ;
68906: LD_VAR 0 3
68910: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68911: LD_INT 0
68913: PPUSH
68914: PPUSH
68915: PPUSH
// result := 0 ;
68916: LD_ADDR_VAR 0 3
68920: PUSH
68921: LD_INT 0
68923: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68924: LD_VAR 0 1
68928: PUSH
68929: LD_INT 0
68931: LESS
68932: PUSH
68933: LD_VAR 0 1
68937: PUSH
68938: LD_INT 8
68940: GREATER
68941: OR
68942: PUSH
68943: LD_VAR 0 2
68947: PUSH
68948: LD_INT 0
68950: LESS
68951: OR
68952: PUSH
68953: LD_VAR 0 2
68957: PUSH
68958: LD_INT 8
68960: GREATER
68961: OR
68962: IFFALSE 68966
// exit ;
68964: GO 69041
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68966: LD_ADDR_VAR 0 4
68970: PUSH
68971: LD_INT 22
68973: PUSH
68974: LD_VAR 0 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PPUSH
68983: CALL_OW 69
68987: PUSH
68988: FOR_IN
68989: IFFALSE 69039
// begin un := UnitShoot ( i ) ;
68991: LD_ADDR_VAR 0 5
68995: PUSH
68996: LD_VAR 0 4
69000: PPUSH
69001: CALL_OW 504
69005: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69006: LD_VAR 0 5
69010: PPUSH
69011: CALL_OW 255
69015: PUSH
69016: LD_VAR 0 1
69020: EQUAL
69021: IFFALSE 69037
// begin result := un ;
69023: LD_ADDR_VAR 0 3
69027: PUSH
69028: LD_VAR 0 5
69032: ST_TO_ADDR
// exit ;
69033: POP
69034: POP
69035: GO 69041
// end ; end ;
69037: GO 68988
69039: POP
69040: POP
// end ;
69041: LD_VAR 0 3
69045: RET
// export function GetCargoBay ( units ) ; begin
69046: LD_INT 0
69048: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69049: LD_ADDR_VAR 0 2
69053: PUSH
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_INT 2
69061: PUSH
69062: LD_INT 34
69064: PUSH
69065: LD_INT 12
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 34
69074: PUSH
69075: LD_INT 51
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 34
69084: PUSH
69085: LD_INT 32
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 34
69094: PUSH
69095: LD_INT 89
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: PPUSH
69109: CALL_OW 72
69113: ST_TO_ADDR
// end ;
69114: LD_VAR 0 2
69118: RET
// export function Negate ( value ) ; begin
69119: LD_INT 0
69121: PPUSH
// result := not value ;
69122: LD_ADDR_VAR 0 2
69126: PUSH
69127: LD_VAR 0 1
69131: NOT
69132: ST_TO_ADDR
// end ;
69133: LD_VAR 0 2
69137: RET
// export function Inc ( value ) ; begin
69138: LD_INT 0
69140: PPUSH
// result := value + 1 ;
69141: LD_ADDR_VAR 0 2
69145: PUSH
69146: LD_VAR 0 1
69150: PUSH
69151: LD_INT 1
69153: PLUS
69154: ST_TO_ADDR
// end ;
69155: LD_VAR 0 2
69159: RET
// export function Dec ( value ) ; begin
69160: LD_INT 0
69162: PPUSH
// result := value - 1 ;
69163: LD_ADDR_VAR 0 2
69167: PUSH
69168: LD_VAR 0 1
69172: PUSH
69173: LD_INT 1
69175: MINUS
69176: ST_TO_ADDR
// end ;
69177: LD_VAR 0 2
69181: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69182: LD_INT 0
69184: PPUSH
69185: PPUSH
69186: PPUSH
69187: PPUSH
69188: PPUSH
69189: PPUSH
69190: PPUSH
69191: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69192: LD_VAR 0 1
69196: PPUSH
69197: LD_VAR 0 2
69201: PPUSH
69202: CALL_OW 488
69206: NOT
69207: PUSH
69208: LD_VAR 0 3
69212: PPUSH
69213: LD_VAR 0 4
69217: PPUSH
69218: CALL_OW 488
69222: NOT
69223: OR
69224: IFFALSE 69237
// begin result := - 1 ;
69226: LD_ADDR_VAR 0 5
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: ST_TO_ADDR
// exit ;
69235: GO 69472
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69237: LD_ADDR_VAR 0 12
69241: PUSH
69242: LD_VAR 0 1
69246: PPUSH
69247: LD_VAR 0 2
69251: PPUSH
69252: LD_VAR 0 3
69256: PPUSH
69257: LD_VAR 0 4
69261: PPUSH
69262: CALL 68322 0 4
69266: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69267: LD_ADDR_VAR 0 11
69271: PUSH
69272: LD_VAR 0 1
69276: PPUSH
69277: LD_VAR 0 2
69281: PPUSH
69282: LD_VAR 0 12
69286: PUSH
69287: LD_INT 1
69289: ARRAY
69290: PPUSH
69291: LD_VAR 0 12
69295: PUSH
69296: LD_INT 2
69298: ARRAY
69299: PPUSH
69300: CALL_OW 298
69304: ST_TO_ADDR
// distance := 9999 ;
69305: LD_ADDR_VAR 0 10
69309: PUSH
69310: LD_INT 9999
69312: ST_TO_ADDR
// for i := 0 to 5 do
69313: LD_ADDR_VAR 0 6
69317: PUSH
69318: DOUBLE
69319: LD_INT 0
69321: DEC
69322: ST_TO_ADDR
69323: LD_INT 5
69325: PUSH
69326: FOR_TO
69327: IFFALSE 69470
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69329: LD_ADDR_VAR 0 7
69333: PUSH
69334: LD_VAR 0 1
69338: PPUSH
69339: LD_VAR 0 6
69343: PPUSH
69344: LD_VAR 0 11
69348: PPUSH
69349: CALL_OW 272
69353: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69354: LD_ADDR_VAR 0 8
69358: PUSH
69359: LD_VAR 0 2
69363: PPUSH
69364: LD_VAR 0 6
69368: PPUSH
69369: LD_VAR 0 11
69373: PPUSH
69374: CALL_OW 273
69378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69379: LD_VAR 0 7
69383: PPUSH
69384: LD_VAR 0 8
69388: PPUSH
69389: CALL_OW 488
69393: NOT
69394: IFFALSE 69398
// continue ;
69396: GO 69326
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69398: LD_ADDR_VAR 0 9
69402: PUSH
69403: LD_VAR 0 12
69407: PUSH
69408: LD_INT 1
69410: ARRAY
69411: PPUSH
69412: LD_VAR 0 12
69416: PUSH
69417: LD_INT 2
69419: ARRAY
69420: PPUSH
69421: LD_VAR 0 7
69425: PPUSH
69426: LD_VAR 0 8
69430: PPUSH
69431: CALL_OW 298
69435: ST_TO_ADDR
// if tmp < distance then
69436: LD_VAR 0 9
69440: PUSH
69441: LD_VAR 0 10
69445: LESS
69446: IFFALSE 69468
// begin result := i ;
69448: LD_ADDR_VAR 0 5
69452: PUSH
69453: LD_VAR 0 6
69457: ST_TO_ADDR
// distance := tmp ;
69458: LD_ADDR_VAR 0 10
69462: PUSH
69463: LD_VAR 0 9
69467: ST_TO_ADDR
// end ; end ;
69468: GO 69326
69470: POP
69471: POP
// end ;
69472: LD_VAR 0 5
69476: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69477: LD_INT 0
69479: PPUSH
69480: PPUSH
// if not driver or not IsInUnit ( driver ) then
69481: LD_VAR 0 1
69485: NOT
69486: PUSH
69487: LD_VAR 0 1
69491: PPUSH
69492: CALL_OW 310
69496: NOT
69497: OR
69498: IFFALSE 69502
// exit ;
69500: GO 69592
// vehicle := IsInUnit ( driver ) ;
69502: LD_ADDR_VAR 0 3
69506: PUSH
69507: LD_VAR 0 1
69511: PPUSH
69512: CALL_OW 310
69516: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69517: LD_VAR 0 1
69521: PPUSH
69522: LD_STRING \
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: LD_INT 0
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: PUSH
69552: LD_STRING E
69554: PUSH
69555: LD_INT 0
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: LD_VAR 0 3
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PPUSH
69588: CALL_OW 446
// end ;
69592: LD_VAR 0 2
69596: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69597: LD_INT 0
69599: PPUSH
69600: PPUSH
// if not driver or not IsInUnit ( driver ) then
69601: LD_VAR 0 1
69605: NOT
69606: PUSH
69607: LD_VAR 0 1
69611: PPUSH
69612: CALL_OW 310
69616: NOT
69617: OR
69618: IFFALSE 69622
// exit ;
69620: GO 69712
// vehicle := IsInUnit ( driver ) ;
69622: LD_ADDR_VAR 0 3
69626: PUSH
69627: LD_VAR 0 1
69631: PPUSH
69632: CALL_OW 310
69636: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69637: LD_VAR 0 1
69641: PPUSH
69642: LD_STRING \
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: LD_STRING E
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: LD_VAR 0 3
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PPUSH
69708: CALL_OW 447
// end ;
69712: LD_VAR 0 2
69716: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69717: LD_INT 0
69719: PPUSH
69720: PPUSH
69721: PPUSH
// tmp := [ ] ;
69722: LD_ADDR_VAR 0 5
69726: PUSH
69727: EMPTY
69728: ST_TO_ADDR
// for i in units do
69729: LD_ADDR_VAR 0 4
69733: PUSH
69734: LD_VAR 0 1
69738: PUSH
69739: FOR_IN
69740: IFFALSE 69778
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69742: LD_ADDR_VAR 0 5
69746: PUSH
69747: LD_VAR 0 5
69751: PPUSH
69752: LD_VAR 0 5
69756: PUSH
69757: LD_INT 1
69759: PLUS
69760: PPUSH
69761: LD_VAR 0 4
69765: PPUSH
69766: CALL_OW 256
69770: PPUSH
69771: CALL_OW 2
69775: ST_TO_ADDR
69776: GO 69739
69778: POP
69779: POP
// if not tmp then
69780: LD_VAR 0 5
69784: NOT
69785: IFFALSE 69789
// exit ;
69787: GO 69837
// if asc then
69789: LD_VAR 0 2
69793: IFFALSE 69817
// result := SortListByListAsc ( units , tmp ) else
69795: LD_ADDR_VAR 0 3
69799: PUSH
69800: LD_VAR 0 1
69804: PPUSH
69805: LD_VAR 0 5
69809: PPUSH
69810: CALL_OW 76
69814: ST_TO_ADDR
69815: GO 69837
// result := SortListByListDesc ( units , tmp ) ;
69817: LD_ADDR_VAR 0 3
69821: PUSH
69822: LD_VAR 0 1
69826: PPUSH
69827: LD_VAR 0 5
69831: PPUSH
69832: CALL_OW 77
69836: ST_TO_ADDR
// end ;
69837: LD_VAR 0 3
69841: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69842: LD_INT 0
69844: PPUSH
69845: PPUSH
// task := GetTaskList ( mech ) ;
69846: LD_ADDR_VAR 0 4
69850: PUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 437
69860: ST_TO_ADDR
// if not task then
69861: LD_VAR 0 4
69865: NOT
69866: IFFALSE 69870
// exit ;
69868: GO 69912
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69870: LD_ADDR_VAR 0 3
69874: PUSH
69875: LD_VAR 0 4
69879: PUSH
69880: LD_INT 1
69882: ARRAY
69883: PUSH
69884: LD_INT 1
69886: ARRAY
69887: PUSH
69888: LD_STRING r
69890: EQUAL
69891: PUSH
69892: LD_VAR 0 4
69896: PUSH
69897: LD_INT 1
69899: ARRAY
69900: PUSH
69901: LD_INT 4
69903: ARRAY
69904: PUSH
69905: LD_VAR 0 2
69909: EQUAL
69910: AND
69911: ST_TO_ADDR
// end ;
69912: LD_VAR 0 3
69916: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69917: LD_INT 0
69919: PPUSH
// SetDir ( unit , d ) ;
69920: LD_VAR 0 1
69924: PPUSH
69925: LD_VAR 0 4
69929: PPUSH
69930: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69934: LD_VAR 0 1
69938: PPUSH
69939: LD_VAR 0 2
69943: PPUSH
69944: LD_VAR 0 3
69948: PPUSH
69949: LD_VAR 0 5
69953: PPUSH
69954: CALL_OW 48
// end ;
69958: LD_VAR 0 6
69962: RET
// export function ToNaturalNumber ( number ) ; begin
69963: LD_INT 0
69965: PPUSH
// result := number div 1 ;
69966: LD_ADDR_VAR 0 2
69970: PUSH
69971: LD_VAR 0 1
69975: PUSH
69976: LD_INT 1
69978: DIV
69979: ST_TO_ADDR
// if number < 0 then
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 0
69987: LESS
69988: IFFALSE 69998
// result := 0 ;
69990: LD_ADDR_VAR 0 2
69994: PUSH
69995: LD_INT 0
69997: ST_TO_ADDR
// end ;
69998: LD_VAR 0 2
70002: RET
// export function SortByClass ( units , class ) ; var un ; begin
70003: LD_INT 0
70005: PPUSH
70006: PPUSH
// if not units or not class then
70007: LD_VAR 0 1
70011: NOT
70012: PUSH
70013: LD_VAR 0 2
70017: NOT
70018: OR
70019: IFFALSE 70023
// exit ;
70021: GO 70118
// result := [ ] ;
70023: LD_ADDR_VAR 0 3
70027: PUSH
70028: EMPTY
70029: ST_TO_ADDR
// for un in units do
70030: LD_ADDR_VAR 0 4
70034: PUSH
70035: LD_VAR 0 1
70039: PUSH
70040: FOR_IN
70041: IFFALSE 70116
// if GetClass ( un ) = class then
70043: LD_VAR 0 4
70047: PPUSH
70048: CALL_OW 257
70052: PUSH
70053: LD_VAR 0 2
70057: EQUAL
70058: IFFALSE 70085
// result := Insert ( result , 1 , un ) else
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: LD_VAR 0 3
70069: PPUSH
70070: LD_INT 1
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 2
70082: ST_TO_ADDR
70083: GO 70114
// result := Replace ( result , result + 1 , un ) ;
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: LD_VAR 0 3
70094: PPUSH
70095: LD_VAR 0 3
70099: PUSH
70100: LD_INT 1
70102: PLUS
70103: PPUSH
70104: LD_VAR 0 4
70108: PPUSH
70109: CALL_OW 1
70113: ST_TO_ADDR
70114: GO 70040
70116: POP
70117: POP
// end ;
70118: LD_VAR 0 3
70122: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70123: LD_INT 0
70125: PPUSH
70126: PPUSH
70127: PPUSH
70128: PPUSH
70129: PPUSH
70130: PPUSH
70131: PPUSH
// result := [ ] ;
70132: LD_ADDR_VAR 0 4
70136: PUSH
70137: EMPTY
70138: ST_TO_ADDR
// if x - r < 0 then
70139: LD_VAR 0 1
70143: PUSH
70144: LD_VAR 0 3
70148: MINUS
70149: PUSH
70150: LD_INT 0
70152: LESS
70153: IFFALSE 70165
// min_x := 0 else
70155: LD_ADDR_VAR 0 8
70159: PUSH
70160: LD_INT 0
70162: ST_TO_ADDR
70163: GO 70181
// min_x := x - r ;
70165: LD_ADDR_VAR 0 8
70169: PUSH
70170: LD_VAR 0 1
70174: PUSH
70175: LD_VAR 0 3
70179: MINUS
70180: ST_TO_ADDR
// if y - r < 0 then
70181: LD_VAR 0 2
70185: PUSH
70186: LD_VAR 0 3
70190: MINUS
70191: PUSH
70192: LD_INT 0
70194: LESS
70195: IFFALSE 70207
// min_y := 0 else
70197: LD_ADDR_VAR 0 7
70201: PUSH
70202: LD_INT 0
70204: ST_TO_ADDR
70205: GO 70223
// min_y := y - r ;
70207: LD_ADDR_VAR 0 7
70211: PUSH
70212: LD_VAR 0 2
70216: PUSH
70217: LD_VAR 0 3
70221: MINUS
70222: ST_TO_ADDR
// max_x := x + r ;
70223: LD_ADDR_VAR 0 9
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: LD_VAR 0 3
70237: PLUS
70238: ST_TO_ADDR
// max_y := y + r ;
70239: LD_ADDR_VAR 0 10
70243: PUSH
70244: LD_VAR 0 2
70248: PUSH
70249: LD_VAR 0 3
70253: PLUS
70254: ST_TO_ADDR
// for _x = min_x to max_x do
70255: LD_ADDR_VAR 0 5
70259: PUSH
70260: DOUBLE
70261: LD_VAR 0 8
70265: DEC
70266: ST_TO_ADDR
70267: LD_VAR 0 9
70271: PUSH
70272: FOR_TO
70273: IFFALSE 70374
// for _y = min_y to max_y do
70275: LD_ADDR_VAR 0 6
70279: PUSH
70280: DOUBLE
70281: LD_VAR 0 7
70285: DEC
70286: ST_TO_ADDR
70287: LD_VAR 0 10
70291: PUSH
70292: FOR_TO
70293: IFFALSE 70370
// begin if not ValidHex ( _x , _y ) then
70295: LD_VAR 0 5
70299: PPUSH
70300: LD_VAR 0 6
70304: PPUSH
70305: CALL_OW 488
70309: NOT
70310: IFFALSE 70314
// continue ;
70312: GO 70292
// if GetResourceTypeXY ( _x , _y ) then
70314: LD_VAR 0 5
70318: PPUSH
70319: LD_VAR 0 6
70323: PPUSH
70324: CALL_OW 283
70328: IFFALSE 70368
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70330: LD_ADDR_VAR 0 4
70334: PUSH
70335: LD_VAR 0 4
70339: PPUSH
70340: LD_VAR 0 4
70344: PUSH
70345: LD_INT 1
70347: PLUS
70348: PPUSH
70349: LD_VAR 0 5
70353: PUSH
70354: LD_VAR 0 6
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PPUSH
70363: CALL_OW 1
70367: ST_TO_ADDR
// end ;
70368: GO 70292
70370: POP
70371: POP
70372: GO 70272
70374: POP
70375: POP
// end ;
70376: LD_VAR 0 4
70380: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70381: LD_INT 0
70383: PPUSH
70384: PPUSH
70385: PPUSH
70386: PPUSH
70387: PPUSH
70388: PPUSH
70389: PPUSH
70390: PPUSH
// if not units then
70391: LD_VAR 0 1
70395: NOT
70396: IFFALSE 70400
// exit ;
70398: GO 70924
// result := UnitFilter ( units , [ f_ok ] ) ;
70400: LD_ADDR_VAR 0 3
70404: PUSH
70405: LD_VAR 0 1
70409: PPUSH
70410: LD_INT 50
70412: PUSH
70413: EMPTY
70414: LIST
70415: PPUSH
70416: CALL_OW 72
70420: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70421: LD_ADDR_VAR 0 8
70425: PUSH
70426: LD_VAR 0 1
70430: PUSH
70431: LD_INT 1
70433: ARRAY
70434: PPUSH
70435: CALL_OW 255
70439: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70440: LD_ADDR_VAR 0 10
70444: PUSH
70445: LD_INT 29
70447: PUSH
70448: LD_INT 91
70450: PUSH
70451: LD_INT 49
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: LIST
70458: ST_TO_ADDR
// if not result then
70459: LD_VAR 0 3
70463: NOT
70464: IFFALSE 70468
// exit ;
70466: GO 70924
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70468: LD_ADDR_VAR 0 5
70472: PUSH
70473: LD_INT 81
70475: PUSH
70476: LD_VAR 0 8
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PPUSH
70485: CALL_OW 69
70489: ST_TO_ADDR
// for i in result do
70490: LD_ADDR_VAR 0 4
70494: PUSH
70495: LD_VAR 0 3
70499: PUSH
70500: FOR_IN
70501: IFFALSE 70922
// begin tag := GetTag ( i ) + 1 ;
70503: LD_ADDR_VAR 0 9
70507: PUSH
70508: LD_VAR 0 4
70512: PPUSH
70513: CALL_OW 110
70517: PUSH
70518: LD_INT 1
70520: PLUS
70521: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70522: LD_ADDR_VAR 0 7
70526: PUSH
70527: LD_VAR 0 4
70531: PPUSH
70532: CALL_OW 250
70536: PPUSH
70537: LD_VAR 0 4
70541: PPUSH
70542: CALL_OW 251
70546: PPUSH
70547: LD_INT 6
70549: PPUSH
70550: CALL 70123 0 3
70554: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70555: LD_VAR 0 4
70559: PPUSH
70560: CALL_OW 247
70564: PUSH
70565: LD_INT 2
70567: EQUAL
70568: PUSH
70569: LD_VAR 0 7
70573: AND
70574: PUSH
70575: LD_VAR 0 4
70579: PPUSH
70580: CALL_OW 264
70584: PUSH
70585: LD_VAR 0 10
70589: IN
70590: NOT
70591: AND
70592: IFFALSE 70631
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70594: LD_VAR 0 4
70598: PPUSH
70599: LD_VAR 0 7
70603: PUSH
70604: LD_INT 1
70606: ARRAY
70607: PUSH
70608: LD_INT 1
70610: ARRAY
70611: PPUSH
70612: LD_VAR 0 7
70616: PUSH
70617: LD_INT 1
70619: ARRAY
70620: PUSH
70621: LD_INT 2
70623: ARRAY
70624: PPUSH
70625: CALL_OW 116
70629: GO 70920
// if path > tag then
70631: LD_VAR 0 2
70635: PUSH
70636: LD_VAR 0 9
70640: GREATER
70641: IFFALSE 70849
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70643: LD_ADDR_VAR 0 6
70647: PUSH
70648: LD_VAR 0 5
70652: PPUSH
70653: LD_INT 91
70655: PUSH
70656: LD_VAR 0 4
70660: PUSH
70661: LD_INT 8
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: PPUSH
70669: CALL_OW 72
70673: ST_TO_ADDR
// if nearEnemy then
70674: LD_VAR 0 6
70678: IFFALSE 70747
// begin if GetWeapon ( i ) = ru_time_lapser then
70680: LD_VAR 0 4
70684: PPUSH
70685: CALL_OW 264
70689: PUSH
70690: LD_INT 49
70692: EQUAL
70693: IFFALSE 70721
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70695: LD_VAR 0 4
70699: PPUSH
70700: LD_VAR 0 6
70704: PPUSH
70705: LD_VAR 0 4
70709: PPUSH
70710: CALL_OW 74
70714: PPUSH
70715: CALL_OW 112
70719: GO 70745
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70721: LD_VAR 0 4
70725: PPUSH
70726: LD_VAR 0 6
70730: PPUSH
70731: LD_VAR 0 4
70735: PPUSH
70736: CALL_OW 74
70740: PPUSH
70741: CALL_OW 115
// end else
70745: GO 70847
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70747: LD_VAR 0 4
70751: PPUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_VAR 0 9
70761: ARRAY
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: PPUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_VAR 0 9
70776: ARRAY
70777: PUSH
70778: LD_INT 2
70780: ARRAY
70781: PPUSH
70782: CALL_OW 297
70786: PUSH
70787: LD_INT 6
70789: GREATER
70790: IFFALSE 70833
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70792: LD_VAR 0 4
70796: PPUSH
70797: LD_VAR 0 2
70801: PUSH
70802: LD_VAR 0 9
70806: ARRAY
70807: PUSH
70808: LD_INT 1
70810: ARRAY
70811: PPUSH
70812: LD_VAR 0 2
70816: PUSH
70817: LD_VAR 0 9
70821: ARRAY
70822: PUSH
70823: LD_INT 2
70825: ARRAY
70826: PPUSH
70827: CALL_OW 114
70831: GO 70847
// SetTag ( i , tag ) ;
70833: LD_VAR 0 4
70837: PPUSH
70838: LD_VAR 0 9
70842: PPUSH
70843: CALL_OW 109
// end else
70847: GO 70920
// if enemy then
70849: LD_VAR 0 5
70853: IFFALSE 70920
// begin if GetWeapon ( i ) = ru_time_lapser then
70855: LD_VAR 0 4
70859: PPUSH
70860: CALL_OW 264
70864: PUSH
70865: LD_INT 49
70867: EQUAL
70868: IFFALSE 70896
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70870: LD_VAR 0 4
70874: PPUSH
70875: LD_VAR 0 5
70879: PPUSH
70880: LD_VAR 0 4
70884: PPUSH
70885: CALL_OW 74
70889: PPUSH
70890: CALL_OW 112
70894: GO 70920
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70896: LD_VAR 0 4
70900: PPUSH
70901: LD_VAR 0 5
70905: PPUSH
70906: LD_VAR 0 4
70910: PPUSH
70911: CALL_OW 74
70915: PPUSH
70916: CALL_OW 115
// end ; end ;
70920: GO 70500
70922: POP
70923: POP
// end ;
70924: LD_VAR 0 3
70928: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70929: LD_INT 0
70931: PPUSH
70932: PPUSH
70933: PPUSH
// if not unit or IsInUnit ( unit ) then
70934: LD_VAR 0 1
70938: NOT
70939: PUSH
70940: LD_VAR 0 1
70944: PPUSH
70945: CALL_OW 310
70949: OR
70950: IFFALSE 70954
// exit ;
70952: GO 71045
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70954: LD_ADDR_VAR 0 4
70958: PUSH
70959: LD_VAR 0 1
70963: PPUSH
70964: CALL_OW 250
70968: PPUSH
70969: LD_VAR 0 2
70973: PPUSH
70974: LD_INT 1
70976: PPUSH
70977: CALL_OW 272
70981: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70982: LD_ADDR_VAR 0 5
70986: PUSH
70987: LD_VAR 0 1
70991: PPUSH
70992: CALL_OW 251
70996: PPUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: LD_INT 1
71004: PPUSH
71005: CALL_OW 273
71009: ST_TO_ADDR
// if ValidHex ( x , y ) then
71010: LD_VAR 0 4
71014: PPUSH
71015: LD_VAR 0 5
71019: PPUSH
71020: CALL_OW 488
71024: IFFALSE 71045
// ComTurnXY ( unit , x , y ) ;
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_VAR 0 4
71035: PPUSH
71036: LD_VAR 0 5
71040: PPUSH
71041: CALL_OW 118
// end ;
71045: LD_VAR 0 3
71049: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71050: LD_INT 0
71052: PPUSH
71053: PPUSH
// result := false ;
71054: LD_ADDR_VAR 0 3
71058: PUSH
71059: LD_INT 0
71061: ST_TO_ADDR
// if not units then
71062: LD_VAR 0 2
71066: NOT
71067: IFFALSE 71071
// exit ;
71069: GO 71116
// for i in units do
71071: LD_ADDR_VAR 0 4
71075: PUSH
71076: LD_VAR 0 2
71080: PUSH
71081: FOR_IN
71082: IFFALSE 71114
// if See ( side , i ) then
71084: LD_VAR 0 1
71088: PPUSH
71089: LD_VAR 0 4
71093: PPUSH
71094: CALL_OW 292
71098: IFFALSE 71112
// begin result := true ;
71100: LD_ADDR_VAR 0 3
71104: PUSH
71105: LD_INT 1
71107: ST_TO_ADDR
// exit ;
71108: POP
71109: POP
71110: GO 71116
// end ;
71112: GO 71081
71114: POP
71115: POP
// end ;
71116: LD_VAR 0 3
71120: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71121: LD_INT 0
71123: PPUSH
71124: PPUSH
71125: PPUSH
71126: PPUSH
// if not unit or not points then
71127: LD_VAR 0 1
71131: NOT
71132: PUSH
71133: LD_VAR 0 2
71137: NOT
71138: OR
71139: IFFALSE 71143
// exit ;
71141: GO 71233
// dist := 99999 ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_INT 99999
71150: ST_TO_ADDR
// for i in points do
71151: LD_ADDR_VAR 0 4
71155: PUSH
71156: LD_VAR 0 2
71160: PUSH
71161: FOR_IN
71162: IFFALSE 71231
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71164: LD_ADDR_VAR 0 6
71168: PUSH
71169: LD_VAR 0 1
71173: PPUSH
71174: LD_VAR 0 4
71178: PUSH
71179: LD_INT 1
71181: ARRAY
71182: PPUSH
71183: LD_VAR 0 4
71187: PUSH
71188: LD_INT 2
71190: ARRAY
71191: PPUSH
71192: CALL_OW 297
71196: ST_TO_ADDR
// if tmpDist < dist then
71197: LD_VAR 0 6
71201: PUSH
71202: LD_VAR 0 5
71206: LESS
71207: IFFALSE 71229
// begin result := i ;
71209: LD_ADDR_VAR 0 3
71213: PUSH
71214: LD_VAR 0 4
71218: ST_TO_ADDR
// dist := tmpDist ;
71219: LD_ADDR_VAR 0 5
71223: PUSH
71224: LD_VAR 0 6
71228: ST_TO_ADDR
// end ; end ;
71229: GO 71161
71231: POP
71232: POP
// end ;
71233: LD_VAR 0 3
71237: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71238: LD_INT 0
71240: PPUSH
// uc_side := side ;
71241: LD_ADDR_OWVAR 20
71245: PUSH
71246: LD_VAR 0 1
71250: ST_TO_ADDR
// uc_nation := 3 ;
71251: LD_ADDR_OWVAR 21
71255: PUSH
71256: LD_INT 3
71258: ST_TO_ADDR
// vc_chassis := 25 ;
71259: LD_ADDR_OWVAR 37
71263: PUSH
71264: LD_INT 25
71266: ST_TO_ADDR
// vc_engine := engine_siberite ;
71267: LD_ADDR_OWVAR 39
71271: PUSH
71272: LD_INT 3
71274: ST_TO_ADDR
// vc_control := control_computer ;
71275: LD_ADDR_OWVAR 38
71279: PUSH
71280: LD_INT 3
71282: ST_TO_ADDR
// vc_weapon := 59 ;
71283: LD_ADDR_OWVAR 40
71287: PUSH
71288: LD_INT 59
71290: ST_TO_ADDR
// result := CreateVehicle ;
71291: LD_ADDR_VAR 0 5
71295: PUSH
71296: CALL_OW 45
71300: ST_TO_ADDR
// SetDir ( result , d ) ;
71301: LD_VAR 0 5
71305: PPUSH
71306: LD_VAR 0 4
71310: PPUSH
71311: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71315: LD_VAR 0 5
71319: PPUSH
71320: LD_VAR 0 2
71324: PPUSH
71325: LD_VAR 0 3
71329: PPUSH
71330: LD_INT 0
71332: PPUSH
71333: CALL_OW 48
// end ;
71337: LD_VAR 0 5
71341: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71342: LD_INT 0
71344: PPUSH
71345: PPUSH
71346: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71347: LD_ADDR_VAR 0 2
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71370: LD_VAR 0 1
71374: NOT
71375: PUSH
71376: LD_VAR 0 1
71380: PPUSH
71381: CALL_OW 264
71385: PUSH
71386: LD_INT 12
71388: PUSH
71389: LD_INT 51
71391: PUSH
71392: LD_INT 32
71394: PUSH
71395: LD_INT 89
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: IN
71404: NOT
71405: OR
71406: IFFALSE 71410
// exit ;
71408: GO 71508
// for i := 1 to 3 do
71410: LD_ADDR_VAR 0 3
71414: PUSH
71415: DOUBLE
71416: LD_INT 1
71418: DEC
71419: ST_TO_ADDR
71420: LD_INT 3
71422: PUSH
71423: FOR_TO
71424: IFFALSE 71506
// begin tmp := GetCargo ( cargo , i ) ;
71426: LD_ADDR_VAR 0 4
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: LD_VAR 0 3
71440: PPUSH
71441: CALL_OW 289
71445: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71446: LD_ADDR_VAR 0 2
71450: PUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: LD_VAR 0 3
71460: PPUSH
71461: LD_VAR 0 4
71465: PPUSH
71466: CALL_OW 1
71470: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71471: LD_ADDR_VAR 0 2
71475: PUSH
71476: LD_VAR 0 2
71480: PPUSH
71481: LD_INT 4
71483: PPUSH
71484: LD_VAR 0 2
71488: PUSH
71489: LD_INT 4
71491: ARRAY
71492: PUSH
71493: LD_VAR 0 4
71497: PLUS
71498: PPUSH
71499: CALL_OW 1
71503: ST_TO_ADDR
// end ;
71504: GO 71423
71506: POP
71507: POP
// end ;
71508: LD_VAR 0 2
71512: RET
// export function Length ( array ) ; begin
71513: LD_INT 0
71515: PPUSH
// result := array + 0 ;
71516: LD_ADDR_VAR 0 2
71520: PUSH
71521: LD_VAR 0 1
71525: PUSH
71526: LD_INT 0
71528: PLUS
71529: ST_TO_ADDR
// end ;
71530: LD_VAR 0 2
71534: RET
// export function PrepareArray ( array ) ; begin
71535: LD_INT 0
71537: PPUSH
// result := array diff 0 ;
71538: LD_ADDR_VAR 0 2
71542: PUSH
71543: LD_VAR 0 1
71547: PUSH
71548: LD_INT 0
71550: DIFF
71551: ST_TO_ADDR
// if not result [ 1 ] then
71552: LD_VAR 0 2
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: NOT
71561: IFFALSE 71581
// result := Delete ( result , 1 ) ;
71563: LD_ADDR_VAR 0 2
71567: PUSH
71568: LD_VAR 0 2
71572: PPUSH
71573: LD_INT 1
71575: PPUSH
71576: CALL_OW 3
71580: ST_TO_ADDR
// end ;
71581: LD_VAR 0 2
71585: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71586: LD_INT 0
71588: PPUSH
71589: PPUSH
71590: PPUSH
71591: PPUSH
// sibRocketRange := 25 ;
71592: LD_ADDR_VAR 0 6
71596: PUSH
71597: LD_INT 25
71599: ST_TO_ADDR
// result := false ;
71600: LD_ADDR_VAR 0 4
71604: PUSH
71605: LD_INT 0
71607: ST_TO_ADDR
// for i := 0 to 5 do
71608: LD_ADDR_VAR 0 5
71612: PUSH
71613: DOUBLE
71614: LD_INT 0
71616: DEC
71617: ST_TO_ADDR
71618: LD_INT 5
71620: PUSH
71621: FOR_TO
71622: IFFALSE 71689
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71624: LD_VAR 0 1
71628: PPUSH
71629: LD_VAR 0 5
71633: PPUSH
71634: LD_VAR 0 6
71638: PPUSH
71639: CALL_OW 272
71643: PPUSH
71644: LD_VAR 0 2
71648: PPUSH
71649: LD_VAR 0 5
71653: PPUSH
71654: LD_VAR 0 6
71658: PPUSH
71659: CALL_OW 273
71663: PPUSH
71664: LD_VAR 0 3
71668: PPUSH
71669: CALL_OW 309
71673: IFFALSE 71687
// begin result := true ;
71675: LD_ADDR_VAR 0 4
71679: PUSH
71680: LD_INT 1
71682: ST_TO_ADDR
// exit ;
71683: POP
71684: POP
71685: GO 71691
// end ;
71687: GO 71621
71689: POP
71690: POP
// end ;
71691: LD_VAR 0 4
71695: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71696: LD_INT 0
71698: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71699: LD_VAR 0 1
71703: PPUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_INT 0
71711: PPUSH
71712: LD_INT 0
71714: PPUSH
71715: LD_INT 1
71717: PPUSH
71718: LD_INT 0
71720: PPUSH
71721: CALL_OW 587
// end ; end_of_file
71725: LD_VAR 0 3
71729: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71730: LD_VAR 0 1
71734: PUSH
71735: LD_INT 200
71737: DOUBLE
71738: GREATEREQUAL
71739: IFFALSE 71747
71741: LD_INT 299
71743: DOUBLE
71744: LESSEQUAL
71745: IFTRUE 71749
71747: GO 71781
71749: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_VAR 0 2
71759: PPUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: LD_VAR 0 5
71774: PPUSH
71775: CALL 10602 0 5
71779: GO 71858
71781: LD_INT 300
71783: DOUBLE
71784: GREATEREQUAL
71785: IFFALSE 71793
71787: LD_INT 399
71789: DOUBLE
71790: LESSEQUAL
71791: IFTRUE 71795
71793: GO 71857
71795: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71796: LD_VAR 0 1
71800: PPUSH
71801: LD_VAR 0 2
71805: PPUSH
71806: LD_VAR 0 3
71810: PPUSH
71811: LD_VAR 0 4
71815: PPUSH
71816: LD_VAR 0 5
71820: PPUSH
71821: LD_VAR 0 6
71825: PPUSH
71826: LD_VAR 0 7
71830: PPUSH
71831: LD_VAR 0 8
71835: PPUSH
71836: LD_VAR 0 9
71840: PPUSH
71841: LD_VAR 0 10
71845: PPUSH
71846: LD_VAR 0 11
71850: PPUSH
71851: CALL 27018 0 11
71855: GO 71858
71857: POP
// end ;
71858: PPOPN 11
71860: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71861: LD_VAR 0 1
71865: PPUSH
71866: LD_VAR 0 2
71870: PPUSH
71871: LD_VAR 0 3
71875: PPUSH
71876: LD_VAR 0 4
71880: PPUSH
71881: LD_VAR 0 5
71885: PPUSH
71886: CALL 10338 0 5
// end ; end_of_file
71890: PPOPN 5
71892: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71893: LD_VAR 0 1
71897: PPUSH
71898: LD_VAR 0 2
71902: PPUSH
71903: LD_VAR 0 3
71907: PPUSH
71908: LD_VAR 0 4
71912: PPUSH
71913: LD_VAR 0 5
71917: PPUSH
71918: LD_VAR 0 6
71922: PPUSH
71923: CALL 14670 0 6
// end ;
71927: PPOPN 6
71929: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71930: LD_INT 0
71932: PPUSH
// begin if not units then
71933: LD_VAR 0 1
71937: NOT
71938: IFFALSE 71942
// exit ;
71940: GO 71942
// end ;
71942: PPOPN 7
71944: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71945: CALL 14574 0 0
// end ;
71949: PPOPN 1
71951: END
