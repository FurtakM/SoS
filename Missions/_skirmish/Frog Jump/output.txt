// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7520 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7307 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1938 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9632 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6123 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: PUSH
1579: LD_EXP 9
1583: AND
1584: IFFALSE 1731
1586: GO 1588
1588: DISABLE
1589: LD_INT 0
1591: PPUSH
// begin enable ;
1592: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1593: LD_ADDR_EXP 31
1597: PUSH
1598: LD_EXP 31
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1607: LD_ADDR_VAR 0 1
1611: PUSH
1612: DOUBLE
1613: LD_INT 1
1615: DEC
1616: ST_TO_ADDR
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_OWVAR 67
1635: ARRAY
1636: PUSH
1637: LD_EXP 31
1641: PLUS
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1674
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1646: LD_INT 1
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 2
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: CALL 1133 0 1
// end ;
1672: GO 1643
1674: POP
1675: POP
// repeat wait ( 0 0$01 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1683: LD_EXP 32
1687: PUSH
1688: LD_INT 4
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_OWVAR 67
1706: ARRAY
1707: PUSH
1708: LD_EXP 31
1712: PLUS
1713: GREATEREQUAL
1714: IFFALSE 1676
// AddComMoveXY ( al_force , 143 , 178 ) ;
1716: LD_EXP 32
1720: PPUSH
1721: LD_INT 143
1723: PPUSH
1724: LD_INT 178
1726: PPUSH
1727: CALL_OW 171
// end ;
1731: PPOPN 1
1733: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1734: LD_INT 6
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: IFFALSE 1831
1753: GO 1755
1755: DISABLE
1756: LD_INT 0
1758: PPUSH
// begin enable ;
1759: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 6
1767: PPUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 7
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 70
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_INT 81
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 255
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 74
1822: PPUSH
1823: CALL_OW 115
1827: GO 1783
1829: POP
1830: POP
// end ;
1831: PPOPN 1
1833: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1834: LD_EXP 9
1838: IFFALSE 1935
1840: GO 1842
1842: DISABLE
1843: LD_INT 0
1845: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1846: LD_ADDR_VAR 0 1
1850: PUSH
1851: LD_INT 18900
1853: PUSH
1854: LD_INT 18200
1856: PUSH
1857: LD_INT 16450
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_OWVAR 67
1869: ARRAY
1870: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1871: CALL 9007 0 0
// wait ( reload_time / 2 ) ;
1875: LD_VAR 0 1
1879: PUSH
1880: LD_INT 2
1882: DIVREAL
1883: PPUSH
1884: CALL_OW 67
// ActiveArtifact2 ( ) ;
1888: CALL 9452 0 0
// wait ( reload_time / 2 ) ;
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 2
1899: DIVREAL
1900: PPUSH
1901: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1905: LD_INT 22
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 8
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: IFFALSE 1871
// end ; end_of_file
1935: PPOPN 1
1937: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1938: LD_INT 0
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
// uc_side := 8 ;
1946: LD_ADDR_OWVAR 20
1950: PUSH
1951: LD_INT 8
1953: ST_TO_ADDR
// uc_nation := 2 ;
1954: LD_ADDR_OWVAR 21
1958: PUSH
1959: LD_INT 2
1961: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1962: LD_ADDR_VAR 0 4
1966: PUSH
1967: LD_INT 7
1969: PUSH
1970: LD_INT 8
1972: PUSH
1973: LD_INT 9
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: ST_TO_ADDR
// dep := ar_base ;
1987: LD_ADDR_VAR 0 5
1991: PUSH
1992: LD_INT 57
1994: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1995: LD_ADDR_VAR 0 6
1999: PUSH
2000: LD_INT 22
2002: PUSH
2003: LD_INT 8
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: LD_INT 30
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL_OW 69
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2033: LD_VAR 0 5
2037: PPUSH
2038: CALL_OW 274
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: LD_INT 999999
2048: PPUSH
2049: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2053: LD_VAR 0 5
2057: PPUSH
2058: CALL_OW 274
2062: PPUSH
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 10000
2068: PPUSH
2069: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 274
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: LD_INT 10000
2088: PPUSH
2089: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2093: LD_INT 68
2095: PPUSH
2096: LD_INT 224
2098: PPUSH
2099: LD_INT 5
2101: PPUSH
2102: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: LD_INT 6
2114: PPUSH
2115: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2119: LD_ADDR_OWVAR 26
2123: PUSH
2124: LD_STRING Nicolas Vervecken
2126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2127: LD_ADDR_OWVAR 33
2131: PUSH
2132: LD_STRING SecondCharsGal
2134: ST_TO_ADDR
// hc_face_number := 3 ;
2135: LD_ADDR_OWVAR 34
2139: PUSH
2140: LD_INT 3
2142: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2143: LD_ADDR_OWVAR 29
2147: PUSH
2148: LD_INT 11
2150: PUSH
2151: LD_INT 10
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: ST_TO_ADDR
// Vervecken := CreateHuman ;
2158: LD_ADDR_EXP 3
2162: PUSH
2163: CALL_OW 44
2167: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2168: LD_EXP 3
2172: PPUSH
2173: LD_VAR 0 5
2177: PPUSH
2178: CALL_OW 52
// InitHc_All ( ) ;
2182: CALL_OW 584
// for i = 1 to 4 do
2186: LD_ADDR_VAR 0 2
2190: PUSH
2191: DOUBLE
2192: LD_INT 1
2194: DEC
2195: ST_TO_ADDR
2196: LD_INT 4
2198: PUSH
2199: FOR_TO
2200: IFFALSE 2261
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2202: LD_INT 0
2204: PPUSH
2205: LD_INT 9
2207: PPUSH
2208: LD_VAR 0 4
2212: PPUSH
2213: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2217: CALL_OW 44
2221: PPUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 8
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 30
2234: PUSH
2235: LD_INT 5
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PPUSH
2246: CALL_OW 69
2250: PUSH
2251: LD_INT 1
2253: ARRAY
2254: PPUSH
2255: CALL_OW 52
// end ;
2259: GO 2199
2261: POP
2262: POP
// for i = 1 to 2 do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 2
2275: PUSH
2276: FOR_TO
2277: IFFALSE 2338
// begin PrepareHuman ( false , 4 , skill ) ;
2279: LD_INT 0
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: LD_VAR 0 4
2289: PPUSH
2290: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2294: CALL_OW 44
2298: PPUSH
2299: LD_INT 22
2301: PUSH
2302: LD_INT 8
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 30
2311: PUSH
2312: LD_INT 8
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: PUSH
2328: LD_INT 1
2330: ARRAY
2331: PPUSH
2332: CALL_OW 52
// end ;
2336: GO 2276
2338: POP
2339: POP
// for i = 1 to 6 do
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: DOUBLE
2346: LD_INT 1
2348: DEC
2349: ST_TO_ADDR
2350: LD_INT 6
2352: PUSH
2353: FOR_TO
2354: IFFALSE 2391
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2356: LD_INT 0
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: LD_VAR 0 4
2366: PUSH
2367: LD_INT 1
2369: PLUS
2370: PPUSH
2371: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2375: CALL_OW 44
2379: PPUSH
2380: LD_VAR 0 6
2384: PPUSH
2385: CALL_OW 52
// end ;
2389: GO 2353
2391: POP
2392: POP
// uc_nation := 0 ;
2393: LD_ADDR_OWVAR 21
2397: PUSH
2398: LD_INT 0
2400: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2401: LD_ADDR_VAR 0 2
2405: PUSH
2406: LD_INT 22
2408: PUSH
2409: LD_INT 8
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 30
2418: PUSH
2419: LD_INT 32
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PPUSH
2430: CALL_OW 69
2434: PUSH
2435: FOR_IN
2436: IFFALSE 2473
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2438: LD_INT 0
2440: PPUSH
2441: LD_INT 15
2443: PPUSH
2444: LD_VAR 0 4
2448: PUSH
2449: LD_INT 1
2451: PLUS
2452: PPUSH
2453: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2457: CALL_OW 44
2461: PPUSH
2462: LD_VAR 0 2
2466: PPUSH
2467: CALL_OW 52
// end ;
2471: GO 2435
2473: POP
2474: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2475: LD_INT 0
2477: PPUSH
2478: LD_INT 5
2480: PPUSH
2481: LD_INT 10
2483: PPUSH
2484: CALL_OW 380
// un := CreateHuman ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: CALL_OW 44
2497: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2498: LD_VAR 0 3
2502: PPUSH
2503: LD_INT 175
2505: PPUSH
2506: LD_INT 128
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2516: LD_VAR 0 3
2520: PPUSH
2521: LD_INT 115
2523: PPUSH
2524: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2528: LD_INT 0
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 10
2536: PPUSH
2537: CALL_OW 380
// un := CreateHuman ;
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: CALL_OW 44
2550: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2551: LD_VAR 0 3
2555: PPUSH
2556: LD_INT 240
2558: PPUSH
2559: LD_INT 128
2561: PPUSH
2562: CALL_OW 428
2566: PPUSH
2567: CALL_OW 52
// un := CreateHuman ;
2571: LD_ADDR_VAR 0 3
2575: PUSH
2576: CALL_OW 44
2580: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2581: LD_VAR 0 3
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2593: LD_VAR 0 3
2597: PPUSH
2598: LD_INT 260
2600: PPUSH
2601: LD_INT 147
2603: PPUSH
2604: CALL_OW 428
2608: PPUSH
2609: CALL_OW 52
// for i = 1 to 2 do
2613: LD_ADDR_VAR 0 2
2617: PUSH
2618: DOUBLE
2619: LD_INT 1
2621: DEC
2622: ST_TO_ADDR
2623: LD_INT 2
2625: PUSH
2626: FOR_TO
2627: IFFALSE 2652
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2629: LD_VAR 0 6
2633: PPUSH
2634: LD_INT 14
2636: PPUSH
2637: LD_INT 2
2639: PPUSH
2640: LD_INT 1
2642: PPUSH
2643: LD_INT 31
2645: PPUSH
2646: CALL_OW 185
2650: GO 2626
2652: POP
2653: POP
// end ;
2654: LD_VAR 0 1
2658: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2659: LD_INT 0
2661: PPUSH
2662: PPUSH
// for i = 1 to num do
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: DOUBLE
2669: LD_INT 1
2671: DEC
2672: ST_TO_ADDR
2673: LD_VAR 0 1
2677: PUSH
2678: FOR_TO
2679: IFFALSE 2751
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2681: LD_INT 22
2683: PUSH
2684: LD_INT 8
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 30
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 69
2709: PUSH
2710: LD_INT 1
2712: ARRAY
2713: PPUSH
2714: LD_INT 11
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 23
2725: PUSH
2726: LD_INT 24
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: CALL_OW 12
2743: ARRAY
2744: PPUSH
2745: CALL_OW 185
2749: GO 2678
2751: POP
2752: POP
// end ;
2753: LD_VAR 0 2
2757: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2758: LD_INT 0
2760: PPUSH
2761: PPUSH
2762: PPUSH
// uc_side := 8 ;
2763: LD_ADDR_OWVAR 20
2767: PUSH
2768: LD_INT 8
2770: ST_TO_ADDR
// uc_nation := 0 ;
2771: LD_ADDR_OWVAR 21
2775: PUSH
2776: LD_INT 0
2778: ST_TO_ADDR
// hc_class := 17 ;
2779: LD_ADDR_OWVAR 28
2783: PUSH
2784: LD_INT 17
2786: ST_TO_ADDR
// hc_gallery :=  ;
2787: LD_ADDR_OWVAR 33
2791: PUSH
2792: LD_STRING 
2794: ST_TO_ADDR
// hc_name :=  ;
2795: LD_ADDR_OWVAR 26
2799: PUSH
2800: LD_STRING 
2802: ST_TO_ADDR
// hc_importance := 0 ;
2803: LD_ADDR_OWVAR 32
2807: PUSH
2808: LD_INT 0
2810: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2811: LD_ADDR_OWVAR 31
2815: PUSH
2816: LD_INT 10
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 10
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: ST_TO_ADDR
// if ar_base then
2834: LD_INT 57
2836: IFFALSE 2881
// begin un := CreateHuman ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: CALL_OW 44
2847: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_INT 57
2855: PPUSH
2856: CALL_OW 52
// ComExitBuilding ( un ) ;
2860: LD_VAR 0 3
2864: PPUSH
2865: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2869: LD_VAR 0 3
2873: PPUSH
2874: LD_INT 68
2876: PPUSH
2877: CALL_OW 180
// end ; end ;
2881: LD_VAR 0 1
2885: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2886: LD_INT 0
2888: PPUSH
2889: PPUSH
// legion_force := [ ] ;
2890: LD_ADDR_EXP 33
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// l_allow_attack := false ;
2897: LD_ADDR_EXP 34
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL 2659 0 1
// repeat wait ( 0 0$01 ) ;
2914: LD_INT 35
2916: PPUSH
2917: CALL_OW 67
// until legion_force >= n1 ;
2921: LD_EXP 33
2925: PUSH
2926: LD_VAR 0 1
2930: GREATEREQUAL
2931: IFFALSE 2914
// l_allow_attack := true ;
2933: LD_ADDR_EXP 34
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// for i = 1 to n2 do
2941: LD_ADDR_VAR 0 4
2945: PUSH
2946: DOUBLE
2947: LD_INT 1
2949: DEC
2950: ST_TO_ADDR
2951: LD_VAR 0 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 2965
// begin AddKamikaze ( ) ;
2959: CALL 2758 0 0
// end ;
2963: GO 2956
2965: POP
2966: POP
// end ;
2967: LD_VAR 0 3
2971: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2972: LD_INT 22
2974: PUSH
2975: LD_INT 8
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 50
2984: PUSH
2985: EMPTY
2986: LIST
2987: PUSH
2988: LD_INT 33
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 3
3000: PUSH
3001: LD_INT 61
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 69
3021: IFFALSE 3101
3023: GO 3025
3025: DISABLE
3026: LD_INT 0
3028: PPUSH
// begin enable ;
3029: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 8
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 50
3047: PUSH
3048: EMPTY
3049: LIST
3050: PUSH
3051: LD_INT 33
3053: PUSH
3054: LD_INT 2
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: LD_INT 61
3066: PUSH
3067: EMPTY
3068: LIST
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: FOR_IN
3086: IFFALSE 3099
// Connect ( i ) ;
3088: LD_VAR 0 1
3092: PPUSH
3093: CALL 38067 0 1
3097: GO 3085
3099: POP
3100: POP
// end ;
3101: PPOPN 1
3103: END
// every 5 5$00 trigger legion_attacks_active do
3104: LD_EXP 7
3108: IFFALSE 3160
3110: GO 3112
3112: DISABLE
// begin enable ;
3113: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3114: LD_INT 5250
3116: PUSH
3117: LD_INT 2100
3119: PUSH
3120: LD_INT 1050
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_OWVAR 67
3132: ARRAY
3133: PPUSH
3134: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3138: LD_EXP 8
3142: PUSH
3143: LD_INT 2
3145: MINUS
3146: PUSH
3147: LD_OWVAR 67
3151: PLUS
3152: PPUSH
3153: LD_INT 2
3155: PPUSH
3156: CALL 2886 0 2
// end ;
3160: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3161: LD_EXP 34
3165: PUSH
3166: LD_EXP 33
3170: PPUSH
3171: LD_INT 3
3173: PUSH
3174: LD_INT 60
3176: PUSH
3177: EMPTY
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 61
3186: PUSH
3187: EMPTY
3188: LIST
3189: PUSH
3190: LD_INT 50
3192: PUSH
3193: EMPTY
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: AND
3206: IFFALSE 3337
3208: GO 3210
3210: DISABLE
3211: LD_INT 0
3213: PPUSH
3214: PPUSH
// begin enable ;
3215: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_EXP 33
3225: PPUSH
3226: LD_INT 3
3228: PUSH
3229: LD_INT 60
3231: PUSH
3232: EMPTY
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 61
3241: PUSH
3242: EMPTY
3243: LIST
3244: PUSH
3245: LD_INT 50
3247: PUSH
3248: EMPTY
3249: LIST
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: LIST
3255: PPUSH
3256: CALL_OW 72
3260: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: LD_INT 150
3268: PUSH
3269: LD_INT 93
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 232
3278: PUSH
3279: LD_INT 88
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 209
3288: PUSH
3289: LD_INT 50
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 208
3298: PUSH
3299: LD_INT 29
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 191
3308: PUSH
3309: LD_INT 17
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3323: LD_VAR 0 2
3327: PPUSH
3328: LD_VAR 0 1
3332: PPUSH
3333: CALL 70033 0 2
// end ;
3337: PPOPN 2
3339: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3340: LD_INT 6
3342: PPUSH
3343: LD_INT 22
3345: PUSH
3346: LD_INT 8
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 25
3355: PUSH
3356: LD_INT 17
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 70
3371: IFFALSE 3458
3373: GO 3375
3375: DISABLE
3376: LD_INT 0
3378: PPUSH
// begin enable ;
3379: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3380: LD_ADDR_VAR 0 1
3384: PUSH
3385: LD_INT 6
3387: PPUSH
3388: LD_INT 22
3390: PUSH
3391: LD_INT 8
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 25
3400: PUSH
3401: LD_INT 17
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 70
3416: PUSH
3417: FOR_IN
3418: IFFALSE 3456
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3420: LD_VAR 0 1
3424: PPUSH
3425: LD_INT 22
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: PPUSH
3440: LD_VAR 0 1
3444: PPUSH
3445: CALL_OW 74
3449: PPUSH
3450: CALL_OW 115
3454: GO 3417
3456: POP
3457: POP
// end ;
3458: PPOPN 1
3460: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3461: LD_INT 68
3463: IFFALSE 3694
3465: GO 3467
3467: DISABLE
3468: LD_INT 0
3470: PPUSH
3471: PPUSH
3472: PPUSH
// begin enable ;
3473: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3474: LD_ADDR_VAR 0 2
3478: PUSH
3479: LD_INT 224
3481: PUSH
3482: LD_INT 5
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 160
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 228
3501: PUSH
3502: LD_INT 56
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 271
3511: PUSH
3512: LD_INT 87
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: ST_TO_ADDR
// for i = 1 to 3 do
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: DOUBLE
3531: LD_INT 1
3533: DEC
3534: ST_TO_ADDR
3535: LD_INT 3
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3555
// EraseResourceArea ( telArea , i ) ;
3541: LD_INT 7
3543: PPUSH
3544: LD_VAR 0 3
3548: PPUSH
3549: CALL_OW 286
3553: GO 3538
3555: POP
3556: POP
// for i = xy downto 1 do
3557: LD_ADDR_VAR 0 3
3561: PUSH
3562: DOUBLE
3563: LD_VAR 0 2
3567: INC
3568: ST_TO_ADDR
3569: LD_INT 1
3571: PUSH
3572: FOR_DOWNTO
3573: IFFALSE 3655
// begin k := rand ( 1 , xy ) ;
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_VAR 0 2
3587: PPUSH
3588: CALL_OW 12
3592: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3593: LD_VAR 0 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PUSH
3604: LD_INT 1
3606: ARRAY
3607: PPUSH
3608: LD_VAR 0 2
3612: PUSH
3613: LD_VAR 0 1
3617: ARRAY
3618: PUSH
3619: LD_INT 2
3621: ARRAY
3622: PPUSH
3623: CALL_OW 428
3627: IFFALSE 3651
// xy := Delete ( xy , k ) else
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_VAR 0 1
3643: PPUSH
3644: CALL_OW 3
3648: ST_TO_ADDR
3649: GO 3653
// break ;
3651: GO 3655
// end ;
3653: GO 3572
3655: POP
3656: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3657: LD_INT 68
3659: PPUSH
3660: LD_VAR 0 2
3664: PUSH
3665: LD_VAR 0 1
3669: ARRAY
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 2
3679: PUSH
3680: LD_VAR 0 1
3684: ARRAY
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PPUSH
3690: CALL_OW 243
// end ; end_of_file
3694: PPOPN 3
3696: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
// uc_side := 6 ;
3706: LD_ADDR_OWVAR 20
3710: PUSH
3711: LD_INT 6
3713: ST_TO_ADDR
// uc_nation := nation_russian ;
3714: LD_ADDR_OWVAR 21
3718: PUSH
3719: LD_INT 3
3721: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3722: LD_INT 6
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3732: LD_ADDR_VAR 0 6
3736: PUSH
3737: LD_INT 9
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: LD_INT 3
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_INT 8
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: PUSH
3772: LD_OWVAR 67
3776: ARRAY
3777: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3778: LD_ADDR_VAR 0 3
3782: PUSH
3783: LD_INT 9
3785: PUSH
3786: LD_INT 8
3788: PUSH
3789: LD_INT 7
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: ST_TO_ADDR
// tmp := [ ] ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: EMPTY
3809: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3810: LD_ADDR_EXP 2
3814: PUSH
3815: LD_STRING Davidov
3817: PPUSH
3818: CALL_OW 25
3822: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3823: LD_EXP 2
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_INT 7
3833: PPUSH
3834: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3838: LD_EXP 2
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: LD_INT 8
3848: PPUSH
3849: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3853: LD_EXP 2
3857: PPUSH
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 6
3863: PPUSH
3864: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3868: LD_EXP 2
3872: PPUSH
3873: LD_INT 4
3875: PPUSH
3876: LD_INT 10
3878: PPUSH
3879: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3883: LD_EXP 2
3887: PPUSH
3888: LD_INT 4
3890: PPUSH
3891: CALL_OW 336
// InitHc_All ( ) ;
3895: CALL_OW 584
// while amount [ 1 ] do
3899: LD_VAR 0 6
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: IFFALSE 4240
// begin Wait ( 1 ) ;
3909: LD_INT 1
3911: PPUSH
3912: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3916: LD_ADDR_VAR 0 7
3920: PUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_INT 4
3926: PPUSH
3927: CALL_OW 12
3931: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3932: LD_VAR 0 6
3936: PUSH
3937: LD_INT 2
3939: ARRAY
3940: PUSH
3941: LD_VAR 0 5
3945: AND
3946: IFFALSE 4101
// begin if k in [ 1 , 2 ] then
3948: LD_VAR 0 7
3952: PUSH
3953: LD_INT 1
3955: PUSH
3956: LD_INT 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: IN
3963: IFFALSE 3973
// k := 3 ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: LD_INT 3
3972: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3973: LD_ADDR_OWVAR 37
3977: PUSH
3978: LD_INT 22
3980: PUSH
3981: LD_INT 24
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 2
3993: PPUSH
3994: CALL_OW 12
3998: ARRAY
3999: ST_TO_ADDR
// vc_engine := engine_siberite ;
4000: LD_ADDR_OWVAR 39
4004: PUSH
4005: LD_INT 3
4007: ST_TO_ADDR
// vc_control := control_manual ;
4008: LD_ADDR_OWVAR 38
4012: PUSH
4013: LD_INT 1
4015: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4016: LD_ADDR_OWVAR 40
4020: PUSH
4021: LD_INT 44
4023: PUSH
4024: LD_INT 45
4026: PUSH
4027: LD_INT 43
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 3
4040: PPUSH
4041: CALL_OW 12
4045: ARRAY
4046: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4047: LD_ADDR_VAR 0 5
4051: PUSH
4052: LD_VAR 0 5
4056: PPUSH
4057: LD_INT 1
4059: PPUSH
4060: CALL_OW 45
4064: PPUSH
4065: CALL_OW 2
4069: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4070: LD_ADDR_VAR 0 6
4074: PUSH
4075: LD_VAR 0 6
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 2
4090: ARRAY
4091: PUSH
4092: LD_INT 1
4094: MINUS
4095: PPUSH
4096: CALL_OW 1
4100: ST_TO_ADDR
// end ; if not tmp then
4101: LD_VAR 0 5
4105: NOT
4106: IFFALSE 4116
// k := 2 ;
4108: LD_ADDR_VAR 0 7
4112: PUSH
4113: LD_INT 2
4115: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4116: LD_VAR 0 6
4120: PUSH
4121: LD_INT 2
4123: ARRAY
4124: PUSH
4125: LD_INT 0
4127: EQUAL
4128: PUSH
4129: LD_VAR 0 7
4133: PUSH
4134: LD_INT 3
4136: EQUAL
4137: AND
4138: IFFALSE 4167
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4140: LD_ADDR_VAR 0 7
4144: PUSH
4145: LD_INT 9
4147: PUSH
4148: LD_INT 4
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 1
4157: PPUSH
4158: LD_INT 2
4160: PPUSH
4161: CALL_OW 12
4165: ARRAY
4166: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_VAR 0 7
4174: PPUSH
4175: LD_VAR 0 3
4179: PPUSH
4180: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_VAR 0 5
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: CALL_OW 44
4201: PPUSH
4202: CALL_OW 2
4206: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4207: LD_ADDR_VAR 0 6
4211: PUSH
4212: LD_VAR 0 6
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: LD_VAR 0 6
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: PUSH
4229: LD_INT 1
4231: MINUS
4232: PPUSH
4233: CALL_OW 1
4237: ST_TO_ADDR
// end ;
4238: GO 3899
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4240: LD_ADDR_VAR 0 5
4244: PUSH
4245: LD_VAR 0 5
4249: PPUSH
4250: LD_VAR 0 5
4254: PUSH
4255: LD_INT 1
4257: PLUS
4258: PPUSH
4259: LD_EXP 2
4263: PPUSH
4264: CALL_OW 2
4268: ST_TO_ADDR
// for i = tmp downto 1 do
4269: LD_ADDR_VAR 0 2
4273: PUSH
4274: DOUBLE
4275: LD_VAR 0 5
4279: INC
4280: ST_TO_ADDR
4281: LD_INT 1
4283: PUSH
4284: FOR_DOWNTO
4285: IFFALSE 4447
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4287: LD_VAR 0 5
4291: PUSH
4292: LD_VAR 0 2
4296: ARRAY
4297: PPUSH
4298: CALL_OW 247
4302: PUSH
4303: LD_INT 2
4305: EQUAL
4306: IFFALSE 4396
// begin SetDir ( tmp [ i ] , 3 ) ;
4308: LD_VAR 0 5
4312: PUSH
4313: LD_VAR 0 2
4317: ARRAY
4318: PPUSH
4319: LD_INT 3
4321: PPUSH
4322: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4326: LD_VAR 0 5
4330: PUSH
4331: LD_VAR 0 2
4335: ARRAY
4336: PPUSH
4337: LD_INT 193
4339: PPUSH
4340: LD_INT 3
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4350: LD_VAR 0 5
4354: PUSH
4355: LD_VAR 0 2
4359: PUSH
4360: LD_INT 1
4362: MINUS
4363: ARRAY
4364: PPUSH
4365: LD_VAR 0 5
4369: PUSH
4370: LD_VAR 0 2
4374: ARRAY
4375: PPUSH
4376: CALL_OW 52
// i := i - 1 ;
4380: LD_ADDR_VAR 0 2
4384: PUSH
4385: LD_VAR 0 2
4389: PUSH
4390: LD_INT 1
4392: MINUS
4393: ST_TO_ADDR
// end else
4394: GO 4417
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4396: LD_VAR 0 5
4400: PUSH
4401: LD_VAR 0 2
4405: ARRAY
4406: PPUSH
4407: LD_INT 2
4409: PPUSH
4410: LD_INT 0
4412: PPUSH
4413: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4417: LD_VAR 0 5
4421: PUSH
4422: LD_VAR 0 2
4426: ARRAY
4427: PPUSH
4428: LD_INT 197
4430: PPUSH
4431: LD_INT 22
4433: PPUSH
4434: CALL_OW 111
// Wait ( 0 0$02 ) ;
4438: LD_INT 70
4440: PPUSH
4441: CALL_OW 67
// end ;
4445: GO 4284
4447: POP
4448: POP
// Wait ( 0 0$02 ) ;
4449: LD_INT 70
4451: PPUSH
4452: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4456: LD_ADDR_OWVAR 37
4460: PUSH
4461: LD_INT 22
4463: ST_TO_ADDR
// vc_engine := engine_siberite ;
4464: LD_ADDR_OWVAR 39
4468: PUSH
4469: LD_INT 3
4471: ST_TO_ADDR
// vc_control := control_computer ;
4472: LD_ADDR_OWVAR 38
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4480: LD_ADDR_OWVAR 40
4484: PUSH
4485: LD_INT 51
4487: ST_TO_ADDR
// tmp := CreateVehicle ;
4488: LD_ADDR_VAR 0 5
4492: PUSH
4493: CALL_OW 45
4497: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4498: LD_VAR 0 5
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4510: LD_VAR 0 5
4514: PPUSH
4515: LD_INT 193
4517: PPUSH
4518: LD_INT 3
4520: PPUSH
4521: LD_INT 0
4523: PPUSH
4524: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4528: LD_VAR 0 5
4532: PPUSH
4533: LD_INT 4
4535: PPUSH
4536: LD_INT 60
4538: PPUSH
4539: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4543: LD_VAR 0 5
4547: PPUSH
4548: LD_INT 197
4550: PPUSH
4551: LD_INT 22
4553: PPUSH
4554: CALL_OW 111
// end ; end_of_file
4558: LD_VAR 0 1
4562: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4563: LD_INT 0
4565: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_VAR 0 2
4575: PPUSH
4576: CALL 9998 0 2
// side := GetSide ( fac ) ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: LD_VAR 0 2
4589: PPUSH
4590: CALL_OW 255
4594: ST_TO_ADDR
// case side of 7 :
4595: LD_VAR 0 3
4599: PUSH
4600: LD_INT 7
4602: DOUBLE
4603: EQUAL
4604: IFTRUE 4608
4606: GO 4655
4608: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4609: LD_ADDR_EXP 32
4613: PUSH
4614: LD_EXP 32
4618: PPUSH
4619: LD_EXP 32
4623: PUSH
4624: LD_INT 1
4626: PLUS
4627: PPUSH
4628: LD_VAR 0 1
4632: PPUSH
4633: CALL_OW 1
4637: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4638: LD_VAR 0 1
4642: PPUSH
4643: LD_INT 112
4645: PPUSH
4646: LD_INT 175
4648: PPUSH
4649: CALL_OW 171
// end ; 8 :
4653: GO 4741
4655: LD_INT 8
4657: DOUBLE
4658: EQUAL
4659: IFTRUE 4663
4661: GO 4740
4663: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 264
4673: PUSH
4674: LD_INT 31
4676: EQUAL
4677: IFFALSE 4694
// ComMoveXY ( veh , 145 , 66 ) ;
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 145
4686: PPUSH
4687: LD_INT 66
4689: PPUSH
4690: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4694: LD_VAR 0 1
4698: PPUSH
4699: CALL_OW 265
4703: PUSH
4704: LD_INT 11
4706: EQUAL
4707: IFFALSE 4738
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4709: LD_ADDR_EXP 33
4713: PUSH
4714: LD_EXP 33
4718: PPUSH
4719: LD_EXP 33
4723: PUSH
4724: LD_INT 1
4726: PLUS
4727: PPUSH
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL_OW 1
4737: ST_TO_ADDR
// end ; end ;
4738: GO 4741
4740: POP
// end ;
4741: PPOPN 3
4743: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL 9878 0 1
// if un in legion_force then
4753: LD_VAR 0 1
4757: PUSH
4758: LD_EXP 33
4762: IN
4763: IFFALSE 4781
// legion_force := legion_force diff un ;
4765: LD_ADDR_EXP 33
4769: PUSH
4770: LD_EXP 33
4774: PUSH
4775: LD_VAR 0 1
4779: DIFF
4780: ST_TO_ADDR
// if un in al_force then
4781: LD_VAR 0 1
4785: PUSH
4786: LD_EXP 32
4790: IN
4791: IFFALSE 4809
// al_force := al_force diff un ;
4793: LD_ADDR_EXP 32
4797: PUSH
4798: LD_EXP 32
4802: PUSH
4803: LD_VAR 0 1
4807: DIFF
4808: ST_TO_ADDR
// end ;
4809: PPOPN 1
4811: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4812: LD_VAR 0 1
4816: PUSH
4817: LD_INT 68
4819: EQUAL
4820: PUSH
4821: LD_VAR 0 2
4825: PPUSH
4826: CALL_OW 257
4830: PUSH
4831: LD_INT 17
4833: EQUAL
4834: AND
4835: IFFALSE 4878
// begin Wait ( 0 0$01 ) ;
4837: LD_INT 35
4839: PPUSH
4840: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4844: LD_VAR 0 2
4848: PPUSH
4849: LD_INT 22
4851: PUSH
4852: LD_INT 6
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PPUSH
4859: CALL_OW 69
4863: PPUSH
4864: LD_VAR 0 2
4868: PPUSH
4869: CALL_OW 74
4873: PPUSH
4874: CALL_OW 115
// end ; end ;
4878: PPOPN 2
4880: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4886: LD_VAR 0 2
4890: PPUSH
4891: LD_VAR 0 3
4895: PPUSH
4896: LD_INT 3
4898: PPUSH
4899: CALL_OW 309
4903: PUSH
4904: LD_INT 6
4906: PPUSH
4907: LD_INT 81
4909: PUSH
4910: LD_INT 6
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 70
4921: PUSH
4922: LD_INT 0
4924: EQUAL
4925: AND
4926: IFFALSE 5089
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4928: LD_ADDR_VAR 0 7
4932: PUSH
4933: LD_INT 22
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 25
4945: PUSH
4946: LD_INT 16
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4962: LD_VAR 0 7
4966: PUSH
4967: LD_INT 0
4969: EQUAL
4970: PUSH
4971: LD_INT 22
4973: PUSH
4974: LD_INT 6
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: LD_INT 30
4986: PUSH
4987: LD_INT 0
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 30
4996: PUSH
4997: LD_INT 1
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: PUSH
5018: LD_INT 0
5020: EQUAL
5021: OR
5022: IFFALSE 5026
// exit ;
5024: GO 5089
// if UnitFilter ( apes , [ f_inside ] ) then
5026: LD_VAR 0 7
5030: PPUSH
5031: LD_INT 54
5033: PUSH
5034: EMPTY
5035: LIST
5036: PPUSH
5037: CALL_OW 72
5041: IFFALSE 5070
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5043: LD_VAR 0 7
5047: PPUSH
5048: LD_INT 54
5050: PUSH
5051: EMPTY
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: PPUSH
5059: CALL_OW 122
// wait ( 3 ) ;
5063: LD_INT 3
5065: PPUSH
5066: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5070: LD_VAR 0 7
5074: PPUSH
5075: LD_VAR 0 2
5079: PPUSH
5080: LD_VAR 0 3
5084: PPUSH
5085: CALL_OW 177
// end ; end ;
5089: PPOPN 8
5091: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5092: LD_VAR 0 1
5096: PUSH
5097: LD_EXP 32
5101: IN
5102: IFFALSE 5120
// al_force := al_force diff un ;
5104: LD_ADDR_EXP 32
5108: PUSH
5109: LD_EXP 32
5113: PUSH
5114: LD_VAR 0 1
5118: DIFF
5119: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5120: LD_VAR 0 1
5124: PPUSH
5125: CALL_OW 263
5129: PUSH
5130: LD_INT 2
5132: EQUAL
5133: IFFALSE 5144
// ComUnlink ( un ) ;
5135: LD_VAR 0 1
5139: PPUSH
5140: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 8
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 21
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: IN
5178: IFFALSE 5196
// begin wait ( 0 0$2 ) ;
5180: LD_INT 70
5182: PPUSH
5183: CALL_OW 67
// ComAutodestruct ( un ) ;
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL 62942 0 1
// end ; end ;
5196: PPOPN 1
5198: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5199: LD_VAR 0 1
5203: PUSH
5204: LD_INT 25
5206: EQUAL
5207: IFFALSE 5217
// player_start_res_sib_bomb := true ;
5209: LD_ADDR_EXP 4
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// if tech = tech_artifact then
5217: LD_VAR 0 1
5221: PUSH
5222: LD_INT 24
5224: EQUAL
5225: IFFALSE 5235
// player_start_res_artifact := true ;
5227: LD_ADDR_EXP 5
5231: PUSH
5232: LD_INT 1
5234: ST_TO_ADDR
// end ;
5235: PPOPN 2
5237: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5238: LD_VAR 0 2
5242: PUSH
5243: LD_INT 6
5245: EQUAL
5246: IFFALSE 5256
// player_artifact_loaded := false ;
5248: LD_ADDR_EXP 18
5252: PUSH
5253: LD_INT 0
5255: ST_TO_ADDR
// end ;
5256: PPOPN 2
5258: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5259: LD_VAR 0 2
5263: PUSH
5264: LD_INT 6
5266: EQUAL
5267: IFFALSE 5277
// player_artifact_loaded := true ;
5269: LD_ADDR_EXP 18
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// end ;
5277: PPOPN 2
5279: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5280: LD_INT 0
5282: PPUSH
// begin player_used_sib_bomb := true ;
5283: LD_ADDR_EXP 12
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// for i = 1 to 3 do
5291: LD_ADDR_VAR 0 4
5295: PUSH
5296: DOUBLE
5297: LD_INT 1
5299: DEC
5300: ST_TO_ADDR
5301: LD_INT 3
5303: PUSH
5304: FOR_TO
5305: IFFALSE 5378
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_EXP 15
5321: PUSH
5322: LD_VAR 0 4
5326: ARRAY
5327: PUSH
5328: LD_INT 1
5330: ARRAY
5331: PPUSH
5332: LD_EXP 15
5336: PUSH
5337: LD_VAR 0 4
5341: ARRAY
5342: PUSH
5343: LD_INT 2
5345: ARRAY
5346: PPUSH
5347: CALL_OW 298
5351: PUSH
5352: LD_EXP 17
5356: LESSEQUAL
5357: IFFALSE 5376
// begin wait ( 0 0$5 ) ;
5359: LD_INT 175
5361: PPUSH
5362: CALL_OW 67
// artifact_destroyed := true ;
5366: LD_ADDR_EXP 16
5370: PUSH
5371: LD_INT 1
5373: ST_TO_ADDR
// break ;
5374: GO 5378
// end ; end ;
5376: GO 5304
5378: POP
5379: POP
// end ;
5380: PPOPN 4
5382: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_VAR 0 2
5392: PPUSH
5393: LD_VAR 0 3
5397: PPUSH
5398: CALL 9974 0 3
// end ;
5402: PPOPN 3
5404: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL 9982 0 1
// end ; end_of_file
5414: PPOPN 1
5416: END
// export function CreateArtifact ( type , x , y ) ; begin
5417: LD_INT 0
5419: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5420: LD_INT 4
5422: PPUSH
5423: LD_VAR 0 1
5427: PPUSH
5428: LD_VAR 0 2
5432: PPUSH
5433: LD_VAR 0 3
5437: PPUSH
5438: LD_INT 0
5440: PPUSH
5441: CALL_OW 58
// end ;
5445: LD_VAR 0 4
5449: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// if not GetControl ( veh ) = control_manual then
5455: LD_VAR 0 1
5459: PPUSH
5460: CALL_OW 263
5464: PUSH
5465: LD_INT 1
5467: EQUAL
5468: NOT
5469: IFFALSE 5481
// result := false else
5471: LD_ADDR_VAR 0 2
5475: PUSH
5476: LD_INT 0
5478: ST_TO_ADDR
5479: GO 5626
// if veh in FilterAllUnits ( [ f_empty ] ) then
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 58
5488: PUSH
5489: EMPTY
5490: LIST
5491: PPUSH
5492: CALL_OW 69
5496: IN
5497: IFFALSE 5509
// result := false else
5499: LD_ADDR_VAR 0 2
5503: PUSH
5504: LD_INT 0
5506: ST_TO_ADDR
5507: GO 5626
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5509: LD_ADDR_VAR 0 4
5513: PUSH
5514: LD_INT 22
5516: PUSH
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 255
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 55
5533: PUSH
5534: EMPTY
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 69
5545: ST_TO_ADDR
// if not filter then
5546: LD_VAR 0 4
5550: NOT
5551: IFFALSE 5563
// result := false else
5553: LD_ADDR_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
5561: GO 5626
// for i = 1 to filter do
5563: LD_ADDR_VAR 0 3
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_VAR 0 4
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5624
// if IsDriver ( filter [ i ] ) = veh then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_VAR 0 3
5590: ARRAY
5591: PPUSH
5592: CALL 65045 0 1
5596: PUSH
5597: LD_VAR 0 1
5601: EQUAL
5602: IFFALSE 5622
// begin result := filter [ i ] ;
5604: LD_ADDR_VAR 0 2
5608: PUSH
5609: LD_VAR 0 4
5613: PUSH
5614: LD_VAR 0 3
5618: ARRAY
5619: ST_TO_ADDR
// break ;
5620: GO 5624
// end ;
5622: GO 5578
5624: POP
5625: POP
// end ; end ;
5626: LD_VAR 0 2
5630: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5631: LD_INT 0
5633: PPUSH
5634: PPUSH
5635: PPUSH
// result := 0 ;
5636: LD_ADDR_VAR 0 2
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5644: LD_ADDR_VAR 0 4
5648: PUSH
5649: LD_INT 22
5651: PUSH
5652: LD_VAR 0 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 2
5663: PUSH
5664: LD_INT 30
5666: PUSH
5667: LD_INT 0
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 30
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PPUSH
5693: CALL_OW 69
5697: ST_TO_ADDR
// if deps then
5698: LD_VAR 0 4
5702: IFFALSE 5750
// for i in deps do
5704: LD_ADDR_VAR 0 3
5708: PUSH
5709: LD_VAR 0 4
5713: PUSH
5714: FOR_IN
5715: IFFALSE 5748
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 3
5731: PPUSH
5732: CALL_OW 274
5736: PPUSH
5737: LD_INT 3
5739: PPUSH
5740: CALL_OW 275
5744: PLUS
5745: ST_TO_ADDR
5746: GO 5714
5748: POP
5749: POP
// end ;
5750: LD_VAR 0 2
5754: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5755: LD_INT 0
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
// if val <= 0 then
5761: LD_VAR 0 2
5765: PUSH
5766: LD_INT 0
5768: LESSEQUAL
5769: IFFALSE 5773
// exit ;
5771: GO 5965
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5773: LD_ADDR_VAR 0 5
5777: PUSH
5778: LD_INT 22
5780: PUSH
5781: LD_VAR 0 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: LD_INT 30
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 30
5805: PUSH
5806: LD_INT 1
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: LIST
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PPUSH
5822: CALL_OW 69
5826: ST_TO_ADDR
// if deps then
5827: LD_VAR 0 5
5831: IFFALSE 5965
// for i in deps do
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 5
5842: PUSH
5843: FOR_IN
5844: IFFALSE 5963
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5846: LD_ADDR_VAR 0 6
5850: PUSH
5851: LD_VAR 0 4
5855: PPUSH
5856: CALL_OW 274
5860: PPUSH
5861: LD_INT 3
5863: PPUSH
5864: CALL_OW 275
5868: ST_TO_ADDR
// if val < s then
5869: LD_VAR 0 2
5873: PUSH
5874: LD_VAR 0 6
5878: LESS
5879: IFFALSE 5925
// begin s := s - val ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PUSH
5891: LD_VAR 0 2
5895: MINUS
5896: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5897: LD_VAR 0 4
5901: PPUSH
5902: CALL_OW 274
5906: PPUSH
5907: LD_INT 3
5909: PPUSH
5910: LD_VAR 0 6
5914: PPUSH
5915: CALL_OW 277
// exit ;
5919: POP
5920: POP
5921: GO 5965
// end else
5923: GO 5961
// begin val := val - s ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: LD_VAR 0 2
5934: PUSH
5935: LD_VAR 0 6
5939: MINUS
5940: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5941: LD_VAR 0 4
5945: PPUSH
5946: CALL_OW 274
5950: PPUSH
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 0
5956: PPUSH
5957: CALL_OW 277
// end ; end ;
5961: GO 5843
5963: POP
5964: POP
// end ;
5965: LD_VAR 0 3
5969: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5970: LD_VAR 0 1
5974: PUSH
5975: LD_EXP 35
5979: IN
5980: NOT
5981: IFFALSE 6012
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5983: LD_ADDR_EXP 35
5987: PUSH
5988: LD_EXP 35
5992: PPUSH
5993: LD_EXP 35
5997: PUSH
5998: LD_INT 1
6000: PLUS
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 1
6011: ST_TO_ADDR
// end ;
6012: PPOPN 1
6014: END
// export function DestinationReachable ( unit , x , y ) ; begin
6015: LD_INT 0
6017: PPUSH
// if ValidHex ( x , y ) then
6018: LD_VAR 0 2
6022: PPUSH
6023: LD_VAR 0 3
6027: PPUSH
6028: CALL_OW 488
6032: IFFALSE 6058
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6034: LD_VAR 0 1
6038: PPUSH
6039: LD_VAR 0 2
6043: PPUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 428
6053: PPUSH
6054: CALL_OW 115
// wait ( 0 0$1 ) ;
6058: LD_INT 35
6060: PPUSH
6061: CALL_OW 67
// if unit in unreachableList then
6065: LD_VAR 0 1
6069: PUSH
6070: LD_EXP 35
6074: IN
6075: IFFALSE 6087
// result := false else
6077: LD_ADDR_VAR 0 4
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
6085: GO 6095
// result := true ;
6087: LD_ADDR_VAR 0 4
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if not result then
6095: LD_VAR 0 4
6099: NOT
6100: IFFALSE 6118
// unreachableList := unreachableList diff unit ;
6102: LD_ADDR_EXP 35
6106: PUSH
6107: LD_EXP 35
6111: PUSH
6112: LD_VAR 0 1
6116: DIFF
6117: ST_TO_ADDR
// end ; end_of_file
6118: LD_VAR 0 4
6122: RET
// export function Action ; var dial ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6127: LD_INT 192
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL_OW 86
// InGameOn ;
6137: CALL_OW 8
// PrepareRussian ;
6141: CALL 3697 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6145: LD_ADDR_VAR 0 2
6149: PUSH
6150: LD_INT 22
6152: PUSH
6153: LD_INT 6
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 2
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 25
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 25
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PUSH
6219: LD_EXP 2
6223: DIFF
6224: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6225: LD_VAR 0 2
6229: PUSH
6230: LD_INT 1
6232: ARRAY
6233: PPUSH
6234: LD_INT 202
6236: PPUSH
6237: LD_INT 40
6239: PPUSH
6240: CALL_OW 111
// Wait ( 0 0$03 ) ;
6244: LD_INT 105
6246: PPUSH
6247: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6251: LD_EXP 2
6255: PPUSH
6256: LD_STRING DDav-1
6258: PPUSH
6259: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6263: LD_VAR 0 2
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PPUSH
6272: LD_EXP 2
6276: PPUSH
6277: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6281: LD_EXP 2
6285: PPUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6299: LD_INT 202
6301: PPUSH
6302: LD_INT 40
6304: PPUSH
6305: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6309: LD_VAR 0 2
6313: PUSH
6314: LD_INT 1
6316: ARRAY
6317: PPUSH
6318: LD_STRING DRus-1
6320: PPUSH
6321: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6325: LD_EXP 2
6329: PPUSH
6330: LD_STRING DDav-2
6332: PPUSH
6333: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6337: LD_VAR 0 2
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: LD_STRING DRus-2
6348: PPUSH
6349: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6353: LD_EXP 2
6357: PPUSH
6358: LD_STRING DDav-3
6360: PPUSH
6361: CALL_OW 88
// InGameOff ;
6365: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6369: LD_INT 10
6371: PPUSH
6372: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6376: LD_STRING C1
6378: PPUSH
6379: CALL_OW 337
// SaveForQuickRestart ;
6383: CALL_OW 22
// end ;
6387: LD_VAR 0 1
6391: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6392: LD_INT 22
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 30
6407: PUSH
6408: LD_INT 6
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 30
6417: PUSH
6418: LD_INT 7
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 30
6427: PUSH
6428: LD_INT 8
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: IFFALSE 6549
6451: GO 6453
6453: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6454: LD_EXP 2
6458: PPUSH
6459: LD_STRING DDav-4
6461: PPUSH
6462: CALL_OW 88
// Wait ( 0 0$40 ) ;
6466: LD_INT 1400
6468: PPUSH
6469: CALL_OW 67
// DialogueOn ;
6473: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6477: LD_EXP 3
6481: PPUSH
6482: LD_STRING Dver-Meet-1
6484: PPUSH
6485: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6489: LD_EXP 2
6493: PPUSH
6494: LD_STRING DDav-Meet-1
6496: PPUSH
6497: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6501: LD_EXP 3
6505: PPUSH
6506: LD_STRING Dver-Meet-2
6508: PPUSH
6509: CALL_OW 94
// DialogueOff ;
6513: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6517: LD_INT 19600
6519: PUSH
6520: LD_INT 15400
6522: PUSH
6523: LD_INT 13300
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_OWVAR 67
6535: ARRAY
6536: PPUSH
6537: CALL_OW 67
// legion_attacks_active := true ;
6541: LD_ADDR_EXP 7
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// end ;
6549: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 6
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 30
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PUSH
6579: LD_OWVAR 1
6583: PUSH
6584: LD_INT 21000
6586: GREATER
6587: OR
6588: IFFALSE 6822
6590: GO 6592
6592: DISABLE
6593: LD_INT 0
6595: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6596: LD_ADDR_VAR 0 1
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: LD_INT 6
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 3
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 25
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 2
6674: DIFF
6675: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6676: LD_VAR 0 1
6680: PUSH
6681: LD_INT 1
6683: ARRAY
6684: PPUSH
6685: LD_STRING DRus-3
6687: PPUSH
6688: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6692: LD_EXP 2
6696: PPUSH
6697: LD_STRING DDav-5
6699: PPUSH
6700: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6704: LD_VAR 0 1
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: PPUSH
6713: LD_STRING DRus-4
6715: PPUSH
6716: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6720: LD_EXP 2
6724: PPUSH
6725: LD_STRING DDav-6
6727: PPUSH
6728: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6732: LD_STRING C2
6734: PPUSH
6735: CALL_OW 337
// Wait ( 5 5$00 ) ;
6739: LD_INT 10500
6741: PPUSH
6742: CALL_OW 67
// DialogueOn ;
6746: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING DBag-1
6757: PPUSH
6758: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6762: LD_EXP 2
6766: PPUSH
6767: LD_STRING DDavB-1
6769: PPUSH
6770: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING DBag-2
6781: PPUSH
6782: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6786: LD_EXP 2
6790: PPUSH
6791: LD_STRING DDavB-2
6793: PPUSH
6794: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6798: LD_EXP 1
6802: PPUSH
6803: LD_STRING DBag-3
6805: PPUSH
6806: CALL_OW 94
// DialogueOff ;
6810: CALL_OW 7
// alliance_attack_active := true ;
6814: LD_ADDR_EXP 9
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ;
6822: PPOPN 1
6824: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6825: LD_EXP 10
6829: IFFALSE 6876
6831: GO 6833
6833: DISABLE
// begin DialogueOn ;
6834: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6838: LD_EXP 10
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_EXP 10
6851: PUSH
6852: LD_INT 2
6854: ARRAY
6855: PPUSH
6856: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6860: LD_EXP 2
6864: PPUSH
6865: LD_STRING DDav-Artifact1-1
6867: PPUSH
6868: CALL_OW 88
// DialogueOff ;
6872: CALL_OW 7
// end ;
6876: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6877: LD_EXP 11
6881: IFFALSE 6928
6883: GO 6885
6885: DISABLE
// begin DialogueOn ;
6886: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6890: LD_EXP 11
6894: PUSH
6895: LD_INT 1
6897: ARRAY
6898: PPUSH
6899: LD_EXP 11
6903: PUSH
6904: LD_INT 2
6906: ARRAY
6907: PPUSH
6908: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6912: LD_EXP 2
6916: PPUSH
6917: LD_STRING DDav-Artifact2-1
6919: PPUSH
6920: CALL_OW 88
// DialogueOff ;
6924: CALL_OW 7
// end ;
6928: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6929: LD_EXP 16
6933: PUSH
6934: LD_INT 6
6936: PPUSH
6937: CALL_OW 469
6941: NOT
6942: PUSH
6943: LD_EXP 18
6947: NOT
6948: AND
6949: OR
6950: IFFALSE 6962
6952: GO 6954
6954: DISABLE
// YouLost ( artifact_destroyed ) ;
6955: LD_STRING artifact_destroyed
6957: PPUSH
6958: CALL_OW 104
6962: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6963: LD_EXP 2
6967: PPUSH
6968: CALL_OW 301
6972: IFFALSE 6984
6974: GO 6976
6976: DISABLE
// YouLost ( dead ) ;
6977: LD_STRING dead
6979: PPUSH
6980: CALL_OW 104
6984: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6985: LD_INT 22
6987: PUSH
6988: LD_INT 7
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 69
7013: PUSH
7014: LD_INT 0
7016: EQUAL
7017: IFFALSE 7151
7019: GO 7021
7021: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 252000
7029: PUSH
7030: LD_INT 210000
7032: PUSH
7033: LD_INT 189000
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: LD_OWVAR 67
7045: ARRAY
7046: LESS
7047: IFFALSE 7061
// AddMedal ( med1 , 1 ) else
7049: LD_STRING med1
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 101
7059: GO 7072
// AddMedal ( med1 , - 1 ) ;
7061: LD_STRING med1
7063: PPUSH
7064: LD_INT 1
7066: NEG
7067: PPUSH
7068: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7072: LD_INT 22
7074: PUSH
7075: LD_INT 8
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: IFFALSE 7101
// AddMedal ( med2 , - 1 ) else
7088: LD_STRING med2
7090: PPUSH
7091: LD_INT 1
7093: NEG
7094: PPUSH
7095: CALL_OW 101
7099: GO 7111
// AddMedal ( med2 , 1 ) ;
7101: LD_STRING med2
7103: PPUSH
7104: LD_INT 1
7106: PPUSH
7107: CALL_OW 101
// if player_used_sib_bomb then
7111: LD_EXP 12
7115: IFFALSE 7130
// AddMedal ( med3 , - 1 ) else
7117: LD_STRING med3
7119: PPUSH
7120: LD_INT 1
7122: NEG
7123: PPUSH
7124: CALL_OW 101
7128: GO 7140
// AddMedal ( med3 , 1 ) ;
7130: LD_STRING med3
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: CALL_OW 101
// GiveMedals ( MAIN ) ;
7140: LD_STRING MAIN
7142: PPUSH
7143: CALL_OW 102
// YouWin ;
7147: CALL_OW 103
// end ; end_of_file
7151: END
// every 0 0$22 + 0 0$2 do
7152: GO 7154
7154: DISABLE
// begin enable ;
7155: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7156: LD_INT 4
7158: PPUSH
7159: LD_INT 5
7161: PPUSH
7162: CALL_OW 12
7166: PPUSH
7167: LD_INT 3
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 55
// if tick >= 4 4$00 then
7177: LD_OWVAR 1
7181: PUSH
7182: LD_INT 8400
7184: GREATEREQUAL
7185: IFFALSE 7192
// begin disable ;
7187: DISABLE
// CratesSpawn ( ) ;
7188: CALL 7193 0 0
// end ; end ;
7192: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7193: LD_INT 0
7195: PPUSH
7196: PPUSH
7197: PPUSH
7198: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7199: LD_ADDR_VAR 0 3
7203: PUSH
7204: LD_INT 30000
7206: PUSH
7207: LD_INT 20000
7209: PUSH
7210: LD_INT 10000
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_OWVAR 67
7222: ARRAY
7223: ST_TO_ADDR
// while amount > 0 do
7224: LD_VAR 0 3
7228: PUSH
7229: LD_INT 0
7231: GREATER
7232: IFFALSE 7302
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7234: LD_INT 1050
7236: PPUSH
7237: LD_INT 3150
7239: PPUSH
7240: CALL_OW 12
7244: PPUSH
7245: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7249: LD_ADDR_VAR 0 4
7253: PUSH
7254: LD_INT 1
7256: PPUSH
7257: LD_INT 5
7259: PPUSH
7260: CALL_OW 12
7264: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7265: LD_ADDR_VAR 0 3
7269: PUSH
7270: LD_VAR 0 3
7274: PUSH
7275: LD_VAR 0 4
7279: PUSH
7280: LD_INT 10
7282: MUL
7283: MINUS
7284: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7285: LD_VAR 0 4
7289: PPUSH
7290: LD_INT 3
7292: PPUSH
7293: LD_INT 1
7295: PPUSH
7296: CALL_OW 55
// end ;
7300: GO 7224
// end ; end_of_file
7302: LD_VAR 0 1
7306: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
7307: LD_INT 0
7309: PPUSH
7310: PPUSH
// InitHc_All ( ) ;
7311: CALL_OW 584
// for i := 1 to num1 do
7315: LD_ADDR_VAR 0 6
7319: PUSH
7320: DOUBLE
7321: LD_INT 1
7323: DEC
7324: ST_TO_ADDR
7325: LD_VAR 0 1
7329: PUSH
7330: FOR_TO
7331: IFFALSE 7359
// begin PrepareApeman ( 5 ) ;
7333: LD_INT 5
7335: PPUSH
7336: CALL 63709 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
7340: CALL_OW 44
7344: PPUSH
7345: LD_VAR 0 4
7349: PPUSH
7350: LD_INT 0
7352: PPUSH
7353: CALL_OW 49
// end ;
7357: GO 7330
7359: POP
7360: POP
// for i := 1 to num2 do
7361: LD_ADDR_VAR 0 6
7365: PUSH
7366: DOUBLE
7367: LD_INT 1
7369: DEC
7370: ST_TO_ADDR
7371: LD_VAR 0 2
7375: PUSH
7376: FOR_TO
7377: IFFALSE 7405
// begin PrepareTiger ( 5 ) ;
7379: LD_INT 5
7381: PPUSH
7382: CALL 63817 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
7386: CALL_OW 44
7390: PPUSH
7391: LD_VAR 0 4
7395: PPUSH
7396: LD_INT 0
7398: PPUSH
7399: CALL_OW 49
// end ;
7403: GO 7376
7405: POP
7406: POP
// for i := 1 to num3 do
7407: LD_ADDR_VAR 0 6
7411: PUSH
7412: DOUBLE
7413: LD_INT 1
7415: DEC
7416: ST_TO_ADDR
7417: LD_VAR 0 3
7421: PUSH
7422: FOR_TO
7423: IFFALSE 7448
// begin PrepareBird ( ) ;
7425: CALL 63998 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7429: CALL_OW 44
7433: PPUSH
7434: LD_VAR 0 4
7438: PPUSH
7439: LD_INT 0
7441: PPUSH
7442: CALL_OW 49
// end ;
7446: GO 7422
7448: POP
7449: POP
// end ; end_of_file
7450: LD_VAR 0 5
7454: RET
// export function DebugArtifact ; begin
7455: LD_INT 0
7457: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7458: LD_STRING Artifact is loaded: 
7460: PUSH
7461: LD_EXP 18
7465: STR
7466: PPUSH
7467: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7471: LD_STRING Artifact is active: 
7473: PUSH
7474: LD_EXP 29
7478: STR
7479: PPUSH
7480: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7484: LD_STRING Artifact is researched: 
7486: PUSH
7487: LD_EXP 22
7491: STR
7492: PPUSH
7493: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7497: LD_STRING Artifact coords 
7499: PUSH
7500: LD_EXP 19
7504: PPUSH
7505: CALL_OW 469
7509: STR
7510: PPUSH
7511: CALL_OW 561
// end ;
7515: LD_VAR 0 1
7519: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
7525: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7526: LD_ADDR_VAR 0 4
7530: PUSH
7531: LD_INT 100
7533: PUSH
7534: LD_INT 185
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 99
7543: PUSH
7544: LD_INT 175
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 117
7553: PUSH
7554: LD_INT 191
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// for i = 1 to artifacts_type do
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_EXP 14
7580: PUSH
7581: FOR_TO
7582: IFFALSE 7684
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7584: LD_ADDR_VAR 0 3
7588: PUSH
7589: LD_VAR 0 4
7593: PUSH
7594: LD_INT 1
7596: PPUSH
7597: LD_VAR 0 4
7601: PPUSH
7602: CALL_OW 12
7606: ARRAY
7607: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7608: LD_ADDR_VAR 0 4
7612: PUSH
7613: LD_VAR 0 4
7617: PUSH
7618: LD_VAR 0 3
7622: DIFF
7623: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7624: LD_ADDR_EXP 15
7628: PUSH
7629: LD_EXP 15
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: LD_VAR 0 3
7643: PPUSH
7644: CALL_OW 2
7648: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7649: LD_EXP 14
7653: PUSH
7654: LD_VAR 0 2
7658: ARRAY
7659: PPUSH
7660: LD_VAR 0 3
7664: PUSH
7665: LD_INT 1
7667: ARRAY
7668: PPUSH
7669: LD_VAR 0 3
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PPUSH
7678: CALL 5417 0 3
// end ;
7682: GO 7581
7684: POP
7685: POP
// end ;
7686: LD_VAR 0 1
7690: RET
// export function GetUseCost ( dist ) ; begin
7691: LD_INT 0
7693: PPUSH
// if dist < 30 then
7694: LD_VAR 0 1
7698: PUSH
7699: LD_INT 30
7701: LESS
7702: IFFALSE 7712
// result := 10 ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_INT 10
7711: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7712: LD_VAR 0 1
7716: PUSH
7717: LD_INT 30
7719: GREATEREQUAL
7720: PUSH
7721: LD_VAR 0 1
7725: PUSH
7726: LD_INT 50
7728: LESS
7729: AND
7730: IFFALSE 7740
// result := 35 ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_INT 35
7739: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7740: LD_VAR 0 1
7744: PUSH
7745: LD_INT 50
7747: GREATEREQUAL
7748: PUSH
7749: LD_VAR 0 1
7753: PUSH
7754: LD_INT 80
7756: LESS
7757: AND
7758: IFFALSE 7768
// result := 70 ;
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: LD_INT 70
7767: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7768: LD_VAR 0 1
7772: PUSH
7773: LD_INT 80
7775: GREATEREQUAL
7776: PUSH
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 120
7784: LESS
7785: AND
7786: IFFALSE 7796
// result := 100 ;
7788: LD_ADDR_VAR 0 2
7792: PUSH
7793: LD_INT 100
7795: ST_TO_ADDR
// if dist >= 120 then
7796: LD_VAR 0 1
7800: PUSH
7801: LD_INT 120
7803: GREATEREQUAL
7804: IFFALSE 7814
// result := 150 ;
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_INT 150
7813: ST_TO_ADDR
// end ;
7814: LD_VAR 0 2
7818: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 255
7828: PUSH
7829: LD_OWVAR 2
7833: EQUAL
7834: IFFALSE 7844
// player_artifact_researched := true ;
7836: LD_ADDR_EXP 22
7840: PUSH
7841: LD_INT 1
7843: ST_TO_ADDR
// end ;
7844: PPOPN 1
7846: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7847: LD_INT 22
7849: PUSH
7850: LD_OWVAR 2
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 2
7861: PUSH
7862: LD_INT 30
7864: PUSH
7865: LD_INT 8
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 30
7874: PUSH
7875: LD_INT 11
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 69
7895: PUSH
7896: LD_EXP 22
7900: AND
7901: PUSH
7902: LD_EXP 18
7906: NOT
7907: AND
7908: IFFALSE 8362
7910: GO 7912
7912: DISABLE
7913: LD_INT 0
7915: PPUSH
7916: PPUSH
// begin enable ;
7917: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7918: LD_ADDR_VAR 0 2
7922: PUSH
7923: LD_EXP 19
7927: PPUSH
7928: CALL_OW 469
7932: ST_TO_ADDR
// if not coords then
7933: LD_VAR 0 2
7937: NOT
7938: IFFALSE 7942
// exit ;
7940: GO 8362
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7942: LD_ADDR_VAR 0 1
7946: PUSH
7947: LD_INT 22
7949: PUSH
7950: LD_OWVAR 2
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: LD_INT 30
7964: PUSH
7965: LD_INT 8
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 30
7974: PUSH
7975: LD_INT 11
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PPUSH
7991: CALL_OW 69
7995: PPUSH
7996: LD_VAR 0 2
8000: PUSH
8001: LD_INT 1
8003: ARRAY
8004: PPUSH
8005: LD_VAR 0 2
8009: PUSH
8010: LD_INT 2
8012: ARRAY
8013: PPUSH
8014: CALL_OW 73
8018: ST_TO_ADDR
// if not lab then
8019: LD_VAR 0 1
8023: NOT
8024: IFFALSE 8041
// begin if debug then
8026: LD_EXP 6
8030: IFFALSE 8039
// AddToLog ( Cannot find lab for artifact! ) ;
8032: LD_STRING Cannot find lab for artifact!
8034: PPUSH
8035: CALL_OW 561
// exit ;
8039: GO 8362
// end ; if not player_artifact_ready then
8041: LD_EXP 29
8045: NOT
8046: IFFALSE 8170
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_INT 2
8069: ARRAY
8070: PPUSH
8071: CALL_OW 297
8075: PUSH
8076: LD_EXP 23
8080: LESS
8081: IFFALSE 8146
// begin if BuildingStatus ( lab ) = bs_idle then
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 461
8092: PUSH
8093: LD_INT 2
8095: EQUAL
8096: IFFALSE 8122
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8098: LD_OWVAR 2
8102: PPUSH
8103: LD_EXP 25
8107: PPUSH
8108: LD_INT 2
8110: PPUSH
8111: LD_VAR 0 1
8115: PPUSH
8116: CALL_OW 468
8120: GO 8144
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8122: LD_OWVAR 2
8126: PPUSH
8127: LD_EXP 25
8131: PPUSH
8132: LD_INT 1
8134: PPUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 468
// end else
8144: GO 8168
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8146: LD_OWVAR 2
8150: PPUSH
8151: LD_EXP 25
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_VAR 0 1
8163: PPUSH
8164: CALL_OW 468
// end else
8168: GO 8362
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_VAR 0 2
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PPUSH
8184: LD_VAR 0 2
8188: PUSH
8189: LD_INT 2
8191: ARRAY
8192: PPUSH
8193: CALL_OW 297
8197: PUSH
8198: LD_EXP 23
8202: LESS
8203: IFFALSE 8318
// begin if BuildingStatus ( lab ) = bs_idle then
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 461
8214: PUSH
8215: LD_INT 2
8217: EQUAL
8218: IFFALSE 8272
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8220: LD_OWVAR 2
8224: PPUSH
8225: LD_EXP 20
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: LD_VAR 0 1
8237: PPUSH
8238: CALL_OW 468
// if player_artifact_selected_unit then
8242: LD_EXP 30
8246: IFFALSE 8270
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8248: LD_OWVAR 2
8252: PPUSH
8253: LD_EXP 21
8257: PPUSH
8258: LD_INT 3
8260: PPUSH
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 468
// end else
8270: GO 8316
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8272: LD_OWVAR 2
8276: PPUSH
8277: LD_EXP 20
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: LD_VAR 0 1
8289: PPUSH
8290: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8294: LD_OWVAR 2
8298: PPUSH
8299: LD_EXP 21
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 468
// end ; end else
8316: GO 8362
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8318: LD_OWVAR 2
8322: PPUSH
8323: LD_EXP 20
8327: PPUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8340: LD_OWVAR 2
8344: PPUSH
8345: LD_EXP 21
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 468
// end ; end ;
8362: PPOPN 2
8364: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8373: LD_ADDR_VAR 0 5
8377: PUSH
8378: LD_EXP 19
8382: PPUSH
8383: CALL_OW 469
8387: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8388: LD_ADDR_VAR 0 7
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_OWVAR 2
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 30
8410: PUSH
8411: LD_INT 8
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 30
8420: PUSH
8421: LD_INT 11
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PPUSH
8437: CALL_OW 69
8441: PPUSH
8442: LD_VAR 0 5
8446: PUSH
8447: LD_INT 1
8449: ARRAY
8450: PPUSH
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 2
8458: ARRAY
8459: PPUSH
8460: CALL_OW 73
8464: ST_TO_ADDR
// if not lab then
8465: LD_VAR 0 7
8469: NOT
8470: IFFALSE 8487
// begin if debug then
8472: LD_EXP 6
8476: IFFALSE 8485
// AddToLog ( Cannot find lab! ) ;
8478: LD_STRING Cannot find lab!
8480: PPUSH
8481: CALL_OW 561
// exit ;
8485: GO 8922
// end ; if icon = player_artifact_icon_res then
8487: LD_VAR 0 2
8491: PUSH
8492: LD_EXP 25
8496: EQUAL
8497: IFFALSE 8538
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8499: LD_VAR 0 7
8503: PPUSH
8504: LD_EXP 27
8508: PPUSH
8509: LD_INT 1
8511: PPUSH
8512: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8516: LD_OWVAR 2
8520: PPUSH
8521: LD_EXP 25
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: LD_VAR 0 7
8533: PPUSH
8534: CALL_OW 468
// end ; if icon = player_artifact_icon then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_EXP 20
8547: EQUAL
8548: IFFALSE 8587
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8550: LD_VAR 0 3
8554: PPUSH
8555: CALL_OW 247
8559: PUSH
8560: LD_INT 1
8562: EQUAL
8563: PUSH
8564: LD_VAR 0 3
8568: PPUSH
8569: CALL_OW 310
8573: NOT
8574: AND
8575: IFFALSE 8587
// player_artifact_selected_unit := cr1 ;
8577: LD_ADDR_EXP 30
8581: PUSH
8582: LD_VAR 0 3
8586: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8587: LD_VAR 0 2
8591: PUSH
8592: LD_EXP 21
8596: EQUAL
8597: IFFALSE 8912
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8599: LD_VAR 0 3
8603: PPUSH
8604: LD_VAR 0 4
8608: PPUSH
8609: CALL_OW 428
8613: PUSH
8614: LD_INT 0
8616: NONEQUAL
8617: PUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: LD_VAR 0 4
8627: PPUSH
8628: CALL_OW 546
8632: PUSH
8633: LD_INT 6
8635: ARRAY
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: LD_INT 4
8642: PUSH
8643: LD_INT 5
8645: PUSH
8646: LD_INT 6
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: IN
8655: OR
8656: IFFALSE 8660
// exit ;
8658: GO 8922
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8660: LD_ADDR_VAR 0 9
8664: PUSH
8665: LD_EXP 30
8669: PPUSH
8670: CALL_OW 250
8674: PPUSH
8675: LD_EXP 30
8679: PPUSH
8680: CALL_OW 251
8684: PPUSH
8685: LD_VAR 0 3
8689: PPUSH
8690: LD_VAR 0 4
8694: PPUSH
8695: CALL_OW 298
8699: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8700: LD_ADDR_VAR 0 10
8704: PUSH
8705: LD_VAR 0 9
8709: PPUSH
8710: CALL 7691 0 1
8714: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8715: LD_VAR 0 10
8719: PUSH
8720: LD_OWVAR 2
8724: PPUSH
8725: CALL 5631 0 1
8729: GREATER
8730: IFFALSE 8744
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8732: LD_STRING ArtFrogJumpCost
8734: PPUSH
8735: LD_INT 2
8737: PPUSH
8738: CALL_OW 338
// exit ;
8742: GO 8922
// end ; SetSibResources ( your_side , cost ) ;
8744: LD_OWVAR 2
8748: PPUSH
8749: LD_VAR 0 10
8753: PPUSH
8754: CALL 5755 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8758: LD_VAR 0 3
8762: PPUSH
8763: LD_VAR 0 4
8767: PPUSH
8768: LD_INT 6
8770: PPUSH
8771: LD_INT 5
8773: NEG
8774: PPUSH
8775: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8779: LD_VAR 0 3
8783: PPUSH
8784: LD_VAR 0 4
8788: PPUSH
8789: LD_INT 6
8791: PPUSH
8792: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8796: LD_EXP 30
8800: PPUSH
8801: LD_VAR 0 3
8805: PPUSH
8806: LD_VAR 0 4
8810: PPUSH
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 1
8816: PPUSH
8817: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8821: LD_VAR 0 3
8825: PPUSH
8826: LD_VAR 0 4
8830: PPUSH
8831: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8835: LD_ADDR_EXP 30
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// player_artifact_researched := false ;
8843: LD_ADDR_EXP 22
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8851: LD_OWVAR 2
8855: PPUSH
8856: LD_EXP 20
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 7
8868: PPUSH
8869: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8873: LD_OWVAR 2
8877: PPUSH
8878: LD_EXP 21
8882: PPUSH
8883: LD_INT 0
8885: PPUSH
8886: LD_VAR 0 7
8890: PPUSH
8891: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8895: LD_EXP 26
8899: PPUSH
8900: CALL_OW 67
// player_artifact_researched := true ;
8904: LD_ADDR_EXP 22
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// end ; if debug then
8912: LD_EXP 6
8916: IFFALSE 8922
// DebugArtifact ;
8918: CALL 7455 0 0
// end ;
8922: PPOPN 10
8924: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8925: LD_VAR 0 1
8929: PPUSH
8930: CALL_OW 255
8934: PUSH
8935: LD_OWVAR 2
8939: EQUAL
8940: IFFALSE 8979
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8942: LD_OWVAR 2
8946: PPUSH
8947: LD_EXP 25
8951: PPUSH
8952: LD_INT 0
8954: PPUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 468
// player_artifact_ready := true ;
8964: LD_ADDR_EXP 29
8968: PUSH
8969: LD_INT 1
8971: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8972: LD_STRING ArtFrogJump
8974: PPUSH
8975: CALL_OW 339
// end ; end ;
8979: PPOPN 1
8981: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8982: LD_OWVAR 2
8986: PPUSH
8987: LD_EXP 25
8991: PPUSH
8992: LD_INT 2
8994: PPUSH
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 468
// end ;
9004: PPOPN 2
9006: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9007: LD_INT 0
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9013: LD_ADDR_VAR 0 3
9017: PUSH
9018: LD_INT 81
9020: PUSH
9021: LD_INT 7
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 34
9030: PUSH
9031: LD_INT 48
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 69
9046: PUSH
9047: LD_INT 81
9049: PUSH
9050: LD_INT 7
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 28
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 69
9075: ADD
9076: PUSH
9077: LD_INT 81
9079: PUSH
9080: LD_INT 7
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 30
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 69
9105: ADD
9106: PUSH
9107: LD_INT 81
9109: PUSH
9110: LD_INT 7
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 30
9119: PUSH
9120: LD_INT 21
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: ADD
9136: PUSH
9137: LD_INT 81
9139: PUSH
9140: LD_INT 7
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 30
9149: PUSH
9150: LD_INT 34
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 69
9165: ADD
9166: PUSH
9167: LD_INT 81
9169: PUSH
9170: LD_INT 7
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 35
9179: PUSH
9180: LD_INT 49
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 69
9195: ADD
9196: PUSH
9197: LD_INT 81
9199: PUSH
9200: LD_INT 7
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 35
9209: PUSH
9210: LD_INT 47
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: ADD
9226: PUSH
9227: LD_INT 81
9229: PUSH
9230: LD_INT 7
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 34
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: ADD
9256: PUSH
9257: LD_INT 81
9259: PUSH
9260: LD_INT 7
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 31
9269: PUSH
9270: LD_INT 25
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 69
9285: ADD
9286: PUSH
9287: LD_INT 81
9289: PUSH
9290: LD_INT 7
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 32
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 69
9315: ADD
9316: ST_TO_ADDR
// if not tmp then
9317: LD_VAR 0 3
9321: NOT
9322: IFFALSE 9326
// exit ;
9324: GO 9447
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_INT 34
9333: PUSH
9334: LD_INT 48
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 72
9345: IFFALSE 9378
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9347: LD_ADDR_VAR 0 4
9351: PUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_INT 34
9359: PUSH
9360: LD_INT 48
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 72
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: ST_TO_ADDR
9376: GO 9402
// un := tmp [ rand ( 1 , tmp ) ] ;
9378: LD_ADDR_VAR 0 4
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_INT 1
9390: PPUSH
9391: LD_VAR 0 3
9395: PPUSH
9396: CALL_OW 12
9400: ARRAY
9401: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9402: LD_EXP 10
9406: NOT
9407: IFFALSE 9438
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9409: LD_ADDR_EXP 10
9413: PUSH
9414: LD_VAR 0 4
9418: PPUSH
9419: CALL_OW 250
9423: PUSH
9424: LD_VAR 0 4
9428: PPUSH
9429: CALL_OW 251
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// KillUnit ( un ) ;
9438: LD_VAR 0 4
9442: PPUSH
9443: CALL_OW 66
// end ;
9447: LD_VAR 0 1
9451: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9458: LD_ADDR_VAR 0 4
9462: PUSH
9463: LD_INT 22
9465: PUSH
9466: LD_INT 6
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 33
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 69
9491: ST_TO_ADDR
// if not tmp then
9492: LD_VAR 0 4
9496: NOT
9497: IFFALSE 9501
// exit ;
9499: GO 9627
// un := tmp [ rand ( 1 , tmp ) ] ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 4
9510: PUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_VAR 0 4
9518: PPUSH
9519: CALL_OW 12
9523: ARRAY
9524: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9525: LD_VAR 0 3
9529: PPUSH
9530: CALL_OW 264
9534: PUSH
9535: LD_INT 48
9537: EQUAL
9538: IFFALSE 9557
// ComAttackPlace ( un , 194 , 19 ) else
9540: LD_VAR 0 3
9544: PPUSH
9545: LD_INT 194
9547: PPUSH
9548: LD_INT 19
9550: PPUSH
9551: CALL_OW 116
9555: GO 9591
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9557: LD_VAR 0 3
9561: PPUSH
9562: LD_INT 81
9564: PUSH
9565: LD_INT 7
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PPUSH
9577: LD_VAR 0 3
9581: PPUSH
9582: CALL_OW 74
9586: PPUSH
9587: CALL_OW 115
// if not alliance_used_artifact_2 then
9591: LD_EXP 11
9595: NOT
9596: IFFALSE 9627
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9598: LD_ADDR_EXP 11
9602: PUSH
9603: LD_VAR 0 3
9607: PPUSH
9608: CALL_OW 250
9612: PUSH
9613: LD_VAR 0 3
9617: PPUSH
9618: CALL_OW 251
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: ST_TO_ADDR
// end ; end_of_file
9627: LD_VAR 0 1
9631: RET
// export function DebugMode ; var i , j , b ; begin
9632: LD_INT 0
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
// enable_addtolog = true ;
9638: LD_ADDR_OWVAR 81
9642: PUSH
9643: LD_INT 1
9645: ST_TO_ADDR
// FogOff ( 6 ) ;
9646: LD_INT 6
9648: PPUSH
9649: CALL_OW 344
// uc_side = 6 ;
9653: LD_ADDR_OWVAR 20
9657: PUSH
9658: LD_INT 6
9660: ST_TO_ADDR
// uc_nation = 3 ;
9661: LD_ADDR_OWVAR 21
9665: PUSH
9666: LD_INT 3
9668: ST_TO_ADDR
// bc_level = 10 ;
9669: LD_ADDR_OWVAR 43
9673: PUSH
9674: LD_INT 10
9676: ST_TO_ADDR
// bc_type := b_lab_full ;
9677: LD_ADDR_OWVAR 42
9681: PUSH
9682: LD_INT 8
9684: ST_TO_ADDR
// bc_kind1 := 11 ;
9685: LD_ADDR_OWVAR 44
9689: PUSH
9690: LD_INT 11
9692: ST_TO_ADDR
// bc_kind2 := 12 ;
9693: LD_ADDR_OWVAR 45
9697: PUSH
9698: LD_INT 12
9700: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9701: LD_INT 189
9703: PPUSH
9704: LD_INT 20
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 47
// bc_type := b_warehouse ;
9714: LD_ADDR_OWVAR 42
9718: PUSH
9719: LD_INT 1
9721: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9722: LD_ADDR_VAR 0 4
9726: PUSH
9727: LD_INT 201
9729: PPUSH
9730: LD_INT 22
9732: PPUSH
9733: LD_INT 4
9735: PPUSH
9736: CALL_OW 47
9740: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9741: LD_VAR 0 4
9745: PPUSH
9746: CALL_OW 274
9750: PPUSH
9751: LD_INT 1
9753: PPUSH
9754: LD_INT 10000
9756: PPUSH
9757: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9761: LD_VAR 0 4
9765: PPUSH
9766: CALL_OW 274
9770: PPUSH
9771: LD_INT 2
9773: PPUSH
9774: LD_INT 10000
9776: PPUSH
9777: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 274
9790: PPUSH
9791: LD_INT 3
9793: PPUSH
9794: LD_INT 10000
9796: PPUSH
9797: CALL_OW 277
// bc_type := b_siberite_power ;
9801: LD_ADDR_OWVAR 42
9805: PUSH
9806: LD_INT 28
9808: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9809: LD_ADDR_VAR 0 4
9813: PUSH
9814: LD_INT 216
9816: PPUSH
9817: LD_INT 16
9819: PPUSH
9820: LD_INT 4
9822: PPUSH
9823: CALL_OW 47
9827: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9828: LD_ADDR_VAR 0 4
9832: PUSH
9833: LD_INT 219
9835: PPUSH
9836: LD_INT 16
9838: PPUSH
9839: LD_INT 4
9841: PPUSH
9842: CALL_OW 47
9846: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9847: LD_INT 55
9849: PPUSH
9850: LD_INT 6
9852: PPUSH
9853: LD_INT 2
9855: PPUSH
9856: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9860: LD_INT 56
9862: PPUSH
9863: LD_INT 6
9865: PPUSH
9866: LD_INT 2
9868: PPUSH
9869: CALL_OW 322
// end ; end_of_file
9873: LD_VAR 0 1
9877: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
9878: LD_INT 0
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
9884: LD_VAR 0 1
9888: PPUSH
9889: CALL_OW 264
9893: PUSH
9894: LD_INT 91
9896: EQUAL
9897: IFFALSE 9969
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
9899: LD_INT 68
9901: PPUSH
9902: LD_VAR 0 1
9906: PPUSH
9907: CALL_OW 255
9911: PPUSH
9912: CALL_OW 321
9916: PUSH
9917: LD_INT 2
9919: EQUAL
9920: IFFALSE 9932
// eff := 70 else
9922: LD_ADDR_VAR 0 4
9926: PUSH
9927: LD_INT 70
9929: ST_TO_ADDR
9930: GO 9940
// eff := 30 ;
9932: LD_ADDR_VAR 0 4
9936: PUSH
9937: LD_INT 30
9939: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
9940: LD_VAR 0 1
9944: PPUSH
9945: CALL_OW 250
9949: PPUSH
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 251
9959: PPUSH
9960: LD_VAR 0 4
9964: PPUSH
9965: CALL_OW 495
// end ; end ;
9969: LD_VAR 0 2
9973: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9974: LD_INT 0
9976: PPUSH
// end ;
9977: LD_VAR 0 4
9981: RET
// export function SOS_Command ( cmd ) ; begin
9982: LD_INT 0
9984: PPUSH
// end ;
9985: LD_VAR 0 2
9989: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9990: LD_INT 0
9992: PPUSH
// end ;
9993: LD_VAR 0 6
9997: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
9998: LD_INT 0
10000: PPUSH
10001: PPUSH
// if not vehicle or not factory then
10002: LD_VAR 0 1
10006: NOT
10007: PUSH
10008: LD_VAR 0 2
10012: NOT
10013: OR
10014: IFFALSE 10018
// exit ;
10016: GO 10249
// if factoryWaypoints >= factory then
10018: LD_EXP 105
10022: PUSH
10023: LD_VAR 0 2
10027: GREATEREQUAL
10028: IFFALSE 10249
// if factoryWaypoints [ factory ] then
10030: LD_EXP 105
10034: PUSH
10035: LD_VAR 0 2
10039: ARRAY
10040: IFFALSE 10249
// begin if GetControl ( vehicle ) = control_manual then
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 263
10051: PUSH
10052: LD_INT 1
10054: EQUAL
10055: IFFALSE 10136
// begin driver := IsDrivenBy ( vehicle ) ;
10057: LD_ADDR_VAR 0 4
10061: PUSH
10062: LD_VAR 0 1
10066: PPUSH
10067: CALL_OW 311
10071: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10072: LD_VAR 0 4
10076: PPUSH
10077: LD_EXP 105
10081: PUSH
10082: LD_VAR 0 2
10086: ARRAY
10087: PUSH
10088: LD_INT 3
10090: ARRAY
10091: PPUSH
10092: LD_EXP 105
10096: PUSH
10097: LD_VAR 0 2
10101: ARRAY
10102: PUSH
10103: LD_INT 4
10105: ARRAY
10106: PPUSH
10107: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10111: LD_VAR 0 4
10115: PPUSH
10116: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10120: LD_VAR 0 4
10124: PPUSH
10125: LD_VAR 0 2
10129: PPUSH
10130: CALL_OW 180
// end else
10134: GO 10249
// if GetControl ( vehicle ) = control_remote then
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 263
10145: PUSH
10146: LD_INT 2
10148: EQUAL
10149: IFFALSE 10210
// begin wait ( 0 0$2 ) ;
10151: LD_INT 70
10153: PPUSH
10154: CALL_OW 67
// if Connect ( vehicle ) then
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL 38067 0 1
10167: IFFALSE 10208
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: LD_EXP 105
10178: PUSH
10179: LD_VAR 0 2
10183: ARRAY
10184: PUSH
10185: LD_INT 3
10187: ARRAY
10188: PPUSH
10189: LD_EXP 105
10193: PUSH
10194: LD_VAR 0 2
10198: ARRAY
10199: PUSH
10200: LD_INT 4
10202: ARRAY
10203: PPUSH
10204: CALL_OW 171
// end else
10208: GO 10249
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10210: LD_VAR 0 1
10214: PPUSH
10215: LD_EXP 105
10219: PUSH
10220: LD_VAR 0 2
10224: ARRAY
10225: PUSH
10226: LD_INT 3
10228: ARRAY
10229: PPUSH
10230: LD_EXP 105
10234: PUSH
10235: LD_VAR 0 2
10239: ARRAY
10240: PUSH
10241: LD_INT 4
10243: ARRAY
10244: PPUSH
10245: CALL_OW 171
// end ; end ;
10249: LD_VAR 0 3
10253: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10254: LD_INT 0
10256: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10257: LD_VAR 0 1
10261: PUSH
10262: LD_INT 250
10264: EQUAL
10265: PUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: CALL_OW 264
10275: PUSH
10276: LD_INT 81
10278: EQUAL
10279: AND
10280: IFFALSE 10301
// MinerPlaceMine ( unit , x , y ) ;
10282: LD_VAR 0 2
10286: PPUSH
10287: LD_VAR 0 4
10291: PPUSH
10292: LD_VAR 0 5
10296: PPUSH
10297: CALL 12686 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10301: LD_VAR 0 1
10305: PUSH
10306: LD_INT 251
10308: EQUAL
10309: PUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: CALL_OW 264
10319: PUSH
10320: LD_INT 81
10322: EQUAL
10323: AND
10324: IFFALSE 10345
// MinerDetonateMine ( unit , x , y ) ;
10326: LD_VAR 0 2
10330: PPUSH
10331: LD_VAR 0 4
10335: PPUSH
10336: LD_VAR 0 5
10340: PPUSH
10341: CALL 12961 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10345: LD_VAR 0 1
10349: PUSH
10350: LD_INT 252
10352: EQUAL
10353: PUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: CALL_OW 264
10363: PUSH
10364: LD_INT 81
10366: EQUAL
10367: AND
10368: IFFALSE 10389
// MinerCreateMinefield ( unit , x , y ) ;
10370: LD_VAR 0 2
10374: PPUSH
10375: LD_VAR 0 4
10379: PPUSH
10380: LD_VAR 0 5
10384: PPUSH
10385: CALL 13378 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10389: LD_VAR 0 1
10393: PUSH
10394: LD_INT 253
10396: EQUAL
10397: PUSH
10398: LD_VAR 0 2
10402: PPUSH
10403: CALL_OW 257
10407: PUSH
10408: LD_INT 5
10410: EQUAL
10411: AND
10412: IFFALSE 10433
// ComBinocular ( unit , x , y ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: LD_VAR 0 4
10423: PPUSH
10424: LD_VAR 0 5
10428: PPUSH
10429: CALL 13747 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10433: LD_VAR 0 1
10437: PUSH
10438: LD_INT 254
10440: EQUAL
10441: PUSH
10442: LD_VAR 0 2
10446: PPUSH
10447: CALL_OW 264
10451: PUSH
10452: LD_INT 99
10454: EQUAL
10455: AND
10456: PUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: CALL_OW 263
10466: PUSH
10467: LD_INT 3
10469: EQUAL
10470: AND
10471: IFFALSE 10487
// HackDestroyVehicle ( unit , selectedUnit ) ;
10473: LD_VAR 0 2
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: CALL 12050 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10487: LD_VAR 0 1
10491: PUSH
10492: LD_INT 255
10494: EQUAL
10495: PUSH
10496: LD_VAR 0 2
10500: PPUSH
10501: CALL_OW 264
10505: PUSH
10506: LD_INT 14
10508: PUSH
10509: LD_INT 53
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: IN
10516: AND
10517: PUSH
10518: LD_VAR 0 4
10522: PPUSH
10523: LD_VAR 0 5
10527: PPUSH
10528: CALL_OW 488
10532: AND
10533: IFFALSE 10557
// CutTreeXYR ( unit , x , y , 12 ) ;
10535: LD_VAR 0 2
10539: PPUSH
10540: LD_VAR 0 4
10544: PPUSH
10545: LD_VAR 0 5
10549: PPUSH
10550: LD_INT 12
10552: PPUSH
10553: CALL 10620 0 4
// if cmd = 256 then
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 256
10564: EQUAL
10565: IFFALSE 10586
// SetFactoryWaypoint ( unit , x , y ) ;
10567: LD_VAR 0 2
10571: PPUSH
10572: LD_VAR 0 4
10576: PPUSH
10577: LD_VAR 0 5
10581: PPUSH
10582: CALL 28650 0 3
// if cmd = 257 then
10586: LD_VAR 0 1
10590: PUSH
10591: LD_INT 257
10593: EQUAL
10594: IFFALSE 10615
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10596: LD_VAR 0 2
10600: PPUSH
10601: LD_VAR 0 4
10605: PPUSH
10606: LD_VAR 0 5
10610: PPUSH
10611: CALL 29012 0 3
// end ;
10615: LD_VAR 0 6
10619: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10631: LD_VAR 0 1
10635: NOT
10636: PUSH
10637: LD_VAR 0 2
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: CALL_OW 488
10651: NOT
10652: OR
10653: PUSH
10654: LD_VAR 0 4
10658: NOT
10659: OR
10660: IFFALSE 10664
// exit ;
10662: GO 11004
// list := [ ] ;
10664: LD_ADDR_VAR 0 13
10668: PUSH
10669: EMPTY
10670: ST_TO_ADDR
// if x - r < 0 then
10671: LD_VAR 0 2
10675: PUSH
10676: LD_VAR 0 4
10680: MINUS
10681: PUSH
10682: LD_INT 0
10684: LESS
10685: IFFALSE 10697
// min_x := 0 else
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_INT 0
10694: ST_TO_ADDR
10695: GO 10713
// min_x := x - r ;
10697: LD_ADDR_VAR 0 7
10701: PUSH
10702: LD_VAR 0 2
10706: PUSH
10707: LD_VAR 0 4
10711: MINUS
10712: ST_TO_ADDR
// if y - r < 0 then
10713: LD_VAR 0 3
10717: PUSH
10718: LD_VAR 0 4
10722: MINUS
10723: PUSH
10724: LD_INT 0
10726: LESS
10727: IFFALSE 10739
// min_y := 0 else
10729: LD_ADDR_VAR 0 8
10733: PUSH
10734: LD_INT 0
10736: ST_TO_ADDR
10737: GO 10755
// min_y := y - r ;
10739: LD_ADDR_VAR 0 8
10743: PUSH
10744: LD_VAR 0 3
10748: PUSH
10749: LD_VAR 0 4
10753: MINUS
10754: ST_TO_ADDR
// max_x := x + r ;
10755: LD_ADDR_VAR 0 9
10759: PUSH
10760: LD_VAR 0 2
10764: PUSH
10765: LD_VAR 0 4
10769: PLUS
10770: ST_TO_ADDR
// max_y := y + r ;
10771: LD_ADDR_VAR 0 10
10775: PUSH
10776: LD_VAR 0 3
10780: PUSH
10781: LD_VAR 0 4
10785: PLUS
10786: ST_TO_ADDR
// for _x = min_x to max_x do
10787: LD_ADDR_VAR 0 11
10791: PUSH
10792: DOUBLE
10793: LD_VAR 0 7
10797: DEC
10798: ST_TO_ADDR
10799: LD_VAR 0 9
10803: PUSH
10804: FOR_TO
10805: IFFALSE 10922
// for _y = min_y to max_y do
10807: LD_ADDR_VAR 0 12
10811: PUSH
10812: DOUBLE
10813: LD_VAR 0 8
10817: DEC
10818: ST_TO_ADDR
10819: LD_VAR 0 10
10823: PUSH
10824: FOR_TO
10825: IFFALSE 10918
// begin if not ValidHex ( _x , _y ) then
10827: LD_VAR 0 11
10831: PPUSH
10832: LD_VAR 0 12
10836: PPUSH
10837: CALL_OW 488
10841: NOT
10842: IFFALSE 10846
// continue ;
10844: GO 10824
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10846: LD_VAR 0 11
10850: PPUSH
10851: LD_VAR 0 12
10855: PPUSH
10856: CALL_OW 351
10860: PUSH
10861: LD_VAR 0 11
10865: PPUSH
10866: LD_VAR 0 12
10870: PPUSH
10871: CALL_OW 554
10875: AND
10876: IFFALSE 10916
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10878: LD_ADDR_VAR 0 13
10882: PUSH
10883: LD_VAR 0 13
10887: PPUSH
10888: LD_VAR 0 13
10892: PUSH
10893: LD_INT 1
10895: PLUS
10896: PPUSH
10897: LD_VAR 0 11
10901: PUSH
10902: LD_VAR 0 12
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 2
10915: ST_TO_ADDR
// end ;
10916: GO 10824
10918: POP
10919: POP
10920: GO 10804
10922: POP
10923: POP
// if not list then
10924: LD_VAR 0 13
10928: NOT
10929: IFFALSE 10933
// exit ;
10931: GO 11004
// for i in list do
10933: LD_ADDR_VAR 0 6
10937: PUSH
10938: LD_VAR 0 13
10942: PUSH
10943: FOR_IN
10944: IFFALSE 11002
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10946: LD_VAR 0 1
10950: PPUSH
10951: LD_STRING M
10953: PUSH
10954: LD_VAR 0 6
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PUSH
10963: LD_VAR 0 6
10967: PUSH
10968: LD_INT 2
10970: ARRAY
10971: PUSH
10972: LD_INT 0
10974: PUSH
10975: LD_INT 0
10977: PUSH
10978: LD_INT 0
10980: PUSH
10981: LD_INT 0
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: PUSH
10993: EMPTY
10994: LIST
10995: PPUSH
10996: CALL_OW 447
11000: GO 10943
11002: POP
11003: POP
// end ;
11004: LD_VAR 0 5
11008: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11009: LD_EXP 36
11013: NOT
11014: IFFALSE 11064
11016: GO 11018
11018: DISABLE
// begin initHack := true ;
11019: LD_ADDR_EXP 36
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// hackTanks := [ ] ;
11027: LD_ADDR_EXP 37
11031: PUSH
11032: EMPTY
11033: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11034: LD_ADDR_EXP 38
11038: PUSH
11039: EMPTY
11040: ST_TO_ADDR
// hackLimit := 3 ;
11041: LD_ADDR_EXP 39
11045: PUSH
11046: LD_INT 3
11048: ST_TO_ADDR
// hackDist := 12 ;
11049: LD_ADDR_EXP 40
11053: PUSH
11054: LD_INT 12
11056: ST_TO_ADDR
// hackCounter := [ ] ;
11057: LD_ADDR_EXP 41
11061: PUSH
11062: EMPTY
11063: ST_TO_ADDR
// end ;
11064: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11065: LD_EXP 36
11069: PUSH
11070: LD_INT 34
11072: PUSH
11073: LD_INT 99
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 69
11084: AND
11085: IFFALSE 11338
11087: GO 11089
11089: DISABLE
11090: LD_INT 0
11092: PPUSH
11093: PPUSH
// begin enable ;
11094: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11095: LD_ADDR_VAR 0 1
11099: PUSH
11100: LD_INT 34
11102: PUSH
11103: LD_INT 99
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11336
// begin if not i in hackTanks then
11118: LD_VAR 0 1
11122: PUSH
11123: LD_EXP 37
11127: IN
11128: NOT
11129: IFFALSE 11212
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11131: LD_ADDR_EXP 37
11135: PUSH
11136: LD_EXP 37
11140: PPUSH
11141: LD_EXP 37
11145: PUSH
11146: LD_INT 1
11148: PLUS
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 1
11159: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11160: LD_ADDR_EXP 38
11164: PUSH
11165: LD_EXP 38
11169: PPUSH
11170: LD_EXP 38
11174: PUSH
11175: LD_INT 1
11177: PLUS
11178: PPUSH
11179: EMPTY
11180: PPUSH
11181: CALL_OW 1
11185: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11186: LD_ADDR_EXP 41
11190: PUSH
11191: LD_EXP 41
11195: PPUSH
11196: LD_EXP 41
11200: PUSH
11201: LD_INT 1
11203: PLUS
11204: PPUSH
11205: EMPTY
11206: PPUSH
11207: CALL_OW 1
11211: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11212: LD_VAR 0 1
11216: PPUSH
11217: CALL_OW 302
11221: NOT
11222: IFFALSE 11235
// begin HackUnlinkAll ( i ) ;
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL 11341 0 1
// continue ;
11233: GO 11115
// end ; HackCheckCapturedStatus ( i ) ;
11235: LD_VAR 0 1
11239: PPUSH
11240: CALL 11784 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11244: LD_ADDR_VAR 0 2
11248: PUSH
11249: LD_INT 81
11251: PUSH
11252: LD_VAR 0 1
11256: PPUSH
11257: CALL_OW 255
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 33
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 91
11278: PUSH
11279: LD_VAR 0 1
11283: PUSH
11284: LD_EXP 40
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 50
11296: PUSH
11297: EMPTY
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: ST_TO_ADDR
// if not tmp then
11311: LD_VAR 0 2
11315: NOT
11316: IFFALSE 11320
// continue ;
11318: GO 11115
// HackLink ( i , tmp ) ;
11320: LD_VAR 0 1
11324: PPUSH
11325: LD_VAR 0 2
11329: PPUSH
11330: CALL 11477 0 2
// end ;
11334: GO 11115
11336: POP
11337: POP
// end ;
11338: PPOPN 2
11340: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11341: LD_INT 0
11343: PPUSH
11344: PPUSH
11345: PPUSH
// if not hack in hackTanks then
11346: LD_VAR 0 1
11350: PUSH
11351: LD_EXP 37
11355: IN
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11472
// index := GetElementIndex ( hackTanks , hack ) ;
11361: LD_ADDR_VAR 0 4
11365: PUSH
11366: LD_EXP 37
11370: PPUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: CALL 34883 0 2
11380: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11381: LD_EXP 38
11385: PUSH
11386: LD_VAR 0 4
11390: ARRAY
11391: IFFALSE 11472
// begin for i in hackTanksCaptured [ index ] do
11393: LD_ADDR_VAR 0 3
11397: PUSH
11398: LD_EXP 38
11402: PUSH
11403: LD_VAR 0 4
11407: ARRAY
11408: PUSH
11409: FOR_IN
11410: IFFALSE 11436
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 1
11419: ARRAY
11420: PPUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_INT 2
11428: ARRAY
11429: PPUSH
11430: CALL_OW 235
11434: GO 11409
11436: POP
11437: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11438: LD_ADDR_EXP 38
11442: PUSH
11443: LD_EXP 38
11447: PPUSH
11448: LD_VAR 0 4
11452: PPUSH
11453: EMPTY
11454: PPUSH
11455: CALL_OW 1
11459: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11460: LD_VAR 0 1
11464: PPUSH
11465: LD_INT 0
11467: PPUSH
11468: CALL_OW 505
// end ; end ;
11472: LD_VAR 0 2
11476: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
11481: PPUSH
// if not hack in hackTanks or not vehicles then
11482: LD_VAR 0 1
11486: PUSH
11487: LD_EXP 37
11491: IN
11492: NOT
11493: PUSH
11494: LD_VAR 0 2
11498: NOT
11499: OR
11500: IFFALSE 11504
// exit ;
11502: GO 11779
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL 35533 0 4
11529: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11530: LD_ADDR_VAR 0 5
11534: PUSH
11535: LD_EXP 37
11539: PPUSH
11540: LD_VAR 0 1
11544: PPUSH
11545: CALL 34883 0 2
11549: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11550: LD_EXP 38
11554: PUSH
11555: LD_VAR 0 5
11559: ARRAY
11560: PUSH
11561: LD_EXP 39
11565: LESS
11566: IFFALSE 11755
// begin for i := 1 to vehicles do
11568: LD_ADDR_VAR 0 4
11572: PUSH
11573: DOUBLE
11574: LD_INT 1
11576: DEC
11577: ST_TO_ADDR
11578: LD_VAR 0 2
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11753
// begin if hackTanksCaptured [ index ] = hackLimit then
11586: LD_EXP 38
11590: PUSH
11591: LD_VAR 0 5
11595: ARRAY
11596: PUSH
11597: LD_EXP 39
11601: EQUAL
11602: IFFALSE 11606
// break ;
11604: GO 11753
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11606: LD_ADDR_EXP 41
11610: PUSH
11611: LD_EXP 41
11615: PPUSH
11616: LD_VAR 0 5
11620: PPUSH
11621: LD_EXP 41
11625: PUSH
11626: LD_VAR 0 5
11630: ARRAY
11631: PUSH
11632: LD_INT 1
11634: PLUS
11635: PPUSH
11636: CALL_OW 1
11640: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11641: LD_ADDR_EXP 38
11645: PUSH
11646: LD_EXP 38
11650: PPUSH
11651: LD_VAR 0 5
11655: PUSH
11656: LD_EXP 38
11660: PUSH
11661: LD_VAR 0 5
11665: ARRAY
11666: PUSH
11667: LD_INT 1
11669: PLUS
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PPUSH
11675: LD_VAR 0 2
11679: PUSH
11680: LD_VAR 0 4
11684: ARRAY
11685: PUSH
11686: LD_VAR 0 2
11690: PUSH
11691: LD_VAR 0 4
11695: ARRAY
11696: PPUSH
11697: CALL_OW 255
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL 35098 0 3
11710: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11711: LD_VAR 0 2
11715: PUSH
11716: LD_VAR 0 4
11720: ARRAY
11721: PPUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 255
11731: PPUSH
11732: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
11736: LD_VAR 0 2
11740: PUSH
11741: LD_VAR 0 4
11745: ARRAY
11746: PPUSH
11747: CALL_OW 141
// end ;
11751: GO 11583
11753: POP
11754: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_EXP 38
11764: PUSH
11765: LD_VAR 0 5
11769: ARRAY
11770: PUSH
11771: LD_INT 0
11773: PLUS
11774: PPUSH
11775: CALL_OW 505
// end ;
11779: LD_VAR 0 3
11783: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
11784: LD_INT 0
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
// if not hack in hackTanks then
11790: LD_VAR 0 1
11794: PUSH
11795: LD_EXP 37
11799: IN
11800: NOT
11801: IFFALSE 11805
// exit ;
11803: GO 12045
// index := GetElementIndex ( hackTanks , hack ) ;
11805: LD_ADDR_VAR 0 4
11809: PUSH
11810: LD_EXP 37
11814: PPUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL 34883 0 2
11824: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
11825: LD_ADDR_VAR 0 3
11829: PUSH
11830: DOUBLE
11831: LD_EXP 38
11835: PUSH
11836: LD_VAR 0 4
11840: ARRAY
11841: INC
11842: ST_TO_ADDR
11843: LD_INT 1
11845: PUSH
11846: FOR_DOWNTO
11847: IFFALSE 12019
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
11849: LD_ADDR_VAR 0 5
11853: PUSH
11854: LD_EXP 38
11858: PUSH
11859: LD_VAR 0 4
11863: ARRAY
11864: PUSH
11865: LD_VAR 0 3
11869: ARRAY
11870: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
11871: LD_VAR 0 5
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 302
11884: NOT
11885: PUSH
11886: LD_VAR 0 5
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PPUSH
11895: CALL_OW 255
11899: PUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 255
11909: NONEQUAL
11910: OR
11911: IFFALSE 12017
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
11913: LD_VAR 0 5
11917: PUSH
11918: LD_INT 1
11920: ARRAY
11921: PPUSH
11922: CALL_OW 305
11926: PUSH
11927: LD_VAR 0 5
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PPUSH
11936: CALL_OW 255
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 255
11950: EQUAL
11951: AND
11952: IFFALSE 11976
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
11954: LD_VAR 0 5
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: LD_VAR 0 5
11967: PUSH
11968: LD_INT 2
11970: ARRAY
11971: PPUSH
11972: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
11976: LD_ADDR_EXP 38
11980: PUSH
11981: LD_EXP 38
11985: PPUSH
11986: LD_VAR 0 4
11990: PPUSH
11991: LD_EXP 38
11995: PUSH
11996: LD_VAR 0 4
12000: ARRAY
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: CALL_OW 3
12011: PPUSH
12012: CALL_OW 1
12016: ST_TO_ADDR
// end ; end ;
12017: GO 11846
12019: POP
12020: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_EXP 38
12030: PUSH
12031: LD_VAR 0 4
12035: ARRAY
12036: PUSH
12037: LD_INT 0
12039: PLUS
12040: PPUSH
12041: CALL_OW 505
// end ;
12045: LD_VAR 0 2
12049: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12050: LD_INT 0
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
// if not hack in hackTanks then
12056: LD_VAR 0 1
12060: PUSH
12061: LD_EXP 37
12065: IN
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12156
// index := GetElementIndex ( hackTanks , hack ) ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_EXP 37
12080: PPUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL 34883 0 2
12090: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12091: LD_ADDR_VAR 0 4
12095: PUSH
12096: DOUBLE
12097: LD_INT 1
12099: DEC
12100: ST_TO_ADDR
12101: LD_EXP 38
12105: PUSH
12106: LD_VAR 0 5
12110: ARRAY
12111: PUSH
12112: FOR_TO
12113: IFFALSE 12154
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12115: LD_EXP 38
12119: PUSH
12120: LD_VAR 0 5
12124: ARRAY
12125: PUSH
12126: LD_VAR 0 4
12130: ARRAY
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PUSH
12136: LD_VAR 0 2
12140: EQUAL
12141: IFFALSE 12152
// KillUnit ( vehicle ) ;
12143: LD_VAR 0 2
12147: PPUSH
12148: CALL_OW 66
12152: GO 12112
12154: POP
12155: POP
// end ;
12156: LD_VAR 0 3
12160: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12161: LD_EXP 42
12165: NOT
12166: IFFALSE 12201
12168: GO 12170
12170: DISABLE
// begin initMiner := true ;
12171: LD_ADDR_EXP 42
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// minersList := [ ] ;
12179: LD_ADDR_EXP 43
12183: PUSH
12184: EMPTY
12185: ST_TO_ADDR
// minerMinesList := [ ] ;
12186: LD_ADDR_EXP 44
12190: PUSH
12191: EMPTY
12192: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12193: LD_ADDR_EXP 45
12197: PUSH
12198: LD_INT 5
12200: ST_TO_ADDR
// end ;
12201: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12202: LD_EXP 42
12206: PUSH
12207: LD_INT 34
12209: PUSH
12210: LD_INT 81
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 69
12221: AND
12222: IFFALSE 12683
12224: GO 12226
12226: DISABLE
12227: LD_INT 0
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// begin enable ;
12233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: LD_INT 34
12241: PUSH
12242: LD_INT 81
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12327
// begin if not i in minersList then
12257: LD_VAR 0 1
12261: PUSH
12262: LD_EXP 43
12266: IN
12267: NOT
12268: IFFALSE 12325
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12270: LD_ADDR_EXP 43
12274: PUSH
12275: LD_EXP 43
12279: PPUSH
12280: LD_EXP 43
12284: PUSH
12285: LD_INT 1
12287: PLUS
12288: PPUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 1
12298: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12299: LD_ADDR_EXP 44
12303: PUSH
12304: LD_EXP 44
12308: PPUSH
12309: LD_EXP 44
12313: PUSH
12314: LD_INT 1
12316: PLUS
12317: PPUSH
12318: EMPTY
12319: PPUSH
12320: CALL_OW 1
12324: ST_TO_ADDR
// end end ;
12325: GO 12254
12327: POP
12328: POP
// for i := minerMinesList downto 1 do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: DOUBLE
12335: LD_EXP 44
12339: INC
12340: ST_TO_ADDR
12341: LD_INT 1
12343: PUSH
12344: FOR_DOWNTO
12345: IFFALSE 12681
// begin if IsLive ( minersList [ i ] ) then
12347: LD_EXP 43
12351: PUSH
12352: LD_VAR 0 1
12356: ARRAY
12357: PPUSH
12358: CALL_OW 300
12362: IFFALSE 12390
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12364: LD_EXP 43
12368: PUSH
12369: LD_VAR 0 1
12373: ARRAY
12374: PPUSH
12375: LD_EXP 44
12379: PUSH
12380: LD_VAR 0 1
12384: ARRAY
12385: PPUSH
12386: CALL_OW 505
// if not minerMinesList [ i ] then
12390: LD_EXP 44
12394: PUSH
12395: LD_VAR 0 1
12399: ARRAY
12400: NOT
12401: IFFALSE 12405
// continue ;
12403: GO 12344
// for j := minerMinesList [ i ] downto 1 do
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: DOUBLE
12411: LD_EXP 44
12415: PUSH
12416: LD_VAR 0 1
12420: ARRAY
12421: INC
12422: ST_TO_ADDR
12423: LD_INT 1
12425: PUSH
12426: FOR_DOWNTO
12427: IFFALSE 12677
// begin side := GetSide ( minersList [ i ] ) ;
12429: LD_ADDR_VAR 0 3
12433: PUSH
12434: LD_EXP 43
12438: PUSH
12439: LD_VAR 0 1
12443: ARRAY
12444: PPUSH
12445: CALL_OW 255
12449: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_EXP 44
12459: PUSH
12460: LD_VAR 0 1
12464: ARRAY
12465: PUSH
12466: LD_VAR 0 2
12470: ARRAY
12471: PUSH
12472: LD_INT 1
12474: ARRAY
12475: PPUSH
12476: LD_EXP 44
12480: PUSH
12481: LD_VAR 0 1
12485: ARRAY
12486: PUSH
12487: LD_VAR 0 2
12491: ARRAY
12492: PUSH
12493: LD_INT 2
12495: ARRAY
12496: PPUSH
12497: CALL_OW 428
12501: ST_TO_ADDR
// if not tmp then
12502: LD_VAR 0 4
12506: NOT
12507: IFFALSE 12511
// continue ;
12509: GO 12426
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12511: LD_VAR 0 4
12515: PUSH
12516: LD_INT 81
12518: PUSH
12519: LD_VAR 0 3
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: IN
12533: PUSH
12534: LD_EXP 44
12538: PUSH
12539: LD_VAR 0 1
12543: ARRAY
12544: PUSH
12545: LD_VAR 0 2
12549: ARRAY
12550: PUSH
12551: LD_INT 1
12553: ARRAY
12554: PPUSH
12555: LD_EXP 44
12559: PUSH
12560: LD_VAR 0 1
12564: ARRAY
12565: PUSH
12566: LD_VAR 0 2
12570: ARRAY
12571: PUSH
12572: LD_INT 2
12574: ARRAY
12575: PPUSH
12576: CALL_OW 458
12580: AND
12581: IFFALSE 12675
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12583: LD_EXP 44
12587: PUSH
12588: LD_VAR 0 1
12592: ARRAY
12593: PUSH
12594: LD_VAR 0 2
12598: ARRAY
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: LD_EXP 44
12608: PUSH
12609: LD_VAR 0 1
12613: ARRAY
12614: PUSH
12615: LD_VAR 0 2
12619: ARRAY
12620: PUSH
12621: LD_INT 2
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12634: LD_ADDR_EXP 44
12638: PUSH
12639: LD_EXP 44
12643: PPUSH
12644: LD_VAR 0 1
12648: PPUSH
12649: LD_EXP 44
12653: PUSH
12654: LD_VAR 0 1
12658: ARRAY
12659: PPUSH
12660: LD_VAR 0 2
12664: PPUSH
12665: CALL_OW 3
12669: PPUSH
12670: CALL_OW 1
12674: ST_TO_ADDR
// end ; end ;
12675: GO 12426
12677: POP
12678: POP
// end ;
12679: GO 12344
12681: POP
12682: POP
// end ;
12683: PPOPN 4
12685: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12686: LD_INT 0
12688: PPUSH
12689: PPUSH
// result := false ;
12690: LD_ADDR_VAR 0 4
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 264
12707: PUSH
12708: LD_INT 81
12710: EQUAL
12711: NOT
12712: IFFALSE 12716
// exit ;
12714: GO 12956
// index := GetElementIndex ( minersList , unit ) ;
12716: LD_ADDR_VAR 0 5
12720: PUSH
12721: LD_EXP 43
12725: PPUSH
12726: LD_VAR 0 1
12730: PPUSH
12731: CALL 34883 0 2
12735: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
12736: LD_EXP 44
12740: PUSH
12741: LD_VAR 0 5
12745: ARRAY
12746: PUSH
12747: LD_EXP 45
12751: GREATEREQUAL
12752: IFFALSE 12756
// exit ;
12754: GO 12956
// ComMoveXY ( unit , x , y ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_VAR 0 2
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12775: LD_INT 35
12777: PPUSH
12778: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
12782: LD_VAR 0 1
12786: PPUSH
12787: LD_VAR 0 2
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: CALL 66238 0 3
12801: NOT
12802: PUSH
12803: LD_VAR 0 1
12807: PPUSH
12808: CALL_OW 314
12812: AND
12813: IFFALSE 12817
// exit ;
12815: GO 12956
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: CALL_OW 428
12831: PUSH
12832: LD_VAR 0 1
12836: EQUAL
12837: PUSH
12838: LD_VAR 0 1
12842: PPUSH
12843: CALL_OW 314
12847: NOT
12848: AND
12849: IFFALSE 12775
// PlaySoundXY ( x , y , PlantMine ) ;
12851: LD_VAR 0 2
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_STRING PlantMine
12863: PPUSH
12864: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
12868: LD_VAR 0 2
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_VAR 0 1
12882: PPUSH
12883: CALL_OW 255
12887: PPUSH
12888: LD_INT 0
12890: PPUSH
12891: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
12895: LD_ADDR_EXP 44
12899: PUSH
12900: LD_EXP 44
12904: PPUSH
12905: LD_VAR 0 5
12909: PUSH
12910: LD_EXP 44
12914: PUSH
12915: LD_VAR 0 5
12919: ARRAY
12920: PUSH
12921: LD_INT 1
12923: PLUS
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: LD_VAR 0 2
12933: PUSH
12934: LD_VAR 0 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL 35098 0 3
12947: ST_TO_ADDR
// result := true ;
12948: LD_ADDR_VAR 0 4
12952: PUSH
12953: LD_INT 1
12955: ST_TO_ADDR
// end ;
12956: LD_VAR 0 4
12960: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
12961: LD_INT 0
12963: PPUSH
12964: PPUSH
12965: PPUSH
// if not unit in minersList then
12966: LD_VAR 0 1
12970: PUSH
12971: LD_EXP 43
12975: IN
12976: NOT
12977: IFFALSE 12981
// exit ;
12979: GO 13373
// index := GetElementIndex ( minersList , unit ) ;
12981: LD_ADDR_VAR 0 6
12985: PUSH
12986: LD_EXP 43
12990: PPUSH
12991: LD_VAR 0 1
12995: PPUSH
12996: CALL 34883 0 2
13000: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13001: LD_ADDR_VAR 0 5
13005: PUSH
13006: DOUBLE
13007: LD_EXP 44
13011: PUSH
13012: LD_VAR 0 6
13016: ARRAY
13017: INC
13018: ST_TO_ADDR
13019: LD_INT 1
13021: PUSH
13022: FOR_DOWNTO
13023: IFFALSE 13184
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13025: LD_EXP 44
13029: PUSH
13030: LD_VAR 0 6
13034: ARRAY
13035: PUSH
13036: LD_VAR 0 5
13040: ARRAY
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PUSH
13046: LD_VAR 0 2
13050: EQUAL
13051: PUSH
13052: LD_EXP 44
13056: PUSH
13057: LD_VAR 0 6
13061: ARRAY
13062: PUSH
13063: LD_VAR 0 5
13067: ARRAY
13068: PUSH
13069: LD_INT 2
13071: ARRAY
13072: PUSH
13073: LD_VAR 0 3
13077: EQUAL
13078: AND
13079: IFFALSE 13182
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13081: LD_EXP 44
13085: PUSH
13086: LD_VAR 0 6
13090: ARRAY
13091: PUSH
13092: LD_VAR 0 5
13096: ARRAY
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: LD_EXP 44
13106: PUSH
13107: LD_VAR 0 6
13111: ARRAY
13112: PUSH
13113: LD_VAR 0 5
13117: ARRAY
13118: PUSH
13119: LD_INT 2
13121: ARRAY
13122: PPUSH
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 255
13132: PPUSH
13133: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13137: LD_ADDR_EXP 44
13141: PUSH
13142: LD_EXP 44
13146: PPUSH
13147: LD_VAR 0 6
13151: PPUSH
13152: LD_EXP 44
13156: PUSH
13157: LD_VAR 0 6
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 5
13167: PPUSH
13168: CALL_OW 3
13172: PPUSH
13173: CALL_OW 1
13177: ST_TO_ADDR
// exit ;
13178: POP
13179: POP
13180: GO 13373
// end ; end ;
13182: GO 13022
13184: POP
13185: POP
// for i := minerMinesList [ index ] downto 1 do
13186: LD_ADDR_VAR 0 5
13190: PUSH
13191: DOUBLE
13192: LD_EXP 44
13196: PUSH
13197: LD_VAR 0 6
13201: ARRAY
13202: INC
13203: ST_TO_ADDR
13204: LD_INT 1
13206: PUSH
13207: FOR_DOWNTO
13208: IFFALSE 13371
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13210: LD_EXP 44
13214: PUSH
13215: LD_VAR 0 6
13219: ARRAY
13220: PUSH
13221: LD_VAR 0 5
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: LD_EXP 44
13235: PUSH
13236: LD_VAR 0 6
13240: ARRAY
13241: PUSH
13242: LD_VAR 0 5
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: CALL_OW 298
13266: PUSH
13267: LD_INT 6
13269: LESS
13270: IFFALSE 13369
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13272: LD_EXP 44
13276: PUSH
13277: LD_VAR 0 6
13281: ARRAY
13282: PUSH
13283: LD_VAR 0 5
13287: ARRAY
13288: PUSH
13289: LD_INT 1
13291: ARRAY
13292: PPUSH
13293: LD_EXP 44
13297: PUSH
13298: LD_VAR 0 6
13302: ARRAY
13303: PUSH
13304: LD_VAR 0 5
13308: ARRAY
13309: PUSH
13310: LD_INT 2
13312: ARRAY
13313: PPUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 255
13323: PPUSH
13324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13328: LD_ADDR_EXP 44
13332: PUSH
13333: LD_EXP 44
13337: PPUSH
13338: LD_VAR 0 6
13342: PPUSH
13343: LD_EXP 44
13347: PUSH
13348: LD_VAR 0 6
13352: ARRAY
13353: PPUSH
13354: LD_VAR 0 5
13358: PPUSH
13359: CALL_OW 3
13363: PPUSH
13364: CALL_OW 1
13368: ST_TO_ADDR
// end ; end ;
13369: GO 13207
13371: POP
13372: POP
// end ;
13373: LD_VAR 0 4
13377: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13378: LD_INT 0
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
13386: PPUSH
13387: PPUSH
13388: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 264
13398: PUSH
13399: LD_INT 81
13401: EQUAL
13402: NOT
13403: PUSH
13404: LD_VAR 0 1
13408: PUSH
13409: LD_EXP 43
13413: IN
13414: NOT
13415: OR
13416: IFFALSE 13420
// exit ;
13418: GO 13742
// index := GetElementIndex ( minersList , unit ) ;
13420: LD_ADDR_VAR 0 6
13424: PUSH
13425: LD_EXP 43
13429: PPUSH
13430: LD_VAR 0 1
13434: PPUSH
13435: CALL 34883 0 2
13439: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13440: LD_ADDR_VAR 0 8
13444: PUSH
13445: LD_EXP 45
13449: PUSH
13450: LD_EXP 44
13454: PUSH
13455: LD_VAR 0 6
13459: ARRAY
13460: MINUS
13461: ST_TO_ADDR
// if not minesFreeAmount then
13462: LD_VAR 0 8
13466: NOT
13467: IFFALSE 13471
// exit ;
13469: GO 13742
// tmp := [ ] ;
13471: LD_ADDR_VAR 0 7
13475: PUSH
13476: EMPTY
13477: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13478: LD_ADDR_VAR 0 5
13482: PUSH
13483: DOUBLE
13484: LD_INT 1
13486: DEC
13487: ST_TO_ADDR
13488: LD_VAR 0 8
13492: PUSH
13493: FOR_TO
13494: IFFALSE 13689
// begin _d := rand ( 0 , 5 ) ;
13496: LD_ADDR_VAR 0 11
13500: PUSH
13501: LD_INT 0
13503: PPUSH
13504: LD_INT 5
13506: PPUSH
13507: CALL_OW 12
13511: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13512: LD_ADDR_VAR 0 12
13516: PUSH
13517: LD_INT 2
13519: PPUSH
13520: LD_INT 6
13522: PPUSH
13523: CALL_OW 12
13527: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13528: LD_ADDR_VAR 0 9
13532: PUSH
13533: LD_VAR 0 2
13537: PPUSH
13538: LD_VAR 0 11
13542: PPUSH
13543: LD_VAR 0 12
13547: PPUSH
13548: CALL_OW 272
13552: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13553: LD_ADDR_VAR 0 10
13557: PUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_VAR 0 11
13567: PPUSH
13568: LD_VAR 0 12
13572: PPUSH
13573: CALL_OW 273
13577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13578: LD_VAR 0 9
13582: PPUSH
13583: LD_VAR 0 10
13587: PPUSH
13588: CALL_OW 488
13592: PUSH
13593: LD_VAR 0 9
13597: PUSH
13598: LD_VAR 0 10
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_VAR 0 7
13611: IN
13612: NOT
13613: AND
13614: PUSH
13615: LD_VAR 0 9
13619: PPUSH
13620: LD_VAR 0 10
13624: PPUSH
13625: CALL_OW 458
13629: NOT
13630: AND
13631: IFFALSE 13673
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13633: LD_ADDR_VAR 0 7
13637: PUSH
13638: LD_VAR 0 7
13642: PPUSH
13643: LD_VAR 0 7
13647: PUSH
13648: LD_INT 1
13650: PLUS
13651: PPUSH
13652: LD_VAR 0 9
13656: PUSH
13657: LD_VAR 0 10
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PPUSH
13666: CALL_OW 1
13670: ST_TO_ADDR
13671: GO 13687
// i := i - 1 ;
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: LD_VAR 0 5
13682: PUSH
13683: LD_INT 1
13685: MINUS
13686: ST_TO_ADDR
// end ;
13687: GO 13493
13689: POP
13690: POP
// for i in tmp do
13691: LD_ADDR_VAR 0 5
13695: PUSH
13696: LD_VAR 0 7
13700: PUSH
13701: FOR_IN
13702: IFFALSE 13740
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13704: LD_VAR 0 1
13708: PPUSH
13709: LD_VAR 0 5
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: PPUSH
13718: LD_VAR 0 5
13722: PUSH
13723: LD_INT 2
13725: ARRAY
13726: PPUSH
13727: CALL 12686 0 3
13731: NOT
13732: IFFALSE 13738
// exit ;
13734: POP
13735: POP
13736: GO 13742
13738: GO 13701
13740: POP
13741: POP
// end ;
13742: LD_VAR 0 4
13746: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
13747: LD_INT 0
13749: PPUSH
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
13754: PPUSH
13755: PPUSH
// if not GetClass ( unit ) = class_sniper then
13756: LD_VAR 0 1
13760: PPUSH
13761: CALL_OW 257
13765: PUSH
13766: LD_INT 5
13768: EQUAL
13769: NOT
13770: IFFALSE 13774
// exit ;
13772: GO 14162
// dist := 8 ;
13774: LD_ADDR_VAR 0 5
13778: PUSH
13779: LD_INT 8
13781: ST_TO_ADDR
// viewRange := 12 ;
13782: LD_ADDR_VAR 0 7
13786: PUSH
13787: LD_INT 12
13789: ST_TO_ADDR
// side := GetSide ( unit ) ;
13790: LD_ADDR_VAR 0 6
13794: PUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 255
13804: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
13805: LD_INT 61
13807: PPUSH
13808: LD_VAR 0 6
13812: PPUSH
13813: CALL_OW 321
13817: PUSH
13818: LD_INT 2
13820: EQUAL
13821: IFFALSE 13831
// viewRange := 16 ;
13823: LD_ADDR_VAR 0 7
13827: PUSH
13828: LD_INT 16
13830: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_VAR 0 2
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: CALL_OW 297
13850: PUSH
13851: LD_VAR 0 5
13855: GREATER
13856: IFFALSE 13935
// begin ComMoveXY ( unit , x , y ) ;
13858: LD_VAR 0 1
13862: PPUSH
13863: LD_VAR 0 2
13867: PPUSH
13868: LD_VAR 0 3
13872: PPUSH
13873: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13877: LD_INT 35
13879: PPUSH
13880: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
13884: LD_VAR 0 1
13888: PPUSH
13889: LD_VAR 0 2
13893: PPUSH
13894: LD_VAR 0 3
13898: PPUSH
13899: CALL 66238 0 3
13903: NOT
13904: IFFALSE 13908
// exit ;
13906: GO 14162
// until GetDistUnitXY ( unit , x , y ) < dist ;
13908: LD_VAR 0 1
13912: PPUSH
13913: LD_VAR 0 2
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: CALL_OW 297
13927: PUSH
13928: LD_VAR 0 5
13932: LESS
13933: IFFALSE 13877
// end ; ComTurnXY ( unit , x , y ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: LD_VAR 0 2
13944: PPUSH
13945: LD_VAR 0 3
13949: PPUSH
13950: CALL_OW 118
// wait ( 5 ) ;
13954: LD_INT 5
13956: PPUSH
13957: CALL_OW 67
// _d := GetDir ( unit ) ;
13961: LD_ADDR_VAR 0 10
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 254
13975: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
13976: LD_ADDR_VAR 0 8
13980: PUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 250
13990: PPUSH
13991: LD_VAR 0 10
13995: PPUSH
13996: LD_VAR 0 5
14000: PPUSH
14001: CALL_OW 272
14005: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14006: LD_ADDR_VAR 0 9
14010: PUSH
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 251
14020: PPUSH
14021: LD_VAR 0 10
14025: PPUSH
14026: LD_VAR 0 5
14030: PPUSH
14031: CALL_OW 273
14035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14036: LD_VAR 0 8
14040: PPUSH
14041: LD_VAR 0 9
14045: PPUSH
14046: CALL_OW 488
14050: NOT
14051: IFFALSE 14055
// exit ;
14053: GO 14162
// ComAnimCustom ( unit , 1 ) ;
14055: LD_VAR 0 1
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14067: LD_VAR 0 8
14071: PPUSH
14072: LD_VAR 0 9
14076: PPUSH
14077: LD_VAR 0 6
14081: PPUSH
14082: LD_VAR 0 7
14086: PPUSH
14087: CALL_OW 330
// repeat wait ( 1 ) ;
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 316
14107: PUSH
14108: LD_VAR 0 1
14112: PPUSH
14113: CALL_OW 314
14117: OR
14118: PUSH
14119: LD_VAR 0 1
14123: PPUSH
14124: CALL_OW 302
14128: NOT
14129: OR
14130: PUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL_OW 301
14140: OR
14141: IFFALSE 14091
// RemoveSeeing ( _x , _y , side ) ;
14143: LD_VAR 0 8
14147: PPUSH
14148: LD_VAR 0 9
14152: PPUSH
14153: LD_VAR 0 6
14157: PPUSH
14158: CALL_OW 331
// end ; end_of_file
14162: LD_VAR 0 4
14166: RET
// export globalGameSaveCounter ; every 0 0$1 do
14167: GO 14169
14169: DISABLE
// begin enable ;
14170: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14171: LD_STRING updateTimer(
14173: PUSH
14174: LD_OWVAR 1
14178: STR
14179: PUSH
14180: LD_STRING );
14182: STR
14183: PPUSH
14184: CALL_OW 559
// end ;
14188: END
// every 0 0$1 do
14189: GO 14191
14191: DISABLE
// begin globalGameSaveCounter := 0 ;
14192: LD_ADDR_EXP 46
14196: PUSH
14197: LD_INT 0
14199: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14200: LD_STRING setGameSaveCounter(0)
14202: PPUSH
14203: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14207: LD_STRING initStreamRollete();
14209: PPUSH
14210: CALL_OW 559
// InitStreamMode ;
14214: CALL 15540 0 0
// DefineStreamItems ( false ) ;
14218: LD_INT 0
14220: PPUSH
14221: CALL 16004 0 1
// end ;
14225: END
// export function SOS_MapStart ( ) ; begin
14226: LD_INT 0
14228: PPUSH
// if streamModeActive then
14229: LD_EXP 47
14233: IFFALSE 14242
// DefineStreamItems ( true ) ;
14235: LD_INT 1
14237: PPUSH
14238: CALL 16004 0 1
// UpdateLuaVariables ( ) ;
14242: CALL 14259 0 0
// UpdateFactoryWaypoints ( ) ;
14246: CALL 28865 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14250: CALL 29122 0 0
// end ;
14254: LD_VAR 0 1
14258: RET
// function UpdateLuaVariables ( ) ; begin
14259: LD_INT 0
14261: PPUSH
// if globalGameSaveCounter then
14262: LD_EXP 46
14266: IFFALSE 14300
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14268: LD_ADDR_EXP 46
14272: PUSH
14273: LD_EXP 46
14277: PPUSH
14278: CALL 68790 0 1
14282: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14283: LD_STRING setGameSaveCounter(
14285: PUSH
14286: LD_EXP 46
14290: STR
14291: PUSH
14292: LD_STRING )
14294: STR
14295: PPUSH
14296: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14300: LD_STRING setGameDifficulty(
14302: PUSH
14303: LD_OWVAR 67
14307: STR
14308: PUSH
14309: LD_STRING )
14311: STR
14312: PPUSH
14313: CALL_OW 559
// end ;
14317: LD_VAR 0 1
14321: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14322: LD_INT 0
14324: PPUSH
// if p2 = stream_mode then
14325: LD_VAR 0 2
14329: PUSH
14330: LD_INT 100
14332: EQUAL
14333: IFFALSE 15336
// begin if not StreamModeActive then
14335: LD_EXP 47
14339: NOT
14340: IFFALSE 14350
// StreamModeActive := true ;
14342: LD_ADDR_EXP 47
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// if p3 = 0 then
14350: LD_VAR 0 3
14354: PUSH
14355: LD_INT 0
14357: EQUAL
14358: IFFALSE 14364
// InitStreamMode ;
14360: CALL 15540 0 0
// if p3 = 1 then
14364: LD_VAR 0 3
14368: PUSH
14369: LD_INT 1
14371: EQUAL
14372: IFFALSE 14382
// sRocket := true ;
14374: LD_ADDR_EXP 52
14378: PUSH
14379: LD_INT 1
14381: ST_TO_ADDR
// if p3 = 2 then
14382: LD_VAR 0 3
14386: PUSH
14387: LD_INT 2
14389: EQUAL
14390: IFFALSE 14400
// sSpeed := true ;
14392: LD_ADDR_EXP 51
14396: PUSH
14397: LD_INT 1
14399: ST_TO_ADDR
// if p3 = 3 then
14400: LD_VAR 0 3
14404: PUSH
14405: LD_INT 3
14407: EQUAL
14408: IFFALSE 14418
// sEngine := true ;
14410: LD_ADDR_EXP 53
14414: PUSH
14415: LD_INT 1
14417: ST_TO_ADDR
// if p3 = 4 then
14418: LD_VAR 0 3
14422: PUSH
14423: LD_INT 4
14425: EQUAL
14426: IFFALSE 14436
// sSpec := true ;
14428: LD_ADDR_EXP 50
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// if p3 = 5 then
14436: LD_VAR 0 3
14440: PUSH
14441: LD_INT 5
14443: EQUAL
14444: IFFALSE 14454
// sLevel := true ;
14446: LD_ADDR_EXP 54
14450: PUSH
14451: LD_INT 1
14453: ST_TO_ADDR
// if p3 = 6 then
14454: LD_VAR 0 3
14458: PUSH
14459: LD_INT 6
14461: EQUAL
14462: IFFALSE 14472
// sArmoury := true ;
14464: LD_ADDR_EXP 55
14468: PUSH
14469: LD_INT 1
14471: ST_TO_ADDR
// if p3 = 7 then
14472: LD_VAR 0 3
14476: PUSH
14477: LD_INT 7
14479: EQUAL
14480: IFFALSE 14490
// sRadar := true ;
14482: LD_ADDR_EXP 56
14486: PUSH
14487: LD_INT 1
14489: ST_TO_ADDR
// if p3 = 8 then
14490: LD_VAR 0 3
14494: PUSH
14495: LD_INT 8
14497: EQUAL
14498: IFFALSE 14508
// sBunker := true ;
14500: LD_ADDR_EXP 57
14504: PUSH
14505: LD_INT 1
14507: ST_TO_ADDR
// if p3 = 9 then
14508: LD_VAR 0 3
14512: PUSH
14513: LD_INT 9
14515: EQUAL
14516: IFFALSE 14526
// sHack := true ;
14518: LD_ADDR_EXP 58
14522: PUSH
14523: LD_INT 1
14525: ST_TO_ADDR
// if p3 = 10 then
14526: LD_VAR 0 3
14530: PUSH
14531: LD_INT 10
14533: EQUAL
14534: IFFALSE 14544
// sFire := true ;
14536: LD_ADDR_EXP 59
14540: PUSH
14541: LD_INT 1
14543: ST_TO_ADDR
// if p3 = 11 then
14544: LD_VAR 0 3
14548: PUSH
14549: LD_INT 11
14551: EQUAL
14552: IFFALSE 14562
// sRefresh := true ;
14554: LD_ADDR_EXP 60
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// if p3 = 12 then
14562: LD_VAR 0 3
14566: PUSH
14567: LD_INT 12
14569: EQUAL
14570: IFFALSE 14580
// sExp := true ;
14572: LD_ADDR_EXP 61
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// if p3 = 13 then
14580: LD_VAR 0 3
14584: PUSH
14585: LD_INT 13
14587: EQUAL
14588: IFFALSE 14598
// sDepot := true ;
14590: LD_ADDR_EXP 62
14594: PUSH
14595: LD_INT 1
14597: ST_TO_ADDR
// if p3 = 14 then
14598: LD_VAR 0 3
14602: PUSH
14603: LD_INT 14
14605: EQUAL
14606: IFFALSE 14616
// sFlag := true ;
14608: LD_ADDR_EXP 63
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// if p3 = 15 then
14616: LD_VAR 0 3
14620: PUSH
14621: LD_INT 15
14623: EQUAL
14624: IFFALSE 14634
// sKamikadze := true ;
14626: LD_ADDR_EXP 71
14630: PUSH
14631: LD_INT 1
14633: ST_TO_ADDR
// if p3 = 16 then
14634: LD_VAR 0 3
14638: PUSH
14639: LD_INT 16
14641: EQUAL
14642: IFFALSE 14652
// sTroll := true ;
14644: LD_ADDR_EXP 72
14648: PUSH
14649: LD_INT 1
14651: ST_TO_ADDR
// if p3 = 17 then
14652: LD_VAR 0 3
14656: PUSH
14657: LD_INT 17
14659: EQUAL
14660: IFFALSE 14670
// sSlow := true ;
14662: LD_ADDR_EXP 73
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// if p3 = 18 then
14670: LD_VAR 0 3
14674: PUSH
14675: LD_INT 18
14677: EQUAL
14678: IFFALSE 14688
// sLack := true ;
14680: LD_ADDR_EXP 74
14684: PUSH
14685: LD_INT 1
14687: ST_TO_ADDR
// if p3 = 19 then
14688: LD_VAR 0 3
14692: PUSH
14693: LD_INT 19
14695: EQUAL
14696: IFFALSE 14706
// sTank := true ;
14698: LD_ADDR_EXP 76
14702: PUSH
14703: LD_INT 1
14705: ST_TO_ADDR
// if p3 = 20 then
14706: LD_VAR 0 3
14710: PUSH
14711: LD_INT 20
14713: EQUAL
14714: IFFALSE 14724
// sRemote := true ;
14716: LD_ADDR_EXP 77
14720: PUSH
14721: LD_INT 1
14723: ST_TO_ADDR
// if p3 = 21 then
14724: LD_VAR 0 3
14728: PUSH
14729: LD_INT 21
14731: EQUAL
14732: IFFALSE 14742
// sPowell := true ;
14734: LD_ADDR_EXP 78
14738: PUSH
14739: LD_INT 1
14741: ST_TO_ADDR
// if p3 = 22 then
14742: LD_VAR 0 3
14746: PUSH
14747: LD_INT 22
14749: EQUAL
14750: IFFALSE 14760
// sTeleport := true ;
14752: LD_ADDR_EXP 81
14756: PUSH
14757: LD_INT 1
14759: ST_TO_ADDR
// if p3 = 23 then
14760: LD_VAR 0 3
14764: PUSH
14765: LD_INT 23
14767: EQUAL
14768: IFFALSE 14778
// sOilTower := true ;
14770: LD_ADDR_EXP 83
14774: PUSH
14775: LD_INT 1
14777: ST_TO_ADDR
// if p3 = 24 then
14778: LD_VAR 0 3
14782: PUSH
14783: LD_INT 24
14785: EQUAL
14786: IFFALSE 14796
// sShovel := true ;
14788: LD_ADDR_EXP 84
14792: PUSH
14793: LD_INT 1
14795: ST_TO_ADDR
// if p3 = 25 then
14796: LD_VAR 0 3
14800: PUSH
14801: LD_INT 25
14803: EQUAL
14804: IFFALSE 14814
// sSheik := true ;
14806: LD_ADDR_EXP 85
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// if p3 = 26 then
14814: LD_VAR 0 3
14818: PUSH
14819: LD_INT 26
14821: EQUAL
14822: IFFALSE 14832
// sEarthquake := true ;
14824: LD_ADDR_EXP 87
14828: PUSH
14829: LD_INT 1
14831: ST_TO_ADDR
// if p3 = 27 then
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 27
14839: EQUAL
14840: IFFALSE 14850
// sAI := true ;
14842: LD_ADDR_EXP 88
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// if p3 = 28 then
14850: LD_VAR 0 3
14854: PUSH
14855: LD_INT 28
14857: EQUAL
14858: IFFALSE 14868
// sCargo := true ;
14860: LD_ADDR_EXP 91
14864: PUSH
14865: LD_INT 1
14867: ST_TO_ADDR
// if p3 = 29 then
14868: LD_VAR 0 3
14872: PUSH
14873: LD_INT 29
14875: EQUAL
14876: IFFALSE 14886
// sDLaser := true ;
14878: LD_ADDR_EXP 92
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// if p3 = 30 then
14886: LD_VAR 0 3
14890: PUSH
14891: LD_INT 30
14893: EQUAL
14894: IFFALSE 14904
// sExchange := true ;
14896: LD_ADDR_EXP 93
14900: PUSH
14901: LD_INT 1
14903: ST_TO_ADDR
// if p3 = 31 then
14904: LD_VAR 0 3
14908: PUSH
14909: LD_INT 31
14911: EQUAL
14912: IFFALSE 14922
// sFac := true ;
14914: LD_ADDR_EXP 94
14918: PUSH
14919: LD_INT 1
14921: ST_TO_ADDR
// if p3 = 32 then
14922: LD_VAR 0 3
14926: PUSH
14927: LD_INT 32
14929: EQUAL
14930: IFFALSE 14940
// sPower := true ;
14932: LD_ADDR_EXP 95
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// if p3 = 33 then
14940: LD_VAR 0 3
14944: PUSH
14945: LD_INT 33
14947: EQUAL
14948: IFFALSE 14958
// sRandom := true ;
14950: LD_ADDR_EXP 96
14954: PUSH
14955: LD_INT 1
14957: ST_TO_ADDR
// if p3 = 34 then
14958: LD_VAR 0 3
14962: PUSH
14963: LD_INT 34
14965: EQUAL
14966: IFFALSE 14976
// sShield := true ;
14968: LD_ADDR_EXP 97
14972: PUSH
14973: LD_INT 1
14975: ST_TO_ADDR
// if p3 = 35 then
14976: LD_VAR 0 3
14980: PUSH
14981: LD_INT 35
14983: EQUAL
14984: IFFALSE 14994
// sTime := true ;
14986: LD_ADDR_EXP 98
14990: PUSH
14991: LD_INT 1
14993: ST_TO_ADDR
// if p3 = 36 then
14994: LD_VAR 0 3
14998: PUSH
14999: LD_INT 36
15001: EQUAL
15002: IFFALSE 15012
// sTools := true ;
15004: LD_ADDR_EXP 99
15008: PUSH
15009: LD_INT 1
15011: ST_TO_ADDR
// if p3 = 101 then
15012: LD_VAR 0 3
15016: PUSH
15017: LD_INT 101
15019: EQUAL
15020: IFFALSE 15030
// sSold := true ;
15022: LD_ADDR_EXP 64
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// if p3 = 102 then
15030: LD_VAR 0 3
15034: PUSH
15035: LD_INT 102
15037: EQUAL
15038: IFFALSE 15048
// sDiff := true ;
15040: LD_ADDR_EXP 65
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// if p3 = 103 then
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 103
15055: EQUAL
15056: IFFALSE 15066
// sFog := true ;
15058: LD_ADDR_EXP 68
15062: PUSH
15063: LD_INT 1
15065: ST_TO_ADDR
// if p3 = 104 then
15066: LD_VAR 0 3
15070: PUSH
15071: LD_INT 104
15073: EQUAL
15074: IFFALSE 15084
// sReset := true ;
15076: LD_ADDR_EXP 69
15080: PUSH
15081: LD_INT 1
15083: ST_TO_ADDR
// if p3 = 105 then
15084: LD_VAR 0 3
15088: PUSH
15089: LD_INT 105
15091: EQUAL
15092: IFFALSE 15102
// sSun := true ;
15094: LD_ADDR_EXP 70
15098: PUSH
15099: LD_INT 1
15101: ST_TO_ADDR
// if p3 = 106 then
15102: LD_VAR 0 3
15106: PUSH
15107: LD_INT 106
15109: EQUAL
15110: IFFALSE 15120
// sTiger := true ;
15112: LD_ADDR_EXP 66
15116: PUSH
15117: LD_INT 1
15119: ST_TO_ADDR
// if p3 = 107 then
15120: LD_VAR 0 3
15124: PUSH
15125: LD_INT 107
15127: EQUAL
15128: IFFALSE 15138
// sBomb := true ;
15130: LD_ADDR_EXP 67
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// if p3 = 108 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 108
15145: EQUAL
15146: IFFALSE 15156
// sWound := true ;
15148: LD_ADDR_EXP 75
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// if p3 = 109 then
15156: LD_VAR 0 3
15160: PUSH
15161: LD_INT 109
15163: EQUAL
15164: IFFALSE 15174
// sBetray := true ;
15166: LD_ADDR_EXP 79
15170: PUSH
15171: LD_INT 1
15173: ST_TO_ADDR
// if p3 = 110 then
15174: LD_VAR 0 3
15178: PUSH
15179: LD_INT 110
15181: EQUAL
15182: IFFALSE 15192
// sContamin := true ;
15184: LD_ADDR_EXP 80
15188: PUSH
15189: LD_INT 1
15191: ST_TO_ADDR
// if p3 = 111 then
15192: LD_VAR 0 3
15196: PUSH
15197: LD_INT 111
15199: EQUAL
15200: IFFALSE 15210
// sOil := true ;
15202: LD_ADDR_EXP 82
15206: PUSH
15207: LD_INT 1
15209: ST_TO_ADDR
// if p3 = 112 then
15210: LD_VAR 0 3
15214: PUSH
15215: LD_INT 112
15217: EQUAL
15218: IFFALSE 15228
// sStu := true ;
15220: LD_ADDR_EXP 86
15224: PUSH
15225: LD_INT 1
15227: ST_TO_ADDR
// if p3 = 113 then
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 113
15235: EQUAL
15236: IFFALSE 15246
// sBazooka := true ;
15238: LD_ADDR_EXP 89
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// if p3 = 114 then
15246: LD_VAR 0 3
15250: PUSH
15251: LD_INT 114
15253: EQUAL
15254: IFFALSE 15264
// sMortar := true ;
15256: LD_ADDR_EXP 90
15260: PUSH
15261: LD_INT 1
15263: ST_TO_ADDR
// if p3 = 115 then
15264: LD_VAR 0 3
15268: PUSH
15269: LD_INT 115
15271: EQUAL
15272: IFFALSE 15282
// sRanger := true ;
15274: LD_ADDR_EXP 100
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// if p3 = 116 then
15282: LD_VAR 0 3
15286: PUSH
15287: LD_INT 116
15289: EQUAL
15290: IFFALSE 15300
// sComputer := true ;
15292: LD_ADDR_EXP 101
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// if p3 = 117 then
15300: LD_VAR 0 3
15304: PUSH
15305: LD_INT 117
15307: EQUAL
15308: IFFALSE 15318
// s30 := true ;
15310: LD_ADDR_EXP 102
15314: PUSH
15315: LD_INT 1
15317: ST_TO_ADDR
// if p3 = 118 then
15318: LD_VAR 0 3
15322: PUSH
15323: LD_INT 118
15325: EQUAL
15326: IFFALSE 15336
// s60 := true ;
15328: LD_ADDR_EXP 103
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// end ; if p2 = hack_mode then
15336: LD_VAR 0 2
15340: PUSH
15341: LD_INT 101
15343: EQUAL
15344: IFFALSE 15472
// begin case p3 of 1 :
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 1
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15359
15357: GO 15366
15359: POP
// hHackUnlimitedResources ; 2 :
15360: CALL 27611 0 0
15364: GO 15472
15366: LD_INT 2
15368: DOUBLE
15369: EQUAL
15370: IFTRUE 15374
15372: GO 15381
15374: POP
// hHackSetLevel10 ; 3 :
15375: CALL 27744 0 0
15379: GO 15472
15381: LD_INT 3
15383: DOUBLE
15384: EQUAL
15385: IFTRUE 15389
15387: GO 15396
15389: POP
// hHackSetLevel10YourUnits ; 4 :
15390: CALL 27829 0 0
15394: GO 15472
15396: LD_INT 4
15398: DOUBLE
15399: EQUAL
15400: IFTRUE 15404
15402: GO 15411
15404: POP
// hHackInvincible ; 5 :
15405: CALL 28277 0 0
15409: GO 15472
15411: LD_INT 5
15413: DOUBLE
15414: EQUAL
15415: IFTRUE 15419
15417: GO 15426
15419: POP
// hHackInvisible ; 6 :
15420: CALL 28388 0 0
15424: GO 15472
15426: LD_INT 6
15428: DOUBLE
15429: EQUAL
15430: IFTRUE 15434
15432: GO 15441
15434: POP
// hHackChangeYourSide ; 7 :
15435: CALL 28445 0 0
15439: GO 15472
15441: LD_INT 7
15443: DOUBLE
15444: EQUAL
15445: IFTRUE 15449
15447: GO 15456
15449: POP
// hHackChangeUnitSide ; 8 :
15450: CALL 28487 0 0
15454: GO 15472
15456: LD_INT 8
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15471
15464: POP
// hHackFog ; end ;
15465: CALL 28588 0 0
15469: GO 15472
15471: POP
// end ; if p2 = game_save_mode then
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 102
15479: EQUAL
15480: IFFALSE 15535
// begin if p3 = 1 then
15482: LD_VAR 0 3
15486: PUSH
15487: LD_INT 1
15489: EQUAL
15490: IFFALSE 15502
// globalGameSaveCounter := p4 ;
15492: LD_ADDR_EXP 46
15496: PUSH
15497: LD_VAR 0 4
15501: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15502: LD_VAR 0 3
15506: PUSH
15507: LD_INT 2
15509: EQUAL
15510: PUSH
15511: LD_EXP 46
15515: AND
15516: IFFALSE 15535
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15518: LD_STRING setGameSaveCounter(
15520: PUSH
15521: LD_EXP 46
15525: STR
15526: PUSH
15527: LD_STRING )
15529: STR
15530: PPUSH
15531: CALL_OW 559
// end ; end ;
15535: LD_VAR 0 7
15539: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15540: LD_INT 0
15542: PPUSH
// streamModeActive := false ;
15543: LD_ADDR_EXP 47
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// normalCounter := 36 ;
15551: LD_ADDR_EXP 48
15555: PUSH
15556: LD_INT 36
15558: ST_TO_ADDR
// hardcoreCounter := 18 ;
15559: LD_ADDR_EXP 49
15563: PUSH
15564: LD_INT 18
15566: ST_TO_ADDR
// sRocket := false ;
15567: LD_ADDR_EXP 52
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// sSpeed := false ;
15575: LD_ADDR_EXP 51
15579: PUSH
15580: LD_INT 0
15582: ST_TO_ADDR
// sEngine := false ;
15583: LD_ADDR_EXP 53
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// sSpec := false ;
15591: LD_ADDR_EXP 50
15595: PUSH
15596: LD_INT 0
15598: ST_TO_ADDR
// sLevel := false ;
15599: LD_ADDR_EXP 54
15603: PUSH
15604: LD_INT 0
15606: ST_TO_ADDR
// sArmoury := false ;
15607: LD_ADDR_EXP 55
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// sRadar := false ;
15615: LD_ADDR_EXP 56
15619: PUSH
15620: LD_INT 0
15622: ST_TO_ADDR
// sBunker := false ;
15623: LD_ADDR_EXP 57
15627: PUSH
15628: LD_INT 0
15630: ST_TO_ADDR
// sHack := false ;
15631: LD_ADDR_EXP 58
15635: PUSH
15636: LD_INT 0
15638: ST_TO_ADDR
// sFire := false ;
15639: LD_ADDR_EXP 59
15643: PUSH
15644: LD_INT 0
15646: ST_TO_ADDR
// sRefresh := false ;
15647: LD_ADDR_EXP 60
15651: PUSH
15652: LD_INT 0
15654: ST_TO_ADDR
// sExp := false ;
15655: LD_ADDR_EXP 61
15659: PUSH
15660: LD_INT 0
15662: ST_TO_ADDR
// sDepot := false ;
15663: LD_ADDR_EXP 62
15667: PUSH
15668: LD_INT 0
15670: ST_TO_ADDR
// sFlag := false ;
15671: LD_ADDR_EXP 63
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// sKamikadze := false ;
15679: LD_ADDR_EXP 71
15683: PUSH
15684: LD_INT 0
15686: ST_TO_ADDR
// sTroll := false ;
15687: LD_ADDR_EXP 72
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// sSlow := false ;
15695: LD_ADDR_EXP 73
15699: PUSH
15700: LD_INT 0
15702: ST_TO_ADDR
// sLack := false ;
15703: LD_ADDR_EXP 74
15707: PUSH
15708: LD_INT 0
15710: ST_TO_ADDR
// sTank := false ;
15711: LD_ADDR_EXP 76
15715: PUSH
15716: LD_INT 0
15718: ST_TO_ADDR
// sRemote := false ;
15719: LD_ADDR_EXP 77
15723: PUSH
15724: LD_INT 0
15726: ST_TO_ADDR
// sPowell := false ;
15727: LD_ADDR_EXP 78
15731: PUSH
15732: LD_INT 0
15734: ST_TO_ADDR
// sTeleport := false ;
15735: LD_ADDR_EXP 81
15739: PUSH
15740: LD_INT 0
15742: ST_TO_ADDR
// sOilTower := false ;
15743: LD_ADDR_EXP 83
15747: PUSH
15748: LD_INT 0
15750: ST_TO_ADDR
// sShovel := false ;
15751: LD_ADDR_EXP 84
15755: PUSH
15756: LD_INT 0
15758: ST_TO_ADDR
// sSheik := false ;
15759: LD_ADDR_EXP 85
15763: PUSH
15764: LD_INT 0
15766: ST_TO_ADDR
// sEarthquake := false ;
15767: LD_ADDR_EXP 87
15771: PUSH
15772: LD_INT 0
15774: ST_TO_ADDR
// sAI := false ;
15775: LD_ADDR_EXP 88
15779: PUSH
15780: LD_INT 0
15782: ST_TO_ADDR
// sCargo := false ;
15783: LD_ADDR_EXP 91
15787: PUSH
15788: LD_INT 0
15790: ST_TO_ADDR
// sDLaser := false ;
15791: LD_ADDR_EXP 92
15795: PUSH
15796: LD_INT 0
15798: ST_TO_ADDR
// sExchange := false ;
15799: LD_ADDR_EXP 93
15803: PUSH
15804: LD_INT 0
15806: ST_TO_ADDR
// sFac := false ;
15807: LD_ADDR_EXP 94
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// sPower := false ;
15815: LD_ADDR_EXP 95
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// sRandom := false ;
15823: LD_ADDR_EXP 96
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// sShield := false ;
15831: LD_ADDR_EXP 97
15835: PUSH
15836: LD_INT 0
15838: ST_TO_ADDR
// sTime := false ;
15839: LD_ADDR_EXP 98
15843: PUSH
15844: LD_INT 0
15846: ST_TO_ADDR
// sTools := false ;
15847: LD_ADDR_EXP 99
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// sSold := false ;
15855: LD_ADDR_EXP 64
15859: PUSH
15860: LD_INT 0
15862: ST_TO_ADDR
// sDiff := false ;
15863: LD_ADDR_EXP 65
15867: PUSH
15868: LD_INT 0
15870: ST_TO_ADDR
// sFog := false ;
15871: LD_ADDR_EXP 68
15875: PUSH
15876: LD_INT 0
15878: ST_TO_ADDR
// sReset := false ;
15879: LD_ADDR_EXP 69
15883: PUSH
15884: LD_INT 0
15886: ST_TO_ADDR
// sSun := false ;
15887: LD_ADDR_EXP 70
15891: PUSH
15892: LD_INT 0
15894: ST_TO_ADDR
// sTiger := false ;
15895: LD_ADDR_EXP 66
15899: PUSH
15900: LD_INT 0
15902: ST_TO_ADDR
// sBomb := false ;
15903: LD_ADDR_EXP 67
15907: PUSH
15908: LD_INT 0
15910: ST_TO_ADDR
// sWound := false ;
15911: LD_ADDR_EXP 75
15915: PUSH
15916: LD_INT 0
15918: ST_TO_ADDR
// sBetray := false ;
15919: LD_ADDR_EXP 79
15923: PUSH
15924: LD_INT 0
15926: ST_TO_ADDR
// sContamin := false ;
15927: LD_ADDR_EXP 80
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// sOil := false ;
15935: LD_ADDR_EXP 82
15939: PUSH
15940: LD_INT 0
15942: ST_TO_ADDR
// sStu := false ;
15943: LD_ADDR_EXP 86
15947: PUSH
15948: LD_INT 0
15950: ST_TO_ADDR
// sBazooka := false ;
15951: LD_ADDR_EXP 89
15955: PUSH
15956: LD_INT 0
15958: ST_TO_ADDR
// sMortar := false ;
15959: LD_ADDR_EXP 90
15963: PUSH
15964: LD_INT 0
15966: ST_TO_ADDR
// sRanger := false ;
15967: LD_ADDR_EXP 100
15971: PUSH
15972: LD_INT 0
15974: ST_TO_ADDR
// sComputer := false ;
15975: LD_ADDR_EXP 101
15979: PUSH
15980: LD_INT 0
15982: ST_TO_ADDR
// s30 := false ;
15983: LD_ADDR_EXP 102
15987: PUSH
15988: LD_INT 0
15990: ST_TO_ADDR
// s60 := false ;
15991: LD_ADDR_EXP 103
15995: PUSH
15996: LD_INT 0
15998: ST_TO_ADDR
// end ;
15999: LD_VAR 0 1
16003: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
// result := [ ] ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: EMPTY
16019: ST_TO_ADDR
// if campaign_id = 1 then
16020: LD_OWVAR 69
16024: PUSH
16025: LD_INT 1
16027: EQUAL
16028: IFFALSE 19194
// begin case mission_number of 1 :
16030: LD_OWVAR 70
16034: PUSH
16035: LD_INT 1
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16119
16043: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_INT 2
16051: PUSH
16052: LD_INT 4
16054: PUSH
16055: LD_INT 11
16057: PUSH
16058: LD_INT 12
16060: PUSH
16061: LD_INT 15
16063: PUSH
16064: LD_INT 16
16066: PUSH
16067: LD_INT 22
16069: PUSH
16070: LD_INT 23
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 101
16089: PUSH
16090: LD_INT 102
16092: PUSH
16093: LD_INT 106
16095: PUSH
16096: LD_INT 116
16098: PUSH
16099: LD_INT 117
16101: PUSH
16102: LD_INT 118
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: ST_TO_ADDR
16117: GO 19192
16119: LD_INT 2
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16211
16127: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: LD_INT 4
16138: PUSH
16139: LD_INT 11
16141: PUSH
16142: LD_INT 12
16144: PUSH
16145: LD_INT 15
16147: PUSH
16148: LD_INT 16
16150: PUSH
16151: LD_INT 22
16153: PUSH
16154: LD_INT 23
16156: PUSH
16157: LD_INT 26
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 101
16173: PUSH
16174: LD_INT 102
16176: PUSH
16177: LD_INT 105
16179: PUSH
16180: LD_INT 106
16182: PUSH
16183: LD_INT 108
16185: PUSH
16186: LD_INT 116
16188: PUSH
16189: LD_INT 117
16191: PUSH
16192: LD_INT 118
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: ST_TO_ADDR
16209: GO 19192
16211: LD_INT 3
16213: DOUBLE
16214: EQUAL
16215: IFTRUE 16219
16217: GO 16307
16219: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16220: LD_ADDR_VAR 0 2
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 4
16230: PUSH
16231: LD_INT 5
16233: PUSH
16234: LD_INT 11
16236: PUSH
16237: LD_INT 12
16239: PUSH
16240: LD_INT 15
16242: PUSH
16243: LD_INT 16
16245: PUSH
16246: LD_INT 22
16248: PUSH
16249: LD_INT 26
16251: PUSH
16252: LD_INT 36
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 101
16269: PUSH
16270: LD_INT 102
16272: PUSH
16273: LD_INT 105
16275: PUSH
16276: LD_INT 106
16278: PUSH
16279: LD_INT 108
16281: PUSH
16282: LD_INT 116
16284: PUSH
16285: LD_INT 117
16287: PUSH
16288: LD_INT 118
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: ST_TO_ADDR
16305: GO 19192
16307: LD_INT 4
16309: DOUBLE
16310: EQUAL
16311: IFTRUE 16315
16313: GO 16411
16315: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 2
16323: PUSH
16324: LD_INT 4
16326: PUSH
16327: LD_INT 5
16329: PUSH
16330: LD_INT 8
16332: PUSH
16333: LD_INT 11
16335: PUSH
16336: LD_INT 12
16338: PUSH
16339: LD_INT 15
16341: PUSH
16342: LD_INT 16
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_INT 23
16350: PUSH
16351: LD_INT 26
16353: PUSH
16354: LD_INT 36
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 101
16373: PUSH
16374: LD_INT 102
16376: PUSH
16377: LD_INT 105
16379: PUSH
16380: LD_INT 106
16382: PUSH
16383: LD_INT 108
16385: PUSH
16386: LD_INT 116
16388: PUSH
16389: LD_INT 117
16391: PUSH
16392: LD_INT 118
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: ST_TO_ADDR
16409: GO 19192
16411: LD_INT 5
16413: DOUBLE
16414: EQUAL
16415: IFTRUE 16419
16417: GO 16531
16419: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16420: LD_ADDR_VAR 0 2
16424: PUSH
16425: LD_INT 2
16427: PUSH
16428: LD_INT 4
16430: PUSH
16431: LD_INT 5
16433: PUSH
16434: LD_INT 6
16436: PUSH
16437: LD_INT 8
16439: PUSH
16440: LD_INT 11
16442: PUSH
16443: LD_INT 12
16445: PUSH
16446: LD_INT 15
16448: PUSH
16449: LD_INT 16
16451: PUSH
16452: LD_INT 22
16454: PUSH
16455: LD_INT 23
16457: PUSH
16458: LD_INT 25
16460: PUSH
16461: LD_INT 26
16463: PUSH
16464: LD_INT 36
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 101
16485: PUSH
16486: LD_INT 102
16488: PUSH
16489: LD_INT 105
16491: PUSH
16492: LD_INT 106
16494: PUSH
16495: LD_INT 108
16497: PUSH
16498: LD_INT 109
16500: PUSH
16501: LD_INT 112
16503: PUSH
16504: LD_INT 116
16506: PUSH
16507: LD_INT 117
16509: PUSH
16510: LD_INT 118
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: ST_TO_ADDR
16529: GO 19192
16531: LD_INT 6
16533: DOUBLE
16534: EQUAL
16535: IFTRUE 16539
16537: GO 16671
16539: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16540: LD_ADDR_VAR 0 2
16544: PUSH
16545: LD_INT 2
16547: PUSH
16548: LD_INT 4
16550: PUSH
16551: LD_INT 5
16553: PUSH
16554: LD_INT 6
16556: PUSH
16557: LD_INT 8
16559: PUSH
16560: LD_INT 11
16562: PUSH
16563: LD_INT 12
16565: PUSH
16566: LD_INT 15
16568: PUSH
16569: LD_INT 16
16571: PUSH
16572: LD_INT 20
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_INT 23
16583: PUSH
16584: LD_INT 25
16586: PUSH
16587: LD_INT 26
16589: PUSH
16590: LD_INT 30
16592: PUSH
16593: LD_INT 31
16595: PUSH
16596: LD_INT 32
16598: PUSH
16599: LD_INT 36
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 101
16625: PUSH
16626: LD_INT 102
16628: PUSH
16629: LD_INT 105
16631: PUSH
16632: LD_INT 106
16634: PUSH
16635: LD_INT 108
16637: PUSH
16638: LD_INT 109
16640: PUSH
16641: LD_INT 112
16643: PUSH
16644: LD_INT 116
16646: PUSH
16647: LD_INT 117
16649: PUSH
16650: LD_INT 118
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: ST_TO_ADDR
16669: GO 19192
16671: LD_INT 7
16673: DOUBLE
16674: EQUAL
16675: IFTRUE 16679
16677: GO 16791
16679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16680: LD_ADDR_VAR 0 2
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: LD_INT 7
16696: PUSH
16697: LD_INT 11
16699: PUSH
16700: LD_INT 12
16702: PUSH
16703: LD_INT 15
16705: PUSH
16706: LD_INT 16
16708: PUSH
16709: LD_INT 20
16711: PUSH
16712: LD_INT 21
16714: PUSH
16715: LD_INT 22
16717: PUSH
16718: LD_INT 23
16720: PUSH
16721: LD_INT 25
16723: PUSH
16724: LD_INT 26
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 101
16745: PUSH
16746: LD_INT 102
16748: PUSH
16749: LD_INT 103
16751: PUSH
16752: LD_INT 105
16754: PUSH
16755: LD_INT 106
16757: PUSH
16758: LD_INT 108
16760: PUSH
16761: LD_INT 112
16763: PUSH
16764: LD_INT 116
16766: PUSH
16767: LD_INT 117
16769: PUSH
16770: LD_INT 118
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: ST_TO_ADDR
16789: GO 19192
16791: LD_INT 8
16793: DOUBLE
16794: EQUAL
16795: IFTRUE 16799
16797: GO 16939
16799: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16800: LD_ADDR_VAR 0 2
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: LD_INT 4
16810: PUSH
16811: LD_INT 5
16813: PUSH
16814: LD_INT 6
16816: PUSH
16817: LD_INT 7
16819: PUSH
16820: LD_INT 8
16822: PUSH
16823: LD_INT 11
16825: PUSH
16826: LD_INT 12
16828: PUSH
16829: LD_INT 15
16831: PUSH
16832: LD_INT 16
16834: PUSH
16835: LD_INT 20
16837: PUSH
16838: LD_INT 21
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_INT 23
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: LD_INT 31
16858: PUSH
16859: LD_INT 32
16861: PUSH
16862: LD_INT 36
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 101
16889: PUSH
16890: LD_INT 102
16892: PUSH
16893: LD_INT 103
16895: PUSH
16896: LD_INT 105
16898: PUSH
16899: LD_INT 106
16901: PUSH
16902: LD_INT 108
16904: PUSH
16905: LD_INT 109
16907: PUSH
16908: LD_INT 112
16910: PUSH
16911: LD_INT 116
16913: PUSH
16914: LD_INT 117
16916: PUSH
16917: LD_INT 118
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: ST_TO_ADDR
16937: GO 19192
16939: LD_INT 9
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 17095
16947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
16948: LD_ADDR_VAR 0 2
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: LD_INT 4
16958: PUSH
16959: LD_INT 5
16961: PUSH
16962: LD_INT 6
16964: PUSH
16965: LD_INT 7
16967: PUSH
16968: LD_INT 8
16970: PUSH
16971: LD_INT 11
16973: PUSH
16974: LD_INT 12
16976: PUSH
16977: LD_INT 15
16979: PUSH
16980: LD_INT 16
16982: PUSH
16983: LD_INT 20
16985: PUSH
16986: LD_INT 21
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_INT 23
16994: PUSH
16995: LD_INT 25
16997: PUSH
16998: LD_INT 26
17000: PUSH
17001: LD_INT 28
17003: PUSH
17004: LD_INT 30
17006: PUSH
17007: LD_INT 31
17009: PUSH
17010: LD_INT 32
17012: PUSH
17013: LD_INT 36
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 101
17041: PUSH
17042: LD_INT 102
17044: PUSH
17045: LD_INT 103
17047: PUSH
17048: LD_INT 105
17050: PUSH
17051: LD_INT 106
17053: PUSH
17054: LD_INT 108
17056: PUSH
17057: LD_INT 109
17059: PUSH
17060: LD_INT 112
17062: PUSH
17063: LD_INT 114
17065: PUSH
17066: LD_INT 116
17068: PUSH
17069: LD_INT 117
17071: PUSH
17072: LD_INT 118
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: ST_TO_ADDR
17093: GO 19192
17095: LD_INT 10
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17299
17103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17104: LD_ADDR_VAR 0 2
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: LD_INT 4
17114: PUSH
17115: LD_INT 5
17117: PUSH
17118: LD_INT 6
17120: PUSH
17121: LD_INT 7
17123: PUSH
17124: LD_INT 8
17126: PUSH
17127: LD_INT 9
17129: PUSH
17130: LD_INT 10
17132: PUSH
17133: LD_INT 11
17135: PUSH
17136: LD_INT 12
17138: PUSH
17139: LD_INT 13
17141: PUSH
17142: LD_INT 14
17144: PUSH
17145: LD_INT 15
17147: PUSH
17148: LD_INT 16
17150: PUSH
17151: LD_INT 17
17153: PUSH
17154: LD_INT 18
17156: PUSH
17157: LD_INT 19
17159: PUSH
17160: LD_INT 20
17162: PUSH
17163: LD_INT 21
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_INT 23
17171: PUSH
17172: LD_INT 24
17174: PUSH
17175: LD_INT 25
17177: PUSH
17178: LD_INT 26
17180: PUSH
17181: LD_INT 28
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 31
17189: PUSH
17190: LD_INT 32
17192: PUSH
17193: LD_INT 36
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 101
17229: PUSH
17230: LD_INT 102
17232: PUSH
17233: LD_INT 103
17235: PUSH
17236: LD_INT 104
17238: PUSH
17239: LD_INT 105
17241: PUSH
17242: LD_INT 106
17244: PUSH
17245: LD_INT 107
17247: PUSH
17248: LD_INT 108
17250: PUSH
17251: LD_INT 109
17253: PUSH
17254: LD_INT 110
17256: PUSH
17257: LD_INT 111
17259: PUSH
17260: LD_INT 112
17262: PUSH
17263: LD_INT 114
17265: PUSH
17266: LD_INT 116
17268: PUSH
17269: LD_INT 117
17271: PUSH
17272: LD_INT 118
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: ST_TO_ADDR
17297: GO 19192
17299: LD_INT 11
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17511
17307: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17308: LD_ADDR_VAR 0 2
17312: PUSH
17313: LD_INT 2
17315: PUSH
17316: LD_INT 3
17318: PUSH
17319: LD_INT 4
17321: PUSH
17322: LD_INT 5
17324: PUSH
17325: LD_INT 6
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 8
17333: PUSH
17334: LD_INT 9
17336: PUSH
17337: LD_INT 10
17339: PUSH
17340: LD_INT 11
17342: PUSH
17343: LD_INT 12
17345: PUSH
17346: LD_INT 13
17348: PUSH
17349: LD_INT 14
17351: PUSH
17352: LD_INT 15
17354: PUSH
17355: LD_INT 16
17357: PUSH
17358: LD_INT 17
17360: PUSH
17361: LD_INT 18
17363: PUSH
17364: LD_INT 19
17366: PUSH
17367: LD_INT 20
17369: PUSH
17370: LD_INT 21
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 23
17378: PUSH
17379: LD_INT 24
17381: PUSH
17382: LD_INT 25
17384: PUSH
17385: LD_INT 26
17387: PUSH
17388: LD_INT 28
17390: PUSH
17391: LD_INT 30
17393: PUSH
17394: LD_INT 31
17396: PUSH
17397: LD_INT 32
17399: PUSH
17400: LD_INT 34
17402: PUSH
17403: LD_INT 36
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 101
17441: PUSH
17442: LD_INT 102
17444: PUSH
17445: LD_INT 103
17447: PUSH
17448: LD_INT 104
17450: PUSH
17451: LD_INT 105
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 107
17459: PUSH
17460: LD_INT 108
17462: PUSH
17463: LD_INT 109
17465: PUSH
17466: LD_INT 110
17468: PUSH
17469: LD_INT 111
17471: PUSH
17472: LD_INT 112
17474: PUSH
17475: LD_INT 114
17477: PUSH
17478: LD_INT 116
17480: PUSH
17481: LD_INT 117
17483: PUSH
17484: LD_INT 118
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: ST_TO_ADDR
17509: GO 19192
17511: LD_INT 12
17513: DOUBLE
17514: EQUAL
17515: IFTRUE 17519
17517: GO 17739
17519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17520: LD_ADDR_VAR 0 2
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 4
17536: PUSH
17537: LD_INT 5
17539: PUSH
17540: LD_INT 6
17542: PUSH
17543: LD_INT 7
17545: PUSH
17546: LD_INT 8
17548: PUSH
17549: LD_INT 9
17551: PUSH
17552: LD_INT 10
17554: PUSH
17555: LD_INT 11
17557: PUSH
17558: LD_INT 12
17560: PUSH
17561: LD_INT 13
17563: PUSH
17564: LD_INT 14
17566: PUSH
17567: LD_INT 15
17569: PUSH
17570: LD_INT 16
17572: PUSH
17573: LD_INT 17
17575: PUSH
17576: LD_INT 18
17578: PUSH
17579: LD_INT 19
17581: PUSH
17582: LD_INT 20
17584: PUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 22
17590: PUSH
17591: LD_INT 23
17593: PUSH
17594: LD_INT 24
17596: PUSH
17597: LD_INT 25
17599: PUSH
17600: LD_INT 26
17602: PUSH
17603: LD_INT 27
17605: PUSH
17606: LD_INT 28
17608: PUSH
17609: LD_INT 30
17611: PUSH
17612: LD_INT 31
17614: PUSH
17615: LD_INT 32
17617: PUSH
17618: LD_INT 33
17620: PUSH
17621: LD_INT 34
17623: PUSH
17624: LD_INT 36
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 101
17665: PUSH
17666: LD_INT 102
17668: PUSH
17669: LD_INT 103
17671: PUSH
17672: LD_INT 104
17674: PUSH
17675: LD_INT 105
17677: PUSH
17678: LD_INT 106
17680: PUSH
17681: LD_INT 107
17683: PUSH
17684: LD_INT 108
17686: PUSH
17687: LD_INT 109
17689: PUSH
17690: LD_INT 110
17692: PUSH
17693: LD_INT 111
17695: PUSH
17696: LD_INT 112
17698: PUSH
17699: LD_INT 113
17701: PUSH
17702: LD_INT 114
17704: PUSH
17705: LD_INT 116
17707: PUSH
17708: LD_INT 117
17710: PUSH
17711: LD_INT 118
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
17737: GO 19192
17739: LD_INT 13
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17955
17747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17748: LD_ADDR_VAR 0 2
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: LD_INT 2
17758: PUSH
17759: LD_INT 3
17761: PUSH
17762: LD_INT 4
17764: PUSH
17765: LD_INT 5
17767: PUSH
17768: LD_INT 8
17770: PUSH
17771: LD_INT 9
17773: PUSH
17774: LD_INT 10
17776: PUSH
17777: LD_INT 11
17779: PUSH
17780: LD_INT 12
17782: PUSH
17783: LD_INT 14
17785: PUSH
17786: LD_INT 15
17788: PUSH
17789: LD_INT 16
17791: PUSH
17792: LD_INT 17
17794: PUSH
17795: LD_INT 18
17797: PUSH
17798: LD_INT 19
17800: PUSH
17801: LD_INT 20
17803: PUSH
17804: LD_INT 21
17806: PUSH
17807: LD_INT 22
17809: PUSH
17810: LD_INT 23
17812: PUSH
17813: LD_INT 24
17815: PUSH
17816: LD_INT 25
17818: PUSH
17819: LD_INT 26
17821: PUSH
17822: LD_INT 27
17824: PUSH
17825: LD_INT 28
17827: PUSH
17828: LD_INT 30
17830: PUSH
17831: LD_INT 31
17833: PUSH
17834: LD_INT 32
17836: PUSH
17837: LD_INT 33
17839: PUSH
17840: LD_INT 34
17842: PUSH
17843: LD_INT 36
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 101
17881: PUSH
17882: LD_INT 102
17884: PUSH
17885: LD_INT 103
17887: PUSH
17888: LD_INT 104
17890: PUSH
17891: LD_INT 105
17893: PUSH
17894: LD_INT 106
17896: PUSH
17897: LD_INT 107
17899: PUSH
17900: LD_INT 108
17902: PUSH
17903: LD_INT 109
17905: PUSH
17906: LD_INT 110
17908: PUSH
17909: LD_INT 111
17911: PUSH
17912: LD_INT 112
17914: PUSH
17915: LD_INT 113
17917: PUSH
17918: LD_INT 114
17920: PUSH
17921: LD_INT 116
17923: PUSH
17924: LD_INT 117
17926: PUSH
17927: LD_INT 118
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: ST_TO_ADDR
17953: GO 19192
17955: LD_INT 14
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 18187
17963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
17964: LD_ADDR_VAR 0 2
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 3
17977: PUSH
17978: LD_INT 4
17980: PUSH
17981: LD_INT 5
17983: PUSH
17984: LD_INT 6
17986: PUSH
17987: LD_INT 7
17989: PUSH
17990: LD_INT 8
17992: PUSH
17993: LD_INT 9
17995: PUSH
17996: LD_INT 10
17998: PUSH
17999: LD_INT 11
18001: PUSH
18002: LD_INT 12
18004: PUSH
18005: LD_INT 13
18007: PUSH
18008: LD_INT 14
18010: PUSH
18011: LD_INT 15
18013: PUSH
18014: LD_INT 16
18016: PUSH
18017: LD_INT 17
18019: PUSH
18020: LD_INT 18
18022: PUSH
18023: LD_INT 19
18025: PUSH
18026: LD_INT 20
18028: PUSH
18029: LD_INT 21
18031: PUSH
18032: LD_INT 22
18034: PUSH
18035: LD_INT 23
18037: PUSH
18038: LD_INT 24
18040: PUSH
18041: LD_INT 25
18043: PUSH
18044: LD_INT 26
18046: PUSH
18047: LD_INT 27
18049: PUSH
18050: LD_INT 28
18052: PUSH
18053: LD_INT 29
18055: PUSH
18056: LD_INT 30
18058: PUSH
18059: LD_INT 31
18061: PUSH
18062: LD_INT 32
18064: PUSH
18065: LD_INT 33
18067: PUSH
18068: LD_INT 34
18070: PUSH
18071: LD_INT 36
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 101
18113: PUSH
18114: LD_INT 102
18116: PUSH
18117: LD_INT 103
18119: PUSH
18120: LD_INT 104
18122: PUSH
18123: LD_INT 105
18125: PUSH
18126: LD_INT 106
18128: PUSH
18129: LD_INT 107
18131: PUSH
18132: LD_INT 108
18134: PUSH
18135: LD_INT 109
18137: PUSH
18138: LD_INT 110
18140: PUSH
18141: LD_INT 111
18143: PUSH
18144: LD_INT 112
18146: PUSH
18147: LD_INT 113
18149: PUSH
18150: LD_INT 114
18152: PUSH
18153: LD_INT 116
18155: PUSH
18156: LD_INT 117
18158: PUSH
18159: LD_INT 118
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: ST_TO_ADDR
18185: GO 19192
18187: LD_INT 15
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18419
18195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 4
18212: PUSH
18213: LD_INT 5
18215: PUSH
18216: LD_INT 6
18218: PUSH
18219: LD_INT 7
18221: PUSH
18222: LD_INT 8
18224: PUSH
18225: LD_INT 9
18227: PUSH
18228: LD_INT 10
18230: PUSH
18231: LD_INT 11
18233: PUSH
18234: LD_INT 12
18236: PUSH
18237: LD_INT 13
18239: PUSH
18240: LD_INT 14
18242: PUSH
18243: LD_INT 15
18245: PUSH
18246: LD_INT 16
18248: PUSH
18249: LD_INT 17
18251: PUSH
18252: LD_INT 18
18254: PUSH
18255: LD_INT 19
18257: PUSH
18258: LD_INT 20
18260: PUSH
18261: LD_INT 21
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 23
18269: PUSH
18270: LD_INT 24
18272: PUSH
18273: LD_INT 25
18275: PUSH
18276: LD_INT 26
18278: PUSH
18279: LD_INT 27
18281: PUSH
18282: LD_INT 28
18284: PUSH
18285: LD_INT 29
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 31
18293: PUSH
18294: LD_INT 32
18296: PUSH
18297: LD_INT 33
18299: PUSH
18300: LD_INT 34
18302: PUSH
18303: LD_INT 36
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 101
18345: PUSH
18346: LD_INT 102
18348: PUSH
18349: LD_INT 103
18351: PUSH
18352: LD_INT 104
18354: PUSH
18355: LD_INT 105
18357: PUSH
18358: LD_INT 106
18360: PUSH
18361: LD_INT 107
18363: PUSH
18364: LD_INT 108
18366: PUSH
18367: LD_INT 109
18369: PUSH
18370: LD_INT 110
18372: PUSH
18373: LD_INT 111
18375: PUSH
18376: LD_INT 112
18378: PUSH
18379: LD_INT 113
18381: PUSH
18382: LD_INT 114
18384: PUSH
18385: LD_INT 116
18387: PUSH
18388: LD_INT 117
18390: PUSH
18391: LD_INT 118
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: ST_TO_ADDR
18417: GO 19192
18419: LD_INT 16
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18563
18427: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18428: LD_ADDR_VAR 0 2
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: LD_INT 4
18438: PUSH
18439: LD_INT 5
18441: PUSH
18442: LD_INT 7
18444: PUSH
18445: LD_INT 11
18447: PUSH
18448: LD_INT 12
18450: PUSH
18451: LD_INT 15
18453: PUSH
18454: LD_INT 16
18456: PUSH
18457: LD_INT 20
18459: PUSH
18460: LD_INT 21
18462: PUSH
18463: LD_INT 22
18465: PUSH
18466: LD_INT 23
18468: PUSH
18469: LD_INT 25
18471: PUSH
18472: LD_INT 26
18474: PUSH
18475: LD_INT 30
18477: PUSH
18478: LD_INT 31
18480: PUSH
18481: LD_INT 32
18483: PUSH
18484: LD_INT 33
18486: PUSH
18487: LD_INT 34
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 101
18513: PUSH
18514: LD_INT 102
18516: PUSH
18517: LD_INT 103
18519: PUSH
18520: LD_INT 106
18522: PUSH
18523: LD_INT 108
18525: PUSH
18526: LD_INT 112
18528: PUSH
18529: LD_INT 113
18531: PUSH
18532: LD_INT 114
18534: PUSH
18535: LD_INT 116
18537: PUSH
18538: LD_INT 117
18540: PUSH
18541: LD_INT 118
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: ST_TO_ADDR
18561: GO 19192
18563: LD_INT 17
18565: DOUBLE
18566: EQUAL
18567: IFTRUE 18571
18569: GO 18795
18571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18572: LD_ADDR_VAR 0 2
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 3
18585: PUSH
18586: LD_INT 4
18588: PUSH
18589: LD_INT 5
18591: PUSH
18592: LD_INT 6
18594: PUSH
18595: LD_INT 7
18597: PUSH
18598: LD_INT 8
18600: PUSH
18601: LD_INT 9
18603: PUSH
18604: LD_INT 10
18606: PUSH
18607: LD_INT 11
18609: PUSH
18610: LD_INT 12
18612: PUSH
18613: LD_INT 13
18615: PUSH
18616: LD_INT 14
18618: PUSH
18619: LD_INT 15
18621: PUSH
18622: LD_INT 16
18624: PUSH
18625: LD_INT 17
18627: PUSH
18628: LD_INT 18
18630: PUSH
18631: LD_INT 19
18633: PUSH
18634: LD_INT 20
18636: PUSH
18637: LD_INT 21
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_INT 23
18645: PUSH
18646: LD_INT 24
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: LD_INT 27
18657: PUSH
18658: LD_INT 28
18660: PUSH
18661: LD_INT 29
18663: PUSH
18664: LD_INT 30
18666: PUSH
18667: LD_INT 31
18669: PUSH
18670: LD_INT 32
18672: PUSH
18673: LD_INT 33
18675: PUSH
18676: LD_INT 34
18678: PUSH
18679: LD_INT 36
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 101
18721: PUSH
18722: LD_INT 102
18724: PUSH
18725: LD_INT 103
18727: PUSH
18728: LD_INT 104
18730: PUSH
18731: LD_INT 105
18733: PUSH
18734: LD_INT 106
18736: PUSH
18737: LD_INT 107
18739: PUSH
18740: LD_INT 108
18742: PUSH
18743: LD_INT 109
18745: PUSH
18746: LD_INT 110
18748: PUSH
18749: LD_INT 111
18751: PUSH
18752: LD_INT 112
18754: PUSH
18755: LD_INT 113
18757: PUSH
18758: LD_INT 114
18760: PUSH
18761: LD_INT 116
18763: PUSH
18764: LD_INT 117
18766: PUSH
18767: LD_INT 118
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: ST_TO_ADDR
18793: GO 19192
18795: LD_INT 18
18797: DOUBLE
18798: EQUAL
18799: IFTRUE 18803
18801: GO 18951
18803: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18804: LD_ADDR_VAR 0 2
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: LD_INT 4
18814: PUSH
18815: LD_INT 5
18817: PUSH
18818: LD_INT 7
18820: PUSH
18821: LD_INT 11
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 15
18829: PUSH
18830: LD_INT 16
18832: PUSH
18833: LD_INT 20
18835: PUSH
18836: LD_INT 21
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_INT 23
18844: PUSH
18845: LD_INT 25
18847: PUSH
18848: LD_INT 26
18850: PUSH
18851: LD_INT 30
18853: PUSH
18854: LD_INT 31
18856: PUSH
18857: LD_INT 32
18859: PUSH
18860: LD_INT 33
18862: PUSH
18863: LD_INT 34
18865: PUSH
18866: LD_INT 35
18868: PUSH
18869: LD_INT 36
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 101
18897: PUSH
18898: LD_INT 102
18900: PUSH
18901: LD_INT 103
18903: PUSH
18904: LD_INT 106
18906: PUSH
18907: LD_INT 108
18909: PUSH
18910: LD_INT 112
18912: PUSH
18913: LD_INT 113
18915: PUSH
18916: LD_INT 114
18918: PUSH
18919: LD_INT 115
18921: PUSH
18922: LD_INT 116
18924: PUSH
18925: LD_INT 117
18927: PUSH
18928: LD_INT 118
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: ST_TO_ADDR
18949: GO 19192
18951: LD_INT 19
18953: DOUBLE
18954: EQUAL
18955: IFTRUE 18959
18957: GO 19191
18959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
18960: LD_ADDR_VAR 0 2
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 2
18970: PUSH
18971: LD_INT 3
18973: PUSH
18974: LD_INT 4
18976: PUSH
18977: LD_INT 5
18979: PUSH
18980: LD_INT 6
18982: PUSH
18983: LD_INT 7
18985: PUSH
18986: LD_INT 8
18988: PUSH
18989: LD_INT 9
18991: PUSH
18992: LD_INT 10
18994: PUSH
18995: LD_INT 11
18997: PUSH
18998: LD_INT 12
19000: PUSH
19001: LD_INT 13
19003: PUSH
19004: LD_INT 14
19006: PUSH
19007: LD_INT 15
19009: PUSH
19010: LD_INT 16
19012: PUSH
19013: LD_INT 17
19015: PUSH
19016: LD_INT 18
19018: PUSH
19019: LD_INT 19
19021: PUSH
19022: LD_INT 20
19024: PUSH
19025: LD_INT 21
19027: PUSH
19028: LD_INT 22
19030: PUSH
19031: LD_INT 23
19033: PUSH
19034: LD_INT 24
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 26
19042: PUSH
19043: LD_INT 27
19045: PUSH
19046: LD_INT 28
19048: PUSH
19049: LD_INT 29
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 31
19057: PUSH
19058: LD_INT 32
19060: PUSH
19061: LD_INT 33
19063: PUSH
19064: LD_INT 34
19066: PUSH
19067: LD_INT 35
19069: PUSH
19070: LD_INT 36
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 101
19113: PUSH
19114: LD_INT 102
19116: PUSH
19117: LD_INT 103
19119: PUSH
19120: LD_INT 104
19122: PUSH
19123: LD_INT 105
19125: PUSH
19126: LD_INT 106
19128: PUSH
19129: LD_INT 107
19131: PUSH
19132: LD_INT 108
19134: PUSH
19135: LD_INT 109
19137: PUSH
19138: LD_INT 110
19140: PUSH
19141: LD_INT 111
19143: PUSH
19144: LD_INT 112
19146: PUSH
19147: LD_INT 113
19149: PUSH
19150: LD_INT 114
19152: PUSH
19153: LD_INT 115
19155: PUSH
19156: LD_INT 116
19158: PUSH
19159: LD_INT 117
19161: PUSH
19162: LD_INT 118
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: ST_TO_ADDR
19189: GO 19192
19191: POP
// end else
19192: GO 19423
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: LD_INT 5
19213: PUSH
19214: LD_INT 6
19216: PUSH
19217: LD_INT 7
19219: PUSH
19220: LD_INT 8
19222: PUSH
19223: LD_INT 9
19225: PUSH
19226: LD_INT 10
19228: PUSH
19229: LD_INT 11
19231: PUSH
19232: LD_INT 12
19234: PUSH
19235: LD_INT 13
19237: PUSH
19238: LD_INT 14
19240: PUSH
19241: LD_INT 15
19243: PUSH
19244: LD_INT 16
19246: PUSH
19247: LD_INT 17
19249: PUSH
19250: LD_INT 18
19252: PUSH
19253: LD_INT 19
19255: PUSH
19256: LD_INT 20
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 23
19267: PUSH
19268: LD_INT 24
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 26
19276: PUSH
19277: LD_INT 27
19279: PUSH
19280: LD_INT 28
19282: PUSH
19283: LD_INT 29
19285: PUSH
19286: LD_INT 30
19288: PUSH
19289: LD_INT 31
19291: PUSH
19292: LD_INT 32
19294: PUSH
19295: LD_INT 33
19297: PUSH
19298: LD_INT 34
19300: PUSH
19301: LD_INT 35
19303: PUSH
19304: LD_INT 36
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 101
19347: PUSH
19348: LD_INT 102
19350: PUSH
19351: LD_INT 103
19353: PUSH
19354: LD_INT 104
19356: PUSH
19357: LD_INT 105
19359: PUSH
19360: LD_INT 106
19362: PUSH
19363: LD_INT 107
19365: PUSH
19366: LD_INT 108
19368: PUSH
19369: LD_INT 109
19371: PUSH
19372: LD_INT 110
19374: PUSH
19375: LD_INT 111
19377: PUSH
19378: LD_INT 112
19380: PUSH
19381: LD_INT 113
19383: PUSH
19384: LD_INT 114
19386: PUSH
19387: LD_INT 115
19389: PUSH
19390: LD_INT 116
19392: PUSH
19393: LD_INT 117
19395: PUSH
19396: LD_INT 118
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: ST_TO_ADDR
// if result then
19423: LD_VAR 0 2
19427: IFFALSE 20213
// begin normal :=  ;
19429: LD_ADDR_VAR 0 5
19433: PUSH
19434: LD_STRING 
19436: ST_TO_ADDR
// hardcore :=  ;
19437: LD_ADDR_VAR 0 6
19441: PUSH
19442: LD_STRING 
19444: ST_TO_ADDR
// active :=  ;
19445: LD_ADDR_VAR 0 7
19449: PUSH
19450: LD_STRING 
19452: ST_TO_ADDR
// for i = 1 to normalCounter do
19453: LD_ADDR_VAR 0 8
19457: PUSH
19458: DOUBLE
19459: LD_INT 1
19461: DEC
19462: ST_TO_ADDR
19463: LD_EXP 48
19467: PUSH
19468: FOR_TO
19469: IFFALSE 19570
// begin tmp := 0 ;
19471: LD_ADDR_VAR 0 3
19475: PUSH
19476: LD_STRING 0
19478: ST_TO_ADDR
// if result [ 1 ] then
19479: LD_VAR 0 2
19483: PUSH
19484: LD_INT 1
19486: ARRAY
19487: IFFALSE 19552
// if result [ 1 ] [ 1 ] = i then
19489: LD_VAR 0 2
19493: PUSH
19494: LD_INT 1
19496: ARRAY
19497: PUSH
19498: LD_INT 1
19500: ARRAY
19501: PUSH
19502: LD_VAR 0 8
19506: EQUAL
19507: IFFALSE 19552
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_VAR 0 2
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: LD_VAR 0 2
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: LD_INT 1
19533: PPUSH
19534: CALL_OW 3
19538: PPUSH
19539: CALL_OW 1
19543: ST_TO_ADDR
// tmp := 1 ;
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_STRING 1
19551: ST_TO_ADDR
// end ; normal := normal & tmp ;
19552: LD_ADDR_VAR 0 5
19556: PUSH
19557: LD_VAR 0 5
19561: PUSH
19562: LD_VAR 0 3
19566: STR
19567: ST_TO_ADDR
// end ;
19568: GO 19468
19570: POP
19571: POP
// for i = 1 to hardcoreCounter do
19572: LD_ADDR_VAR 0 8
19576: PUSH
19577: DOUBLE
19578: LD_INT 1
19580: DEC
19581: ST_TO_ADDR
19582: LD_EXP 49
19586: PUSH
19587: FOR_TO
19588: IFFALSE 19693
// begin tmp := 0 ;
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_STRING 0
19597: ST_TO_ADDR
// if result [ 2 ] then
19598: LD_VAR 0 2
19602: PUSH
19603: LD_INT 2
19605: ARRAY
19606: IFFALSE 19675
// if result [ 2 ] [ 1 ] = 100 + i then
19608: LD_VAR 0 2
19612: PUSH
19613: LD_INT 2
19615: ARRAY
19616: PUSH
19617: LD_INT 1
19619: ARRAY
19620: PUSH
19621: LD_INT 100
19623: PUSH
19624: LD_VAR 0 8
19628: PLUS
19629: EQUAL
19630: IFFALSE 19675
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19632: LD_ADDR_VAR 0 2
19636: PUSH
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_INT 2
19644: PPUSH
19645: LD_VAR 0 2
19649: PUSH
19650: LD_INT 2
19652: ARRAY
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 3
19661: PPUSH
19662: CALL_OW 1
19666: ST_TO_ADDR
// tmp := 1 ;
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_STRING 1
19674: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19675: LD_ADDR_VAR 0 6
19679: PUSH
19680: LD_VAR 0 6
19684: PUSH
19685: LD_VAR 0 3
19689: STR
19690: ST_TO_ADDR
// end ;
19691: GO 19587
19693: POP
19694: POP
// if isGameLoad then
19695: LD_VAR 0 1
19699: IFFALSE 20174
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19701: LD_ADDR_VAR 0 4
19705: PUSH
19706: LD_EXP 52
19710: PUSH
19711: LD_EXP 51
19715: PUSH
19716: LD_EXP 53
19720: PUSH
19721: LD_EXP 50
19725: PUSH
19726: LD_EXP 54
19730: PUSH
19731: LD_EXP 55
19735: PUSH
19736: LD_EXP 56
19740: PUSH
19741: LD_EXP 57
19745: PUSH
19746: LD_EXP 58
19750: PUSH
19751: LD_EXP 59
19755: PUSH
19756: LD_EXP 60
19760: PUSH
19761: LD_EXP 61
19765: PUSH
19766: LD_EXP 62
19770: PUSH
19771: LD_EXP 63
19775: PUSH
19776: LD_EXP 71
19780: PUSH
19781: LD_EXP 72
19785: PUSH
19786: LD_EXP 73
19790: PUSH
19791: LD_EXP 74
19795: PUSH
19796: LD_EXP 76
19800: PUSH
19801: LD_EXP 77
19805: PUSH
19806: LD_EXP 78
19810: PUSH
19811: LD_EXP 81
19815: PUSH
19816: LD_EXP 83
19820: PUSH
19821: LD_EXP 84
19825: PUSH
19826: LD_EXP 85
19830: PUSH
19831: LD_EXP 87
19835: PUSH
19836: LD_EXP 88
19840: PUSH
19841: LD_EXP 91
19845: PUSH
19846: LD_EXP 92
19850: PUSH
19851: LD_EXP 93
19855: PUSH
19856: LD_EXP 94
19860: PUSH
19861: LD_EXP 95
19865: PUSH
19866: LD_EXP 96
19870: PUSH
19871: LD_EXP 97
19875: PUSH
19876: LD_EXP 98
19880: PUSH
19881: LD_EXP 99
19885: PUSH
19886: LD_EXP 64
19890: PUSH
19891: LD_EXP 65
19895: PUSH
19896: LD_EXP 68
19900: PUSH
19901: LD_EXP 69
19905: PUSH
19906: LD_EXP 70
19910: PUSH
19911: LD_EXP 66
19915: PUSH
19916: LD_EXP 67
19920: PUSH
19921: LD_EXP 75
19925: PUSH
19926: LD_EXP 79
19930: PUSH
19931: LD_EXP 80
19935: PUSH
19936: LD_EXP 82
19940: PUSH
19941: LD_EXP 86
19945: PUSH
19946: LD_EXP 89
19950: PUSH
19951: LD_EXP 90
19955: PUSH
19956: LD_EXP 100
19960: PUSH
19961: LD_EXP 101
19965: PUSH
19966: LD_EXP 102
19970: PUSH
19971: LD_EXP 103
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
// tmp :=  ;
20032: LD_ADDR_VAR 0 3
20036: PUSH
20037: LD_STRING 
20039: ST_TO_ADDR
// for i = 1 to normalCounter do
20040: LD_ADDR_VAR 0 8
20044: PUSH
20045: DOUBLE
20046: LD_INT 1
20048: DEC
20049: ST_TO_ADDR
20050: LD_EXP 48
20054: PUSH
20055: FOR_TO
20056: IFFALSE 20092
// begin if flags [ i ] then
20058: LD_VAR 0 4
20062: PUSH
20063: LD_VAR 0 8
20067: ARRAY
20068: IFFALSE 20090
// tmp := tmp & i & ; ;
20070: LD_ADDR_VAR 0 3
20074: PUSH
20075: LD_VAR 0 3
20079: PUSH
20080: LD_VAR 0 8
20084: STR
20085: PUSH
20086: LD_STRING ;
20088: STR
20089: ST_TO_ADDR
// end ;
20090: GO 20055
20092: POP
20093: POP
// for i = 1 to hardcoreCounter do
20094: LD_ADDR_VAR 0 8
20098: PUSH
20099: DOUBLE
20100: LD_INT 1
20102: DEC
20103: ST_TO_ADDR
20104: LD_EXP 49
20108: PUSH
20109: FOR_TO
20110: IFFALSE 20156
// begin if flags [ normalCounter + i ] then
20112: LD_VAR 0 4
20116: PUSH
20117: LD_EXP 48
20121: PUSH
20122: LD_VAR 0 8
20126: PLUS
20127: ARRAY
20128: IFFALSE 20154
// tmp := tmp & ( 100 + i ) & ; ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 100
20142: PUSH
20143: LD_VAR 0 8
20147: PLUS
20148: STR
20149: PUSH
20150: LD_STRING ;
20152: STR
20153: ST_TO_ADDR
// end ;
20154: GO 20109
20156: POP
20157: POP
// if tmp then
20158: LD_VAR 0 3
20162: IFFALSE 20174
// active := tmp ;
20164: LD_ADDR_VAR 0 7
20168: PUSH
20169: LD_VAR 0 3
20173: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20174: LD_STRING getStreamItemsFromMission("
20176: PUSH
20177: LD_VAR 0 5
20181: STR
20182: PUSH
20183: LD_STRING ","
20185: STR
20186: PUSH
20187: LD_VAR 0 6
20191: STR
20192: PUSH
20193: LD_STRING ","
20195: STR
20196: PUSH
20197: LD_VAR 0 7
20201: STR
20202: PUSH
20203: LD_STRING ")
20205: STR
20206: PPUSH
20207: CALL_OW 559
// end else
20211: GO 20220
// ToLua ( getStreamItemsFromMission("","","") ) ;
20213: LD_STRING getStreamItemsFromMission("","","")
20215: PPUSH
20216: CALL_OW 559
// end ;
20220: LD_VAR 0 2
20224: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20225: LD_EXP 47
20229: PUSH
20230: LD_EXP 52
20234: AND
20235: IFFALSE 20359
20237: GO 20239
20239: DISABLE
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
// begin enable ;
20244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20245: LD_ADDR_VAR 0 2
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_OWVAR 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: LD_INT 34
20267: PUSH
20268: LD_INT 7
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 34
20277: PUSH
20278: LD_INT 45
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 34
20287: PUSH
20288: LD_INT 28
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 34
20297: PUSH
20298: LD_INT 47
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: ST_TO_ADDR
// if not tmp then
20321: LD_VAR 0 2
20325: NOT
20326: IFFALSE 20330
// exit ;
20328: GO 20359
// for i in tmp do
20330: LD_ADDR_VAR 0 1
20334: PUSH
20335: LD_VAR 0 2
20339: PUSH
20340: FOR_IN
20341: IFFALSE 20357
// begin SetLives ( i , 0 ) ;
20343: LD_VAR 0 1
20347: PPUSH
20348: LD_INT 0
20350: PPUSH
20351: CALL_OW 234
// end ;
20355: GO 20340
20357: POP
20358: POP
// end ;
20359: PPOPN 2
20361: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20362: LD_EXP 47
20366: PUSH
20367: LD_EXP 53
20371: AND
20372: IFFALSE 20456
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
20380: PPUSH
// begin enable ;
20381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20382: LD_ADDR_VAR 0 2
20386: PUSH
20387: LD_INT 22
20389: PUSH
20390: LD_OWVAR 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 32
20401: PUSH
20402: LD_INT 3
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PPUSH
20413: CALL_OW 69
20417: ST_TO_ADDR
// if not tmp then
20418: LD_VAR 0 2
20422: NOT
20423: IFFALSE 20427
// exit ;
20425: GO 20456
// for i in tmp do
20427: LD_ADDR_VAR 0 1
20431: PUSH
20432: LD_VAR 0 2
20436: PUSH
20437: FOR_IN
20438: IFFALSE 20454
// begin SetLives ( i , 0 ) ;
20440: LD_VAR 0 1
20444: PPUSH
20445: LD_INT 0
20447: PPUSH
20448: CALL_OW 234
// end ;
20452: GO 20437
20454: POP
20455: POP
// end ;
20456: PPOPN 2
20458: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20459: LD_EXP 47
20463: PUSH
20464: LD_EXP 50
20468: AND
20469: IFFALSE 20562
20471: GO 20473
20473: DISABLE
20474: LD_INT 0
20476: PPUSH
// begin enable ;
20477: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: LD_INT 22
20485: PUSH
20486: LD_OWVAR 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 25
20500: PUSH
20501: LD_INT 5
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 25
20510: PUSH
20511: LD_INT 9
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 25
20520: PUSH
20521: LD_INT 8
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PPUSH
20538: CALL_OW 69
20542: PUSH
20543: FOR_IN
20544: IFFALSE 20560
// begin SetClass ( i , 1 ) ;
20546: LD_VAR 0 1
20550: PPUSH
20551: LD_INT 1
20553: PPUSH
20554: CALL_OW 336
// end ;
20558: GO 20543
20560: POP
20561: POP
// end ;
20562: PPOPN 1
20564: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20565: LD_EXP 47
20569: PUSH
20570: LD_EXP 51
20574: AND
20575: PUSH
20576: LD_OWVAR 65
20580: PUSH
20581: LD_INT 7
20583: LESS
20584: AND
20585: IFFALSE 20599
20587: GO 20589
20589: DISABLE
// begin enable ;
20590: ENABLE
// game_speed := 7 ;
20591: LD_ADDR_OWVAR 65
20595: PUSH
20596: LD_INT 7
20598: ST_TO_ADDR
// end ;
20599: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20600: LD_EXP 47
20604: PUSH
20605: LD_EXP 54
20609: AND
20610: IFFALSE 20812
20612: GO 20614
20614: DISABLE
20615: LD_INT 0
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 81
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 69
20655: ST_TO_ADDR
// if not tmp then
20656: LD_VAR 0 3
20660: NOT
20661: IFFALSE 20665
// exit ;
20663: GO 20812
// if tmp > 5 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 5
20672: GREATER
20673: IFFALSE 20685
// k := 5 else
20675: LD_ADDR_VAR 0 2
20679: PUSH
20680: LD_INT 5
20682: ST_TO_ADDR
20683: GO 20695
// k := tmp ;
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_VAR 0 3
20694: ST_TO_ADDR
// for i := 1 to k do
20695: LD_ADDR_VAR 0 1
20699: PUSH
20700: DOUBLE
20701: LD_INT 1
20703: DEC
20704: ST_TO_ADDR
20705: LD_VAR 0 2
20709: PUSH
20710: FOR_TO
20711: IFFALSE 20810
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_VAR 0 1
20722: ARRAY
20723: PPUSH
20724: LD_VAR 0 1
20728: PUSH
20729: LD_INT 4
20731: MOD
20732: PUSH
20733: LD_INT 1
20735: PLUS
20736: PPUSH
20737: CALL_OW 259
20741: PUSH
20742: LD_INT 10
20744: LESS
20745: IFFALSE 20808
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20747: LD_VAR 0 3
20751: PUSH
20752: LD_VAR 0 1
20756: ARRAY
20757: PPUSH
20758: LD_VAR 0 1
20762: PUSH
20763: LD_INT 4
20765: MOD
20766: PUSH
20767: LD_INT 1
20769: PLUS
20770: PPUSH
20771: LD_VAR 0 3
20775: PUSH
20776: LD_VAR 0 1
20780: ARRAY
20781: PPUSH
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 4
20789: MOD
20790: PUSH
20791: LD_INT 1
20793: PLUS
20794: PPUSH
20795: CALL_OW 259
20799: PUSH
20800: LD_INT 1
20802: PLUS
20803: PPUSH
20804: CALL_OW 237
20808: GO 20710
20810: POP
20811: POP
// end ;
20812: PPOPN 3
20814: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20815: LD_EXP 47
20819: PUSH
20820: LD_EXP 55
20824: AND
20825: IFFALSE 20845
20827: GO 20829
20829: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20830: LD_INT 4
20832: PPUSH
20833: LD_OWVAR 2
20837: PPUSH
20838: LD_INT 0
20840: PPUSH
20841: CALL_OW 324
20845: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20846: LD_EXP 47
20850: PUSH
20851: LD_EXP 84
20855: AND
20856: IFFALSE 20876
20858: GO 20860
20860: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20861: LD_INT 19
20863: PPUSH
20864: LD_OWVAR 2
20868: PPUSH
20869: LD_INT 0
20871: PPUSH
20872: CALL_OW 324
20876: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20877: LD_EXP 47
20881: PUSH
20882: LD_EXP 56
20886: AND
20887: IFFALSE 20989
20889: GO 20891
20891: DISABLE
20892: LD_INT 0
20894: PPUSH
20895: PPUSH
// begin enable ;
20896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_OWVAR 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 34
20919: PUSH
20920: LD_INT 11
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 34
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 2
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 20989
// for i in tmp do
20960: LD_ADDR_VAR 0 1
20964: PUSH
20965: LD_VAR 0 2
20969: PUSH
20970: FOR_IN
20971: IFFALSE 20987
// begin SetLives ( i , 0 ) ;
20973: LD_VAR 0 1
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 234
// end ;
20985: GO 20970
20987: POP
20988: POP
// end ;
20989: PPOPN 2
20991: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20992: LD_EXP 47
20996: PUSH
20997: LD_EXP 57
21001: AND
21002: IFFALSE 21022
21004: GO 21006
21006: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21007: LD_INT 32
21009: PPUSH
21010: LD_OWVAR 2
21014: PPUSH
21015: LD_INT 0
21017: PPUSH
21018: CALL_OW 324
21022: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21023: LD_EXP 47
21027: PUSH
21028: LD_EXP 58
21032: AND
21033: IFFALSE 21214
21035: GO 21037
21037: DISABLE
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
21042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21043: LD_ADDR_VAR 0 2
21047: PUSH
21048: LD_INT 22
21050: PUSH
21051: LD_OWVAR 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 33
21062: PUSH
21063: LD_INT 3
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PPUSH
21074: CALL_OW 69
21078: ST_TO_ADDR
// if not tmp then
21079: LD_VAR 0 2
21083: NOT
21084: IFFALSE 21088
// exit ;
21086: GO 21214
// side := 0 ;
21088: LD_ADDR_VAR 0 3
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// for i := 1 to 8 do
21096: LD_ADDR_VAR 0 1
21100: PUSH
21101: DOUBLE
21102: LD_INT 1
21104: DEC
21105: ST_TO_ADDR
21106: LD_INT 8
21108: PUSH
21109: FOR_TO
21110: IFFALSE 21158
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21112: LD_OWVAR 2
21116: PUSH
21117: LD_VAR 0 1
21121: NONEQUAL
21122: PUSH
21123: LD_OWVAR 2
21127: PPUSH
21128: LD_VAR 0 1
21132: PPUSH
21133: CALL_OW 81
21137: PUSH
21138: LD_INT 2
21140: EQUAL
21141: AND
21142: IFFALSE 21156
// begin side := i ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: ST_TO_ADDR
// break ;
21154: GO 21158
// end ;
21156: GO 21109
21158: POP
21159: POP
// if not side then
21160: LD_VAR 0 3
21164: NOT
21165: IFFALSE 21169
// exit ;
21167: GO 21214
// for i := 1 to tmp do
21169: LD_ADDR_VAR 0 1
21173: PUSH
21174: DOUBLE
21175: LD_INT 1
21177: DEC
21178: ST_TO_ADDR
21179: LD_VAR 0 2
21183: PUSH
21184: FOR_TO
21185: IFFALSE 21212
// if Prob ( 60 ) then
21187: LD_INT 60
21189: PPUSH
21190: CALL_OW 13
21194: IFFALSE 21210
// SetSide ( i , side ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: CALL_OW 235
21210: GO 21184
21212: POP
21213: POP
// end ;
21214: PPOPN 3
21216: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21217: LD_EXP 47
21221: PUSH
21222: LD_EXP 60
21226: AND
21227: IFFALSE 21346
21229: GO 21231
21231: DISABLE
21232: LD_INT 0
21234: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_OWVAR 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 21
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 23
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 69
21288: PUSH
21289: FOR_IN
21290: IFFALSE 21344
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 257
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 4
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: IN
21320: IFFALSE 21342
// SetClass ( un , rand ( 1 , 4 ) ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: LD_INT 4
21332: PPUSH
21333: CALL_OW 12
21337: PPUSH
21338: CALL_OW 336
21342: GO 21289
21344: POP
21345: POP
// end ;
21346: PPOPN 1
21348: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21349: LD_EXP 47
21353: PUSH
21354: LD_EXP 59
21358: AND
21359: IFFALSE 21438
21361: GO 21363
21363: DISABLE
21364: LD_INT 0
21366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21367: LD_ADDR_VAR 0 1
21371: PUSH
21372: LD_INT 22
21374: PUSH
21375: LD_OWVAR 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 21
21386: PUSH
21387: LD_INT 3
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL_OW 69
21402: ST_TO_ADDR
// if not tmp then
21403: LD_VAR 0 1
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21412: LD_VAR 0 1
21416: PUSH
21417: LD_INT 1
21419: PPUSH
21420: LD_VAR 0 1
21424: PPUSH
21425: CALL_OW 12
21429: ARRAY
21430: PPUSH
21431: LD_INT 100
21433: PPUSH
21434: CALL_OW 234
// end ;
21438: PPOPN 1
21440: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21441: LD_EXP 47
21445: PUSH
21446: LD_EXP 61
21450: AND
21451: IFFALSE 21549
21453: GO 21455
21455: DISABLE
21456: LD_INT 0
21458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21459: LD_ADDR_VAR 0 1
21463: PUSH
21464: LD_INT 22
21466: PUSH
21467: LD_OWVAR 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 21
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PPUSH
21490: CALL_OW 69
21494: ST_TO_ADDR
// if not tmp then
21495: LD_VAR 0 1
21499: NOT
21500: IFFALSE 21504
// exit ;
21502: GO 21549
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21504: LD_VAR 0 1
21508: PUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 12
21521: ARRAY
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: LD_INT 4
21528: PPUSH
21529: CALL_OW 12
21533: PPUSH
21534: LD_INT 3000
21536: PPUSH
21537: LD_INT 9000
21539: PPUSH
21540: CALL_OW 12
21544: PPUSH
21545: CALL_OW 492
// end ;
21549: PPOPN 1
21551: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21552: LD_EXP 47
21556: PUSH
21557: LD_EXP 62
21561: AND
21562: IFFALSE 21582
21564: GO 21566
21566: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21567: LD_INT 1
21569: PPUSH
21570: LD_OWVAR 2
21574: PPUSH
21575: LD_INT 0
21577: PPUSH
21578: CALL_OW 324
21582: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21583: LD_EXP 47
21587: PUSH
21588: LD_EXP 63
21592: AND
21593: IFFALSE 21676
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
21601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 3
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PPUSH
21633: CALL_OW 69
21637: ST_TO_ADDR
// if not tmp then
21638: LD_VAR 0 2
21642: NOT
21643: IFFALSE 21647
// exit ;
21645: GO 21676
// for i in tmp do
21647: LD_ADDR_VAR 0 1
21651: PUSH
21652: LD_VAR 0 2
21656: PUSH
21657: FOR_IN
21658: IFFALSE 21674
// SetBLevel ( i , 10 ) ;
21660: LD_VAR 0 1
21664: PPUSH
21665: LD_INT 10
21667: PPUSH
21668: CALL_OW 241
21672: GO 21657
21674: POP
21675: POP
// end ;
21676: PPOPN 2
21678: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21679: LD_EXP 47
21683: PUSH
21684: LD_EXP 64
21688: AND
21689: IFFALSE 21800
21691: GO 21693
21693: DISABLE
21694: LD_INT 0
21696: PPUSH
21697: PPUSH
21698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21699: LD_ADDR_VAR 0 3
21703: PUSH
21704: LD_INT 22
21706: PUSH
21707: LD_OWVAR 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 25
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PPUSH
21730: CALL_OW 69
21734: ST_TO_ADDR
// if not tmp then
21735: LD_VAR 0 3
21739: NOT
21740: IFFALSE 21744
// exit ;
21742: GO 21800
// un := tmp [ rand ( 1 , tmp ) ] ;
21744: LD_ADDR_VAR 0 2
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: LD_INT 1
21756: PPUSH
21757: LD_VAR 0 3
21761: PPUSH
21762: CALL_OW 12
21766: ARRAY
21767: ST_TO_ADDR
// if Crawls ( un ) then
21768: LD_VAR 0 2
21772: PPUSH
21773: CALL_OW 318
21777: IFFALSE 21788
// ComWalk ( un ) ;
21779: LD_VAR 0 2
21783: PPUSH
21784: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21788: LD_VAR 0 2
21792: PPUSH
21793: LD_INT 5
21795: PPUSH
21796: CALL_OW 336
// end ;
21800: PPOPN 3
21802: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21803: LD_EXP 47
21807: PUSH
21808: LD_EXP 65
21812: AND
21813: PUSH
21814: LD_OWVAR 67
21818: PUSH
21819: LD_INT 4
21821: LESS
21822: AND
21823: IFFALSE 21842
21825: GO 21827
21827: DISABLE
// begin Difficulty := Difficulty + 1 ;
21828: LD_ADDR_OWVAR 67
21832: PUSH
21833: LD_OWVAR 67
21837: PUSH
21838: LD_INT 1
21840: PLUS
21841: ST_TO_ADDR
// end ;
21842: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21843: LD_EXP 47
21847: PUSH
21848: LD_EXP 66
21852: AND
21853: IFFALSE 21956
21855: GO 21857
21857: DISABLE
21858: LD_INT 0
21860: PPUSH
// begin for i := 1 to 5 do
21861: LD_ADDR_VAR 0 1
21865: PUSH
21866: DOUBLE
21867: LD_INT 1
21869: DEC
21870: ST_TO_ADDR
21871: LD_INT 5
21873: PUSH
21874: FOR_TO
21875: IFFALSE 21954
// begin uc_nation := nation_nature ;
21877: LD_ADDR_OWVAR 21
21881: PUSH
21882: LD_INT 0
21884: ST_TO_ADDR
// uc_side := 0 ;
21885: LD_ADDR_OWVAR 20
21889: PUSH
21890: LD_INT 0
21892: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21893: LD_ADDR_OWVAR 29
21897: PUSH
21898: LD_INT 12
21900: PUSH
21901: LD_INT 12
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: ST_TO_ADDR
// hc_agressivity := 20 ;
21908: LD_ADDR_OWVAR 35
21912: PUSH
21913: LD_INT 20
21915: ST_TO_ADDR
// hc_class := class_tiger ;
21916: LD_ADDR_OWVAR 28
21920: PUSH
21921: LD_INT 14
21923: ST_TO_ADDR
// hc_gallery :=  ;
21924: LD_ADDR_OWVAR 33
21928: PUSH
21929: LD_STRING 
21931: ST_TO_ADDR
// hc_name :=  ;
21932: LD_ADDR_OWVAR 26
21936: PUSH
21937: LD_STRING 
21939: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21940: CALL_OW 44
21944: PPUSH
21945: LD_INT 0
21947: PPUSH
21948: CALL_OW 51
// end ;
21952: GO 21874
21954: POP
21955: POP
// end ;
21956: PPOPN 1
21958: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21959: LD_EXP 47
21963: PUSH
21964: LD_EXP 67
21968: AND
21969: IFFALSE 21978
21971: GO 21973
21973: DISABLE
// StreamSibBomb ;
21974: CALL 21979 0 0
21978: END
// export function StreamSibBomb ; var i , x , y ; begin
21979: LD_INT 0
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
// result := false ;
21985: LD_ADDR_VAR 0 1
21989: PUSH
21990: LD_INT 0
21992: ST_TO_ADDR
// for i := 1 to 16 do
21993: LD_ADDR_VAR 0 2
21997: PUSH
21998: DOUBLE
21999: LD_INT 1
22001: DEC
22002: ST_TO_ADDR
22003: LD_INT 16
22005: PUSH
22006: FOR_TO
22007: IFFALSE 22206
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22009: LD_ADDR_VAR 0 3
22013: PUSH
22014: LD_INT 10
22016: PUSH
22017: LD_INT 20
22019: PUSH
22020: LD_INT 30
22022: PUSH
22023: LD_INT 40
22025: PUSH
22026: LD_INT 50
22028: PUSH
22029: LD_INT 60
22031: PUSH
22032: LD_INT 70
22034: PUSH
22035: LD_INT 80
22037: PUSH
22038: LD_INT 90
22040: PUSH
22041: LD_INT 100
22043: PUSH
22044: LD_INT 110
22046: PUSH
22047: LD_INT 120
22049: PUSH
22050: LD_INT 130
22052: PUSH
22053: LD_INT 140
22055: PUSH
22056: LD_INT 150
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PPUSH
22079: LD_INT 15
22081: PPUSH
22082: CALL_OW 12
22086: ARRAY
22087: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22088: LD_ADDR_VAR 0 4
22092: PUSH
22093: LD_INT 10
22095: PUSH
22096: LD_INT 20
22098: PUSH
22099: LD_INT 30
22101: PUSH
22102: LD_INT 40
22104: PUSH
22105: LD_INT 50
22107: PUSH
22108: LD_INT 60
22110: PUSH
22111: LD_INT 70
22113: PUSH
22114: LD_INT 80
22116: PUSH
22117: LD_INT 90
22119: PUSH
22120: LD_INT 100
22122: PUSH
22123: LD_INT 110
22125: PUSH
22126: LD_INT 120
22128: PUSH
22129: LD_INT 130
22131: PUSH
22132: LD_INT 140
22134: PUSH
22135: LD_INT 150
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: PPUSH
22158: LD_INT 15
22160: PPUSH
22161: CALL_OW 12
22165: ARRAY
22166: ST_TO_ADDR
// if ValidHex ( x , y ) then
22167: LD_VAR 0 3
22171: PPUSH
22172: LD_VAR 0 4
22176: PPUSH
22177: CALL_OW 488
22181: IFFALSE 22204
// begin result := [ x , y ] ;
22183: LD_ADDR_VAR 0 1
22187: PUSH
22188: LD_VAR 0 3
22192: PUSH
22193: LD_VAR 0 4
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: ST_TO_ADDR
// break ;
22202: GO 22206
// end ; end ;
22204: GO 22006
22206: POP
22207: POP
// if result then
22208: LD_VAR 0 1
22212: IFFALSE 22272
// begin ToLua ( playSibBomb() ) ;
22214: LD_STRING playSibBomb()
22216: PPUSH
22217: CALL_OW 559
// wait ( 0 0$14 ) ;
22221: LD_INT 490
22223: PPUSH
22224: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22228: LD_VAR 0 1
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 1
22241: PUSH
22242: LD_INT 2
22244: ARRAY
22245: PPUSH
22246: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 1
22257: ARRAY
22258: PPUSH
22259: LD_VAR 0 1
22263: PUSH
22264: LD_INT 2
22266: ARRAY
22267: PPUSH
22268: CALL_OW 429
// end ; end ;
22272: LD_VAR 0 1
22276: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22277: LD_EXP 47
22281: PUSH
22282: LD_EXP 69
22286: AND
22287: IFFALSE 22299
22289: GO 22291
22291: DISABLE
// YouLost (  ) ;
22292: LD_STRING 
22294: PPUSH
22295: CALL_OW 104
22299: END
// every 0 0$1 trigger StreamModeActive and sFog do
22300: LD_EXP 47
22304: PUSH
22305: LD_EXP 68
22309: AND
22310: IFFALSE 22324
22312: GO 22314
22314: DISABLE
// FogOff ( your_side ) ;
22315: LD_OWVAR 2
22319: PPUSH
22320: CALL_OW 344
22324: END
// every 0 0$1 trigger StreamModeActive and sSun do
22325: LD_EXP 47
22329: PUSH
22330: LD_EXP 70
22334: AND
22335: IFFALSE 22363
22337: GO 22339
22339: DISABLE
// begin solar_recharge_percent := 0 ;
22340: LD_ADDR_OWVAR 79
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22348: LD_INT 10500
22350: PPUSH
22351: CALL_OW 67
// solar_recharge_percent := 100 ;
22355: LD_ADDR_OWVAR 79
22359: PUSH
22360: LD_INT 100
22362: ST_TO_ADDR
// end ;
22363: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22364: LD_EXP 47
22368: PUSH
22369: LD_EXP 71
22373: AND
22374: IFFALSE 22613
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
22382: PPUSH
22383: PPUSH
// begin tmp := [ ] ;
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: EMPTY
22390: ST_TO_ADDR
// for i := 1 to 6 do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: DOUBLE
22397: LD_INT 1
22399: DEC
22400: ST_TO_ADDR
22401: LD_INT 6
22403: PUSH
22404: FOR_TO
22405: IFFALSE 22510
// begin uc_nation := nation_nature ;
22407: LD_ADDR_OWVAR 21
22411: PUSH
22412: LD_INT 0
22414: ST_TO_ADDR
// uc_side := 0 ;
22415: LD_ADDR_OWVAR 20
22419: PUSH
22420: LD_INT 0
22422: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22423: LD_ADDR_OWVAR 29
22427: PUSH
22428: LD_INT 12
22430: PUSH
22431: LD_INT 12
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: ST_TO_ADDR
// hc_agressivity := 20 ;
22438: LD_ADDR_OWVAR 35
22442: PUSH
22443: LD_INT 20
22445: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22446: LD_ADDR_OWVAR 28
22450: PUSH
22451: LD_INT 17
22453: ST_TO_ADDR
// hc_gallery :=  ;
22454: LD_ADDR_OWVAR 33
22458: PUSH
22459: LD_STRING 
22461: ST_TO_ADDR
// hc_name :=  ;
22462: LD_ADDR_OWVAR 26
22466: PUSH
22467: LD_STRING 
22469: ST_TO_ADDR
// un := CreateHuman ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: CALL_OW 44
22479: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22480: LD_VAR 0 2
22484: PPUSH
22485: LD_INT 1
22487: PPUSH
22488: CALL_OW 51
// tmp := tmp ^ un ;
22492: LD_ADDR_VAR 0 3
22496: PUSH
22497: LD_VAR 0 3
22501: PUSH
22502: LD_VAR 0 2
22506: ADD
22507: ST_TO_ADDR
// end ;
22508: GO 22404
22510: POP
22511: POP
// repeat wait ( 0 0$1 ) ;
22512: LD_INT 35
22514: PPUSH
22515: CALL_OW 67
// for un in tmp do
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_VAR 0 3
22528: PUSH
22529: FOR_IN
22530: IFFALSE 22604
// begin if IsDead ( un ) then
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 301
22541: IFFALSE 22561
// begin tmp := tmp diff un ;
22543: LD_ADDR_VAR 0 3
22547: PUSH
22548: LD_VAR 0 3
22552: PUSH
22553: LD_VAR 0 2
22557: DIFF
22558: ST_TO_ADDR
// continue ;
22559: GO 22529
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22561: LD_VAR 0 2
22565: PPUSH
22566: LD_INT 3
22568: PUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PPUSH
22583: CALL_OW 69
22587: PPUSH
22588: LD_VAR 0 2
22592: PPUSH
22593: CALL_OW 74
22597: PPUSH
22598: CALL_OW 115
// end ;
22602: GO 22529
22604: POP
22605: POP
// until not tmp ;
22606: LD_VAR 0 3
22610: NOT
22611: IFFALSE 22512
// end ;
22613: PPOPN 3
22615: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22616: LD_EXP 47
22620: PUSH
22621: LD_EXP 72
22625: AND
22626: IFFALSE 22680
22628: GO 22630
22630: DISABLE
// begin ToLua ( displayTroll(); ) ;
22631: LD_STRING displayTroll();
22633: PPUSH
22634: CALL_OW 559
// wait ( 3 3$00 ) ;
22638: LD_INT 6300
22640: PPUSH
22641: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22645: LD_STRING hideTroll();
22647: PPUSH
22648: CALL_OW 559
// wait ( 1 1$00 ) ;
22652: LD_INT 2100
22654: PPUSH
22655: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22659: LD_STRING displayTroll();
22661: PPUSH
22662: CALL_OW 559
// wait ( 1 1$00 ) ;
22666: LD_INT 2100
22668: PPUSH
22669: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22673: LD_STRING hideTroll();
22675: PPUSH
22676: CALL_OW 559
// end ;
22680: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22681: LD_EXP 47
22685: PUSH
22686: LD_EXP 73
22690: AND
22691: IFFALSE 22754
22693: GO 22695
22695: DISABLE
22696: LD_INT 0
22698: PPUSH
// begin p := 0 ;
22699: LD_ADDR_VAR 0 1
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// repeat game_speed := 1 ;
22707: LD_ADDR_OWVAR 65
22711: PUSH
22712: LD_INT 1
22714: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22715: LD_INT 35
22717: PPUSH
22718: CALL_OW 67
// p := p + 1 ;
22722: LD_ADDR_VAR 0 1
22726: PUSH
22727: LD_VAR 0 1
22731: PUSH
22732: LD_INT 1
22734: PLUS
22735: ST_TO_ADDR
// until p >= 60 ;
22736: LD_VAR 0 1
22740: PUSH
22741: LD_INT 60
22743: GREATEREQUAL
22744: IFFALSE 22707
// game_speed := 4 ;
22746: LD_ADDR_OWVAR 65
22750: PUSH
22751: LD_INT 4
22753: ST_TO_ADDR
// end ;
22754: PPOPN 1
22756: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22757: LD_EXP 47
22761: PUSH
22762: LD_EXP 74
22766: AND
22767: IFFALSE 22913
22769: GO 22771
22771: DISABLE
22772: LD_INT 0
22774: PPUSH
22775: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22776: LD_ADDR_VAR 0 1
22780: PUSH
22781: LD_INT 22
22783: PUSH
22784: LD_OWVAR 2
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 30
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 30
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PPUSH
22825: CALL_OW 69
22829: ST_TO_ADDR
// if not depot then
22830: LD_VAR 0 1
22834: NOT
22835: IFFALSE 22839
// exit ;
22837: GO 22913
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_VAR 0 1
22848: PUSH
22849: LD_INT 1
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 12
22861: ARRAY
22862: PPUSH
22863: CALL_OW 274
22867: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: LD_INT 0
22878: PPUSH
22879: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22883: LD_VAR 0 2
22887: PPUSH
22888: LD_INT 2
22890: PPUSH
22891: LD_INT 0
22893: PPUSH
22894: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22898: LD_VAR 0 2
22902: PPUSH
22903: LD_INT 3
22905: PPUSH
22906: LD_INT 0
22908: PPUSH
22909: CALL_OW 277
// end ;
22913: PPOPN 2
22915: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22916: LD_EXP 47
22920: PUSH
22921: LD_EXP 75
22925: AND
22926: IFFALSE 23023
22928: GO 22930
22930: DISABLE
22931: LD_INT 0
22933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_OWVAR 2
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 21
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: LD_INT 23
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL_OW 69
22987: ST_TO_ADDR
// if not tmp then
22988: LD_VAR 0 1
22992: NOT
22993: IFFALSE 22997
// exit ;
22995: GO 23023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22997: LD_VAR 0 1
23001: PUSH
23002: LD_INT 1
23004: PPUSH
23005: LD_VAR 0 1
23009: PPUSH
23010: CALL_OW 12
23014: ARRAY
23015: PPUSH
23016: LD_INT 200
23018: PPUSH
23019: CALL_OW 234
// end ;
23023: PPOPN 1
23025: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23026: LD_EXP 47
23030: PUSH
23031: LD_EXP 76
23035: AND
23036: IFFALSE 23115
23038: GO 23040
23040: DISABLE
23041: LD_INT 0
23043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23044: LD_ADDR_VAR 0 1
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_OWVAR 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PPUSH
23075: CALL_OW 69
23079: ST_TO_ADDR
// if not tmp then
23080: LD_VAR 0 1
23084: NOT
23085: IFFALSE 23089
// exit ;
23087: GO 23115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23089: LD_VAR 0 1
23093: PUSH
23094: LD_INT 1
23096: PPUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 12
23106: ARRAY
23107: PPUSH
23108: LD_INT 60
23110: PPUSH
23111: CALL_OW 234
// end ;
23115: PPOPN 1
23117: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23118: LD_EXP 47
23122: PUSH
23123: LD_EXP 77
23127: AND
23128: IFFALSE 23227
23130: GO 23132
23132: DISABLE
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
// begin enable ;
23137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23138: LD_ADDR_VAR 0 1
23142: PUSH
23143: LD_INT 22
23145: PUSH
23146: LD_OWVAR 2
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 61
23157: PUSH
23158: EMPTY
23159: LIST
23160: PUSH
23161: LD_INT 33
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PPUSH
23176: CALL_OW 69
23180: ST_TO_ADDR
// if not tmp then
23181: LD_VAR 0 1
23185: NOT
23186: IFFALSE 23190
// exit ;
23188: GO 23227
// for i in tmp do
23190: LD_ADDR_VAR 0 2
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: FOR_IN
23201: IFFALSE 23225
// if IsControledBy ( i ) then
23203: LD_VAR 0 2
23207: PPUSH
23208: CALL_OW 312
23212: IFFALSE 23223
// ComUnlink ( i ) ;
23214: LD_VAR 0 2
23218: PPUSH
23219: CALL_OW 136
23223: GO 23200
23225: POP
23226: POP
// end ;
23227: PPOPN 2
23229: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23230: LD_EXP 47
23234: PUSH
23235: LD_EXP 78
23239: AND
23240: IFFALSE 23380
23242: GO 23244
23244: DISABLE
23245: LD_INT 0
23247: PPUSH
23248: PPUSH
// begin ToLua ( displayPowell(); ) ;
23249: LD_STRING displayPowell();
23251: PPUSH
23252: CALL_OW 559
// uc_side := 0 ;
23256: LD_ADDR_OWVAR 20
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// uc_nation := 2 ;
23264: LD_ADDR_OWVAR 21
23268: PUSH
23269: LD_INT 2
23271: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23272: LD_ADDR_OWVAR 37
23276: PUSH
23277: LD_INT 14
23279: ST_TO_ADDR
// vc_engine := engine_siberite ;
23280: LD_ADDR_OWVAR 39
23284: PUSH
23285: LD_INT 3
23287: ST_TO_ADDR
// vc_control := control_apeman ;
23288: LD_ADDR_OWVAR 38
23292: PUSH
23293: LD_INT 5
23295: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23296: LD_ADDR_OWVAR 40
23300: PUSH
23301: LD_INT 29
23303: ST_TO_ADDR
// un := CreateVehicle ;
23304: LD_ADDR_VAR 0 2
23308: PUSH
23309: CALL_OW 45
23313: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23314: LD_VAR 0 2
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23326: LD_INT 35
23328: PPUSH
23329: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23333: LD_VAR 0 2
23337: PPUSH
23338: LD_INT 22
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: PPUSH
23355: LD_VAR 0 2
23359: PPUSH
23360: CALL_OW 74
23364: PPUSH
23365: CALL_OW 115
// until IsDead ( un ) ;
23369: LD_VAR 0 2
23373: PPUSH
23374: CALL_OW 301
23378: IFFALSE 23326
// end ;
23380: PPOPN 2
23382: END
// every 0 0$1 trigger StreamModeActive and sStu do
23383: LD_EXP 47
23387: PUSH
23388: LD_EXP 86
23392: AND
23393: IFFALSE 23409
23395: GO 23397
23397: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23398: LD_STRING displayStucuk();
23400: PPUSH
23401: CALL_OW 559
// ResetFog ;
23405: CALL_OW 335
// end ;
23409: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23410: LD_EXP 47
23414: PUSH
23415: LD_EXP 79
23419: AND
23420: IFFALSE 23561
23422: GO 23424
23424: DISABLE
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 22
23436: PUSH
23437: LD_OWVAR 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 21
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PPUSH
23460: CALL_OW 69
23464: ST_TO_ADDR
// if not tmp then
23465: LD_VAR 0 2
23469: NOT
23470: IFFALSE 23474
// exit ;
23472: GO 23561
// un := tmp [ rand ( 1 , tmp ) ] ;
23474: LD_ADDR_VAR 0 1
23478: PUSH
23479: LD_VAR 0 2
23483: PUSH
23484: LD_INT 1
23486: PPUSH
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 12
23496: ARRAY
23497: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23498: LD_VAR 0 1
23502: PPUSH
23503: LD_INT 0
23505: PPUSH
23506: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23510: LD_VAR 0 1
23514: PPUSH
23515: LD_OWVAR 3
23519: PUSH
23520: LD_VAR 0 1
23524: DIFF
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 74
23535: PPUSH
23536: CALL_OW 115
// wait ( 0 0$20 ) ;
23540: LD_INT 700
23542: PPUSH
23543: CALL_OW 67
// SetSide ( un , your_side ) ;
23547: LD_VAR 0 1
23551: PPUSH
23552: LD_OWVAR 2
23556: PPUSH
23557: CALL_OW 235
// end ;
23561: PPOPN 2
23563: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23564: LD_EXP 47
23568: PUSH
23569: LD_EXP 80
23573: AND
23574: IFFALSE 23680
23576: GO 23578
23578: DISABLE
23579: LD_INT 0
23581: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23582: LD_ADDR_VAR 0 1
23586: PUSH
23587: LD_INT 22
23589: PUSH
23590: LD_OWVAR 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PPUSH
23631: CALL_OW 69
23635: ST_TO_ADDR
// if not depot then
23636: LD_VAR 0 1
23640: NOT
23641: IFFALSE 23645
// exit ;
23643: GO 23680
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23645: LD_VAR 0 1
23649: PUSH
23650: LD_INT 1
23652: ARRAY
23653: PPUSH
23654: CALL_OW 250
23658: PPUSH
23659: LD_VAR 0 1
23663: PUSH
23664: LD_INT 1
23666: ARRAY
23667: PPUSH
23668: CALL_OW 251
23672: PPUSH
23673: LD_INT 70
23675: PPUSH
23676: CALL_OW 495
// end ;
23680: PPOPN 1
23682: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23683: LD_EXP 47
23687: PUSH
23688: LD_EXP 81
23692: AND
23693: IFFALSE 23904
23695: GO 23697
23697: DISABLE
23698: LD_INT 0
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_OWVAR 2
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 21
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 69
23740: ST_TO_ADDR
// if not tmp then
23741: LD_VAR 0 5
23745: NOT
23746: IFFALSE 23750
// exit ;
23748: GO 23904
// for i in tmp do
23750: LD_ADDR_VAR 0 1
23754: PUSH
23755: LD_VAR 0 5
23759: PUSH
23760: FOR_IN
23761: IFFALSE 23902
// begin d := rand ( 0 , 5 ) ;
23763: LD_ADDR_VAR 0 4
23767: PUSH
23768: LD_INT 0
23770: PPUSH
23771: LD_INT 5
23773: PPUSH
23774: CALL_OW 12
23778: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23779: LD_ADDR_VAR 0 2
23783: PUSH
23784: LD_VAR 0 1
23788: PPUSH
23789: CALL_OW 250
23793: PPUSH
23794: LD_VAR 0 4
23798: PPUSH
23799: LD_INT 3
23801: PPUSH
23802: LD_INT 12
23804: PPUSH
23805: CALL_OW 12
23809: PPUSH
23810: CALL_OW 272
23814: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 251
23829: PPUSH
23830: LD_VAR 0 4
23834: PPUSH
23835: LD_INT 3
23837: PPUSH
23838: LD_INT 12
23840: PPUSH
23841: CALL_OW 12
23845: PPUSH
23846: CALL_OW 273
23850: ST_TO_ADDR
// if ValidHex ( x , y ) then
23851: LD_VAR 0 2
23855: PPUSH
23856: LD_VAR 0 3
23860: PPUSH
23861: CALL_OW 488
23865: IFFALSE 23900
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23867: LD_VAR 0 1
23871: PPUSH
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_VAR 0 3
23881: PPUSH
23882: LD_INT 3
23884: PPUSH
23885: LD_INT 6
23887: PPUSH
23888: CALL_OW 12
23892: PPUSH
23893: LD_INT 1
23895: PPUSH
23896: CALL_OW 483
// end ;
23900: GO 23760
23902: POP
23903: POP
// end ;
23904: PPOPN 5
23906: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23907: LD_EXP 47
23911: PUSH
23912: LD_EXP 82
23916: AND
23917: IFFALSE 24011
23919: GO 23921
23921: DISABLE
23922: LD_INT 0
23924: PPUSH
23925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: LD_INT 22
23933: PUSH
23934: LD_OWVAR 2
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 32
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: ST_TO_ADDR
// if not tmp then
23973: LD_VAR 0 2
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24011
// for i in tmp do
23982: LD_ADDR_VAR 0 1
23986: PUSH
23987: LD_VAR 0 2
23991: PUSH
23992: FOR_IN
23993: IFFALSE 24009
// SetFuel ( i , 0 ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: LD_INT 0
24002: PPUSH
24003: CALL_OW 240
24007: GO 23992
24009: POP
24010: POP
// end ;
24011: PPOPN 2
24013: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24014: LD_EXP 47
24018: PUSH
24019: LD_EXP 83
24023: AND
24024: IFFALSE 24090
24026: GO 24028
24028: DISABLE
24029: LD_INT 0
24031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: LD_INT 22
24039: PUSH
24040: LD_OWVAR 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 29
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PPUSH
24063: CALL_OW 69
24067: ST_TO_ADDR
// if not tmp then
24068: LD_VAR 0 1
24072: NOT
24073: IFFALSE 24077
// exit ;
24075: GO 24090
// DestroyUnit ( tmp [ 1 ] ) ;
24077: LD_VAR 0 1
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: CALL_OW 65
// end ;
24090: PPOPN 1
24092: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24093: LD_EXP 47
24097: PUSH
24098: LD_EXP 85
24102: AND
24103: IFFALSE 24232
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
// begin uc_side := 0 ;
24111: LD_ADDR_OWVAR 20
24115: PUSH
24116: LD_INT 0
24118: ST_TO_ADDR
// uc_nation := nation_arabian ;
24119: LD_ADDR_OWVAR 21
24123: PUSH
24124: LD_INT 2
24126: ST_TO_ADDR
// hc_gallery :=  ;
24127: LD_ADDR_OWVAR 33
24131: PUSH
24132: LD_STRING 
24134: ST_TO_ADDR
// hc_name :=  ;
24135: LD_ADDR_OWVAR 26
24139: PUSH
24140: LD_STRING 
24142: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24143: LD_INT 1
24145: PPUSH
24146: LD_INT 11
24148: PPUSH
24149: LD_INT 10
24151: PPUSH
24152: CALL_OW 380
// un := CreateHuman ;
24156: LD_ADDR_VAR 0 1
24160: PUSH
24161: CALL_OW 44
24165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_INT 1
24173: PPUSH
24174: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24178: LD_INT 35
24180: PPUSH
24181: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24185: LD_VAR 0 1
24189: PPUSH
24190: LD_INT 22
24192: PUSH
24193: LD_OWVAR 2
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PPUSH
24202: CALL_OW 69
24206: PPUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 74
24216: PPUSH
24217: CALL_OW 115
// until IsDead ( un ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 301
24230: IFFALSE 24178
// end ;
24232: PPOPN 1
24234: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24235: LD_EXP 47
24239: PUSH
24240: LD_EXP 87
24244: AND
24245: IFFALSE 24257
24247: GO 24249
24249: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24250: LD_STRING earthquake(getX(game), 0, 32)
24252: PPUSH
24253: CALL_OW 559
24257: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24258: LD_EXP 47
24262: PUSH
24263: LD_EXP 88
24267: AND
24268: IFFALSE 24359
24270: GO 24272
24272: DISABLE
24273: LD_INT 0
24275: PPUSH
// begin enable ;
24276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24277: LD_ADDR_VAR 0 1
24281: PUSH
24282: LD_INT 22
24284: PUSH
24285: LD_OWVAR 2
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 33
24306: PUSH
24307: LD_INT 3
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 69
24323: ST_TO_ADDR
// if not tmp then
24324: LD_VAR 0 1
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24333: LD_VAR 0 1
24337: PUSH
24338: LD_INT 1
24340: PPUSH
24341: LD_VAR 0 1
24345: PPUSH
24346: CALL_OW 12
24350: ARRAY
24351: PPUSH
24352: LD_INT 1
24354: PPUSH
24355: CALL_OW 234
// end ;
24359: PPOPN 1
24361: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24362: LD_EXP 47
24366: PUSH
24367: LD_EXP 89
24371: AND
24372: IFFALSE 24513
24374: GO 24376
24376: DISABLE
24377: LD_INT 0
24379: PPUSH
24380: PPUSH
24381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_INT 22
24389: PUSH
24390: LD_OWVAR 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 25
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PPUSH
24413: CALL_OW 69
24417: ST_TO_ADDR
// if not tmp then
24418: LD_VAR 0 3
24422: NOT
24423: IFFALSE 24427
// exit ;
24425: GO 24513
// un := tmp [ rand ( 1 , tmp ) ] ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_VAR 0 3
24436: PUSH
24437: LD_INT 1
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: CALL_OW 12
24449: ARRAY
24450: ST_TO_ADDR
// if Crawls ( un ) then
24451: LD_VAR 0 2
24455: PPUSH
24456: CALL_OW 318
24460: IFFALSE 24471
// ComWalk ( un ) ;
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_INT 9
24478: PPUSH
24479: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24483: LD_INT 28
24485: PPUSH
24486: LD_OWVAR 2
24490: PPUSH
24491: LD_INT 2
24493: PPUSH
24494: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24498: LD_INT 29
24500: PPUSH
24501: LD_OWVAR 2
24505: PPUSH
24506: LD_INT 2
24508: PPUSH
24509: CALL_OW 322
// end ;
24513: PPOPN 3
24515: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24516: LD_EXP 47
24520: PUSH
24521: LD_EXP 90
24525: AND
24526: IFFALSE 24637
24528: GO 24530
24530: DISABLE
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
24535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24536: LD_ADDR_VAR 0 3
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_OWVAR 2
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 25
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PPUSH
24567: CALL_OW 69
24571: ST_TO_ADDR
// if not tmp then
24572: LD_VAR 0 3
24576: NOT
24577: IFFALSE 24581
// exit ;
24579: GO 24637
// un := tmp [ rand ( 1 , tmp ) ] ;
24581: LD_ADDR_VAR 0 2
24585: PUSH
24586: LD_VAR 0 3
24590: PUSH
24591: LD_INT 1
24593: PPUSH
24594: LD_VAR 0 3
24598: PPUSH
24599: CALL_OW 12
24603: ARRAY
24604: ST_TO_ADDR
// if Crawls ( un ) then
24605: LD_VAR 0 2
24609: PPUSH
24610: CALL_OW 318
24614: IFFALSE 24625
// ComWalk ( un ) ;
24616: LD_VAR 0 2
24620: PPUSH
24621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24625: LD_VAR 0 2
24629: PPUSH
24630: LD_INT 8
24632: PPUSH
24633: CALL_OW 336
// end ;
24637: PPOPN 3
24639: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24640: LD_EXP 47
24644: PUSH
24645: LD_EXP 91
24649: AND
24650: IFFALSE 24794
24652: GO 24654
24654: DISABLE
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24659: LD_ADDR_VAR 0 2
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_OWVAR 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 21
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: PUSH
24689: LD_INT 34
24691: PUSH
24692: LD_INT 12
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 34
24701: PUSH
24702: LD_INT 51
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 34
24711: PUSH
24712: LD_INT 32
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: PPUSH
24730: CALL_OW 69
24734: ST_TO_ADDR
// if not tmp then
24735: LD_VAR 0 2
24739: NOT
24740: IFFALSE 24744
// exit ;
24742: GO 24794
// for i in tmp do
24744: LD_ADDR_VAR 0 1
24748: PUSH
24749: LD_VAR 0 2
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24792
// if GetCargo ( i , mat_artifact ) = 0 then
24757: LD_VAR 0 1
24761: PPUSH
24762: LD_INT 4
24764: PPUSH
24765: CALL_OW 289
24769: PUSH
24770: LD_INT 0
24772: EQUAL
24773: IFFALSE 24790
// SetCargo ( i , mat_siberit , 100 ) ;
24775: LD_VAR 0 1
24779: PPUSH
24780: LD_INT 3
24782: PPUSH
24783: LD_INT 100
24785: PPUSH
24786: CALL_OW 290
24790: GO 24754
24792: POP
24793: POP
// end ;
24794: PPOPN 2
24796: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24797: LD_EXP 47
24801: PUSH
24802: LD_EXP 92
24806: AND
24807: IFFALSE 24990
24809: GO 24811
24811: DISABLE
24812: LD_INT 0
24814: PPUSH
24815: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24816: LD_ADDR_VAR 0 2
24820: PUSH
24821: LD_INT 22
24823: PUSH
24824: LD_OWVAR 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 69
24837: ST_TO_ADDR
// if not tmp then
24838: LD_VAR 0 2
24842: NOT
24843: IFFALSE 24847
// exit ;
24845: GO 24990
// for i := 1 to 2 do
24847: LD_ADDR_VAR 0 1
24851: PUSH
24852: DOUBLE
24853: LD_INT 1
24855: DEC
24856: ST_TO_ADDR
24857: LD_INT 2
24859: PUSH
24860: FOR_TO
24861: IFFALSE 24988
// begin uc_side := your_side ;
24863: LD_ADDR_OWVAR 20
24867: PUSH
24868: LD_OWVAR 2
24872: ST_TO_ADDR
// uc_nation := nation_american ;
24873: LD_ADDR_OWVAR 21
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// vc_chassis := us_morphling ;
24881: LD_ADDR_OWVAR 37
24885: PUSH
24886: LD_INT 5
24888: ST_TO_ADDR
// vc_engine := engine_siberite ;
24889: LD_ADDR_OWVAR 39
24893: PUSH
24894: LD_INT 3
24896: ST_TO_ADDR
// vc_control := control_computer ;
24897: LD_ADDR_OWVAR 38
24901: PUSH
24902: LD_INT 3
24904: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24905: LD_ADDR_OWVAR 40
24909: PUSH
24910: LD_INT 10
24912: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24913: LD_VAR 0 2
24917: PUSH
24918: LD_INT 1
24920: ARRAY
24921: PPUSH
24922: CALL_OW 310
24926: NOT
24927: IFFALSE 24974
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24929: CALL_OW 45
24933: PPUSH
24934: LD_VAR 0 2
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PPUSH
24943: CALL_OW 250
24947: PPUSH
24948: LD_VAR 0 2
24952: PUSH
24953: LD_INT 1
24955: ARRAY
24956: PPUSH
24957: CALL_OW 251
24961: PPUSH
24962: LD_INT 12
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 50
24972: GO 24986
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24974: CALL_OW 45
24978: PPUSH
24979: LD_INT 1
24981: PPUSH
24982: CALL_OW 51
// end ;
24986: GO 24860
24988: POP
24989: POP
// end ;
24990: PPOPN 2
24992: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24993: LD_EXP 47
24997: PUSH
24998: LD_EXP 93
25002: AND
25003: IFFALSE 25225
25005: GO 25007
25007: DISABLE
25008: LD_INT 0
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25016: LD_ADDR_VAR 0 6
25020: PUSH
25021: LD_INT 22
25023: PUSH
25024: LD_OWVAR 2
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 21
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 23
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 69
25069: ST_TO_ADDR
// if not tmp then
25070: LD_VAR 0 6
25074: NOT
25075: IFFALSE 25079
// exit ;
25077: GO 25225
// s1 := rand ( 1 , 4 ) ;
25079: LD_ADDR_VAR 0 2
25083: PUSH
25084: LD_INT 1
25086: PPUSH
25087: LD_INT 4
25089: PPUSH
25090: CALL_OW 12
25094: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25095: LD_ADDR_VAR 0 4
25099: PUSH
25100: LD_VAR 0 6
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: PPUSH
25109: LD_VAR 0 2
25113: PPUSH
25114: CALL_OW 259
25118: ST_TO_ADDR
// if s1 = 1 then
25119: LD_VAR 0 2
25123: PUSH
25124: LD_INT 1
25126: EQUAL
25127: IFFALSE 25147
// s2 := rand ( 2 , 4 ) else
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 2
25136: PPUSH
25137: LD_INT 4
25139: PPUSH
25140: CALL_OW 12
25144: ST_TO_ADDR
25145: GO 25155
// s2 := 1 ;
25147: LD_ADDR_VAR 0 3
25151: PUSH
25152: LD_INT 1
25154: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25155: LD_ADDR_VAR 0 5
25159: PUSH
25160: LD_VAR 0 6
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: PPUSH
25169: LD_VAR 0 3
25173: PPUSH
25174: CALL_OW 259
25178: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25179: LD_VAR 0 6
25183: PUSH
25184: LD_INT 1
25186: ARRAY
25187: PPUSH
25188: LD_VAR 0 2
25192: PPUSH
25193: LD_VAR 0 5
25197: PPUSH
25198: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25202: LD_VAR 0 6
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: PPUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: LD_VAR 0 4
25220: PPUSH
25221: CALL_OW 237
// end ;
25225: PPOPN 6
25227: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25228: LD_EXP 47
25232: PUSH
25233: LD_EXP 94
25237: AND
25238: IFFALSE 25317
25240: GO 25242
25242: DISABLE
25243: LD_INT 0
25245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25246: LD_ADDR_VAR 0 1
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 30
25265: PUSH
25266: LD_INT 3
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PPUSH
25277: CALL_OW 69
25281: ST_TO_ADDR
// if not tmp then
25282: LD_VAR 0 1
25286: NOT
25287: IFFALSE 25291
// exit ;
25289: GO 25317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25291: LD_VAR 0 1
25295: PUSH
25296: LD_INT 1
25298: PPUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: CALL_OW 12
25308: ARRAY
25309: PPUSH
25310: LD_INT 1
25312: PPUSH
25313: CALL_OW 234
// end ;
25317: PPOPN 1
25319: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25320: LD_EXP 47
25324: PUSH
25325: LD_EXP 95
25329: AND
25330: IFFALSE 25442
25332: GO 25334
25334: DISABLE
25335: LD_INT 0
25337: PPUSH
25338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: LD_INT 22
25346: PUSH
25347: LD_OWVAR 2
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 30
25361: PUSH
25362: LD_INT 27
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 30
25371: PUSH
25372: LD_INT 26
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 30
25381: PUSH
25382: LD_INT 28
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PPUSH
25399: CALL_OW 69
25403: ST_TO_ADDR
// if not tmp then
25404: LD_VAR 0 2
25408: NOT
25409: IFFALSE 25413
// exit ;
25411: GO 25442
// for i in tmp do
25413: LD_ADDR_VAR 0 1
25417: PUSH
25418: LD_VAR 0 2
25422: PUSH
25423: FOR_IN
25424: IFFALSE 25440
// SetLives ( i , 1 ) ;
25426: LD_VAR 0 1
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: CALL_OW 234
25438: GO 25423
25440: POP
25441: POP
// end ;
25442: PPOPN 2
25444: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25445: LD_EXP 47
25449: PUSH
25450: LD_EXP 96
25454: AND
25455: IFFALSE 25742
25457: GO 25459
25459: DISABLE
25460: LD_INT 0
25462: PPUSH
25463: PPUSH
25464: PPUSH
// begin i := rand ( 1 , 7 ) ;
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_INT 7
25475: PPUSH
25476: CALL_OW 12
25480: ST_TO_ADDR
// case i of 1 :
25481: LD_VAR 0 1
25485: PUSH
25486: LD_INT 1
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25504
25494: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25495: LD_STRING earthquake(getX(game), 0, 32)
25497: PPUSH
25498: CALL_OW 559
25502: GO 25742
25504: LD_INT 2
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25512
25510: GO 25526
25512: POP
// begin ToLua ( displayStucuk(); ) ;
25513: LD_STRING displayStucuk();
25515: PPUSH
25516: CALL_OW 559
// ResetFog ;
25520: CALL_OW 335
// end ; 3 :
25524: GO 25742
25526: LD_INT 3
25528: DOUBLE
25529: EQUAL
25530: IFTRUE 25534
25532: GO 25638
25534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_INT 22
25542: PUSH
25543: LD_OWVAR 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 25
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PPUSH
25566: CALL_OW 69
25570: ST_TO_ADDR
// if not tmp then
25571: LD_VAR 0 2
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25742
// un := tmp [ rand ( 1 , tmp ) ] ;
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_VAR 0 2
25589: PUSH
25590: LD_INT 1
25592: PPUSH
25593: LD_VAR 0 2
25597: PPUSH
25598: CALL_OW 12
25602: ARRAY
25603: ST_TO_ADDR
// if Crawls ( un ) then
25604: LD_VAR 0 3
25608: PPUSH
25609: CALL_OW 318
25613: IFFALSE 25624
// ComWalk ( un ) ;
25615: LD_VAR 0 3
25619: PPUSH
25620: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25624: LD_VAR 0 3
25628: PPUSH
25629: LD_INT 8
25631: PPUSH
25632: CALL_OW 336
// end ; 4 :
25636: GO 25742
25638: LD_INT 4
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25720
25646: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_OWVAR 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 30
25666: PUSH
25667: LD_INT 29
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: ST_TO_ADDR
// if not tmp then
25683: LD_VAR 0 2
25687: NOT
25688: IFFALSE 25692
// exit ;
25690: GO 25742
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25692: LD_VAR 0 2
25696: PUSH
25697: LD_INT 1
25699: ARRAY
25700: PPUSH
25701: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25705: LD_VAR 0 2
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: CALL_OW 65
// end ; 5 .. 7 :
25718: GO 25742
25720: LD_INT 5
25722: DOUBLE
25723: GREATEREQUAL
25724: IFFALSE 25732
25726: LD_INT 7
25728: DOUBLE
25729: LESSEQUAL
25730: IFTRUE 25734
25732: GO 25741
25734: POP
// StreamSibBomb ; end ;
25735: CALL 21979 0 0
25739: GO 25742
25741: POP
// end ;
25742: PPOPN 3
25744: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25745: LD_EXP 47
25749: PUSH
25750: LD_EXP 97
25754: AND
25755: IFFALSE 25911
25757: GO 25759
25759: DISABLE
25760: LD_INT 0
25762: PPUSH
25763: PPUSH
25764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25765: LD_ADDR_VAR 0 2
25769: PUSH
25770: LD_INT 81
25772: PUSH
25773: LD_OWVAR 2
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 21
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 21
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: ST_TO_ADDR
// if not tmp then
25819: LD_VAR 0 2
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 25911
// p := 0 ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_INT 0
25835: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25836: LD_INT 35
25838: PPUSH
25839: CALL_OW 67
// p := p + 1 ;
25843: LD_ADDR_VAR 0 3
25847: PUSH
25848: LD_VAR 0 3
25852: PUSH
25853: LD_INT 1
25855: PLUS
25856: ST_TO_ADDR
// for i in tmp do
25857: LD_ADDR_VAR 0 1
25861: PUSH
25862: LD_VAR 0 2
25866: PUSH
25867: FOR_IN
25868: IFFALSE 25899
// if GetLives ( i ) < 1000 then
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 256
25879: PUSH
25880: LD_INT 1000
25882: LESS
25883: IFFALSE 25897
// SetLives ( i , 1000 ) ;
25885: LD_VAR 0 1
25889: PPUSH
25890: LD_INT 1000
25892: PPUSH
25893: CALL_OW 234
25897: GO 25867
25899: POP
25900: POP
// until p > 20 ;
25901: LD_VAR 0 3
25905: PUSH
25906: LD_INT 20
25908: GREATER
25909: IFFALSE 25836
// end ;
25911: PPOPN 3
25913: END
// every 0 0$1 trigger StreamModeActive and sTime do
25914: LD_EXP 47
25918: PUSH
25919: LD_EXP 98
25923: AND
25924: IFFALSE 25959
25926: GO 25928
25928: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25929: LD_INT 28
25931: PPUSH
25932: LD_OWVAR 2
25936: PPUSH
25937: LD_INT 2
25939: PPUSH
25940: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25944: LD_INT 30
25946: PPUSH
25947: LD_OWVAR 2
25951: PPUSH
25952: LD_INT 2
25954: PPUSH
25955: CALL_OW 322
// end ;
25959: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25960: LD_EXP 47
25964: PUSH
25965: LD_EXP 99
25969: AND
25970: IFFALSE 26091
25972: GO 25974
25974: DISABLE
25975: LD_INT 0
25977: PPUSH
25978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25979: LD_ADDR_VAR 0 2
25983: PUSH
25984: LD_INT 22
25986: PUSH
25987: LD_OWVAR 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 21
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 3
26008: PUSH
26009: LD_INT 23
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 2
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26091
// for i in tmp do
26042: LD_ADDR_VAR 0 1
26046: PUSH
26047: LD_VAR 0 2
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26089
// begin if Crawls ( i ) then
26055: LD_VAR 0 1
26059: PPUSH
26060: CALL_OW 318
26064: IFFALSE 26075
// ComWalk ( i ) ;
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 138
// SetClass ( i , 2 ) ;
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_INT 2
26082: PPUSH
26083: CALL_OW 336
// end ;
26087: GO 26052
26089: POP
26090: POP
// end ;
26091: PPOPN 2
26093: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26094: LD_EXP 47
26098: PUSH
26099: LD_EXP 100
26103: AND
26104: IFFALSE 26392
26106: GO 26108
26108: DISABLE
26109: LD_INT 0
26111: PPUSH
26112: PPUSH
26113: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26114: LD_OWVAR 2
26118: PPUSH
26119: LD_INT 9
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26132: LD_INT 9
26134: PPUSH
26135: LD_OWVAR 2
26139: PPUSH
26140: CALL_OW 343
// uc_side := 9 ;
26144: LD_ADDR_OWVAR 20
26148: PUSH
26149: LD_INT 9
26151: ST_TO_ADDR
// uc_nation := 2 ;
26152: LD_ADDR_OWVAR 21
26156: PUSH
26157: LD_INT 2
26159: ST_TO_ADDR
// hc_name := Dark Warrior ;
26160: LD_ADDR_OWVAR 26
26164: PUSH
26165: LD_STRING Dark Warrior
26167: ST_TO_ADDR
// hc_gallery :=  ;
26168: LD_ADDR_OWVAR 33
26172: PUSH
26173: LD_STRING 
26175: ST_TO_ADDR
// hc_noskilllimit := true ;
26176: LD_ADDR_OWVAR 76
26180: PUSH
26181: LD_INT 1
26183: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26184: LD_ADDR_OWVAR 31
26188: PUSH
26189: LD_INT 30
26191: PUSH
26192: LD_INT 30
26194: PUSH
26195: LD_INT 30
26197: PUSH
26198: LD_INT 30
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// un := CreateHuman ;
26207: LD_ADDR_VAR 0 3
26211: PUSH
26212: CALL_OW 44
26216: ST_TO_ADDR
// hc_noskilllimit := false ;
26217: LD_ADDR_OWVAR 76
26221: PUSH
26222: LD_INT 0
26224: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26225: LD_VAR 0 3
26229: PPUSH
26230: LD_INT 1
26232: PPUSH
26233: CALL_OW 51
// ToLua ( playRanger() ) ;
26237: LD_STRING playRanger()
26239: PPUSH
26240: CALL_OW 559
// p := 0 ;
26244: LD_ADDR_VAR 0 2
26248: PUSH
26249: LD_INT 0
26251: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26252: LD_INT 35
26254: PPUSH
26255: CALL_OW 67
// p := p + 1 ;
26259: LD_ADDR_VAR 0 2
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: LD_INT 1
26271: PLUS
26272: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26273: LD_VAR 0 3
26277: PPUSH
26278: CALL_OW 256
26282: PUSH
26283: LD_INT 1000
26285: LESS
26286: IFFALSE 26300
// SetLives ( un , 1000 ) ;
26288: LD_VAR 0 3
26292: PPUSH
26293: LD_INT 1000
26295: PPUSH
26296: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26300: LD_VAR 0 3
26304: PPUSH
26305: LD_INT 81
26307: PUSH
26308: LD_OWVAR 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 91
26319: PUSH
26320: LD_VAR 0 3
26324: PUSH
26325: LD_INT 30
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: PPUSH
26342: LD_VAR 0 3
26346: PPUSH
26347: CALL_OW 74
26351: PPUSH
26352: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26356: LD_VAR 0 2
26360: PUSH
26361: LD_INT 80
26363: GREATER
26364: PUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL_OW 301
26374: OR
26375: IFFALSE 26252
// if un then
26377: LD_VAR 0 3
26381: IFFALSE 26392
// RemoveUnit ( un ) ;
26383: LD_VAR 0 3
26387: PPUSH
26388: CALL_OW 64
// end ;
26392: PPOPN 3
26394: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26395: LD_EXP 101
26399: IFFALSE 26515
26401: GO 26403
26403: DISABLE
26404: LD_INT 0
26406: PPUSH
26407: PPUSH
26408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26409: LD_ADDR_VAR 0 2
26413: PUSH
26414: LD_INT 81
26416: PUSH
26417: LD_OWVAR 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 21
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 69
26444: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26445: LD_STRING playComputer()
26447: PPUSH
26448: CALL_OW 559
// if not tmp then
26452: LD_VAR 0 2
26456: NOT
26457: IFFALSE 26461
// exit ;
26459: GO 26515
// for i in tmp do
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: LD_VAR 0 2
26470: PUSH
26471: FOR_IN
26472: IFFALSE 26513
// for j := 1 to 4 do
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: DOUBLE
26480: LD_INT 1
26482: DEC
26483: ST_TO_ADDR
26484: LD_INT 4
26486: PUSH
26487: FOR_TO
26488: IFFALSE 26509
// SetSkill ( i , j , 10 ) ;
26490: LD_VAR 0 1
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: LD_INT 10
26502: PPUSH
26503: CALL_OW 237
26507: GO 26487
26509: POP
26510: POP
26511: GO 26471
26513: POP
26514: POP
// end ;
26515: PPOPN 3
26517: END
// every 0 0$1 trigger s30 do var i , tmp ;
26518: LD_EXP 102
26522: IFFALSE 26591
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 22
26538: PUSH
26539: LD_OWVAR 2
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 2
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26591
// for i in tmp do
26562: LD_ADDR_VAR 0 1
26566: PUSH
26567: LD_VAR 0 2
26571: PUSH
26572: FOR_IN
26573: IFFALSE 26589
// SetLives ( i , 300 ) ;
26575: LD_VAR 0 1
26579: PPUSH
26580: LD_INT 300
26582: PPUSH
26583: CALL_OW 234
26587: GO 26572
26589: POP
26590: POP
// end ;
26591: PPOPN 2
26593: END
// every 0 0$1 trigger s60 do var i , tmp ;
26594: LD_EXP 103
26598: IFFALSE 26667
26600: GO 26602
26602: DISABLE
26603: LD_INT 0
26605: PPUSH
26606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26607: LD_ADDR_VAR 0 2
26611: PUSH
26612: LD_INT 22
26614: PUSH
26615: LD_OWVAR 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ST_TO_ADDR
// if not tmp then
26629: LD_VAR 0 2
26633: NOT
26634: IFFALSE 26638
// exit ;
26636: GO 26667
// for i in tmp do
26638: LD_ADDR_VAR 0 1
26642: PUSH
26643: LD_VAR 0 2
26647: PUSH
26648: FOR_IN
26649: IFFALSE 26665
// SetLives ( i , 600 ) ;
26651: LD_VAR 0 1
26655: PPUSH
26656: LD_INT 600
26658: PPUSH
26659: CALL_OW 234
26663: GO 26648
26665: POP
26666: POP
// end ;
26667: PPOPN 2
26669: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26670: LD_INT 0
26672: PPUSH
// case cmd of 301 :
26673: LD_VAR 0 1
26677: PUSH
26678: LD_INT 301
26680: DOUBLE
26681: EQUAL
26682: IFTRUE 26686
26684: GO 26718
26686: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26687: LD_VAR 0 6
26691: PPUSH
26692: LD_VAR 0 7
26696: PPUSH
26697: LD_VAR 0 8
26701: PPUSH
26702: LD_VAR 0 4
26706: PPUSH
26707: LD_VAR 0 5
26711: PPUSH
26712: CALL 27919 0 5
26716: GO 26839
26718: LD_INT 302
26720: DOUBLE
26721: EQUAL
26722: IFTRUE 26726
26724: GO 26763
26726: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26727: LD_VAR 0 6
26731: PPUSH
26732: LD_VAR 0 7
26736: PPUSH
26737: LD_VAR 0 8
26741: PPUSH
26742: LD_VAR 0 9
26746: PPUSH
26747: LD_VAR 0 4
26751: PPUSH
26752: LD_VAR 0 5
26756: PPUSH
26757: CALL 28010 0 6
26761: GO 26839
26763: LD_INT 303
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26808
26771: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26772: LD_VAR 0 6
26776: PPUSH
26777: LD_VAR 0 7
26781: PPUSH
26782: LD_VAR 0 8
26786: PPUSH
26787: LD_VAR 0 9
26791: PPUSH
26792: LD_VAR 0 4
26796: PPUSH
26797: LD_VAR 0 5
26801: PPUSH
26802: CALL 26844 0 6
26806: GO 26839
26808: LD_INT 304
26810: DOUBLE
26811: EQUAL
26812: IFTRUE 26816
26814: GO 26838
26816: POP
// hHackTeleport ( unit , x , y ) ; end ;
26817: LD_VAR 0 2
26821: PPUSH
26822: LD_VAR 0 4
26826: PPUSH
26827: LD_VAR 0 5
26831: PPUSH
26832: CALL 28603 0 3
26836: GO 26839
26838: POP
// end ;
26839: LD_VAR 0 12
26843: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26848: LD_VAR 0 1
26852: PUSH
26853: LD_INT 1
26855: LESS
26856: PUSH
26857: LD_VAR 0 1
26861: PUSH
26862: LD_INT 3
26864: GREATER
26865: OR
26866: PUSH
26867: LD_VAR 0 5
26871: PPUSH
26872: LD_VAR 0 6
26876: PPUSH
26877: CALL_OW 428
26881: OR
26882: IFFALSE 26886
// exit ;
26884: GO 27606
// uc_side := your_side ;
26886: LD_ADDR_OWVAR 20
26890: PUSH
26891: LD_OWVAR 2
26895: ST_TO_ADDR
// uc_nation := nation ;
26896: LD_ADDR_OWVAR 21
26900: PUSH
26901: LD_VAR 0 1
26905: ST_TO_ADDR
// bc_level = 1 ;
26906: LD_ADDR_OWVAR 43
26910: PUSH
26911: LD_INT 1
26913: ST_TO_ADDR
// case btype of 1 :
26914: LD_VAR 0 2
26918: PUSH
26919: LD_INT 1
26921: DOUBLE
26922: EQUAL
26923: IFTRUE 26927
26925: GO 26938
26927: POP
// bc_type := b_depot ; 2 :
26928: LD_ADDR_OWVAR 42
26932: PUSH
26933: LD_INT 0
26935: ST_TO_ADDR
26936: GO 27550
26938: LD_INT 2
26940: DOUBLE
26941: EQUAL
26942: IFTRUE 26946
26944: GO 26957
26946: POP
// bc_type := b_warehouse ; 3 :
26947: LD_ADDR_OWVAR 42
26951: PUSH
26952: LD_INT 1
26954: ST_TO_ADDR
26955: GO 27550
26957: LD_INT 3
26959: DOUBLE
26960: EQUAL
26961: IFTRUE 26965
26963: GO 26976
26965: POP
// bc_type := b_lab ; 4 .. 9 :
26966: LD_ADDR_OWVAR 42
26970: PUSH
26971: LD_INT 6
26973: ST_TO_ADDR
26974: GO 27550
26976: LD_INT 4
26978: DOUBLE
26979: GREATEREQUAL
26980: IFFALSE 26988
26982: LD_INT 9
26984: DOUBLE
26985: LESSEQUAL
26986: IFTRUE 26990
26988: GO 27042
26990: POP
// begin bc_type := b_lab_half ;
26991: LD_ADDR_OWVAR 42
26995: PUSH
26996: LD_INT 7
26998: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26999: LD_ADDR_OWVAR 44
27003: PUSH
27004: LD_INT 10
27006: PUSH
27007: LD_INT 11
27009: PUSH
27010: LD_INT 12
27012: PUSH
27013: LD_INT 15
27015: PUSH
27016: LD_INT 14
27018: PUSH
27019: LD_INT 13
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: PUSH
27030: LD_VAR 0 2
27034: PUSH
27035: LD_INT 3
27037: MINUS
27038: ARRAY
27039: ST_TO_ADDR
// end ; 10 .. 13 :
27040: GO 27550
27042: LD_INT 10
27044: DOUBLE
27045: GREATEREQUAL
27046: IFFALSE 27054
27048: LD_INT 13
27050: DOUBLE
27051: LESSEQUAL
27052: IFTRUE 27056
27054: GO 27133
27056: POP
// begin bc_type := b_lab_full ;
27057: LD_ADDR_OWVAR 42
27061: PUSH
27062: LD_INT 8
27064: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27065: LD_ADDR_OWVAR 44
27069: PUSH
27070: LD_INT 10
27072: PUSH
27073: LD_INT 12
27075: PUSH
27076: LD_INT 14
27078: PUSH
27079: LD_INT 13
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_INT 9
27095: MINUS
27096: ARRAY
27097: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27098: LD_ADDR_OWVAR 45
27102: PUSH
27103: LD_INT 11
27105: PUSH
27106: LD_INT 15
27108: PUSH
27109: LD_INT 12
27111: PUSH
27112: LD_INT 15
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: PUSH
27121: LD_VAR 0 2
27125: PUSH
27126: LD_INT 9
27128: MINUS
27129: ARRAY
27130: ST_TO_ADDR
// end ; 14 :
27131: GO 27550
27133: LD_INT 14
27135: DOUBLE
27136: EQUAL
27137: IFTRUE 27141
27139: GO 27152
27141: POP
// bc_type := b_workshop ; 15 :
27142: LD_ADDR_OWVAR 42
27146: PUSH
27147: LD_INT 2
27149: ST_TO_ADDR
27150: GO 27550
27152: LD_INT 15
27154: DOUBLE
27155: EQUAL
27156: IFTRUE 27160
27158: GO 27171
27160: POP
// bc_type := b_factory ; 16 :
27161: LD_ADDR_OWVAR 42
27165: PUSH
27166: LD_INT 3
27168: ST_TO_ADDR
27169: GO 27550
27171: LD_INT 16
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27190
27179: POP
// bc_type := b_ext_gun ; 17 :
27180: LD_ADDR_OWVAR 42
27184: PUSH
27185: LD_INT 17
27187: ST_TO_ADDR
27188: GO 27550
27190: LD_INT 17
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27226
27198: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27199: LD_ADDR_OWVAR 42
27203: PUSH
27204: LD_INT 19
27206: PUSH
27207: LD_INT 23
27209: PUSH
27210: LD_INT 19
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: PUSH
27218: LD_VAR 0 1
27222: ARRAY
27223: ST_TO_ADDR
27224: GO 27550
27226: LD_INT 18
27228: DOUBLE
27229: EQUAL
27230: IFTRUE 27234
27232: GO 27245
27234: POP
// bc_type := b_ext_radar ; 19 :
27235: LD_ADDR_OWVAR 42
27239: PUSH
27240: LD_INT 20
27242: ST_TO_ADDR
27243: GO 27550
27245: LD_INT 19
27247: DOUBLE
27248: EQUAL
27249: IFTRUE 27253
27251: GO 27264
27253: POP
// bc_type := b_ext_radio ; 20 :
27254: LD_ADDR_OWVAR 42
27258: PUSH
27259: LD_INT 22
27261: ST_TO_ADDR
27262: GO 27550
27264: LD_INT 20
27266: DOUBLE
27267: EQUAL
27268: IFTRUE 27272
27270: GO 27283
27272: POP
// bc_type := b_ext_siberium ; 21 :
27273: LD_ADDR_OWVAR 42
27277: PUSH
27278: LD_INT 21
27280: ST_TO_ADDR
27281: GO 27550
27283: LD_INT 21
27285: DOUBLE
27286: EQUAL
27287: IFTRUE 27291
27289: GO 27302
27291: POP
// bc_type := b_ext_computer ; 22 :
27292: LD_ADDR_OWVAR 42
27296: PUSH
27297: LD_INT 24
27299: ST_TO_ADDR
27300: GO 27550
27302: LD_INT 22
27304: DOUBLE
27305: EQUAL
27306: IFTRUE 27310
27308: GO 27321
27310: POP
// bc_type := b_ext_track ; 23 :
27311: LD_ADDR_OWVAR 42
27315: PUSH
27316: LD_INT 16
27318: ST_TO_ADDR
27319: GO 27550
27321: LD_INT 23
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27329
27327: GO 27340
27329: POP
// bc_type := b_ext_laser ; 24 :
27330: LD_ADDR_OWVAR 42
27334: PUSH
27335: LD_INT 25
27337: ST_TO_ADDR
27338: GO 27550
27340: LD_INT 24
27342: DOUBLE
27343: EQUAL
27344: IFTRUE 27348
27346: GO 27359
27348: POP
// bc_type := b_control_tower ; 25 :
27349: LD_ADDR_OWVAR 42
27353: PUSH
27354: LD_INT 36
27356: ST_TO_ADDR
27357: GO 27550
27359: LD_INT 25
27361: DOUBLE
27362: EQUAL
27363: IFTRUE 27367
27365: GO 27378
27367: POP
// bc_type := b_breastwork ; 26 :
27368: LD_ADDR_OWVAR 42
27372: PUSH
27373: LD_INT 31
27375: ST_TO_ADDR
27376: GO 27550
27378: LD_INT 26
27380: DOUBLE
27381: EQUAL
27382: IFTRUE 27386
27384: GO 27397
27386: POP
// bc_type := b_bunker ; 27 :
27387: LD_ADDR_OWVAR 42
27391: PUSH
27392: LD_INT 32
27394: ST_TO_ADDR
27395: GO 27550
27397: LD_INT 27
27399: DOUBLE
27400: EQUAL
27401: IFTRUE 27405
27403: GO 27416
27405: POP
// bc_type := b_turret ; 28 :
27406: LD_ADDR_OWVAR 42
27410: PUSH
27411: LD_INT 33
27413: ST_TO_ADDR
27414: GO 27550
27416: LD_INT 28
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27435
27424: POP
// bc_type := b_armoury ; 29 :
27425: LD_ADDR_OWVAR 42
27429: PUSH
27430: LD_INT 4
27432: ST_TO_ADDR
27433: GO 27550
27435: LD_INT 29
27437: DOUBLE
27438: EQUAL
27439: IFTRUE 27443
27441: GO 27454
27443: POP
// bc_type := b_barracks ; 30 :
27444: LD_ADDR_OWVAR 42
27448: PUSH
27449: LD_INT 5
27451: ST_TO_ADDR
27452: GO 27550
27454: LD_INT 30
27456: DOUBLE
27457: EQUAL
27458: IFTRUE 27462
27460: GO 27473
27462: POP
// bc_type := b_solar_power ; 31 :
27463: LD_ADDR_OWVAR 42
27467: PUSH
27468: LD_INT 27
27470: ST_TO_ADDR
27471: GO 27550
27473: LD_INT 31
27475: DOUBLE
27476: EQUAL
27477: IFTRUE 27481
27479: GO 27492
27481: POP
// bc_type := b_oil_power ; 32 :
27482: LD_ADDR_OWVAR 42
27486: PUSH
27487: LD_INT 26
27489: ST_TO_ADDR
27490: GO 27550
27492: LD_INT 32
27494: DOUBLE
27495: EQUAL
27496: IFTRUE 27500
27498: GO 27511
27500: POP
// bc_type := b_siberite_power ; 33 :
27501: LD_ADDR_OWVAR 42
27505: PUSH
27506: LD_INT 28
27508: ST_TO_ADDR
27509: GO 27550
27511: LD_INT 33
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27519
27517: GO 27530
27519: POP
// bc_type := b_oil_mine ; 34 :
27520: LD_ADDR_OWVAR 42
27524: PUSH
27525: LD_INT 29
27527: ST_TO_ADDR
27528: GO 27550
27530: LD_INT 34
27532: DOUBLE
27533: EQUAL
27534: IFTRUE 27538
27536: GO 27549
27538: POP
// bc_type := b_siberite_mine ; end ;
27539: LD_ADDR_OWVAR 42
27543: PUSH
27544: LD_INT 30
27546: ST_TO_ADDR
27547: GO 27550
27549: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27550: LD_ADDR_VAR 0 8
27554: PUSH
27555: LD_VAR 0 5
27559: PPUSH
27560: LD_VAR 0 6
27564: PPUSH
27565: LD_VAR 0 3
27569: PPUSH
27570: CALL_OW 47
27574: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27575: LD_OWVAR 42
27579: PUSH
27580: LD_INT 32
27582: PUSH
27583: LD_INT 33
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: IN
27590: IFFALSE 27606
// PlaceWeaponTurret ( b , weapon ) ;
27592: LD_VAR 0 8
27596: PPUSH
27597: LD_VAR 0 4
27601: PPUSH
27602: CALL_OW 431
// end ;
27606: LD_VAR 0 7
27610: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27611: LD_INT 0
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27617: LD_ADDR_VAR 0 4
27621: PUSH
27622: LD_INT 22
27624: PUSH
27625: LD_OWVAR 2
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: LD_INT 30
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 30
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PPUSH
27666: CALL_OW 69
27670: ST_TO_ADDR
// if not tmp then
27671: LD_VAR 0 4
27675: NOT
27676: IFFALSE 27680
// exit ;
27678: GO 27739
// for i in tmp do
27680: LD_ADDR_VAR 0 2
27684: PUSH
27685: LD_VAR 0 4
27689: PUSH
27690: FOR_IN
27691: IFFALSE 27737
// for j = 1 to 3 do
27693: LD_ADDR_VAR 0 3
27697: PUSH
27698: DOUBLE
27699: LD_INT 1
27701: DEC
27702: ST_TO_ADDR
27703: LD_INT 3
27705: PUSH
27706: FOR_TO
27707: IFFALSE 27733
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27709: LD_VAR 0 2
27713: PPUSH
27714: CALL_OW 274
27718: PPUSH
27719: LD_VAR 0 3
27723: PPUSH
27724: LD_INT 99999
27726: PPUSH
27727: CALL_OW 277
27731: GO 27706
27733: POP
27734: POP
27735: GO 27690
27737: POP
27738: POP
// end ;
27739: LD_VAR 0 1
27743: RET
// export function hHackSetLevel10 ; var i , j ; begin
27744: LD_INT 0
27746: PPUSH
27747: PPUSH
27748: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27749: LD_ADDR_VAR 0 2
27753: PUSH
27754: LD_INT 21
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PPUSH
27764: CALL_OW 69
27768: PUSH
27769: FOR_IN
27770: IFFALSE 27822
// if IsSelected ( i ) then
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL_OW 306
27781: IFFALSE 27820
// begin for j := 1 to 4 do
27783: LD_ADDR_VAR 0 3
27787: PUSH
27788: DOUBLE
27789: LD_INT 1
27791: DEC
27792: ST_TO_ADDR
27793: LD_INT 4
27795: PUSH
27796: FOR_TO
27797: IFFALSE 27818
// SetSkill ( i , j , 10 ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 3
27808: PPUSH
27809: LD_INT 10
27811: PPUSH
27812: CALL_OW 237
27816: GO 27796
27818: POP
27819: POP
// end ;
27820: GO 27769
27822: POP
27823: POP
// end ;
27824: LD_VAR 0 1
27828: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
27833: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27834: LD_ADDR_VAR 0 2
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 21
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PPUSH
27865: CALL_OW 69
27869: PUSH
27870: FOR_IN
27871: IFFALSE 27912
// begin for j := 1 to 4 do
27873: LD_ADDR_VAR 0 3
27877: PUSH
27878: DOUBLE
27879: LD_INT 1
27881: DEC
27882: ST_TO_ADDR
27883: LD_INT 4
27885: PUSH
27886: FOR_TO
27887: IFFALSE 27908
// SetSkill ( i , j , 10 ) ;
27889: LD_VAR 0 2
27893: PPUSH
27894: LD_VAR 0 3
27898: PPUSH
27899: LD_INT 10
27901: PPUSH
27902: CALL_OW 237
27906: GO 27886
27908: POP
27909: POP
// end ;
27910: GO 27870
27912: POP
27913: POP
// end ;
27914: LD_VAR 0 1
27918: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27919: LD_INT 0
27921: PPUSH
// uc_side := your_side ;
27922: LD_ADDR_OWVAR 20
27926: PUSH
27927: LD_OWVAR 2
27931: ST_TO_ADDR
// uc_nation := nation ;
27932: LD_ADDR_OWVAR 21
27936: PUSH
27937: LD_VAR 0 1
27941: ST_TO_ADDR
// InitHc ;
27942: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27946: LD_INT 0
27948: PPUSH
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27963: LD_VAR 0 4
27967: PPUSH
27968: LD_VAR 0 5
27972: PPUSH
27973: CALL_OW 428
27977: PUSH
27978: LD_INT 0
27980: EQUAL
27981: IFFALSE 28005
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27983: CALL_OW 44
27987: PPUSH
27988: LD_VAR 0 4
27992: PPUSH
27993: LD_VAR 0 5
27997: PPUSH
27998: LD_INT 1
28000: PPUSH
28001: CALL_OW 48
// end ;
28005: LD_VAR 0 6
28009: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28010: LD_INT 0
28012: PPUSH
28013: PPUSH
// uc_side := your_side ;
28014: LD_ADDR_OWVAR 20
28018: PUSH
28019: LD_OWVAR 2
28023: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28024: LD_VAR 0 1
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 3
28037: PUSH
28038: LD_INT 4
28040: PUSH
28041: LD_INT 5
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: IN
28051: IFFALSE 28063
// uc_nation := nation_american else
28053: LD_ADDR_OWVAR 21
28057: PUSH
28058: LD_INT 1
28060: ST_TO_ADDR
28061: GO 28106
// if chassis in [ 11 , 12 , 13 , 14 ] then
28063: LD_VAR 0 1
28067: PUSH
28068: LD_INT 11
28070: PUSH
28071: LD_INT 12
28073: PUSH
28074: LD_INT 13
28076: PUSH
28077: LD_INT 14
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: IN
28086: IFFALSE 28098
// uc_nation := nation_arabian else
28088: LD_ADDR_OWVAR 21
28092: PUSH
28093: LD_INT 2
28095: ST_TO_ADDR
28096: GO 28106
// uc_nation := nation_russian ;
28098: LD_ADDR_OWVAR 21
28102: PUSH
28103: LD_INT 3
28105: ST_TO_ADDR
// vc_chassis := chassis ;
28106: LD_ADDR_OWVAR 37
28110: PUSH
28111: LD_VAR 0 1
28115: ST_TO_ADDR
// vc_engine := engine ;
28116: LD_ADDR_OWVAR 39
28120: PUSH
28121: LD_VAR 0 2
28125: ST_TO_ADDR
// vc_control := control ;
28126: LD_ADDR_OWVAR 38
28130: PUSH
28131: LD_VAR 0 3
28135: ST_TO_ADDR
// vc_weapon := weapon ;
28136: LD_ADDR_OWVAR 40
28140: PUSH
28141: LD_VAR 0 4
28145: ST_TO_ADDR
// un := CreateVehicle ;
28146: LD_ADDR_VAR 0 8
28150: PUSH
28151: CALL_OW 45
28155: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28156: LD_VAR 0 8
28160: PPUSH
28161: LD_INT 0
28163: PPUSH
28164: LD_INT 5
28166: PPUSH
28167: CALL_OW 12
28171: PPUSH
28172: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28176: LD_VAR 0 8
28180: PPUSH
28181: LD_VAR 0 5
28185: PPUSH
28186: LD_VAR 0 6
28190: PPUSH
28191: LD_INT 1
28193: PPUSH
28194: CALL_OW 48
// end ;
28198: LD_VAR 0 7
28202: RET
// export hInvincible ; every 1 do
28203: GO 28205
28205: DISABLE
// hInvincible := [ ] ;
28206: LD_ADDR_EXP 104
28210: PUSH
28211: EMPTY
28212: ST_TO_ADDR
28213: END
// every 10 do var i ;
28214: GO 28216
28216: DISABLE
28217: LD_INT 0
28219: PPUSH
// begin enable ;
28220: ENABLE
// if not hInvincible then
28221: LD_EXP 104
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 28274
// for i in hInvincible do
28230: LD_ADDR_VAR 0 1
28234: PUSH
28235: LD_EXP 104
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28272
// if GetLives ( i ) < 1000 then
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 256
28252: PUSH
28253: LD_INT 1000
28255: LESS
28256: IFFALSE 28270
// SetLives ( i , 1000 ) ;
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 1000
28265: PPUSH
28266: CALL_OW 234
28270: GO 28240
28272: POP
28273: POP
// end ;
28274: PPOPN 1
28276: END
// export function hHackInvincible ; var i ; begin
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: LD_INT 21
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 21
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: PUSH
28319: FOR_IN
28320: IFFALSE 28381
// if IsSelected ( i ) then
28322: LD_VAR 0 2
28326: PPUSH
28327: CALL_OW 306
28331: IFFALSE 28379
// begin if i in hInvincible then
28333: LD_VAR 0 2
28337: PUSH
28338: LD_EXP 104
28342: IN
28343: IFFALSE 28363
// hInvincible := hInvincible diff i else
28345: LD_ADDR_EXP 104
28349: PUSH
28350: LD_EXP 104
28354: PUSH
28355: LD_VAR 0 2
28359: DIFF
28360: ST_TO_ADDR
28361: GO 28379
// hInvincible := hInvincible union i ;
28363: LD_ADDR_EXP 104
28367: PUSH
28368: LD_EXP 104
28372: PUSH
28373: LD_VAR 0 2
28377: UNION
28378: ST_TO_ADDR
// end ;
28379: GO 28319
28381: POP
28382: POP
// end ;
28383: LD_VAR 0 1
28387: RET
// export function hHackInvisible ; var i , j ; begin
28388: LD_INT 0
28390: PPUSH
28391: PPUSH
28392: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28393: LD_ADDR_VAR 0 2
28397: PUSH
28398: LD_INT 21
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: PUSH
28413: FOR_IN
28414: IFFALSE 28438
// if IsSelected ( i ) then
28416: LD_VAR 0 2
28420: PPUSH
28421: CALL_OW 306
28425: IFFALSE 28436
// ComForceInvisible ( i ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: CALL_OW 496
28436: GO 28413
28438: POP
28439: POP
// end ;
28440: LD_VAR 0 1
28444: RET
// export function hHackChangeYourSide ; begin
28445: LD_INT 0
28447: PPUSH
// if your_side = 8 then
28448: LD_OWVAR 2
28452: PUSH
28453: LD_INT 8
28455: EQUAL
28456: IFFALSE 28468
// your_side := 0 else
28458: LD_ADDR_OWVAR 2
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
28466: GO 28482
// your_side := your_side + 1 ;
28468: LD_ADDR_OWVAR 2
28472: PUSH
28473: LD_OWVAR 2
28477: PUSH
28478: LD_INT 1
28480: PLUS
28481: ST_TO_ADDR
// end ;
28482: LD_VAR 0 1
28486: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
// for i in all_units do
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_OWVAR 3
28501: PUSH
28502: FOR_IN
28503: IFFALSE 28581
// if IsSelected ( i ) then
28505: LD_VAR 0 2
28509: PPUSH
28510: CALL_OW 306
28514: IFFALSE 28579
// begin j := GetSide ( i ) ;
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_VAR 0 2
28525: PPUSH
28526: CALL_OW 255
28530: ST_TO_ADDR
// if j = 8 then
28531: LD_VAR 0 3
28535: PUSH
28536: LD_INT 8
28538: EQUAL
28539: IFFALSE 28551
// j := 0 else
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
28549: GO 28565
// j := j + 1 ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_VAR 0 3
28560: PUSH
28561: LD_INT 1
28563: PLUS
28564: ST_TO_ADDR
// SetSide ( i , j ) ;
28565: LD_VAR 0 2
28569: PPUSH
28570: LD_VAR 0 3
28574: PPUSH
28575: CALL_OW 235
// end ;
28579: GO 28502
28581: POP
28582: POP
// end ;
28583: LD_VAR 0 1
28587: RET
// export function hHackFog ; begin
28588: LD_INT 0
28590: PPUSH
// FogOff ( true ) ;
28591: LD_INT 1
28593: PPUSH
28594: CALL_OW 344
// end ;
28598: LD_VAR 0 1
28602: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28603: LD_INT 0
28605: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_VAR 0 2
28615: PPUSH
28616: LD_VAR 0 3
28620: PPUSH
28621: LD_INT 1
28623: PPUSH
28624: LD_INT 1
28626: PPUSH
28627: CALL_OW 483
// CenterOnXY ( x , y ) ;
28631: LD_VAR 0 2
28635: PPUSH
28636: LD_VAR 0 3
28640: PPUSH
28641: CALL_OW 84
// end ;
28645: LD_VAR 0 4
28649: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28650: LD_INT 0
28652: PPUSH
28653: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28654: LD_VAR 0 1
28658: NOT
28659: PUSH
28660: LD_VAR 0 2
28664: PPUSH
28665: LD_VAR 0 3
28669: PPUSH
28670: CALL_OW 488
28674: NOT
28675: OR
28676: PUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 266
28686: PUSH
28687: LD_INT 3
28689: NONEQUAL
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 247
28700: PUSH
28701: LD_INT 1
28703: EQUAL
28704: NOT
28705: AND
28706: OR
28707: IFFALSE 28711
// exit ;
28709: GO 28860
// if GetType ( factory ) = unit_human then
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 247
28720: PUSH
28721: LD_INT 1
28723: EQUAL
28724: IFFALSE 28741
// factory := IsInUnit ( factory ) ;
28726: LD_ADDR_VAR 0 1
28730: PUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 310
28740: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28741: LD_VAR 0 1
28745: PPUSH
28746: CALL_OW 266
28750: PUSH
28751: LD_INT 3
28753: NONEQUAL
28754: IFFALSE 28758
// exit ;
28756: GO 28860
// if HexInfo ( x , y ) = factory then
28758: LD_VAR 0 2
28762: PPUSH
28763: LD_VAR 0 3
28767: PPUSH
28768: CALL_OW 428
28772: PUSH
28773: LD_VAR 0 1
28777: EQUAL
28778: IFFALSE 28805
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28780: LD_ADDR_EXP 105
28784: PUSH
28785: LD_EXP 105
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: LD_INT 0
28797: PPUSH
28798: CALL_OW 1
28802: ST_TO_ADDR
28803: GO 28856
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28805: LD_ADDR_EXP 105
28809: PUSH
28810: LD_EXP 105
28814: PPUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: LD_VAR 0 1
28824: PPUSH
28825: CALL_OW 255
28829: PUSH
28830: LD_VAR 0 1
28834: PUSH
28835: LD_VAR 0 2
28839: PUSH
28840: LD_VAR 0 3
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: PPUSH
28851: CALL_OW 1
28855: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28856: CALL 28865 0 0
// end ;
28860: LD_VAR 0 4
28864: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28865: LD_INT 0
28867: PPUSH
28868: PPUSH
28869: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28870: LD_STRING resetFactoryWaypoint();
28872: PPUSH
28873: CALL_OW 559
// if factoryWaypoints then
28877: LD_EXP 105
28881: IFFALSE 29007
// begin list := PrepareArray ( factoryWaypoints ) ;
28883: LD_ADDR_VAR 0 3
28887: PUSH
28888: LD_EXP 105
28892: PPUSH
28893: CALL 71187 0 1
28897: ST_TO_ADDR
// for i := 1 to list do
28898: LD_ADDR_VAR 0 2
28902: PUSH
28903: DOUBLE
28904: LD_INT 1
28906: DEC
28907: ST_TO_ADDR
28908: LD_VAR 0 3
28912: PUSH
28913: FOR_TO
28914: IFFALSE 29005
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28916: LD_STRING setFactoryWaypointXY(
28918: PUSH
28919: LD_VAR 0 3
28923: PUSH
28924: LD_VAR 0 2
28928: ARRAY
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: STR
28934: PUSH
28935: LD_STRING ,
28937: STR
28938: PUSH
28939: LD_VAR 0 3
28943: PUSH
28944: LD_VAR 0 2
28948: ARRAY
28949: PUSH
28950: LD_INT 2
28952: ARRAY
28953: STR
28954: PUSH
28955: LD_STRING ,
28957: STR
28958: PUSH
28959: LD_VAR 0 3
28963: PUSH
28964: LD_VAR 0 2
28968: ARRAY
28969: PUSH
28970: LD_INT 3
28972: ARRAY
28973: STR
28974: PUSH
28975: LD_STRING ,
28977: STR
28978: PUSH
28979: LD_VAR 0 3
28983: PUSH
28984: LD_VAR 0 2
28988: ARRAY
28989: PUSH
28990: LD_INT 4
28992: ARRAY
28993: STR
28994: PUSH
28995: LD_STRING )
28997: STR
28998: PPUSH
28999: CALL_OW 559
29003: GO 28913
29005: POP
29006: POP
// end ; end ;
29007: LD_VAR 0 1
29011: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29012: LD_INT 0
29014: PPUSH
// if HexInfo ( x , y ) = warehouse then
29015: LD_VAR 0 2
29019: PPUSH
29020: LD_VAR 0 3
29024: PPUSH
29025: CALL_OW 428
29029: PUSH
29030: LD_VAR 0 1
29034: EQUAL
29035: IFFALSE 29062
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29037: LD_ADDR_EXP 106
29041: PUSH
29042: LD_EXP 106
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: LD_INT 0
29054: PPUSH
29055: CALL_OW 1
29059: ST_TO_ADDR
29060: GO 29113
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29062: LD_ADDR_EXP 106
29066: PUSH
29067: LD_EXP 106
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 255
29086: PUSH
29087: LD_VAR 0 1
29091: PUSH
29092: LD_VAR 0 2
29096: PUSH
29097: LD_VAR 0 3
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: PPUSH
29108: CALL_OW 1
29112: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29113: CALL 29122 0 0
// end ;
29117: LD_VAR 0 4
29121: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29122: LD_INT 0
29124: PPUSH
29125: PPUSH
29126: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29127: LD_STRING resetWarehouseGatheringPoints();
29129: PPUSH
29130: CALL_OW 559
// if warehouseGatheringPoints then
29134: LD_EXP 106
29138: IFFALSE 29264
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29140: LD_ADDR_VAR 0 3
29144: PUSH
29145: LD_EXP 106
29149: PPUSH
29150: CALL 71187 0 1
29154: ST_TO_ADDR
// for i := 1 to list do
29155: LD_ADDR_VAR 0 2
29159: PUSH
29160: DOUBLE
29161: LD_INT 1
29163: DEC
29164: ST_TO_ADDR
29165: LD_VAR 0 3
29169: PUSH
29170: FOR_TO
29171: IFFALSE 29262
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29173: LD_STRING setWarehouseGatheringPointXY(
29175: PUSH
29176: LD_VAR 0 3
29180: PUSH
29181: LD_VAR 0 2
29185: ARRAY
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: STR
29191: PUSH
29192: LD_STRING ,
29194: STR
29195: PUSH
29196: LD_VAR 0 3
29200: PUSH
29201: LD_VAR 0 2
29205: ARRAY
29206: PUSH
29207: LD_INT 2
29209: ARRAY
29210: STR
29211: PUSH
29212: LD_STRING ,
29214: STR
29215: PUSH
29216: LD_VAR 0 3
29220: PUSH
29221: LD_VAR 0 2
29225: ARRAY
29226: PUSH
29227: LD_INT 3
29229: ARRAY
29230: STR
29231: PUSH
29232: LD_STRING ,
29234: STR
29235: PUSH
29236: LD_VAR 0 3
29240: PUSH
29241: LD_VAR 0 2
29245: ARRAY
29246: PUSH
29247: LD_INT 4
29249: ARRAY
29250: STR
29251: PUSH
29252: LD_STRING )
29254: STR
29255: PPUSH
29256: CALL_OW 559
29260: GO 29170
29262: POP
29263: POP
// end ; end ;
29264: LD_VAR 0 1
29268: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29269: LD_EXP 106
29273: IFFALSE 29958
29275: GO 29277
29277: DISABLE
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// begin enable ;
29289: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_EXP 106
29299: PPUSH
29300: CALL 71187 0 1
29304: ST_TO_ADDR
// if not list then
29305: LD_VAR 0 3
29309: NOT
29310: IFFALSE 29314
// exit ;
29312: GO 29958
// for i := 1 to list do
29314: LD_ADDR_VAR 0 1
29318: PUSH
29319: DOUBLE
29320: LD_INT 1
29322: DEC
29323: ST_TO_ADDR
29324: LD_VAR 0 3
29328: PUSH
29329: FOR_TO
29330: IFFALSE 29956
// begin depot := list [ i ] [ 2 ] ;
29332: LD_ADDR_VAR 0 8
29336: PUSH
29337: LD_VAR 0 3
29341: PUSH
29342: LD_VAR 0 1
29346: ARRAY
29347: PUSH
29348: LD_INT 2
29350: ARRAY
29351: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29352: LD_ADDR_VAR 0 5
29356: PUSH
29357: LD_VAR 0 3
29361: PUSH
29362: LD_VAR 0 1
29366: ARRAY
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29372: LD_VAR 0 8
29376: PPUSH
29377: CALL_OW 301
29381: PUSH
29382: LD_VAR 0 5
29386: PUSH
29387: LD_VAR 0 8
29391: PPUSH
29392: CALL_OW 255
29396: NONEQUAL
29397: OR
29398: IFFALSE 29427
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29400: LD_ADDR_EXP 106
29404: PUSH
29405: LD_EXP 106
29409: PPUSH
29410: LD_VAR 0 8
29414: PPUSH
29415: LD_INT 0
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
// exit ;
29423: POP
29424: POP
29425: GO 29958
// end ; x := list [ i ] [ 3 ] ;
29427: LD_ADDR_VAR 0 6
29431: PUSH
29432: LD_VAR 0 3
29436: PUSH
29437: LD_VAR 0 1
29441: ARRAY
29442: PUSH
29443: LD_INT 3
29445: ARRAY
29446: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29447: LD_ADDR_VAR 0 7
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_VAR 0 1
29461: ARRAY
29462: PUSH
29463: LD_INT 4
29465: ARRAY
29466: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29467: LD_ADDR_VAR 0 9
29471: PUSH
29472: LD_VAR 0 6
29476: PPUSH
29477: LD_VAR 0 7
29481: PPUSH
29482: LD_INT 16
29484: PPUSH
29485: CALL 69775 0 3
29489: ST_TO_ADDR
// if not cratesNearbyPoint then
29490: LD_VAR 0 9
29494: NOT
29495: IFFALSE 29501
// exit ;
29497: POP
29498: POP
29499: GO 29958
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29501: LD_ADDR_VAR 0 4
29505: PUSH
29506: LD_INT 22
29508: PUSH
29509: LD_VAR 0 5
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: LD_INT 60
29523: PUSH
29524: EMPTY
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 91
29533: PUSH
29534: LD_VAR 0 8
29538: PUSH
29539: LD_INT 6
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 25
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 25
29562: PUSH
29563: LD_INT 16
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: PPUSH
29581: CALL_OW 69
29585: PUSH
29586: LD_VAR 0 8
29590: PPUSH
29591: CALL_OW 313
29595: PPUSH
29596: LD_INT 3
29598: PUSH
29599: LD_INT 60
29601: PUSH
29602: EMPTY
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 25
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 25
29624: PUSH
29625: LD_INT 16
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PPUSH
29641: CALL_OW 72
29645: UNION
29646: ST_TO_ADDR
// if tmp then
29647: LD_VAR 0 4
29651: IFFALSE 29731
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29653: LD_ADDR_VAR 0 4
29657: PUSH
29658: LD_VAR 0 4
29662: PPUSH
29663: LD_INT 3
29665: PPUSH
29666: CALL 67744 0 2
29670: ST_TO_ADDR
// for j in tmp do
29671: LD_ADDR_VAR 0 2
29675: PUSH
29676: LD_VAR 0 4
29680: PUSH
29681: FOR_IN
29682: IFFALSE 29725
// begin if IsInUnit ( j ) then
29684: LD_VAR 0 2
29688: PPUSH
29689: CALL_OW 310
29693: IFFALSE 29704
// ComExit ( j ) ;
29695: LD_VAR 0 2
29699: PPUSH
29700: CALL 67827 0 1
// AddComCollect ( j , x , y ) ;
29704: LD_VAR 0 2
29708: PPUSH
29709: LD_VAR 0 6
29713: PPUSH
29714: LD_VAR 0 7
29718: PPUSH
29719: CALL_OW 177
// end ;
29723: GO 29681
29725: POP
29726: POP
// exit ;
29727: POP
29728: POP
29729: GO 29958
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29731: LD_ADDR_VAR 0 4
29735: PUSH
29736: LD_INT 22
29738: PUSH
29739: LD_VAR 0 5
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 91
29750: PUSH
29751: LD_VAR 0 8
29755: PUSH
29756: LD_INT 8
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: LD_INT 34
29769: PUSH
29770: LD_INT 12
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 34
29779: PUSH
29780: LD_INT 51
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 34
29789: PUSH
29790: LD_INT 32
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 34
29799: PUSH
29800: LD_INT 89
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: PPUSH
29819: CALL_OW 69
29823: ST_TO_ADDR
// if tmp then
29824: LD_VAR 0 4
29828: IFFALSE 29954
// begin for j in tmp do
29830: LD_ADDR_VAR 0 2
29834: PUSH
29835: LD_VAR 0 4
29839: PUSH
29840: FOR_IN
29841: IFFALSE 29952
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29843: LD_VAR 0 2
29847: PPUSH
29848: CALL_OW 262
29852: PUSH
29853: LD_INT 3
29855: EQUAL
29856: PUSH
29857: LD_VAR 0 2
29861: PPUSH
29862: CALL_OW 261
29866: PUSH
29867: LD_INT 20
29869: GREATER
29870: OR
29871: PUSH
29872: LD_VAR 0 2
29876: PPUSH
29877: CALL_OW 314
29881: NOT
29882: AND
29883: PUSH
29884: LD_VAR 0 2
29888: PPUSH
29889: CALL_OW 263
29893: PUSH
29894: LD_INT 1
29896: NONEQUAL
29897: PUSH
29898: LD_VAR 0 2
29902: PPUSH
29903: CALL_OW 311
29907: OR
29908: AND
29909: IFFALSE 29950
// begin ComCollect ( j , x , y ) ;
29911: LD_VAR 0 2
29915: PPUSH
29916: LD_VAR 0 6
29920: PPUSH
29921: LD_VAR 0 7
29925: PPUSH
29926: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29930: LD_VAR 0 2
29934: PPUSH
29935: LD_VAR 0 8
29939: PPUSH
29940: CALL_OW 172
// exit ;
29944: POP
29945: POP
29946: POP
29947: POP
29948: GO 29958
// end ;
29950: GO 29840
29952: POP
29953: POP
// end ; end ;
29954: GO 29329
29956: POP
29957: POP
// end ; end_of_file end_of_file
29958: PPOPN 9
29960: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29961: LD_INT 0
29963: PPUSH
29964: PPUSH
// if exist_mode then
29965: LD_VAR 0 2
29969: IFFALSE 29994
// unit := CreateCharacter ( prefix & ident ) else
29971: LD_ADDR_VAR 0 5
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: LD_VAR 0 1
29985: STR
29986: PPUSH
29987: CALL_OW 34
29991: ST_TO_ADDR
29992: GO 30009
// unit := NewCharacter ( ident ) ;
29994: LD_ADDR_VAR 0 5
29998: PUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 25
30008: ST_TO_ADDR
// result := unit ;
30009: LD_ADDR_VAR 0 4
30013: PUSH
30014: LD_VAR 0 5
30018: ST_TO_ADDR
// end ;
30019: LD_VAR 0 4
30023: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30024: LD_INT 0
30026: PPUSH
30027: PPUSH
// if not side or not nation then
30028: LD_VAR 0 1
30032: NOT
30033: PUSH
30034: LD_VAR 0 2
30038: NOT
30039: OR
30040: IFFALSE 30044
// exit ;
30042: GO 30812
// case nation of nation_american :
30044: LD_VAR 0 2
30048: PUSH
30049: LD_INT 1
30051: DOUBLE
30052: EQUAL
30053: IFTRUE 30057
30055: GO 30271
30057: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30058: LD_ADDR_VAR 0 4
30062: PUSH
30063: LD_INT 35
30065: PUSH
30066: LD_INT 45
30068: PUSH
30069: LD_INT 46
30071: PUSH
30072: LD_INT 47
30074: PUSH
30075: LD_INT 82
30077: PUSH
30078: LD_INT 83
30080: PUSH
30081: LD_INT 84
30083: PUSH
30084: LD_INT 85
30086: PUSH
30087: LD_INT 86
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: LD_INT 6
30098: PUSH
30099: LD_INT 15
30101: PUSH
30102: LD_INT 16
30104: PUSH
30105: LD_INT 7
30107: PUSH
30108: LD_INT 12
30110: PUSH
30111: LD_INT 13
30113: PUSH
30114: LD_INT 10
30116: PUSH
30117: LD_INT 14
30119: PUSH
30120: LD_INT 20
30122: PUSH
30123: LD_INT 21
30125: PUSH
30126: LD_INT 22
30128: PUSH
30129: LD_INT 25
30131: PUSH
30132: LD_INT 32
30134: PUSH
30135: LD_INT 27
30137: PUSH
30138: LD_INT 36
30140: PUSH
30141: LD_INT 69
30143: PUSH
30144: LD_INT 39
30146: PUSH
30147: LD_INT 34
30149: PUSH
30150: LD_INT 40
30152: PUSH
30153: LD_INT 48
30155: PUSH
30156: LD_INT 49
30158: PUSH
30159: LD_INT 50
30161: PUSH
30162: LD_INT 51
30164: PUSH
30165: LD_INT 52
30167: PUSH
30168: LD_INT 53
30170: PUSH
30171: LD_INT 54
30173: PUSH
30174: LD_INT 55
30176: PUSH
30177: LD_INT 56
30179: PUSH
30180: LD_INT 57
30182: PUSH
30183: LD_INT 58
30185: PUSH
30186: LD_INT 59
30188: PUSH
30189: LD_INT 60
30191: PUSH
30192: LD_INT 61
30194: PUSH
30195: LD_INT 62
30197: PUSH
30198: LD_INT 80
30200: PUSH
30201: LD_INT 82
30203: PUSH
30204: LD_INT 83
30206: PUSH
30207: LD_INT 84
30209: PUSH
30210: LD_INT 85
30212: PUSH
30213: LD_INT 86
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
30269: GO 30736
30271: LD_INT 2
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30505
30279: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30280: LD_ADDR_VAR 0 4
30284: PUSH
30285: LD_INT 35
30287: PUSH
30288: LD_INT 45
30290: PUSH
30291: LD_INT 46
30293: PUSH
30294: LD_INT 47
30296: PUSH
30297: LD_INT 82
30299: PUSH
30300: LD_INT 83
30302: PUSH
30303: LD_INT 84
30305: PUSH
30306: LD_INT 85
30308: PUSH
30309: LD_INT 87
30311: PUSH
30312: LD_INT 70
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 11
30320: PUSH
30321: LD_INT 3
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: LD_INT 5
30329: PUSH
30330: LD_INT 6
30332: PUSH
30333: LD_INT 15
30335: PUSH
30336: LD_INT 18
30338: PUSH
30339: LD_INT 7
30341: PUSH
30342: LD_INT 17
30344: PUSH
30345: LD_INT 8
30347: PUSH
30348: LD_INT 20
30350: PUSH
30351: LD_INT 21
30353: PUSH
30354: LD_INT 22
30356: PUSH
30357: LD_INT 72
30359: PUSH
30360: LD_INT 26
30362: PUSH
30363: LD_INT 69
30365: PUSH
30366: LD_INT 39
30368: PUSH
30369: LD_INT 40
30371: PUSH
30372: LD_INT 41
30374: PUSH
30375: LD_INT 42
30377: PUSH
30378: LD_INT 43
30380: PUSH
30381: LD_INT 48
30383: PUSH
30384: LD_INT 49
30386: PUSH
30387: LD_INT 50
30389: PUSH
30390: LD_INT 51
30392: PUSH
30393: LD_INT 52
30395: PUSH
30396: LD_INT 53
30398: PUSH
30399: LD_INT 54
30401: PUSH
30402: LD_INT 55
30404: PUSH
30405: LD_INT 56
30407: PUSH
30408: LD_INT 60
30410: PUSH
30411: LD_INT 61
30413: PUSH
30414: LD_INT 62
30416: PUSH
30417: LD_INT 66
30419: PUSH
30420: LD_INT 67
30422: PUSH
30423: LD_INT 68
30425: PUSH
30426: LD_INT 81
30428: PUSH
30429: LD_INT 82
30431: PUSH
30432: LD_INT 83
30434: PUSH
30435: LD_INT 84
30437: PUSH
30438: LD_INT 85
30440: PUSH
30441: LD_INT 87
30443: PUSH
30444: LD_INT 88
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
30503: GO 30736
30505: LD_INT 3
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30735
30513: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30514: LD_ADDR_VAR 0 4
30518: PUSH
30519: LD_INT 46
30521: PUSH
30522: LD_INT 47
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 82
30533: PUSH
30534: LD_INT 83
30536: PUSH
30537: LD_INT 84
30539: PUSH
30540: LD_INT 85
30542: PUSH
30543: LD_INT 86
30545: PUSH
30546: LD_INT 11
30548: PUSH
30549: LD_INT 9
30551: PUSH
30552: LD_INT 20
30554: PUSH
30555: LD_INT 19
30557: PUSH
30558: LD_INT 21
30560: PUSH
30561: LD_INT 24
30563: PUSH
30564: LD_INT 22
30566: PUSH
30567: LD_INT 25
30569: PUSH
30570: LD_INT 28
30572: PUSH
30573: LD_INT 29
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: LD_INT 31
30581: PUSH
30582: LD_INT 37
30584: PUSH
30585: LD_INT 38
30587: PUSH
30588: LD_INT 32
30590: PUSH
30591: LD_INT 27
30593: PUSH
30594: LD_INT 33
30596: PUSH
30597: LD_INT 69
30599: PUSH
30600: LD_INT 39
30602: PUSH
30603: LD_INT 34
30605: PUSH
30606: LD_INT 40
30608: PUSH
30609: LD_INT 71
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 44
30617: PUSH
30618: LD_INT 48
30620: PUSH
30621: LD_INT 49
30623: PUSH
30624: LD_INT 50
30626: PUSH
30627: LD_INT 51
30629: PUSH
30630: LD_INT 52
30632: PUSH
30633: LD_INT 53
30635: PUSH
30636: LD_INT 54
30638: PUSH
30639: LD_INT 55
30641: PUSH
30642: LD_INT 56
30644: PUSH
30645: LD_INT 57
30647: PUSH
30648: LD_INT 58
30650: PUSH
30651: LD_INT 59
30653: PUSH
30654: LD_INT 63
30656: PUSH
30657: LD_INT 64
30659: PUSH
30660: LD_INT 65
30662: PUSH
30663: LD_INT 82
30665: PUSH
30666: LD_INT 83
30668: PUSH
30669: LD_INT 84
30671: PUSH
30672: LD_INT 85
30674: PUSH
30675: LD_INT 86
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
30733: GO 30736
30735: POP
// if state > - 1 and state < 3 then
30736: LD_VAR 0 3
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: GREATER
30745: PUSH
30746: LD_VAR 0 3
30750: PUSH
30751: LD_INT 3
30753: LESS
30754: AND
30755: IFFALSE 30812
// for i in result do
30757: LD_ADDR_VAR 0 5
30761: PUSH
30762: LD_VAR 0 4
30766: PUSH
30767: FOR_IN
30768: IFFALSE 30810
// if GetTech ( i , side ) <> state then
30770: LD_VAR 0 5
30774: PPUSH
30775: LD_VAR 0 1
30779: PPUSH
30780: CALL_OW 321
30784: PUSH
30785: LD_VAR 0 3
30789: NONEQUAL
30790: IFFALSE 30808
// result := result diff i ;
30792: LD_ADDR_VAR 0 4
30796: PUSH
30797: LD_VAR 0 4
30801: PUSH
30802: LD_VAR 0 5
30806: DIFF
30807: ST_TO_ADDR
30808: GO 30767
30810: POP
30811: POP
// end ;
30812: LD_VAR 0 4
30816: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30817: LD_INT 0
30819: PPUSH
30820: PPUSH
30821: PPUSH
// result := true ;
30822: LD_ADDR_VAR 0 3
30826: PUSH
30827: LD_INT 1
30829: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30830: LD_ADDR_VAR 0 5
30834: PUSH
30835: LD_VAR 0 2
30839: PPUSH
30840: CALL_OW 480
30844: ST_TO_ADDR
// if not tmp then
30845: LD_VAR 0 5
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 30903
// for i in tmp do
30854: LD_ADDR_VAR 0 4
30858: PUSH
30859: LD_VAR 0 5
30863: PUSH
30864: FOR_IN
30865: IFFALSE 30901
// if GetTech ( i , side ) <> state_researched then
30867: LD_VAR 0 4
30871: PPUSH
30872: LD_VAR 0 1
30876: PPUSH
30877: CALL_OW 321
30881: PUSH
30882: LD_INT 2
30884: NONEQUAL
30885: IFFALSE 30899
// begin result := false ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 0
30894: ST_TO_ADDR
// exit ;
30895: POP
30896: POP
30897: GO 30903
// end ;
30899: GO 30864
30901: POP
30902: POP
// end ;
30903: LD_VAR 0 3
30907: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30923: LD_VAR 0 1
30927: NOT
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 257
30938: PUSH
30939: LD_INT 9
30941: NONEQUAL
30942: OR
30943: IFFALSE 30947
// exit ;
30945: GO 31520
// side := GetSide ( unit ) ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 255
30961: ST_TO_ADDR
// tech_space := tech_spacanom ;
30962: LD_ADDR_VAR 0 12
30966: PUSH
30967: LD_INT 29
30969: ST_TO_ADDR
// tech_time := tech_taurad ;
30970: LD_ADDR_VAR 0 13
30974: PUSH
30975: LD_INT 28
30977: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30978: LD_ADDR_VAR 0 11
30982: PUSH
30983: LD_VAR 0 1
30987: PPUSH
30988: CALL_OW 310
30992: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30993: LD_VAR 0 11
30997: PPUSH
30998: CALL_OW 247
31002: PUSH
31003: LD_INT 2
31005: EQUAL
31006: IFFALSE 31010
// exit ;
31008: GO 31520
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31010: LD_ADDR_VAR 0 8
31014: PUSH
31015: LD_INT 81
31017: PUSH
31018: LD_VAR 0 9
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: LD_INT 21
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PPUSH
31048: CALL_OW 69
31052: ST_TO_ADDR
// if not tmp then
31053: LD_VAR 0 8
31057: NOT
31058: IFFALSE 31062
// exit ;
31060: GO 31520
// if in_unit then
31062: LD_VAR 0 11
31066: IFFALSE 31090
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31068: LD_ADDR_VAR 0 10
31072: PUSH
31073: LD_VAR 0 8
31077: PPUSH
31078: LD_VAR 0 11
31082: PPUSH
31083: CALL_OW 74
31087: ST_TO_ADDR
31088: GO 31110
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31090: LD_ADDR_VAR 0 10
31094: PUSH
31095: LD_VAR 0 8
31099: PPUSH
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 74
31109: ST_TO_ADDR
// if not enemy then
31110: LD_VAR 0 10
31114: NOT
31115: IFFALSE 31119
// exit ;
31117: GO 31520
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31119: LD_VAR 0 11
31123: PUSH
31124: LD_VAR 0 11
31128: PPUSH
31129: LD_VAR 0 10
31133: PPUSH
31134: CALL_OW 296
31138: PUSH
31139: LD_INT 13
31141: GREATER
31142: AND
31143: PUSH
31144: LD_VAR 0 1
31148: PPUSH
31149: LD_VAR 0 10
31153: PPUSH
31154: CALL_OW 296
31158: PUSH
31159: LD_INT 12
31161: GREATER
31162: OR
31163: IFFALSE 31167
// exit ;
31165: GO 31520
// missile := [ 1 ] ;
31167: LD_ADDR_VAR 0 14
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: EMPTY
31176: LIST
31177: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31178: LD_VAR 0 9
31182: PPUSH
31183: LD_VAR 0 12
31187: PPUSH
31188: CALL_OW 325
31192: IFFALSE 31221
// missile := Replace ( missile , missile + 1 , 2 ) ;
31194: LD_ADDR_VAR 0 14
31198: PUSH
31199: LD_VAR 0 14
31203: PPUSH
31204: LD_VAR 0 14
31208: PUSH
31209: LD_INT 1
31211: PLUS
31212: PPUSH
31213: LD_INT 2
31215: PPUSH
31216: CALL_OW 1
31220: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31221: LD_VAR 0 9
31225: PPUSH
31226: LD_VAR 0 13
31230: PPUSH
31231: CALL_OW 325
31235: PUSH
31236: LD_VAR 0 10
31240: PPUSH
31241: CALL_OW 255
31245: PPUSH
31246: LD_VAR 0 13
31250: PPUSH
31251: CALL_OW 325
31255: NOT
31256: AND
31257: IFFALSE 31286
// missile := Replace ( missile , missile + 1 , 3 ) ;
31259: LD_ADDR_VAR 0 14
31263: PUSH
31264: LD_VAR 0 14
31268: PPUSH
31269: LD_VAR 0 14
31273: PUSH
31274: LD_INT 1
31276: PLUS
31277: PPUSH
31278: LD_INT 3
31280: PPUSH
31281: CALL_OW 1
31285: ST_TO_ADDR
// if missile < 2 then
31286: LD_VAR 0 14
31290: PUSH
31291: LD_INT 2
31293: LESS
31294: IFFALSE 31298
// exit ;
31296: GO 31520
// x := GetX ( enemy ) ;
31298: LD_ADDR_VAR 0 4
31302: PUSH
31303: LD_VAR 0 10
31307: PPUSH
31308: CALL_OW 250
31312: ST_TO_ADDR
// y := GetY ( enemy ) ;
31313: LD_ADDR_VAR 0 5
31317: PUSH
31318: LD_VAR 0 10
31322: PPUSH
31323: CALL_OW 251
31327: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31328: LD_ADDR_VAR 0 6
31332: PUSH
31333: LD_VAR 0 4
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PPUSH
31342: LD_INT 1
31344: PPUSH
31345: CALL_OW 12
31349: PLUS
31350: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31351: LD_ADDR_VAR 0 7
31355: PUSH
31356: LD_VAR 0 5
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PPUSH
31365: LD_INT 1
31367: PPUSH
31368: CALL_OW 12
31372: PLUS
31373: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31374: LD_VAR 0 6
31378: PPUSH
31379: LD_VAR 0 7
31383: PPUSH
31384: CALL_OW 488
31388: NOT
31389: IFFALSE 31411
// begin _x := x ;
31391: LD_ADDR_VAR 0 6
31395: PUSH
31396: LD_VAR 0 4
31400: ST_TO_ADDR
// _y := y ;
31401: LD_ADDR_VAR 0 7
31405: PUSH
31406: LD_VAR 0 5
31410: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 1
31418: PPUSH
31419: LD_VAR 0 14
31423: PPUSH
31424: CALL_OW 12
31428: ST_TO_ADDR
// case i of 1 :
31429: LD_VAR 0 3
31433: PUSH
31434: LD_INT 1
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31459
31442: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31443: LD_VAR 0 1
31447: PPUSH
31448: LD_VAR 0 10
31452: PPUSH
31453: CALL_OW 115
31457: GO 31520
31459: LD_INT 2
31461: DOUBLE
31462: EQUAL
31463: IFTRUE 31467
31465: GO 31489
31467: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31468: LD_VAR 0 1
31472: PPUSH
31473: LD_VAR 0 6
31477: PPUSH
31478: LD_VAR 0 7
31482: PPUSH
31483: CALL_OW 153
31487: GO 31520
31489: LD_INT 3
31491: DOUBLE
31492: EQUAL
31493: IFTRUE 31497
31495: GO 31519
31497: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_VAR 0 6
31507: PPUSH
31508: LD_VAR 0 7
31512: PPUSH
31513: CALL_OW 154
31517: GO 31520
31519: POP
// end ;
31520: LD_VAR 0 2
31524: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
// if not unit or not building then
31533: LD_VAR 0 1
31537: NOT
31538: PUSH
31539: LD_VAR 0 2
31543: NOT
31544: OR
31545: IFFALSE 31549
// exit ;
31547: GO 31707
// x := GetX ( building ) ;
31549: LD_ADDR_VAR 0 5
31553: PUSH
31554: LD_VAR 0 2
31558: PPUSH
31559: CALL_OW 250
31563: ST_TO_ADDR
// y := GetY ( building ) ;
31564: LD_ADDR_VAR 0 6
31568: PUSH
31569: LD_VAR 0 2
31573: PPUSH
31574: CALL_OW 251
31578: ST_TO_ADDR
// for i = 0 to 5 do
31579: LD_ADDR_VAR 0 4
31583: PUSH
31584: DOUBLE
31585: LD_INT 0
31587: DEC
31588: ST_TO_ADDR
31589: LD_INT 5
31591: PUSH
31592: FOR_TO
31593: IFFALSE 31705
// begin _x := ShiftX ( x , i , 3 ) ;
31595: LD_ADDR_VAR 0 7
31599: PUSH
31600: LD_VAR 0 5
31604: PPUSH
31605: LD_VAR 0 4
31609: PPUSH
31610: LD_INT 3
31612: PPUSH
31613: CALL_OW 272
31617: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31618: LD_ADDR_VAR 0 8
31622: PUSH
31623: LD_VAR 0 6
31627: PPUSH
31628: LD_VAR 0 4
31632: PPUSH
31633: LD_INT 3
31635: PPUSH
31636: CALL_OW 273
31640: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31641: LD_VAR 0 7
31645: PPUSH
31646: LD_VAR 0 8
31650: PPUSH
31651: CALL_OW 488
31655: NOT
31656: IFFALSE 31660
// continue ;
31658: GO 31592
// if HexInfo ( _x , _y ) = 0 then
31660: LD_VAR 0 7
31664: PPUSH
31665: LD_VAR 0 8
31669: PPUSH
31670: CALL_OW 428
31674: PUSH
31675: LD_INT 0
31677: EQUAL
31678: IFFALSE 31703
// begin ComMoveXY ( unit , _x , _y ) ;
31680: LD_VAR 0 1
31684: PPUSH
31685: LD_VAR 0 7
31689: PPUSH
31690: LD_VAR 0 8
31694: PPUSH
31695: CALL_OW 111
// exit ;
31699: POP
31700: POP
31701: GO 31707
// end ; end ;
31703: GO 31592
31705: POP
31706: POP
// end ;
31707: LD_VAR 0 3
31711: RET
// export function ScanBase ( side , base_area ) ; begin
31712: LD_INT 0
31714: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_INT 81
31727: PUSH
31728: LD_VAR 0 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PPUSH
31737: CALL_OW 70
31741: ST_TO_ADDR
// end ;
31742: LD_VAR 0 3
31746: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
// result := false ;
31753: LD_ADDR_VAR 0 2
31757: PUSH
31758: LD_INT 0
31760: ST_TO_ADDR
// side := GetSide ( unit ) ;
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_VAR 0 1
31770: PPUSH
31771: CALL_OW 255
31775: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31776: LD_ADDR_VAR 0 4
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: CALL_OW 248
31790: ST_TO_ADDR
// case nat of 1 :
31791: LD_VAR 0 4
31795: PUSH
31796: LD_INT 1
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31804
31802: GO 31815
31804: POP
// tech := tech_lassight ; 2 :
31805: LD_ADDR_VAR 0 5
31809: PUSH
31810: LD_INT 12
31812: ST_TO_ADDR
31813: GO 31854
31815: LD_INT 2
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31834
31823: POP
// tech := tech_mortar ; 3 :
31824: LD_ADDR_VAR 0 5
31828: PUSH
31829: LD_INT 41
31831: ST_TO_ADDR
31832: GO 31854
31834: LD_INT 3
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31853
31842: POP
// tech := tech_bazooka ; end ;
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_INT 44
31850: ST_TO_ADDR
31851: GO 31854
31853: POP
// if Researched ( side , tech ) then
31854: LD_VAR 0 3
31858: PPUSH
31859: LD_VAR 0 5
31863: PPUSH
31864: CALL_OW 325
31868: IFFALSE 31895
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31870: LD_ADDR_VAR 0 2
31874: PUSH
31875: LD_INT 5
31877: PUSH
31878: LD_INT 8
31880: PUSH
31881: LD_INT 9
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: PUSH
31889: LD_VAR 0 4
31893: ARRAY
31894: ST_TO_ADDR
// end ;
31895: LD_VAR 0 2
31899: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31900: LD_INT 0
31902: PPUSH
31903: PPUSH
31904: PPUSH
// if not mines then
31905: LD_VAR 0 2
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 32058
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31914: LD_ADDR_VAR 0 5
31918: PUSH
31919: LD_INT 81
31921: PUSH
31922: LD_VAR 0 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 3
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 3
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PPUSH
31952: CALL_OW 69
31956: ST_TO_ADDR
// for i in mines do
31957: LD_ADDR_VAR 0 4
31961: PUSH
31962: LD_VAR 0 2
31966: PUSH
31967: FOR_IN
31968: IFFALSE 32056
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31970: LD_VAR 0 4
31974: PUSH
31975: LD_INT 1
31977: ARRAY
31978: PPUSH
31979: LD_VAR 0 4
31983: PUSH
31984: LD_INT 2
31986: ARRAY
31987: PPUSH
31988: CALL_OW 458
31992: NOT
31993: IFFALSE 31997
// continue ;
31995: GO 31967
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31997: LD_VAR 0 4
32001: PUSH
32002: LD_INT 1
32004: ARRAY
32005: PPUSH
32006: LD_VAR 0 4
32010: PUSH
32011: LD_INT 2
32013: ARRAY
32014: PPUSH
32015: CALL_OW 428
32019: PUSH
32020: LD_VAR 0 5
32024: IN
32025: IFFALSE 32054
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32027: LD_VAR 0 4
32031: PUSH
32032: LD_INT 1
32034: ARRAY
32035: PPUSH
32036: LD_VAR 0 4
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: PPUSH
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 456
// end ;
32054: GO 31967
32056: POP
32057: POP
// end ;
32058: LD_VAR 0 3
32062: RET
// export function Count ( array ) ; var i ; begin
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
// result := 0 ;
32067: LD_ADDR_VAR 0 2
32071: PUSH
32072: LD_INT 0
32074: ST_TO_ADDR
// for i in array do
32075: LD_ADDR_VAR 0 3
32079: PUSH
32080: LD_VAR 0 1
32084: PUSH
32085: FOR_IN
32086: IFFALSE 32110
// if i then
32088: LD_VAR 0 3
32092: IFFALSE 32108
// result := result + 1 ;
32094: LD_ADDR_VAR 0 2
32098: PUSH
32099: LD_VAR 0 2
32103: PUSH
32104: LD_INT 1
32106: PLUS
32107: ST_TO_ADDR
32108: GO 32085
32110: POP
32111: POP
// end ;
32112: LD_VAR 0 2
32116: RET
// export function IsEmpty ( building ) ; begin
32117: LD_INT 0
32119: PPUSH
// if not building then
32120: LD_VAR 0 1
32124: NOT
32125: IFFALSE 32129
// exit ;
32127: GO 32172
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32129: LD_ADDR_VAR 0 2
32133: PUSH
32134: LD_VAR 0 1
32138: PUSH
32139: LD_INT 22
32141: PUSH
32142: LD_VAR 0 1
32146: PPUSH
32147: CALL_OW 255
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 58
32158: PUSH
32159: EMPTY
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 69
32170: IN
32171: ST_TO_ADDR
// end ;
32172: LD_VAR 0 2
32176: RET
// export function IsNotFull ( building ) ; var places ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
// if not building then
32181: LD_VAR 0 1
32185: NOT
32186: IFFALSE 32190
// exit ;
32188: GO 32361
// result := false ;
32190: LD_ADDR_VAR 0 2
32194: PUSH
32195: LD_INT 0
32197: ST_TO_ADDR
// places := 0 ;
32198: LD_ADDR_VAR 0 3
32202: PUSH
32203: LD_INT 0
32205: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32206: LD_VAR 0 1
32210: PPUSH
32211: CALL_OW 266
32215: PUSH
32216: LD_INT 0
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32278
32222: LD_INT 1
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32278
32228: LD_INT 6
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32278
32234: LD_INT 7
32236: DOUBLE
32237: EQUAL
32238: IFTRUE 32278
32240: LD_INT 8
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32278
32246: LD_INT 4
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32278
32252: LD_INT 5
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32278
32258: LD_INT 2
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32278
32264: LD_INT 3
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32278
32270: LD_INT 35
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32289
32278: POP
// places := 6 ; b_bunker , b_breastwork :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 6
32286: ST_TO_ADDR
32287: GO 32334
32289: LD_INT 32
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32303
32295: LD_INT 31
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32314
32303: POP
// places := 1 ; b_control_tower :
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: LD_INT 1
32311: ST_TO_ADDR
32312: GO 32334
32314: LD_INT 36
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32333
32322: POP
// places := 3 ; end ;
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_INT 3
32330: ST_TO_ADDR
32331: GO 32334
32333: POP
// if places then
32334: LD_VAR 0 3
32338: IFFALSE 32361
// result := UnitsInside ( building ) < places ;
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 313
32354: PUSH
32355: LD_VAR 0 3
32359: LESS
32360: ST_TO_ADDR
// end ;
32361: LD_VAR 0 2
32365: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
// tmp := [ ] ;
32372: LD_ADDR_VAR 0 3
32376: PUSH
32377: EMPTY
32378: ST_TO_ADDR
// list := [ ] ;
32379: LD_ADDR_VAR 0 5
32383: PUSH
32384: EMPTY
32385: ST_TO_ADDR
// for i = 16 to 25 do
32386: LD_ADDR_VAR 0 4
32390: PUSH
32391: DOUBLE
32392: LD_INT 16
32394: DEC
32395: ST_TO_ADDR
32396: LD_INT 25
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32473
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_VAR 0 3
32411: PUSH
32412: LD_INT 22
32414: PUSH
32415: LD_VAR 0 1
32419: PPUSH
32420: CALL_OW 255
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 91
32431: PUSH
32432: LD_VAR 0 1
32436: PUSH
32437: LD_INT 6
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: LD_VAR 0 4
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: PUSH
32462: EMPTY
32463: LIST
32464: PPUSH
32465: CALL_OW 69
32469: ADD
32470: ST_TO_ADDR
32471: GO 32399
32473: POP
32474: POP
// for i = 1 to tmp do
32475: LD_ADDR_VAR 0 4
32479: PUSH
32480: DOUBLE
32481: LD_INT 1
32483: DEC
32484: ST_TO_ADDR
32485: LD_VAR 0 3
32489: PUSH
32490: FOR_TO
32491: IFFALSE 32579
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_VAR 0 5
32502: PUSH
32503: LD_VAR 0 3
32507: PUSH
32508: LD_VAR 0 4
32512: ARRAY
32513: PPUSH
32514: CALL_OW 266
32518: PUSH
32519: LD_VAR 0 3
32523: PUSH
32524: LD_VAR 0 4
32528: ARRAY
32529: PPUSH
32530: CALL_OW 250
32534: PUSH
32535: LD_VAR 0 3
32539: PUSH
32540: LD_VAR 0 4
32544: ARRAY
32545: PPUSH
32546: CALL_OW 251
32550: PUSH
32551: LD_VAR 0 3
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: PPUSH
32562: CALL_OW 254
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: ADD
32576: ST_TO_ADDR
32577: GO 32490
32579: POP
32580: POP
// result := list ;
32581: LD_ADDR_VAR 0 2
32585: PUSH
32586: LD_VAR 0 5
32590: ST_TO_ADDR
// end ;
32591: LD_VAR 0 2
32595: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32596: LD_INT 0
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
// if not factory then
32605: LD_VAR 0 1
32609: NOT
32610: IFFALSE 32614
// exit ;
32612: GO 33207
// if control = control_apeman then
32614: LD_VAR 0 4
32618: PUSH
32619: LD_INT 5
32621: EQUAL
32622: IFFALSE 32731
// begin tmp := UnitsInside ( factory ) ;
32624: LD_ADDR_VAR 0 8
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 313
32638: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32639: LD_VAR 0 8
32643: PPUSH
32644: LD_INT 25
32646: PUSH
32647: LD_INT 12
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PPUSH
32654: CALL_OW 72
32658: NOT
32659: IFFALSE 32669
// control := control_manual ;
32661: LD_ADDR_VAR 0 4
32665: PUSH
32666: LD_INT 1
32668: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32669: LD_ADDR_VAR 0 8
32673: PUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: CALL 32366 0 1
32683: ST_TO_ADDR
// if tmp then
32684: LD_VAR 0 8
32688: IFFALSE 32731
// begin for i in tmp do
32690: LD_ADDR_VAR 0 7
32694: PUSH
32695: LD_VAR 0 8
32699: PUSH
32700: FOR_IN
32701: IFFALSE 32729
// if i [ 1 ] = b_ext_radio then
32703: LD_VAR 0 7
32707: PUSH
32708: LD_INT 1
32710: ARRAY
32711: PUSH
32712: LD_INT 22
32714: EQUAL
32715: IFFALSE 32727
// begin control := control_remote ;
32717: LD_ADDR_VAR 0 4
32721: PUSH
32722: LD_INT 2
32724: ST_TO_ADDR
// break ;
32725: GO 32729
// end ;
32727: GO 32700
32729: POP
32730: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32731: LD_VAR 0 1
32735: PPUSH
32736: LD_VAR 0 2
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: CALL_OW 448
32760: IFFALSE 32795
// begin result := [ chassis , engine , control , weapon ] ;
32762: LD_ADDR_VAR 0 6
32766: PUSH
32767: LD_VAR 0 2
32771: PUSH
32772: LD_VAR 0 3
32776: PUSH
32777: LD_VAR 0 4
32781: PUSH
32782: LD_VAR 0 5
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
// exit ;
32793: GO 33207
// end ; _chassis := AvailableChassisList ( factory ) ;
32795: LD_ADDR_VAR 0 9
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 475
32809: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32810: LD_ADDR_VAR 0 11
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 476
32824: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32825: LD_ADDR_VAR 0 12
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 477
32839: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32840: LD_ADDR_VAR 0 10
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 478
32854: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32855: LD_VAR 0 9
32859: NOT
32860: PUSH
32861: LD_VAR 0 11
32865: NOT
32866: OR
32867: PUSH
32868: LD_VAR 0 12
32872: NOT
32873: OR
32874: PUSH
32875: LD_VAR 0 10
32879: NOT
32880: OR
32881: IFFALSE 32916
// begin result := [ chassis , engine , control , weapon ] ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 2
32892: PUSH
32893: LD_VAR 0 3
32897: PUSH
32898: LD_VAR 0 4
32902: PUSH
32903: LD_VAR 0 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// exit ;
32914: GO 33207
// end ; if not chassis in _chassis then
32916: LD_VAR 0 2
32920: PUSH
32921: LD_VAR 0 9
32925: IN
32926: NOT
32927: IFFALSE 32953
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32929: LD_ADDR_VAR 0 2
32933: PUSH
32934: LD_VAR 0 9
32938: PUSH
32939: LD_INT 1
32941: PPUSH
32942: LD_VAR 0 9
32946: PPUSH
32947: CALL_OW 12
32951: ARRAY
32952: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32953: LD_VAR 0 2
32957: PPUSH
32958: LD_VAR 0 3
32962: PPUSH
32963: CALL 33212 0 2
32967: NOT
32968: IFFALSE 33027
// repeat engine := _engine [ 1 ] ;
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_VAR 0 11
32979: PUSH
32980: LD_INT 1
32982: ARRAY
32983: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32984: LD_ADDR_VAR 0 11
32988: PUSH
32989: LD_VAR 0 11
32993: PPUSH
32994: LD_INT 1
32996: PPUSH
32997: CALL_OW 3
33001: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33002: LD_VAR 0 2
33006: PPUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: CALL 33212 0 2
33016: PUSH
33017: LD_VAR 0 11
33021: PUSH
33022: EMPTY
33023: EQUAL
33024: OR
33025: IFFALSE 32970
// if not control in _control then
33027: LD_VAR 0 4
33031: PUSH
33032: LD_VAR 0 12
33036: IN
33037: NOT
33038: IFFALSE 33064
// control := _control [ rand ( 1 , _control ) ] ;
33040: LD_ADDR_VAR 0 4
33044: PUSH
33045: LD_VAR 0 12
33049: PUSH
33050: LD_INT 1
33052: PPUSH
33053: LD_VAR 0 12
33057: PPUSH
33058: CALL_OW 12
33062: ARRAY
33063: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33064: LD_VAR 0 2
33068: PPUSH
33069: LD_VAR 0 5
33073: PPUSH
33074: CALL 33432 0 2
33078: NOT
33079: IFFALSE 33138
// repeat weapon := _weapon [ 1 ] ;
33081: LD_ADDR_VAR 0 5
33085: PUSH
33086: LD_VAR 0 10
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33095: LD_ADDR_VAR 0 10
33099: PUSH
33100: LD_VAR 0 10
33104: PPUSH
33105: LD_INT 1
33107: PPUSH
33108: CALL_OW 3
33112: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33113: LD_VAR 0 2
33117: PPUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: CALL 33432 0 2
33127: PUSH
33128: LD_VAR 0 10
33132: PUSH
33133: EMPTY
33134: EQUAL
33135: OR
33136: IFFALSE 33081
// result := [ ] ;
33138: LD_ADDR_VAR 0 6
33142: PUSH
33143: EMPTY
33144: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33145: LD_VAR 0 1
33149: PPUSH
33150: LD_VAR 0 2
33154: PPUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: LD_VAR 0 5
33169: PPUSH
33170: CALL_OW 448
33174: IFFALSE 33207
// result := [ chassis , engine , control , weapon ] ;
33176: LD_ADDR_VAR 0 6
33180: PUSH
33181: LD_VAR 0 2
33185: PUSH
33186: LD_VAR 0 3
33190: PUSH
33191: LD_VAR 0 4
33195: PUSH
33196: LD_VAR 0 5
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: ST_TO_ADDR
// end ;
33207: LD_VAR 0 6
33211: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33212: LD_INT 0
33214: PPUSH
// if not chassis or not engine then
33215: LD_VAR 0 1
33219: NOT
33220: PUSH
33221: LD_VAR 0 2
33225: NOT
33226: OR
33227: IFFALSE 33231
// exit ;
33229: GO 33427
// case engine of engine_solar :
33231: LD_VAR 0 2
33235: PUSH
33236: LD_INT 2
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33282
33244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_INT 11
33252: PUSH
33253: LD_INT 12
33255: PUSH
33256: LD_INT 13
33258: PUSH
33259: LD_INT 14
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 3
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
33280: GO 33411
33282: LD_INT 1
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33352
33290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 11
33298: PUSH
33299: LD_INT 12
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 3
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: LD_INT 21
33325: PUSH
33326: LD_INT 23
33328: PUSH
33329: LD_INT 22
33331: PUSH
33332: LD_INT 24
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 33411
33352: LD_INT 3
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33410
33360: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 13
33368: PUSH
33369: LD_INT 14
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: LD_INT 5
33383: PUSH
33384: LD_INT 21
33386: PUSH
33387: LD_INT 22
33389: PUSH
33390: LD_INT 23
33392: PUSH
33393: LD_INT 24
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: ST_TO_ADDR
33408: GO 33411
33410: POP
// result := ( chassis in result ) ;
33411: LD_ADDR_VAR 0 3
33415: PUSH
33416: LD_VAR 0 1
33420: PUSH
33421: LD_VAR 0 3
33425: IN
33426: ST_TO_ADDR
// end ;
33427: LD_VAR 0 3
33431: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33432: LD_INT 0
33434: PPUSH
// if not chassis or not weapon then
33435: LD_VAR 0 1
33439: NOT
33440: PUSH
33441: LD_VAR 0 2
33445: NOT
33446: OR
33447: IFFALSE 33451
// exit ;
33449: GO 34511
// case weapon of us_machine_gun :
33451: LD_VAR 0 2
33455: PUSH
33456: LD_INT 2
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33494
33464: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
33492: GO 34495
33494: LD_INT 3
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33532
33502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: LD_INT 5
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
33530: GO 34495
33532: LD_INT 11
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33570
33540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33541: LD_ADDR_VAR 0 3
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
33568: GO 34495
33570: LD_INT 4
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33604
33578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: LD_INT 3
33589: PUSH
33590: LD_INT 4
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
33602: GO 34495
33604: LD_INT 5
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33638
33612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: LD_INT 4
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 34495
33638: LD_INT 9
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33672
33646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
33670: GO 34495
33672: LD_INT 7
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33706
33680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: LD_INT 4
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
33704: GO 34495
33706: LD_INT 12
33708: DOUBLE
33709: EQUAL
33710: IFTRUE 33714
33712: GO 33740
33714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: LD_INT 4
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: ST_TO_ADDR
33738: GO 34495
33740: LD_INT 13
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33774
33748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: LD_INT 4
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 34495
33774: LD_INT 14
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33800
33782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: LD_INT 5
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: ST_TO_ADDR
33798: GO 34495
33800: LD_INT 6
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33808
33806: GO 33826
33808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33809: LD_ADDR_VAR 0 3
33813: PUSH
33814: LD_INT 4
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: ST_TO_ADDR
33824: GO 34495
33826: LD_INT 10
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33834
33832: GO 33852
33834: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: LD_INT 5
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: ST_TO_ADDR
33850: GO 34495
33852: LD_INT 22
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33860
33858: GO 33886
33860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33861: LD_ADDR_VAR 0 3
33865: PUSH
33866: LD_INT 11
33868: PUSH
33869: LD_INT 12
33871: PUSH
33872: LD_INT 13
33874: PUSH
33875: LD_INT 14
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: ST_TO_ADDR
33884: GO 34495
33886: LD_INT 23
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 33920
33894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33895: LD_ADDR_VAR 0 3
33899: PUSH
33900: LD_INT 11
33902: PUSH
33903: LD_INT 12
33905: PUSH
33906: LD_INT 13
33908: PUSH
33909: LD_INT 14
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
33918: GO 34495
33920: LD_INT 24
33922: DOUBLE
33923: EQUAL
33924: IFTRUE 33928
33926: GO 33954
33928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33929: LD_ADDR_VAR 0 3
33933: PUSH
33934: LD_INT 11
33936: PUSH
33937: LD_INT 12
33939: PUSH
33940: LD_INT 13
33942: PUSH
33943: LD_INT 14
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: ST_TO_ADDR
33952: GO 34495
33954: LD_INT 30
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33962
33960: GO 33988
33962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: LD_INT 11
33970: PUSH
33971: LD_INT 12
33973: PUSH
33974: LD_INT 13
33976: PUSH
33977: LD_INT 14
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
33986: GO 34495
33988: LD_INT 25
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34014
33996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33997: LD_ADDR_VAR 0 3
34001: PUSH
34002: LD_INT 13
34004: PUSH
34005: LD_INT 14
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34495
34014: LD_INT 27
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34040
34022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_INT 13
34030: PUSH
34031: LD_INT 14
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: ST_TO_ADDR
34038: GO 34495
34040: LD_INT 92
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34074
34048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_INT 11
34056: PUSH
34057: LD_INT 12
34059: PUSH
34060: LD_INT 13
34062: PUSH
34063: LD_INT 14
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: ST_TO_ADDR
34072: GO 34495
34074: LD_INT 28
34076: DOUBLE
34077: EQUAL
34078: IFTRUE 34082
34080: GO 34100
34082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_INT 13
34090: PUSH
34091: LD_INT 14
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: ST_TO_ADDR
34098: GO 34495
34100: LD_INT 29
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34126
34108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 13
34116: PUSH
34117: LD_INT 14
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: ST_TO_ADDR
34124: GO 34495
34126: LD_INT 31
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34134
34132: GO 34152
34134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_INT 13
34142: PUSH
34143: LD_INT 14
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: ST_TO_ADDR
34150: GO 34495
34152: LD_INT 26
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34178
34160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_INT 13
34168: PUSH
34169: LD_INT 14
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: ST_TO_ADDR
34176: GO 34495
34178: LD_INT 42
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34212
34186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_INT 21
34194: PUSH
34195: LD_INT 22
34197: PUSH
34198: LD_INT 23
34200: PUSH
34201: LD_INT 24
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
34210: GO 34495
34212: LD_INT 43
34214: DOUBLE
34215: EQUAL
34216: IFTRUE 34220
34218: GO 34246
34220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34221: LD_ADDR_VAR 0 3
34225: PUSH
34226: LD_INT 21
34228: PUSH
34229: LD_INT 22
34231: PUSH
34232: LD_INT 23
34234: PUSH
34235: LD_INT 24
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
34244: GO 34495
34246: LD_INT 44
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34280
34254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34255: LD_ADDR_VAR 0 3
34259: PUSH
34260: LD_INT 21
34262: PUSH
34263: LD_INT 22
34265: PUSH
34266: LD_INT 23
34268: PUSH
34269: LD_INT 24
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
34278: GO 34495
34280: LD_INT 45
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34314
34288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34289: LD_ADDR_VAR 0 3
34293: PUSH
34294: LD_INT 21
34296: PUSH
34297: LD_INT 22
34299: PUSH
34300: LD_INT 23
34302: PUSH
34303: LD_INT 24
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
34312: GO 34495
34314: LD_INT 49
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34348
34322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34323: LD_ADDR_VAR 0 3
34327: PUSH
34328: LD_INT 21
34330: PUSH
34331: LD_INT 22
34333: PUSH
34334: LD_INT 23
34336: PUSH
34337: LD_INT 24
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: ST_TO_ADDR
34346: GO 34495
34348: LD_INT 51
34350: DOUBLE
34351: EQUAL
34352: IFTRUE 34356
34354: GO 34382
34356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34357: LD_ADDR_VAR 0 3
34361: PUSH
34362: LD_INT 21
34364: PUSH
34365: LD_INT 22
34367: PUSH
34368: LD_INT 23
34370: PUSH
34371: LD_INT 24
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
34380: GO 34495
34382: LD_INT 52
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34390
34388: GO 34416
34390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34391: LD_ADDR_VAR 0 3
34395: PUSH
34396: LD_INT 21
34398: PUSH
34399: LD_INT 22
34401: PUSH
34402: LD_INT 23
34404: PUSH
34405: LD_INT 24
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
34414: GO 34495
34416: LD_INT 53
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34424
34422: GO 34442
34424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34425: LD_ADDR_VAR 0 3
34429: PUSH
34430: LD_INT 23
34432: PUSH
34433: LD_INT 24
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: ST_TO_ADDR
34440: GO 34495
34442: LD_INT 46
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34450
34448: GO 34468
34450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_INT 23
34458: PUSH
34459: LD_INT 24
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: ST_TO_ADDR
34466: GO 34495
34468: LD_INT 47
34470: DOUBLE
34471: EQUAL
34472: IFTRUE 34476
34474: GO 34494
34476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_INT 23
34484: PUSH
34485: LD_INT 24
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: ST_TO_ADDR
34492: GO 34495
34494: POP
// result := ( chassis in result ) ;
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_VAR 0 1
34504: PUSH
34505: LD_VAR 0 3
34509: IN
34510: ST_TO_ADDR
// end ;
34511: LD_VAR 0 3
34515: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34516: LD_INT 0
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
// result := array ;
34525: LD_ADDR_VAR 0 5
34529: PUSH
34530: LD_VAR 0 1
34534: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34535: LD_VAR 0 1
34539: NOT
34540: PUSH
34541: LD_VAR 0 2
34545: NOT
34546: OR
34547: PUSH
34548: LD_VAR 0 3
34552: NOT
34553: OR
34554: PUSH
34555: LD_VAR 0 2
34559: PUSH
34560: LD_VAR 0 1
34564: GREATER
34565: OR
34566: PUSH
34567: LD_VAR 0 3
34571: PUSH
34572: LD_VAR 0 1
34576: GREATER
34577: OR
34578: IFFALSE 34582
// exit ;
34580: GO 34878
// if direction then
34582: LD_VAR 0 4
34586: IFFALSE 34650
// begin d := 1 ;
34588: LD_ADDR_VAR 0 9
34592: PUSH
34593: LD_INT 1
34595: ST_TO_ADDR
// if i_from > i_to then
34596: LD_VAR 0 2
34600: PUSH
34601: LD_VAR 0 3
34605: GREATER
34606: IFFALSE 34632
// length := ( array - i_from ) + i_to else
34608: LD_ADDR_VAR 0 11
34612: PUSH
34613: LD_VAR 0 1
34617: PUSH
34618: LD_VAR 0 2
34622: MINUS
34623: PUSH
34624: LD_VAR 0 3
34628: PLUS
34629: ST_TO_ADDR
34630: GO 34648
// length := i_to - i_from ;
34632: LD_ADDR_VAR 0 11
34636: PUSH
34637: LD_VAR 0 3
34641: PUSH
34642: LD_VAR 0 2
34646: MINUS
34647: ST_TO_ADDR
// end else
34648: GO 34711
// begin d := - 1 ;
34650: LD_ADDR_VAR 0 9
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: ST_TO_ADDR
// if i_from > i_to then
34659: LD_VAR 0 2
34663: PUSH
34664: LD_VAR 0 3
34668: GREATER
34669: IFFALSE 34689
// length := i_from - i_to else
34671: LD_ADDR_VAR 0 11
34675: PUSH
34676: LD_VAR 0 2
34680: PUSH
34681: LD_VAR 0 3
34685: MINUS
34686: ST_TO_ADDR
34687: GO 34711
// length := ( array - i_to ) + i_from ;
34689: LD_ADDR_VAR 0 11
34693: PUSH
34694: LD_VAR 0 1
34698: PUSH
34699: LD_VAR 0 3
34703: MINUS
34704: PUSH
34705: LD_VAR 0 2
34709: PLUS
34710: ST_TO_ADDR
// end ; if not length then
34711: LD_VAR 0 11
34715: NOT
34716: IFFALSE 34720
// exit ;
34718: GO 34878
// tmp := array ;
34720: LD_ADDR_VAR 0 10
34724: PUSH
34725: LD_VAR 0 1
34729: ST_TO_ADDR
// for i = 1 to length do
34730: LD_ADDR_VAR 0 6
34734: PUSH
34735: DOUBLE
34736: LD_INT 1
34738: DEC
34739: ST_TO_ADDR
34740: LD_VAR 0 11
34744: PUSH
34745: FOR_TO
34746: IFFALSE 34866
// begin for j = 1 to array do
34748: LD_ADDR_VAR 0 7
34752: PUSH
34753: DOUBLE
34754: LD_INT 1
34756: DEC
34757: ST_TO_ADDR
34758: LD_VAR 0 1
34762: PUSH
34763: FOR_TO
34764: IFFALSE 34852
// begin k := j + d ;
34766: LD_ADDR_VAR 0 8
34770: PUSH
34771: LD_VAR 0 7
34775: PUSH
34776: LD_VAR 0 9
34780: PLUS
34781: ST_TO_ADDR
// if k > array then
34782: LD_VAR 0 8
34786: PUSH
34787: LD_VAR 0 1
34791: GREATER
34792: IFFALSE 34802
// k := 1 ;
34794: LD_ADDR_VAR 0 8
34798: PUSH
34799: LD_INT 1
34801: ST_TO_ADDR
// if not k then
34802: LD_VAR 0 8
34806: NOT
34807: IFFALSE 34819
// k := array ;
34809: LD_ADDR_VAR 0 8
34813: PUSH
34814: LD_VAR 0 1
34818: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34819: LD_ADDR_VAR 0 10
34823: PUSH
34824: LD_VAR 0 10
34828: PPUSH
34829: LD_VAR 0 8
34833: PPUSH
34834: LD_VAR 0 1
34838: PUSH
34839: LD_VAR 0 7
34843: ARRAY
34844: PPUSH
34845: CALL_OW 1
34849: ST_TO_ADDR
// end ;
34850: GO 34763
34852: POP
34853: POP
// array := tmp ;
34854: LD_ADDR_VAR 0 1
34858: PUSH
34859: LD_VAR 0 10
34863: ST_TO_ADDR
// end ;
34864: GO 34745
34866: POP
34867: POP
// result := array ;
34868: LD_ADDR_VAR 0 5
34872: PUSH
34873: LD_VAR 0 1
34877: ST_TO_ADDR
// end ;
34878: LD_VAR 0 5
34882: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34883: LD_INT 0
34885: PPUSH
34886: PPUSH
// result := 0 ;
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 0
34894: ST_TO_ADDR
// if not array or not value in array then
34895: LD_VAR 0 1
34899: NOT
34900: PUSH
34901: LD_VAR 0 2
34905: PUSH
34906: LD_VAR 0 1
34910: IN
34911: NOT
34912: OR
34913: IFFALSE 34917
// exit ;
34915: GO 34971
// for i = 1 to array do
34917: LD_ADDR_VAR 0 4
34921: PUSH
34922: DOUBLE
34923: LD_INT 1
34925: DEC
34926: ST_TO_ADDR
34927: LD_VAR 0 1
34931: PUSH
34932: FOR_TO
34933: IFFALSE 34969
// if value = array [ i ] then
34935: LD_VAR 0 2
34939: PUSH
34940: LD_VAR 0 1
34944: PUSH
34945: LD_VAR 0 4
34949: ARRAY
34950: EQUAL
34951: IFFALSE 34967
// begin result := i ;
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_VAR 0 4
34962: ST_TO_ADDR
// exit ;
34963: POP
34964: POP
34965: GO 34971
// end ;
34967: GO 34932
34969: POP
34970: POP
// end ;
34971: LD_VAR 0 3
34975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34976: LD_INT 0
34978: PPUSH
// vc_chassis := chassis ;
34979: LD_ADDR_OWVAR 37
34983: PUSH
34984: LD_VAR 0 1
34988: ST_TO_ADDR
// vc_engine := engine ;
34989: LD_ADDR_OWVAR 39
34993: PUSH
34994: LD_VAR 0 2
34998: ST_TO_ADDR
// vc_control := control ;
34999: LD_ADDR_OWVAR 38
35003: PUSH
35004: LD_VAR 0 3
35008: ST_TO_ADDR
// vc_weapon := weapon ;
35009: LD_ADDR_OWVAR 40
35013: PUSH
35014: LD_VAR 0 4
35018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35019: LD_ADDR_OWVAR 41
35023: PUSH
35024: LD_VAR 0 5
35028: ST_TO_ADDR
// end ;
35029: LD_VAR 0 6
35033: RET
// export function WantPlant ( unit ) ; var task ; begin
35034: LD_INT 0
35036: PPUSH
35037: PPUSH
// result := false ;
35038: LD_ADDR_VAR 0 2
35042: PUSH
35043: LD_INT 0
35045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_VAR 0 1
35055: PPUSH
35056: CALL_OW 437
35060: ST_TO_ADDR
// if task then
35061: LD_VAR 0 3
35065: IFFALSE 35093
// if task [ 1 ] [ 1 ] = p then
35067: LD_VAR 0 3
35071: PUSH
35072: LD_INT 1
35074: ARRAY
35075: PUSH
35076: LD_INT 1
35078: ARRAY
35079: PUSH
35080: LD_STRING p
35082: EQUAL
35083: IFFALSE 35093
// result := true ;
35085: LD_ADDR_VAR 0 2
35089: PUSH
35090: LD_INT 1
35092: ST_TO_ADDR
// end ;
35093: LD_VAR 0 2
35097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35098: LD_INT 0
35100: PPUSH
35101: PPUSH
35102: PPUSH
35103: PPUSH
// if pos < 1 then
35104: LD_VAR 0 2
35108: PUSH
35109: LD_INT 1
35111: LESS
35112: IFFALSE 35116
// exit ;
35114: GO 35419
// if pos = 1 then
35116: LD_VAR 0 2
35120: PUSH
35121: LD_INT 1
35123: EQUAL
35124: IFFALSE 35157
// result := Replace ( arr , pos [ 1 ] , value ) else
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_VAR 0 2
35140: PUSH
35141: LD_INT 1
35143: ARRAY
35144: PPUSH
35145: LD_VAR 0 3
35149: PPUSH
35150: CALL_OW 1
35154: ST_TO_ADDR
35155: GO 35419
// begin tmp := arr ;
35157: LD_ADDR_VAR 0 6
35161: PUSH
35162: LD_VAR 0 1
35166: ST_TO_ADDR
// s_arr := [ tmp ] ;
35167: LD_ADDR_VAR 0 7
35171: PUSH
35172: LD_VAR 0 6
35176: PUSH
35177: EMPTY
35178: LIST
35179: ST_TO_ADDR
// for i = 1 to pos - 1 do
35180: LD_ADDR_VAR 0 5
35184: PUSH
35185: DOUBLE
35186: LD_INT 1
35188: DEC
35189: ST_TO_ADDR
35190: LD_VAR 0 2
35194: PUSH
35195: LD_INT 1
35197: MINUS
35198: PUSH
35199: FOR_TO
35200: IFFALSE 35245
// begin tmp := tmp [ pos [ i ] ] ;
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 6
35211: PUSH
35212: LD_VAR 0 2
35216: PUSH
35217: LD_VAR 0 5
35221: ARRAY
35222: ARRAY
35223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35224: LD_ADDR_VAR 0 7
35228: PUSH
35229: LD_VAR 0 7
35233: PUSH
35234: LD_VAR 0 6
35238: PUSH
35239: EMPTY
35240: LIST
35241: ADD
35242: ST_TO_ADDR
// end ;
35243: GO 35199
35245: POP
35246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35247: LD_ADDR_VAR 0 6
35251: PUSH
35252: LD_VAR 0 6
35256: PPUSH
35257: LD_VAR 0 2
35261: PUSH
35262: LD_VAR 0 2
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 3
35272: PPUSH
35273: CALL_OW 1
35277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35278: LD_ADDR_VAR 0 7
35282: PUSH
35283: LD_VAR 0 7
35287: PPUSH
35288: LD_VAR 0 7
35292: PPUSH
35293: LD_VAR 0 6
35297: PPUSH
35298: CALL_OW 1
35302: ST_TO_ADDR
// for i = s_arr downto 2 do
35303: LD_ADDR_VAR 0 5
35307: PUSH
35308: DOUBLE
35309: LD_VAR 0 7
35313: INC
35314: ST_TO_ADDR
35315: LD_INT 2
35317: PUSH
35318: FOR_DOWNTO
35319: IFFALSE 35403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35321: LD_ADDR_VAR 0 6
35325: PUSH
35326: LD_VAR 0 7
35330: PUSH
35331: LD_VAR 0 5
35335: PUSH
35336: LD_INT 1
35338: MINUS
35339: ARRAY
35340: PPUSH
35341: LD_VAR 0 2
35345: PUSH
35346: LD_VAR 0 5
35350: PUSH
35351: LD_INT 1
35353: MINUS
35354: ARRAY
35355: PPUSH
35356: LD_VAR 0 7
35360: PUSH
35361: LD_VAR 0 5
35365: ARRAY
35366: PPUSH
35367: CALL_OW 1
35371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35372: LD_ADDR_VAR 0 7
35376: PUSH
35377: LD_VAR 0 7
35381: PPUSH
35382: LD_VAR 0 5
35386: PUSH
35387: LD_INT 1
35389: MINUS
35390: PPUSH
35391: LD_VAR 0 6
35395: PPUSH
35396: CALL_OW 1
35400: ST_TO_ADDR
// end ;
35401: GO 35318
35403: POP
35404: POP
// result := s_arr [ 1 ] ;
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: LD_VAR 0 7
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: ST_TO_ADDR
// end ; end ;
35419: LD_VAR 0 4
35423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35424: LD_INT 0
35426: PPUSH
35427: PPUSH
// if not list then
35428: LD_VAR 0 1
35432: NOT
35433: IFFALSE 35437
// exit ;
35435: GO 35528
// i := list [ pos1 ] ;
35437: LD_ADDR_VAR 0 5
35441: PUSH
35442: LD_VAR 0 1
35446: PUSH
35447: LD_VAR 0 2
35451: ARRAY
35452: ST_TO_ADDR
// if not i then
35453: LD_VAR 0 5
35457: NOT
35458: IFFALSE 35462
// exit ;
35460: GO 35528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35462: LD_ADDR_VAR 0 1
35466: PUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: LD_VAR 0 2
35476: PPUSH
35477: LD_VAR 0 1
35481: PUSH
35482: LD_VAR 0 3
35486: ARRAY
35487: PPUSH
35488: CALL_OW 1
35492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35493: LD_ADDR_VAR 0 1
35497: PUSH
35498: LD_VAR 0 1
35502: PPUSH
35503: LD_VAR 0 3
35507: PPUSH
35508: LD_VAR 0 5
35512: PPUSH
35513: CALL_OW 1
35517: ST_TO_ADDR
// result := list ;
35518: LD_ADDR_VAR 0 4
35522: PUSH
35523: LD_VAR 0 1
35527: ST_TO_ADDR
// end ;
35528: LD_VAR 0 4
35532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35533: LD_INT 0
35535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 250
35550: PPUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 251
35560: PPUSH
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_VAR 0 3
35570: PPUSH
35571: LD_VAR 0 4
35575: PPUSH
35576: CALL 35586 0 5
35580: ST_TO_ADDR
// end ;
35581: LD_VAR 0 5
35585: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35586: LD_INT 0
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
// if not list then
35592: LD_VAR 0 3
35596: NOT
35597: IFFALSE 35601
// exit ;
35599: GO 35989
// result := [ ] ;
35601: LD_ADDR_VAR 0 6
35605: PUSH
35606: EMPTY
35607: ST_TO_ADDR
// for i in list do
35608: LD_ADDR_VAR 0 7
35612: PUSH
35613: LD_VAR 0 3
35617: PUSH
35618: FOR_IN
35619: IFFALSE 35821
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: LD_VAR 0 7
35630: PPUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_VAR 0 2
35640: PPUSH
35641: CALL_OW 297
35645: ST_TO_ADDR
// if not result then
35646: LD_VAR 0 6
35650: NOT
35651: IFFALSE 35677
// result := [ [ i , tmp ] ] else
35653: LD_ADDR_VAR 0 6
35657: PUSH
35658: LD_VAR 0 7
35662: PUSH
35663: LD_VAR 0 9
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: ST_TO_ADDR
35675: GO 35819
// begin if result [ result ] [ 2 ] < tmp then
35677: LD_VAR 0 6
35681: PUSH
35682: LD_VAR 0 6
35686: ARRAY
35687: PUSH
35688: LD_INT 2
35690: ARRAY
35691: PUSH
35692: LD_VAR 0 9
35696: LESS
35697: IFFALSE 35739
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35699: LD_ADDR_VAR 0 6
35703: PUSH
35704: LD_VAR 0 6
35708: PPUSH
35709: LD_VAR 0 6
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: PPUSH
35718: LD_VAR 0 7
35722: PUSH
35723: LD_VAR 0 9
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PPUSH
35732: CALL_OW 2
35736: ST_TO_ADDR
35737: GO 35819
// for j = 1 to result do
35739: LD_ADDR_VAR 0 8
35743: PUSH
35744: DOUBLE
35745: LD_INT 1
35747: DEC
35748: ST_TO_ADDR
35749: LD_VAR 0 6
35753: PUSH
35754: FOR_TO
35755: IFFALSE 35817
// begin if tmp < result [ j ] [ 2 ] then
35757: LD_VAR 0 9
35761: PUSH
35762: LD_VAR 0 6
35766: PUSH
35767: LD_VAR 0 8
35771: ARRAY
35772: PUSH
35773: LD_INT 2
35775: ARRAY
35776: LESS
35777: IFFALSE 35815
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35779: LD_ADDR_VAR 0 6
35783: PUSH
35784: LD_VAR 0 6
35788: PPUSH
35789: LD_VAR 0 8
35793: PPUSH
35794: LD_VAR 0 7
35798: PUSH
35799: LD_VAR 0 9
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PPUSH
35808: CALL_OW 2
35812: ST_TO_ADDR
// break ;
35813: GO 35817
// end ; end ;
35815: GO 35754
35817: POP
35818: POP
// end ; end ;
35819: GO 35618
35821: POP
35822: POP
// if result and not asc then
35823: LD_VAR 0 6
35827: PUSH
35828: LD_VAR 0 4
35832: NOT
35833: AND
35834: IFFALSE 35909
// begin tmp := result ;
35836: LD_ADDR_VAR 0 9
35840: PUSH
35841: LD_VAR 0 6
35845: ST_TO_ADDR
// for i = tmp downto 1 do
35846: LD_ADDR_VAR 0 7
35850: PUSH
35851: DOUBLE
35852: LD_VAR 0 9
35856: INC
35857: ST_TO_ADDR
35858: LD_INT 1
35860: PUSH
35861: FOR_DOWNTO
35862: IFFALSE 35907
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35864: LD_ADDR_VAR 0 6
35868: PUSH
35869: LD_VAR 0 6
35873: PPUSH
35874: LD_VAR 0 9
35878: PUSH
35879: LD_VAR 0 7
35883: MINUS
35884: PUSH
35885: LD_INT 1
35887: PLUS
35888: PPUSH
35889: LD_VAR 0 9
35893: PUSH
35894: LD_VAR 0 7
35898: ARRAY
35899: PPUSH
35900: CALL_OW 1
35904: ST_TO_ADDR
35905: GO 35861
35907: POP
35908: POP
// end ; tmp := [ ] ;
35909: LD_ADDR_VAR 0 9
35913: PUSH
35914: EMPTY
35915: ST_TO_ADDR
// if mode then
35916: LD_VAR 0 5
35920: IFFALSE 35989
// begin for i = 1 to result do
35922: LD_ADDR_VAR 0 7
35926: PUSH
35927: DOUBLE
35928: LD_INT 1
35930: DEC
35931: ST_TO_ADDR
35932: LD_VAR 0 6
35936: PUSH
35937: FOR_TO
35938: IFFALSE 35977
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35940: LD_ADDR_VAR 0 9
35944: PUSH
35945: LD_VAR 0 9
35949: PPUSH
35950: LD_VAR 0 7
35954: PPUSH
35955: LD_VAR 0 6
35959: PUSH
35960: LD_VAR 0 7
35964: ARRAY
35965: PUSH
35966: LD_INT 1
35968: ARRAY
35969: PPUSH
35970: CALL_OW 1
35974: ST_TO_ADDR
35975: GO 35937
35977: POP
35978: POP
// result := tmp ;
35979: LD_ADDR_VAR 0 6
35983: PUSH
35984: LD_VAR 0 9
35988: ST_TO_ADDR
// end ; end ;
35989: LD_VAR 0 6
35993: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35994: LD_INT 0
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
36001: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// if not x or not y then
36024: LD_VAR 0 2
36028: NOT
36029: PUSH
36030: LD_VAR 0 3
36034: NOT
36035: OR
36036: IFFALSE 36040
// exit ;
36038: GO 37690
// if not range then
36040: LD_VAR 0 4
36044: NOT
36045: IFFALSE 36055
// range := 10 ;
36047: LD_ADDR_VAR 0 4
36051: PUSH
36052: LD_INT 10
36054: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36055: LD_ADDR_VAR 0 8
36059: PUSH
36060: LD_INT 81
36062: PUSH
36063: LD_VAR 0 1
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 92
36074: PUSH
36075: LD_VAR 0 2
36079: PUSH
36080: LD_VAR 0 3
36084: PUSH
36085: LD_VAR 0 4
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: LD_INT 21
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: PPUSH
36118: CALL_OW 69
36122: ST_TO_ADDR
// if not tmp then
36123: LD_VAR 0 8
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 37690
// for i in tmp do
36132: LD_ADDR_VAR 0 6
36136: PUSH
36137: LD_VAR 0 8
36141: PUSH
36142: FOR_IN
36143: IFFALSE 37665
// begin points := [ 0 , 0 , 0 ] ;
36145: LD_ADDR_VAR 0 9
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
// bpoints := 1 ;
36164: LD_ADDR_VAR 0 10
36168: PUSH
36169: LD_INT 1
36171: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36172: LD_VAR 0 6
36176: PPUSH
36177: CALL_OW 247
36181: PUSH
36182: LD_INT 1
36184: DOUBLE
36185: EQUAL
36186: IFTRUE 36190
36188: GO 36768
36190: POP
// begin if GetClass ( i ) = 1 then
36191: LD_VAR 0 6
36195: PPUSH
36196: CALL_OW 257
36200: PUSH
36201: LD_INT 1
36203: EQUAL
36204: IFFALSE 36225
// points := [ 10 , 5 , 3 ] ;
36206: LD_ADDR_VAR 0 9
36210: PUSH
36211: LD_INT 10
36213: PUSH
36214: LD_INT 5
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36225: LD_VAR 0 6
36229: PPUSH
36230: CALL_OW 257
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 4
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: IN
36249: IFFALSE 36270
// points := [ 3 , 2 , 1 ] ;
36251: LD_ADDR_VAR 0 9
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36270: LD_VAR 0 6
36274: PPUSH
36275: CALL_OW 257
36279: PUSH
36280: LD_INT 5
36282: EQUAL
36283: IFFALSE 36304
// points := [ 130 , 5 , 2 ] ;
36285: LD_ADDR_VAR 0 9
36289: PUSH
36290: LD_INT 130
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36304: LD_VAR 0 6
36308: PPUSH
36309: CALL_OW 257
36313: PUSH
36314: LD_INT 8
36316: EQUAL
36317: IFFALSE 36338
// points := [ 35 , 35 , 30 ] ;
36319: LD_ADDR_VAR 0 9
36323: PUSH
36324: LD_INT 35
36326: PUSH
36327: LD_INT 35
36329: PUSH
36330: LD_INT 30
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36338: LD_VAR 0 6
36342: PPUSH
36343: CALL_OW 257
36347: PUSH
36348: LD_INT 9
36350: EQUAL
36351: IFFALSE 36372
// points := [ 20 , 55 , 40 ] ;
36353: LD_ADDR_VAR 0 9
36357: PUSH
36358: LD_INT 20
36360: PUSH
36361: LD_INT 55
36363: PUSH
36364: LD_INT 40
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36372: LD_VAR 0 6
36376: PPUSH
36377: CALL_OW 257
36381: PUSH
36382: LD_INT 12
36384: PUSH
36385: LD_INT 16
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: IN
36392: IFFALSE 36413
// points := [ 5 , 3 , 2 ] ;
36394: LD_ADDR_VAR 0 9
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: LD_INT 3
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 257
36422: PUSH
36423: LD_INT 17
36425: EQUAL
36426: IFFALSE 36447
// points := [ 100 , 50 , 75 ] ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: LD_INT 100
36435: PUSH
36436: LD_INT 50
36438: PUSH
36439: LD_INT 75
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36447: LD_VAR 0 6
36451: PPUSH
36452: CALL_OW 257
36456: PUSH
36457: LD_INT 15
36459: EQUAL
36460: IFFALSE 36481
// points := [ 10 , 5 , 3 ] ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_INT 10
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36481: LD_VAR 0 6
36485: PPUSH
36486: CALL_OW 257
36490: PUSH
36491: LD_INT 14
36493: EQUAL
36494: IFFALSE 36515
// points := [ 10 , 0 , 0 ] ;
36496: LD_ADDR_VAR 0 9
36500: PUSH
36501: LD_INT 10
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36515: LD_VAR 0 6
36519: PPUSH
36520: CALL_OW 257
36524: PUSH
36525: LD_INT 11
36527: EQUAL
36528: IFFALSE 36549
// points := [ 30 , 10 , 5 ] ;
36530: LD_ADDR_VAR 0 9
36534: PUSH
36535: LD_INT 30
36537: PUSH
36538: LD_INT 10
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36549: LD_VAR 0 1
36553: PPUSH
36554: LD_INT 5
36556: PPUSH
36557: CALL_OW 321
36561: PUSH
36562: LD_INT 2
36564: EQUAL
36565: IFFALSE 36582
// bpoints := bpoints * 1.8 ;
36567: LD_ADDR_VAR 0 10
36571: PUSH
36572: LD_VAR 0 10
36576: PUSH
36577: LD_REAL  1.80000000000000E+0000
36580: MUL
36581: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36582: LD_VAR 0 6
36586: PPUSH
36587: CALL_OW 257
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 3
36600: PUSH
36601: LD_INT 4
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: IN
36610: PUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_INT 51
36618: PPUSH
36619: CALL_OW 321
36623: PUSH
36624: LD_INT 2
36626: EQUAL
36627: AND
36628: IFFALSE 36645
// bpoints := bpoints * 1.2 ;
36630: LD_ADDR_VAR 0 10
36634: PUSH
36635: LD_VAR 0 10
36639: PUSH
36640: LD_REAL  1.20000000000000E+0000
36643: MUL
36644: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36645: LD_VAR 0 6
36649: PPUSH
36650: CALL_OW 257
36654: PUSH
36655: LD_INT 5
36657: PUSH
36658: LD_INT 7
36660: PUSH
36661: LD_INT 9
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: IN
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: LD_INT 52
36677: PPUSH
36678: CALL_OW 321
36682: PUSH
36683: LD_INT 2
36685: EQUAL
36686: AND
36687: IFFALSE 36704
// bpoints := bpoints * 1.5 ;
36689: LD_ADDR_VAR 0 10
36693: PUSH
36694: LD_VAR 0 10
36698: PUSH
36699: LD_REAL  1.50000000000000E+0000
36702: MUL
36703: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36704: LD_VAR 0 1
36708: PPUSH
36709: LD_INT 66
36711: PPUSH
36712: CALL_OW 321
36716: PUSH
36717: LD_INT 2
36719: EQUAL
36720: IFFALSE 36737
// bpoints := bpoints * 1.1 ;
36722: LD_ADDR_VAR 0 10
36726: PUSH
36727: LD_VAR 0 10
36731: PUSH
36732: LD_REAL  1.10000000000000E+0000
36735: MUL
36736: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36737: LD_ADDR_VAR 0 10
36741: PUSH
36742: LD_VAR 0 10
36746: PUSH
36747: LD_VAR 0 6
36751: PPUSH
36752: LD_INT 1
36754: PPUSH
36755: CALL_OW 259
36759: PUSH
36760: LD_REAL  1.15000000000000E+0000
36763: MUL
36764: MUL
36765: ST_TO_ADDR
// end ; unit_vehicle :
36766: GO 37594
36768: LD_INT 2
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 37582
36776: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36777: LD_VAR 0 6
36781: PPUSH
36782: CALL_OW 264
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: LD_INT 42
36792: PUSH
36793: LD_INT 24
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: IN
36801: IFFALSE 36822
// points := [ 25 , 5 , 3 ] ;
36803: LD_ADDR_VAR 0 9
36807: PUSH
36808: LD_INT 25
36810: PUSH
36811: LD_INT 5
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36822: LD_VAR 0 6
36826: PPUSH
36827: CALL_OW 264
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: LD_INT 43
36837: PUSH
36838: LD_INT 25
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: IN
36846: IFFALSE 36867
// points := [ 40 , 15 , 5 ] ;
36848: LD_ADDR_VAR 0 9
36852: PUSH
36853: LD_INT 40
36855: PUSH
36856: LD_INT 15
36858: PUSH
36859: LD_INT 5
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36867: LD_VAR 0 6
36871: PPUSH
36872: CALL_OW 264
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: LD_INT 23
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: IN
36887: IFFALSE 36908
// points := [ 7 , 25 , 8 ] ;
36889: LD_ADDR_VAR 0 9
36893: PUSH
36894: LD_INT 7
36896: PUSH
36897: LD_INT 25
36899: PUSH
36900: LD_INT 8
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36908: LD_VAR 0 6
36912: PPUSH
36913: CALL_OW 264
36917: PUSH
36918: LD_INT 5
36920: PUSH
36921: LD_INT 27
36923: PUSH
36924: LD_INT 44
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: IN
36932: IFFALSE 36953
// points := [ 14 , 50 , 16 ] ;
36934: LD_ADDR_VAR 0 9
36938: PUSH
36939: LD_INT 14
36941: PUSH
36942: LD_INT 50
36944: PUSH
36945: LD_INT 16
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36953: LD_VAR 0 6
36957: PPUSH
36958: CALL_OW 264
36962: PUSH
36963: LD_INT 6
36965: PUSH
36966: LD_INT 46
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: IN
36973: IFFALSE 36994
// points := [ 32 , 120 , 70 ] ;
36975: LD_ADDR_VAR 0 9
36979: PUSH
36980: LD_INT 32
36982: PUSH
36983: LD_INT 120
36985: PUSH
36986: LD_INT 70
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36994: LD_VAR 0 6
36998: PPUSH
36999: CALL_OW 264
37003: PUSH
37004: LD_INT 7
37006: PUSH
37007: LD_INT 28
37009: PUSH
37010: LD_INT 45
37012: PUSH
37013: LD_INT 92
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: IN
37022: IFFALSE 37043
// points := [ 35 , 20 , 45 ] ;
37024: LD_ADDR_VAR 0 9
37028: PUSH
37029: LD_INT 35
37031: PUSH
37032: LD_INT 20
37034: PUSH
37035: LD_INT 45
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37043: LD_VAR 0 6
37047: PPUSH
37048: CALL_OW 264
37052: PUSH
37053: LD_INT 47
37055: PUSH
37056: EMPTY
37057: LIST
37058: IN
37059: IFFALSE 37080
// points := [ 67 , 45 , 75 ] ;
37061: LD_ADDR_VAR 0 9
37065: PUSH
37066: LD_INT 67
37068: PUSH
37069: LD_INT 45
37071: PUSH
37072: LD_INT 75
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37080: LD_VAR 0 6
37084: PPUSH
37085: CALL_OW 264
37089: PUSH
37090: LD_INT 26
37092: PUSH
37093: EMPTY
37094: LIST
37095: IN
37096: IFFALSE 37117
// points := [ 120 , 30 , 80 ] ;
37098: LD_ADDR_VAR 0 9
37102: PUSH
37103: LD_INT 120
37105: PUSH
37106: LD_INT 30
37108: PUSH
37109: LD_INT 80
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37117: LD_VAR 0 6
37121: PPUSH
37122: CALL_OW 264
37126: PUSH
37127: LD_INT 22
37129: PUSH
37130: EMPTY
37131: LIST
37132: IN
37133: IFFALSE 37154
// points := [ 40 , 1 , 1 ] ;
37135: LD_ADDR_VAR 0 9
37139: PUSH
37140: LD_INT 40
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37154: LD_VAR 0 6
37158: PPUSH
37159: CALL_OW 264
37163: PUSH
37164: LD_INT 29
37166: PUSH
37167: EMPTY
37168: LIST
37169: IN
37170: IFFALSE 37191
// points := [ 70 , 200 , 400 ] ;
37172: LD_ADDR_VAR 0 9
37176: PUSH
37177: LD_INT 70
37179: PUSH
37180: LD_INT 200
37182: PUSH
37183: LD_INT 400
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 264
37200: PUSH
37201: LD_INT 14
37203: PUSH
37204: LD_INT 53
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: IN
37211: IFFALSE 37232
// points := [ 40 , 10 , 20 ] ;
37213: LD_ADDR_VAR 0 9
37217: PUSH
37218: LD_INT 40
37220: PUSH
37221: LD_INT 10
37223: PUSH
37224: LD_INT 20
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37232: LD_VAR 0 6
37236: PPUSH
37237: CALL_OW 264
37241: PUSH
37242: LD_INT 9
37244: PUSH
37245: EMPTY
37246: LIST
37247: IN
37248: IFFALSE 37269
// points := [ 5 , 70 , 20 ] ;
37250: LD_ADDR_VAR 0 9
37254: PUSH
37255: LD_INT 5
37257: PUSH
37258: LD_INT 70
37260: PUSH
37261: LD_INT 20
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37269: LD_VAR 0 6
37273: PPUSH
37274: CALL_OW 264
37278: PUSH
37279: LD_INT 10
37281: PUSH
37282: EMPTY
37283: LIST
37284: IN
37285: IFFALSE 37306
// points := [ 35 , 110 , 70 ] ;
37287: LD_ADDR_VAR 0 9
37291: PUSH
37292: LD_INT 35
37294: PUSH
37295: LD_INT 110
37297: PUSH
37298: LD_INT 70
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37306: LD_VAR 0 6
37310: PPUSH
37311: CALL_OW 265
37315: PUSH
37316: LD_INT 25
37318: EQUAL
37319: IFFALSE 37340
// points := [ 80 , 65 , 100 ] ;
37321: LD_ADDR_VAR 0 9
37325: PUSH
37326: LD_INT 80
37328: PUSH
37329: LD_INT 65
37331: PUSH
37332: LD_INT 100
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 263
37349: PUSH
37350: LD_INT 1
37352: EQUAL
37353: IFFALSE 37388
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37355: LD_ADDR_VAR 0 10
37359: PUSH
37360: LD_VAR 0 10
37364: PUSH
37365: LD_VAR 0 6
37369: PPUSH
37370: CALL_OW 311
37374: PPUSH
37375: LD_INT 3
37377: PPUSH
37378: CALL_OW 259
37382: PUSH
37383: LD_INT 4
37385: MUL
37386: MUL
37387: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37388: LD_VAR 0 6
37392: PPUSH
37393: CALL_OW 263
37397: PUSH
37398: LD_INT 2
37400: EQUAL
37401: IFFALSE 37452
// begin j := IsControledBy ( i ) ;
37403: LD_ADDR_VAR 0 7
37407: PUSH
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 312
37417: ST_TO_ADDR
// if j then
37418: LD_VAR 0 7
37422: IFFALSE 37452
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37424: LD_ADDR_VAR 0 10
37428: PUSH
37429: LD_VAR 0 10
37433: PUSH
37434: LD_VAR 0 7
37438: PPUSH
37439: LD_INT 3
37441: PPUSH
37442: CALL_OW 259
37446: PUSH
37447: LD_INT 3
37449: MUL
37450: MUL
37451: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37452: LD_VAR 0 6
37456: PPUSH
37457: CALL_OW 264
37461: PUSH
37462: LD_INT 5
37464: PUSH
37465: LD_INT 6
37467: PUSH
37468: LD_INT 46
37470: PUSH
37471: LD_INT 44
37473: PUSH
37474: LD_INT 47
37476: PUSH
37477: LD_INT 45
37479: PUSH
37480: LD_INT 28
37482: PUSH
37483: LD_INT 7
37485: PUSH
37486: LD_INT 27
37488: PUSH
37489: LD_INT 29
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: IN
37504: PUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: LD_INT 52
37512: PPUSH
37513: CALL_OW 321
37517: PUSH
37518: LD_INT 2
37520: EQUAL
37521: AND
37522: IFFALSE 37539
// bpoints := bpoints * 1.2 ;
37524: LD_ADDR_VAR 0 10
37528: PUSH
37529: LD_VAR 0 10
37533: PUSH
37534: LD_REAL  1.20000000000000E+0000
37537: MUL
37538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37539: LD_VAR 0 6
37543: PPUSH
37544: CALL_OW 264
37548: PUSH
37549: LD_INT 6
37551: PUSH
37552: LD_INT 46
37554: PUSH
37555: LD_INT 47
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: LIST
37562: IN
37563: IFFALSE 37580
// bpoints := bpoints * 1.2 ;
37565: LD_ADDR_VAR 0 10
37569: PUSH
37570: LD_VAR 0 10
37574: PUSH
37575: LD_REAL  1.20000000000000E+0000
37578: MUL
37579: ST_TO_ADDR
// end ; unit_building :
37580: GO 37594
37582: LD_INT 3
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37593
37590: POP
// ; end ;
37591: GO 37594
37593: POP
// for j = 1 to 3 do
37594: LD_ADDR_VAR 0 7
37598: PUSH
37599: DOUBLE
37600: LD_INT 1
37602: DEC
37603: ST_TO_ADDR
37604: LD_INT 3
37606: PUSH
37607: FOR_TO
37608: IFFALSE 37661
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37610: LD_ADDR_VAR 0 5
37614: PUSH
37615: LD_VAR 0 5
37619: PPUSH
37620: LD_VAR 0 7
37624: PPUSH
37625: LD_VAR 0 5
37629: PUSH
37630: LD_VAR 0 7
37634: ARRAY
37635: PUSH
37636: LD_VAR 0 9
37640: PUSH
37641: LD_VAR 0 7
37645: ARRAY
37646: PUSH
37647: LD_VAR 0 10
37651: MUL
37652: PLUS
37653: PPUSH
37654: CALL_OW 1
37658: ST_TO_ADDR
37659: GO 37607
37661: POP
37662: POP
// end ;
37663: GO 36142
37665: POP
37666: POP
// result := Replace ( result , 4 , tmp ) ;
37667: LD_ADDR_VAR 0 5
37671: PUSH
37672: LD_VAR 0 5
37676: PPUSH
37677: LD_INT 4
37679: PPUSH
37680: LD_VAR 0 8
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
// end ;
37690: LD_VAR 0 5
37694: RET
// export function DangerAtRange ( unit , range ) ; begin
37695: LD_INT 0
37697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37698: LD_ADDR_VAR 0 3
37702: PUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 255
37712: PPUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 250
37722: PPUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 251
37732: PPUSH
37733: LD_VAR 0 2
37737: PPUSH
37738: CALL 35994 0 4
37742: ST_TO_ADDR
// end ;
37743: LD_VAR 0 3
37747: RET
// export function DangerInArea ( side , area ) ; begin
37748: LD_INT 0
37750: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37751: LD_ADDR_VAR 0 3
37755: PUSH
37756: LD_VAR 0 2
37760: PPUSH
37761: LD_INT 81
37763: PUSH
37764: LD_VAR 0 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PPUSH
37773: CALL_OW 70
37777: ST_TO_ADDR
// end ;
37778: LD_VAR 0 3
37782: RET
// export function IsExtension ( b ) ; begin
37783: LD_INT 0
37785: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37786: LD_ADDR_VAR 0 2
37790: PUSH
37791: LD_VAR 0 1
37795: PUSH
37796: LD_INT 23
37798: PUSH
37799: LD_INT 20
37801: PUSH
37802: LD_INT 22
37804: PUSH
37805: LD_INT 17
37807: PUSH
37808: LD_INT 24
37810: PUSH
37811: LD_INT 21
37813: PUSH
37814: LD_INT 19
37816: PUSH
37817: LD_INT 16
37819: PUSH
37820: LD_INT 25
37822: PUSH
37823: LD_INT 18
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: IN
37838: ST_TO_ADDR
// end ;
37839: LD_VAR 0 2
37843: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37844: LD_INT 0
37846: PPUSH
37847: PPUSH
37848: PPUSH
// result := [ ] ;
37849: LD_ADDR_VAR 0 4
37853: PUSH
37854: EMPTY
37855: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37856: LD_ADDR_VAR 0 5
37860: PUSH
37861: LD_VAR 0 2
37865: PPUSH
37866: LD_INT 21
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 70
37880: ST_TO_ADDR
// if not tmp then
37881: LD_VAR 0 5
37885: NOT
37886: IFFALSE 37890
// exit ;
37888: GO 37954
// if checkLink then
37890: LD_VAR 0 3
37894: IFFALSE 37944
// begin for i in tmp do
37896: LD_ADDR_VAR 0 6
37900: PUSH
37901: LD_VAR 0 5
37905: PUSH
37906: FOR_IN
37907: IFFALSE 37942
// if GetBase ( i ) <> base then
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 274
37918: PUSH
37919: LD_VAR 0 1
37923: NONEQUAL
37924: IFFALSE 37940
// ComLinkToBase ( base , i ) ;
37926: LD_VAR 0 1
37930: PPUSH
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 169
37940: GO 37906
37942: POP
37943: POP
// end ; result := tmp ;
37944: LD_ADDR_VAR 0 4
37948: PUSH
37949: LD_VAR 0 5
37953: ST_TO_ADDR
// end ;
37954: LD_VAR 0 4
37958: RET
// export function ComComplete ( units , b ) ; var i ; begin
37959: LD_INT 0
37961: PPUSH
37962: PPUSH
// if not units then
37963: LD_VAR 0 1
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38062
// for i in units do
37972: LD_ADDR_VAR 0 4
37976: PUSH
37977: LD_VAR 0 1
37981: PUSH
37982: FOR_IN
37983: IFFALSE 38060
// if BuildingStatus ( b ) = bs_build then
37985: LD_VAR 0 2
37989: PPUSH
37990: CALL_OW 461
37994: PUSH
37995: LD_INT 1
37997: EQUAL
37998: IFFALSE 38058
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38000: LD_VAR 0 4
38004: PPUSH
38005: LD_STRING h
38007: PUSH
38008: LD_VAR 0 2
38012: PPUSH
38013: CALL_OW 250
38017: PUSH
38018: LD_VAR 0 2
38022: PPUSH
38023: CALL_OW 251
38027: PUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: PPUSH
38054: CALL_OW 446
38058: GO 37982
38060: POP
38061: POP
// end ;
38062: LD_VAR 0 3
38066: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38067: LD_INT 0
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38075: LD_VAR 0 1
38079: NOT
38080: PUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 263
38090: PUSH
38091: LD_INT 2
38093: NONEQUAL
38094: OR
38095: IFFALSE 38099
// exit ;
38097: GO 38415
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38099: LD_ADDR_VAR 0 6
38103: PUSH
38104: LD_INT 22
38106: PUSH
38107: LD_VAR 0 1
38111: PPUSH
38112: CALL_OW 255
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 30
38126: PUSH
38127: LD_INT 36
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 34
38136: PUSH
38137: LD_INT 31
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PPUSH
38153: CALL_OW 69
38157: ST_TO_ADDR
// if not tmp then
38158: LD_VAR 0 6
38162: NOT
38163: IFFALSE 38167
// exit ;
38165: GO 38415
// result := [ ] ;
38167: LD_ADDR_VAR 0 2
38171: PUSH
38172: EMPTY
38173: ST_TO_ADDR
// for i in tmp do
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_VAR 0 6
38183: PUSH
38184: FOR_IN
38185: IFFALSE 38256
// begin t := UnitsInside ( i ) ;
38187: LD_ADDR_VAR 0 4
38191: PUSH
38192: LD_VAR 0 3
38196: PPUSH
38197: CALL_OW 313
38201: ST_TO_ADDR
// if t then
38202: LD_VAR 0 4
38206: IFFALSE 38254
// for j in t do
38208: LD_ADDR_VAR 0 7
38212: PUSH
38213: LD_VAR 0 4
38217: PUSH
38218: FOR_IN
38219: IFFALSE 38252
// result := Replace ( result , result + 1 , j ) ;
38221: LD_ADDR_VAR 0 2
38225: PUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: LD_VAR 0 2
38235: PUSH
38236: LD_INT 1
38238: PLUS
38239: PPUSH
38240: LD_VAR 0 7
38244: PPUSH
38245: CALL_OW 1
38249: ST_TO_ADDR
38250: GO 38218
38252: POP
38253: POP
// end ;
38254: GO 38184
38256: POP
38257: POP
// if not result then
38258: LD_VAR 0 2
38262: NOT
38263: IFFALSE 38267
// exit ;
38265: GO 38415
// mech := result [ 1 ] ;
38267: LD_ADDR_VAR 0 5
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: ST_TO_ADDR
// if result > 1 then
38281: LD_VAR 0 2
38285: PUSH
38286: LD_INT 1
38288: GREATER
38289: IFFALSE 38401
// begin for i = 2 to result do
38291: LD_ADDR_VAR 0 3
38295: PUSH
38296: DOUBLE
38297: LD_INT 2
38299: DEC
38300: ST_TO_ADDR
38301: LD_VAR 0 2
38305: PUSH
38306: FOR_TO
38307: IFFALSE 38399
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38309: LD_ADDR_VAR 0 4
38313: PUSH
38314: LD_VAR 0 2
38318: PUSH
38319: LD_VAR 0 3
38323: ARRAY
38324: PPUSH
38325: LD_INT 3
38327: PPUSH
38328: CALL_OW 259
38332: PUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_VAR 0 3
38342: ARRAY
38343: PPUSH
38344: CALL_OW 432
38348: MINUS
38349: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38350: LD_VAR 0 4
38354: PUSH
38355: LD_VAR 0 5
38359: PPUSH
38360: LD_INT 3
38362: PPUSH
38363: CALL_OW 259
38367: PUSH
38368: LD_VAR 0 5
38372: PPUSH
38373: CALL_OW 432
38377: MINUS
38378: GREATEREQUAL
38379: IFFALSE 38397
// mech := result [ i ] ;
38381: LD_ADDR_VAR 0 5
38385: PUSH
38386: LD_VAR 0 2
38390: PUSH
38391: LD_VAR 0 3
38395: ARRAY
38396: ST_TO_ADDR
// end ;
38397: GO 38306
38399: POP
38400: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38401: LD_VAR 0 1
38405: PPUSH
38406: LD_VAR 0 5
38410: PPUSH
38411: CALL_OW 135
// end ;
38415: LD_VAR 0 2
38419: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38420: LD_INT 0
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
// result := [ ] ;
38435: LD_ADDR_VAR 0 7
38439: PUSH
38440: EMPTY
38441: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38442: LD_VAR 0 1
38446: PPUSH
38447: CALL_OW 266
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: IN
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 40101
// if name then
38467: LD_VAR 0 3
38471: IFFALSE 38487
// SetBName ( base_dep , name ) ;
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_VAR 0 3
38482: PPUSH
38483: CALL_OW 500
// base := GetBase ( base_dep ) ;
38487: LD_ADDR_VAR 0 15
38491: PUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 274
38501: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38502: LD_ADDR_VAR 0 16
38506: PUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 255
38516: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38517: LD_ADDR_VAR 0 17
38521: PUSH
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL_OW 248
38531: ST_TO_ADDR
// if sources then
38532: LD_VAR 0 5
38536: IFFALSE 38583
// for i = 1 to 3 do
38538: LD_ADDR_VAR 0 8
38542: PUSH
38543: DOUBLE
38544: LD_INT 1
38546: DEC
38547: ST_TO_ADDR
38548: LD_INT 3
38550: PUSH
38551: FOR_TO
38552: IFFALSE 38581
// AddResourceType ( base , i , sources [ i ] ) ;
38554: LD_VAR 0 15
38558: PPUSH
38559: LD_VAR 0 8
38563: PPUSH
38564: LD_VAR 0 5
38568: PUSH
38569: LD_VAR 0 8
38573: ARRAY
38574: PPUSH
38575: CALL_OW 276
38579: GO 38551
38581: POP
38582: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38583: LD_ADDR_VAR 0 18
38587: PUSH
38588: LD_VAR 0 15
38592: PPUSH
38593: LD_VAR 0 2
38597: PPUSH
38598: LD_INT 1
38600: PPUSH
38601: CALL 37844 0 3
38605: ST_TO_ADDR
// InitHc ;
38606: CALL_OW 19
// InitUc ;
38610: CALL_OW 18
// uc_side := side ;
38614: LD_ADDR_OWVAR 20
38618: PUSH
38619: LD_VAR 0 16
38623: ST_TO_ADDR
// uc_nation := nation ;
38624: LD_ADDR_OWVAR 21
38628: PUSH
38629: LD_VAR 0 17
38633: ST_TO_ADDR
// if buildings then
38634: LD_VAR 0 18
38638: IFFALSE 39960
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38640: LD_ADDR_VAR 0 19
38644: PUSH
38645: LD_VAR 0 18
38649: PPUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 30
38655: PUSH
38656: LD_INT 29
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 30
38665: PUSH
38666: LD_INT 30
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PPUSH
38678: CALL_OW 72
38682: ST_TO_ADDR
// if tmp then
38683: LD_VAR 0 19
38687: IFFALSE 38735
// for i in tmp do
38689: LD_ADDR_VAR 0 8
38693: PUSH
38694: LD_VAR 0 19
38698: PUSH
38699: FOR_IN
38700: IFFALSE 38733
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38702: LD_VAR 0 8
38706: PPUSH
38707: CALL_OW 250
38711: PPUSH
38712: LD_VAR 0 8
38716: PPUSH
38717: CALL_OW 251
38721: PPUSH
38722: LD_VAR 0 16
38726: PPUSH
38727: CALL_OW 441
38731: GO 38699
38733: POP
38734: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38735: LD_VAR 0 18
38739: PPUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 30
38745: PUSH
38746: LD_INT 32
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 30
38755: PUSH
38756: LD_INT 33
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PPUSH
38768: CALL_OW 72
38772: IFFALSE 38860
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38774: LD_ADDR_VAR 0 8
38778: PUSH
38779: LD_VAR 0 18
38783: PPUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 32
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 33
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PPUSH
38812: CALL_OW 72
38816: PUSH
38817: FOR_IN
38818: IFFALSE 38858
// begin if not GetBWeapon ( i ) then
38820: LD_VAR 0 8
38824: PPUSH
38825: CALL_OW 269
38829: NOT
38830: IFFALSE 38856
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38832: LD_VAR 0 8
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: LD_VAR 0 2
38846: PPUSH
38847: CALL 40106 0 2
38851: PPUSH
38852: CALL_OW 431
// end ;
38856: GO 38817
38858: POP
38859: POP
// end ; for i = 1 to personel do
38860: LD_ADDR_VAR 0 8
38864: PUSH
38865: DOUBLE
38866: LD_INT 1
38868: DEC
38869: ST_TO_ADDR
38870: LD_VAR 0 6
38874: PUSH
38875: FOR_TO
38876: IFFALSE 39940
// begin if i > 4 then
38878: LD_VAR 0 8
38882: PUSH
38883: LD_INT 4
38885: GREATER
38886: IFFALSE 38890
// break ;
38888: GO 39940
// case i of 1 :
38890: LD_VAR 0 8
38894: PUSH
38895: LD_INT 1
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38983
38903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38904: LD_ADDR_VAR 0 12
38908: PUSH
38909: LD_VAR 0 18
38913: PPUSH
38914: LD_INT 22
38916: PUSH
38917: LD_VAR 0 16
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 58
38928: PUSH
38929: EMPTY
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 30
38937: PUSH
38938: LD_INT 32
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 30
38947: PUSH
38948: LD_INT 4
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 30
38957: PUSH
38958: LD_INT 5
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL_OW 72
38980: ST_TO_ADDR
38981: GO 39205
38983: LD_INT 2
38985: DOUBLE
38986: EQUAL
38987: IFTRUE 38991
38989: GO 39053
38991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38992: LD_ADDR_VAR 0 12
38996: PUSH
38997: LD_VAR 0 18
39001: PPUSH
39002: LD_INT 22
39004: PUSH
39005: LD_VAR 0 16
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 30
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 30
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PPUSH
39046: CALL_OW 72
39050: ST_TO_ADDR
39051: GO 39205
39053: LD_INT 3
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39061
39059: GO 39123
39061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39062: LD_ADDR_VAR 0 12
39066: PUSH
39067: LD_VAR 0 18
39071: PPUSH
39072: LD_INT 22
39074: PUSH
39075: LD_VAR 0 16
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 30
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 30
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PPUSH
39116: CALL_OW 72
39120: ST_TO_ADDR
39121: GO 39205
39123: LD_INT 4
39125: DOUBLE
39126: EQUAL
39127: IFTRUE 39131
39129: GO 39204
39131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39132: LD_ADDR_VAR 0 12
39136: PUSH
39137: LD_VAR 0 18
39141: PPUSH
39142: LD_INT 22
39144: PUSH
39145: LD_VAR 0 16
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 30
39159: PUSH
39160: LD_INT 6
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 30
39169: PUSH
39170: LD_INT 7
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 30
39179: PUSH
39180: LD_INT 8
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 72
39201: ST_TO_ADDR
39202: GO 39205
39204: POP
// if i = 1 then
39205: LD_VAR 0 8
39209: PUSH
39210: LD_INT 1
39212: EQUAL
39213: IFFALSE 39324
// begin tmp := [ ] ;
39215: LD_ADDR_VAR 0 19
39219: PUSH
39220: EMPTY
39221: ST_TO_ADDR
// for j in f do
39222: LD_ADDR_VAR 0 9
39226: PUSH
39227: LD_VAR 0 12
39231: PUSH
39232: FOR_IN
39233: IFFALSE 39306
// if GetBType ( j ) = b_bunker then
39235: LD_VAR 0 9
39239: PPUSH
39240: CALL_OW 266
39244: PUSH
39245: LD_INT 32
39247: EQUAL
39248: IFFALSE 39275
// tmp := Insert ( tmp , 1 , j ) else
39250: LD_ADDR_VAR 0 19
39254: PUSH
39255: LD_VAR 0 19
39259: PPUSH
39260: LD_INT 1
39262: PPUSH
39263: LD_VAR 0 9
39267: PPUSH
39268: CALL_OW 2
39272: ST_TO_ADDR
39273: GO 39304
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39275: LD_ADDR_VAR 0 19
39279: PUSH
39280: LD_VAR 0 19
39284: PPUSH
39285: LD_VAR 0 19
39289: PUSH
39290: LD_INT 1
39292: PLUS
39293: PPUSH
39294: LD_VAR 0 9
39298: PPUSH
39299: CALL_OW 2
39303: ST_TO_ADDR
39304: GO 39232
39306: POP
39307: POP
// if tmp then
39308: LD_VAR 0 19
39312: IFFALSE 39324
// f := tmp ;
39314: LD_ADDR_VAR 0 12
39318: PUSH
39319: LD_VAR 0 19
39323: ST_TO_ADDR
// end ; x := personel [ i ] ;
39324: LD_ADDR_VAR 0 13
39328: PUSH
39329: LD_VAR 0 6
39333: PUSH
39334: LD_VAR 0 8
39338: ARRAY
39339: ST_TO_ADDR
// if x = - 1 then
39340: LD_VAR 0 13
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: EQUAL
39349: IFFALSE 39558
// begin for j in f do
39351: LD_ADDR_VAR 0 9
39355: PUSH
39356: LD_VAR 0 12
39360: PUSH
39361: FOR_IN
39362: IFFALSE 39554
// repeat InitHc ;
39364: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39368: LD_VAR 0 9
39372: PPUSH
39373: CALL_OW 266
39377: PUSH
39378: LD_INT 5
39380: EQUAL
39381: IFFALSE 39451
// begin if UnitsInside ( j ) < 3 then
39383: LD_VAR 0 9
39387: PPUSH
39388: CALL_OW 313
39392: PUSH
39393: LD_INT 3
39395: LESS
39396: IFFALSE 39432
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39398: LD_INT 0
39400: PPUSH
39401: LD_INT 5
39403: PUSH
39404: LD_INT 8
39406: PUSH
39407: LD_INT 9
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: PUSH
39415: LD_VAR 0 17
39419: ARRAY
39420: PPUSH
39421: LD_VAR 0 4
39425: PPUSH
39426: CALL_OW 380
39430: GO 39449
// PrepareHuman ( false , i , skill ) ;
39432: LD_INT 0
39434: PPUSH
39435: LD_VAR 0 8
39439: PPUSH
39440: LD_VAR 0 4
39444: PPUSH
39445: CALL_OW 380
// end else
39449: GO 39468
// PrepareHuman ( false , i , skill ) ;
39451: LD_INT 0
39453: PPUSH
39454: LD_VAR 0 8
39458: PPUSH
39459: LD_VAR 0 4
39463: PPUSH
39464: CALL_OW 380
// un := CreateHuman ;
39468: LD_ADDR_VAR 0 14
39472: PUSH
39473: CALL_OW 44
39477: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_VAR 0 7
39487: PPUSH
39488: LD_INT 1
39490: PPUSH
39491: LD_VAR 0 14
39495: PPUSH
39496: CALL_OW 2
39500: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39501: LD_VAR 0 14
39505: PPUSH
39506: LD_VAR 0 9
39510: PPUSH
39511: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39515: LD_VAR 0 9
39519: PPUSH
39520: CALL_OW 313
39524: PUSH
39525: LD_INT 6
39527: EQUAL
39528: PUSH
39529: LD_VAR 0 9
39533: PPUSH
39534: CALL_OW 266
39538: PUSH
39539: LD_INT 32
39541: PUSH
39542: LD_INT 31
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: IN
39549: OR
39550: IFFALSE 39364
39552: GO 39361
39554: POP
39555: POP
// end else
39556: GO 39938
// for j = 1 to x do
39558: LD_ADDR_VAR 0 9
39562: PUSH
39563: DOUBLE
39564: LD_INT 1
39566: DEC
39567: ST_TO_ADDR
39568: LD_VAR 0 13
39572: PUSH
39573: FOR_TO
39574: IFFALSE 39936
// begin InitHc ;
39576: CALL_OW 19
// if not f then
39580: LD_VAR 0 12
39584: NOT
39585: IFFALSE 39674
// begin PrepareHuman ( false , i , skill ) ;
39587: LD_INT 0
39589: PPUSH
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_VAR 0 4
39599: PPUSH
39600: CALL_OW 380
// un := CreateHuman ;
39604: LD_ADDR_VAR 0 14
39608: PUSH
39609: CALL_OW 44
39613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39614: LD_ADDR_VAR 0 7
39618: PUSH
39619: LD_VAR 0 7
39623: PPUSH
39624: LD_INT 1
39626: PPUSH
39627: LD_VAR 0 14
39631: PPUSH
39632: CALL_OW 2
39636: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39637: LD_VAR 0 14
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 250
39651: PPUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 251
39661: PPUSH
39662: LD_INT 10
39664: PPUSH
39665: LD_INT 0
39667: PPUSH
39668: CALL_OW 50
// continue ;
39672: GO 39573
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39674: LD_VAR 0 12
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PPUSH
39683: CALL_OW 313
39687: PUSH
39688: LD_VAR 0 12
39692: PUSH
39693: LD_INT 1
39695: ARRAY
39696: PPUSH
39697: CALL_OW 266
39701: PUSH
39702: LD_INT 32
39704: PUSH
39705: LD_INT 31
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: IN
39712: AND
39713: PUSH
39714: LD_VAR 0 12
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PPUSH
39723: CALL_OW 313
39727: PUSH
39728: LD_INT 6
39730: EQUAL
39731: OR
39732: IFFALSE 39752
// f := Delete ( f , 1 ) ;
39734: LD_ADDR_VAR 0 12
39738: PUSH
39739: LD_VAR 0 12
39743: PPUSH
39744: LD_INT 1
39746: PPUSH
39747: CALL_OW 3
39751: ST_TO_ADDR
// if not f then
39752: LD_VAR 0 12
39756: NOT
39757: IFFALSE 39775
// begin x := x + 2 ;
39759: LD_ADDR_VAR 0 13
39763: PUSH
39764: LD_VAR 0 13
39768: PUSH
39769: LD_INT 2
39771: PLUS
39772: ST_TO_ADDR
// continue ;
39773: GO 39573
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39775: LD_VAR 0 12
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PPUSH
39784: CALL_OW 266
39788: PUSH
39789: LD_INT 5
39791: EQUAL
39792: IFFALSE 39866
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39794: LD_VAR 0 12
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: CALL_OW 313
39807: PUSH
39808: LD_INT 3
39810: LESS
39811: IFFALSE 39847
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39813: LD_INT 0
39815: PPUSH
39816: LD_INT 5
39818: PUSH
39819: LD_INT 8
39821: PUSH
39822: LD_INT 9
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: PUSH
39830: LD_VAR 0 17
39834: ARRAY
39835: PPUSH
39836: LD_VAR 0 4
39840: PPUSH
39841: CALL_OW 380
39845: GO 39864
// PrepareHuman ( false , i , skill ) ;
39847: LD_INT 0
39849: PPUSH
39850: LD_VAR 0 8
39854: PPUSH
39855: LD_VAR 0 4
39859: PPUSH
39860: CALL_OW 380
// end else
39864: GO 39883
// PrepareHuman ( false , i , skill ) ;
39866: LD_INT 0
39868: PPUSH
39869: LD_VAR 0 8
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: CALL_OW 380
// un := CreateHuman ;
39883: LD_ADDR_VAR 0 14
39887: PUSH
39888: CALL_OW 44
39892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39893: LD_ADDR_VAR 0 7
39897: PUSH
39898: LD_VAR 0 7
39902: PPUSH
39903: LD_INT 1
39905: PPUSH
39906: LD_VAR 0 14
39910: PPUSH
39911: CALL_OW 2
39915: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39916: LD_VAR 0 14
39920: PPUSH
39921: LD_VAR 0 12
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PPUSH
39930: CALL_OW 52
// end ;
39934: GO 39573
39936: POP
39937: POP
// end ;
39938: GO 38875
39940: POP
39941: POP
// result := result ^ buildings ;
39942: LD_ADDR_VAR 0 7
39946: PUSH
39947: LD_VAR 0 7
39951: PUSH
39952: LD_VAR 0 18
39956: ADD
39957: ST_TO_ADDR
// end else
39958: GO 40101
// begin for i = 1 to personel do
39960: LD_ADDR_VAR 0 8
39964: PUSH
39965: DOUBLE
39966: LD_INT 1
39968: DEC
39969: ST_TO_ADDR
39970: LD_VAR 0 6
39974: PUSH
39975: FOR_TO
39976: IFFALSE 40099
// begin if i > 4 then
39978: LD_VAR 0 8
39982: PUSH
39983: LD_INT 4
39985: GREATER
39986: IFFALSE 39990
// break ;
39988: GO 40099
// x := personel [ i ] ;
39990: LD_ADDR_VAR 0 13
39994: PUSH
39995: LD_VAR 0 6
39999: PUSH
40000: LD_VAR 0 8
40004: ARRAY
40005: ST_TO_ADDR
// if x = - 1 then
40006: LD_VAR 0 13
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: EQUAL
40015: IFFALSE 40019
// continue ;
40017: GO 39975
// PrepareHuman ( false , i , skill ) ;
40019: LD_INT 0
40021: PPUSH
40022: LD_VAR 0 8
40026: PPUSH
40027: LD_VAR 0 4
40031: PPUSH
40032: CALL_OW 380
// un := CreateHuman ;
40036: LD_ADDR_VAR 0 14
40040: PUSH
40041: CALL_OW 44
40045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40046: LD_VAR 0 14
40050: PPUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 250
40060: PPUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 251
40070: PPUSH
40071: LD_INT 10
40073: PPUSH
40074: LD_INT 0
40076: PPUSH
40077: CALL_OW 50
// result := result ^ un ;
40081: LD_ADDR_VAR 0 7
40085: PUSH
40086: LD_VAR 0 7
40090: PUSH
40091: LD_VAR 0 14
40095: ADD
40096: ST_TO_ADDR
// end ;
40097: GO 39975
40099: POP
40100: POP
// end ; end ;
40101: LD_VAR 0 7
40105: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40106: LD_INT 0
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
40120: PPUSH
40121: PPUSH
40122: PPUSH
40123: PPUSH
// result := false ;
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 0
40131: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40132: LD_VAR 0 1
40136: NOT
40137: PUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 266
40147: PUSH
40148: LD_INT 32
40150: PUSH
40151: LD_INT 33
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: IN
40158: NOT
40159: OR
40160: IFFALSE 40164
// exit ;
40162: GO 41273
// nat := GetNation ( tower ) ;
40164: LD_ADDR_VAR 0 12
40168: PUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 248
40178: ST_TO_ADDR
// side := GetSide ( tower ) ;
40179: LD_ADDR_VAR 0 16
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 255
40193: ST_TO_ADDR
// x := GetX ( tower ) ;
40194: LD_ADDR_VAR 0 10
40198: PUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 250
40208: ST_TO_ADDR
// y := GetY ( tower ) ;
40209: LD_ADDR_VAR 0 11
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 251
40223: ST_TO_ADDR
// if not x or not y then
40224: LD_VAR 0 10
40228: NOT
40229: PUSH
40230: LD_VAR 0 11
40234: NOT
40235: OR
40236: IFFALSE 40240
// exit ;
40238: GO 41273
// weapon := 0 ;
40240: LD_ADDR_VAR 0 18
40244: PUSH
40245: LD_INT 0
40247: ST_TO_ADDR
// fac_list := [ ] ;
40248: LD_ADDR_VAR 0 17
40252: PUSH
40253: EMPTY
40254: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40255: LD_ADDR_VAR 0 6
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 274
40269: PPUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_INT 0
40277: PPUSH
40278: CALL 37844 0 3
40282: PPUSH
40283: LD_INT 30
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PPUSH
40293: CALL_OW 72
40297: ST_TO_ADDR
// if not factories then
40298: LD_VAR 0 6
40302: NOT
40303: IFFALSE 40307
// exit ;
40305: GO 41273
// for i in factories do
40307: LD_ADDR_VAR 0 8
40311: PUSH
40312: LD_VAR 0 6
40316: PUSH
40317: FOR_IN
40318: IFFALSE 40343
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40320: LD_ADDR_VAR 0 17
40324: PUSH
40325: LD_VAR 0 17
40329: PUSH
40330: LD_VAR 0 8
40334: PPUSH
40335: CALL_OW 478
40339: UNION
40340: ST_TO_ADDR
40341: GO 40317
40343: POP
40344: POP
// if not fac_list then
40345: LD_VAR 0 17
40349: NOT
40350: IFFALSE 40354
// exit ;
40352: GO 41273
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: LD_INT 4
40361: PUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 9
40367: PUSH
40368: LD_INT 10
40370: PUSH
40371: LD_INT 6
40373: PUSH
40374: LD_INT 7
40376: PUSH
40377: LD_INT 11
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 27
40391: PUSH
40392: LD_INT 28
40394: PUSH
40395: LD_INT 26
40397: PUSH
40398: LD_INT 30
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 43
40409: PUSH
40410: LD_INT 44
40412: PUSH
40413: LD_INT 46
40415: PUSH
40416: LD_INT 45
40418: PUSH
40419: LD_INT 47
40421: PUSH
40422: LD_INT 49
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: PUSH
40438: LD_VAR 0 12
40442: ARRAY
40443: ST_TO_ADDR
// list := list isect fac_list ;
40444: LD_ADDR_VAR 0 5
40448: PUSH
40449: LD_VAR 0 5
40453: PUSH
40454: LD_VAR 0 17
40458: ISECT
40459: ST_TO_ADDR
// if not list then
40460: LD_VAR 0 5
40464: NOT
40465: IFFALSE 40469
// exit ;
40467: GO 41273
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40469: LD_VAR 0 12
40473: PUSH
40474: LD_INT 3
40476: EQUAL
40477: PUSH
40478: LD_INT 49
40480: PUSH
40481: LD_VAR 0 5
40485: IN
40486: AND
40487: PUSH
40488: LD_INT 31
40490: PPUSH
40491: LD_VAR 0 16
40495: PPUSH
40496: CALL_OW 321
40500: PUSH
40501: LD_INT 2
40503: EQUAL
40504: AND
40505: IFFALSE 40565
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40507: LD_INT 22
40509: PUSH
40510: LD_VAR 0 16
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 35
40521: PUSH
40522: LD_INT 49
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 91
40531: PUSH
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 10
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: PPUSH
40550: CALL_OW 69
40554: NOT
40555: IFFALSE 40565
// weapon := ru_time_lapser ;
40557: LD_ADDR_VAR 0 18
40561: PUSH
40562: LD_INT 49
40564: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40565: LD_VAR 0 12
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: IN
40580: PUSH
40581: LD_INT 11
40583: PUSH
40584: LD_VAR 0 5
40588: IN
40589: PUSH
40590: LD_INT 30
40592: PUSH
40593: LD_VAR 0 5
40597: IN
40598: OR
40599: AND
40600: PUSH
40601: LD_INT 6
40603: PPUSH
40604: LD_VAR 0 16
40608: PPUSH
40609: CALL_OW 321
40613: PUSH
40614: LD_INT 2
40616: EQUAL
40617: AND
40618: IFFALSE 40783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40620: LD_INT 22
40622: PUSH
40623: LD_VAR 0 16
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: PUSH
40635: LD_INT 35
40637: PUSH
40638: LD_INT 11
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 35
40647: PUSH
40648: LD_INT 30
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 91
40662: PUSH
40663: LD_VAR 0 1
40667: PUSH
40668: LD_INT 18
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: PPUSH
40681: CALL_OW 69
40685: NOT
40686: PUSH
40687: LD_INT 22
40689: PUSH
40690: LD_VAR 0 16
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 30
40704: PUSH
40705: LD_INT 32
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 30
40714: PUSH
40715: LD_INT 33
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 91
40729: PUSH
40730: LD_VAR 0 1
40734: PUSH
40735: LD_INT 12
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: PPUSH
40751: CALL_OW 69
40755: PUSH
40756: LD_INT 2
40758: GREATER
40759: AND
40760: IFFALSE 40783
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40762: LD_ADDR_VAR 0 18
40766: PUSH
40767: LD_INT 11
40769: PUSH
40770: LD_INT 30
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_VAR 0 12
40781: ARRAY
40782: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40783: LD_VAR 0 18
40787: NOT
40788: PUSH
40789: LD_INT 40
40791: PPUSH
40792: LD_VAR 0 16
40796: PPUSH
40797: CALL_OW 321
40801: PUSH
40802: LD_INT 2
40804: EQUAL
40805: AND
40806: PUSH
40807: LD_INT 7
40809: PUSH
40810: LD_VAR 0 5
40814: IN
40815: PUSH
40816: LD_INT 28
40818: PUSH
40819: LD_VAR 0 5
40823: IN
40824: OR
40825: PUSH
40826: LD_INT 45
40828: PUSH
40829: LD_VAR 0 5
40833: IN
40834: OR
40835: AND
40836: IFFALSE 41090
// begin hex := GetHexInfo ( x , y ) ;
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_VAR 0 10
40847: PPUSH
40848: LD_VAR 0 11
40852: PPUSH
40853: CALL_OW 546
40857: ST_TO_ADDR
// if hex [ 1 ] then
40858: LD_VAR 0 4
40862: PUSH
40863: LD_INT 1
40865: ARRAY
40866: IFFALSE 40870
// exit ;
40868: GO 41273
// height := hex [ 2 ] ;
40870: LD_ADDR_VAR 0 15
40874: PUSH
40875: LD_VAR 0 4
40879: PUSH
40880: LD_INT 2
40882: ARRAY
40883: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40884: LD_ADDR_VAR 0 14
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: LD_INT 5
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// for i in tmp do
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: LD_VAR 0 14
40916: PUSH
40917: FOR_IN
40918: IFFALSE 41088
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40920: LD_ADDR_VAR 0 9
40924: PUSH
40925: LD_VAR 0 10
40929: PPUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_INT 5
40937: PPUSH
40938: CALL_OW 272
40942: PUSH
40943: LD_VAR 0 11
40947: PPUSH
40948: LD_VAR 0 8
40952: PPUSH
40953: LD_INT 5
40955: PPUSH
40956: CALL_OW 273
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40965: LD_VAR 0 9
40969: PUSH
40970: LD_INT 1
40972: ARRAY
40973: PPUSH
40974: LD_VAR 0 9
40978: PUSH
40979: LD_INT 2
40981: ARRAY
40982: PPUSH
40983: CALL_OW 488
40987: IFFALSE 41086
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: LD_VAR 0 9
40998: PUSH
40999: LD_INT 1
41001: ARRAY
41002: PPUSH
41003: LD_VAR 0 9
41007: PUSH
41008: LD_INT 2
41010: ARRAY
41011: PPUSH
41012: CALL_OW 546
41016: ST_TO_ADDR
// if hex [ 1 ] then
41017: LD_VAR 0 4
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: IFFALSE 41029
// continue ;
41027: GO 40917
// h := hex [ 2 ] ;
41029: LD_ADDR_VAR 0 13
41033: PUSH
41034: LD_VAR 0 4
41038: PUSH
41039: LD_INT 2
41041: ARRAY
41042: ST_TO_ADDR
// if h + 7 < height then
41043: LD_VAR 0 13
41047: PUSH
41048: LD_INT 7
41050: PLUS
41051: PUSH
41052: LD_VAR 0 15
41056: LESS
41057: IFFALSE 41086
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41059: LD_ADDR_VAR 0 18
41063: PUSH
41064: LD_INT 7
41066: PUSH
41067: LD_INT 28
41069: PUSH
41070: LD_INT 45
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: PUSH
41078: LD_VAR 0 12
41082: ARRAY
41083: ST_TO_ADDR
// break ;
41084: GO 41088
// end ; end ; end ;
41086: GO 40917
41088: POP
41089: POP
// end ; if not weapon then
41090: LD_VAR 0 18
41094: NOT
41095: IFFALSE 41155
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41097: LD_ADDR_VAR 0 5
41101: PUSH
41102: LD_VAR 0 5
41106: PUSH
41107: LD_INT 11
41109: PUSH
41110: LD_INT 30
41112: PUSH
41113: LD_INT 49
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: DIFF
41121: ST_TO_ADDR
// if not list then
41122: LD_VAR 0 5
41126: NOT
41127: IFFALSE 41131
// exit ;
41129: GO 41273
// weapon := list [ rand ( 1 , list ) ] ;
41131: LD_ADDR_VAR 0 18
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 1
41143: PPUSH
41144: LD_VAR 0 5
41148: PPUSH
41149: CALL_OW 12
41153: ARRAY
41154: ST_TO_ADDR
// end ; if weapon then
41155: LD_VAR 0 18
41159: IFFALSE 41273
// begin tmp := CostOfWeapon ( weapon ) ;
41161: LD_ADDR_VAR 0 14
41165: PUSH
41166: LD_VAR 0 18
41170: PPUSH
41171: CALL_OW 451
41175: ST_TO_ADDR
// j := GetBase ( tower ) ;
41176: LD_ADDR_VAR 0 9
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 274
41190: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41191: LD_VAR 0 9
41195: PPUSH
41196: LD_INT 1
41198: PPUSH
41199: CALL_OW 275
41203: PUSH
41204: LD_VAR 0 14
41208: PUSH
41209: LD_INT 1
41211: ARRAY
41212: GREATEREQUAL
41213: PUSH
41214: LD_VAR 0 9
41218: PPUSH
41219: LD_INT 2
41221: PPUSH
41222: CALL_OW 275
41226: PUSH
41227: LD_VAR 0 14
41231: PUSH
41232: LD_INT 2
41234: ARRAY
41235: GREATEREQUAL
41236: AND
41237: PUSH
41238: LD_VAR 0 9
41242: PPUSH
41243: LD_INT 3
41245: PPUSH
41246: CALL_OW 275
41250: PUSH
41251: LD_VAR 0 14
41255: PUSH
41256: LD_INT 3
41258: ARRAY
41259: GREATEREQUAL
41260: AND
41261: IFFALSE 41273
// result := weapon ;
41263: LD_ADDR_VAR 0 3
41267: PUSH
41268: LD_VAR 0 18
41272: ST_TO_ADDR
// end ; end ;
41273: LD_VAR 0 3
41277: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
// result := true ;
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_INT 1
41289: ST_TO_ADDR
// if array1 = array2 then
41290: LD_VAR 0 1
41294: PUSH
41295: LD_VAR 0 2
41299: EQUAL
41300: IFFALSE 41360
// begin for i = 1 to array1 do
41302: LD_ADDR_VAR 0 4
41306: PUSH
41307: DOUBLE
41308: LD_INT 1
41310: DEC
41311: ST_TO_ADDR
41312: LD_VAR 0 1
41316: PUSH
41317: FOR_TO
41318: IFFALSE 41356
// if array1 [ i ] <> array2 [ i ] then
41320: LD_VAR 0 1
41324: PUSH
41325: LD_VAR 0 4
41329: ARRAY
41330: PUSH
41331: LD_VAR 0 2
41335: PUSH
41336: LD_VAR 0 4
41340: ARRAY
41341: NONEQUAL
41342: IFFALSE 41354
// begin result := false ;
41344: LD_ADDR_VAR 0 3
41348: PUSH
41349: LD_INT 0
41351: ST_TO_ADDR
// break ;
41352: GO 41356
// end ;
41354: GO 41317
41356: POP
41357: POP
// end else
41358: GO 41368
// result := false ;
41360: LD_ADDR_VAR 0 3
41364: PUSH
41365: LD_INT 0
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 3
41372: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41373: LD_INT 0
41375: PPUSH
41376: PPUSH
// if not array1 or not array2 then
41377: LD_VAR 0 1
41381: NOT
41382: PUSH
41383: LD_VAR 0 2
41387: NOT
41388: OR
41389: IFFALSE 41393
// exit ;
41391: GO 41457
// result := true ;
41393: LD_ADDR_VAR 0 3
41397: PUSH
41398: LD_INT 1
41400: ST_TO_ADDR
// for i = 1 to array1 do
41401: LD_ADDR_VAR 0 4
41405: PUSH
41406: DOUBLE
41407: LD_INT 1
41409: DEC
41410: ST_TO_ADDR
41411: LD_VAR 0 1
41415: PUSH
41416: FOR_TO
41417: IFFALSE 41455
// if array1 [ i ] <> array2 [ i ] then
41419: LD_VAR 0 1
41423: PUSH
41424: LD_VAR 0 4
41428: ARRAY
41429: PUSH
41430: LD_VAR 0 2
41434: PUSH
41435: LD_VAR 0 4
41439: ARRAY
41440: NONEQUAL
41441: IFFALSE 41453
// begin result := false ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 0
41450: ST_TO_ADDR
// break ;
41451: GO 41455
// end ;
41453: GO 41416
41455: POP
41456: POP
// end ;
41457: LD_VAR 0 3
41461: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41462: LD_INT 0
41464: PPUSH
41465: PPUSH
41466: PPUSH
// pom := GetBase ( fac ) ;
41467: LD_ADDR_VAR 0 5
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 274
41481: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41482: LD_ADDR_VAR 0 4
41486: PUSH
41487: LD_VAR 0 2
41491: PUSH
41492: LD_INT 1
41494: ARRAY
41495: PPUSH
41496: LD_VAR 0 2
41500: PUSH
41501: LD_INT 2
41503: ARRAY
41504: PPUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_INT 3
41512: ARRAY
41513: PPUSH
41514: LD_VAR 0 2
41518: PUSH
41519: LD_INT 4
41521: ARRAY
41522: PPUSH
41523: CALL_OW 449
41527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 5
41537: PPUSH
41538: LD_INT 1
41540: PPUSH
41541: CALL_OW 275
41545: PUSH
41546: LD_VAR 0 4
41550: PUSH
41551: LD_INT 1
41553: ARRAY
41554: GREATEREQUAL
41555: PUSH
41556: LD_VAR 0 5
41560: PPUSH
41561: LD_INT 2
41563: PPUSH
41564: CALL_OW 275
41568: PUSH
41569: LD_VAR 0 4
41573: PUSH
41574: LD_INT 2
41576: ARRAY
41577: GREATEREQUAL
41578: AND
41579: PUSH
41580: LD_VAR 0 5
41584: PPUSH
41585: LD_INT 3
41587: PPUSH
41588: CALL_OW 275
41592: PUSH
41593: LD_VAR 0 4
41597: PUSH
41598: LD_INT 3
41600: ARRAY
41601: GREATEREQUAL
41602: AND
41603: ST_TO_ADDR
// end ;
41604: LD_VAR 0 3
41608: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41609: LD_INT 0
41611: PPUSH
41612: PPUSH
41613: PPUSH
41614: PPUSH
// pom := GetBase ( building ) ;
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 274
41629: ST_TO_ADDR
// if not pom then
41630: LD_VAR 0 3
41634: NOT
41635: IFFALSE 41639
// exit ;
41637: GO 41809
// btype := GetBType ( building ) ;
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_VAR 0 1
41648: PPUSH
41649: CALL_OW 266
41653: ST_TO_ADDR
// if btype = b_armoury then
41654: LD_VAR 0 5
41658: PUSH
41659: LD_INT 4
41661: EQUAL
41662: IFFALSE 41672
// btype := b_barracks ;
41664: LD_ADDR_VAR 0 5
41668: PUSH
41669: LD_INT 5
41671: ST_TO_ADDR
// if btype = b_depot then
41672: LD_VAR 0 5
41676: PUSH
41677: LD_INT 0
41679: EQUAL
41680: IFFALSE 41690
// btype := b_warehouse ;
41682: LD_ADDR_VAR 0 5
41686: PUSH
41687: LD_INT 1
41689: ST_TO_ADDR
// if btype = b_workshop then
41690: LD_VAR 0 5
41694: PUSH
41695: LD_INT 2
41697: EQUAL
41698: IFFALSE 41708
// btype := b_factory ;
41700: LD_ADDR_VAR 0 5
41704: PUSH
41705: LD_INT 3
41707: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41708: LD_ADDR_VAR 0 4
41712: PUSH
41713: LD_VAR 0 5
41717: PPUSH
41718: LD_VAR 0 1
41722: PPUSH
41723: CALL_OW 248
41727: PPUSH
41728: CALL_OW 450
41732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41733: LD_ADDR_VAR 0 2
41737: PUSH
41738: LD_VAR 0 3
41742: PPUSH
41743: LD_INT 1
41745: PPUSH
41746: CALL_OW 275
41750: PUSH
41751: LD_VAR 0 4
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: GREATEREQUAL
41760: PUSH
41761: LD_VAR 0 3
41765: PPUSH
41766: LD_INT 2
41768: PPUSH
41769: CALL_OW 275
41773: PUSH
41774: LD_VAR 0 4
41778: PUSH
41779: LD_INT 2
41781: ARRAY
41782: GREATEREQUAL
41783: AND
41784: PUSH
41785: LD_VAR 0 3
41789: PPUSH
41790: LD_INT 3
41792: PPUSH
41793: CALL_OW 275
41797: PUSH
41798: LD_VAR 0 4
41802: PUSH
41803: LD_INT 3
41805: ARRAY
41806: GREATEREQUAL
41807: AND
41808: ST_TO_ADDR
// end ;
41809: LD_VAR 0 2
41813: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41814: LD_INT 0
41816: PPUSH
41817: PPUSH
41818: PPUSH
// pom := GetBase ( building ) ;
41819: LD_ADDR_VAR 0 4
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 274
41833: ST_TO_ADDR
// if not pom then
41834: LD_VAR 0 4
41838: NOT
41839: IFFALSE 41843
// exit ;
41841: GO 41944
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41843: LD_ADDR_VAR 0 5
41847: PUSH
41848: LD_VAR 0 2
41852: PPUSH
41853: LD_VAR 0 1
41857: PPUSH
41858: CALL_OW 248
41862: PPUSH
41863: CALL_OW 450
41867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41868: LD_ADDR_VAR 0 3
41872: PUSH
41873: LD_VAR 0 4
41877: PPUSH
41878: LD_INT 1
41880: PPUSH
41881: CALL_OW 275
41885: PUSH
41886: LD_VAR 0 5
41890: PUSH
41891: LD_INT 1
41893: ARRAY
41894: GREATEREQUAL
41895: PUSH
41896: LD_VAR 0 4
41900: PPUSH
41901: LD_INT 2
41903: PPUSH
41904: CALL_OW 275
41908: PUSH
41909: LD_VAR 0 5
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: GREATEREQUAL
41918: AND
41919: PUSH
41920: LD_VAR 0 4
41924: PPUSH
41925: LD_INT 3
41927: PPUSH
41928: CALL_OW 275
41932: PUSH
41933: LD_VAR 0 5
41937: PUSH
41938: LD_INT 3
41940: ARRAY
41941: GREATEREQUAL
41942: AND
41943: ST_TO_ADDR
// end ;
41944: LD_VAR 0 3
41948: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41949: LD_INT 0
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
// result := false ;
41962: LD_ADDR_VAR 0 8
41966: PUSH
41967: LD_INT 0
41969: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41970: LD_VAR 0 5
41974: NOT
41975: PUSH
41976: LD_VAR 0 1
41980: NOT
41981: OR
41982: PUSH
41983: LD_VAR 0 2
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 3
41994: NOT
41995: OR
41996: IFFALSE 42000
// exit ;
41998: GO 42814
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42000: LD_ADDR_VAR 0 14
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: LD_VAR 0 2
42014: PPUSH
42015: LD_VAR 0 3
42019: PPUSH
42020: LD_VAR 0 4
42024: PPUSH
42025: LD_VAR 0 5
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: PPUSH
42034: CALL_OW 248
42038: PPUSH
42039: LD_INT 0
42041: PPUSH
42042: CALL 44047 0 6
42046: ST_TO_ADDR
// if not hexes then
42047: LD_VAR 0 14
42051: NOT
42052: IFFALSE 42056
// exit ;
42054: GO 42814
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42056: LD_ADDR_VAR 0 17
42060: PUSH
42061: LD_VAR 0 5
42065: PPUSH
42066: LD_INT 22
42068: PUSH
42069: LD_VAR 0 13
42073: PPUSH
42074: CALL_OW 255
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 30
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 30
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PPUSH
42115: CALL_OW 72
42119: ST_TO_ADDR
// for i = 1 to hexes do
42120: LD_ADDR_VAR 0 9
42124: PUSH
42125: DOUBLE
42126: LD_INT 1
42128: DEC
42129: ST_TO_ADDR
42130: LD_VAR 0 14
42134: PUSH
42135: FOR_TO
42136: IFFALSE 42812
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42138: LD_ADDR_VAR 0 13
42142: PUSH
42143: LD_VAR 0 14
42147: PUSH
42148: LD_VAR 0 9
42152: ARRAY
42153: PUSH
42154: LD_INT 1
42156: ARRAY
42157: PPUSH
42158: LD_VAR 0 14
42162: PUSH
42163: LD_VAR 0 9
42167: ARRAY
42168: PUSH
42169: LD_INT 2
42171: ARRAY
42172: PPUSH
42173: CALL_OW 428
42177: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42178: LD_VAR 0 14
42182: PUSH
42183: LD_VAR 0 9
42187: ARRAY
42188: PUSH
42189: LD_INT 1
42191: ARRAY
42192: PPUSH
42193: LD_VAR 0 14
42197: PUSH
42198: LD_VAR 0 9
42202: ARRAY
42203: PUSH
42204: LD_INT 2
42206: ARRAY
42207: PPUSH
42208: CALL_OW 351
42212: PUSH
42213: LD_VAR 0 14
42217: PUSH
42218: LD_VAR 0 9
42222: ARRAY
42223: PUSH
42224: LD_INT 1
42226: ARRAY
42227: PPUSH
42228: LD_VAR 0 14
42232: PUSH
42233: LD_VAR 0 9
42237: ARRAY
42238: PUSH
42239: LD_INT 2
42241: ARRAY
42242: PPUSH
42243: CALL_OW 488
42247: NOT
42248: OR
42249: PUSH
42250: LD_VAR 0 13
42254: PPUSH
42255: CALL_OW 247
42259: PUSH
42260: LD_INT 3
42262: EQUAL
42263: OR
42264: IFFALSE 42270
// exit ;
42266: POP
42267: POP
42268: GO 42814
// if not tmp then
42270: LD_VAR 0 13
42274: NOT
42275: IFFALSE 42279
// continue ;
42277: GO 42135
// result := true ;
42279: LD_ADDR_VAR 0 8
42283: PUSH
42284: LD_INT 1
42286: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42287: LD_VAR 0 6
42291: PUSH
42292: LD_VAR 0 13
42296: PPUSH
42297: CALL_OW 247
42301: PUSH
42302: LD_INT 2
42304: EQUAL
42305: AND
42306: PUSH
42307: LD_VAR 0 13
42311: PPUSH
42312: CALL_OW 263
42316: PUSH
42317: LD_INT 1
42319: EQUAL
42320: AND
42321: IFFALSE 42485
// begin if IsDrivenBy ( tmp ) then
42323: LD_VAR 0 13
42327: PPUSH
42328: CALL_OW 311
42332: IFFALSE 42336
// continue ;
42334: GO 42135
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42336: LD_VAR 0 6
42340: PPUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 60
42346: PUSH
42347: EMPTY
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: PUSH
42357: LD_INT 55
42359: PUSH
42360: EMPTY
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 72
42375: IFFALSE 42483
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42377: LD_ADDR_VAR 0 18
42381: PUSH
42382: LD_VAR 0 6
42386: PPUSH
42387: LD_INT 3
42389: PUSH
42390: LD_INT 60
42392: PUSH
42393: EMPTY
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 55
42405: PUSH
42406: EMPTY
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PPUSH
42417: CALL_OW 72
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: ST_TO_ADDR
// if IsInUnit ( driver ) then
42426: LD_VAR 0 18
42430: PPUSH
42431: CALL_OW 310
42435: IFFALSE 42446
// ComExit ( driver ) ;
42437: LD_VAR 0 18
42441: PPUSH
42442: CALL 67827 0 1
// AddComEnterUnit ( driver , tmp ) ;
42446: LD_VAR 0 18
42450: PPUSH
42451: LD_VAR 0 13
42455: PPUSH
42456: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42460: LD_VAR 0 18
42464: PPUSH
42465: LD_VAR 0 7
42469: PPUSH
42470: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42474: LD_VAR 0 18
42478: PPUSH
42479: CALL_OW 181
// end ; continue ;
42483: GO 42135
// end ; if not cleaners or not tmp in cleaners then
42485: LD_VAR 0 6
42489: NOT
42490: PUSH
42491: LD_VAR 0 13
42495: PUSH
42496: LD_VAR 0 6
42500: IN
42501: NOT
42502: OR
42503: IFFALSE 42810
// begin if dep then
42505: LD_VAR 0 17
42509: IFFALSE 42645
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42511: LD_ADDR_VAR 0 16
42515: PUSH
42516: LD_VAR 0 17
42520: PUSH
42521: LD_INT 1
42523: ARRAY
42524: PPUSH
42525: CALL_OW 250
42529: PPUSH
42530: LD_VAR 0 17
42534: PUSH
42535: LD_INT 1
42537: ARRAY
42538: PPUSH
42539: CALL_OW 254
42543: PPUSH
42544: LD_INT 5
42546: PPUSH
42547: CALL_OW 272
42551: PUSH
42552: LD_VAR 0 17
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: CALL_OW 251
42565: PPUSH
42566: LD_VAR 0 17
42570: PUSH
42571: LD_INT 1
42573: ARRAY
42574: PPUSH
42575: CALL_OW 254
42579: PPUSH
42580: LD_INT 5
42582: PPUSH
42583: CALL_OW 273
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42592: LD_VAR 0 16
42596: PUSH
42597: LD_INT 1
42599: ARRAY
42600: PPUSH
42601: LD_VAR 0 16
42605: PUSH
42606: LD_INT 2
42608: ARRAY
42609: PPUSH
42610: CALL_OW 488
42614: IFFALSE 42645
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42616: LD_VAR 0 13
42620: PPUSH
42621: LD_VAR 0 16
42625: PUSH
42626: LD_INT 1
42628: ARRAY
42629: PPUSH
42630: LD_VAR 0 16
42634: PUSH
42635: LD_INT 2
42637: ARRAY
42638: PPUSH
42639: CALL_OW 111
// continue ;
42643: GO 42135
// end ; end ; r := GetDir ( tmp ) ;
42645: LD_ADDR_VAR 0 15
42649: PUSH
42650: LD_VAR 0 13
42654: PPUSH
42655: CALL_OW 254
42659: ST_TO_ADDR
// if r = 5 then
42660: LD_VAR 0 15
42664: PUSH
42665: LD_INT 5
42667: EQUAL
42668: IFFALSE 42678
// r := 0 ;
42670: LD_ADDR_VAR 0 15
42674: PUSH
42675: LD_INT 0
42677: ST_TO_ADDR
// for j = r to 5 do
42678: LD_ADDR_VAR 0 10
42682: PUSH
42683: DOUBLE
42684: LD_VAR 0 15
42688: DEC
42689: ST_TO_ADDR
42690: LD_INT 5
42692: PUSH
42693: FOR_TO
42694: IFFALSE 42808
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42696: LD_ADDR_VAR 0 11
42700: PUSH
42701: LD_VAR 0 13
42705: PPUSH
42706: CALL_OW 250
42710: PPUSH
42711: LD_VAR 0 10
42715: PPUSH
42716: LD_INT 2
42718: PPUSH
42719: CALL_OW 272
42723: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42724: LD_ADDR_VAR 0 12
42728: PUSH
42729: LD_VAR 0 13
42733: PPUSH
42734: CALL_OW 251
42738: PPUSH
42739: LD_VAR 0 10
42743: PPUSH
42744: LD_INT 2
42746: PPUSH
42747: CALL_OW 273
42751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42752: LD_VAR 0 11
42756: PPUSH
42757: LD_VAR 0 12
42761: PPUSH
42762: CALL_OW 488
42766: PUSH
42767: LD_VAR 0 11
42771: PPUSH
42772: LD_VAR 0 12
42776: PPUSH
42777: CALL_OW 428
42781: NOT
42782: AND
42783: IFFALSE 42806
// begin ComMoveXY ( tmp , _x , _y ) ;
42785: LD_VAR 0 13
42789: PPUSH
42790: LD_VAR 0 11
42794: PPUSH
42795: LD_VAR 0 12
42799: PPUSH
42800: CALL_OW 111
// break ;
42804: GO 42808
// end ; end ;
42806: GO 42693
42808: POP
42809: POP
// end ; end ;
42810: GO 42135
42812: POP
42813: POP
// end ;
42814: LD_VAR 0 8
42818: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42819: LD_INT 0
42821: PPUSH
// result := true ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 1
42829: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42830: LD_VAR 0 2
42834: PUSH
42835: LD_INT 24
42837: DOUBLE
42838: EQUAL
42839: IFTRUE 42849
42841: LD_INT 33
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42849
42847: GO 42874
42849: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 32
42857: PPUSH
42858: LD_VAR 0 1
42862: PPUSH
42863: CALL_OW 321
42867: PUSH
42868: LD_INT 2
42870: EQUAL
42871: ST_TO_ADDR
42872: GO 43190
42874: LD_INT 20
42876: DOUBLE
42877: EQUAL
42878: IFTRUE 42882
42880: GO 42907
42882: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42883: LD_ADDR_VAR 0 3
42887: PUSH
42888: LD_INT 6
42890: PPUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 321
42900: PUSH
42901: LD_INT 2
42903: EQUAL
42904: ST_TO_ADDR
42905: GO 43190
42907: LD_INT 22
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42921
42913: LD_INT 36
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42921
42919: GO 42946
42921: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_INT 15
42929: PPUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: CALL_OW 321
42939: PUSH
42940: LD_INT 2
42942: EQUAL
42943: ST_TO_ADDR
42944: GO 43190
42946: LD_INT 30
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42979
42954: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_INT 20
42962: PPUSH
42963: LD_VAR 0 1
42967: PPUSH
42968: CALL_OW 321
42972: PUSH
42973: LD_INT 2
42975: EQUAL
42976: ST_TO_ADDR
42977: GO 43190
42979: LD_INT 28
42981: DOUBLE
42982: EQUAL
42983: IFTRUE 42993
42985: LD_INT 21
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43018
42993: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_INT 21
43001: PPUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 321
43011: PUSH
43012: LD_INT 2
43014: EQUAL
43015: ST_TO_ADDR
43016: GO 43190
43018: LD_INT 16
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43051
43026: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43027: LD_ADDR_VAR 0 3
43031: PUSH
43032: LD_INT 84
43034: PPUSH
43035: LD_VAR 0 1
43039: PPUSH
43040: CALL_OW 321
43044: PUSH
43045: LD_INT 2
43047: EQUAL
43048: ST_TO_ADDR
43049: GO 43190
43051: LD_INT 19
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43065
43057: LD_INT 23
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43065
43063: GO 43090
43065: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_INT 83
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 321
43083: PUSH
43084: LD_INT 2
43086: EQUAL
43087: ST_TO_ADDR
43088: GO 43190
43090: LD_INT 17
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43123
43098: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_INT 39
43106: PPUSH
43107: LD_VAR 0 1
43111: PPUSH
43112: CALL_OW 321
43116: PUSH
43117: LD_INT 2
43119: EQUAL
43120: ST_TO_ADDR
43121: GO 43190
43123: LD_INT 18
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43156
43131: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 40
43139: PPUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 321
43149: PUSH
43150: LD_INT 2
43152: EQUAL
43153: ST_TO_ADDR
43154: GO 43190
43156: LD_INT 27
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43164
43162: GO 43189
43164: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43165: LD_ADDR_VAR 0 3
43169: PUSH
43170: LD_INT 35
43172: PPUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 321
43182: PUSH
43183: LD_INT 2
43185: EQUAL
43186: ST_TO_ADDR
43187: GO 43190
43189: POP
// end ;
43190: LD_VAR 0 3
43194: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43195: LD_INT 0
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
// result := false ;
43208: LD_ADDR_VAR 0 6
43212: PUSH
43213: LD_INT 0
43215: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43216: LD_VAR 0 1
43220: NOT
43221: PUSH
43222: LD_VAR 0 1
43226: PPUSH
43227: CALL_OW 266
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: IN
43242: NOT
43243: OR
43244: PUSH
43245: LD_VAR 0 2
43249: NOT
43250: OR
43251: PUSH
43252: LD_VAR 0 5
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: IN
43283: NOT
43284: OR
43285: PUSH
43286: LD_VAR 0 3
43290: PPUSH
43291: LD_VAR 0 4
43295: PPUSH
43296: CALL_OW 488
43300: NOT
43301: OR
43302: IFFALSE 43306
// exit ;
43304: GO 44042
// side := GetSide ( depot ) ;
43306: LD_ADDR_VAR 0 9
43310: PUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: CALL_OW 255
43320: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43321: LD_VAR 0 9
43325: PPUSH
43326: LD_VAR 0 2
43330: PPUSH
43331: CALL 42819 0 2
43335: NOT
43336: IFFALSE 43340
// exit ;
43338: GO 44042
// pom := GetBase ( depot ) ;
43340: LD_ADDR_VAR 0 10
43344: PUSH
43345: LD_VAR 0 1
43349: PPUSH
43350: CALL_OW 274
43354: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43355: LD_ADDR_VAR 0 11
43359: PUSH
43360: LD_VAR 0 2
43364: PPUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: CALL_OW 248
43374: PPUSH
43375: CALL_OW 450
43379: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43380: LD_VAR 0 10
43384: PPUSH
43385: LD_INT 1
43387: PPUSH
43388: CALL_OW 275
43392: PUSH
43393: LD_VAR 0 11
43397: PUSH
43398: LD_INT 1
43400: ARRAY
43401: GREATEREQUAL
43402: PUSH
43403: LD_VAR 0 10
43407: PPUSH
43408: LD_INT 2
43410: PPUSH
43411: CALL_OW 275
43415: PUSH
43416: LD_VAR 0 11
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: GREATEREQUAL
43425: AND
43426: PUSH
43427: LD_VAR 0 10
43431: PPUSH
43432: LD_INT 3
43434: PPUSH
43435: CALL_OW 275
43439: PUSH
43440: LD_VAR 0 11
43444: PUSH
43445: LD_INT 3
43447: ARRAY
43448: GREATEREQUAL
43449: AND
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 44042
// if GetBType ( depot ) = b_depot then
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 266
43464: PUSH
43465: LD_INT 0
43467: EQUAL
43468: IFFALSE 43480
// dist := 28 else
43470: LD_ADDR_VAR 0 14
43474: PUSH
43475: LD_INT 28
43477: ST_TO_ADDR
43478: GO 43488
// dist := 36 ;
43480: LD_ADDR_VAR 0 14
43484: PUSH
43485: LD_INT 36
43487: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43488: LD_VAR 0 1
43492: PPUSH
43493: LD_VAR 0 3
43497: PPUSH
43498: LD_VAR 0 4
43502: PPUSH
43503: CALL_OW 297
43507: PUSH
43508: LD_VAR 0 14
43512: GREATER
43513: IFFALSE 43517
// exit ;
43515: GO 44042
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43517: LD_ADDR_VAR 0 12
43521: PUSH
43522: LD_VAR 0 2
43526: PPUSH
43527: LD_VAR 0 3
43531: PPUSH
43532: LD_VAR 0 4
43536: PPUSH
43537: LD_VAR 0 5
43541: PPUSH
43542: LD_VAR 0 1
43546: PPUSH
43547: CALL_OW 248
43551: PPUSH
43552: LD_INT 0
43554: PPUSH
43555: CALL 44047 0 6
43559: ST_TO_ADDR
// if not hexes then
43560: LD_VAR 0 12
43564: NOT
43565: IFFALSE 43569
// exit ;
43567: GO 44042
// hex := GetHexInfo ( x , y ) ;
43569: LD_ADDR_VAR 0 15
43573: PUSH
43574: LD_VAR 0 3
43578: PPUSH
43579: LD_VAR 0 4
43583: PPUSH
43584: CALL_OW 546
43588: ST_TO_ADDR
// if hex [ 1 ] then
43589: LD_VAR 0 15
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: IFFALSE 43601
// exit ;
43599: GO 44042
// height := hex [ 2 ] ;
43601: LD_ADDR_VAR 0 13
43605: PUSH
43606: LD_VAR 0 15
43610: PUSH
43611: LD_INT 2
43613: ARRAY
43614: ST_TO_ADDR
// for i = 1 to hexes do
43615: LD_ADDR_VAR 0 7
43619: PUSH
43620: DOUBLE
43621: LD_INT 1
43623: DEC
43624: ST_TO_ADDR
43625: LD_VAR 0 12
43629: PUSH
43630: FOR_TO
43631: IFFALSE 43961
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43633: LD_VAR 0 12
43637: PUSH
43638: LD_VAR 0 7
43642: ARRAY
43643: PUSH
43644: LD_INT 1
43646: ARRAY
43647: PPUSH
43648: LD_VAR 0 12
43652: PUSH
43653: LD_VAR 0 7
43657: ARRAY
43658: PUSH
43659: LD_INT 2
43661: ARRAY
43662: PPUSH
43663: CALL_OW 488
43667: NOT
43668: PUSH
43669: LD_VAR 0 12
43673: PUSH
43674: LD_VAR 0 7
43678: ARRAY
43679: PUSH
43680: LD_INT 1
43682: ARRAY
43683: PPUSH
43684: LD_VAR 0 12
43688: PUSH
43689: LD_VAR 0 7
43693: ARRAY
43694: PUSH
43695: LD_INT 2
43697: ARRAY
43698: PPUSH
43699: CALL_OW 428
43703: PUSH
43704: LD_INT 0
43706: GREATER
43707: OR
43708: PUSH
43709: LD_VAR 0 12
43713: PUSH
43714: LD_VAR 0 7
43718: ARRAY
43719: PUSH
43720: LD_INT 1
43722: ARRAY
43723: PPUSH
43724: LD_VAR 0 12
43728: PUSH
43729: LD_VAR 0 7
43733: ARRAY
43734: PUSH
43735: LD_INT 2
43737: ARRAY
43738: PPUSH
43739: CALL_OW 351
43743: OR
43744: IFFALSE 43750
// exit ;
43746: POP
43747: POP
43748: GO 44042
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43750: LD_ADDR_VAR 0 8
43754: PUSH
43755: LD_VAR 0 12
43759: PUSH
43760: LD_VAR 0 7
43764: ARRAY
43765: PUSH
43766: LD_INT 1
43768: ARRAY
43769: PPUSH
43770: LD_VAR 0 12
43774: PUSH
43775: LD_VAR 0 7
43779: ARRAY
43780: PUSH
43781: LD_INT 2
43783: ARRAY
43784: PPUSH
43785: CALL_OW 546
43789: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43790: LD_VAR 0 8
43794: PUSH
43795: LD_INT 1
43797: ARRAY
43798: PUSH
43799: LD_VAR 0 8
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: PUSH
43808: LD_VAR 0 13
43812: PUSH
43813: LD_INT 2
43815: PLUS
43816: GREATER
43817: OR
43818: PUSH
43819: LD_VAR 0 8
43823: PUSH
43824: LD_INT 2
43826: ARRAY
43827: PUSH
43828: LD_VAR 0 13
43832: PUSH
43833: LD_INT 2
43835: MINUS
43836: LESS
43837: OR
43838: PUSH
43839: LD_VAR 0 8
43843: PUSH
43844: LD_INT 3
43846: ARRAY
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 8
43853: PUSH
43854: LD_INT 9
43856: PUSH
43857: LD_INT 10
43859: PUSH
43860: LD_INT 11
43862: PUSH
43863: LD_INT 12
43865: PUSH
43866: LD_INT 13
43868: PUSH
43869: LD_INT 16
43871: PUSH
43872: LD_INT 17
43874: PUSH
43875: LD_INT 18
43877: PUSH
43878: LD_INT 19
43880: PUSH
43881: LD_INT 20
43883: PUSH
43884: LD_INT 21
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: IN
43902: NOT
43903: OR
43904: PUSH
43905: LD_VAR 0 8
43909: PUSH
43910: LD_INT 5
43912: ARRAY
43913: NOT
43914: OR
43915: PUSH
43916: LD_VAR 0 8
43920: PUSH
43921: LD_INT 6
43923: ARRAY
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 7
43933: PUSH
43934: LD_INT 9
43936: PUSH
43937: LD_INT 10
43939: PUSH
43940: LD_INT 11
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: IN
43951: NOT
43952: OR
43953: IFFALSE 43959
// exit ;
43955: POP
43956: POP
43957: GO 44042
// end ;
43959: GO 43630
43961: POP
43962: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43963: LD_VAR 0 9
43967: PPUSH
43968: LD_VAR 0 3
43972: PPUSH
43973: LD_VAR 0 4
43977: PPUSH
43978: LD_INT 20
43980: PPUSH
43981: CALL 35994 0 4
43985: PUSH
43986: LD_INT 4
43988: ARRAY
43989: IFFALSE 43993
// exit ;
43991: GO 44042
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 29
44000: PUSH
44001: LD_INT 30
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: IN
44008: PUSH
44009: LD_VAR 0 3
44013: PPUSH
44014: LD_VAR 0 4
44018: PPUSH
44019: LD_VAR 0 9
44023: PPUSH
44024: CALL_OW 440
44028: NOT
44029: AND
44030: IFFALSE 44034
// exit ;
44032: GO 44042
// result := true ;
44034: LD_ADDR_VAR 0 6
44038: PUSH
44039: LD_INT 1
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 6
44046: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44047: LD_INT 0
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
44097: PPUSH
44098: PPUSH
44099: PPUSH
44100: PPUSH
44101: PPUSH
44102: PPUSH
44103: PPUSH
44104: PPUSH
44105: PPUSH
44106: PPUSH
// result = [ ] ;
44107: LD_ADDR_VAR 0 7
44111: PUSH
44112: EMPTY
44113: ST_TO_ADDR
// temp_list = [ ] ;
44114: LD_ADDR_VAR 0 9
44118: PUSH
44119: EMPTY
44120: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44121: LD_VAR 0 4
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 3
44137: PUSH
44138: LD_INT 4
44140: PUSH
44141: LD_INT 5
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: IN
44152: NOT
44153: PUSH
44154: LD_VAR 0 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: IN
44169: PUSH
44170: LD_VAR 0 5
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: IN
44189: NOT
44190: AND
44191: OR
44192: IFFALSE 44196
// exit ;
44194: GO 62587
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44196: LD_VAR 0 1
44200: PUSH
44201: LD_INT 6
44203: PUSH
44204: LD_INT 7
44206: PUSH
44207: LD_INT 8
44209: PUSH
44210: LD_INT 13
44212: PUSH
44213: LD_INT 12
44215: PUSH
44216: LD_INT 15
44218: PUSH
44219: LD_INT 11
44221: PUSH
44222: LD_INT 14
44224: PUSH
44225: LD_INT 10
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: IN
44239: IFFALSE 44249
// btype = b_lab ;
44241: LD_ADDR_VAR 0 1
44245: PUSH
44246: LD_INT 6
44248: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44249: LD_VAR 0 6
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: IN
44268: NOT
44269: PUSH
44270: LD_VAR 0 1
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: LD_INT 6
44289: PUSH
44290: LD_INT 36
44292: PUSH
44293: LD_INT 4
44295: PUSH
44296: LD_INT 5
44298: PUSH
44299: LD_INT 31
44301: PUSH
44302: LD_INT 32
44304: PUSH
44305: LD_INT 33
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: IN
44321: NOT
44322: PUSH
44323: LD_VAR 0 6
44327: PUSH
44328: LD_INT 1
44330: EQUAL
44331: AND
44332: OR
44333: PUSH
44334: LD_VAR 0 1
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: IN
44349: NOT
44350: PUSH
44351: LD_VAR 0 6
44355: PUSH
44356: LD_INT 2
44358: EQUAL
44359: AND
44360: OR
44361: IFFALSE 44371
// mode = 0 ;
44363: LD_ADDR_VAR 0 6
44367: PUSH
44368: LD_INT 0
44370: ST_TO_ADDR
// case mode of 0 :
44371: LD_VAR 0 6
44375: PUSH
44376: LD_INT 0
44378: DOUBLE
44379: EQUAL
44380: IFTRUE 44384
44382: GO 55837
44384: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44385: LD_ADDR_VAR 0 11
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44578: LD_ADDR_VAR 0 12
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44774: LD_ADDR_VAR 0 13
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44973: LD_ADDR_VAR 0 14
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45169: LD_ADDR_VAR 0 15
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45362: LD_ADDR_VAR 0 16
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 3
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45555: LD_ADDR_VAR 0 17
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45785: LD_ADDR_VAR 0 18
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46015: LD_ADDR_VAR 0 19
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46245: LD_ADDR_VAR 0 20
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46475: LD_ADDR_VAR 0 21
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46705: LD_ADDR_VAR 0 22
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46935: LD_ADDR_VAR 0 23
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47215: LD_ADDR_VAR 0 24
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 2
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47491: LD_ADDR_VAR 0 25
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47765: LD_ADDR_VAR 0 26
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48041: LD_ADDR_VAR 0 27
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48321: LD_ADDR_VAR 0 28
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48603: LD_ADDR_VAR 0 29
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48882: LD_ADDR_VAR 0 30
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49160: LD_ADDR_VAR 0 31
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49438: LD_ADDR_VAR 0 32
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49716: LD_ADDR_VAR 0 33
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49995: LD_ADDR_VAR 0 34
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50275: LD_ADDR_VAR 0 35
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50387: LD_ADDR_VAR 0 36
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50499: LD_ADDR_VAR 0 37
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50611: LD_ADDR_VAR 0 38
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50723: LD_ADDR_VAR 0 39
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50835: LD_ADDR_VAR 0 40
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50947: LD_ADDR_VAR 0 41
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: NEG
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51297: LD_ADDR_VAR 0 42
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 3
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51647: LD_ADDR_VAR 0 43
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51995: LD_ADDR_VAR 0 44
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52345: LD_ADDR_VAR 0 45
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52695: LD_ADDR_VAR 0 46
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 3
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53043: LD_ADDR_VAR 0 47
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53194: LD_ADDR_VAR 0 48
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53341: LD_ADDR_VAR 0 49
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53485: LD_ADDR_VAR 0 50
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53629: LD_ADDR_VAR 0 51
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53776: LD_ADDR_VAR 0 52
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53927: LD_ADDR_VAR 0 53
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54157: LD_ADDR_VAR 0 54
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54387: LD_ADDR_VAR 0 55
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54617: LD_ADDR_VAR 0 56
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54847: LD_ADDR_VAR 0 57
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55077: LD_ADDR_VAR 0 58
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55307: LD_ADDR_VAR 0 59
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55395: LD_ADDR_VAR 0 60
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55483: LD_ADDR_VAR 0 61
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55571: LD_ADDR_VAR 0 62
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55659: LD_ADDR_VAR 0 63
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55747: LD_ADDR_VAR 0 64
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// end ; 1 :
55835: GO 61732
55837: LD_INT 1
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55845
55843: GO 58468
55845: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55846: LD_ADDR_VAR 0 11
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55890: LD_ADDR_VAR 0 12
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55931: LD_ADDR_VAR 0 13
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55971: LD_ADDR_VAR 0 14
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56012: LD_ADDR_VAR 0 15
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56056: LD_ADDR_VAR 0 16
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56102: LD_ADDR_VAR 0 17
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56146: LD_ADDR_VAR 0 18
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56187: LD_ADDR_VAR 0 19
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56227: LD_ADDR_VAR 0 20
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56268: LD_ADDR_VAR 0 21
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56312: LD_ADDR_VAR 0 22
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 3
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56358: LD_ADDR_VAR 0 23
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56402: LD_ADDR_VAR 0 24
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56443: LD_ADDR_VAR 0 25
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56483: LD_ADDR_VAR 0 26
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56524: LD_ADDR_VAR 0 27
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56568: LD_ADDR_VAR 0 28
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56614: LD_ADDR_VAR 0 29
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 5
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 5
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 4
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 6
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 6
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 5
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56769: LD_ADDR_VAR 0 30
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 5
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 5
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 5
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 6
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 6
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56912: LD_ADDR_VAR 0 31
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 5
56979: PUSH
56980: LD_INT 4
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 5
56989: PUSH
56990: LD_INT 5
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 6
57009: PUSH
57010: LD_INT 5
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 6
57019: PUSH
57020: LD_INT 6
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 5
57029: PUSH
57030: LD_INT 6
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57051: LD_ADDR_VAR 0 32
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 4
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 5
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 5
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 4
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 6
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 6
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 5
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57194: LD_ADDR_VAR 0 33
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 4
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 5
57280: NEG
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 6
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 6
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57349: LD_ADDR_VAR 0 34
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 4
57404: NEG
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 4
57416: NEG
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 4
57428: NEG
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 5
57440: NEG
57441: PUSH
57442: LD_INT 4
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 5
57452: NEG
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: NEG
57465: PUSH
57466: LD_INT 6
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 6
57476: NEG
57477: PUSH
57478: LD_INT 5
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 6
57488: NEG
57489: PUSH
57490: LD_INT 6
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57512: LD_ADDR_VAR 0 41
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57556: LD_ADDR_VAR 0 42
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57597: LD_ADDR_VAR 0 43
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57637: LD_ADDR_VAR 0 44
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57678: LD_ADDR_VAR 0 45
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57722: LD_ADDR_VAR 0 46
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57768: LD_ADDR_VAR 0 47
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57801: LD_ADDR_VAR 0 48
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57832: LD_ADDR_VAR 0 49
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57861: LD_ADDR_VAR 0 50
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57890: LD_ADDR_VAR 0 51
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57921: LD_ADDR_VAR 0 52
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57954: LD_ADDR_VAR 0 53
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57998: LD_ADDR_VAR 0 54
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58039: LD_ADDR_VAR 0 55
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58079: LD_ADDR_VAR 0 56
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58120: LD_ADDR_VAR 0 57
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58164: LD_ADDR_VAR 0 58
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58210: LD_ADDR_VAR 0 59
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58254: LD_ADDR_VAR 0 60
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58295: LD_ADDR_VAR 0 61
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58335: LD_ADDR_VAR 0 62
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58376: LD_ADDR_VAR 0 63
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58420: LD_ADDR_VAR 0 64
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// end ; 2 :
58466: GO 61732
58468: LD_INT 2
58470: DOUBLE
58471: EQUAL
58472: IFTRUE 58476
58474: GO 61731
58476: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58477: LD_ADDR_VAR 0 29
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 5
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 5
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: LD_INT 4
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 5
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 4
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 5
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 4
58816: NEG
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 4
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 4
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 4
58874: NEG
58875: PUSH
58876: LD_INT 5
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 5
58922: NEG
58923: PUSH
58924: LD_INT 4
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 5
58934: NEG
58935: PUSH
58936: LD_INT 5
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 5
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59015: LD_ADDR_VAR 0 30
59019: PUSH
59020: LD_INT 4
59022: PUSH
59023: LD_INT 4
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 4
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 5
59042: PUSH
59043: LD_INT 4
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 5
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 4
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 4
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 5
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 5
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 5
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 3
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59562: LD_ADDR_VAR 0 31
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: LD_INT 5
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: NEG
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 4
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 4
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 5
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: NEG
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 5
59836: NEG
59837: PUSH
59838: LD_INT 5
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 5
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 5
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 5
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 5
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60112: LD_ADDR_VAR 0 32
60116: PUSH
60117: LD_INT 4
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 4
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 5
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 3
60269: NEG
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: NEG
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: NEG
60294: PUSH
60295: LD_INT 4
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 4
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 5
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 5
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 3
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 4
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 4
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: LD_INT 4
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 5
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 5
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 5
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60659: LD_ADDR_VAR 0 33
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 4
60678: NEG
60679: PUSH
60680: LD_INT 5
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: LD_INT 4
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 4
60714: NEG
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 5
60726: NEG
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 5
60738: NEG
60739: PUSH
60740: LD_INT 5
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 3
60750: NEG
60751: PUSH
60752: LD_INT 5
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 5
60762: NEG
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 4
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: LD_INT 4
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 5
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: LD_INT 4
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 4
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 5
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: LD_INT 4
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 5
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61197: LD_ADDR_VAR 0 34
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: LD_INT 4
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 4
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: LD_INT 5
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: LD_INT 3
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 5
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 4
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 5
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 5
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 4
61439: PUSH
61440: LD_INT 5
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: LD_INT 3
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 5
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 3
61479: PUSH
61480: LD_INT 5
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 4
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: NEG
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 4
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 5
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 5
61661: NEG
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// end ; end ;
61729: GO 61732
61731: POP
// case btype of b_depot , b_warehouse :
61732: LD_VAR 0 1
61736: PUSH
61737: LD_INT 0
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61751
61743: LD_INT 1
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61751
61749: GO 61952
61751: POP
// case nation of nation_american :
61752: LD_VAR 0 5
61756: PUSH
61757: LD_INT 1
61759: DOUBLE
61760: EQUAL
61761: IFTRUE 61765
61763: GO 61821
61765: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61766: LD_ADDR_VAR 0 9
61770: PUSH
61771: LD_VAR 0 11
61775: PUSH
61776: LD_VAR 0 12
61780: PUSH
61781: LD_VAR 0 13
61785: PUSH
61786: LD_VAR 0 14
61790: PUSH
61791: LD_VAR 0 15
61795: PUSH
61796: LD_VAR 0 16
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: PUSH
61809: LD_VAR 0 4
61813: PUSH
61814: LD_INT 1
61816: PLUS
61817: ARRAY
61818: ST_TO_ADDR
61819: GO 61950
61821: LD_INT 2
61823: DOUBLE
61824: EQUAL
61825: IFTRUE 61829
61827: GO 61885
61829: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61830: LD_ADDR_VAR 0 9
61834: PUSH
61835: LD_VAR 0 17
61839: PUSH
61840: LD_VAR 0 18
61844: PUSH
61845: LD_VAR 0 19
61849: PUSH
61850: LD_VAR 0 20
61854: PUSH
61855: LD_VAR 0 21
61859: PUSH
61860: LD_VAR 0 22
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: PUSH
61873: LD_VAR 0 4
61877: PUSH
61878: LD_INT 1
61880: PLUS
61881: ARRAY
61882: ST_TO_ADDR
61883: GO 61950
61885: LD_INT 3
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61893
61891: GO 61949
61893: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61894: LD_ADDR_VAR 0 9
61898: PUSH
61899: LD_VAR 0 23
61903: PUSH
61904: LD_VAR 0 24
61908: PUSH
61909: LD_VAR 0 25
61913: PUSH
61914: LD_VAR 0 26
61918: PUSH
61919: LD_VAR 0 27
61923: PUSH
61924: LD_VAR 0 28
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: PUSH
61937: LD_VAR 0 4
61941: PUSH
61942: LD_INT 1
61944: PLUS
61945: ARRAY
61946: ST_TO_ADDR
61947: GO 61950
61949: POP
61950: GO 62505
61952: LD_INT 2
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61966
61958: LD_INT 3
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61966
61964: GO 62022
61966: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61967: LD_ADDR_VAR 0 9
61971: PUSH
61972: LD_VAR 0 29
61976: PUSH
61977: LD_VAR 0 30
61981: PUSH
61982: LD_VAR 0 31
61986: PUSH
61987: LD_VAR 0 32
61991: PUSH
61992: LD_VAR 0 33
61996: PUSH
61997: LD_VAR 0 34
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: PUSH
62010: LD_VAR 0 4
62014: PUSH
62015: LD_INT 1
62017: PLUS
62018: ARRAY
62019: ST_TO_ADDR
62020: GO 62505
62022: LD_INT 16
62024: DOUBLE
62025: EQUAL
62026: IFTRUE 62084
62028: LD_INT 17
62030: DOUBLE
62031: EQUAL
62032: IFTRUE 62084
62034: LD_INT 18
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62084
62040: LD_INT 19
62042: DOUBLE
62043: EQUAL
62044: IFTRUE 62084
62046: LD_INT 22
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62084
62052: LD_INT 20
62054: DOUBLE
62055: EQUAL
62056: IFTRUE 62084
62058: LD_INT 21
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62084
62064: LD_INT 23
62066: DOUBLE
62067: EQUAL
62068: IFTRUE 62084
62070: LD_INT 24
62072: DOUBLE
62073: EQUAL
62074: IFTRUE 62084
62076: LD_INT 25
62078: DOUBLE
62079: EQUAL
62080: IFTRUE 62084
62082: GO 62140
62084: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62085: LD_ADDR_VAR 0 9
62089: PUSH
62090: LD_VAR 0 35
62094: PUSH
62095: LD_VAR 0 36
62099: PUSH
62100: LD_VAR 0 37
62104: PUSH
62105: LD_VAR 0 38
62109: PUSH
62110: LD_VAR 0 39
62114: PUSH
62115: LD_VAR 0 40
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_VAR 0 4
62132: PUSH
62133: LD_INT 1
62135: PLUS
62136: ARRAY
62137: ST_TO_ADDR
62138: GO 62505
62140: LD_INT 6
62142: DOUBLE
62143: EQUAL
62144: IFTRUE 62196
62146: LD_INT 7
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62196
62152: LD_INT 8
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62196
62158: LD_INT 13
62160: DOUBLE
62161: EQUAL
62162: IFTRUE 62196
62164: LD_INT 12
62166: DOUBLE
62167: EQUAL
62168: IFTRUE 62196
62170: LD_INT 15
62172: DOUBLE
62173: EQUAL
62174: IFTRUE 62196
62176: LD_INT 11
62178: DOUBLE
62179: EQUAL
62180: IFTRUE 62196
62182: LD_INT 14
62184: DOUBLE
62185: EQUAL
62186: IFTRUE 62196
62188: LD_INT 10
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62196
62194: GO 62252
62196: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62197: LD_ADDR_VAR 0 9
62201: PUSH
62202: LD_VAR 0 41
62206: PUSH
62207: LD_VAR 0 42
62211: PUSH
62212: LD_VAR 0 43
62216: PUSH
62217: LD_VAR 0 44
62221: PUSH
62222: LD_VAR 0 45
62226: PUSH
62227: LD_VAR 0 46
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: LD_VAR 0 4
62244: PUSH
62245: LD_INT 1
62247: PLUS
62248: ARRAY
62249: ST_TO_ADDR
62250: GO 62505
62252: LD_INT 36
62254: DOUBLE
62255: EQUAL
62256: IFTRUE 62260
62258: GO 62316
62260: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62261: LD_ADDR_VAR 0 9
62265: PUSH
62266: LD_VAR 0 47
62270: PUSH
62271: LD_VAR 0 48
62275: PUSH
62276: LD_VAR 0 49
62280: PUSH
62281: LD_VAR 0 50
62285: PUSH
62286: LD_VAR 0 51
62290: PUSH
62291: LD_VAR 0 52
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: PUSH
62304: LD_VAR 0 4
62308: PUSH
62309: LD_INT 1
62311: PLUS
62312: ARRAY
62313: ST_TO_ADDR
62314: GO 62505
62316: LD_INT 4
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62342
62322: LD_INT 5
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62342
62328: LD_INT 34
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62342
62334: LD_INT 37
62336: DOUBLE
62337: EQUAL
62338: IFTRUE 62342
62340: GO 62398
62342: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62343: LD_ADDR_VAR 0 9
62347: PUSH
62348: LD_VAR 0 53
62352: PUSH
62353: LD_VAR 0 54
62357: PUSH
62358: LD_VAR 0 55
62362: PUSH
62363: LD_VAR 0 56
62367: PUSH
62368: LD_VAR 0 57
62372: PUSH
62373: LD_VAR 0 58
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_VAR 0 4
62390: PUSH
62391: LD_INT 1
62393: PLUS
62394: ARRAY
62395: ST_TO_ADDR
62396: GO 62505
62398: LD_INT 31
62400: DOUBLE
62401: EQUAL
62402: IFTRUE 62448
62404: LD_INT 32
62406: DOUBLE
62407: EQUAL
62408: IFTRUE 62448
62410: LD_INT 33
62412: DOUBLE
62413: EQUAL
62414: IFTRUE 62448
62416: LD_INT 27
62418: DOUBLE
62419: EQUAL
62420: IFTRUE 62448
62422: LD_INT 26
62424: DOUBLE
62425: EQUAL
62426: IFTRUE 62448
62428: LD_INT 28
62430: DOUBLE
62431: EQUAL
62432: IFTRUE 62448
62434: LD_INT 29
62436: DOUBLE
62437: EQUAL
62438: IFTRUE 62448
62440: LD_INT 30
62442: DOUBLE
62443: EQUAL
62444: IFTRUE 62448
62446: GO 62504
62448: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62449: LD_ADDR_VAR 0 9
62453: PUSH
62454: LD_VAR 0 59
62458: PUSH
62459: LD_VAR 0 60
62463: PUSH
62464: LD_VAR 0 61
62468: PUSH
62469: LD_VAR 0 62
62473: PUSH
62474: LD_VAR 0 63
62478: PUSH
62479: LD_VAR 0 64
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: LD_VAR 0 4
62496: PUSH
62497: LD_INT 1
62499: PLUS
62500: ARRAY
62501: ST_TO_ADDR
62502: GO 62505
62504: POP
// temp_list2 = [ ] ;
62505: LD_ADDR_VAR 0 10
62509: PUSH
62510: EMPTY
62511: ST_TO_ADDR
// for i in temp_list do
62512: LD_ADDR_VAR 0 8
62516: PUSH
62517: LD_VAR 0 9
62521: PUSH
62522: FOR_IN
62523: IFFALSE 62575
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62525: LD_ADDR_VAR 0 10
62529: PUSH
62530: LD_VAR 0 10
62534: PUSH
62535: LD_VAR 0 8
62539: PUSH
62540: LD_INT 1
62542: ARRAY
62543: PUSH
62544: LD_VAR 0 2
62548: PLUS
62549: PUSH
62550: LD_VAR 0 8
62554: PUSH
62555: LD_INT 2
62557: ARRAY
62558: PUSH
62559: LD_VAR 0 3
62563: PLUS
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: ADD
62572: ST_TO_ADDR
62573: GO 62522
62575: POP
62576: POP
// result = temp_list2 ;
62577: LD_ADDR_VAR 0 7
62581: PUSH
62582: LD_VAR 0 10
62586: ST_TO_ADDR
// end ;
62587: LD_VAR 0 7
62591: RET
// export function EnemyInRange ( unit , dist ) ; begin
62592: LD_INT 0
62594: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62595: LD_ADDR_VAR 0 3
62599: PUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: CALL_OW 255
62609: PPUSH
62610: LD_VAR 0 1
62614: PPUSH
62615: CALL_OW 250
62619: PPUSH
62620: LD_VAR 0 1
62624: PPUSH
62625: CALL_OW 251
62629: PPUSH
62630: LD_VAR 0 2
62634: PPUSH
62635: CALL 35994 0 4
62639: PUSH
62640: LD_INT 4
62642: ARRAY
62643: ST_TO_ADDR
// end ;
62644: LD_VAR 0 3
62648: RET
// export function PlayerSeeMe ( unit ) ; begin
62649: LD_INT 0
62651: PPUSH
// result := See ( your_side , unit ) ;
62652: LD_ADDR_VAR 0 2
62656: PUSH
62657: LD_OWVAR 2
62661: PPUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 292
62671: ST_TO_ADDR
// end ;
62672: LD_VAR 0 2
62676: RET
// export function ReverseDir ( unit ) ; begin
62677: LD_INT 0
62679: PPUSH
// if not unit then
62680: LD_VAR 0 1
62684: NOT
62685: IFFALSE 62689
// exit ;
62687: GO 62712
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62689: LD_ADDR_VAR 0 2
62693: PUSH
62694: LD_VAR 0 1
62698: PPUSH
62699: CALL_OW 254
62703: PUSH
62704: LD_INT 3
62706: PLUS
62707: PUSH
62708: LD_INT 6
62710: MOD
62711: ST_TO_ADDR
// end ;
62712: LD_VAR 0 2
62716: RET
// export function ReverseArray ( array ) ; var i ; begin
62717: LD_INT 0
62719: PPUSH
62720: PPUSH
// if not array then
62721: LD_VAR 0 1
62725: NOT
62726: IFFALSE 62730
// exit ;
62728: GO 62785
// result := [ ] ;
62730: LD_ADDR_VAR 0 2
62734: PUSH
62735: EMPTY
62736: ST_TO_ADDR
// for i := array downto 1 do
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: DOUBLE
62743: LD_VAR 0 1
62747: INC
62748: ST_TO_ADDR
62749: LD_INT 1
62751: PUSH
62752: FOR_DOWNTO
62753: IFFALSE 62783
// result := Join ( result , array [ i ] ) ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: LD_VAR 0 2
62764: PPUSH
62765: LD_VAR 0 1
62769: PUSH
62770: LD_VAR 0 3
62774: ARRAY
62775: PPUSH
62776: CALL 67429 0 2
62780: ST_TO_ADDR
62781: GO 62752
62783: POP
62784: POP
// end ;
62785: LD_VAR 0 2
62789: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62790: LD_INT 0
62792: PPUSH
62793: PPUSH
62794: PPUSH
62795: PPUSH
62796: PPUSH
62797: PPUSH
// if not unit or not hexes then
62798: LD_VAR 0 1
62802: NOT
62803: PUSH
62804: LD_VAR 0 2
62808: NOT
62809: OR
62810: IFFALSE 62814
// exit ;
62812: GO 62937
// dist := 9999 ;
62814: LD_ADDR_VAR 0 5
62818: PUSH
62819: LD_INT 9999
62821: ST_TO_ADDR
// for i = 1 to hexes do
62822: LD_ADDR_VAR 0 4
62826: PUSH
62827: DOUBLE
62828: LD_INT 1
62830: DEC
62831: ST_TO_ADDR
62832: LD_VAR 0 2
62836: PUSH
62837: FOR_TO
62838: IFFALSE 62925
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62840: LD_ADDR_VAR 0 6
62844: PUSH
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_VAR 0 2
62854: PUSH
62855: LD_VAR 0 4
62859: ARRAY
62860: PUSH
62861: LD_INT 1
62863: ARRAY
62864: PPUSH
62865: LD_VAR 0 2
62869: PUSH
62870: LD_VAR 0 4
62874: ARRAY
62875: PUSH
62876: LD_INT 2
62878: ARRAY
62879: PPUSH
62880: CALL_OW 297
62884: ST_TO_ADDR
// if tdist < dist then
62885: LD_VAR 0 6
62889: PUSH
62890: LD_VAR 0 5
62894: LESS
62895: IFFALSE 62923
// begin hex := hexes [ i ] ;
62897: LD_ADDR_VAR 0 8
62901: PUSH
62902: LD_VAR 0 2
62906: PUSH
62907: LD_VAR 0 4
62911: ARRAY
62912: ST_TO_ADDR
// dist := tdist ;
62913: LD_ADDR_VAR 0 5
62917: PUSH
62918: LD_VAR 0 6
62922: ST_TO_ADDR
// end ; end ;
62923: GO 62837
62925: POP
62926: POP
// result := hex ;
62927: LD_ADDR_VAR 0 3
62931: PUSH
62932: LD_VAR 0 8
62936: ST_TO_ADDR
// end ;
62937: LD_VAR 0 3
62941: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62942: LD_INT 0
62944: PPUSH
62945: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62946: LD_VAR 0 1
62950: NOT
62951: PUSH
62952: LD_VAR 0 1
62956: PUSH
62957: LD_INT 21
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 23
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PPUSH
62981: CALL_OW 69
62985: IN
62986: NOT
62987: OR
62988: IFFALSE 62992
// exit ;
62990: GO 63039
// for i = 1 to 3 do
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: DOUBLE
62998: LD_INT 1
63000: DEC
63001: ST_TO_ADDR
63002: LD_INT 3
63004: PUSH
63005: FOR_TO
63006: IFFALSE 63037
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63008: LD_VAR 0 1
63012: PPUSH
63013: CALL_OW 250
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: CALL_OW 251
63027: PPUSH
63028: LD_INT 1
63030: PPUSH
63031: CALL_OW 453
63035: GO 63005
63037: POP
63038: POP
// end ;
63039: LD_VAR 0 2
63043: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63044: LD_INT 0
63046: PPUSH
63047: PPUSH
63048: PPUSH
63049: PPUSH
63050: PPUSH
63051: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63052: LD_VAR 0 1
63056: NOT
63057: PUSH
63058: LD_VAR 0 2
63062: NOT
63063: OR
63064: PUSH
63065: LD_VAR 0 1
63069: PPUSH
63070: CALL_OW 314
63074: OR
63075: IFFALSE 63079
// exit ;
63077: GO 63546
// if GetLives ( i ) < 250 then
63079: LD_VAR 0 4
63083: PPUSH
63084: CALL_OW 256
63088: PUSH
63089: LD_INT 250
63091: LESS
63092: IFFALSE 63105
// begin ComAutodestruct ( i ) ;
63094: LD_VAR 0 4
63098: PPUSH
63099: CALL 62942 0 1
// exit ;
63103: GO 63546
// end ; x := GetX ( enemy_unit ) ;
63105: LD_ADDR_VAR 0 7
63109: PUSH
63110: LD_VAR 0 2
63114: PPUSH
63115: CALL_OW 250
63119: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63120: LD_ADDR_VAR 0 8
63124: PUSH
63125: LD_VAR 0 2
63129: PPUSH
63130: CALL_OW 251
63134: ST_TO_ADDR
// if not x or not y then
63135: LD_VAR 0 7
63139: NOT
63140: PUSH
63141: LD_VAR 0 8
63145: NOT
63146: OR
63147: IFFALSE 63151
// exit ;
63149: GO 63546
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63151: LD_ADDR_VAR 0 6
63155: PUSH
63156: LD_VAR 0 7
63160: PPUSH
63161: LD_INT 0
63163: PPUSH
63164: LD_INT 4
63166: PPUSH
63167: CALL_OW 272
63171: PUSH
63172: LD_VAR 0 8
63176: PPUSH
63177: LD_INT 0
63179: PPUSH
63180: LD_INT 4
63182: PPUSH
63183: CALL_OW 273
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_VAR 0 7
63196: PPUSH
63197: LD_INT 1
63199: PPUSH
63200: LD_INT 4
63202: PPUSH
63203: CALL_OW 272
63207: PUSH
63208: LD_VAR 0 8
63212: PPUSH
63213: LD_INT 1
63215: PPUSH
63216: LD_INT 4
63218: PPUSH
63219: CALL_OW 273
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_VAR 0 7
63232: PPUSH
63233: LD_INT 2
63235: PPUSH
63236: LD_INT 4
63238: PPUSH
63239: CALL_OW 272
63243: PUSH
63244: LD_VAR 0 8
63248: PPUSH
63249: LD_INT 2
63251: PPUSH
63252: LD_INT 4
63254: PPUSH
63255: CALL_OW 273
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_VAR 0 7
63268: PPUSH
63269: LD_INT 3
63271: PPUSH
63272: LD_INT 4
63274: PPUSH
63275: CALL_OW 272
63279: PUSH
63280: LD_VAR 0 8
63284: PPUSH
63285: LD_INT 3
63287: PPUSH
63288: LD_INT 4
63290: PPUSH
63291: CALL_OW 273
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_VAR 0 7
63304: PPUSH
63305: LD_INT 4
63307: PPUSH
63308: LD_INT 4
63310: PPUSH
63311: CALL_OW 272
63315: PUSH
63316: LD_VAR 0 8
63320: PPUSH
63321: LD_INT 4
63323: PPUSH
63324: LD_INT 4
63326: PPUSH
63327: CALL_OW 273
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_VAR 0 7
63340: PPUSH
63341: LD_INT 5
63343: PPUSH
63344: LD_INT 4
63346: PPUSH
63347: CALL_OW 272
63351: PUSH
63352: LD_VAR 0 8
63356: PPUSH
63357: LD_INT 5
63359: PPUSH
63360: LD_INT 4
63362: PPUSH
63363: CALL_OW 273
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: ST_TO_ADDR
// for i = tmp downto 1 do
63380: LD_ADDR_VAR 0 4
63384: PUSH
63385: DOUBLE
63386: LD_VAR 0 6
63390: INC
63391: ST_TO_ADDR
63392: LD_INT 1
63394: PUSH
63395: FOR_DOWNTO
63396: IFFALSE 63497
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63398: LD_VAR 0 6
63402: PUSH
63403: LD_VAR 0 4
63407: ARRAY
63408: PUSH
63409: LD_INT 1
63411: ARRAY
63412: PPUSH
63413: LD_VAR 0 6
63417: PUSH
63418: LD_VAR 0 4
63422: ARRAY
63423: PUSH
63424: LD_INT 2
63426: ARRAY
63427: PPUSH
63428: CALL_OW 488
63432: NOT
63433: PUSH
63434: LD_VAR 0 6
63438: PUSH
63439: LD_VAR 0 4
63443: ARRAY
63444: PUSH
63445: LD_INT 1
63447: ARRAY
63448: PPUSH
63449: LD_VAR 0 6
63453: PUSH
63454: LD_VAR 0 4
63458: ARRAY
63459: PUSH
63460: LD_INT 2
63462: ARRAY
63463: PPUSH
63464: CALL_OW 428
63468: PUSH
63469: LD_INT 0
63471: NONEQUAL
63472: OR
63473: IFFALSE 63495
// tmp := Delete ( tmp , i ) ;
63475: LD_ADDR_VAR 0 6
63479: PUSH
63480: LD_VAR 0 6
63484: PPUSH
63485: LD_VAR 0 4
63489: PPUSH
63490: CALL_OW 3
63494: ST_TO_ADDR
63495: GO 63395
63497: POP
63498: POP
// j := GetClosestHex ( unit , tmp ) ;
63499: LD_ADDR_VAR 0 5
63503: PUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: LD_VAR 0 6
63513: PPUSH
63514: CALL 62790 0 2
63518: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63519: LD_VAR 0 1
63523: PPUSH
63524: LD_VAR 0 5
63528: PUSH
63529: LD_INT 1
63531: ARRAY
63532: PPUSH
63533: LD_VAR 0 5
63537: PUSH
63538: LD_INT 2
63540: ARRAY
63541: PPUSH
63542: CALL_OW 111
// end ;
63546: LD_VAR 0 3
63550: RET
// export function PrepareApemanSoldier ( ) ; begin
63551: LD_INT 0
63553: PPUSH
// uc_nation := 0 ;
63554: LD_ADDR_OWVAR 21
63558: PUSH
63559: LD_INT 0
63561: ST_TO_ADDR
// hc_sex := sex_male ;
63562: LD_ADDR_OWVAR 27
63566: PUSH
63567: LD_INT 1
63569: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63570: LD_ADDR_OWVAR 28
63574: PUSH
63575: LD_INT 15
63577: ST_TO_ADDR
// hc_gallery :=  ;
63578: LD_ADDR_OWVAR 33
63582: PUSH
63583: LD_STRING 
63585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63586: LD_ADDR_OWVAR 31
63590: PUSH
63591: LD_INT 0
63593: PPUSH
63594: LD_INT 3
63596: PPUSH
63597: CALL_OW 12
63601: PUSH
63602: LD_INT 0
63604: PPUSH
63605: LD_INT 3
63607: PPUSH
63608: CALL_OW 12
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// end ;
63625: LD_VAR 0 1
63629: RET
// export function PrepareApemanEngineer ( ) ; begin
63630: LD_INT 0
63632: PPUSH
// uc_nation := 0 ;
63633: LD_ADDR_OWVAR 21
63637: PUSH
63638: LD_INT 0
63640: ST_TO_ADDR
// hc_sex := sex_male ;
63641: LD_ADDR_OWVAR 27
63645: PUSH
63646: LD_INT 1
63648: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63649: LD_ADDR_OWVAR 28
63653: PUSH
63654: LD_INT 16
63656: ST_TO_ADDR
// hc_gallery :=  ;
63657: LD_ADDR_OWVAR 33
63661: PUSH
63662: LD_STRING 
63664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63665: LD_ADDR_OWVAR 31
63669: PUSH
63670: LD_INT 0
63672: PPUSH
63673: LD_INT 3
63675: PPUSH
63676: CALL_OW 12
63680: PUSH
63681: LD_INT 0
63683: PPUSH
63684: LD_INT 3
63686: PPUSH
63687: CALL_OW 12
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// end ;
63704: LD_VAR 0 1
63708: RET
// export function PrepareApeman ( agressivity ) ; begin
63709: LD_INT 0
63711: PPUSH
// uc_side := 0 ;
63712: LD_ADDR_OWVAR 20
63716: PUSH
63717: LD_INT 0
63719: ST_TO_ADDR
// uc_nation := 0 ;
63720: LD_ADDR_OWVAR 21
63724: PUSH
63725: LD_INT 0
63727: ST_TO_ADDR
// hc_sex := sex_male ;
63728: LD_ADDR_OWVAR 27
63732: PUSH
63733: LD_INT 1
63735: ST_TO_ADDR
// hc_class := class_apeman ;
63736: LD_ADDR_OWVAR 28
63740: PUSH
63741: LD_INT 12
63743: ST_TO_ADDR
// hc_gallery :=  ;
63744: LD_ADDR_OWVAR 33
63748: PUSH
63749: LD_STRING 
63751: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63752: LD_ADDR_OWVAR 35
63756: PUSH
63757: LD_VAR 0 1
63761: NEG
63762: PPUSH
63763: LD_VAR 0 1
63767: PPUSH
63768: CALL_OW 12
63772: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63773: LD_ADDR_OWVAR 31
63777: PUSH
63778: LD_INT 0
63780: PPUSH
63781: LD_INT 3
63783: PPUSH
63784: CALL_OW 12
63788: PUSH
63789: LD_INT 0
63791: PPUSH
63792: LD_INT 3
63794: PPUSH
63795: CALL_OW 12
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// end ;
63812: LD_VAR 0 2
63816: RET
// export function PrepareTiger ( agressivity ) ; begin
63817: LD_INT 0
63819: PPUSH
// uc_side := 0 ;
63820: LD_ADDR_OWVAR 20
63824: PUSH
63825: LD_INT 0
63827: ST_TO_ADDR
// uc_nation := 0 ;
63828: LD_ADDR_OWVAR 21
63832: PUSH
63833: LD_INT 0
63835: ST_TO_ADDR
// hc_class := class_tiger ;
63836: LD_ADDR_OWVAR 28
63840: PUSH
63841: LD_INT 14
63843: ST_TO_ADDR
// hc_gallery :=  ;
63844: LD_ADDR_OWVAR 33
63848: PUSH
63849: LD_STRING 
63851: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63852: LD_ADDR_OWVAR 35
63856: PUSH
63857: LD_VAR 0 1
63861: NEG
63862: PPUSH
63863: LD_VAR 0 1
63867: PPUSH
63868: CALL_OW 12
63872: ST_TO_ADDR
// end ;
63873: LD_VAR 0 2
63877: RET
// export function PrepareEnchidna ( ) ; begin
63878: LD_INT 0
63880: PPUSH
// uc_side := 0 ;
63881: LD_ADDR_OWVAR 20
63885: PUSH
63886: LD_INT 0
63888: ST_TO_ADDR
// uc_nation := 0 ;
63889: LD_ADDR_OWVAR 21
63893: PUSH
63894: LD_INT 0
63896: ST_TO_ADDR
// hc_class := class_baggie ;
63897: LD_ADDR_OWVAR 28
63901: PUSH
63902: LD_INT 13
63904: ST_TO_ADDR
// hc_gallery :=  ;
63905: LD_ADDR_OWVAR 33
63909: PUSH
63910: LD_STRING 
63912: ST_TO_ADDR
// end ;
63913: LD_VAR 0 1
63917: RET
// export function PrepareFrog ( ) ; begin
63918: LD_INT 0
63920: PPUSH
// uc_side := 0 ;
63921: LD_ADDR_OWVAR 20
63925: PUSH
63926: LD_INT 0
63928: ST_TO_ADDR
// uc_nation := 0 ;
63929: LD_ADDR_OWVAR 21
63933: PUSH
63934: LD_INT 0
63936: ST_TO_ADDR
// hc_class := class_frog ;
63937: LD_ADDR_OWVAR 28
63941: PUSH
63942: LD_INT 19
63944: ST_TO_ADDR
// hc_gallery :=  ;
63945: LD_ADDR_OWVAR 33
63949: PUSH
63950: LD_STRING 
63952: ST_TO_ADDR
// end ;
63953: LD_VAR 0 1
63957: RET
// export function PrepareFish ( ) ; begin
63958: LD_INT 0
63960: PPUSH
// uc_side := 0 ;
63961: LD_ADDR_OWVAR 20
63965: PUSH
63966: LD_INT 0
63968: ST_TO_ADDR
// uc_nation := 0 ;
63969: LD_ADDR_OWVAR 21
63973: PUSH
63974: LD_INT 0
63976: ST_TO_ADDR
// hc_class := class_fish ;
63977: LD_ADDR_OWVAR 28
63981: PUSH
63982: LD_INT 20
63984: ST_TO_ADDR
// hc_gallery :=  ;
63985: LD_ADDR_OWVAR 33
63989: PUSH
63990: LD_STRING 
63992: ST_TO_ADDR
// end ;
63993: LD_VAR 0 1
63997: RET
// export function PrepareBird ( ) ; begin
63998: LD_INT 0
64000: PPUSH
// uc_side := 0 ;
64001: LD_ADDR_OWVAR 20
64005: PUSH
64006: LD_INT 0
64008: ST_TO_ADDR
// uc_nation := 0 ;
64009: LD_ADDR_OWVAR 21
64013: PUSH
64014: LD_INT 0
64016: ST_TO_ADDR
// hc_class := class_phororhacos ;
64017: LD_ADDR_OWVAR 28
64021: PUSH
64022: LD_INT 18
64024: ST_TO_ADDR
// hc_gallery :=  ;
64025: LD_ADDR_OWVAR 33
64029: PUSH
64030: LD_STRING 
64032: ST_TO_ADDR
// end ;
64033: LD_VAR 0 1
64037: RET
// export function PrepareHorse ( ) ; begin
64038: LD_INT 0
64040: PPUSH
// uc_side := 0 ;
64041: LD_ADDR_OWVAR 20
64045: PUSH
64046: LD_INT 0
64048: ST_TO_ADDR
// uc_nation := 0 ;
64049: LD_ADDR_OWVAR 21
64053: PUSH
64054: LD_INT 0
64056: ST_TO_ADDR
// hc_class := class_horse ;
64057: LD_ADDR_OWVAR 28
64061: PUSH
64062: LD_INT 21
64064: ST_TO_ADDR
// hc_gallery :=  ;
64065: LD_ADDR_OWVAR 33
64069: PUSH
64070: LD_STRING 
64072: ST_TO_ADDR
// end ;
64073: LD_VAR 0 1
64077: RET
// export function PrepareMastodont ( ) ; begin
64078: LD_INT 0
64080: PPUSH
// uc_side := 0 ;
64081: LD_ADDR_OWVAR 20
64085: PUSH
64086: LD_INT 0
64088: ST_TO_ADDR
// uc_nation := 0 ;
64089: LD_ADDR_OWVAR 21
64093: PUSH
64094: LD_INT 0
64096: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64097: LD_ADDR_OWVAR 37
64101: PUSH
64102: LD_INT 31
64104: ST_TO_ADDR
// vc_control := control_rider ;
64105: LD_ADDR_OWVAR 38
64109: PUSH
64110: LD_INT 4
64112: ST_TO_ADDR
// end ;
64113: LD_VAR 0 1
64117: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64118: LD_INT 0
64120: PPUSH
64121: PPUSH
64122: PPUSH
// uc_side = 0 ;
64123: LD_ADDR_OWVAR 20
64127: PUSH
64128: LD_INT 0
64130: ST_TO_ADDR
// uc_nation = 0 ;
64131: LD_ADDR_OWVAR 21
64135: PUSH
64136: LD_INT 0
64138: ST_TO_ADDR
// InitHc_All ( ) ;
64139: CALL_OW 584
// InitVc ;
64143: CALL_OW 20
// if mastodonts then
64147: LD_VAR 0 6
64151: IFFALSE 64218
// for i = 1 to mastodonts do
64153: LD_ADDR_VAR 0 11
64157: PUSH
64158: DOUBLE
64159: LD_INT 1
64161: DEC
64162: ST_TO_ADDR
64163: LD_VAR 0 6
64167: PUSH
64168: FOR_TO
64169: IFFALSE 64216
// begin vc_chassis := 31 ;
64171: LD_ADDR_OWVAR 37
64175: PUSH
64176: LD_INT 31
64178: ST_TO_ADDR
// vc_control := control_rider ;
64179: LD_ADDR_OWVAR 38
64183: PUSH
64184: LD_INT 4
64186: ST_TO_ADDR
// animal := CreateVehicle ;
64187: LD_ADDR_VAR 0 12
64191: PUSH
64192: CALL_OW 45
64196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64197: LD_VAR 0 12
64201: PPUSH
64202: LD_VAR 0 8
64206: PPUSH
64207: LD_INT 0
64209: PPUSH
64210: CALL 66346 0 3
// end ;
64214: GO 64168
64216: POP
64217: POP
// if horses then
64218: LD_VAR 0 5
64222: IFFALSE 64289
// for i = 1 to horses do
64224: LD_ADDR_VAR 0 11
64228: PUSH
64229: DOUBLE
64230: LD_INT 1
64232: DEC
64233: ST_TO_ADDR
64234: LD_VAR 0 5
64238: PUSH
64239: FOR_TO
64240: IFFALSE 64287
// begin hc_class := 21 ;
64242: LD_ADDR_OWVAR 28
64246: PUSH
64247: LD_INT 21
64249: ST_TO_ADDR
// hc_gallery :=  ;
64250: LD_ADDR_OWVAR 33
64254: PUSH
64255: LD_STRING 
64257: ST_TO_ADDR
// animal := CreateHuman ;
64258: LD_ADDR_VAR 0 12
64262: PUSH
64263: CALL_OW 44
64267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64268: LD_VAR 0 12
64272: PPUSH
64273: LD_VAR 0 8
64277: PPUSH
64278: LD_INT 0
64280: PPUSH
64281: CALL 66346 0 3
// end ;
64285: GO 64239
64287: POP
64288: POP
// if birds then
64289: LD_VAR 0 1
64293: IFFALSE 64360
// for i = 1 to birds do
64295: LD_ADDR_VAR 0 11
64299: PUSH
64300: DOUBLE
64301: LD_INT 1
64303: DEC
64304: ST_TO_ADDR
64305: LD_VAR 0 1
64309: PUSH
64310: FOR_TO
64311: IFFALSE 64358
// begin hc_class = 18 ;
64313: LD_ADDR_OWVAR 28
64317: PUSH
64318: LD_INT 18
64320: ST_TO_ADDR
// hc_gallery =  ;
64321: LD_ADDR_OWVAR 33
64325: PUSH
64326: LD_STRING 
64328: ST_TO_ADDR
// animal := CreateHuman ;
64329: LD_ADDR_VAR 0 12
64333: PUSH
64334: CALL_OW 44
64338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64339: LD_VAR 0 12
64343: PPUSH
64344: LD_VAR 0 8
64348: PPUSH
64349: LD_INT 0
64351: PPUSH
64352: CALL 66346 0 3
// end ;
64356: GO 64310
64358: POP
64359: POP
// if tigers then
64360: LD_VAR 0 2
64364: IFFALSE 64448
// for i = 1 to tigers do
64366: LD_ADDR_VAR 0 11
64370: PUSH
64371: DOUBLE
64372: LD_INT 1
64374: DEC
64375: ST_TO_ADDR
64376: LD_VAR 0 2
64380: PUSH
64381: FOR_TO
64382: IFFALSE 64446
// begin hc_class = class_tiger ;
64384: LD_ADDR_OWVAR 28
64388: PUSH
64389: LD_INT 14
64391: ST_TO_ADDR
// hc_gallery =  ;
64392: LD_ADDR_OWVAR 33
64396: PUSH
64397: LD_STRING 
64399: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64400: LD_ADDR_OWVAR 35
64404: PUSH
64405: LD_INT 7
64407: NEG
64408: PPUSH
64409: LD_INT 7
64411: PPUSH
64412: CALL_OW 12
64416: ST_TO_ADDR
// animal := CreateHuman ;
64417: LD_ADDR_VAR 0 12
64421: PUSH
64422: CALL_OW 44
64426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64427: LD_VAR 0 12
64431: PPUSH
64432: LD_VAR 0 8
64436: PPUSH
64437: LD_INT 0
64439: PPUSH
64440: CALL 66346 0 3
// end ;
64444: GO 64381
64446: POP
64447: POP
// if apemans then
64448: LD_VAR 0 3
64452: IFFALSE 64575
// for i = 1 to apemans do
64454: LD_ADDR_VAR 0 11
64458: PUSH
64459: DOUBLE
64460: LD_INT 1
64462: DEC
64463: ST_TO_ADDR
64464: LD_VAR 0 3
64468: PUSH
64469: FOR_TO
64470: IFFALSE 64573
// begin hc_class = class_apeman ;
64472: LD_ADDR_OWVAR 28
64476: PUSH
64477: LD_INT 12
64479: ST_TO_ADDR
// hc_gallery =  ;
64480: LD_ADDR_OWVAR 33
64484: PUSH
64485: LD_STRING 
64487: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64488: LD_ADDR_OWVAR 35
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PPUSH
64497: LD_INT 2
64499: PPUSH
64500: CALL_OW 12
64504: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64505: LD_ADDR_OWVAR 31
64509: PUSH
64510: LD_INT 1
64512: PPUSH
64513: LD_INT 3
64515: PPUSH
64516: CALL_OW 12
64520: PUSH
64521: LD_INT 1
64523: PPUSH
64524: LD_INT 3
64526: PPUSH
64527: CALL_OW 12
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: ST_TO_ADDR
// animal := CreateHuman ;
64544: LD_ADDR_VAR 0 12
64548: PUSH
64549: CALL_OW 44
64553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64554: LD_VAR 0 12
64558: PPUSH
64559: LD_VAR 0 8
64563: PPUSH
64564: LD_INT 0
64566: PPUSH
64567: CALL 66346 0 3
// end ;
64571: GO 64469
64573: POP
64574: POP
// if enchidnas then
64575: LD_VAR 0 4
64579: IFFALSE 64646
// for i = 1 to enchidnas do
64581: LD_ADDR_VAR 0 11
64585: PUSH
64586: DOUBLE
64587: LD_INT 1
64589: DEC
64590: ST_TO_ADDR
64591: LD_VAR 0 4
64595: PUSH
64596: FOR_TO
64597: IFFALSE 64644
// begin hc_class = 13 ;
64599: LD_ADDR_OWVAR 28
64603: PUSH
64604: LD_INT 13
64606: ST_TO_ADDR
// hc_gallery =  ;
64607: LD_ADDR_OWVAR 33
64611: PUSH
64612: LD_STRING 
64614: ST_TO_ADDR
// animal := CreateHuman ;
64615: LD_ADDR_VAR 0 12
64619: PUSH
64620: CALL_OW 44
64624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64625: LD_VAR 0 12
64629: PPUSH
64630: LD_VAR 0 8
64634: PPUSH
64635: LD_INT 0
64637: PPUSH
64638: CALL 66346 0 3
// end ;
64642: GO 64596
64644: POP
64645: POP
// if fishes then
64646: LD_VAR 0 7
64650: IFFALSE 64717
// for i = 1 to fishes do
64652: LD_ADDR_VAR 0 11
64656: PUSH
64657: DOUBLE
64658: LD_INT 1
64660: DEC
64661: ST_TO_ADDR
64662: LD_VAR 0 7
64666: PUSH
64667: FOR_TO
64668: IFFALSE 64715
// begin hc_class = 20 ;
64670: LD_ADDR_OWVAR 28
64674: PUSH
64675: LD_INT 20
64677: ST_TO_ADDR
// hc_gallery =  ;
64678: LD_ADDR_OWVAR 33
64682: PUSH
64683: LD_STRING 
64685: ST_TO_ADDR
// animal := CreateHuman ;
64686: LD_ADDR_VAR 0 12
64690: PUSH
64691: CALL_OW 44
64695: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64696: LD_VAR 0 12
64700: PPUSH
64701: LD_VAR 0 9
64705: PPUSH
64706: LD_INT 0
64708: PPUSH
64709: CALL 66346 0 3
// end ;
64713: GO 64667
64715: POP
64716: POP
// end ;
64717: LD_VAR 0 10
64721: RET
// export function WantHeal ( sci , unit ) ; begin
64722: LD_INT 0
64724: PPUSH
// if GetTaskList ( sci ) > 0 then
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 437
64734: PUSH
64735: LD_INT 0
64737: GREATER
64738: IFFALSE 64808
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64740: LD_VAR 0 1
64744: PPUSH
64745: CALL_OW 437
64749: PUSH
64750: LD_INT 1
64752: ARRAY
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_STRING l
64760: EQUAL
64761: PUSH
64762: LD_VAR 0 1
64766: PPUSH
64767: CALL_OW 437
64771: PUSH
64772: LD_INT 1
64774: ARRAY
64775: PUSH
64776: LD_INT 4
64778: ARRAY
64779: PUSH
64780: LD_VAR 0 2
64784: EQUAL
64785: AND
64786: IFFALSE 64798
// result := true else
64788: LD_ADDR_VAR 0 3
64792: PUSH
64793: LD_INT 1
64795: ST_TO_ADDR
64796: GO 64806
// result := false ;
64798: LD_ADDR_VAR 0 3
64802: PUSH
64803: LD_INT 0
64805: ST_TO_ADDR
// end else
64806: GO 64816
// result := false ;
64808: LD_ADDR_VAR 0 3
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// end ;
64816: LD_VAR 0 3
64820: RET
// export function HealTarget ( sci ) ; begin
64821: LD_INT 0
64823: PPUSH
// if not sci then
64824: LD_VAR 0 1
64828: NOT
64829: IFFALSE 64833
// exit ;
64831: GO 64898
// result := 0 ;
64833: LD_ADDR_VAR 0 2
64837: PUSH
64838: LD_INT 0
64840: ST_TO_ADDR
// if GetTaskList ( sci ) then
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 437
64850: IFFALSE 64898
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 437
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PUSH
64866: LD_INT 1
64868: ARRAY
64869: PUSH
64870: LD_STRING l
64872: EQUAL
64873: IFFALSE 64898
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64875: LD_ADDR_VAR 0 2
64879: PUSH
64880: LD_VAR 0 1
64884: PPUSH
64885: CALL_OW 437
64889: PUSH
64890: LD_INT 1
64892: ARRAY
64893: PUSH
64894: LD_INT 4
64896: ARRAY
64897: ST_TO_ADDR
// end ;
64898: LD_VAR 0 2
64902: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64903: LD_INT 0
64905: PPUSH
64906: PPUSH
64907: PPUSH
64908: PPUSH
// if not base_units then
64909: LD_VAR 0 1
64913: NOT
64914: IFFALSE 64918
// exit ;
64916: GO 65005
// result := false ;
64918: LD_ADDR_VAR 0 2
64922: PUSH
64923: LD_INT 0
64925: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64926: LD_ADDR_VAR 0 5
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_INT 21
64938: PUSH
64939: LD_INT 3
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PPUSH
64946: CALL_OW 72
64950: ST_TO_ADDR
// if not tmp then
64951: LD_VAR 0 5
64955: NOT
64956: IFFALSE 64960
// exit ;
64958: GO 65005
// for i in tmp do
64960: LD_ADDR_VAR 0 3
64964: PUSH
64965: LD_VAR 0 5
64969: PUSH
64970: FOR_IN
64971: IFFALSE 65003
// begin result := EnemyInRange ( i , 22 ) ;
64973: LD_ADDR_VAR 0 2
64977: PUSH
64978: LD_VAR 0 3
64982: PPUSH
64983: LD_INT 22
64985: PPUSH
64986: CALL 62592 0 2
64990: ST_TO_ADDR
// if result then
64991: LD_VAR 0 2
64995: IFFALSE 65001
// exit ;
64997: POP
64998: POP
64999: GO 65005
// end ;
65001: GO 64970
65003: POP
65004: POP
// end ;
65005: LD_VAR 0 2
65009: RET
// export function FilterByTag ( units , tag ) ; begin
65010: LD_INT 0
65012: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65013: LD_ADDR_VAR 0 3
65017: PUSH
65018: LD_VAR 0 1
65022: PPUSH
65023: LD_INT 120
65025: PUSH
65026: LD_VAR 0 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PPUSH
65035: CALL_OW 72
65039: ST_TO_ADDR
// end ;
65040: LD_VAR 0 3
65044: RET
// export function IsDriver ( un ) ; begin
65045: LD_INT 0
65047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65048: LD_ADDR_VAR 0 2
65052: PUSH
65053: LD_VAR 0 1
65057: PUSH
65058: LD_INT 55
65060: PUSH
65061: EMPTY
65062: LIST
65063: PPUSH
65064: CALL_OW 69
65068: IN
65069: ST_TO_ADDR
// end ;
65070: LD_VAR 0 2
65074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65075: LD_INT 0
65077: PPUSH
65078: PPUSH
// list := [ ] ;
65079: LD_ADDR_VAR 0 5
65083: PUSH
65084: EMPTY
65085: ST_TO_ADDR
// case d of 0 :
65086: LD_VAR 0 3
65090: PUSH
65091: LD_INT 0
65093: DOUBLE
65094: EQUAL
65095: IFTRUE 65099
65097: GO 65232
65099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65100: LD_ADDR_VAR 0 5
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_INT 4
65112: MINUS
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 4
65121: MINUS
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_INT 3
65138: MINUS
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 4
65160: PLUS
65161: PUSH
65162: LD_VAR 0 2
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: LD_VAR 0 1
65179: PUSH
65180: LD_INT 3
65182: PLUS
65183: PUSH
65184: LD_VAR 0 2
65188: PUSH
65189: LD_INT 3
65191: PLUS
65192: PUSH
65193: LD_INT 5
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: PUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_VAR 0 2
65210: PUSH
65211: LD_INT 4
65213: PLUS
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// end ; 1 :
65230: GO 65930
65232: LD_INT 1
65234: DOUBLE
65235: EQUAL
65236: IFTRUE 65240
65238: GO 65373
65240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65241: LD_ADDR_VAR 0 5
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_INT 4
65258: MINUS
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: PUSH
65268: LD_VAR 0 1
65272: PUSH
65273: LD_INT 3
65275: MINUS
65276: PUSH
65277: LD_VAR 0 2
65281: PUSH
65282: LD_INT 3
65284: MINUS
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 4
65301: MINUS
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_VAR 0 2
65325: PUSH
65326: LD_INT 3
65328: PLUS
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_INT 4
65345: PLUS
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 4
65354: PLUS
65355: PUSH
65356: LD_INT 5
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// end ; 2 :
65371: GO 65930
65373: LD_INT 2
65375: DOUBLE
65376: EQUAL
65377: IFTRUE 65381
65379: GO 65510
65381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65382: LD_ADDR_VAR 0 5
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: LD_VAR 0 2
65396: PUSH
65397: LD_INT 3
65399: MINUS
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: PUSH
65409: LD_VAR 0 1
65413: PUSH
65414: LD_INT 4
65416: PLUS
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: PUSH
65431: LD_VAR 0 1
65435: PUSH
65436: LD_VAR 0 2
65440: PUSH
65441: LD_INT 4
65443: PLUS
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: PUSH
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 3
65460: MINUS
65461: PUSH
65462: LD_VAR 0 2
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: LD_INT 4
65482: MINUS
65483: PUSH
65484: LD_VAR 0 2
65488: PUSH
65489: LD_INT 4
65491: MINUS
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// end ; 3 :
65508: GO 65930
65510: LD_INT 3
65512: DOUBLE
65513: EQUAL
65514: IFTRUE 65518
65516: GO 65651
65518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65519: LD_ADDR_VAR 0 5
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: LD_INT 3
65531: PLUS
65532: PUSH
65533: LD_VAR 0 2
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: PUSH
65546: LD_VAR 0 1
65550: PUSH
65551: LD_INT 4
65553: PLUS
65554: PUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_INT 4
65562: PLUS
65563: PUSH
65564: LD_INT 5
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: LIST
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: LD_INT 4
65579: MINUS
65580: PUSH
65581: LD_VAR 0 2
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: LD_VAR 0 2
65603: PUSH
65604: LD_INT 4
65606: MINUS
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: LD_INT 3
65623: MINUS
65624: PUSH
65625: LD_VAR 0 2
65629: PUSH
65630: LD_INT 3
65632: MINUS
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: ST_TO_ADDR
// end ; 4 :
65649: GO 65930
65651: LD_INT 4
65653: DOUBLE
65654: EQUAL
65655: IFTRUE 65659
65657: GO 65792
65659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65660: LD_ADDR_VAR 0 5
65664: PUSH
65665: LD_VAR 0 1
65669: PUSH
65670: LD_VAR 0 2
65674: PUSH
65675: LD_INT 4
65677: PLUS
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: LD_INT 3
65694: PLUS
65695: PUSH
65696: LD_VAR 0 2
65700: PUSH
65701: LD_INT 3
65703: PLUS
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: PUSH
65713: LD_VAR 0 1
65717: PUSH
65718: LD_INT 4
65720: PLUS
65721: PUSH
65722: LD_VAR 0 2
65726: PUSH
65727: LD_INT 4
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_VAR 0 2
65744: PUSH
65745: LD_INT 3
65747: MINUS
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 4
65764: MINUS
65765: PUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 4
65773: MINUS
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: ST_TO_ADDR
// end ; 5 :
65790: GO 65930
65792: LD_INT 5
65794: DOUBLE
65795: EQUAL
65796: IFTRUE 65800
65798: GO 65929
65800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65801: LD_ADDR_VAR 0 5
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 4
65813: MINUS
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_VAR 0 2
65837: PUSH
65838: LD_INT 4
65840: MINUS
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: LIST
65849: PUSH
65850: LD_VAR 0 1
65854: PUSH
65855: LD_INT 4
65857: PLUS
65858: PUSH
65859: LD_VAR 0 2
65863: PUSH
65864: LD_INT 4
65866: PLUS
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: PUSH
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 3
65883: PLUS
65884: PUSH
65885: LD_VAR 0 2
65889: PUSH
65890: LD_INT 4
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: LD_VAR 0 2
65907: PUSH
65908: LD_INT 3
65910: PLUS
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: ST_TO_ADDR
// end ; end ;
65927: GO 65930
65929: POP
// result := list ;
65930: LD_ADDR_VAR 0 4
65934: PUSH
65935: LD_VAR 0 5
65939: ST_TO_ADDR
// end ;
65940: LD_VAR 0 4
65944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65945: LD_INT 0
65947: PPUSH
65948: PPUSH
65949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65950: LD_VAR 0 1
65954: NOT
65955: PUSH
65956: LD_VAR 0 2
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: LD_INT 2
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: IN
65979: NOT
65980: OR
65981: IFFALSE 65985
// exit ;
65983: GO 66068
// tmp := [ ] ;
65985: LD_ADDR_VAR 0 5
65989: PUSH
65990: EMPTY
65991: ST_TO_ADDR
// for i in units do
65992: LD_ADDR_VAR 0 4
65996: PUSH
65997: LD_VAR 0 1
66001: PUSH
66002: FOR_IN
66003: IFFALSE 66037
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66005: LD_ADDR_VAR 0 5
66009: PUSH
66010: LD_VAR 0 5
66014: PPUSH
66015: LD_VAR 0 4
66019: PPUSH
66020: LD_VAR 0 2
66024: PPUSH
66025: CALL_OW 259
66029: PPUSH
66030: CALL 67429 0 2
66034: ST_TO_ADDR
66035: GO 66002
66037: POP
66038: POP
// if not tmp then
66039: LD_VAR 0 5
66043: NOT
66044: IFFALSE 66048
// exit ;
66046: GO 66068
// result := SortListByListDesc ( units , tmp ) ;
66048: LD_ADDR_VAR 0 3
66052: PUSH
66053: LD_VAR 0 1
66057: PPUSH
66058: LD_VAR 0 5
66062: PPUSH
66063: CALL_OW 77
66067: ST_TO_ADDR
// end ;
66068: LD_VAR 0 3
66072: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66073: LD_INT 0
66075: PPUSH
66076: PPUSH
66077: PPUSH
// result := false ;
66078: LD_ADDR_VAR 0 3
66082: PUSH
66083: LD_INT 0
66085: ST_TO_ADDR
// if not building then
66086: LD_VAR 0 2
66090: NOT
66091: IFFALSE 66095
// exit ;
66093: GO 66233
// x := GetX ( building ) ;
66095: LD_ADDR_VAR 0 4
66099: PUSH
66100: LD_VAR 0 2
66104: PPUSH
66105: CALL_OW 250
66109: ST_TO_ADDR
// y := GetY ( building ) ;
66110: LD_ADDR_VAR 0 5
66114: PUSH
66115: LD_VAR 0 2
66119: PPUSH
66120: CALL_OW 251
66124: ST_TO_ADDR
// if not x or not y then
66125: LD_VAR 0 4
66129: NOT
66130: PUSH
66131: LD_VAR 0 5
66135: NOT
66136: OR
66137: IFFALSE 66141
// exit ;
66139: GO 66233
// if GetTaskList ( unit ) then
66141: LD_VAR 0 1
66145: PPUSH
66146: CALL_OW 437
66150: IFFALSE 66233
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66152: LD_STRING e
66154: PUSH
66155: LD_VAR 0 1
66159: PPUSH
66160: CALL_OW 437
66164: PUSH
66165: LD_INT 1
66167: ARRAY
66168: PUSH
66169: LD_INT 1
66171: ARRAY
66172: EQUAL
66173: PUSH
66174: LD_VAR 0 4
66178: PUSH
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL_OW 437
66188: PUSH
66189: LD_INT 1
66191: ARRAY
66192: PUSH
66193: LD_INT 2
66195: ARRAY
66196: EQUAL
66197: AND
66198: PUSH
66199: LD_VAR 0 5
66203: PUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: CALL_OW 437
66213: PUSH
66214: LD_INT 1
66216: ARRAY
66217: PUSH
66218: LD_INT 3
66220: ARRAY
66221: EQUAL
66222: AND
66223: IFFALSE 66233
// result := true end ;
66225: LD_ADDR_VAR 0 3
66229: PUSH
66230: LD_INT 1
66232: ST_TO_ADDR
// end ;
66233: LD_VAR 0 3
66237: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66238: LD_INT 0
66240: PPUSH
// result := false ;
66241: LD_ADDR_VAR 0 4
66245: PUSH
66246: LD_INT 0
66248: ST_TO_ADDR
// if GetTaskList ( unit ) then
66249: LD_VAR 0 1
66253: PPUSH
66254: CALL_OW 437
66258: IFFALSE 66341
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66260: LD_STRING M
66262: PUSH
66263: LD_VAR 0 1
66267: PPUSH
66268: CALL_OW 437
66272: PUSH
66273: LD_INT 1
66275: ARRAY
66276: PUSH
66277: LD_INT 1
66279: ARRAY
66280: EQUAL
66281: PUSH
66282: LD_VAR 0 2
66286: PUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL_OW 437
66296: PUSH
66297: LD_INT 1
66299: ARRAY
66300: PUSH
66301: LD_INT 2
66303: ARRAY
66304: EQUAL
66305: AND
66306: PUSH
66307: LD_VAR 0 3
66311: PUSH
66312: LD_VAR 0 1
66316: PPUSH
66317: CALL_OW 437
66321: PUSH
66322: LD_INT 1
66324: ARRAY
66325: PUSH
66326: LD_INT 3
66328: ARRAY
66329: EQUAL
66330: AND
66331: IFFALSE 66341
// result := true ;
66333: LD_ADDR_VAR 0 4
66337: PUSH
66338: LD_INT 1
66340: ST_TO_ADDR
// end ; end ;
66341: LD_VAR 0 4
66345: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66346: LD_INT 0
66348: PPUSH
66349: PPUSH
66350: PPUSH
66351: PPUSH
// if not unit or not area then
66352: LD_VAR 0 1
66356: NOT
66357: PUSH
66358: LD_VAR 0 2
66362: NOT
66363: OR
66364: IFFALSE 66368
// exit ;
66366: GO 66532
// tmp := AreaToList ( area , i ) ;
66368: LD_ADDR_VAR 0 6
66372: PUSH
66373: LD_VAR 0 2
66377: PPUSH
66378: LD_VAR 0 5
66382: PPUSH
66383: CALL_OW 517
66387: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66388: LD_ADDR_VAR 0 5
66392: PUSH
66393: DOUBLE
66394: LD_INT 1
66396: DEC
66397: ST_TO_ADDR
66398: LD_VAR 0 6
66402: PUSH
66403: LD_INT 1
66405: ARRAY
66406: PUSH
66407: FOR_TO
66408: IFFALSE 66530
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66410: LD_ADDR_VAR 0 7
66414: PUSH
66415: LD_VAR 0 6
66419: PUSH
66420: LD_INT 1
66422: ARRAY
66423: PUSH
66424: LD_VAR 0 5
66428: ARRAY
66429: PUSH
66430: LD_VAR 0 6
66434: PUSH
66435: LD_INT 2
66437: ARRAY
66438: PUSH
66439: LD_VAR 0 5
66443: ARRAY
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66449: LD_VAR 0 7
66453: PUSH
66454: LD_INT 1
66456: ARRAY
66457: PPUSH
66458: LD_VAR 0 7
66462: PUSH
66463: LD_INT 2
66465: ARRAY
66466: PPUSH
66467: CALL_OW 428
66471: PUSH
66472: LD_INT 0
66474: EQUAL
66475: IFFALSE 66528
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66477: LD_VAR 0 1
66481: PPUSH
66482: LD_VAR 0 7
66486: PUSH
66487: LD_INT 1
66489: ARRAY
66490: PPUSH
66491: LD_VAR 0 7
66495: PUSH
66496: LD_INT 2
66498: ARRAY
66499: PPUSH
66500: LD_VAR 0 3
66504: PPUSH
66505: CALL_OW 48
// result := IsPlaced ( unit ) ;
66509: LD_ADDR_VAR 0 4
66513: PUSH
66514: LD_VAR 0 1
66518: PPUSH
66519: CALL_OW 305
66523: ST_TO_ADDR
// exit ;
66524: POP
66525: POP
66526: GO 66532
// end ; end ;
66528: GO 66407
66530: POP
66531: POP
// end ;
66532: LD_VAR 0 4
66536: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66537: LD_INT 0
66539: PPUSH
66540: PPUSH
66541: PPUSH
// if not side or side > 8 then
66542: LD_VAR 0 1
66546: NOT
66547: PUSH
66548: LD_VAR 0 1
66552: PUSH
66553: LD_INT 8
66555: GREATER
66556: OR
66557: IFFALSE 66561
// exit ;
66559: GO 66748
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66561: LD_ADDR_VAR 0 4
66565: PUSH
66566: LD_INT 22
66568: PUSH
66569: LD_VAR 0 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 21
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PPUSH
66592: CALL_OW 69
66596: ST_TO_ADDR
// if not tmp then
66597: LD_VAR 0 4
66601: NOT
66602: IFFALSE 66606
// exit ;
66604: GO 66748
// enable_addtolog := true ;
66606: LD_ADDR_OWVAR 81
66610: PUSH
66611: LD_INT 1
66613: ST_TO_ADDR
// AddToLog ( [ ) ;
66614: LD_STRING [
66616: PPUSH
66617: CALL_OW 561
// for i in tmp do
66621: LD_ADDR_VAR 0 3
66625: PUSH
66626: LD_VAR 0 4
66630: PUSH
66631: FOR_IN
66632: IFFALSE 66739
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66634: LD_STRING [
66636: PUSH
66637: LD_VAR 0 3
66641: PPUSH
66642: CALL_OW 266
66646: STR
66647: PUSH
66648: LD_STRING , 
66650: STR
66651: PUSH
66652: LD_VAR 0 3
66656: PPUSH
66657: CALL_OW 250
66661: STR
66662: PUSH
66663: LD_STRING , 
66665: STR
66666: PUSH
66667: LD_VAR 0 3
66671: PPUSH
66672: CALL_OW 251
66676: STR
66677: PUSH
66678: LD_STRING , 
66680: STR
66681: PUSH
66682: LD_VAR 0 3
66686: PPUSH
66687: CALL_OW 254
66691: STR
66692: PUSH
66693: LD_STRING , 
66695: STR
66696: PUSH
66697: LD_VAR 0 3
66701: PPUSH
66702: LD_INT 1
66704: PPUSH
66705: CALL_OW 268
66709: STR
66710: PUSH
66711: LD_STRING , 
66713: STR
66714: PUSH
66715: LD_VAR 0 3
66719: PPUSH
66720: LD_INT 2
66722: PPUSH
66723: CALL_OW 268
66727: STR
66728: PUSH
66729: LD_STRING ],
66731: STR
66732: PPUSH
66733: CALL_OW 561
// end ;
66737: GO 66631
66739: POP
66740: POP
// AddToLog ( ]; ) ;
66741: LD_STRING ];
66743: PPUSH
66744: CALL_OW 561
// end ;
66748: LD_VAR 0 2
66752: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66753: LD_INT 0
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
// if not area or not rate or not max then
66760: LD_VAR 0 1
66764: NOT
66765: PUSH
66766: LD_VAR 0 2
66770: NOT
66771: OR
66772: PUSH
66773: LD_VAR 0 4
66777: NOT
66778: OR
66779: IFFALSE 66783
// exit ;
66781: GO 66972
// while 1 do
66783: LD_INT 1
66785: IFFALSE 66972
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66787: LD_ADDR_VAR 0 9
66791: PUSH
66792: LD_VAR 0 1
66796: PPUSH
66797: LD_INT 1
66799: PPUSH
66800: CALL_OW 287
66804: PUSH
66805: LD_INT 10
66807: MUL
66808: ST_TO_ADDR
// r := rate / 10 ;
66809: LD_ADDR_VAR 0 7
66813: PUSH
66814: LD_VAR 0 2
66818: PUSH
66819: LD_INT 10
66821: DIVREAL
66822: ST_TO_ADDR
// time := 1 1$00 ;
66823: LD_ADDR_VAR 0 8
66827: PUSH
66828: LD_INT 2100
66830: ST_TO_ADDR
// if amount < min then
66831: LD_VAR 0 9
66835: PUSH
66836: LD_VAR 0 3
66840: LESS
66841: IFFALSE 66859
// r := r * 2 else
66843: LD_ADDR_VAR 0 7
66847: PUSH
66848: LD_VAR 0 7
66852: PUSH
66853: LD_INT 2
66855: MUL
66856: ST_TO_ADDR
66857: GO 66885
// if amount > max then
66859: LD_VAR 0 9
66863: PUSH
66864: LD_VAR 0 4
66868: GREATER
66869: IFFALSE 66885
// r := r / 2 ;
66871: LD_ADDR_VAR 0 7
66875: PUSH
66876: LD_VAR 0 7
66880: PUSH
66881: LD_INT 2
66883: DIVREAL
66884: ST_TO_ADDR
// time := time / r ;
66885: LD_ADDR_VAR 0 8
66889: PUSH
66890: LD_VAR 0 8
66894: PUSH
66895: LD_VAR 0 7
66899: DIVREAL
66900: ST_TO_ADDR
// if time < 0 then
66901: LD_VAR 0 8
66905: PUSH
66906: LD_INT 0
66908: LESS
66909: IFFALSE 66926
// time := time * - 1 ;
66911: LD_ADDR_VAR 0 8
66915: PUSH
66916: LD_VAR 0 8
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: MUL
66925: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66926: LD_VAR 0 8
66930: PUSH
66931: LD_INT 35
66933: PPUSH
66934: LD_INT 875
66936: PPUSH
66937: CALL_OW 12
66941: PLUS
66942: PPUSH
66943: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66947: LD_INT 1
66949: PPUSH
66950: LD_INT 5
66952: PPUSH
66953: CALL_OW 12
66957: PPUSH
66958: LD_VAR 0 1
66962: PPUSH
66963: LD_INT 1
66965: PPUSH
66966: CALL_OW 55
// end ;
66970: GO 66783
// end ;
66972: LD_VAR 0 5
66976: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66977: LD_INT 0
66979: PPUSH
66980: PPUSH
66981: PPUSH
66982: PPUSH
66983: PPUSH
66984: PPUSH
66985: PPUSH
66986: PPUSH
// if not turrets or not factories then
66987: LD_VAR 0 1
66991: NOT
66992: PUSH
66993: LD_VAR 0 2
66997: NOT
66998: OR
66999: IFFALSE 67003
// exit ;
67001: GO 67310
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67003: LD_ADDR_VAR 0 10
67007: PUSH
67008: LD_INT 5
67010: PUSH
67011: LD_INT 6
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: LD_INT 5
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 24
67045: PUSH
67046: LD_INT 25
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 23
67055: PUSH
67056: LD_INT 27
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 42
67069: PUSH
67070: LD_INT 43
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 44
67079: PUSH
67080: LD_INT 46
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 45
67089: PUSH
67090: LD_INT 47
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// result := [ ] ;
67107: LD_ADDR_VAR 0 3
67111: PUSH
67112: EMPTY
67113: ST_TO_ADDR
// for i in turrets do
67114: LD_ADDR_VAR 0 4
67118: PUSH
67119: LD_VAR 0 1
67123: PUSH
67124: FOR_IN
67125: IFFALSE 67308
// begin nat := GetNation ( i ) ;
67127: LD_ADDR_VAR 0 7
67131: PUSH
67132: LD_VAR 0 4
67136: PPUSH
67137: CALL_OW 248
67141: ST_TO_ADDR
// weapon := 0 ;
67142: LD_ADDR_VAR 0 8
67146: PUSH
67147: LD_INT 0
67149: ST_TO_ADDR
// if not nat then
67150: LD_VAR 0 7
67154: NOT
67155: IFFALSE 67159
// continue ;
67157: GO 67124
// for j in list [ nat ] do
67159: LD_ADDR_VAR 0 5
67163: PUSH
67164: LD_VAR 0 10
67168: PUSH
67169: LD_VAR 0 7
67173: ARRAY
67174: PUSH
67175: FOR_IN
67176: IFFALSE 67217
// if GetBWeapon ( i ) = j [ 1 ] then
67178: LD_VAR 0 4
67182: PPUSH
67183: CALL_OW 269
67187: PUSH
67188: LD_VAR 0 5
67192: PUSH
67193: LD_INT 1
67195: ARRAY
67196: EQUAL
67197: IFFALSE 67215
// begin weapon := j [ 2 ] ;
67199: LD_ADDR_VAR 0 8
67203: PUSH
67204: LD_VAR 0 5
67208: PUSH
67209: LD_INT 2
67211: ARRAY
67212: ST_TO_ADDR
// break ;
67213: GO 67217
// end ;
67215: GO 67175
67217: POP
67218: POP
// if not weapon then
67219: LD_VAR 0 8
67223: NOT
67224: IFFALSE 67228
// continue ;
67226: GO 67124
// for k in factories do
67228: LD_ADDR_VAR 0 6
67232: PUSH
67233: LD_VAR 0 2
67237: PUSH
67238: FOR_IN
67239: IFFALSE 67304
// begin weapons := AvailableWeaponList ( k ) ;
67241: LD_ADDR_VAR 0 9
67245: PUSH
67246: LD_VAR 0 6
67250: PPUSH
67251: CALL_OW 478
67255: ST_TO_ADDR
// if not weapons then
67256: LD_VAR 0 9
67260: NOT
67261: IFFALSE 67265
// continue ;
67263: GO 67238
// if weapon in weapons then
67265: LD_VAR 0 8
67269: PUSH
67270: LD_VAR 0 9
67274: IN
67275: IFFALSE 67302
// begin result := [ i , weapon ] ;
67277: LD_ADDR_VAR 0 3
67281: PUSH
67282: LD_VAR 0 4
67286: PUSH
67287: LD_VAR 0 8
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// exit ;
67296: POP
67297: POP
67298: POP
67299: POP
67300: GO 67310
// end ; end ;
67302: GO 67238
67304: POP
67305: POP
// end ;
67306: GO 67124
67308: POP
67309: POP
// end ;
67310: LD_VAR 0 3
67314: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67315: LD_INT 0
67317: PPUSH
// if not side or side > 8 then
67318: LD_VAR 0 3
67322: NOT
67323: PUSH
67324: LD_VAR 0 3
67328: PUSH
67329: LD_INT 8
67331: GREATER
67332: OR
67333: IFFALSE 67337
// exit ;
67335: GO 67396
// if not range then
67337: LD_VAR 0 4
67341: NOT
67342: IFFALSE 67353
// range := - 12 ;
67344: LD_ADDR_VAR 0 4
67348: PUSH
67349: LD_INT 12
67351: NEG
67352: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67353: LD_VAR 0 1
67357: PPUSH
67358: LD_VAR 0 2
67362: PPUSH
67363: LD_VAR 0 3
67367: PPUSH
67368: LD_VAR 0 4
67372: PPUSH
67373: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 2
67386: PPUSH
67387: LD_VAR 0 3
67391: PPUSH
67392: CALL_OW 331
// end ;
67396: LD_VAR 0 5
67400: RET
// export function Video ( mode ) ; begin
67401: LD_INT 0
67403: PPUSH
// ingame_video = mode ;
67404: LD_ADDR_OWVAR 52
67408: PUSH
67409: LD_VAR 0 1
67413: ST_TO_ADDR
// interface_hidden = mode ;
67414: LD_ADDR_OWVAR 54
67418: PUSH
67419: LD_VAR 0 1
67423: ST_TO_ADDR
// end ;
67424: LD_VAR 0 2
67428: RET
// export function Join ( array , element ) ; begin
67429: LD_INT 0
67431: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67432: LD_ADDR_VAR 0 3
67436: PUSH
67437: LD_VAR 0 1
67441: PPUSH
67442: LD_VAR 0 1
67446: PUSH
67447: LD_INT 1
67449: PLUS
67450: PPUSH
67451: LD_VAR 0 2
67455: PPUSH
67456: CALL_OW 1
67460: ST_TO_ADDR
// end ;
67461: LD_VAR 0 3
67465: RET
// export function JoinUnion ( array , element ) ; begin
67466: LD_INT 0
67468: PPUSH
// result := array union element ;
67469: LD_ADDR_VAR 0 3
67473: PUSH
67474: LD_VAR 0 1
67478: PUSH
67479: LD_VAR 0 2
67483: UNION
67484: ST_TO_ADDR
// end ;
67485: LD_VAR 0 3
67489: RET
// export function GetBehemoths ( side ) ; begin
67490: LD_INT 0
67492: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67493: LD_ADDR_VAR 0 2
67497: PUSH
67498: LD_INT 22
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 31
67512: PUSH
67513: LD_INT 25
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PPUSH
67524: CALL_OW 69
67528: ST_TO_ADDR
// end ;
67529: LD_VAR 0 2
67533: RET
// export function Shuffle ( array ) ; var i , index ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
// result := [ ] ;
67539: LD_ADDR_VAR 0 2
67543: PUSH
67544: EMPTY
67545: ST_TO_ADDR
// if not array then
67546: LD_VAR 0 1
67550: NOT
67551: IFFALSE 67555
// exit ;
67553: GO 67654
// Randomize ;
67555: CALL_OW 10
// for i = array downto 1 do
67559: LD_ADDR_VAR 0 3
67563: PUSH
67564: DOUBLE
67565: LD_VAR 0 1
67569: INC
67570: ST_TO_ADDR
67571: LD_INT 1
67573: PUSH
67574: FOR_DOWNTO
67575: IFFALSE 67652
// begin index := rand ( 1 , array ) ;
67577: LD_ADDR_VAR 0 4
67581: PUSH
67582: LD_INT 1
67584: PPUSH
67585: LD_VAR 0 1
67589: PPUSH
67590: CALL_OW 12
67594: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67595: LD_ADDR_VAR 0 2
67599: PUSH
67600: LD_VAR 0 2
67604: PPUSH
67605: LD_VAR 0 2
67609: PUSH
67610: LD_INT 1
67612: PLUS
67613: PPUSH
67614: LD_VAR 0 1
67618: PUSH
67619: LD_VAR 0 4
67623: ARRAY
67624: PPUSH
67625: CALL_OW 2
67629: ST_TO_ADDR
// array := Delete ( array , index ) ;
67630: LD_ADDR_VAR 0 1
67634: PUSH
67635: LD_VAR 0 1
67639: PPUSH
67640: LD_VAR 0 4
67644: PPUSH
67645: CALL_OW 3
67649: ST_TO_ADDR
// end ;
67650: GO 67574
67652: POP
67653: POP
// end ;
67654: LD_VAR 0 2
67658: RET
// export function GetBaseMaterials ( base ) ; begin
67659: LD_INT 0
67661: PPUSH
// result := [ 0 , 0 , 0 ] ;
67662: LD_ADDR_VAR 0 2
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: ST_TO_ADDR
// if not base then
67681: LD_VAR 0 1
67685: NOT
67686: IFFALSE 67690
// exit ;
67688: GO 67739
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67690: LD_ADDR_VAR 0 2
67694: PUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: LD_INT 1
67702: PPUSH
67703: CALL_OW 275
67707: PUSH
67708: LD_VAR 0 1
67712: PPUSH
67713: LD_INT 2
67715: PPUSH
67716: CALL_OW 275
67720: PUSH
67721: LD_VAR 0 1
67725: PPUSH
67726: LD_INT 3
67728: PPUSH
67729: CALL_OW 275
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: ST_TO_ADDR
// end ;
67739: LD_VAR 0 2
67743: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67744: LD_INT 0
67746: PPUSH
67747: PPUSH
// result := array ;
67748: LD_ADDR_VAR 0 3
67752: PUSH
67753: LD_VAR 0 1
67757: ST_TO_ADDR
// if size >= result then
67758: LD_VAR 0 2
67762: PUSH
67763: LD_VAR 0 3
67767: GREATEREQUAL
67768: IFFALSE 67772
// exit ;
67770: GO 67822
// if size then
67772: LD_VAR 0 2
67776: IFFALSE 67822
// for i := array downto size do
67778: LD_ADDR_VAR 0 4
67782: PUSH
67783: DOUBLE
67784: LD_VAR 0 1
67788: INC
67789: ST_TO_ADDR
67790: LD_VAR 0 2
67794: PUSH
67795: FOR_DOWNTO
67796: IFFALSE 67820
// result := Delete ( result , result ) ;
67798: LD_ADDR_VAR 0 3
67802: PUSH
67803: LD_VAR 0 3
67807: PPUSH
67808: LD_VAR 0 3
67812: PPUSH
67813: CALL_OW 3
67817: ST_TO_ADDR
67818: GO 67795
67820: POP
67821: POP
// end ;
67822: LD_VAR 0 3
67826: RET
// export function ComExit ( unit ) ; var tmp ; begin
67827: LD_INT 0
67829: PPUSH
67830: PPUSH
// if not IsInUnit ( unit ) then
67831: LD_VAR 0 1
67835: PPUSH
67836: CALL_OW 310
67840: NOT
67841: IFFALSE 67845
// exit ;
67843: GO 67905
// tmp := IsInUnit ( unit ) ;
67845: LD_ADDR_VAR 0 3
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 310
67859: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67860: LD_VAR 0 3
67864: PPUSH
67865: CALL_OW 247
67869: PUSH
67870: LD_INT 2
67872: EQUAL
67873: IFFALSE 67886
// ComExitVehicle ( unit ) else
67875: LD_VAR 0 1
67879: PPUSH
67880: CALL_OW 121
67884: GO 67895
// ComExitBuilding ( unit ) ;
67886: LD_VAR 0 1
67890: PPUSH
67891: CALL_OW 122
// result := tmp ;
67895: LD_ADDR_VAR 0 2
67899: PUSH
67900: LD_VAR 0 3
67904: ST_TO_ADDR
// end ;
67905: LD_VAR 0 2
67909: RET
// export function ComExitAll ( units ) ; var i ; begin
67910: LD_INT 0
67912: PPUSH
67913: PPUSH
// if not units then
67914: LD_VAR 0 1
67918: NOT
67919: IFFALSE 67923
// exit ;
67921: GO 67949
// for i in units do
67923: LD_ADDR_VAR 0 3
67927: PUSH
67928: LD_VAR 0 1
67932: PUSH
67933: FOR_IN
67934: IFFALSE 67947
// ComExit ( i ) ;
67936: LD_VAR 0 3
67940: PPUSH
67941: CALL 67827 0 1
67945: GO 67933
67947: POP
67948: POP
// end ;
67949: LD_VAR 0 2
67953: RET
// export function ResetHc ; begin
67954: LD_INT 0
67956: PPUSH
// InitHc ;
67957: CALL_OW 19
// hc_importance := 0 ;
67961: LD_ADDR_OWVAR 32
67965: PUSH
67966: LD_INT 0
67968: ST_TO_ADDR
// end ;
67969: LD_VAR 0 1
67973: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67974: LD_INT 0
67976: PPUSH
67977: PPUSH
67978: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67979: LD_ADDR_VAR 0 6
67983: PUSH
67984: LD_VAR 0 1
67988: PUSH
67989: LD_VAR 0 3
67993: PLUS
67994: PUSH
67995: LD_INT 2
67997: DIV
67998: ST_TO_ADDR
// if _x < 0 then
67999: LD_VAR 0 6
68003: PUSH
68004: LD_INT 0
68006: LESS
68007: IFFALSE 68024
// _x := _x * - 1 ;
68009: LD_ADDR_VAR 0 6
68013: PUSH
68014: LD_VAR 0 6
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: MUL
68023: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68024: LD_ADDR_VAR 0 7
68028: PUSH
68029: LD_VAR 0 2
68033: PUSH
68034: LD_VAR 0 4
68038: PLUS
68039: PUSH
68040: LD_INT 2
68042: DIV
68043: ST_TO_ADDR
// if _y < 0 then
68044: LD_VAR 0 7
68048: PUSH
68049: LD_INT 0
68051: LESS
68052: IFFALSE 68069
// _y := _y * - 1 ;
68054: LD_ADDR_VAR 0 7
68058: PUSH
68059: LD_VAR 0 7
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: MUL
68068: ST_TO_ADDR
// result := [ _x , _y ] ;
68069: LD_ADDR_VAR 0 5
68073: PUSH
68074: LD_VAR 0 6
68078: PUSH
68079: LD_VAR 0 7
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// end ;
68088: LD_VAR 0 5
68092: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68093: LD_INT 0
68095: PPUSH
68096: PPUSH
68097: PPUSH
68098: PPUSH
// task := GetTaskList ( unit ) ;
68099: LD_ADDR_VAR 0 7
68103: PUSH
68104: LD_VAR 0 1
68108: PPUSH
68109: CALL_OW 437
68113: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68114: LD_VAR 0 7
68118: NOT
68119: PUSH
68120: LD_VAR 0 1
68124: PPUSH
68125: LD_VAR 0 2
68129: PPUSH
68130: CALL_OW 308
68134: NOT
68135: AND
68136: IFFALSE 68140
// exit ;
68138: GO 68258
// if IsInArea ( unit , area ) then
68140: LD_VAR 0 1
68144: PPUSH
68145: LD_VAR 0 2
68149: PPUSH
68150: CALL_OW 308
68154: IFFALSE 68172
// begin ComMoveToArea ( unit , goAway ) ;
68156: LD_VAR 0 1
68160: PPUSH
68161: LD_VAR 0 3
68165: PPUSH
68166: CALL_OW 113
// exit ;
68170: GO 68258
// end ; if task [ 1 ] [ 1 ] <> M then
68172: LD_VAR 0 7
68176: PUSH
68177: LD_INT 1
68179: ARRAY
68180: PUSH
68181: LD_INT 1
68183: ARRAY
68184: PUSH
68185: LD_STRING M
68187: NONEQUAL
68188: IFFALSE 68192
// exit ;
68190: GO 68258
// x := task [ 1 ] [ 2 ] ;
68192: LD_ADDR_VAR 0 5
68196: PUSH
68197: LD_VAR 0 7
68201: PUSH
68202: LD_INT 1
68204: ARRAY
68205: PUSH
68206: LD_INT 2
68208: ARRAY
68209: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68210: LD_ADDR_VAR 0 6
68214: PUSH
68215: LD_VAR 0 7
68219: PUSH
68220: LD_INT 1
68222: ARRAY
68223: PUSH
68224: LD_INT 3
68226: ARRAY
68227: ST_TO_ADDR
// if InArea ( x , y , area ) then
68228: LD_VAR 0 5
68232: PPUSH
68233: LD_VAR 0 6
68237: PPUSH
68238: LD_VAR 0 2
68242: PPUSH
68243: CALL_OW 309
68247: IFFALSE 68258
// ComStop ( unit ) ;
68249: LD_VAR 0 1
68253: PPUSH
68254: CALL_OW 141
// end ;
68258: LD_VAR 0 4
68262: RET
// export function Abs ( value ) ; begin
68263: LD_INT 0
68265: PPUSH
// result := value ;
68266: LD_ADDR_VAR 0 2
68270: PUSH
68271: LD_VAR 0 1
68275: ST_TO_ADDR
// if value < 0 then
68276: LD_VAR 0 1
68280: PUSH
68281: LD_INT 0
68283: LESS
68284: IFFALSE 68301
// result := value * - 1 ;
68286: LD_ADDR_VAR 0 2
68290: PUSH
68291: LD_VAR 0 1
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: MUL
68300: ST_TO_ADDR
// end ;
68301: LD_VAR 0 2
68305: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68306: LD_INT 0
68308: PPUSH
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
68314: PPUSH
68315: PPUSH
// if not unit or not building then
68316: LD_VAR 0 1
68320: NOT
68321: PUSH
68322: LD_VAR 0 2
68326: NOT
68327: OR
68328: IFFALSE 68332
// exit ;
68330: GO 68558
// x := GetX ( building ) ;
68332: LD_ADDR_VAR 0 4
68336: PUSH
68337: LD_VAR 0 2
68341: PPUSH
68342: CALL_OW 250
68346: ST_TO_ADDR
// y := GetY ( building ) ;
68347: LD_ADDR_VAR 0 6
68351: PUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: CALL_OW 251
68361: ST_TO_ADDR
// d := GetDir ( building ) ;
68362: LD_ADDR_VAR 0 8
68366: PUSH
68367: LD_VAR 0 2
68371: PPUSH
68372: CALL_OW 254
68376: ST_TO_ADDR
// r := 4 ;
68377: LD_ADDR_VAR 0 9
68381: PUSH
68382: LD_INT 4
68384: ST_TO_ADDR
// for i := 1 to 5 do
68385: LD_ADDR_VAR 0 10
68389: PUSH
68390: DOUBLE
68391: LD_INT 1
68393: DEC
68394: ST_TO_ADDR
68395: LD_INT 5
68397: PUSH
68398: FOR_TO
68399: IFFALSE 68556
// begin _x := ShiftX ( x , d , r + i ) ;
68401: LD_ADDR_VAR 0 5
68405: PUSH
68406: LD_VAR 0 4
68410: PPUSH
68411: LD_VAR 0 8
68415: PPUSH
68416: LD_VAR 0 9
68420: PUSH
68421: LD_VAR 0 10
68425: PLUS
68426: PPUSH
68427: CALL_OW 272
68431: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68432: LD_ADDR_VAR 0 7
68436: PUSH
68437: LD_VAR 0 6
68441: PPUSH
68442: LD_VAR 0 8
68446: PPUSH
68447: LD_VAR 0 9
68451: PUSH
68452: LD_VAR 0 10
68456: PLUS
68457: PPUSH
68458: CALL_OW 273
68462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68463: LD_VAR 0 5
68467: PPUSH
68468: LD_VAR 0 7
68472: PPUSH
68473: CALL_OW 488
68477: PUSH
68478: LD_VAR 0 5
68482: PPUSH
68483: LD_VAR 0 7
68487: PPUSH
68488: CALL_OW 428
68492: PPUSH
68493: CALL_OW 247
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: LD_INT 2
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: IN
68508: NOT
68509: AND
68510: IFFALSE 68554
// begin ComMoveXY ( unit , _x , _y ) ;
68512: LD_VAR 0 1
68516: PPUSH
68517: LD_VAR 0 5
68521: PPUSH
68522: LD_VAR 0 7
68526: PPUSH
68527: CALL_OW 111
// result := [ _x , _y ] ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: LD_VAR 0 5
68540: PUSH
68541: LD_VAR 0 7
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: ST_TO_ADDR
// exit ;
68550: POP
68551: POP
68552: GO 68558
// end ; end ;
68554: GO 68398
68556: POP
68557: POP
// end ;
68558: LD_VAR 0 3
68562: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68563: LD_INT 0
68565: PPUSH
68566: PPUSH
68567: PPUSH
// result := 0 ;
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_INT 0
68575: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68576: LD_VAR 0 1
68580: PUSH
68581: LD_INT 0
68583: LESS
68584: PUSH
68585: LD_VAR 0 1
68589: PUSH
68590: LD_INT 8
68592: GREATER
68593: OR
68594: PUSH
68595: LD_VAR 0 2
68599: PUSH
68600: LD_INT 0
68602: LESS
68603: OR
68604: PUSH
68605: LD_VAR 0 2
68609: PUSH
68610: LD_INT 8
68612: GREATER
68613: OR
68614: IFFALSE 68618
// exit ;
68616: GO 68693
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68618: LD_ADDR_VAR 0 4
68622: PUSH
68623: LD_INT 22
68625: PUSH
68626: LD_VAR 0 2
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PPUSH
68635: CALL_OW 69
68639: PUSH
68640: FOR_IN
68641: IFFALSE 68691
// begin un := UnitShoot ( i ) ;
68643: LD_ADDR_VAR 0 5
68647: PUSH
68648: LD_VAR 0 4
68652: PPUSH
68653: CALL_OW 504
68657: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68658: LD_VAR 0 5
68662: PPUSH
68663: CALL_OW 255
68667: PUSH
68668: LD_VAR 0 1
68672: EQUAL
68673: IFFALSE 68689
// begin result := un ;
68675: LD_ADDR_VAR 0 3
68679: PUSH
68680: LD_VAR 0 5
68684: ST_TO_ADDR
// exit ;
68685: POP
68686: POP
68687: GO 68693
// end ; end ;
68689: GO 68640
68691: POP
68692: POP
// end ;
68693: LD_VAR 0 3
68697: RET
// export function GetCargoBay ( units ) ; begin
68698: LD_INT 0
68700: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68701: LD_ADDR_VAR 0 2
68705: PUSH
68706: LD_VAR 0 1
68710: PPUSH
68711: LD_INT 2
68713: PUSH
68714: LD_INT 34
68716: PUSH
68717: LD_INT 12
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 34
68726: PUSH
68727: LD_INT 51
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 34
68736: PUSH
68737: LD_INT 32
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 34
68746: PUSH
68747: LD_INT 89
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: PPUSH
68761: CALL_OW 72
68765: ST_TO_ADDR
// end ;
68766: LD_VAR 0 2
68770: RET
// export function Negate ( value ) ; begin
68771: LD_INT 0
68773: PPUSH
// result := not value ;
68774: LD_ADDR_VAR 0 2
68778: PUSH
68779: LD_VAR 0 1
68783: NOT
68784: ST_TO_ADDR
// end ;
68785: LD_VAR 0 2
68789: RET
// export function Inc ( value ) ; begin
68790: LD_INT 0
68792: PPUSH
// result := value + 1 ;
68793: LD_ADDR_VAR 0 2
68797: PUSH
68798: LD_VAR 0 1
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ST_TO_ADDR
// end ;
68807: LD_VAR 0 2
68811: RET
// export function Dec ( value ) ; begin
68812: LD_INT 0
68814: PPUSH
// result := value - 1 ;
68815: LD_ADDR_VAR 0 2
68819: PUSH
68820: LD_VAR 0 1
68824: PUSH
68825: LD_INT 1
68827: MINUS
68828: ST_TO_ADDR
// end ;
68829: LD_VAR 0 2
68833: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68834: LD_INT 0
68836: PPUSH
68837: PPUSH
68838: PPUSH
68839: PPUSH
68840: PPUSH
68841: PPUSH
68842: PPUSH
68843: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68844: LD_VAR 0 1
68848: PPUSH
68849: LD_VAR 0 2
68853: PPUSH
68854: CALL_OW 488
68858: NOT
68859: PUSH
68860: LD_VAR 0 3
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: CALL_OW 488
68874: NOT
68875: OR
68876: IFFALSE 68889
// begin result := - 1 ;
68878: LD_ADDR_VAR 0 5
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: ST_TO_ADDR
// exit ;
68887: GO 69124
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68889: LD_ADDR_VAR 0 12
68893: PUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: LD_VAR 0 4
68913: PPUSH
68914: CALL 67974 0 4
68918: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68919: LD_ADDR_VAR 0 11
68923: PUSH
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 2
68933: PPUSH
68934: LD_VAR 0 12
68938: PUSH
68939: LD_INT 1
68941: ARRAY
68942: PPUSH
68943: LD_VAR 0 12
68947: PUSH
68948: LD_INT 2
68950: ARRAY
68951: PPUSH
68952: CALL_OW 298
68956: ST_TO_ADDR
// distance := 9999 ;
68957: LD_ADDR_VAR 0 10
68961: PUSH
68962: LD_INT 9999
68964: ST_TO_ADDR
// for i := 0 to 5 do
68965: LD_ADDR_VAR 0 6
68969: PUSH
68970: DOUBLE
68971: LD_INT 0
68973: DEC
68974: ST_TO_ADDR
68975: LD_INT 5
68977: PUSH
68978: FOR_TO
68979: IFFALSE 69122
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: LD_VAR 0 1
68990: PPUSH
68991: LD_VAR 0 6
68995: PPUSH
68996: LD_VAR 0 11
69000: PPUSH
69001: CALL_OW 272
69005: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69006: LD_ADDR_VAR 0 8
69010: PUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: LD_VAR 0 6
69020: PPUSH
69021: LD_VAR 0 11
69025: PPUSH
69026: CALL_OW 273
69030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69031: LD_VAR 0 7
69035: PPUSH
69036: LD_VAR 0 8
69040: PPUSH
69041: CALL_OW 488
69045: NOT
69046: IFFALSE 69050
// continue ;
69048: GO 68978
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69050: LD_ADDR_VAR 0 9
69054: PUSH
69055: LD_VAR 0 12
69059: PUSH
69060: LD_INT 1
69062: ARRAY
69063: PPUSH
69064: LD_VAR 0 12
69068: PUSH
69069: LD_INT 2
69071: ARRAY
69072: PPUSH
69073: LD_VAR 0 7
69077: PPUSH
69078: LD_VAR 0 8
69082: PPUSH
69083: CALL_OW 298
69087: ST_TO_ADDR
// if tmp < distance then
69088: LD_VAR 0 9
69092: PUSH
69093: LD_VAR 0 10
69097: LESS
69098: IFFALSE 69120
// begin result := i ;
69100: LD_ADDR_VAR 0 5
69104: PUSH
69105: LD_VAR 0 6
69109: ST_TO_ADDR
// distance := tmp ;
69110: LD_ADDR_VAR 0 10
69114: PUSH
69115: LD_VAR 0 9
69119: ST_TO_ADDR
// end ; end ;
69120: GO 68978
69122: POP
69123: POP
// end ;
69124: LD_VAR 0 5
69128: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69129: LD_INT 0
69131: PPUSH
69132: PPUSH
// if not driver or not IsInUnit ( driver ) then
69133: LD_VAR 0 1
69137: NOT
69138: PUSH
69139: LD_VAR 0 1
69143: PPUSH
69144: CALL_OW 310
69148: NOT
69149: OR
69150: IFFALSE 69154
// exit ;
69152: GO 69244
// vehicle := IsInUnit ( driver ) ;
69154: LD_ADDR_VAR 0 3
69158: PUSH
69159: LD_VAR 0 1
69163: PPUSH
69164: CALL_OW 310
69168: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69169: LD_VAR 0 1
69173: PPUSH
69174: LD_STRING \
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: LD_INT 0
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: PUSH
69204: LD_STRING E
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_VAR 0 3
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PPUSH
69240: CALL_OW 446
// end ;
69244: LD_VAR 0 2
69248: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
// if not driver or not IsInUnit ( driver ) then
69253: LD_VAR 0 1
69257: NOT
69258: PUSH
69259: LD_VAR 0 1
69263: PPUSH
69264: CALL_OW 310
69268: NOT
69269: OR
69270: IFFALSE 69274
// exit ;
69272: GO 69364
// vehicle := IsInUnit ( driver ) ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_VAR 0 1
69283: PPUSH
69284: CALL_OW 310
69288: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69289: LD_VAR 0 1
69293: PPUSH
69294: LD_STRING \
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: PUSH
69324: LD_STRING E
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_VAR 0 3
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PPUSH
69360: CALL_OW 447
// end ;
69364: LD_VAR 0 2
69368: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
// tmp := [ ] ;
69374: LD_ADDR_VAR 0 5
69378: PUSH
69379: EMPTY
69380: ST_TO_ADDR
// for i in units do
69381: LD_ADDR_VAR 0 4
69385: PUSH
69386: LD_VAR 0 1
69390: PUSH
69391: FOR_IN
69392: IFFALSE 69430
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69394: LD_ADDR_VAR 0 5
69398: PUSH
69399: LD_VAR 0 5
69403: PPUSH
69404: LD_VAR 0 5
69408: PUSH
69409: LD_INT 1
69411: PLUS
69412: PPUSH
69413: LD_VAR 0 4
69417: PPUSH
69418: CALL_OW 256
69422: PPUSH
69423: CALL_OW 2
69427: ST_TO_ADDR
69428: GO 69391
69430: POP
69431: POP
// if not tmp then
69432: LD_VAR 0 5
69436: NOT
69437: IFFALSE 69441
// exit ;
69439: GO 69489
// if asc then
69441: LD_VAR 0 2
69445: IFFALSE 69469
// result := SortListByListAsc ( units , tmp ) else
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 1
69456: PPUSH
69457: LD_VAR 0 5
69461: PPUSH
69462: CALL_OW 76
69466: ST_TO_ADDR
69467: GO 69489
// result := SortListByListDesc ( units , tmp ) ;
69469: LD_ADDR_VAR 0 3
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 5
69483: PPUSH
69484: CALL_OW 77
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 3
69493: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69494: LD_INT 0
69496: PPUSH
69497: PPUSH
// task := GetTaskList ( mech ) ;
69498: LD_ADDR_VAR 0 4
69502: PUSH
69503: LD_VAR 0 1
69507: PPUSH
69508: CALL_OW 437
69512: ST_TO_ADDR
// if not task then
69513: LD_VAR 0 4
69517: NOT
69518: IFFALSE 69522
// exit ;
69520: GO 69564
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69522: LD_ADDR_VAR 0 3
69526: PUSH
69527: LD_VAR 0 4
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PUSH
69540: LD_STRING r
69542: EQUAL
69543: PUSH
69544: LD_VAR 0 4
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PUSH
69553: LD_INT 4
69555: ARRAY
69556: PUSH
69557: LD_VAR 0 2
69561: EQUAL
69562: AND
69563: ST_TO_ADDR
// end ;
69564: LD_VAR 0 3
69568: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69569: LD_INT 0
69571: PPUSH
// SetDir ( unit , d ) ;
69572: LD_VAR 0 1
69576: PPUSH
69577: LD_VAR 0 4
69581: PPUSH
69582: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69586: LD_VAR 0 1
69590: PPUSH
69591: LD_VAR 0 2
69595: PPUSH
69596: LD_VAR 0 3
69600: PPUSH
69601: LD_VAR 0 5
69605: PPUSH
69606: CALL_OW 48
// end ;
69610: LD_VAR 0 6
69614: RET
// export function ToNaturalNumber ( number ) ; begin
69615: LD_INT 0
69617: PPUSH
// result := number div 1 ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 1
69627: PUSH
69628: LD_INT 1
69630: DIV
69631: ST_TO_ADDR
// if number < 0 then
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 0
69639: LESS
69640: IFFALSE 69650
// result := 0 ;
69642: LD_ADDR_VAR 0 2
69646: PUSH
69647: LD_INT 0
69649: ST_TO_ADDR
// end ;
69650: LD_VAR 0 2
69654: RET
// export function SortByClass ( units , class ) ; var un ; begin
69655: LD_INT 0
69657: PPUSH
69658: PPUSH
// if not units or not class then
69659: LD_VAR 0 1
69663: NOT
69664: PUSH
69665: LD_VAR 0 2
69669: NOT
69670: OR
69671: IFFALSE 69675
// exit ;
69673: GO 69770
// result := [ ] ;
69675: LD_ADDR_VAR 0 3
69679: PUSH
69680: EMPTY
69681: ST_TO_ADDR
// for un in units do
69682: LD_ADDR_VAR 0 4
69686: PUSH
69687: LD_VAR 0 1
69691: PUSH
69692: FOR_IN
69693: IFFALSE 69768
// if GetClass ( un ) = class then
69695: LD_VAR 0 4
69699: PPUSH
69700: CALL_OW 257
69704: PUSH
69705: LD_VAR 0 2
69709: EQUAL
69710: IFFALSE 69737
// result := Insert ( result , 1 , un ) else
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 3
69721: PPUSH
69722: LD_INT 1
69724: PPUSH
69725: LD_VAR 0 4
69729: PPUSH
69730: CALL_OW 2
69734: ST_TO_ADDR
69735: GO 69766
// result := Replace ( result , result + 1 , un ) ;
69737: LD_ADDR_VAR 0 3
69741: PUSH
69742: LD_VAR 0 3
69746: PPUSH
69747: LD_VAR 0 3
69751: PUSH
69752: LD_INT 1
69754: PLUS
69755: PPUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL_OW 1
69765: ST_TO_ADDR
69766: GO 69692
69768: POP
69769: POP
// end ;
69770: LD_VAR 0 3
69774: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69775: LD_INT 0
69777: PPUSH
69778: PPUSH
69779: PPUSH
69780: PPUSH
69781: PPUSH
69782: PPUSH
69783: PPUSH
// result := [ ] ;
69784: LD_ADDR_VAR 0 4
69788: PUSH
69789: EMPTY
69790: ST_TO_ADDR
// if x - r < 0 then
69791: LD_VAR 0 1
69795: PUSH
69796: LD_VAR 0 3
69800: MINUS
69801: PUSH
69802: LD_INT 0
69804: LESS
69805: IFFALSE 69817
// min_x := 0 else
69807: LD_ADDR_VAR 0 8
69811: PUSH
69812: LD_INT 0
69814: ST_TO_ADDR
69815: GO 69833
// min_x := x - r ;
69817: LD_ADDR_VAR 0 8
69821: PUSH
69822: LD_VAR 0 1
69826: PUSH
69827: LD_VAR 0 3
69831: MINUS
69832: ST_TO_ADDR
// if y - r < 0 then
69833: LD_VAR 0 2
69837: PUSH
69838: LD_VAR 0 3
69842: MINUS
69843: PUSH
69844: LD_INT 0
69846: LESS
69847: IFFALSE 69859
// min_y := 0 else
69849: LD_ADDR_VAR 0 7
69853: PUSH
69854: LD_INT 0
69856: ST_TO_ADDR
69857: GO 69875
// min_y := y - r ;
69859: LD_ADDR_VAR 0 7
69863: PUSH
69864: LD_VAR 0 2
69868: PUSH
69869: LD_VAR 0 3
69873: MINUS
69874: ST_TO_ADDR
// max_x := x + r ;
69875: LD_ADDR_VAR 0 9
69879: PUSH
69880: LD_VAR 0 1
69884: PUSH
69885: LD_VAR 0 3
69889: PLUS
69890: ST_TO_ADDR
// max_y := y + r ;
69891: LD_ADDR_VAR 0 10
69895: PUSH
69896: LD_VAR 0 2
69900: PUSH
69901: LD_VAR 0 3
69905: PLUS
69906: ST_TO_ADDR
// for _x = min_x to max_x do
69907: LD_ADDR_VAR 0 5
69911: PUSH
69912: DOUBLE
69913: LD_VAR 0 8
69917: DEC
69918: ST_TO_ADDR
69919: LD_VAR 0 9
69923: PUSH
69924: FOR_TO
69925: IFFALSE 70026
// for _y = min_y to max_y do
69927: LD_ADDR_VAR 0 6
69931: PUSH
69932: DOUBLE
69933: LD_VAR 0 7
69937: DEC
69938: ST_TO_ADDR
69939: LD_VAR 0 10
69943: PUSH
69944: FOR_TO
69945: IFFALSE 70022
// begin if not ValidHex ( _x , _y ) then
69947: LD_VAR 0 5
69951: PPUSH
69952: LD_VAR 0 6
69956: PPUSH
69957: CALL_OW 488
69961: NOT
69962: IFFALSE 69966
// continue ;
69964: GO 69944
// if GetResourceTypeXY ( _x , _y ) then
69966: LD_VAR 0 5
69970: PPUSH
69971: LD_VAR 0 6
69975: PPUSH
69976: CALL_OW 283
69980: IFFALSE 70020
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69982: LD_ADDR_VAR 0 4
69986: PUSH
69987: LD_VAR 0 4
69991: PPUSH
69992: LD_VAR 0 4
69996: PUSH
69997: LD_INT 1
69999: PLUS
70000: PPUSH
70001: LD_VAR 0 5
70005: PUSH
70006: LD_VAR 0 6
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PPUSH
70015: CALL_OW 1
70019: ST_TO_ADDR
// end ;
70020: GO 69944
70022: POP
70023: POP
70024: GO 69924
70026: POP
70027: POP
// end ;
70028: LD_VAR 0 4
70032: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70033: LD_INT 0
70035: PPUSH
70036: PPUSH
70037: PPUSH
70038: PPUSH
70039: PPUSH
70040: PPUSH
70041: PPUSH
70042: PPUSH
// if not units then
70043: LD_VAR 0 1
70047: NOT
70048: IFFALSE 70052
// exit ;
70050: GO 70576
// result := UnitFilter ( units , [ f_ok ] ) ;
70052: LD_ADDR_VAR 0 3
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_INT 50
70064: PUSH
70065: EMPTY
70066: LIST
70067: PPUSH
70068: CALL_OW 72
70072: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70073: LD_ADDR_VAR 0 8
70077: PUSH
70078: LD_VAR 0 1
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PPUSH
70087: CALL_OW 255
70091: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70092: LD_ADDR_VAR 0 10
70096: PUSH
70097: LD_INT 29
70099: PUSH
70100: LD_INT 91
70102: PUSH
70103: LD_INT 49
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: LIST
70110: ST_TO_ADDR
// if not result then
70111: LD_VAR 0 3
70115: NOT
70116: IFFALSE 70120
// exit ;
70118: GO 70576
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70120: LD_ADDR_VAR 0 5
70124: PUSH
70125: LD_INT 81
70127: PUSH
70128: LD_VAR 0 8
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PPUSH
70137: CALL_OW 69
70141: ST_TO_ADDR
// for i in result do
70142: LD_ADDR_VAR 0 4
70146: PUSH
70147: LD_VAR 0 3
70151: PUSH
70152: FOR_IN
70153: IFFALSE 70574
// begin tag := GetTag ( i ) + 1 ;
70155: LD_ADDR_VAR 0 9
70159: PUSH
70160: LD_VAR 0 4
70164: PPUSH
70165: CALL_OW 110
70169: PUSH
70170: LD_INT 1
70172: PLUS
70173: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70174: LD_ADDR_VAR 0 7
70178: PUSH
70179: LD_VAR 0 4
70183: PPUSH
70184: CALL_OW 250
70188: PPUSH
70189: LD_VAR 0 4
70193: PPUSH
70194: CALL_OW 251
70198: PPUSH
70199: LD_INT 6
70201: PPUSH
70202: CALL 69775 0 3
70206: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70207: LD_VAR 0 4
70211: PPUSH
70212: CALL_OW 247
70216: PUSH
70217: LD_INT 2
70219: EQUAL
70220: PUSH
70221: LD_VAR 0 7
70225: AND
70226: PUSH
70227: LD_VAR 0 4
70231: PPUSH
70232: CALL_OW 264
70236: PUSH
70237: LD_VAR 0 10
70241: IN
70242: NOT
70243: AND
70244: IFFALSE 70283
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70246: LD_VAR 0 4
70250: PPUSH
70251: LD_VAR 0 7
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PUSH
70260: LD_INT 1
70262: ARRAY
70263: PPUSH
70264: LD_VAR 0 7
70268: PUSH
70269: LD_INT 1
70271: ARRAY
70272: PUSH
70273: LD_INT 2
70275: ARRAY
70276: PPUSH
70277: CALL_OW 116
70281: GO 70572
// if path > tag then
70283: LD_VAR 0 2
70287: PUSH
70288: LD_VAR 0 9
70292: GREATER
70293: IFFALSE 70501
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70295: LD_ADDR_VAR 0 6
70299: PUSH
70300: LD_VAR 0 5
70304: PPUSH
70305: LD_INT 91
70307: PUSH
70308: LD_VAR 0 4
70312: PUSH
70313: LD_INT 8
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 72
70325: ST_TO_ADDR
// if nearEnemy then
70326: LD_VAR 0 6
70330: IFFALSE 70399
// begin if GetWeapon ( i ) = ru_time_lapser then
70332: LD_VAR 0 4
70336: PPUSH
70337: CALL_OW 264
70341: PUSH
70342: LD_INT 49
70344: EQUAL
70345: IFFALSE 70373
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70347: LD_VAR 0 4
70351: PPUSH
70352: LD_VAR 0 6
70356: PPUSH
70357: LD_VAR 0 4
70361: PPUSH
70362: CALL_OW 74
70366: PPUSH
70367: CALL_OW 112
70371: GO 70397
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70373: LD_VAR 0 4
70377: PPUSH
70378: LD_VAR 0 6
70382: PPUSH
70383: LD_VAR 0 4
70387: PPUSH
70388: CALL_OW 74
70392: PPUSH
70393: CALL_OW 115
// end else
70397: GO 70499
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70399: LD_VAR 0 4
70403: PPUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_VAR 0 9
70413: ARRAY
70414: PUSH
70415: LD_INT 1
70417: ARRAY
70418: PPUSH
70419: LD_VAR 0 2
70423: PUSH
70424: LD_VAR 0 9
70428: ARRAY
70429: PUSH
70430: LD_INT 2
70432: ARRAY
70433: PPUSH
70434: CALL_OW 297
70438: PUSH
70439: LD_INT 6
70441: GREATER
70442: IFFALSE 70485
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70444: LD_VAR 0 4
70448: PPUSH
70449: LD_VAR 0 2
70453: PUSH
70454: LD_VAR 0 9
70458: ARRAY
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PPUSH
70464: LD_VAR 0 2
70468: PUSH
70469: LD_VAR 0 9
70473: ARRAY
70474: PUSH
70475: LD_INT 2
70477: ARRAY
70478: PPUSH
70479: CALL_OW 114
70483: GO 70499
// SetTag ( i , tag ) ;
70485: LD_VAR 0 4
70489: PPUSH
70490: LD_VAR 0 9
70494: PPUSH
70495: CALL_OW 109
// end else
70499: GO 70572
// if enemy then
70501: LD_VAR 0 5
70505: IFFALSE 70572
// begin if GetWeapon ( i ) = ru_time_lapser then
70507: LD_VAR 0 4
70511: PPUSH
70512: CALL_OW 264
70516: PUSH
70517: LD_INT 49
70519: EQUAL
70520: IFFALSE 70548
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70522: LD_VAR 0 4
70526: PPUSH
70527: LD_VAR 0 5
70531: PPUSH
70532: LD_VAR 0 4
70536: PPUSH
70537: CALL_OW 74
70541: PPUSH
70542: CALL_OW 112
70546: GO 70572
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70548: LD_VAR 0 4
70552: PPUSH
70553: LD_VAR 0 5
70557: PPUSH
70558: LD_VAR 0 4
70562: PPUSH
70563: CALL_OW 74
70567: PPUSH
70568: CALL_OW 115
// end ; end ;
70572: GO 70152
70574: POP
70575: POP
// end ;
70576: LD_VAR 0 3
70580: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70581: LD_INT 0
70583: PPUSH
70584: PPUSH
70585: PPUSH
// if not unit or IsInUnit ( unit ) then
70586: LD_VAR 0 1
70590: NOT
70591: PUSH
70592: LD_VAR 0 1
70596: PPUSH
70597: CALL_OW 310
70601: OR
70602: IFFALSE 70606
// exit ;
70604: GO 70697
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70606: LD_ADDR_VAR 0 4
70610: PUSH
70611: LD_VAR 0 1
70615: PPUSH
70616: CALL_OW 250
70620: PPUSH
70621: LD_VAR 0 2
70625: PPUSH
70626: LD_INT 1
70628: PPUSH
70629: CALL_OW 272
70633: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70634: LD_ADDR_VAR 0 5
70638: PUSH
70639: LD_VAR 0 1
70643: PPUSH
70644: CALL_OW 251
70648: PPUSH
70649: LD_VAR 0 2
70653: PPUSH
70654: LD_INT 1
70656: PPUSH
70657: CALL_OW 273
70661: ST_TO_ADDR
// if ValidHex ( x , y ) then
70662: LD_VAR 0 4
70666: PPUSH
70667: LD_VAR 0 5
70671: PPUSH
70672: CALL_OW 488
70676: IFFALSE 70697
// ComTurnXY ( unit , x , y ) ;
70678: LD_VAR 0 1
70682: PPUSH
70683: LD_VAR 0 4
70687: PPUSH
70688: LD_VAR 0 5
70692: PPUSH
70693: CALL_OW 118
// end ;
70697: LD_VAR 0 3
70701: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70702: LD_INT 0
70704: PPUSH
70705: PPUSH
// result := false ;
70706: LD_ADDR_VAR 0 3
70710: PUSH
70711: LD_INT 0
70713: ST_TO_ADDR
// if not units then
70714: LD_VAR 0 2
70718: NOT
70719: IFFALSE 70723
// exit ;
70721: GO 70768
// for i in units do
70723: LD_ADDR_VAR 0 4
70727: PUSH
70728: LD_VAR 0 2
70732: PUSH
70733: FOR_IN
70734: IFFALSE 70766
// if See ( side , i ) then
70736: LD_VAR 0 1
70740: PPUSH
70741: LD_VAR 0 4
70745: PPUSH
70746: CALL_OW 292
70750: IFFALSE 70764
// begin result := true ;
70752: LD_ADDR_VAR 0 3
70756: PUSH
70757: LD_INT 1
70759: ST_TO_ADDR
// exit ;
70760: POP
70761: POP
70762: GO 70768
// end ;
70764: GO 70733
70766: POP
70767: POP
// end ;
70768: LD_VAR 0 3
70772: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70773: LD_INT 0
70775: PPUSH
70776: PPUSH
70777: PPUSH
70778: PPUSH
// if not unit or not points then
70779: LD_VAR 0 1
70783: NOT
70784: PUSH
70785: LD_VAR 0 2
70789: NOT
70790: OR
70791: IFFALSE 70795
// exit ;
70793: GO 70885
// dist := 99999 ;
70795: LD_ADDR_VAR 0 5
70799: PUSH
70800: LD_INT 99999
70802: ST_TO_ADDR
// for i in points do
70803: LD_ADDR_VAR 0 4
70807: PUSH
70808: LD_VAR 0 2
70812: PUSH
70813: FOR_IN
70814: IFFALSE 70883
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70816: LD_ADDR_VAR 0 6
70820: PUSH
70821: LD_VAR 0 1
70825: PPUSH
70826: LD_VAR 0 4
70830: PUSH
70831: LD_INT 1
70833: ARRAY
70834: PPUSH
70835: LD_VAR 0 4
70839: PUSH
70840: LD_INT 2
70842: ARRAY
70843: PPUSH
70844: CALL_OW 297
70848: ST_TO_ADDR
// if tmpDist < dist then
70849: LD_VAR 0 6
70853: PUSH
70854: LD_VAR 0 5
70858: LESS
70859: IFFALSE 70881
// begin result := i ;
70861: LD_ADDR_VAR 0 3
70865: PUSH
70866: LD_VAR 0 4
70870: ST_TO_ADDR
// dist := tmpDist ;
70871: LD_ADDR_VAR 0 5
70875: PUSH
70876: LD_VAR 0 6
70880: ST_TO_ADDR
// end ; end ;
70881: GO 70813
70883: POP
70884: POP
// end ;
70885: LD_VAR 0 3
70889: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70890: LD_INT 0
70892: PPUSH
// uc_side := side ;
70893: LD_ADDR_OWVAR 20
70897: PUSH
70898: LD_VAR 0 1
70902: ST_TO_ADDR
// uc_nation := 3 ;
70903: LD_ADDR_OWVAR 21
70907: PUSH
70908: LD_INT 3
70910: ST_TO_ADDR
// vc_chassis := 25 ;
70911: LD_ADDR_OWVAR 37
70915: PUSH
70916: LD_INT 25
70918: ST_TO_ADDR
// vc_engine := engine_siberite ;
70919: LD_ADDR_OWVAR 39
70923: PUSH
70924: LD_INT 3
70926: ST_TO_ADDR
// vc_control := control_computer ;
70927: LD_ADDR_OWVAR 38
70931: PUSH
70932: LD_INT 3
70934: ST_TO_ADDR
// vc_weapon := 59 ;
70935: LD_ADDR_OWVAR 40
70939: PUSH
70940: LD_INT 59
70942: ST_TO_ADDR
// result := CreateVehicle ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: CALL_OW 45
70952: ST_TO_ADDR
// SetDir ( result , d ) ;
70953: LD_VAR 0 5
70957: PPUSH
70958: LD_VAR 0 4
70962: PPUSH
70963: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70967: LD_VAR 0 5
70971: PPUSH
70972: LD_VAR 0 2
70976: PPUSH
70977: LD_VAR 0 3
70981: PPUSH
70982: LD_INT 0
70984: PPUSH
70985: CALL_OW 48
// end ;
70989: LD_VAR 0 5
70993: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70994: LD_INT 0
70996: PPUSH
70997: PPUSH
70998: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70999: LD_ADDR_VAR 0 2
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71022: LD_VAR 0 1
71026: NOT
71027: PUSH
71028: LD_VAR 0 1
71032: PPUSH
71033: CALL_OW 264
71037: PUSH
71038: LD_INT 12
71040: PUSH
71041: LD_INT 51
71043: PUSH
71044: LD_INT 32
71046: PUSH
71047: LD_INT 89
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: IN
71056: NOT
71057: OR
71058: IFFALSE 71062
// exit ;
71060: GO 71160
// for i := 1 to 3 do
71062: LD_ADDR_VAR 0 3
71066: PUSH
71067: DOUBLE
71068: LD_INT 1
71070: DEC
71071: ST_TO_ADDR
71072: LD_INT 3
71074: PUSH
71075: FOR_TO
71076: IFFALSE 71158
// begin tmp := GetCargo ( cargo , i ) ;
71078: LD_ADDR_VAR 0 4
71082: PUSH
71083: LD_VAR 0 1
71087: PPUSH
71088: LD_VAR 0 3
71092: PPUSH
71093: CALL_OW 289
71097: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71098: LD_ADDR_VAR 0 2
71102: PUSH
71103: LD_VAR 0 2
71107: PPUSH
71108: LD_VAR 0 3
71112: PPUSH
71113: LD_VAR 0 4
71117: PPUSH
71118: CALL_OW 1
71122: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71123: LD_ADDR_VAR 0 2
71127: PUSH
71128: LD_VAR 0 2
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: LD_VAR 0 2
71140: PUSH
71141: LD_INT 4
71143: ARRAY
71144: PUSH
71145: LD_VAR 0 4
71149: PLUS
71150: PPUSH
71151: CALL_OW 1
71155: ST_TO_ADDR
// end ;
71156: GO 71075
71158: POP
71159: POP
// end ;
71160: LD_VAR 0 2
71164: RET
// export function Length ( array ) ; begin
71165: LD_INT 0
71167: PPUSH
// result := array + 0 ;
71168: LD_ADDR_VAR 0 2
71172: PUSH
71173: LD_VAR 0 1
71177: PUSH
71178: LD_INT 0
71180: PLUS
71181: ST_TO_ADDR
// end ;
71182: LD_VAR 0 2
71186: RET
// export function PrepareArray ( array ) ; begin
71187: LD_INT 0
71189: PPUSH
// result := array diff 0 ;
71190: LD_ADDR_VAR 0 2
71194: PUSH
71195: LD_VAR 0 1
71199: PUSH
71200: LD_INT 0
71202: DIFF
71203: ST_TO_ADDR
// if not result [ 1 ] then
71204: LD_VAR 0 2
71208: PUSH
71209: LD_INT 1
71211: ARRAY
71212: NOT
71213: IFFALSE 71233
// result := Delete ( result , 1 ) ;
71215: LD_ADDR_VAR 0 2
71219: PUSH
71220: LD_VAR 0 2
71224: PPUSH
71225: LD_INT 1
71227: PPUSH
71228: CALL_OW 3
71232: ST_TO_ADDR
// end ;
71233: LD_VAR 0 2
71237: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71238: LD_INT 0
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
// sibRocketRange := 25 ;
71244: LD_ADDR_VAR 0 6
71248: PUSH
71249: LD_INT 25
71251: ST_TO_ADDR
// result := false ;
71252: LD_ADDR_VAR 0 4
71256: PUSH
71257: LD_INT 0
71259: ST_TO_ADDR
// for i := 0 to 5 do
71260: LD_ADDR_VAR 0 5
71264: PUSH
71265: DOUBLE
71266: LD_INT 0
71268: DEC
71269: ST_TO_ADDR
71270: LD_INT 5
71272: PUSH
71273: FOR_TO
71274: IFFALSE 71341
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71276: LD_VAR 0 1
71280: PPUSH
71281: LD_VAR 0 5
71285: PPUSH
71286: LD_VAR 0 6
71290: PPUSH
71291: CALL_OW 272
71295: PPUSH
71296: LD_VAR 0 2
71300: PPUSH
71301: LD_VAR 0 5
71305: PPUSH
71306: LD_VAR 0 6
71310: PPUSH
71311: CALL_OW 273
71315: PPUSH
71316: LD_VAR 0 3
71320: PPUSH
71321: CALL_OW 309
71325: IFFALSE 71339
// begin result := true ;
71327: LD_ADDR_VAR 0 4
71331: PUSH
71332: LD_INT 1
71334: ST_TO_ADDR
// exit ;
71335: POP
71336: POP
71337: GO 71343
// end ;
71339: GO 71273
71341: POP
71342: POP
// end ;
71343: LD_VAR 0 4
71347: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71348: LD_INT 0
71350: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71351: LD_VAR 0 1
71355: PPUSH
71356: LD_VAR 0 2
71360: PPUSH
71361: LD_INT 0
71363: PPUSH
71364: LD_INT 0
71366: PPUSH
71367: LD_INT 1
71369: PPUSH
71370: LD_INT 0
71372: PPUSH
71373: CALL_OW 587
// end ; end_of_file
71377: LD_VAR 0 3
71381: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71382: LD_VAR 0 1
71386: PUSH
71387: LD_INT 200
71389: DOUBLE
71390: GREATEREQUAL
71391: IFFALSE 71399
71393: LD_INT 299
71395: DOUBLE
71396: LESSEQUAL
71397: IFTRUE 71401
71399: GO 71433
71401: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71402: LD_VAR 0 1
71406: PPUSH
71407: LD_VAR 0 2
71411: PPUSH
71412: LD_VAR 0 3
71416: PPUSH
71417: LD_VAR 0 4
71421: PPUSH
71422: LD_VAR 0 5
71426: PPUSH
71427: CALL 10254 0 5
71431: GO 71510
71433: LD_INT 300
71435: DOUBLE
71436: GREATEREQUAL
71437: IFFALSE 71445
71439: LD_INT 399
71441: DOUBLE
71442: LESSEQUAL
71443: IFTRUE 71447
71445: GO 71509
71447: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71448: LD_VAR 0 1
71452: PPUSH
71453: LD_VAR 0 2
71457: PPUSH
71458: LD_VAR 0 3
71462: PPUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: LD_VAR 0 5
71472: PPUSH
71473: LD_VAR 0 6
71477: PPUSH
71478: LD_VAR 0 7
71482: PPUSH
71483: LD_VAR 0 8
71487: PPUSH
71488: LD_VAR 0 9
71492: PPUSH
71493: LD_VAR 0 10
71497: PPUSH
71498: LD_VAR 0 11
71502: PPUSH
71503: CALL 26670 0 11
71507: GO 71510
71509: POP
// end ;
71510: PPOPN 11
71512: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71513: LD_VAR 0 1
71517: PPUSH
71518: LD_VAR 0 2
71522: PPUSH
71523: LD_VAR 0 3
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: LD_VAR 0 5
71537: PPUSH
71538: CALL 9990 0 5
// end ; end_of_file
71542: PPOPN 5
71544: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71545: LD_VAR 0 1
71549: PPUSH
71550: LD_VAR 0 2
71554: PPUSH
71555: LD_VAR 0 3
71559: PPUSH
71560: LD_VAR 0 4
71564: PPUSH
71565: LD_VAR 0 5
71569: PPUSH
71570: LD_VAR 0 6
71574: PPUSH
71575: CALL 14322 0 6
// end ;
71579: PPOPN 6
71581: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71582: LD_INT 0
71584: PPUSH
// begin if not units then
71585: LD_VAR 0 1
71589: NOT
71590: IFFALSE 71594
// exit ;
71592: GO 71594
// end ;
71594: PPOPN 7
71596: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71597: CALL 14226 0 0
// end ;
71601: PPOPN 1
71603: END
