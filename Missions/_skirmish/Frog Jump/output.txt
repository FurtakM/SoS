// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7129 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6916 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1939 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9253 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5732 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: PUSH
1579: LD_EXP 9
1583: AND
1584: IFFALSE 1731
1586: GO 1588
1588: DISABLE
1589: LD_INT 0
1591: PPUSH
// begin enable ;
1592: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1593: LD_ADDR_EXP 31
1597: PUSH
1598: LD_EXP 31
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1607: LD_ADDR_VAR 0 1
1611: PUSH
1612: DOUBLE
1613: LD_INT 1
1615: DEC
1616: ST_TO_ADDR
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_OWVAR 67
1635: ARRAY
1636: PUSH
1637: LD_EXP 31
1641: PLUS
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1674
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1646: LD_INT 1
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 2
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: CALL 1133 0 1
1672: GO 1643
1674: POP
1675: POP
// repeat wait ( 0 0$01 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1683: LD_EXP 32
1687: PUSH
1688: LD_INT 4
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_OWVAR 67
1706: ARRAY
1707: PUSH
1708: LD_EXP 31
1712: PLUS
1713: GREATEREQUAL
1714: IFFALSE 1676
// AddComMoveXY ( al_force , 143 , 178 ) ;
1716: LD_EXP 32
1720: PPUSH
1721: LD_INT 143
1723: PPUSH
1724: LD_INT 178
1726: PPUSH
1727: CALL_OW 171
// end ;
1731: PPOPN 1
1733: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1734: LD_INT 6
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: IFFALSE 1831
1753: GO 1755
1755: DISABLE
1756: LD_INT 0
1758: PPUSH
// begin enable ;
1759: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 6
1767: PPUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 7
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 70
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_INT 81
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 255
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 74
1822: PPUSH
1823: CALL_OW 115
1827: GO 1783
1829: POP
1830: POP
// end ;
1831: PPOPN 1
1833: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1834: LD_EXP 9
1838: IFFALSE 1936
1840: GO 1842
1842: DISABLE
1843: LD_INT 0
1845: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1846: LD_ADDR_VAR 0 1
1850: PUSH
1851: LD_INT 18900
1853: PUSH
1854: LD_INT 18200
1856: PUSH
1857: LD_INT 16450
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_OWVAR 67
1869: ARRAY
1870: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1871: CALL 8616 0 0
// wait ( reload_time / 2 ) ;
1875: LD_VAR 0 1
1879: PUSH
1880: LD_INT 2
1882: DIVREAL
1883: PPUSH
1884: CALL_OW 67
// ActiveArtifact2 ( ) ;
1888: CALL 9061 0 0
// wait ( reload_time / 2 ) ;
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 2
1899: DIVREAL
1900: PPUSH
1901: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1905: LD_INT 22
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 8
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: NOT
1934: IFFALSE 1871
// end ; end_of_file
1936: PPOPN 1
1938: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// uc_side := 8 ;
1947: LD_ADDR_OWVAR 20
1951: PUSH
1952: LD_INT 8
1954: ST_TO_ADDR
// uc_nation := 2 ;
1955: LD_ADDR_OWVAR 21
1959: PUSH
1960: LD_INT 2
1962: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: LD_INT 7
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 9
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_OWVAR 67
1986: ARRAY
1987: ST_TO_ADDR
// dep := ar_base ;
1988: LD_ADDR_VAR 0 5
1992: PUSH
1993: LD_INT 57
1995: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1996: LD_ADDR_VAR 0 6
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 8
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2034: LD_VAR 0 5
2038: PPUSH
2039: CALL_OW 274
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 999999
2049: PPUSH
2050: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2054: LD_VAR 0 5
2058: PPUSH
2059: CALL_OW 274
2063: PPUSH
2064: LD_INT 2
2066: PPUSH
2067: LD_INT 10000
2069: PPUSH
2070: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 274
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 10000
2089: PPUSH
2090: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2094: LD_INT 68
2096: PPUSH
2097: LD_INT 224
2099: PPUSH
2100: LD_INT 5
2102: PPUSH
2103: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 6
2115: PPUSH
2116: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2120: LD_ADDR_OWVAR 26
2124: PUSH
2125: LD_STRING Nicolas Vervecken
2127: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2128: LD_ADDR_OWVAR 33
2132: PUSH
2133: LD_STRING SecondCharsGal
2135: ST_TO_ADDR
// hc_face_number := 3 ;
2136: LD_ADDR_OWVAR 34
2140: PUSH
2141: LD_INT 3
2143: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2144: LD_ADDR_OWVAR 29
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: LD_INT 10
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: ST_TO_ADDR
// Vervecken := CreateHuman ;
2159: LD_ADDR_EXP 3
2163: PUSH
2164: CALL_OW 44
2168: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2169: LD_EXP 3
2173: PPUSH
2174: LD_VAR 0 5
2178: PPUSH
2179: CALL_OW 52
// InitHc_All ( ) ;
2183: CALL_OW 584
// for i = 1 to 4 do
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: DOUBLE
2193: LD_INT 1
2195: DEC
2196: ST_TO_ADDR
2197: LD_INT 4
2199: PUSH
2200: FOR_TO
2201: IFFALSE 2262
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2203: LD_INT 0
2205: PPUSH
2206: LD_INT 9
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2218: CALL_OW 44
2222: PPUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 30
2235: PUSH
2236: LD_INT 5
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PPUSH
2256: CALL_OW 52
// end ;
2260: GO 2200
2262: POP
2263: POP
// for i = 1 to 2 do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 2
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2339
// begin PrepareHuman ( false , 4 , skill ) ;
2280: LD_INT 0
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_VAR 0 4
2290: PPUSH
2291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2295: CALL_OW 44
2299: PPUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 30
2312: PUSH
2313: LD_INT 8
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: CALL_OW 52
// end ;
2337: GO 2277
2339: POP
2340: POP
// for i = 1 to 6 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 6
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2392
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2357: LD_INT 0
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_VAR 0 4
2367: PUSH
2368: LD_INT 1
2370: PLUS
2371: PPUSH
2372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2376: CALL_OW 44
2380: PPUSH
2381: LD_VAR 0 6
2385: PPUSH
2386: CALL_OW 52
// end ;
2390: GO 2354
2392: POP
2393: POP
// uc_nation := 0 ;
2394: LD_ADDR_OWVAR 21
2398: PUSH
2399: LD_INT 0
2401: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2402: LD_ADDR_VAR 0 2
2406: PUSH
2407: LD_INT 22
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 30
2419: PUSH
2420: LD_INT 32
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL_OW 69
2435: PUSH
2436: FOR_IN
2437: IFFALSE 2474
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2439: LD_INT 0
2441: PPUSH
2442: LD_INT 15
2444: PPUSH
2445: LD_VAR 0 4
2449: PUSH
2450: LD_INT 1
2452: PLUS
2453: PPUSH
2454: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2458: CALL_OW 44
2462: PPUSH
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL_OW 52
// end ;
2472: GO 2436
2474: POP
2475: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 5
2481: PPUSH
2482: LD_INT 10
2484: PPUSH
2485: CALL_OW 380
// un := CreateHuman ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: CALL_OW 44
2498: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 175
2506: PPUSH
2507: LD_INT 128
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 115
2524: PPUSH
2525: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 380
// un := CreateHuman ;
2542: LD_ADDR_VAR 0 3
2546: PUSH
2547: CALL_OW 44
2551: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_INT 240
2559: PPUSH
2560: LD_INT 128
2562: PPUSH
2563: CALL_OW 428
2567: PPUSH
2568: CALL_OW 52
// un := CreateHuman ;
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: CALL_OW 44
2581: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 260
2601: PPUSH
2602: LD_INT 147
2604: PPUSH
2605: CALL_OW 428
2609: PPUSH
2610: CALL_OW 52
// for i = 1 to 2 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 2
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2653
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2630: LD_VAR 0 6
2634: PPUSH
2635: LD_INT 14
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: LD_INT 31
2646: PPUSH
2647: CALL_OW 185
2651: GO 2627
2653: POP
2654: POP
// end ;
2655: LD_VAR 0 1
2659: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
// for i = 1 to num do
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: DOUBLE
2670: LD_INT 1
2672: DEC
2673: ST_TO_ADDR
2674: LD_VAR 0 1
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2752
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 30
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: PPUSH
2715: LD_INT 11
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_INT 23
2726: PUSH
2727: LD_INT 24
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 12
2744: ARRAY
2745: PPUSH
2746: CALL_OW 185
2750: GO 2679
2752: POP
2753: POP
// end ;
2754: LD_VAR 0 2
2758: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
// uc_side := 8 ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_INT 8
2771: ST_TO_ADDR
// uc_nation := 0 ;
2772: LD_ADDR_OWVAR 21
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// hc_class := 17 ;
2780: LD_ADDR_OWVAR 28
2784: PUSH
2785: LD_INT 17
2787: ST_TO_ADDR
// hc_gallery :=  ;
2788: LD_ADDR_OWVAR 33
2792: PUSH
2793: LD_STRING 
2795: ST_TO_ADDR
// hc_name :=  ;
2796: LD_ADDR_OWVAR 26
2800: PUSH
2801: LD_STRING 
2803: ST_TO_ADDR
// hc_importance := 0 ;
2804: LD_ADDR_OWVAR 32
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2812: LD_ADDR_OWVAR 31
2816: PUSH
2817: LD_INT 10
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: ST_TO_ADDR
// if ar_base then
2835: LD_INT 57
2837: IFFALSE 2882
// begin un := CreateHuman ;
2839: LD_ADDR_VAR 0 3
2843: PUSH
2844: CALL_OW 44
2848: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_INT 57
2856: PPUSH
2857: CALL_OW 52
// ComExitBuilding ( un ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 68
2877: PPUSH
2878: CALL_OW 180
// end ; end ;
2882: LD_VAR 0 1
2886: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// legion_force := [ ] ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// l_allow_attack := false ;
2898: LD_ADDR_EXP 34
2902: PUSH
2903: LD_INT 0
2905: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2906: LD_VAR 0 1
2910: PPUSH
2911: CALL 2660 0 1
// repeat wait ( 0 0$01 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// until legion_force >= n1 ;
2922: LD_EXP 33
2926: PUSH
2927: LD_VAR 0 1
2931: GREATEREQUAL
2932: IFFALSE 2915
// l_allow_attack := true ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// for i = 1 to n2 do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_VAR 0 2
2956: PUSH
2957: FOR_TO
2958: IFFALSE 2966
// begin AddKamikaze ( ) ;
2960: CALL 2759 0 0
// end ;
2964: GO 2957
2966: POP
2967: POP
// end ;
2968: LD_VAR 0 3
2972: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2973: LD_INT 22
2975: PUSH
2976: LD_INT 8
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 50
2985: PUSH
2986: EMPTY
2987: LIST
2988: PUSH
2989: LD_INT 33
2991: PUSH
2992: LD_INT 2
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: LD_INT 61
3004: PUSH
3005: EMPTY
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: IFFALSE 3102
3024: GO 3026
3026: DISABLE
3027: LD_INT 0
3029: PPUSH
// begin enable ;
3030: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3031: LD_ADDR_VAR 0 1
3035: PUSH
3036: LD_INT 22
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 33
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 61
3067: PUSH
3068: EMPTY
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: FOR_IN
3087: IFFALSE 3100
// Connect ( i ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 37530 0 1
3098: GO 3086
3100: POP
3101: POP
// end ;
3102: PPOPN 1
3104: END
// every 5 5$00 trigger legion_attacks_active do
3105: LD_EXP 7
3109: IFFALSE 3161
3111: GO 3113
3113: DISABLE
// begin enable ;
3114: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3115: LD_INT 5250
3117: PUSH
3118: LD_INT 2100
3120: PUSH
3121: LD_INT 1050
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PPUSH
3135: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3139: LD_EXP 8
3143: PUSH
3144: LD_INT 2
3146: MINUS
3147: PUSH
3148: LD_OWVAR 67
3152: PLUS
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL 2887 0 2
// end ;
3161: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3162: LD_EXP 34
3166: PUSH
3167: LD_EXP 33
3171: PPUSH
3172: LD_INT 3
3174: PUSH
3175: LD_INT 60
3177: PUSH
3178: EMPTY
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 61
3187: PUSH
3188: EMPTY
3189: LIST
3190: PUSH
3191: LD_INT 50
3193: PUSH
3194: EMPTY
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 72
3206: AND
3207: IFFALSE 3338
3209: GO 3211
3211: DISABLE
3212: LD_INT 0
3214: PPUSH
3215: PPUSH
// begin enable ;
3216: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 33
3226: PPUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 60
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 61
3242: PUSH
3243: EMPTY
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 72
3261: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3262: LD_ADDR_VAR 0 1
3266: PUSH
3267: LD_INT 150
3269: PUSH
3270: LD_INT 93
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 232
3279: PUSH
3280: LD_INT 88
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 209
3289: PUSH
3290: LD_INT 50
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 208
3299: PUSH
3300: LD_INT 29
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 191
3309: PUSH
3310: LD_INT 17
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3324: LD_VAR 0 2
3328: PPUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 69515 0 2
// end ;
3338: PPOPN 2
3340: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3341: LD_INT 6
3343: PPUSH
3344: LD_INT 22
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 25
3356: PUSH
3357: LD_INT 17
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 70
3372: IFFALSE 3459
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 6
3388: PPUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 25
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PPUSH
3413: CALL_OW 70
3417: PUSH
3418: FOR_IN
3419: IFFALSE 3457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3421: LD_VAR 0 1
3425: PPUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 6
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 74
3450: PPUSH
3451: CALL_OW 115
3455: GO 3418
3457: POP
3458: POP
// end ;
3459: PPOPN 1
3461: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3462: LD_INT 68
3464: IFFALSE 3695
3466: GO 3468
3468: DISABLE
3469: LD_INT 0
3471: PPUSH
3472: PPUSH
3473: PPUSH
// begin enable ;
3474: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 224
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 160
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 228
3502: PUSH
3503: LD_INT 56
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 271
3512: PUSH
3513: LD_INT 87
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: ST_TO_ADDR
// for i = 1 to 3 do
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 3
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3556
// EraseResourceArea ( telArea , i ) ;
3542: LD_INT 7
3544: PPUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: CALL_OW 286
3554: GO 3539
3556: POP
3557: POP
// for i = xy downto 1 do
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: DOUBLE
3564: LD_VAR 0 2
3568: INC
3569: ST_TO_ADDR
3570: LD_INT 1
3572: PUSH
3573: FOR_DOWNTO
3574: IFFALSE 3656
// begin k := rand ( 1 , xy ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3594: LD_VAR 0 2
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: LD_VAR 0 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PUSH
3620: LD_INT 2
3622: ARRAY
3623: PPUSH
3624: CALL_OW 428
3628: IFFALSE 3652
// xy := Delete ( xy , k ) else
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 3
3649: ST_TO_ADDR
3650: GO 3654
// break ;
3652: GO 3656
// end ;
3654: GO 3573
3656: POP
3657: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3658: LD_INT 68
3660: PPUSH
3661: LD_VAR 0 2
3665: PUSH
3666: LD_VAR 0 1
3670: ARRAY
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: LD_VAR 0 2
3680: PUSH
3681: LD_VAR 0 1
3685: ARRAY
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 243
// end ; end_of_file
3695: PPOPN 3
3697: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3698: LD_INT 0
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
// uc_side := 6 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 6
3714: ST_TO_ADDR
// uc_nation := nation_russian ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 3
3722: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3723: LD_INT 6
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3733: LD_ADDR_VAR 0 6
3737: PUSH
3738: LD_INT 9
3740: PUSH
3741: LD_INT 4
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 8
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 8
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: LD_INT 8
3789: PUSH
3790: LD_INT 7
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: ST_TO_ADDR
// tmp := [ ] ;
3804: LD_ADDR_VAR 0 5
3808: PUSH
3809: EMPTY
3810: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3811: LD_ADDR_EXP 2
3815: PUSH
3816: LD_STRING Davidov
3818: PPUSH
3819: CALL_OW 25
3823: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3824: LD_EXP 2
3828: PPUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 7
3834: PPUSH
3835: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3839: LD_EXP 2
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: LD_INT 8
3849: PPUSH
3850: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3854: LD_EXP 2
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: LD_INT 6
3864: PPUSH
3865: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3869: LD_EXP 2
3873: PPUSH
3874: LD_INT 4
3876: PPUSH
3877: LD_INT 10
3879: PPUSH
3880: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3884: LD_EXP 2
3888: PPUSH
3889: LD_INT 4
3891: PPUSH
3892: CALL_OW 336
// InitHc_All ( ) ;
3896: CALL_OW 584
// while amount [ 1 ] do
3900: LD_VAR 0 6
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: IFFALSE 4241
// begin Wait ( 1 ) ;
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3917: LD_ADDR_VAR 0 7
3921: PUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: CALL_OW 12
3932: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3933: LD_VAR 0 6
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PUSH
3942: LD_VAR 0 5
3946: AND
3947: IFFALSE 4102
// begin if k in [ 1 , 2 ] then
3949: LD_VAR 0 7
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: IN
3964: IFFALSE 3974
// k := 3 ;
3966: LD_ADDR_VAR 0 7
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: LD_INT 24
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 12
3999: ARRAY
4000: ST_TO_ADDR
// vc_engine := engine_siberite ;
4001: LD_ADDR_OWVAR 39
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// vc_control := control_manual ;
4009: LD_ADDR_OWVAR 38
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4017: LD_ADDR_OWVAR 40
4021: PUSH
4022: LD_INT 44
4024: PUSH
4025: LD_INT 45
4027: PUSH
4028: LD_INT 43
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 3
4041: PPUSH
4042: CALL_OW 12
4046: ARRAY
4047: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4048: LD_ADDR_VAR 0 5
4052: PUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 45
4065: PPUSH
4066: CALL_OW 2
4070: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 6
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: PUSH
4093: LD_INT 1
4095: MINUS
4096: PPUSH
4097: CALL_OW 1
4101: ST_TO_ADDR
// end ; if not tmp then
4102: LD_VAR 0 5
4106: NOT
4107: IFFALSE 4117
// k := 2 ;
4109: LD_ADDR_VAR 0 7
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4117: LD_VAR 0 6
4121: PUSH
4122: LD_INT 2
4124: ARRAY
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: PUSH
4130: LD_VAR 0 7
4134: PUSH
4135: LD_INT 3
4137: EQUAL
4138: AND
4139: IFFALSE 4168
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_INT 9
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: CALL_OW 12
4166: ARRAY
4167: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4168: LD_INT 0
4170: PPUSH
4171: LD_VAR 0 7
4175: PPUSH
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4185: LD_ADDR_VAR 0 5
4189: PUSH
4190: LD_VAR 0 5
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 44
4202: PPUSH
4203: CALL_OW 2
4207: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4208: LD_ADDR_VAR 0 6
4212: PUSH
4213: LD_VAR 0 6
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_VAR 0 6
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PUSH
4230: LD_INT 1
4232: MINUS
4233: PPUSH
4234: CALL_OW 1
4238: ST_TO_ADDR
// end ;
4239: GO 3900
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4241: LD_ADDR_VAR 0 5
4245: PUSH
4246: LD_VAR 0 5
4250: PPUSH
4251: LD_VAR 0 5
4255: PUSH
4256: LD_INT 1
4258: PLUS
4259: PPUSH
4260: LD_EXP 2
4264: PPUSH
4265: CALL_OW 2
4269: ST_TO_ADDR
// for i = tmp downto 1 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_VAR 0 5
4280: INC
4281: ST_TO_ADDR
4282: LD_INT 1
4284: PUSH
4285: FOR_DOWNTO
4286: IFFALSE 4448
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4288: LD_VAR 0 5
4292: PUSH
4293: LD_VAR 0 2
4297: ARRAY
4298: PPUSH
4299: CALL_OW 247
4303: PUSH
4304: LD_INT 2
4306: EQUAL
4307: IFFALSE 4397
// begin SetDir ( tmp [ i ] , 3 ) ;
4309: LD_VAR 0 5
4313: PUSH
4314: LD_VAR 0 2
4318: ARRAY
4319: PPUSH
4320: LD_INT 3
4322: PPUSH
4323: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4327: LD_VAR 0 5
4331: PUSH
4332: LD_VAR 0 2
4336: ARRAY
4337: PPUSH
4338: LD_INT 193
4340: PPUSH
4341: LD_INT 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4351: LD_VAR 0 5
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: MINUS
4364: ARRAY
4365: PPUSH
4366: LD_VAR 0 5
4370: PUSH
4371: LD_VAR 0 2
4375: ARRAY
4376: PPUSH
4377: CALL_OW 52
// i := i - 1 ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: MINUS
4394: ST_TO_ADDR
// end else
4395: GO 4418
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4397: LD_VAR 0 5
4401: PUSH
4402: LD_VAR 0 2
4406: ARRAY
4407: PPUSH
4408: LD_INT 2
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4418: LD_VAR 0 5
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: PPUSH
4429: LD_INT 197
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 111
// Wait ( 0 0$02 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// end ;
4446: GO 4285
4448: POP
4449: POP
// Wait ( 0 0$02 ) ;
4450: LD_INT 70
4452: PPUSH
4453: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4457: LD_ADDR_OWVAR 37
4461: PUSH
4462: LD_INT 22
4464: ST_TO_ADDR
// vc_engine := engine_siberite ;
4465: LD_ADDR_OWVAR 39
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// vc_control := control_computer ;
4473: LD_ADDR_OWVAR 38
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4481: LD_ADDR_OWVAR 40
4485: PUSH
4486: LD_INT 51
4488: ST_TO_ADDR
// tmp := CreateVehicle ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: CALL_OW 45
4498: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4499: LD_VAR 0 5
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4511: LD_VAR 0 5
4515: PPUSH
4516: LD_INT 193
4518: PPUSH
4519: LD_INT 3
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 60
4539: PPUSH
4540: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4544: LD_VAR 0 5
4548: PPUSH
4549: LD_INT 197
4551: PPUSH
4552: LD_INT 22
4554: PPUSH
4555: CALL_OW 111
// end ; end_of_file
4559: LD_VAR 0 1
4563: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4564: LD_INT 0
4566: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4567: LD_VAR 0 1
4571: PPUSH
4572: LD_VAR 0 2
4576: PPUSH
4577: CALL 9619 0 2
// side := GetSide ( fac ) ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: CALL_OW 255
4595: ST_TO_ADDR
// case side of 7 :
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 7
4603: DOUBLE
4604: EQUAL
4605: IFTRUE 4609
4607: GO 4656
4609: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4610: LD_ADDR_EXP 32
4614: PUSH
4615: LD_EXP 32
4619: PPUSH
4620: LD_EXP 32
4624: PUSH
4625: LD_INT 1
4627: PLUS
4628: PPUSH
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL_OW 1
4638: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_INT 112
4646: PPUSH
4647: LD_INT 175
4649: PPUSH
4650: CALL_OW 171
// end ; 8 :
4654: GO 4742
4656: LD_INT 8
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4741
4664: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4665: LD_VAR 0 1
4669: PPUSH
4670: CALL_OW 264
4674: PUSH
4675: LD_INT 31
4677: EQUAL
4678: IFFALSE 4695
// ComMoveXY ( veh , 145 , 66 ) ;
4680: LD_VAR 0 1
4684: PPUSH
4685: LD_INT 145
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 265
4704: PUSH
4705: LD_INT 11
4707: EQUAL
4708: IFFALSE 4739
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4710: LD_ADDR_EXP 33
4714: PUSH
4715: LD_EXP 33
4719: PPUSH
4720: LD_EXP 33
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: PPUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 1
4738: ST_TO_ADDR
// end ; end ;
4739: GO 4742
4741: POP
// end ;
4742: PPOPN 3
4744: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL 9499 0 1
// if un in legion_force then
4754: LD_VAR 0 1
4758: PUSH
4759: LD_EXP 33
4763: IN
4764: IFFALSE 4782
// legion_force := legion_force diff un ;
4766: LD_ADDR_EXP 33
4770: PUSH
4771: LD_EXP 33
4775: PUSH
4776: LD_VAR 0 1
4780: DIFF
4781: ST_TO_ADDR
// if un in al_force then
4782: LD_VAR 0 1
4786: PUSH
4787: LD_EXP 32
4791: IN
4792: IFFALSE 4810
// al_force := al_force diff un ;
4794: LD_ADDR_EXP 32
4798: PUSH
4799: LD_EXP 32
4803: PUSH
4804: LD_VAR 0 1
4808: DIFF
4809: ST_TO_ADDR
// end ;
4810: PPOPN 1
4812: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4813: LD_VAR 0 1
4817: PUSH
4818: LD_INT 68
4820: EQUAL
4821: PUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: CALL_OW 257
4831: PUSH
4832: LD_INT 17
4834: EQUAL
4835: AND
4836: IFFALSE 4879
// begin Wait ( 0 0$01 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 6
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 74
4874: PPUSH
4875: CALL_OW 115
// end ; end ;
4879: PPOPN 2
4881: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4882: LD_VAR 0 1
4886: PUSH
4887: LD_EXP 32
4891: IN
4892: IFFALSE 4910
// al_force := al_force diff un ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_VAR 0 1
4908: DIFF
4909: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 263
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4934
// ComUnlink ( un ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 8
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 21
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: IN
4968: IFFALSE 4986
// begin wait ( 0 0$2 ) ;
4970: LD_INT 70
4972: PPUSH
4973: CALL_OW 67
// ComAutodestruct ( un ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL 62425 0 1
// end ; end ;
4986: PPOPN 1
4988: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 25
4996: EQUAL
4997: IFFALSE 5007
// player_start_res_sib_bomb := true ;
4999: LD_ADDR_EXP 4
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// if tech = tech_artifact then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 24
5014: EQUAL
5015: IFFALSE 5025
// player_start_res_artifact := true ;
5017: LD_ADDR_EXP 5
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// end ;
5025: PPOPN 2
5027: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 6
5035: EQUAL
5036: IFFALSE 5046
// player_artifact_loaded := false ;
5038: LD_ADDR_EXP 18
5042: PUSH
5043: LD_INT 0
5045: ST_TO_ADDR
// end ;
5046: PPOPN 2
5048: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 6
5056: EQUAL
5057: IFFALSE 5067
// player_artifact_loaded := true ;
5059: LD_ADDR_EXP 18
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// end ;
5067: PPOPN 2
5069: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5070: LD_INT 0
5072: PPUSH
// begin player_used_sib_bomb := true ;
5073: LD_ADDR_EXP 12
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// for i = 1 to 3 do
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5168
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_EXP 15
5111: PUSH
5112: LD_VAR 0 4
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 15
5126: PUSH
5127: LD_VAR 0 4
5131: ARRAY
5132: PUSH
5133: LD_INT 2
5135: ARRAY
5136: PPUSH
5137: CALL_OW 298
5141: PUSH
5142: LD_EXP 17
5146: LESSEQUAL
5147: IFFALSE 5166
// begin wait ( 0 0$5 ) ;
5149: LD_INT 175
5151: PPUSH
5152: CALL_OW 67
// artifact_destroyed := true ;
5156: LD_ADDR_EXP 16
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// break ;
5164: GO 5168
// end ; end ;
5166: GO 5094
5168: POP
5169: POP
// end ;
5170: PPOPN 4
5172: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5173: LD_VAR 0 1
5177: PPUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: CALL 9595 0 3
// end ;
5192: PPOPN 3
5194: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 9603 0 1
// end ; end_of_file
5204: PPOPN 1
5206: END
// export function CreateArtifact ( type , x , y ) ; begin
5207: LD_INT 0
5209: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5210: LD_INT 4
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 58
// end ;
5235: LD_VAR 0 4
5239: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5240: LD_INT 0
5242: PPUSH
5243: PPUSH
5244: PPUSH
// result := 0 ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5253: LD_ADDR_VAR 0 4
5257: PUSH
5258: LD_INT 22
5260: PUSH
5261: LD_VAR 0 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 2
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: ST_TO_ADDR
// if deps then
5307: LD_VAR 0 4
5311: IFFALSE 5359
// for i in deps do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: PUSH
5323: FOR_IN
5324: IFFALSE 5357
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5326: LD_ADDR_VAR 0 2
5330: PUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 3
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 275
5353: PLUS
5354: ST_TO_ADDR
5355: GO 5323
5357: POP
5358: POP
// end ;
5359: LD_VAR 0 2
5363: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5364: LD_INT 0
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
// if val <= 0 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 0
5377: LESSEQUAL
5378: IFFALSE 5382
// exit ;
5380: GO 5574
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 30
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 69
5435: ST_TO_ADDR
// if deps then
5436: LD_VAR 0 5
5440: IFFALSE 5574
// for i in deps do
5442: LD_ADDR_VAR 0 4
5446: PUSH
5447: LD_VAR 0 5
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5572
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5455: LD_ADDR_VAR 0 6
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 274
5469: PPUSH
5470: LD_INT 3
5472: PPUSH
5473: CALL_OW 275
5477: ST_TO_ADDR
// if val < s then
5478: LD_VAR 0 2
5482: PUSH
5483: LD_VAR 0 6
5487: LESS
5488: IFFALSE 5534
// begin s := s - val ;
5490: LD_ADDR_VAR 0 6
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: LD_VAR 0 2
5504: MINUS
5505: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5506: LD_VAR 0 4
5510: PPUSH
5511: CALL_OW 274
5515: PPUSH
5516: LD_INT 3
5518: PPUSH
5519: LD_VAR 0 6
5523: PPUSH
5524: CALL_OW 277
// exit ;
5528: POP
5529: POP
5530: GO 5574
// end else
5532: GO 5570
// begin val := val - s ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 6
5548: MINUS
5549: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: CALL_OW 274
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 277
// end ; end ;
5570: GO 5452
5572: POP
5573: POP
// end ;
5574: LD_VAR 0 3
5578: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_EXP 35
5588: IN
5589: NOT
5590: IFFALSE 5621
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5592: LD_ADDR_EXP 35
5596: PUSH
5597: LD_EXP 35
5601: PPUSH
5602: LD_EXP 35
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: PPUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// end ;
5621: PPOPN 1
5623: END
// export function DestinationReachable ( unit , x , y ) ; begin
5624: LD_INT 0
5626: PPUSH
// if ValidHex ( x , y ) then
5627: LD_VAR 0 2
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 488
5641: IFFALSE 5667
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 428
5662: PPUSH
5663: CALL_OW 115
// wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// if unit in unreachableList then
5674: LD_VAR 0 1
5678: PUSH
5679: LD_EXP 35
5683: IN
5684: IFFALSE 5696
// result := false else
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
5694: GO 5704
// result := true ;
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if not result then
5704: LD_VAR 0 4
5708: NOT
5709: IFFALSE 5727
// unreachableList := unreachableList diff unit ;
5711: LD_ADDR_EXP 35
5715: PUSH
5716: LD_EXP 35
5720: PUSH
5721: LD_VAR 0 1
5725: DIFF
5726: ST_TO_ADDR
// end ; end_of_file
5727: LD_VAR 0 4
5731: RET
// export function Action ; var dial ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5736: LD_INT 192
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 86
// InGameOn ;
5746: CALL_OW 8
// PrepareRussian ;
5750: CALL 3698 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 6
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 25
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 4
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: PUSH
5828: LD_EXP 2
5832: DIFF
5833: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5834: LD_VAR 0 2
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: LD_INT 202
5845: PPUSH
5846: LD_INT 40
5848: PPUSH
5849: CALL_OW 111
// Wait ( 0 0$03 ) ;
5853: LD_INT 105
5855: PPUSH
5856: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5860: LD_EXP 2
5864: PPUSH
5865: LD_STRING DDav-1
5867: PPUSH
5868: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5872: LD_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_EXP 2
5885: PPUSH
5886: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5890: LD_EXP 2
5894: PPUSH
5895: LD_VAR 0 2
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5908: LD_INT 202
5910: PPUSH
5911: LD_INT 40
5913: PPUSH
5914: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5918: LD_VAR 0 2
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_STRING DRus-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5934: LD_EXP 2
5938: PPUSH
5939: LD_STRING DDav-2
5941: PPUSH
5942: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5946: LD_VAR 0 2
5950: PUSH
5951: LD_INT 1
5953: ARRAY
5954: PPUSH
5955: LD_STRING DRus-2
5957: PPUSH
5958: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5962: LD_EXP 2
5966: PPUSH
5967: LD_STRING DDav-3
5969: PPUSH
5970: CALL_OW 88
// InGameOff ;
5974: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5985: LD_STRING C1
5987: PPUSH
5988: CALL_OW 337
// SaveForQuickRestart ;
5992: CALL_OW 22
// end ;
5996: LD_VAR 0 1
6000: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6001: LD_INT 22
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 6
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 8
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: IFFALSE 6158
6060: GO 6062
6062: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6063: LD_EXP 2
6067: PPUSH
6068: LD_STRING DDav-4
6070: PPUSH
6071: CALL_OW 88
// Wait ( 0 0$40 ) ;
6075: LD_INT 1400
6077: PPUSH
6078: CALL_OW 67
// DialogueOn ;
6082: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6086: LD_EXP 3
6090: PPUSH
6091: LD_STRING Dver-Meet-1
6093: PPUSH
6094: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6098: LD_EXP 2
6102: PPUSH
6103: LD_STRING DDav-Meet-1
6105: PPUSH
6106: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6110: LD_EXP 3
6114: PPUSH
6115: LD_STRING Dver-Meet-2
6117: PPUSH
6118: CALL_OW 94
// DialogueOff ;
6122: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6126: LD_INT 19600
6128: PUSH
6129: LD_INT 15400
6131: PUSH
6132: LD_INT 13300
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_OWVAR 67
6144: ARRAY
6145: PPUSH
6146: CALL_OW 67
// legion_attacks_active := true ;
6150: LD_ADDR_EXP 7
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// end ;
6158: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 30
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_OWVAR 1
6192: PUSH
6193: LD_INT 21000
6195: GREATER
6196: OR
6197: IFFALSE 6431
6199: GO 6201
6201: DISABLE
6202: LD_INT 0
6204: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6205: LD_ADDR_VAR 0 1
6209: PUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 6
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PUSH
6279: LD_EXP 2
6283: DIFF
6284: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6285: LD_VAR 0 1
6289: PUSH
6290: LD_INT 1
6292: ARRAY
6293: PPUSH
6294: LD_STRING DRus-3
6296: PPUSH
6297: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6301: LD_EXP 2
6305: PPUSH
6306: LD_STRING DDav-5
6308: PPUSH
6309: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6313: LD_VAR 0 1
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_STRING DRus-4
6324: PPUSH
6325: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6329: LD_EXP 2
6333: PPUSH
6334: LD_STRING DDav-6
6336: PPUSH
6337: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6341: LD_STRING C2
6343: PPUSH
6344: CALL_OW 337
// Wait ( 5 5$00 ) ;
6348: LD_INT 10500
6350: PPUSH
6351: CALL_OW 67
// DialogueOn ;
6355: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6359: LD_EXP 1
6363: PPUSH
6364: LD_STRING DBag-1
6366: PPUSH
6367: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6371: LD_EXP 2
6375: PPUSH
6376: LD_STRING DDavB-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING DBag-2
6390: PPUSH
6391: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6395: LD_EXP 2
6399: PPUSH
6400: LD_STRING DDavB-2
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6407: LD_EXP 1
6411: PPUSH
6412: LD_STRING DBag-3
6414: PPUSH
6415: CALL_OW 94
// DialogueOff ;
6419: CALL_OW 7
// alliance_attack_active := true ;
6423: LD_ADDR_EXP 9
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// end ;
6431: PPOPN 1
6433: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6434: LD_EXP 10
6438: IFFALSE 6485
6440: GO 6442
6442: DISABLE
// begin DialogueOn ;
6443: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6447: LD_EXP 10
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: LD_EXP 10
6460: PUSH
6461: LD_INT 2
6463: ARRAY
6464: PPUSH
6465: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6469: LD_EXP 2
6473: PPUSH
6474: LD_STRING DDav-Artifact1-1
6476: PPUSH
6477: CALL_OW 88
// DialogueOff ;
6481: CALL_OW 7
// end ;
6485: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6486: LD_EXP 11
6490: IFFALSE 6537
6492: GO 6494
6494: DISABLE
// begin DialogueOn ;
6495: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6499: LD_EXP 11
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: PPUSH
6508: LD_EXP 11
6512: PUSH
6513: LD_INT 2
6515: ARRAY
6516: PPUSH
6517: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6521: LD_EXP 2
6525: PPUSH
6526: LD_STRING DDav-Artifact2-1
6528: PPUSH
6529: CALL_OW 88
// DialogueOff ;
6533: CALL_OW 7
// end ;
6537: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6538: LD_EXP 16
6542: PUSH
6543: LD_INT 6
6545: PPUSH
6546: CALL_OW 469
6550: NOT
6551: PUSH
6552: LD_EXP 18
6556: NOT
6557: AND
6558: OR
6559: IFFALSE 6571
6561: GO 6563
6563: DISABLE
// YouLost ( artifact_destroyed ) ;
6564: LD_STRING artifact_destroyed
6566: PPUSH
6567: CALL_OW 104
6571: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6572: LD_EXP 2
6576: PPUSH
6577: CALL_OW 301
6581: IFFALSE 6593
6583: GO 6585
6585: DISABLE
// YouLost ( dead ) ;
6586: LD_STRING dead
6588: PPUSH
6589: CALL_OW 104
6593: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6594: LD_INT 22
6596: PUSH
6597: LD_INT 7
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6760
6628: GO 6630
6630: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6631: LD_OWVAR 1
6635: PUSH
6636: LD_INT 252000
6638: PUSH
6639: LD_INT 210000
6641: PUSH
6642: LD_INT 189000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_OWVAR 67
6654: ARRAY
6655: LESS
6656: IFFALSE 6670
// AddMedal ( med1 , 1 ) else
6658: LD_STRING med1
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: CALL_OW 101
6668: GO 6681
// AddMedal ( med1 , - 1 ) ;
6670: LD_STRING med1
6672: PPUSH
6673: LD_INT 1
6675: NEG
6676: PPUSH
6677: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: IFFALSE 6710
// AddMedal ( med2 , - 1 ) else
6697: LD_STRING med2
6699: PPUSH
6700: LD_INT 1
6702: NEG
6703: PPUSH
6704: CALL_OW 101
6708: GO 6720
// AddMedal ( med2 , 1 ) ;
6710: LD_STRING med2
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: CALL_OW 101
// if player_used_sib_bomb then
6720: LD_EXP 12
6724: IFFALSE 6739
// AddMedal ( med3 , - 1 ) else
6726: LD_STRING med3
6728: PPUSH
6729: LD_INT 1
6731: NEG
6732: PPUSH
6733: CALL_OW 101
6737: GO 6749
// AddMedal ( med3 , 1 ) ;
6739: LD_STRING med3
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 101
// GiveMedals ( MAIN ) ;
6749: LD_STRING MAIN
6751: PPUSH
6752: CALL_OW 102
// YouWin ;
6756: CALL_OW 103
// end ; end_of_file
6760: END
// every 0 0$22 + 0 0$2 do
6761: GO 6763
6763: DISABLE
// begin enable ;
6764: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6765: LD_INT 4
6767: PPUSH
6768: LD_INT 5
6770: PPUSH
6771: CALL_OW 12
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: LD_INT 1
6781: PPUSH
6782: CALL_OW 55
// if tick >= 4 4$00 then
6786: LD_OWVAR 1
6790: PUSH
6791: LD_INT 8400
6793: GREATEREQUAL
6794: IFFALSE 6801
// begin disable ;
6796: DISABLE
// CratesSpawn ( ) ;
6797: CALL 6802 0 0
// end ; end ;
6801: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6802: LD_INT 0
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 30000
6815: PUSH
6816: LD_INT 20000
6818: PUSH
6819: LD_INT 10000
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_OWVAR 67
6831: ARRAY
6832: ST_TO_ADDR
// while amount > 0 do
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6911
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6843: LD_INT 1050
6845: PPUSH
6846: LD_INT 3150
6848: PPUSH
6849: CALL_OW 12
6853: PPUSH
6854: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6858: LD_ADDR_VAR 0 4
6862: PUSH
6863: LD_INT 1
6865: PPUSH
6866: LD_INT 5
6868: PPUSH
6869: CALL_OW 12
6873: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: LD_VAR 0 3
6883: PUSH
6884: LD_VAR 0 4
6888: PUSH
6889: LD_INT 10
6891: MUL
6892: MINUS
6893: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6894: LD_VAR 0 4
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 55
// end ;
6909: GO 6833
// end ; end_of_file
6911: LD_VAR 0 1
6915: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
// InitHc_All ( ) ;
6920: CALL_OW 584
// for i := 1 to num1 do
6924: LD_ADDR_VAR 0 6
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 1
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6968
// begin PrepareApeman ( 5 ) ;
6942: LD_INT 5
6944: PPUSH
6945: CALL 63192 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6949: CALL_OW 44
6953: PPUSH
6954: LD_VAR 0 4
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6939
6968: POP
6969: POP
// for i := 1 to num2 do
6970: LD_ADDR_VAR 0 6
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_VAR 0 2
6984: PUSH
6985: FOR_TO
6986: IFFALSE 7014
// begin PrepareTiger ( 5 ) ;
6988: LD_INT 5
6990: PPUSH
6991: CALL 63300 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6995: CALL_OW 44
6999: PPUSH
7000: LD_VAR 0 4
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: CALL_OW 49
// end ;
7012: GO 6985
7014: POP
7015: POP
// for i := 1 to num3 do
7016: LD_ADDR_VAR 0 6
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7057
// begin PrepareBird ( ) ;
7034: CALL 63481 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7038: CALL_OW 44
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// end ;
7055: GO 7031
7057: POP
7058: POP
// end ; end_of_file
7059: LD_VAR 0 5
7063: RET
// export function DebugArtifact ; begin
7064: LD_INT 0
7066: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7067: LD_STRING Artifact is loaded: 
7069: PUSH
7070: LD_EXP 18
7074: STR
7075: PPUSH
7076: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7080: LD_STRING Artifact is active: 
7082: PUSH
7083: LD_EXP 29
7087: STR
7088: PPUSH
7089: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7093: LD_STRING Artifact is researched: 
7095: PUSH
7096: LD_EXP 22
7100: STR
7101: PPUSH
7102: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7106: LD_STRING Artifact coords 
7108: PUSH
7109: LD_EXP 19
7113: PPUSH
7114: CALL_OW 469
7118: STR
7119: PPUSH
7120: CALL_OW 561
// end ;
7124: LD_VAR 0 1
7128: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7135: LD_ADDR_VAR 0 4
7139: PUSH
7140: LD_INT 100
7142: PUSH
7143: LD_INT 185
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 99
7152: PUSH
7153: LD_INT 175
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 191
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
// for i = 1 to artifacts_type do
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_EXP 14
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7293
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7193: LD_ADDR_VAR 0 3
7197: PUSH
7198: LD_VAR 0 4
7202: PUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_VAR 0 4
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7217: LD_ADDR_VAR 0 4
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_VAR 0 3
7231: DIFF
7232: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7233: LD_ADDR_EXP 15
7237: PUSH
7238: LD_EXP 15
7242: PPUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7258: LD_EXP 14
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL 5207 0 3
// end ;
7291: GO 7190
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 1
7299: RET
// export function GetUseCost ( dist ) ; begin
7300: LD_INT 0
7302: PPUSH
// if dist < 30 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 30
7310: LESS
7311: IFFALSE 7321
// result := 10 ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 10
7320: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7321: LD_VAR 0 1
7325: PUSH
7326: LD_INT 30
7328: GREATEREQUAL
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: LD_INT 50
7337: LESS
7338: AND
7339: IFFALSE 7349
// result := 35 ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 35
7348: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 50
7356: GREATEREQUAL
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_INT 80
7365: LESS
7366: AND
7367: IFFALSE 7377
// result := 70 ;
7369: LD_ADDR_VAR 0 2
7373: PUSH
7374: LD_INT 70
7376: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 80
7384: GREATEREQUAL
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: LD_INT 120
7393: LESS
7394: AND
7395: IFFALSE 7405
// result := 100 ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 100
7404: ST_TO_ADDR
// if dist >= 120 then
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 120
7412: GREATEREQUAL
7413: IFFALSE 7423
// result := 150 ;
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_INT 150
7422: ST_TO_ADDR
// end ;
7423: LD_VAR 0 2
7427: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 255
7437: PUSH
7438: LD_OWVAR 2
7442: EQUAL
7443: IFFALSE 7453
// player_artifact_researched := true ;
7445: LD_ADDR_EXP 22
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// end ;
7453: PPOPN 1
7455: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7456: LD_INT 22
7458: PUSH
7459: LD_OWVAR 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 30
7473: PUSH
7474: LD_INT 8
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 69
7504: PUSH
7505: LD_EXP 22
7509: AND
7510: PUSH
7511: LD_EXP 18
7515: NOT
7516: AND
7517: IFFALSE 7971
7519: GO 7521
7521: DISABLE
7522: LD_INT 0
7524: PPUSH
7525: PPUSH
// begin enable ;
7526: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_EXP 19
7536: PPUSH
7537: CALL_OW 469
7541: ST_TO_ADDR
// if not coords then
7542: LD_VAR 0 2
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7971
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7551: LD_ADDR_VAR 0 1
7555: PUSH
7556: LD_INT 22
7558: PUSH
7559: LD_OWVAR 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 30
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 2
7621: ARRAY
7622: PPUSH
7623: CALL_OW 73
7627: ST_TO_ADDR
// if not lab then
7628: LD_VAR 0 1
7632: NOT
7633: IFFALSE 7650
// begin if debug then
7635: LD_EXP 6
7639: IFFALSE 7648
// AddToLog ( Cannot find lab for artifact! ) ;
7641: LD_STRING Cannot find lab for artifact!
7643: PPUSH
7644: CALL_OW 561
// exit ;
7648: GO 7971
// end ; if not player_artifact_ready then
7650: LD_EXP 29
7654: NOT
7655: IFFALSE 7779
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 2
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PPUSH
7680: CALL_OW 297
7684: PUSH
7685: LD_EXP 23
7689: LESS
7690: IFFALSE 7755
// begin if BuildingStatus ( lab ) = bs_idle then
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 461
7701: PUSH
7702: LD_INT 2
7704: EQUAL
7705: IFFALSE 7731
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7707: LD_OWVAR 2
7711: PPUSH
7712: LD_EXP 25
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 468
7729: GO 7753
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7731: LD_OWVAR 2
7735: PPUSH
7736: LD_EXP 25
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 468
// end else
7753: GO 7777
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7755: LD_OWVAR 2
7759: PPUSH
7760: LD_EXP 25
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 468
// end else
7777: GO 7971
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_VAR 0 2
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 297
7806: PUSH
7807: LD_EXP 23
7811: LESS
7812: IFFALSE 7927
// begin if BuildingStatus ( lab ) = bs_idle then
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 461
7823: PUSH
7824: LD_INT 2
7826: EQUAL
7827: IFFALSE 7881
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7829: LD_OWVAR 2
7833: PPUSH
7834: LD_EXP 20
7838: PPUSH
7839: LD_INT 4
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 468
// if player_artifact_selected_unit then
7851: LD_EXP 30
7855: IFFALSE 7879
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7857: LD_OWVAR 2
7861: PPUSH
7862: LD_EXP 21
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 468
// end else
7879: GO 7925
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7881: LD_OWVAR 2
7885: PPUSH
7886: LD_EXP 20
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7903: LD_OWVAR 2
7907: PPUSH
7908: LD_EXP 21
7912: PPUSH
7913: LD_INT 1
7915: PPUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 468
// end ; end else
7925: GO 7971
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7927: LD_OWVAR 2
7931: PPUSH
7932: LD_EXP 20
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7949: LD_OWVAR 2
7953: PPUSH
7954: LD_EXP 21
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 468
// end ; end ;
7971: PPOPN 2
7973: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: LD_EXP 19
7991: PPUSH
7992: CALL_OW 469
7996: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_OWVAR 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 30
8019: PUSH
8020: LD_INT 8
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 11
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: PPUSH
8051: LD_VAR 0 5
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PPUSH
8060: LD_VAR 0 5
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PPUSH
8069: CALL_OW 73
8073: ST_TO_ADDR
// if not lab then
8074: LD_VAR 0 7
8078: NOT
8079: IFFALSE 8096
// begin if debug then
8081: LD_EXP 6
8085: IFFALSE 8094
// AddToLog ( Cannot find lab! ) ;
8087: LD_STRING Cannot find lab!
8089: PPUSH
8090: CALL_OW 561
// exit ;
8094: GO 8531
// end ; if icon = player_artifact_icon_res then
8096: LD_VAR 0 2
8100: PUSH
8101: LD_EXP 25
8105: EQUAL
8106: IFFALSE 8147
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8125: LD_OWVAR 2
8129: PPUSH
8130: LD_EXP 25
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: CALL_OW 468
// end ; if icon = player_artifact_icon then
8147: LD_VAR 0 2
8151: PUSH
8152: LD_EXP 20
8156: EQUAL
8157: IFFALSE 8196
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8159: LD_VAR 0 3
8163: PPUSH
8164: CALL_OW 247
8168: PUSH
8169: LD_INT 1
8171: EQUAL
8172: PUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 310
8182: NOT
8183: AND
8184: IFFALSE 8196
// player_artifact_selected_unit := cr1 ;
8186: LD_ADDR_EXP 30
8190: PUSH
8191: LD_VAR 0 3
8195: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8196: LD_VAR 0 2
8200: PUSH
8201: LD_EXP 21
8205: EQUAL
8206: IFFALSE 8521
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 428
8222: PUSH
8223: LD_INT 0
8225: NONEQUAL
8226: PUSH
8227: LD_VAR 0 3
8231: PPUSH
8232: LD_VAR 0 4
8236: PPUSH
8237: CALL_OW 546
8241: PUSH
8242: LD_INT 6
8244: ARRAY
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: LD_INT 4
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 6
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: OR
8265: IFFALSE 8269
// exit ;
8267: GO 8531
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_EXP 30
8278: PPUSH
8279: CALL_OW 250
8283: PPUSH
8284: LD_EXP 30
8288: PPUSH
8289: CALL_OW 251
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: LD_VAR 0 4
8303: PPUSH
8304: CALL_OW 298
8308: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8309: LD_ADDR_VAR 0 10
8313: PUSH
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL 7300 0 1
8323: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8324: LD_VAR 0 10
8328: PUSH
8329: LD_OWVAR 2
8333: PPUSH
8334: CALL 5240 0 1
8338: GREATER
8339: IFFALSE 8353
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8341: LD_STRING ArtFrogJumpCost
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: CALL_OW 338
// exit ;
8351: GO 8531
// end ; SetSibResources ( your_side , cost ) ;
8353: LD_OWVAR 2
8357: PPUSH
8358: LD_VAR 0 10
8362: PPUSH
8363: CALL 5364 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 6
8379: PPUSH
8380: LD_INT 5
8382: NEG
8383: PPUSH
8384: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 6
8400: PPUSH
8401: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8405: LD_EXP 30
8409: PPUSH
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: LD_INT 1
8425: PPUSH
8426: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8430: LD_VAR 0 3
8434: PPUSH
8435: LD_VAR 0 4
8439: PPUSH
8440: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8444: LD_ADDR_EXP 30
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// player_artifact_researched := false ;
8452: LD_ADDR_EXP 22
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8460: LD_OWVAR 2
8464: PPUSH
8465: LD_EXP 20
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_EXP 21
8491: PPUSH
8492: LD_INT 0
8494: PPUSH
8495: LD_VAR 0 7
8499: PPUSH
8500: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8504: LD_EXP 26
8508: PPUSH
8509: CALL_OW 67
// player_artifact_researched := true ;
8513: LD_ADDR_EXP 22
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// end ; if debug then
8521: LD_EXP 6
8525: IFFALSE 8531
// DebugArtifact ;
8527: CALL 7064 0 0
// end ;
8531: PPOPN 10
8533: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 255
8543: PUSH
8544: LD_OWVAR 2
8548: EQUAL
8549: IFFALSE 8588
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8551: LD_OWVAR 2
8555: PPUSH
8556: LD_EXP 25
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 468
// player_artifact_ready := true ;
8573: LD_ADDR_EXP 29
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8581: LD_STRING ArtFrogJump
8583: PPUSH
8584: CALL_OW 339
// end ; end ;
8588: PPOPN 1
8590: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8591: LD_OWVAR 2
8595: PPUSH
8596: LD_EXP 25
8600: PPUSH
8601: LD_INT 2
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 468
// end ;
8613: PPOPN 2
8615: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: LD_INT 81
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 34
8639: PUSH
8640: LD_INT 48
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 81
8658: PUSH
8659: LD_INT 7
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: ADD
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 34
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: LD_INT 49
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 47
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 34
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 31
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: ST_TO_ADDR
// if not tmp then
8926: LD_VAR 0 3
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9056
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 34
8942: PUSH
8943: LD_INT 48
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 72
8954: IFFALSE 8987
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8956: LD_ADDR_VAR 0 4
8960: PUSH
8961: LD_VAR 0 3
8965: PPUSH
8966: LD_INT 34
8968: PUSH
8969: LD_INT 48
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: ST_TO_ADDR
8985: GO 9011
// un := tmp [ rand ( 1 , tmp ) ] ;
8987: LD_ADDR_VAR 0 4
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: CALL_OW 12
9009: ARRAY
9010: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9011: LD_EXP 10
9015: NOT
9016: IFFALSE 9047
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9018: LD_ADDR_EXP 10
9022: PUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 250
9032: PUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: CALL_OW 251
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// KillUnit ( un ) ;
9047: LD_VAR 0 4
9051: PPUSH
9052: CALL_OW 66
// end ;
9056: LD_VAR 0 1
9060: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 6
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 33
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: ST_TO_ADDR
// if not tmp then
9101: LD_VAR 0 4
9105: NOT
9106: IFFALSE 9110
// exit ;
9108: GO 9248
// un := tmp [ rand ( 1 , tmp ) ] ;
9110: LD_ADDR_VAR 0 3
9114: PUSH
9115: LD_VAR 0 4
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 12
9132: ARRAY
9133: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 7
9141: PPUSH
9142: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 264
9155: PUSH
9156: LD_INT 48
9158: EQUAL
9159: IFFALSE 9178
// ComAttackPlace ( un , 194 , 19 ) else
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 194
9168: PPUSH
9169: LD_INT 19
9171: PPUSH
9172: CALL_OW 116
9176: GO 9212
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_INT 81
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: CALL_OW 74
9207: PPUSH
9208: CALL_OW 115
// if not alliance_used_artifact_2 then
9212: LD_EXP 11
9216: NOT
9217: IFFALSE 9248
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9219: LD_ADDR_EXP 11
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 250
9233: PUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 251
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: ST_TO_ADDR
// end ; end_of_file
9248: LD_VAR 0 1
9252: RET
// export function DebugMode ; var i , j , b ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
// enable_addtolog = true ;
9259: LD_ADDR_OWVAR 81
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// FogOff ( 6 ) ;
9267: LD_INT 6
9269: PPUSH
9270: CALL_OW 344
// uc_side = 6 ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_INT 6
9281: ST_TO_ADDR
// uc_nation = 3 ;
9282: LD_ADDR_OWVAR 21
9286: PUSH
9287: LD_INT 3
9289: ST_TO_ADDR
// bc_level = 10 ;
9290: LD_ADDR_OWVAR 43
9294: PUSH
9295: LD_INT 10
9297: ST_TO_ADDR
// bc_type := b_lab_full ;
9298: LD_ADDR_OWVAR 42
9302: PUSH
9303: LD_INT 8
9305: ST_TO_ADDR
// bc_kind1 := 11 ;
9306: LD_ADDR_OWVAR 44
9310: PUSH
9311: LD_INT 11
9313: ST_TO_ADDR
// bc_kind2 := 12 ;
9314: LD_ADDR_OWVAR 45
9318: PUSH
9319: LD_INT 12
9321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9322: LD_INT 189
9324: PPUSH
9325: LD_INT 20
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 47
// bc_type := b_warehouse ;
9335: LD_ADDR_OWVAR 42
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: LD_INT 201
9350: PPUSH
9351: LD_INT 22
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 47
9361: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 274
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 10000
9377: PPUSH
9378: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: LD_INT 10000
9397: PPUSH
9398: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9402: LD_VAR 0 4
9406: PPUSH
9407: CALL_OW 274
9411: PPUSH
9412: LD_INT 3
9414: PPUSH
9415: LD_INT 10000
9417: PPUSH
9418: CALL_OW 277
// bc_type := b_siberite_power ;
9422: LD_ADDR_OWVAR 42
9426: PUSH
9427: LD_INT 28
9429: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9430: LD_ADDR_VAR 0 4
9434: PUSH
9435: LD_INT 216
9437: PPUSH
9438: LD_INT 16
9440: PPUSH
9441: LD_INT 4
9443: PPUSH
9444: CALL_OW 47
9448: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: LD_INT 219
9456: PPUSH
9457: LD_INT 16
9459: PPUSH
9460: LD_INT 4
9462: PPUSH
9463: CALL_OW 47
9467: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9468: LD_INT 55
9470: PPUSH
9471: LD_INT 6
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9481: LD_INT 56
9483: PPUSH
9484: LD_INT 6
9486: PPUSH
9487: LD_INT 2
9489: PPUSH
9490: CALL_OW 322
// end ; end_of_file
9494: LD_VAR 0 1
9498: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 264
9514: PUSH
9515: LD_INT 91
9517: EQUAL
9518: IFFALSE 9590
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
9520: LD_INT 68
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 255
9532: PPUSH
9533: CALL_OW 321
9537: PUSH
9538: LD_INT 2
9540: EQUAL
9541: IFFALSE 9553
// eff := 70 else
9543: LD_ADDR_VAR 0 4
9547: PUSH
9548: LD_INT 70
9550: ST_TO_ADDR
9551: GO 9561
// eff := 30 ;
9553: LD_ADDR_VAR 0 4
9557: PUSH
9558: LD_INT 30
9560: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: CALL_OW 250
9570: PPUSH
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 251
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: CALL_OW 495
// end ; end ;
9590: LD_VAR 0 2
9594: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9595: LD_INT 0
9597: PPUSH
// end ;
9598: LD_VAR 0 4
9602: RET
// export function SOS_Command ( cmd ) ; begin
9603: LD_INT 0
9605: PPUSH
// end ;
9606: LD_VAR 0 2
9610: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9611: LD_INT 0
9613: PPUSH
// end ;
9614: LD_VAR 0 6
9618: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
// if not vehicle or not factory then
9623: LD_VAR 0 1
9627: NOT
9628: PUSH
9629: LD_VAR 0 2
9633: NOT
9634: OR
9635: IFFALSE 9639
// exit ;
9637: GO 9870
// if factoryWaypoints >= factory then
9639: LD_EXP 105
9643: PUSH
9644: LD_VAR 0 2
9648: GREATEREQUAL
9649: IFFALSE 9870
// if factoryWaypoints [ factory ] then
9651: LD_EXP 105
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: IFFALSE 9870
// begin if GetControl ( vehicle ) = control_manual then
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9757
// begin driver := IsDrivenBy ( vehicle ) ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 311
9692: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9693: LD_VAR 0 4
9697: PPUSH
9698: LD_EXP 105
9702: PUSH
9703: LD_VAR 0 2
9707: ARRAY
9708: PUSH
9709: LD_INT 3
9711: ARRAY
9712: PPUSH
9713: LD_EXP 105
9717: PUSH
9718: LD_VAR 0 2
9722: ARRAY
9723: PUSH
9724: LD_INT 4
9726: ARRAY
9727: PPUSH
9728: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9732: LD_VAR 0 4
9736: PPUSH
9737: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
9741: LD_VAR 0 4
9745: PPUSH
9746: LD_VAR 0 2
9750: PPUSH
9751: CALL_OW 180
// end else
9755: GO 9870
// if GetControl ( vehicle ) = control_remote then
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 263
9766: PUSH
9767: LD_INT 2
9769: EQUAL
9770: IFFALSE 9831
// begin wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// if Connect ( vehicle ) then
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL 37530 0 1
9788: IFFALSE 9829
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_EXP 105
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: PUSH
9806: LD_INT 3
9808: ARRAY
9809: PPUSH
9810: LD_EXP 105
9814: PUSH
9815: LD_VAR 0 2
9819: ARRAY
9820: PUSH
9821: LD_INT 4
9823: ARRAY
9824: PPUSH
9825: CALL_OW 171
// end else
9829: GO 9870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_EXP 105
9840: PUSH
9841: LD_VAR 0 2
9845: ARRAY
9846: PUSH
9847: LD_INT 3
9849: ARRAY
9850: PPUSH
9851: LD_EXP 105
9855: PUSH
9856: LD_VAR 0 2
9860: ARRAY
9861: PUSH
9862: LD_INT 4
9864: ARRAY
9865: PPUSH
9866: CALL_OW 171
// end ; end ;
9870: LD_VAR 0 3
9874: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
9875: LD_INT 0
9877: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
9878: LD_VAR 0 1
9882: PUSH
9883: LD_INT 250
9885: EQUAL
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 81
9899: EQUAL
9900: AND
9901: IFFALSE 9922
// MinerPlaceMine ( unit , x , y ) ;
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: LD_VAR 0 5
9917: PPUSH
9918: CALL 12307 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
9922: LD_VAR 0 1
9926: PUSH
9927: LD_INT 251
9929: EQUAL
9930: PUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: CALL_OW 264
9940: PUSH
9941: LD_INT 81
9943: EQUAL
9944: AND
9945: IFFALSE 9966
// MinerDetonateMine ( unit , x , y ) ;
9947: LD_VAR 0 2
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 12582 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
9966: LD_VAR 0 1
9970: PUSH
9971: LD_INT 252
9973: EQUAL
9974: PUSH
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 264
9984: PUSH
9985: LD_INT 81
9987: EQUAL
9988: AND
9989: IFFALSE 10010
// MinerCreateMinefield ( unit , x , y ) ;
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 4
10000: PPUSH
10001: LD_VAR 0 5
10005: PPUSH
10006: CALL 12999 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 253
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 257
10028: PUSH
10029: LD_INT 5
10031: EQUAL
10032: AND
10033: IFFALSE 10054
// ComBinocular ( unit , x , y ) ;
10035: LD_VAR 0 2
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_VAR 0 5
10049: PPUSH
10050: CALL 13368 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10054: LD_VAR 0 1
10058: PUSH
10059: LD_INT 254
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 264
10072: PUSH
10073: LD_INT 99
10075: EQUAL
10076: AND
10077: PUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: CALL_OW 263
10087: PUSH
10088: LD_INT 3
10090: EQUAL
10091: AND
10092: IFFALSE 10108
// HackDestroyVehicle ( unit , selectedUnit ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: CALL 11671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10108: LD_VAR 0 1
10112: PUSH
10113: LD_INT 255
10115: EQUAL
10116: PUSH
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL_OW 264
10126: PUSH
10127: LD_INT 14
10129: PUSH
10130: LD_INT 53
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: IN
10137: AND
10138: PUSH
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 5
10148: PPUSH
10149: CALL_OW 488
10153: AND
10154: IFFALSE 10178
// CutTreeXYR ( unit , x , y , 12 ) ;
10156: LD_VAR 0 2
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: LD_VAR 0 5
10170: PPUSH
10171: LD_INT 12
10173: PPUSH
10174: CALL 10241 0 4
// if cmd = 256 then
10178: LD_VAR 0 1
10182: PUSH
10183: LD_INT 256
10185: EQUAL
10186: IFFALSE 10207
// SetFactoryWaypoint ( unit , x , y ) ;
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: LD_VAR 0 5
10202: PPUSH
10203: CALL 28279 0 3
// if cmd = 257 then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_INT 257
10214: EQUAL
10215: IFFALSE 10236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: LD_VAR 0 5
10231: PPUSH
10232: CALL 28641 0 3
// end ;
10236: LD_VAR 0 6
10240: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10252: LD_VAR 0 1
10256: NOT
10257: PUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 488
10272: NOT
10273: OR
10274: PUSH
10275: LD_VAR 0 4
10279: NOT
10280: OR
10281: IFFALSE 10285
// exit ;
10283: GO 10625
// list := [ ] ;
10285: LD_ADDR_VAR 0 13
10289: PUSH
10290: EMPTY
10291: ST_TO_ADDR
// if x - r < 0 then
10292: LD_VAR 0 2
10296: PUSH
10297: LD_VAR 0 4
10301: MINUS
10302: PUSH
10303: LD_INT 0
10305: LESS
10306: IFFALSE 10318
// min_x := 0 else
10308: LD_ADDR_VAR 0 7
10312: PUSH
10313: LD_INT 0
10315: ST_TO_ADDR
10316: GO 10334
// min_x := x - r ;
10318: LD_ADDR_VAR 0 7
10322: PUSH
10323: LD_VAR 0 2
10327: PUSH
10328: LD_VAR 0 4
10332: MINUS
10333: ST_TO_ADDR
// if y - r < 0 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_VAR 0 4
10343: MINUS
10344: PUSH
10345: LD_INT 0
10347: LESS
10348: IFFALSE 10360
// min_y := 0 else
10350: LD_ADDR_VAR 0 8
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
10358: GO 10376
// min_y := y - r ;
10360: LD_ADDR_VAR 0 8
10364: PUSH
10365: LD_VAR 0 3
10369: PUSH
10370: LD_VAR 0 4
10374: MINUS
10375: ST_TO_ADDR
// max_x := x + r ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: LD_VAR 0 4
10390: PLUS
10391: ST_TO_ADDR
// max_y := y + r ;
10392: LD_ADDR_VAR 0 10
10396: PUSH
10397: LD_VAR 0 3
10401: PUSH
10402: LD_VAR 0 4
10406: PLUS
10407: ST_TO_ADDR
// for _x = min_x to max_x do
10408: LD_ADDR_VAR 0 11
10412: PUSH
10413: DOUBLE
10414: LD_VAR 0 7
10418: DEC
10419: ST_TO_ADDR
10420: LD_VAR 0 9
10424: PUSH
10425: FOR_TO
10426: IFFALSE 10543
// for _y = min_y to max_y do
10428: LD_ADDR_VAR 0 12
10432: PUSH
10433: DOUBLE
10434: LD_VAR 0 8
10438: DEC
10439: ST_TO_ADDR
10440: LD_VAR 0 10
10444: PUSH
10445: FOR_TO
10446: IFFALSE 10539
// begin if not ValidHex ( _x , _y ) then
10448: LD_VAR 0 11
10452: PPUSH
10453: LD_VAR 0 12
10457: PPUSH
10458: CALL_OW 488
10462: NOT
10463: IFFALSE 10467
// continue ;
10465: GO 10445
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10467: LD_VAR 0 11
10471: PPUSH
10472: LD_VAR 0 12
10476: PPUSH
10477: CALL_OW 351
10481: PUSH
10482: LD_VAR 0 11
10486: PPUSH
10487: LD_VAR 0 12
10491: PPUSH
10492: CALL_OW 554
10496: AND
10497: IFFALSE 10537
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10499: LD_ADDR_VAR 0 13
10503: PUSH
10504: LD_VAR 0 13
10508: PPUSH
10509: LD_VAR 0 13
10513: PUSH
10514: LD_INT 1
10516: PLUS
10517: PPUSH
10518: LD_VAR 0 11
10522: PUSH
10523: LD_VAR 0 12
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 2
10536: ST_TO_ADDR
// end ;
10537: GO 10445
10539: POP
10540: POP
10541: GO 10425
10543: POP
10544: POP
// if not list then
10545: LD_VAR 0 13
10549: NOT
10550: IFFALSE 10554
// exit ;
10552: GO 10625
// for i in list do
10554: LD_ADDR_VAR 0 6
10558: PUSH
10559: LD_VAR 0 13
10563: PUSH
10564: FOR_IN
10565: IFFALSE 10623
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_STRING M
10574: PUSH
10575: LD_VAR 0 6
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PUSH
10584: LD_VAR 0 6
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PUSH
10593: LD_INT 0
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: PPUSH
10617: CALL_OW 447
10621: GO 10564
10623: POP
10624: POP
// end ;
10625: LD_VAR 0 5
10629: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
10630: LD_EXP 36
10634: NOT
10635: IFFALSE 10685
10637: GO 10639
10639: DISABLE
// begin initHack := true ;
10640: LD_ADDR_EXP 36
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// hackTanks := [ ] ;
10648: LD_ADDR_EXP 37
10652: PUSH
10653: EMPTY
10654: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
10655: LD_ADDR_EXP 38
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// hackLimit := 3 ;
10662: LD_ADDR_EXP 39
10666: PUSH
10667: LD_INT 3
10669: ST_TO_ADDR
// hackDist := 12 ;
10670: LD_ADDR_EXP 40
10674: PUSH
10675: LD_INT 12
10677: ST_TO_ADDR
// hackCounter := [ ] ;
10678: LD_ADDR_EXP 41
10682: PUSH
10683: EMPTY
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
10686: LD_EXP 36
10690: PUSH
10691: LD_INT 34
10693: PUSH
10694: LD_INT 99
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 69
10705: AND
10706: IFFALSE 10959
10708: GO 10710
10710: DISABLE
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
// begin enable ;
10715: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 34
10723: PUSH
10724: LD_INT 99
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10957
// begin if not i in hackTanks then
10739: LD_VAR 0 1
10743: PUSH
10744: LD_EXP 37
10748: IN
10749: NOT
10750: IFFALSE 10833
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
10752: LD_ADDR_EXP 37
10756: PUSH
10757: LD_EXP 37
10761: PPUSH
10762: LD_EXP 37
10766: PUSH
10767: LD_INT 1
10769: PLUS
10770: PPUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 1
10780: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
10781: LD_ADDR_EXP 38
10785: PUSH
10786: LD_EXP 38
10790: PPUSH
10791: LD_EXP 38
10795: PUSH
10796: LD_INT 1
10798: PLUS
10799: PPUSH
10800: EMPTY
10801: PPUSH
10802: CALL_OW 1
10806: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
10807: LD_ADDR_EXP 41
10811: PUSH
10812: LD_EXP 41
10816: PPUSH
10817: LD_EXP 41
10821: PUSH
10822: LD_INT 1
10824: PLUS
10825: PPUSH
10826: EMPTY
10827: PPUSH
10828: CALL_OW 1
10832: ST_TO_ADDR
// end ; if not IsOk ( i ) then
10833: LD_VAR 0 1
10837: PPUSH
10838: CALL_OW 302
10842: NOT
10843: IFFALSE 10856
// begin HackUnlinkAll ( i ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL 10962 0 1
// continue ;
10854: GO 10736
// end ; HackCheckCapturedStatus ( i ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: CALL 11405 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_INT 81
10872: PUSH
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL_OW 255
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 33
10889: PUSH
10890: LD_INT 3
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 91
10899: PUSH
10900: LD_VAR 0 1
10904: PUSH
10905: LD_EXP 40
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 50
10917: PUSH
10918: EMPTY
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 69
10931: ST_TO_ADDR
// if not tmp then
10932: LD_VAR 0 2
10936: NOT
10937: IFFALSE 10941
// continue ;
10939: GO 10736
// HackLink ( i , tmp ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: CALL 11098 0 2
// end ;
10955: GO 10736
10957: POP
10958: POP
// end ;
10959: PPOPN 2
10961: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
10962: LD_INT 0
10964: PPUSH
10965: PPUSH
10966: PPUSH
// if not hack in hackTanks then
10967: LD_VAR 0 1
10971: PUSH
10972: LD_EXP 37
10976: IN
10977: NOT
10978: IFFALSE 10982
// exit ;
10980: GO 11093
// index := GetElementIndex ( hackTanks , hack ) ;
10982: LD_ADDR_VAR 0 4
10986: PUSH
10987: LD_EXP 37
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL 34337 0 2
11001: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11002: LD_EXP 38
11006: PUSH
11007: LD_VAR 0 4
11011: ARRAY
11012: IFFALSE 11093
// begin for i in hackTanksCaptured [ index ] do
11014: LD_ADDR_VAR 0 3
11018: PUSH
11019: LD_EXP 38
11023: PUSH
11024: LD_VAR 0 4
11028: ARRAY
11029: PUSH
11030: FOR_IN
11031: IFFALSE 11057
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11033: LD_VAR 0 3
11037: PUSH
11038: LD_INT 1
11040: ARRAY
11041: PPUSH
11042: LD_VAR 0 3
11046: PUSH
11047: LD_INT 2
11049: ARRAY
11050: PPUSH
11051: CALL_OW 235
11055: GO 11030
11057: POP
11058: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11059: LD_ADDR_EXP 38
11063: PUSH
11064: LD_EXP 38
11068: PPUSH
11069: LD_VAR 0 4
11073: PPUSH
11074: EMPTY
11075: PPUSH
11076: CALL_OW 1
11080: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11081: LD_VAR 0 1
11085: PPUSH
11086: LD_INT 0
11088: PPUSH
11089: CALL_OW 505
// end ; end ;
11093: LD_VAR 0 2
11097: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11098: LD_INT 0
11100: PPUSH
11101: PPUSH
11102: PPUSH
// if not hack in hackTanks or not vehicles then
11103: LD_VAR 0 1
11107: PUSH
11108: LD_EXP 37
11112: IN
11113: NOT
11114: PUSH
11115: LD_VAR 0 2
11119: NOT
11120: OR
11121: IFFALSE 11125
// exit ;
11123: GO 11400
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11125: LD_ADDR_VAR 0 2
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_VAR 0 2
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL 34987 0 4
11150: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_EXP 37
11160: PPUSH
11161: LD_VAR 0 1
11165: PPUSH
11166: CALL 34337 0 2
11170: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11171: LD_EXP 38
11175: PUSH
11176: LD_VAR 0 5
11180: ARRAY
11181: PUSH
11182: LD_EXP 39
11186: LESS
11187: IFFALSE 11376
// begin for i := 1 to vehicles do
11189: LD_ADDR_VAR 0 4
11193: PUSH
11194: DOUBLE
11195: LD_INT 1
11197: DEC
11198: ST_TO_ADDR
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_TO
11205: IFFALSE 11374
// begin if hackTanksCaptured [ index ] = hackLimit then
11207: LD_EXP 38
11211: PUSH
11212: LD_VAR 0 5
11216: ARRAY
11217: PUSH
11218: LD_EXP 39
11222: EQUAL
11223: IFFALSE 11227
// break ;
11225: GO 11374
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11227: LD_ADDR_EXP 41
11231: PUSH
11232: LD_EXP 41
11236: PPUSH
11237: LD_VAR 0 5
11241: PPUSH
11242: LD_EXP 41
11246: PUSH
11247: LD_VAR 0 5
11251: ARRAY
11252: PUSH
11253: LD_INT 1
11255: PLUS
11256: PPUSH
11257: CALL_OW 1
11261: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11262: LD_ADDR_EXP 38
11266: PUSH
11267: LD_EXP 38
11271: PPUSH
11272: LD_VAR 0 5
11276: PUSH
11277: LD_EXP 38
11281: PUSH
11282: LD_VAR 0 5
11286: ARRAY
11287: PUSH
11288: LD_INT 1
11290: PLUS
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: LD_VAR 0 2
11300: PUSH
11301: LD_VAR 0 4
11305: ARRAY
11306: PUSH
11307: LD_VAR 0 2
11311: PUSH
11312: LD_VAR 0 4
11316: ARRAY
11317: PPUSH
11318: CALL_OW 255
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL 34552 0 3
11331: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11332: LD_VAR 0 2
11336: PUSH
11337: LD_VAR 0 4
11341: ARRAY
11342: PPUSH
11343: LD_VAR 0 1
11347: PPUSH
11348: CALL_OW 255
11352: PPUSH
11353: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
11357: LD_VAR 0 2
11361: PUSH
11362: LD_VAR 0 4
11366: ARRAY
11367: PPUSH
11368: CALL_OW 141
// end ;
11372: GO 11204
11374: POP
11375: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11376: LD_VAR 0 1
11380: PPUSH
11381: LD_EXP 38
11385: PUSH
11386: LD_VAR 0 5
11390: ARRAY
11391: PUSH
11392: LD_INT 0
11394: PLUS
11395: PPUSH
11396: CALL_OW 505
// end ;
11400: LD_VAR 0 3
11404: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
11405: LD_INT 0
11407: PPUSH
11408: PPUSH
11409: PPUSH
11410: PPUSH
// if not hack in hackTanks then
11411: LD_VAR 0 1
11415: PUSH
11416: LD_EXP 37
11420: IN
11421: NOT
11422: IFFALSE 11426
// exit ;
11424: GO 11666
// index := GetElementIndex ( hackTanks , hack ) ;
11426: LD_ADDR_VAR 0 4
11430: PUSH
11431: LD_EXP 37
11435: PPUSH
11436: LD_VAR 0 1
11440: PPUSH
11441: CALL 34337 0 2
11445: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
11446: LD_ADDR_VAR 0 3
11450: PUSH
11451: DOUBLE
11452: LD_EXP 38
11456: PUSH
11457: LD_VAR 0 4
11461: ARRAY
11462: INC
11463: ST_TO_ADDR
11464: LD_INT 1
11466: PUSH
11467: FOR_DOWNTO
11468: IFFALSE 11640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
11470: LD_ADDR_VAR 0 5
11474: PUSH
11475: LD_EXP 38
11479: PUSH
11480: LD_VAR 0 4
11484: ARRAY
11485: PUSH
11486: LD_VAR 0 3
11490: ARRAY
11491: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
11492: LD_VAR 0 5
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: CALL_OW 302
11505: NOT
11506: PUSH
11507: LD_VAR 0 5
11511: PUSH
11512: LD_INT 1
11514: ARRAY
11515: PPUSH
11516: CALL_OW 255
11520: PUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 255
11530: NONEQUAL
11531: OR
11532: IFFALSE 11638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
11534: LD_VAR 0 5
11538: PUSH
11539: LD_INT 1
11541: ARRAY
11542: PPUSH
11543: CALL_OW 305
11547: PUSH
11548: LD_VAR 0 5
11552: PUSH
11553: LD_INT 1
11555: ARRAY
11556: PPUSH
11557: CALL_OW 255
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 255
11571: EQUAL
11572: AND
11573: IFFALSE 11597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
11575: LD_VAR 0 5
11579: PUSH
11580: LD_INT 1
11582: ARRAY
11583: PPUSH
11584: LD_VAR 0 5
11588: PUSH
11589: LD_INT 2
11591: ARRAY
11592: PPUSH
11593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
11597: LD_ADDR_EXP 38
11601: PUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_VAR 0 4
11611: PPUSH
11612: LD_EXP 38
11616: PUSH
11617: LD_VAR 0 4
11621: ARRAY
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: CALL_OW 3
11632: PPUSH
11633: CALL_OW 1
11637: ST_TO_ADDR
// end ; end ;
11638: GO 11467
11640: POP
11641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11642: LD_VAR 0 1
11646: PPUSH
11647: LD_EXP 38
11651: PUSH
11652: LD_VAR 0 4
11656: ARRAY
11657: PUSH
11658: LD_INT 0
11660: PLUS
11661: PPUSH
11662: CALL_OW 505
// end ;
11666: LD_VAR 0 2
11670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
11675: PPUSH
11676: PPUSH
// if not hack in hackTanks then
11677: LD_VAR 0 1
11681: PUSH
11682: LD_EXP 37
11686: IN
11687: NOT
11688: IFFALSE 11692
// exit ;
11690: GO 11777
// index := GetElementIndex ( hackTanks , hack ) ;
11692: LD_ADDR_VAR 0 5
11696: PUSH
11697: LD_EXP 37
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL 34337 0 2
11711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
11712: LD_ADDR_VAR 0 4
11716: PUSH
11717: DOUBLE
11718: LD_INT 1
11720: DEC
11721: ST_TO_ADDR
11722: LD_EXP 38
11726: PUSH
11727: LD_VAR 0 5
11731: ARRAY
11732: PUSH
11733: FOR_TO
11734: IFFALSE 11775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
11736: LD_EXP 38
11740: PUSH
11741: LD_VAR 0 5
11745: ARRAY
11746: PUSH
11747: LD_VAR 0 4
11751: ARRAY
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PUSH
11757: LD_VAR 0 2
11761: EQUAL
11762: IFFALSE 11773
// KillUnit ( vehicle ) ;
11764: LD_VAR 0 2
11768: PPUSH
11769: CALL_OW 66
11773: GO 11733
11775: POP
11776: POP
// end ;
11777: LD_VAR 0 3
11781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
11782: LD_EXP 42
11786: NOT
11787: IFFALSE 11822
11789: GO 11791
11791: DISABLE
// begin initMiner := true ;
11792: LD_ADDR_EXP 42
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// minersList := [ ] ;
11800: LD_ADDR_EXP 43
11804: PUSH
11805: EMPTY
11806: ST_TO_ADDR
// minerMinesList := [ ] ;
11807: LD_ADDR_EXP 44
11811: PUSH
11812: EMPTY
11813: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
11814: LD_ADDR_EXP 45
11818: PUSH
11819: LD_INT 5
11821: ST_TO_ADDR
// end ;
11822: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
11823: LD_EXP 42
11827: PUSH
11828: LD_INT 34
11830: PUSH
11831: LD_INT 81
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: AND
11843: IFFALSE 12304
11845: GO 11847
11847: DISABLE
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
11852: PPUSH
11853: PPUSH
// begin enable ;
11854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
11855: LD_ADDR_VAR 0 1
11859: PUSH
11860: LD_INT 34
11862: PUSH
11863: LD_INT 81
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11948
// begin if not i in minersList then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 43
11887: IN
11888: NOT
11889: IFFALSE 11946
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
11891: LD_ADDR_EXP 43
11895: PUSH
11896: LD_EXP 43
11900: PPUSH
11901: LD_EXP 43
11905: PUSH
11906: LD_INT 1
11908: PLUS
11909: PPUSH
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 1
11919: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11920: LD_ADDR_EXP 44
11924: PUSH
11925: LD_EXP 44
11929: PPUSH
11930: LD_EXP 44
11934: PUSH
11935: LD_INT 1
11937: PLUS
11938: PPUSH
11939: EMPTY
11940: PPUSH
11941: CALL_OW 1
11945: ST_TO_ADDR
// end end ;
11946: GO 11875
11948: POP
11949: POP
// for i := minerMinesList downto 1 do
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: DOUBLE
11956: LD_EXP 44
11960: INC
11961: ST_TO_ADDR
11962: LD_INT 1
11964: PUSH
11965: FOR_DOWNTO
11966: IFFALSE 12302
// begin if IsLive ( minersList [ i ] ) then
11968: LD_EXP 43
11972: PUSH
11973: LD_VAR 0 1
11977: ARRAY
11978: PPUSH
11979: CALL_OW 300
11983: IFFALSE 12011
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
11985: LD_EXP 43
11989: PUSH
11990: LD_VAR 0 1
11994: ARRAY
11995: PPUSH
11996: LD_EXP 44
12000: PUSH
12001: LD_VAR 0 1
12005: ARRAY
12006: PPUSH
12007: CALL_OW 505
// if not minerMinesList [ i ] then
12011: LD_EXP 44
12015: PUSH
12016: LD_VAR 0 1
12020: ARRAY
12021: NOT
12022: IFFALSE 12026
// continue ;
12024: GO 11965
// for j := minerMinesList [ i ] downto 1 do
12026: LD_ADDR_VAR 0 2
12030: PUSH
12031: DOUBLE
12032: LD_EXP 44
12036: PUSH
12037: LD_VAR 0 1
12041: ARRAY
12042: INC
12043: ST_TO_ADDR
12044: LD_INT 1
12046: PUSH
12047: FOR_DOWNTO
12048: IFFALSE 12298
// begin side := GetSide ( minersList [ i ] ) ;
12050: LD_ADDR_VAR 0 3
12054: PUSH
12055: LD_EXP 43
12059: PUSH
12060: LD_VAR 0 1
12064: ARRAY
12065: PPUSH
12066: CALL_OW 255
12070: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_EXP 44
12080: PUSH
12081: LD_VAR 0 1
12085: ARRAY
12086: PUSH
12087: LD_VAR 0 2
12091: ARRAY
12092: PUSH
12093: LD_INT 1
12095: ARRAY
12096: PPUSH
12097: LD_EXP 44
12101: PUSH
12102: LD_VAR 0 1
12106: ARRAY
12107: PUSH
12108: LD_VAR 0 2
12112: ARRAY
12113: PUSH
12114: LD_INT 2
12116: ARRAY
12117: PPUSH
12118: CALL_OW 428
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 4
12127: NOT
12128: IFFALSE 12132
// continue ;
12130: GO 12047
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12132: LD_VAR 0 4
12136: PUSH
12137: LD_INT 81
12139: PUSH
12140: LD_VAR 0 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: IN
12154: PUSH
12155: LD_EXP 44
12159: PUSH
12160: LD_VAR 0 1
12164: ARRAY
12165: PUSH
12166: LD_VAR 0 2
12170: ARRAY
12171: PUSH
12172: LD_INT 1
12174: ARRAY
12175: PPUSH
12176: LD_EXP 44
12180: PUSH
12181: LD_VAR 0 1
12185: ARRAY
12186: PUSH
12187: LD_VAR 0 2
12191: ARRAY
12192: PUSH
12193: LD_INT 2
12195: ARRAY
12196: PPUSH
12197: CALL_OW 458
12201: AND
12202: IFFALSE 12296
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12204: LD_EXP 44
12208: PUSH
12209: LD_VAR 0 1
12213: ARRAY
12214: PUSH
12215: LD_VAR 0 2
12219: ARRAY
12220: PUSH
12221: LD_INT 1
12223: ARRAY
12224: PPUSH
12225: LD_EXP 44
12229: PUSH
12230: LD_VAR 0 1
12234: ARRAY
12235: PUSH
12236: LD_VAR 0 2
12240: ARRAY
12241: PUSH
12242: LD_INT 2
12244: ARRAY
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12255: LD_ADDR_EXP 44
12259: PUSH
12260: LD_EXP 44
12264: PPUSH
12265: LD_VAR 0 1
12269: PPUSH
12270: LD_EXP 44
12274: PUSH
12275: LD_VAR 0 1
12279: ARRAY
12280: PPUSH
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL_OW 3
12290: PPUSH
12291: CALL_OW 1
12295: ST_TO_ADDR
// end ; end ;
12296: GO 12047
12298: POP
12299: POP
// end ;
12300: GO 11965
12302: POP
12303: POP
// end ;
12304: PPOPN 4
12306: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12307: LD_INT 0
12309: PPUSH
12310: PPUSH
// result := false ;
12311: LD_ADDR_VAR 0 4
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12319: LD_VAR 0 1
12323: PPUSH
12324: CALL_OW 264
12328: PUSH
12329: LD_INT 81
12331: EQUAL
12332: NOT
12333: IFFALSE 12337
// exit ;
12335: GO 12577
// index := GetElementIndex ( minersList , unit ) ;
12337: LD_ADDR_VAR 0 5
12341: PUSH
12342: LD_EXP 43
12346: PPUSH
12347: LD_VAR 0 1
12351: PPUSH
12352: CALL 34337 0 2
12356: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
12357: LD_EXP 44
12361: PUSH
12362: LD_VAR 0 5
12366: ARRAY
12367: PUSH
12368: LD_EXP 45
12372: GREATEREQUAL
12373: IFFALSE 12377
// exit ;
12375: GO 12577
// ComMoveXY ( unit , x , y ) ;
12377: LD_VAR 0 1
12381: PPUSH
12382: LD_VAR 0 2
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12396: LD_INT 35
12398: PPUSH
12399: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
12403: LD_VAR 0 1
12407: PPUSH
12408: LD_VAR 0 2
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL 65721 0 3
12422: NOT
12423: PUSH
12424: LD_VAR 0 1
12428: PPUSH
12429: CALL_OW 314
12433: AND
12434: IFFALSE 12438
// exit ;
12436: GO 12577
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
12438: LD_VAR 0 2
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: CALL_OW 428
12452: PUSH
12453: LD_VAR 0 1
12457: EQUAL
12458: PUSH
12459: LD_VAR 0 1
12463: PPUSH
12464: CALL_OW 314
12468: NOT
12469: AND
12470: IFFALSE 12396
// PlaySoundXY ( x , y , PlantMine ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_STRING PlantMine
12484: PPUSH
12485: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
12489: LD_VAR 0 2
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 255
12508: PPUSH
12509: LD_INT 0
12511: PPUSH
12512: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
12516: LD_ADDR_EXP 44
12520: PUSH
12521: LD_EXP 44
12525: PPUSH
12526: LD_VAR 0 5
12530: PUSH
12531: LD_EXP 44
12535: PUSH
12536: LD_VAR 0 5
12540: ARRAY
12541: PUSH
12542: LD_INT 1
12544: PLUS
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PPUSH
12550: LD_VAR 0 2
12554: PUSH
12555: LD_VAR 0 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL 34552 0 3
12568: ST_TO_ADDR
// result := true ;
12569: LD_ADDR_VAR 0 4
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// end ;
12577: LD_VAR 0 4
12581: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
// if not unit in minersList then
12587: LD_VAR 0 1
12591: PUSH
12592: LD_EXP 43
12596: IN
12597: NOT
12598: IFFALSE 12602
// exit ;
12600: GO 12994
// index := GetElementIndex ( minersList , unit ) ;
12602: LD_ADDR_VAR 0 6
12606: PUSH
12607: LD_EXP 43
12611: PPUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL 34337 0 2
12621: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
12622: LD_ADDR_VAR 0 5
12626: PUSH
12627: DOUBLE
12628: LD_EXP 44
12632: PUSH
12633: LD_VAR 0 6
12637: ARRAY
12638: INC
12639: ST_TO_ADDR
12640: LD_INT 1
12642: PUSH
12643: FOR_DOWNTO
12644: IFFALSE 12805
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
12646: LD_EXP 44
12650: PUSH
12651: LD_VAR 0 6
12655: ARRAY
12656: PUSH
12657: LD_VAR 0 5
12661: ARRAY
12662: PUSH
12663: LD_INT 1
12665: ARRAY
12666: PUSH
12667: LD_VAR 0 2
12671: EQUAL
12672: PUSH
12673: LD_EXP 44
12677: PUSH
12678: LD_VAR 0 6
12682: ARRAY
12683: PUSH
12684: LD_VAR 0 5
12688: ARRAY
12689: PUSH
12690: LD_INT 2
12692: ARRAY
12693: PUSH
12694: LD_VAR 0 3
12698: EQUAL
12699: AND
12700: IFFALSE 12803
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
12702: LD_EXP 44
12706: PUSH
12707: LD_VAR 0 6
12711: ARRAY
12712: PUSH
12713: LD_VAR 0 5
12717: ARRAY
12718: PUSH
12719: LD_INT 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 44
12727: PUSH
12728: LD_VAR 0 6
12732: ARRAY
12733: PUSH
12734: LD_VAR 0 5
12738: ARRAY
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: LD_VAR 0 1
12748: PPUSH
12749: CALL_OW 255
12753: PPUSH
12754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
12758: LD_ADDR_EXP 44
12762: PUSH
12763: LD_EXP 44
12767: PPUSH
12768: LD_VAR 0 6
12772: PPUSH
12773: LD_EXP 44
12777: PUSH
12778: LD_VAR 0 6
12782: ARRAY
12783: PPUSH
12784: LD_VAR 0 5
12788: PPUSH
12789: CALL_OW 3
12793: PPUSH
12794: CALL_OW 1
12798: ST_TO_ADDR
// exit ;
12799: POP
12800: POP
12801: GO 12994
// end ; end ;
12803: GO 12643
12805: POP
12806: POP
// for i := minerMinesList [ index ] downto 1 do
12807: LD_ADDR_VAR 0 5
12811: PUSH
12812: DOUBLE
12813: LD_EXP 44
12817: PUSH
12818: LD_VAR 0 6
12822: ARRAY
12823: INC
12824: ST_TO_ADDR
12825: LD_INT 1
12827: PUSH
12828: FOR_DOWNTO
12829: IFFALSE 12992
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
12831: LD_EXP 44
12835: PUSH
12836: LD_VAR 0 6
12840: ARRAY
12841: PUSH
12842: LD_VAR 0 5
12846: ARRAY
12847: PUSH
12848: LD_INT 1
12850: ARRAY
12851: PPUSH
12852: LD_EXP 44
12856: PUSH
12857: LD_VAR 0 6
12861: ARRAY
12862: PUSH
12863: LD_VAR 0 5
12867: ARRAY
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PPUSH
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: CALL_OW 298
12887: PUSH
12888: LD_INT 6
12890: LESS
12891: IFFALSE 12990
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
12893: LD_EXP 44
12897: PUSH
12898: LD_VAR 0 6
12902: ARRAY
12903: PUSH
12904: LD_VAR 0 5
12908: ARRAY
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_EXP 44
12918: PUSH
12919: LD_VAR 0 6
12923: ARRAY
12924: PUSH
12925: LD_VAR 0 5
12929: ARRAY
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 255
12944: PPUSH
12945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
12949: LD_ADDR_EXP 44
12953: PUSH
12954: LD_EXP 44
12958: PPUSH
12959: LD_VAR 0 6
12963: PPUSH
12964: LD_EXP 44
12968: PUSH
12969: LD_VAR 0 6
12973: ARRAY
12974: PPUSH
12975: LD_VAR 0 5
12979: PPUSH
12980: CALL_OW 3
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
// end ; end ;
12990: GO 12828
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 4
12998: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 264
13019: PUSH
13020: LD_INT 81
13022: EQUAL
13023: NOT
13024: PUSH
13025: LD_VAR 0 1
13029: PUSH
13030: LD_EXP 43
13034: IN
13035: NOT
13036: OR
13037: IFFALSE 13041
// exit ;
13039: GO 13363
// index := GetElementIndex ( minersList , unit ) ;
13041: LD_ADDR_VAR 0 6
13045: PUSH
13046: LD_EXP 43
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL 34337 0 2
13060: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13061: LD_ADDR_VAR 0 8
13065: PUSH
13066: LD_EXP 45
13070: PUSH
13071: LD_EXP 44
13075: PUSH
13076: LD_VAR 0 6
13080: ARRAY
13081: MINUS
13082: ST_TO_ADDR
// if not minesFreeAmount then
13083: LD_VAR 0 8
13087: NOT
13088: IFFALSE 13092
// exit ;
13090: GO 13363
// tmp := [ ] ;
13092: LD_ADDR_VAR 0 7
13096: PUSH
13097: EMPTY
13098: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: DOUBLE
13105: LD_INT 1
13107: DEC
13108: ST_TO_ADDR
13109: LD_VAR 0 8
13113: PUSH
13114: FOR_TO
13115: IFFALSE 13310
// begin _d := rand ( 0 , 5 ) ;
13117: LD_ADDR_VAR 0 11
13121: PUSH
13122: LD_INT 0
13124: PPUSH
13125: LD_INT 5
13127: PPUSH
13128: CALL_OW 12
13132: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13133: LD_ADDR_VAR 0 12
13137: PUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_INT 6
13143: PPUSH
13144: CALL_OW 12
13148: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13149: LD_ADDR_VAR 0 9
13153: PUSH
13154: LD_VAR 0 2
13158: PPUSH
13159: LD_VAR 0 11
13163: PPUSH
13164: LD_VAR 0 12
13168: PPUSH
13169: CALL_OW 272
13173: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13174: LD_ADDR_VAR 0 10
13178: PUSH
13179: LD_VAR 0 3
13183: PPUSH
13184: LD_VAR 0 11
13188: PPUSH
13189: LD_VAR 0 12
13193: PPUSH
13194: CALL_OW 273
13198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13199: LD_VAR 0 9
13203: PPUSH
13204: LD_VAR 0 10
13208: PPUSH
13209: CALL_OW 488
13213: PUSH
13214: LD_VAR 0 9
13218: PUSH
13219: LD_VAR 0 10
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_VAR 0 7
13232: IN
13233: NOT
13234: AND
13235: PUSH
13236: LD_VAR 0 9
13240: PPUSH
13241: LD_VAR 0 10
13245: PPUSH
13246: CALL_OW 458
13250: NOT
13251: AND
13252: IFFALSE 13294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13254: LD_ADDR_VAR 0 7
13258: PUSH
13259: LD_VAR 0 7
13263: PPUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: LD_VAR 0 9
13277: PUSH
13278: LD_VAR 0 10
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 1
13291: ST_TO_ADDR
13292: GO 13308
// i := i - 1 ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_VAR 0 5
13303: PUSH
13304: LD_INT 1
13306: MINUS
13307: ST_TO_ADDR
// end ;
13308: GO 13114
13310: POP
13311: POP
// for i in tmp do
13312: LD_ADDR_VAR 0 5
13316: PUSH
13317: LD_VAR 0 7
13321: PUSH
13322: FOR_IN
13323: IFFALSE 13361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13325: LD_VAR 0 1
13329: PPUSH
13330: LD_VAR 0 5
13334: PUSH
13335: LD_INT 1
13337: ARRAY
13338: PPUSH
13339: LD_VAR 0 5
13343: PUSH
13344: LD_INT 2
13346: ARRAY
13347: PPUSH
13348: CALL 12307 0 3
13352: NOT
13353: IFFALSE 13359
// exit ;
13355: POP
13356: POP
13357: GO 13363
13359: GO 13322
13361: POP
13362: POP
// end ;
13363: LD_VAR 0 4
13367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
// if not GetClass ( unit ) = class_sniper then
13377: LD_VAR 0 1
13381: PPUSH
13382: CALL_OW 257
13386: PUSH
13387: LD_INT 5
13389: EQUAL
13390: NOT
13391: IFFALSE 13395
// exit ;
13393: GO 13783
// dist := 8 ;
13395: LD_ADDR_VAR 0 5
13399: PUSH
13400: LD_INT 8
13402: ST_TO_ADDR
// viewRange := 12 ;
13403: LD_ADDR_VAR 0 7
13407: PUSH
13408: LD_INT 12
13410: ST_TO_ADDR
// side := GetSide ( unit ) ;
13411: LD_ADDR_VAR 0 6
13415: PUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 255
13425: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
13426: LD_INT 61
13428: PPUSH
13429: LD_VAR 0 6
13433: PPUSH
13434: CALL_OW 321
13438: PUSH
13439: LD_INT 2
13441: EQUAL
13442: IFFALSE 13452
// viewRange := 16 ;
13444: LD_ADDR_VAR 0 7
13448: PUSH
13449: LD_INT 16
13451: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_VAR 0 2
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: CALL_OW 297
13471: PUSH
13472: LD_VAR 0 5
13476: GREATER
13477: IFFALSE 13556
// begin ComMoveXY ( unit , x , y ) ;
13479: LD_VAR 0 1
13483: PPUSH
13484: LD_VAR 0 2
13488: PPUSH
13489: LD_VAR 0 3
13493: PPUSH
13494: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13498: LD_INT 35
13500: PPUSH
13501: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
13505: LD_VAR 0 1
13509: PPUSH
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: CALL 65721 0 3
13524: NOT
13525: IFFALSE 13529
// exit ;
13527: GO 13783
// until GetDistUnitXY ( unit , x , y ) < dist ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: CALL_OW 297
13548: PUSH
13549: LD_VAR 0 5
13553: LESS
13554: IFFALSE 13498
// end ; ComTurnXY ( unit , x , y ) ;
13556: LD_VAR 0 1
13560: PPUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: CALL_OW 118
// wait ( 5 ) ;
13575: LD_INT 5
13577: PPUSH
13578: CALL_OW 67
// _d := GetDir ( unit ) ;
13582: LD_ADDR_VAR 0 10
13586: PUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 254
13596: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
13597: LD_ADDR_VAR 0 8
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 250
13611: PPUSH
13612: LD_VAR 0 10
13616: PPUSH
13617: LD_VAR 0 5
13621: PPUSH
13622: CALL_OW 272
13626: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
13627: LD_ADDR_VAR 0 9
13631: PUSH
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 251
13641: PPUSH
13642: LD_VAR 0 10
13646: PPUSH
13647: LD_VAR 0 5
13651: PPUSH
13652: CALL_OW 273
13656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13657: LD_VAR 0 8
13661: PPUSH
13662: LD_VAR 0 9
13666: PPUSH
13667: CALL_OW 488
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13783
// ComAnimCustom ( unit , 1 ) ;
13676: LD_VAR 0 1
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
13688: LD_VAR 0 8
13692: PPUSH
13693: LD_VAR 0 9
13697: PPUSH
13698: LD_VAR 0 6
13702: PPUSH
13703: LD_VAR 0 7
13707: PPUSH
13708: CALL_OW 330
// repeat wait ( 1 ) ;
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
13719: LD_VAR 0 1
13723: PPUSH
13724: CALL_OW 316
13728: PUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 314
13738: OR
13739: PUSH
13740: LD_VAR 0 1
13744: PPUSH
13745: CALL_OW 302
13749: NOT
13750: OR
13751: PUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 301
13761: OR
13762: IFFALSE 13712
// RemoveSeeing ( _x , _y , side ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: LD_VAR 0 9
13773: PPUSH
13774: LD_VAR 0 6
13778: PPUSH
13779: CALL_OW 331
// end ; end_of_file
13783: LD_VAR 0 4
13787: RET
// export globalGameSaveCounter ; every 0 0$1 do
13788: GO 13790
13790: DISABLE
// begin enable ;
13791: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13792: LD_STRING updateTimer(
13794: PUSH
13795: LD_OWVAR 1
13799: STR
13800: PUSH
13801: LD_STRING );
13803: STR
13804: PPUSH
13805: CALL_OW 559
// end ;
13809: END
// every 0 0$1 do
13810: GO 13812
13812: DISABLE
// begin globalGameSaveCounter := 0 ;
13813: LD_ADDR_EXP 46
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13821: LD_STRING setGameSaveCounter(0)
13823: PPUSH
13824: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13828: LD_STRING initStreamRollete();
13830: PPUSH
13831: CALL_OW 559
// InitStreamMode ;
13835: CALL 15161 0 0
// DefineStreamItems ( false ) ;
13839: LD_INT 0
13841: PPUSH
13842: CALL 15625 0 1
// end ;
13846: END
// export function SOS_MapStart ( ) ; begin
13847: LD_INT 0
13849: PPUSH
// if streamModeActive then
13850: LD_EXP 47
13854: IFFALSE 13863
// DefineStreamItems ( true ) ;
13856: LD_INT 1
13858: PPUSH
13859: CALL 15625 0 1
// UpdateLuaVariables ( ) ;
13863: CALL 13880 0 0
// UpdateFactoryWaypoints ( ) ;
13867: CALL 28494 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13871: CALL 28751 0 0
// end ;
13875: LD_VAR 0 1
13879: RET
// function UpdateLuaVariables ( ) ; begin
13880: LD_INT 0
13882: PPUSH
// if globalGameSaveCounter then
13883: LD_EXP 46
13887: IFFALSE 13921
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13889: LD_ADDR_EXP 46
13893: PUSH
13894: LD_EXP 46
13898: PPUSH
13899: CALL 68272 0 1
13903: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13904: LD_STRING setGameSaveCounter(
13906: PUSH
13907: LD_EXP 46
13911: STR
13912: PUSH
13913: LD_STRING )
13915: STR
13916: PPUSH
13917: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13921: LD_STRING setGameDifficulty(
13923: PUSH
13924: LD_OWVAR 67
13928: STR
13929: PUSH
13930: LD_STRING )
13932: STR
13933: PPUSH
13934: CALL_OW 559
// end ;
13938: LD_VAR 0 1
13942: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13943: LD_INT 0
13945: PPUSH
// if p2 = stream_mode then
13946: LD_VAR 0 2
13950: PUSH
13951: LD_INT 100
13953: EQUAL
13954: IFFALSE 14957
// begin if not StreamModeActive then
13956: LD_EXP 47
13960: NOT
13961: IFFALSE 13971
// StreamModeActive := true ;
13963: LD_ADDR_EXP 47
13967: PUSH
13968: LD_INT 1
13970: ST_TO_ADDR
// if p3 = 0 then
13971: LD_VAR 0 3
13975: PUSH
13976: LD_INT 0
13978: EQUAL
13979: IFFALSE 13985
// InitStreamMode ;
13981: CALL 15161 0 0
// if p3 = 1 then
13985: LD_VAR 0 3
13989: PUSH
13990: LD_INT 1
13992: EQUAL
13993: IFFALSE 14003
// sRocket := true ;
13995: LD_ADDR_EXP 52
13999: PUSH
14000: LD_INT 1
14002: ST_TO_ADDR
// if p3 = 2 then
14003: LD_VAR 0 3
14007: PUSH
14008: LD_INT 2
14010: EQUAL
14011: IFFALSE 14021
// sSpeed := true ;
14013: LD_ADDR_EXP 51
14017: PUSH
14018: LD_INT 1
14020: ST_TO_ADDR
// if p3 = 3 then
14021: LD_VAR 0 3
14025: PUSH
14026: LD_INT 3
14028: EQUAL
14029: IFFALSE 14039
// sEngine := true ;
14031: LD_ADDR_EXP 53
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// if p3 = 4 then
14039: LD_VAR 0 3
14043: PUSH
14044: LD_INT 4
14046: EQUAL
14047: IFFALSE 14057
// sSpec := true ;
14049: LD_ADDR_EXP 50
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
// if p3 = 5 then
14057: LD_VAR 0 3
14061: PUSH
14062: LD_INT 5
14064: EQUAL
14065: IFFALSE 14075
// sLevel := true ;
14067: LD_ADDR_EXP 54
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// if p3 = 6 then
14075: LD_VAR 0 3
14079: PUSH
14080: LD_INT 6
14082: EQUAL
14083: IFFALSE 14093
// sArmoury := true ;
14085: LD_ADDR_EXP 55
14089: PUSH
14090: LD_INT 1
14092: ST_TO_ADDR
// if p3 = 7 then
14093: LD_VAR 0 3
14097: PUSH
14098: LD_INT 7
14100: EQUAL
14101: IFFALSE 14111
// sRadar := true ;
14103: LD_ADDR_EXP 56
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// if p3 = 8 then
14111: LD_VAR 0 3
14115: PUSH
14116: LD_INT 8
14118: EQUAL
14119: IFFALSE 14129
// sBunker := true ;
14121: LD_ADDR_EXP 57
14125: PUSH
14126: LD_INT 1
14128: ST_TO_ADDR
// if p3 = 9 then
14129: LD_VAR 0 3
14133: PUSH
14134: LD_INT 9
14136: EQUAL
14137: IFFALSE 14147
// sHack := true ;
14139: LD_ADDR_EXP 58
14143: PUSH
14144: LD_INT 1
14146: ST_TO_ADDR
// if p3 = 10 then
14147: LD_VAR 0 3
14151: PUSH
14152: LD_INT 10
14154: EQUAL
14155: IFFALSE 14165
// sFire := true ;
14157: LD_ADDR_EXP 59
14161: PUSH
14162: LD_INT 1
14164: ST_TO_ADDR
// if p3 = 11 then
14165: LD_VAR 0 3
14169: PUSH
14170: LD_INT 11
14172: EQUAL
14173: IFFALSE 14183
// sRefresh := true ;
14175: LD_ADDR_EXP 60
14179: PUSH
14180: LD_INT 1
14182: ST_TO_ADDR
// if p3 = 12 then
14183: LD_VAR 0 3
14187: PUSH
14188: LD_INT 12
14190: EQUAL
14191: IFFALSE 14201
// sExp := true ;
14193: LD_ADDR_EXP 61
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
// if p3 = 13 then
14201: LD_VAR 0 3
14205: PUSH
14206: LD_INT 13
14208: EQUAL
14209: IFFALSE 14219
// sDepot := true ;
14211: LD_ADDR_EXP 62
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// if p3 = 14 then
14219: LD_VAR 0 3
14223: PUSH
14224: LD_INT 14
14226: EQUAL
14227: IFFALSE 14237
// sFlag := true ;
14229: LD_ADDR_EXP 63
14233: PUSH
14234: LD_INT 1
14236: ST_TO_ADDR
// if p3 = 15 then
14237: LD_VAR 0 3
14241: PUSH
14242: LD_INT 15
14244: EQUAL
14245: IFFALSE 14255
// sKamikadze := true ;
14247: LD_ADDR_EXP 71
14251: PUSH
14252: LD_INT 1
14254: ST_TO_ADDR
// if p3 = 16 then
14255: LD_VAR 0 3
14259: PUSH
14260: LD_INT 16
14262: EQUAL
14263: IFFALSE 14273
// sTroll := true ;
14265: LD_ADDR_EXP 72
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// if p3 = 17 then
14273: LD_VAR 0 3
14277: PUSH
14278: LD_INT 17
14280: EQUAL
14281: IFFALSE 14291
// sSlow := true ;
14283: LD_ADDR_EXP 73
14287: PUSH
14288: LD_INT 1
14290: ST_TO_ADDR
// if p3 = 18 then
14291: LD_VAR 0 3
14295: PUSH
14296: LD_INT 18
14298: EQUAL
14299: IFFALSE 14309
// sLack := true ;
14301: LD_ADDR_EXP 74
14305: PUSH
14306: LD_INT 1
14308: ST_TO_ADDR
// if p3 = 19 then
14309: LD_VAR 0 3
14313: PUSH
14314: LD_INT 19
14316: EQUAL
14317: IFFALSE 14327
// sTank := true ;
14319: LD_ADDR_EXP 76
14323: PUSH
14324: LD_INT 1
14326: ST_TO_ADDR
// if p3 = 20 then
14327: LD_VAR 0 3
14331: PUSH
14332: LD_INT 20
14334: EQUAL
14335: IFFALSE 14345
// sRemote := true ;
14337: LD_ADDR_EXP 77
14341: PUSH
14342: LD_INT 1
14344: ST_TO_ADDR
// if p3 = 21 then
14345: LD_VAR 0 3
14349: PUSH
14350: LD_INT 21
14352: EQUAL
14353: IFFALSE 14363
// sPowell := true ;
14355: LD_ADDR_EXP 78
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// if p3 = 22 then
14363: LD_VAR 0 3
14367: PUSH
14368: LD_INT 22
14370: EQUAL
14371: IFFALSE 14381
// sTeleport := true ;
14373: LD_ADDR_EXP 81
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// if p3 = 23 then
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 23
14388: EQUAL
14389: IFFALSE 14399
// sOilTower := true ;
14391: LD_ADDR_EXP 83
14395: PUSH
14396: LD_INT 1
14398: ST_TO_ADDR
// if p3 = 24 then
14399: LD_VAR 0 3
14403: PUSH
14404: LD_INT 24
14406: EQUAL
14407: IFFALSE 14417
// sShovel := true ;
14409: LD_ADDR_EXP 84
14413: PUSH
14414: LD_INT 1
14416: ST_TO_ADDR
// if p3 = 25 then
14417: LD_VAR 0 3
14421: PUSH
14422: LD_INT 25
14424: EQUAL
14425: IFFALSE 14435
// sSheik := true ;
14427: LD_ADDR_EXP 85
14431: PUSH
14432: LD_INT 1
14434: ST_TO_ADDR
// if p3 = 26 then
14435: LD_VAR 0 3
14439: PUSH
14440: LD_INT 26
14442: EQUAL
14443: IFFALSE 14453
// sEarthquake := true ;
14445: LD_ADDR_EXP 87
14449: PUSH
14450: LD_INT 1
14452: ST_TO_ADDR
// if p3 = 27 then
14453: LD_VAR 0 3
14457: PUSH
14458: LD_INT 27
14460: EQUAL
14461: IFFALSE 14471
// sAI := true ;
14463: LD_ADDR_EXP 88
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// if p3 = 28 then
14471: LD_VAR 0 3
14475: PUSH
14476: LD_INT 28
14478: EQUAL
14479: IFFALSE 14489
// sCargo := true ;
14481: LD_ADDR_EXP 91
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// if p3 = 29 then
14489: LD_VAR 0 3
14493: PUSH
14494: LD_INT 29
14496: EQUAL
14497: IFFALSE 14507
// sDLaser := true ;
14499: LD_ADDR_EXP 92
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// if p3 = 30 then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_INT 30
14514: EQUAL
14515: IFFALSE 14525
// sExchange := true ;
14517: LD_ADDR_EXP 93
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// if p3 = 31 then
14525: LD_VAR 0 3
14529: PUSH
14530: LD_INT 31
14532: EQUAL
14533: IFFALSE 14543
// sFac := true ;
14535: LD_ADDR_EXP 94
14539: PUSH
14540: LD_INT 1
14542: ST_TO_ADDR
// if p3 = 32 then
14543: LD_VAR 0 3
14547: PUSH
14548: LD_INT 32
14550: EQUAL
14551: IFFALSE 14561
// sPower := true ;
14553: LD_ADDR_EXP 95
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// if p3 = 33 then
14561: LD_VAR 0 3
14565: PUSH
14566: LD_INT 33
14568: EQUAL
14569: IFFALSE 14579
// sRandom := true ;
14571: LD_ADDR_EXP 96
14575: PUSH
14576: LD_INT 1
14578: ST_TO_ADDR
// if p3 = 34 then
14579: LD_VAR 0 3
14583: PUSH
14584: LD_INT 34
14586: EQUAL
14587: IFFALSE 14597
// sShield := true ;
14589: LD_ADDR_EXP 97
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// if p3 = 35 then
14597: LD_VAR 0 3
14601: PUSH
14602: LD_INT 35
14604: EQUAL
14605: IFFALSE 14615
// sTime := true ;
14607: LD_ADDR_EXP 98
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// if p3 = 36 then
14615: LD_VAR 0 3
14619: PUSH
14620: LD_INT 36
14622: EQUAL
14623: IFFALSE 14633
// sTools := true ;
14625: LD_ADDR_EXP 99
14629: PUSH
14630: LD_INT 1
14632: ST_TO_ADDR
// if p3 = 101 then
14633: LD_VAR 0 3
14637: PUSH
14638: LD_INT 101
14640: EQUAL
14641: IFFALSE 14651
// sSold := true ;
14643: LD_ADDR_EXP 64
14647: PUSH
14648: LD_INT 1
14650: ST_TO_ADDR
// if p3 = 102 then
14651: LD_VAR 0 3
14655: PUSH
14656: LD_INT 102
14658: EQUAL
14659: IFFALSE 14669
// sDiff := true ;
14661: LD_ADDR_EXP 65
14665: PUSH
14666: LD_INT 1
14668: ST_TO_ADDR
// if p3 = 103 then
14669: LD_VAR 0 3
14673: PUSH
14674: LD_INT 103
14676: EQUAL
14677: IFFALSE 14687
// sFog := true ;
14679: LD_ADDR_EXP 68
14683: PUSH
14684: LD_INT 1
14686: ST_TO_ADDR
// if p3 = 104 then
14687: LD_VAR 0 3
14691: PUSH
14692: LD_INT 104
14694: EQUAL
14695: IFFALSE 14705
// sReset := true ;
14697: LD_ADDR_EXP 69
14701: PUSH
14702: LD_INT 1
14704: ST_TO_ADDR
// if p3 = 105 then
14705: LD_VAR 0 3
14709: PUSH
14710: LD_INT 105
14712: EQUAL
14713: IFFALSE 14723
// sSun := true ;
14715: LD_ADDR_EXP 70
14719: PUSH
14720: LD_INT 1
14722: ST_TO_ADDR
// if p3 = 106 then
14723: LD_VAR 0 3
14727: PUSH
14728: LD_INT 106
14730: EQUAL
14731: IFFALSE 14741
// sTiger := true ;
14733: LD_ADDR_EXP 66
14737: PUSH
14738: LD_INT 1
14740: ST_TO_ADDR
// if p3 = 107 then
14741: LD_VAR 0 3
14745: PUSH
14746: LD_INT 107
14748: EQUAL
14749: IFFALSE 14759
// sBomb := true ;
14751: LD_ADDR_EXP 67
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// if p3 = 108 then
14759: LD_VAR 0 3
14763: PUSH
14764: LD_INT 108
14766: EQUAL
14767: IFFALSE 14777
// sWound := true ;
14769: LD_ADDR_EXP 75
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// if p3 = 109 then
14777: LD_VAR 0 3
14781: PUSH
14782: LD_INT 109
14784: EQUAL
14785: IFFALSE 14795
// sBetray := true ;
14787: LD_ADDR_EXP 79
14791: PUSH
14792: LD_INT 1
14794: ST_TO_ADDR
// if p3 = 110 then
14795: LD_VAR 0 3
14799: PUSH
14800: LD_INT 110
14802: EQUAL
14803: IFFALSE 14813
// sContamin := true ;
14805: LD_ADDR_EXP 80
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if p3 = 111 then
14813: LD_VAR 0 3
14817: PUSH
14818: LD_INT 111
14820: EQUAL
14821: IFFALSE 14831
// sOil := true ;
14823: LD_ADDR_EXP 82
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// if p3 = 112 then
14831: LD_VAR 0 3
14835: PUSH
14836: LD_INT 112
14838: EQUAL
14839: IFFALSE 14849
// sStu := true ;
14841: LD_ADDR_EXP 86
14845: PUSH
14846: LD_INT 1
14848: ST_TO_ADDR
// if p3 = 113 then
14849: LD_VAR 0 3
14853: PUSH
14854: LD_INT 113
14856: EQUAL
14857: IFFALSE 14867
// sBazooka := true ;
14859: LD_ADDR_EXP 89
14863: PUSH
14864: LD_INT 1
14866: ST_TO_ADDR
// if p3 = 114 then
14867: LD_VAR 0 3
14871: PUSH
14872: LD_INT 114
14874: EQUAL
14875: IFFALSE 14885
// sMortar := true ;
14877: LD_ADDR_EXP 90
14881: PUSH
14882: LD_INT 1
14884: ST_TO_ADDR
// if p3 = 115 then
14885: LD_VAR 0 3
14889: PUSH
14890: LD_INT 115
14892: EQUAL
14893: IFFALSE 14903
// sRanger := true ;
14895: LD_ADDR_EXP 100
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if p3 = 116 then
14903: LD_VAR 0 3
14907: PUSH
14908: LD_INT 116
14910: EQUAL
14911: IFFALSE 14921
// sComputer := true ;
14913: LD_ADDR_EXP 101
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// if p3 = 117 then
14921: LD_VAR 0 3
14925: PUSH
14926: LD_INT 117
14928: EQUAL
14929: IFFALSE 14939
// s30 := true ;
14931: LD_ADDR_EXP 102
14935: PUSH
14936: LD_INT 1
14938: ST_TO_ADDR
// if p3 = 118 then
14939: LD_VAR 0 3
14943: PUSH
14944: LD_INT 118
14946: EQUAL
14947: IFFALSE 14957
// s60 := true ;
14949: LD_ADDR_EXP 103
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// end ; if p2 = hack_mode then
14957: LD_VAR 0 2
14961: PUSH
14962: LD_INT 101
14964: EQUAL
14965: IFFALSE 15093
// begin case p3 of 1 :
14967: LD_VAR 0 3
14971: PUSH
14972: LD_INT 1
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 14987
14980: POP
// hHackUnlimitedResources ; 2 :
14981: CALL 27240 0 0
14985: GO 15093
14987: LD_INT 2
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15002
14995: POP
// hHackSetLevel10 ; 3 :
14996: CALL 27373 0 0
15000: GO 15093
15002: LD_INT 3
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15010
15008: GO 15017
15010: POP
// hHackSetLevel10YourUnits ; 4 :
15011: CALL 27458 0 0
15015: GO 15093
15017: LD_INT 4
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15032
15025: POP
// hHackInvincible ; 5 :
15026: CALL 27906 0 0
15030: GO 15093
15032: LD_INT 5
15034: DOUBLE
15035: EQUAL
15036: IFTRUE 15040
15038: GO 15047
15040: POP
// hHackInvisible ; 6 :
15041: CALL 28017 0 0
15045: GO 15093
15047: LD_INT 6
15049: DOUBLE
15050: EQUAL
15051: IFTRUE 15055
15053: GO 15062
15055: POP
// hHackChangeYourSide ; 7 :
15056: CALL 28074 0 0
15060: GO 15093
15062: LD_INT 7
15064: DOUBLE
15065: EQUAL
15066: IFTRUE 15070
15068: GO 15077
15070: POP
// hHackChangeUnitSide ; 8 :
15071: CALL 28116 0 0
15075: GO 15093
15077: LD_INT 8
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15092
15085: POP
// hHackFog ; end ;
15086: CALL 28217 0 0
15090: GO 15093
15092: POP
// end ; if p2 = game_save_mode then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 102
15100: EQUAL
15101: IFFALSE 15156
// begin if p3 = 1 then
15103: LD_VAR 0 3
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: IFFALSE 15123
// globalGameSaveCounter := p4 ;
15113: LD_ADDR_EXP 46
15117: PUSH
15118: LD_VAR 0 4
15122: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15123: LD_VAR 0 3
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: PUSH
15132: LD_EXP 46
15136: AND
15137: IFFALSE 15156
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15139: LD_STRING setGameSaveCounter(
15141: PUSH
15142: LD_EXP 46
15146: STR
15147: PUSH
15148: LD_STRING )
15150: STR
15151: PPUSH
15152: CALL_OW 559
// end ; end ;
15156: LD_VAR 0 7
15160: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15161: LD_INT 0
15163: PPUSH
// streamModeActive := false ;
15164: LD_ADDR_EXP 47
15168: PUSH
15169: LD_INT 0
15171: ST_TO_ADDR
// normalCounter := 36 ;
15172: LD_ADDR_EXP 48
15176: PUSH
15177: LD_INT 36
15179: ST_TO_ADDR
// hardcoreCounter := 18 ;
15180: LD_ADDR_EXP 49
15184: PUSH
15185: LD_INT 18
15187: ST_TO_ADDR
// sRocket := false ;
15188: LD_ADDR_EXP 52
15192: PUSH
15193: LD_INT 0
15195: ST_TO_ADDR
// sSpeed := false ;
15196: LD_ADDR_EXP 51
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// sEngine := false ;
15204: LD_ADDR_EXP 53
15208: PUSH
15209: LD_INT 0
15211: ST_TO_ADDR
// sSpec := false ;
15212: LD_ADDR_EXP 50
15216: PUSH
15217: LD_INT 0
15219: ST_TO_ADDR
// sLevel := false ;
15220: LD_ADDR_EXP 54
15224: PUSH
15225: LD_INT 0
15227: ST_TO_ADDR
// sArmoury := false ;
15228: LD_ADDR_EXP 55
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// sRadar := false ;
15236: LD_ADDR_EXP 56
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// sBunker := false ;
15244: LD_ADDR_EXP 57
15248: PUSH
15249: LD_INT 0
15251: ST_TO_ADDR
// sHack := false ;
15252: LD_ADDR_EXP 58
15256: PUSH
15257: LD_INT 0
15259: ST_TO_ADDR
// sFire := false ;
15260: LD_ADDR_EXP 59
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// sRefresh := false ;
15268: LD_ADDR_EXP 60
15272: PUSH
15273: LD_INT 0
15275: ST_TO_ADDR
// sExp := false ;
15276: LD_ADDR_EXP 61
15280: PUSH
15281: LD_INT 0
15283: ST_TO_ADDR
// sDepot := false ;
15284: LD_ADDR_EXP 62
15288: PUSH
15289: LD_INT 0
15291: ST_TO_ADDR
// sFlag := false ;
15292: LD_ADDR_EXP 63
15296: PUSH
15297: LD_INT 0
15299: ST_TO_ADDR
// sKamikadze := false ;
15300: LD_ADDR_EXP 71
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// sTroll := false ;
15308: LD_ADDR_EXP 72
15312: PUSH
15313: LD_INT 0
15315: ST_TO_ADDR
// sSlow := false ;
15316: LD_ADDR_EXP 73
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// sLack := false ;
15324: LD_ADDR_EXP 74
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// sTank := false ;
15332: LD_ADDR_EXP 76
15336: PUSH
15337: LD_INT 0
15339: ST_TO_ADDR
// sRemote := false ;
15340: LD_ADDR_EXP 77
15344: PUSH
15345: LD_INT 0
15347: ST_TO_ADDR
// sPowell := false ;
15348: LD_ADDR_EXP 78
15352: PUSH
15353: LD_INT 0
15355: ST_TO_ADDR
// sTeleport := false ;
15356: LD_ADDR_EXP 81
15360: PUSH
15361: LD_INT 0
15363: ST_TO_ADDR
// sOilTower := false ;
15364: LD_ADDR_EXP 83
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// sShovel := false ;
15372: LD_ADDR_EXP 84
15376: PUSH
15377: LD_INT 0
15379: ST_TO_ADDR
// sSheik := false ;
15380: LD_ADDR_EXP 85
15384: PUSH
15385: LD_INT 0
15387: ST_TO_ADDR
// sEarthquake := false ;
15388: LD_ADDR_EXP 87
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// sAI := false ;
15396: LD_ADDR_EXP 88
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// sCargo := false ;
15404: LD_ADDR_EXP 91
15408: PUSH
15409: LD_INT 0
15411: ST_TO_ADDR
// sDLaser := false ;
15412: LD_ADDR_EXP 92
15416: PUSH
15417: LD_INT 0
15419: ST_TO_ADDR
// sExchange := false ;
15420: LD_ADDR_EXP 93
15424: PUSH
15425: LD_INT 0
15427: ST_TO_ADDR
// sFac := false ;
15428: LD_ADDR_EXP 94
15432: PUSH
15433: LD_INT 0
15435: ST_TO_ADDR
// sPower := false ;
15436: LD_ADDR_EXP 95
15440: PUSH
15441: LD_INT 0
15443: ST_TO_ADDR
// sRandom := false ;
15444: LD_ADDR_EXP 96
15448: PUSH
15449: LD_INT 0
15451: ST_TO_ADDR
// sShield := false ;
15452: LD_ADDR_EXP 97
15456: PUSH
15457: LD_INT 0
15459: ST_TO_ADDR
// sTime := false ;
15460: LD_ADDR_EXP 98
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// sTools := false ;
15468: LD_ADDR_EXP 99
15472: PUSH
15473: LD_INT 0
15475: ST_TO_ADDR
// sSold := false ;
15476: LD_ADDR_EXP 64
15480: PUSH
15481: LD_INT 0
15483: ST_TO_ADDR
// sDiff := false ;
15484: LD_ADDR_EXP 65
15488: PUSH
15489: LD_INT 0
15491: ST_TO_ADDR
// sFog := false ;
15492: LD_ADDR_EXP 68
15496: PUSH
15497: LD_INT 0
15499: ST_TO_ADDR
// sReset := false ;
15500: LD_ADDR_EXP 69
15504: PUSH
15505: LD_INT 0
15507: ST_TO_ADDR
// sSun := false ;
15508: LD_ADDR_EXP 70
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// sTiger := false ;
15516: LD_ADDR_EXP 66
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// sBomb := false ;
15524: LD_ADDR_EXP 67
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// sWound := false ;
15532: LD_ADDR_EXP 75
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// sBetray := false ;
15540: LD_ADDR_EXP 79
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// sContamin := false ;
15548: LD_ADDR_EXP 80
15552: PUSH
15553: LD_INT 0
15555: ST_TO_ADDR
// sOil := false ;
15556: LD_ADDR_EXP 82
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
// sStu := false ;
15564: LD_ADDR_EXP 86
15568: PUSH
15569: LD_INT 0
15571: ST_TO_ADDR
// sBazooka := false ;
15572: LD_ADDR_EXP 89
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// sMortar := false ;
15580: LD_ADDR_EXP 90
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// sRanger := false ;
15588: LD_ADDR_EXP 100
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// sComputer := false ;
15596: LD_ADDR_EXP 101
15600: PUSH
15601: LD_INT 0
15603: ST_TO_ADDR
// s30 := false ;
15604: LD_ADDR_EXP 102
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// s60 := false ;
15612: LD_ADDR_EXP 103
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// end ;
15620: LD_VAR 0 1
15624: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
// result := [ ] ;
15634: LD_ADDR_VAR 0 2
15638: PUSH
15639: EMPTY
15640: ST_TO_ADDR
// if campaign_id = 1 then
15641: LD_OWVAR 69
15645: PUSH
15646: LD_INT 1
15648: EQUAL
15649: IFFALSE 18815
// begin case mission_number of 1 :
15651: LD_OWVAR 70
15655: PUSH
15656: LD_INT 1
15658: DOUBLE
15659: EQUAL
15660: IFTRUE 15664
15662: GO 15740
15664: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 4
15675: PUSH
15676: LD_INT 11
15678: PUSH
15679: LD_INT 12
15681: PUSH
15682: LD_INT 15
15684: PUSH
15685: LD_INT 16
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 23
15693: PUSH
15694: LD_INT 26
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 101
15710: PUSH
15711: LD_INT 102
15713: PUSH
15714: LD_INT 106
15716: PUSH
15717: LD_INT 116
15719: PUSH
15720: LD_INT 117
15722: PUSH
15723: LD_INT 118
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: ST_TO_ADDR
15738: GO 18813
15740: LD_INT 2
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15832
15748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15749: LD_ADDR_VAR 0 2
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 4
15759: PUSH
15760: LD_INT 11
15762: PUSH
15763: LD_INT 12
15765: PUSH
15766: LD_INT 15
15768: PUSH
15769: LD_INT 16
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_INT 23
15777: PUSH
15778: LD_INT 26
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 101
15794: PUSH
15795: LD_INT 102
15797: PUSH
15798: LD_INT 105
15800: PUSH
15801: LD_INT 106
15803: PUSH
15804: LD_INT 108
15806: PUSH
15807: LD_INT 116
15809: PUSH
15810: LD_INT 117
15812: PUSH
15813: LD_INT 118
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 18813
15832: LD_INT 3
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15928
15840: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 11
15857: PUSH
15858: LD_INT 12
15860: PUSH
15861: LD_INT 15
15863: PUSH
15864: LD_INT 16
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_INT 26
15872: PUSH
15873: LD_INT 36
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 101
15890: PUSH
15891: LD_INT 102
15893: PUSH
15894: LD_INT 105
15896: PUSH
15897: LD_INT 106
15899: PUSH
15900: LD_INT 108
15902: PUSH
15903: LD_INT 116
15905: PUSH
15906: LD_INT 117
15908: PUSH
15909: LD_INT 118
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: ST_TO_ADDR
15926: GO 18813
15928: LD_INT 4
15930: DOUBLE
15931: EQUAL
15932: IFTRUE 15936
15934: GO 16032
15936: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 4
15947: PUSH
15948: LD_INT 5
15950: PUSH
15951: LD_INT 8
15953: PUSH
15954: LD_INT 11
15956: PUSH
15957: LD_INT 12
15959: PUSH
15960: LD_INT 15
15962: PUSH
15963: LD_INT 16
15965: PUSH
15966: LD_INT 22
15968: PUSH
15969: LD_INT 23
15971: PUSH
15972: LD_INT 26
15974: PUSH
15975: LD_INT 36
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 101
15994: PUSH
15995: LD_INT 102
15997: PUSH
15998: LD_INT 105
16000: PUSH
16001: LD_INT 106
16003: PUSH
16004: LD_INT 108
16006: PUSH
16007: LD_INT 116
16009: PUSH
16010: LD_INT 117
16012: PUSH
16013: LD_INT 118
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: ST_TO_ADDR
16030: GO 18813
16032: LD_INT 5
16034: DOUBLE
16035: EQUAL
16036: IFTRUE 16040
16038: GO 16152
16040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16041: LD_ADDR_VAR 0 2
16045: PUSH
16046: LD_INT 2
16048: PUSH
16049: LD_INT 4
16051: PUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 6
16057: PUSH
16058: LD_INT 8
16060: PUSH
16061: LD_INT 11
16063: PUSH
16064: LD_INT 12
16066: PUSH
16067: LD_INT 15
16069: PUSH
16070: LD_INT 16
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_INT 23
16078: PUSH
16079: LD_INT 25
16081: PUSH
16082: LD_INT 26
16084: PUSH
16085: LD_INT 36
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 101
16106: PUSH
16107: LD_INT 102
16109: PUSH
16110: LD_INT 105
16112: PUSH
16113: LD_INT 106
16115: PUSH
16116: LD_INT 108
16118: PUSH
16119: LD_INT 109
16121: PUSH
16122: LD_INT 112
16124: PUSH
16125: LD_INT 116
16127: PUSH
16128: LD_INT 117
16130: PUSH
16131: LD_INT 118
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: ST_TO_ADDR
16150: GO 18813
16152: LD_INT 6
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16292
16160: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 4
16171: PUSH
16172: LD_INT 5
16174: PUSH
16175: LD_INT 6
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: LD_INT 11
16183: PUSH
16184: LD_INT 12
16186: PUSH
16187: LD_INT 15
16189: PUSH
16190: LD_INT 16
16192: PUSH
16193: LD_INT 20
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 23
16204: PUSH
16205: LD_INT 25
16207: PUSH
16208: LD_INT 26
16210: PUSH
16211: LD_INT 30
16213: PUSH
16214: LD_INT 31
16216: PUSH
16217: LD_INT 32
16219: PUSH
16220: LD_INT 36
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 101
16246: PUSH
16247: LD_INT 102
16249: PUSH
16250: LD_INT 105
16252: PUSH
16253: LD_INT 106
16255: PUSH
16256: LD_INT 108
16258: PUSH
16259: LD_INT 109
16261: PUSH
16262: LD_INT 112
16264: PUSH
16265: LD_INT 116
16267: PUSH
16268: LD_INT 117
16270: PUSH
16271: LD_INT 118
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: ST_TO_ADDR
16290: GO 18813
16292: LD_INT 7
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16412
16300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16301: LD_ADDR_VAR 0 2
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 4
16311: PUSH
16312: LD_INT 5
16314: PUSH
16315: LD_INT 7
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 15
16326: PUSH
16327: LD_INT 16
16329: PUSH
16330: LD_INT 20
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_INT 23
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 26
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 101
16366: PUSH
16367: LD_INT 102
16369: PUSH
16370: LD_INT 103
16372: PUSH
16373: LD_INT 105
16375: PUSH
16376: LD_INT 106
16378: PUSH
16379: LD_INT 108
16381: PUSH
16382: LD_INT 112
16384: PUSH
16385: LD_INT 116
16387: PUSH
16388: LD_INT 117
16390: PUSH
16391: LD_INT 118
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: ST_TO_ADDR
16410: GO 18813
16412: LD_INT 8
16414: DOUBLE
16415: EQUAL
16416: IFTRUE 16420
16418: GO 16560
16420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16421: LD_ADDR_VAR 0 2
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 4
16431: PUSH
16432: LD_INT 5
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: LD_INT 7
16440: PUSH
16441: LD_INT 8
16443: PUSH
16444: LD_INT 11
16446: PUSH
16447: LD_INT 12
16449: PUSH
16450: LD_INT 15
16452: PUSH
16453: LD_INT 16
16455: PUSH
16456: LD_INT 20
16458: PUSH
16459: LD_INT 21
16461: PUSH
16462: LD_INT 22
16464: PUSH
16465: LD_INT 23
16467: PUSH
16468: LD_INT 25
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 30
16476: PUSH
16477: LD_INT 31
16479: PUSH
16480: LD_INT 32
16482: PUSH
16483: LD_INT 36
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 101
16510: PUSH
16511: LD_INT 102
16513: PUSH
16514: LD_INT 103
16516: PUSH
16517: LD_INT 105
16519: PUSH
16520: LD_INT 106
16522: PUSH
16523: LD_INT 108
16525: PUSH
16526: LD_INT 109
16528: PUSH
16529: LD_INT 112
16531: PUSH
16532: LD_INT 116
16534: PUSH
16535: LD_INT 117
16537: PUSH
16538: LD_INT 118
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: ST_TO_ADDR
16558: GO 18813
16560: LD_INT 9
16562: DOUBLE
16563: EQUAL
16564: IFTRUE 16568
16566: GO 16716
16568: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: LD_INT 4
16579: PUSH
16580: LD_INT 5
16582: PUSH
16583: LD_INT 6
16585: PUSH
16586: LD_INT 7
16588: PUSH
16589: LD_INT 8
16591: PUSH
16592: LD_INT 11
16594: PUSH
16595: LD_INT 12
16597: PUSH
16598: LD_INT 15
16600: PUSH
16601: LD_INT 16
16603: PUSH
16604: LD_INT 20
16606: PUSH
16607: LD_INT 21
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_INT 23
16615: PUSH
16616: LD_INT 25
16618: PUSH
16619: LD_INT 26
16621: PUSH
16622: LD_INT 28
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 31
16630: PUSH
16631: LD_INT 32
16633: PUSH
16634: LD_INT 36
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 101
16662: PUSH
16663: LD_INT 102
16665: PUSH
16666: LD_INT 103
16668: PUSH
16669: LD_INT 105
16671: PUSH
16672: LD_INT 106
16674: PUSH
16675: LD_INT 108
16677: PUSH
16678: LD_INT 109
16680: PUSH
16681: LD_INT 112
16683: PUSH
16684: LD_INT 114
16686: PUSH
16687: LD_INT 116
16689: PUSH
16690: LD_INT 117
16692: PUSH
16693: LD_INT 118
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: ST_TO_ADDR
16714: GO 18813
16716: LD_INT 10
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16920
16724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: LD_INT 4
16735: PUSH
16736: LD_INT 5
16738: PUSH
16739: LD_INT 6
16741: PUSH
16742: LD_INT 7
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: LD_INT 9
16750: PUSH
16751: LD_INT 10
16753: PUSH
16754: LD_INT 11
16756: PUSH
16757: LD_INT 12
16759: PUSH
16760: LD_INT 13
16762: PUSH
16763: LD_INT 14
16765: PUSH
16766: LD_INT 15
16768: PUSH
16769: LD_INT 16
16771: PUSH
16772: LD_INT 17
16774: PUSH
16775: LD_INT 18
16777: PUSH
16778: LD_INT 19
16780: PUSH
16781: LD_INT 20
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 23
16792: PUSH
16793: LD_INT 24
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 26
16801: PUSH
16802: LD_INT 28
16804: PUSH
16805: LD_INT 30
16807: PUSH
16808: LD_INT 31
16810: PUSH
16811: LD_INT 32
16813: PUSH
16814: LD_INT 36
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 101
16850: PUSH
16851: LD_INT 102
16853: PUSH
16854: LD_INT 103
16856: PUSH
16857: LD_INT 104
16859: PUSH
16860: LD_INT 105
16862: PUSH
16863: LD_INT 106
16865: PUSH
16866: LD_INT 107
16868: PUSH
16869: LD_INT 108
16871: PUSH
16872: LD_INT 109
16874: PUSH
16875: LD_INT 110
16877: PUSH
16878: LD_INT 111
16880: PUSH
16881: LD_INT 112
16883: PUSH
16884: LD_INT 114
16886: PUSH
16887: LD_INT 116
16889: PUSH
16890: LD_INT 117
16892: PUSH
16893: LD_INT 118
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: ST_TO_ADDR
16918: GO 18813
16920: LD_INT 11
16922: DOUBLE
16923: EQUAL
16924: IFTRUE 16928
16926: GO 17132
16928: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 3
16939: PUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 5
16945: PUSH
16946: LD_INT 6
16948: PUSH
16949: LD_INT 7
16951: PUSH
16952: LD_INT 8
16954: PUSH
16955: LD_INT 9
16957: PUSH
16958: LD_INT 10
16960: PUSH
16961: LD_INT 11
16963: PUSH
16964: LD_INT 12
16966: PUSH
16967: LD_INT 13
16969: PUSH
16970: LD_INT 14
16972: PUSH
16973: LD_INT 15
16975: PUSH
16976: LD_INT 16
16978: PUSH
16979: LD_INT 17
16981: PUSH
16982: LD_INT 18
16984: PUSH
16985: LD_INT 19
16987: PUSH
16988: LD_INT 20
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_INT 23
16999: PUSH
17000: LD_INT 24
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 28
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 31
17017: PUSH
17018: LD_INT 32
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 36
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 101
17062: PUSH
17063: LD_INT 102
17065: PUSH
17066: LD_INT 103
17068: PUSH
17069: LD_INT 104
17071: PUSH
17072: LD_INT 105
17074: PUSH
17075: LD_INT 106
17077: PUSH
17078: LD_INT 107
17080: PUSH
17081: LD_INT 108
17083: PUSH
17084: LD_INT 109
17086: PUSH
17087: LD_INT 110
17089: PUSH
17090: LD_INT 111
17092: PUSH
17093: LD_INT 112
17095: PUSH
17096: LD_INT 114
17098: PUSH
17099: LD_INT 116
17101: PUSH
17102: LD_INT 117
17104: PUSH
17105: LD_INT 118
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: ST_TO_ADDR
17130: GO 18813
17132: LD_INT 12
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17360
17140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17141: LD_ADDR_VAR 0 2
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 3
17154: PUSH
17155: LD_INT 4
17157: PUSH
17158: LD_INT 5
17160: PUSH
17161: LD_INT 6
17163: PUSH
17164: LD_INT 7
17166: PUSH
17167: LD_INT 8
17169: PUSH
17170: LD_INT 9
17172: PUSH
17173: LD_INT 10
17175: PUSH
17176: LD_INT 11
17178: PUSH
17179: LD_INT 12
17181: PUSH
17182: LD_INT 13
17184: PUSH
17185: LD_INT 14
17187: PUSH
17188: LD_INT 15
17190: PUSH
17191: LD_INT 16
17193: PUSH
17194: LD_INT 17
17196: PUSH
17197: LD_INT 18
17199: PUSH
17200: LD_INT 19
17202: PUSH
17203: LD_INT 20
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_INT 23
17214: PUSH
17215: LD_INT 24
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 26
17223: PUSH
17224: LD_INT 27
17226: PUSH
17227: LD_INT 28
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 31
17235: PUSH
17236: LD_INT 32
17238: PUSH
17239: LD_INT 33
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 36
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 101
17286: PUSH
17287: LD_INT 102
17289: PUSH
17290: LD_INT 103
17292: PUSH
17293: LD_INT 104
17295: PUSH
17296: LD_INT 105
17298: PUSH
17299: LD_INT 106
17301: PUSH
17302: LD_INT 107
17304: PUSH
17305: LD_INT 108
17307: PUSH
17308: LD_INT 109
17310: PUSH
17311: LD_INT 110
17313: PUSH
17314: LD_INT 111
17316: PUSH
17317: LD_INT 112
17319: PUSH
17320: LD_INT 113
17322: PUSH
17323: LD_INT 114
17325: PUSH
17326: LD_INT 116
17328: PUSH
17329: LD_INT 117
17331: PUSH
17332: LD_INT 118
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: ST_TO_ADDR
17358: GO 18813
17360: LD_INT 13
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17576
17368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: LD_INT 4
17385: PUSH
17386: LD_INT 5
17388: PUSH
17389: LD_INT 8
17391: PUSH
17392: LD_INT 9
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 11
17400: PUSH
17401: LD_INT 12
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: LD_INT 15
17409: PUSH
17410: LD_INT 16
17412: PUSH
17413: LD_INT 17
17415: PUSH
17416: LD_INT 18
17418: PUSH
17419: LD_INT 19
17421: PUSH
17422: LD_INT 20
17424: PUSH
17425: LD_INT 21
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 24
17436: PUSH
17437: LD_INT 25
17439: PUSH
17440: LD_INT 26
17442: PUSH
17443: LD_INT 27
17445: PUSH
17446: LD_INT 28
17448: PUSH
17449: LD_INT 30
17451: PUSH
17452: LD_INT 31
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: LD_INT 33
17460: PUSH
17461: LD_INT 34
17463: PUSH
17464: LD_INT 36
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 101
17502: PUSH
17503: LD_INT 102
17505: PUSH
17506: LD_INT 103
17508: PUSH
17509: LD_INT 104
17511: PUSH
17512: LD_INT 105
17514: PUSH
17515: LD_INT 106
17517: PUSH
17518: LD_INT 107
17520: PUSH
17521: LD_INT 108
17523: PUSH
17524: LD_INT 109
17526: PUSH
17527: LD_INT 110
17529: PUSH
17530: LD_INT 111
17532: PUSH
17533: LD_INT 112
17535: PUSH
17536: LD_INT 113
17538: PUSH
17539: LD_INT 114
17541: PUSH
17542: LD_INT 116
17544: PUSH
17545: LD_INT 117
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
17574: GO 18813
17576: LD_INT 14
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17808
17584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 4
17601: PUSH
17602: LD_INT 5
17604: PUSH
17605: LD_INT 6
17607: PUSH
17608: LD_INT 7
17610: PUSH
17611: LD_INT 8
17613: PUSH
17614: LD_INT 9
17616: PUSH
17617: LD_INT 10
17619: PUSH
17620: LD_INT 11
17622: PUSH
17623: LD_INT 12
17625: PUSH
17626: LD_INT 13
17628: PUSH
17629: LD_INT 14
17631: PUSH
17632: LD_INT 15
17634: PUSH
17635: LD_INT 16
17637: PUSH
17638: LD_INT 17
17640: PUSH
17641: LD_INT 18
17643: PUSH
17644: LD_INT 19
17646: PUSH
17647: LD_INT 20
17649: PUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 22
17655: PUSH
17656: LD_INT 23
17658: PUSH
17659: LD_INT 24
17661: PUSH
17662: LD_INT 25
17664: PUSH
17665: LD_INT 26
17667: PUSH
17668: LD_INT 27
17670: PUSH
17671: LD_INT 28
17673: PUSH
17674: LD_INT 29
17676: PUSH
17677: LD_INT 30
17679: PUSH
17680: LD_INT 31
17682: PUSH
17683: LD_INT 32
17685: PUSH
17686: LD_INT 33
17688: PUSH
17689: LD_INT 34
17691: PUSH
17692: LD_INT 36
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 101
17734: PUSH
17735: LD_INT 102
17737: PUSH
17738: LD_INT 103
17740: PUSH
17741: LD_INT 104
17743: PUSH
17744: LD_INT 105
17746: PUSH
17747: LD_INT 106
17749: PUSH
17750: LD_INT 107
17752: PUSH
17753: LD_INT 108
17755: PUSH
17756: LD_INT 109
17758: PUSH
17759: LD_INT 110
17761: PUSH
17762: LD_INT 111
17764: PUSH
17765: LD_INT 112
17767: PUSH
17768: LD_INT 113
17770: PUSH
17771: LD_INT 114
17773: PUSH
17774: LD_INT 116
17776: PUSH
17777: LD_INT 117
17779: PUSH
17780: LD_INT 118
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 18813
17808: LD_INT 15
17810: DOUBLE
17811: EQUAL
17812: IFTRUE 17816
17814: GO 18040
17816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: LD_INT 4
17833: PUSH
17834: LD_INT 5
17836: PUSH
17837: LD_INT 6
17839: PUSH
17840: LD_INT 7
17842: PUSH
17843: LD_INT 8
17845: PUSH
17846: LD_INT 9
17848: PUSH
17849: LD_INT 10
17851: PUSH
17852: LD_INT 11
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 13
17860: PUSH
17861: LD_INT 14
17863: PUSH
17864: LD_INT 15
17866: PUSH
17867: LD_INT 16
17869: PUSH
17870: LD_INT 17
17872: PUSH
17873: LD_INT 18
17875: PUSH
17876: LD_INT 19
17878: PUSH
17879: LD_INT 20
17881: PUSH
17882: LD_INT 21
17884: PUSH
17885: LD_INT 22
17887: PUSH
17888: LD_INT 23
17890: PUSH
17891: LD_INT 24
17893: PUSH
17894: LD_INT 25
17896: PUSH
17897: LD_INT 26
17899: PUSH
17900: LD_INT 27
17902: PUSH
17903: LD_INT 28
17905: PUSH
17906: LD_INT 29
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 31
17914: PUSH
17915: LD_INT 32
17917: PUSH
17918: LD_INT 33
17920: PUSH
17921: LD_INT 34
17923: PUSH
17924: LD_INT 36
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 101
17966: PUSH
17967: LD_INT 102
17969: PUSH
17970: LD_INT 103
17972: PUSH
17973: LD_INT 104
17975: PUSH
17976: LD_INT 105
17978: PUSH
17979: LD_INT 106
17981: PUSH
17982: LD_INT 107
17984: PUSH
17985: LD_INT 108
17987: PUSH
17988: LD_INT 109
17990: PUSH
17991: LD_INT 110
17993: PUSH
17994: LD_INT 111
17996: PUSH
17997: LD_INT 112
17999: PUSH
18000: LD_INT 113
18002: PUSH
18003: LD_INT 114
18005: PUSH
18006: LD_INT 116
18008: PUSH
18009: LD_INT 117
18011: PUSH
18012: LD_INT 118
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: ST_TO_ADDR
18038: GO 18813
18040: LD_INT 16
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18184
18048: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 4
18059: PUSH
18060: LD_INT 5
18062: PUSH
18063: LD_INT 7
18065: PUSH
18066: LD_INT 11
18068: PUSH
18069: LD_INT 12
18071: PUSH
18072: LD_INT 15
18074: PUSH
18075: LD_INT 16
18077: PUSH
18078: LD_INT 20
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 22
18086: PUSH
18087: LD_INT 23
18089: PUSH
18090: LD_INT 25
18092: PUSH
18093: LD_INT 26
18095: PUSH
18096: LD_INT 30
18098: PUSH
18099: LD_INT 31
18101: PUSH
18102: LD_INT 32
18104: PUSH
18105: LD_INT 33
18107: PUSH
18108: LD_INT 34
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 101
18134: PUSH
18135: LD_INT 102
18137: PUSH
18138: LD_INT 103
18140: PUSH
18141: LD_INT 106
18143: PUSH
18144: LD_INT 108
18146: PUSH
18147: LD_INT 112
18149: PUSH
18150: LD_INT 113
18152: PUSH
18153: LD_INT 114
18155: PUSH
18156: LD_INT 116
18158: PUSH
18159: LD_INT 117
18161: PUSH
18162: LD_INT 118
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: ST_TO_ADDR
18182: GO 18813
18184: LD_INT 17
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18416
18192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18193: LD_ADDR_VAR 0 2
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 3
18206: PUSH
18207: LD_INT 4
18209: PUSH
18210: LD_INT 5
18212: PUSH
18213: LD_INT 6
18215: PUSH
18216: LD_INT 7
18218: PUSH
18219: LD_INT 8
18221: PUSH
18222: LD_INT 9
18224: PUSH
18225: LD_INT 10
18227: PUSH
18228: LD_INT 11
18230: PUSH
18231: LD_INT 12
18233: PUSH
18234: LD_INT 13
18236: PUSH
18237: LD_INT 14
18239: PUSH
18240: LD_INT 15
18242: PUSH
18243: LD_INT 16
18245: PUSH
18246: LD_INT 17
18248: PUSH
18249: LD_INT 18
18251: PUSH
18252: LD_INT 19
18254: PUSH
18255: LD_INT 20
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_INT 23
18266: PUSH
18267: LD_INT 24
18269: PUSH
18270: LD_INT 25
18272: PUSH
18273: LD_INT 26
18275: PUSH
18276: LD_INT 27
18278: PUSH
18279: LD_INT 28
18281: PUSH
18282: LD_INT 29
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: LD_INT 31
18290: PUSH
18291: LD_INT 32
18293: PUSH
18294: LD_INT 33
18296: PUSH
18297: LD_INT 34
18299: PUSH
18300: LD_INT 36
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 101
18342: PUSH
18343: LD_INT 102
18345: PUSH
18346: LD_INT 103
18348: PUSH
18349: LD_INT 104
18351: PUSH
18352: LD_INT 105
18354: PUSH
18355: LD_INT 106
18357: PUSH
18358: LD_INT 107
18360: PUSH
18361: LD_INT 108
18363: PUSH
18364: LD_INT 109
18366: PUSH
18367: LD_INT 110
18369: PUSH
18370: LD_INT 111
18372: PUSH
18373: LD_INT 112
18375: PUSH
18376: LD_INT 113
18378: PUSH
18379: LD_INT 114
18381: PUSH
18382: LD_INT 116
18384: PUSH
18385: LD_INT 117
18387: PUSH
18388: LD_INT 118
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: ST_TO_ADDR
18414: GO 18813
18416: LD_INT 18
18418: DOUBLE
18419: EQUAL
18420: IFTRUE 18424
18422: GO 18572
18424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18425: LD_ADDR_VAR 0 2
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: LD_INT 4
18435: PUSH
18436: LD_INT 5
18438: PUSH
18439: LD_INT 7
18441: PUSH
18442: LD_INT 11
18444: PUSH
18445: LD_INT 12
18447: PUSH
18448: LD_INT 15
18450: PUSH
18451: LD_INT 16
18453: PUSH
18454: LD_INT 20
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 22
18462: PUSH
18463: LD_INT 23
18465: PUSH
18466: LD_INT 25
18468: PUSH
18469: LD_INT 26
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 31
18477: PUSH
18478: LD_INT 32
18480: PUSH
18481: LD_INT 33
18483: PUSH
18484: LD_INT 34
18486: PUSH
18487: LD_INT 35
18489: PUSH
18490: LD_INT 36
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 101
18518: PUSH
18519: LD_INT 102
18521: PUSH
18522: LD_INT 103
18524: PUSH
18525: LD_INT 106
18527: PUSH
18528: LD_INT 108
18530: PUSH
18531: LD_INT 112
18533: PUSH
18534: LD_INT 113
18536: PUSH
18537: LD_INT 114
18539: PUSH
18540: LD_INT 115
18542: PUSH
18543: LD_INT 116
18545: PUSH
18546: LD_INT 117
18548: PUSH
18549: LD_INT 118
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 18813
18572: LD_INT 19
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18812
18580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: LD_INT 5
18600: PUSH
18601: LD_INT 6
18603: PUSH
18604: LD_INT 7
18606: PUSH
18607: LD_INT 8
18609: PUSH
18610: LD_INT 9
18612: PUSH
18613: LD_INT 10
18615: PUSH
18616: LD_INT 11
18618: PUSH
18619: LD_INT 12
18621: PUSH
18622: LD_INT 13
18624: PUSH
18625: LD_INT 14
18627: PUSH
18628: LD_INT 15
18630: PUSH
18631: LD_INT 16
18633: PUSH
18634: LD_INT 17
18636: PUSH
18637: LD_INT 18
18639: PUSH
18640: LD_INT 19
18642: PUSH
18643: LD_INT 20
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 23
18654: PUSH
18655: LD_INT 24
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 26
18663: PUSH
18664: LD_INT 27
18666: PUSH
18667: LD_INT 28
18669: PUSH
18670: LD_INT 29
18672: PUSH
18673: LD_INT 30
18675: PUSH
18676: LD_INT 31
18678: PUSH
18679: LD_INT 32
18681: PUSH
18682: LD_INT 33
18684: PUSH
18685: LD_INT 34
18687: PUSH
18688: LD_INT 35
18690: PUSH
18691: LD_INT 36
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 101
18734: PUSH
18735: LD_INT 102
18737: PUSH
18738: LD_INT 103
18740: PUSH
18741: LD_INT 104
18743: PUSH
18744: LD_INT 105
18746: PUSH
18747: LD_INT 106
18749: PUSH
18750: LD_INT 107
18752: PUSH
18753: LD_INT 108
18755: PUSH
18756: LD_INT 109
18758: PUSH
18759: LD_INT 110
18761: PUSH
18762: LD_INT 111
18764: PUSH
18765: LD_INT 112
18767: PUSH
18768: LD_INT 113
18770: PUSH
18771: LD_INT 114
18773: PUSH
18774: LD_INT 115
18776: PUSH
18777: LD_INT 116
18779: PUSH
18780: LD_INT 117
18782: PUSH
18783: LD_INT 118
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: ST_TO_ADDR
18810: GO 18813
18812: POP
// end else
18813: GO 19044
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: LD_INT 5
18834: PUSH
18835: LD_INT 6
18837: PUSH
18838: LD_INT 7
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 13
18858: PUSH
18859: LD_INT 14
18861: PUSH
18862: LD_INT 15
18864: PUSH
18865: LD_INT 16
18867: PUSH
18868: LD_INT 17
18870: PUSH
18871: LD_INT 18
18873: PUSH
18874: LD_INT 19
18876: PUSH
18877: LD_INT 20
18879: PUSH
18880: LD_INT 21
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_INT 23
18888: PUSH
18889: LD_INT 24
18891: PUSH
18892: LD_INT 25
18894: PUSH
18895: LD_INT 26
18897: PUSH
18898: LD_INT 27
18900: PUSH
18901: LD_INT 28
18903: PUSH
18904: LD_INT 29
18906: PUSH
18907: LD_INT 30
18909: PUSH
18910: LD_INT 31
18912: PUSH
18913: LD_INT 32
18915: PUSH
18916: LD_INT 33
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 35
18924: PUSH
18925: LD_INT 36
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 101
18968: PUSH
18969: LD_INT 102
18971: PUSH
18972: LD_INT 103
18974: PUSH
18975: LD_INT 104
18977: PUSH
18978: LD_INT 105
18980: PUSH
18981: LD_INT 106
18983: PUSH
18984: LD_INT 107
18986: PUSH
18987: LD_INT 108
18989: PUSH
18990: LD_INT 109
18992: PUSH
18993: LD_INT 110
18995: PUSH
18996: LD_INT 111
18998: PUSH
18999: LD_INT 112
19001: PUSH
19002: LD_INT 113
19004: PUSH
19005: LD_INT 114
19007: PUSH
19008: LD_INT 115
19010: PUSH
19011: LD_INT 116
19013: PUSH
19014: LD_INT 117
19016: PUSH
19017: LD_INT 118
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// if result then
19044: LD_VAR 0 2
19048: IFFALSE 19834
// begin normal :=  ;
19050: LD_ADDR_VAR 0 5
19054: PUSH
19055: LD_STRING 
19057: ST_TO_ADDR
// hardcore :=  ;
19058: LD_ADDR_VAR 0 6
19062: PUSH
19063: LD_STRING 
19065: ST_TO_ADDR
// active :=  ;
19066: LD_ADDR_VAR 0 7
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// for i = 1 to normalCounter do
19074: LD_ADDR_VAR 0 8
19078: PUSH
19079: DOUBLE
19080: LD_INT 1
19082: DEC
19083: ST_TO_ADDR
19084: LD_EXP 48
19088: PUSH
19089: FOR_TO
19090: IFFALSE 19191
// begin tmp := 0 ;
19092: LD_ADDR_VAR 0 3
19096: PUSH
19097: LD_STRING 0
19099: ST_TO_ADDR
// if result [ 1 ] then
19100: LD_VAR 0 2
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: IFFALSE 19173
// if result [ 1 ] [ 1 ] = i then
19110: LD_VAR 0 2
19114: PUSH
19115: LD_INT 1
19117: ARRAY
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PUSH
19123: LD_VAR 0 8
19127: EQUAL
19128: IFFALSE 19173
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_VAR 0 2
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: LD_VAR 0 2
19147: PUSH
19148: LD_INT 1
19150: ARRAY
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 3
19159: PPUSH
19160: CALL_OW 1
19164: ST_TO_ADDR
// tmp := 1 ;
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_STRING 1
19172: ST_TO_ADDR
// end ; normal := normal & tmp ;
19173: LD_ADDR_VAR 0 5
19177: PUSH
19178: LD_VAR 0 5
19182: PUSH
19183: LD_VAR 0 3
19187: STR
19188: ST_TO_ADDR
// end ;
19189: GO 19089
19191: POP
19192: POP
// for i = 1 to hardcoreCounter do
19193: LD_ADDR_VAR 0 8
19197: PUSH
19198: DOUBLE
19199: LD_INT 1
19201: DEC
19202: ST_TO_ADDR
19203: LD_EXP 49
19207: PUSH
19208: FOR_TO
19209: IFFALSE 19314
// begin tmp := 0 ;
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_STRING 0
19218: ST_TO_ADDR
// if result [ 2 ] then
19219: LD_VAR 0 2
19223: PUSH
19224: LD_INT 2
19226: ARRAY
19227: IFFALSE 19296
// if result [ 2 ] [ 1 ] = 100 + i then
19229: LD_VAR 0 2
19233: PUSH
19234: LD_INT 2
19236: ARRAY
19237: PUSH
19238: LD_INT 1
19240: ARRAY
19241: PUSH
19242: LD_INT 100
19244: PUSH
19245: LD_VAR 0 8
19249: PLUS
19250: EQUAL
19251: IFFALSE 19296
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19253: LD_ADDR_VAR 0 2
19257: PUSH
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_INT 2
19265: PPUSH
19266: LD_VAR 0 2
19270: PUSH
19271: LD_INT 2
19273: ARRAY
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 3
19282: PPUSH
19283: CALL_OW 1
19287: ST_TO_ADDR
// tmp := 1 ;
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_STRING 1
19295: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19296: LD_ADDR_VAR 0 6
19300: PUSH
19301: LD_VAR 0 6
19305: PUSH
19306: LD_VAR 0 3
19310: STR
19311: ST_TO_ADDR
// end ;
19312: GO 19208
19314: POP
19315: POP
// if isGameLoad then
19316: LD_VAR 0 1
19320: IFFALSE 19795
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19322: LD_ADDR_VAR 0 4
19326: PUSH
19327: LD_EXP 52
19331: PUSH
19332: LD_EXP 51
19336: PUSH
19337: LD_EXP 53
19341: PUSH
19342: LD_EXP 50
19346: PUSH
19347: LD_EXP 54
19351: PUSH
19352: LD_EXP 55
19356: PUSH
19357: LD_EXP 56
19361: PUSH
19362: LD_EXP 57
19366: PUSH
19367: LD_EXP 58
19371: PUSH
19372: LD_EXP 59
19376: PUSH
19377: LD_EXP 60
19381: PUSH
19382: LD_EXP 61
19386: PUSH
19387: LD_EXP 62
19391: PUSH
19392: LD_EXP 63
19396: PUSH
19397: LD_EXP 71
19401: PUSH
19402: LD_EXP 72
19406: PUSH
19407: LD_EXP 73
19411: PUSH
19412: LD_EXP 74
19416: PUSH
19417: LD_EXP 76
19421: PUSH
19422: LD_EXP 77
19426: PUSH
19427: LD_EXP 78
19431: PUSH
19432: LD_EXP 81
19436: PUSH
19437: LD_EXP 83
19441: PUSH
19442: LD_EXP 84
19446: PUSH
19447: LD_EXP 85
19451: PUSH
19452: LD_EXP 87
19456: PUSH
19457: LD_EXP 88
19461: PUSH
19462: LD_EXP 91
19466: PUSH
19467: LD_EXP 92
19471: PUSH
19472: LD_EXP 93
19476: PUSH
19477: LD_EXP 94
19481: PUSH
19482: LD_EXP 95
19486: PUSH
19487: LD_EXP 96
19491: PUSH
19492: LD_EXP 97
19496: PUSH
19497: LD_EXP 98
19501: PUSH
19502: LD_EXP 99
19506: PUSH
19507: LD_EXP 64
19511: PUSH
19512: LD_EXP 65
19516: PUSH
19517: LD_EXP 68
19521: PUSH
19522: LD_EXP 69
19526: PUSH
19527: LD_EXP 70
19531: PUSH
19532: LD_EXP 66
19536: PUSH
19537: LD_EXP 67
19541: PUSH
19542: LD_EXP 75
19546: PUSH
19547: LD_EXP 79
19551: PUSH
19552: LD_EXP 80
19556: PUSH
19557: LD_EXP 82
19561: PUSH
19562: LD_EXP 86
19566: PUSH
19567: LD_EXP 89
19571: PUSH
19572: LD_EXP 90
19576: PUSH
19577: LD_EXP 100
19581: PUSH
19582: LD_EXP 101
19586: PUSH
19587: LD_EXP 102
19591: PUSH
19592: LD_EXP 103
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: ST_TO_ADDR
// tmp :=  ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_STRING 
19660: ST_TO_ADDR
// for i = 1 to normalCounter do
19661: LD_ADDR_VAR 0 8
19665: PUSH
19666: DOUBLE
19667: LD_INT 1
19669: DEC
19670: ST_TO_ADDR
19671: LD_EXP 48
19675: PUSH
19676: FOR_TO
19677: IFFALSE 19713
// begin if flags [ i ] then
19679: LD_VAR 0 4
19683: PUSH
19684: LD_VAR 0 8
19688: ARRAY
19689: IFFALSE 19711
// tmp := tmp & i & ; ;
19691: LD_ADDR_VAR 0 3
19695: PUSH
19696: LD_VAR 0 3
19700: PUSH
19701: LD_VAR 0 8
19705: STR
19706: PUSH
19707: LD_STRING ;
19709: STR
19710: ST_TO_ADDR
// end ;
19711: GO 19676
19713: POP
19714: POP
// for i = 1 to hardcoreCounter do
19715: LD_ADDR_VAR 0 8
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_EXP 49
19729: PUSH
19730: FOR_TO
19731: IFFALSE 19777
// begin if flags [ normalCounter + i ] then
19733: LD_VAR 0 4
19737: PUSH
19738: LD_EXP 48
19742: PUSH
19743: LD_VAR 0 8
19747: PLUS
19748: ARRAY
19749: IFFALSE 19775
// tmp := tmp & ( 100 + i ) & ; ;
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 100
19763: PUSH
19764: LD_VAR 0 8
19768: PLUS
19769: STR
19770: PUSH
19771: LD_STRING ;
19773: STR
19774: ST_TO_ADDR
// end ;
19775: GO 19730
19777: POP
19778: POP
// if tmp then
19779: LD_VAR 0 3
19783: IFFALSE 19795
// active := tmp ;
19785: LD_ADDR_VAR 0 7
19789: PUSH
19790: LD_VAR 0 3
19794: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19795: LD_STRING getStreamItemsFromMission("
19797: PUSH
19798: LD_VAR 0 5
19802: STR
19803: PUSH
19804: LD_STRING ","
19806: STR
19807: PUSH
19808: LD_VAR 0 6
19812: STR
19813: PUSH
19814: LD_STRING ","
19816: STR
19817: PUSH
19818: LD_VAR 0 7
19822: STR
19823: PUSH
19824: LD_STRING ")
19826: STR
19827: PPUSH
19828: CALL_OW 559
// end else
19832: GO 19841
// ToLua ( getStreamItemsFromMission("","","") ) ;
19834: LD_STRING getStreamItemsFromMission("","","")
19836: PPUSH
19837: CALL_OW 559
// end ;
19841: LD_VAR 0 2
19845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19846: LD_EXP 47
19850: PUSH
19851: LD_EXP 52
19855: AND
19856: IFFALSE 19980
19858: GO 19860
19860: DISABLE
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
// begin enable ;
19865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19866: LD_ADDR_VAR 0 2
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_OWVAR 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: LD_INT 34
19888: PUSH
19889: LD_INT 7
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 34
19898: PUSH
19899: LD_INT 45
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 34
19908: PUSH
19909: LD_INT 28
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 34
19918: PUSH
19919: LD_INT 47
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: ST_TO_ADDR
// if not tmp then
19942: LD_VAR 0 2
19946: NOT
19947: IFFALSE 19951
// exit ;
19949: GO 19980
// for i in tmp do
19951: LD_ADDR_VAR 0 1
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: FOR_IN
19962: IFFALSE 19978
// begin SetLives ( i , 0 ) ;
19964: LD_VAR 0 1
19968: PPUSH
19969: LD_INT 0
19971: PPUSH
19972: CALL_OW 234
// end ;
19976: GO 19961
19978: POP
19979: POP
// end ;
19980: PPOPN 2
19982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19983: LD_EXP 47
19987: PUSH
19988: LD_EXP 53
19992: AND
19993: IFFALSE 20077
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
// begin enable ;
20002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20003: LD_ADDR_VAR 0 2
20007: PUSH
20008: LD_INT 22
20010: PUSH
20011: LD_OWVAR 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 32
20022: PUSH
20023: LD_INT 3
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: ST_TO_ADDR
// if not tmp then
20039: LD_VAR 0 2
20043: NOT
20044: IFFALSE 20048
// exit ;
20046: GO 20077
// for i in tmp do
20048: LD_ADDR_VAR 0 1
20052: PUSH
20053: LD_VAR 0 2
20057: PUSH
20058: FOR_IN
20059: IFFALSE 20075
// begin SetLives ( i , 0 ) ;
20061: LD_VAR 0 1
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 234
// end ;
20073: GO 20058
20075: POP
20076: POP
// end ;
20077: PPOPN 2
20079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20080: LD_EXP 47
20084: PUSH
20085: LD_EXP 50
20089: AND
20090: IFFALSE 20183
20092: GO 20094
20094: DISABLE
20095: LD_INT 0
20097: PPUSH
// begin enable ;
20098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20099: LD_ADDR_VAR 0 1
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_OWVAR 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 25
20121: PUSH
20122: LD_INT 5
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 25
20131: PUSH
20132: LD_INT 9
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 25
20141: PUSH
20142: LD_INT 8
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20181
// begin SetClass ( i , 1 ) ;
20167: LD_VAR 0 1
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 336
// end ;
20179: GO 20164
20181: POP
20182: POP
// end ;
20183: PPOPN 1
20185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20186: LD_EXP 47
20190: PUSH
20191: LD_EXP 51
20195: AND
20196: PUSH
20197: LD_OWVAR 65
20201: PUSH
20202: LD_INT 7
20204: LESS
20205: AND
20206: IFFALSE 20220
20208: GO 20210
20210: DISABLE
// begin enable ;
20211: ENABLE
// game_speed := 7 ;
20212: LD_ADDR_OWVAR 65
20216: PUSH
20217: LD_INT 7
20219: ST_TO_ADDR
// end ;
20220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20221: LD_EXP 47
20225: PUSH
20226: LD_EXP 54
20230: AND
20231: IFFALSE 20433
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_INT 81
20248: PUSH
20249: LD_OWVAR 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 21
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: ST_TO_ADDR
// if not tmp then
20277: LD_VAR 0 3
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20433
// if tmp > 5 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 5
20293: GREATER
20294: IFFALSE 20306
// k := 5 else
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 5
20303: ST_TO_ADDR
20304: GO 20316
// k := tmp ;
20306: LD_ADDR_VAR 0 2
20310: PUSH
20311: LD_VAR 0 3
20315: ST_TO_ADDR
// for i := 1 to k do
20316: LD_ADDR_VAR 0 1
20320: PUSH
20321: DOUBLE
20322: LD_INT 1
20324: DEC
20325: ST_TO_ADDR
20326: LD_VAR 0 2
20330: PUSH
20331: FOR_TO
20332: IFFALSE 20431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20334: LD_VAR 0 3
20338: PUSH
20339: LD_VAR 0 1
20343: ARRAY
20344: PPUSH
20345: LD_VAR 0 1
20349: PUSH
20350: LD_INT 4
20352: MOD
20353: PUSH
20354: LD_INT 1
20356: PLUS
20357: PPUSH
20358: CALL_OW 259
20362: PUSH
20363: LD_INT 10
20365: LESS
20366: IFFALSE 20429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20368: LD_VAR 0 3
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: PPUSH
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 4
20386: MOD
20387: PUSH
20388: LD_INT 1
20390: PLUS
20391: PPUSH
20392: LD_VAR 0 3
20396: PUSH
20397: LD_VAR 0 1
20401: ARRAY
20402: PPUSH
20403: LD_VAR 0 1
20407: PUSH
20408: LD_INT 4
20410: MOD
20411: PUSH
20412: LD_INT 1
20414: PLUS
20415: PPUSH
20416: CALL_OW 259
20420: PUSH
20421: LD_INT 1
20423: PLUS
20424: PPUSH
20425: CALL_OW 237
20429: GO 20331
20431: POP
20432: POP
// end ;
20433: PPOPN 3
20435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20436: LD_EXP 47
20440: PUSH
20441: LD_EXP 55
20445: AND
20446: IFFALSE 20466
20448: GO 20450
20450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20451: LD_INT 4
20453: PPUSH
20454: LD_OWVAR 2
20458: PPUSH
20459: LD_INT 0
20461: PPUSH
20462: CALL_OW 324
20466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20467: LD_EXP 47
20471: PUSH
20472: LD_EXP 84
20476: AND
20477: IFFALSE 20497
20479: GO 20481
20481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20482: LD_INT 19
20484: PPUSH
20485: LD_OWVAR 2
20489: PPUSH
20490: LD_INT 0
20492: PPUSH
20493: CALL_OW 324
20497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20498: LD_EXP 47
20502: PUSH
20503: LD_EXP 56
20507: AND
20508: IFFALSE 20610
20510: GO 20512
20512: DISABLE
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_OWVAR 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 34
20540: PUSH
20541: LD_INT 11
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 34
20550: PUSH
20551: LD_INT 30
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: ST_TO_ADDR
// if not tmp then
20572: LD_VAR 0 2
20576: NOT
20577: IFFALSE 20581
// exit ;
20579: GO 20610
// for i in tmp do
20581: LD_ADDR_VAR 0 1
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20608
// begin SetLives ( i , 0 ) ;
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_INT 0
20601: PPUSH
20602: CALL_OW 234
// end ;
20606: GO 20591
20608: POP
20609: POP
// end ;
20610: PPOPN 2
20612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20613: LD_EXP 47
20617: PUSH
20618: LD_EXP 57
20622: AND
20623: IFFALSE 20643
20625: GO 20627
20627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20628: LD_INT 32
20630: PPUSH
20631: LD_OWVAR 2
20635: PPUSH
20636: LD_INT 0
20638: PPUSH
20639: CALL_OW 324
20643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20644: LD_EXP 47
20648: PUSH
20649: LD_EXP 58
20653: AND
20654: IFFALSE 20835
20656: GO 20658
20658: DISABLE
20659: LD_INT 0
20661: PPUSH
20662: PPUSH
20663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_OWVAR 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 33
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PPUSH
20695: CALL_OW 69
20699: ST_TO_ADDR
// if not tmp then
20700: LD_VAR 0 2
20704: NOT
20705: IFFALSE 20709
// exit ;
20707: GO 20835
// side := 0 ;
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: LD_INT 0
20716: ST_TO_ADDR
// for i := 1 to 8 do
20717: LD_ADDR_VAR 0 1
20721: PUSH
20722: DOUBLE
20723: LD_INT 1
20725: DEC
20726: ST_TO_ADDR
20727: LD_INT 8
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20733: LD_OWVAR 2
20737: PUSH
20738: LD_VAR 0 1
20742: NONEQUAL
20743: PUSH
20744: LD_OWVAR 2
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 81
20758: PUSH
20759: LD_INT 2
20761: EQUAL
20762: AND
20763: IFFALSE 20777
// begin side := i ;
20765: LD_ADDR_VAR 0 3
20769: PUSH
20770: LD_VAR 0 1
20774: ST_TO_ADDR
// break ;
20775: GO 20779
// end ;
20777: GO 20730
20779: POP
20780: POP
// if not side then
20781: LD_VAR 0 3
20785: NOT
20786: IFFALSE 20790
// exit ;
20788: GO 20835
// for i := 1 to tmp do
20790: LD_ADDR_VAR 0 1
20794: PUSH
20795: DOUBLE
20796: LD_INT 1
20798: DEC
20799: ST_TO_ADDR
20800: LD_VAR 0 2
20804: PUSH
20805: FOR_TO
20806: IFFALSE 20833
// if Prob ( 60 ) then
20808: LD_INT 60
20810: PPUSH
20811: CALL_OW 13
20815: IFFALSE 20831
// SetSide ( i , side ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: CALL_OW 235
20831: GO 20805
20833: POP
20834: POP
// end ;
20835: PPOPN 3
20837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20838: LD_EXP 47
20842: PUSH
20843: LD_EXP 60
20847: AND
20848: IFFALSE 20967
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: LD_INT 23
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 257
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 3
20931: PUSH
20932: LD_INT 4
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: IN
20941: IFFALSE 20963
// SetClass ( un , rand ( 1 , 4 ) ) ;
20943: LD_VAR 0 1
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 4
20953: PPUSH
20954: CALL_OW 12
20958: PPUSH
20959: CALL_OW 336
20963: GO 20910
20965: POP
20966: POP
// end ;
20967: PPOPN 1
20969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20970: LD_EXP 47
20974: PUSH
20975: LD_EXP 59
20979: AND
20980: IFFALSE 21059
20982: GO 20984
20984: DISABLE
20985: LD_INT 0
20987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20988: LD_ADDR_VAR 0 1
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_OWVAR 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 21
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// if not tmp then
21024: LD_VAR 0 1
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21033: LD_VAR 0 1
21037: PUSH
21038: LD_INT 1
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 12
21050: ARRAY
21051: PPUSH
21052: LD_INT 100
21054: PPUSH
21055: CALL_OW 234
// end ;
21059: PPOPN 1
21061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21062: LD_EXP 47
21066: PUSH
21067: LD_EXP 61
21071: AND
21072: IFFALSE 21170
21074: GO 21076
21076: DISABLE
21077: LD_INT 0
21079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21080: LD_ADDR_VAR 0 1
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 1
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 1
21132: PPUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 12
21142: ARRAY
21143: PPUSH
21144: LD_INT 1
21146: PPUSH
21147: LD_INT 4
21149: PPUSH
21150: CALL_OW 12
21154: PPUSH
21155: LD_INT 3000
21157: PPUSH
21158: LD_INT 9000
21160: PPUSH
21161: CALL_OW 12
21165: PPUSH
21166: CALL_OW 492
// end ;
21170: PPOPN 1
21172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21173: LD_EXP 47
21177: PUSH
21178: LD_EXP 62
21182: AND
21183: IFFALSE 21203
21185: GO 21187
21187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21188: LD_INT 1
21190: PPUSH
21191: LD_OWVAR 2
21195: PPUSH
21196: LD_INT 0
21198: PPUSH
21199: CALL_OW 324
21203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21204: LD_EXP 47
21208: PUSH
21209: LD_EXP 63
21213: AND
21214: IFFALSE 21297
21216: GO 21218
21218: DISABLE
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21223: LD_ADDR_VAR 0 2
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_OWVAR 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: ST_TO_ADDR
// if not tmp then
21259: LD_VAR 0 2
21263: NOT
21264: IFFALSE 21268
// exit ;
21266: GO 21297
// for i in tmp do
21268: LD_ADDR_VAR 0 1
21272: PUSH
21273: LD_VAR 0 2
21277: PUSH
21278: FOR_IN
21279: IFFALSE 21295
// SetBLevel ( i , 10 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_INT 10
21288: PPUSH
21289: CALL_OW 241
21293: GO 21278
21295: POP
21296: POP
// end ;
21297: PPOPN 2
21299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21300: LD_EXP 47
21304: PUSH
21305: LD_EXP 64
21309: AND
21310: IFFALSE 21421
21312: GO 21314
21314: DISABLE
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21320: LD_ADDR_VAR 0 3
21324: PUSH
21325: LD_INT 22
21327: PUSH
21328: LD_OWVAR 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 25
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PPUSH
21351: CALL_OW 69
21355: ST_TO_ADDR
// if not tmp then
21356: LD_VAR 0 3
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21421
// un := tmp [ rand ( 1 , tmp ) ] ;
21365: LD_ADDR_VAR 0 2
21369: PUSH
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 1
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: CALL_OW 12
21387: ARRAY
21388: ST_TO_ADDR
// if Crawls ( un ) then
21389: LD_VAR 0 2
21393: PPUSH
21394: CALL_OW 318
21398: IFFALSE 21409
// ComWalk ( un ) ;
21400: LD_VAR 0 2
21404: PPUSH
21405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_INT 5
21416: PPUSH
21417: CALL_OW 336
// end ;
21421: PPOPN 3
21423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21424: LD_EXP 47
21428: PUSH
21429: LD_EXP 65
21433: AND
21434: PUSH
21435: LD_OWVAR 67
21439: PUSH
21440: LD_INT 4
21442: LESS
21443: AND
21444: IFFALSE 21463
21446: GO 21448
21448: DISABLE
// begin Difficulty := Difficulty + 1 ;
21449: LD_ADDR_OWVAR 67
21453: PUSH
21454: LD_OWVAR 67
21458: PUSH
21459: LD_INT 1
21461: PLUS
21462: ST_TO_ADDR
// end ;
21463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21464: LD_EXP 47
21468: PUSH
21469: LD_EXP 66
21473: AND
21474: IFFALSE 21577
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
// begin for i := 1 to 5 do
21482: LD_ADDR_VAR 0 1
21486: PUSH
21487: DOUBLE
21488: LD_INT 1
21490: DEC
21491: ST_TO_ADDR
21492: LD_INT 5
21494: PUSH
21495: FOR_TO
21496: IFFALSE 21575
// begin uc_nation := nation_nature ;
21498: LD_ADDR_OWVAR 21
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// uc_side := 0 ;
21506: LD_ADDR_OWVAR 20
21510: PUSH
21511: LD_INT 0
21513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21514: LD_ADDR_OWVAR 29
21518: PUSH
21519: LD_INT 12
21521: PUSH
21522: LD_INT 12
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// hc_agressivity := 20 ;
21529: LD_ADDR_OWVAR 35
21533: PUSH
21534: LD_INT 20
21536: ST_TO_ADDR
// hc_class := class_tiger ;
21537: LD_ADDR_OWVAR 28
21541: PUSH
21542: LD_INT 14
21544: ST_TO_ADDR
// hc_gallery :=  ;
21545: LD_ADDR_OWVAR 33
21549: PUSH
21550: LD_STRING 
21552: ST_TO_ADDR
// hc_name :=  ;
21553: LD_ADDR_OWVAR 26
21557: PUSH
21558: LD_STRING 
21560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21561: CALL_OW 44
21565: PPUSH
21566: LD_INT 0
21568: PPUSH
21569: CALL_OW 51
// end ;
21573: GO 21495
21575: POP
21576: POP
// end ;
21577: PPOPN 1
21579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21580: LD_EXP 47
21584: PUSH
21585: LD_EXP 67
21589: AND
21590: IFFALSE 21599
21592: GO 21594
21594: DISABLE
// StreamSibBomb ;
21595: CALL 21600 0 0
21599: END
// export function StreamSibBomb ; var i , x , y ; begin
21600: LD_INT 0
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
// result := false ;
21606: LD_ADDR_VAR 0 1
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// for i := 1 to 16 do
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_INT 16
21626: PUSH
21627: FOR_TO
21628: IFFALSE 21827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 10
21637: PUSH
21638: LD_INT 20
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 40
21646: PUSH
21647: LD_INT 50
21649: PUSH
21650: LD_INT 60
21652: PUSH
21653: LD_INT 70
21655: PUSH
21656: LD_INT 80
21658: PUSH
21659: LD_INT 90
21661: PUSH
21662: LD_INT 100
21664: PUSH
21665: LD_INT 110
21667: PUSH
21668: LD_INT 120
21670: PUSH
21671: LD_INT 130
21673: PUSH
21674: LD_INT 140
21676: PUSH
21677: LD_INT 150
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_INT 15
21702: PPUSH
21703: CALL_OW 12
21707: ARRAY
21708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21709: LD_ADDR_VAR 0 4
21713: PUSH
21714: LD_INT 10
21716: PUSH
21717: LD_INT 20
21719: PUSH
21720: LD_INT 30
21722: PUSH
21723: LD_INT 40
21725: PUSH
21726: LD_INT 50
21728: PUSH
21729: LD_INT 60
21731: PUSH
21732: LD_INT 70
21734: PUSH
21735: LD_INT 80
21737: PUSH
21738: LD_INT 90
21740: PUSH
21741: LD_INT 100
21743: PUSH
21744: LD_INT 110
21746: PUSH
21747: LD_INT 120
21749: PUSH
21750: LD_INT 130
21752: PUSH
21753: LD_INT 140
21755: PUSH
21756: LD_INT 150
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 15
21781: PPUSH
21782: CALL_OW 12
21786: ARRAY
21787: ST_TO_ADDR
// if ValidHex ( x , y ) then
21788: LD_VAR 0 3
21792: PPUSH
21793: LD_VAR 0 4
21797: PPUSH
21798: CALL_OW 488
21802: IFFALSE 21825
// begin result := [ x , y ] ;
21804: LD_ADDR_VAR 0 1
21808: PUSH
21809: LD_VAR 0 3
21813: PUSH
21814: LD_VAR 0 4
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// break ;
21823: GO 21827
// end ; end ;
21825: GO 21627
21827: POP
21828: POP
// if result then
21829: LD_VAR 0 1
21833: IFFALSE 21893
// begin ToLua ( playSibBomb() ) ;
21835: LD_STRING playSibBomb()
21837: PPUSH
21838: CALL_OW 559
// wait ( 0 0$14 ) ;
21842: LD_INT 490
21844: PPUSH
21845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21849: LD_VAR 0 1
21853: PUSH
21854: LD_INT 1
21856: ARRAY
21857: PPUSH
21858: LD_VAR 0 1
21862: PUSH
21863: LD_INT 2
21865: ARRAY
21866: PPUSH
21867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21871: LD_VAR 0 1
21875: PUSH
21876: LD_INT 1
21878: ARRAY
21879: PPUSH
21880: LD_VAR 0 1
21884: PUSH
21885: LD_INT 2
21887: ARRAY
21888: PPUSH
21889: CALL_OW 429
// end ; end ;
21893: LD_VAR 0 1
21897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21898: LD_EXP 47
21902: PUSH
21903: LD_EXP 69
21907: AND
21908: IFFALSE 21920
21910: GO 21912
21912: DISABLE
// YouLost (  ) ;
21913: LD_STRING 
21915: PPUSH
21916: CALL_OW 104
21920: END
// every 0 0$1 trigger StreamModeActive and sFog do
21921: LD_EXP 47
21925: PUSH
21926: LD_EXP 68
21930: AND
21931: IFFALSE 21945
21933: GO 21935
21935: DISABLE
// FogOff ( your_side ) ;
21936: LD_OWVAR 2
21940: PPUSH
21941: CALL_OW 344
21945: END
// every 0 0$1 trigger StreamModeActive and sSun do
21946: LD_EXP 47
21950: PUSH
21951: LD_EXP 70
21955: AND
21956: IFFALSE 21984
21958: GO 21960
21960: DISABLE
// begin solar_recharge_percent := 0 ;
21961: LD_ADDR_OWVAR 79
21965: PUSH
21966: LD_INT 0
21968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21969: LD_INT 10500
21971: PPUSH
21972: CALL_OW 67
// solar_recharge_percent := 100 ;
21976: LD_ADDR_OWVAR 79
21980: PUSH
21981: LD_INT 100
21983: ST_TO_ADDR
// end ;
21984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21985: LD_EXP 47
21989: PUSH
21990: LD_EXP 71
21994: AND
21995: IFFALSE 22234
21997: GO 21999
21999: DISABLE
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin tmp := [ ] ;
22005: LD_ADDR_VAR 0 3
22009: PUSH
22010: EMPTY
22011: ST_TO_ADDR
// for i := 1 to 6 do
22012: LD_ADDR_VAR 0 1
22016: PUSH
22017: DOUBLE
22018: LD_INT 1
22020: DEC
22021: ST_TO_ADDR
22022: LD_INT 6
22024: PUSH
22025: FOR_TO
22026: IFFALSE 22131
// begin uc_nation := nation_nature ;
22028: LD_ADDR_OWVAR 21
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// uc_side := 0 ;
22036: LD_ADDR_OWVAR 20
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22044: LD_ADDR_OWVAR 29
22048: PUSH
22049: LD_INT 12
22051: PUSH
22052: LD_INT 12
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: ST_TO_ADDR
// hc_agressivity := 20 ;
22059: LD_ADDR_OWVAR 35
22063: PUSH
22064: LD_INT 20
22066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22067: LD_ADDR_OWVAR 28
22071: PUSH
22072: LD_INT 17
22074: ST_TO_ADDR
// hc_gallery :=  ;
22075: LD_ADDR_OWVAR 33
22079: PUSH
22080: LD_STRING 
22082: ST_TO_ADDR
// hc_name :=  ;
22083: LD_ADDR_OWVAR 26
22087: PUSH
22088: LD_STRING 
22090: ST_TO_ADDR
// un := CreateHuman ;
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: CALL_OW 44
22100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22101: LD_VAR 0 2
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: CALL_OW 51
// tmp := tmp ^ un ;
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_VAR 0 2
22127: ADD
22128: ST_TO_ADDR
// end ;
22129: GO 22025
22131: POP
22132: POP
// repeat wait ( 0 0$1 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// for un in tmp do
22140: LD_ADDR_VAR 0 2
22144: PUSH
22145: LD_VAR 0 3
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22225
// begin if IsDead ( un ) then
22153: LD_VAR 0 2
22157: PPUSH
22158: CALL_OW 301
22162: IFFALSE 22182
// begin tmp := tmp diff un ;
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: LD_VAR 0 3
22173: PUSH
22174: LD_VAR 0 2
22178: DIFF
22179: ST_TO_ADDR
// continue ;
22180: GO 22150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22182: LD_VAR 0 2
22186: PPUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 22
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: PPUSH
22209: LD_VAR 0 2
22213: PPUSH
22214: CALL_OW 74
22218: PPUSH
22219: CALL_OW 115
// end ;
22223: GO 22150
22225: POP
22226: POP
// until not tmp ;
22227: LD_VAR 0 3
22231: NOT
22232: IFFALSE 22133
// end ;
22234: PPOPN 3
22236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22237: LD_EXP 47
22241: PUSH
22242: LD_EXP 72
22246: AND
22247: IFFALSE 22301
22249: GO 22251
22251: DISABLE
// begin ToLua ( displayTroll(); ) ;
22252: LD_STRING displayTroll();
22254: PPUSH
22255: CALL_OW 559
// wait ( 3 3$00 ) ;
22259: LD_INT 6300
22261: PPUSH
22262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22266: LD_STRING hideTroll();
22268: PPUSH
22269: CALL_OW 559
// wait ( 1 1$00 ) ;
22273: LD_INT 2100
22275: PPUSH
22276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22280: LD_STRING displayTroll();
22282: PPUSH
22283: CALL_OW 559
// wait ( 1 1$00 ) ;
22287: LD_INT 2100
22289: PPUSH
22290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22294: LD_STRING hideTroll();
22296: PPUSH
22297: CALL_OW 559
// end ;
22301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22302: LD_EXP 47
22306: PUSH
22307: LD_EXP 73
22311: AND
22312: IFFALSE 22375
22314: GO 22316
22316: DISABLE
22317: LD_INT 0
22319: PPUSH
// begin p := 0 ;
22320: LD_ADDR_VAR 0 1
22324: PUSH
22325: LD_INT 0
22327: ST_TO_ADDR
// repeat game_speed := 1 ;
22328: LD_ADDR_OWVAR 65
22332: PUSH
22333: LD_INT 1
22335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22336: LD_INT 35
22338: PPUSH
22339: CALL_OW 67
// p := p + 1 ;
22343: LD_ADDR_VAR 0 1
22347: PUSH
22348: LD_VAR 0 1
22352: PUSH
22353: LD_INT 1
22355: PLUS
22356: ST_TO_ADDR
// until p >= 60 ;
22357: LD_VAR 0 1
22361: PUSH
22362: LD_INT 60
22364: GREATEREQUAL
22365: IFFALSE 22328
// game_speed := 4 ;
22367: LD_ADDR_OWVAR 65
22371: PUSH
22372: LD_INT 4
22374: ST_TO_ADDR
// end ;
22375: PPOPN 1
22377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22378: LD_EXP 47
22382: PUSH
22383: LD_EXP 74
22387: AND
22388: IFFALSE 22534
22390: GO 22392
22392: DISABLE
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_OWVAR 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: LD_INT 30
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 30
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 69
22450: ST_TO_ADDR
// if not depot then
22451: LD_VAR 0 1
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22460: LD_ADDR_VAR 0 2
22464: PUSH
22465: LD_VAR 0 1
22469: PUSH
22470: LD_INT 1
22472: PPUSH
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 12
22482: ARRAY
22483: PPUSH
22484: CALL_OW 274
22488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 0
22499: PPUSH
22500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22504: LD_VAR 0 2
22508: PPUSH
22509: LD_INT 2
22511: PPUSH
22512: LD_INT 0
22514: PPUSH
22515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_INT 3
22526: PPUSH
22527: LD_INT 0
22529: PPUSH
22530: CALL_OW 277
// end ;
22534: PPOPN 2
22536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22537: LD_EXP 47
22541: PUSH
22542: LD_EXP 75
22546: AND
22547: IFFALSE 22644
22549: GO 22551
22551: DISABLE
22552: LD_INT 0
22554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22555: LD_ADDR_VAR 0 1
22559: PUSH
22560: LD_INT 22
22562: PUSH
22563: LD_OWVAR 2
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 21
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: LD_INT 23
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: ST_TO_ADDR
// if not tmp then
22609: LD_VAR 0 1
22613: NOT
22614: IFFALSE 22618
// exit ;
22616: GO 22644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22618: LD_VAR 0 1
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 1
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: PPUSH
22637: LD_INT 200
22639: PPUSH
22640: CALL_OW 234
// end ;
22644: PPOPN 1
22646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22647: LD_EXP 47
22651: PUSH
22652: LD_EXP 76
22656: AND
22657: IFFALSE 22736
22659: GO 22661
22661: DISABLE
22662: LD_INT 0
22664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_OWVAR 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PPUSH
22696: CALL_OW 69
22700: ST_TO_ADDR
// if not tmp then
22701: LD_VAR 0 1
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 1
22717: PPUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: CALL_OW 12
22727: ARRAY
22728: PPUSH
22729: LD_INT 60
22731: PPUSH
22732: CALL_OW 234
// end ;
22736: PPOPN 1
22738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22739: LD_EXP 47
22743: PUSH
22744: LD_EXP 77
22748: AND
22749: IFFALSE 22848
22751: GO 22753
22753: DISABLE
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
// begin enable ;
22758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22759: LD_ADDR_VAR 0 1
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_OWVAR 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 61
22778: PUSH
22779: EMPTY
22780: LIST
22781: PUSH
22782: LD_INT 33
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: PPUSH
22797: CALL_OW 69
22801: ST_TO_ADDR
// if not tmp then
22802: LD_VAR 0 1
22806: NOT
22807: IFFALSE 22811
// exit ;
22809: GO 22848
// for i in tmp do
22811: LD_ADDR_VAR 0 2
22815: PUSH
22816: LD_VAR 0 1
22820: PUSH
22821: FOR_IN
22822: IFFALSE 22846
// if IsControledBy ( i ) then
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 312
22833: IFFALSE 22844
// ComUnlink ( i ) ;
22835: LD_VAR 0 2
22839: PPUSH
22840: CALL_OW 136
22844: GO 22821
22846: POP
22847: POP
// end ;
22848: PPOPN 2
22850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22851: LD_EXP 47
22855: PUSH
22856: LD_EXP 78
22860: AND
22861: IFFALSE 23001
22863: GO 22865
22865: DISABLE
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
// begin ToLua ( displayPowell(); ) ;
22870: LD_STRING displayPowell();
22872: PPUSH
22873: CALL_OW 559
// uc_side := 0 ;
22877: LD_ADDR_OWVAR 20
22881: PUSH
22882: LD_INT 0
22884: ST_TO_ADDR
// uc_nation := 2 ;
22885: LD_ADDR_OWVAR 21
22889: PUSH
22890: LD_INT 2
22892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22893: LD_ADDR_OWVAR 37
22897: PUSH
22898: LD_INT 14
22900: ST_TO_ADDR
// vc_engine := engine_siberite ;
22901: LD_ADDR_OWVAR 39
22905: PUSH
22906: LD_INT 3
22908: ST_TO_ADDR
// vc_control := control_apeman ;
22909: LD_ADDR_OWVAR 38
22913: PUSH
22914: LD_INT 5
22916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22917: LD_ADDR_OWVAR 40
22921: PUSH
22922: LD_INT 29
22924: ST_TO_ADDR
// un := CreateVehicle ;
22925: LD_ADDR_VAR 0 2
22929: PUSH
22930: CALL_OW 45
22934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22935: LD_VAR 0 2
22939: PPUSH
22940: LD_INT 1
22942: PPUSH
22943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22947: LD_INT 35
22949: PPUSH
22950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22954: LD_VAR 0 2
22958: PPUSH
22959: LD_INT 22
22961: PUSH
22962: LD_OWVAR 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PPUSH
22971: CALL_OW 69
22975: PPUSH
22976: LD_VAR 0 2
22980: PPUSH
22981: CALL_OW 74
22985: PPUSH
22986: CALL_OW 115
// until IsDead ( un ) ;
22990: LD_VAR 0 2
22994: PPUSH
22995: CALL_OW 301
22999: IFFALSE 22947
// end ;
23001: PPOPN 2
23003: END
// every 0 0$1 trigger StreamModeActive and sStu do
23004: LD_EXP 47
23008: PUSH
23009: LD_EXP 86
23013: AND
23014: IFFALSE 23030
23016: GO 23018
23018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23019: LD_STRING displayStucuk();
23021: PPUSH
23022: CALL_OW 559
// ResetFog ;
23026: CALL_OW 335
// end ;
23030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23031: LD_EXP 47
23035: PUSH
23036: LD_EXP 79
23040: AND
23041: IFFALSE 23182
23043: GO 23045
23045: DISABLE
23046: LD_INT 0
23048: PPUSH
23049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_OWVAR 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 21
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: ST_TO_ADDR
// if not tmp then
23086: LD_VAR 0 2
23090: NOT
23091: IFFALSE 23095
// exit ;
23093: GO 23182
// un := tmp [ rand ( 1 , tmp ) ] ;
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_VAR 0 2
23104: PUSH
23105: LD_INT 1
23107: PPUSH
23108: LD_VAR 0 2
23112: PPUSH
23113: CALL_OW 12
23117: ARRAY
23118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_INT 0
23126: PPUSH
23127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23131: LD_VAR 0 1
23135: PPUSH
23136: LD_OWVAR 3
23140: PUSH
23141: LD_VAR 0 1
23145: DIFF
23146: PPUSH
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL_OW 74
23156: PPUSH
23157: CALL_OW 115
// wait ( 0 0$20 ) ;
23161: LD_INT 700
23163: PPUSH
23164: CALL_OW 67
// SetSide ( un , your_side ) ;
23168: LD_VAR 0 1
23172: PPUSH
23173: LD_OWVAR 2
23177: PPUSH
23178: CALL_OW 235
// end ;
23182: PPOPN 2
23184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23185: LD_EXP 47
23189: PUSH
23190: LD_EXP 80
23194: AND
23195: IFFALSE 23301
23197: GO 23199
23199: DISABLE
23200: LD_INT 0
23202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_OWVAR 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: CALL_OW 69
23256: ST_TO_ADDR
// if not depot then
23257: LD_VAR 0 1
23261: NOT
23262: IFFALSE 23266
// exit ;
23264: GO 23301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23266: LD_VAR 0 1
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: CALL_OW 250
23279: PPUSH
23280: LD_VAR 0 1
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 251
23293: PPUSH
23294: LD_INT 70
23296: PPUSH
23297: CALL_OW 495
// end ;
23301: PPOPN 1
23303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23304: LD_EXP 47
23308: PUSH
23309: LD_EXP 81
23313: AND
23314: IFFALSE 23525
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23326: LD_ADDR_VAR 0 5
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_OWVAR 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 21
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PPUSH
23357: CALL_OW 69
23361: ST_TO_ADDR
// if not tmp then
23362: LD_VAR 0 5
23366: NOT
23367: IFFALSE 23371
// exit ;
23369: GO 23525
// for i in tmp do
23371: LD_ADDR_VAR 0 1
23375: PUSH
23376: LD_VAR 0 5
23380: PUSH
23381: FOR_IN
23382: IFFALSE 23523
// begin d := rand ( 0 , 5 ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_INT 0
23391: PPUSH
23392: LD_INT 5
23394: PPUSH
23395: CALL_OW 12
23399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23400: LD_ADDR_VAR 0 2
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 250
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_INT 3
23422: PPUSH
23423: LD_INT 12
23425: PPUSH
23426: CALL_OW 12
23430: PPUSH
23431: CALL_OW 272
23435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 251
23450: PPUSH
23451: LD_VAR 0 4
23455: PPUSH
23456: LD_INT 3
23458: PPUSH
23459: LD_INT 12
23461: PPUSH
23462: CALL_OW 12
23466: PPUSH
23467: CALL_OW 273
23471: ST_TO_ADDR
// if ValidHex ( x , y ) then
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: CALL_OW 488
23486: IFFALSE 23521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23488: LD_VAR 0 1
23492: PPUSH
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 3
23505: PPUSH
23506: LD_INT 6
23508: PPUSH
23509: CALL_OW 12
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 483
// end ;
23521: GO 23381
23523: POP
23524: POP
// end ;
23525: PPOPN 5
23527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23528: LD_EXP 47
23532: PUSH
23533: LD_EXP 82
23537: AND
23538: IFFALSE 23632
23540: GO 23542
23542: DISABLE
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_OWVAR 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 32
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 21
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: ST_TO_ADDR
// if not tmp then
23594: LD_VAR 0 2
23598: NOT
23599: IFFALSE 23603
// exit ;
23601: GO 23632
// for i in tmp do
23603: LD_ADDR_VAR 0 1
23607: PUSH
23608: LD_VAR 0 2
23612: PUSH
23613: FOR_IN
23614: IFFALSE 23630
// SetFuel ( i , 0 ) ;
23616: LD_VAR 0 1
23620: PPUSH
23621: LD_INT 0
23623: PPUSH
23624: CALL_OW 240
23628: GO 23613
23630: POP
23631: POP
// end ;
23632: PPOPN 2
23634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23635: LD_EXP 47
23639: PUSH
23640: LD_EXP 83
23644: AND
23645: IFFALSE 23711
23647: GO 23649
23649: DISABLE
23650: LD_INT 0
23652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23653: LD_ADDR_VAR 0 1
23657: PUSH
23658: LD_INT 22
23660: PUSH
23661: LD_OWVAR 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 29
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PPUSH
23684: CALL_OW 69
23688: ST_TO_ADDR
// if not tmp then
23689: LD_VAR 0 1
23693: NOT
23694: IFFALSE 23698
// exit ;
23696: GO 23711
// DestroyUnit ( tmp [ 1 ] ) ;
23698: LD_VAR 0 1
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PPUSH
23707: CALL_OW 65
// end ;
23711: PPOPN 1
23713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23714: LD_EXP 47
23718: PUSH
23719: LD_EXP 85
23723: AND
23724: IFFALSE 23853
23726: GO 23728
23728: DISABLE
23729: LD_INT 0
23731: PPUSH
// begin uc_side := 0 ;
23732: LD_ADDR_OWVAR 20
23736: PUSH
23737: LD_INT 0
23739: ST_TO_ADDR
// uc_nation := nation_arabian ;
23740: LD_ADDR_OWVAR 21
23744: PUSH
23745: LD_INT 2
23747: ST_TO_ADDR
// hc_gallery :=  ;
23748: LD_ADDR_OWVAR 33
23752: PUSH
23753: LD_STRING 
23755: ST_TO_ADDR
// hc_name :=  ;
23756: LD_ADDR_OWVAR 26
23760: PUSH
23761: LD_STRING 
23763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23764: LD_INT 1
23766: PPUSH
23767: LD_INT 11
23769: PPUSH
23770: LD_INT 10
23772: PPUSH
23773: CALL_OW 380
// un := CreateHuman ;
23777: LD_ADDR_VAR 0 1
23781: PUSH
23782: CALL_OW 44
23786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23787: LD_VAR 0 1
23791: PPUSH
23792: LD_INT 1
23794: PPUSH
23795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23799: LD_INT 35
23801: PPUSH
23802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_INT 22
23813: PUSH
23814: LD_OWVAR 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PPUSH
23823: CALL_OW 69
23827: PPUSH
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 74
23837: PPUSH
23838: CALL_OW 115
// until IsDead ( un ) ;
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 301
23851: IFFALSE 23799
// end ;
23853: PPOPN 1
23855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23856: LD_EXP 47
23860: PUSH
23861: LD_EXP 87
23865: AND
23866: IFFALSE 23878
23868: GO 23870
23870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23871: LD_STRING earthquake(getX(game), 0, 32)
23873: PPUSH
23874: CALL_OW 559
23878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23879: LD_EXP 47
23883: PUSH
23884: LD_EXP 88
23888: AND
23889: IFFALSE 23980
23891: GO 23893
23893: DISABLE
23894: LD_INT 0
23896: PPUSH
// begin enable ;
23897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_OWVAR 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 33
23927: PUSH
23928: LD_INT 3
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 1
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 23980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23954: LD_VAR 0 1
23958: PUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 12
23971: ARRAY
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 234
// end ;
23980: PPOPN 1
23982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23983: LD_EXP 47
23987: PUSH
23988: LD_EXP 89
23992: AND
23993: IFFALSE 24134
23995: GO 23997
23997: DISABLE
23998: LD_INT 0
24000: PPUSH
24001: PPUSH
24002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_OWVAR 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 25
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PPUSH
24034: CALL_OW 69
24038: ST_TO_ADDR
// if not tmp then
24039: LD_VAR 0 3
24043: NOT
24044: IFFALSE 24048
// exit ;
24046: GO 24134
// un := tmp [ rand ( 1 , tmp ) ] ;
24048: LD_ADDR_VAR 0 2
24052: PUSH
24053: LD_VAR 0 3
24057: PUSH
24058: LD_INT 1
24060: PPUSH
24061: LD_VAR 0 3
24065: PPUSH
24066: CALL_OW 12
24070: ARRAY
24071: ST_TO_ADDR
// if Crawls ( un ) then
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 318
24081: IFFALSE 24092
// ComWalk ( un ) ;
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 9
24099: PPUSH
24100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24104: LD_INT 28
24106: PPUSH
24107: LD_OWVAR 2
24111: PPUSH
24112: LD_INT 2
24114: PPUSH
24115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24119: LD_INT 29
24121: PPUSH
24122: LD_OWVAR 2
24126: PPUSH
24127: LD_INT 2
24129: PPUSH
24130: CALL_OW 322
// end ;
24134: PPOPN 3
24136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24137: LD_EXP 47
24141: PUSH
24142: LD_EXP 90
24146: AND
24147: IFFALSE 24258
24149: GO 24151
24151: DISABLE
24152: LD_INT 0
24154: PPUSH
24155: PPUSH
24156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_OWVAR 2
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 25
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: CALL_OW 69
24192: ST_TO_ADDR
// if not tmp then
24193: LD_VAR 0 3
24197: NOT
24198: IFFALSE 24202
// exit ;
24200: GO 24258
// un := tmp [ rand ( 1 , tmp ) ] ;
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_INT 1
24214: PPUSH
24215: LD_VAR 0 3
24219: PPUSH
24220: CALL_OW 12
24224: ARRAY
24225: ST_TO_ADDR
// if Crawls ( un ) then
24226: LD_VAR 0 2
24230: PPUSH
24231: CALL_OW 318
24235: IFFALSE 24246
// ComWalk ( un ) ;
24237: LD_VAR 0 2
24241: PPUSH
24242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 8
24253: PPUSH
24254: CALL_OW 336
// end ;
24258: PPOPN 3
24260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24261: LD_EXP 47
24265: PUSH
24266: LD_EXP 91
24270: AND
24271: IFFALSE 24415
24273: GO 24275
24275: DISABLE
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: LD_INT 34
24312: PUSH
24313: LD_INT 12
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 34
24322: PUSH
24323: LD_INT 51
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 34
24332: PUSH
24333: LD_INT 32
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: PPUSH
24351: CALL_OW 69
24355: ST_TO_ADDR
// if not tmp then
24356: LD_VAR 0 2
24360: NOT
24361: IFFALSE 24365
// exit ;
24363: GO 24415
// for i in tmp do
24365: LD_ADDR_VAR 0 1
24369: PUSH
24370: LD_VAR 0 2
24374: PUSH
24375: FOR_IN
24376: IFFALSE 24413
// if GetCargo ( i , mat_artifact ) = 0 then
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_INT 4
24385: PPUSH
24386: CALL_OW 289
24390: PUSH
24391: LD_INT 0
24393: EQUAL
24394: IFFALSE 24411
// SetCargo ( i , mat_siberit , 100 ) ;
24396: LD_VAR 0 1
24400: PPUSH
24401: LD_INT 3
24403: PPUSH
24404: LD_INT 100
24406: PPUSH
24407: CALL_OW 290
24411: GO 24375
24413: POP
24414: POP
// end ;
24415: PPOPN 2
24417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24418: LD_EXP 47
24422: PUSH
24423: LD_EXP 92
24427: AND
24428: IFFALSE 24611
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PPUSH
24454: CALL_OW 69
24458: ST_TO_ADDR
// if not tmp then
24459: LD_VAR 0 2
24463: NOT
24464: IFFALSE 24468
// exit ;
24466: GO 24611
// for i := 1 to 2 do
24468: LD_ADDR_VAR 0 1
24472: PUSH
24473: DOUBLE
24474: LD_INT 1
24476: DEC
24477: ST_TO_ADDR
24478: LD_INT 2
24480: PUSH
24481: FOR_TO
24482: IFFALSE 24609
// begin uc_side := your_side ;
24484: LD_ADDR_OWVAR 20
24488: PUSH
24489: LD_OWVAR 2
24493: ST_TO_ADDR
// uc_nation := nation_american ;
24494: LD_ADDR_OWVAR 21
24498: PUSH
24499: LD_INT 1
24501: ST_TO_ADDR
// vc_chassis := us_morphling ;
24502: LD_ADDR_OWVAR 37
24506: PUSH
24507: LD_INT 5
24509: ST_TO_ADDR
// vc_engine := engine_siberite ;
24510: LD_ADDR_OWVAR 39
24514: PUSH
24515: LD_INT 3
24517: ST_TO_ADDR
// vc_control := control_computer ;
24518: LD_ADDR_OWVAR 38
24522: PUSH
24523: LD_INT 3
24525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24526: LD_ADDR_OWVAR 40
24530: PUSH
24531: LD_INT 10
24533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24534: LD_VAR 0 2
24538: PUSH
24539: LD_INT 1
24541: ARRAY
24542: PPUSH
24543: CALL_OW 310
24547: NOT
24548: IFFALSE 24595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24550: CALL_OW 45
24554: PPUSH
24555: LD_VAR 0 2
24559: PUSH
24560: LD_INT 1
24562: ARRAY
24563: PPUSH
24564: CALL_OW 250
24568: PPUSH
24569: LD_VAR 0 2
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: PPUSH
24578: CALL_OW 251
24582: PPUSH
24583: LD_INT 12
24585: PPUSH
24586: LD_INT 1
24588: PPUSH
24589: CALL_OW 50
24593: GO 24607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24595: CALL_OW 45
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 51
// end ;
24607: GO 24481
24609: POP
24610: POP
// end ;
24611: PPOPN 2
24613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24614: LD_EXP 47
24618: PUSH
24619: LD_EXP 93
24623: AND
24624: IFFALSE 24846
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24637: LD_ADDR_VAR 0 6
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_OWVAR 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 21
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: PPUSH
24686: CALL_OW 69
24690: ST_TO_ADDR
// if not tmp then
24691: LD_VAR 0 6
24695: NOT
24696: IFFALSE 24700
// exit ;
24698: GO 24846
// s1 := rand ( 1 , 4 ) ;
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_INT 1
24707: PPUSH
24708: LD_INT 4
24710: PPUSH
24711: CALL_OW 12
24715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24716: LD_ADDR_VAR 0 4
24720: PUSH
24721: LD_VAR 0 6
24725: PUSH
24726: LD_INT 1
24728: ARRAY
24729: PPUSH
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 259
24739: ST_TO_ADDR
// if s1 = 1 then
24740: LD_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: EQUAL
24748: IFFALSE 24768
// s2 := rand ( 2 , 4 ) else
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_INT 2
24757: PPUSH
24758: LD_INT 4
24760: PPUSH
24761: CALL_OW 12
24765: ST_TO_ADDR
24766: GO 24776
// s2 := 1 ;
24768: LD_ADDR_VAR 0 3
24772: PUSH
24773: LD_INT 1
24775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_VAR 0 6
24785: PUSH
24786: LD_INT 1
24788: ARRAY
24789: PPUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: CALL_OW 259
24799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24800: LD_VAR 0 6
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: LD_VAR 0 2
24813: PPUSH
24814: LD_VAR 0 5
24818: PPUSH
24819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24823: LD_VAR 0 6
24827: PUSH
24828: LD_INT 1
24830: ARRAY
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: LD_VAR 0 4
24841: PPUSH
24842: CALL_OW 237
// end ;
24846: PPOPN 6
24848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24849: LD_EXP 47
24853: PUSH
24854: LD_EXP 94
24858: AND
24859: IFFALSE 24938
24861: GO 24863
24863: DISABLE
24864: LD_INT 0
24866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24867: LD_ADDR_VAR 0 1
24871: PUSH
24872: LD_INT 22
24874: PUSH
24875: LD_OWVAR 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: ST_TO_ADDR
// if not tmp then
24903: LD_VAR 0 1
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 24938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24912: LD_VAR 0 1
24916: PUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 12
24929: ARRAY
24930: PPUSH
24931: LD_INT 1
24933: PPUSH
24934: CALL_OW 234
// end ;
24938: PPOPN 1
24940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24941: LD_EXP 47
24945: PUSH
24946: LD_EXP 95
24950: AND
24951: IFFALSE 25063
24953: GO 24955
24955: DISABLE
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: LD_INT 30
24982: PUSH
24983: LD_INT 27
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 30
24992: PUSH
24993: LD_INT 26
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 28
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if not tmp then
25025: LD_VAR 0 2
25029: NOT
25030: IFFALSE 25034
// exit ;
25032: GO 25063
// for i in tmp do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_VAR 0 2
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25061
// SetLives ( i , 1 ) ;
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 234
25059: GO 25044
25061: POP
25062: POP
// end ;
25063: PPOPN 2
25065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25066: LD_EXP 47
25070: PUSH
25071: LD_EXP 96
25075: AND
25076: IFFALSE 25363
25078: GO 25080
25080: DISABLE
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// begin i := rand ( 1 , 7 ) ;
25086: LD_ADDR_VAR 0 1
25090: PUSH
25091: LD_INT 1
25093: PPUSH
25094: LD_INT 7
25096: PPUSH
25097: CALL_OW 12
25101: ST_TO_ADDR
// case i of 1 :
25102: LD_VAR 0 1
25106: PUSH
25107: LD_INT 1
25109: DOUBLE
25110: EQUAL
25111: IFTRUE 25115
25113: GO 25125
25115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25116: LD_STRING earthquake(getX(game), 0, 32)
25118: PPUSH
25119: CALL_OW 559
25123: GO 25363
25125: LD_INT 2
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25147
25133: POP
// begin ToLua ( displayStucuk(); ) ;
25134: LD_STRING displayStucuk();
25136: PPUSH
25137: CALL_OW 559
// ResetFog ;
25141: CALL_OW 335
// end ; 3 :
25145: GO 25363
25147: LD_INT 3
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25259
25155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 22
25163: PUSH
25164: LD_OWVAR 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 25
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25363
// un := tmp [ rand ( 1 , tmp ) ] ;
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: LD_INT 1
25213: PPUSH
25214: LD_VAR 0 2
25218: PPUSH
25219: CALL_OW 12
25223: ARRAY
25224: ST_TO_ADDR
// if Crawls ( un ) then
25225: LD_VAR 0 3
25229: PPUSH
25230: CALL_OW 318
25234: IFFALSE 25245
// ComWalk ( un ) ;
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25245: LD_VAR 0 3
25249: PPUSH
25250: LD_INT 8
25252: PPUSH
25253: CALL_OW 336
// end ; 4 :
25257: GO 25363
25259: LD_INT 4
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25341
25267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25268: LD_ADDR_VAR 0 2
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_OWVAR 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 30
25287: PUSH
25288: LD_INT 29
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PPUSH
25299: CALL_OW 69
25303: ST_TO_ADDR
// if not tmp then
25304: LD_VAR 0 2
25308: NOT
25309: IFFALSE 25313
// exit ;
25311: GO 25363
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25313: LD_VAR 0 2
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25326: LD_VAR 0 2
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: CALL_OW 65
// end ; 5 .. 7 :
25339: GO 25363
25341: LD_INT 5
25343: DOUBLE
25344: GREATEREQUAL
25345: IFFALSE 25353
25347: LD_INT 7
25349: DOUBLE
25350: LESSEQUAL
25351: IFTRUE 25355
25353: GO 25362
25355: POP
// StreamSibBomb ; end ;
25356: CALL 21600 0 0
25360: GO 25363
25362: POP
// end ;
25363: PPOPN 3
25365: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25366: LD_EXP 47
25370: PUSH
25371: LD_EXP 97
25375: AND
25376: IFFALSE 25532
25378: GO 25380
25380: DISABLE
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_INT 81
25393: PUSH
25394: LD_OWVAR 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 21
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 21
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PPUSH
25435: CALL_OW 69
25439: ST_TO_ADDR
// if not tmp then
25440: LD_VAR 0 2
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25532
// p := 0 ;
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_INT 0
25456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25457: LD_INT 35
25459: PPUSH
25460: CALL_OW 67
// p := p + 1 ;
25464: LD_ADDR_VAR 0 3
25468: PUSH
25469: LD_VAR 0 3
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: ST_TO_ADDR
// for i in tmp do
25478: LD_ADDR_VAR 0 1
25482: PUSH
25483: LD_VAR 0 2
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25520
// if GetLives ( i ) < 1000 then
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL_OW 256
25500: PUSH
25501: LD_INT 1000
25503: LESS
25504: IFFALSE 25518
// SetLives ( i , 1000 ) ;
25506: LD_VAR 0 1
25510: PPUSH
25511: LD_INT 1000
25513: PPUSH
25514: CALL_OW 234
25518: GO 25488
25520: POP
25521: POP
// until p > 20 ;
25522: LD_VAR 0 3
25526: PUSH
25527: LD_INT 20
25529: GREATER
25530: IFFALSE 25457
// end ;
25532: PPOPN 3
25534: END
// every 0 0$1 trigger StreamModeActive and sTime do
25535: LD_EXP 47
25539: PUSH
25540: LD_EXP 98
25544: AND
25545: IFFALSE 25580
25547: GO 25549
25549: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25550: LD_INT 28
25552: PPUSH
25553: LD_OWVAR 2
25557: PPUSH
25558: LD_INT 2
25560: PPUSH
25561: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25565: LD_INT 30
25567: PPUSH
25568: LD_OWVAR 2
25572: PPUSH
25573: LD_INT 2
25575: PPUSH
25576: CALL_OW 322
// end ;
25580: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25581: LD_EXP 47
25585: PUSH
25586: LD_EXP 99
25590: AND
25591: IFFALSE 25712
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
25599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25600: LD_ADDR_VAR 0 2
25604: PUSH
25605: LD_INT 22
25607: PUSH
25608: LD_OWVAR 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 3
25629: PUSH
25630: LD_INT 23
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: PPUSH
25649: CALL_OW 69
25653: ST_TO_ADDR
// if not tmp then
25654: LD_VAR 0 2
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25712
// for i in tmp do
25663: LD_ADDR_VAR 0 1
25667: PUSH
25668: LD_VAR 0 2
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25710
// begin if Crawls ( i ) then
25676: LD_VAR 0 1
25680: PPUSH
25681: CALL_OW 318
25685: IFFALSE 25696
// ComWalk ( i ) ;
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 138
// SetClass ( i , 2 ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_INT 2
25703: PPUSH
25704: CALL_OW 336
// end ;
25708: GO 25673
25710: POP
25711: POP
// end ;
25712: PPOPN 2
25714: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25715: LD_EXP 47
25719: PUSH
25720: LD_EXP 100
25724: AND
25725: IFFALSE 26013
25727: GO 25729
25729: DISABLE
25730: LD_INT 0
25732: PPUSH
25733: PPUSH
25734: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 9
25742: PPUSH
25743: LD_INT 1
25745: PPUSH
25746: LD_INT 1
25748: PPUSH
25749: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25753: LD_INT 9
25755: PPUSH
25756: LD_OWVAR 2
25760: PPUSH
25761: CALL_OW 343
// uc_side := 9 ;
25765: LD_ADDR_OWVAR 20
25769: PUSH
25770: LD_INT 9
25772: ST_TO_ADDR
// uc_nation := 2 ;
25773: LD_ADDR_OWVAR 21
25777: PUSH
25778: LD_INT 2
25780: ST_TO_ADDR
// hc_name := Dark Warrior ;
25781: LD_ADDR_OWVAR 26
25785: PUSH
25786: LD_STRING Dark Warrior
25788: ST_TO_ADDR
// hc_gallery :=  ;
25789: LD_ADDR_OWVAR 33
25793: PUSH
25794: LD_STRING 
25796: ST_TO_ADDR
// hc_noskilllimit := true ;
25797: LD_ADDR_OWVAR 76
25801: PUSH
25802: LD_INT 1
25804: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25805: LD_ADDR_OWVAR 31
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 30
25818: PUSH
25819: LD_INT 30
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// un := CreateHuman ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: CALL_OW 44
25837: ST_TO_ADDR
// hc_noskilllimit := false ;
25838: LD_ADDR_OWVAR 76
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25846: LD_VAR 0 3
25850: PPUSH
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 51
// ToLua ( playRanger() ) ;
25858: LD_STRING playRanger()
25860: PPUSH
25861: CALL_OW 559
// p := 0 ;
25865: LD_ADDR_VAR 0 2
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25873: LD_INT 35
25875: PPUSH
25876: CALL_OW 67
// p := p + 1 ;
25880: LD_ADDR_VAR 0 2
25884: PUSH
25885: LD_VAR 0 2
25889: PUSH
25890: LD_INT 1
25892: PLUS
25893: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25894: LD_VAR 0 3
25898: PPUSH
25899: CALL_OW 256
25903: PUSH
25904: LD_INT 1000
25906: LESS
25907: IFFALSE 25921
// SetLives ( un , 1000 ) ;
25909: LD_VAR 0 3
25913: PPUSH
25914: LD_INT 1000
25916: PPUSH
25917: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25921: LD_VAR 0 3
25925: PPUSH
25926: LD_INT 81
25928: PUSH
25929: LD_OWVAR 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 91
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 30
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: CALL_OW 74
25972: PPUSH
25973: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25977: LD_VAR 0 2
25981: PUSH
25982: LD_INT 80
25984: GREATER
25985: PUSH
25986: LD_VAR 0 3
25990: PPUSH
25991: CALL_OW 301
25995: OR
25996: IFFALSE 25873
// if un then
25998: LD_VAR 0 3
26002: IFFALSE 26013
// RemoveUnit ( un ) ;
26004: LD_VAR 0 3
26008: PPUSH
26009: CALL_OW 64
// end ;
26013: PPOPN 3
26015: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26016: LD_EXP 101
26020: IFFALSE 26136
26022: GO 26024
26024: DISABLE
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 81
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26066: LD_STRING playComputer()
26068: PPUSH
26069: CALL_OW 559
// if not tmp then
26073: LD_VAR 0 2
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26136
// for i in tmp do
26082: LD_ADDR_VAR 0 1
26086: PUSH
26087: LD_VAR 0 2
26091: PUSH
26092: FOR_IN
26093: IFFALSE 26134
// for j := 1 to 4 do
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: DOUBLE
26101: LD_INT 1
26103: DEC
26104: ST_TO_ADDR
26105: LD_INT 4
26107: PUSH
26108: FOR_TO
26109: IFFALSE 26130
// SetSkill ( i , j , 10 ) ;
26111: LD_VAR 0 1
26115: PPUSH
26116: LD_VAR 0 3
26120: PPUSH
26121: LD_INT 10
26123: PPUSH
26124: CALL_OW 237
26128: GO 26108
26130: POP
26131: POP
26132: GO 26092
26134: POP
26135: POP
// end ;
26136: PPOPN 3
26138: END
// every 0 0$1 trigger s30 do var i , tmp ;
26139: LD_EXP 102
26143: IFFALSE 26212
26145: GO 26147
26147: DISABLE
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_OWVAR 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: ST_TO_ADDR
// if not tmp then
26174: LD_VAR 0 2
26178: NOT
26179: IFFALSE 26183
// exit ;
26181: GO 26212
// for i in tmp do
26183: LD_ADDR_VAR 0 1
26187: PUSH
26188: LD_VAR 0 2
26192: PUSH
26193: FOR_IN
26194: IFFALSE 26210
// SetLives ( i , 300 ) ;
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_INT 300
26203: PPUSH
26204: CALL_OW 234
26208: GO 26193
26210: POP
26211: POP
// end ;
26212: PPOPN 2
26214: END
// every 0 0$1 trigger s60 do var i , tmp ;
26215: LD_EXP 103
26219: IFFALSE 26288
26221: GO 26223
26223: DISABLE
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26228: LD_ADDR_VAR 0 2
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_OWVAR 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26288
// for i in tmp do
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26286
// SetLives ( i , 600 ) ;
26272: LD_VAR 0 1
26276: PPUSH
26277: LD_INT 600
26279: PPUSH
26280: CALL_OW 234
26284: GO 26269
26286: POP
26287: POP
// end ;
26288: PPOPN 2
26290: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26291: LD_INT 0
26293: PPUSH
// case cmd of 301 :
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 301
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26339
26307: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26308: LD_VAR 0 6
26312: PPUSH
26313: LD_VAR 0 7
26317: PPUSH
26318: LD_VAR 0 8
26322: PPUSH
26323: LD_VAR 0 4
26327: PPUSH
26328: LD_VAR 0 5
26332: PPUSH
26333: CALL 27548 0 5
26337: GO 26460
26339: LD_INT 302
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26384
26347: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26348: LD_VAR 0 6
26352: PPUSH
26353: LD_VAR 0 7
26357: PPUSH
26358: LD_VAR 0 8
26362: PPUSH
26363: LD_VAR 0 9
26367: PPUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_VAR 0 5
26377: PPUSH
26378: CALL 27639 0 6
26382: GO 26460
26384: LD_INT 303
26386: DOUBLE
26387: EQUAL
26388: IFTRUE 26392
26390: GO 26429
26392: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26393: LD_VAR 0 6
26397: PPUSH
26398: LD_VAR 0 7
26402: PPUSH
26403: LD_VAR 0 8
26407: PPUSH
26408: LD_VAR 0 9
26412: PPUSH
26413: LD_VAR 0 4
26417: PPUSH
26418: LD_VAR 0 5
26422: PPUSH
26423: CALL 26465 0 6
26427: GO 26460
26429: LD_INT 304
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 26459
26437: POP
// hHackTeleport ( unit , x , y ) ; end ;
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 4
26447: PPUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: CALL 28232 0 3
26457: GO 26460
26459: POP
// end ;
26460: LD_VAR 0 12
26464: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26465: LD_INT 0
26467: PPUSH
26468: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26469: LD_VAR 0 1
26473: PUSH
26474: LD_INT 1
26476: LESS
26477: PUSH
26478: LD_VAR 0 1
26482: PUSH
26483: LD_INT 3
26485: GREATER
26486: OR
26487: PUSH
26488: LD_VAR 0 5
26492: PPUSH
26493: LD_VAR 0 6
26497: PPUSH
26498: CALL_OW 428
26502: OR
26503: IFFALSE 26507
// exit ;
26505: GO 27235
// uc_side := your_side ;
26507: LD_ADDR_OWVAR 20
26511: PUSH
26512: LD_OWVAR 2
26516: ST_TO_ADDR
// uc_nation := nation ;
26517: LD_ADDR_OWVAR 21
26521: PUSH
26522: LD_VAR 0 1
26526: ST_TO_ADDR
// bc_level = 1 ;
26527: LD_ADDR_OWVAR 43
26531: PUSH
26532: LD_INT 1
26534: ST_TO_ADDR
// case btype of 1 :
26535: LD_VAR 0 2
26539: PUSH
26540: LD_INT 1
26542: DOUBLE
26543: EQUAL
26544: IFTRUE 26548
26546: GO 26559
26548: POP
// bc_type := b_depot ; 2 :
26549: LD_ADDR_OWVAR 42
26553: PUSH
26554: LD_INT 0
26556: ST_TO_ADDR
26557: GO 27179
26559: LD_INT 2
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26578
26567: POP
// bc_type := b_warehouse ; 3 :
26568: LD_ADDR_OWVAR 42
26572: PUSH
26573: LD_INT 1
26575: ST_TO_ADDR
26576: GO 27179
26578: LD_INT 3
26580: DOUBLE
26581: EQUAL
26582: IFTRUE 26586
26584: GO 26597
26586: POP
// bc_type := b_lab ; 4 .. 9 :
26587: LD_ADDR_OWVAR 42
26591: PUSH
26592: LD_INT 6
26594: ST_TO_ADDR
26595: GO 27179
26597: LD_INT 4
26599: DOUBLE
26600: GREATEREQUAL
26601: IFFALSE 26609
26603: LD_INT 9
26605: DOUBLE
26606: LESSEQUAL
26607: IFTRUE 26611
26609: GO 26671
26611: POP
// begin bc_type := b_lab_half ;
26612: LD_ADDR_OWVAR 42
26616: PUSH
26617: LD_INT 7
26619: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26620: LD_ADDR_OWVAR 44
26624: PUSH
26625: LD_INT 10
26627: PUSH
26628: LD_INT 11
26630: PUSH
26631: LD_INT 12
26633: PUSH
26634: LD_INT 15
26636: PUSH
26637: LD_INT 14
26639: PUSH
26640: LD_INT 13
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: PUSH
26651: LD_VAR 0 2
26655: PUSH
26656: LD_INT 3
26658: MINUS
26659: ARRAY
26660: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
26661: LD_ADDR_OWVAR 45
26665: PUSH
26666: LD_INT 9
26668: ST_TO_ADDR
// end ; 10 .. 13 :
26669: GO 27179
26671: LD_INT 10
26673: DOUBLE
26674: GREATEREQUAL
26675: IFFALSE 26683
26677: LD_INT 13
26679: DOUBLE
26680: LESSEQUAL
26681: IFTRUE 26685
26683: GO 26762
26685: POP
// begin bc_type := b_lab_full ;
26686: LD_ADDR_OWVAR 42
26690: PUSH
26691: LD_INT 8
26693: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26694: LD_ADDR_OWVAR 44
26698: PUSH
26699: LD_INT 10
26701: PUSH
26702: LD_INT 12
26704: PUSH
26705: LD_INT 14
26707: PUSH
26708: LD_INT 13
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: PUSH
26717: LD_VAR 0 2
26721: PUSH
26722: LD_INT 9
26724: MINUS
26725: ARRAY
26726: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26727: LD_ADDR_OWVAR 45
26731: PUSH
26732: LD_INT 11
26734: PUSH
26735: LD_INT 15
26737: PUSH
26738: LD_INT 12
26740: PUSH
26741: LD_INT 15
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: PUSH
26750: LD_VAR 0 2
26754: PUSH
26755: LD_INT 9
26757: MINUS
26758: ARRAY
26759: ST_TO_ADDR
// end ; 14 :
26760: GO 27179
26762: LD_INT 14
26764: DOUBLE
26765: EQUAL
26766: IFTRUE 26770
26768: GO 26781
26770: POP
// bc_type := b_workshop ; 15 :
26771: LD_ADDR_OWVAR 42
26775: PUSH
26776: LD_INT 2
26778: ST_TO_ADDR
26779: GO 27179
26781: LD_INT 15
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26800
26789: POP
// bc_type := b_factory ; 16 :
26790: LD_ADDR_OWVAR 42
26794: PUSH
26795: LD_INT 3
26797: ST_TO_ADDR
26798: GO 27179
26800: LD_INT 16
26802: DOUBLE
26803: EQUAL
26804: IFTRUE 26808
26806: GO 26819
26808: POP
// bc_type := b_ext_gun ; 17 :
26809: LD_ADDR_OWVAR 42
26813: PUSH
26814: LD_INT 17
26816: ST_TO_ADDR
26817: GO 27179
26819: LD_INT 17
26821: DOUBLE
26822: EQUAL
26823: IFTRUE 26827
26825: GO 26855
26827: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26828: LD_ADDR_OWVAR 42
26832: PUSH
26833: LD_INT 19
26835: PUSH
26836: LD_INT 23
26838: PUSH
26839: LD_INT 19
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PUSH
26847: LD_VAR 0 1
26851: ARRAY
26852: ST_TO_ADDR
26853: GO 27179
26855: LD_INT 18
26857: DOUBLE
26858: EQUAL
26859: IFTRUE 26863
26861: GO 26874
26863: POP
// bc_type := b_ext_radar ; 19 :
26864: LD_ADDR_OWVAR 42
26868: PUSH
26869: LD_INT 20
26871: ST_TO_ADDR
26872: GO 27179
26874: LD_INT 19
26876: DOUBLE
26877: EQUAL
26878: IFTRUE 26882
26880: GO 26893
26882: POP
// bc_type := b_ext_radio ; 20 :
26883: LD_ADDR_OWVAR 42
26887: PUSH
26888: LD_INT 22
26890: ST_TO_ADDR
26891: GO 27179
26893: LD_INT 20
26895: DOUBLE
26896: EQUAL
26897: IFTRUE 26901
26899: GO 26912
26901: POP
// bc_type := b_ext_siberium ; 21 :
26902: LD_ADDR_OWVAR 42
26906: PUSH
26907: LD_INT 21
26909: ST_TO_ADDR
26910: GO 27179
26912: LD_INT 21
26914: DOUBLE
26915: EQUAL
26916: IFTRUE 26920
26918: GO 26931
26920: POP
// bc_type := b_ext_computer ; 22 :
26921: LD_ADDR_OWVAR 42
26925: PUSH
26926: LD_INT 24
26928: ST_TO_ADDR
26929: GO 27179
26931: LD_INT 22
26933: DOUBLE
26934: EQUAL
26935: IFTRUE 26939
26937: GO 26950
26939: POP
// bc_type := b_ext_track ; 23 :
26940: LD_ADDR_OWVAR 42
26944: PUSH
26945: LD_INT 16
26947: ST_TO_ADDR
26948: GO 27179
26950: LD_INT 23
26952: DOUBLE
26953: EQUAL
26954: IFTRUE 26958
26956: GO 26969
26958: POP
// bc_type := b_ext_laser ; 24 :
26959: LD_ADDR_OWVAR 42
26963: PUSH
26964: LD_INT 25
26966: ST_TO_ADDR
26967: GO 27179
26969: LD_INT 24
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 26988
26977: POP
// bc_type := b_control_tower ; 25 :
26978: LD_ADDR_OWVAR 42
26982: PUSH
26983: LD_INT 36
26985: ST_TO_ADDR
26986: GO 27179
26988: LD_INT 25
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 27007
26996: POP
// bc_type := b_breastwork ; 26 :
26997: LD_ADDR_OWVAR 42
27001: PUSH
27002: LD_INT 31
27004: ST_TO_ADDR
27005: GO 27179
27007: LD_INT 26
27009: DOUBLE
27010: EQUAL
27011: IFTRUE 27015
27013: GO 27026
27015: POP
// bc_type := b_bunker ; 27 :
27016: LD_ADDR_OWVAR 42
27020: PUSH
27021: LD_INT 32
27023: ST_TO_ADDR
27024: GO 27179
27026: LD_INT 27
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27045
27034: POP
// bc_type := b_turret ; 28 :
27035: LD_ADDR_OWVAR 42
27039: PUSH
27040: LD_INT 33
27042: ST_TO_ADDR
27043: GO 27179
27045: LD_INT 28
27047: DOUBLE
27048: EQUAL
27049: IFTRUE 27053
27051: GO 27064
27053: POP
// bc_type := b_armoury ; 29 :
27054: LD_ADDR_OWVAR 42
27058: PUSH
27059: LD_INT 4
27061: ST_TO_ADDR
27062: GO 27179
27064: LD_INT 29
27066: DOUBLE
27067: EQUAL
27068: IFTRUE 27072
27070: GO 27083
27072: POP
// bc_type := b_barracks ; 30 :
27073: LD_ADDR_OWVAR 42
27077: PUSH
27078: LD_INT 5
27080: ST_TO_ADDR
27081: GO 27179
27083: LD_INT 30
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27102
27091: POP
// bc_type := b_solar_power ; 31 :
27092: LD_ADDR_OWVAR 42
27096: PUSH
27097: LD_INT 27
27099: ST_TO_ADDR
27100: GO 27179
27102: LD_INT 31
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27121
27110: POP
// bc_type := b_oil_power ; 32 :
27111: LD_ADDR_OWVAR 42
27115: PUSH
27116: LD_INT 26
27118: ST_TO_ADDR
27119: GO 27179
27121: LD_INT 32
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27140
27129: POP
// bc_type := b_siberite_power ; 33 :
27130: LD_ADDR_OWVAR 42
27134: PUSH
27135: LD_INT 28
27137: ST_TO_ADDR
27138: GO 27179
27140: LD_INT 33
27142: DOUBLE
27143: EQUAL
27144: IFTRUE 27148
27146: GO 27159
27148: POP
// bc_type := b_oil_mine ; 34 :
27149: LD_ADDR_OWVAR 42
27153: PUSH
27154: LD_INT 29
27156: ST_TO_ADDR
27157: GO 27179
27159: LD_INT 34
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27167
27165: GO 27178
27167: POP
// bc_type := b_siberite_mine ; end ;
27168: LD_ADDR_OWVAR 42
27172: PUSH
27173: LD_INT 30
27175: ST_TO_ADDR
27176: GO 27179
27178: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27179: LD_ADDR_VAR 0 8
27183: PUSH
27184: LD_VAR 0 5
27188: PPUSH
27189: LD_VAR 0 6
27193: PPUSH
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 47
27203: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27204: LD_OWVAR 42
27208: PUSH
27209: LD_INT 32
27211: PUSH
27212: LD_INT 33
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: IN
27219: IFFALSE 27235
// PlaceWeaponTurret ( b , weapon ) ;
27221: LD_VAR 0 8
27225: PPUSH
27226: LD_VAR 0 4
27230: PPUSH
27231: CALL_OW 431
// end ;
27235: LD_VAR 0 7
27239: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27246: LD_ADDR_VAR 0 4
27250: PUSH
27251: LD_INT 22
27253: PUSH
27254: LD_OWVAR 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 30
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 30
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PPUSH
27295: CALL_OW 69
27299: ST_TO_ADDR
// if not tmp then
27300: LD_VAR 0 4
27304: NOT
27305: IFFALSE 27309
// exit ;
27307: GO 27368
// for i in tmp do
27309: LD_ADDR_VAR 0 2
27313: PUSH
27314: LD_VAR 0 4
27318: PUSH
27319: FOR_IN
27320: IFFALSE 27366
// for j = 1 to 3 do
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: DOUBLE
27328: LD_INT 1
27330: DEC
27331: ST_TO_ADDR
27332: LD_INT 3
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27362
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27338: LD_VAR 0 2
27342: PPUSH
27343: CALL_OW 274
27347: PPUSH
27348: LD_VAR 0 3
27352: PPUSH
27353: LD_INT 99999
27355: PPUSH
27356: CALL_OW 277
27360: GO 27335
27362: POP
27363: POP
27364: GO 27319
27366: POP
27367: POP
// end ;
27368: LD_VAR 0 1
27372: RET
// export function hHackSetLevel10 ; var i , j ; begin
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27378: LD_ADDR_VAR 0 2
27382: PUSH
27383: LD_INT 21
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL_OW 69
27397: PUSH
27398: FOR_IN
27399: IFFALSE 27451
// if IsSelected ( i ) then
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 306
27410: IFFALSE 27449
// begin for j := 1 to 4 do
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: DOUBLE
27418: LD_INT 1
27420: DEC
27421: ST_TO_ADDR
27422: LD_INT 4
27424: PUSH
27425: FOR_TO
27426: IFFALSE 27447
// SetSkill ( i , j , 10 ) ;
27428: LD_VAR 0 2
27432: PPUSH
27433: LD_VAR 0 3
27437: PPUSH
27438: LD_INT 10
27440: PPUSH
27441: CALL_OW 237
27445: GO 27425
27447: POP
27448: POP
// end ;
27449: GO 27398
27451: POP
27452: POP
// end ;
27453: LD_VAR 0 1
27457: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27458: LD_INT 0
27460: PPUSH
27461: PPUSH
27462: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_OWVAR 2
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 21
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 69
27498: PUSH
27499: FOR_IN
27500: IFFALSE 27541
// begin for j := 1 to 4 do
27502: LD_ADDR_VAR 0 3
27506: PUSH
27507: DOUBLE
27508: LD_INT 1
27510: DEC
27511: ST_TO_ADDR
27512: LD_INT 4
27514: PUSH
27515: FOR_TO
27516: IFFALSE 27537
// SetSkill ( i , j , 10 ) ;
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_VAR 0 3
27527: PPUSH
27528: LD_INT 10
27530: PPUSH
27531: CALL_OW 237
27535: GO 27515
27537: POP
27538: POP
// end ;
27539: GO 27499
27541: POP
27542: POP
// end ;
27543: LD_VAR 0 1
27547: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27548: LD_INT 0
27550: PPUSH
// uc_side := your_side ;
27551: LD_ADDR_OWVAR 20
27555: PUSH
27556: LD_OWVAR 2
27560: ST_TO_ADDR
// uc_nation := nation ;
27561: LD_ADDR_OWVAR 21
27565: PUSH
27566: LD_VAR 0 1
27570: ST_TO_ADDR
// InitHc ;
27571: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27575: LD_INT 0
27577: PPUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: LD_VAR 0 3
27587: PPUSH
27588: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27592: LD_VAR 0 4
27596: PPUSH
27597: LD_VAR 0 5
27601: PPUSH
27602: CALL_OW 428
27606: PUSH
27607: LD_INT 0
27609: EQUAL
27610: IFFALSE 27634
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27612: CALL_OW 44
27616: PPUSH
27617: LD_VAR 0 4
27621: PPUSH
27622: LD_VAR 0 5
27626: PPUSH
27627: LD_INT 1
27629: PPUSH
27630: CALL_OW 48
// end ;
27634: LD_VAR 0 6
27638: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27639: LD_INT 0
27641: PPUSH
27642: PPUSH
// uc_side := your_side ;
27643: LD_ADDR_OWVAR 20
27647: PUSH
27648: LD_OWVAR 2
27652: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27653: LD_VAR 0 1
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: LD_INT 3
27666: PUSH
27667: LD_INT 4
27669: PUSH
27670: LD_INT 5
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: IN
27680: IFFALSE 27692
// uc_nation := nation_american else
27682: LD_ADDR_OWVAR 21
27686: PUSH
27687: LD_INT 1
27689: ST_TO_ADDR
27690: GO 27735
// if chassis in [ 11 , 12 , 13 , 14 ] then
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 11
27699: PUSH
27700: LD_INT 12
27702: PUSH
27703: LD_INT 13
27705: PUSH
27706: LD_INT 14
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: IN
27715: IFFALSE 27727
// uc_nation := nation_arabian else
27717: LD_ADDR_OWVAR 21
27721: PUSH
27722: LD_INT 2
27724: ST_TO_ADDR
27725: GO 27735
// uc_nation := nation_russian ;
27727: LD_ADDR_OWVAR 21
27731: PUSH
27732: LD_INT 3
27734: ST_TO_ADDR
// vc_chassis := chassis ;
27735: LD_ADDR_OWVAR 37
27739: PUSH
27740: LD_VAR 0 1
27744: ST_TO_ADDR
// vc_engine := engine ;
27745: LD_ADDR_OWVAR 39
27749: PUSH
27750: LD_VAR 0 2
27754: ST_TO_ADDR
// vc_control := control ;
27755: LD_ADDR_OWVAR 38
27759: PUSH
27760: LD_VAR 0 3
27764: ST_TO_ADDR
// vc_weapon := weapon ;
27765: LD_ADDR_OWVAR 40
27769: PUSH
27770: LD_VAR 0 4
27774: ST_TO_ADDR
// un := CreateVehicle ;
27775: LD_ADDR_VAR 0 8
27779: PUSH
27780: CALL_OW 45
27784: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27785: LD_VAR 0 8
27789: PPUSH
27790: LD_INT 0
27792: PPUSH
27793: LD_INT 5
27795: PPUSH
27796: CALL_OW 12
27800: PPUSH
27801: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27805: LD_VAR 0 8
27809: PPUSH
27810: LD_VAR 0 5
27814: PPUSH
27815: LD_VAR 0 6
27819: PPUSH
27820: LD_INT 1
27822: PPUSH
27823: CALL_OW 48
// end ;
27827: LD_VAR 0 7
27831: RET
// export hInvincible ; every 1 do
27832: GO 27834
27834: DISABLE
// hInvincible := [ ] ;
27835: LD_ADDR_EXP 104
27839: PUSH
27840: EMPTY
27841: ST_TO_ADDR
27842: END
// every 10 do var i ;
27843: GO 27845
27845: DISABLE
27846: LD_INT 0
27848: PPUSH
// begin enable ;
27849: ENABLE
// if not hInvincible then
27850: LD_EXP 104
27854: NOT
27855: IFFALSE 27859
// exit ;
27857: GO 27903
// for i in hInvincible do
27859: LD_ADDR_VAR 0 1
27863: PUSH
27864: LD_EXP 104
27868: PUSH
27869: FOR_IN
27870: IFFALSE 27901
// if GetLives ( i ) < 1000 then
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 256
27881: PUSH
27882: LD_INT 1000
27884: LESS
27885: IFFALSE 27899
// SetLives ( i , 1000 ) ;
27887: LD_VAR 0 1
27891: PPUSH
27892: LD_INT 1000
27894: PPUSH
27895: CALL_OW 234
27899: GO 27869
27901: POP
27902: POP
// end ;
27903: PPOPN 1
27905: END
// export function hHackInvincible ; var i ; begin
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 21
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 21
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 69
27947: PUSH
27948: FOR_IN
27949: IFFALSE 28010
// if IsSelected ( i ) then
27951: LD_VAR 0 2
27955: PPUSH
27956: CALL_OW 306
27960: IFFALSE 28008
// begin if i in hInvincible then
27962: LD_VAR 0 2
27966: PUSH
27967: LD_EXP 104
27971: IN
27972: IFFALSE 27992
// hInvincible := hInvincible diff i else
27974: LD_ADDR_EXP 104
27978: PUSH
27979: LD_EXP 104
27983: PUSH
27984: LD_VAR 0 2
27988: DIFF
27989: ST_TO_ADDR
27990: GO 28008
// hInvincible := hInvincible union i ;
27992: LD_ADDR_EXP 104
27996: PUSH
27997: LD_EXP 104
28001: PUSH
28002: LD_VAR 0 2
28006: UNION
28007: ST_TO_ADDR
// end ;
28008: GO 27948
28010: POP
28011: POP
// end ;
28012: LD_VAR 0 1
28016: RET
// export function hHackInvisible ; var i , j ; begin
28017: LD_INT 0
28019: PPUSH
28020: PPUSH
28021: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 21
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 69
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28067
// if IsSelected ( i ) then
28045: LD_VAR 0 2
28049: PPUSH
28050: CALL_OW 306
28054: IFFALSE 28065
// ComForceInvisible ( i ) ;
28056: LD_VAR 0 2
28060: PPUSH
28061: CALL_OW 496
28065: GO 28042
28067: POP
28068: POP
// end ;
28069: LD_VAR 0 1
28073: RET
// export function hHackChangeYourSide ; begin
28074: LD_INT 0
28076: PPUSH
// if your_side = 8 then
28077: LD_OWVAR 2
28081: PUSH
28082: LD_INT 8
28084: EQUAL
28085: IFFALSE 28097
// your_side := 0 else
28087: LD_ADDR_OWVAR 2
28091: PUSH
28092: LD_INT 0
28094: ST_TO_ADDR
28095: GO 28111
// your_side := your_side + 1 ;
28097: LD_ADDR_OWVAR 2
28101: PUSH
28102: LD_OWVAR 2
28106: PUSH
28107: LD_INT 1
28109: PLUS
28110: ST_TO_ADDR
// end ;
28111: LD_VAR 0 1
28115: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
28120: PPUSH
// for i in all_units do
28121: LD_ADDR_VAR 0 2
28125: PUSH
28126: LD_OWVAR 3
28130: PUSH
28131: FOR_IN
28132: IFFALSE 28210
// if IsSelected ( i ) then
28134: LD_VAR 0 2
28138: PPUSH
28139: CALL_OW 306
28143: IFFALSE 28208
// begin j := GetSide ( i ) ;
28145: LD_ADDR_VAR 0 3
28149: PUSH
28150: LD_VAR 0 2
28154: PPUSH
28155: CALL_OW 255
28159: ST_TO_ADDR
// if j = 8 then
28160: LD_VAR 0 3
28164: PUSH
28165: LD_INT 8
28167: EQUAL
28168: IFFALSE 28180
// j := 0 else
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 0
28177: ST_TO_ADDR
28178: GO 28194
// j := j + 1 ;
28180: LD_ADDR_VAR 0 3
28184: PUSH
28185: LD_VAR 0 3
28189: PUSH
28190: LD_INT 1
28192: PLUS
28193: ST_TO_ADDR
// SetSide ( i , j ) ;
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_VAR 0 3
28203: PPUSH
28204: CALL_OW 235
// end ;
28208: GO 28131
28210: POP
28211: POP
// end ;
28212: LD_VAR 0 1
28216: RET
// export function hHackFog ; begin
28217: LD_INT 0
28219: PPUSH
// FogOff ( true ) ;
28220: LD_INT 1
28222: PPUSH
28223: CALL_OW 344
// end ;
28227: LD_VAR 0 1
28231: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28232: LD_INT 0
28234: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_VAR 0 2
28244: PPUSH
28245: LD_VAR 0 3
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: LD_INT 1
28255: PPUSH
28256: CALL_OW 483
// CenterOnXY ( x , y ) ;
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_VAR 0 3
28269: PPUSH
28270: CALL_OW 84
// end ;
28274: LD_VAR 0 4
28278: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28283: LD_VAR 0 1
28287: NOT
28288: PUSH
28289: LD_VAR 0 2
28293: PPUSH
28294: LD_VAR 0 3
28298: PPUSH
28299: CALL_OW 488
28303: NOT
28304: OR
28305: PUSH
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL_OW 266
28315: PUSH
28316: LD_INT 3
28318: NONEQUAL
28319: PUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL_OW 247
28329: PUSH
28330: LD_INT 1
28332: EQUAL
28333: NOT
28334: AND
28335: OR
28336: IFFALSE 28340
// exit ;
28338: GO 28489
// if GetType ( factory ) = unit_human then
28340: LD_VAR 0 1
28344: PPUSH
28345: CALL_OW 247
28349: PUSH
28350: LD_INT 1
28352: EQUAL
28353: IFFALSE 28370
// factory := IsInUnit ( factory ) ;
28355: LD_ADDR_VAR 0 1
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 310
28369: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 266
28379: PUSH
28380: LD_INT 3
28382: NONEQUAL
28383: IFFALSE 28387
// exit ;
28385: GO 28489
// if HexInfo ( x , y ) = factory then
28387: LD_VAR 0 2
28391: PPUSH
28392: LD_VAR 0 3
28396: PPUSH
28397: CALL_OW 428
28401: PUSH
28402: LD_VAR 0 1
28406: EQUAL
28407: IFFALSE 28434
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28409: LD_ADDR_EXP 105
28413: PUSH
28414: LD_EXP 105
28418: PPUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: LD_INT 0
28426: PPUSH
28427: CALL_OW 1
28431: ST_TO_ADDR
28432: GO 28485
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28434: LD_ADDR_EXP 105
28438: PUSH
28439: LD_EXP 105
28443: PPUSH
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 255
28458: PUSH
28459: LD_VAR 0 1
28463: PUSH
28464: LD_VAR 0 2
28468: PUSH
28469: LD_VAR 0 3
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: PPUSH
28480: CALL_OW 1
28484: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28485: CALL 28494 0 0
// end ;
28489: LD_VAR 0 4
28493: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28494: LD_INT 0
28496: PPUSH
28497: PPUSH
28498: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28499: LD_STRING resetFactoryWaypoint();
28501: PPUSH
28502: CALL_OW 559
// if factoryWaypoints then
28506: LD_EXP 105
28510: IFFALSE 28636
// begin list := PrepareArray ( factoryWaypoints ) ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_EXP 105
28521: PPUSH
28522: CALL 70669 0 1
28526: ST_TO_ADDR
// for i := 1 to list do
28527: LD_ADDR_VAR 0 2
28531: PUSH
28532: DOUBLE
28533: LD_INT 1
28535: DEC
28536: ST_TO_ADDR
28537: LD_VAR 0 3
28541: PUSH
28542: FOR_TO
28543: IFFALSE 28634
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28545: LD_STRING setFactoryWaypointXY(
28547: PUSH
28548: LD_VAR 0 3
28552: PUSH
28553: LD_VAR 0 2
28557: ARRAY
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: STR
28563: PUSH
28564: LD_STRING ,
28566: STR
28567: PUSH
28568: LD_VAR 0 3
28572: PUSH
28573: LD_VAR 0 2
28577: ARRAY
28578: PUSH
28579: LD_INT 2
28581: ARRAY
28582: STR
28583: PUSH
28584: LD_STRING ,
28586: STR
28587: PUSH
28588: LD_VAR 0 3
28592: PUSH
28593: LD_VAR 0 2
28597: ARRAY
28598: PUSH
28599: LD_INT 3
28601: ARRAY
28602: STR
28603: PUSH
28604: LD_STRING ,
28606: STR
28607: PUSH
28608: LD_VAR 0 3
28612: PUSH
28613: LD_VAR 0 2
28617: ARRAY
28618: PUSH
28619: LD_INT 4
28621: ARRAY
28622: STR
28623: PUSH
28624: LD_STRING )
28626: STR
28627: PPUSH
28628: CALL_OW 559
28632: GO 28542
28634: POP
28635: POP
// end ; end ;
28636: LD_VAR 0 1
28640: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28641: LD_INT 0
28643: PPUSH
// if HexInfo ( x , y ) = warehouse then
28644: LD_VAR 0 2
28648: PPUSH
28649: LD_VAR 0 3
28653: PPUSH
28654: CALL_OW 428
28658: PUSH
28659: LD_VAR 0 1
28663: EQUAL
28664: IFFALSE 28691
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28666: LD_ADDR_EXP 106
28670: PUSH
28671: LD_EXP 106
28675: PPUSH
28676: LD_VAR 0 1
28680: PPUSH
28681: LD_INT 0
28683: PPUSH
28684: CALL_OW 1
28688: ST_TO_ADDR
28689: GO 28742
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28691: LD_ADDR_EXP 106
28695: PUSH
28696: LD_EXP 106
28700: PPUSH
28701: LD_VAR 0 1
28705: PPUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: CALL_OW 255
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_VAR 0 2
28725: PUSH
28726: LD_VAR 0 3
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 1
28741: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28742: CALL 28751 0 0
// end ;
28746: LD_VAR 0 4
28750: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28751: LD_INT 0
28753: PPUSH
28754: PPUSH
28755: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28756: LD_STRING resetWarehouseGatheringPoints();
28758: PPUSH
28759: CALL_OW 559
// if warehouseGatheringPoints then
28763: LD_EXP 106
28767: IFFALSE 28893
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_EXP 106
28778: PPUSH
28779: CALL 70669 0 1
28783: ST_TO_ADDR
// for i := 1 to list do
28784: LD_ADDR_VAR 0 2
28788: PUSH
28789: DOUBLE
28790: LD_INT 1
28792: DEC
28793: ST_TO_ADDR
28794: LD_VAR 0 3
28798: PUSH
28799: FOR_TO
28800: IFFALSE 28891
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28802: LD_STRING setWarehouseGatheringPointXY(
28804: PUSH
28805: LD_VAR 0 3
28809: PUSH
28810: LD_VAR 0 2
28814: ARRAY
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: STR
28820: PUSH
28821: LD_STRING ,
28823: STR
28824: PUSH
28825: LD_VAR 0 3
28829: PUSH
28830: LD_VAR 0 2
28834: ARRAY
28835: PUSH
28836: LD_INT 2
28838: ARRAY
28839: STR
28840: PUSH
28841: LD_STRING ,
28843: STR
28844: PUSH
28845: LD_VAR 0 3
28849: PUSH
28850: LD_VAR 0 2
28854: ARRAY
28855: PUSH
28856: LD_INT 3
28858: ARRAY
28859: STR
28860: PUSH
28861: LD_STRING ,
28863: STR
28864: PUSH
28865: LD_VAR 0 3
28869: PUSH
28870: LD_VAR 0 2
28874: ARRAY
28875: PUSH
28876: LD_INT 4
28878: ARRAY
28879: STR
28880: PUSH
28881: LD_STRING )
28883: STR
28884: PPUSH
28885: CALL_OW 559
28889: GO 28799
28891: POP
28892: POP
// end ; end ;
28893: LD_VAR 0 1
28897: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28898: LD_EXP 106
28902: IFFALSE 29587
28904: GO 28906
28906: DISABLE
28907: LD_INT 0
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
// begin enable ;
28918: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28919: LD_ADDR_VAR 0 3
28923: PUSH
28924: LD_EXP 106
28928: PPUSH
28929: CALL 70669 0 1
28933: ST_TO_ADDR
// if not list then
28934: LD_VAR 0 3
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 29587
// for i := 1 to list do
28943: LD_ADDR_VAR 0 1
28947: PUSH
28948: DOUBLE
28949: LD_INT 1
28951: DEC
28952: ST_TO_ADDR
28953: LD_VAR 0 3
28957: PUSH
28958: FOR_TO
28959: IFFALSE 29585
// begin depot := list [ i ] [ 2 ] ;
28961: LD_ADDR_VAR 0 8
28965: PUSH
28966: LD_VAR 0 3
28970: PUSH
28971: LD_VAR 0 1
28975: ARRAY
28976: PUSH
28977: LD_INT 2
28979: ARRAY
28980: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28981: LD_ADDR_VAR 0 5
28985: PUSH
28986: LD_VAR 0 3
28990: PUSH
28991: LD_VAR 0 1
28995: ARRAY
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29001: LD_VAR 0 8
29005: PPUSH
29006: CALL_OW 301
29010: PUSH
29011: LD_VAR 0 5
29015: PUSH
29016: LD_VAR 0 8
29020: PPUSH
29021: CALL_OW 255
29025: NONEQUAL
29026: OR
29027: IFFALSE 29056
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29029: LD_ADDR_EXP 106
29033: PUSH
29034: LD_EXP 106
29038: PPUSH
29039: LD_VAR 0 8
29043: PPUSH
29044: LD_INT 0
29046: PPUSH
29047: CALL_OW 1
29051: ST_TO_ADDR
// exit ;
29052: POP
29053: POP
29054: GO 29587
// end ; x := list [ i ] [ 3 ] ;
29056: LD_ADDR_VAR 0 6
29060: PUSH
29061: LD_VAR 0 3
29065: PUSH
29066: LD_VAR 0 1
29070: ARRAY
29071: PUSH
29072: LD_INT 3
29074: ARRAY
29075: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29076: LD_ADDR_VAR 0 7
29080: PUSH
29081: LD_VAR 0 3
29085: PUSH
29086: LD_VAR 0 1
29090: ARRAY
29091: PUSH
29092: LD_INT 4
29094: ARRAY
29095: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29096: LD_ADDR_VAR 0 9
29100: PUSH
29101: LD_VAR 0 6
29105: PPUSH
29106: LD_VAR 0 7
29110: PPUSH
29111: LD_INT 16
29113: PPUSH
29114: CALL 69257 0 3
29118: ST_TO_ADDR
// if not cratesNearbyPoint then
29119: LD_VAR 0 9
29123: NOT
29124: IFFALSE 29130
// exit ;
29126: POP
29127: POP
29128: GO 29587
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29130: LD_ADDR_VAR 0 4
29134: PUSH
29135: LD_INT 22
29137: PUSH
29138: LD_VAR 0 5
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 3
29149: PUSH
29150: LD_INT 60
29152: PUSH
29153: EMPTY
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 91
29162: PUSH
29163: LD_VAR 0 8
29167: PUSH
29168: LD_INT 6
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: LD_INT 25
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 25
29191: PUSH
29192: LD_INT 16
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: PPUSH
29210: CALL_OW 69
29214: PUSH
29215: LD_VAR 0 8
29219: PPUSH
29220: CALL_OW 313
29224: PPUSH
29225: LD_INT 3
29227: PUSH
29228: LD_INT 60
29230: PUSH
29231: EMPTY
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 25
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 25
29253: PUSH
29254: LD_INT 16
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PPUSH
29270: CALL_OW 72
29274: UNION
29275: ST_TO_ADDR
// if tmp then
29276: LD_VAR 0 4
29280: IFFALSE 29360
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29282: LD_ADDR_VAR 0 4
29286: PUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: LD_INT 3
29294: PPUSH
29295: CALL 67226 0 2
29299: ST_TO_ADDR
// for j in tmp do
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 4
29309: PUSH
29310: FOR_IN
29311: IFFALSE 29354
// begin if IsInUnit ( j ) then
29313: LD_VAR 0 2
29317: PPUSH
29318: CALL_OW 310
29322: IFFALSE 29333
// ComExit ( j ) ;
29324: LD_VAR 0 2
29328: PPUSH
29329: CALL 67309 0 1
// AddComCollect ( j , x , y ) ;
29333: LD_VAR 0 2
29337: PPUSH
29338: LD_VAR 0 6
29342: PPUSH
29343: LD_VAR 0 7
29347: PPUSH
29348: CALL_OW 177
// end ;
29352: GO 29310
29354: POP
29355: POP
// exit ;
29356: POP
29357: POP
29358: GO 29587
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29360: LD_ADDR_VAR 0 4
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: LD_VAR 0 5
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 91
29379: PUSH
29380: LD_VAR 0 8
29384: PUSH
29385: LD_INT 8
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 34
29398: PUSH
29399: LD_INT 12
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 34
29408: PUSH
29409: LD_INT 51
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 34
29418: PUSH
29419: LD_INT 32
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 34
29428: PUSH
29429: LD_INT 89
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 69
29452: ST_TO_ADDR
// if tmp then
29453: LD_VAR 0 4
29457: IFFALSE 29583
// begin for j in tmp do
29459: LD_ADDR_VAR 0 2
29463: PUSH
29464: LD_VAR 0 4
29468: PUSH
29469: FOR_IN
29470: IFFALSE 29581
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29472: LD_VAR 0 2
29476: PPUSH
29477: CALL_OW 262
29481: PUSH
29482: LD_INT 3
29484: EQUAL
29485: PUSH
29486: LD_VAR 0 2
29490: PPUSH
29491: CALL_OW 261
29495: PUSH
29496: LD_INT 20
29498: GREATER
29499: OR
29500: PUSH
29501: LD_VAR 0 2
29505: PPUSH
29506: CALL_OW 314
29510: NOT
29511: AND
29512: PUSH
29513: LD_VAR 0 2
29517: PPUSH
29518: CALL_OW 263
29522: PUSH
29523: LD_INT 1
29525: NONEQUAL
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: CALL_OW 311
29536: OR
29537: AND
29538: IFFALSE 29579
// begin ComCollect ( j , x , y ) ;
29540: LD_VAR 0 2
29544: PPUSH
29545: LD_VAR 0 6
29549: PPUSH
29550: LD_VAR 0 7
29554: PPUSH
29555: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29559: LD_VAR 0 2
29563: PPUSH
29564: LD_VAR 0 8
29568: PPUSH
29569: CALL_OW 172
// exit ;
29573: POP
29574: POP
29575: POP
29576: POP
29577: GO 29587
// end ;
29579: GO 29469
29581: POP
29582: POP
// end ; end ;
29583: GO 28958
29585: POP
29586: POP
// end ; end_of_file end_of_file
29587: PPOPN 9
29589: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29590: LD_INT 0
29592: PPUSH
29593: PPUSH
// if exist_mode then
29594: LD_VAR 0 2
29598: IFFALSE 29623
// unit := CreateCharacter ( prefix & ident ) else
29600: LD_ADDR_VAR 0 5
29604: PUSH
29605: LD_VAR 0 3
29609: PUSH
29610: LD_VAR 0 1
29614: STR
29615: PPUSH
29616: CALL_OW 34
29620: ST_TO_ADDR
29621: GO 29638
// unit := NewCharacter ( ident ) ;
29623: LD_ADDR_VAR 0 5
29627: PUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 25
29637: ST_TO_ADDR
// result := unit ;
29638: LD_ADDR_VAR 0 4
29642: PUSH
29643: LD_VAR 0 5
29647: ST_TO_ADDR
// end ;
29648: LD_VAR 0 4
29652: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
// if not side or not nation then
29657: LD_VAR 0 1
29661: NOT
29662: PUSH
29663: LD_VAR 0 2
29667: NOT
29668: OR
29669: IFFALSE 29673
// exit ;
29671: GO 30441
// case nation of nation_american :
29673: LD_VAR 0 2
29677: PUSH
29678: LD_INT 1
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29900
29686: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29687: LD_ADDR_VAR 0 4
29691: PUSH
29692: LD_INT 35
29694: PUSH
29695: LD_INT 45
29697: PUSH
29698: LD_INT 46
29700: PUSH
29701: LD_INT 47
29703: PUSH
29704: LD_INT 82
29706: PUSH
29707: LD_INT 83
29709: PUSH
29710: LD_INT 84
29712: PUSH
29713: LD_INT 85
29715: PUSH
29716: LD_INT 86
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: LD_INT 6
29727: PUSH
29728: LD_INT 15
29730: PUSH
29731: LD_INT 16
29733: PUSH
29734: LD_INT 7
29736: PUSH
29737: LD_INT 12
29739: PUSH
29740: LD_INT 13
29742: PUSH
29743: LD_INT 10
29745: PUSH
29746: LD_INT 14
29748: PUSH
29749: LD_INT 20
29751: PUSH
29752: LD_INT 21
29754: PUSH
29755: LD_INT 22
29757: PUSH
29758: LD_INT 25
29760: PUSH
29761: LD_INT 32
29763: PUSH
29764: LD_INT 27
29766: PUSH
29767: LD_INT 36
29769: PUSH
29770: LD_INT 69
29772: PUSH
29773: LD_INT 39
29775: PUSH
29776: LD_INT 34
29778: PUSH
29779: LD_INT 40
29781: PUSH
29782: LD_INT 48
29784: PUSH
29785: LD_INT 49
29787: PUSH
29788: LD_INT 50
29790: PUSH
29791: LD_INT 51
29793: PUSH
29794: LD_INT 52
29796: PUSH
29797: LD_INT 53
29799: PUSH
29800: LD_INT 54
29802: PUSH
29803: LD_INT 55
29805: PUSH
29806: LD_INT 56
29808: PUSH
29809: LD_INT 57
29811: PUSH
29812: LD_INT 58
29814: PUSH
29815: LD_INT 59
29817: PUSH
29818: LD_INT 60
29820: PUSH
29821: LD_INT 61
29823: PUSH
29824: LD_INT 62
29826: PUSH
29827: LD_INT 80
29829: PUSH
29830: LD_INT 82
29832: PUSH
29833: LD_INT 83
29835: PUSH
29836: LD_INT 84
29838: PUSH
29839: LD_INT 85
29841: PUSH
29842: LD_INT 86
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
29898: GO 30365
29900: LD_INT 2
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 30134
29908: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29909: LD_ADDR_VAR 0 4
29913: PUSH
29914: LD_INT 35
29916: PUSH
29917: LD_INT 45
29919: PUSH
29920: LD_INT 46
29922: PUSH
29923: LD_INT 47
29925: PUSH
29926: LD_INT 82
29928: PUSH
29929: LD_INT 83
29931: PUSH
29932: LD_INT 84
29934: PUSH
29935: LD_INT 85
29937: PUSH
29938: LD_INT 87
29940: PUSH
29941: LD_INT 70
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 11
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: LD_INT 4
29955: PUSH
29956: LD_INT 5
29958: PUSH
29959: LD_INT 6
29961: PUSH
29962: LD_INT 15
29964: PUSH
29965: LD_INT 18
29967: PUSH
29968: LD_INT 7
29970: PUSH
29971: LD_INT 17
29973: PUSH
29974: LD_INT 8
29976: PUSH
29977: LD_INT 20
29979: PUSH
29980: LD_INT 21
29982: PUSH
29983: LD_INT 22
29985: PUSH
29986: LD_INT 72
29988: PUSH
29989: LD_INT 26
29991: PUSH
29992: LD_INT 69
29994: PUSH
29995: LD_INT 39
29997: PUSH
29998: LD_INT 40
30000: PUSH
30001: LD_INT 41
30003: PUSH
30004: LD_INT 42
30006: PUSH
30007: LD_INT 43
30009: PUSH
30010: LD_INT 48
30012: PUSH
30013: LD_INT 49
30015: PUSH
30016: LD_INT 50
30018: PUSH
30019: LD_INT 51
30021: PUSH
30022: LD_INT 52
30024: PUSH
30025: LD_INT 53
30027: PUSH
30028: LD_INT 54
30030: PUSH
30031: LD_INT 55
30033: PUSH
30034: LD_INT 56
30036: PUSH
30037: LD_INT 60
30039: PUSH
30040: LD_INT 61
30042: PUSH
30043: LD_INT 62
30045: PUSH
30046: LD_INT 66
30048: PUSH
30049: LD_INT 67
30051: PUSH
30052: LD_INT 68
30054: PUSH
30055: LD_INT 81
30057: PUSH
30058: LD_INT 82
30060: PUSH
30061: LD_INT 83
30063: PUSH
30064: LD_INT 84
30066: PUSH
30067: LD_INT 85
30069: PUSH
30070: LD_INT 87
30072: PUSH
30073: LD_INT 88
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
30132: GO 30365
30134: LD_INT 3
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30364
30142: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30143: LD_ADDR_VAR 0 4
30147: PUSH
30148: LD_INT 46
30150: PUSH
30151: LD_INT 47
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 82
30162: PUSH
30163: LD_INT 83
30165: PUSH
30166: LD_INT 84
30168: PUSH
30169: LD_INT 85
30171: PUSH
30172: LD_INT 86
30174: PUSH
30175: LD_INT 11
30177: PUSH
30178: LD_INT 9
30180: PUSH
30181: LD_INT 20
30183: PUSH
30184: LD_INT 19
30186: PUSH
30187: LD_INT 21
30189: PUSH
30190: LD_INT 24
30192: PUSH
30193: LD_INT 22
30195: PUSH
30196: LD_INT 25
30198: PUSH
30199: LD_INT 28
30201: PUSH
30202: LD_INT 29
30204: PUSH
30205: LD_INT 30
30207: PUSH
30208: LD_INT 31
30210: PUSH
30211: LD_INT 37
30213: PUSH
30214: LD_INT 38
30216: PUSH
30217: LD_INT 32
30219: PUSH
30220: LD_INT 27
30222: PUSH
30223: LD_INT 33
30225: PUSH
30226: LD_INT 69
30228: PUSH
30229: LD_INT 39
30231: PUSH
30232: LD_INT 34
30234: PUSH
30235: LD_INT 40
30237: PUSH
30238: LD_INT 71
30240: PUSH
30241: LD_INT 23
30243: PUSH
30244: LD_INT 44
30246: PUSH
30247: LD_INT 48
30249: PUSH
30250: LD_INT 49
30252: PUSH
30253: LD_INT 50
30255: PUSH
30256: LD_INT 51
30258: PUSH
30259: LD_INT 52
30261: PUSH
30262: LD_INT 53
30264: PUSH
30265: LD_INT 54
30267: PUSH
30268: LD_INT 55
30270: PUSH
30271: LD_INT 56
30273: PUSH
30274: LD_INT 57
30276: PUSH
30277: LD_INT 58
30279: PUSH
30280: LD_INT 59
30282: PUSH
30283: LD_INT 63
30285: PUSH
30286: LD_INT 64
30288: PUSH
30289: LD_INT 65
30291: PUSH
30292: LD_INT 82
30294: PUSH
30295: LD_INT 83
30297: PUSH
30298: LD_INT 84
30300: PUSH
30301: LD_INT 85
30303: PUSH
30304: LD_INT 86
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: ST_TO_ADDR
30362: GO 30365
30364: POP
// if state > - 1 and state < 3 then
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: GREATER
30374: PUSH
30375: LD_VAR 0 3
30379: PUSH
30380: LD_INT 3
30382: LESS
30383: AND
30384: IFFALSE 30441
// for i in result do
30386: LD_ADDR_VAR 0 5
30390: PUSH
30391: LD_VAR 0 4
30395: PUSH
30396: FOR_IN
30397: IFFALSE 30439
// if GetTech ( i , side ) <> state then
30399: LD_VAR 0 5
30403: PPUSH
30404: LD_VAR 0 1
30408: PPUSH
30409: CALL_OW 321
30413: PUSH
30414: LD_VAR 0 3
30418: NONEQUAL
30419: IFFALSE 30437
// result := result diff i ;
30421: LD_ADDR_VAR 0 4
30425: PUSH
30426: LD_VAR 0 4
30430: PUSH
30431: LD_VAR 0 5
30435: DIFF
30436: ST_TO_ADDR
30437: GO 30396
30439: POP
30440: POP
// end ;
30441: LD_VAR 0 4
30445: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30446: LD_INT 0
30448: PPUSH
30449: PPUSH
30450: PPUSH
// result := true ;
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_INT 1
30458: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30459: LD_ADDR_VAR 0 5
30463: PUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: CALL_OW 480
30473: ST_TO_ADDR
// if not tmp then
30474: LD_VAR 0 5
30478: NOT
30479: IFFALSE 30483
// exit ;
30481: GO 30532
// for i in tmp do
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: LD_VAR 0 5
30492: PUSH
30493: FOR_IN
30494: IFFALSE 30530
// if GetTech ( i , side ) <> state_researched then
30496: LD_VAR 0 4
30500: PPUSH
30501: LD_VAR 0 1
30505: PPUSH
30506: CALL_OW 321
30510: PUSH
30511: LD_INT 2
30513: NONEQUAL
30514: IFFALSE 30528
// begin result := false ;
30516: LD_ADDR_VAR 0 3
30520: PUSH
30521: LD_INT 0
30523: ST_TO_ADDR
// exit ;
30524: POP
30525: POP
30526: GO 30532
// end ;
30528: GO 30493
30530: POP
30531: POP
// end ;
30532: LD_VAR 0 3
30536: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30537: LD_INT 0
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30552: LD_VAR 0 1
30556: NOT
30557: PUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 257
30567: PUSH
30568: LD_INT 9
30570: NONEQUAL
30571: OR
30572: IFFALSE 30576
// exit ;
30574: GO 31149
// side := GetSide ( unit ) ;
30576: LD_ADDR_VAR 0 9
30580: PUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL_OW 255
30590: ST_TO_ADDR
// tech_space := tech_spacanom ;
30591: LD_ADDR_VAR 0 12
30595: PUSH
30596: LD_INT 29
30598: ST_TO_ADDR
// tech_time := tech_taurad ;
30599: LD_ADDR_VAR 0 13
30603: PUSH
30604: LD_INT 28
30606: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30607: LD_ADDR_VAR 0 11
30611: PUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 310
30621: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30622: LD_VAR 0 11
30626: PPUSH
30627: CALL_OW 247
30631: PUSH
30632: LD_INT 2
30634: EQUAL
30635: IFFALSE 30639
// exit ;
30637: GO 31149
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30639: LD_ADDR_VAR 0 8
30643: PUSH
30644: LD_INT 81
30646: PUSH
30647: LD_VAR 0 9
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 3
30658: PUSH
30659: LD_INT 21
30661: PUSH
30662: LD_INT 3
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PPUSH
30677: CALL_OW 69
30681: ST_TO_ADDR
// if not tmp then
30682: LD_VAR 0 8
30686: NOT
30687: IFFALSE 30691
// exit ;
30689: GO 31149
// if in_unit then
30691: LD_VAR 0 11
30695: IFFALSE 30719
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30697: LD_ADDR_VAR 0 10
30701: PUSH
30702: LD_VAR 0 8
30706: PPUSH
30707: LD_VAR 0 11
30711: PPUSH
30712: CALL_OW 74
30716: ST_TO_ADDR
30717: GO 30739
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30719: LD_ADDR_VAR 0 10
30723: PUSH
30724: LD_VAR 0 8
30728: PPUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 74
30738: ST_TO_ADDR
// if not enemy then
30739: LD_VAR 0 10
30743: NOT
30744: IFFALSE 30748
// exit ;
30746: GO 31149
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30748: LD_VAR 0 11
30752: PUSH
30753: LD_VAR 0 11
30757: PPUSH
30758: LD_VAR 0 10
30762: PPUSH
30763: CALL_OW 296
30767: PUSH
30768: LD_INT 13
30770: GREATER
30771: AND
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_VAR 0 10
30782: PPUSH
30783: CALL_OW 296
30787: PUSH
30788: LD_INT 12
30790: GREATER
30791: OR
30792: IFFALSE 30796
// exit ;
30794: GO 31149
// missile := [ 1 ] ;
30796: LD_ADDR_VAR 0 14
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30807: LD_VAR 0 9
30811: PPUSH
30812: LD_VAR 0 12
30816: PPUSH
30817: CALL_OW 325
30821: IFFALSE 30850
// missile := Replace ( missile , missile + 1 , 2 ) ;
30823: LD_ADDR_VAR 0 14
30827: PUSH
30828: LD_VAR 0 14
30832: PPUSH
30833: LD_VAR 0 14
30837: PUSH
30838: LD_INT 1
30840: PLUS
30841: PPUSH
30842: LD_INT 2
30844: PPUSH
30845: CALL_OW 1
30849: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30850: LD_VAR 0 9
30854: PPUSH
30855: LD_VAR 0 13
30859: PPUSH
30860: CALL_OW 325
30864: PUSH
30865: LD_VAR 0 10
30869: PPUSH
30870: CALL_OW 255
30874: PPUSH
30875: LD_VAR 0 13
30879: PPUSH
30880: CALL_OW 325
30884: NOT
30885: AND
30886: IFFALSE 30915
// missile := Replace ( missile , missile + 1 , 3 ) ;
30888: LD_ADDR_VAR 0 14
30892: PUSH
30893: LD_VAR 0 14
30897: PPUSH
30898: LD_VAR 0 14
30902: PUSH
30903: LD_INT 1
30905: PLUS
30906: PPUSH
30907: LD_INT 3
30909: PPUSH
30910: CALL_OW 1
30914: ST_TO_ADDR
// if missile < 2 then
30915: LD_VAR 0 14
30919: PUSH
30920: LD_INT 2
30922: LESS
30923: IFFALSE 30927
// exit ;
30925: GO 31149
// x := GetX ( enemy ) ;
30927: LD_ADDR_VAR 0 4
30931: PUSH
30932: LD_VAR 0 10
30936: PPUSH
30937: CALL_OW 250
30941: ST_TO_ADDR
// y := GetY ( enemy ) ;
30942: LD_ADDR_VAR 0 5
30946: PUSH
30947: LD_VAR 0 10
30951: PPUSH
30952: CALL_OW 251
30956: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30957: LD_ADDR_VAR 0 6
30961: PUSH
30962: LD_VAR 0 4
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PPUSH
30971: LD_INT 1
30973: PPUSH
30974: CALL_OW 12
30978: PLUS
30979: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30980: LD_ADDR_VAR 0 7
30984: PUSH
30985: LD_VAR 0 5
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PPUSH
30994: LD_INT 1
30996: PPUSH
30997: CALL_OW 12
31001: PLUS
31002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31003: LD_VAR 0 6
31007: PPUSH
31008: LD_VAR 0 7
31012: PPUSH
31013: CALL_OW 488
31017: NOT
31018: IFFALSE 31040
// begin _x := x ;
31020: LD_ADDR_VAR 0 6
31024: PUSH
31025: LD_VAR 0 4
31029: ST_TO_ADDR
// _y := y ;
31030: LD_ADDR_VAR 0 7
31034: PUSH
31035: LD_VAR 0 5
31039: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31040: LD_ADDR_VAR 0 3
31044: PUSH
31045: LD_INT 1
31047: PPUSH
31048: LD_VAR 0 14
31052: PPUSH
31053: CALL_OW 12
31057: ST_TO_ADDR
// case i of 1 :
31058: LD_VAR 0 3
31062: PUSH
31063: LD_INT 1
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31088
31071: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31072: LD_VAR 0 1
31076: PPUSH
31077: LD_VAR 0 10
31081: PPUSH
31082: CALL_OW 115
31086: GO 31149
31088: LD_INT 2
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31118
31096: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_VAR 0 6
31106: PPUSH
31107: LD_VAR 0 7
31111: PPUSH
31112: CALL_OW 153
31116: GO 31149
31118: LD_INT 3
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31148
31126: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31127: LD_VAR 0 1
31131: PPUSH
31132: LD_VAR 0 6
31136: PPUSH
31137: LD_VAR 0 7
31141: PPUSH
31142: CALL_OW 154
31146: GO 31149
31148: POP
// end ;
31149: LD_VAR 0 2
31153: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31154: LD_INT 0
31156: PPUSH
31157: PPUSH
31158: PPUSH
31159: PPUSH
31160: PPUSH
31161: PPUSH
// if not unit or not building then
31162: LD_VAR 0 1
31166: NOT
31167: PUSH
31168: LD_VAR 0 2
31172: NOT
31173: OR
31174: IFFALSE 31178
// exit ;
31176: GO 31336
// x := GetX ( building ) ;
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL_OW 250
31192: ST_TO_ADDR
// y := GetY ( building ) ;
31193: LD_ADDR_VAR 0 6
31197: PUSH
31198: LD_VAR 0 2
31202: PPUSH
31203: CALL_OW 251
31207: ST_TO_ADDR
// for i = 0 to 5 do
31208: LD_ADDR_VAR 0 4
31212: PUSH
31213: DOUBLE
31214: LD_INT 0
31216: DEC
31217: ST_TO_ADDR
31218: LD_INT 5
31220: PUSH
31221: FOR_TO
31222: IFFALSE 31334
// begin _x := ShiftX ( x , i , 3 ) ;
31224: LD_ADDR_VAR 0 7
31228: PUSH
31229: LD_VAR 0 5
31233: PPUSH
31234: LD_VAR 0 4
31238: PPUSH
31239: LD_INT 3
31241: PPUSH
31242: CALL_OW 272
31246: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31247: LD_ADDR_VAR 0 8
31251: PUSH
31252: LD_VAR 0 6
31256: PPUSH
31257: LD_VAR 0 4
31261: PPUSH
31262: LD_INT 3
31264: PPUSH
31265: CALL_OW 273
31269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31270: LD_VAR 0 7
31274: PPUSH
31275: LD_VAR 0 8
31279: PPUSH
31280: CALL_OW 488
31284: NOT
31285: IFFALSE 31289
// continue ;
31287: GO 31221
// if HexInfo ( _x , _y ) = 0 then
31289: LD_VAR 0 7
31293: PPUSH
31294: LD_VAR 0 8
31298: PPUSH
31299: CALL_OW 428
31303: PUSH
31304: LD_INT 0
31306: EQUAL
31307: IFFALSE 31332
// begin ComMoveXY ( unit , _x , _y ) ;
31309: LD_VAR 0 1
31313: PPUSH
31314: LD_VAR 0 7
31318: PPUSH
31319: LD_VAR 0 8
31323: PPUSH
31324: CALL_OW 111
// exit ;
31328: POP
31329: POP
31330: GO 31336
// end ; end ;
31332: GO 31221
31334: POP
31335: POP
// end ;
31336: LD_VAR 0 3
31340: RET
// export function ScanBase ( side , base_area ) ; begin
31341: LD_INT 0
31343: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_VAR 0 2
31353: PPUSH
31354: LD_INT 81
31356: PUSH
31357: LD_VAR 0 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 70
31370: ST_TO_ADDR
// end ;
31371: LD_VAR 0 3
31375: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
// result := false ;
31382: LD_ADDR_VAR 0 2
31386: PUSH
31387: LD_INT 0
31389: ST_TO_ADDR
// side := GetSide ( unit ) ;
31390: LD_ADDR_VAR 0 3
31394: PUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL_OW 255
31404: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31405: LD_ADDR_VAR 0 4
31409: PUSH
31410: LD_VAR 0 1
31414: PPUSH
31415: CALL_OW 248
31419: ST_TO_ADDR
// case nat of 1 :
31420: LD_VAR 0 4
31424: PUSH
31425: LD_INT 1
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31444
31433: POP
// tech := tech_lassight ; 2 :
31434: LD_ADDR_VAR 0 5
31438: PUSH
31439: LD_INT 12
31441: ST_TO_ADDR
31442: GO 31483
31444: LD_INT 2
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31452
31450: GO 31463
31452: POP
// tech := tech_mortar ; 3 :
31453: LD_ADDR_VAR 0 5
31457: PUSH
31458: LD_INT 41
31460: ST_TO_ADDR
31461: GO 31483
31463: LD_INT 3
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31482
31471: POP
// tech := tech_bazooka ; end ;
31472: LD_ADDR_VAR 0 5
31476: PUSH
31477: LD_INT 44
31479: ST_TO_ADDR
31480: GO 31483
31482: POP
// if Researched ( side , tech ) then
31483: LD_VAR 0 3
31487: PPUSH
31488: LD_VAR 0 5
31492: PPUSH
31493: CALL_OW 325
31497: IFFALSE 31524
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31499: LD_ADDR_VAR 0 2
31503: PUSH
31504: LD_INT 5
31506: PUSH
31507: LD_INT 8
31509: PUSH
31510: LD_INT 9
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: PUSH
31518: LD_VAR 0 4
31522: ARRAY
31523: ST_TO_ADDR
// end ;
31524: LD_VAR 0 2
31528: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
// if not mines then
31534: LD_VAR 0 2
31538: NOT
31539: IFFALSE 31543
// exit ;
31541: GO 31687
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_INT 81
31550: PUSH
31551: LD_VAR 0 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: LD_INT 21
31565: PUSH
31566: LD_INT 3
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PPUSH
31581: CALL_OW 69
31585: ST_TO_ADDR
// for i in mines do
31586: LD_ADDR_VAR 0 4
31590: PUSH
31591: LD_VAR 0 2
31595: PUSH
31596: FOR_IN
31597: IFFALSE 31685
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31599: LD_VAR 0 4
31603: PUSH
31604: LD_INT 1
31606: ARRAY
31607: PPUSH
31608: LD_VAR 0 4
31612: PUSH
31613: LD_INT 2
31615: ARRAY
31616: PPUSH
31617: CALL_OW 458
31621: NOT
31622: IFFALSE 31626
// continue ;
31624: GO 31596
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: LD_VAR 0 4
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: CALL_OW 428
31648: PUSH
31649: LD_VAR 0 5
31653: IN
31654: IFFALSE 31683
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31656: LD_VAR 0 4
31660: PUSH
31661: LD_INT 1
31663: ARRAY
31664: PPUSH
31665: LD_VAR 0 4
31669: PUSH
31670: LD_INT 2
31672: ARRAY
31673: PPUSH
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 456
// end ;
31683: GO 31596
31685: POP
31686: POP
// end ;
31687: LD_VAR 0 3
31691: RET
// export function Count ( array ) ; begin
31692: LD_INT 0
31694: PPUSH
// result := array + 0 ;
31695: LD_ADDR_VAR 0 2
31699: PUSH
31700: LD_VAR 0 1
31704: PUSH
31705: LD_INT 0
31707: PLUS
31708: ST_TO_ADDR
// end ;
31709: LD_VAR 0 2
31713: RET
// export function IsEmpty ( building ) ; begin
31714: LD_INT 0
31716: PPUSH
// if not building then
31717: LD_VAR 0 1
31721: NOT
31722: IFFALSE 31726
// exit ;
31724: GO 31769
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31726: LD_ADDR_VAR 0 2
31730: PUSH
31731: LD_VAR 0 1
31735: PUSH
31736: LD_INT 22
31738: PUSH
31739: LD_VAR 0 1
31743: PPUSH
31744: CALL_OW 255
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 58
31755: PUSH
31756: EMPTY
31757: LIST
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PPUSH
31763: CALL_OW 69
31767: IN
31768: ST_TO_ADDR
// end ;
31769: LD_VAR 0 2
31773: RET
// export function IsNotFull ( building ) ; var places ; begin
31774: LD_INT 0
31776: PPUSH
31777: PPUSH
// if not building then
31778: LD_VAR 0 1
31782: NOT
31783: IFFALSE 31787
// exit ;
31785: GO 31815
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31787: LD_ADDR_VAR 0 2
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: LD_INT 3
31799: PUSH
31800: LD_INT 62
31802: PUSH
31803: EMPTY
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PPUSH
31810: CALL_OW 72
31814: ST_TO_ADDR
// end ;
31815: LD_VAR 0 2
31819: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31820: LD_INT 0
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
// tmp := [ ] ;
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: EMPTY
31832: ST_TO_ADDR
// list := [ ] ;
31833: LD_ADDR_VAR 0 5
31837: PUSH
31838: EMPTY
31839: ST_TO_ADDR
// for i = 16 to 25 do
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: DOUBLE
31846: LD_INT 16
31848: DEC
31849: ST_TO_ADDR
31850: LD_INT 25
31852: PUSH
31853: FOR_TO
31854: IFFALSE 31927
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31856: LD_ADDR_VAR 0 3
31860: PUSH
31861: LD_VAR 0 3
31865: PUSH
31866: LD_INT 22
31868: PUSH
31869: LD_VAR 0 1
31873: PPUSH
31874: CALL_OW 255
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 91
31885: PUSH
31886: LD_VAR 0 1
31890: PUSH
31891: LD_INT 6
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 30
31901: PUSH
31902: LD_VAR 0 4
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: PUSH
31916: EMPTY
31917: LIST
31918: PPUSH
31919: CALL_OW 69
31923: ADD
31924: ST_TO_ADDR
31925: GO 31853
31927: POP
31928: POP
// for i = 1 to tmp do
31929: LD_ADDR_VAR 0 4
31933: PUSH
31934: DOUBLE
31935: LD_INT 1
31937: DEC
31938: ST_TO_ADDR
31939: LD_VAR 0 3
31943: PUSH
31944: FOR_TO
31945: IFFALSE 32033
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31947: LD_ADDR_VAR 0 5
31951: PUSH
31952: LD_VAR 0 5
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 4
31966: ARRAY
31967: PPUSH
31968: CALL_OW 266
31972: PUSH
31973: LD_VAR 0 3
31977: PUSH
31978: LD_VAR 0 4
31982: ARRAY
31983: PPUSH
31984: CALL_OW 250
31988: PUSH
31989: LD_VAR 0 3
31993: PUSH
31994: LD_VAR 0 4
31998: ARRAY
31999: PPUSH
32000: CALL_OW 251
32004: PUSH
32005: LD_VAR 0 3
32009: PUSH
32010: LD_VAR 0 4
32014: ARRAY
32015: PPUSH
32016: CALL_OW 254
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: ADD
32030: ST_TO_ADDR
32031: GO 31944
32033: POP
32034: POP
// result := list ;
32035: LD_ADDR_VAR 0 2
32039: PUSH
32040: LD_VAR 0 5
32044: ST_TO_ADDR
// end ;
32045: LD_VAR 0 2
32049: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32050: LD_INT 0
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
// if not factory then
32059: LD_VAR 0 1
32063: NOT
32064: IFFALSE 32068
// exit ;
32066: GO 32661
// if control = control_apeman then
32068: LD_VAR 0 4
32072: PUSH
32073: LD_INT 5
32075: EQUAL
32076: IFFALSE 32185
// begin tmp := UnitsInside ( factory ) ;
32078: LD_ADDR_VAR 0 8
32082: PUSH
32083: LD_VAR 0 1
32087: PPUSH
32088: CALL_OW 313
32092: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32093: LD_VAR 0 8
32097: PPUSH
32098: LD_INT 25
32100: PUSH
32101: LD_INT 12
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PPUSH
32108: CALL_OW 72
32112: NOT
32113: IFFALSE 32123
// control := control_manual ;
32115: LD_ADDR_VAR 0 4
32119: PUSH
32120: LD_INT 1
32122: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32123: LD_ADDR_VAR 0 8
32127: PUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL 31820 0 1
32137: ST_TO_ADDR
// if tmp then
32138: LD_VAR 0 8
32142: IFFALSE 32185
// begin for i in tmp do
32144: LD_ADDR_VAR 0 7
32148: PUSH
32149: LD_VAR 0 8
32153: PUSH
32154: FOR_IN
32155: IFFALSE 32183
// if i [ 1 ] = b_ext_radio then
32157: LD_VAR 0 7
32161: PUSH
32162: LD_INT 1
32164: ARRAY
32165: PUSH
32166: LD_INT 22
32168: EQUAL
32169: IFFALSE 32181
// begin control := control_remote ;
32171: LD_ADDR_VAR 0 4
32175: PUSH
32176: LD_INT 2
32178: ST_TO_ADDR
// break ;
32179: GO 32183
// end ;
32181: GO 32154
32183: POP
32184: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32185: LD_VAR 0 1
32189: PPUSH
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 3
32199: PPUSH
32200: LD_VAR 0 4
32204: PPUSH
32205: LD_VAR 0 5
32209: PPUSH
32210: CALL_OW 448
32214: IFFALSE 32249
// begin result := [ chassis , engine , control , weapon ] ;
32216: LD_ADDR_VAR 0 6
32220: PUSH
32221: LD_VAR 0 2
32225: PUSH
32226: LD_VAR 0 3
32230: PUSH
32231: LD_VAR 0 4
32235: PUSH
32236: LD_VAR 0 5
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
// exit ;
32247: GO 32661
// end ; _chassis := AvailableChassisList ( factory ) ;
32249: LD_ADDR_VAR 0 9
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 475
32263: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32264: LD_ADDR_VAR 0 11
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 476
32278: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32279: LD_ADDR_VAR 0 12
32283: PUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 477
32293: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32294: LD_ADDR_VAR 0 10
32298: PUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 478
32308: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32309: LD_VAR 0 9
32313: NOT
32314: PUSH
32315: LD_VAR 0 11
32319: NOT
32320: OR
32321: PUSH
32322: LD_VAR 0 12
32326: NOT
32327: OR
32328: PUSH
32329: LD_VAR 0 10
32333: NOT
32334: OR
32335: IFFALSE 32370
// begin result := [ chassis , engine , control , weapon ] ;
32337: LD_ADDR_VAR 0 6
32341: PUSH
32342: LD_VAR 0 2
32346: PUSH
32347: LD_VAR 0 3
32351: PUSH
32352: LD_VAR 0 4
32356: PUSH
32357: LD_VAR 0 5
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: ST_TO_ADDR
// exit ;
32368: GO 32661
// end ; if not chassis in _chassis then
32370: LD_VAR 0 2
32374: PUSH
32375: LD_VAR 0 9
32379: IN
32380: NOT
32381: IFFALSE 32407
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32383: LD_ADDR_VAR 0 2
32387: PUSH
32388: LD_VAR 0 9
32392: PUSH
32393: LD_INT 1
32395: PPUSH
32396: LD_VAR 0 9
32400: PPUSH
32401: CALL_OW 12
32405: ARRAY
32406: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32407: LD_VAR 0 2
32411: PPUSH
32412: LD_VAR 0 3
32416: PPUSH
32417: CALL 32666 0 2
32421: NOT
32422: IFFALSE 32481
// repeat engine := _engine [ 1 ] ;
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_VAR 0 11
32433: PUSH
32434: LD_INT 1
32436: ARRAY
32437: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32438: LD_ADDR_VAR 0 11
32442: PUSH
32443: LD_VAR 0 11
32447: PPUSH
32448: LD_INT 1
32450: PPUSH
32451: CALL_OW 3
32455: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32456: LD_VAR 0 2
32460: PPUSH
32461: LD_VAR 0 3
32465: PPUSH
32466: CALL 32666 0 2
32470: PUSH
32471: LD_VAR 0 11
32475: PUSH
32476: EMPTY
32477: EQUAL
32478: OR
32479: IFFALSE 32424
// if not control in _control then
32481: LD_VAR 0 4
32485: PUSH
32486: LD_VAR 0 12
32490: IN
32491: NOT
32492: IFFALSE 32518
// control := _control [ rand ( 1 , _control ) ] ;
32494: LD_ADDR_VAR 0 4
32498: PUSH
32499: LD_VAR 0 12
32503: PUSH
32504: LD_INT 1
32506: PPUSH
32507: LD_VAR 0 12
32511: PPUSH
32512: CALL_OW 12
32516: ARRAY
32517: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32518: LD_VAR 0 2
32522: PPUSH
32523: LD_VAR 0 5
32527: PPUSH
32528: CALL 32886 0 2
32532: NOT
32533: IFFALSE 32592
// repeat weapon := _weapon [ 1 ] ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_VAR 0 10
32544: PUSH
32545: LD_INT 1
32547: ARRAY
32548: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32549: LD_ADDR_VAR 0 10
32553: PUSH
32554: LD_VAR 0 10
32558: PPUSH
32559: LD_INT 1
32561: PPUSH
32562: CALL_OW 3
32566: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32567: LD_VAR 0 2
32571: PPUSH
32572: LD_VAR 0 5
32576: PPUSH
32577: CALL 32886 0 2
32581: PUSH
32582: LD_VAR 0 10
32586: PUSH
32587: EMPTY
32588: EQUAL
32589: OR
32590: IFFALSE 32535
// result := [ ] ;
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: EMPTY
32598: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32599: LD_VAR 0 1
32603: PPUSH
32604: LD_VAR 0 2
32608: PPUSH
32609: LD_VAR 0 3
32613: PPUSH
32614: LD_VAR 0 4
32618: PPUSH
32619: LD_VAR 0 5
32623: PPUSH
32624: CALL_OW 448
32628: IFFALSE 32661
// result := [ chassis , engine , control , weapon ] ;
32630: LD_ADDR_VAR 0 6
32634: PUSH
32635: LD_VAR 0 2
32639: PUSH
32640: LD_VAR 0 3
32644: PUSH
32645: LD_VAR 0 4
32649: PUSH
32650: LD_VAR 0 5
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
// end ;
32661: LD_VAR 0 6
32665: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32666: LD_INT 0
32668: PPUSH
// if not chassis or not engine then
32669: LD_VAR 0 1
32673: NOT
32674: PUSH
32675: LD_VAR 0 2
32679: NOT
32680: OR
32681: IFFALSE 32685
// exit ;
32683: GO 32881
// case engine of engine_solar :
32685: LD_VAR 0 2
32689: PUSH
32690: LD_INT 2
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32736
32698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32699: LD_ADDR_VAR 0 3
32703: PUSH
32704: LD_INT 11
32706: PUSH
32707: LD_INT 12
32709: PUSH
32710: LD_INT 13
32712: PUSH
32713: LD_INT 14
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
32734: GO 32865
32736: LD_INT 1
32738: DOUBLE
32739: EQUAL
32740: IFTRUE 32744
32742: GO 32806
32744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32745: LD_ADDR_VAR 0 3
32749: PUSH
32750: LD_INT 11
32752: PUSH
32753: LD_INT 12
32755: PUSH
32756: LD_INT 13
32758: PUSH
32759: LD_INT 14
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: LD_INT 4
32773: PUSH
32774: LD_INT 5
32776: PUSH
32777: LD_INT 21
32779: PUSH
32780: LD_INT 23
32782: PUSH
32783: LD_INT 22
32785: PUSH
32786: LD_INT 24
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
32804: GO 32865
32806: LD_INT 3
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32864
32814: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_INT 13
32822: PUSH
32823: LD_INT 14
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: LD_INT 4
32834: PUSH
32835: LD_INT 5
32837: PUSH
32838: LD_INT 21
32840: PUSH
32841: LD_INT 22
32843: PUSH
32844: LD_INT 23
32846: PUSH
32847: LD_INT 24
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
32862: GO 32865
32864: POP
// result := ( chassis in result ) ;
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_VAR 0 1
32874: PUSH
32875: LD_VAR 0 3
32879: IN
32880: ST_TO_ADDR
// end ;
32881: LD_VAR 0 3
32885: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32886: LD_INT 0
32888: PPUSH
// if not chassis or not weapon then
32889: LD_VAR 0 1
32893: NOT
32894: PUSH
32895: LD_VAR 0 2
32899: NOT
32900: OR
32901: IFFALSE 32905
// exit ;
32903: GO 33965
// case weapon of us_machine_gun :
32905: LD_VAR 0 2
32909: PUSH
32910: LD_INT 2
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32948
32918: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32919: LD_ADDR_VAR 0 3
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: LD_INT 4
32935: PUSH
32936: LD_INT 5
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: ST_TO_ADDR
32946: GO 33949
32948: LD_INT 3
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 32986
32956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 3
32970: PUSH
32971: LD_INT 4
32973: PUSH
32974: LD_INT 5
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
32984: GO 33949
32986: LD_INT 11
32988: DOUBLE
32989: EQUAL
32990: IFTRUE 32994
32992: GO 33024
32994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 4
33011: PUSH
33012: LD_INT 5
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33949
33024: LD_INT 4
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33058
33032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 3
33043: PUSH
33044: LD_INT 4
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: ST_TO_ADDR
33056: GO 33949
33058: LD_INT 5
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33092
33066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 4
33080: PUSH
33081: LD_INT 5
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: ST_TO_ADDR
33090: GO 33949
33092: LD_INT 9
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33126
33100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33101: LD_ADDR_VAR 0 3
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: LD_INT 5
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
33124: GO 33949
33126: LD_INT 7
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33160
33134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33135: LD_ADDR_VAR 0 3
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
33158: GO 33949
33160: LD_INT 12
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33194
33168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: LD_INT 5
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: ST_TO_ADDR
33192: GO 33949
33194: LD_INT 13
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33228
33202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33203: LD_ADDR_VAR 0 3
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: LD_INT 3
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: LD_INT 5
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
33226: GO 33949
33228: LD_INT 14
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33254
33236: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: LD_INT 4
33244: PUSH
33245: LD_INT 5
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: ST_TO_ADDR
33252: GO 33949
33254: LD_INT 6
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33262
33260: GO 33280
33262: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 4
33270: PUSH
33271: LD_INT 5
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: ST_TO_ADDR
33278: GO 33949
33280: LD_INT 10
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33306
33288: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_INT 4
33296: PUSH
33297: LD_INT 5
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: ST_TO_ADDR
33304: GO 33949
33306: LD_INT 22
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33340
33314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_INT 11
33322: PUSH
33323: LD_INT 12
33325: PUSH
33326: LD_INT 13
33328: PUSH
33329: LD_INT 14
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
33338: GO 33949
33340: LD_INT 23
33342: DOUBLE
33343: EQUAL
33344: IFTRUE 33348
33346: GO 33374
33348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_INT 11
33356: PUSH
33357: LD_INT 12
33359: PUSH
33360: LD_INT 13
33362: PUSH
33363: LD_INT 14
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: ST_TO_ADDR
33372: GO 33949
33374: LD_INT 24
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33408
33382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33383: LD_ADDR_VAR 0 3
33387: PUSH
33388: LD_INT 11
33390: PUSH
33391: LD_INT 12
33393: PUSH
33394: LD_INT 13
33396: PUSH
33397: LD_INT 14
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: ST_TO_ADDR
33406: GO 33949
33408: LD_INT 30
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33442
33416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_INT 11
33424: PUSH
33425: LD_INT 12
33427: PUSH
33428: LD_INT 13
33430: PUSH
33431: LD_INT 14
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: ST_TO_ADDR
33440: GO 33949
33442: LD_INT 25
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33468
33450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: LD_INT 13
33458: PUSH
33459: LD_INT 14
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: ST_TO_ADDR
33466: GO 33949
33468: LD_INT 27
33470: DOUBLE
33471: EQUAL
33472: IFTRUE 33476
33474: GO 33494
33476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_INT 13
33484: PUSH
33485: LD_INT 14
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: ST_TO_ADDR
33492: GO 33949
33494: LD_INT 92
33496: DOUBLE
33497: EQUAL
33498: IFTRUE 33502
33500: GO 33528
33502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_INT 11
33510: PUSH
33511: LD_INT 12
33513: PUSH
33514: LD_INT 13
33516: PUSH
33517: LD_INT 14
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
33526: GO 33949
33528: LD_INT 28
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33554
33536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33537: LD_ADDR_VAR 0 3
33541: PUSH
33542: LD_INT 13
33544: PUSH
33545: LD_INT 14
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: ST_TO_ADDR
33552: GO 33949
33554: LD_INT 29
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33580
33562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 13
33570: PUSH
33571: LD_INT 14
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: ST_TO_ADDR
33578: GO 33949
33580: LD_INT 31
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 33606
33588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_INT 13
33596: PUSH
33597: LD_INT 14
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: ST_TO_ADDR
33604: GO 33949
33606: LD_INT 26
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33614
33612: GO 33632
33614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_INT 13
33622: PUSH
33623: LD_INT 14
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: ST_TO_ADDR
33630: GO 33949
33632: LD_INT 42
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33666
33640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_INT 21
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_INT 23
33654: PUSH
33655: LD_INT 24
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
33664: GO 33949
33666: LD_INT 43
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33674
33672: GO 33700
33674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33675: LD_ADDR_VAR 0 3
33679: PUSH
33680: LD_INT 21
33682: PUSH
33683: LD_INT 22
33685: PUSH
33686: LD_INT 23
33688: PUSH
33689: LD_INT 24
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
33698: GO 33949
33700: LD_INT 44
33702: DOUBLE
33703: EQUAL
33704: IFTRUE 33708
33706: GO 33734
33708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: LD_INT 21
33716: PUSH
33717: LD_INT 22
33719: PUSH
33720: LD_INT 23
33722: PUSH
33723: LD_INT 24
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: ST_TO_ADDR
33732: GO 33949
33734: LD_INT 45
33736: DOUBLE
33737: EQUAL
33738: IFTRUE 33742
33740: GO 33768
33742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 21
33750: PUSH
33751: LD_INT 22
33753: PUSH
33754: LD_INT 23
33756: PUSH
33757: LD_INT 24
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: ST_TO_ADDR
33766: GO 33949
33768: LD_INT 49
33770: DOUBLE
33771: EQUAL
33772: IFTRUE 33776
33774: GO 33802
33776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_INT 21
33784: PUSH
33785: LD_INT 22
33787: PUSH
33788: LD_INT 23
33790: PUSH
33791: LD_INT 24
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
33800: GO 33949
33802: LD_INT 51
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33836
33810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33811: LD_ADDR_VAR 0 3
33815: PUSH
33816: LD_INT 21
33818: PUSH
33819: LD_INT 22
33821: PUSH
33822: LD_INT 23
33824: PUSH
33825: LD_INT 24
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: ST_TO_ADDR
33834: GO 33949
33836: LD_INT 52
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33870
33844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_INT 21
33852: PUSH
33853: LD_INT 22
33855: PUSH
33856: LD_INT 23
33858: PUSH
33859: LD_INT 24
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 33949
33870: LD_INT 53
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33896
33878: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33879: LD_ADDR_VAR 0 3
33883: PUSH
33884: LD_INT 23
33886: PUSH
33887: LD_INT 24
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: ST_TO_ADDR
33894: GO 33949
33896: LD_INT 46
33898: DOUBLE
33899: EQUAL
33900: IFTRUE 33904
33902: GO 33922
33904: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33905: LD_ADDR_VAR 0 3
33909: PUSH
33910: LD_INT 23
33912: PUSH
33913: LD_INT 24
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: ST_TO_ADDR
33920: GO 33949
33922: LD_INT 47
33924: DOUBLE
33925: EQUAL
33926: IFTRUE 33930
33928: GO 33948
33930: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_INT 23
33938: PUSH
33939: LD_INT 24
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: ST_TO_ADDR
33946: GO 33949
33948: POP
// result := ( chassis in result ) ;
33949: LD_ADDR_VAR 0 3
33953: PUSH
33954: LD_VAR 0 1
33958: PUSH
33959: LD_VAR 0 3
33963: IN
33964: ST_TO_ADDR
// end ;
33965: LD_VAR 0 3
33969: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
// result := array ;
33979: LD_ADDR_VAR 0 5
33983: PUSH
33984: LD_VAR 0 1
33988: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33989: LD_VAR 0 1
33993: NOT
33994: PUSH
33995: LD_VAR 0 2
33999: NOT
34000: OR
34001: PUSH
34002: LD_VAR 0 3
34006: NOT
34007: OR
34008: PUSH
34009: LD_VAR 0 2
34013: PUSH
34014: LD_VAR 0 1
34018: GREATER
34019: OR
34020: PUSH
34021: LD_VAR 0 3
34025: PUSH
34026: LD_VAR 0 1
34030: GREATER
34031: OR
34032: IFFALSE 34036
// exit ;
34034: GO 34332
// if direction then
34036: LD_VAR 0 4
34040: IFFALSE 34104
// begin d := 1 ;
34042: LD_ADDR_VAR 0 9
34046: PUSH
34047: LD_INT 1
34049: ST_TO_ADDR
// if i_from > i_to then
34050: LD_VAR 0 2
34054: PUSH
34055: LD_VAR 0 3
34059: GREATER
34060: IFFALSE 34086
// length := ( array - i_from ) + i_to else
34062: LD_ADDR_VAR 0 11
34066: PUSH
34067: LD_VAR 0 1
34071: PUSH
34072: LD_VAR 0 2
34076: MINUS
34077: PUSH
34078: LD_VAR 0 3
34082: PLUS
34083: ST_TO_ADDR
34084: GO 34102
// length := i_to - i_from ;
34086: LD_ADDR_VAR 0 11
34090: PUSH
34091: LD_VAR 0 3
34095: PUSH
34096: LD_VAR 0 2
34100: MINUS
34101: ST_TO_ADDR
// end else
34102: GO 34165
// begin d := - 1 ;
34104: LD_ADDR_VAR 0 9
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: ST_TO_ADDR
// if i_from > i_to then
34113: LD_VAR 0 2
34117: PUSH
34118: LD_VAR 0 3
34122: GREATER
34123: IFFALSE 34143
// length := i_from - i_to else
34125: LD_ADDR_VAR 0 11
34129: PUSH
34130: LD_VAR 0 2
34134: PUSH
34135: LD_VAR 0 3
34139: MINUS
34140: ST_TO_ADDR
34141: GO 34165
// length := ( array - i_to ) + i_from ;
34143: LD_ADDR_VAR 0 11
34147: PUSH
34148: LD_VAR 0 1
34152: PUSH
34153: LD_VAR 0 3
34157: MINUS
34158: PUSH
34159: LD_VAR 0 2
34163: PLUS
34164: ST_TO_ADDR
// end ; if not length then
34165: LD_VAR 0 11
34169: NOT
34170: IFFALSE 34174
// exit ;
34172: GO 34332
// tmp := array ;
34174: LD_ADDR_VAR 0 10
34178: PUSH
34179: LD_VAR 0 1
34183: ST_TO_ADDR
// for i = 1 to length do
34184: LD_ADDR_VAR 0 6
34188: PUSH
34189: DOUBLE
34190: LD_INT 1
34192: DEC
34193: ST_TO_ADDR
34194: LD_VAR 0 11
34198: PUSH
34199: FOR_TO
34200: IFFALSE 34320
// begin for j = 1 to array do
34202: LD_ADDR_VAR 0 7
34206: PUSH
34207: DOUBLE
34208: LD_INT 1
34210: DEC
34211: ST_TO_ADDR
34212: LD_VAR 0 1
34216: PUSH
34217: FOR_TO
34218: IFFALSE 34306
// begin k := j + d ;
34220: LD_ADDR_VAR 0 8
34224: PUSH
34225: LD_VAR 0 7
34229: PUSH
34230: LD_VAR 0 9
34234: PLUS
34235: ST_TO_ADDR
// if k > array then
34236: LD_VAR 0 8
34240: PUSH
34241: LD_VAR 0 1
34245: GREATER
34246: IFFALSE 34256
// k := 1 ;
34248: LD_ADDR_VAR 0 8
34252: PUSH
34253: LD_INT 1
34255: ST_TO_ADDR
// if not k then
34256: LD_VAR 0 8
34260: NOT
34261: IFFALSE 34273
// k := array ;
34263: LD_ADDR_VAR 0 8
34267: PUSH
34268: LD_VAR 0 1
34272: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34273: LD_ADDR_VAR 0 10
34277: PUSH
34278: LD_VAR 0 10
34282: PPUSH
34283: LD_VAR 0 8
34287: PPUSH
34288: LD_VAR 0 1
34292: PUSH
34293: LD_VAR 0 7
34297: ARRAY
34298: PPUSH
34299: CALL_OW 1
34303: ST_TO_ADDR
// end ;
34304: GO 34217
34306: POP
34307: POP
// array := tmp ;
34308: LD_ADDR_VAR 0 1
34312: PUSH
34313: LD_VAR 0 10
34317: ST_TO_ADDR
// end ;
34318: GO 34199
34320: POP
34321: POP
// result := array ;
34322: LD_ADDR_VAR 0 5
34326: PUSH
34327: LD_VAR 0 1
34331: ST_TO_ADDR
// end ;
34332: LD_VAR 0 5
34336: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34337: LD_INT 0
34339: PPUSH
34340: PPUSH
// result := 0 ;
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 0
34348: ST_TO_ADDR
// if not array or not value in array then
34349: LD_VAR 0 1
34353: NOT
34354: PUSH
34355: LD_VAR 0 2
34359: PUSH
34360: LD_VAR 0 1
34364: IN
34365: NOT
34366: OR
34367: IFFALSE 34371
// exit ;
34369: GO 34425
// for i = 1 to array do
34371: LD_ADDR_VAR 0 4
34375: PUSH
34376: DOUBLE
34377: LD_INT 1
34379: DEC
34380: ST_TO_ADDR
34381: LD_VAR 0 1
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34423
// if value = array [ i ] then
34389: LD_VAR 0 2
34393: PUSH
34394: LD_VAR 0 1
34398: PUSH
34399: LD_VAR 0 4
34403: ARRAY
34404: EQUAL
34405: IFFALSE 34421
// begin result := i ;
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_VAR 0 4
34416: ST_TO_ADDR
// exit ;
34417: POP
34418: POP
34419: GO 34425
// end ;
34421: GO 34386
34423: POP
34424: POP
// end ;
34425: LD_VAR 0 3
34429: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34430: LD_INT 0
34432: PPUSH
// vc_chassis := chassis ;
34433: LD_ADDR_OWVAR 37
34437: PUSH
34438: LD_VAR 0 1
34442: ST_TO_ADDR
// vc_engine := engine ;
34443: LD_ADDR_OWVAR 39
34447: PUSH
34448: LD_VAR 0 2
34452: ST_TO_ADDR
// vc_control := control ;
34453: LD_ADDR_OWVAR 38
34457: PUSH
34458: LD_VAR 0 3
34462: ST_TO_ADDR
// vc_weapon := weapon ;
34463: LD_ADDR_OWVAR 40
34467: PUSH
34468: LD_VAR 0 4
34472: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34473: LD_ADDR_OWVAR 41
34477: PUSH
34478: LD_VAR 0 5
34482: ST_TO_ADDR
// end ;
34483: LD_VAR 0 6
34487: RET
// export function WantPlant ( unit ) ; var task ; begin
34488: LD_INT 0
34490: PPUSH
34491: PPUSH
// result := false ;
34492: LD_ADDR_VAR 0 2
34496: PUSH
34497: LD_INT 0
34499: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34500: LD_ADDR_VAR 0 3
34504: PUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 437
34514: ST_TO_ADDR
// if task then
34515: LD_VAR 0 3
34519: IFFALSE 34547
// if task [ 1 ] [ 1 ] = p then
34521: LD_VAR 0 3
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PUSH
34530: LD_INT 1
34532: ARRAY
34533: PUSH
34534: LD_STRING p
34536: EQUAL
34537: IFFALSE 34547
// result := true ;
34539: LD_ADDR_VAR 0 2
34543: PUSH
34544: LD_INT 1
34546: ST_TO_ADDR
// end ;
34547: LD_VAR 0 2
34551: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34552: LD_INT 0
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
// if pos < 1 then
34558: LD_VAR 0 2
34562: PUSH
34563: LD_INT 1
34565: LESS
34566: IFFALSE 34570
// exit ;
34568: GO 34873
// if pos = 1 then
34570: LD_VAR 0 2
34574: PUSH
34575: LD_INT 1
34577: EQUAL
34578: IFFALSE 34611
// result := Replace ( arr , pos [ 1 ] , value ) else
34580: LD_ADDR_VAR 0 4
34584: PUSH
34585: LD_VAR 0 1
34589: PPUSH
34590: LD_VAR 0 2
34594: PUSH
34595: LD_INT 1
34597: ARRAY
34598: PPUSH
34599: LD_VAR 0 3
34603: PPUSH
34604: CALL_OW 1
34608: ST_TO_ADDR
34609: GO 34873
// begin tmp := arr ;
34611: LD_ADDR_VAR 0 6
34615: PUSH
34616: LD_VAR 0 1
34620: ST_TO_ADDR
// s_arr := [ tmp ] ;
34621: LD_ADDR_VAR 0 7
34625: PUSH
34626: LD_VAR 0 6
34630: PUSH
34631: EMPTY
34632: LIST
34633: ST_TO_ADDR
// for i = 1 to pos - 1 do
34634: LD_ADDR_VAR 0 5
34638: PUSH
34639: DOUBLE
34640: LD_INT 1
34642: DEC
34643: ST_TO_ADDR
34644: LD_VAR 0 2
34648: PUSH
34649: LD_INT 1
34651: MINUS
34652: PUSH
34653: FOR_TO
34654: IFFALSE 34699
// begin tmp := tmp [ pos [ i ] ] ;
34656: LD_ADDR_VAR 0 6
34660: PUSH
34661: LD_VAR 0 6
34665: PUSH
34666: LD_VAR 0 2
34670: PUSH
34671: LD_VAR 0 5
34675: ARRAY
34676: ARRAY
34677: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34678: LD_ADDR_VAR 0 7
34682: PUSH
34683: LD_VAR 0 7
34687: PUSH
34688: LD_VAR 0 6
34692: PUSH
34693: EMPTY
34694: LIST
34695: ADD
34696: ST_TO_ADDR
// end ;
34697: GO 34653
34699: POP
34700: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34701: LD_ADDR_VAR 0 6
34705: PUSH
34706: LD_VAR 0 6
34710: PPUSH
34711: LD_VAR 0 2
34715: PUSH
34716: LD_VAR 0 2
34720: ARRAY
34721: PPUSH
34722: LD_VAR 0 3
34726: PPUSH
34727: CALL_OW 1
34731: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34732: LD_ADDR_VAR 0 7
34736: PUSH
34737: LD_VAR 0 7
34741: PPUSH
34742: LD_VAR 0 7
34746: PPUSH
34747: LD_VAR 0 6
34751: PPUSH
34752: CALL_OW 1
34756: ST_TO_ADDR
// for i = s_arr downto 2 do
34757: LD_ADDR_VAR 0 5
34761: PUSH
34762: DOUBLE
34763: LD_VAR 0 7
34767: INC
34768: ST_TO_ADDR
34769: LD_INT 2
34771: PUSH
34772: FOR_DOWNTO
34773: IFFALSE 34857
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_VAR 0 7
34784: PUSH
34785: LD_VAR 0 5
34789: PUSH
34790: LD_INT 1
34792: MINUS
34793: ARRAY
34794: PPUSH
34795: LD_VAR 0 2
34799: PUSH
34800: LD_VAR 0 5
34804: PUSH
34805: LD_INT 1
34807: MINUS
34808: ARRAY
34809: PPUSH
34810: LD_VAR 0 7
34814: PUSH
34815: LD_VAR 0 5
34819: ARRAY
34820: PPUSH
34821: CALL_OW 1
34825: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34826: LD_ADDR_VAR 0 7
34830: PUSH
34831: LD_VAR 0 7
34835: PPUSH
34836: LD_VAR 0 5
34840: PUSH
34841: LD_INT 1
34843: MINUS
34844: PPUSH
34845: LD_VAR 0 6
34849: PPUSH
34850: CALL_OW 1
34854: ST_TO_ADDR
// end ;
34855: GO 34772
34857: POP
34858: POP
// result := s_arr [ 1 ] ;
34859: LD_ADDR_VAR 0 4
34863: PUSH
34864: LD_VAR 0 7
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: ST_TO_ADDR
// end ; end ;
34873: LD_VAR 0 4
34877: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34878: LD_INT 0
34880: PPUSH
34881: PPUSH
// if not list then
34882: LD_VAR 0 1
34886: NOT
34887: IFFALSE 34891
// exit ;
34889: GO 34982
// i := list [ pos1 ] ;
34891: LD_ADDR_VAR 0 5
34895: PUSH
34896: LD_VAR 0 1
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: ST_TO_ADDR
// if not i then
34907: LD_VAR 0 5
34911: NOT
34912: IFFALSE 34916
// exit ;
34914: GO 34982
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34916: LD_ADDR_VAR 0 1
34920: PUSH
34921: LD_VAR 0 1
34925: PPUSH
34926: LD_VAR 0 2
34930: PPUSH
34931: LD_VAR 0 1
34935: PUSH
34936: LD_VAR 0 3
34940: ARRAY
34941: PPUSH
34942: CALL_OW 1
34946: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34947: LD_ADDR_VAR 0 1
34951: PUSH
34952: LD_VAR 0 1
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL_OW 1
34971: ST_TO_ADDR
// result := list ;
34972: LD_ADDR_VAR 0 4
34976: PUSH
34977: LD_VAR 0 1
34981: ST_TO_ADDR
// end ;
34982: LD_VAR 0 4
34986: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34987: LD_INT 0
34989: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34990: LD_ADDR_VAR 0 5
34994: PUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 250
35004: PPUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 251
35014: PPUSH
35015: LD_VAR 0 2
35019: PPUSH
35020: LD_VAR 0 3
35024: PPUSH
35025: LD_VAR 0 4
35029: PPUSH
35030: CALL 35040 0 5
35034: ST_TO_ADDR
// end ;
35035: LD_VAR 0 5
35039: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35040: LD_INT 0
35042: PPUSH
35043: PPUSH
35044: PPUSH
35045: PPUSH
// if not list then
35046: LD_VAR 0 3
35050: NOT
35051: IFFALSE 35055
// exit ;
35053: GO 35443
// result := [ ] ;
35055: LD_ADDR_VAR 0 6
35059: PUSH
35060: EMPTY
35061: ST_TO_ADDR
// for i in list do
35062: LD_ADDR_VAR 0 7
35066: PUSH
35067: LD_VAR 0 3
35071: PUSH
35072: FOR_IN
35073: IFFALSE 35275
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35075: LD_ADDR_VAR 0 9
35079: PUSH
35080: LD_VAR 0 7
35084: PPUSH
35085: LD_VAR 0 1
35089: PPUSH
35090: LD_VAR 0 2
35094: PPUSH
35095: CALL_OW 297
35099: ST_TO_ADDR
// if not result then
35100: LD_VAR 0 6
35104: NOT
35105: IFFALSE 35131
// result := [ [ i , tmp ] ] else
35107: LD_ADDR_VAR 0 6
35111: PUSH
35112: LD_VAR 0 7
35116: PUSH
35117: LD_VAR 0 9
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: ST_TO_ADDR
35129: GO 35273
// begin if result [ result ] [ 2 ] < tmp then
35131: LD_VAR 0 6
35135: PUSH
35136: LD_VAR 0 6
35140: ARRAY
35141: PUSH
35142: LD_INT 2
35144: ARRAY
35145: PUSH
35146: LD_VAR 0 9
35150: LESS
35151: IFFALSE 35193
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35153: LD_ADDR_VAR 0 6
35157: PUSH
35158: LD_VAR 0 6
35162: PPUSH
35163: LD_VAR 0 6
35167: PUSH
35168: LD_INT 1
35170: PLUS
35171: PPUSH
35172: LD_VAR 0 7
35176: PUSH
35177: LD_VAR 0 9
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PPUSH
35186: CALL_OW 2
35190: ST_TO_ADDR
35191: GO 35273
// for j = 1 to result do
35193: LD_ADDR_VAR 0 8
35197: PUSH
35198: DOUBLE
35199: LD_INT 1
35201: DEC
35202: ST_TO_ADDR
35203: LD_VAR 0 6
35207: PUSH
35208: FOR_TO
35209: IFFALSE 35271
// begin if tmp < result [ j ] [ 2 ] then
35211: LD_VAR 0 9
35215: PUSH
35216: LD_VAR 0 6
35220: PUSH
35221: LD_VAR 0 8
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: LESS
35231: IFFALSE 35269
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35233: LD_ADDR_VAR 0 6
35237: PUSH
35238: LD_VAR 0 6
35242: PPUSH
35243: LD_VAR 0 8
35247: PPUSH
35248: LD_VAR 0 7
35252: PUSH
35253: LD_VAR 0 9
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PPUSH
35262: CALL_OW 2
35266: ST_TO_ADDR
// break ;
35267: GO 35271
// end ; end ;
35269: GO 35208
35271: POP
35272: POP
// end ; end ;
35273: GO 35072
35275: POP
35276: POP
// if result and not asc then
35277: LD_VAR 0 6
35281: PUSH
35282: LD_VAR 0 4
35286: NOT
35287: AND
35288: IFFALSE 35363
// begin tmp := result ;
35290: LD_ADDR_VAR 0 9
35294: PUSH
35295: LD_VAR 0 6
35299: ST_TO_ADDR
// for i = tmp downto 1 do
35300: LD_ADDR_VAR 0 7
35304: PUSH
35305: DOUBLE
35306: LD_VAR 0 9
35310: INC
35311: ST_TO_ADDR
35312: LD_INT 1
35314: PUSH
35315: FOR_DOWNTO
35316: IFFALSE 35361
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35318: LD_ADDR_VAR 0 6
35322: PUSH
35323: LD_VAR 0 6
35327: PPUSH
35328: LD_VAR 0 9
35332: PUSH
35333: LD_VAR 0 7
35337: MINUS
35338: PUSH
35339: LD_INT 1
35341: PLUS
35342: PPUSH
35343: LD_VAR 0 9
35347: PUSH
35348: LD_VAR 0 7
35352: ARRAY
35353: PPUSH
35354: CALL_OW 1
35358: ST_TO_ADDR
35359: GO 35315
35361: POP
35362: POP
// end ; tmp := [ ] ;
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: EMPTY
35369: ST_TO_ADDR
// if mode then
35370: LD_VAR 0 5
35374: IFFALSE 35443
// begin for i = 1 to result do
35376: LD_ADDR_VAR 0 7
35380: PUSH
35381: DOUBLE
35382: LD_INT 1
35384: DEC
35385: ST_TO_ADDR
35386: LD_VAR 0 6
35390: PUSH
35391: FOR_TO
35392: IFFALSE 35431
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35394: LD_ADDR_VAR 0 9
35398: PUSH
35399: LD_VAR 0 9
35403: PPUSH
35404: LD_VAR 0 7
35408: PPUSH
35409: LD_VAR 0 6
35413: PUSH
35414: LD_VAR 0 7
35418: ARRAY
35419: PUSH
35420: LD_INT 1
35422: ARRAY
35423: PPUSH
35424: CALL_OW 1
35428: ST_TO_ADDR
35429: GO 35391
35431: POP
35432: POP
// result := tmp ;
35433: LD_ADDR_VAR 0 6
35437: PUSH
35438: LD_VAR 0 9
35442: ST_TO_ADDR
// end ; end ;
35443: LD_VAR 0 6
35447: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35448: LD_INT 0
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35456: LD_ADDR_VAR 0 5
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: EMPTY
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: ST_TO_ADDR
// if not x or not y then
35478: LD_VAR 0 2
35482: NOT
35483: PUSH
35484: LD_VAR 0 3
35488: NOT
35489: OR
35490: IFFALSE 35494
// exit ;
35492: GO 37144
// if not range then
35494: LD_VAR 0 4
35498: NOT
35499: IFFALSE 35509
// range := 10 ;
35501: LD_ADDR_VAR 0 4
35505: PUSH
35506: LD_INT 10
35508: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35509: LD_ADDR_VAR 0 8
35513: PUSH
35514: LD_INT 81
35516: PUSH
35517: LD_VAR 0 1
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 92
35528: PUSH
35529: LD_VAR 0 2
35533: PUSH
35534: LD_VAR 0 3
35538: PUSH
35539: LD_VAR 0 4
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 21
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: PPUSH
35572: CALL_OW 69
35576: ST_TO_ADDR
// if not tmp then
35577: LD_VAR 0 8
35581: NOT
35582: IFFALSE 35586
// exit ;
35584: GO 37144
// for i in tmp do
35586: LD_ADDR_VAR 0 6
35590: PUSH
35591: LD_VAR 0 8
35595: PUSH
35596: FOR_IN
35597: IFFALSE 37119
// begin points := [ 0 , 0 , 0 ] ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
// bpoints := 1 ;
35618: LD_ADDR_VAR 0 10
35622: PUSH
35623: LD_INT 1
35625: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35626: LD_VAR 0 6
35630: PPUSH
35631: CALL_OW 247
35635: PUSH
35636: LD_INT 1
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35644
35642: GO 36222
35644: POP
// begin if GetClass ( i ) = 1 then
35645: LD_VAR 0 6
35649: PPUSH
35650: CALL_OW 257
35654: PUSH
35655: LD_INT 1
35657: EQUAL
35658: IFFALSE 35679
// points := [ 10 , 5 , 3 ] ;
35660: LD_ADDR_VAR 0 9
35664: PUSH
35665: LD_INT 10
35667: PUSH
35668: LD_INT 5
35670: PUSH
35671: LD_INT 3
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35679: LD_VAR 0 6
35683: PPUSH
35684: CALL_OW 257
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: IN
35703: IFFALSE 35724
// points := [ 3 , 2 , 1 ] ;
35705: LD_ADDR_VAR 0 9
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35724: LD_VAR 0 6
35728: PPUSH
35729: CALL_OW 257
35733: PUSH
35734: LD_INT 5
35736: EQUAL
35737: IFFALSE 35758
// points := [ 130 , 5 , 2 ] ;
35739: LD_ADDR_VAR 0 9
35743: PUSH
35744: LD_INT 130
35746: PUSH
35747: LD_INT 5
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35758: LD_VAR 0 6
35762: PPUSH
35763: CALL_OW 257
35767: PUSH
35768: LD_INT 8
35770: EQUAL
35771: IFFALSE 35792
// points := [ 35 , 35 , 30 ] ;
35773: LD_ADDR_VAR 0 9
35777: PUSH
35778: LD_INT 35
35780: PUSH
35781: LD_INT 35
35783: PUSH
35784: LD_INT 30
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35792: LD_VAR 0 6
35796: PPUSH
35797: CALL_OW 257
35801: PUSH
35802: LD_INT 9
35804: EQUAL
35805: IFFALSE 35826
// points := [ 20 , 55 , 40 ] ;
35807: LD_ADDR_VAR 0 9
35811: PUSH
35812: LD_INT 20
35814: PUSH
35815: LD_INT 55
35817: PUSH
35818: LD_INT 40
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35826: LD_VAR 0 6
35830: PPUSH
35831: CALL_OW 257
35835: PUSH
35836: LD_INT 12
35838: PUSH
35839: LD_INT 16
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: IN
35846: IFFALSE 35867
// points := [ 5 , 3 , 2 ] ;
35848: LD_ADDR_VAR 0 9
35852: PUSH
35853: LD_INT 5
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35867: LD_VAR 0 6
35871: PPUSH
35872: CALL_OW 257
35876: PUSH
35877: LD_INT 17
35879: EQUAL
35880: IFFALSE 35901
// points := [ 100 , 50 , 75 ] ;
35882: LD_ADDR_VAR 0 9
35886: PUSH
35887: LD_INT 100
35889: PUSH
35890: LD_INT 50
35892: PUSH
35893: LD_INT 75
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35901: LD_VAR 0 6
35905: PPUSH
35906: CALL_OW 257
35910: PUSH
35911: LD_INT 15
35913: EQUAL
35914: IFFALSE 35935
// points := [ 10 , 5 , 3 ] ;
35916: LD_ADDR_VAR 0 9
35920: PUSH
35921: LD_INT 10
35923: PUSH
35924: LD_INT 5
35926: PUSH
35927: LD_INT 3
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35935: LD_VAR 0 6
35939: PPUSH
35940: CALL_OW 257
35944: PUSH
35945: LD_INT 14
35947: EQUAL
35948: IFFALSE 35969
// points := [ 10 , 0 , 0 ] ;
35950: LD_ADDR_VAR 0 9
35954: PUSH
35955: LD_INT 10
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35969: LD_VAR 0 6
35973: PPUSH
35974: CALL_OW 257
35978: PUSH
35979: LD_INT 11
35981: EQUAL
35982: IFFALSE 36003
// points := [ 30 , 10 , 5 ] ;
35984: LD_ADDR_VAR 0 9
35988: PUSH
35989: LD_INT 30
35991: PUSH
35992: LD_INT 10
35994: PUSH
35995: LD_INT 5
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_INT 5
36010: PPUSH
36011: CALL_OW 321
36015: PUSH
36016: LD_INT 2
36018: EQUAL
36019: IFFALSE 36036
// bpoints := bpoints * 1.8 ;
36021: LD_ADDR_VAR 0 10
36025: PUSH
36026: LD_VAR 0 10
36030: PUSH
36031: LD_REAL  1.80000000000000E+0000
36034: MUL
36035: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36036: LD_VAR 0 6
36040: PPUSH
36041: CALL_OW 257
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 3
36054: PUSH
36055: LD_INT 4
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: IN
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_INT 51
36072: PPUSH
36073: CALL_OW 321
36077: PUSH
36078: LD_INT 2
36080: EQUAL
36081: AND
36082: IFFALSE 36099
// bpoints := bpoints * 1.2 ;
36084: LD_ADDR_VAR 0 10
36088: PUSH
36089: LD_VAR 0 10
36093: PUSH
36094: LD_REAL  1.20000000000000E+0000
36097: MUL
36098: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36099: LD_VAR 0 6
36103: PPUSH
36104: CALL_OW 257
36108: PUSH
36109: LD_INT 5
36111: PUSH
36112: LD_INT 7
36114: PUSH
36115: LD_INT 9
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: IN
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: LD_INT 52
36131: PPUSH
36132: CALL_OW 321
36136: PUSH
36137: LD_INT 2
36139: EQUAL
36140: AND
36141: IFFALSE 36158
// bpoints := bpoints * 1.5 ;
36143: LD_ADDR_VAR 0 10
36147: PUSH
36148: LD_VAR 0 10
36152: PUSH
36153: LD_REAL  1.50000000000000E+0000
36156: MUL
36157: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36158: LD_VAR 0 1
36162: PPUSH
36163: LD_INT 66
36165: PPUSH
36166: CALL_OW 321
36170: PUSH
36171: LD_INT 2
36173: EQUAL
36174: IFFALSE 36191
// bpoints := bpoints * 1.1 ;
36176: LD_ADDR_VAR 0 10
36180: PUSH
36181: LD_VAR 0 10
36185: PUSH
36186: LD_REAL  1.10000000000000E+0000
36189: MUL
36190: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36191: LD_ADDR_VAR 0 10
36195: PUSH
36196: LD_VAR 0 10
36200: PUSH
36201: LD_VAR 0 6
36205: PPUSH
36206: LD_INT 1
36208: PPUSH
36209: CALL_OW 259
36213: PUSH
36214: LD_REAL  1.15000000000000E+0000
36217: MUL
36218: MUL
36219: ST_TO_ADDR
// end ; unit_vehicle :
36220: GO 37048
36222: LD_INT 2
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36230
36228: GO 37036
36230: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36231: LD_VAR 0 6
36235: PPUSH
36236: CALL_OW 264
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 42
36246: PUSH
36247: LD_INT 24
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: IN
36255: IFFALSE 36276
// points := [ 25 , 5 , 3 ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_INT 25
36264: PUSH
36265: LD_INT 5
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36276: LD_VAR 0 6
36280: PPUSH
36281: CALL_OW 264
36285: PUSH
36286: LD_INT 4
36288: PUSH
36289: LD_INT 43
36291: PUSH
36292: LD_INT 25
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: IN
36300: IFFALSE 36321
// points := [ 40 , 15 , 5 ] ;
36302: LD_ADDR_VAR 0 9
36306: PUSH
36307: LD_INT 40
36309: PUSH
36310: LD_INT 15
36312: PUSH
36313: LD_INT 5
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36321: LD_VAR 0 6
36325: PPUSH
36326: CALL_OW 264
36330: PUSH
36331: LD_INT 3
36333: PUSH
36334: LD_INT 23
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: IN
36341: IFFALSE 36362
// points := [ 7 , 25 , 8 ] ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: LD_INT 7
36350: PUSH
36351: LD_INT 25
36353: PUSH
36354: LD_INT 8
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36362: LD_VAR 0 6
36366: PPUSH
36367: CALL_OW 264
36371: PUSH
36372: LD_INT 5
36374: PUSH
36375: LD_INT 27
36377: PUSH
36378: LD_INT 44
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: IN
36386: IFFALSE 36407
// points := [ 14 , 50 , 16 ] ;
36388: LD_ADDR_VAR 0 9
36392: PUSH
36393: LD_INT 14
36395: PUSH
36396: LD_INT 50
36398: PUSH
36399: LD_INT 16
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36407: LD_VAR 0 6
36411: PPUSH
36412: CALL_OW 264
36416: PUSH
36417: LD_INT 6
36419: PUSH
36420: LD_INT 46
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: IN
36427: IFFALSE 36448
// points := [ 32 , 120 , 70 ] ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_INT 32
36436: PUSH
36437: LD_INT 120
36439: PUSH
36440: LD_INT 70
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36448: LD_VAR 0 6
36452: PPUSH
36453: CALL_OW 264
36457: PUSH
36458: LD_INT 7
36460: PUSH
36461: LD_INT 28
36463: PUSH
36464: LD_INT 45
36466: PUSH
36467: LD_INT 92
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 35 , 20 , 45 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 35
36485: PUSH
36486: LD_INT 20
36488: PUSH
36489: LD_INT 45
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 47
36509: PUSH
36510: EMPTY
36511: LIST
36512: IN
36513: IFFALSE 36534
// points := [ 67 , 45 , 75 ] ;
36515: LD_ADDR_VAR 0 9
36519: PUSH
36520: LD_INT 67
36522: PUSH
36523: LD_INT 45
36525: PUSH
36526: LD_INT 75
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36534: LD_VAR 0 6
36538: PPUSH
36539: CALL_OW 264
36543: PUSH
36544: LD_INT 26
36546: PUSH
36547: EMPTY
36548: LIST
36549: IN
36550: IFFALSE 36571
// points := [ 120 , 30 , 80 ] ;
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_INT 120
36559: PUSH
36560: LD_INT 30
36562: PUSH
36563: LD_INT 80
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 264
36580: PUSH
36581: LD_INT 22
36583: PUSH
36584: EMPTY
36585: LIST
36586: IN
36587: IFFALSE 36608
// points := [ 40 , 1 , 1 ] ;
36589: LD_ADDR_VAR 0 9
36593: PUSH
36594: LD_INT 40
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36608: LD_VAR 0 6
36612: PPUSH
36613: CALL_OW 264
36617: PUSH
36618: LD_INT 29
36620: PUSH
36621: EMPTY
36622: LIST
36623: IN
36624: IFFALSE 36645
// points := [ 70 , 200 , 400 ] ;
36626: LD_ADDR_VAR 0 9
36630: PUSH
36631: LD_INT 70
36633: PUSH
36634: LD_INT 200
36636: PUSH
36637: LD_INT 400
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36645: LD_VAR 0 6
36649: PPUSH
36650: CALL_OW 264
36654: PUSH
36655: LD_INT 14
36657: PUSH
36658: LD_INT 53
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: IN
36665: IFFALSE 36686
// points := [ 40 , 10 , 20 ] ;
36667: LD_ADDR_VAR 0 9
36671: PUSH
36672: LD_INT 40
36674: PUSH
36675: LD_INT 10
36677: PUSH
36678: LD_INT 20
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36686: LD_VAR 0 6
36690: PPUSH
36691: CALL_OW 264
36695: PUSH
36696: LD_INT 9
36698: PUSH
36699: EMPTY
36700: LIST
36701: IN
36702: IFFALSE 36723
// points := [ 5 , 70 , 20 ] ;
36704: LD_ADDR_VAR 0 9
36708: PUSH
36709: LD_INT 5
36711: PUSH
36712: LD_INT 70
36714: PUSH
36715: LD_INT 20
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36723: LD_VAR 0 6
36727: PPUSH
36728: CALL_OW 264
36732: PUSH
36733: LD_INT 10
36735: PUSH
36736: EMPTY
36737: LIST
36738: IN
36739: IFFALSE 36760
// points := [ 35 , 110 , 70 ] ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 35
36748: PUSH
36749: LD_INT 110
36751: PUSH
36752: LD_INT 70
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 265
36769: PUSH
36770: LD_INT 25
36772: EQUAL
36773: IFFALSE 36794
// points := [ 80 , 65 , 100 ] ;
36775: LD_ADDR_VAR 0 9
36779: PUSH
36780: LD_INT 80
36782: PUSH
36783: LD_INT 65
36785: PUSH
36786: LD_INT 100
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36794: LD_VAR 0 6
36798: PPUSH
36799: CALL_OW 263
36803: PUSH
36804: LD_INT 1
36806: EQUAL
36807: IFFALSE 36842
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36809: LD_ADDR_VAR 0 10
36813: PUSH
36814: LD_VAR 0 10
36818: PUSH
36819: LD_VAR 0 6
36823: PPUSH
36824: CALL_OW 311
36828: PPUSH
36829: LD_INT 3
36831: PPUSH
36832: CALL_OW 259
36836: PUSH
36837: LD_INT 4
36839: MUL
36840: MUL
36841: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36842: LD_VAR 0 6
36846: PPUSH
36847: CALL_OW 263
36851: PUSH
36852: LD_INT 2
36854: EQUAL
36855: IFFALSE 36906
// begin j := IsControledBy ( i ) ;
36857: LD_ADDR_VAR 0 7
36861: PUSH
36862: LD_VAR 0 6
36866: PPUSH
36867: CALL_OW 312
36871: ST_TO_ADDR
// if j then
36872: LD_VAR 0 7
36876: IFFALSE 36906
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36878: LD_ADDR_VAR 0 10
36882: PUSH
36883: LD_VAR 0 10
36887: PUSH
36888: LD_VAR 0 7
36892: PPUSH
36893: LD_INT 3
36895: PPUSH
36896: CALL_OW 259
36900: PUSH
36901: LD_INT 3
36903: MUL
36904: MUL
36905: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36906: LD_VAR 0 6
36910: PPUSH
36911: CALL_OW 264
36915: PUSH
36916: LD_INT 5
36918: PUSH
36919: LD_INT 6
36921: PUSH
36922: LD_INT 46
36924: PUSH
36925: LD_INT 44
36927: PUSH
36928: LD_INT 47
36930: PUSH
36931: LD_INT 45
36933: PUSH
36934: LD_INT 28
36936: PUSH
36937: LD_INT 7
36939: PUSH
36940: LD_INT 27
36942: PUSH
36943: LD_INT 29
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: IN
36958: PUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: LD_INT 52
36966: PPUSH
36967: CALL_OW 321
36971: PUSH
36972: LD_INT 2
36974: EQUAL
36975: AND
36976: IFFALSE 36993
// bpoints := bpoints * 1.2 ;
36978: LD_ADDR_VAR 0 10
36982: PUSH
36983: LD_VAR 0 10
36987: PUSH
36988: LD_REAL  1.20000000000000E+0000
36991: MUL
36992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36993: LD_VAR 0 6
36997: PPUSH
36998: CALL_OW 264
37002: PUSH
37003: LD_INT 6
37005: PUSH
37006: LD_INT 46
37008: PUSH
37009: LD_INT 47
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: IN
37017: IFFALSE 37034
// bpoints := bpoints * 1.2 ;
37019: LD_ADDR_VAR 0 10
37023: PUSH
37024: LD_VAR 0 10
37028: PUSH
37029: LD_REAL  1.20000000000000E+0000
37032: MUL
37033: ST_TO_ADDR
// end ; unit_building :
37034: GO 37048
37036: LD_INT 3
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37044
37042: GO 37047
37044: POP
// ; end ;
37045: GO 37048
37047: POP
// for j = 1 to 3 do
37048: LD_ADDR_VAR 0 7
37052: PUSH
37053: DOUBLE
37054: LD_INT 1
37056: DEC
37057: ST_TO_ADDR
37058: LD_INT 3
37060: PUSH
37061: FOR_TO
37062: IFFALSE 37115
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37064: LD_ADDR_VAR 0 5
37068: PUSH
37069: LD_VAR 0 5
37073: PPUSH
37074: LD_VAR 0 7
37078: PPUSH
37079: LD_VAR 0 5
37083: PUSH
37084: LD_VAR 0 7
37088: ARRAY
37089: PUSH
37090: LD_VAR 0 9
37094: PUSH
37095: LD_VAR 0 7
37099: ARRAY
37100: PUSH
37101: LD_VAR 0 10
37105: MUL
37106: PLUS
37107: PPUSH
37108: CALL_OW 1
37112: ST_TO_ADDR
37113: GO 37061
37115: POP
37116: POP
// end ;
37117: GO 35596
37119: POP
37120: POP
// result := Replace ( result , 4 , tmp ) ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: LD_VAR 0 5
37130: PPUSH
37131: LD_INT 4
37133: PPUSH
37134: LD_VAR 0 8
37138: PPUSH
37139: CALL_OW 1
37143: ST_TO_ADDR
// end ;
37144: LD_VAR 0 5
37148: RET
// export function DangerAtRange ( unit , range ) ; begin
37149: LD_INT 0
37151: PPUSH
// if not unit then
37152: LD_VAR 0 1
37156: NOT
37157: IFFALSE 37161
// exit ;
37159: GO 37206
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37161: LD_ADDR_VAR 0 3
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 255
37175: PPUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 250
37185: PPUSH
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 251
37195: PPUSH
37196: LD_VAR 0 2
37200: PPUSH
37201: CALL 35448 0 4
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 3
37210: RET
// export function DangerInArea ( side , area ) ; begin
37211: LD_INT 0
37213: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: LD_INT 81
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PPUSH
37236: CALL_OW 70
37240: ST_TO_ADDR
// end ;
37241: LD_VAR 0 3
37245: RET
// export function IsExtension ( b ) ; begin
37246: LD_INT 0
37248: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37249: LD_ADDR_VAR 0 2
37253: PUSH
37254: LD_VAR 0 1
37258: PUSH
37259: LD_INT 23
37261: PUSH
37262: LD_INT 20
37264: PUSH
37265: LD_INT 22
37267: PUSH
37268: LD_INT 17
37270: PUSH
37271: LD_INT 24
37273: PUSH
37274: LD_INT 21
37276: PUSH
37277: LD_INT 19
37279: PUSH
37280: LD_INT 16
37282: PUSH
37283: LD_INT 25
37285: PUSH
37286: LD_INT 18
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: IN
37301: ST_TO_ADDR
// end ;
37302: LD_VAR 0 2
37306: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37307: LD_INT 0
37309: PPUSH
37310: PPUSH
37311: PPUSH
// result := [ ] ;
37312: LD_ADDR_VAR 0 4
37316: PUSH
37317: EMPTY
37318: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37319: LD_ADDR_VAR 0 5
37323: PUSH
37324: LD_VAR 0 2
37328: PPUSH
37329: LD_INT 21
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PPUSH
37339: CALL_OW 70
37343: ST_TO_ADDR
// if not tmp then
37344: LD_VAR 0 5
37348: NOT
37349: IFFALSE 37353
// exit ;
37351: GO 37417
// if checkLink then
37353: LD_VAR 0 3
37357: IFFALSE 37407
// begin for i in tmp do
37359: LD_ADDR_VAR 0 6
37363: PUSH
37364: LD_VAR 0 5
37368: PUSH
37369: FOR_IN
37370: IFFALSE 37405
// if GetBase ( i ) <> base then
37372: LD_VAR 0 6
37376: PPUSH
37377: CALL_OW 274
37381: PUSH
37382: LD_VAR 0 1
37386: NONEQUAL
37387: IFFALSE 37403
// ComLinkToBase ( base , i ) ;
37389: LD_VAR 0 1
37393: PPUSH
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 169
37403: GO 37369
37405: POP
37406: POP
// end ; result := tmp ;
37407: LD_ADDR_VAR 0 4
37411: PUSH
37412: LD_VAR 0 5
37416: ST_TO_ADDR
// end ;
37417: LD_VAR 0 4
37421: RET
// export function ComComplete ( units , b ) ; var i ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
// if not units then
37426: LD_VAR 0 1
37430: NOT
37431: IFFALSE 37435
// exit ;
37433: GO 37525
// for i in units do
37435: LD_ADDR_VAR 0 4
37439: PUSH
37440: LD_VAR 0 1
37444: PUSH
37445: FOR_IN
37446: IFFALSE 37523
// if BuildingStatus ( b ) = bs_build then
37448: LD_VAR 0 2
37452: PPUSH
37453: CALL_OW 461
37457: PUSH
37458: LD_INT 1
37460: EQUAL
37461: IFFALSE 37521
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37463: LD_VAR 0 4
37467: PPUSH
37468: LD_STRING h
37470: PUSH
37471: LD_VAR 0 2
37475: PPUSH
37476: CALL_OW 250
37480: PUSH
37481: LD_VAR 0 2
37485: PPUSH
37486: CALL_OW 251
37490: PUSH
37491: LD_VAR 0 2
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: PPUSH
37517: CALL_OW 446
37521: GO 37445
37523: POP
37524: POP
// end ;
37525: LD_VAR 0 3
37529: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37530: LD_INT 0
37532: PPUSH
37533: PPUSH
37534: PPUSH
37535: PPUSH
37536: PPUSH
37537: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37538: LD_VAR 0 1
37542: NOT
37543: PUSH
37544: LD_VAR 0 1
37548: PPUSH
37549: CALL_OW 263
37553: PUSH
37554: LD_INT 2
37556: NONEQUAL
37557: OR
37558: IFFALSE 37562
// exit ;
37560: GO 37878
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37562: LD_ADDR_VAR 0 6
37566: PUSH
37567: LD_INT 22
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 30
37589: PUSH
37590: LD_INT 36
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 34
37599: PUSH
37600: LD_INT 31
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PPUSH
37616: CALL_OW 69
37620: ST_TO_ADDR
// if not tmp then
37621: LD_VAR 0 6
37625: NOT
37626: IFFALSE 37630
// exit ;
37628: GO 37878
// result := [ ] ;
37630: LD_ADDR_VAR 0 2
37634: PUSH
37635: EMPTY
37636: ST_TO_ADDR
// for i in tmp do
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: LD_VAR 0 6
37646: PUSH
37647: FOR_IN
37648: IFFALSE 37719
// begin t := UnitsInside ( i ) ;
37650: LD_ADDR_VAR 0 4
37654: PUSH
37655: LD_VAR 0 3
37659: PPUSH
37660: CALL_OW 313
37664: ST_TO_ADDR
// if t then
37665: LD_VAR 0 4
37669: IFFALSE 37717
// for j in t do
37671: LD_ADDR_VAR 0 7
37675: PUSH
37676: LD_VAR 0 4
37680: PUSH
37681: FOR_IN
37682: IFFALSE 37715
// result := Replace ( result , result + 1 , j ) ;
37684: LD_ADDR_VAR 0 2
37688: PUSH
37689: LD_VAR 0 2
37693: PPUSH
37694: LD_VAR 0 2
37698: PUSH
37699: LD_INT 1
37701: PLUS
37702: PPUSH
37703: LD_VAR 0 7
37707: PPUSH
37708: CALL_OW 1
37712: ST_TO_ADDR
37713: GO 37681
37715: POP
37716: POP
// end ;
37717: GO 37647
37719: POP
37720: POP
// if not result then
37721: LD_VAR 0 2
37725: NOT
37726: IFFALSE 37730
// exit ;
37728: GO 37878
// mech := result [ 1 ] ;
37730: LD_ADDR_VAR 0 5
37734: PUSH
37735: LD_VAR 0 2
37739: PUSH
37740: LD_INT 1
37742: ARRAY
37743: ST_TO_ADDR
// if result > 1 then
37744: LD_VAR 0 2
37748: PUSH
37749: LD_INT 1
37751: GREATER
37752: IFFALSE 37864
// begin for i = 2 to result do
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: DOUBLE
37760: LD_INT 2
37762: DEC
37763: ST_TO_ADDR
37764: LD_VAR 0 2
37768: PUSH
37769: FOR_TO
37770: IFFALSE 37862
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37772: LD_ADDR_VAR 0 4
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_VAR 0 3
37786: ARRAY
37787: PPUSH
37788: LD_INT 3
37790: PPUSH
37791: CALL_OW 259
37795: PUSH
37796: LD_VAR 0 2
37800: PUSH
37801: LD_VAR 0 3
37805: ARRAY
37806: PPUSH
37807: CALL_OW 432
37811: MINUS
37812: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37813: LD_VAR 0 4
37817: PUSH
37818: LD_VAR 0 5
37822: PPUSH
37823: LD_INT 3
37825: PPUSH
37826: CALL_OW 259
37830: PUSH
37831: LD_VAR 0 5
37835: PPUSH
37836: CALL_OW 432
37840: MINUS
37841: GREATEREQUAL
37842: IFFALSE 37860
// mech := result [ i ] ;
37844: LD_ADDR_VAR 0 5
37848: PUSH
37849: LD_VAR 0 2
37853: PUSH
37854: LD_VAR 0 3
37858: ARRAY
37859: ST_TO_ADDR
// end ;
37860: GO 37769
37862: POP
37863: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37864: LD_VAR 0 1
37868: PPUSH
37869: LD_VAR 0 5
37873: PPUSH
37874: CALL_OW 135
// end ;
37878: LD_VAR 0 2
37882: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37883: LD_INT 0
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
// result := [ ] ;
37898: LD_ADDR_VAR 0 7
37902: PUSH
37903: EMPTY
37904: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37905: LD_VAR 0 1
37909: PPUSH
37910: CALL_OW 266
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: IN
37925: NOT
37926: IFFALSE 37930
// exit ;
37928: GO 39564
// if name then
37930: LD_VAR 0 3
37934: IFFALSE 37950
// SetBName ( base_dep , name ) ;
37936: LD_VAR 0 1
37940: PPUSH
37941: LD_VAR 0 3
37945: PPUSH
37946: CALL_OW 500
// base := GetBase ( base_dep ) ;
37950: LD_ADDR_VAR 0 15
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 274
37964: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37965: LD_ADDR_VAR 0 16
37969: PUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 255
37979: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37980: LD_ADDR_VAR 0 17
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 248
37994: ST_TO_ADDR
// if sources then
37995: LD_VAR 0 5
37999: IFFALSE 38046
// for i = 1 to 3 do
38001: LD_ADDR_VAR 0 8
38005: PUSH
38006: DOUBLE
38007: LD_INT 1
38009: DEC
38010: ST_TO_ADDR
38011: LD_INT 3
38013: PUSH
38014: FOR_TO
38015: IFFALSE 38044
// AddResourceType ( base , i , sources [ i ] ) ;
38017: LD_VAR 0 15
38021: PPUSH
38022: LD_VAR 0 8
38026: PPUSH
38027: LD_VAR 0 5
38031: PUSH
38032: LD_VAR 0 8
38036: ARRAY
38037: PPUSH
38038: CALL_OW 276
38042: GO 38014
38044: POP
38045: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38046: LD_ADDR_VAR 0 18
38050: PUSH
38051: LD_VAR 0 15
38055: PPUSH
38056: LD_VAR 0 2
38060: PPUSH
38061: LD_INT 1
38063: PPUSH
38064: CALL 37307 0 3
38068: ST_TO_ADDR
// InitHc ;
38069: CALL_OW 19
// InitUc ;
38073: CALL_OW 18
// uc_side := side ;
38077: LD_ADDR_OWVAR 20
38081: PUSH
38082: LD_VAR 0 16
38086: ST_TO_ADDR
// uc_nation := nation ;
38087: LD_ADDR_OWVAR 21
38091: PUSH
38092: LD_VAR 0 17
38096: ST_TO_ADDR
// if buildings then
38097: LD_VAR 0 18
38101: IFFALSE 39423
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38103: LD_ADDR_VAR 0 19
38107: PUSH
38108: LD_VAR 0 18
38112: PPUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 30
38118: PUSH
38119: LD_INT 29
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 30
38128: PUSH
38129: LD_INT 30
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PPUSH
38141: CALL_OW 72
38145: ST_TO_ADDR
// if tmp then
38146: LD_VAR 0 19
38150: IFFALSE 38198
// for i in tmp do
38152: LD_ADDR_VAR 0 8
38156: PUSH
38157: LD_VAR 0 19
38161: PUSH
38162: FOR_IN
38163: IFFALSE 38196
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38165: LD_VAR 0 8
38169: PPUSH
38170: CALL_OW 250
38174: PPUSH
38175: LD_VAR 0 8
38179: PPUSH
38180: CALL_OW 251
38184: PPUSH
38185: LD_VAR 0 16
38189: PPUSH
38190: CALL_OW 441
38194: GO 38162
38196: POP
38197: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38198: LD_VAR 0 18
38202: PPUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 30
38208: PUSH
38209: LD_INT 32
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 30
38218: PUSH
38219: LD_INT 33
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: PPUSH
38231: CALL_OW 72
38235: IFFALSE 38323
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38237: LD_ADDR_VAR 0 8
38241: PUSH
38242: LD_VAR 0 18
38246: PPUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 30
38252: PUSH
38253: LD_INT 32
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 30
38262: PUSH
38263: LD_INT 33
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: PPUSH
38275: CALL_OW 72
38279: PUSH
38280: FOR_IN
38281: IFFALSE 38321
// begin if not GetBWeapon ( i ) then
38283: LD_VAR 0 8
38287: PPUSH
38288: CALL_OW 269
38292: NOT
38293: IFFALSE 38319
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38295: LD_VAR 0 8
38299: PPUSH
38300: LD_VAR 0 8
38304: PPUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: CALL 39569 0 2
38314: PPUSH
38315: CALL_OW 431
// end ;
38319: GO 38280
38321: POP
38322: POP
// end ; for i = 1 to personel do
38323: LD_ADDR_VAR 0 8
38327: PUSH
38328: DOUBLE
38329: LD_INT 1
38331: DEC
38332: ST_TO_ADDR
38333: LD_VAR 0 6
38337: PUSH
38338: FOR_TO
38339: IFFALSE 39403
// begin if i > 4 then
38341: LD_VAR 0 8
38345: PUSH
38346: LD_INT 4
38348: GREATER
38349: IFFALSE 38353
// break ;
38351: GO 39403
// case i of 1 :
38353: LD_VAR 0 8
38357: PUSH
38358: LD_INT 1
38360: DOUBLE
38361: EQUAL
38362: IFTRUE 38366
38364: GO 38446
38366: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38367: LD_ADDR_VAR 0 12
38371: PUSH
38372: LD_VAR 0 18
38376: PPUSH
38377: LD_INT 22
38379: PUSH
38380: LD_VAR 0 16
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 58
38391: PUSH
38392: EMPTY
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 30
38400: PUSH
38401: LD_INT 32
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 30
38410: PUSH
38411: LD_INT 4
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 30
38420: PUSH
38421: LD_INT 5
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: PPUSH
38439: CALL_OW 72
38443: ST_TO_ADDR
38444: GO 38668
38446: LD_INT 2
38448: DOUBLE
38449: EQUAL
38450: IFTRUE 38454
38452: GO 38516
38454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: LD_VAR 0 18
38464: PPUSH
38465: LD_INT 22
38467: PUSH
38468: LD_VAR 0 16
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 30
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 30
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PPUSH
38509: CALL_OW 72
38513: ST_TO_ADDR
38514: GO 38668
38516: LD_INT 3
38518: DOUBLE
38519: EQUAL
38520: IFTRUE 38524
38522: GO 38586
38524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38525: LD_ADDR_VAR 0 12
38529: PUSH
38530: LD_VAR 0 18
38534: PPUSH
38535: LD_INT 22
38537: PUSH
38538: LD_VAR 0 16
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 30
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PPUSH
38579: CALL_OW 72
38583: ST_TO_ADDR
38584: GO 38668
38586: LD_INT 4
38588: DOUBLE
38589: EQUAL
38590: IFTRUE 38594
38592: GO 38667
38594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38595: LD_ADDR_VAR 0 12
38599: PUSH
38600: LD_VAR 0 18
38604: PPUSH
38605: LD_INT 22
38607: PUSH
38608: LD_VAR 0 16
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 30
38622: PUSH
38623: LD_INT 6
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 30
38632: PUSH
38633: LD_INT 7
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 30
38642: PUSH
38643: LD_INT 8
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 72
38664: ST_TO_ADDR
38665: GO 38668
38667: POP
// if i = 1 then
38668: LD_VAR 0 8
38672: PUSH
38673: LD_INT 1
38675: EQUAL
38676: IFFALSE 38787
// begin tmp := [ ] ;
38678: LD_ADDR_VAR 0 19
38682: PUSH
38683: EMPTY
38684: ST_TO_ADDR
// for j in f do
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_VAR 0 12
38694: PUSH
38695: FOR_IN
38696: IFFALSE 38769
// if GetBType ( j ) = b_bunker then
38698: LD_VAR 0 9
38702: PPUSH
38703: CALL_OW 266
38707: PUSH
38708: LD_INT 32
38710: EQUAL
38711: IFFALSE 38738
// tmp := Insert ( tmp , 1 , j ) else
38713: LD_ADDR_VAR 0 19
38717: PUSH
38718: LD_VAR 0 19
38722: PPUSH
38723: LD_INT 1
38725: PPUSH
38726: LD_VAR 0 9
38730: PPUSH
38731: CALL_OW 2
38735: ST_TO_ADDR
38736: GO 38767
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38738: LD_ADDR_VAR 0 19
38742: PUSH
38743: LD_VAR 0 19
38747: PPUSH
38748: LD_VAR 0 19
38752: PUSH
38753: LD_INT 1
38755: PLUS
38756: PPUSH
38757: LD_VAR 0 9
38761: PPUSH
38762: CALL_OW 2
38766: ST_TO_ADDR
38767: GO 38695
38769: POP
38770: POP
// if tmp then
38771: LD_VAR 0 19
38775: IFFALSE 38787
// f := tmp ;
38777: LD_ADDR_VAR 0 12
38781: PUSH
38782: LD_VAR 0 19
38786: ST_TO_ADDR
// end ; x := personel [ i ] ;
38787: LD_ADDR_VAR 0 13
38791: PUSH
38792: LD_VAR 0 6
38796: PUSH
38797: LD_VAR 0 8
38801: ARRAY
38802: ST_TO_ADDR
// if x = - 1 then
38803: LD_VAR 0 13
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: EQUAL
38812: IFFALSE 39021
// begin for j in f do
38814: LD_ADDR_VAR 0 9
38818: PUSH
38819: LD_VAR 0 12
38823: PUSH
38824: FOR_IN
38825: IFFALSE 39017
// repeat InitHc ;
38827: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38831: LD_VAR 0 9
38835: PPUSH
38836: CALL_OW 266
38840: PUSH
38841: LD_INT 5
38843: EQUAL
38844: IFFALSE 38914
// begin if UnitsInside ( j ) < 3 then
38846: LD_VAR 0 9
38850: PPUSH
38851: CALL_OW 313
38855: PUSH
38856: LD_INT 3
38858: LESS
38859: IFFALSE 38895
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38861: LD_INT 0
38863: PPUSH
38864: LD_INT 5
38866: PUSH
38867: LD_INT 8
38869: PUSH
38870: LD_INT 9
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: PUSH
38878: LD_VAR 0 17
38882: ARRAY
38883: PPUSH
38884: LD_VAR 0 4
38888: PPUSH
38889: CALL_OW 380
38893: GO 38912
// PrepareHuman ( false , i , skill ) ;
38895: LD_INT 0
38897: PPUSH
38898: LD_VAR 0 8
38902: PPUSH
38903: LD_VAR 0 4
38907: PPUSH
38908: CALL_OW 380
// end else
38912: GO 38931
// PrepareHuman ( false , i , skill ) ;
38914: LD_INT 0
38916: PPUSH
38917: LD_VAR 0 8
38921: PPUSH
38922: LD_VAR 0 4
38926: PPUSH
38927: CALL_OW 380
// un := CreateHuman ;
38931: LD_ADDR_VAR 0 14
38935: PUSH
38936: CALL_OW 44
38940: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38941: LD_ADDR_VAR 0 7
38945: PUSH
38946: LD_VAR 0 7
38950: PPUSH
38951: LD_INT 1
38953: PPUSH
38954: LD_VAR 0 14
38958: PPUSH
38959: CALL_OW 2
38963: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38964: LD_VAR 0 14
38968: PPUSH
38969: LD_VAR 0 9
38973: PPUSH
38974: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38978: LD_VAR 0 9
38982: PPUSH
38983: CALL_OW 313
38987: PUSH
38988: LD_INT 6
38990: EQUAL
38991: PUSH
38992: LD_VAR 0 9
38996: PPUSH
38997: CALL_OW 266
39001: PUSH
39002: LD_INT 32
39004: PUSH
39005: LD_INT 31
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: IN
39012: OR
39013: IFFALSE 38827
39015: GO 38824
39017: POP
39018: POP
// end else
39019: GO 39401
// for j = 1 to x do
39021: LD_ADDR_VAR 0 9
39025: PUSH
39026: DOUBLE
39027: LD_INT 1
39029: DEC
39030: ST_TO_ADDR
39031: LD_VAR 0 13
39035: PUSH
39036: FOR_TO
39037: IFFALSE 39399
// begin InitHc ;
39039: CALL_OW 19
// if not f then
39043: LD_VAR 0 12
39047: NOT
39048: IFFALSE 39137
// begin PrepareHuman ( false , i , skill ) ;
39050: LD_INT 0
39052: PPUSH
39053: LD_VAR 0 8
39057: PPUSH
39058: LD_VAR 0 4
39062: PPUSH
39063: CALL_OW 380
// un := CreateHuman ;
39067: LD_ADDR_VAR 0 14
39071: PUSH
39072: CALL_OW 44
39076: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39077: LD_ADDR_VAR 0 7
39081: PUSH
39082: LD_VAR 0 7
39086: PPUSH
39087: LD_INT 1
39089: PPUSH
39090: LD_VAR 0 14
39094: PPUSH
39095: CALL_OW 2
39099: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39100: LD_VAR 0 14
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 250
39114: PPUSH
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL_OW 251
39124: PPUSH
39125: LD_INT 10
39127: PPUSH
39128: LD_INT 0
39130: PPUSH
39131: CALL_OW 50
// continue ;
39135: GO 39036
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39137: LD_VAR 0 12
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: PPUSH
39146: CALL_OW 313
39150: PUSH
39151: LD_VAR 0 12
39155: PUSH
39156: LD_INT 1
39158: ARRAY
39159: PPUSH
39160: CALL_OW 266
39164: PUSH
39165: LD_INT 32
39167: PUSH
39168: LD_INT 31
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: IN
39175: AND
39176: PUSH
39177: LD_VAR 0 12
39181: PUSH
39182: LD_INT 1
39184: ARRAY
39185: PPUSH
39186: CALL_OW 313
39190: PUSH
39191: LD_INT 6
39193: EQUAL
39194: OR
39195: IFFALSE 39215
// f := Delete ( f , 1 ) ;
39197: LD_ADDR_VAR 0 12
39201: PUSH
39202: LD_VAR 0 12
39206: PPUSH
39207: LD_INT 1
39209: PPUSH
39210: CALL_OW 3
39214: ST_TO_ADDR
// if not f then
39215: LD_VAR 0 12
39219: NOT
39220: IFFALSE 39238
// begin x := x + 2 ;
39222: LD_ADDR_VAR 0 13
39226: PUSH
39227: LD_VAR 0 13
39231: PUSH
39232: LD_INT 2
39234: PLUS
39235: ST_TO_ADDR
// continue ;
39236: GO 39036
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39238: LD_VAR 0 12
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PPUSH
39247: CALL_OW 266
39251: PUSH
39252: LD_INT 5
39254: EQUAL
39255: IFFALSE 39329
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39257: LD_VAR 0 12
39261: PUSH
39262: LD_INT 1
39264: ARRAY
39265: PPUSH
39266: CALL_OW 313
39270: PUSH
39271: LD_INT 3
39273: LESS
39274: IFFALSE 39310
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39276: LD_INT 0
39278: PPUSH
39279: LD_INT 5
39281: PUSH
39282: LD_INT 8
39284: PUSH
39285: LD_INT 9
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: LD_VAR 0 17
39297: ARRAY
39298: PPUSH
39299: LD_VAR 0 4
39303: PPUSH
39304: CALL_OW 380
39308: GO 39327
// PrepareHuman ( false , i , skill ) ;
39310: LD_INT 0
39312: PPUSH
39313: LD_VAR 0 8
39317: PPUSH
39318: LD_VAR 0 4
39322: PPUSH
39323: CALL_OW 380
// end else
39327: GO 39346
// PrepareHuman ( false , i , skill ) ;
39329: LD_INT 0
39331: PPUSH
39332: LD_VAR 0 8
39336: PPUSH
39337: LD_VAR 0 4
39341: PPUSH
39342: CALL_OW 380
// un := CreateHuman ;
39346: LD_ADDR_VAR 0 14
39350: PUSH
39351: CALL_OW 44
39355: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39356: LD_ADDR_VAR 0 7
39360: PUSH
39361: LD_VAR 0 7
39365: PPUSH
39366: LD_INT 1
39368: PPUSH
39369: LD_VAR 0 14
39373: PPUSH
39374: CALL_OW 2
39378: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39379: LD_VAR 0 14
39383: PPUSH
39384: LD_VAR 0 12
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: CALL_OW 52
// end ;
39397: GO 39036
39399: POP
39400: POP
// end ;
39401: GO 38338
39403: POP
39404: POP
// result := result ^ buildings ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 7
39414: PUSH
39415: LD_VAR 0 18
39419: ADD
39420: ST_TO_ADDR
// end else
39421: GO 39564
// begin for i = 1 to personel do
39423: LD_ADDR_VAR 0 8
39427: PUSH
39428: DOUBLE
39429: LD_INT 1
39431: DEC
39432: ST_TO_ADDR
39433: LD_VAR 0 6
39437: PUSH
39438: FOR_TO
39439: IFFALSE 39562
// begin if i > 4 then
39441: LD_VAR 0 8
39445: PUSH
39446: LD_INT 4
39448: GREATER
39449: IFFALSE 39453
// break ;
39451: GO 39562
// x := personel [ i ] ;
39453: LD_ADDR_VAR 0 13
39457: PUSH
39458: LD_VAR 0 6
39462: PUSH
39463: LD_VAR 0 8
39467: ARRAY
39468: ST_TO_ADDR
// if x = - 1 then
39469: LD_VAR 0 13
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: EQUAL
39478: IFFALSE 39482
// continue ;
39480: GO 39438
// PrepareHuman ( false , i , skill ) ;
39482: LD_INT 0
39484: PPUSH
39485: LD_VAR 0 8
39489: PPUSH
39490: LD_VAR 0 4
39494: PPUSH
39495: CALL_OW 380
// un := CreateHuman ;
39499: LD_ADDR_VAR 0 14
39503: PUSH
39504: CALL_OW 44
39508: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39509: LD_VAR 0 14
39513: PPUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 250
39523: PPUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 251
39533: PPUSH
39534: LD_INT 10
39536: PPUSH
39537: LD_INT 0
39539: PPUSH
39540: CALL_OW 50
// result := result ^ un ;
39544: LD_ADDR_VAR 0 7
39548: PUSH
39549: LD_VAR 0 7
39553: PUSH
39554: LD_VAR 0 14
39558: ADD
39559: ST_TO_ADDR
// end ;
39560: GO 39438
39562: POP
39563: POP
// end ; end ;
39564: LD_VAR 0 7
39568: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39569: LD_INT 0
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
// result := false ;
39587: LD_ADDR_VAR 0 3
39591: PUSH
39592: LD_INT 0
39594: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39595: LD_VAR 0 1
39599: NOT
39600: PUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: CALL_OW 266
39610: PUSH
39611: LD_INT 32
39613: PUSH
39614: LD_INT 33
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: IN
39621: NOT
39622: OR
39623: IFFALSE 39627
// exit ;
39625: GO 40736
// nat := GetNation ( tower ) ;
39627: LD_ADDR_VAR 0 12
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: CALL_OW 248
39641: ST_TO_ADDR
// side := GetSide ( tower ) ;
39642: LD_ADDR_VAR 0 16
39646: PUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 255
39656: ST_TO_ADDR
// x := GetX ( tower ) ;
39657: LD_ADDR_VAR 0 10
39661: PUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 250
39671: ST_TO_ADDR
// y := GetY ( tower ) ;
39672: LD_ADDR_VAR 0 11
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 251
39686: ST_TO_ADDR
// if not x or not y then
39687: LD_VAR 0 10
39691: NOT
39692: PUSH
39693: LD_VAR 0 11
39697: NOT
39698: OR
39699: IFFALSE 39703
// exit ;
39701: GO 40736
// weapon := 0 ;
39703: LD_ADDR_VAR 0 18
39707: PUSH
39708: LD_INT 0
39710: ST_TO_ADDR
// fac_list := [ ] ;
39711: LD_ADDR_VAR 0 17
39715: PUSH
39716: EMPTY
39717: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39718: LD_ADDR_VAR 0 6
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 274
39732: PPUSH
39733: LD_VAR 0 2
39737: PPUSH
39738: LD_INT 0
39740: PPUSH
39741: CALL 37307 0 3
39745: PPUSH
39746: LD_INT 30
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PPUSH
39756: CALL_OW 72
39760: ST_TO_ADDR
// if not factories then
39761: LD_VAR 0 6
39765: NOT
39766: IFFALSE 39770
// exit ;
39768: GO 40736
// for i in factories do
39770: LD_ADDR_VAR 0 8
39774: PUSH
39775: LD_VAR 0 6
39779: PUSH
39780: FOR_IN
39781: IFFALSE 39806
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39783: LD_ADDR_VAR 0 17
39787: PUSH
39788: LD_VAR 0 17
39792: PUSH
39793: LD_VAR 0 8
39797: PPUSH
39798: CALL_OW 478
39802: UNION
39803: ST_TO_ADDR
39804: GO 39780
39806: POP
39807: POP
// if not fac_list then
39808: LD_VAR 0 17
39812: NOT
39813: IFFALSE 39817
// exit ;
39815: GO 40736
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39817: LD_ADDR_VAR 0 5
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: LD_INT 5
39827: PUSH
39828: LD_INT 9
39830: PUSH
39831: LD_INT 10
39833: PUSH
39834: LD_INT 6
39836: PUSH
39837: LD_INT 7
39839: PUSH
39840: LD_INT 11
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 27
39854: PUSH
39855: LD_INT 28
39857: PUSH
39858: LD_INT 26
39860: PUSH
39861: LD_INT 30
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 43
39872: PUSH
39873: LD_INT 44
39875: PUSH
39876: LD_INT 46
39878: PUSH
39879: LD_INT 45
39881: PUSH
39882: LD_INT 47
39884: PUSH
39885: LD_INT 49
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: PUSH
39901: LD_VAR 0 12
39905: ARRAY
39906: ST_TO_ADDR
// list := list isect fac_list ;
39907: LD_ADDR_VAR 0 5
39911: PUSH
39912: LD_VAR 0 5
39916: PUSH
39917: LD_VAR 0 17
39921: ISECT
39922: ST_TO_ADDR
// if not list then
39923: LD_VAR 0 5
39927: NOT
39928: IFFALSE 39932
// exit ;
39930: GO 40736
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39932: LD_VAR 0 12
39936: PUSH
39937: LD_INT 3
39939: EQUAL
39940: PUSH
39941: LD_INT 49
39943: PUSH
39944: LD_VAR 0 5
39948: IN
39949: AND
39950: PUSH
39951: LD_INT 31
39953: PPUSH
39954: LD_VAR 0 16
39958: PPUSH
39959: CALL_OW 321
39963: PUSH
39964: LD_INT 2
39966: EQUAL
39967: AND
39968: IFFALSE 40028
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39970: LD_INT 22
39972: PUSH
39973: LD_VAR 0 16
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 35
39984: PUSH
39985: LD_INT 49
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 91
39994: PUSH
39995: LD_VAR 0 1
39999: PUSH
40000: LD_INT 10
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: PPUSH
40013: CALL_OW 69
40017: NOT
40018: IFFALSE 40028
// weapon := ru_time_lapser ;
40020: LD_ADDR_VAR 0 18
40024: PUSH
40025: LD_INT 49
40027: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40028: LD_VAR 0 12
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: IN
40043: PUSH
40044: LD_INT 11
40046: PUSH
40047: LD_VAR 0 5
40051: IN
40052: PUSH
40053: LD_INT 30
40055: PUSH
40056: LD_VAR 0 5
40060: IN
40061: OR
40062: AND
40063: PUSH
40064: LD_INT 6
40066: PPUSH
40067: LD_VAR 0 16
40071: PPUSH
40072: CALL_OW 321
40076: PUSH
40077: LD_INT 2
40079: EQUAL
40080: AND
40081: IFFALSE 40246
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40083: LD_INT 22
40085: PUSH
40086: LD_VAR 0 16
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 35
40100: PUSH
40101: LD_INT 11
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 35
40110: PUSH
40111: LD_INT 30
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 91
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: LD_INT 18
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: PPUSH
40144: CALL_OW 69
40148: NOT
40149: PUSH
40150: LD_INT 22
40152: PUSH
40153: LD_VAR 0 16
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 30
40167: PUSH
40168: LD_INT 32
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 30
40177: PUSH
40178: LD_INT 33
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 91
40192: PUSH
40193: LD_VAR 0 1
40197: PUSH
40198: LD_INT 12
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: PPUSH
40214: CALL_OW 69
40218: PUSH
40219: LD_INT 2
40221: GREATER
40222: AND
40223: IFFALSE 40246
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40225: LD_ADDR_VAR 0 18
40229: PUSH
40230: LD_INT 11
40232: PUSH
40233: LD_INT 30
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_VAR 0 12
40244: ARRAY
40245: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40246: LD_VAR 0 18
40250: NOT
40251: PUSH
40252: LD_INT 40
40254: PPUSH
40255: LD_VAR 0 16
40259: PPUSH
40260: CALL_OW 321
40264: PUSH
40265: LD_INT 2
40267: EQUAL
40268: AND
40269: PUSH
40270: LD_INT 7
40272: PUSH
40273: LD_VAR 0 5
40277: IN
40278: PUSH
40279: LD_INT 28
40281: PUSH
40282: LD_VAR 0 5
40286: IN
40287: OR
40288: PUSH
40289: LD_INT 45
40291: PUSH
40292: LD_VAR 0 5
40296: IN
40297: OR
40298: AND
40299: IFFALSE 40553
// begin hex := GetHexInfo ( x , y ) ;
40301: LD_ADDR_VAR 0 4
40305: PUSH
40306: LD_VAR 0 10
40310: PPUSH
40311: LD_VAR 0 11
40315: PPUSH
40316: CALL_OW 546
40320: ST_TO_ADDR
// if hex [ 1 ] then
40321: LD_VAR 0 4
40325: PUSH
40326: LD_INT 1
40328: ARRAY
40329: IFFALSE 40333
// exit ;
40331: GO 40736
// height := hex [ 2 ] ;
40333: LD_ADDR_VAR 0 15
40337: PUSH
40338: LD_VAR 0 4
40342: PUSH
40343: LD_INT 2
40345: ARRAY
40346: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40347: LD_ADDR_VAR 0 14
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: LD_INT 5
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: ST_TO_ADDR
// for i in tmp do
40370: LD_ADDR_VAR 0 8
40374: PUSH
40375: LD_VAR 0 14
40379: PUSH
40380: FOR_IN
40381: IFFALSE 40551
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40383: LD_ADDR_VAR 0 9
40387: PUSH
40388: LD_VAR 0 10
40392: PPUSH
40393: LD_VAR 0 8
40397: PPUSH
40398: LD_INT 5
40400: PPUSH
40401: CALL_OW 272
40405: PUSH
40406: LD_VAR 0 11
40410: PPUSH
40411: LD_VAR 0 8
40415: PPUSH
40416: LD_INT 5
40418: PPUSH
40419: CALL_OW 273
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40428: LD_VAR 0 9
40432: PUSH
40433: LD_INT 1
40435: ARRAY
40436: PPUSH
40437: LD_VAR 0 9
40441: PUSH
40442: LD_INT 2
40444: ARRAY
40445: PPUSH
40446: CALL_OW 488
40450: IFFALSE 40549
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40452: LD_ADDR_VAR 0 4
40456: PUSH
40457: LD_VAR 0 9
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: LD_VAR 0 9
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: PPUSH
40475: CALL_OW 546
40479: ST_TO_ADDR
// if hex [ 1 ] then
40480: LD_VAR 0 4
40484: PUSH
40485: LD_INT 1
40487: ARRAY
40488: IFFALSE 40492
// continue ;
40490: GO 40380
// h := hex [ 2 ] ;
40492: LD_ADDR_VAR 0 13
40496: PUSH
40497: LD_VAR 0 4
40501: PUSH
40502: LD_INT 2
40504: ARRAY
40505: ST_TO_ADDR
// if h + 7 < height then
40506: LD_VAR 0 13
40510: PUSH
40511: LD_INT 7
40513: PLUS
40514: PUSH
40515: LD_VAR 0 15
40519: LESS
40520: IFFALSE 40549
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40522: LD_ADDR_VAR 0 18
40526: PUSH
40527: LD_INT 7
40529: PUSH
40530: LD_INT 28
40532: PUSH
40533: LD_INT 45
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: PUSH
40541: LD_VAR 0 12
40545: ARRAY
40546: ST_TO_ADDR
// break ;
40547: GO 40551
// end ; end ; end ;
40549: GO 40380
40551: POP
40552: POP
// end ; if not weapon then
40553: LD_VAR 0 18
40557: NOT
40558: IFFALSE 40618
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40560: LD_ADDR_VAR 0 5
40564: PUSH
40565: LD_VAR 0 5
40569: PUSH
40570: LD_INT 11
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: LD_INT 49
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: DIFF
40584: ST_TO_ADDR
// if not list then
40585: LD_VAR 0 5
40589: NOT
40590: IFFALSE 40594
// exit ;
40592: GO 40736
// weapon := list [ rand ( 1 , list ) ] ;
40594: LD_ADDR_VAR 0 18
40598: PUSH
40599: LD_VAR 0 5
40603: PUSH
40604: LD_INT 1
40606: PPUSH
40607: LD_VAR 0 5
40611: PPUSH
40612: CALL_OW 12
40616: ARRAY
40617: ST_TO_ADDR
// end ; if weapon then
40618: LD_VAR 0 18
40622: IFFALSE 40736
// begin tmp := CostOfWeapon ( weapon ) ;
40624: LD_ADDR_VAR 0 14
40628: PUSH
40629: LD_VAR 0 18
40633: PPUSH
40634: CALL_OW 451
40638: ST_TO_ADDR
// j := GetBase ( tower ) ;
40639: LD_ADDR_VAR 0 9
40643: PUSH
40644: LD_VAR 0 1
40648: PPUSH
40649: CALL_OW 274
40653: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40654: LD_VAR 0 9
40658: PPUSH
40659: LD_INT 1
40661: PPUSH
40662: CALL_OW 275
40666: PUSH
40667: LD_VAR 0 14
40671: PUSH
40672: LD_INT 1
40674: ARRAY
40675: GREATEREQUAL
40676: PUSH
40677: LD_VAR 0 9
40681: PPUSH
40682: LD_INT 2
40684: PPUSH
40685: CALL_OW 275
40689: PUSH
40690: LD_VAR 0 14
40694: PUSH
40695: LD_INT 2
40697: ARRAY
40698: GREATEREQUAL
40699: AND
40700: PUSH
40701: LD_VAR 0 9
40705: PPUSH
40706: LD_INT 3
40708: PPUSH
40709: CALL_OW 275
40713: PUSH
40714: LD_VAR 0 14
40718: PUSH
40719: LD_INT 3
40721: ARRAY
40722: GREATEREQUAL
40723: AND
40724: IFFALSE 40736
// result := weapon ;
40726: LD_ADDR_VAR 0 3
40730: PUSH
40731: LD_VAR 0 18
40735: ST_TO_ADDR
// end ; end ;
40736: LD_VAR 0 3
40740: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
// result := true ;
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 1
40752: ST_TO_ADDR
// if array1 = array2 then
40753: LD_VAR 0 1
40757: PUSH
40758: LD_VAR 0 2
40762: EQUAL
40763: IFFALSE 40823
// begin for i = 1 to array1 do
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: DOUBLE
40771: LD_INT 1
40773: DEC
40774: ST_TO_ADDR
40775: LD_VAR 0 1
40779: PUSH
40780: FOR_TO
40781: IFFALSE 40819
// if array1 [ i ] <> array2 [ i ] then
40783: LD_VAR 0 1
40787: PUSH
40788: LD_VAR 0 4
40792: ARRAY
40793: PUSH
40794: LD_VAR 0 2
40798: PUSH
40799: LD_VAR 0 4
40803: ARRAY
40804: NONEQUAL
40805: IFFALSE 40817
// begin result := false ;
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_INT 0
40814: ST_TO_ADDR
// break ;
40815: GO 40819
// end ;
40817: GO 40780
40819: POP
40820: POP
// end else
40821: GO 40831
// result := false ;
40823: LD_ADDR_VAR 0 3
40827: PUSH
40828: LD_INT 0
40830: ST_TO_ADDR
// end ;
40831: LD_VAR 0 3
40835: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40836: LD_INT 0
40838: PPUSH
40839: PPUSH
// if not array1 or not array2 then
40840: LD_VAR 0 1
40844: NOT
40845: PUSH
40846: LD_VAR 0 2
40850: NOT
40851: OR
40852: IFFALSE 40856
// exit ;
40854: GO 40920
// result := true ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 1
40863: ST_TO_ADDR
// for i = 1 to array1 do
40864: LD_ADDR_VAR 0 4
40868: PUSH
40869: DOUBLE
40870: LD_INT 1
40872: DEC
40873: ST_TO_ADDR
40874: LD_VAR 0 1
40878: PUSH
40879: FOR_TO
40880: IFFALSE 40918
// if array1 [ i ] <> array2 [ i ] then
40882: LD_VAR 0 1
40886: PUSH
40887: LD_VAR 0 4
40891: ARRAY
40892: PUSH
40893: LD_VAR 0 2
40897: PUSH
40898: LD_VAR 0 4
40902: ARRAY
40903: NONEQUAL
40904: IFFALSE 40916
// begin result := false ;
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_INT 0
40913: ST_TO_ADDR
// break ;
40914: GO 40918
// end ;
40916: GO 40879
40918: POP
40919: POP
// end ;
40920: LD_VAR 0 3
40924: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40925: LD_INT 0
40927: PPUSH
40928: PPUSH
40929: PPUSH
// pom := GetBase ( fac ) ;
40930: LD_ADDR_VAR 0 5
40934: PUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 274
40944: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40945: LD_ADDR_VAR 0 4
40949: PUSH
40950: LD_VAR 0 2
40954: PUSH
40955: LD_INT 1
40957: ARRAY
40958: PPUSH
40959: LD_VAR 0 2
40963: PUSH
40964: LD_INT 2
40966: ARRAY
40967: PPUSH
40968: LD_VAR 0 2
40972: PUSH
40973: LD_INT 3
40975: ARRAY
40976: PPUSH
40977: LD_VAR 0 2
40981: PUSH
40982: LD_INT 4
40984: ARRAY
40985: PPUSH
40986: CALL_OW 449
40990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40991: LD_ADDR_VAR 0 3
40995: PUSH
40996: LD_VAR 0 5
41000: PPUSH
41001: LD_INT 1
41003: PPUSH
41004: CALL_OW 275
41008: PUSH
41009: LD_VAR 0 4
41013: PUSH
41014: LD_INT 1
41016: ARRAY
41017: GREATEREQUAL
41018: PUSH
41019: LD_VAR 0 5
41023: PPUSH
41024: LD_INT 2
41026: PPUSH
41027: CALL_OW 275
41031: PUSH
41032: LD_VAR 0 4
41036: PUSH
41037: LD_INT 2
41039: ARRAY
41040: GREATEREQUAL
41041: AND
41042: PUSH
41043: LD_VAR 0 5
41047: PPUSH
41048: LD_INT 3
41050: PPUSH
41051: CALL_OW 275
41055: PUSH
41056: LD_VAR 0 4
41060: PUSH
41061: LD_INT 3
41063: ARRAY
41064: GREATEREQUAL
41065: AND
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 3
41071: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
// pom := GetBase ( building ) ;
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 274
41092: ST_TO_ADDR
// if not pom then
41093: LD_VAR 0 3
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41272
// btype := GetBType ( building ) ;
41102: LD_ADDR_VAR 0 5
41106: PUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 266
41116: ST_TO_ADDR
// if btype = b_armoury then
41117: LD_VAR 0 5
41121: PUSH
41122: LD_INT 4
41124: EQUAL
41125: IFFALSE 41135
// btype := b_barracks ;
41127: LD_ADDR_VAR 0 5
41131: PUSH
41132: LD_INT 5
41134: ST_TO_ADDR
// if btype = b_depot then
41135: LD_VAR 0 5
41139: PUSH
41140: LD_INT 0
41142: EQUAL
41143: IFFALSE 41153
// btype := b_warehouse ;
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: LD_INT 1
41152: ST_TO_ADDR
// if btype = b_workshop then
41153: LD_VAR 0 5
41157: PUSH
41158: LD_INT 2
41160: EQUAL
41161: IFFALSE 41171
// btype := b_factory ;
41163: LD_ADDR_VAR 0 5
41167: PUSH
41168: LD_INT 3
41170: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41171: LD_ADDR_VAR 0 4
41175: PUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 248
41190: PPUSH
41191: CALL_OW 450
41195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41196: LD_ADDR_VAR 0 2
41200: PUSH
41201: LD_VAR 0 3
41205: PPUSH
41206: LD_INT 1
41208: PPUSH
41209: CALL_OW 275
41213: PUSH
41214: LD_VAR 0 4
41218: PUSH
41219: LD_INT 1
41221: ARRAY
41222: GREATEREQUAL
41223: PUSH
41224: LD_VAR 0 3
41228: PPUSH
41229: LD_INT 2
41231: PPUSH
41232: CALL_OW 275
41236: PUSH
41237: LD_VAR 0 4
41241: PUSH
41242: LD_INT 2
41244: ARRAY
41245: GREATEREQUAL
41246: AND
41247: PUSH
41248: LD_VAR 0 3
41252: PPUSH
41253: LD_INT 3
41255: PPUSH
41256: CALL_OW 275
41260: PUSH
41261: LD_VAR 0 4
41265: PUSH
41266: LD_INT 3
41268: ARRAY
41269: GREATEREQUAL
41270: AND
41271: ST_TO_ADDR
// end ;
41272: LD_VAR 0 2
41276: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41277: LD_INT 0
41279: PPUSH
41280: PPUSH
41281: PPUSH
// pom := GetBase ( building ) ;
41282: LD_ADDR_VAR 0 4
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 274
41296: ST_TO_ADDR
// if not pom then
41297: LD_VAR 0 4
41301: NOT
41302: IFFALSE 41306
// exit ;
41304: GO 41407
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41306: LD_ADDR_VAR 0 5
41310: PUSH
41311: LD_VAR 0 2
41315: PPUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 248
41325: PPUSH
41326: CALL_OW 450
41330: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41331: LD_ADDR_VAR 0 3
41335: PUSH
41336: LD_VAR 0 4
41340: PPUSH
41341: LD_INT 1
41343: PPUSH
41344: CALL_OW 275
41348: PUSH
41349: LD_VAR 0 5
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: GREATEREQUAL
41358: PUSH
41359: LD_VAR 0 4
41363: PPUSH
41364: LD_INT 2
41366: PPUSH
41367: CALL_OW 275
41371: PUSH
41372: LD_VAR 0 5
41376: PUSH
41377: LD_INT 2
41379: ARRAY
41380: GREATEREQUAL
41381: AND
41382: PUSH
41383: LD_VAR 0 4
41387: PPUSH
41388: LD_INT 3
41390: PPUSH
41391: CALL_OW 275
41395: PUSH
41396: LD_VAR 0 5
41400: PUSH
41401: LD_INT 3
41403: ARRAY
41404: GREATEREQUAL
41405: AND
41406: ST_TO_ADDR
// end ;
41407: LD_VAR 0 3
41411: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41412: LD_INT 0
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
// result := false ;
41425: LD_ADDR_VAR 0 8
41429: PUSH
41430: LD_INT 0
41432: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41433: LD_VAR 0 5
41437: NOT
41438: PUSH
41439: LD_VAR 0 1
41443: NOT
41444: OR
41445: PUSH
41446: LD_VAR 0 2
41450: NOT
41451: OR
41452: PUSH
41453: LD_VAR 0 3
41457: NOT
41458: OR
41459: IFFALSE 41463
// exit ;
41461: GO 42277
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41463: LD_ADDR_VAR 0 14
41467: PUSH
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: LD_VAR 0 3
41482: PPUSH
41483: LD_VAR 0 4
41487: PPUSH
41488: LD_VAR 0 5
41492: PUSH
41493: LD_INT 1
41495: ARRAY
41496: PPUSH
41497: CALL_OW 248
41501: PPUSH
41502: LD_INT 0
41504: PPUSH
41505: CALL 43530 0 6
41509: ST_TO_ADDR
// if not hexes then
41510: LD_VAR 0 14
41514: NOT
41515: IFFALSE 41519
// exit ;
41517: GO 42277
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41519: LD_ADDR_VAR 0 17
41523: PUSH
41524: LD_VAR 0 5
41528: PPUSH
41529: LD_INT 22
41531: PUSH
41532: LD_VAR 0 13
41536: PPUSH
41537: CALL_OW 255
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 30
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 30
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PPUSH
41578: CALL_OW 72
41582: ST_TO_ADDR
// for i = 1 to hexes do
41583: LD_ADDR_VAR 0 9
41587: PUSH
41588: DOUBLE
41589: LD_INT 1
41591: DEC
41592: ST_TO_ADDR
41593: LD_VAR 0 14
41597: PUSH
41598: FOR_TO
41599: IFFALSE 42275
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41601: LD_ADDR_VAR 0 13
41605: PUSH
41606: LD_VAR 0 14
41610: PUSH
41611: LD_VAR 0 9
41615: ARRAY
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: LD_VAR 0 14
41625: PUSH
41626: LD_VAR 0 9
41630: ARRAY
41631: PUSH
41632: LD_INT 2
41634: ARRAY
41635: PPUSH
41636: CALL_OW 428
41640: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41641: LD_VAR 0 14
41645: PUSH
41646: LD_VAR 0 9
41650: ARRAY
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: PPUSH
41656: LD_VAR 0 14
41660: PUSH
41661: LD_VAR 0 9
41665: ARRAY
41666: PUSH
41667: LD_INT 2
41669: ARRAY
41670: PPUSH
41671: CALL_OW 351
41675: PUSH
41676: LD_VAR 0 14
41680: PUSH
41681: LD_VAR 0 9
41685: ARRAY
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PPUSH
41691: LD_VAR 0 14
41695: PUSH
41696: LD_VAR 0 9
41700: ARRAY
41701: PUSH
41702: LD_INT 2
41704: ARRAY
41705: PPUSH
41706: CALL_OW 488
41710: NOT
41711: OR
41712: PUSH
41713: LD_VAR 0 13
41717: PPUSH
41718: CALL_OW 247
41722: PUSH
41723: LD_INT 3
41725: EQUAL
41726: OR
41727: IFFALSE 41733
// exit ;
41729: POP
41730: POP
41731: GO 42277
// if not tmp then
41733: LD_VAR 0 13
41737: NOT
41738: IFFALSE 41742
// continue ;
41740: GO 41598
// result := true ;
41742: LD_ADDR_VAR 0 8
41746: PUSH
41747: LD_INT 1
41749: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41750: LD_VAR 0 6
41754: PUSH
41755: LD_VAR 0 13
41759: PPUSH
41760: CALL_OW 247
41764: PUSH
41765: LD_INT 2
41767: EQUAL
41768: AND
41769: PUSH
41770: LD_VAR 0 13
41774: PPUSH
41775: CALL_OW 263
41779: PUSH
41780: LD_INT 1
41782: EQUAL
41783: AND
41784: IFFALSE 41948
// begin if IsDrivenBy ( tmp ) then
41786: LD_VAR 0 13
41790: PPUSH
41791: CALL_OW 311
41795: IFFALSE 41799
// continue ;
41797: GO 41598
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41799: LD_VAR 0 6
41803: PPUSH
41804: LD_INT 3
41806: PUSH
41807: LD_INT 60
41809: PUSH
41810: EMPTY
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: LD_INT 55
41822: PUSH
41823: EMPTY
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PPUSH
41834: CALL_OW 72
41838: IFFALSE 41946
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41840: LD_ADDR_VAR 0 18
41844: PUSH
41845: LD_VAR 0 6
41849: PPUSH
41850: LD_INT 3
41852: PUSH
41853: LD_INT 60
41855: PUSH
41856: EMPTY
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: LD_INT 55
41868: PUSH
41869: EMPTY
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PPUSH
41880: CALL_OW 72
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: ST_TO_ADDR
// if IsInUnit ( driver ) then
41889: LD_VAR 0 18
41893: PPUSH
41894: CALL_OW 310
41898: IFFALSE 41909
// ComExit ( driver ) ;
41900: LD_VAR 0 18
41904: PPUSH
41905: CALL 67309 0 1
// AddComEnterUnit ( driver , tmp ) ;
41909: LD_VAR 0 18
41913: PPUSH
41914: LD_VAR 0 13
41918: PPUSH
41919: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41923: LD_VAR 0 18
41927: PPUSH
41928: LD_VAR 0 7
41932: PPUSH
41933: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41937: LD_VAR 0 18
41941: PPUSH
41942: CALL_OW 181
// end ; continue ;
41946: GO 41598
// end ; if not cleaners or not tmp in cleaners then
41948: LD_VAR 0 6
41952: NOT
41953: PUSH
41954: LD_VAR 0 13
41958: PUSH
41959: LD_VAR 0 6
41963: IN
41964: NOT
41965: OR
41966: IFFALSE 42273
// begin if dep then
41968: LD_VAR 0 17
41972: IFFALSE 42108
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41974: LD_ADDR_VAR 0 16
41978: PUSH
41979: LD_VAR 0 17
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PPUSH
41988: CALL_OW 250
41992: PPUSH
41993: LD_VAR 0 17
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: CALL_OW 254
42006: PPUSH
42007: LD_INT 5
42009: PPUSH
42010: CALL_OW 272
42014: PUSH
42015: LD_VAR 0 17
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PPUSH
42024: CALL_OW 251
42028: PPUSH
42029: LD_VAR 0 17
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PPUSH
42038: CALL_OW 254
42042: PPUSH
42043: LD_INT 5
42045: PPUSH
42046: CALL_OW 273
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42055: LD_VAR 0 16
42059: PUSH
42060: LD_INT 1
42062: ARRAY
42063: PPUSH
42064: LD_VAR 0 16
42068: PUSH
42069: LD_INT 2
42071: ARRAY
42072: PPUSH
42073: CALL_OW 488
42077: IFFALSE 42108
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42079: LD_VAR 0 13
42083: PPUSH
42084: LD_VAR 0 16
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PPUSH
42093: LD_VAR 0 16
42097: PUSH
42098: LD_INT 2
42100: ARRAY
42101: PPUSH
42102: CALL_OW 111
// continue ;
42106: GO 41598
// end ; end ; r := GetDir ( tmp ) ;
42108: LD_ADDR_VAR 0 15
42112: PUSH
42113: LD_VAR 0 13
42117: PPUSH
42118: CALL_OW 254
42122: ST_TO_ADDR
// if r = 5 then
42123: LD_VAR 0 15
42127: PUSH
42128: LD_INT 5
42130: EQUAL
42131: IFFALSE 42141
// r := 0 ;
42133: LD_ADDR_VAR 0 15
42137: PUSH
42138: LD_INT 0
42140: ST_TO_ADDR
// for j = r to 5 do
42141: LD_ADDR_VAR 0 10
42145: PUSH
42146: DOUBLE
42147: LD_VAR 0 15
42151: DEC
42152: ST_TO_ADDR
42153: LD_INT 5
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42271
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42159: LD_ADDR_VAR 0 11
42163: PUSH
42164: LD_VAR 0 13
42168: PPUSH
42169: CALL_OW 250
42173: PPUSH
42174: LD_VAR 0 10
42178: PPUSH
42179: LD_INT 2
42181: PPUSH
42182: CALL_OW 272
42186: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42187: LD_ADDR_VAR 0 12
42191: PUSH
42192: LD_VAR 0 13
42196: PPUSH
42197: CALL_OW 251
42201: PPUSH
42202: LD_VAR 0 10
42206: PPUSH
42207: LD_INT 2
42209: PPUSH
42210: CALL_OW 273
42214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42215: LD_VAR 0 11
42219: PPUSH
42220: LD_VAR 0 12
42224: PPUSH
42225: CALL_OW 488
42229: PUSH
42230: LD_VAR 0 11
42234: PPUSH
42235: LD_VAR 0 12
42239: PPUSH
42240: CALL_OW 428
42244: NOT
42245: AND
42246: IFFALSE 42269
// begin ComMoveXY ( tmp , _x , _y ) ;
42248: LD_VAR 0 13
42252: PPUSH
42253: LD_VAR 0 11
42257: PPUSH
42258: LD_VAR 0 12
42262: PPUSH
42263: CALL_OW 111
// break ;
42267: GO 42271
// end ; end ;
42269: GO 42156
42271: POP
42272: POP
// end ; end ;
42273: GO 41598
42275: POP
42276: POP
// end ;
42277: LD_VAR 0 8
42281: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42282: LD_INT 0
42284: PPUSH
// result := true ;
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: LD_INT 1
42292: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42293: LD_VAR 0 2
42297: PUSH
42298: LD_INT 24
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42312
42304: LD_INT 33
42306: DOUBLE
42307: EQUAL
42308: IFTRUE 42312
42310: GO 42337
42312: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42313: LD_ADDR_VAR 0 3
42317: PUSH
42318: LD_INT 32
42320: PPUSH
42321: LD_VAR 0 1
42325: PPUSH
42326: CALL_OW 321
42330: PUSH
42331: LD_INT 2
42333: EQUAL
42334: ST_TO_ADDR
42335: GO 42653
42337: LD_INT 20
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42370
42345: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_INT 6
42353: PPUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: CALL_OW 321
42363: PUSH
42364: LD_INT 2
42366: EQUAL
42367: ST_TO_ADDR
42368: GO 42653
42370: LD_INT 22
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42384
42376: LD_INT 36
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42409
42384: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42385: LD_ADDR_VAR 0 3
42389: PUSH
42390: LD_INT 15
42392: PPUSH
42393: LD_VAR 0 1
42397: PPUSH
42398: CALL_OW 321
42402: PUSH
42403: LD_INT 2
42405: EQUAL
42406: ST_TO_ADDR
42407: GO 42653
42409: LD_INT 30
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42442
42417: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 20
42425: PPUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 321
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: ST_TO_ADDR
42440: GO 42653
42442: LD_INT 28
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42456
42448: LD_INT 21
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42481
42456: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 21
42464: PPUSH
42465: LD_VAR 0 1
42469: PPUSH
42470: CALL_OW 321
42474: PUSH
42475: LD_INT 2
42477: EQUAL
42478: ST_TO_ADDR
42479: GO 42653
42481: LD_INT 16
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42514
42489: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_INT 84
42497: PPUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 321
42507: PUSH
42508: LD_INT 2
42510: EQUAL
42511: ST_TO_ADDR
42512: GO 42653
42514: LD_INT 19
42516: DOUBLE
42517: EQUAL
42518: IFTRUE 42528
42520: LD_INT 23
42522: DOUBLE
42523: EQUAL
42524: IFTRUE 42528
42526: GO 42553
42528: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42529: LD_ADDR_VAR 0 3
42533: PUSH
42534: LD_INT 83
42536: PPUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 321
42546: PUSH
42547: LD_INT 2
42549: EQUAL
42550: ST_TO_ADDR
42551: GO 42653
42553: LD_INT 17
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42586
42561: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 39
42569: PPUSH
42570: LD_VAR 0 1
42574: PPUSH
42575: CALL_OW 321
42579: PUSH
42580: LD_INT 2
42582: EQUAL
42583: ST_TO_ADDR
42584: GO 42653
42586: LD_INT 18
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42619
42594: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42595: LD_ADDR_VAR 0 3
42599: PUSH
42600: LD_INT 40
42602: PPUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: CALL_OW 321
42612: PUSH
42613: LD_INT 2
42615: EQUAL
42616: ST_TO_ADDR
42617: GO 42653
42619: LD_INT 27
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42627
42625: GO 42652
42627: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42628: LD_ADDR_VAR 0 3
42632: PUSH
42633: LD_INT 35
42635: PPUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: CALL_OW 321
42645: PUSH
42646: LD_INT 2
42648: EQUAL
42649: ST_TO_ADDR
42650: GO 42653
42652: POP
// end ;
42653: LD_VAR 0 3
42657: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42658: LD_INT 0
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
// result := false ;
42671: LD_ADDR_VAR 0 6
42675: PUSH
42676: LD_INT 0
42678: ST_TO_ADDR
// if btype = b_depot then
42679: LD_VAR 0 2
42683: PUSH
42684: LD_INT 0
42686: EQUAL
42687: IFFALSE 42699
// begin result := true ;
42689: LD_ADDR_VAR 0 6
42693: PUSH
42694: LD_INT 1
42696: ST_TO_ADDR
// exit ;
42697: GO 43525
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42699: LD_VAR 0 1
42703: NOT
42704: PUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: CALL_OW 266
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: IN
42725: NOT
42726: OR
42727: PUSH
42728: LD_VAR 0 2
42732: NOT
42733: OR
42734: PUSH
42735: LD_VAR 0 5
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: LD_INT 4
42754: PUSH
42755: LD_INT 5
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: IN
42766: NOT
42767: OR
42768: PUSH
42769: LD_VAR 0 3
42773: PPUSH
42774: LD_VAR 0 4
42778: PPUSH
42779: CALL_OW 488
42783: NOT
42784: OR
42785: IFFALSE 42789
// exit ;
42787: GO 43525
// side := GetSide ( depot ) ;
42789: LD_ADDR_VAR 0 9
42793: PUSH
42794: LD_VAR 0 1
42798: PPUSH
42799: CALL_OW 255
42803: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42804: LD_VAR 0 9
42808: PPUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: CALL 42282 0 2
42818: NOT
42819: IFFALSE 42823
// exit ;
42821: GO 43525
// pom := GetBase ( depot ) ;
42823: LD_ADDR_VAR 0 10
42827: PUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: CALL_OW 274
42837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42838: LD_ADDR_VAR 0 11
42842: PUSH
42843: LD_VAR 0 2
42847: PPUSH
42848: LD_VAR 0 1
42852: PPUSH
42853: CALL_OW 248
42857: PPUSH
42858: CALL_OW 450
42862: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42863: LD_VAR 0 10
42867: PPUSH
42868: LD_INT 1
42870: PPUSH
42871: CALL_OW 275
42875: PUSH
42876: LD_VAR 0 11
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: GREATEREQUAL
42885: PUSH
42886: LD_VAR 0 10
42890: PPUSH
42891: LD_INT 2
42893: PPUSH
42894: CALL_OW 275
42898: PUSH
42899: LD_VAR 0 11
42903: PUSH
42904: LD_INT 2
42906: ARRAY
42907: GREATEREQUAL
42908: AND
42909: PUSH
42910: LD_VAR 0 10
42914: PPUSH
42915: LD_INT 3
42917: PPUSH
42918: CALL_OW 275
42922: PUSH
42923: LD_VAR 0 11
42927: PUSH
42928: LD_INT 3
42930: ARRAY
42931: GREATEREQUAL
42932: AND
42933: NOT
42934: IFFALSE 42938
// exit ;
42936: GO 43525
// if GetBType ( depot ) = b_depot then
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 266
42947: PUSH
42948: LD_INT 0
42950: EQUAL
42951: IFFALSE 42963
// dist := 28 else
42953: LD_ADDR_VAR 0 14
42957: PUSH
42958: LD_INT 28
42960: ST_TO_ADDR
42961: GO 42971
// dist := 36 ;
42963: LD_ADDR_VAR 0 14
42967: PUSH
42968: LD_INT 36
42970: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42971: LD_VAR 0 1
42975: PPUSH
42976: LD_VAR 0 3
42980: PPUSH
42981: LD_VAR 0 4
42985: PPUSH
42986: CALL_OW 297
42990: PUSH
42991: LD_VAR 0 14
42995: GREATER
42996: IFFALSE 43000
// exit ;
42998: GO 43525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43000: LD_ADDR_VAR 0 12
43004: PUSH
43005: LD_VAR 0 2
43009: PPUSH
43010: LD_VAR 0 3
43014: PPUSH
43015: LD_VAR 0 4
43019: PPUSH
43020: LD_VAR 0 5
43024: PPUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 248
43034: PPUSH
43035: LD_INT 0
43037: PPUSH
43038: CALL 43530 0 6
43042: ST_TO_ADDR
// if not hexes then
43043: LD_VAR 0 12
43047: NOT
43048: IFFALSE 43052
// exit ;
43050: GO 43525
// hex := GetHexInfo ( x , y ) ;
43052: LD_ADDR_VAR 0 15
43056: PUSH
43057: LD_VAR 0 3
43061: PPUSH
43062: LD_VAR 0 4
43066: PPUSH
43067: CALL_OW 546
43071: ST_TO_ADDR
// if hex [ 1 ] then
43072: LD_VAR 0 15
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: IFFALSE 43084
// exit ;
43082: GO 43525
// height := hex [ 2 ] ;
43084: LD_ADDR_VAR 0 13
43088: PUSH
43089: LD_VAR 0 15
43093: PUSH
43094: LD_INT 2
43096: ARRAY
43097: ST_TO_ADDR
// for i = 1 to hexes do
43098: LD_ADDR_VAR 0 7
43102: PUSH
43103: DOUBLE
43104: LD_INT 1
43106: DEC
43107: ST_TO_ADDR
43108: LD_VAR 0 12
43112: PUSH
43113: FOR_TO
43114: IFFALSE 43444
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43116: LD_VAR 0 12
43120: PUSH
43121: LD_VAR 0 7
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: PPUSH
43131: LD_VAR 0 12
43135: PUSH
43136: LD_VAR 0 7
43140: ARRAY
43141: PUSH
43142: LD_INT 2
43144: ARRAY
43145: PPUSH
43146: CALL_OW 488
43150: NOT
43151: PUSH
43152: LD_VAR 0 12
43156: PUSH
43157: LD_VAR 0 7
43161: ARRAY
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: LD_VAR 0 12
43171: PUSH
43172: LD_VAR 0 7
43176: ARRAY
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: PPUSH
43182: CALL_OW 428
43186: PUSH
43187: LD_INT 0
43189: GREATER
43190: OR
43191: PUSH
43192: LD_VAR 0 12
43196: PUSH
43197: LD_VAR 0 7
43201: ARRAY
43202: PUSH
43203: LD_INT 1
43205: ARRAY
43206: PPUSH
43207: LD_VAR 0 12
43211: PUSH
43212: LD_VAR 0 7
43216: ARRAY
43217: PUSH
43218: LD_INT 2
43220: ARRAY
43221: PPUSH
43222: CALL_OW 351
43226: OR
43227: IFFALSE 43233
// exit ;
43229: POP
43230: POP
43231: GO 43525
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43233: LD_ADDR_VAR 0 8
43237: PUSH
43238: LD_VAR 0 12
43242: PUSH
43243: LD_VAR 0 7
43247: ARRAY
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PPUSH
43253: LD_VAR 0 12
43257: PUSH
43258: LD_VAR 0 7
43262: ARRAY
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: PPUSH
43268: CALL_OW 546
43272: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43273: LD_VAR 0 8
43277: PUSH
43278: LD_INT 1
43280: ARRAY
43281: PUSH
43282: LD_VAR 0 8
43286: PUSH
43287: LD_INT 2
43289: ARRAY
43290: PUSH
43291: LD_VAR 0 13
43295: PUSH
43296: LD_INT 2
43298: PLUS
43299: GREATER
43300: OR
43301: PUSH
43302: LD_VAR 0 8
43306: PUSH
43307: LD_INT 2
43309: ARRAY
43310: PUSH
43311: LD_VAR 0 13
43315: PUSH
43316: LD_INT 2
43318: MINUS
43319: LESS
43320: OR
43321: PUSH
43322: LD_VAR 0 8
43326: PUSH
43327: LD_INT 3
43329: ARRAY
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 8
43336: PUSH
43337: LD_INT 9
43339: PUSH
43340: LD_INT 10
43342: PUSH
43343: LD_INT 11
43345: PUSH
43346: LD_INT 12
43348: PUSH
43349: LD_INT 13
43351: PUSH
43352: LD_INT 16
43354: PUSH
43355: LD_INT 17
43357: PUSH
43358: LD_INT 18
43360: PUSH
43361: LD_INT 19
43363: PUSH
43364: LD_INT 20
43366: PUSH
43367: LD_INT 21
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: IN
43385: NOT
43386: OR
43387: PUSH
43388: LD_VAR 0 8
43392: PUSH
43393: LD_INT 5
43395: ARRAY
43396: NOT
43397: OR
43398: PUSH
43399: LD_VAR 0 8
43403: PUSH
43404: LD_INT 6
43406: ARRAY
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 7
43416: PUSH
43417: LD_INT 9
43419: PUSH
43420: LD_INT 10
43422: PUSH
43423: LD_INT 11
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: IN
43434: NOT
43435: OR
43436: IFFALSE 43442
// exit ;
43438: POP
43439: POP
43440: GO 43525
// end ;
43442: GO 43113
43444: POP
43445: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43446: LD_VAR 0 9
43450: PPUSH
43451: LD_VAR 0 3
43455: PPUSH
43456: LD_VAR 0 4
43460: PPUSH
43461: LD_INT 20
43463: PPUSH
43464: CALL 35448 0 4
43468: PUSH
43469: LD_INT 4
43471: ARRAY
43472: IFFALSE 43476
// exit ;
43474: GO 43525
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 29
43483: PUSH
43484: LD_INT 30
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: IN
43491: PUSH
43492: LD_VAR 0 3
43496: PPUSH
43497: LD_VAR 0 4
43501: PPUSH
43502: LD_VAR 0 9
43506: PPUSH
43507: CALL_OW 440
43511: NOT
43512: AND
43513: IFFALSE 43517
// exit ;
43515: GO 43525
// result := true ;
43517: LD_ADDR_VAR 0 6
43521: PUSH
43522: LD_INT 1
43524: ST_TO_ADDR
// end ;
43525: LD_VAR 0 6
43529: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43530: LD_INT 0
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
// result = [ ] ;
43590: LD_ADDR_VAR 0 7
43594: PUSH
43595: EMPTY
43596: ST_TO_ADDR
// temp_list = [ ] ;
43597: LD_ADDR_VAR 0 9
43601: PUSH
43602: EMPTY
43603: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43604: LD_VAR 0 4
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 5
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: IN
43635: NOT
43636: PUSH
43637: LD_VAR 0 1
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: IN
43652: PUSH
43653: LD_VAR 0 5
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: IN
43672: NOT
43673: AND
43674: OR
43675: IFFALSE 43679
// exit ;
43677: GO 62070
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43679: LD_VAR 0 1
43683: PUSH
43684: LD_INT 6
43686: PUSH
43687: LD_INT 7
43689: PUSH
43690: LD_INT 8
43692: PUSH
43693: LD_INT 13
43695: PUSH
43696: LD_INT 12
43698: PUSH
43699: LD_INT 15
43701: PUSH
43702: LD_INT 11
43704: PUSH
43705: LD_INT 14
43707: PUSH
43708: LD_INT 10
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: IN
43722: IFFALSE 43732
// btype = b_lab ;
43724: LD_ADDR_VAR 0 1
43728: PUSH
43729: LD_INT 6
43731: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43732: LD_VAR 0 6
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: IN
43751: NOT
43752: PUSH
43753: LD_VAR 0 1
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: LD_INT 6
43772: PUSH
43773: LD_INT 36
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: LD_INT 5
43781: PUSH
43782: LD_INT 31
43784: PUSH
43785: LD_INT 32
43787: PUSH
43788: LD_INT 33
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: IN
43804: NOT
43805: PUSH
43806: LD_VAR 0 6
43810: PUSH
43811: LD_INT 1
43813: EQUAL
43814: AND
43815: OR
43816: PUSH
43817: LD_VAR 0 1
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: IN
43832: NOT
43833: PUSH
43834: LD_VAR 0 6
43838: PUSH
43839: LD_INT 2
43841: EQUAL
43842: AND
43843: OR
43844: IFFALSE 43854
// mode = 0 ;
43846: LD_ADDR_VAR 0 6
43850: PUSH
43851: LD_INT 0
43853: ST_TO_ADDR
// case mode of 0 :
43854: LD_VAR 0 6
43858: PUSH
43859: LD_INT 0
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 55320
43867: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43868: LD_ADDR_VAR 0 11
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 3
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44061: LD_ADDR_VAR 0 12
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44257: LD_ADDR_VAR 0 13
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: LD_INT 3
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 3
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44456: LD_ADDR_VAR 0 14
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 3
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44652: LD_ADDR_VAR 0 15
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44845: LD_ADDR_VAR 0 16
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 3
45002: PUSH
45003: LD_INT 3
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45038: LD_ADDR_VAR 0 17
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45268: LD_ADDR_VAR 0 18
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45498: LD_ADDR_VAR 0 19
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45728: LD_ADDR_VAR 0 20
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45958: LD_ADDR_VAR 0 21
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46188: LD_ADDR_VAR 0 22
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46418: LD_ADDR_VAR 0 23
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46698: LD_ADDR_VAR 0 24
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46974: LD_ADDR_VAR 0 25
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47248: LD_ADDR_VAR 0 26
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47524: LD_ADDR_VAR 0 27
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47804: LD_ADDR_VAR 0 28
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48086: LD_ADDR_VAR 0 29
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48365: LD_ADDR_VAR 0 30
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48643: LD_ADDR_VAR 0 31
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48921: LD_ADDR_VAR 0 32
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49199: LD_ADDR_VAR 0 33
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49478: LD_ADDR_VAR 0 34
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 3
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49758: LD_ADDR_VAR 0 35
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49870: LD_ADDR_VAR 0 36
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49982: LD_ADDR_VAR 0 37
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50094: LD_ADDR_VAR 0 38
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50206: LD_ADDR_VAR 0 39
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50318: LD_ADDR_VAR 0 40
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50430: LD_ADDR_VAR 0 41
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 3
50727: NEG
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50780: LD_ADDR_VAR 0 42
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51130: LD_ADDR_VAR 0 43
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 3
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51478: LD_ADDR_VAR 0 44
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51828: LD_ADDR_VAR 0 45
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52178: LD_ADDR_VAR 0 46
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52526: LD_ADDR_VAR 0 47
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52677: LD_ADDR_VAR 0 48
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52824: LD_ADDR_VAR 0 49
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52968: LD_ADDR_VAR 0 50
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53112: LD_ADDR_VAR 0 51
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53259: LD_ADDR_VAR 0 52
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53410: LD_ADDR_VAR 0 53
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53640: LD_ADDR_VAR 0 54
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53870: LD_ADDR_VAR 0 55
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54100: LD_ADDR_VAR 0 56
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54330: LD_ADDR_VAR 0 57
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54560: LD_ADDR_VAR 0 58
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54790: LD_ADDR_VAR 0 59
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54878: LD_ADDR_VAR 0 60
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54966: LD_ADDR_VAR 0 61
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55054: LD_ADDR_VAR 0 62
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55142: LD_ADDR_VAR 0 63
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55230: LD_ADDR_VAR 0 64
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// end ; 1 :
55318: GO 61215
55320: LD_INT 1
55322: DOUBLE
55323: EQUAL
55324: IFTRUE 55328
55326: GO 57951
55328: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55329: LD_ADDR_VAR 0 11
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55373: LD_ADDR_VAR 0 12
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55414: LD_ADDR_VAR 0 13
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55454: LD_ADDR_VAR 0 14
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55495: LD_ADDR_VAR 0 15
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55539: LD_ADDR_VAR 0 16
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55585: LD_ADDR_VAR 0 17
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55629: LD_ADDR_VAR 0 18
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55670: LD_ADDR_VAR 0 19
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55710: LD_ADDR_VAR 0 20
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55751: LD_ADDR_VAR 0 21
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55795: LD_ADDR_VAR 0 22
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 3
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55841: LD_ADDR_VAR 0 23
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 4
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55885: LD_ADDR_VAR 0 24
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55926: LD_ADDR_VAR 0 25
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: LD_INT 3
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: PUSH
55954: LD_INT 4
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55966: LD_ADDR_VAR 0 26
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56007: LD_ADDR_VAR 0 27
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56051: LD_ADDR_VAR 0 28
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: NEG
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56097: LD_ADDR_VAR 0 29
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 4
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 4
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 5
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 5
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 6
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 6
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 5
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56252: LD_ADDR_VAR 0 30
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 5
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 5
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 5
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 6
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 6
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56395: LD_ADDR_VAR 0 31
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 4
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 5
56472: PUSH
56473: LD_INT 5
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: LD_INT 5
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 6
56492: PUSH
56493: LD_INT 5
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 6
56502: PUSH
56503: LD_INT 6
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: LD_INT 6
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56534: LD_ADDR_VAR 0 32
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 4
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 4
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 5
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 4
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 6
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 6
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 5
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56677: LD_ADDR_VAR 0 33
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 4
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 4
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 4
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 5
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 5
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 6
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 6
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56832: LD_ADDR_VAR 0 34
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 3
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 4
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 4
56887: NEG
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: LD_INT 4
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: NEG
56912: PUSH
56913: LD_INT 5
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 5
56923: NEG
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 5
56935: NEG
56936: PUSH
56937: LD_INT 5
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 5
56947: NEG
56948: PUSH
56949: LD_INT 6
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 6
56959: NEG
56960: PUSH
56961: LD_INT 5
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 6
56971: NEG
56972: PUSH
56973: LD_INT 6
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56995: LD_ADDR_VAR 0 41
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57039: LD_ADDR_VAR 0 42
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57080: LD_ADDR_VAR 0 43
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57120: LD_ADDR_VAR 0 44
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57161: LD_ADDR_VAR 0 45
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57205: LD_ADDR_VAR 0 46
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57251: LD_ADDR_VAR 0 47
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57284: LD_ADDR_VAR 0 48
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57315: LD_ADDR_VAR 0 49
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57344: LD_ADDR_VAR 0 50
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57373: LD_ADDR_VAR 0 51
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57404: LD_ADDR_VAR 0 52
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57437: LD_ADDR_VAR 0 53
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57481: LD_ADDR_VAR 0 54
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57522: LD_ADDR_VAR 0 55
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57562: LD_ADDR_VAR 0 56
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57603: LD_ADDR_VAR 0 57
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57647: LD_ADDR_VAR 0 58
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57693: LD_ADDR_VAR 0 59
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57737: LD_ADDR_VAR 0 60
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57778: LD_ADDR_VAR 0 61
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57818: LD_ADDR_VAR 0 62
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57859: LD_ADDR_VAR 0 63
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57903: LD_ADDR_VAR 0 64
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// end ; 2 :
57949: GO 61215
57951: LD_INT 2
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 57959
57957: GO 61214
57959: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57960: LD_ADDR_VAR 0 29
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 5
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 5
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 4
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: LD_INT 4
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 5
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 5
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: LD_INT 5
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 4
58345: NEG
58346: PUSH
58347: LD_INT 4
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 5
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: LD_INT 4
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: NEG
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 4
58393: NEG
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 5
58405: NEG
58406: PUSH
58407: LD_INT 4
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: LD_INT 5
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 5
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 5
58441: NEG
58442: PUSH
58443: LD_INT 3
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58498: LD_ADDR_VAR 0 30
58502: PUSH
58503: LD_INT 4
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 5
58525: PUSH
58526: LD_INT 4
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 5
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 4
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 3
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 5
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 5
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 4
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 3
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 4
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 5
58744: NEG
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 3
58802: NEG
58803: PUSH
58804: LD_INT 4
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: NEG
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 4
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 4
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 5
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 4
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 4
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 5
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 5
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59045: LD_ADDR_VAR 0 31
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 5
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 4
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 5
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: NEG
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 5
59307: NEG
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: NEG
59320: PUSH
59321: LD_INT 5
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 5
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 3
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 4
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 4
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 4
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 5
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 5
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59595: LD_ADDR_VAR 0 32
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 4
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: NEG
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 4
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 5
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 4
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 5
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 4
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 4
60047: PUSH
60048: LD_INT 5
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 5
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60142: LD_ADDR_VAR 0 33
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 5
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 4
60197: NEG
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 4
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: NEG
60222: PUSH
60223: LD_INT 5
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 5
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 3
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: LD_INT 3
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 4
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 4
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 5
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 5
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 4
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 5
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 4
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: PUSH
60493: LD_INT 4
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: LD_INT 4
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 4
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 5
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 5
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 4
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 5
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60680: LD_ADDR_VAR 0 34
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 5
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 4
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 4
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 5
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: LD_INT 5
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 2
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 4
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: PUSH
60903: LD_INT 4
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 5
60912: PUSH
60913: LD_INT 5
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 4
60922: PUSH
60923: LD_INT 5
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 5
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 5
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: NEG
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 4
61076: NEG
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 4
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 5
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 5
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 5
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: NEG
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// end ; end ;
61212: GO 61215
61214: POP
// case btype of b_depot , b_warehouse :
61215: LD_VAR 0 1
61219: PUSH
61220: LD_INT 0
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61234
61226: LD_INT 1
61228: DOUBLE
61229: EQUAL
61230: IFTRUE 61234
61232: GO 61435
61234: POP
// case nation of nation_american :
61235: LD_VAR 0 5
61239: PUSH
61240: LD_INT 1
61242: DOUBLE
61243: EQUAL
61244: IFTRUE 61248
61246: GO 61304
61248: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61249: LD_ADDR_VAR 0 9
61253: PUSH
61254: LD_VAR 0 11
61258: PUSH
61259: LD_VAR 0 12
61263: PUSH
61264: LD_VAR 0 13
61268: PUSH
61269: LD_VAR 0 14
61273: PUSH
61274: LD_VAR 0 15
61278: PUSH
61279: LD_VAR 0 16
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: LD_VAR 0 4
61296: PUSH
61297: LD_INT 1
61299: PLUS
61300: ARRAY
61301: ST_TO_ADDR
61302: GO 61433
61304: LD_INT 2
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61312
61310: GO 61368
61312: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61313: LD_ADDR_VAR 0 9
61317: PUSH
61318: LD_VAR 0 17
61322: PUSH
61323: LD_VAR 0 18
61327: PUSH
61328: LD_VAR 0 19
61332: PUSH
61333: LD_VAR 0 20
61337: PUSH
61338: LD_VAR 0 21
61342: PUSH
61343: LD_VAR 0 22
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: PUSH
61356: LD_VAR 0 4
61360: PUSH
61361: LD_INT 1
61363: PLUS
61364: ARRAY
61365: ST_TO_ADDR
61366: GO 61433
61368: LD_INT 3
61370: DOUBLE
61371: EQUAL
61372: IFTRUE 61376
61374: GO 61432
61376: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61377: LD_ADDR_VAR 0 9
61381: PUSH
61382: LD_VAR 0 23
61386: PUSH
61387: LD_VAR 0 24
61391: PUSH
61392: LD_VAR 0 25
61396: PUSH
61397: LD_VAR 0 26
61401: PUSH
61402: LD_VAR 0 27
61406: PUSH
61407: LD_VAR 0 28
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: PUSH
61420: LD_VAR 0 4
61424: PUSH
61425: LD_INT 1
61427: PLUS
61428: ARRAY
61429: ST_TO_ADDR
61430: GO 61433
61432: POP
61433: GO 61988
61435: LD_INT 2
61437: DOUBLE
61438: EQUAL
61439: IFTRUE 61449
61441: LD_INT 3
61443: DOUBLE
61444: EQUAL
61445: IFTRUE 61449
61447: GO 61505
61449: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61450: LD_ADDR_VAR 0 9
61454: PUSH
61455: LD_VAR 0 29
61459: PUSH
61460: LD_VAR 0 30
61464: PUSH
61465: LD_VAR 0 31
61469: PUSH
61470: LD_VAR 0 32
61474: PUSH
61475: LD_VAR 0 33
61479: PUSH
61480: LD_VAR 0 34
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: PUSH
61493: LD_VAR 0 4
61497: PUSH
61498: LD_INT 1
61500: PLUS
61501: ARRAY
61502: ST_TO_ADDR
61503: GO 61988
61505: LD_INT 16
61507: DOUBLE
61508: EQUAL
61509: IFTRUE 61567
61511: LD_INT 17
61513: DOUBLE
61514: EQUAL
61515: IFTRUE 61567
61517: LD_INT 18
61519: DOUBLE
61520: EQUAL
61521: IFTRUE 61567
61523: LD_INT 19
61525: DOUBLE
61526: EQUAL
61527: IFTRUE 61567
61529: LD_INT 22
61531: DOUBLE
61532: EQUAL
61533: IFTRUE 61567
61535: LD_INT 20
61537: DOUBLE
61538: EQUAL
61539: IFTRUE 61567
61541: LD_INT 21
61543: DOUBLE
61544: EQUAL
61545: IFTRUE 61567
61547: LD_INT 23
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61567
61553: LD_INT 24
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61567
61559: LD_INT 25
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61567
61565: GO 61623
61567: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61568: LD_ADDR_VAR 0 9
61572: PUSH
61573: LD_VAR 0 35
61577: PUSH
61578: LD_VAR 0 36
61582: PUSH
61583: LD_VAR 0 37
61587: PUSH
61588: LD_VAR 0 38
61592: PUSH
61593: LD_VAR 0 39
61597: PUSH
61598: LD_VAR 0 40
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: PUSH
61611: LD_VAR 0 4
61615: PUSH
61616: LD_INT 1
61618: PLUS
61619: ARRAY
61620: ST_TO_ADDR
61621: GO 61988
61623: LD_INT 6
61625: DOUBLE
61626: EQUAL
61627: IFTRUE 61679
61629: LD_INT 7
61631: DOUBLE
61632: EQUAL
61633: IFTRUE 61679
61635: LD_INT 8
61637: DOUBLE
61638: EQUAL
61639: IFTRUE 61679
61641: LD_INT 13
61643: DOUBLE
61644: EQUAL
61645: IFTRUE 61679
61647: LD_INT 12
61649: DOUBLE
61650: EQUAL
61651: IFTRUE 61679
61653: LD_INT 15
61655: DOUBLE
61656: EQUAL
61657: IFTRUE 61679
61659: LD_INT 11
61661: DOUBLE
61662: EQUAL
61663: IFTRUE 61679
61665: LD_INT 14
61667: DOUBLE
61668: EQUAL
61669: IFTRUE 61679
61671: LD_INT 10
61673: DOUBLE
61674: EQUAL
61675: IFTRUE 61679
61677: GO 61735
61679: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61680: LD_ADDR_VAR 0 9
61684: PUSH
61685: LD_VAR 0 41
61689: PUSH
61690: LD_VAR 0 42
61694: PUSH
61695: LD_VAR 0 43
61699: PUSH
61700: LD_VAR 0 44
61704: PUSH
61705: LD_VAR 0 45
61709: PUSH
61710: LD_VAR 0 46
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_VAR 0 4
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: ARRAY
61732: ST_TO_ADDR
61733: GO 61988
61735: LD_INT 36
61737: DOUBLE
61738: EQUAL
61739: IFTRUE 61743
61741: GO 61799
61743: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61744: LD_ADDR_VAR 0 9
61748: PUSH
61749: LD_VAR 0 47
61753: PUSH
61754: LD_VAR 0 48
61758: PUSH
61759: LD_VAR 0 49
61763: PUSH
61764: LD_VAR 0 50
61768: PUSH
61769: LD_VAR 0 51
61773: PUSH
61774: LD_VAR 0 52
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: PUSH
61787: LD_VAR 0 4
61791: PUSH
61792: LD_INT 1
61794: PLUS
61795: ARRAY
61796: ST_TO_ADDR
61797: GO 61988
61799: LD_INT 4
61801: DOUBLE
61802: EQUAL
61803: IFTRUE 61825
61805: LD_INT 5
61807: DOUBLE
61808: EQUAL
61809: IFTRUE 61825
61811: LD_INT 34
61813: DOUBLE
61814: EQUAL
61815: IFTRUE 61825
61817: LD_INT 37
61819: DOUBLE
61820: EQUAL
61821: IFTRUE 61825
61823: GO 61881
61825: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61826: LD_ADDR_VAR 0 9
61830: PUSH
61831: LD_VAR 0 53
61835: PUSH
61836: LD_VAR 0 54
61840: PUSH
61841: LD_VAR 0 55
61845: PUSH
61846: LD_VAR 0 56
61850: PUSH
61851: LD_VAR 0 57
61855: PUSH
61856: LD_VAR 0 58
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: PUSH
61869: LD_VAR 0 4
61873: PUSH
61874: LD_INT 1
61876: PLUS
61877: ARRAY
61878: ST_TO_ADDR
61879: GO 61988
61881: LD_INT 31
61883: DOUBLE
61884: EQUAL
61885: IFTRUE 61931
61887: LD_INT 32
61889: DOUBLE
61890: EQUAL
61891: IFTRUE 61931
61893: LD_INT 33
61895: DOUBLE
61896: EQUAL
61897: IFTRUE 61931
61899: LD_INT 27
61901: DOUBLE
61902: EQUAL
61903: IFTRUE 61931
61905: LD_INT 26
61907: DOUBLE
61908: EQUAL
61909: IFTRUE 61931
61911: LD_INT 28
61913: DOUBLE
61914: EQUAL
61915: IFTRUE 61931
61917: LD_INT 29
61919: DOUBLE
61920: EQUAL
61921: IFTRUE 61931
61923: LD_INT 30
61925: DOUBLE
61926: EQUAL
61927: IFTRUE 61931
61929: GO 61987
61931: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61932: LD_ADDR_VAR 0 9
61936: PUSH
61937: LD_VAR 0 59
61941: PUSH
61942: LD_VAR 0 60
61946: PUSH
61947: LD_VAR 0 61
61951: PUSH
61952: LD_VAR 0 62
61956: PUSH
61957: LD_VAR 0 63
61961: PUSH
61962: LD_VAR 0 64
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: LD_VAR 0 4
61979: PUSH
61980: LD_INT 1
61982: PLUS
61983: ARRAY
61984: ST_TO_ADDR
61985: GO 61988
61987: POP
// temp_list2 = [ ] ;
61988: LD_ADDR_VAR 0 10
61992: PUSH
61993: EMPTY
61994: ST_TO_ADDR
// for i in temp_list do
61995: LD_ADDR_VAR 0 8
61999: PUSH
62000: LD_VAR 0 9
62004: PUSH
62005: FOR_IN
62006: IFFALSE 62058
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62008: LD_ADDR_VAR 0 10
62012: PUSH
62013: LD_VAR 0 10
62017: PUSH
62018: LD_VAR 0 8
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PUSH
62027: LD_VAR 0 2
62031: PLUS
62032: PUSH
62033: LD_VAR 0 8
62037: PUSH
62038: LD_INT 2
62040: ARRAY
62041: PUSH
62042: LD_VAR 0 3
62046: PLUS
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: EMPTY
62053: LIST
62054: ADD
62055: ST_TO_ADDR
62056: GO 62005
62058: POP
62059: POP
// result = temp_list2 ;
62060: LD_ADDR_VAR 0 7
62064: PUSH
62065: LD_VAR 0 10
62069: ST_TO_ADDR
// end ;
62070: LD_VAR 0 7
62074: RET
// export function EnemyInRange ( unit , dist ) ; begin
62075: LD_INT 0
62077: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62078: LD_ADDR_VAR 0 3
62082: PUSH
62083: LD_VAR 0 1
62087: PPUSH
62088: CALL_OW 255
62092: PPUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: CALL_OW 250
62102: PPUSH
62103: LD_VAR 0 1
62107: PPUSH
62108: CALL_OW 251
62112: PPUSH
62113: LD_VAR 0 2
62117: PPUSH
62118: CALL 35448 0 4
62122: PUSH
62123: LD_INT 4
62125: ARRAY
62126: ST_TO_ADDR
// end ;
62127: LD_VAR 0 3
62131: RET
// export function PlayerSeeMe ( unit ) ; begin
62132: LD_INT 0
62134: PPUSH
// result := See ( your_side , unit ) ;
62135: LD_ADDR_VAR 0 2
62139: PUSH
62140: LD_OWVAR 2
62144: PPUSH
62145: LD_VAR 0 1
62149: PPUSH
62150: CALL_OW 292
62154: ST_TO_ADDR
// end ;
62155: LD_VAR 0 2
62159: RET
// export function ReverseDir ( unit ) ; begin
62160: LD_INT 0
62162: PPUSH
// if not unit then
62163: LD_VAR 0 1
62167: NOT
62168: IFFALSE 62172
// exit ;
62170: GO 62195
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62172: LD_ADDR_VAR 0 2
62176: PUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 254
62186: PUSH
62187: LD_INT 3
62189: PLUS
62190: PUSH
62191: LD_INT 6
62193: MOD
62194: ST_TO_ADDR
// end ;
62195: LD_VAR 0 2
62199: RET
// export function ReverseArray ( array ) ; var i ; begin
62200: LD_INT 0
62202: PPUSH
62203: PPUSH
// if not array then
62204: LD_VAR 0 1
62208: NOT
62209: IFFALSE 62213
// exit ;
62211: GO 62268
// result := [ ] ;
62213: LD_ADDR_VAR 0 2
62217: PUSH
62218: EMPTY
62219: ST_TO_ADDR
// for i := array downto 1 do
62220: LD_ADDR_VAR 0 3
62224: PUSH
62225: DOUBLE
62226: LD_VAR 0 1
62230: INC
62231: ST_TO_ADDR
62232: LD_INT 1
62234: PUSH
62235: FOR_DOWNTO
62236: IFFALSE 62266
// result := Join ( result , array [ i ] ) ;
62238: LD_ADDR_VAR 0 2
62242: PUSH
62243: LD_VAR 0 2
62247: PPUSH
62248: LD_VAR 0 1
62252: PUSH
62253: LD_VAR 0 3
62257: ARRAY
62258: PPUSH
62259: CALL 66911 0 2
62263: ST_TO_ADDR
62264: GO 62235
62266: POP
62267: POP
// end ;
62268: LD_VAR 0 2
62272: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62273: LD_INT 0
62275: PPUSH
62276: PPUSH
62277: PPUSH
62278: PPUSH
62279: PPUSH
62280: PPUSH
// if not unit or not hexes then
62281: LD_VAR 0 1
62285: NOT
62286: PUSH
62287: LD_VAR 0 2
62291: NOT
62292: OR
62293: IFFALSE 62297
// exit ;
62295: GO 62420
// dist := 9999 ;
62297: LD_ADDR_VAR 0 5
62301: PUSH
62302: LD_INT 9999
62304: ST_TO_ADDR
// for i = 1 to hexes do
62305: LD_ADDR_VAR 0 4
62309: PUSH
62310: DOUBLE
62311: LD_INT 1
62313: DEC
62314: ST_TO_ADDR
62315: LD_VAR 0 2
62319: PUSH
62320: FOR_TO
62321: IFFALSE 62408
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62323: LD_ADDR_VAR 0 6
62327: PUSH
62328: LD_VAR 0 1
62332: PPUSH
62333: LD_VAR 0 2
62337: PUSH
62338: LD_VAR 0 4
62342: ARRAY
62343: PUSH
62344: LD_INT 1
62346: ARRAY
62347: PPUSH
62348: LD_VAR 0 2
62352: PUSH
62353: LD_VAR 0 4
62357: ARRAY
62358: PUSH
62359: LD_INT 2
62361: ARRAY
62362: PPUSH
62363: CALL_OW 297
62367: ST_TO_ADDR
// if tdist < dist then
62368: LD_VAR 0 6
62372: PUSH
62373: LD_VAR 0 5
62377: LESS
62378: IFFALSE 62406
// begin hex := hexes [ i ] ;
62380: LD_ADDR_VAR 0 8
62384: PUSH
62385: LD_VAR 0 2
62389: PUSH
62390: LD_VAR 0 4
62394: ARRAY
62395: ST_TO_ADDR
// dist := tdist ;
62396: LD_ADDR_VAR 0 5
62400: PUSH
62401: LD_VAR 0 6
62405: ST_TO_ADDR
// end ; end ;
62406: GO 62320
62408: POP
62409: POP
// result := hex ;
62410: LD_ADDR_VAR 0 3
62414: PUSH
62415: LD_VAR 0 8
62419: ST_TO_ADDR
// end ;
62420: LD_VAR 0 3
62424: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62429: LD_VAR 0 1
62433: NOT
62434: PUSH
62435: LD_VAR 0 1
62439: PUSH
62440: LD_INT 21
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 23
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PPUSH
62464: CALL_OW 69
62468: IN
62469: NOT
62470: OR
62471: IFFALSE 62475
// exit ;
62473: GO 62522
// for i = 1 to 3 do
62475: LD_ADDR_VAR 0 3
62479: PUSH
62480: DOUBLE
62481: LD_INT 1
62483: DEC
62484: ST_TO_ADDR
62485: LD_INT 3
62487: PUSH
62488: FOR_TO
62489: IFFALSE 62520
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62491: LD_VAR 0 1
62495: PPUSH
62496: CALL_OW 250
62500: PPUSH
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 251
62510: PPUSH
62511: LD_INT 1
62513: PPUSH
62514: CALL_OW 453
62518: GO 62488
62520: POP
62521: POP
// end ;
62522: LD_VAR 0 2
62526: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62527: LD_INT 0
62529: PPUSH
62530: PPUSH
62531: PPUSH
62532: PPUSH
62533: PPUSH
62534: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62535: LD_VAR 0 1
62539: NOT
62540: PUSH
62541: LD_VAR 0 2
62545: NOT
62546: OR
62547: PUSH
62548: LD_VAR 0 1
62552: PPUSH
62553: CALL_OW 314
62557: OR
62558: IFFALSE 62562
// exit ;
62560: GO 63029
// if GetLives ( i ) < 250 then
62562: LD_VAR 0 4
62566: PPUSH
62567: CALL_OW 256
62571: PUSH
62572: LD_INT 250
62574: LESS
62575: IFFALSE 62588
// begin ComAutodestruct ( i ) ;
62577: LD_VAR 0 4
62581: PPUSH
62582: CALL 62425 0 1
// exit ;
62586: GO 63029
// end ; x := GetX ( enemy_unit ) ;
62588: LD_ADDR_VAR 0 7
62592: PUSH
62593: LD_VAR 0 2
62597: PPUSH
62598: CALL_OW 250
62602: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62603: LD_ADDR_VAR 0 8
62607: PUSH
62608: LD_VAR 0 2
62612: PPUSH
62613: CALL_OW 251
62617: ST_TO_ADDR
// if not x or not y then
62618: LD_VAR 0 7
62622: NOT
62623: PUSH
62624: LD_VAR 0 8
62628: NOT
62629: OR
62630: IFFALSE 62634
// exit ;
62632: GO 63029
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62634: LD_ADDR_VAR 0 6
62638: PUSH
62639: LD_VAR 0 7
62643: PPUSH
62644: LD_INT 0
62646: PPUSH
62647: LD_INT 4
62649: PPUSH
62650: CALL_OW 272
62654: PUSH
62655: LD_VAR 0 8
62659: PPUSH
62660: LD_INT 0
62662: PPUSH
62663: LD_INT 4
62665: PPUSH
62666: CALL_OW 273
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 7
62679: PPUSH
62680: LD_INT 1
62682: PPUSH
62683: LD_INT 4
62685: PPUSH
62686: CALL_OW 272
62690: PUSH
62691: LD_VAR 0 8
62695: PPUSH
62696: LD_INT 1
62698: PPUSH
62699: LD_INT 4
62701: PPUSH
62702: CALL_OW 273
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_VAR 0 7
62715: PPUSH
62716: LD_INT 2
62718: PPUSH
62719: LD_INT 4
62721: PPUSH
62722: CALL_OW 272
62726: PUSH
62727: LD_VAR 0 8
62731: PPUSH
62732: LD_INT 2
62734: PPUSH
62735: LD_INT 4
62737: PPUSH
62738: CALL_OW 273
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 7
62751: PPUSH
62752: LD_INT 3
62754: PPUSH
62755: LD_INT 4
62757: PPUSH
62758: CALL_OW 272
62762: PUSH
62763: LD_VAR 0 8
62767: PPUSH
62768: LD_INT 3
62770: PPUSH
62771: LD_INT 4
62773: PPUSH
62774: CALL_OW 273
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_VAR 0 7
62787: PPUSH
62788: LD_INT 4
62790: PPUSH
62791: LD_INT 4
62793: PPUSH
62794: CALL_OW 272
62798: PUSH
62799: LD_VAR 0 8
62803: PPUSH
62804: LD_INT 4
62806: PPUSH
62807: LD_INT 4
62809: PPUSH
62810: CALL_OW 273
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_VAR 0 7
62823: PPUSH
62824: LD_INT 5
62826: PPUSH
62827: LD_INT 4
62829: PPUSH
62830: CALL_OW 272
62834: PUSH
62835: LD_VAR 0 8
62839: PPUSH
62840: LD_INT 5
62842: PPUSH
62843: LD_INT 4
62845: PPUSH
62846: CALL_OW 273
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: ST_TO_ADDR
// for i = tmp downto 1 do
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: DOUBLE
62869: LD_VAR 0 6
62873: INC
62874: ST_TO_ADDR
62875: LD_INT 1
62877: PUSH
62878: FOR_DOWNTO
62879: IFFALSE 62980
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62881: LD_VAR 0 6
62885: PUSH
62886: LD_VAR 0 4
62890: ARRAY
62891: PUSH
62892: LD_INT 1
62894: ARRAY
62895: PPUSH
62896: LD_VAR 0 6
62900: PUSH
62901: LD_VAR 0 4
62905: ARRAY
62906: PUSH
62907: LD_INT 2
62909: ARRAY
62910: PPUSH
62911: CALL_OW 488
62915: NOT
62916: PUSH
62917: LD_VAR 0 6
62921: PUSH
62922: LD_VAR 0 4
62926: ARRAY
62927: PUSH
62928: LD_INT 1
62930: ARRAY
62931: PPUSH
62932: LD_VAR 0 6
62936: PUSH
62937: LD_VAR 0 4
62941: ARRAY
62942: PUSH
62943: LD_INT 2
62945: ARRAY
62946: PPUSH
62947: CALL_OW 428
62951: PUSH
62952: LD_INT 0
62954: NONEQUAL
62955: OR
62956: IFFALSE 62978
// tmp := Delete ( tmp , i ) ;
62958: LD_ADDR_VAR 0 6
62962: PUSH
62963: LD_VAR 0 6
62967: PPUSH
62968: LD_VAR 0 4
62972: PPUSH
62973: CALL_OW 3
62977: ST_TO_ADDR
62978: GO 62878
62980: POP
62981: POP
// j := GetClosestHex ( unit , tmp ) ;
62982: LD_ADDR_VAR 0 5
62986: PUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: LD_VAR 0 6
62996: PPUSH
62997: CALL 62273 0 2
63001: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63002: LD_VAR 0 1
63006: PPUSH
63007: LD_VAR 0 5
63011: PUSH
63012: LD_INT 1
63014: ARRAY
63015: PPUSH
63016: LD_VAR 0 5
63020: PUSH
63021: LD_INT 2
63023: ARRAY
63024: PPUSH
63025: CALL_OW 111
// end ;
63029: LD_VAR 0 3
63033: RET
// export function PrepareApemanSoldier ( ) ; begin
63034: LD_INT 0
63036: PPUSH
// uc_nation := 0 ;
63037: LD_ADDR_OWVAR 21
63041: PUSH
63042: LD_INT 0
63044: ST_TO_ADDR
// hc_sex := sex_male ;
63045: LD_ADDR_OWVAR 27
63049: PUSH
63050: LD_INT 1
63052: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63053: LD_ADDR_OWVAR 28
63057: PUSH
63058: LD_INT 15
63060: ST_TO_ADDR
// hc_gallery :=  ;
63061: LD_ADDR_OWVAR 33
63065: PUSH
63066: LD_STRING 
63068: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63069: LD_ADDR_OWVAR 31
63073: PUSH
63074: LD_INT 0
63076: PPUSH
63077: LD_INT 3
63079: PPUSH
63080: CALL_OW 12
63084: PUSH
63085: LD_INT 0
63087: PPUSH
63088: LD_INT 3
63090: PPUSH
63091: CALL_OW 12
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: ST_TO_ADDR
// end ;
63108: LD_VAR 0 1
63112: RET
// export function PrepareApemanEngineer ( ) ; begin
63113: LD_INT 0
63115: PPUSH
// uc_nation := 0 ;
63116: LD_ADDR_OWVAR 21
63120: PUSH
63121: LD_INT 0
63123: ST_TO_ADDR
// hc_sex := sex_male ;
63124: LD_ADDR_OWVAR 27
63128: PUSH
63129: LD_INT 1
63131: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63132: LD_ADDR_OWVAR 28
63136: PUSH
63137: LD_INT 16
63139: ST_TO_ADDR
// hc_gallery :=  ;
63140: LD_ADDR_OWVAR 33
63144: PUSH
63145: LD_STRING 
63147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63148: LD_ADDR_OWVAR 31
63152: PUSH
63153: LD_INT 0
63155: PPUSH
63156: LD_INT 3
63158: PPUSH
63159: CALL_OW 12
63163: PUSH
63164: LD_INT 0
63166: PPUSH
63167: LD_INT 3
63169: PPUSH
63170: CALL_OW 12
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// end ;
63187: LD_VAR 0 1
63191: RET
// export function PrepareApeman ( agressivity ) ; begin
63192: LD_INT 0
63194: PPUSH
// uc_side := 0 ;
63195: LD_ADDR_OWVAR 20
63199: PUSH
63200: LD_INT 0
63202: ST_TO_ADDR
// uc_nation := 0 ;
63203: LD_ADDR_OWVAR 21
63207: PUSH
63208: LD_INT 0
63210: ST_TO_ADDR
// hc_sex := sex_male ;
63211: LD_ADDR_OWVAR 27
63215: PUSH
63216: LD_INT 1
63218: ST_TO_ADDR
// hc_class := class_apeman ;
63219: LD_ADDR_OWVAR 28
63223: PUSH
63224: LD_INT 12
63226: ST_TO_ADDR
// hc_gallery :=  ;
63227: LD_ADDR_OWVAR 33
63231: PUSH
63232: LD_STRING 
63234: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63235: LD_ADDR_OWVAR 35
63239: PUSH
63240: LD_VAR 0 1
63244: NEG
63245: PPUSH
63246: LD_VAR 0 1
63250: PPUSH
63251: CALL_OW 12
63255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63256: LD_ADDR_OWVAR 31
63260: PUSH
63261: LD_INT 0
63263: PPUSH
63264: LD_INT 3
63266: PPUSH
63267: CALL_OW 12
63271: PUSH
63272: LD_INT 0
63274: PPUSH
63275: LD_INT 3
63277: PPUSH
63278: CALL_OW 12
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: ST_TO_ADDR
// end ;
63295: LD_VAR 0 2
63299: RET
// export function PrepareTiger ( agressivity ) ; begin
63300: LD_INT 0
63302: PPUSH
// uc_side := 0 ;
63303: LD_ADDR_OWVAR 20
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// uc_nation := 0 ;
63311: LD_ADDR_OWVAR 21
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// hc_class := class_tiger ;
63319: LD_ADDR_OWVAR 28
63323: PUSH
63324: LD_INT 14
63326: ST_TO_ADDR
// hc_gallery :=  ;
63327: LD_ADDR_OWVAR 33
63331: PUSH
63332: LD_STRING 
63334: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63335: LD_ADDR_OWVAR 35
63339: PUSH
63340: LD_VAR 0 1
63344: NEG
63345: PPUSH
63346: LD_VAR 0 1
63350: PPUSH
63351: CALL_OW 12
63355: ST_TO_ADDR
// end ;
63356: LD_VAR 0 2
63360: RET
// export function PrepareEnchidna ( ) ; begin
63361: LD_INT 0
63363: PPUSH
// uc_side := 0 ;
63364: LD_ADDR_OWVAR 20
63368: PUSH
63369: LD_INT 0
63371: ST_TO_ADDR
// uc_nation := 0 ;
63372: LD_ADDR_OWVAR 21
63376: PUSH
63377: LD_INT 0
63379: ST_TO_ADDR
// hc_class := class_baggie ;
63380: LD_ADDR_OWVAR 28
63384: PUSH
63385: LD_INT 13
63387: ST_TO_ADDR
// hc_gallery :=  ;
63388: LD_ADDR_OWVAR 33
63392: PUSH
63393: LD_STRING 
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 1
63400: RET
// export function PrepareFrog ( ) ; begin
63401: LD_INT 0
63403: PPUSH
// uc_side := 0 ;
63404: LD_ADDR_OWVAR 20
63408: PUSH
63409: LD_INT 0
63411: ST_TO_ADDR
// uc_nation := 0 ;
63412: LD_ADDR_OWVAR 21
63416: PUSH
63417: LD_INT 0
63419: ST_TO_ADDR
// hc_class := class_frog ;
63420: LD_ADDR_OWVAR 28
63424: PUSH
63425: LD_INT 19
63427: ST_TO_ADDR
// hc_gallery :=  ;
63428: LD_ADDR_OWVAR 33
63432: PUSH
63433: LD_STRING 
63435: ST_TO_ADDR
// end ;
63436: LD_VAR 0 1
63440: RET
// export function PrepareFish ( ) ; begin
63441: LD_INT 0
63443: PPUSH
// uc_side := 0 ;
63444: LD_ADDR_OWVAR 20
63448: PUSH
63449: LD_INT 0
63451: ST_TO_ADDR
// uc_nation := 0 ;
63452: LD_ADDR_OWVAR 21
63456: PUSH
63457: LD_INT 0
63459: ST_TO_ADDR
// hc_class := class_fish ;
63460: LD_ADDR_OWVAR 28
63464: PUSH
63465: LD_INT 20
63467: ST_TO_ADDR
// hc_gallery :=  ;
63468: LD_ADDR_OWVAR 33
63472: PUSH
63473: LD_STRING 
63475: ST_TO_ADDR
// end ;
63476: LD_VAR 0 1
63480: RET
// export function PrepareBird ( ) ; begin
63481: LD_INT 0
63483: PPUSH
// uc_side := 0 ;
63484: LD_ADDR_OWVAR 20
63488: PUSH
63489: LD_INT 0
63491: ST_TO_ADDR
// uc_nation := 0 ;
63492: LD_ADDR_OWVAR 21
63496: PUSH
63497: LD_INT 0
63499: ST_TO_ADDR
// hc_class := class_phororhacos ;
63500: LD_ADDR_OWVAR 28
63504: PUSH
63505: LD_INT 18
63507: ST_TO_ADDR
// hc_gallery :=  ;
63508: LD_ADDR_OWVAR 33
63512: PUSH
63513: LD_STRING 
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 1
63520: RET
// export function PrepareHorse ( ) ; begin
63521: LD_INT 0
63523: PPUSH
// uc_side := 0 ;
63524: LD_ADDR_OWVAR 20
63528: PUSH
63529: LD_INT 0
63531: ST_TO_ADDR
// uc_nation := 0 ;
63532: LD_ADDR_OWVAR 21
63536: PUSH
63537: LD_INT 0
63539: ST_TO_ADDR
// hc_class := class_horse ;
63540: LD_ADDR_OWVAR 28
63544: PUSH
63545: LD_INT 21
63547: ST_TO_ADDR
// hc_gallery :=  ;
63548: LD_ADDR_OWVAR 33
63552: PUSH
63553: LD_STRING 
63555: ST_TO_ADDR
// end ;
63556: LD_VAR 0 1
63560: RET
// export function PrepareMastodont ( ) ; begin
63561: LD_INT 0
63563: PPUSH
// uc_side := 0 ;
63564: LD_ADDR_OWVAR 20
63568: PUSH
63569: LD_INT 0
63571: ST_TO_ADDR
// uc_nation := 0 ;
63572: LD_ADDR_OWVAR 21
63576: PUSH
63577: LD_INT 0
63579: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63580: LD_ADDR_OWVAR 37
63584: PUSH
63585: LD_INT 31
63587: ST_TO_ADDR
// vc_control := control_rider ;
63588: LD_ADDR_OWVAR 38
63592: PUSH
63593: LD_INT 4
63595: ST_TO_ADDR
// end ;
63596: LD_VAR 0 1
63600: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63601: LD_INT 0
63603: PPUSH
63604: PPUSH
63605: PPUSH
// uc_side = 0 ;
63606: LD_ADDR_OWVAR 20
63610: PUSH
63611: LD_INT 0
63613: ST_TO_ADDR
// uc_nation = 0 ;
63614: LD_ADDR_OWVAR 21
63618: PUSH
63619: LD_INT 0
63621: ST_TO_ADDR
// InitHc_All ( ) ;
63622: CALL_OW 584
// InitVc ;
63626: CALL_OW 20
// if mastodonts then
63630: LD_VAR 0 6
63634: IFFALSE 63701
// for i = 1 to mastodonts do
63636: LD_ADDR_VAR 0 11
63640: PUSH
63641: DOUBLE
63642: LD_INT 1
63644: DEC
63645: ST_TO_ADDR
63646: LD_VAR 0 6
63650: PUSH
63651: FOR_TO
63652: IFFALSE 63699
// begin vc_chassis := 31 ;
63654: LD_ADDR_OWVAR 37
63658: PUSH
63659: LD_INT 31
63661: ST_TO_ADDR
// vc_control := control_rider ;
63662: LD_ADDR_OWVAR 38
63666: PUSH
63667: LD_INT 4
63669: ST_TO_ADDR
// animal := CreateVehicle ;
63670: LD_ADDR_VAR 0 12
63674: PUSH
63675: CALL_OW 45
63679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63680: LD_VAR 0 12
63684: PPUSH
63685: LD_VAR 0 8
63689: PPUSH
63690: LD_INT 0
63692: PPUSH
63693: CALL 65829 0 3
// end ;
63697: GO 63651
63699: POP
63700: POP
// if horses then
63701: LD_VAR 0 5
63705: IFFALSE 63772
// for i = 1 to horses do
63707: LD_ADDR_VAR 0 11
63711: PUSH
63712: DOUBLE
63713: LD_INT 1
63715: DEC
63716: ST_TO_ADDR
63717: LD_VAR 0 5
63721: PUSH
63722: FOR_TO
63723: IFFALSE 63770
// begin hc_class := 21 ;
63725: LD_ADDR_OWVAR 28
63729: PUSH
63730: LD_INT 21
63732: ST_TO_ADDR
// hc_gallery :=  ;
63733: LD_ADDR_OWVAR 33
63737: PUSH
63738: LD_STRING 
63740: ST_TO_ADDR
// animal := CreateHuman ;
63741: LD_ADDR_VAR 0 12
63745: PUSH
63746: CALL_OW 44
63750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63751: LD_VAR 0 12
63755: PPUSH
63756: LD_VAR 0 8
63760: PPUSH
63761: LD_INT 0
63763: PPUSH
63764: CALL 65829 0 3
// end ;
63768: GO 63722
63770: POP
63771: POP
// if birds then
63772: LD_VAR 0 1
63776: IFFALSE 63843
// for i = 1 to birds do
63778: LD_ADDR_VAR 0 11
63782: PUSH
63783: DOUBLE
63784: LD_INT 1
63786: DEC
63787: ST_TO_ADDR
63788: LD_VAR 0 1
63792: PUSH
63793: FOR_TO
63794: IFFALSE 63841
// begin hc_class := 18 ;
63796: LD_ADDR_OWVAR 28
63800: PUSH
63801: LD_INT 18
63803: ST_TO_ADDR
// hc_gallery =  ;
63804: LD_ADDR_OWVAR 33
63808: PUSH
63809: LD_STRING 
63811: ST_TO_ADDR
// animal := CreateHuman ;
63812: LD_ADDR_VAR 0 12
63816: PUSH
63817: CALL_OW 44
63821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63822: LD_VAR 0 12
63826: PPUSH
63827: LD_VAR 0 8
63831: PPUSH
63832: LD_INT 0
63834: PPUSH
63835: CALL 65829 0 3
// end ;
63839: GO 63793
63841: POP
63842: POP
// if tigers then
63843: LD_VAR 0 2
63847: IFFALSE 63931
// for i = 1 to tigers do
63849: LD_ADDR_VAR 0 11
63853: PUSH
63854: DOUBLE
63855: LD_INT 1
63857: DEC
63858: ST_TO_ADDR
63859: LD_VAR 0 2
63863: PUSH
63864: FOR_TO
63865: IFFALSE 63929
// begin hc_class = class_tiger ;
63867: LD_ADDR_OWVAR 28
63871: PUSH
63872: LD_INT 14
63874: ST_TO_ADDR
// hc_gallery =  ;
63875: LD_ADDR_OWVAR 33
63879: PUSH
63880: LD_STRING 
63882: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63883: LD_ADDR_OWVAR 35
63887: PUSH
63888: LD_INT 7
63890: NEG
63891: PPUSH
63892: LD_INT 7
63894: PPUSH
63895: CALL_OW 12
63899: ST_TO_ADDR
// animal := CreateHuman ;
63900: LD_ADDR_VAR 0 12
63904: PUSH
63905: CALL_OW 44
63909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63910: LD_VAR 0 12
63914: PPUSH
63915: LD_VAR 0 8
63919: PPUSH
63920: LD_INT 0
63922: PPUSH
63923: CALL 65829 0 3
// end ;
63927: GO 63864
63929: POP
63930: POP
// if apemans then
63931: LD_VAR 0 3
63935: IFFALSE 64058
// for i = 1 to apemans do
63937: LD_ADDR_VAR 0 11
63941: PUSH
63942: DOUBLE
63943: LD_INT 1
63945: DEC
63946: ST_TO_ADDR
63947: LD_VAR 0 3
63951: PUSH
63952: FOR_TO
63953: IFFALSE 64056
// begin hc_class = class_apeman ;
63955: LD_ADDR_OWVAR 28
63959: PUSH
63960: LD_INT 12
63962: ST_TO_ADDR
// hc_gallery =  ;
63963: LD_ADDR_OWVAR 33
63967: PUSH
63968: LD_STRING 
63970: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63971: LD_ADDR_OWVAR 35
63975: PUSH
63976: LD_INT 2
63978: NEG
63979: PPUSH
63980: LD_INT 2
63982: PPUSH
63983: CALL_OW 12
63987: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63988: LD_ADDR_OWVAR 31
63992: PUSH
63993: LD_INT 1
63995: PPUSH
63996: LD_INT 3
63998: PPUSH
63999: CALL_OW 12
64003: PUSH
64004: LD_INT 1
64006: PPUSH
64007: LD_INT 3
64009: PPUSH
64010: CALL_OW 12
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: ST_TO_ADDR
// animal := CreateHuman ;
64027: LD_ADDR_VAR 0 12
64031: PUSH
64032: CALL_OW 44
64036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64037: LD_VAR 0 12
64041: PPUSH
64042: LD_VAR 0 8
64046: PPUSH
64047: LD_INT 0
64049: PPUSH
64050: CALL 65829 0 3
// end ;
64054: GO 63952
64056: POP
64057: POP
// if enchidnas then
64058: LD_VAR 0 4
64062: IFFALSE 64129
// for i = 1 to enchidnas do
64064: LD_ADDR_VAR 0 11
64068: PUSH
64069: DOUBLE
64070: LD_INT 1
64072: DEC
64073: ST_TO_ADDR
64074: LD_VAR 0 4
64078: PUSH
64079: FOR_TO
64080: IFFALSE 64127
// begin hc_class = 13 ;
64082: LD_ADDR_OWVAR 28
64086: PUSH
64087: LD_INT 13
64089: ST_TO_ADDR
// hc_gallery =  ;
64090: LD_ADDR_OWVAR 33
64094: PUSH
64095: LD_STRING 
64097: ST_TO_ADDR
// animal := CreateHuman ;
64098: LD_ADDR_VAR 0 12
64102: PUSH
64103: CALL_OW 44
64107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64108: LD_VAR 0 12
64112: PPUSH
64113: LD_VAR 0 8
64117: PPUSH
64118: LD_INT 0
64120: PPUSH
64121: CALL 65829 0 3
// end ;
64125: GO 64079
64127: POP
64128: POP
// if fishes then
64129: LD_VAR 0 7
64133: IFFALSE 64200
// for i = 1 to fishes do
64135: LD_ADDR_VAR 0 11
64139: PUSH
64140: DOUBLE
64141: LD_INT 1
64143: DEC
64144: ST_TO_ADDR
64145: LD_VAR 0 7
64149: PUSH
64150: FOR_TO
64151: IFFALSE 64198
// begin hc_class = 20 ;
64153: LD_ADDR_OWVAR 28
64157: PUSH
64158: LD_INT 20
64160: ST_TO_ADDR
// hc_gallery =  ;
64161: LD_ADDR_OWVAR 33
64165: PUSH
64166: LD_STRING 
64168: ST_TO_ADDR
// animal := CreateHuman ;
64169: LD_ADDR_VAR 0 12
64173: PUSH
64174: CALL_OW 44
64178: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64179: LD_VAR 0 12
64183: PPUSH
64184: LD_VAR 0 9
64188: PPUSH
64189: LD_INT 0
64191: PPUSH
64192: CALL 65829 0 3
// end ;
64196: GO 64150
64198: POP
64199: POP
// end ;
64200: LD_VAR 0 10
64204: RET
// export function WantHeal ( sci , unit ) ; begin
64205: LD_INT 0
64207: PPUSH
// if GetTaskList ( sci ) > 0 then
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 437
64217: PUSH
64218: LD_INT 0
64220: GREATER
64221: IFFALSE 64291
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64223: LD_VAR 0 1
64227: PPUSH
64228: CALL_OW 437
64232: PUSH
64233: LD_INT 1
64235: ARRAY
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: PUSH
64241: LD_STRING l
64243: EQUAL
64244: PUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: CALL_OW 437
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: PUSH
64259: LD_INT 4
64261: ARRAY
64262: PUSH
64263: LD_VAR 0 2
64267: EQUAL
64268: AND
64269: IFFALSE 64281
// result := true else
64271: LD_ADDR_VAR 0 3
64275: PUSH
64276: LD_INT 1
64278: ST_TO_ADDR
64279: GO 64289
// result := false ;
64281: LD_ADDR_VAR 0 3
64285: PUSH
64286: LD_INT 0
64288: ST_TO_ADDR
// end else
64289: GO 64299
// result := false ;
64291: LD_ADDR_VAR 0 3
64295: PUSH
64296: LD_INT 0
64298: ST_TO_ADDR
// end ;
64299: LD_VAR 0 3
64303: RET
// export function HealTarget ( sci ) ; begin
64304: LD_INT 0
64306: PPUSH
// if not sci then
64307: LD_VAR 0 1
64311: NOT
64312: IFFALSE 64316
// exit ;
64314: GO 64381
// result := 0 ;
64316: LD_ADDR_VAR 0 2
64320: PUSH
64321: LD_INT 0
64323: ST_TO_ADDR
// if GetTaskList ( sci ) then
64324: LD_VAR 0 1
64328: PPUSH
64329: CALL_OW 437
64333: IFFALSE 64381
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64335: LD_VAR 0 1
64339: PPUSH
64340: CALL_OW 437
64344: PUSH
64345: LD_INT 1
64347: ARRAY
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PUSH
64353: LD_STRING l
64355: EQUAL
64356: IFFALSE 64381
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64358: LD_ADDR_VAR 0 2
64362: PUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 437
64372: PUSH
64373: LD_INT 1
64375: ARRAY
64376: PUSH
64377: LD_INT 4
64379: ARRAY
64380: ST_TO_ADDR
// end ;
64381: LD_VAR 0 2
64385: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64386: LD_INT 0
64388: PPUSH
64389: PPUSH
64390: PPUSH
64391: PPUSH
// if not base_units then
64392: LD_VAR 0 1
64396: NOT
64397: IFFALSE 64401
// exit ;
64399: GO 64488
// result := false ;
64401: LD_ADDR_VAR 0 2
64405: PUSH
64406: LD_INT 0
64408: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64409: LD_ADDR_VAR 0 5
64413: PUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: LD_INT 21
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PPUSH
64429: CALL_OW 72
64433: ST_TO_ADDR
// if not tmp then
64434: LD_VAR 0 5
64438: NOT
64439: IFFALSE 64443
// exit ;
64441: GO 64488
// for i in tmp do
64443: LD_ADDR_VAR 0 3
64447: PUSH
64448: LD_VAR 0 5
64452: PUSH
64453: FOR_IN
64454: IFFALSE 64486
// begin result := EnemyInRange ( i , 22 ) ;
64456: LD_ADDR_VAR 0 2
64460: PUSH
64461: LD_VAR 0 3
64465: PPUSH
64466: LD_INT 22
64468: PPUSH
64469: CALL 62075 0 2
64473: ST_TO_ADDR
// if result then
64474: LD_VAR 0 2
64478: IFFALSE 64484
// exit ;
64480: POP
64481: POP
64482: GO 64488
// end ;
64484: GO 64453
64486: POP
64487: POP
// end ;
64488: LD_VAR 0 2
64492: RET
// export function FilterByTag ( units , tag ) ; begin
64493: LD_INT 0
64495: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64496: LD_ADDR_VAR 0 3
64500: PUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: LD_INT 120
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PPUSH
64518: CALL_OW 72
64522: ST_TO_ADDR
// end ;
64523: LD_VAR 0 3
64527: RET
// export function IsDriver ( un ) ; begin
64528: LD_INT 0
64530: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64531: LD_ADDR_VAR 0 2
64535: PUSH
64536: LD_VAR 0 1
64540: PUSH
64541: LD_INT 55
64543: PUSH
64544: EMPTY
64545: LIST
64546: PPUSH
64547: CALL_OW 69
64551: IN
64552: ST_TO_ADDR
// end ;
64553: LD_VAR 0 2
64557: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
// list := [ ] ;
64562: LD_ADDR_VAR 0 5
64566: PUSH
64567: EMPTY
64568: ST_TO_ADDR
// case d of 0 :
64569: LD_VAR 0 3
64573: PUSH
64574: LD_INT 0
64576: DOUBLE
64577: EQUAL
64578: IFTRUE 64582
64580: GO 64715
64582: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64583: LD_ADDR_VAR 0 5
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 4
64595: MINUS
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: LD_INT 4
64604: MINUS
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 1
64618: PUSH
64619: LD_INT 3
64621: MINUS
64622: PUSH
64623: LD_VAR 0 2
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_INT 4
64643: PLUS
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: LD_INT 3
64665: PLUS
64666: PUSH
64667: LD_VAR 0 2
64671: PUSH
64672: LD_INT 3
64674: PLUS
64675: PUSH
64676: LD_INT 5
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_VAR 0 2
64693: PUSH
64694: LD_INT 4
64696: PLUS
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: ST_TO_ADDR
// end ; 1 :
64713: GO 65413
64715: LD_INT 1
64717: DOUBLE
64718: EQUAL
64719: IFTRUE 64723
64721: GO 64856
64723: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_VAR 0 2
64738: PUSH
64739: LD_INT 4
64741: MINUS
64742: PUSH
64743: LD_INT 3
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 3
64758: MINUS
64759: PUSH
64760: LD_VAR 0 2
64764: PUSH
64765: LD_INT 3
64767: MINUS
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: PUSH
64777: LD_VAR 0 1
64781: PUSH
64782: LD_INT 4
64784: MINUS
64785: PUSH
64786: LD_VAR 0 2
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: LD_VAR 0 1
64803: PUSH
64804: LD_VAR 0 2
64808: PUSH
64809: LD_INT 3
64811: PLUS
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: PUSH
64821: LD_VAR 0 1
64825: PUSH
64826: LD_INT 4
64828: PLUS
64829: PUSH
64830: LD_VAR 0 2
64834: PUSH
64835: LD_INT 4
64837: PLUS
64838: PUSH
64839: LD_INT 5
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: ST_TO_ADDR
// end ; 2 :
64854: GO 65413
64856: LD_INT 2
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64864
64862: GO 64993
64864: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64865: LD_ADDR_VAR 0 5
64869: PUSH
64870: LD_VAR 0 1
64874: PUSH
64875: LD_VAR 0 2
64879: PUSH
64880: LD_INT 3
64882: MINUS
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PUSH
64892: LD_VAR 0 1
64896: PUSH
64897: LD_INT 4
64899: PLUS
64900: PUSH
64901: LD_VAR 0 2
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: PUSH
64914: LD_VAR 0 1
64918: PUSH
64919: LD_VAR 0 2
64923: PUSH
64924: LD_INT 4
64926: PLUS
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: PUSH
64936: LD_VAR 0 1
64940: PUSH
64941: LD_INT 3
64943: MINUS
64944: PUSH
64945: LD_VAR 0 2
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: PUSH
64958: LD_VAR 0 1
64962: PUSH
64963: LD_INT 4
64965: MINUS
64966: PUSH
64967: LD_VAR 0 2
64971: PUSH
64972: LD_INT 4
64974: MINUS
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// end ; 3 :
64991: GO 65413
64993: LD_INT 3
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65001
64999: GO 65134
65001: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65002: LD_ADDR_VAR 0 5
65006: PUSH
65007: LD_VAR 0 1
65011: PUSH
65012: LD_INT 3
65014: PLUS
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 4
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: PUSH
65029: LD_VAR 0 1
65033: PUSH
65034: LD_INT 4
65036: PLUS
65037: PUSH
65038: LD_VAR 0 2
65042: PUSH
65043: LD_INT 4
65045: PLUS
65046: PUSH
65047: LD_INT 5
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: PUSH
65055: LD_VAR 0 1
65059: PUSH
65060: LD_INT 4
65062: MINUS
65063: PUSH
65064: LD_VAR 0 2
65068: PUSH
65069: LD_INT 1
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: PUSH
65077: LD_VAR 0 1
65081: PUSH
65082: LD_VAR 0 2
65086: PUSH
65087: LD_INT 4
65089: MINUS
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: PUSH
65099: LD_VAR 0 1
65103: PUSH
65104: LD_INT 3
65106: MINUS
65107: PUSH
65108: LD_VAR 0 2
65112: PUSH
65113: LD_INT 3
65115: MINUS
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: ST_TO_ADDR
// end ; 4 :
65132: GO 65413
65134: LD_INT 4
65136: DOUBLE
65137: EQUAL
65138: IFTRUE 65142
65140: GO 65275
65142: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65143: LD_ADDR_VAR 0 5
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_VAR 0 2
65157: PUSH
65158: LD_INT 4
65160: PLUS
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_INT 3
65177: PLUS
65178: PUSH
65179: LD_VAR 0 2
65183: PUSH
65184: LD_INT 3
65186: PLUS
65187: PUSH
65188: LD_INT 5
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 4
65203: PLUS
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 4
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: PUSH
65218: LD_VAR 0 1
65222: PUSH
65223: LD_VAR 0 2
65227: PUSH
65228: LD_INT 3
65230: MINUS
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: PUSH
65240: LD_VAR 0 1
65244: PUSH
65245: LD_INT 4
65247: MINUS
65248: PUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_INT 4
65256: MINUS
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: ST_TO_ADDR
// end ; 5 :
65273: GO 65413
65275: LD_INT 5
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65283
65281: GO 65412
65283: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65284: LD_ADDR_VAR 0 5
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 4
65296: MINUS
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_VAR 0 2
65320: PUSH
65321: LD_INT 4
65323: MINUS
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: PUSH
65333: LD_VAR 0 1
65337: PUSH
65338: LD_INT 4
65340: PLUS
65341: PUSH
65342: LD_VAR 0 2
65346: PUSH
65347: LD_INT 4
65349: PLUS
65350: PUSH
65351: LD_INT 5
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: LD_INT 3
65366: PLUS
65367: PUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: PUSH
65381: LD_VAR 0 1
65385: PUSH
65386: LD_VAR 0 2
65390: PUSH
65391: LD_INT 3
65393: PLUS
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: ST_TO_ADDR
// end ; end ;
65410: GO 65413
65412: POP
// result := list ;
65413: LD_ADDR_VAR 0 4
65417: PUSH
65418: LD_VAR 0 5
65422: ST_TO_ADDR
// end ;
65423: LD_VAR 0 4
65427: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65428: LD_INT 0
65430: PPUSH
65431: PPUSH
65432: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65433: LD_VAR 0 1
65437: NOT
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: IN
65462: NOT
65463: OR
65464: IFFALSE 65468
// exit ;
65466: GO 65551
// tmp := [ ] ;
65468: LD_ADDR_VAR 0 5
65472: PUSH
65473: EMPTY
65474: ST_TO_ADDR
// for i in units do
65475: LD_ADDR_VAR 0 4
65479: PUSH
65480: LD_VAR 0 1
65484: PUSH
65485: FOR_IN
65486: IFFALSE 65520
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65488: LD_ADDR_VAR 0 5
65492: PUSH
65493: LD_VAR 0 5
65497: PPUSH
65498: LD_VAR 0 4
65502: PPUSH
65503: LD_VAR 0 2
65507: PPUSH
65508: CALL_OW 259
65512: PPUSH
65513: CALL 66911 0 2
65517: ST_TO_ADDR
65518: GO 65485
65520: POP
65521: POP
// if not tmp then
65522: LD_VAR 0 5
65526: NOT
65527: IFFALSE 65531
// exit ;
65529: GO 65551
// result := SortListByListDesc ( units , tmp ) ;
65531: LD_ADDR_VAR 0 3
65535: PUSH
65536: LD_VAR 0 1
65540: PPUSH
65541: LD_VAR 0 5
65545: PPUSH
65546: CALL_OW 77
65550: ST_TO_ADDR
// end ;
65551: LD_VAR 0 3
65555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65556: LD_INT 0
65558: PPUSH
65559: PPUSH
65560: PPUSH
// result := false ;
65561: LD_ADDR_VAR 0 3
65565: PUSH
65566: LD_INT 0
65568: ST_TO_ADDR
// if not building then
65569: LD_VAR 0 2
65573: NOT
65574: IFFALSE 65578
// exit ;
65576: GO 65716
// x := GetX ( building ) ;
65578: LD_ADDR_VAR 0 4
65582: PUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: CALL_OW 250
65592: ST_TO_ADDR
// y := GetY ( building ) ;
65593: LD_ADDR_VAR 0 5
65597: PUSH
65598: LD_VAR 0 2
65602: PPUSH
65603: CALL_OW 251
65607: ST_TO_ADDR
// if not x or not y then
65608: LD_VAR 0 4
65612: NOT
65613: PUSH
65614: LD_VAR 0 5
65618: NOT
65619: OR
65620: IFFALSE 65624
// exit ;
65622: GO 65716
// if GetTaskList ( unit ) then
65624: LD_VAR 0 1
65628: PPUSH
65629: CALL_OW 437
65633: IFFALSE 65716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65635: LD_STRING e
65637: PUSH
65638: LD_VAR 0 1
65642: PPUSH
65643: CALL_OW 437
65647: PUSH
65648: LD_INT 1
65650: ARRAY
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: EQUAL
65656: PUSH
65657: LD_VAR 0 4
65661: PUSH
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 437
65671: PUSH
65672: LD_INT 1
65674: ARRAY
65675: PUSH
65676: LD_INT 2
65678: ARRAY
65679: EQUAL
65680: AND
65681: PUSH
65682: LD_VAR 0 5
65686: PUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL_OW 437
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_INT 3
65703: ARRAY
65704: EQUAL
65705: AND
65706: IFFALSE 65716
// result := true end ;
65708: LD_ADDR_VAR 0 3
65712: PUSH
65713: LD_INT 1
65715: ST_TO_ADDR
// end ;
65716: LD_VAR 0 3
65720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65721: LD_INT 0
65723: PPUSH
// result := false ;
65724: LD_ADDR_VAR 0 4
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// if GetTaskList ( unit ) then
65732: LD_VAR 0 1
65736: PPUSH
65737: CALL_OW 437
65741: IFFALSE 65824
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65743: LD_STRING M
65745: PUSH
65746: LD_VAR 0 1
65750: PPUSH
65751: CALL_OW 437
65755: PUSH
65756: LD_INT 1
65758: ARRAY
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: EQUAL
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_VAR 0 1
65774: PPUSH
65775: CALL_OW 437
65779: PUSH
65780: LD_INT 1
65782: ARRAY
65783: PUSH
65784: LD_INT 2
65786: ARRAY
65787: EQUAL
65788: AND
65789: PUSH
65790: LD_VAR 0 3
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 437
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: LD_INT 3
65811: ARRAY
65812: EQUAL
65813: AND
65814: IFFALSE 65824
// result := true ;
65816: LD_ADDR_VAR 0 4
65820: PUSH
65821: LD_INT 1
65823: ST_TO_ADDR
// end ; end ;
65824: LD_VAR 0 4
65828: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
65833: PPUSH
65834: PPUSH
// if not unit or not area then
65835: LD_VAR 0 1
65839: NOT
65840: PUSH
65841: LD_VAR 0 2
65845: NOT
65846: OR
65847: IFFALSE 65851
// exit ;
65849: GO 66014
// tmp := AreaToList ( area , i ) ;
65851: LD_ADDR_VAR 0 6
65855: PUSH
65856: LD_VAR 0 2
65860: PPUSH
65861: LD_VAR 0 5
65865: PPUSH
65866: CALL_OW 517
65870: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65871: LD_ADDR_VAR 0 5
65875: PUSH
65876: DOUBLE
65877: LD_INT 1
65879: DEC
65880: ST_TO_ADDR
65881: LD_VAR 0 6
65885: PUSH
65886: LD_INT 1
65888: ARRAY
65889: PUSH
65890: FOR_TO
65891: IFFALSE 66012
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65893: LD_ADDR_VAR 0 7
65897: PUSH
65898: LD_VAR 0 6
65902: PUSH
65903: LD_INT 1
65905: ARRAY
65906: PUSH
65907: LD_VAR 0 5
65911: ARRAY
65912: PUSH
65913: LD_VAR 0 6
65917: PUSH
65918: LD_INT 2
65920: ARRAY
65921: PUSH
65922: LD_VAR 0 5
65926: ARRAY
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65932: LD_INT 92
65934: PUSH
65935: LD_VAR 0 7
65939: PUSH
65940: LD_INT 1
65942: ARRAY
65943: PUSH
65944: LD_VAR 0 7
65948: PUSH
65949: LD_INT 2
65951: ARRAY
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: PPUSH
65962: CALL_OW 69
65966: PUSH
65967: LD_INT 0
65969: EQUAL
65970: IFFALSE 66010
// begin PlaceUnitArea ( unit , area , mode ) ;
65972: LD_VAR 0 1
65976: PPUSH
65977: LD_VAR 0 2
65981: PPUSH
65982: LD_VAR 0 3
65986: PPUSH
65987: CALL_OW 49
// result := IsPlaced ( unit ) ;
65991: LD_ADDR_VAR 0 4
65995: PUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: CALL_OW 305
66005: ST_TO_ADDR
// exit ;
66006: POP
66007: POP
66008: GO 66014
// end ; end ;
66010: GO 65890
66012: POP
66013: POP
// end ;
66014: LD_VAR 0 4
66018: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66019: LD_INT 0
66021: PPUSH
66022: PPUSH
66023: PPUSH
// if not side or side > 8 then
66024: LD_VAR 0 1
66028: NOT
66029: PUSH
66030: LD_VAR 0 1
66034: PUSH
66035: LD_INT 8
66037: GREATER
66038: OR
66039: IFFALSE 66043
// exit ;
66041: GO 66230
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66043: LD_ADDR_VAR 0 4
66047: PUSH
66048: LD_INT 22
66050: PUSH
66051: LD_VAR 0 1
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 21
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PPUSH
66074: CALL_OW 69
66078: ST_TO_ADDR
// if not tmp then
66079: LD_VAR 0 4
66083: NOT
66084: IFFALSE 66088
// exit ;
66086: GO 66230
// enable_addtolog := true ;
66088: LD_ADDR_OWVAR 81
66092: PUSH
66093: LD_INT 1
66095: ST_TO_ADDR
// AddToLog ( [ ) ;
66096: LD_STRING [
66098: PPUSH
66099: CALL_OW 561
// for i in tmp do
66103: LD_ADDR_VAR 0 3
66107: PUSH
66108: LD_VAR 0 4
66112: PUSH
66113: FOR_IN
66114: IFFALSE 66221
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66116: LD_STRING [
66118: PUSH
66119: LD_VAR 0 3
66123: PPUSH
66124: CALL_OW 266
66128: STR
66129: PUSH
66130: LD_STRING , 
66132: STR
66133: PUSH
66134: LD_VAR 0 3
66138: PPUSH
66139: CALL_OW 250
66143: STR
66144: PUSH
66145: LD_STRING , 
66147: STR
66148: PUSH
66149: LD_VAR 0 3
66153: PPUSH
66154: CALL_OW 251
66158: STR
66159: PUSH
66160: LD_STRING , 
66162: STR
66163: PUSH
66164: LD_VAR 0 3
66168: PPUSH
66169: CALL_OW 254
66173: STR
66174: PUSH
66175: LD_STRING , 
66177: STR
66178: PUSH
66179: LD_VAR 0 3
66183: PPUSH
66184: LD_INT 1
66186: PPUSH
66187: CALL_OW 268
66191: STR
66192: PUSH
66193: LD_STRING , 
66195: STR
66196: PUSH
66197: LD_VAR 0 3
66201: PPUSH
66202: LD_INT 2
66204: PPUSH
66205: CALL_OW 268
66209: STR
66210: PUSH
66211: LD_STRING ],
66213: STR
66214: PPUSH
66215: CALL_OW 561
// end ;
66219: GO 66113
66221: POP
66222: POP
// AddToLog ( ]; ) ;
66223: LD_STRING ];
66225: PPUSH
66226: CALL_OW 561
// end ;
66230: LD_VAR 0 2
66234: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66235: LD_INT 0
66237: PPUSH
66238: PPUSH
66239: PPUSH
66240: PPUSH
66241: PPUSH
// if not area or not rate or not max then
66242: LD_VAR 0 1
66246: NOT
66247: PUSH
66248: LD_VAR 0 2
66252: NOT
66253: OR
66254: PUSH
66255: LD_VAR 0 4
66259: NOT
66260: OR
66261: IFFALSE 66265
// exit ;
66263: GO 66454
// while 1 do
66265: LD_INT 1
66267: IFFALSE 66454
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66269: LD_ADDR_VAR 0 9
66273: PUSH
66274: LD_VAR 0 1
66278: PPUSH
66279: LD_INT 1
66281: PPUSH
66282: CALL_OW 287
66286: PUSH
66287: LD_INT 10
66289: MUL
66290: ST_TO_ADDR
// r := rate / 10 ;
66291: LD_ADDR_VAR 0 7
66295: PUSH
66296: LD_VAR 0 2
66300: PUSH
66301: LD_INT 10
66303: DIVREAL
66304: ST_TO_ADDR
// time := 1 1$00 ;
66305: LD_ADDR_VAR 0 8
66309: PUSH
66310: LD_INT 2100
66312: ST_TO_ADDR
// if amount < min then
66313: LD_VAR 0 9
66317: PUSH
66318: LD_VAR 0 3
66322: LESS
66323: IFFALSE 66341
// r := r * 2 else
66325: LD_ADDR_VAR 0 7
66329: PUSH
66330: LD_VAR 0 7
66334: PUSH
66335: LD_INT 2
66337: MUL
66338: ST_TO_ADDR
66339: GO 66367
// if amount > max then
66341: LD_VAR 0 9
66345: PUSH
66346: LD_VAR 0 4
66350: GREATER
66351: IFFALSE 66367
// r := r / 2 ;
66353: LD_ADDR_VAR 0 7
66357: PUSH
66358: LD_VAR 0 7
66362: PUSH
66363: LD_INT 2
66365: DIVREAL
66366: ST_TO_ADDR
// time := time / r ;
66367: LD_ADDR_VAR 0 8
66371: PUSH
66372: LD_VAR 0 8
66376: PUSH
66377: LD_VAR 0 7
66381: DIVREAL
66382: ST_TO_ADDR
// if time < 0 then
66383: LD_VAR 0 8
66387: PUSH
66388: LD_INT 0
66390: LESS
66391: IFFALSE 66408
// time := time * - 1 ;
66393: LD_ADDR_VAR 0 8
66397: PUSH
66398: LD_VAR 0 8
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: MUL
66407: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66408: LD_VAR 0 8
66412: PUSH
66413: LD_INT 35
66415: PPUSH
66416: LD_INT 875
66418: PPUSH
66419: CALL_OW 12
66423: PLUS
66424: PPUSH
66425: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66429: LD_INT 1
66431: PPUSH
66432: LD_INT 5
66434: PPUSH
66435: CALL_OW 12
66439: PPUSH
66440: LD_VAR 0 1
66444: PPUSH
66445: LD_INT 1
66447: PPUSH
66448: CALL_OW 55
// end ;
66452: GO 66265
// end ;
66454: LD_VAR 0 5
66458: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66459: LD_INT 0
66461: PPUSH
66462: PPUSH
66463: PPUSH
66464: PPUSH
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
// if not turrets or not factories then
66469: LD_VAR 0 1
66473: NOT
66474: PUSH
66475: LD_VAR 0 2
66479: NOT
66480: OR
66481: IFFALSE 66485
// exit ;
66483: GO 66792
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66485: LD_ADDR_VAR 0 10
66489: PUSH
66490: LD_INT 5
66492: PUSH
66493: LD_INT 6
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 24
66527: PUSH
66528: LD_INT 25
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 23
66537: PUSH
66538: LD_INT 27
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 42
66551: PUSH
66552: LD_INT 43
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 44
66561: PUSH
66562: LD_INT 46
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 45
66571: PUSH
66572: LD_INT 47
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// result := [ ] ;
66589: LD_ADDR_VAR 0 3
66593: PUSH
66594: EMPTY
66595: ST_TO_ADDR
// for i in turrets do
66596: LD_ADDR_VAR 0 4
66600: PUSH
66601: LD_VAR 0 1
66605: PUSH
66606: FOR_IN
66607: IFFALSE 66790
// begin nat := GetNation ( i ) ;
66609: LD_ADDR_VAR 0 7
66613: PUSH
66614: LD_VAR 0 4
66618: PPUSH
66619: CALL_OW 248
66623: ST_TO_ADDR
// weapon := 0 ;
66624: LD_ADDR_VAR 0 8
66628: PUSH
66629: LD_INT 0
66631: ST_TO_ADDR
// if not nat then
66632: LD_VAR 0 7
66636: NOT
66637: IFFALSE 66641
// continue ;
66639: GO 66606
// for j in list [ nat ] do
66641: LD_ADDR_VAR 0 5
66645: PUSH
66646: LD_VAR 0 10
66650: PUSH
66651: LD_VAR 0 7
66655: ARRAY
66656: PUSH
66657: FOR_IN
66658: IFFALSE 66699
// if GetBWeapon ( i ) = j [ 1 ] then
66660: LD_VAR 0 4
66664: PPUSH
66665: CALL_OW 269
66669: PUSH
66670: LD_VAR 0 5
66674: PUSH
66675: LD_INT 1
66677: ARRAY
66678: EQUAL
66679: IFFALSE 66697
// begin weapon := j [ 2 ] ;
66681: LD_ADDR_VAR 0 8
66685: PUSH
66686: LD_VAR 0 5
66690: PUSH
66691: LD_INT 2
66693: ARRAY
66694: ST_TO_ADDR
// break ;
66695: GO 66699
// end ;
66697: GO 66657
66699: POP
66700: POP
// if not weapon then
66701: LD_VAR 0 8
66705: NOT
66706: IFFALSE 66710
// continue ;
66708: GO 66606
// for k in factories do
66710: LD_ADDR_VAR 0 6
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: FOR_IN
66721: IFFALSE 66786
// begin weapons := AvailableWeaponList ( k ) ;
66723: LD_ADDR_VAR 0 9
66727: PUSH
66728: LD_VAR 0 6
66732: PPUSH
66733: CALL_OW 478
66737: ST_TO_ADDR
// if not weapons then
66738: LD_VAR 0 9
66742: NOT
66743: IFFALSE 66747
// continue ;
66745: GO 66720
// if weapon in weapons then
66747: LD_VAR 0 8
66751: PUSH
66752: LD_VAR 0 9
66756: IN
66757: IFFALSE 66784
// begin result := [ i , weapon ] ;
66759: LD_ADDR_VAR 0 3
66763: PUSH
66764: LD_VAR 0 4
66768: PUSH
66769: LD_VAR 0 8
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: ST_TO_ADDR
// exit ;
66778: POP
66779: POP
66780: POP
66781: POP
66782: GO 66792
// end ; end ;
66784: GO 66720
66786: POP
66787: POP
// end ;
66788: GO 66606
66790: POP
66791: POP
// end ;
66792: LD_VAR 0 3
66796: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66797: LD_INT 0
66799: PPUSH
// if not side or side > 8 then
66800: LD_VAR 0 3
66804: NOT
66805: PUSH
66806: LD_VAR 0 3
66810: PUSH
66811: LD_INT 8
66813: GREATER
66814: OR
66815: IFFALSE 66819
// exit ;
66817: GO 66878
// if not range then
66819: LD_VAR 0 4
66823: NOT
66824: IFFALSE 66835
// range := - 12 ;
66826: LD_ADDR_VAR 0 4
66830: PUSH
66831: LD_INT 12
66833: NEG
66834: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66835: LD_VAR 0 1
66839: PPUSH
66840: LD_VAR 0 2
66844: PPUSH
66845: LD_VAR 0 3
66849: PPUSH
66850: LD_VAR 0 4
66854: PPUSH
66855: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 2
66868: PPUSH
66869: LD_VAR 0 3
66873: PPUSH
66874: CALL_OW 331
// end ;
66878: LD_VAR 0 5
66882: RET
// export function Video ( mode ) ; begin
66883: LD_INT 0
66885: PPUSH
// ingame_video = mode ;
66886: LD_ADDR_OWVAR 52
66890: PUSH
66891: LD_VAR 0 1
66895: ST_TO_ADDR
// interface_hidden = mode ;
66896: LD_ADDR_OWVAR 54
66900: PUSH
66901: LD_VAR 0 1
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 2
66910: RET
// export function Join ( array , element ) ; begin
66911: LD_INT 0
66913: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66914: LD_ADDR_VAR 0 3
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_VAR 0 1
66928: PUSH
66929: LD_INT 1
66931: PLUS
66932: PPUSH
66933: LD_VAR 0 2
66937: PPUSH
66938: CALL_OW 1
66942: ST_TO_ADDR
// end ;
66943: LD_VAR 0 3
66947: RET
// export function JoinUnion ( array , element ) ; begin
66948: LD_INT 0
66950: PPUSH
// result := array union element ;
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_VAR 0 2
66965: UNION
66966: ST_TO_ADDR
// end ;
66967: LD_VAR 0 3
66971: RET
// export function GetBehemoths ( side ) ; begin
66972: LD_INT 0
66974: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66975: LD_ADDR_VAR 0 2
66979: PUSH
66980: LD_INT 22
66982: PUSH
66983: LD_VAR 0 1
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 31
66994: PUSH
66995: LD_INT 25
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PPUSH
67006: CALL_OW 69
67010: ST_TO_ADDR
// end ;
67011: LD_VAR 0 2
67015: RET
// export function Shuffle ( array ) ; var i , index ; begin
67016: LD_INT 0
67018: PPUSH
67019: PPUSH
67020: PPUSH
// result := [ ] ;
67021: LD_ADDR_VAR 0 2
67025: PUSH
67026: EMPTY
67027: ST_TO_ADDR
// if not array then
67028: LD_VAR 0 1
67032: NOT
67033: IFFALSE 67037
// exit ;
67035: GO 67136
// Randomize ;
67037: CALL_OW 10
// for i = array downto 1 do
67041: LD_ADDR_VAR 0 3
67045: PUSH
67046: DOUBLE
67047: LD_VAR 0 1
67051: INC
67052: ST_TO_ADDR
67053: LD_INT 1
67055: PUSH
67056: FOR_DOWNTO
67057: IFFALSE 67134
// begin index := rand ( 1 , array ) ;
67059: LD_ADDR_VAR 0 4
67063: PUSH
67064: LD_INT 1
67066: PPUSH
67067: LD_VAR 0 1
67071: PPUSH
67072: CALL_OW 12
67076: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67077: LD_ADDR_VAR 0 2
67081: PUSH
67082: LD_VAR 0 2
67086: PPUSH
67087: LD_VAR 0 2
67091: PUSH
67092: LD_INT 1
67094: PLUS
67095: PPUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_VAR 0 4
67105: ARRAY
67106: PPUSH
67107: CALL_OW 2
67111: ST_TO_ADDR
// array := Delete ( array , index ) ;
67112: LD_ADDR_VAR 0 1
67116: PUSH
67117: LD_VAR 0 1
67121: PPUSH
67122: LD_VAR 0 4
67126: PPUSH
67127: CALL_OW 3
67131: ST_TO_ADDR
// end ;
67132: GO 67056
67134: POP
67135: POP
// end ;
67136: LD_VAR 0 2
67140: RET
// export function GetBaseMaterials ( base ) ; begin
67141: LD_INT 0
67143: PPUSH
// result := [ 0 , 0 , 0 ] ;
67144: LD_ADDR_VAR 0 2
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// if not base then
67163: LD_VAR 0 1
67167: NOT
67168: IFFALSE 67172
// exit ;
67170: GO 67221
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67172: LD_ADDR_VAR 0 2
67176: PUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: LD_INT 1
67184: PPUSH
67185: CALL_OW 275
67189: PUSH
67190: LD_VAR 0 1
67194: PPUSH
67195: LD_INT 2
67197: PPUSH
67198: CALL_OW 275
67202: PUSH
67203: LD_VAR 0 1
67207: PPUSH
67208: LD_INT 3
67210: PPUSH
67211: CALL_OW 275
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// end ;
67221: LD_VAR 0 2
67225: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67226: LD_INT 0
67228: PPUSH
67229: PPUSH
// result := array ;
67230: LD_ADDR_VAR 0 3
67234: PUSH
67235: LD_VAR 0 1
67239: ST_TO_ADDR
// if size >= result then
67240: LD_VAR 0 2
67244: PUSH
67245: LD_VAR 0 3
67249: GREATEREQUAL
67250: IFFALSE 67254
// exit ;
67252: GO 67304
// if size then
67254: LD_VAR 0 2
67258: IFFALSE 67304
// for i := array downto size do
67260: LD_ADDR_VAR 0 4
67264: PUSH
67265: DOUBLE
67266: LD_VAR 0 1
67270: INC
67271: ST_TO_ADDR
67272: LD_VAR 0 2
67276: PUSH
67277: FOR_DOWNTO
67278: IFFALSE 67302
// result := Delete ( result , result ) ;
67280: LD_ADDR_VAR 0 3
67284: PUSH
67285: LD_VAR 0 3
67289: PPUSH
67290: LD_VAR 0 3
67294: PPUSH
67295: CALL_OW 3
67299: ST_TO_ADDR
67300: GO 67277
67302: POP
67303: POP
// end ;
67304: LD_VAR 0 3
67308: RET
// export function ComExit ( unit ) ; var tmp ; begin
67309: LD_INT 0
67311: PPUSH
67312: PPUSH
// if not IsInUnit ( unit ) then
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 310
67322: NOT
67323: IFFALSE 67327
// exit ;
67325: GO 67387
// tmp := IsInUnit ( unit ) ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_VAR 0 1
67336: PPUSH
67337: CALL_OW 310
67341: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67342: LD_VAR 0 3
67346: PPUSH
67347: CALL_OW 247
67351: PUSH
67352: LD_INT 2
67354: EQUAL
67355: IFFALSE 67368
// ComExitVehicle ( unit ) else
67357: LD_VAR 0 1
67361: PPUSH
67362: CALL_OW 121
67366: GO 67377
// ComExitBuilding ( unit ) ;
67368: LD_VAR 0 1
67372: PPUSH
67373: CALL_OW 122
// result := tmp ;
67377: LD_ADDR_VAR 0 2
67381: PUSH
67382: LD_VAR 0 3
67386: ST_TO_ADDR
// end ;
67387: LD_VAR 0 2
67391: RET
// export function ComExitAll ( units ) ; var i ; begin
67392: LD_INT 0
67394: PPUSH
67395: PPUSH
// if not units then
67396: LD_VAR 0 1
67400: NOT
67401: IFFALSE 67405
// exit ;
67403: GO 67431
// for i in units do
67405: LD_ADDR_VAR 0 3
67409: PUSH
67410: LD_VAR 0 1
67414: PUSH
67415: FOR_IN
67416: IFFALSE 67429
// ComExit ( i ) ;
67418: LD_VAR 0 3
67422: PPUSH
67423: CALL 67309 0 1
67427: GO 67415
67429: POP
67430: POP
// end ;
67431: LD_VAR 0 2
67435: RET
// export function ResetHc ; begin
67436: LD_INT 0
67438: PPUSH
// InitHc ;
67439: CALL_OW 19
// hc_importance := 0 ;
67443: LD_ADDR_OWVAR 32
67447: PUSH
67448: LD_INT 0
67450: ST_TO_ADDR
// end ;
67451: LD_VAR 0 1
67455: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67456: LD_INT 0
67458: PPUSH
67459: PPUSH
67460: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67461: LD_ADDR_VAR 0 6
67465: PUSH
67466: LD_VAR 0 1
67470: PUSH
67471: LD_VAR 0 3
67475: PLUS
67476: PUSH
67477: LD_INT 2
67479: DIV
67480: ST_TO_ADDR
// if _x < 0 then
67481: LD_VAR 0 6
67485: PUSH
67486: LD_INT 0
67488: LESS
67489: IFFALSE 67506
// _x := _x * - 1 ;
67491: LD_ADDR_VAR 0 6
67495: PUSH
67496: LD_VAR 0 6
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: MUL
67505: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67506: LD_ADDR_VAR 0 7
67510: PUSH
67511: LD_VAR 0 2
67515: PUSH
67516: LD_VAR 0 4
67520: PLUS
67521: PUSH
67522: LD_INT 2
67524: DIV
67525: ST_TO_ADDR
// if _y < 0 then
67526: LD_VAR 0 7
67530: PUSH
67531: LD_INT 0
67533: LESS
67534: IFFALSE 67551
// _y := _y * - 1 ;
67536: LD_ADDR_VAR 0 7
67540: PUSH
67541: LD_VAR 0 7
67545: PUSH
67546: LD_INT 1
67548: NEG
67549: MUL
67550: ST_TO_ADDR
// result := [ _x , _y ] ;
67551: LD_ADDR_VAR 0 5
67555: PUSH
67556: LD_VAR 0 6
67560: PUSH
67561: LD_VAR 0 7
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: ST_TO_ADDR
// end ;
67570: LD_VAR 0 5
67574: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67575: LD_INT 0
67577: PPUSH
67578: PPUSH
67579: PPUSH
67580: PPUSH
// task := GetTaskList ( unit ) ;
67581: LD_ADDR_VAR 0 7
67585: PUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 437
67595: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67596: LD_VAR 0 7
67600: NOT
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 2
67611: PPUSH
67612: CALL_OW 308
67616: NOT
67617: AND
67618: IFFALSE 67622
// exit ;
67620: GO 67740
// if IsInArea ( unit , area ) then
67622: LD_VAR 0 1
67626: PPUSH
67627: LD_VAR 0 2
67631: PPUSH
67632: CALL_OW 308
67636: IFFALSE 67654
// begin ComMoveToArea ( unit , goAway ) ;
67638: LD_VAR 0 1
67642: PPUSH
67643: LD_VAR 0 3
67647: PPUSH
67648: CALL_OW 113
// exit ;
67652: GO 67740
// end ; if task [ 1 ] [ 1 ] <> M then
67654: LD_VAR 0 7
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PUSH
67667: LD_STRING M
67669: NONEQUAL
67670: IFFALSE 67674
// exit ;
67672: GO 67740
// x := task [ 1 ] [ 2 ] ;
67674: LD_ADDR_VAR 0 5
67678: PUSH
67679: LD_VAR 0 7
67683: PUSH
67684: LD_INT 1
67686: ARRAY
67687: PUSH
67688: LD_INT 2
67690: ARRAY
67691: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67692: LD_ADDR_VAR 0 6
67696: PUSH
67697: LD_VAR 0 7
67701: PUSH
67702: LD_INT 1
67704: ARRAY
67705: PUSH
67706: LD_INT 3
67708: ARRAY
67709: ST_TO_ADDR
// if InArea ( x , y , area ) then
67710: LD_VAR 0 5
67714: PPUSH
67715: LD_VAR 0 6
67719: PPUSH
67720: LD_VAR 0 2
67724: PPUSH
67725: CALL_OW 309
67729: IFFALSE 67740
// ComStop ( unit ) ;
67731: LD_VAR 0 1
67735: PPUSH
67736: CALL_OW 141
// end ;
67740: LD_VAR 0 4
67744: RET
// export function Abs ( value ) ; begin
67745: LD_INT 0
67747: PPUSH
// result := value ;
67748: LD_ADDR_VAR 0 2
67752: PUSH
67753: LD_VAR 0 1
67757: ST_TO_ADDR
// if value < 0 then
67758: LD_VAR 0 1
67762: PUSH
67763: LD_INT 0
67765: LESS
67766: IFFALSE 67783
// result := value * - 1 ;
67768: LD_ADDR_VAR 0 2
67772: PUSH
67773: LD_VAR 0 1
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: MUL
67782: ST_TO_ADDR
// end ;
67783: LD_VAR 0 2
67787: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67788: LD_INT 0
67790: PPUSH
67791: PPUSH
67792: PPUSH
67793: PPUSH
67794: PPUSH
67795: PPUSH
67796: PPUSH
67797: PPUSH
// if not unit or not building then
67798: LD_VAR 0 1
67802: NOT
67803: PUSH
67804: LD_VAR 0 2
67808: NOT
67809: OR
67810: IFFALSE 67814
// exit ;
67812: GO 68040
// x := GetX ( building ) ;
67814: LD_ADDR_VAR 0 4
67818: PUSH
67819: LD_VAR 0 2
67823: PPUSH
67824: CALL_OW 250
67828: ST_TO_ADDR
// y := GetY ( building ) ;
67829: LD_ADDR_VAR 0 6
67833: PUSH
67834: LD_VAR 0 2
67838: PPUSH
67839: CALL_OW 251
67843: ST_TO_ADDR
// d := GetDir ( building ) ;
67844: LD_ADDR_VAR 0 8
67848: PUSH
67849: LD_VAR 0 2
67853: PPUSH
67854: CALL_OW 254
67858: ST_TO_ADDR
// r := 4 ;
67859: LD_ADDR_VAR 0 9
67863: PUSH
67864: LD_INT 4
67866: ST_TO_ADDR
// for i := 1 to 5 do
67867: LD_ADDR_VAR 0 10
67871: PUSH
67872: DOUBLE
67873: LD_INT 1
67875: DEC
67876: ST_TO_ADDR
67877: LD_INT 5
67879: PUSH
67880: FOR_TO
67881: IFFALSE 68038
// begin _x := ShiftX ( x , d , r + i ) ;
67883: LD_ADDR_VAR 0 5
67887: PUSH
67888: LD_VAR 0 4
67892: PPUSH
67893: LD_VAR 0 8
67897: PPUSH
67898: LD_VAR 0 9
67902: PUSH
67903: LD_VAR 0 10
67907: PLUS
67908: PPUSH
67909: CALL_OW 272
67913: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67914: LD_ADDR_VAR 0 7
67918: PUSH
67919: LD_VAR 0 6
67923: PPUSH
67924: LD_VAR 0 8
67928: PPUSH
67929: LD_VAR 0 9
67933: PUSH
67934: LD_VAR 0 10
67938: PLUS
67939: PPUSH
67940: CALL_OW 273
67944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67945: LD_VAR 0 5
67949: PPUSH
67950: LD_VAR 0 7
67954: PPUSH
67955: CALL_OW 488
67959: PUSH
67960: LD_VAR 0 5
67964: PPUSH
67965: LD_VAR 0 7
67969: PPUSH
67970: CALL_OW 428
67974: PPUSH
67975: CALL_OW 247
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: IN
67990: NOT
67991: AND
67992: IFFALSE 68036
// begin ComMoveXY ( unit , _x , _y ) ;
67994: LD_VAR 0 1
67998: PPUSH
67999: LD_VAR 0 5
68003: PPUSH
68004: LD_VAR 0 7
68008: PPUSH
68009: CALL_OW 111
// result := [ _x , _y ] ;
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_VAR 0 5
68022: PUSH
68023: LD_VAR 0 7
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: ST_TO_ADDR
// exit ;
68032: POP
68033: POP
68034: GO 68040
// end ; end ;
68036: GO 67880
68038: POP
68039: POP
// end ;
68040: LD_VAR 0 3
68044: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68045: LD_INT 0
68047: PPUSH
68048: PPUSH
68049: PPUSH
// result := 0 ;
68050: LD_ADDR_VAR 0 3
68054: PUSH
68055: LD_INT 0
68057: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68058: LD_VAR 0 1
68062: PUSH
68063: LD_INT 0
68065: LESS
68066: PUSH
68067: LD_VAR 0 1
68071: PUSH
68072: LD_INT 8
68074: GREATER
68075: OR
68076: PUSH
68077: LD_VAR 0 2
68081: PUSH
68082: LD_INT 0
68084: LESS
68085: OR
68086: PUSH
68087: LD_VAR 0 2
68091: PUSH
68092: LD_INT 8
68094: GREATER
68095: OR
68096: IFFALSE 68100
// exit ;
68098: GO 68175
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68100: LD_ADDR_VAR 0 4
68104: PUSH
68105: LD_INT 22
68107: PUSH
68108: LD_VAR 0 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PPUSH
68117: CALL_OW 69
68121: PUSH
68122: FOR_IN
68123: IFFALSE 68173
// begin un := UnitShoot ( i ) ;
68125: LD_ADDR_VAR 0 5
68129: PUSH
68130: LD_VAR 0 4
68134: PPUSH
68135: CALL_OW 504
68139: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68140: LD_VAR 0 5
68144: PPUSH
68145: CALL_OW 255
68149: PUSH
68150: LD_VAR 0 1
68154: EQUAL
68155: IFFALSE 68171
// begin result := un ;
68157: LD_ADDR_VAR 0 3
68161: PUSH
68162: LD_VAR 0 5
68166: ST_TO_ADDR
// exit ;
68167: POP
68168: POP
68169: GO 68175
// end ; end ;
68171: GO 68122
68173: POP
68174: POP
// end ;
68175: LD_VAR 0 3
68179: RET
// export function GetCargoBay ( units ) ; begin
68180: LD_INT 0
68182: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68183: LD_ADDR_VAR 0 2
68187: PUSH
68188: LD_VAR 0 1
68192: PPUSH
68193: LD_INT 2
68195: PUSH
68196: LD_INT 34
68198: PUSH
68199: LD_INT 12
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 34
68208: PUSH
68209: LD_INT 51
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 34
68218: PUSH
68219: LD_INT 32
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 34
68228: PUSH
68229: LD_INT 89
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: PPUSH
68243: CALL_OW 72
68247: ST_TO_ADDR
// end ;
68248: LD_VAR 0 2
68252: RET
// export function Negate ( value ) ; begin
68253: LD_INT 0
68255: PPUSH
// result := not value ;
68256: LD_ADDR_VAR 0 2
68260: PUSH
68261: LD_VAR 0 1
68265: NOT
68266: ST_TO_ADDR
// end ;
68267: LD_VAR 0 2
68271: RET
// export function Inc ( value ) ; begin
68272: LD_INT 0
68274: PPUSH
// result := value + 1 ;
68275: LD_ADDR_VAR 0 2
68279: PUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 1
68287: PLUS
68288: ST_TO_ADDR
// end ;
68289: LD_VAR 0 2
68293: RET
// export function Dec ( value ) ; begin
68294: LD_INT 0
68296: PPUSH
// result := value - 1 ;
68297: LD_ADDR_VAR 0 2
68301: PUSH
68302: LD_VAR 0 1
68306: PUSH
68307: LD_INT 1
68309: MINUS
68310: ST_TO_ADDR
// end ;
68311: LD_VAR 0 2
68315: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68316: LD_INT 0
68318: PPUSH
68319: PPUSH
68320: PPUSH
68321: PPUSH
68322: PPUSH
68323: PPUSH
68324: PPUSH
68325: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68326: LD_VAR 0 1
68330: PPUSH
68331: LD_VAR 0 2
68335: PPUSH
68336: CALL_OW 488
68340: NOT
68341: PUSH
68342: LD_VAR 0 3
68346: PPUSH
68347: LD_VAR 0 4
68351: PPUSH
68352: CALL_OW 488
68356: NOT
68357: OR
68358: IFFALSE 68371
// begin result := - 1 ;
68360: LD_ADDR_VAR 0 5
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: ST_TO_ADDR
// exit ;
68369: GO 68606
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68371: LD_ADDR_VAR 0 12
68375: PUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: LD_VAR 0 2
68385: PPUSH
68386: LD_VAR 0 3
68390: PPUSH
68391: LD_VAR 0 4
68395: PPUSH
68396: CALL 67456 0 4
68400: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68401: LD_ADDR_VAR 0 11
68405: PUSH
68406: LD_VAR 0 1
68410: PPUSH
68411: LD_VAR 0 2
68415: PPUSH
68416: LD_VAR 0 12
68420: PUSH
68421: LD_INT 1
68423: ARRAY
68424: PPUSH
68425: LD_VAR 0 12
68429: PUSH
68430: LD_INT 2
68432: ARRAY
68433: PPUSH
68434: CALL_OW 298
68438: ST_TO_ADDR
// distance := 9999 ;
68439: LD_ADDR_VAR 0 10
68443: PUSH
68444: LD_INT 9999
68446: ST_TO_ADDR
// for i := 0 to 5 do
68447: LD_ADDR_VAR 0 6
68451: PUSH
68452: DOUBLE
68453: LD_INT 0
68455: DEC
68456: ST_TO_ADDR
68457: LD_INT 5
68459: PUSH
68460: FOR_TO
68461: IFFALSE 68604
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68463: LD_ADDR_VAR 0 7
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 6
68477: PPUSH
68478: LD_VAR 0 11
68482: PPUSH
68483: CALL_OW 272
68487: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68488: LD_ADDR_VAR 0 8
68492: PUSH
68493: LD_VAR 0 2
68497: PPUSH
68498: LD_VAR 0 6
68502: PPUSH
68503: LD_VAR 0 11
68507: PPUSH
68508: CALL_OW 273
68512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68513: LD_VAR 0 7
68517: PPUSH
68518: LD_VAR 0 8
68522: PPUSH
68523: CALL_OW 488
68527: NOT
68528: IFFALSE 68532
// continue ;
68530: GO 68460
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68532: LD_ADDR_VAR 0 9
68536: PUSH
68537: LD_VAR 0 12
68541: PUSH
68542: LD_INT 1
68544: ARRAY
68545: PPUSH
68546: LD_VAR 0 12
68550: PUSH
68551: LD_INT 2
68553: ARRAY
68554: PPUSH
68555: LD_VAR 0 7
68559: PPUSH
68560: LD_VAR 0 8
68564: PPUSH
68565: CALL_OW 298
68569: ST_TO_ADDR
// if tmp < distance then
68570: LD_VAR 0 9
68574: PUSH
68575: LD_VAR 0 10
68579: LESS
68580: IFFALSE 68602
// begin result := i ;
68582: LD_ADDR_VAR 0 5
68586: PUSH
68587: LD_VAR 0 6
68591: ST_TO_ADDR
// distance := tmp ;
68592: LD_ADDR_VAR 0 10
68596: PUSH
68597: LD_VAR 0 9
68601: ST_TO_ADDR
// end ; end ;
68602: GO 68460
68604: POP
68605: POP
// end ;
68606: LD_VAR 0 5
68610: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
// if not driver or not IsInUnit ( driver ) then
68615: LD_VAR 0 1
68619: NOT
68620: PUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 310
68630: NOT
68631: OR
68632: IFFALSE 68636
// exit ;
68634: GO 68726
// vehicle := IsInUnit ( driver ) ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: LD_VAR 0 1
68645: PPUSH
68646: CALL_OW 310
68650: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68651: LD_VAR 0 1
68655: PPUSH
68656: LD_STRING \
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: PUSH
68686: LD_STRING E
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_VAR 0 3
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PPUSH
68722: CALL_OW 446
// end ;
68726: LD_VAR 0 2
68730: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68731: LD_INT 0
68733: PPUSH
68734: PPUSH
// if not driver or not IsInUnit ( driver ) then
68735: LD_VAR 0 1
68739: NOT
68740: PUSH
68741: LD_VAR 0 1
68745: PPUSH
68746: CALL_OW 310
68750: NOT
68751: OR
68752: IFFALSE 68756
// exit ;
68754: GO 68846
// vehicle := IsInUnit ( driver ) ;
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: LD_VAR 0 1
68765: PPUSH
68766: CALL_OW 310
68770: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68771: LD_VAR 0 1
68775: PPUSH
68776: LD_STRING \
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: LD_STRING E
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: LD_VAR 0 3
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PPUSH
68842: CALL_OW 447
// end ;
68846: LD_VAR 0 2
68850: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
68855: PPUSH
// tmp := [ ] ;
68856: LD_ADDR_VAR 0 5
68860: PUSH
68861: EMPTY
68862: ST_TO_ADDR
// for i in units do
68863: LD_ADDR_VAR 0 4
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: FOR_IN
68874: IFFALSE 68912
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68876: LD_ADDR_VAR 0 5
68880: PUSH
68881: LD_VAR 0 5
68885: PPUSH
68886: LD_VAR 0 5
68890: PUSH
68891: LD_INT 1
68893: PLUS
68894: PPUSH
68895: LD_VAR 0 4
68899: PPUSH
68900: CALL_OW 256
68904: PPUSH
68905: CALL_OW 2
68909: ST_TO_ADDR
68910: GO 68873
68912: POP
68913: POP
// if not tmp then
68914: LD_VAR 0 5
68918: NOT
68919: IFFALSE 68923
// exit ;
68921: GO 68971
// if asc then
68923: LD_VAR 0 2
68927: IFFALSE 68951
// result := SortListByListAsc ( units , tmp ) else
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 5
68943: PPUSH
68944: CALL_OW 76
68948: ST_TO_ADDR
68949: GO 68971
// result := SortListByListDesc ( units , tmp ) ;
68951: LD_ADDR_VAR 0 3
68955: PUSH
68956: LD_VAR 0 1
68960: PPUSH
68961: LD_VAR 0 5
68965: PPUSH
68966: CALL_OW 77
68970: ST_TO_ADDR
// end ;
68971: LD_VAR 0 3
68975: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68976: LD_INT 0
68978: PPUSH
68979: PPUSH
// task := GetTaskList ( mech ) ;
68980: LD_ADDR_VAR 0 4
68984: PUSH
68985: LD_VAR 0 1
68989: PPUSH
68990: CALL_OW 437
68994: ST_TO_ADDR
// if not task then
68995: LD_VAR 0 4
68999: NOT
69000: IFFALSE 69004
// exit ;
69002: GO 69046
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: LD_VAR 0 4
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PUSH
69018: LD_INT 1
69020: ARRAY
69021: PUSH
69022: LD_STRING r
69024: EQUAL
69025: PUSH
69026: LD_VAR 0 4
69030: PUSH
69031: LD_INT 1
69033: ARRAY
69034: PUSH
69035: LD_INT 4
69037: ARRAY
69038: PUSH
69039: LD_VAR 0 2
69043: EQUAL
69044: AND
69045: ST_TO_ADDR
// end ;
69046: LD_VAR 0 3
69050: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69051: LD_INT 0
69053: PPUSH
// SetDir ( unit , d ) ;
69054: LD_VAR 0 1
69058: PPUSH
69059: LD_VAR 0 4
69063: PPUSH
69064: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69068: LD_VAR 0 1
69072: PPUSH
69073: LD_VAR 0 2
69077: PPUSH
69078: LD_VAR 0 3
69082: PPUSH
69083: LD_VAR 0 5
69087: PPUSH
69088: CALL_OW 48
// end ;
69092: LD_VAR 0 6
69096: RET
// export function ToNaturalNumber ( number ) ; begin
69097: LD_INT 0
69099: PPUSH
// result := number div 1 ;
69100: LD_ADDR_VAR 0 2
69104: PUSH
69105: LD_VAR 0 1
69109: PUSH
69110: LD_INT 1
69112: DIV
69113: ST_TO_ADDR
// if number < 0 then
69114: LD_VAR 0 1
69118: PUSH
69119: LD_INT 0
69121: LESS
69122: IFFALSE 69132
// result := 0 ;
69124: LD_ADDR_VAR 0 2
69128: PUSH
69129: LD_INT 0
69131: ST_TO_ADDR
// end ;
69132: LD_VAR 0 2
69136: RET
// export function SortByClass ( units , class ) ; var un ; begin
69137: LD_INT 0
69139: PPUSH
69140: PPUSH
// if not units or not class then
69141: LD_VAR 0 1
69145: NOT
69146: PUSH
69147: LD_VAR 0 2
69151: NOT
69152: OR
69153: IFFALSE 69157
// exit ;
69155: GO 69252
// result := [ ] ;
69157: LD_ADDR_VAR 0 3
69161: PUSH
69162: EMPTY
69163: ST_TO_ADDR
// for un in units do
69164: LD_ADDR_VAR 0 4
69168: PUSH
69169: LD_VAR 0 1
69173: PUSH
69174: FOR_IN
69175: IFFALSE 69250
// if GetClass ( un ) = class then
69177: LD_VAR 0 4
69181: PPUSH
69182: CALL_OW 257
69186: PUSH
69187: LD_VAR 0 2
69191: EQUAL
69192: IFFALSE 69219
// result := Insert ( result , 1 , un ) else
69194: LD_ADDR_VAR 0 3
69198: PUSH
69199: LD_VAR 0 3
69203: PPUSH
69204: LD_INT 1
69206: PPUSH
69207: LD_VAR 0 4
69211: PPUSH
69212: CALL_OW 2
69216: ST_TO_ADDR
69217: GO 69248
// result := Replace ( result , result + 1 , un ) ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: LD_VAR 0 3
69228: PPUSH
69229: LD_VAR 0 3
69233: PUSH
69234: LD_INT 1
69236: PLUS
69237: PPUSH
69238: LD_VAR 0 4
69242: PPUSH
69243: CALL_OW 1
69247: ST_TO_ADDR
69248: GO 69174
69250: POP
69251: POP
// end ;
69252: LD_VAR 0 3
69256: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69257: LD_INT 0
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
69263: PPUSH
69264: PPUSH
69265: PPUSH
// result := [ ] ;
69266: LD_ADDR_VAR 0 4
69270: PUSH
69271: EMPTY
69272: ST_TO_ADDR
// if x - r < 0 then
69273: LD_VAR 0 1
69277: PUSH
69278: LD_VAR 0 3
69282: MINUS
69283: PUSH
69284: LD_INT 0
69286: LESS
69287: IFFALSE 69299
// min_x := 0 else
69289: LD_ADDR_VAR 0 8
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
69297: GO 69315
// min_x := x - r ;
69299: LD_ADDR_VAR 0 8
69303: PUSH
69304: LD_VAR 0 1
69308: PUSH
69309: LD_VAR 0 3
69313: MINUS
69314: ST_TO_ADDR
// if y - r < 0 then
69315: LD_VAR 0 2
69319: PUSH
69320: LD_VAR 0 3
69324: MINUS
69325: PUSH
69326: LD_INT 0
69328: LESS
69329: IFFALSE 69341
// min_y := 0 else
69331: LD_ADDR_VAR 0 7
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
69339: GO 69357
// min_y := y - r ;
69341: LD_ADDR_VAR 0 7
69345: PUSH
69346: LD_VAR 0 2
69350: PUSH
69351: LD_VAR 0 3
69355: MINUS
69356: ST_TO_ADDR
// max_x := x + r ;
69357: LD_ADDR_VAR 0 9
69361: PUSH
69362: LD_VAR 0 1
69366: PUSH
69367: LD_VAR 0 3
69371: PLUS
69372: ST_TO_ADDR
// max_y := y + r ;
69373: LD_ADDR_VAR 0 10
69377: PUSH
69378: LD_VAR 0 2
69382: PUSH
69383: LD_VAR 0 3
69387: PLUS
69388: ST_TO_ADDR
// for _x = min_x to max_x do
69389: LD_ADDR_VAR 0 5
69393: PUSH
69394: DOUBLE
69395: LD_VAR 0 8
69399: DEC
69400: ST_TO_ADDR
69401: LD_VAR 0 9
69405: PUSH
69406: FOR_TO
69407: IFFALSE 69508
// for _y = min_y to max_y do
69409: LD_ADDR_VAR 0 6
69413: PUSH
69414: DOUBLE
69415: LD_VAR 0 7
69419: DEC
69420: ST_TO_ADDR
69421: LD_VAR 0 10
69425: PUSH
69426: FOR_TO
69427: IFFALSE 69504
// begin if not ValidHex ( _x , _y ) then
69429: LD_VAR 0 5
69433: PPUSH
69434: LD_VAR 0 6
69438: PPUSH
69439: CALL_OW 488
69443: NOT
69444: IFFALSE 69448
// continue ;
69446: GO 69426
// if GetResourceTypeXY ( _x , _y ) then
69448: LD_VAR 0 5
69452: PPUSH
69453: LD_VAR 0 6
69457: PPUSH
69458: CALL_OW 283
69462: IFFALSE 69502
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69464: LD_ADDR_VAR 0 4
69468: PUSH
69469: LD_VAR 0 4
69473: PPUSH
69474: LD_VAR 0 4
69478: PUSH
69479: LD_INT 1
69481: PLUS
69482: PPUSH
69483: LD_VAR 0 5
69487: PUSH
69488: LD_VAR 0 6
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PPUSH
69497: CALL_OW 1
69501: ST_TO_ADDR
// end ;
69502: GO 69426
69504: POP
69505: POP
69506: GO 69406
69508: POP
69509: POP
// end ;
69510: LD_VAR 0 4
69514: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69515: LD_INT 0
69517: PPUSH
69518: PPUSH
69519: PPUSH
69520: PPUSH
69521: PPUSH
69522: PPUSH
69523: PPUSH
69524: PPUSH
// if not units then
69525: LD_VAR 0 1
69529: NOT
69530: IFFALSE 69534
// exit ;
69532: GO 70058
// result := UnitFilter ( units , [ f_ok ] ) ;
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_VAR 0 1
69543: PPUSH
69544: LD_INT 50
69546: PUSH
69547: EMPTY
69548: LIST
69549: PPUSH
69550: CALL_OW 72
69554: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69555: LD_ADDR_VAR 0 8
69559: PUSH
69560: LD_VAR 0 1
69564: PUSH
69565: LD_INT 1
69567: ARRAY
69568: PPUSH
69569: CALL_OW 255
69573: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69574: LD_ADDR_VAR 0 10
69578: PUSH
69579: LD_INT 29
69581: PUSH
69582: LD_INT 91
69584: PUSH
69585: LD_INT 49
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: ST_TO_ADDR
// if not result then
69593: LD_VAR 0 3
69597: NOT
69598: IFFALSE 69602
// exit ;
69600: GO 70058
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69602: LD_ADDR_VAR 0 5
69606: PUSH
69607: LD_INT 81
69609: PUSH
69610: LD_VAR 0 8
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 69
69623: ST_TO_ADDR
// for i in result do
69624: LD_ADDR_VAR 0 4
69628: PUSH
69629: LD_VAR 0 3
69633: PUSH
69634: FOR_IN
69635: IFFALSE 70056
// begin tag := GetTag ( i ) + 1 ;
69637: LD_ADDR_VAR 0 9
69641: PUSH
69642: LD_VAR 0 4
69646: PPUSH
69647: CALL_OW 110
69651: PUSH
69652: LD_INT 1
69654: PLUS
69655: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69656: LD_ADDR_VAR 0 7
69660: PUSH
69661: LD_VAR 0 4
69665: PPUSH
69666: CALL_OW 250
69670: PPUSH
69671: LD_VAR 0 4
69675: PPUSH
69676: CALL_OW 251
69680: PPUSH
69681: LD_INT 6
69683: PPUSH
69684: CALL 69257 0 3
69688: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69689: LD_VAR 0 4
69693: PPUSH
69694: CALL_OW 247
69698: PUSH
69699: LD_INT 2
69701: EQUAL
69702: PUSH
69703: LD_VAR 0 7
69707: AND
69708: PUSH
69709: LD_VAR 0 4
69713: PPUSH
69714: CALL_OW 264
69718: PUSH
69719: LD_VAR 0 10
69723: IN
69724: NOT
69725: AND
69726: IFFALSE 69765
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69728: LD_VAR 0 4
69732: PPUSH
69733: LD_VAR 0 7
69737: PUSH
69738: LD_INT 1
69740: ARRAY
69741: PUSH
69742: LD_INT 1
69744: ARRAY
69745: PPUSH
69746: LD_VAR 0 7
69750: PUSH
69751: LD_INT 1
69753: ARRAY
69754: PUSH
69755: LD_INT 2
69757: ARRAY
69758: PPUSH
69759: CALL_OW 116
69763: GO 70054
// if path > tag then
69765: LD_VAR 0 2
69769: PUSH
69770: LD_VAR 0 9
69774: GREATER
69775: IFFALSE 69983
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69777: LD_ADDR_VAR 0 6
69781: PUSH
69782: LD_VAR 0 5
69786: PPUSH
69787: LD_INT 91
69789: PUSH
69790: LD_VAR 0 4
69794: PUSH
69795: LD_INT 8
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: LIST
69802: PPUSH
69803: CALL_OW 72
69807: ST_TO_ADDR
// if nearEnemy then
69808: LD_VAR 0 6
69812: IFFALSE 69881
// begin if GetWeapon ( i ) = ru_time_lapser then
69814: LD_VAR 0 4
69818: PPUSH
69819: CALL_OW 264
69823: PUSH
69824: LD_INT 49
69826: EQUAL
69827: IFFALSE 69855
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69829: LD_VAR 0 4
69833: PPUSH
69834: LD_VAR 0 6
69838: PPUSH
69839: LD_VAR 0 4
69843: PPUSH
69844: CALL_OW 74
69848: PPUSH
69849: CALL_OW 112
69853: GO 69879
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69855: LD_VAR 0 4
69859: PPUSH
69860: LD_VAR 0 6
69864: PPUSH
69865: LD_VAR 0 4
69869: PPUSH
69870: CALL_OW 74
69874: PPUSH
69875: CALL 70983 0 2
// end else
69879: GO 69981
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69881: LD_VAR 0 4
69885: PPUSH
69886: LD_VAR 0 2
69890: PUSH
69891: LD_VAR 0 9
69895: ARRAY
69896: PUSH
69897: LD_INT 1
69899: ARRAY
69900: PPUSH
69901: LD_VAR 0 2
69905: PUSH
69906: LD_VAR 0 9
69910: ARRAY
69911: PUSH
69912: LD_INT 2
69914: ARRAY
69915: PPUSH
69916: CALL_OW 297
69920: PUSH
69921: LD_INT 6
69923: GREATER
69924: IFFALSE 69967
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69926: LD_VAR 0 4
69930: PPUSH
69931: LD_VAR 0 2
69935: PUSH
69936: LD_VAR 0 9
69940: ARRAY
69941: PUSH
69942: LD_INT 1
69944: ARRAY
69945: PPUSH
69946: LD_VAR 0 2
69950: PUSH
69951: LD_VAR 0 9
69955: ARRAY
69956: PUSH
69957: LD_INT 2
69959: ARRAY
69960: PPUSH
69961: CALL_OW 114
69965: GO 69981
// SetTag ( i , tag ) ;
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 9
69976: PPUSH
69977: CALL_OW 109
// end else
69981: GO 70054
// if enemy then
69983: LD_VAR 0 5
69987: IFFALSE 70054
// begin if GetWeapon ( i ) = ru_time_lapser then
69989: LD_VAR 0 4
69993: PPUSH
69994: CALL_OW 264
69998: PUSH
69999: LD_INT 49
70001: EQUAL
70002: IFFALSE 70030
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70004: LD_VAR 0 4
70008: PPUSH
70009: LD_VAR 0 5
70013: PPUSH
70014: LD_VAR 0 4
70018: PPUSH
70019: CALL_OW 74
70023: PPUSH
70024: CALL_OW 112
70028: GO 70054
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70030: LD_VAR 0 4
70034: PPUSH
70035: LD_VAR 0 5
70039: PPUSH
70040: LD_VAR 0 4
70044: PPUSH
70045: CALL_OW 74
70049: PPUSH
70050: CALL 70983 0 2
// end ; end ;
70054: GO 69634
70056: POP
70057: POP
// end ;
70058: LD_VAR 0 3
70062: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
70067: PPUSH
// if not unit or IsInUnit ( unit ) then
70068: LD_VAR 0 1
70072: NOT
70073: PUSH
70074: LD_VAR 0 1
70078: PPUSH
70079: CALL_OW 310
70083: OR
70084: IFFALSE 70088
// exit ;
70086: GO 70179
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_VAR 0 1
70097: PPUSH
70098: CALL_OW 250
70102: PPUSH
70103: LD_VAR 0 2
70107: PPUSH
70108: LD_INT 1
70110: PPUSH
70111: CALL_OW 272
70115: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70116: LD_ADDR_VAR 0 5
70120: PUSH
70121: LD_VAR 0 1
70125: PPUSH
70126: CALL_OW 251
70130: PPUSH
70131: LD_VAR 0 2
70135: PPUSH
70136: LD_INT 1
70138: PPUSH
70139: CALL_OW 273
70143: ST_TO_ADDR
// if ValidHex ( x , y ) then
70144: LD_VAR 0 4
70148: PPUSH
70149: LD_VAR 0 5
70153: PPUSH
70154: CALL_OW 488
70158: IFFALSE 70179
// ComTurnXY ( unit , x , y ) ;
70160: LD_VAR 0 1
70164: PPUSH
70165: LD_VAR 0 4
70169: PPUSH
70170: LD_VAR 0 5
70174: PPUSH
70175: CALL_OW 118
// end ;
70179: LD_VAR 0 3
70183: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70184: LD_INT 0
70186: PPUSH
70187: PPUSH
// result := false ;
70188: LD_ADDR_VAR 0 3
70192: PUSH
70193: LD_INT 0
70195: ST_TO_ADDR
// if not units then
70196: LD_VAR 0 2
70200: NOT
70201: IFFALSE 70205
// exit ;
70203: GO 70250
// for i in units do
70205: LD_ADDR_VAR 0 4
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: FOR_IN
70216: IFFALSE 70248
// if See ( side , i ) then
70218: LD_VAR 0 1
70222: PPUSH
70223: LD_VAR 0 4
70227: PPUSH
70228: CALL_OW 292
70232: IFFALSE 70246
// begin result := true ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_INT 1
70241: ST_TO_ADDR
// exit ;
70242: POP
70243: POP
70244: GO 70250
// end ;
70246: GO 70215
70248: POP
70249: POP
// end ;
70250: LD_VAR 0 3
70254: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70255: LD_INT 0
70257: PPUSH
70258: PPUSH
70259: PPUSH
70260: PPUSH
// if not unit or not points then
70261: LD_VAR 0 1
70265: NOT
70266: PUSH
70267: LD_VAR 0 2
70271: NOT
70272: OR
70273: IFFALSE 70277
// exit ;
70275: GO 70367
// dist := 99999 ;
70277: LD_ADDR_VAR 0 5
70281: PUSH
70282: LD_INT 99999
70284: ST_TO_ADDR
// for i in points do
70285: LD_ADDR_VAR 0 4
70289: PUSH
70290: LD_VAR 0 2
70294: PUSH
70295: FOR_IN
70296: IFFALSE 70365
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70298: LD_ADDR_VAR 0 6
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: LD_VAR 0 4
70312: PUSH
70313: LD_INT 1
70315: ARRAY
70316: PPUSH
70317: LD_VAR 0 4
70321: PUSH
70322: LD_INT 2
70324: ARRAY
70325: PPUSH
70326: CALL_OW 297
70330: ST_TO_ADDR
// if tmpDist < dist then
70331: LD_VAR 0 6
70335: PUSH
70336: LD_VAR 0 5
70340: LESS
70341: IFFALSE 70363
// begin result := i ;
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_VAR 0 4
70352: ST_TO_ADDR
// dist := tmpDist ;
70353: LD_ADDR_VAR 0 5
70357: PUSH
70358: LD_VAR 0 6
70362: ST_TO_ADDR
// end ; end ;
70363: GO 70295
70365: POP
70366: POP
// end ;
70367: LD_VAR 0 3
70371: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70372: LD_INT 0
70374: PPUSH
// uc_side := side ;
70375: LD_ADDR_OWVAR 20
70379: PUSH
70380: LD_VAR 0 1
70384: ST_TO_ADDR
// uc_nation := 3 ;
70385: LD_ADDR_OWVAR 21
70389: PUSH
70390: LD_INT 3
70392: ST_TO_ADDR
// vc_chassis := 25 ;
70393: LD_ADDR_OWVAR 37
70397: PUSH
70398: LD_INT 25
70400: ST_TO_ADDR
// vc_engine := engine_siberite ;
70401: LD_ADDR_OWVAR 39
70405: PUSH
70406: LD_INT 3
70408: ST_TO_ADDR
// vc_control := control_computer ;
70409: LD_ADDR_OWVAR 38
70413: PUSH
70414: LD_INT 3
70416: ST_TO_ADDR
// vc_weapon := 59 ;
70417: LD_ADDR_OWVAR 40
70421: PUSH
70422: LD_INT 59
70424: ST_TO_ADDR
// result := CreateVehicle ;
70425: LD_ADDR_VAR 0 5
70429: PUSH
70430: CALL_OW 45
70434: ST_TO_ADDR
// SetDir ( result , d ) ;
70435: LD_VAR 0 5
70439: PPUSH
70440: LD_VAR 0 4
70444: PPUSH
70445: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70449: LD_VAR 0 5
70453: PPUSH
70454: LD_VAR 0 2
70458: PPUSH
70459: LD_VAR 0 3
70463: PPUSH
70464: LD_INT 0
70466: PPUSH
70467: CALL_OW 48
// end ;
70471: LD_VAR 0 5
70475: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70476: LD_INT 0
70478: PPUSH
70479: PPUSH
70480: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70481: LD_ADDR_VAR 0 2
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70504: LD_VAR 0 1
70508: NOT
70509: PUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL_OW 264
70519: PUSH
70520: LD_INT 12
70522: PUSH
70523: LD_INT 51
70525: PUSH
70526: LD_INT 32
70528: PUSH
70529: LD_INT 89
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: IN
70538: NOT
70539: OR
70540: IFFALSE 70544
// exit ;
70542: GO 70642
// for i := 1 to 3 do
70544: LD_ADDR_VAR 0 3
70548: PUSH
70549: DOUBLE
70550: LD_INT 1
70552: DEC
70553: ST_TO_ADDR
70554: LD_INT 3
70556: PUSH
70557: FOR_TO
70558: IFFALSE 70640
// begin tmp := GetCargo ( cargo , i ) ;
70560: LD_ADDR_VAR 0 4
70564: PUSH
70565: LD_VAR 0 1
70569: PPUSH
70570: LD_VAR 0 3
70574: PPUSH
70575: CALL_OW 289
70579: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70580: LD_ADDR_VAR 0 2
70584: PUSH
70585: LD_VAR 0 2
70589: PPUSH
70590: LD_VAR 0 3
70594: PPUSH
70595: LD_VAR 0 4
70599: PPUSH
70600: CALL_OW 1
70604: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70605: LD_ADDR_VAR 0 2
70609: PUSH
70610: LD_VAR 0 2
70614: PPUSH
70615: LD_INT 4
70617: PPUSH
70618: LD_VAR 0 2
70622: PUSH
70623: LD_INT 4
70625: ARRAY
70626: PUSH
70627: LD_VAR 0 4
70631: PLUS
70632: PPUSH
70633: CALL_OW 1
70637: ST_TO_ADDR
// end ;
70638: GO 70557
70640: POP
70641: POP
// end ;
70642: LD_VAR 0 2
70646: RET
// export function Length ( array ) ; begin
70647: LD_INT 0
70649: PPUSH
// result := array + 0 ;
70650: LD_ADDR_VAR 0 2
70654: PUSH
70655: LD_VAR 0 1
70659: PUSH
70660: LD_INT 0
70662: PLUS
70663: ST_TO_ADDR
// end ;
70664: LD_VAR 0 2
70668: RET
// export function PrepareArray ( array ) ; begin
70669: LD_INT 0
70671: PPUSH
// result := array diff 0 ;
70672: LD_ADDR_VAR 0 2
70676: PUSH
70677: LD_VAR 0 1
70681: PUSH
70682: LD_INT 0
70684: DIFF
70685: ST_TO_ADDR
// if not result [ 1 ] then
70686: LD_VAR 0 2
70690: PUSH
70691: LD_INT 1
70693: ARRAY
70694: NOT
70695: IFFALSE 70715
// result := Delete ( result , 1 ) ;
70697: LD_ADDR_VAR 0 2
70701: PUSH
70702: LD_VAR 0 2
70706: PPUSH
70707: LD_INT 1
70709: PPUSH
70710: CALL_OW 3
70714: ST_TO_ADDR
// end ;
70715: LD_VAR 0 2
70719: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70720: LD_INT 0
70722: PPUSH
70723: PPUSH
70724: PPUSH
70725: PPUSH
// sibRocketRange := 25 ;
70726: LD_ADDR_VAR 0 6
70730: PUSH
70731: LD_INT 25
70733: ST_TO_ADDR
// result := false ;
70734: LD_ADDR_VAR 0 4
70738: PUSH
70739: LD_INT 0
70741: ST_TO_ADDR
// for i := 0 to 5 do
70742: LD_ADDR_VAR 0 5
70746: PUSH
70747: DOUBLE
70748: LD_INT 0
70750: DEC
70751: ST_TO_ADDR
70752: LD_INT 5
70754: PUSH
70755: FOR_TO
70756: IFFALSE 70823
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70758: LD_VAR 0 1
70762: PPUSH
70763: LD_VAR 0 5
70767: PPUSH
70768: LD_VAR 0 6
70772: PPUSH
70773: CALL_OW 272
70777: PPUSH
70778: LD_VAR 0 2
70782: PPUSH
70783: LD_VAR 0 5
70787: PPUSH
70788: LD_VAR 0 6
70792: PPUSH
70793: CALL_OW 273
70797: PPUSH
70798: LD_VAR 0 3
70802: PPUSH
70803: CALL_OW 309
70807: IFFALSE 70821
// begin result := true ;
70809: LD_ADDR_VAR 0 4
70813: PUSH
70814: LD_INT 1
70816: ST_TO_ADDR
// exit ;
70817: POP
70818: POP
70819: GO 70825
// end ;
70821: GO 70755
70823: POP
70824: POP
// end ;
70825: LD_VAR 0 4
70829: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70830: LD_INT 0
70832: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70833: LD_VAR 0 1
70837: PPUSH
70838: LD_VAR 0 2
70842: PPUSH
70843: LD_INT 0
70845: PPUSH
70846: LD_INT 0
70848: PPUSH
70849: LD_INT 1
70851: PPUSH
70852: LD_INT 0
70854: PPUSH
70855: CALL_OW 587
// end ;
70859: LD_VAR 0 3
70863: RET
// export function CenterOnNow ( unit ) ; begin
70864: LD_INT 0
70866: PPUSH
// result := IsInUnit ( unit ) ;
70867: LD_ADDR_VAR 0 2
70871: PUSH
70872: LD_VAR 0 1
70876: PPUSH
70877: CALL_OW 310
70881: ST_TO_ADDR
// if not result then
70882: LD_VAR 0 2
70886: NOT
70887: IFFALSE 70899
// result := unit ;
70889: LD_ADDR_VAR 0 2
70893: PUSH
70894: LD_VAR 0 1
70898: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70899: LD_VAR 0 1
70903: PPUSH
70904: CALL_OW 87
// end ;
70908: LD_VAR 0 2
70912: RET
// export function ComMoveHex ( unit , hex ) ; begin
70913: LD_INT 0
70915: PPUSH
// if not hex then
70916: LD_VAR 0 2
70920: NOT
70921: IFFALSE 70925
// exit ;
70923: GO 70978
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70925: LD_VAR 0 2
70929: PUSH
70930: LD_INT 1
70932: ARRAY
70933: PPUSH
70934: LD_VAR 0 2
70938: PUSH
70939: LD_INT 2
70941: ARRAY
70942: PPUSH
70943: CALL_OW 428
70947: IFFALSE 70951
// exit ;
70949: GO 70978
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70951: LD_VAR 0 1
70955: PPUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 1
70963: ARRAY
70964: PPUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_INT 2
70972: ARRAY
70973: PPUSH
70974: CALL_OW 111
// end ;
70978: LD_VAR 0 3
70982: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70983: LD_INT 0
70985: PPUSH
70986: PPUSH
70987: PPUSH
// if not unit or not enemy then
70988: LD_VAR 0 1
70992: NOT
70993: PUSH
70994: LD_VAR 0 2
70998: NOT
70999: OR
71000: IFFALSE 71004
// exit ;
71002: GO 71128
// x := GetX ( enemy ) ;
71004: LD_ADDR_VAR 0 4
71008: PUSH
71009: LD_VAR 0 2
71013: PPUSH
71014: CALL_OW 250
71018: ST_TO_ADDR
// y := GetY ( enemy ) ;
71019: LD_ADDR_VAR 0 5
71023: PUSH
71024: LD_VAR 0 2
71028: PPUSH
71029: CALL_OW 251
71033: ST_TO_ADDR
// if ValidHex ( x , y ) then
71034: LD_VAR 0 4
71038: PPUSH
71039: LD_VAR 0 5
71043: PPUSH
71044: CALL_OW 488
71048: IFFALSE 71128
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71050: LD_VAR 0 2
71054: PPUSH
71055: CALL_OW 247
71059: PUSH
71060: LD_INT 3
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: IN
71070: PUSH
71071: LD_VAR 0 1
71075: PPUSH
71076: CALL_OW 255
71080: PPUSH
71081: LD_VAR 0 2
71085: PPUSH
71086: CALL_OW 292
71090: AND
71091: IFFALSE 71109
// ComAttackUnit ( unit , enemy ) else
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_VAR 0 2
71102: PPUSH
71103: CALL_OW 115
71107: GO 71128
// ComAgressiveMove ( unit , x , y ) ;
71109: LD_VAR 0 1
71113: PPUSH
71114: LD_VAR 0 4
71118: PPUSH
71119: LD_VAR 0 5
71123: PPUSH
71124: CALL_OW 114
// end ; end_of_file
71128: LD_VAR 0 3
71132: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71133: LD_VAR 0 1
71137: PUSH
71138: LD_INT 200
71140: DOUBLE
71141: GREATEREQUAL
71142: IFFALSE 71150
71144: LD_INT 299
71146: DOUBLE
71147: LESSEQUAL
71148: IFTRUE 71152
71150: GO 71184
71152: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 2
71162: PPUSH
71163: LD_VAR 0 3
71167: PPUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: LD_VAR 0 5
71177: PPUSH
71178: CALL 9875 0 5
71182: GO 71261
71184: LD_INT 300
71186: DOUBLE
71187: GREATEREQUAL
71188: IFFALSE 71196
71190: LD_INT 399
71192: DOUBLE
71193: LESSEQUAL
71194: IFTRUE 71198
71196: GO 71260
71198: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 2
71208: PPUSH
71209: LD_VAR 0 3
71213: PPUSH
71214: LD_VAR 0 4
71218: PPUSH
71219: LD_VAR 0 5
71223: PPUSH
71224: LD_VAR 0 6
71228: PPUSH
71229: LD_VAR 0 7
71233: PPUSH
71234: LD_VAR 0 8
71238: PPUSH
71239: LD_VAR 0 9
71243: PPUSH
71244: LD_VAR 0 10
71248: PPUSH
71249: LD_VAR 0 11
71253: PPUSH
71254: CALL 26291 0 11
71258: GO 71261
71260: POP
// end ;
71261: PPOPN 11
71263: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71264: LD_VAR 0 1
71268: PPUSH
71269: LD_VAR 0 2
71273: PPUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: LD_VAR 0 5
71288: PPUSH
71289: CALL 9611 0 5
// end ; end_of_file
71293: PPOPN 5
71295: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71296: LD_VAR 0 1
71300: PPUSH
71301: LD_VAR 0 2
71305: PPUSH
71306: LD_VAR 0 3
71310: PPUSH
71311: LD_VAR 0 4
71315: PPUSH
71316: LD_VAR 0 5
71320: PPUSH
71321: LD_VAR 0 6
71325: PPUSH
71326: CALL 13943 0 6
// end ;
71330: PPOPN 6
71332: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71333: LD_INT 0
71335: PPUSH
// begin if not units then
71336: LD_VAR 0 1
71340: NOT
71341: IFFALSE 71345
// exit ;
71343: GO 71345
// end ;
71345: PPOPN 7
71347: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71348: CALL 13847 0 0
// end ;
71352: PPOPN 1
71354: END
