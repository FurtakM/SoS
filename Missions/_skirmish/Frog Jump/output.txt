// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8720 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8099 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10695 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6919 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10130 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10515 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6210 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5265 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5265 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL 11063 0 2
// side := GetSide ( fac ) ;
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_VAR 0 2
4456: PPUSH
4457: CALL_OW 255
4461: ST_TO_ADDR
// case side of 7 :
4462: LD_VAR 0 3
4466: PUSH
4467: LD_INT 7
4469: DOUBLE
4470: EQUAL
4471: IFTRUE 4475
4473: GO 4522
4475: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4476: LD_ADDR_EXP 32
4480: PUSH
4481: LD_EXP 32
4485: PPUSH
4486: LD_EXP 32
4490: PUSH
4491: LD_INT 1
4493: PLUS
4494: PPUSH
4495: LD_VAR 0 1
4499: PPUSH
4500: CALL_OW 1
4504: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4505: LD_VAR 0 1
4509: PPUSH
4510: LD_INT 112
4512: PPUSH
4513: LD_INT 175
4515: PPUSH
4516: CALL_OW 171
// end ; 8 :
4520: GO 4608
4522: LD_INT 8
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4607
4530: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4531: LD_VAR 0 1
4535: PPUSH
4536: CALL_OW 264
4540: PUSH
4541: LD_INT 31
4543: EQUAL
4544: IFFALSE 4561
// ComMoveXY ( veh , 145 , 66 ) ;
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_INT 145
4553: PPUSH
4554: LD_INT 66
4556: PPUSH
4557: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4561: LD_VAR 0 1
4565: PPUSH
4566: CALL_OW 265
4570: PUSH
4571: LD_INT 11
4573: EQUAL
4574: IFFALSE 4605
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4576: LD_ADDR_EXP 33
4580: PUSH
4581: LD_EXP 33
4585: PPUSH
4586: LD_EXP 33
4590: PUSH
4591: LD_INT 1
4593: PLUS
4594: PPUSH
4595: LD_VAR 0 1
4599: PPUSH
4600: CALL_OW 1
4604: ST_TO_ADDR
// end ; end ;
4605: GO 4608
4607: POP
// end ;
4608: PPOPN 3
4610: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4611: LD_VAR 0 1
4615: PPUSH
4616: CALL 10941 0 1
// if un in legion_force then
4620: LD_VAR 0 1
4624: PUSH
4625: LD_EXP 33
4629: IN
4630: IFFALSE 4648
// legion_force := legion_force diff un ;
4632: LD_ADDR_EXP 33
4636: PUSH
4637: LD_EXP 33
4641: PUSH
4642: LD_VAR 0 1
4646: DIFF
4647: ST_TO_ADDR
// if un in al_force then
4648: LD_VAR 0 1
4652: PUSH
4653: LD_EXP 32
4657: IN
4658: IFFALSE 4676
// al_force := al_force diff un ;
4660: LD_ADDR_EXP 32
4664: PUSH
4665: LD_EXP 32
4669: PUSH
4670: LD_VAR 0 1
4674: DIFF
4675: ST_TO_ADDR
// end ;
4676: PPOPN 1
4678: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4679: LD_VAR 0 1
4683: PUSH
4684: LD_INT 68
4686: EQUAL
4687: PUSH
4688: LD_VAR 0 2
4692: PPUSH
4693: CALL_OW 257
4697: PUSH
4698: LD_INT 17
4700: EQUAL
4701: AND
4702: IFFALSE 4745
// begin Wait ( 0 0$01 ) ;
4704: LD_INT 35
4706: PPUSH
4707: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4711: LD_VAR 0 2
4715: PPUSH
4716: LD_INT 22
4718: PUSH
4719: LD_INT 6
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: PPUSH
4731: LD_VAR 0 2
4735: PPUSH
4736: CALL_OW 74
4740: PPUSH
4741: CALL_OW 115
// end ; end ;
4745: PPOPN 2
4747: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4748: LD_INT 0
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4753: LD_VAR 0 2
4757: PPUSH
4758: LD_VAR 0 3
4762: PPUSH
4763: LD_INT 3
4765: PPUSH
4766: CALL_OW 309
4770: PUSH
4771: LD_INT 6
4773: PPUSH
4774: LD_INT 81
4776: PUSH
4777: LD_INT 6
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PPUSH
4784: CALL_OW 70
4788: PUSH
4789: LD_INT 0
4791: EQUAL
4792: AND
4793: IFFALSE 4956
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4795: LD_ADDR_VAR 0 7
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 6
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 25
4812: PUSH
4813: LD_INT 16
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 69
4828: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4829: LD_VAR 0 7
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_INT 22
4840: PUSH
4841: LD_INT 6
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 2
4850: PUSH
4851: LD_INT 30
4853: PUSH
4854: LD_INT 0
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 30
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PPUSH
4880: CALL_OW 69
4884: PUSH
4885: LD_INT 0
4887: EQUAL
4888: OR
4889: IFFALSE 4893
// exit ;
4891: GO 4956
// if UnitFilter ( apes , [ f_inside ] ) then
4893: LD_VAR 0 7
4897: PPUSH
4898: LD_INT 54
4900: PUSH
4901: EMPTY
4902: LIST
4903: PPUSH
4904: CALL_OW 72
4908: IFFALSE 4937
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4910: LD_VAR 0 7
4914: PPUSH
4915: LD_INT 54
4917: PUSH
4918: EMPTY
4919: LIST
4920: PPUSH
4921: CALL_OW 72
4925: PPUSH
4926: CALL_OW 122
// wait ( 3 ) ;
4930: LD_INT 3
4932: PPUSH
4933: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4937: LD_VAR 0 7
4941: PPUSH
4942: LD_VAR 0 2
4946: PPUSH
4947: LD_VAR 0 3
4951: PPUSH
4952: CALL_OW 177
// end ; end ;
4956: PPOPN 8
4958: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4959: LD_VAR 0 1
4963: PUSH
4964: LD_EXP 32
4968: IN
4969: IFFALSE 4987
// al_force := al_force diff un ;
4971: LD_ADDR_EXP 32
4975: PUSH
4976: LD_EXP 32
4980: PUSH
4981: LD_VAR 0 1
4985: DIFF
4986: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 2
4999: EQUAL
5000: IFFALSE 5011
// ComUnlink ( un ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 136
// end ;
5011: PPOPN 1
5013: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5014: LD_VAR 0 1
5018: PUSH
5019: LD_INT 25
5021: EQUAL
5022: IFFALSE 5032
// player_start_res_sib_bomb := true ;
5024: LD_ADDR_EXP 4
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// if tech = tech_artifact then
5032: LD_VAR 0 1
5036: PUSH
5037: LD_INT 24
5039: EQUAL
5040: IFFALSE 5050
// player_start_res_artifact := true ;
5042: LD_ADDR_EXP 5
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// end ;
5050: PPOPN 2
5052: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 6
5060: EQUAL
5061: IFFALSE 5071
// player_artifact_loaded := false ;
5063: LD_ADDR_EXP 18
5067: PUSH
5068: LD_INT 0
5070: ST_TO_ADDR
// end ;
5071: PPOPN 2
5073: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 6
5081: EQUAL
5082: IFFALSE 5092
// player_artifact_loaded := true ;
5084: LD_ADDR_EXP 18
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// end ;
5092: PPOPN 2
5094: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5095: LD_INT 0
5097: PPUSH
// begin player_used_sib_bomb := true ;
5098: LD_ADDR_EXP 12
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// for i = 1 to 3 do
5106: LD_ADDR_VAR 0 4
5110: PUSH
5111: DOUBLE
5112: LD_INT 1
5114: DEC
5115: ST_TO_ADDR
5116: LD_INT 3
5118: PUSH
5119: FOR_TO
5120: IFFALSE 5193
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5122: LD_VAR 0 2
5126: PPUSH
5127: LD_VAR 0 3
5131: PPUSH
5132: LD_EXP 15
5136: PUSH
5137: LD_VAR 0 4
5141: ARRAY
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_EXP 15
5151: PUSH
5152: LD_VAR 0 4
5156: ARRAY
5157: PUSH
5158: LD_INT 2
5160: ARRAY
5161: PPUSH
5162: CALL_OW 298
5166: PUSH
5167: LD_EXP 17
5171: LESSEQUAL
5172: IFFALSE 5191
// begin wait ( 0 0$5 ) ;
5174: LD_INT 175
5176: PPUSH
5177: CALL_OW 67
// artifact_destroyed := true ;
5181: LD_ADDR_EXP 16
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// break ;
5189: GO 5193
// end ; end ;
5191: GO 5119
5193: POP
5194: POP
// end ;
5195: PPOPN 4
5197: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5198: LD_VAR 0 1
5202: PPUSH
5203: LD_VAR 0 2
5207: PPUSH
5208: LD_VAR 0 3
5212: PPUSH
5213: CALL 11039 0 3
// end ;
5217: PPOPN 3
5219: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5220: LD_VAR 0 1
5224: PPUSH
5225: CALL 11047 0 1
// end ; end_of_file
5229: PPOPN 1
5231: END
// export function CreateArtifact ( type , x , y ) ; begin
5232: LD_INT 0
5234: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5235: LD_INT 4
5237: PPUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: LD_VAR 0 3
5252: PPUSH
5253: LD_INT 0
5255: PPUSH
5256: CALL_OW 58
// end ;
5260: LD_VAR 0 4
5264: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5265: LD_INT 0
5267: PPUSH
5268: PPUSH
5269: PPUSH
// if not GetControl ( veh ) = control_manual then
5270: LD_VAR 0 1
5274: PPUSH
5275: CALL_OW 263
5279: PUSH
5280: LD_INT 1
5282: EQUAL
5283: NOT
5284: IFFALSE 5296
// result := false else
5286: LD_ADDR_VAR 0 2
5290: PUSH
5291: LD_INT 0
5293: ST_TO_ADDR
5294: GO 5441
// if veh in FilterAllUnits ( [ f_empty ] ) then
5296: LD_VAR 0 1
5300: PUSH
5301: LD_INT 58
5303: PUSH
5304: EMPTY
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: IN
5312: IFFALSE 5324
// result := false else
5314: LD_ADDR_VAR 0 2
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
5322: GO 5441
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: LD_INT 22
5331: PUSH
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 255
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 55
5348: PUSH
5349: EMPTY
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PPUSH
5356: CALL_OW 69
5360: ST_TO_ADDR
// if not filter then
5361: LD_VAR 0 4
5365: NOT
5366: IFFALSE 5378
// result := false else
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: LD_INT 0
5375: ST_TO_ADDR
5376: GO 5441
// for i = 1 to filter do
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: DOUBLE
5384: LD_INT 1
5386: DEC
5387: ST_TO_ADDR
5388: LD_VAR 0 4
5392: PUSH
5393: FOR_TO
5394: IFFALSE 5439
// if IsDriver ( filter [ i ] ) = veh then
5396: LD_VAR 0 4
5400: PUSH
5401: LD_VAR 0 3
5405: ARRAY
5406: PPUSH
5407: CALL 64373 0 1
5411: PUSH
5412: LD_VAR 0 1
5416: EQUAL
5417: IFFALSE 5437
// begin result := filter [ i ] ;
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 4
5428: PUSH
5429: LD_VAR 0 3
5433: ARRAY
5434: ST_TO_ADDR
// break ;
5435: GO 5439
// end ;
5437: GO 5393
5439: POP
5440: POP
// end ; end ;
5441: LD_VAR 0 2
5445: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5446: LD_INT 0
5448: PPUSH
5449: PPUSH
5450: PPUSH
// result := 0 ;
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5459: LD_ADDR_VAR 0 4
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_VAR 0 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 2
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 0
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 30
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 69
5512: ST_TO_ADDR
// if deps then
5513: LD_VAR 0 4
5517: IFFALSE 5565
// for i in deps do
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: LD_VAR 0 4
5528: PUSH
5529: FOR_IN
5530: IFFALSE 5563
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_VAR 0 3
5546: PPUSH
5547: CALL_OW 274
5551: PPUSH
5552: LD_INT 3
5554: PPUSH
5555: CALL_OW 275
5559: PLUS
5560: ST_TO_ADDR
5561: GO 5529
5563: POP
5564: POP
// end ;
5565: LD_VAR 0 2
5569: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5570: LD_INT 0
5572: PPUSH
5573: PPUSH
5574: PPUSH
5575: PPUSH
// if val <= 0 then
5576: LD_VAR 0 2
5580: PUSH
5581: LD_INT 0
5583: LESSEQUAL
5584: IFFALSE 5588
// exit ;
5586: GO 5780
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 2
5607: PUSH
5608: LD_INT 30
5610: PUSH
5611: LD_INT 0
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 30
5620: PUSH
5621: LD_INT 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 69
5641: ST_TO_ADDR
// if deps then
5642: LD_VAR 0 5
5646: IFFALSE 5780
// for i in deps do
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: LD_VAR 0 5
5657: PUSH
5658: FOR_IN
5659: IFFALSE 5778
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5661: LD_ADDR_VAR 0 6
5665: PUSH
5666: LD_VAR 0 4
5670: PPUSH
5671: CALL_OW 274
5675: PPUSH
5676: LD_INT 3
5678: PPUSH
5679: CALL_OW 275
5683: ST_TO_ADDR
// if val < s then
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 6
5693: LESS
5694: IFFALSE 5740
// begin s := s - val ;
5696: LD_ADDR_VAR 0 6
5700: PUSH
5701: LD_VAR 0 6
5705: PUSH
5706: LD_VAR 0 2
5710: MINUS
5711: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5712: LD_VAR 0 4
5716: PPUSH
5717: CALL_OW 274
5721: PPUSH
5722: LD_INT 3
5724: PPUSH
5725: LD_VAR 0 6
5729: PPUSH
5730: CALL_OW 277
// exit ;
5734: POP
5735: POP
5736: GO 5780
// end else
5738: GO 5776
// begin val := val - s ;
5740: LD_ADDR_VAR 0 2
5744: PUSH
5745: LD_VAR 0 2
5749: PUSH
5750: LD_VAR 0 6
5754: MINUS
5755: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5756: LD_VAR 0 4
5760: PPUSH
5761: CALL_OW 274
5765: PPUSH
5766: LD_INT 3
5768: PPUSH
5769: LD_INT 0
5771: PPUSH
5772: CALL_OW 277
// end ; end ;
5776: GO 5658
5778: POP
5779: POP
// end ;
5780: LD_VAR 0 3
5784: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5785: LD_VAR 0 1
5789: PUSH
5790: LD_EXP 35
5794: IN
5795: NOT
5796: IFFALSE 5827
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5798: LD_ADDR_EXP 35
5802: PUSH
5803: LD_EXP 35
5807: PPUSH
5808: LD_EXP 35
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 2
5826: ST_TO_ADDR
// end ;
5827: PPOPN 1
5829: END
// export function DestinationReachable ( unit , x , y ) ; begin
5830: LD_INT 0
5832: PPUSH
// if unit in unreachableList then
5833: LD_VAR 0 1
5837: PUSH
5838: LD_EXP 35
5842: IN
5843: IFFALSE 5861
// unreachableList := unreachableList diff unit ;
5845: LD_ADDR_EXP 35
5849: PUSH
5850: LD_EXP 35
5854: PUSH
5855: LD_VAR 0 1
5859: DIFF
5860: ST_TO_ADDR
// if ValidHex ( x , y ) then
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 488
5875: IFFALSE 5901
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5877: LD_VAR 0 1
5881: PPUSH
5882: LD_VAR 0 2
5886: PPUSH
5887: LD_VAR 0 3
5891: PPUSH
5892: CALL_OW 428
5896: PPUSH
5897: CALL_OW 115
// Wait ( 3 ) ;
5901: LD_INT 3
5903: PPUSH
5904: CALL_OW 67
// if unit in unreachableList then
5908: LD_VAR 0 1
5912: PUSH
5913: LD_EXP 35
5917: IN
5918: IFFALSE 5930
// result := false else
5920: LD_ADDR_VAR 0 4
5924: PUSH
5925: LD_INT 0
5927: ST_TO_ADDR
5928: GO 5938
// result := true ;
5930: LD_ADDR_VAR 0 4
5934: PUSH
5935: LD_INT 1
5937: ST_TO_ADDR
// end ;
5938: LD_VAR 0 4
5942: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5943: LD_INT 0
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5953: LD_ADDR_VAR 0 5
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_VAR 0 2
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 69
5974: ST_TO_ADDR
// change_target_counter := 0 ;
5975: LD_ADDR_VAR 0 9
5979: PUSH
5980: LD_INT 0
5982: ST_TO_ADDR
// last_target := 0 ;
5983: LD_ADDR_VAR 0 10
5987: PUSH
5988: LD_INT 0
5990: ST_TO_ADDR
// if not enemy then
5991: LD_VAR 0 5
5995: NOT
5996: IFFALSE 6000
// exit ;
5998: GO 6205
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
6000: LD_VAR 0 1
6004: PPUSH
6005: CALL_OW 300
6009: PUSH
6010: LD_VAR 0 9
6014: PUSH
6015: LD_INT 4
6017: LESS
6018: AND
6019: IFFALSE 6205
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
6021: LD_VAR 0 5
6025: PPUSH
6026: LD_INT 59
6028: PUSH
6029: EMPTY
6030: LIST
6031: PPUSH
6032: CALL_OW 72
6036: IFFALSE 6172
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6038: LD_ADDR_VAR 0 6
6042: PUSH
6043: LD_VAR 0 5
6047: PPUSH
6048: LD_INT 59
6050: PUSH
6051: EMPTY
6052: LIST
6053: PPUSH
6054: CALL_OW 72
6058: PPUSH
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL_OW 74
6068: ST_TO_ADDR
// if ( last_target <> t ) then
6069: LD_VAR 0 10
6073: PUSH
6074: LD_VAR 0 6
6078: NONEQUAL
6079: IFFALSE 6095
// change_target_counter := change_target_counter + 1 ;
6081: LD_ADDR_VAR 0 9
6085: PUSH
6086: LD_VAR 0 9
6090: PUSH
6091: LD_INT 1
6093: PLUS
6094: ST_TO_ADDR
// last_target := t ;
6095: LD_ADDR_VAR 0 10
6099: PUSH
6100: LD_VAR 0 6
6104: ST_TO_ADDR
// x := GetX ( t ) ;
6105: LD_ADDR_VAR 0 7
6109: PUSH
6110: LD_VAR 0 6
6114: PPUSH
6115: CALL_OW 250
6119: ST_TO_ADDR
// y := GetY ( t ) ;
6120: LD_ADDR_VAR 0 8
6124: PUSH
6125: LD_VAR 0 6
6129: PPUSH
6130: CALL_OW 251
6134: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6135: LD_VAR 0 1
6139: PPUSH
6140: LD_VAR 0 7
6144: PPUSH
6145: LD_VAR 0 8
6149: PPUSH
6150: CALL 5830 0 3
6154: IFFALSE 6170
// ComAttackUnit ( unit , t ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: LD_VAR 0 6
6165: PPUSH
6166: CALL_OW 115
// end else
6170: GO 6196
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: CALL_OW 74
6191: PPUSH
6192: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6196: LD_INT 10
6198: PPUSH
6199: CALL_OW 67
// end ;
6203: GO 6000
// end ;
6205: LD_VAR 0 3
6209: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6210: LD_INT 0
6212: PPUSH
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
6218: PPUSH
6219: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6220: LD_ADDR_VAR 0 5
6224: PUSH
6225: LD_INT 22
6227: PUSH
6228: LD_VAR 0 2
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PPUSH
6237: CALL_OW 69
6241: ST_TO_ADDR
// target := 0 ;
6242: LD_ADDR_VAR 0 9
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// if not enemy then
6250: LD_VAR 0 5
6254: NOT
6255: IFFALSE 6259
// exit ;
6257: GO 6914
// while units do
6259: LD_VAR 0 1
6263: IFFALSE 6914
// begin wait ( 0 0$0.3 ) ;
6265: LD_INT 10
6267: PPUSH
6268: CALL_OW 67
// for unit in units do
6272: LD_ADDR_VAR 0 10
6276: PUSH
6277: LD_VAR 0 1
6281: PUSH
6282: FOR_IN
6283: IFFALSE 6910
// begin if not IsPlaced ( unit ) then
6285: LD_VAR 0 10
6289: PPUSH
6290: CALL_OW 305
6294: NOT
6295: IFFALSE 6315
// begin units := units diff unit ;
6297: LD_ADDR_VAR 0 1
6301: PUSH
6302: LD_VAR 0 1
6306: PUSH
6307: LD_VAR 0 10
6311: DIFF
6312: ST_TO_ADDR
// continue ;
6313: GO 6282
// end ; if not IsPlaced ( target ) then
6315: LD_VAR 0 9
6319: PPUSH
6320: CALL_OW 305
6324: NOT
6325: IFFALSE 6335
// target := 0 ;
6327: LD_ADDR_VAR 0 9
6331: PUSH
6332: LD_INT 0
6334: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6335: LD_VAR 0 9
6339: NOT
6340: PUSH
6341: LD_VAR 0 5
6345: PPUSH
6346: LD_INT 21
6348: PUSH
6349: LD_INT 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 54
6361: PUSH
6362: EMPTY
6363: LIST
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL_OW 72
6377: AND
6378: IFFALSE 6640
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6380: LD_ADDR_VAR 0 6
6384: PUSH
6385: LD_VAR 0 5
6389: PPUSH
6390: LD_INT 21
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 54
6405: PUSH
6406: EMPTY
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 72
6421: PPUSH
6422: LD_VAR 0 10
6426: PPUSH
6427: CALL_OW 74
6431: ST_TO_ADDR
// x := GetX ( t ) ;
6432: LD_ADDR_VAR 0 7
6436: PUSH
6437: LD_VAR 0 6
6441: PPUSH
6442: CALL_OW 250
6446: ST_TO_ADDR
// y := GetY ( t ) ;
6447: LD_ADDR_VAR 0 8
6451: PUSH
6452: LD_VAR 0 6
6456: PPUSH
6457: CALL_OW 251
6461: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6462: LD_VAR 0 10
6466: PPUSH
6467: LD_VAR 0 7
6471: PPUSH
6472: LD_VAR 0 8
6476: PPUSH
6477: CALL 5830 0 3
6481: IFFALSE 6495
// target := t else
6483: LD_ADDR_VAR 0 9
6487: PUSH
6488: LD_VAR 0 6
6492: ST_TO_ADDR
6493: GO 6640
// if UnitFilter ( enemy , [ f_occupied ] ) then
6495: LD_VAR 0 5
6499: PPUSH
6500: LD_INT 59
6502: PUSH
6503: EMPTY
6504: LIST
6505: PPUSH
6506: CALL_OW 72
6510: IFFALSE 6640
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6512: LD_ADDR_VAR 0 6
6516: PUSH
6517: LD_VAR 0 5
6521: PPUSH
6522: LD_INT 59
6524: PUSH
6525: EMPTY
6526: LIST
6527: PPUSH
6528: CALL_OW 72
6532: PPUSH
6533: LD_VAR 0 10
6537: PPUSH
6538: CALL_OW 74
6542: ST_TO_ADDR
// x := GetX ( t ) ;
6543: LD_ADDR_VAR 0 7
6547: PUSH
6548: LD_VAR 0 6
6552: PPUSH
6553: CALL_OW 250
6557: ST_TO_ADDR
// y := GetY ( t ) ;
6558: LD_ADDR_VAR 0 8
6562: PUSH
6563: LD_VAR 0 6
6567: PPUSH
6568: CALL_OW 251
6572: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6573: LD_VAR 0 10
6577: PPUSH
6578: LD_VAR 0 7
6582: PPUSH
6583: LD_VAR 0 8
6587: PPUSH
6588: CALL 5830 0 3
6592: IFFALSE 6606
// target := t else
6594: LD_ADDR_VAR 0 9
6598: PUSH
6599: LD_VAR 0 6
6603: ST_TO_ADDR
6604: GO 6640
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6606: LD_VAR 0 10
6610: PPUSH
6611: LD_INT 22
6613: PUSH
6614: LD_INT 6
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_VAR 0 10
6630: PPUSH
6631: CALL_OW 74
6635: PPUSH
6636: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6640: LD_VAR 0 9
6644: NOT
6645: PUSH
6646: LD_VAR 0 10
6650: PPUSH
6651: LD_VAR 0 9
6655: PPUSH
6656: CALL_OW 250
6660: PPUSH
6661: LD_VAR 0 9
6665: PPUSH
6666: CALL_OW 251
6670: PPUSH
6671: CALL 5830 0 3
6675: NOT
6676: OR
6677: IFFALSE 6711
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6679: LD_ADDR_VAR 0 9
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_VAR 0 2
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PPUSH
6696: CALL_OW 69
6700: PPUSH
6701: LD_VAR 0 10
6705: PPUSH
6706: CALL_OW 74
6710: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6711: LD_VAR 0 9
6715: PPUSH
6716: LD_VAR 0 10
6720: PPUSH
6721: CALL_OW 296
6725: PUSH
6726: LD_INT 4
6728: LESS
6729: PUSH
6730: LD_VAR 0 10
6734: PPUSH
6735: CALL_OW 256
6739: PUSH
6740: LD_INT 600
6742: LESS
6743: AND
6744: PUSH
6745: LD_VAR 0 10
6749: PPUSH
6750: CALL_OW 256
6754: PUSH
6755: LD_INT 200
6757: LESS
6758: PUSH
6759: LD_OWVAR 3
6763: PUSH
6764: LD_VAR 0 10
6768: DIFF
6769: PPUSH
6770: LD_VAR 0 10
6774: PPUSH
6775: CALL_OW 74
6779: PPUSH
6780: CALL_OW 255
6784: PUSH
6785: LD_VAR 0 10
6789: PPUSH
6790: CALL_OW 255
6794: NONEQUAL
6795: AND
6796: OR
6797: IFFALSE 6848
// begin for i = 1 to 4 do
6799: LD_ADDR_VAR 0 4
6803: PUSH
6804: DOUBLE
6805: LD_INT 1
6807: DEC
6808: ST_TO_ADDR
6809: LD_INT 4
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6844
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6815: LD_VAR 0 10
6819: PPUSH
6820: CALL_OW 250
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: CALL_OW 251
6834: PPUSH
6835: LD_INT 1
6837: PPUSH
6838: CALL_OW 453
6842: GO 6812
6844: POP
6845: POP
// end else
6846: GO 6908
// if GetType ( target ) <> unit_human then
6848: LD_VAR 0 9
6852: PPUSH
6853: CALL_OW 247
6857: PUSH
6858: LD_INT 1
6860: NONEQUAL
6861: IFFALSE 6879
// ComAttackUnit ( unit , target ) else
6863: LD_VAR 0 10
6867: PPUSH
6868: LD_VAR 0 9
6872: PPUSH
6873: CALL_OW 115
6877: GO 6908
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6879: LD_VAR 0 10
6883: PPUSH
6884: LD_VAR 0 9
6888: PPUSH
6889: CALL_OW 250
6893: PPUSH
6894: LD_VAR 0 9
6898: PPUSH
6899: CALL_OW 251
6903: PPUSH
6904: CALL_OW 111
// end ;
6908: GO 6282
6910: POP
6911: POP
// end ;
6912: GO 6259
// end ; end_of_file
6914: LD_VAR 0 3
6918: RET
// export function Action ; var dial ; begin
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6923: LD_INT 192
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 86
// InGameOn ;
6933: CALL_OW 8
// PrepareRussian ;
6937: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6941: LD_ADDR_VAR 0 2
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_INT 6
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 25
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 4
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: PUSH
7015: LD_EXP 2
7019: DIFF
7020: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
7021: LD_VAR 0 2
7025: PUSH
7026: LD_INT 1
7028: ARRAY
7029: PPUSH
7030: LD_INT 202
7032: PPUSH
7033: LD_INT 40
7035: PPUSH
7036: CALL_OW 111
// Wait ( 0 0$03 ) ;
7040: LD_INT 105
7042: PPUSH
7043: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7047: LD_EXP 2
7051: PPUSH
7052: LD_STRING DDav-1
7054: PPUSH
7055: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: LD_EXP 2
7072: PPUSH
7073: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7077: LD_EXP 2
7081: PPUSH
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7095: LD_INT 202
7097: PPUSH
7098: LD_INT 40
7100: PPUSH
7101: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7105: LD_VAR 0 2
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_STRING DRus-1
7116: PPUSH
7117: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7121: LD_EXP 2
7125: PPUSH
7126: LD_STRING DDav-2
7128: PPUSH
7129: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7133: LD_VAR 0 2
7137: PUSH
7138: LD_INT 1
7140: ARRAY
7141: PPUSH
7142: LD_STRING DRus-2
7144: PPUSH
7145: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7149: LD_EXP 2
7153: PPUSH
7154: LD_STRING DDav-3
7156: PPUSH
7157: CALL_OW 88
// InGameOff ;
7161: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7165: LD_INT 10
7167: PPUSH
7168: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7172: LD_STRING C1
7174: PPUSH
7175: CALL_OW 337
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7184: LD_INT 22
7186: PUSH
7187: LD_INT 6
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 30
7199: PUSH
7200: LD_INT 6
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 30
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 30
7219: PUSH
7220: LD_INT 8
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PPUSH
7237: CALL_OW 69
7241: IFFALSE 7341
7243: GO 7245
7245: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7246: LD_EXP 2
7250: PPUSH
7251: LD_STRING DDav-4
7253: PPUSH
7254: CALL_OW 88
// Wait ( 0 0$40 ) ;
7258: LD_INT 1400
7260: PPUSH
7261: CALL_OW 67
// DialogueOn ;
7265: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7269: LD_EXP 3
7273: PPUSH
7274: LD_STRING Dver-Meet-1
7276: PPUSH
7277: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7281: LD_EXP 2
7285: PPUSH
7286: LD_STRING DDav-Meet-1
7288: PPUSH
7289: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7293: LD_EXP 3
7297: PPUSH
7298: LD_STRING Dver-Meet-2
7300: PPUSH
7301: CALL_OW 94
// DialogueOff ;
7305: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7309: LD_INT 19600
7311: PUSH
7312: LD_INT 15400
7314: PUSH
7315: LD_INT 13300
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: PPUSH
7329: CALL_OW 67
// legion_attacks_active := true ;
7333: LD_ADDR_EXP 7
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// end ;
7341: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7342: LD_INT 22
7344: PUSH
7345: LD_INT 6
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 30
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PPUSH
7366: CALL_OW 69
7370: PUSH
7371: LD_OWVAR 1
7375: PUSH
7376: LD_INT 21000
7378: GREATER
7379: OR
7380: IFFALSE 7614
7382: GO 7384
7384: DISABLE
7385: LD_INT 0
7387: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: LD_INT 22
7395: PUSH
7396: LD_INT 6
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: LD_INT 25
7408: PUSH
7409: LD_INT 1
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 25
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 25
7438: PUSH
7439: LD_INT 4
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_EXP 2
7466: DIFF
7467: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7468: LD_VAR 0 1
7472: PUSH
7473: LD_INT 1
7475: ARRAY
7476: PPUSH
7477: LD_STRING DRus-3
7479: PPUSH
7480: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7484: LD_EXP 2
7488: PPUSH
7489: LD_STRING DDav-5
7491: PPUSH
7492: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 1
7503: ARRAY
7504: PPUSH
7505: LD_STRING DRus-4
7507: PPUSH
7508: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7512: LD_EXP 2
7516: PPUSH
7517: LD_STRING DDav-6
7519: PPUSH
7520: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7524: LD_STRING C2
7526: PPUSH
7527: CALL_OW 337
// Wait ( 5 5$00 ) ;
7531: LD_INT 10500
7533: PPUSH
7534: CALL_OW 67
// DialogueOn ;
7538: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7542: LD_EXP 1
7546: PPUSH
7547: LD_STRING DBag-1
7549: PPUSH
7550: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7554: LD_EXP 2
7558: PPUSH
7559: LD_STRING DDavB-1
7561: PPUSH
7562: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7566: LD_EXP 1
7570: PPUSH
7571: LD_STRING DBag-2
7573: PPUSH
7574: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7578: LD_EXP 2
7582: PPUSH
7583: LD_STRING DDavB-2
7585: PPUSH
7586: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7590: LD_EXP 1
7594: PPUSH
7595: LD_STRING DBag-3
7597: PPUSH
7598: CALL_OW 94
// DialogueOff ;
7602: CALL_OW 7
// alliance_attack_active := true ;
7606: LD_ADDR_EXP 9
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// end ;
7614: PPOPN 1
7616: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7617: LD_EXP 10
7621: IFFALSE 7668
7623: GO 7625
7625: DISABLE
// begin DialogueOn ;
7626: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7630: LD_EXP 10
7634: PUSH
7635: LD_INT 1
7637: ARRAY
7638: PPUSH
7639: LD_EXP 10
7643: PUSH
7644: LD_INT 2
7646: ARRAY
7647: PPUSH
7648: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7652: LD_EXP 2
7656: PPUSH
7657: LD_STRING DDav-Artifact1-1
7659: PPUSH
7660: CALL_OW 88
// DialogueOff ;
7664: CALL_OW 7
// end ;
7668: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7669: LD_EXP 11
7673: IFFALSE 7720
7675: GO 7677
7677: DISABLE
// begin DialogueOn ;
7678: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7682: LD_EXP 11
7686: PUSH
7687: LD_INT 1
7689: ARRAY
7690: PPUSH
7691: LD_EXP 11
7695: PUSH
7696: LD_INT 2
7698: ARRAY
7699: PPUSH
7700: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7704: LD_EXP 2
7708: PPUSH
7709: LD_STRING DDav-Artifact2-1
7711: PPUSH
7712: CALL_OW 88
// DialogueOff ;
7716: CALL_OW 7
// end ;
7720: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7721: LD_EXP 16
7725: PUSH
7726: LD_INT 6
7728: PPUSH
7729: CALL_OW 469
7733: NOT
7734: PUSH
7735: LD_EXP 18
7739: NOT
7740: AND
7741: OR
7742: IFFALSE 7754
7744: GO 7746
7746: DISABLE
// YouLost ( artifact_destroyed ) ;
7747: LD_STRING artifact_destroyed
7749: PPUSH
7750: CALL_OW 104
7754: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7755: LD_EXP 2
7759: PPUSH
7760: CALL_OW 301
7764: IFFALSE 7776
7766: GO 7768
7768: DISABLE
// YouLost ( dead ) ;
7769: LD_STRING dead
7771: PPUSH
7772: CALL_OW 104
7776: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7777: LD_INT 22
7779: PUSH
7780: LD_INT 7
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 21
7789: PUSH
7790: LD_INT 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: PUSH
7806: LD_INT 0
7808: EQUAL
7809: IFFALSE 7943
7811: GO 7813
7813: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7814: LD_OWVAR 1
7818: PUSH
7819: LD_INT 252000
7821: PUSH
7822: LD_INT 210000
7824: PUSH
7825: LD_INT 189000
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_OWVAR 67
7837: ARRAY
7838: LESS
7839: IFFALSE 7853
// AddMedal ( med1 , 1 ) else
7841: LD_STRING med1
7843: PPUSH
7844: LD_INT 1
7846: PPUSH
7847: CALL_OW 101
7851: GO 7864
// AddMedal ( med1 , - 1 ) ;
7853: LD_STRING med1
7855: PPUSH
7856: LD_INT 1
7858: NEG
7859: PPUSH
7860: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7864: LD_INT 22
7866: PUSH
7867: LD_INT 8
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 69
7878: IFFALSE 7893
// AddMedal ( med2 , - 1 ) else
7880: LD_STRING med2
7882: PPUSH
7883: LD_INT 1
7885: NEG
7886: PPUSH
7887: CALL_OW 101
7891: GO 7903
// AddMedal ( med2 , 1 ) ;
7893: LD_STRING med2
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: CALL_OW 101
// if player_used_sib_bomb then
7903: LD_EXP 12
7907: IFFALSE 7922
// AddMedal ( med3 , - 1 ) else
7909: LD_STRING med3
7911: PPUSH
7912: LD_INT 1
7914: NEG
7915: PPUSH
7916: CALL_OW 101
7920: GO 7932
// AddMedal ( med3 , 1 ) ;
7922: LD_STRING med3
7924: PPUSH
7925: LD_INT 1
7927: PPUSH
7928: CALL_OW 101
// GiveMedals ( MAIN ) ;
7932: LD_STRING MAIN
7934: PPUSH
7935: CALL_OW 102
// YouWin ;
7939: CALL_OW 103
// end ; end_of_file
7943: END
// every 0 0$22 + 0 0$2 do
7944: GO 7946
7946: DISABLE
// begin enable ;
7947: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7948: LD_INT 4
7950: PPUSH
7951: LD_INT 5
7953: PPUSH
7954: CALL_OW 12
7958: PPUSH
7959: LD_INT 3
7961: PPUSH
7962: LD_INT 1
7964: PPUSH
7965: CALL_OW 55
// if tick >= 4 4$00 then
7969: LD_OWVAR 1
7973: PUSH
7974: LD_INT 8400
7976: GREATEREQUAL
7977: IFFALSE 7984
// begin disable ;
7979: DISABLE
// CratesSpawn ( ) ;
7980: CALL 7985 0 0
// end ; end ;
7984: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7985: LD_INT 0
7987: PPUSH
7988: PPUSH
7989: PPUSH
7990: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_INT 30000
7998: PUSH
7999: LD_INT 20000
8001: PUSH
8002: LD_INT 10000
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_OWVAR 67
8014: ARRAY
8015: ST_TO_ADDR
// while amount > 0 do
8016: LD_VAR 0 3
8020: PUSH
8021: LD_INT 0
8023: GREATER
8024: IFFALSE 8094
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8026: LD_INT 1050
8028: PPUSH
8029: LD_INT 3150
8031: PPUSH
8032: CALL_OW 12
8036: PPUSH
8037: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8041: LD_ADDR_VAR 0 4
8045: PUSH
8046: LD_INT 1
8048: PPUSH
8049: LD_INT 5
8051: PPUSH
8052: CALL_OW 12
8056: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8057: LD_ADDR_VAR 0 3
8061: PUSH
8062: LD_VAR 0 3
8066: PUSH
8067: LD_VAR 0 4
8071: PUSH
8072: LD_INT 10
8074: MUL
8075: MINUS
8076: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8077: LD_VAR 0 4
8081: PPUSH
8082: LD_INT 3
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 55
// end ;
8092: GO 8016
// end ; end_of_file
8094: LD_VAR 0 1
8098: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8099: LD_INT 0
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
8106: PPUSH
// uc_nation = nation_nature ;
8107: LD_ADDR_OWVAR 21
8111: PUSH
8112: LD_INT 0
8114: ST_TO_ADDR
// uc_side = 0 ;
8115: LD_ADDR_OWVAR 20
8119: PUSH
8120: LD_INT 0
8122: ST_TO_ADDR
// l = 0 ;
8123: LD_ADDR_VAR 0 6
8127: PUSH
8128: LD_INT 0
8130: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8131: LD_ADDR_OWVAR 24
8135: PUSH
8136: LD_INT 0
8138: PPUSH
8139: LD_INT 5
8141: PPUSH
8142: CALL_OW 12
8146: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8147: LD_ADDR_OWVAR 35
8151: PUSH
8152: LD_INT 5
8154: NEG
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: CALL_OW 12
8163: ST_TO_ADDR
// hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// hc_class = class_apeman ;
8172: LD_ADDR_OWVAR 28
8176: PUSH
8177: LD_INT 12
8179: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8180: LD_ADDR_OWVAR 29
8184: PUSH
8185: LD_INT 11
8187: PPUSH
8188: LD_INT 13
8190: PPUSH
8191: CALL_OW 12
8195: PUSH
8196: LD_INT 10
8198: PPUSH
8199: LD_INT 11
8201: PPUSH
8202: CALL_OW 12
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: ST_TO_ADDR
// hc_sex = sex_male ;
8211: LD_ADDR_OWVAR 27
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8219: LD_ADDR_OWVAR 31
8223: PUSH
8224: LD_INT 0
8226: PPUSH
8227: LD_INT 2
8229: PPUSH
8230: CALL_OW 12
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: LD_INT 0
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
// apeman = CreateHuman ;
8250: LD_ADDR_VAR 0 7
8254: PUSH
8255: CALL_OW 44
8259: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 4
8269: PPUSH
8270: LD_INT 0
8272: PPUSH
8273: CALL_OW 49
// l = l + 1 ;
8277: LD_ADDR_VAR 0 6
8281: PUSH
8282: LD_VAR 0 6
8286: PUSH
8287: LD_INT 1
8289: PLUS
8290: ST_TO_ADDR
// end until l = num1 ;
8291: LD_VAR 0 6
8295: PUSH
8296: LD_VAR 0 1
8300: EQUAL
8301: IFFALSE 8131
// l = 0 ;
8303: LD_ADDR_VAR 0 6
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8311: LD_ADDR_OWVAR 35
8315: PUSH
8316: LD_INT 0
8318: PPUSH
8319: LD_INT 25
8321: PPUSH
8322: CALL_OW 12
8326: ST_TO_ADDR
// hc_class = class_tiger ;
8327: LD_ADDR_OWVAR 28
8331: PUSH
8332: LD_INT 14
8334: ST_TO_ADDR
// hc_sex = sex_male ;
8335: LD_ADDR_OWVAR 27
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// hc_gallery = sandnature ;
8343: LD_ADDR_OWVAR 33
8347: PUSH
8348: LD_STRING sandnature
8350: ST_TO_ADDR
// hc_face_number = 3 ;
8351: LD_ADDR_OWVAR 34
8355: PUSH
8356: LD_INT 3
8358: ST_TO_ADDR
// tiger = CreateHuman ;
8359: LD_ADDR_VAR 0 8
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8369: LD_VAR 0 8
8373: PPUSH
8374: LD_VAR 0 4
8378: PPUSH
8379: LD_INT 0
8381: PPUSH
8382: CALL_OW 49
// l = l + 1 ;
8386: LD_ADDR_VAR 0 6
8390: PUSH
8391: LD_VAR 0 6
8395: PUSH
8396: LD_INT 1
8398: PLUS
8399: ST_TO_ADDR
// end until l = num2 ;
8400: LD_VAR 0 6
8404: PUSH
8405: LD_VAR 0 2
8409: EQUAL
8410: IFFALSE 8311
// l = 0 ;
8412: LD_ADDR_VAR 0 6
8416: PUSH
8417: LD_INT 0
8419: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8420: LD_ADDR_OWVAR 28
8424: PUSH
8425: LD_INT 18
8427: ST_TO_ADDR
// hc_gallery = sandnature ;
8428: LD_ADDR_OWVAR 33
8432: PUSH
8433: LD_STRING sandnature
8435: ST_TO_ADDR
// hc_face_number = 1 ;
8436: LD_ADDR_OWVAR 34
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// bird = CreateHuman ;
8444: LD_ADDR_VAR 0 9
8448: PUSH
8449: CALL_OW 44
8453: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8454: LD_VAR 0 9
8458: PPUSH
8459: LD_INT 0
8461: PPUSH
8462: CALL_OW 51
// l = l + 1 ;
8466: LD_ADDR_VAR 0 6
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: LD_INT 1
8478: PLUS
8479: ST_TO_ADDR
// end until l = num3 ;
8480: LD_VAR 0 6
8484: PUSH
8485: LD_VAR 0 3
8489: EQUAL
8490: IFFALSE 8420
// for l = 1 to 2 do
8492: LD_ADDR_VAR 0 6
8496: PUSH
8497: DOUBLE
8498: LD_INT 1
8500: DEC
8501: ST_TO_ADDR
8502: LD_INT 2
8504: PUSH
8505: FOR_TO
8506: IFFALSE 8564
// begin hc_class = 21 ;
8508: LD_ADDR_OWVAR 28
8512: PUSH
8513: LD_INT 21
8515: ST_TO_ADDR
// hc_gallery =  ;
8516: LD_ADDR_OWVAR 33
8520: PUSH
8521: LD_STRING 
8523: ST_TO_ADDR
// hc_agressivity = 0 ;
8524: LD_ADDR_OWVAR 35
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// hc_face_number = 5 ;
8532: LD_ADDR_OWVAR 34
8536: PUSH
8537: LD_INT 5
8539: ST_TO_ADDR
// horse := CreateHuman ;
8540: LD_ADDR_VAR 0 10
8544: PUSH
8545: CALL_OW 44
8549: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8550: LD_VAR 0 10
8554: PPUSH
8555: LD_INT 0
8557: PPUSH
8558: CALL_OW 51
// end ;
8562: GO 8505
8564: POP
8565: POP
// hc_gallery :=  ;
8566: LD_ADDR_OWVAR 33
8570: PUSH
8571: LD_STRING 
8573: ST_TO_ADDR
// hc_name :=  ;
8574: LD_ADDR_OWVAR 26
8578: PUSH
8579: LD_STRING 
8581: ST_TO_ADDR
// end ; end_of_file
8582: LD_VAR 0 5
8586: RET
// every 0 0$01 trigger not debug do var timer ;
8587: LD_EXP 6
8591: NOT
8592: IFFALSE 8652
8594: GO 8596
8596: DISABLE
8597: LD_INT 0
8599: PPUSH
// begin timer := 0 0$00 ;
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// while ( true ) do
8608: LD_INT 1
8610: IFFALSE 8652
// begin timer := timer + 0 0$01 ;
8612: LD_ADDR_VAR 0 1
8616: PUSH
8617: LD_VAR 0 1
8621: PUSH
8622: LD_INT 35
8624: PLUS
8625: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8626: LD_ADDR_OWVAR 47
8630: PUSH
8631: LD_STRING #tick
8633: PUSH
8634: LD_VAR 0 1
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// end ;
8650: GO 8608
// end ; end_of_file
8652: PPOPN 1
8654: END
// export function DebugArtifact ; begin
8655: LD_INT 0
8657: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8658: LD_STRING Artifact is loaded: 
8660: PUSH
8661: LD_EXP 18
8665: STR
8666: PPUSH
8667: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8671: LD_STRING Artifact is active: 
8673: PUSH
8674: LD_EXP 29
8678: STR
8679: PPUSH
8680: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8684: LD_STRING Artifact is researched: 
8686: PUSH
8687: LD_EXP 22
8691: STR
8692: PPUSH
8693: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8697: LD_STRING Artifact coords 
8699: PUSH
8700: LD_EXP 19
8704: PPUSH
8705: CALL_OW 469
8709: STR
8710: PPUSH
8711: CALL_OW 561
// end ;
8715: LD_VAR 0 1
8719: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
8724: PPUSH
8725: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_INT 100
8733: PUSH
8734: LD_INT 185
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 99
8743: PUSH
8744: LD_INT 175
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 117
8753: PUSH
8754: LD_INT 191
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: ST_TO_ADDR
// for i = 1 to artifacts_type do
8766: LD_ADDR_VAR 0 2
8770: PUSH
8771: DOUBLE
8772: LD_INT 1
8774: DEC
8775: ST_TO_ADDR
8776: LD_EXP 14
8780: PUSH
8781: FOR_TO
8782: IFFALSE 8884
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8784: LD_ADDR_VAR 0 3
8788: PUSH
8789: LD_VAR 0 4
8793: PUSH
8794: LD_INT 1
8796: PPUSH
8797: LD_VAR 0 4
8801: PPUSH
8802: CALL_OW 12
8806: ARRAY
8807: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8808: LD_ADDR_VAR 0 4
8812: PUSH
8813: LD_VAR 0 4
8817: PUSH
8818: LD_VAR 0 3
8822: DIFF
8823: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8824: LD_ADDR_EXP 15
8828: PUSH
8829: LD_EXP 15
8833: PPUSH
8834: LD_VAR 0 2
8838: PPUSH
8839: LD_VAR 0 3
8843: PPUSH
8844: CALL_OW 2
8848: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8849: LD_EXP 14
8853: PUSH
8854: LD_VAR 0 2
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 2
8876: ARRAY
8877: PPUSH
8878: CALL 5232 0 3
// end ;
8882: GO 8781
8884: POP
8885: POP
// end ;
8886: LD_VAR 0 1
8890: RET
// export function GetUseCost ( dist ) ; begin
8891: LD_INT 0
8893: PPUSH
// if dist < 30 then
8894: LD_VAR 0 1
8898: PUSH
8899: LD_INT 30
8901: LESS
8902: IFFALSE 8912
// result := 10 ;
8904: LD_ADDR_VAR 0 2
8908: PUSH
8909: LD_INT 10
8911: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8912: LD_VAR 0 1
8916: PUSH
8917: LD_INT 30
8919: GREATEREQUAL
8920: PUSH
8921: LD_VAR 0 1
8925: PUSH
8926: LD_INT 50
8928: LESS
8929: AND
8930: IFFALSE 8940
// result := 35 ;
8932: LD_ADDR_VAR 0 2
8936: PUSH
8937: LD_INT 35
8939: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8940: LD_VAR 0 1
8944: PUSH
8945: LD_INT 50
8947: GREATEREQUAL
8948: PUSH
8949: LD_VAR 0 1
8953: PUSH
8954: LD_INT 80
8956: LESS
8957: AND
8958: IFFALSE 8968
// result := 70 ;
8960: LD_ADDR_VAR 0 2
8964: PUSH
8965: LD_INT 70
8967: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8968: LD_VAR 0 1
8972: PUSH
8973: LD_INT 80
8975: GREATEREQUAL
8976: PUSH
8977: LD_VAR 0 1
8981: PUSH
8982: LD_INT 120
8984: LESS
8985: AND
8986: IFFALSE 8996
// result := 100 ;
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 100
8995: ST_TO_ADDR
// if dist >= 120 then
8996: LD_VAR 0 1
9000: PUSH
9001: LD_INT 120
9003: GREATEREQUAL
9004: IFFALSE 9014
// result := 150 ;
9006: LD_ADDR_VAR 0 2
9010: PUSH
9011: LD_INT 150
9013: ST_TO_ADDR
// end ;
9014: LD_VAR 0 2
9018: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9019: LD_VAR 0 1
9023: PPUSH
9024: CALL_OW 255
9028: PUSH
9029: LD_OWVAR 2
9033: EQUAL
9034: IFFALSE 9044
// player_artifact_researched := true ;
9036: LD_ADDR_EXP 22
9040: PUSH
9041: LD_INT 1
9043: ST_TO_ADDR
// end ;
9044: PPOPN 1
9046: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9047: LD_INT 22
9049: PUSH
9050: LD_OWVAR 2
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 2
9061: PUSH
9062: LD_INT 30
9064: PUSH
9065: LD_INT 8
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 30
9074: PUSH
9075: LD_INT 11
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: PUSH
9096: LD_EXP 22
9100: AND
9101: PUSH
9102: LD_EXP 18
9106: NOT
9107: AND
9108: IFFALSE 9562
9110: GO 9112
9112: DISABLE
9113: LD_INT 0
9115: PPUSH
9116: PPUSH
// begin enable ;
9117: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_EXP 19
9127: PPUSH
9128: CALL_OW 469
9132: ST_TO_ADDR
// if not coords then
9133: LD_VAR 0 2
9137: NOT
9138: IFFALSE 9142
// exit ;
9140: GO 9562
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9142: LD_ADDR_VAR 0 1
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_OWVAR 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 2
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 8
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 30
9174: PUSH
9175: LD_INT 11
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 69
9195: PPUSH
9196: LD_VAR 0 2
9200: PUSH
9201: LD_INT 1
9203: ARRAY
9204: PPUSH
9205: LD_VAR 0 2
9209: PUSH
9210: LD_INT 2
9212: ARRAY
9213: PPUSH
9214: CALL_OW 73
9218: ST_TO_ADDR
// if not lab then
9219: LD_VAR 0 1
9223: NOT
9224: IFFALSE 9241
// begin if debug then
9226: LD_EXP 6
9230: IFFALSE 9239
// AddToLog ( Cannot find lab for artifact! ) ;
9232: LD_STRING Cannot find lab for artifact!
9234: PPUSH
9235: CALL_OW 561
// exit ;
9239: GO 9562
// end ; if not player_artifact_ready then
9241: LD_EXP 29
9245: NOT
9246: IFFALSE 9370
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9248: LD_VAR 0 1
9252: PPUSH
9253: LD_VAR 0 2
9257: PUSH
9258: LD_INT 1
9260: ARRAY
9261: PPUSH
9262: LD_VAR 0 2
9266: PUSH
9267: LD_INT 2
9269: ARRAY
9270: PPUSH
9271: CALL_OW 297
9275: PUSH
9276: LD_EXP 23
9280: LESS
9281: IFFALSE 9346
// begin if BuildingStatus ( lab ) = bs_idle then
9283: LD_VAR 0 1
9287: PPUSH
9288: CALL_OW 461
9292: PUSH
9293: LD_INT 2
9295: EQUAL
9296: IFFALSE 9322
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9298: LD_OWVAR 2
9302: PPUSH
9303: LD_EXP 25
9307: PPUSH
9308: LD_INT 2
9310: PPUSH
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 468
9320: GO 9344
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9322: LD_OWVAR 2
9326: PPUSH
9327: LD_EXP 25
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: CALL_OW 468
// end else
9344: GO 9368
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9346: LD_OWVAR 2
9350: PPUSH
9351: LD_EXP 25
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL_OW 468
// end else
9368: GO 9562
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9370: LD_VAR 0 1
9374: PPUSH
9375: LD_VAR 0 2
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PPUSH
9384: LD_VAR 0 2
9388: PUSH
9389: LD_INT 2
9391: ARRAY
9392: PPUSH
9393: CALL_OW 297
9397: PUSH
9398: LD_EXP 23
9402: LESS
9403: IFFALSE 9518
// begin if BuildingStatus ( lab ) = bs_idle then
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL_OW 461
9414: PUSH
9415: LD_INT 2
9417: EQUAL
9418: IFFALSE 9472
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9420: LD_OWVAR 2
9424: PPUSH
9425: LD_EXP 20
9429: PPUSH
9430: LD_INT 4
9432: PPUSH
9433: LD_VAR 0 1
9437: PPUSH
9438: CALL_OW 468
// if player_artifact_selected_unit then
9442: LD_EXP 30
9446: IFFALSE 9470
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9448: LD_OWVAR 2
9452: PPUSH
9453: LD_EXP 21
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: LD_VAR 0 1
9465: PPUSH
9466: CALL_OW 468
// end else
9470: GO 9516
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9472: LD_OWVAR 2
9476: PPUSH
9477: LD_EXP 20
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9494: LD_OWVAR 2
9498: PPUSH
9499: LD_EXP 21
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: LD_VAR 0 1
9511: PPUSH
9512: CALL_OW 468
// end ; end else
9516: GO 9562
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9518: LD_OWVAR 2
9522: PPUSH
9523: LD_EXP 20
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: LD_VAR 0 1
9535: PPUSH
9536: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9540: LD_OWVAR 2
9544: PPUSH
9545: LD_EXP 21
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 468
// end ; end ;
9562: PPOPN 2
9564: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9565: LD_INT 0
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9573: LD_ADDR_VAR 0 5
9577: PUSH
9578: LD_EXP 19
9582: PPUSH
9583: CALL_OW 469
9587: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9588: LD_ADDR_VAR 0 7
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_OWVAR 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 30
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 11
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 69
9641: PPUSH
9642: LD_VAR 0 5
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PPUSH
9651: LD_VAR 0 5
9655: PUSH
9656: LD_INT 2
9658: ARRAY
9659: PPUSH
9660: CALL_OW 73
9664: ST_TO_ADDR
// if not lab then
9665: LD_VAR 0 7
9669: NOT
9670: IFFALSE 9687
// begin if debug then
9672: LD_EXP 6
9676: IFFALSE 9685
// AddToLog ( Cannot find lab! ) ;
9678: LD_STRING Cannot find lab!
9680: PPUSH
9681: CALL_OW 561
// exit ;
9685: GO 10045
// end ; if icon = player_artifact_icon_res then
9687: LD_VAR 0 2
9691: PUSH
9692: LD_EXP 25
9696: EQUAL
9697: IFFALSE 9738
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9699: LD_VAR 0 7
9703: PPUSH
9704: LD_EXP 27
9708: PPUSH
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9716: LD_OWVAR 2
9720: PPUSH
9721: LD_EXP 25
9725: PPUSH
9726: LD_INT 0
9728: PPUSH
9729: LD_VAR 0 7
9733: PPUSH
9734: CALL_OW 468
// end ; if icon = player_artifact_icon then
9738: LD_VAR 0 2
9742: PUSH
9743: LD_EXP 20
9747: EQUAL
9748: IFFALSE 9787
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9750: LD_VAR 0 3
9754: PPUSH
9755: CALL_OW 247
9759: PUSH
9760: LD_INT 1
9762: EQUAL
9763: PUSH
9764: LD_VAR 0 3
9768: PPUSH
9769: CALL_OW 310
9773: NOT
9774: AND
9775: IFFALSE 9787
// player_artifact_selected_unit := cr1 ;
9777: LD_ADDR_EXP 30
9781: PUSH
9782: LD_VAR 0 3
9786: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_EXP 21
9796: EQUAL
9797: IFFALSE 10035
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_VAR 0 4
9808: PPUSH
9809: CALL_OW 428
9813: PUSH
9814: LD_INT 0
9816: NONEQUAL
9817: IFFALSE 9821
// exit ;
9819: GO 10045
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9821: LD_ADDR_VAR 0 9
9825: PUSH
9826: LD_EXP 30
9830: PPUSH
9831: CALL_OW 250
9835: PPUSH
9836: LD_EXP 30
9840: PPUSH
9841: CALL_OW 251
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_VAR 0 4
9855: PPUSH
9856: CALL_OW 298
9860: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9861: LD_ADDR_VAR 0 10
9865: PUSH
9866: LD_VAR 0 9
9870: PPUSH
9871: CALL 8891 0 1
9875: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9876: LD_VAR 0 10
9880: PUSH
9881: LD_OWVAR 2
9885: PPUSH
9886: CALL 5446 0 1
9890: GREATER
9891: IFFALSE 9905
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9893: LD_STRING ArtFrogJumpCost
9895: PPUSH
9896: LD_INT 2
9898: PPUSH
9899: CALL_OW 338
// exit ;
9903: GO 10045
// end ; SetSibResources ( your_side , cost ) ;
9905: LD_OWVAR 2
9909: PPUSH
9910: LD_VAR 0 10
9914: PPUSH
9915: CALL 5570 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9919: LD_EXP 30
9923: PPUSH
9924: LD_VAR 0 3
9928: PPUSH
9929: LD_VAR 0 4
9933: PPUSH
9934: LD_INT 0
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9944: LD_VAR 0 3
9948: PPUSH
9949: LD_VAR 0 4
9953: PPUSH
9954: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9958: LD_ADDR_EXP 30
9962: PUSH
9963: LD_INT 0
9965: ST_TO_ADDR
// player_artifact_researched := false ;
9966: LD_ADDR_EXP 22
9970: PUSH
9971: LD_INT 0
9973: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9974: LD_OWVAR 2
9978: PPUSH
9979: LD_EXP 20
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: LD_VAR 0 7
9991: PPUSH
9992: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9996: LD_OWVAR 2
10000: PPUSH
10001: LD_EXP 21
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: LD_VAR 0 7
10013: PPUSH
10014: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
10018: LD_EXP 26
10022: PPUSH
10023: CALL_OW 67
// player_artifact_researched := true ;
10027: LD_ADDR_EXP 22
10031: PUSH
10032: LD_INT 1
10034: ST_TO_ADDR
// end ; if debug then
10035: LD_EXP 6
10039: IFFALSE 10045
// DebugArtifact ;
10041: CALL 8655 0 0
// end ;
10045: PPOPN 10
10047: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_OWVAR 2
10062: EQUAL
10063: IFFALSE 10102
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10065: LD_OWVAR 2
10069: PPUSH
10070: LD_EXP 25
10074: PPUSH
10075: LD_INT 0
10077: PPUSH
10078: LD_VAR 0 1
10082: PPUSH
10083: CALL_OW 468
// player_artifact_ready := true ;
10087: LD_ADDR_EXP 29
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10095: LD_STRING ArtFrogJump
10097: PPUSH
10098: CALL_OW 339
// end ; end ;
10102: PPOPN 1
10104: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10105: LD_OWVAR 2
10109: PPUSH
10110: LD_EXP 25
10114: PPUSH
10115: LD_INT 2
10117: PPUSH
10118: LD_VAR 0 1
10122: PPUSH
10123: CALL_OW 468
// end ;
10127: PPOPN 2
10129: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10130: LD_INT 0
10132: PPUSH
10133: PPUSH
10134: PPUSH
10135: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10136: LD_ADDR_VAR 0 3
10140: PUSH
10141: LD_INT 81
10143: PUSH
10144: LD_INT 7
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 34
10153: PUSH
10154: LD_INT 48
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PPUSH
10165: CALL_OW 69
10169: PUSH
10170: LD_INT 81
10172: PUSH
10173: LD_INT 7
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 30
10182: PUSH
10183: LD_INT 28
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ADD
10199: PUSH
10200: LD_INT 81
10202: PUSH
10203: LD_INT 7
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 30
10212: PUSH
10213: LD_INT 30
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: ADD
10229: PUSH
10230: LD_INT 81
10232: PUSH
10233: LD_INT 7
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 30
10242: PUSH
10243: LD_INT 21
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PPUSH
10254: CALL_OW 69
10258: ADD
10259: PUSH
10260: LD_INT 81
10262: PUSH
10263: LD_INT 7
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 30
10272: PUSH
10273: LD_INT 34
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: ADD
10289: PUSH
10290: LD_INT 81
10292: PUSH
10293: LD_INT 7
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 35
10302: PUSH
10303: LD_INT 49
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 69
10318: ADD
10319: PUSH
10320: LD_INT 81
10322: PUSH
10323: LD_INT 7
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 35
10332: PUSH
10333: LD_INT 47
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PPUSH
10344: CALL_OW 69
10348: ADD
10349: PUSH
10350: LD_INT 81
10352: PUSH
10353: LD_INT 7
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 32
10362: PUSH
10363: LD_INT 3
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: ADD
10379: ST_TO_ADDR
// if not tmp then
10380: LD_VAR 0 3
10384: NOT
10385: IFFALSE 10389
// exit ;
10387: GO 10510
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_INT 34
10396: PUSH
10397: LD_INT 48
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 72
10408: IFFALSE 10441
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10410: LD_ADDR_VAR 0 4
10414: PUSH
10415: LD_VAR 0 3
10419: PPUSH
10420: LD_INT 34
10422: PUSH
10423: LD_INT 48
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 72
10434: PUSH
10435: LD_INT 1
10437: ARRAY
10438: ST_TO_ADDR
10439: GO 10465
// un := tmp [ rand ( 1 , tmp ) ] ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 1
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: CALL_OW 12
10463: ARRAY
10464: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10465: LD_EXP 10
10469: NOT
10470: IFFALSE 10501
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10472: LD_ADDR_EXP 10
10476: PUSH
10477: LD_VAR 0 4
10481: PPUSH
10482: CALL_OW 250
10486: PUSH
10487: LD_VAR 0 4
10491: PPUSH
10492: CALL_OW 251
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: ST_TO_ADDR
// KillUnit ( un ) ;
10501: LD_VAR 0 4
10505: PPUSH
10506: CALL_OW 66
// end ;
10510: LD_VAR 0 1
10514: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10515: LD_INT 0
10517: PPUSH
10518: PPUSH
10519: PPUSH
10520: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10521: LD_ADDR_VAR 0 4
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 6
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 33
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// if not tmp then
10555: LD_VAR 0 4
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 10690
// un := tmp [ rand ( 1 , tmp ) ] ;
10564: LD_ADDR_VAR 0 3
10568: PUSH
10569: LD_VAR 0 4
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 4
10581: PPUSH
10582: CALL_OW 12
10586: ARRAY
10587: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10588: LD_VAR 0 3
10592: PPUSH
10593: CALL_OW 264
10597: PUSH
10598: LD_INT 48
10600: EQUAL
10601: IFFALSE 10620
// ComAttackPlace ( un , 194 , 19 ) else
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 194
10610: PPUSH
10611: LD_INT 19
10613: PPUSH
10614: CALL_OW 116
10618: GO 10654
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 81
10627: PUSH
10628: LD_INT 7
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 69
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: CALL_OW 74
10649: PPUSH
10650: CALL_OW 115
// if not alliance_used_artifact_2 then
10654: LD_EXP 11
10658: NOT
10659: IFFALSE 10690
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10661: LD_ADDR_EXP 11
10665: PUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: CALL_OW 250
10675: PUSH
10676: LD_VAR 0 3
10680: PPUSH
10681: CALL_OW 251
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: ST_TO_ADDR
// end ; end_of_file
10690: LD_VAR 0 1
10694: RET
// export function DebugMode ; var i , j , b ; begin
10695: LD_INT 0
10697: PPUSH
10698: PPUSH
10699: PPUSH
10700: PPUSH
// enable_addtolog = true ;
10701: LD_ADDR_OWVAR 81
10705: PUSH
10706: LD_INT 1
10708: ST_TO_ADDR
// FogOff ( 6 ) ;
10709: LD_INT 6
10711: PPUSH
10712: CALL_OW 344
// uc_side = 6 ;
10716: LD_ADDR_OWVAR 20
10720: PUSH
10721: LD_INT 6
10723: ST_TO_ADDR
// uc_nation = 3 ;
10724: LD_ADDR_OWVAR 21
10728: PUSH
10729: LD_INT 3
10731: ST_TO_ADDR
// bc_level = 10 ;
10732: LD_ADDR_OWVAR 43
10736: PUSH
10737: LD_INT 10
10739: ST_TO_ADDR
// bc_type := b_lab_full ;
10740: LD_ADDR_OWVAR 42
10744: PUSH
10745: LD_INT 8
10747: ST_TO_ADDR
// bc_kind1 := 11 ;
10748: LD_ADDR_OWVAR 44
10752: PUSH
10753: LD_INT 11
10755: ST_TO_ADDR
// bc_kind2 := 12 ;
10756: LD_ADDR_OWVAR 45
10760: PUSH
10761: LD_INT 12
10763: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10764: LD_INT 189
10766: PPUSH
10767: LD_INT 20
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 47
// bc_type := b_warehouse ;
10777: LD_ADDR_OWVAR 42
10781: PUSH
10782: LD_INT 1
10784: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10785: LD_ADDR_VAR 0 4
10789: PUSH
10790: LD_INT 201
10792: PPUSH
10793: LD_INT 22
10795: PPUSH
10796: LD_INT 4
10798: PPUSH
10799: CALL_OW 47
10803: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10804: LD_VAR 0 4
10808: PPUSH
10809: CALL_OW 274
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: LD_INT 10000
10819: PPUSH
10820: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10824: LD_VAR 0 4
10828: PPUSH
10829: CALL_OW 274
10833: PPUSH
10834: LD_INT 2
10836: PPUSH
10837: LD_INT 10000
10839: PPUSH
10840: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10844: LD_VAR 0 4
10848: PPUSH
10849: CALL_OW 274
10853: PPUSH
10854: LD_INT 3
10856: PPUSH
10857: LD_INT 10000
10859: PPUSH
10860: CALL_OW 277
// bc_type := b_siberite_power ;
10864: LD_ADDR_OWVAR 42
10868: PUSH
10869: LD_INT 28
10871: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10872: LD_ADDR_VAR 0 4
10876: PUSH
10877: LD_INT 216
10879: PPUSH
10880: LD_INT 16
10882: PPUSH
10883: LD_INT 4
10885: PPUSH
10886: CALL_OW 47
10890: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10891: LD_ADDR_VAR 0 4
10895: PUSH
10896: LD_INT 219
10898: PPUSH
10899: LD_INT 16
10901: PPUSH
10902: LD_INT 4
10904: PPUSH
10905: CALL_OW 47
10909: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10910: LD_INT 55
10912: PPUSH
10913: LD_INT 6
10915: PPUSH
10916: LD_INT 2
10918: PPUSH
10919: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10923: LD_INT 56
10925: PPUSH
10926: LD_INT 6
10928: PPUSH
10929: LD_INT 2
10931: PPUSH
10932: CALL_OW 322
// end ; end_of_file
10936: LD_VAR 0 1
10940: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10941: LD_INT 0
10943: PPUSH
10944: PPUSH
10945: PPUSH
10946: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10947: LD_VAR 0 1
10951: PPUSH
10952: CALL_OW 264
10956: PUSH
10957: LD_EXP 109
10961: EQUAL
10962: IFFALSE 11034
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10964: LD_INT 68
10966: PPUSH
10967: LD_VAR 0 1
10971: PPUSH
10972: CALL_OW 255
10976: PPUSH
10977: CALL_OW 321
10981: PUSH
10982: LD_INT 2
10984: EQUAL
10985: IFFALSE 10997
// eff := 70 else
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: LD_INT 70
10994: ST_TO_ADDR
10995: GO 11005
// eff := 30 ;
10997: LD_ADDR_VAR 0 4
11001: PUSH
11002: LD_INT 30
11004: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
11005: LD_VAR 0 1
11009: PPUSH
11010: CALL_OW 250
11014: PPUSH
11015: LD_VAR 0 1
11019: PPUSH
11020: CALL_OW 251
11024: PPUSH
11025: LD_VAR 0 4
11029: PPUSH
11030: CALL_OW 495
// end ; end ;
11034: LD_VAR 0 2
11038: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11039: LD_INT 0
11041: PPUSH
// end ;
11042: LD_VAR 0 4
11046: RET
// export function SOS_Command ( cmd ) ; begin
11047: LD_INT 0
11049: PPUSH
// end ;
11050: LD_VAR 0 2
11054: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11055: LD_INT 0
11057: PPUSH
// end ;
11058: LD_VAR 0 6
11062: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
11063: LD_INT 0
11065: PPUSH
11066: PPUSH
// if not vehicle or not factory then
11067: LD_VAR 0 1
11071: NOT
11072: PUSH
11073: LD_VAR 0 2
11077: NOT
11078: OR
11079: IFFALSE 11083
// exit ;
11081: GO 11314
// if factoryWaypoints >= factory then
11083: LD_EXP 36
11087: PUSH
11088: LD_VAR 0 2
11092: GREATEREQUAL
11093: IFFALSE 11314
// if factoryWaypoints [ factory ] then
11095: LD_EXP 36
11099: PUSH
11100: LD_VAR 0 2
11104: ARRAY
11105: IFFALSE 11314
// begin if GetControl ( vehicle ) = control_manual then
11107: LD_VAR 0 1
11111: PPUSH
11112: CALL_OW 263
11116: PUSH
11117: LD_INT 1
11119: EQUAL
11120: IFFALSE 11201
// begin driver := IsDrivenBy ( vehicle ) ;
11122: LD_ADDR_VAR 0 4
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 311
11136: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11137: LD_VAR 0 4
11141: PPUSH
11142: LD_EXP 36
11146: PUSH
11147: LD_VAR 0 2
11151: ARRAY
11152: PUSH
11153: LD_INT 3
11155: ARRAY
11156: PPUSH
11157: LD_EXP 36
11161: PUSH
11162: LD_VAR 0 2
11166: ARRAY
11167: PUSH
11168: LD_INT 4
11170: ARRAY
11171: PPUSH
11172: CALL_OW 171
// AddComExitVehicle ( driver ) ;
11176: LD_VAR 0 4
11180: PPUSH
11181: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
11185: LD_VAR 0 4
11189: PPUSH
11190: LD_VAR 0 2
11194: PPUSH
11195: CALL_OW 180
// end else
11199: GO 11314
// if GetControl ( vehicle ) = control_remote then
11201: LD_VAR 0 1
11205: PPUSH
11206: CALL_OW 263
11210: PUSH
11211: LD_INT 2
11213: EQUAL
11214: IFFALSE 11275
// begin wait ( 0 0$2 ) ;
11216: LD_INT 70
11218: PPUSH
11219: CALL_OW 67
// if Connect ( vehicle ) then
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL 38040 0 1
11232: IFFALSE 11273
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_EXP 36
11243: PUSH
11244: LD_VAR 0 2
11248: ARRAY
11249: PUSH
11250: LD_INT 3
11252: ARRAY
11253: PPUSH
11254: LD_EXP 36
11258: PUSH
11259: LD_VAR 0 2
11263: ARRAY
11264: PUSH
11265: LD_INT 4
11267: ARRAY
11268: PPUSH
11269: CALL_OW 171
// end else
11273: GO 11314
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11275: LD_VAR 0 1
11279: PPUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_VAR 0 2
11289: ARRAY
11290: PUSH
11291: LD_INT 3
11293: ARRAY
11294: PPUSH
11295: LD_EXP 36
11299: PUSH
11300: LD_VAR 0 2
11304: ARRAY
11305: PUSH
11306: LD_INT 4
11308: ARRAY
11309: PPUSH
11310: CALL_OW 171
// end ; end ;
11314: LD_VAR 0 3
11318: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11319: LD_INT 0
11321: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11322: LD_VAR 0 1
11326: PUSH
11327: LD_INT 250
11329: EQUAL
11330: PUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL_OW 264
11340: PUSH
11341: LD_EXP 112
11345: EQUAL
11346: AND
11347: IFFALSE 11368
// MinerPlaceMine ( unit , x , y ) ;
11349: LD_VAR 0 2
11353: PPUSH
11354: LD_VAR 0 4
11358: PPUSH
11359: LD_VAR 0 5
11363: PPUSH
11364: CALL 14096 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11368: LD_VAR 0 1
11372: PUSH
11373: LD_INT 251
11375: EQUAL
11376: PUSH
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL_OW 264
11386: PUSH
11387: LD_EXP 112
11391: EQUAL
11392: AND
11393: IFFALSE 11414
// MinerDetonateMine ( unit , x , y ) ;
11395: LD_VAR 0 2
11399: PPUSH
11400: LD_VAR 0 4
11404: PPUSH
11405: LD_VAR 0 5
11409: PPUSH
11410: CALL 14373 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11414: LD_VAR 0 1
11418: PUSH
11419: LD_INT 252
11421: EQUAL
11422: PUSH
11423: LD_VAR 0 2
11427: PPUSH
11428: CALL_OW 264
11432: PUSH
11433: LD_EXP 112
11437: EQUAL
11438: AND
11439: IFFALSE 11460
// MinerCreateMinefield ( unit , x , y ) ;
11441: LD_VAR 0 2
11445: PPUSH
11446: LD_VAR 0 4
11450: PPUSH
11451: LD_VAR 0 5
11455: PPUSH
11456: CALL 14790 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_INT 253
11467: EQUAL
11468: PUSH
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 257
11478: PUSH
11479: LD_INT 5
11481: EQUAL
11482: AND
11483: IFFALSE 11504
// ComBinocular ( unit , x , y ) ;
11485: LD_VAR 0 2
11489: PPUSH
11490: LD_VAR 0 4
11494: PPUSH
11495: LD_VAR 0 5
11499: PPUSH
11500: CALL 15161 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11504: LD_VAR 0 1
11508: PUSH
11509: LD_INT 254
11511: EQUAL
11512: PUSH
11513: LD_VAR 0 2
11517: PPUSH
11518: CALL_OW 264
11522: PUSH
11523: LD_EXP 107
11527: EQUAL
11528: AND
11529: PUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: CALL_OW 263
11539: PUSH
11540: LD_INT 3
11542: EQUAL
11543: AND
11544: IFFALSE 11560
// HackDestroyVehicle ( unit , selectedUnit ) ;
11546: LD_VAR 0 2
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: CALL 13456 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11560: LD_VAR 0 1
11564: PUSH
11565: LD_INT 255
11567: EQUAL
11568: PUSH
11569: LD_VAR 0 2
11573: PPUSH
11574: CALL_OW 264
11578: PUSH
11579: LD_INT 14
11581: PUSH
11582: LD_INT 53
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: IN
11589: AND
11590: PUSH
11591: LD_VAR 0 4
11595: PPUSH
11596: LD_VAR 0 5
11600: PPUSH
11601: CALL_OW 488
11605: AND
11606: IFFALSE 11630
// CutTreeXYR ( unit , x , y , 12 ) ;
11608: LD_VAR 0 2
11612: PPUSH
11613: LD_VAR 0 4
11617: PPUSH
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 12
11625: PPUSH
11626: CALL 12022 0 4
// if cmd = 256 then
11630: LD_VAR 0 1
11634: PUSH
11635: LD_INT 256
11637: EQUAL
11638: IFFALSE 11659
// SetFactoryWaypoint ( unit , x , y ) ;
11640: LD_VAR 0 2
11644: PPUSH
11645: LD_VAR 0 4
11649: PPUSH
11650: LD_VAR 0 5
11654: PPUSH
11655: CALL 11664 0 3
// end ;
11659: LD_VAR 0 6
11663: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11664: LD_INT 0
11666: PPUSH
11667: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11668: LD_VAR 0 1
11672: NOT
11673: PUSH
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: CALL_OW 488
11688: NOT
11689: OR
11690: PUSH
11691: LD_VAR 0 1
11695: PPUSH
11696: CALL_OW 266
11700: PUSH
11701: LD_INT 3
11703: NONEQUAL
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 247
11714: PUSH
11715: LD_INT 1
11717: EQUAL
11718: NOT
11719: AND
11720: OR
11721: IFFALSE 11725
// exit ;
11723: GO 11874
// if GetType ( factory ) = unit_human then
11725: LD_VAR 0 1
11729: PPUSH
11730: CALL_OW 247
11734: PUSH
11735: LD_INT 1
11737: EQUAL
11738: IFFALSE 11755
// factory := IsInUnit ( factory ) ;
11740: LD_ADDR_VAR 0 1
11744: PUSH
11745: LD_VAR 0 1
11749: PPUSH
11750: CALL_OW 310
11754: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL_OW 266
11764: PUSH
11765: LD_INT 3
11767: NONEQUAL
11768: IFFALSE 11772
// exit ;
11770: GO 11874
// if HexInfo ( x , y ) = factory then
11772: LD_VAR 0 2
11776: PPUSH
11777: LD_VAR 0 3
11781: PPUSH
11782: CALL_OW 428
11786: PUSH
11787: LD_VAR 0 1
11791: EQUAL
11792: IFFALSE 11819
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11794: LD_ADDR_EXP 36
11798: PUSH
11799: LD_EXP 36
11803: PPUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: LD_INT 0
11811: PPUSH
11812: CALL_OW 1
11816: ST_TO_ADDR
11817: GO 11870
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
11819: LD_ADDR_EXP 36
11823: PUSH
11824: LD_EXP 36
11828: PPUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 255
11843: PUSH
11844: LD_VAR 0 1
11848: PUSH
11849: LD_VAR 0 2
11853: PUSH
11854: LD_VAR 0 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 1
11869: ST_TO_ADDR
// UpdateFactoryWaypoints ;
11870: CALL 11879 0 0
// end ;
11874: LD_VAR 0 4
11878: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
11879: LD_INT 0
11881: PPUSH
11882: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
11883: LD_STRING resetFactoryWaypoint();
11885: PPUSH
11886: CALL_OW 559
// if factoryWaypoints then
11890: LD_EXP 36
11894: IFFALSE 12017
// begin for i := 1 to factoryWaypoints do
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: DOUBLE
11902: LD_INT 1
11904: DEC
11905: ST_TO_ADDR
11906: LD_EXP 36
11910: PUSH
11911: FOR_TO
11912: IFFALSE 12015
// if factoryWaypoints [ i ] then
11914: LD_EXP 36
11918: PUSH
11919: LD_VAR 0 2
11923: ARRAY
11924: IFFALSE 12013
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
11926: LD_STRING setFactoryWaypointXY(
11928: PUSH
11929: LD_EXP 36
11933: PUSH
11934: LD_VAR 0 2
11938: ARRAY
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: STR
11944: PUSH
11945: LD_STRING ,
11947: STR
11948: PUSH
11949: LD_EXP 36
11953: PUSH
11954: LD_VAR 0 2
11958: ARRAY
11959: PUSH
11960: LD_INT 2
11962: ARRAY
11963: STR
11964: PUSH
11965: LD_STRING ,
11967: STR
11968: PUSH
11969: LD_EXP 36
11973: PUSH
11974: LD_VAR 0 2
11978: ARRAY
11979: PUSH
11980: LD_INT 3
11982: ARRAY
11983: STR
11984: PUSH
11985: LD_STRING ,
11987: STR
11988: PUSH
11989: LD_EXP 36
11993: PUSH
11994: LD_VAR 0 2
11998: ARRAY
11999: PUSH
12000: LD_INT 4
12002: ARRAY
12003: STR
12004: PUSH
12005: LD_STRING )
12007: STR
12008: PPUSH
12009: CALL_OW 559
12013: GO 11911
12015: POP
12016: POP
// end ; end ;
12017: LD_VAR 0 1
12021: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
12028: PPUSH
12029: PPUSH
12030: PPUSH
12031: PPUSH
12032: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
12033: LD_VAR 0 1
12037: NOT
12038: PUSH
12039: LD_VAR 0 2
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: CALL_OW 488
12053: NOT
12054: OR
12055: PUSH
12056: LD_VAR 0 4
12060: NOT
12061: OR
12062: IFFALSE 12066
// exit ;
12064: GO 12406
// list := [ ] ;
12066: LD_ADDR_VAR 0 13
12070: PUSH
12071: EMPTY
12072: ST_TO_ADDR
// if x - r < 0 then
12073: LD_VAR 0 2
12077: PUSH
12078: LD_VAR 0 4
12082: MINUS
12083: PUSH
12084: LD_INT 0
12086: LESS
12087: IFFALSE 12099
// min_x := 0 else
12089: LD_ADDR_VAR 0 7
12093: PUSH
12094: LD_INT 0
12096: ST_TO_ADDR
12097: GO 12115
// min_x := x - r ;
12099: LD_ADDR_VAR 0 7
12103: PUSH
12104: LD_VAR 0 2
12108: PUSH
12109: LD_VAR 0 4
12113: MINUS
12114: ST_TO_ADDR
// if y - r < 0 then
12115: LD_VAR 0 3
12119: PUSH
12120: LD_VAR 0 4
12124: MINUS
12125: PUSH
12126: LD_INT 0
12128: LESS
12129: IFFALSE 12141
// min_y := 0 else
12131: LD_ADDR_VAR 0 8
12135: PUSH
12136: LD_INT 0
12138: ST_TO_ADDR
12139: GO 12157
// min_y := y - r ;
12141: LD_ADDR_VAR 0 8
12145: PUSH
12146: LD_VAR 0 3
12150: PUSH
12151: LD_VAR 0 4
12155: MINUS
12156: ST_TO_ADDR
// max_x := x + r ;
12157: LD_ADDR_VAR 0 9
12161: PUSH
12162: LD_VAR 0 2
12166: PUSH
12167: LD_VAR 0 4
12171: PLUS
12172: ST_TO_ADDR
// max_y := y + r ;
12173: LD_ADDR_VAR 0 10
12177: PUSH
12178: LD_VAR 0 3
12182: PUSH
12183: LD_VAR 0 4
12187: PLUS
12188: ST_TO_ADDR
// for _x = min_x to max_x do
12189: LD_ADDR_VAR 0 11
12193: PUSH
12194: DOUBLE
12195: LD_VAR 0 7
12199: DEC
12200: ST_TO_ADDR
12201: LD_VAR 0 9
12205: PUSH
12206: FOR_TO
12207: IFFALSE 12324
// for _y = min_y to max_y do
12209: LD_ADDR_VAR 0 12
12213: PUSH
12214: DOUBLE
12215: LD_VAR 0 8
12219: DEC
12220: ST_TO_ADDR
12221: LD_VAR 0 10
12225: PUSH
12226: FOR_TO
12227: IFFALSE 12320
// begin if not ValidHex ( _x , _y ) then
12229: LD_VAR 0 11
12233: PPUSH
12234: LD_VAR 0 12
12238: PPUSH
12239: CALL_OW 488
12243: NOT
12244: IFFALSE 12248
// continue ;
12246: GO 12226
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12248: LD_VAR 0 11
12252: PPUSH
12253: LD_VAR 0 12
12257: PPUSH
12258: CALL_OW 351
12262: PUSH
12263: LD_VAR 0 11
12267: PPUSH
12268: LD_VAR 0 12
12272: PPUSH
12273: CALL_OW 554
12277: AND
12278: IFFALSE 12318
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12280: LD_ADDR_VAR 0 13
12284: PUSH
12285: LD_VAR 0 13
12289: PPUSH
12290: LD_VAR 0 13
12294: PUSH
12295: LD_INT 1
12297: PLUS
12298: PPUSH
12299: LD_VAR 0 11
12303: PUSH
12304: LD_VAR 0 12
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 2
12317: ST_TO_ADDR
// end ;
12318: GO 12226
12320: POP
12321: POP
12322: GO 12206
12324: POP
12325: POP
// if not list then
12326: LD_VAR 0 13
12330: NOT
12331: IFFALSE 12335
// exit ;
12333: GO 12406
// for i in list do
12335: LD_ADDR_VAR 0 6
12339: PUSH
12340: LD_VAR 0 13
12344: PUSH
12345: FOR_IN
12346: IFFALSE 12404
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12348: LD_VAR 0 1
12352: PPUSH
12353: LD_STRING M
12355: PUSH
12356: LD_VAR 0 6
12360: PUSH
12361: LD_INT 1
12363: ARRAY
12364: PUSH
12365: LD_VAR 0 6
12369: PUSH
12370: LD_INT 2
12372: ARRAY
12373: PUSH
12374: LD_INT 0
12376: PUSH
12377: LD_INT 0
12379: PUSH
12380: LD_INT 0
12382: PUSH
12383: LD_INT 0
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: PPUSH
12398: CALL_OW 447
12402: GO 12345
12404: POP
12405: POP
// end ;
12406: LD_VAR 0 5
12410: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12411: LD_EXP 37
12415: NOT
12416: IFFALSE 12466
12418: GO 12420
12420: DISABLE
// begin initHack := true ;
12421: LD_ADDR_EXP 37
12425: PUSH
12426: LD_INT 1
12428: ST_TO_ADDR
// hackTanks := [ ] ;
12429: LD_ADDR_EXP 38
12433: PUSH
12434: EMPTY
12435: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12436: LD_ADDR_EXP 39
12440: PUSH
12441: EMPTY
12442: ST_TO_ADDR
// hackLimit := 3 ;
12443: LD_ADDR_EXP 40
12447: PUSH
12448: LD_INT 3
12450: ST_TO_ADDR
// hackDist := 12 ;
12451: LD_ADDR_EXP 41
12455: PUSH
12456: LD_INT 12
12458: ST_TO_ADDR
// hackCounter := [ ] ;
12459: LD_ADDR_EXP 42
12463: PUSH
12464: EMPTY
12465: ST_TO_ADDR
// end ;
12466: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12467: LD_EXP 37
12471: PUSH
12472: LD_INT 34
12474: PUSH
12475: LD_EXP 107
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: AND
12489: IFFALSE 12744
12491: GO 12493
12493: DISABLE
12494: LD_INT 0
12496: PPUSH
12497: PPUSH
// begin enable ;
12498: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 34
12506: PUSH
12507: LD_EXP 107
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: PUSH
12521: FOR_IN
12522: IFFALSE 12742
// begin if not i in hackTanks then
12524: LD_VAR 0 1
12528: PUSH
12529: LD_EXP 38
12533: IN
12534: NOT
12535: IFFALSE 12618
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12537: LD_ADDR_EXP 38
12541: PUSH
12542: LD_EXP 38
12546: PPUSH
12547: LD_EXP 38
12551: PUSH
12552: LD_INT 1
12554: PLUS
12555: PPUSH
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL_OW 1
12565: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12566: LD_ADDR_EXP 39
12570: PUSH
12571: LD_EXP 39
12575: PPUSH
12576: LD_EXP 39
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: EMPTY
12586: PPUSH
12587: CALL_OW 1
12591: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12592: LD_ADDR_EXP 42
12596: PUSH
12597: LD_EXP 42
12601: PPUSH
12602: LD_EXP 42
12606: PUSH
12607: LD_INT 1
12609: PLUS
12610: PPUSH
12611: EMPTY
12612: PPUSH
12613: CALL_OW 1
12617: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 302
12627: NOT
12628: IFFALSE 12641
// begin HackUnlinkAll ( i ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: CALL 12747 0 1
// continue ;
12639: GO 12521
// end ; HackCheckCapturedStatus ( i ) ;
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL 13190 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12650: LD_ADDR_VAR 0 2
12654: PUSH
12655: LD_INT 81
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 255
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 33
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 91
12684: PUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_EXP 41
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 50
12702: PUSH
12703: EMPTY
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: ST_TO_ADDR
// if not tmp then
12717: LD_VAR 0 2
12721: NOT
12722: IFFALSE 12726
// continue ;
12724: GO 12521
// HackLink ( i , tmp ) ;
12726: LD_VAR 0 1
12730: PPUSH
12731: LD_VAR 0 2
12735: PPUSH
12736: CALL 12883 0 2
// end ;
12740: GO 12521
12742: POP
12743: POP
// end ;
12744: PPOPN 2
12746: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12747: LD_INT 0
12749: PPUSH
12750: PPUSH
12751: PPUSH
// if not hack in hackTanks then
12752: LD_VAR 0 1
12756: PUSH
12757: LD_EXP 38
12761: IN
12762: NOT
12763: IFFALSE 12767
// exit ;
12765: GO 12878
// index := GetElementIndex ( hackTanks , hack ) ;
12767: LD_ADDR_VAR 0 4
12771: PUSH
12772: LD_EXP 38
12776: PPUSH
12777: LD_VAR 0 1
12781: PPUSH
12782: CALL 34854 0 2
12786: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12787: LD_EXP 39
12791: PUSH
12792: LD_VAR 0 4
12796: ARRAY
12797: IFFALSE 12878
// begin for i in hackTanksCaptured [ index ] do
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_EXP 39
12808: PUSH
12809: LD_VAR 0 4
12813: ARRAY
12814: PUSH
12815: FOR_IN
12816: IFFALSE 12842
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 2
12834: ARRAY
12835: PPUSH
12836: CALL_OW 235
12840: GO 12815
12842: POP
12843: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12844: LD_ADDR_EXP 39
12848: PUSH
12849: LD_EXP 39
12853: PPUSH
12854: LD_VAR 0 4
12858: PPUSH
12859: EMPTY
12860: PPUSH
12861: CALL_OW 1
12865: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12866: LD_VAR 0 1
12870: PPUSH
12871: LD_INT 0
12873: PPUSH
12874: CALL_OW 505
// end ; end ;
12878: LD_VAR 0 2
12882: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
// if not hack in hackTanks or not vehicles then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_EXP 38
12897: IN
12898: NOT
12899: PUSH
12900: LD_VAR 0 2
12904: NOT
12905: OR
12906: IFFALSE 12910
// exit ;
12908: GO 13185
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_VAR 0 1
12919: PPUSH
12920: LD_VAR 0 2
12924: PPUSH
12925: LD_INT 1
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: CALL 35504 0 4
12935: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12936: LD_ADDR_VAR 0 5
12940: PUSH
12941: LD_EXP 38
12945: PPUSH
12946: LD_VAR 0 1
12950: PPUSH
12951: CALL 34854 0 2
12955: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12956: LD_EXP 39
12960: PUSH
12961: LD_VAR 0 5
12965: ARRAY
12966: PUSH
12967: LD_EXP 40
12971: LESS
12972: IFFALSE 13161
// begin for i := 1 to vehicles do
12974: LD_ADDR_VAR 0 4
12978: PUSH
12979: DOUBLE
12980: LD_INT 1
12982: DEC
12983: ST_TO_ADDR
12984: LD_VAR 0 2
12988: PUSH
12989: FOR_TO
12990: IFFALSE 13159
// begin if hackTanksCaptured [ index ] = hackLimit then
12992: LD_EXP 39
12996: PUSH
12997: LD_VAR 0 5
13001: ARRAY
13002: PUSH
13003: LD_EXP 40
13007: EQUAL
13008: IFFALSE 13012
// break ;
13010: GO 13159
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13012: LD_ADDR_EXP 42
13016: PUSH
13017: LD_EXP 42
13021: PPUSH
13022: LD_VAR 0 5
13026: PPUSH
13027: LD_EXP 42
13031: PUSH
13032: LD_VAR 0 5
13036: ARRAY
13037: PUSH
13038: LD_INT 1
13040: PLUS
13041: PPUSH
13042: CALL_OW 1
13046: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13047: LD_ADDR_EXP 39
13051: PUSH
13052: LD_EXP 39
13056: PPUSH
13057: LD_VAR 0 5
13061: PUSH
13062: LD_EXP 39
13066: PUSH
13067: LD_VAR 0 5
13071: ARRAY
13072: PUSH
13073: LD_INT 1
13075: PLUS
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_VAR 0 2
13085: PUSH
13086: LD_VAR 0 4
13090: ARRAY
13091: PUSH
13092: LD_VAR 0 2
13096: PUSH
13097: LD_VAR 0 4
13101: ARRAY
13102: PPUSH
13103: CALL_OW 255
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PPUSH
13112: CALL 35069 0 3
13116: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13117: LD_VAR 0 2
13121: PUSH
13122: LD_VAR 0 4
13126: ARRAY
13127: PPUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 255
13137: PPUSH
13138: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13142: LD_VAR 0 2
13146: PUSH
13147: LD_VAR 0 4
13151: ARRAY
13152: PPUSH
13153: CALL_OW 141
// end ;
13157: GO 12989
13159: POP
13160: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13161: LD_VAR 0 1
13165: PPUSH
13166: LD_EXP 39
13170: PUSH
13171: LD_VAR 0 5
13175: ARRAY
13176: PUSH
13177: LD_INT 0
13179: PLUS
13180: PPUSH
13181: CALL_OW 505
// end ;
13185: LD_VAR 0 3
13189: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13190: LD_INT 0
13192: PPUSH
13193: PPUSH
13194: PPUSH
13195: PPUSH
// if not hack in hackTanks then
13196: LD_VAR 0 1
13200: PUSH
13201: LD_EXP 38
13205: IN
13206: NOT
13207: IFFALSE 13211
// exit ;
13209: GO 13451
// index := GetElementIndex ( hackTanks , hack ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_EXP 38
13220: PPUSH
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL 34854 0 2
13230: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13231: LD_ADDR_VAR 0 3
13235: PUSH
13236: DOUBLE
13237: LD_EXP 39
13241: PUSH
13242: LD_VAR 0 4
13246: ARRAY
13247: INC
13248: ST_TO_ADDR
13249: LD_INT 1
13251: PUSH
13252: FOR_DOWNTO
13253: IFFALSE 13425
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13255: LD_ADDR_VAR 0 5
13259: PUSH
13260: LD_EXP 39
13264: PUSH
13265: LD_VAR 0 4
13269: ARRAY
13270: PUSH
13271: LD_VAR 0 3
13275: ARRAY
13276: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13277: LD_VAR 0 5
13281: PUSH
13282: LD_INT 1
13284: ARRAY
13285: PPUSH
13286: CALL_OW 302
13290: NOT
13291: PUSH
13292: LD_VAR 0 5
13296: PUSH
13297: LD_INT 1
13299: ARRAY
13300: PPUSH
13301: CALL_OW 255
13305: PUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 255
13315: NONEQUAL
13316: OR
13317: IFFALSE 13423
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13319: LD_VAR 0 5
13323: PUSH
13324: LD_INT 1
13326: ARRAY
13327: PPUSH
13328: CALL_OW 305
13332: PUSH
13333: LD_VAR 0 5
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 255
13346: PUSH
13347: LD_VAR 0 1
13351: PPUSH
13352: CALL_OW 255
13356: EQUAL
13357: AND
13358: IFFALSE 13382
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13360: LD_VAR 0 5
13364: PUSH
13365: LD_INT 1
13367: ARRAY
13368: PPUSH
13369: LD_VAR 0 5
13373: PUSH
13374: LD_INT 2
13376: ARRAY
13377: PPUSH
13378: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13382: LD_ADDR_EXP 39
13386: PUSH
13387: LD_EXP 39
13391: PPUSH
13392: LD_VAR 0 4
13396: PPUSH
13397: LD_EXP 39
13401: PUSH
13402: LD_VAR 0 4
13406: ARRAY
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: CALL_OW 3
13417: PPUSH
13418: CALL_OW 1
13422: ST_TO_ADDR
// end ; end ;
13423: GO 13252
13425: POP
13426: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13427: LD_VAR 0 1
13431: PPUSH
13432: LD_EXP 39
13436: PUSH
13437: LD_VAR 0 4
13441: ARRAY
13442: PUSH
13443: LD_INT 0
13445: PLUS
13446: PPUSH
13447: CALL_OW 505
// end ;
13451: LD_VAR 0 2
13455: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13456: LD_INT 0
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
// if not hack in hackTanks then
13462: LD_VAR 0 1
13466: PUSH
13467: LD_EXP 38
13471: IN
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13562
// index := GetElementIndex ( hackTanks , hack ) ;
13477: LD_ADDR_VAR 0 5
13481: PUSH
13482: LD_EXP 38
13486: PPUSH
13487: LD_VAR 0 1
13491: PPUSH
13492: CALL 34854 0 2
13496: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13497: LD_ADDR_VAR 0 4
13501: PUSH
13502: DOUBLE
13503: LD_INT 1
13505: DEC
13506: ST_TO_ADDR
13507: LD_EXP 39
13511: PUSH
13512: LD_VAR 0 5
13516: ARRAY
13517: PUSH
13518: FOR_TO
13519: IFFALSE 13560
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13521: LD_EXP 39
13525: PUSH
13526: LD_VAR 0 5
13530: ARRAY
13531: PUSH
13532: LD_VAR 0 4
13536: ARRAY
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PUSH
13542: LD_VAR 0 2
13546: EQUAL
13547: IFFALSE 13558
// KillUnit ( vehicle ) ;
13549: LD_VAR 0 2
13553: PPUSH
13554: CALL_OW 66
13558: GO 13518
13560: POP
13561: POP
// end ;
13562: LD_VAR 0 3
13566: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13567: LD_EXP 43
13571: NOT
13572: IFFALSE 13607
13574: GO 13576
13576: DISABLE
// begin initMiner := true ;
13577: LD_ADDR_EXP 43
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// minersList := [ ] ;
13585: LD_ADDR_EXP 44
13589: PUSH
13590: EMPTY
13591: ST_TO_ADDR
// minerMinesList := [ ] ;
13592: LD_ADDR_EXP 45
13596: PUSH
13597: EMPTY
13598: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13599: LD_ADDR_EXP 46
13603: PUSH
13604: LD_INT 5
13606: ST_TO_ADDR
// end ;
13607: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13608: LD_EXP 43
13612: PUSH
13613: LD_INT 34
13615: PUSH
13616: LD_EXP 112
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: AND
13630: IFFALSE 14093
13632: GO 13634
13634: DISABLE
13635: LD_INT 0
13637: PPUSH
13638: PPUSH
13639: PPUSH
13640: PPUSH
// begin enable ;
13641: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13642: LD_ADDR_VAR 0 1
13646: PUSH
13647: LD_INT 34
13649: PUSH
13650: LD_EXP 112
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PPUSH
13659: CALL_OW 69
13663: PUSH
13664: FOR_IN
13665: IFFALSE 13737
// begin if not i in minersList then
13667: LD_VAR 0 1
13671: PUSH
13672: LD_EXP 44
13676: IN
13677: NOT
13678: IFFALSE 13735
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13680: LD_ADDR_EXP 44
13684: PUSH
13685: LD_EXP 44
13689: PPUSH
13690: LD_EXP 44
13694: PUSH
13695: LD_INT 1
13697: PLUS
13698: PPUSH
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 1
13708: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13709: LD_ADDR_EXP 45
13713: PUSH
13714: LD_EXP 45
13718: PPUSH
13719: LD_EXP 45
13723: PUSH
13724: LD_INT 1
13726: PLUS
13727: PPUSH
13728: EMPTY
13729: PPUSH
13730: CALL_OW 1
13734: ST_TO_ADDR
// end end ;
13735: GO 13664
13737: POP
13738: POP
// for i := minerMinesList downto 1 do
13739: LD_ADDR_VAR 0 1
13743: PUSH
13744: DOUBLE
13745: LD_EXP 45
13749: INC
13750: ST_TO_ADDR
13751: LD_INT 1
13753: PUSH
13754: FOR_DOWNTO
13755: IFFALSE 14091
// begin if IsLive ( minersList [ i ] ) then
13757: LD_EXP 44
13761: PUSH
13762: LD_VAR 0 1
13766: ARRAY
13767: PPUSH
13768: CALL_OW 300
13772: IFFALSE 13800
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13774: LD_EXP 44
13778: PUSH
13779: LD_VAR 0 1
13783: ARRAY
13784: PPUSH
13785: LD_EXP 45
13789: PUSH
13790: LD_VAR 0 1
13794: ARRAY
13795: PPUSH
13796: CALL_OW 505
// if not minerMinesList [ i ] then
13800: LD_EXP 45
13804: PUSH
13805: LD_VAR 0 1
13809: ARRAY
13810: NOT
13811: IFFALSE 13815
// continue ;
13813: GO 13754
// for j := minerMinesList [ i ] downto 1 do
13815: LD_ADDR_VAR 0 2
13819: PUSH
13820: DOUBLE
13821: LD_EXP 45
13825: PUSH
13826: LD_VAR 0 1
13830: ARRAY
13831: INC
13832: ST_TO_ADDR
13833: LD_INT 1
13835: PUSH
13836: FOR_DOWNTO
13837: IFFALSE 14087
// begin side := GetSide ( minersList [ i ] ) ;
13839: LD_ADDR_VAR 0 3
13843: PUSH
13844: LD_EXP 44
13848: PUSH
13849: LD_VAR 0 1
13853: ARRAY
13854: PPUSH
13855: CALL_OW 255
13859: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13860: LD_ADDR_VAR 0 4
13864: PUSH
13865: LD_EXP 45
13869: PUSH
13870: LD_VAR 0 1
13874: ARRAY
13875: PUSH
13876: LD_VAR 0 2
13880: ARRAY
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: PPUSH
13886: LD_EXP 45
13890: PUSH
13891: LD_VAR 0 1
13895: ARRAY
13896: PUSH
13897: LD_VAR 0 2
13901: ARRAY
13902: PUSH
13903: LD_INT 2
13905: ARRAY
13906: PPUSH
13907: CALL_OW 428
13911: ST_TO_ADDR
// if not tmp then
13912: LD_VAR 0 4
13916: NOT
13917: IFFALSE 13921
// continue ;
13919: GO 13836
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13921: LD_VAR 0 4
13925: PUSH
13926: LD_INT 81
13928: PUSH
13929: LD_VAR 0 3
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: IN
13943: PUSH
13944: LD_EXP 45
13948: PUSH
13949: LD_VAR 0 1
13953: ARRAY
13954: PUSH
13955: LD_VAR 0 2
13959: ARRAY
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: PPUSH
13965: LD_EXP 45
13969: PUSH
13970: LD_VAR 0 1
13974: ARRAY
13975: PUSH
13976: LD_VAR 0 2
13980: ARRAY
13981: PUSH
13982: LD_INT 2
13984: ARRAY
13985: PPUSH
13986: CALL_OW 458
13990: AND
13991: IFFALSE 14085
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13993: LD_EXP 45
13997: PUSH
13998: LD_VAR 0 1
14002: ARRAY
14003: PUSH
14004: LD_VAR 0 2
14008: ARRAY
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: LD_EXP 45
14018: PUSH
14019: LD_VAR 0 1
14023: ARRAY
14024: PUSH
14025: LD_VAR 0 2
14029: ARRAY
14030: PUSH
14031: LD_INT 2
14033: ARRAY
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14044: LD_ADDR_EXP 45
14048: PUSH
14049: LD_EXP 45
14053: PPUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_EXP 45
14063: PUSH
14064: LD_VAR 0 1
14068: ARRAY
14069: PPUSH
14070: LD_VAR 0 2
14074: PPUSH
14075: CALL_OW 3
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ; end ;
14085: GO 13836
14087: POP
14088: POP
// end ;
14089: GO 13754
14091: POP
14092: POP
// end ;
14093: PPOPN 4
14095: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
// result := false ;
14100: LD_ADDR_VAR 0 4
14104: PUSH
14105: LD_INT 0
14107: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14108: LD_VAR 0 1
14112: PPUSH
14113: CALL_OW 264
14117: PUSH
14118: LD_EXP 112
14122: EQUAL
14123: NOT
14124: IFFALSE 14128
// exit ;
14126: GO 14368
// index := GetElementIndex ( minersList , unit ) ;
14128: LD_ADDR_VAR 0 5
14132: PUSH
14133: LD_EXP 44
14137: PPUSH
14138: LD_VAR 0 1
14142: PPUSH
14143: CALL 34854 0 2
14147: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14148: LD_EXP 45
14152: PUSH
14153: LD_VAR 0 5
14157: ARRAY
14158: PUSH
14159: LD_EXP 46
14163: GREATEREQUAL
14164: IFFALSE 14168
// exit ;
14166: GO 14368
// ComMoveXY ( unit , x , y ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_VAR 0 2
14177: PPUSH
14178: LD_VAR 0 3
14182: PPUSH
14183: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14187: LD_INT 35
14189: PPUSH
14190: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_VAR 0 2
14203: PPUSH
14204: LD_VAR 0 3
14208: PPUSH
14209: CALL 65573 0 3
14213: NOT
14214: PUSH
14215: LD_VAR 0 1
14219: PPUSH
14220: CALL_OW 314
14224: AND
14225: IFFALSE 14229
// exit ;
14227: GO 14368
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14229: LD_VAR 0 2
14233: PPUSH
14234: LD_VAR 0 3
14238: PPUSH
14239: CALL_OW 428
14243: PUSH
14244: LD_VAR 0 1
14248: EQUAL
14249: PUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 314
14259: NOT
14260: AND
14261: IFFALSE 14187
// PlaySoundXY ( x , y , PlantMine ) ;
14263: LD_VAR 0 2
14267: PPUSH
14268: LD_VAR 0 3
14272: PPUSH
14273: LD_STRING PlantMine
14275: PPUSH
14276: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14280: LD_VAR 0 2
14284: PPUSH
14285: LD_VAR 0 3
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 255
14299: PPUSH
14300: LD_INT 0
14302: PPUSH
14303: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14307: LD_ADDR_EXP 45
14311: PUSH
14312: LD_EXP 45
14316: PPUSH
14317: LD_VAR 0 5
14321: PUSH
14322: LD_EXP 45
14326: PUSH
14327: LD_VAR 0 5
14331: ARRAY
14332: PUSH
14333: LD_INT 1
14335: PLUS
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PPUSH
14341: LD_VAR 0 2
14345: PUSH
14346: LD_VAR 0 3
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL 35069 0 3
14359: ST_TO_ADDR
// result := true ;
14360: LD_ADDR_VAR 0 4
14364: PUSH
14365: LD_INT 1
14367: ST_TO_ADDR
// end ;
14368: LD_VAR 0 4
14372: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
14377: PPUSH
// if not unit in minersList then
14378: LD_VAR 0 1
14382: PUSH
14383: LD_EXP 44
14387: IN
14388: NOT
14389: IFFALSE 14393
// exit ;
14391: GO 14785
// index := GetElementIndex ( minersList , unit ) ;
14393: LD_ADDR_VAR 0 6
14397: PUSH
14398: LD_EXP 44
14402: PPUSH
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL 34854 0 2
14412: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14413: LD_ADDR_VAR 0 5
14417: PUSH
14418: DOUBLE
14419: LD_EXP 45
14423: PUSH
14424: LD_VAR 0 6
14428: ARRAY
14429: INC
14430: ST_TO_ADDR
14431: LD_INT 1
14433: PUSH
14434: FOR_DOWNTO
14435: IFFALSE 14596
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14437: LD_EXP 45
14441: PUSH
14442: LD_VAR 0 6
14446: ARRAY
14447: PUSH
14448: LD_VAR 0 5
14452: ARRAY
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PUSH
14458: LD_VAR 0 2
14462: EQUAL
14463: PUSH
14464: LD_EXP 45
14468: PUSH
14469: LD_VAR 0 6
14473: ARRAY
14474: PUSH
14475: LD_VAR 0 5
14479: ARRAY
14480: PUSH
14481: LD_INT 2
14483: ARRAY
14484: PUSH
14485: LD_VAR 0 3
14489: EQUAL
14490: AND
14491: IFFALSE 14594
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14493: LD_EXP 45
14497: PUSH
14498: LD_VAR 0 6
14502: ARRAY
14503: PUSH
14504: LD_VAR 0 5
14508: ARRAY
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: LD_EXP 45
14518: PUSH
14519: LD_VAR 0 6
14523: ARRAY
14524: PUSH
14525: LD_VAR 0 5
14529: ARRAY
14530: PUSH
14531: LD_INT 2
14533: ARRAY
14534: PPUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 255
14544: PPUSH
14545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14549: LD_ADDR_EXP 45
14553: PUSH
14554: LD_EXP 45
14558: PPUSH
14559: LD_VAR 0 6
14563: PPUSH
14564: LD_EXP 45
14568: PUSH
14569: LD_VAR 0 6
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 5
14579: PPUSH
14580: CALL_OW 3
14584: PPUSH
14585: CALL_OW 1
14589: ST_TO_ADDR
// exit ;
14590: POP
14591: POP
14592: GO 14785
// end ; end ;
14594: GO 14434
14596: POP
14597: POP
// for i := minerMinesList [ index ] downto 1 do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_EXP 45
14608: PUSH
14609: LD_VAR 0 6
14613: ARRAY
14614: INC
14615: ST_TO_ADDR
14616: LD_INT 1
14618: PUSH
14619: FOR_DOWNTO
14620: IFFALSE 14783
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14622: LD_EXP 45
14626: PUSH
14627: LD_VAR 0 6
14631: ARRAY
14632: PUSH
14633: LD_VAR 0 5
14637: ARRAY
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_EXP 45
14647: PUSH
14648: LD_VAR 0 6
14652: ARRAY
14653: PUSH
14654: LD_VAR 0 5
14658: ARRAY
14659: PUSH
14660: LD_INT 2
14662: ARRAY
14663: PPUSH
14664: LD_VAR 0 2
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: CALL_OW 298
14678: PUSH
14679: LD_INT 6
14681: LESS
14682: IFFALSE 14781
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14684: LD_EXP 45
14688: PUSH
14689: LD_VAR 0 6
14693: ARRAY
14694: PUSH
14695: LD_VAR 0 5
14699: ARRAY
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: LD_EXP 45
14709: PUSH
14710: LD_VAR 0 6
14714: ARRAY
14715: PUSH
14716: LD_VAR 0 5
14720: ARRAY
14721: PUSH
14722: LD_INT 2
14724: ARRAY
14725: PPUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 255
14735: PPUSH
14736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14740: LD_ADDR_EXP 45
14744: PUSH
14745: LD_EXP 45
14749: PPUSH
14750: LD_VAR 0 6
14754: PPUSH
14755: LD_EXP 45
14759: PUSH
14760: LD_VAR 0 6
14764: ARRAY
14765: PPUSH
14766: LD_VAR 0 5
14770: PPUSH
14771: CALL_OW 3
14775: PPUSH
14776: CALL_OW 1
14780: ST_TO_ADDR
// end ; end ;
14781: GO 14619
14783: POP
14784: POP
// end ;
14785: LD_VAR 0 4
14789: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14790: LD_INT 0
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
14799: PPUSH
14800: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 264
14810: PUSH
14811: LD_EXP 112
14815: EQUAL
14816: NOT
14817: PUSH
14818: LD_VAR 0 1
14822: PUSH
14823: LD_EXP 44
14827: IN
14828: NOT
14829: OR
14830: IFFALSE 14834
// exit ;
14832: GO 15156
// index := GetElementIndex ( minersList , unit ) ;
14834: LD_ADDR_VAR 0 6
14838: PUSH
14839: LD_EXP 44
14843: PPUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL 34854 0 2
14853: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14854: LD_ADDR_VAR 0 8
14858: PUSH
14859: LD_EXP 46
14863: PUSH
14864: LD_EXP 45
14868: PUSH
14869: LD_VAR 0 6
14873: ARRAY
14874: MINUS
14875: ST_TO_ADDR
// if not minesFreeAmount then
14876: LD_VAR 0 8
14880: NOT
14881: IFFALSE 14885
// exit ;
14883: GO 15156
// tmp := [ ] ;
14885: LD_ADDR_VAR 0 7
14889: PUSH
14890: EMPTY
14891: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_VAR 0 8
14906: PUSH
14907: FOR_TO
14908: IFFALSE 15103
// begin _d := rand ( 0 , 5 ) ;
14910: LD_ADDR_VAR 0 11
14914: PUSH
14915: LD_INT 0
14917: PPUSH
14918: LD_INT 5
14920: PPUSH
14921: CALL_OW 12
14925: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14926: LD_ADDR_VAR 0 12
14930: PUSH
14931: LD_INT 2
14933: PPUSH
14934: LD_INT 6
14936: PPUSH
14937: CALL_OW 12
14941: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14942: LD_ADDR_VAR 0 9
14946: PUSH
14947: LD_VAR 0 2
14951: PPUSH
14952: LD_VAR 0 11
14956: PPUSH
14957: LD_VAR 0 12
14961: PPUSH
14962: CALL_OW 272
14966: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14967: LD_ADDR_VAR 0 10
14971: PUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_VAR 0 11
14981: PPUSH
14982: LD_VAR 0 12
14986: PPUSH
14987: CALL_OW 273
14991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14992: LD_VAR 0 9
14996: PPUSH
14997: LD_VAR 0 10
15001: PPUSH
15002: CALL_OW 488
15006: PUSH
15007: LD_VAR 0 9
15011: PUSH
15012: LD_VAR 0 10
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_VAR 0 7
15025: IN
15026: NOT
15027: AND
15028: PUSH
15029: LD_VAR 0 9
15033: PPUSH
15034: LD_VAR 0 10
15038: PPUSH
15039: CALL_OW 458
15043: NOT
15044: AND
15045: IFFALSE 15087
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15047: LD_ADDR_VAR 0 7
15051: PUSH
15052: LD_VAR 0 7
15056: PPUSH
15057: LD_VAR 0 7
15061: PUSH
15062: LD_INT 1
15064: PLUS
15065: PPUSH
15066: LD_VAR 0 9
15070: PUSH
15071: LD_VAR 0 10
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PPUSH
15080: CALL_OW 1
15084: ST_TO_ADDR
15085: GO 15101
// i := i - 1 ;
15087: LD_ADDR_VAR 0 5
15091: PUSH
15092: LD_VAR 0 5
15096: PUSH
15097: LD_INT 1
15099: MINUS
15100: ST_TO_ADDR
// end ;
15101: GO 14907
15103: POP
15104: POP
// for i in tmp do
15105: LD_ADDR_VAR 0 5
15109: PUSH
15110: LD_VAR 0 7
15114: PUSH
15115: FOR_IN
15116: IFFALSE 15154
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15118: LD_VAR 0 1
15122: PPUSH
15123: LD_VAR 0 5
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 5
15136: PUSH
15137: LD_INT 2
15139: ARRAY
15140: PPUSH
15141: CALL 14096 0 3
15145: NOT
15146: IFFALSE 15152
// exit ;
15148: POP
15149: POP
15150: GO 15156
15152: GO 15115
15154: POP
15155: POP
// end ;
15156: LD_VAR 0 4
15160: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
// if not GetClass ( unit ) = class_sniper then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 257
15179: PUSH
15180: LD_INT 5
15182: EQUAL
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15576
// dist := 8 ;
15188: LD_ADDR_VAR 0 5
15192: PUSH
15193: LD_INT 8
15195: ST_TO_ADDR
// viewRange := 12 ;
15196: LD_ADDR_VAR 0 7
15200: PUSH
15201: LD_INT 12
15203: ST_TO_ADDR
// side := GetSide ( unit ) ;
15204: LD_ADDR_VAR 0 6
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 255
15218: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15219: LD_INT 61
15221: PPUSH
15222: LD_VAR 0 6
15226: PPUSH
15227: CALL_OW 321
15231: PUSH
15232: LD_INT 2
15234: EQUAL
15235: IFFALSE 15245
// viewRange := 16 ;
15237: LD_ADDR_VAR 0 7
15241: PUSH
15242: LD_INT 16
15244: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15245: LD_VAR 0 1
15249: PPUSH
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: CALL_OW 297
15264: PUSH
15265: LD_VAR 0 5
15269: GREATER
15270: IFFALSE 15349
// begin ComMoveXY ( unit , x , y ) ;
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_VAR 0 2
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15291: LD_INT 35
15293: PPUSH
15294: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: CALL 65573 0 3
15317: NOT
15318: IFFALSE 15322
// exit ;
15320: GO 15576
// until GetDistUnitXY ( unit , x , y ) < dist ;
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_VAR 0 2
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: CALL_OW 297
15341: PUSH
15342: LD_VAR 0 5
15346: LESS
15347: IFFALSE 15291
// end ; ComTurnXY ( unit , x , y ) ;
15349: LD_VAR 0 1
15353: PPUSH
15354: LD_VAR 0 2
15358: PPUSH
15359: LD_VAR 0 3
15363: PPUSH
15364: CALL_OW 118
// wait ( 5 ) ;
15368: LD_INT 5
15370: PPUSH
15371: CALL_OW 67
// _d := GetDir ( unit ) ;
15375: LD_ADDR_VAR 0 10
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL_OW 254
15389: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15390: LD_ADDR_VAR 0 8
15394: PUSH
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL_OW 250
15404: PPUSH
15405: LD_VAR 0 10
15409: PPUSH
15410: LD_VAR 0 5
15414: PPUSH
15415: CALL_OW 272
15419: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15420: LD_ADDR_VAR 0 9
15424: PUSH
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 251
15434: PPUSH
15435: LD_VAR 0 10
15439: PPUSH
15440: LD_VAR 0 5
15444: PPUSH
15445: CALL_OW 273
15449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15450: LD_VAR 0 8
15454: PPUSH
15455: LD_VAR 0 9
15459: PPUSH
15460: CALL_OW 488
15464: NOT
15465: IFFALSE 15469
// exit ;
15467: GO 15576
// ComAnimCustom ( unit , 1 ) ;
15469: LD_VAR 0 1
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15481: LD_VAR 0 8
15485: PPUSH
15486: LD_VAR 0 9
15490: PPUSH
15491: LD_VAR 0 6
15495: PPUSH
15496: LD_VAR 0 7
15500: PPUSH
15501: CALL_OW 330
// repeat wait ( 1 ) ;
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 316
15521: PUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 314
15531: OR
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 302
15542: NOT
15543: OR
15544: PUSH
15545: LD_VAR 0 1
15549: PPUSH
15550: CALL_OW 301
15554: OR
15555: IFFALSE 15505
// RemoveSeeing ( _x , _y , side ) ;
15557: LD_VAR 0 8
15561: PPUSH
15562: LD_VAR 0 9
15566: PPUSH
15567: LD_VAR 0 6
15571: PPUSH
15572: CALL_OW 331
// end ; end_of_file
15576: LD_VAR 0 4
15580: RET
// every 0 0$1 do
15581: GO 15583
15583: DISABLE
// begin enable ;
15584: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15585: LD_STRING updateTimer(
15587: PUSH
15588: LD_OWVAR 1
15592: STR
15593: PUSH
15594: LD_STRING );
15596: STR
15597: PPUSH
15598: CALL_OW 559
// end ;
15602: END
// export function SOS_MapStart ( ) ; begin
15603: LD_INT 0
15605: PPUSH
// if streamModeActive then
15606: LD_EXP 47
15610: IFFALSE 15619
// DefineStreamItems ( true ) ;
15612: LD_INT 1
15614: PPUSH
15615: CALL 17269 0 1
// UpdateFactoryWaypoints ( ) ;
15619: CALL 11879 0 0
// end ;
15623: LD_VAR 0 1
15627: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15628: LD_INT 0
15630: PPUSH
// if p2 = 100 then
15631: LD_VAR 0 2
15635: PUSH
15636: LD_INT 100
15638: EQUAL
15639: IFFALSE 16642
// begin if not StreamModeActive then
15641: LD_EXP 47
15645: NOT
15646: IFFALSE 15656
// StreamModeActive := true ;
15648: LD_ADDR_EXP 47
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 0 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 0
15663: EQUAL
15664: IFFALSE 15670
// InitStreamMode ;
15666: CALL 16805 0 0
// if p3 = 1 then
15670: LD_VAR 0 3
15674: PUSH
15675: LD_INT 1
15677: EQUAL
15678: IFFALSE 15688
// sRocket := true ;
15680: LD_ADDR_EXP 52
15684: PUSH
15685: LD_INT 1
15687: ST_TO_ADDR
// if p3 = 2 then
15688: LD_VAR 0 3
15692: PUSH
15693: LD_INT 2
15695: EQUAL
15696: IFFALSE 15706
// sSpeed := true ;
15698: LD_ADDR_EXP 51
15702: PUSH
15703: LD_INT 1
15705: ST_TO_ADDR
// if p3 = 3 then
15706: LD_VAR 0 3
15710: PUSH
15711: LD_INT 3
15713: EQUAL
15714: IFFALSE 15724
// sEngine := true ;
15716: LD_ADDR_EXP 53
15720: PUSH
15721: LD_INT 1
15723: ST_TO_ADDR
// if p3 = 4 then
15724: LD_VAR 0 3
15728: PUSH
15729: LD_INT 4
15731: EQUAL
15732: IFFALSE 15742
// sSpec := true ;
15734: LD_ADDR_EXP 50
15738: PUSH
15739: LD_INT 1
15741: ST_TO_ADDR
// if p3 = 5 then
15742: LD_VAR 0 3
15746: PUSH
15747: LD_INT 5
15749: EQUAL
15750: IFFALSE 15760
// sLevel := true ;
15752: LD_ADDR_EXP 54
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// if p3 = 6 then
15760: LD_VAR 0 3
15764: PUSH
15765: LD_INT 6
15767: EQUAL
15768: IFFALSE 15778
// sArmoury := true ;
15770: LD_ADDR_EXP 55
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// if p3 = 7 then
15778: LD_VAR 0 3
15782: PUSH
15783: LD_INT 7
15785: EQUAL
15786: IFFALSE 15796
// sRadar := true ;
15788: LD_ADDR_EXP 56
15792: PUSH
15793: LD_INT 1
15795: ST_TO_ADDR
// if p3 = 8 then
15796: LD_VAR 0 3
15800: PUSH
15801: LD_INT 8
15803: EQUAL
15804: IFFALSE 15814
// sBunker := true ;
15806: LD_ADDR_EXP 57
15810: PUSH
15811: LD_INT 1
15813: ST_TO_ADDR
// if p3 = 9 then
15814: LD_VAR 0 3
15818: PUSH
15819: LD_INT 9
15821: EQUAL
15822: IFFALSE 15832
// sHack := true ;
15824: LD_ADDR_EXP 58
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// if p3 = 10 then
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 10
15839: EQUAL
15840: IFFALSE 15850
// sFire := true ;
15842: LD_ADDR_EXP 59
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// if p3 = 11 then
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 11
15857: EQUAL
15858: IFFALSE 15868
// sRefresh := true ;
15860: LD_ADDR_EXP 60
15864: PUSH
15865: LD_INT 1
15867: ST_TO_ADDR
// if p3 = 12 then
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 12
15875: EQUAL
15876: IFFALSE 15886
// sExp := true ;
15878: LD_ADDR_EXP 61
15882: PUSH
15883: LD_INT 1
15885: ST_TO_ADDR
// if p3 = 13 then
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 13
15893: EQUAL
15894: IFFALSE 15904
// sDepot := true ;
15896: LD_ADDR_EXP 62
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// if p3 = 14 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 14
15911: EQUAL
15912: IFFALSE 15922
// sFlag := true ;
15914: LD_ADDR_EXP 63
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 15 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 15
15929: EQUAL
15930: IFFALSE 15940
// sKamikadze := true ;
15932: LD_ADDR_EXP 71
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 16 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 16
15947: EQUAL
15948: IFFALSE 15958
// sTroll := true ;
15950: LD_ADDR_EXP 72
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 17 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 17
15965: EQUAL
15966: IFFALSE 15976
// sSlow := true ;
15968: LD_ADDR_EXP 73
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 18 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 18
15983: EQUAL
15984: IFFALSE 15994
// sLack := true ;
15986: LD_ADDR_EXP 74
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 19 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 19
16001: EQUAL
16002: IFFALSE 16012
// sTank := true ;
16004: LD_ADDR_EXP 76
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 20 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 20
16019: EQUAL
16020: IFFALSE 16030
// sRemote := true ;
16022: LD_ADDR_EXP 77
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 21 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 21
16037: EQUAL
16038: IFFALSE 16048
// sPowell := true ;
16040: LD_ADDR_EXP 78
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 22 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 22
16055: EQUAL
16056: IFFALSE 16066
// sTeleport := true ;
16058: LD_ADDR_EXP 81
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 23 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 23
16073: EQUAL
16074: IFFALSE 16084
// sOilTower := true ;
16076: LD_ADDR_EXP 83
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 24 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 24
16091: EQUAL
16092: IFFALSE 16102
// sShovel := true ;
16094: LD_ADDR_EXP 84
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 25 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 25
16109: EQUAL
16110: IFFALSE 16120
// sSheik := true ;
16112: LD_ADDR_EXP 85
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 26 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 26
16127: EQUAL
16128: IFFALSE 16138
// sEarthquake := true ;
16130: LD_ADDR_EXP 87
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 27 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 27
16145: EQUAL
16146: IFFALSE 16156
// sAI := true ;
16148: LD_ADDR_EXP 88
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 28 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 28
16163: EQUAL
16164: IFFALSE 16174
// sCargo := true ;
16166: LD_ADDR_EXP 91
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 29 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 29
16181: EQUAL
16182: IFFALSE 16192
// sDLaser := true ;
16184: LD_ADDR_EXP 92
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 30 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 30
16199: EQUAL
16200: IFFALSE 16210
// sExchange := true ;
16202: LD_ADDR_EXP 93
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 31 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 31
16217: EQUAL
16218: IFFALSE 16228
// sFac := true ;
16220: LD_ADDR_EXP 94
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 32 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 32
16235: EQUAL
16236: IFFALSE 16246
// sPower := true ;
16238: LD_ADDR_EXP 95
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// if p3 = 33 then
16246: LD_VAR 0 3
16250: PUSH
16251: LD_INT 33
16253: EQUAL
16254: IFFALSE 16264
// sRandom := true ;
16256: LD_ADDR_EXP 96
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// if p3 = 34 then
16264: LD_VAR 0 3
16268: PUSH
16269: LD_INT 34
16271: EQUAL
16272: IFFALSE 16282
// sShield := true ;
16274: LD_ADDR_EXP 97
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// if p3 = 35 then
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 35
16289: EQUAL
16290: IFFALSE 16300
// sTime := true ;
16292: LD_ADDR_EXP 98
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// if p3 = 36 then
16300: LD_VAR 0 3
16304: PUSH
16305: LD_INT 36
16307: EQUAL
16308: IFFALSE 16318
// sTools := true ;
16310: LD_ADDR_EXP 99
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// if p3 = 101 then
16318: LD_VAR 0 3
16322: PUSH
16323: LD_INT 101
16325: EQUAL
16326: IFFALSE 16336
// sSold := true ;
16328: LD_ADDR_EXP 64
16332: PUSH
16333: LD_INT 1
16335: ST_TO_ADDR
// if p3 = 102 then
16336: LD_VAR 0 3
16340: PUSH
16341: LD_INT 102
16343: EQUAL
16344: IFFALSE 16354
// sDiff := true ;
16346: LD_ADDR_EXP 65
16350: PUSH
16351: LD_INT 1
16353: ST_TO_ADDR
// if p3 = 103 then
16354: LD_VAR 0 3
16358: PUSH
16359: LD_INT 103
16361: EQUAL
16362: IFFALSE 16372
// sFog := true ;
16364: LD_ADDR_EXP 68
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// if p3 = 104 then
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 104
16379: EQUAL
16380: IFFALSE 16390
// sReset := true ;
16382: LD_ADDR_EXP 69
16386: PUSH
16387: LD_INT 1
16389: ST_TO_ADDR
// if p3 = 105 then
16390: LD_VAR 0 3
16394: PUSH
16395: LD_INT 105
16397: EQUAL
16398: IFFALSE 16408
// sSun := true ;
16400: LD_ADDR_EXP 70
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// if p3 = 106 then
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 106
16415: EQUAL
16416: IFFALSE 16426
// sTiger := true ;
16418: LD_ADDR_EXP 66
16422: PUSH
16423: LD_INT 1
16425: ST_TO_ADDR
// if p3 = 107 then
16426: LD_VAR 0 3
16430: PUSH
16431: LD_INT 107
16433: EQUAL
16434: IFFALSE 16444
// sBomb := true ;
16436: LD_ADDR_EXP 67
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// if p3 = 108 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 108
16451: EQUAL
16452: IFFALSE 16462
// sWound := true ;
16454: LD_ADDR_EXP 75
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
// if p3 = 109 then
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 109
16469: EQUAL
16470: IFFALSE 16480
// sBetray := true ;
16472: LD_ADDR_EXP 79
16476: PUSH
16477: LD_INT 1
16479: ST_TO_ADDR
// if p3 = 110 then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 110
16487: EQUAL
16488: IFFALSE 16498
// sContamin := true ;
16490: LD_ADDR_EXP 80
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
// if p3 = 111 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 111
16505: EQUAL
16506: IFFALSE 16516
// sOil := true ;
16508: LD_ADDR_EXP 82
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
// if p3 = 112 then
16516: LD_VAR 0 3
16520: PUSH
16521: LD_INT 112
16523: EQUAL
16524: IFFALSE 16534
// sStu := true ;
16526: LD_ADDR_EXP 86
16530: PUSH
16531: LD_INT 1
16533: ST_TO_ADDR
// if p3 = 113 then
16534: LD_VAR 0 3
16538: PUSH
16539: LD_INT 113
16541: EQUAL
16542: IFFALSE 16552
// sBazooka := true ;
16544: LD_ADDR_EXP 89
16548: PUSH
16549: LD_INT 1
16551: ST_TO_ADDR
// if p3 = 114 then
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 114
16559: EQUAL
16560: IFFALSE 16570
// sMortar := true ;
16562: LD_ADDR_EXP 90
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// if p3 = 115 then
16570: LD_VAR 0 3
16574: PUSH
16575: LD_INT 115
16577: EQUAL
16578: IFFALSE 16588
// sRanger := true ;
16580: LD_ADDR_EXP 100
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// if p3 = 116 then
16588: LD_VAR 0 3
16592: PUSH
16593: LD_INT 116
16595: EQUAL
16596: IFFALSE 16606
// sComputer := true ;
16598: LD_ADDR_EXP 101
16602: PUSH
16603: LD_INT 1
16605: ST_TO_ADDR
// if p3 = 117 then
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 117
16613: EQUAL
16614: IFFALSE 16624
// s30 := true ;
16616: LD_ADDR_EXP 102
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// if p3 = 118 then
16624: LD_VAR 0 3
16628: PUSH
16629: LD_INT 118
16631: EQUAL
16632: IFFALSE 16642
// s60 := true ;
16634: LD_ADDR_EXP 103
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// end ; if p2 = 101 then
16642: LD_VAR 0 2
16646: PUSH
16647: LD_INT 101
16649: EQUAL
16650: IFFALSE 16778
// begin case p3 of 1 :
16652: LD_VAR 0 3
16656: PUSH
16657: LD_INT 1
16659: DOUBLE
16660: EQUAL
16661: IFTRUE 16665
16663: GO 16672
16665: POP
// hHackUnlimitedResources ; 2 :
16666: CALL 28876 0 0
16670: GO 16778
16672: LD_INT 2
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16687
16680: POP
// hHackSetLevel10 ; 3 :
16681: CALL 29009 0 0
16685: GO 16778
16687: LD_INT 3
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16702
16695: POP
// hHackSetLevel10YourUnits ; 4 :
16696: CALL 29094 0 0
16700: GO 16778
16702: LD_INT 4
16704: DOUBLE
16705: EQUAL
16706: IFTRUE 16710
16708: GO 16717
16710: POP
// hHackInvincible ; 5 :
16711: CALL 29542 0 0
16715: GO 16778
16717: LD_INT 5
16719: DOUBLE
16720: EQUAL
16721: IFTRUE 16725
16723: GO 16732
16725: POP
// hHackInvisible ; 6 :
16726: CALL 29653 0 0
16730: GO 16778
16732: LD_INT 6
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16747
16740: POP
// hHackChangeYourSide ; 7 :
16741: CALL 29710 0 0
16745: GO 16778
16747: LD_INT 7
16749: DOUBLE
16750: EQUAL
16751: IFTRUE 16755
16753: GO 16762
16755: POP
// hHackChangeUnitSide ; 8 :
16756: CALL 29752 0 0
16760: GO 16778
16762: LD_INT 8
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16777
16770: POP
// hHackFog ; end ;
16771: CALL 29853 0 0
16775: GO 16778
16777: POP
// end ; end ;
16778: LD_VAR 0 7
16782: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16783: GO 16785
16785: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16786: LD_STRING initStreamRollete();
16788: PPUSH
16789: CALL_OW 559
// InitStreamMode ;
16793: CALL 16805 0 0
// DefineStreamItems ( false ) ;
16797: LD_INT 0
16799: PPUSH
16800: CALL 17269 0 1
// end ;
16804: END
// function InitStreamMode ; begin
16805: LD_INT 0
16807: PPUSH
// streamModeActive := false ;
16808: LD_ADDR_EXP 47
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// normalCounter := 36 ;
16816: LD_ADDR_EXP 48
16820: PUSH
16821: LD_INT 36
16823: ST_TO_ADDR
// hardcoreCounter := 18 ;
16824: LD_ADDR_EXP 49
16828: PUSH
16829: LD_INT 18
16831: ST_TO_ADDR
// sRocket := false ;
16832: LD_ADDR_EXP 52
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// sSpeed := false ;
16840: LD_ADDR_EXP 51
16844: PUSH
16845: LD_INT 0
16847: ST_TO_ADDR
// sEngine := false ;
16848: LD_ADDR_EXP 53
16852: PUSH
16853: LD_INT 0
16855: ST_TO_ADDR
// sSpec := false ;
16856: LD_ADDR_EXP 50
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// sLevel := false ;
16864: LD_ADDR_EXP 54
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// sArmoury := false ;
16872: LD_ADDR_EXP 55
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// sRadar := false ;
16880: LD_ADDR_EXP 56
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// sBunker := false ;
16888: LD_ADDR_EXP 57
16892: PUSH
16893: LD_INT 0
16895: ST_TO_ADDR
// sHack := false ;
16896: LD_ADDR_EXP 58
16900: PUSH
16901: LD_INT 0
16903: ST_TO_ADDR
// sFire := false ;
16904: LD_ADDR_EXP 59
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// sRefresh := false ;
16912: LD_ADDR_EXP 60
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// sExp := false ;
16920: LD_ADDR_EXP 61
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// sDepot := false ;
16928: LD_ADDR_EXP 62
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sFlag := false ;
16936: LD_ADDR_EXP 63
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sKamikadze := false ;
16944: LD_ADDR_EXP 71
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sTroll := false ;
16952: LD_ADDR_EXP 72
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sSlow := false ;
16960: LD_ADDR_EXP 73
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sLack := false ;
16968: LD_ADDR_EXP 74
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sTank := false ;
16976: LD_ADDR_EXP 76
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sRemote := false ;
16984: LD_ADDR_EXP 77
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sPowell := false ;
16992: LD_ADDR_EXP 78
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sTeleport := false ;
17000: LD_ADDR_EXP 81
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sOilTower := false ;
17008: LD_ADDR_EXP 83
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sShovel := false ;
17016: LD_ADDR_EXP 84
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sSheik := false ;
17024: LD_ADDR_EXP 85
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sEarthquake := false ;
17032: LD_ADDR_EXP 87
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sAI := false ;
17040: LD_ADDR_EXP 88
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sCargo := false ;
17048: LD_ADDR_EXP 91
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// sDLaser := false ;
17056: LD_ADDR_EXP 92
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// sExchange := false ;
17064: LD_ADDR_EXP 93
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// sFac := false ;
17072: LD_ADDR_EXP 94
17076: PUSH
17077: LD_INT 0
17079: ST_TO_ADDR
// sPower := false ;
17080: LD_ADDR_EXP 95
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// sRandom := false ;
17088: LD_ADDR_EXP 96
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sShield := false ;
17096: LD_ADDR_EXP 97
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// sTime := false ;
17104: LD_ADDR_EXP 98
17108: PUSH
17109: LD_INT 0
17111: ST_TO_ADDR
// sTools := false ;
17112: LD_ADDR_EXP 99
17116: PUSH
17117: LD_INT 0
17119: ST_TO_ADDR
// sSold := false ;
17120: LD_ADDR_EXP 64
17124: PUSH
17125: LD_INT 0
17127: ST_TO_ADDR
// sDiff := false ;
17128: LD_ADDR_EXP 65
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// sFog := false ;
17136: LD_ADDR_EXP 68
17140: PUSH
17141: LD_INT 0
17143: ST_TO_ADDR
// sReset := false ;
17144: LD_ADDR_EXP 69
17148: PUSH
17149: LD_INT 0
17151: ST_TO_ADDR
// sSun := false ;
17152: LD_ADDR_EXP 70
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// sTiger := false ;
17160: LD_ADDR_EXP 66
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// sBomb := false ;
17168: LD_ADDR_EXP 67
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
// sWound := false ;
17176: LD_ADDR_EXP 75
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// sBetray := false ;
17184: LD_ADDR_EXP 79
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// sContamin := false ;
17192: LD_ADDR_EXP 80
17196: PUSH
17197: LD_INT 0
17199: ST_TO_ADDR
// sOil := false ;
17200: LD_ADDR_EXP 82
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// sStu := false ;
17208: LD_ADDR_EXP 86
17212: PUSH
17213: LD_INT 0
17215: ST_TO_ADDR
// sBazooka := false ;
17216: LD_ADDR_EXP 89
17220: PUSH
17221: LD_INT 0
17223: ST_TO_ADDR
// sMortar := false ;
17224: LD_ADDR_EXP 90
17228: PUSH
17229: LD_INT 0
17231: ST_TO_ADDR
// sRanger := false ;
17232: LD_ADDR_EXP 100
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// sComputer := false ;
17240: LD_ADDR_EXP 101
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// s30 := false ;
17248: LD_ADDR_EXP 102
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// s60 := false ;
17256: LD_ADDR_EXP 103
17260: PUSH
17261: LD_INT 0
17263: ST_TO_ADDR
// end ;
17264: LD_VAR 0 1
17268: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17269: LD_INT 0
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
// result := [ ] ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: EMPTY
17284: ST_TO_ADDR
// if campaign_id = 1 then
17285: LD_OWVAR 69
17289: PUSH
17290: LD_INT 1
17292: EQUAL
17293: IFFALSE 20459
// begin case mission_number of 1 :
17295: LD_OWVAR 70
17299: PUSH
17300: LD_INT 1
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17384
17308: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17309: LD_ADDR_VAR 0 2
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: LD_INT 4
17319: PUSH
17320: LD_INT 11
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: LD_INT 15
17328: PUSH
17329: LD_INT 16
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_INT 23
17337: PUSH
17338: LD_INT 26
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 101
17354: PUSH
17355: LD_INT 102
17357: PUSH
17358: LD_INT 106
17360: PUSH
17361: LD_INT 116
17363: PUSH
17364: LD_INT 117
17366: PUSH
17367: LD_INT 118
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: ST_TO_ADDR
17382: GO 20457
17384: LD_INT 2
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17476
17392: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17393: LD_ADDR_VAR 0 2
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: LD_INT 4
17403: PUSH
17404: LD_INT 11
17406: PUSH
17407: LD_INT 12
17409: PUSH
17410: LD_INT 15
17412: PUSH
17413: LD_INT 16
17415: PUSH
17416: LD_INT 22
17418: PUSH
17419: LD_INT 23
17421: PUSH
17422: LD_INT 26
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 101
17438: PUSH
17439: LD_INT 102
17441: PUSH
17442: LD_INT 105
17444: PUSH
17445: LD_INT 106
17447: PUSH
17448: LD_INT 108
17450: PUSH
17451: LD_INT 116
17453: PUSH
17454: LD_INT 117
17456: PUSH
17457: LD_INT 118
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: ST_TO_ADDR
17474: GO 20457
17476: LD_INT 3
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17572
17484: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: LD_INT 4
17495: PUSH
17496: LD_INT 5
17498: PUSH
17499: LD_INT 11
17501: PUSH
17502: LD_INT 12
17504: PUSH
17505: LD_INT 15
17507: PUSH
17508: LD_INT 16
17510: PUSH
17511: LD_INT 22
17513: PUSH
17514: LD_INT 26
17516: PUSH
17517: LD_INT 36
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 105
17540: PUSH
17541: LD_INT 106
17543: PUSH
17544: LD_INT 108
17546: PUSH
17547: LD_INT 116
17549: PUSH
17550: LD_INT 117
17552: PUSH
17553: LD_INT 118
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: ST_TO_ADDR
17570: GO 20457
17572: LD_INT 4
17574: DOUBLE
17575: EQUAL
17576: IFTRUE 17580
17578: GO 17676
17580: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 4
17591: PUSH
17592: LD_INT 5
17594: PUSH
17595: LD_INT 8
17597: PUSH
17598: LD_INT 11
17600: PUSH
17601: LD_INT 12
17603: PUSH
17604: LD_INT 15
17606: PUSH
17607: LD_INT 16
17609: PUSH
17610: LD_INT 22
17612: PUSH
17613: LD_INT 23
17615: PUSH
17616: LD_INT 26
17618: PUSH
17619: LD_INT 36
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 101
17638: PUSH
17639: LD_INT 102
17641: PUSH
17642: LD_INT 105
17644: PUSH
17645: LD_INT 106
17647: PUSH
17648: LD_INT 108
17650: PUSH
17651: LD_INT 116
17653: PUSH
17654: LD_INT 117
17656: PUSH
17657: LD_INT 118
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: ST_TO_ADDR
17674: GO 20457
17676: LD_INT 5
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17796
17684: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: LD_INT 4
17695: PUSH
17696: LD_INT 5
17698: PUSH
17699: LD_INT 6
17701: PUSH
17702: LD_INT 8
17704: PUSH
17705: LD_INT 11
17707: PUSH
17708: LD_INT 12
17710: PUSH
17711: LD_INT 15
17713: PUSH
17714: LD_INT 16
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_INT 23
17722: PUSH
17723: LD_INT 25
17725: PUSH
17726: LD_INT 26
17728: PUSH
17729: LD_INT 36
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 101
17750: PUSH
17751: LD_INT 102
17753: PUSH
17754: LD_INT 105
17756: PUSH
17757: LD_INT 106
17759: PUSH
17760: LD_INT 108
17762: PUSH
17763: LD_INT 109
17765: PUSH
17766: LD_INT 112
17768: PUSH
17769: LD_INT 116
17771: PUSH
17772: LD_INT 117
17774: PUSH
17775: LD_INT 118
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: ST_TO_ADDR
17794: GO 20457
17796: LD_INT 6
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17936
17804: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 4
17815: PUSH
17816: LD_INT 5
17818: PUSH
17819: LD_INT 6
17821: PUSH
17822: LD_INT 8
17824: PUSH
17825: LD_INT 11
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 15
17833: PUSH
17834: LD_INT 16
17836: PUSH
17837: LD_INT 20
17839: PUSH
17840: LD_INT 21
17842: PUSH
17843: LD_INT 22
17845: PUSH
17846: LD_INT 23
17848: PUSH
17849: LD_INT 25
17851: PUSH
17852: LD_INT 26
17854: PUSH
17855: LD_INT 30
17857: PUSH
17858: LD_INT 31
17860: PUSH
17861: LD_INT 32
17863: PUSH
17864: LD_INT 36
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 101
17890: PUSH
17891: LD_INT 102
17893: PUSH
17894: LD_INT 105
17896: PUSH
17897: LD_INT 106
17899: PUSH
17900: LD_INT 108
17902: PUSH
17903: LD_INT 109
17905: PUSH
17906: LD_INT 112
17908: PUSH
17909: LD_INT 116
17911: PUSH
17912: LD_INT 117
17914: PUSH
17915: LD_INT 118
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: ST_TO_ADDR
17934: GO 20457
17936: LD_INT 7
17938: DOUBLE
17939: EQUAL
17940: IFTRUE 17944
17942: GO 18056
17944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: LD_INT 4
17955: PUSH
17956: LD_INT 5
17958: PUSH
17959: LD_INT 7
17961: PUSH
17962: LD_INT 11
17964: PUSH
17965: LD_INT 12
17967: PUSH
17968: LD_INT 15
17970: PUSH
17971: LD_INT 16
17973: PUSH
17974: LD_INT 20
17976: PUSH
17977: LD_INT 21
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_INT 23
17985: PUSH
17986: LD_INT 25
17988: PUSH
17989: LD_INT 26
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 101
18010: PUSH
18011: LD_INT 102
18013: PUSH
18014: LD_INT 103
18016: PUSH
18017: LD_INT 105
18019: PUSH
18020: LD_INT 106
18022: PUSH
18023: LD_INT 108
18025: PUSH
18026: LD_INT 112
18028: PUSH
18029: LD_INT 116
18031: PUSH
18032: LD_INT 117
18034: PUSH
18035: LD_INT 118
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: ST_TO_ADDR
18054: GO 20457
18056: LD_INT 8
18058: DOUBLE
18059: EQUAL
18060: IFTRUE 18064
18062: GO 18204
18064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18065: LD_ADDR_VAR 0 2
18069: PUSH
18070: LD_INT 2
18072: PUSH
18073: LD_INT 4
18075: PUSH
18076: LD_INT 5
18078: PUSH
18079: LD_INT 6
18081: PUSH
18082: LD_INT 7
18084: PUSH
18085: LD_INT 8
18087: PUSH
18088: LD_INT 11
18090: PUSH
18091: LD_INT 12
18093: PUSH
18094: LD_INT 15
18096: PUSH
18097: LD_INT 16
18099: PUSH
18100: LD_INT 20
18102: PUSH
18103: LD_INT 21
18105: PUSH
18106: LD_INT 22
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 25
18114: PUSH
18115: LD_INT 26
18117: PUSH
18118: LD_INT 30
18120: PUSH
18121: LD_INT 31
18123: PUSH
18124: LD_INT 32
18126: PUSH
18127: LD_INT 36
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 101
18154: PUSH
18155: LD_INT 102
18157: PUSH
18158: LD_INT 103
18160: PUSH
18161: LD_INT 105
18163: PUSH
18164: LD_INT 106
18166: PUSH
18167: LD_INT 108
18169: PUSH
18170: LD_INT 109
18172: PUSH
18173: LD_INT 112
18175: PUSH
18176: LD_INT 116
18178: PUSH
18179: LD_INT 117
18181: PUSH
18182: LD_INT 118
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: ST_TO_ADDR
18202: GO 20457
18204: LD_INT 9
18206: DOUBLE
18207: EQUAL
18208: IFTRUE 18212
18210: GO 18360
18212: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: LD_INT 4
18223: PUSH
18224: LD_INT 5
18226: PUSH
18227: LD_INT 6
18229: PUSH
18230: LD_INT 7
18232: PUSH
18233: LD_INT 8
18235: PUSH
18236: LD_INT 11
18238: PUSH
18239: LD_INT 12
18241: PUSH
18242: LD_INT 15
18244: PUSH
18245: LD_INT 16
18247: PUSH
18248: LD_INT 20
18250: PUSH
18251: LD_INT 21
18253: PUSH
18254: LD_INT 22
18256: PUSH
18257: LD_INT 23
18259: PUSH
18260: LD_INT 25
18262: PUSH
18263: LD_INT 26
18265: PUSH
18266: LD_INT 28
18268: PUSH
18269: LD_INT 30
18271: PUSH
18272: LD_INT 31
18274: PUSH
18275: LD_INT 32
18277: PUSH
18278: LD_INT 36
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 101
18306: PUSH
18307: LD_INT 102
18309: PUSH
18310: LD_INT 103
18312: PUSH
18313: LD_INT 105
18315: PUSH
18316: LD_INT 106
18318: PUSH
18319: LD_INT 108
18321: PUSH
18322: LD_INT 109
18324: PUSH
18325: LD_INT 112
18327: PUSH
18328: LD_INT 114
18330: PUSH
18331: LD_INT 116
18333: PUSH
18334: LD_INT 117
18336: PUSH
18337: LD_INT 118
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: ST_TO_ADDR
18358: GO 20457
18360: LD_INT 10
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18564
18368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18369: LD_ADDR_VAR 0 2
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 4
18379: PUSH
18380: LD_INT 5
18382: PUSH
18383: LD_INT 6
18385: PUSH
18386: LD_INT 7
18388: PUSH
18389: LD_INT 8
18391: PUSH
18392: LD_INT 9
18394: PUSH
18395: LD_INT 10
18397: PUSH
18398: LD_INT 11
18400: PUSH
18401: LD_INT 12
18403: PUSH
18404: LD_INT 13
18406: PUSH
18407: LD_INT 14
18409: PUSH
18410: LD_INT 15
18412: PUSH
18413: LD_INT 16
18415: PUSH
18416: LD_INT 17
18418: PUSH
18419: LD_INT 18
18421: PUSH
18422: LD_INT 19
18424: PUSH
18425: LD_INT 20
18427: PUSH
18428: LD_INT 21
18430: PUSH
18431: LD_INT 22
18433: PUSH
18434: LD_INT 23
18436: PUSH
18437: LD_INT 24
18439: PUSH
18440: LD_INT 25
18442: PUSH
18443: LD_INT 26
18445: PUSH
18446: LD_INT 28
18448: PUSH
18449: LD_INT 30
18451: PUSH
18452: LD_INT 31
18454: PUSH
18455: LD_INT 32
18457: PUSH
18458: LD_INT 36
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 101
18494: PUSH
18495: LD_INT 102
18497: PUSH
18498: LD_INT 103
18500: PUSH
18501: LD_INT 104
18503: PUSH
18504: LD_INT 105
18506: PUSH
18507: LD_INT 106
18509: PUSH
18510: LD_INT 107
18512: PUSH
18513: LD_INT 108
18515: PUSH
18516: LD_INT 109
18518: PUSH
18519: LD_INT 110
18521: PUSH
18522: LD_INT 111
18524: PUSH
18525: LD_INT 112
18527: PUSH
18528: LD_INT 114
18530: PUSH
18531: LD_INT 116
18533: PUSH
18534: LD_INT 117
18536: PUSH
18537: LD_INT 118
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: ST_TO_ADDR
18562: GO 20457
18564: LD_INT 11
18566: DOUBLE
18567: EQUAL
18568: IFTRUE 18572
18570: GO 18776
18572: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18573: LD_ADDR_VAR 0 2
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 3
18583: PUSH
18584: LD_INT 4
18586: PUSH
18587: LD_INT 5
18589: PUSH
18590: LD_INT 6
18592: PUSH
18593: LD_INT 7
18595: PUSH
18596: LD_INT 8
18598: PUSH
18599: LD_INT 9
18601: PUSH
18602: LD_INT 10
18604: PUSH
18605: LD_INT 11
18607: PUSH
18608: LD_INT 12
18610: PUSH
18611: LD_INT 13
18613: PUSH
18614: LD_INT 14
18616: PUSH
18617: LD_INT 15
18619: PUSH
18620: LD_INT 16
18622: PUSH
18623: LD_INT 17
18625: PUSH
18626: LD_INT 18
18628: PUSH
18629: LD_INT 19
18631: PUSH
18632: LD_INT 20
18634: PUSH
18635: LD_INT 21
18637: PUSH
18638: LD_INT 22
18640: PUSH
18641: LD_INT 23
18643: PUSH
18644: LD_INT 24
18646: PUSH
18647: LD_INT 25
18649: PUSH
18650: LD_INT 26
18652: PUSH
18653: LD_INT 28
18655: PUSH
18656: LD_INT 30
18658: PUSH
18659: LD_INT 31
18661: PUSH
18662: LD_INT 32
18664: PUSH
18665: LD_INT 34
18667: PUSH
18668: LD_INT 36
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 101
18706: PUSH
18707: LD_INT 102
18709: PUSH
18710: LD_INT 103
18712: PUSH
18713: LD_INT 104
18715: PUSH
18716: LD_INT 105
18718: PUSH
18719: LD_INT 106
18721: PUSH
18722: LD_INT 107
18724: PUSH
18725: LD_INT 108
18727: PUSH
18728: LD_INT 109
18730: PUSH
18731: LD_INT 110
18733: PUSH
18734: LD_INT 111
18736: PUSH
18737: LD_INT 112
18739: PUSH
18740: LD_INT 114
18742: PUSH
18743: LD_INT 116
18745: PUSH
18746: LD_INT 117
18748: PUSH
18749: LD_INT 118
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: ST_TO_ADDR
18774: GO 20457
18776: LD_INT 12
18778: DOUBLE
18779: EQUAL
18780: IFTRUE 18784
18782: GO 19004
18784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18785: LD_ADDR_VAR 0 2
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 3
18798: PUSH
18799: LD_INT 4
18801: PUSH
18802: LD_INT 5
18804: PUSH
18805: LD_INT 6
18807: PUSH
18808: LD_INT 7
18810: PUSH
18811: LD_INT 8
18813: PUSH
18814: LD_INT 9
18816: PUSH
18817: LD_INT 10
18819: PUSH
18820: LD_INT 11
18822: PUSH
18823: LD_INT 12
18825: PUSH
18826: LD_INT 13
18828: PUSH
18829: LD_INT 14
18831: PUSH
18832: LD_INT 15
18834: PUSH
18835: LD_INT 16
18837: PUSH
18838: LD_INT 17
18840: PUSH
18841: LD_INT 18
18843: PUSH
18844: LD_INT 19
18846: PUSH
18847: LD_INT 20
18849: PUSH
18850: LD_INT 21
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_INT 23
18858: PUSH
18859: LD_INT 24
18861: PUSH
18862: LD_INT 25
18864: PUSH
18865: LD_INT 26
18867: PUSH
18868: LD_INT 27
18870: PUSH
18871: LD_INT 28
18873: PUSH
18874: LD_INT 30
18876: PUSH
18877: LD_INT 31
18879: PUSH
18880: LD_INT 32
18882: PUSH
18883: LD_INT 33
18885: PUSH
18886: LD_INT 34
18888: PUSH
18889: LD_INT 36
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 101
18930: PUSH
18931: LD_INT 102
18933: PUSH
18934: LD_INT 103
18936: PUSH
18937: LD_INT 104
18939: PUSH
18940: LD_INT 105
18942: PUSH
18943: LD_INT 106
18945: PUSH
18946: LD_INT 107
18948: PUSH
18949: LD_INT 108
18951: PUSH
18952: LD_INT 109
18954: PUSH
18955: LD_INT 110
18957: PUSH
18958: LD_INT 111
18960: PUSH
18961: LD_INT 112
18963: PUSH
18964: LD_INT 113
18966: PUSH
18967: LD_INT 114
18969: PUSH
18970: LD_INT 116
18972: PUSH
18973: LD_INT 117
18975: PUSH
18976: LD_INT 118
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: ST_TO_ADDR
19002: GO 20457
19004: LD_INT 13
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19220
19012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: LD_INT 4
19029: PUSH
19030: LD_INT 5
19032: PUSH
19033: LD_INT 8
19035: PUSH
19036: LD_INT 9
19038: PUSH
19039: LD_INT 10
19041: PUSH
19042: LD_INT 11
19044: PUSH
19045: LD_INT 12
19047: PUSH
19048: LD_INT 14
19050: PUSH
19051: LD_INT 15
19053: PUSH
19054: LD_INT 16
19056: PUSH
19057: LD_INT 17
19059: PUSH
19060: LD_INT 18
19062: PUSH
19063: LD_INT 19
19065: PUSH
19066: LD_INT 20
19068: PUSH
19069: LD_INT 21
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_INT 23
19077: PUSH
19078: LD_INT 24
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 26
19086: PUSH
19087: LD_INT 27
19089: PUSH
19090: LD_INT 28
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 31
19098: PUSH
19099: LD_INT 32
19101: PUSH
19102: LD_INT 33
19104: PUSH
19105: LD_INT 34
19107: PUSH
19108: LD_INT 36
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 101
19146: PUSH
19147: LD_INT 102
19149: PUSH
19150: LD_INT 103
19152: PUSH
19153: LD_INT 104
19155: PUSH
19156: LD_INT 105
19158: PUSH
19159: LD_INT 106
19161: PUSH
19162: LD_INT 107
19164: PUSH
19165: LD_INT 108
19167: PUSH
19168: LD_INT 109
19170: PUSH
19171: LD_INT 110
19173: PUSH
19174: LD_INT 111
19176: PUSH
19177: LD_INT 112
19179: PUSH
19180: LD_INT 113
19182: PUSH
19183: LD_INT 114
19185: PUSH
19186: LD_INT 116
19188: PUSH
19189: LD_INT 117
19191: PUSH
19192: LD_INT 118
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: ST_TO_ADDR
19218: GO 20457
19220: LD_INT 14
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19452
19228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: LD_INT 3
19242: PUSH
19243: LD_INT 4
19245: PUSH
19246: LD_INT 5
19248: PUSH
19249: LD_INT 6
19251: PUSH
19252: LD_INT 7
19254: PUSH
19255: LD_INT 8
19257: PUSH
19258: LD_INT 9
19260: PUSH
19261: LD_INT 10
19263: PUSH
19264: LD_INT 11
19266: PUSH
19267: LD_INT 12
19269: PUSH
19270: LD_INT 13
19272: PUSH
19273: LD_INT 14
19275: PUSH
19276: LD_INT 15
19278: PUSH
19279: LD_INT 16
19281: PUSH
19282: LD_INT 17
19284: PUSH
19285: LD_INT 18
19287: PUSH
19288: LD_INT 19
19290: PUSH
19291: LD_INT 20
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_INT 23
19302: PUSH
19303: LD_INT 24
19305: PUSH
19306: LD_INT 25
19308: PUSH
19309: LD_INT 26
19311: PUSH
19312: LD_INT 27
19314: PUSH
19315: LD_INT 28
19317: PUSH
19318: LD_INT 29
19320: PUSH
19321: LD_INT 30
19323: PUSH
19324: LD_INT 31
19326: PUSH
19327: LD_INT 32
19329: PUSH
19330: LD_INT 33
19332: PUSH
19333: LD_INT 34
19335: PUSH
19336: LD_INT 36
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 101
19378: PUSH
19379: LD_INT 102
19381: PUSH
19382: LD_INT 103
19384: PUSH
19385: LD_INT 104
19387: PUSH
19388: LD_INT 105
19390: PUSH
19391: LD_INT 106
19393: PUSH
19394: LD_INT 107
19396: PUSH
19397: LD_INT 108
19399: PUSH
19400: LD_INT 109
19402: PUSH
19403: LD_INT 110
19405: PUSH
19406: LD_INT 111
19408: PUSH
19409: LD_INT 112
19411: PUSH
19412: LD_INT 113
19414: PUSH
19415: LD_INT 114
19417: PUSH
19418: LD_INT 116
19420: PUSH
19421: LD_INT 117
19423: PUSH
19424: LD_INT 118
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 20457
19452: LD_INT 15
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19684
19460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: LD_INT 3
19474: PUSH
19475: LD_INT 4
19477: PUSH
19478: LD_INT 5
19480: PUSH
19481: LD_INT 6
19483: PUSH
19484: LD_INT 7
19486: PUSH
19487: LD_INT 8
19489: PUSH
19490: LD_INT 9
19492: PUSH
19493: LD_INT 10
19495: PUSH
19496: LD_INT 11
19498: PUSH
19499: LD_INT 12
19501: PUSH
19502: LD_INT 13
19504: PUSH
19505: LD_INT 14
19507: PUSH
19508: LD_INT 15
19510: PUSH
19511: LD_INT 16
19513: PUSH
19514: LD_INT 17
19516: PUSH
19517: LD_INT 18
19519: PUSH
19520: LD_INT 19
19522: PUSH
19523: LD_INT 20
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_INT 23
19534: PUSH
19535: LD_INT 24
19537: PUSH
19538: LD_INT 25
19540: PUSH
19541: LD_INT 26
19543: PUSH
19544: LD_INT 27
19546: PUSH
19547: LD_INT 28
19549: PUSH
19550: LD_INT 29
19552: PUSH
19553: LD_INT 30
19555: PUSH
19556: LD_INT 31
19558: PUSH
19559: LD_INT 32
19561: PUSH
19562: LD_INT 33
19564: PUSH
19565: LD_INT 34
19567: PUSH
19568: LD_INT 36
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 101
19610: PUSH
19611: LD_INT 102
19613: PUSH
19614: LD_INT 103
19616: PUSH
19617: LD_INT 104
19619: PUSH
19620: LD_INT 105
19622: PUSH
19623: LD_INT 106
19625: PUSH
19626: LD_INT 107
19628: PUSH
19629: LD_INT 108
19631: PUSH
19632: LD_INT 109
19634: PUSH
19635: LD_INT 110
19637: PUSH
19638: LD_INT 111
19640: PUSH
19641: LD_INT 112
19643: PUSH
19644: LD_INT 113
19646: PUSH
19647: LD_INT 114
19649: PUSH
19650: LD_INT 116
19652: PUSH
19653: LD_INT 117
19655: PUSH
19656: LD_INT 118
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 20457
19684: LD_INT 16
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19828
19692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19693: LD_ADDR_VAR 0 2
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 4
19703: PUSH
19704: LD_INT 5
19706: PUSH
19707: LD_INT 7
19709: PUSH
19710: LD_INT 11
19712: PUSH
19713: LD_INT 12
19715: PUSH
19716: LD_INT 15
19718: PUSH
19719: LD_INT 16
19721: PUSH
19722: LD_INT 20
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_INT 23
19733: PUSH
19734: LD_INT 25
19736: PUSH
19737: LD_INT 26
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 31
19745: PUSH
19746: LD_INT 32
19748: PUSH
19749: LD_INT 33
19751: PUSH
19752: LD_INT 34
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 101
19778: PUSH
19779: LD_INT 102
19781: PUSH
19782: LD_INT 103
19784: PUSH
19785: LD_INT 106
19787: PUSH
19788: LD_INT 108
19790: PUSH
19791: LD_INT 112
19793: PUSH
19794: LD_INT 113
19796: PUSH
19797: LD_INT 114
19799: PUSH
19800: LD_INT 116
19802: PUSH
19803: LD_INT 117
19805: PUSH
19806: LD_INT 118
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: ST_TO_ADDR
19826: GO 20457
19828: LD_INT 17
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 20060
19836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 3
19850: PUSH
19851: LD_INT 4
19853: PUSH
19854: LD_INT 5
19856: PUSH
19857: LD_INT 6
19859: PUSH
19860: LD_INT 7
19862: PUSH
19863: LD_INT 8
19865: PUSH
19866: LD_INT 9
19868: PUSH
19869: LD_INT 10
19871: PUSH
19872: LD_INT 11
19874: PUSH
19875: LD_INT 12
19877: PUSH
19878: LD_INT 13
19880: PUSH
19881: LD_INT 14
19883: PUSH
19884: LD_INT 15
19886: PUSH
19887: LD_INT 16
19889: PUSH
19890: LD_INT 17
19892: PUSH
19893: LD_INT 18
19895: PUSH
19896: LD_INT 19
19898: PUSH
19899: LD_INT 20
19901: PUSH
19902: LD_INT 21
19904: PUSH
19905: LD_INT 22
19907: PUSH
19908: LD_INT 23
19910: PUSH
19911: LD_INT 24
19913: PUSH
19914: LD_INT 25
19916: PUSH
19917: LD_INT 26
19919: PUSH
19920: LD_INT 27
19922: PUSH
19923: LD_INT 28
19925: PUSH
19926: LD_INT 29
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 31
19934: PUSH
19935: LD_INT 32
19937: PUSH
19938: LD_INT 33
19940: PUSH
19941: LD_INT 34
19943: PUSH
19944: LD_INT 36
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 101
19986: PUSH
19987: LD_INT 102
19989: PUSH
19990: LD_INT 103
19992: PUSH
19993: LD_INT 104
19995: PUSH
19996: LD_INT 105
19998: PUSH
19999: LD_INT 106
20001: PUSH
20002: LD_INT 107
20004: PUSH
20005: LD_INT 108
20007: PUSH
20008: LD_INT 109
20010: PUSH
20011: LD_INT 110
20013: PUSH
20014: LD_INT 111
20016: PUSH
20017: LD_INT 112
20019: PUSH
20020: LD_INT 113
20022: PUSH
20023: LD_INT 114
20025: PUSH
20026: LD_INT 116
20028: PUSH
20029: LD_INT 117
20031: PUSH
20032: LD_INT 118
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: ST_TO_ADDR
20058: GO 20457
20060: LD_INT 18
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20216
20068: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20069: LD_ADDR_VAR 0 2
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: LD_INT 4
20079: PUSH
20080: LD_INT 5
20082: PUSH
20083: LD_INT 7
20085: PUSH
20086: LD_INT 11
20088: PUSH
20089: LD_INT 12
20091: PUSH
20092: LD_INT 15
20094: PUSH
20095: LD_INT 16
20097: PUSH
20098: LD_INT 20
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_INT 23
20109: PUSH
20110: LD_INT 25
20112: PUSH
20113: LD_INT 26
20115: PUSH
20116: LD_INT 30
20118: PUSH
20119: LD_INT 31
20121: PUSH
20122: LD_INT 32
20124: PUSH
20125: LD_INT 33
20127: PUSH
20128: LD_INT 34
20130: PUSH
20131: LD_INT 35
20133: PUSH
20134: LD_INT 36
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 106
20171: PUSH
20172: LD_INT 108
20174: PUSH
20175: LD_INT 112
20177: PUSH
20178: LD_INT 113
20180: PUSH
20181: LD_INT 114
20183: PUSH
20184: LD_INT 115
20186: PUSH
20187: LD_INT 116
20189: PUSH
20190: LD_INT 117
20192: PUSH
20193: LD_INT 118
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: ST_TO_ADDR
20214: GO 20457
20216: LD_INT 19
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20456
20224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20225: LD_ADDR_VAR 0 2
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_INT 4
20241: PUSH
20242: LD_INT 5
20244: PUSH
20245: LD_INT 6
20247: PUSH
20248: LD_INT 7
20250: PUSH
20251: LD_INT 8
20253: PUSH
20254: LD_INT 9
20256: PUSH
20257: LD_INT 10
20259: PUSH
20260: LD_INT 11
20262: PUSH
20263: LD_INT 12
20265: PUSH
20266: LD_INT 13
20268: PUSH
20269: LD_INT 14
20271: PUSH
20272: LD_INT 15
20274: PUSH
20275: LD_INT 16
20277: PUSH
20278: LD_INT 17
20280: PUSH
20281: LD_INT 18
20283: PUSH
20284: LD_INT 19
20286: PUSH
20287: LD_INT 20
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 22
20295: PUSH
20296: LD_INT 23
20298: PUSH
20299: LD_INT 24
20301: PUSH
20302: LD_INT 25
20304: PUSH
20305: LD_INT 26
20307: PUSH
20308: LD_INT 27
20310: PUSH
20311: LD_INT 28
20313: PUSH
20314: LD_INT 29
20316: PUSH
20317: LD_INT 30
20319: PUSH
20320: LD_INT 31
20322: PUSH
20323: LD_INT 32
20325: PUSH
20326: LD_INT 33
20328: PUSH
20329: LD_INT 34
20331: PUSH
20332: LD_INT 35
20334: PUSH
20335: LD_INT 36
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 101
20378: PUSH
20379: LD_INT 102
20381: PUSH
20382: LD_INT 103
20384: PUSH
20385: LD_INT 104
20387: PUSH
20388: LD_INT 105
20390: PUSH
20391: LD_INT 106
20393: PUSH
20394: LD_INT 107
20396: PUSH
20397: LD_INT 108
20399: PUSH
20400: LD_INT 109
20402: PUSH
20403: LD_INT 110
20405: PUSH
20406: LD_INT 111
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 113
20414: PUSH
20415: LD_INT 114
20417: PUSH
20418: LD_INT 115
20420: PUSH
20421: LD_INT 116
20423: PUSH
20424: LD_INT 117
20426: PUSH
20427: LD_INT 118
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: ST_TO_ADDR
20454: GO 20457
20456: POP
// end else
20457: GO 20688
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: LD_INT 4
20475: PUSH
20476: LD_INT 5
20478: PUSH
20479: LD_INT 6
20481: PUSH
20482: LD_INT 7
20484: PUSH
20485: LD_INT 8
20487: PUSH
20488: LD_INT 9
20490: PUSH
20491: LD_INT 10
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: LD_INT 13
20502: PUSH
20503: LD_INT 14
20505: PUSH
20506: LD_INT 15
20508: PUSH
20509: LD_INT 16
20511: PUSH
20512: LD_INT 17
20514: PUSH
20515: LD_INT 18
20517: PUSH
20518: LD_INT 19
20520: PUSH
20521: LD_INT 20
20523: PUSH
20524: LD_INT 21
20526: PUSH
20527: LD_INT 22
20529: PUSH
20530: LD_INT 23
20532: PUSH
20533: LD_INT 24
20535: PUSH
20536: LD_INT 25
20538: PUSH
20539: LD_INT 26
20541: PUSH
20542: LD_INT 27
20544: PUSH
20545: LD_INT 28
20547: PUSH
20548: LD_INT 29
20550: PUSH
20551: LD_INT 30
20553: PUSH
20554: LD_INT 31
20556: PUSH
20557: LD_INT 32
20559: PUSH
20560: LD_INT 33
20562: PUSH
20563: LD_INT 34
20565: PUSH
20566: LD_INT 35
20568: PUSH
20569: LD_INT 36
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 101
20612: PUSH
20613: LD_INT 102
20615: PUSH
20616: LD_INT 103
20618: PUSH
20619: LD_INT 104
20621: PUSH
20622: LD_INT 105
20624: PUSH
20625: LD_INT 106
20627: PUSH
20628: LD_INT 107
20630: PUSH
20631: LD_INT 108
20633: PUSH
20634: LD_INT 109
20636: PUSH
20637: LD_INT 110
20639: PUSH
20640: LD_INT 111
20642: PUSH
20643: LD_INT 112
20645: PUSH
20646: LD_INT 113
20648: PUSH
20649: LD_INT 114
20651: PUSH
20652: LD_INT 115
20654: PUSH
20655: LD_INT 116
20657: PUSH
20658: LD_INT 117
20660: PUSH
20661: LD_INT 118
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: ST_TO_ADDR
// if result then
20688: LD_VAR 0 2
20692: IFFALSE 21478
// begin normal :=  ;
20694: LD_ADDR_VAR 0 5
20698: PUSH
20699: LD_STRING 
20701: ST_TO_ADDR
// hardcore :=  ;
20702: LD_ADDR_VAR 0 6
20706: PUSH
20707: LD_STRING 
20709: ST_TO_ADDR
// active :=  ;
20710: LD_ADDR_VAR 0 7
20714: PUSH
20715: LD_STRING 
20717: ST_TO_ADDR
// for i = 1 to normalCounter do
20718: LD_ADDR_VAR 0 8
20722: PUSH
20723: DOUBLE
20724: LD_INT 1
20726: DEC
20727: ST_TO_ADDR
20728: LD_EXP 48
20732: PUSH
20733: FOR_TO
20734: IFFALSE 20835
// begin tmp := 0 ;
20736: LD_ADDR_VAR 0 3
20740: PUSH
20741: LD_STRING 0
20743: ST_TO_ADDR
// if result [ 1 ] then
20744: LD_VAR 0 2
20748: PUSH
20749: LD_INT 1
20751: ARRAY
20752: IFFALSE 20817
// if result [ 1 ] [ 1 ] = i then
20754: LD_VAR 0 2
20758: PUSH
20759: LD_INT 1
20761: ARRAY
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PUSH
20767: LD_VAR 0 8
20771: EQUAL
20772: IFFALSE 20817
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20774: LD_ADDR_VAR 0 2
20778: PUSH
20779: LD_VAR 0 2
20783: PPUSH
20784: LD_INT 1
20786: PPUSH
20787: LD_VAR 0 2
20791: PUSH
20792: LD_INT 1
20794: ARRAY
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 3
20803: PPUSH
20804: CALL_OW 1
20808: ST_TO_ADDR
// tmp := 1 ;
20809: LD_ADDR_VAR 0 3
20813: PUSH
20814: LD_STRING 1
20816: ST_TO_ADDR
// end ; normal := normal & tmp ;
20817: LD_ADDR_VAR 0 5
20821: PUSH
20822: LD_VAR 0 5
20826: PUSH
20827: LD_VAR 0 3
20831: STR
20832: ST_TO_ADDR
// end ;
20833: GO 20733
20835: POP
20836: POP
// for i = 1 to hardcoreCounter do
20837: LD_ADDR_VAR 0 8
20841: PUSH
20842: DOUBLE
20843: LD_INT 1
20845: DEC
20846: ST_TO_ADDR
20847: LD_EXP 49
20851: PUSH
20852: FOR_TO
20853: IFFALSE 20958
// begin tmp := 0 ;
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_STRING 0
20862: ST_TO_ADDR
// if result [ 2 ] then
20863: LD_VAR 0 2
20867: PUSH
20868: LD_INT 2
20870: ARRAY
20871: IFFALSE 20940
// if result [ 2 ] [ 1 ] = 100 + i then
20873: LD_VAR 0 2
20877: PUSH
20878: LD_INT 2
20880: ARRAY
20881: PUSH
20882: LD_INT 1
20884: ARRAY
20885: PUSH
20886: LD_INT 100
20888: PUSH
20889: LD_VAR 0 8
20893: PLUS
20894: EQUAL
20895: IFFALSE 20940
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: LD_VAR 0 2
20906: PPUSH
20907: LD_INT 2
20909: PPUSH
20910: LD_VAR 0 2
20914: PUSH
20915: LD_INT 2
20917: ARRAY
20918: PPUSH
20919: LD_INT 1
20921: PPUSH
20922: CALL_OW 3
20926: PPUSH
20927: CALL_OW 1
20931: ST_TO_ADDR
// tmp := 1 ;
20932: LD_ADDR_VAR 0 3
20936: PUSH
20937: LD_STRING 1
20939: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20940: LD_ADDR_VAR 0 6
20944: PUSH
20945: LD_VAR 0 6
20949: PUSH
20950: LD_VAR 0 3
20954: STR
20955: ST_TO_ADDR
// end ;
20956: GO 20852
20958: POP
20959: POP
// if isGameLoad then
20960: LD_VAR 0 1
20964: IFFALSE 21439
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20966: LD_ADDR_VAR 0 4
20970: PUSH
20971: LD_EXP 52
20975: PUSH
20976: LD_EXP 51
20980: PUSH
20981: LD_EXP 53
20985: PUSH
20986: LD_EXP 50
20990: PUSH
20991: LD_EXP 54
20995: PUSH
20996: LD_EXP 55
21000: PUSH
21001: LD_EXP 56
21005: PUSH
21006: LD_EXP 57
21010: PUSH
21011: LD_EXP 58
21015: PUSH
21016: LD_EXP 59
21020: PUSH
21021: LD_EXP 60
21025: PUSH
21026: LD_EXP 61
21030: PUSH
21031: LD_EXP 62
21035: PUSH
21036: LD_EXP 63
21040: PUSH
21041: LD_EXP 71
21045: PUSH
21046: LD_EXP 72
21050: PUSH
21051: LD_EXP 73
21055: PUSH
21056: LD_EXP 74
21060: PUSH
21061: LD_EXP 76
21065: PUSH
21066: LD_EXP 77
21070: PUSH
21071: LD_EXP 78
21075: PUSH
21076: LD_EXP 81
21080: PUSH
21081: LD_EXP 83
21085: PUSH
21086: LD_EXP 84
21090: PUSH
21091: LD_EXP 85
21095: PUSH
21096: LD_EXP 87
21100: PUSH
21101: LD_EXP 88
21105: PUSH
21106: LD_EXP 91
21110: PUSH
21111: LD_EXP 92
21115: PUSH
21116: LD_EXP 93
21120: PUSH
21121: LD_EXP 94
21125: PUSH
21126: LD_EXP 95
21130: PUSH
21131: LD_EXP 96
21135: PUSH
21136: LD_EXP 97
21140: PUSH
21141: LD_EXP 98
21145: PUSH
21146: LD_EXP 99
21150: PUSH
21151: LD_EXP 64
21155: PUSH
21156: LD_EXP 65
21160: PUSH
21161: LD_EXP 68
21165: PUSH
21166: LD_EXP 69
21170: PUSH
21171: LD_EXP 70
21175: PUSH
21176: LD_EXP 66
21180: PUSH
21181: LD_EXP 67
21185: PUSH
21186: LD_EXP 75
21190: PUSH
21191: LD_EXP 79
21195: PUSH
21196: LD_EXP 80
21200: PUSH
21201: LD_EXP 82
21205: PUSH
21206: LD_EXP 86
21210: PUSH
21211: LD_EXP 89
21215: PUSH
21216: LD_EXP 90
21220: PUSH
21221: LD_EXP 100
21225: PUSH
21226: LD_EXP 101
21230: PUSH
21231: LD_EXP 102
21235: PUSH
21236: LD_EXP 103
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
// tmp :=  ;
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_STRING 
21304: ST_TO_ADDR
// for i = 1 to normalCounter do
21305: LD_ADDR_VAR 0 8
21309: PUSH
21310: DOUBLE
21311: LD_INT 1
21313: DEC
21314: ST_TO_ADDR
21315: LD_EXP 48
21319: PUSH
21320: FOR_TO
21321: IFFALSE 21357
// begin if flags [ i ] then
21323: LD_VAR 0 4
21327: PUSH
21328: LD_VAR 0 8
21332: ARRAY
21333: IFFALSE 21355
// tmp := tmp & i & ; ;
21335: LD_ADDR_VAR 0 3
21339: PUSH
21340: LD_VAR 0 3
21344: PUSH
21345: LD_VAR 0 8
21349: STR
21350: PUSH
21351: LD_STRING ;
21353: STR
21354: ST_TO_ADDR
// end ;
21355: GO 21320
21357: POP
21358: POP
// for i = 1 to hardcoreCounter do
21359: LD_ADDR_VAR 0 8
21363: PUSH
21364: DOUBLE
21365: LD_INT 1
21367: DEC
21368: ST_TO_ADDR
21369: LD_EXP 49
21373: PUSH
21374: FOR_TO
21375: IFFALSE 21421
// begin if flags [ normalCounter + i ] then
21377: LD_VAR 0 4
21381: PUSH
21382: LD_EXP 48
21386: PUSH
21387: LD_VAR 0 8
21391: PLUS
21392: ARRAY
21393: IFFALSE 21419
// tmp := tmp & ( 100 + i ) & ; ;
21395: LD_ADDR_VAR 0 3
21399: PUSH
21400: LD_VAR 0 3
21404: PUSH
21405: LD_INT 100
21407: PUSH
21408: LD_VAR 0 8
21412: PLUS
21413: STR
21414: PUSH
21415: LD_STRING ;
21417: STR
21418: ST_TO_ADDR
// end ;
21419: GO 21374
21421: POP
21422: POP
// if tmp then
21423: LD_VAR 0 3
21427: IFFALSE 21439
// active := tmp ;
21429: LD_ADDR_VAR 0 7
21433: PUSH
21434: LD_VAR 0 3
21438: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21439: LD_STRING getStreamItemsFromMission("
21441: PUSH
21442: LD_VAR 0 5
21446: STR
21447: PUSH
21448: LD_STRING ","
21450: STR
21451: PUSH
21452: LD_VAR 0 6
21456: STR
21457: PUSH
21458: LD_STRING ","
21460: STR
21461: PUSH
21462: LD_VAR 0 7
21466: STR
21467: PUSH
21468: LD_STRING ")
21470: STR
21471: PPUSH
21472: CALL_OW 559
// end else
21476: GO 21485
// ToLua ( getStreamItemsFromMission("","","") ) ;
21478: LD_STRING getStreamItemsFromMission("","","")
21480: PPUSH
21481: CALL_OW 559
// end ;
21485: LD_VAR 0 2
21489: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21490: LD_EXP 47
21494: PUSH
21495: LD_EXP 52
21499: AND
21500: IFFALSE 21624
21502: GO 21504
21504: DISABLE
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
// begin enable ;
21509: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21510: LD_ADDR_VAR 0 2
21514: PUSH
21515: LD_INT 22
21517: PUSH
21518: LD_OWVAR 2
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 34
21532: PUSH
21533: LD_INT 7
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 34
21542: PUSH
21543: LD_INT 45
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 34
21552: PUSH
21553: LD_INT 28
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 34
21562: PUSH
21563: LD_INT 47
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PPUSH
21581: CALL_OW 69
21585: ST_TO_ADDR
// if not tmp then
21586: LD_VAR 0 2
21590: NOT
21591: IFFALSE 21595
// exit ;
21593: GO 21624
// for i in tmp do
21595: LD_ADDR_VAR 0 1
21599: PUSH
21600: LD_VAR 0 2
21604: PUSH
21605: FOR_IN
21606: IFFALSE 21622
// begin SetLives ( i , 0 ) ;
21608: LD_VAR 0 1
21612: PPUSH
21613: LD_INT 0
21615: PPUSH
21616: CALL_OW 234
// end ;
21620: GO 21605
21622: POP
21623: POP
// end ;
21624: PPOPN 2
21626: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21627: LD_EXP 47
21631: PUSH
21632: LD_EXP 53
21636: AND
21637: IFFALSE 21721
21639: GO 21641
21641: DISABLE
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
// begin enable ;
21646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 32
21666: PUSH
21667: LD_INT 3
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 2
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21721
// for i in tmp do
21692: LD_ADDR_VAR 0 1
21696: PUSH
21697: LD_VAR 0 2
21701: PUSH
21702: FOR_IN
21703: IFFALSE 21719
// begin SetLives ( i , 0 ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_INT 0
21712: PPUSH
21713: CALL_OW 234
// end ;
21717: GO 21702
21719: POP
21720: POP
// end ;
21721: PPOPN 2
21723: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21724: LD_EXP 47
21728: PUSH
21729: LD_EXP 50
21733: AND
21734: IFFALSE 21827
21736: GO 21738
21738: DISABLE
21739: LD_INT 0
21741: PPUSH
// begin enable ;
21742: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21743: LD_ADDR_VAR 0 1
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 5
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 9
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 25
21785: PUSH
21786: LD_INT 8
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 69
21807: PUSH
21808: FOR_IN
21809: IFFALSE 21825
// begin SetClass ( i , 1 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_INT 1
21818: PPUSH
21819: CALL_OW 336
// end ;
21823: GO 21808
21825: POP
21826: POP
// end ;
21827: PPOPN 1
21829: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21830: LD_EXP 47
21834: PUSH
21835: LD_EXP 51
21839: AND
21840: PUSH
21841: LD_OWVAR 65
21845: PUSH
21846: LD_INT 7
21848: LESS
21849: AND
21850: IFFALSE 21864
21852: GO 21854
21854: DISABLE
// begin enable ;
21855: ENABLE
// game_speed := 7 ;
21856: LD_ADDR_OWVAR 65
21860: PUSH
21861: LD_INT 7
21863: ST_TO_ADDR
// end ;
21864: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21865: LD_EXP 47
21869: PUSH
21870: LD_EXP 54
21874: AND
21875: IFFALSE 22077
21877: GO 21879
21879: DISABLE
21880: LD_INT 0
21882: PPUSH
21883: PPUSH
21884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21885: LD_ADDR_VAR 0 3
21889: PUSH
21890: LD_INT 81
21892: PUSH
21893: LD_OWVAR 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 21
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: ST_TO_ADDR
// if not tmp then
21921: LD_VAR 0 3
21925: NOT
21926: IFFALSE 21930
// exit ;
21928: GO 22077
// if tmp > 5 then
21930: LD_VAR 0 3
21934: PUSH
21935: LD_INT 5
21937: GREATER
21938: IFFALSE 21950
// k := 5 else
21940: LD_ADDR_VAR 0 2
21944: PUSH
21945: LD_INT 5
21947: ST_TO_ADDR
21948: GO 21960
// k := tmp ;
21950: LD_ADDR_VAR 0 2
21954: PUSH
21955: LD_VAR 0 3
21959: ST_TO_ADDR
// for i := 1 to k do
21960: LD_ADDR_VAR 0 1
21964: PUSH
21965: DOUBLE
21966: LD_INT 1
21968: DEC
21969: ST_TO_ADDR
21970: LD_VAR 0 2
21974: PUSH
21975: FOR_TO
21976: IFFALSE 22075
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21978: LD_VAR 0 3
21982: PUSH
21983: LD_VAR 0 1
21987: ARRAY
21988: PPUSH
21989: LD_VAR 0 1
21993: PUSH
21994: LD_INT 4
21996: MOD
21997: PUSH
21998: LD_INT 1
22000: PLUS
22001: PPUSH
22002: CALL_OW 259
22006: PUSH
22007: LD_INT 10
22009: LESS
22010: IFFALSE 22073
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22012: LD_VAR 0 3
22016: PUSH
22017: LD_VAR 0 1
22021: ARRAY
22022: PPUSH
22023: LD_VAR 0 1
22027: PUSH
22028: LD_INT 4
22030: MOD
22031: PUSH
22032: LD_INT 1
22034: PLUS
22035: PPUSH
22036: LD_VAR 0 3
22040: PUSH
22041: LD_VAR 0 1
22045: ARRAY
22046: PPUSH
22047: LD_VAR 0 1
22051: PUSH
22052: LD_INT 4
22054: MOD
22055: PUSH
22056: LD_INT 1
22058: PLUS
22059: PPUSH
22060: CALL_OW 259
22064: PUSH
22065: LD_INT 1
22067: PLUS
22068: PPUSH
22069: CALL_OW 237
22073: GO 21975
22075: POP
22076: POP
// end ;
22077: PPOPN 3
22079: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22080: LD_EXP 47
22084: PUSH
22085: LD_EXP 55
22089: AND
22090: IFFALSE 22110
22092: GO 22094
22094: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22095: LD_INT 4
22097: PPUSH
22098: LD_OWVAR 2
22102: PPUSH
22103: LD_INT 0
22105: PPUSH
22106: CALL_OW 324
22110: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22111: LD_EXP 47
22115: PUSH
22116: LD_EXP 84
22120: AND
22121: IFFALSE 22141
22123: GO 22125
22125: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22126: LD_INT 19
22128: PPUSH
22129: LD_OWVAR 2
22133: PPUSH
22134: LD_INT 0
22136: PPUSH
22137: CALL_OW 324
22141: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22142: LD_EXP 47
22146: PUSH
22147: LD_EXP 56
22151: AND
22152: IFFALSE 22254
22154: GO 22156
22156: DISABLE
22157: LD_INT 0
22159: PPUSH
22160: PPUSH
// begin enable ;
22161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_OWVAR 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 34
22184: PUSH
22185: LD_INT 11
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 34
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PPUSH
22211: CALL_OW 69
22215: ST_TO_ADDR
// if not tmp then
22216: LD_VAR 0 2
22220: NOT
22221: IFFALSE 22225
// exit ;
22223: GO 22254
// for i in tmp do
22225: LD_ADDR_VAR 0 1
22229: PUSH
22230: LD_VAR 0 2
22234: PUSH
22235: FOR_IN
22236: IFFALSE 22252
// begin SetLives ( i , 0 ) ;
22238: LD_VAR 0 1
22242: PPUSH
22243: LD_INT 0
22245: PPUSH
22246: CALL_OW 234
// end ;
22250: GO 22235
22252: POP
22253: POP
// end ;
22254: PPOPN 2
22256: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22257: LD_EXP 47
22261: PUSH
22262: LD_EXP 57
22266: AND
22267: IFFALSE 22287
22269: GO 22271
22271: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22272: LD_INT 32
22274: PPUSH
22275: LD_OWVAR 2
22279: PPUSH
22280: LD_INT 0
22282: PPUSH
22283: CALL_OW 324
22287: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22288: LD_EXP 47
22292: PUSH
22293: LD_EXP 58
22297: AND
22298: IFFALSE 22479
22300: GO 22302
22302: DISABLE
22303: LD_INT 0
22305: PPUSH
22306: PPUSH
22307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22308: LD_ADDR_VAR 0 2
22312: PUSH
22313: LD_INT 22
22315: PUSH
22316: LD_OWVAR 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 33
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: ST_TO_ADDR
// if not tmp then
22344: LD_VAR 0 2
22348: NOT
22349: IFFALSE 22353
// exit ;
22351: GO 22479
// side := 0 ;
22353: LD_ADDR_VAR 0 3
22357: PUSH
22358: LD_INT 0
22360: ST_TO_ADDR
// for i := 1 to 8 do
22361: LD_ADDR_VAR 0 1
22365: PUSH
22366: DOUBLE
22367: LD_INT 1
22369: DEC
22370: ST_TO_ADDR
22371: LD_INT 8
22373: PUSH
22374: FOR_TO
22375: IFFALSE 22423
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22377: LD_OWVAR 2
22381: PUSH
22382: LD_VAR 0 1
22386: NONEQUAL
22387: PUSH
22388: LD_OWVAR 2
22392: PPUSH
22393: LD_VAR 0 1
22397: PPUSH
22398: CALL_OW 81
22402: PUSH
22403: LD_INT 2
22405: EQUAL
22406: AND
22407: IFFALSE 22421
// begin side := i ;
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_VAR 0 1
22418: ST_TO_ADDR
// break ;
22419: GO 22423
// end ;
22421: GO 22374
22423: POP
22424: POP
// if not side then
22425: LD_VAR 0 3
22429: NOT
22430: IFFALSE 22434
// exit ;
22432: GO 22479
// for i := 1 to tmp do
22434: LD_ADDR_VAR 0 1
22438: PUSH
22439: DOUBLE
22440: LD_INT 1
22442: DEC
22443: ST_TO_ADDR
22444: LD_VAR 0 2
22448: PUSH
22449: FOR_TO
22450: IFFALSE 22477
// if Prob ( 60 ) then
22452: LD_INT 60
22454: PPUSH
22455: CALL_OW 13
22459: IFFALSE 22475
// SetSide ( i , side ) ;
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_VAR 0 3
22470: PPUSH
22471: CALL_OW 235
22475: GO 22449
22477: POP
22478: POP
// end ;
22479: PPOPN 3
22481: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22482: LD_EXP 47
22486: PUSH
22487: LD_EXP 60
22491: AND
22492: IFFALSE 22611
22494: GO 22496
22496: DISABLE
22497: LD_INT 0
22499: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_OWVAR 2
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 21
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 23
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: PPUSH
22549: CALL_OW 69
22553: PUSH
22554: FOR_IN
22555: IFFALSE 22609
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22557: LD_VAR 0 1
22561: PPUSH
22562: CALL_OW 257
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 3
22575: PUSH
22576: LD_INT 4
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: IN
22585: IFFALSE 22607
// SetClass ( un , rand ( 1 , 4 ) ) ;
22587: LD_VAR 0 1
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: LD_INT 4
22597: PPUSH
22598: CALL_OW 12
22602: PPUSH
22603: CALL_OW 336
22607: GO 22554
22609: POP
22610: POP
// end ;
22611: PPOPN 1
22613: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22614: LD_EXP 47
22618: PUSH
22619: LD_EXP 59
22623: AND
22624: IFFALSE 22703
22626: GO 22628
22628: DISABLE
22629: LD_INT 0
22631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22632: LD_ADDR_VAR 0 1
22636: PUSH
22637: LD_INT 22
22639: PUSH
22640: LD_OWVAR 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 21
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL_OW 69
22667: ST_TO_ADDR
// if not tmp then
22668: LD_VAR 0 1
22672: NOT
22673: IFFALSE 22677
// exit ;
22675: GO 22703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22677: LD_VAR 0 1
22681: PUSH
22682: LD_INT 1
22684: PPUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 12
22694: ARRAY
22695: PPUSH
22696: LD_INT 100
22698: PPUSH
22699: CALL_OW 234
// end ;
22703: PPOPN 1
22705: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22706: LD_EXP 47
22710: PUSH
22711: LD_EXP 61
22715: AND
22716: IFFALSE 22814
22718: GO 22720
22720: DISABLE
22721: LD_INT 0
22723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22724: LD_ADDR_VAR 0 1
22728: PUSH
22729: LD_INT 22
22731: PUSH
22732: LD_OWVAR 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 69
22759: ST_TO_ADDR
// if not tmp then
22760: LD_VAR 0 1
22764: NOT
22765: IFFALSE 22769
// exit ;
22767: GO 22814
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22769: LD_VAR 0 1
22773: PUSH
22774: LD_INT 1
22776: PPUSH
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 12
22786: ARRAY
22787: PPUSH
22788: LD_INT 1
22790: PPUSH
22791: LD_INT 4
22793: PPUSH
22794: CALL_OW 12
22798: PPUSH
22799: LD_INT 3000
22801: PPUSH
22802: LD_INT 9000
22804: PPUSH
22805: CALL_OW 12
22809: PPUSH
22810: CALL_OW 492
// end ;
22814: PPOPN 1
22816: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22817: LD_EXP 47
22821: PUSH
22822: LD_EXP 62
22826: AND
22827: IFFALSE 22847
22829: GO 22831
22831: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22832: LD_INT 1
22834: PPUSH
22835: LD_OWVAR 2
22839: PPUSH
22840: LD_INT 0
22842: PPUSH
22843: CALL_OW 324
22847: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22848: LD_EXP 47
22852: PUSH
22853: LD_EXP 63
22857: AND
22858: IFFALSE 22941
22860: GO 22862
22862: DISABLE
22863: LD_INT 0
22865: PPUSH
22866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 22
22874: PUSH
22875: LD_OWVAR 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 21
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PPUSH
22898: CALL_OW 69
22902: ST_TO_ADDR
// if not tmp then
22903: LD_VAR 0 2
22907: NOT
22908: IFFALSE 22912
// exit ;
22910: GO 22941
// for i in tmp do
22912: LD_ADDR_VAR 0 1
22916: PUSH
22917: LD_VAR 0 2
22921: PUSH
22922: FOR_IN
22923: IFFALSE 22939
// SetBLevel ( i , 10 ) ;
22925: LD_VAR 0 1
22929: PPUSH
22930: LD_INT 10
22932: PPUSH
22933: CALL_OW 241
22937: GO 22922
22939: POP
22940: POP
// end ;
22941: PPOPN 2
22943: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22944: LD_EXP 47
22948: PUSH
22949: LD_EXP 64
22953: AND
22954: IFFALSE 23065
22956: GO 22958
22958: DISABLE
22959: LD_INT 0
22961: PPUSH
22962: PPUSH
22963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22964: LD_ADDR_VAR 0 3
22968: PUSH
22969: LD_INT 22
22971: PUSH
22972: LD_OWVAR 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 25
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PPUSH
22995: CALL_OW 69
22999: ST_TO_ADDR
// if not tmp then
23000: LD_VAR 0 3
23004: NOT
23005: IFFALSE 23009
// exit ;
23007: GO 23065
// un := tmp [ rand ( 1 , tmp ) ] ;
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_VAR 0 3
23018: PUSH
23019: LD_INT 1
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: CALL_OW 12
23031: ARRAY
23032: ST_TO_ADDR
// if Crawls ( un ) then
23033: LD_VAR 0 2
23037: PPUSH
23038: CALL_OW 318
23042: IFFALSE 23053
// ComWalk ( un ) ;
23044: LD_VAR 0 2
23048: PPUSH
23049: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23053: LD_VAR 0 2
23057: PPUSH
23058: LD_INT 5
23060: PPUSH
23061: CALL_OW 336
// end ;
23065: PPOPN 3
23067: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23068: LD_EXP 47
23072: PUSH
23073: LD_EXP 65
23077: AND
23078: PUSH
23079: LD_OWVAR 67
23083: PUSH
23084: LD_INT 4
23086: LESS
23087: AND
23088: IFFALSE 23107
23090: GO 23092
23092: DISABLE
// begin Difficulty := Difficulty + 1 ;
23093: LD_ADDR_OWVAR 67
23097: PUSH
23098: LD_OWVAR 67
23102: PUSH
23103: LD_INT 1
23105: PLUS
23106: ST_TO_ADDR
// end ;
23107: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23108: LD_EXP 47
23112: PUSH
23113: LD_EXP 66
23117: AND
23118: IFFALSE 23221
23120: GO 23122
23122: DISABLE
23123: LD_INT 0
23125: PPUSH
// begin for i := 1 to 5 do
23126: LD_ADDR_VAR 0 1
23130: PUSH
23131: DOUBLE
23132: LD_INT 1
23134: DEC
23135: ST_TO_ADDR
23136: LD_INT 5
23138: PUSH
23139: FOR_TO
23140: IFFALSE 23219
// begin uc_nation := nation_nature ;
23142: LD_ADDR_OWVAR 21
23146: PUSH
23147: LD_INT 0
23149: ST_TO_ADDR
// uc_side := 0 ;
23150: LD_ADDR_OWVAR 20
23154: PUSH
23155: LD_INT 0
23157: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23158: LD_ADDR_OWVAR 29
23162: PUSH
23163: LD_INT 12
23165: PUSH
23166: LD_INT 12
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: ST_TO_ADDR
// hc_agressivity := 20 ;
23173: LD_ADDR_OWVAR 35
23177: PUSH
23178: LD_INT 20
23180: ST_TO_ADDR
// hc_class := class_tiger ;
23181: LD_ADDR_OWVAR 28
23185: PUSH
23186: LD_INT 14
23188: ST_TO_ADDR
// hc_gallery :=  ;
23189: LD_ADDR_OWVAR 33
23193: PUSH
23194: LD_STRING 
23196: ST_TO_ADDR
// hc_name :=  ;
23197: LD_ADDR_OWVAR 26
23201: PUSH
23202: LD_STRING 
23204: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23205: CALL_OW 44
23209: PPUSH
23210: LD_INT 0
23212: PPUSH
23213: CALL_OW 51
// end ;
23217: GO 23139
23219: POP
23220: POP
// end ;
23221: PPOPN 1
23223: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23224: LD_EXP 47
23228: PUSH
23229: LD_EXP 67
23233: AND
23234: IFFALSE 23243
23236: GO 23238
23238: DISABLE
// StreamSibBomb ;
23239: CALL 23244 0 0
23243: END
// export function StreamSibBomb ; var i , x , y ; begin
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
// result := false ;
23250: LD_ADDR_VAR 0 1
23254: PUSH
23255: LD_INT 0
23257: ST_TO_ADDR
// for i := 1 to 16 do
23258: LD_ADDR_VAR 0 2
23262: PUSH
23263: DOUBLE
23264: LD_INT 1
23266: DEC
23267: ST_TO_ADDR
23268: LD_INT 16
23270: PUSH
23271: FOR_TO
23272: IFFALSE 23471
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_INT 10
23281: PUSH
23282: LD_INT 20
23284: PUSH
23285: LD_INT 30
23287: PUSH
23288: LD_INT 40
23290: PUSH
23291: LD_INT 50
23293: PUSH
23294: LD_INT 60
23296: PUSH
23297: LD_INT 70
23299: PUSH
23300: LD_INT 80
23302: PUSH
23303: LD_INT 90
23305: PUSH
23306: LD_INT 100
23308: PUSH
23309: LD_INT 110
23311: PUSH
23312: LD_INT 120
23314: PUSH
23315: LD_INT 130
23317: PUSH
23318: LD_INT 140
23320: PUSH
23321: LD_INT 150
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: PPUSH
23344: LD_INT 15
23346: PPUSH
23347: CALL_OW 12
23351: ARRAY
23352: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23353: LD_ADDR_VAR 0 4
23357: PUSH
23358: LD_INT 10
23360: PUSH
23361: LD_INT 20
23363: PUSH
23364: LD_INT 30
23366: PUSH
23367: LD_INT 40
23369: PUSH
23370: LD_INT 50
23372: PUSH
23373: LD_INT 60
23375: PUSH
23376: LD_INT 70
23378: PUSH
23379: LD_INT 80
23381: PUSH
23382: LD_INT 90
23384: PUSH
23385: LD_INT 100
23387: PUSH
23388: LD_INT 110
23390: PUSH
23391: LD_INT 120
23393: PUSH
23394: LD_INT 130
23396: PUSH
23397: LD_INT 140
23399: PUSH
23400: LD_INT 150
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PPUSH
23423: LD_INT 15
23425: PPUSH
23426: CALL_OW 12
23430: ARRAY
23431: ST_TO_ADDR
// if ValidHex ( x , y ) then
23432: LD_VAR 0 3
23436: PPUSH
23437: LD_VAR 0 4
23441: PPUSH
23442: CALL_OW 488
23446: IFFALSE 23469
// begin result := [ x , y ] ;
23448: LD_ADDR_VAR 0 1
23452: PUSH
23453: LD_VAR 0 3
23457: PUSH
23458: LD_VAR 0 4
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: ST_TO_ADDR
// break ;
23467: GO 23471
// end ; end ;
23469: GO 23271
23471: POP
23472: POP
// if result then
23473: LD_VAR 0 1
23477: IFFALSE 23537
// begin ToLua ( playSibBomb() ) ;
23479: LD_STRING playSibBomb()
23481: PPUSH
23482: CALL_OW 559
// wait ( 0 0$14 ) ;
23486: LD_INT 490
23488: PPUSH
23489: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23493: LD_VAR 0 1
23497: PUSH
23498: LD_INT 1
23500: ARRAY
23501: PPUSH
23502: LD_VAR 0 1
23506: PUSH
23507: LD_INT 2
23509: ARRAY
23510: PPUSH
23511: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23515: LD_VAR 0 1
23519: PUSH
23520: LD_INT 1
23522: ARRAY
23523: PPUSH
23524: LD_VAR 0 1
23528: PUSH
23529: LD_INT 2
23531: ARRAY
23532: PPUSH
23533: CALL_OW 429
// end ; end ;
23537: LD_VAR 0 1
23541: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23542: LD_EXP 47
23546: PUSH
23547: LD_EXP 69
23551: AND
23552: IFFALSE 23564
23554: GO 23556
23556: DISABLE
// YouLost (  ) ;
23557: LD_STRING 
23559: PPUSH
23560: CALL_OW 104
23564: END
// every 0 0$1 trigger StreamModeActive and sFog do
23565: LD_EXP 47
23569: PUSH
23570: LD_EXP 68
23574: AND
23575: IFFALSE 23589
23577: GO 23579
23579: DISABLE
// FogOff ( your_side ) ;
23580: LD_OWVAR 2
23584: PPUSH
23585: CALL_OW 344
23589: END
// every 0 0$1 trigger StreamModeActive and sSun do
23590: LD_EXP 47
23594: PUSH
23595: LD_EXP 70
23599: AND
23600: IFFALSE 23628
23602: GO 23604
23604: DISABLE
// begin solar_recharge_percent := 0 ;
23605: LD_ADDR_OWVAR 79
23609: PUSH
23610: LD_INT 0
23612: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23613: LD_INT 10500
23615: PPUSH
23616: CALL_OW 67
// solar_recharge_percent := 100 ;
23620: LD_ADDR_OWVAR 79
23624: PUSH
23625: LD_INT 100
23627: ST_TO_ADDR
// end ;
23628: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23629: LD_EXP 47
23633: PUSH
23634: LD_EXP 71
23638: AND
23639: IFFALSE 23878
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
23648: PPUSH
// begin tmp := [ ] ;
23649: LD_ADDR_VAR 0 3
23653: PUSH
23654: EMPTY
23655: ST_TO_ADDR
// for i := 1 to 6 do
23656: LD_ADDR_VAR 0 1
23660: PUSH
23661: DOUBLE
23662: LD_INT 1
23664: DEC
23665: ST_TO_ADDR
23666: LD_INT 6
23668: PUSH
23669: FOR_TO
23670: IFFALSE 23775
// begin uc_nation := nation_nature ;
23672: LD_ADDR_OWVAR 21
23676: PUSH
23677: LD_INT 0
23679: ST_TO_ADDR
// uc_side := 0 ;
23680: LD_ADDR_OWVAR 20
23684: PUSH
23685: LD_INT 0
23687: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23688: LD_ADDR_OWVAR 29
23692: PUSH
23693: LD_INT 12
23695: PUSH
23696: LD_INT 12
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: ST_TO_ADDR
// hc_agressivity := 20 ;
23703: LD_ADDR_OWVAR 35
23707: PUSH
23708: LD_INT 20
23710: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23711: LD_ADDR_OWVAR 28
23715: PUSH
23716: LD_INT 17
23718: ST_TO_ADDR
// hc_gallery :=  ;
23719: LD_ADDR_OWVAR 33
23723: PUSH
23724: LD_STRING 
23726: ST_TO_ADDR
// hc_name :=  ;
23727: LD_ADDR_OWVAR 26
23731: PUSH
23732: LD_STRING 
23734: ST_TO_ADDR
// un := CreateHuman ;
23735: LD_ADDR_VAR 0 2
23739: PUSH
23740: CALL_OW 44
23744: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23745: LD_VAR 0 2
23749: PPUSH
23750: LD_INT 1
23752: PPUSH
23753: CALL_OW 51
// tmp := tmp ^ un ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_VAR 0 3
23766: PUSH
23767: LD_VAR 0 2
23771: ADD
23772: ST_TO_ADDR
// end ;
23773: GO 23669
23775: POP
23776: POP
// repeat wait ( 0 0$1 ) ;
23777: LD_INT 35
23779: PPUSH
23780: CALL_OW 67
// for un in tmp do
23784: LD_ADDR_VAR 0 2
23788: PUSH
23789: LD_VAR 0 3
23793: PUSH
23794: FOR_IN
23795: IFFALSE 23869
// begin if IsDead ( un ) then
23797: LD_VAR 0 2
23801: PPUSH
23802: CALL_OW 301
23806: IFFALSE 23826
// begin tmp := tmp diff un ;
23808: LD_ADDR_VAR 0 3
23812: PUSH
23813: LD_VAR 0 3
23817: PUSH
23818: LD_VAR 0 2
23822: DIFF
23823: ST_TO_ADDR
// continue ;
23824: GO 23794
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23826: LD_VAR 0 2
23830: PPUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 22
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PPUSH
23848: CALL_OW 69
23852: PPUSH
23853: LD_VAR 0 2
23857: PPUSH
23858: CALL_OW 74
23862: PPUSH
23863: CALL_OW 115
// end ;
23867: GO 23794
23869: POP
23870: POP
// until not tmp ;
23871: LD_VAR 0 3
23875: NOT
23876: IFFALSE 23777
// end ;
23878: PPOPN 3
23880: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23881: LD_EXP 47
23885: PUSH
23886: LD_EXP 72
23890: AND
23891: IFFALSE 23945
23893: GO 23895
23895: DISABLE
// begin ToLua ( displayTroll(); ) ;
23896: LD_STRING displayTroll();
23898: PPUSH
23899: CALL_OW 559
// wait ( 3 3$00 ) ;
23903: LD_INT 6300
23905: PPUSH
23906: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23910: LD_STRING hideTroll();
23912: PPUSH
23913: CALL_OW 559
// wait ( 1 1$00 ) ;
23917: LD_INT 2100
23919: PPUSH
23920: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23924: LD_STRING displayTroll();
23926: PPUSH
23927: CALL_OW 559
// wait ( 1 1$00 ) ;
23931: LD_INT 2100
23933: PPUSH
23934: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23938: LD_STRING hideTroll();
23940: PPUSH
23941: CALL_OW 559
// end ;
23945: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23946: LD_EXP 47
23950: PUSH
23951: LD_EXP 73
23955: AND
23956: IFFALSE 24019
23958: GO 23960
23960: DISABLE
23961: LD_INT 0
23963: PPUSH
// begin p := 0 ;
23964: LD_ADDR_VAR 0 1
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
// repeat game_speed := 1 ;
23972: LD_ADDR_OWVAR 65
23976: PUSH
23977: LD_INT 1
23979: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23980: LD_INT 35
23982: PPUSH
23983: CALL_OW 67
// p := p + 1 ;
23987: LD_ADDR_VAR 0 1
23991: PUSH
23992: LD_VAR 0 1
23996: PUSH
23997: LD_INT 1
23999: PLUS
24000: ST_TO_ADDR
// until p >= 60 ;
24001: LD_VAR 0 1
24005: PUSH
24006: LD_INT 60
24008: GREATEREQUAL
24009: IFFALSE 23972
// game_speed := 4 ;
24011: LD_ADDR_OWVAR 65
24015: PUSH
24016: LD_INT 4
24018: ST_TO_ADDR
// end ;
24019: PPOPN 1
24021: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24022: LD_EXP 47
24026: PUSH
24027: LD_EXP 74
24031: AND
24032: IFFALSE 24178
24034: GO 24036
24036: DISABLE
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_INT 22
24048: PUSH
24049: LD_OWVAR 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 30
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 30
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PPUSH
24090: CALL_OW 69
24094: ST_TO_ADDR
// if not depot then
24095: LD_VAR 0 1
24099: NOT
24100: IFFALSE 24104
// exit ;
24102: GO 24178
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 1
24116: PPUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 12
24126: ARRAY
24127: PPUSH
24128: CALL_OW 274
24132: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24133: LD_VAR 0 2
24137: PPUSH
24138: LD_INT 1
24140: PPUSH
24141: LD_INT 0
24143: PPUSH
24144: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24148: LD_VAR 0 2
24152: PPUSH
24153: LD_INT 2
24155: PPUSH
24156: LD_INT 0
24158: PPUSH
24159: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24163: LD_VAR 0 2
24167: PPUSH
24168: LD_INT 3
24170: PPUSH
24171: LD_INT 0
24173: PPUSH
24174: CALL_OW 277
// end ;
24178: PPOPN 2
24180: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24181: LD_EXP 47
24185: PUSH
24186: LD_EXP 75
24190: AND
24191: IFFALSE 24288
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24199: LD_ADDR_VAR 0 1
24203: PUSH
24204: LD_INT 22
24206: PUSH
24207: LD_OWVAR 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 21
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 3
24228: PUSH
24229: LD_INT 23
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: PPUSH
24248: CALL_OW 69
24252: ST_TO_ADDR
// if not tmp then
24253: LD_VAR 0 1
24257: NOT
24258: IFFALSE 24262
// exit ;
24260: GO 24288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24262: LD_VAR 0 1
24266: PUSH
24267: LD_INT 1
24269: PPUSH
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 12
24279: ARRAY
24280: PPUSH
24281: LD_INT 200
24283: PPUSH
24284: CALL_OW 234
// end ;
24288: PPOPN 1
24290: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24291: LD_EXP 47
24295: PUSH
24296: LD_EXP 76
24300: AND
24301: IFFALSE 24380
24303: GO 24305
24305: DISABLE
24306: LD_INT 0
24308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24309: LD_ADDR_VAR 0 1
24313: PUSH
24314: LD_INT 22
24316: PUSH
24317: LD_OWVAR 2
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 21
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: CALL_OW 69
24344: ST_TO_ADDR
// if not tmp then
24345: LD_VAR 0 1
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24354: LD_VAR 0 1
24358: PUSH
24359: LD_INT 1
24361: PPUSH
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 12
24371: ARRAY
24372: PPUSH
24373: LD_INT 60
24375: PPUSH
24376: CALL_OW 234
// end ;
24380: PPOPN 1
24382: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24383: LD_EXP 47
24387: PUSH
24388: LD_EXP 77
24392: AND
24393: IFFALSE 24492
24395: GO 24397
24397: DISABLE
24398: LD_INT 0
24400: PPUSH
24401: PPUSH
// begin enable ;
24402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24403: LD_ADDR_VAR 0 1
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 61
24422: PUSH
24423: EMPTY
24424: LIST
24425: PUSH
24426: LD_INT 33
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: PPUSH
24441: CALL_OW 69
24445: ST_TO_ADDR
// if not tmp then
24446: LD_VAR 0 1
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24492
// for i in tmp do
24455: LD_ADDR_VAR 0 2
24459: PUSH
24460: LD_VAR 0 1
24464: PUSH
24465: FOR_IN
24466: IFFALSE 24490
// if IsControledBy ( i ) then
24468: LD_VAR 0 2
24472: PPUSH
24473: CALL_OW 312
24477: IFFALSE 24488
// ComUnlink ( i ) ;
24479: LD_VAR 0 2
24483: PPUSH
24484: CALL_OW 136
24488: GO 24465
24490: POP
24491: POP
// end ;
24492: PPOPN 2
24494: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24495: LD_EXP 47
24499: PUSH
24500: LD_EXP 78
24504: AND
24505: IFFALSE 24645
24507: GO 24509
24509: DISABLE
24510: LD_INT 0
24512: PPUSH
24513: PPUSH
// begin ToLua ( displayPowell(); ) ;
24514: LD_STRING displayPowell();
24516: PPUSH
24517: CALL_OW 559
// uc_side := 0 ;
24521: LD_ADDR_OWVAR 20
24525: PUSH
24526: LD_INT 0
24528: ST_TO_ADDR
// uc_nation := 2 ;
24529: LD_ADDR_OWVAR 21
24533: PUSH
24534: LD_INT 2
24536: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24537: LD_ADDR_OWVAR 37
24541: PUSH
24542: LD_INT 14
24544: ST_TO_ADDR
// vc_engine := engine_siberite ;
24545: LD_ADDR_OWVAR 39
24549: PUSH
24550: LD_INT 3
24552: ST_TO_ADDR
// vc_control := control_apeman ;
24553: LD_ADDR_OWVAR 38
24557: PUSH
24558: LD_INT 5
24560: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24561: LD_ADDR_OWVAR 40
24565: PUSH
24566: LD_INT 29
24568: ST_TO_ADDR
// un := CreateVehicle ;
24569: LD_ADDR_VAR 0 2
24573: PUSH
24574: CALL_OW 45
24578: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_INT 1
24586: PPUSH
24587: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24591: LD_INT 35
24593: PPUSH
24594: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24598: LD_VAR 0 2
24602: PPUSH
24603: LD_INT 22
24605: PUSH
24606: LD_OWVAR 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PPUSH
24615: CALL_OW 69
24619: PPUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: CALL_OW 74
24629: PPUSH
24630: CALL_OW 115
// until IsDead ( un ) ;
24634: LD_VAR 0 2
24638: PPUSH
24639: CALL_OW 301
24643: IFFALSE 24591
// end ;
24645: PPOPN 2
24647: END
// every 0 0$1 trigger StreamModeActive and sStu do
24648: LD_EXP 47
24652: PUSH
24653: LD_EXP 86
24657: AND
24658: IFFALSE 24674
24660: GO 24662
24662: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24663: LD_STRING displayStucuk();
24665: PPUSH
24666: CALL_OW 559
// ResetFog ;
24670: CALL_OW 335
// end ;
24674: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24675: LD_EXP 47
24679: PUSH
24680: LD_EXP 79
24684: AND
24685: IFFALSE 24826
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PPUSH
24725: CALL_OW 69
24729: ST_TO_ADDR
// if not tmp then
24730: LD_VAR 0 2
24734: NOT
24735: IFFALSE 24739
// exit ;
24737: GO 24826
// un := tmp [ rand ( 1 , tmp ) ] ;
24739: LD_ADDR_VAR 0 1
24743: PUSH
24744: LD_VAR 0 2
24748: PUSH
24749: LD_INT 1
24751: PPUSH
24752: LD_VAR 0 2
24756: PPUSH
24757: CALL_OW 12
24761: ARRAY
24762: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24763: LD_VAR 0 1
24767: PPUSH
24768: LD_INT 0
24770: PPUSH
24771: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24775: LD_VAR 0 1
24779: PPUSH
24780: LD_OWVAR 3
24784: PUSH
24785: LD_VAR 0 1
24789: DIFF
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL_OW 74
24800: PPUSH
24801: CALL_OW 115
// wait ( 0 0$20 ) ;
24805: LD_INT 700
24807: PPUSH
24808: CALL_OW 67
// SetSide ( un , your_side ) ;
24812: LD_VAR 0 1
24816: PPUSH
24817: LD_OWVAR 2
24821: PPUSH
24822: CALL_OW 235
// end ;
24826: PPOPN 2
24828: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24829: LD_EXP 47
24833: PUSH
24834: LD_EXP 80
24838: AND
24839: IFFALSE 24945
24841: GO 24843
24843: DISABLE
24844: LD_INT 0
24846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24847: LD_ADDR_VAR 0 1
24851: PUSH
24852: LD_INT 22
24854: PUSH
24855: LD_OWVAR 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 30
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PPUSH
24896: CALL_OW 69
24900: ST_TO_ADDR
// if not depot then
24901: LD_VAR 0 1
24905: NOT
24906: IFFALSE 24910
// exit ;
24908: GO 24945
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24910: LD_VAR 0 1
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: PPUSH
24919: CALL_OW 250
24923: PPUSH
24924: LD_VAR 0 1
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PPUSH
24933: CALL_OW 251
24937: PPUSH
24938: LD_INT 70
24940: PPUSH
24941: CALL_OW 495
// end ;
24945: PPOPN 1
24947: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24948: LD_EXP 47
24952: PUSH
24953: LD_EXP 81
24957: AND
24958: IFFALSE 25169
24960: GO 24962
24962: DISABLE
24963: LD_INT 0
24965: PPUSH
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_OWVAR 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 21
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PPUSH
25001: CALL_OW 69
25005: ST_TO_ADDR
// if not tmp then
25006: LD_VAR 0 5
25010: NOT
25011: IFFALSE 25015
// exit ;
25013: GO 25169
// for i in tmp do
25015: LD_ADDR_VAR 0 1
25019: PUSH
25020: LD_VAR 0 5
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25167
// begin d := rand ( 0 , 5 ) ;
25028: LD_ADDR_VAR 0 4
25032: PUSH
25033: LD_INT 0
25035: PPUSH
25036: LD_INT 5
25038: PPUSH
25039: CALL_OW 12
25043: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25044: LD_ADDR_VAR 0 2
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 250
25058: PPUSH
25059: LD_VAR 0 4
25063: PPUSH
25064: LD_INT 3
25066: PPUSH
25067: LD_INT 12
25069: PPUSH
25070: CALL_OW 12
25074: PPUSH
25075: CALL_OW 272
25079: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 251
25094: PPUSH
25095: LD_VAR 0 4
25099: PPUSH
25100: LD_INT 3
25102: PPUSH
25103: LD_INT 12
25105: PPUSH
25106: CALL_OW 12
25110: PPUSH
25111: CALL_OW 273
25115: ST_TO_ADDR
// if ValidHex ( x , y ) then
25116: LD_VAR 0 2
25120: PPUSH
25121: LD_VAR 0 3
25125: PPUSH
25126: CALL_OW 488
25130: IFFALSE 25165
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25132: LD_VAR 0 1
25136: PPUSH
25137: LD_VAR 0 2
25141: PPUSH
25142: LD_VAR 0 3
25146: PPUSH
25147: LD_INT 3
25149: PPUSH
25150: LD_INT 6
25152: PPUSH
25153: CALL_OW 12
25157: PPUSH
25158: LD_INT 1
25160: PPUSH
25161: CALL_OW 483
// end ;
25165: GO 25025
25167: POP
25168: POP
// end ;
25169: PPOPN 5
25171: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25172: LD_EXP 47
25176: PUSH
25177: LD_EXP 82
25181: AND
25182: IFFALSE 25276
25184: GO 25186
25186: DISABLE
25187: LD_INT 0
25189: PPUSH
25190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 32
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 21
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: PPUSH
25233: CALL_OW 69
25237: ST_TO_ADDR
// if not tmp then
25238: LD_VAR 0 2
25242: NOT
25243: IFFALSE 25247
// exit ;
25245: GO 25276
// for i in tmp do
25247: LD_ADDR_VAR 0 1
25251: PUSH
25252: LD_VAR 0 2
25256: PUSH
25257: FOR_IN
25258: IFFALSE 25274
// SetFuel ( i , 0 ) ;
25260: LD_VAR 0 1
25264: PPUSH
25265: LD_INT 0
25267: PPUSH
25268: CALL_OW 240
25272: GO 25257
25274: POP
25275: POP
// end ;
25276: PPOPN 2
25278: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25279: LD_EXP 47
25283: PUSH
25284: LD_EXP 83
25288: AND
25289: IFFALSE 25355
25291: GO 25293
25293: DISABLE
25294: LD_INT 0
25296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_OWVAR 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 30
25316: PUSH
25317: LD_INT 29
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PPUSH
25328: CALL_OW 69
25332: ST_TO_ADDR
// if not tmp then
25333: LD_VAR 0 1
25337: NOT
25338: IFFALSE 25342
// exit ;
25340: GO 25355
// DestroyUnit ( tmp [ 1 ] ) ;
25342: LD_VAR 0 1
25346: PUSH
25347: LD_INT 1
25349: ARRAY
25350: PPUSH
25351: CALL_OW 65
// end ;
25355: PPOPN 1
25357: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25358: LD_EXP 47
25362: PUSH
25363: LD_EXP 85
25367: AND
25368: IFFALSE 25497
25370: GO 25372
25372: DISABLE
25373: LD_INT 0
25375: PPUSH
// begin uc_side := 0 ;
25376: LD_ADDR_OWVAR 20
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
// uc_nation := nation_arabian ;
25384: LD_ADDR_OWVAR 21
25388: PUSH
25389: LD_INT 2
25391: ST_TO_ADDR
// hc_gallery :=  ;
25392: LD_ADDR_OWVAR 33
25396: PUSH
25397: LD_STRING 
25399: ST_TO_ADDR
// hc_name :=  ;
25400: LD_ADDR_OWVAR 26
25404: PUSH
25405: LD_STRING 
25407: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25408: LD_INT 1
25410: PPUSH
25411: LD_INT 11
25413: PPUSH
25414: LD_INT 10
25416: PPUSH
25417: CALL_OW 380
// un := CreateHuman ;
25421: LD_ADDR_VAR 0 1
25425: PUSH
25426: CALL_OW 44
25430: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25443: LD_INT 35
25445: PPUSH
25446: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25450: LD_VAR 0 1
25454: PPUSH
25455: LD_INT 22
25457: PUSH
25458: LD_OWVAR 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PPUSH
25467: CALL_OW 69
25471: PPUSH
25472: LD_VAR 0 1
25476: PPUSH
25477: CALL_OW 74
25481: PPUSH
25482: CALL_OW 115
// until IsDead ( un ) ;
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 301
25495: IFFALSE 25443
// end ;
25497: PPOPN 1
25499: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25500: LD_EXP 47
25504: PUSH
25505: LD_EXP 87
25509: AND
25510: IFFALSE 25522
25512: GO 25514
25514: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25515: LD_STRING earthquake(getX(game), 0, 32)
25517: PPUSH
25518: CALL_OW 559
25522: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25523: LD_EXP 47
25527: PUSH
25528: LD_EXP 88
25532: AND
25533: IFFALSE 25624
25535: GO 25537
25537: DISABLE
25538: LD_INT 0
25540: PPUSH
// begin enable ;
25541: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25542: LD_ADDR_VAR 0 1
25546: PUSH
25547: LD_INT 22
25549: PUSH
25550: LD_OWVAR 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 33
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 69
25588: ST_TO_ADDR
// if not tmp then
25589: LD_VAR 0 1
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25598: LD_VAR 0 1
25602: PUSH
25603: LD_INT 1
25605: PPUSH
25606: LD_VAR 0 1
25610: PPUSH
25611: CALL_OW 12
25615: ARRAY
25616: PPUSH
25617: LD_INT 1
25619: PPUSH
25620: CALL_OW 234
// end ;
25624: PPOPN 1
25626: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25627: LD_EXP 47
25631: PUSH
25632: LD_EXP 89
25636: AND
25637: IFFALSE 25778
25639: GO 25641
25641: DISABLE
25642: LD_INT 0
25644: PPUSH
25645: PPUSH
25646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_OWVAR 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 25
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PPUSH
25678: CALL_OW 69
25682: ST_TO_ADDR
// if not tmp then
25683: LD_VAR 0 3
25687: NOT
25688: IFFALSE 25692
// exit ;
25690: GO 25778
// un := tmp [ rand ( 1 , tmp ) ] ;
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: LD_VAR 0 3
25701: PUSH
25702: LD_INT 1
25704: PPUSH
25705: LD_VAR 0 3
25709: PPUSH
25710: CALL_OW 12
25714: ARRAY
25715: ST_TO_ADDR
// if Crawls ( un ) then
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 318
25725: IFFALSE 25736
// ComWalk ( un ) ;
25727: LD_VAR 0 2
25731: PPUSH
25732: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_INT 9
25743: PPUSH
25744: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25748: LD_INT 28
25750: PPUSH
25751: LD_OWVAR 2
25755: PPUSH
25756: LD_INT 2
25758: PPUSH
25759: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25763: LD_INT 29
25765: PPUSH
25766: LD_OWVAR 2
25770: PPUSH
25771: LD_INT 2
25773: PPUSH
25774: CALL_OW 322
// end ;
25778: PPOPN 3
25780: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25781: LD_EXP 47
25785: PUSH
25786: LD_EXP 90
25790: AND
25791: IFFALSE 25902
25793: GO 25795
25795: DISABLE
25796: LD_INT 0
25798: PPUSH
25799: PPUSH
25800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_INT 22
25808: PUSH
25809: LD_OWVAR 2
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 25
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: ST_TO_ADDR
// if not tmp then
25837: LD_VAR 0 3
25841: NOT
25842: IFFALSE 25846
// exit ;
25844: GO 25902
// un := tmp [ rand ( 1 , tmp ) ] ;
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_VAR 0 3
25855: PUSH
25856: LD_INT 1
25858: PPUSH
25859: LD_VAR 0 3
25863: PPUSH
25864: CALL_OW 12
25868: ARRAY
25869: ST_TO_ADDR
// if Crawls ( un ) then
25870: LD_VAR 0 2
25874: PPUSH
25875: CALL_OW 318
25879: IFFALSE 25890
// ComWalk ( un ) ;
25881: LD_VAR 0 2
25885: PPUSH
25886: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25890: LD_VAR 0 2
25894: PPUSH
25895: LD_INT 8
25897: PPUSH
25898: CALL_OW 336
// end ;
25902: PPOPN 3
25904: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25905: LD_EXP 47
25909: PUSH
25910: LD_EXP 91
25914: AND
25915: IFFALSE 26059
25917: GO 25919
25919: DISABLE
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25924: LD_ADDR_VAR 0 2
25928: PUSH
25929: LD_INT 22
25931: PUSH
25932: LD_OWVAR 2
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 21
25943: PUSH
25944: LD_INT 2
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 34
25956: PUSH
25957: LD_INT 12
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 34
25966: PUSH
25967: LD_INT 51
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 34
25976: PUSH
25977: LD_INT 32
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 69
25999: ST_TO_ADDR
// if not tmp then
26000: LD_VAR 0 2
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26059
// for i in tmp do
26009: LD_ADDR_VAR 0 1
26013: PUSH
26014: LD_VAR 0 2
26018: PUSH
26019: FOR_IN
26020: IFFALSE 26057
// if GetCargo ( i , mat_artifact ) = 0 then
26022: LD_VAR 0 1
26026: PPUSH
26027: LD_INT 4
26029: PPUSH
26030: CALL_OW 289
26034: PUSH
26035: LD_INT 0
26037: EQUAL
26038: IFFALSE 26055
// SetCargo ( i , mat_siberit , 100 ) ;
26040: LD_VAR 0 1
26044: PPUSH
26045: LD_INT 3
26047: PPUSH
26048: LD_INT 100
26050: PPUSH
26051: CALL_OW 290
26055: GO 26019
26057: POP
26058: POP
// end ;
26059: PPOPN 2
26061: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26062: LD_EXP 47
26066: PUSH
26067: LD_EXP 92
26071: AND
26072: IFFALSE 26255
26074: GO 26076
26076: DISABLE
26077: LD_INT 0
26079: PPUSH
26080: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26081: LD_ADDR_VAR 0 2
26085: PUSH
26086: LD_INT 22
26088: PUSH
26089: LD_OWVAR 2
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PPUSH
26098: CALL_OW 69
26102: ST_TO_ADDR
// if not tmp then
26103: LD_VAR 0 2
26107: NOT
26108: IFFALSE 26112
// exit ;
26110: GO 26255
// for i := 1 to 2 do
26112: LD_ADDR_VAR 0 1
26116: PUSH
26117: DOUBLE
26118: LD_INT 1
26120: DEC
26121: ST_TO_ADDR
26122: LD_INT 2
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26253
// begin uc_side := your_side ;
26128: LD_ADDR_OWVAR 20
26132: PUSH
26133: LD_OWVAR 2
26137: ST_TO_ADDR
// uc_nation := nation_american ;
26138: LD_ADDR_OWVAR 21
26142: PUSH
26143: LD_INT 1
26145: ST_TO_ADDR
// vc_chassis := us_morphling ;
26146: LD_ADDR_OWVAR 37
26150: PUSH
26151: LD_INT 5
26153: ST_TO_ADDR
// vc_engine := engine_siberite ;
26154: LD_ADDR_OWVAR 39
26158: PUSH
26159: LD_INT 3
26161: ST_TO_ADDR
// vc_control := control_computer ;
26162: LD_ADDR_OWVAR 38
26166: PUSH
26167: LD_INT 3
26169: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26170: LD_ADDR_OWVAR 40
26174: PUSH
26175: LD_INT 10
26177: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26178: LD_VAR 0 2
26182: PUSH
26183: LD_INT 1
26185: ARRAY
26186: PPUSH
26187: CALL_OW 310
26191: NOT
26192: IFFALSE 26239
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26194: CALL_OW 45
26198: PPUSH
26199: LD_VAR 0 2
26203: PUSH
26204: LD_INT 1
26206: ARRAY
26207: PPUSH
26208: CALL_OW 250
26212: PPUSH
26213: LD_VAR 0 2
26217: PUSH
26218: LD_INT 1
26220: ARRAY
26221: PPUSH
26222: CALL_OW 251
26226: PPUSH
26227: LD_INT 12
26229: PPUSH
26230: LD_INT 1
26232: PPUSH
26233: CALL_OW 50
26237: GO 26251
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26239: CALL_OW 45
26243: PPUSH
26244: LD_INT 1
26246: PPUSH
26247: CALL_OW 51
// end ;
26251: GO 26125
26253: POP
26254: POP
// end ;
26255: PPOPN 2
26257: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26258: LD_EXP 47
26262: PUSH
26263: LD_EXP 93
26267: AND
26268: IFFALSE 26490
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26281: LD_ADDR_VAR 0 6
26285: PUSH
26286: LD_INT 22
26288: PUSH
26289: LD_OWVAR 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 21
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: LD_INT 23
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: PPUSH
26330: CALL_OW 69
26334: ST_TO_ADDR
// if not tmp then
26335: LD_VAR 0 6
26339: NOT
26340: IFFALSE 26344
// exit ;
26342: GO 26490
// s1 := rand ( 1 , 4 ) ;
26344: LD_ADDR_VAR 0 2
26348: PUSH
26349: LD_INT 1
26351: PPUSH
26352: LD_INT 4
26354: PPUSH
26355: CALL_OW 12
26359: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26360: LD_ADDR_VAR 0 4
26364: PUSH
26365: LD_VAR 0 6
26369: PUSH
26370: LD_INT 1
26372: ARRAY
26373: PPUSH
26374: LD_VAR 0 2
26378: PPUSH
26379: CALL_OW 259
26383: ST_TO_ADDR
// if s1 = 1 then
26384: LD_VAR 0 2
26388: PUSH
26389: LD_INT 1
26391: EQUAL
26392: IFFALSE 26412
// s2 := rand ( 2 , 4 ) else
26394: LD_ADDR_VAR 0 3
26398: PUSH
26399: LD_INT 2
26401: PPUSH
26402: LD_INT 4
26404: PPUSH
26405: CALL_OW 12
26409: ST_TO_ADDR
26410: GO 26420
// s2 := 1 ;
26412: LD_ADDR_VAR 0 3
26416: PUSH
26417: LD_INT 1
26419: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26420: LD_ADDR_VAR 0 5
26424: PUSH
26425: LD_VAR 0 6
26429: PUSH
26430: LD_INT 1
26432: ARRAY
26433: PPUSH
26434: LD_VAR 0 3
26438: PPUSH
26439: CALL_OW 259
26443: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26444: LD_VAR 0 6
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_VAR 0 5
26462: PPUSH
26463: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26467: LD_VAR 0 6
26471: PUSH
26472: LD_INT 1
26474: ARRAY
26475: PPUSH
26476: LD_VAR 0 3
26480: PPUSH
26481: LD_VAR 0 4
26485: PPUSH
26486: CALL_OW 237
// end ;
26490: PPOPN 6
26492: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26493: LD_EXP 47
26497: PUSH
26498: LD_EXP 94
26502: AND
26503: IFFALSE 26582
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PPUSH
26542: CALL_OW 69
26546: ST_TO_ADDR
// if not tmp then
26547: LD_VAR 0 1
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26582
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26556: LD_VAR 0 1
26560: PUSH
26561: LD_INT 1
26563: PPUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: CALL_OW 12
26573: ARRAY
26574: PPUSH
26575: LD_INT 1
26577: PPUSH
26578: CALL_OW 234
// end ;
26582: PPOPN 1
26584: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26585: LD_EXP 47
26589: PUSH
26590: LD_EXP 95
26594: AND
26595: IFFALSE 26707
26597: GO 26599
26599: DISABLE
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26604: LD_ADDR_VAR 0 2
26608: PUSH
26609: LD_INT 22
26611: PUSH
26612: LD_OWVAR 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 30
26626: PUSH
26627: LD_INT 27
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 30
26636: PUSH
26637: LD_INT 26
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 30
26646: PUSH
26647: LD_INT 28
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: ST_TO_ADDR
// if not tmp then
26669: LD_VAR 0 2
26673: NOT
26674: IFFALSE 26678
// exit ;
26676: GO 26707
// for i in tmp do
26678: LD_ADDR_VAR 0 1
26682: PUSH
26683: LD_VAR 0 2
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26705
// SetLives ( i , 1 ) ;
26691: LD_VAR 0 1
26695: PPUSH
26696: LD_INT 1
26698: PPUSH
26699: CALL_OW 234
26703: GO 26688
26705: POP
26706: POP
// end ;
26707: PPOPN 2
26709: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26710: LD_EXP 47
26714: PUSH
26715: LD_EXP 96
26719: AND
26720: IFFALSE 27007
26722: GO 26724
26724: DISABLE
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
26729: PPUSH
// begin i := rand ( 1 , 7 ) ;
26730: LD_ADDR_VAR 0 1
26734: PUSH
26735: LD_INT 1
26737: PPUSH
26738: LD_INT 7
26740: PPUSH
26741: CALL_OW 12
26745: ST_TO_ADDR
// case i of 1 :
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 1
26753: DOUBLE
26754: EQUAL
26755: IFTRUE 26759
26757: GO 26769
26759: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26760: LD_STRING earthquake(getX(game), 0, 32)
26762: PPUSH
26763: CALL_OW 559
26767: GO 27007
26769: LD_INT 2
26771: DOUBLE
26772: EQUAL
26773: IFTRUE 26777
26775: GO 26791
26777: POP
// begin ToLua ( displayStucuk(); ) ;
26778: LD_STRING displayStucuk();
26780: PPUSH
26781: CALL_OW 559
// ResetFog ;
26785: CALL_OW 335
// end ; 3 :
26789: GO 27007
26791: LD_INT 3
26793: DOUBLE
26794: EQUAL
26795: IFTRUE 26799
26797: GO 26903
26799: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26800: LD_ADDR_VAR 0 2
26804: PUSH
26805: LD_INT 22
26807: PUSH
26808: LD_OWVAR 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 25
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: ST_TO_ADDR
// if not tmp then
26836: LD_VAR 0 2
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 27007
// un := tmp [ rand ( 1 , tmp ) ] ;
26845: LD_ADDR_VAR 0 3
26849: PUSH
26850: LD_VAR 0 2
26854: PUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 12
26867: ARRAY
26868: ST_TO_ADDR
// if Crawls ( un ) then
26869: LD_VAR 0 3
26873: PPUSH
26874: CALL_OW 318
26878: IFFALSE 26889
// ComWalk ( un ) ;
26880: LD_VAR 0 3
26884: PPUSH
26885: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26889: LD_VAR 0 3
26893: PPUSH
26894: LD_INT 8
26896: PPUSH
26897: CALL_OW 336
// end ; 4 :
26901: GO 27007
26903: LD_INT 4
26905: DOUBLE
26906: EQUAL
26907: IFTRUE 26911
26909: GO 26985
26911: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26912: LD_ADDR_VAR 0 2
26916: PUSH
26917: LD_INT 22
26919: PUSH
26920: LD_OWVAR 2
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 30
26931: PUSH
26932: LD_INT 29
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PPUSH
26943: CALL_OW 69
26947: ST_TO_ADDR
// if not tmp then
26948: LD_VAR 0 2
26952: NOT
26953: IFFALSE 26957
// exit ;
26955: GO 27007
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26957: LD_VAR 0 2
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PPUSH
26966: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26970: LD_VAR 0 2
26974: PUSH
26975: LD_INT 1
26977: ARRAY
26978: PPUSH
26979: CALL_OW 65
// end ; 5 .. 7 :
26983: GO 27007
26985: LD_INT 5
26987: DOUBLE
26988: GREATEREQUAL
26989: IFFALSE 26997
26991: LD_INT 7
26993: DOUBLE
26994: LESSEQUAL
26995: IFTRUE 26999
26997: GO 27006
26999: POP
// StreamSibBomb ; end ;
27000: CALL 23244 0 0
27004: GO 27007
27006: POP
// end ;
27007: PPOPN 3
27009: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27010: LD_EXP 47
27014: PUSH
27015: LD_EXP 97
27019: AND
27020: IFFALSE 27176
27022: GO 27024
27024: DISABLE
27025: LD_INT 0
27027: PPUSH
27028: PPUSH
27029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27030: LD_ADDR_VAR 0 2
27034: PUSH
27035: LD_INT 81
27037: PUSH
27038: LD_OWVAR 2
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 21
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 21
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PPUSH
27079: CALL_OW 69
27083: ST_TO_ADDR
// if not tmp then
27084: LD_VAR 0 2
27088: NOT
27089: IFFALSE 27093
// exit ;
27091: GO 27176
// p := 0 ;
27093: LD_ADDR_VAR 0 3
27097: PUSH
27098: LD_INT 0
27100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27101: LD_INT 35
27103: PPUSH
27104: CALL_OW 67
// p := p + 1 ;
27108: LD_ADDR_VAR 0 3
27112: PUSH
27113: LD_VAR 0 3
27117: PUSH
27118: LD_INT 1
27120: PLUS
27121: ST_TO_ADDR
// for i in tmp do
27122: LD_ADDR_VAR 0 1
27126: PUSH
27127: LD_VAR 0 2
27131: PUSH
27132: FOR_IN
27133: IFFALSE 27164
// if GetLives ( i ) < 1000 then
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 256
27144: PUSH
27145: LD_INT 1000
27147: LESS
27148: IFFALSE 27162
// SetLives ( i , 1000 ) ;
27150: LD_VAR 0 1
27154: PPUSH
27155: LD_INT 1000
27157: PPUSH
27158: CALL_OW 234
27162: GO 27132
27164: POP
27165: POP
// until p > 20 ;
27166: LD_VAR 0 3
27170: PUSH
27171: LD_INT 20
27173: GREATER
27174: IFFALSE 27101
// end ;
27176: PPOPN 3
27178: END
// every 0 0$1 trigger StreamModeActive and sTime do
27179: LD_EXP 47
27183: PUSH
27184: LD_EXP 98
27188: AND
27189: IFFALSE 27224
27191: GO 27193
27193: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27194: LD_INT 28
27196: PPUSH
27197: LD_OWVAR 2
27201: PPUSH
27202: LD_INT 2
27204: PPUSH
27205: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27209: LD_INT 30
27211: PPUSH
27212: LD_OWVAR 2
27216: PPUSH
27217: LD_INT 2
27219: PPUSH
27220: CALL_OW 322
// end ;
27224: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27225: LD_EXP 47
27229: PUSH
27230: LD_EXP 99
27234: AND
27235: IFFALSE 27356
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27244: LD_ADDR_VAR 0 2
27248: PUSH
27249: LD_INT 22
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 21
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 3
27273: PUSH
27274: LD_INT 23
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: PPUSH
27293: CALL_OW 69
27297: ST_TO_ADDR
// if not tmp then
27298: LD_VAR 0 2
27302: NOT
27303: IFFALSE 27307
// exit ;
27305: GO 27356
// for i in tmp do
27307: LD_ADDR_VAR 0 1
27311: PUSH
27312: LD_VAR 0 2
27316: PUSH
27317: FOR_IN
27318: IFFALSE 27354
// begin if Crawls ( i ) then
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 318
27329: IFFALSE 27340
// ComWalk ( i ) ;
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 138
// SetClass ( i , 2 ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 2
27347: PPUSH
27348: CALL_OW 336
// end ;
27352: GO 27317
27354: POP
27355: POP
// end ;
27356: PPOPN 2
27358: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27359: LD_EXP 47
27363: PUSH
27364: LD_EXP 100
27368: AND
27369: IFFALSE 27657
27371: GO 27373
27373: DISABLE
27374: LD_INT 0
27376: PPUSH
27377: PPUSH
27378: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27379: LD_OWVAR 2
27383: PPUSH
27384: LD_INT 9
27386: PPUSH
27387: LD_INT 1
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27397: LD_INT 9
27399: PPUSH
27400: LD_OWVAR 2
27404: PPUSH
27405: CALL_OW 343
// uc_side := 9 ;
27409: LD_ADDR_OWVAR 20
27413: PUSH
27414: LD_INT 9
27416: ST_TO_ADDR
// uc_nation := 2 ;
27417: LD_ADDR_OWVAR 21
27421: PUSH
27422: LD_INT 2
27424: ST_TO_ADDR
// hc_name := Dark Warrior ;
27425: LD_ADDR_OWVAR 26
27429: PUSH
27430: LD_STRING Dark Warrior
27432: ST_TO_ADDR
// hc_gallery :=  ;
27433: LD_ADDR_OWVAR 33
27437: PUSH
27438: LD_STRING 
27440: ST_TO_ADDR
// hc_noskilllimit := true ;
27441: LD_ADDR_OWVAR 76
27445: PUSH
27446: LD_INT 1
27448: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27449: LD_ADDR_OWVAR 31
27453: PUSH
27454: LD_INT 30
27456: PUSH
27457: LD_INT 30
27459: PUSH
27460: LD_INT 30
27462: PUSH
27463: LD_INT 30
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// un := CreateHuman ;
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: CALL_OW 44
27481: ST_TO_ADDR
// hc_noskilllimit := false ;
27482: LD_ADDR_OWVAR 76
27486: PUSH
27487: LD_INT 0
27489: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27490: LD_VAR 0 3
27494: PPUSH
27495: LD_INT 1
27497: PPUSH
27498: CALL_OW 51
// ToLua ( playRanger() ) ;
27502: LD_STRING playRanger()
27504: PPUSH
27505: CALL_OW 559
// p := 0 ;
27509: LD_ADDR_VAR 0 2
27513: PUSH
27514: LD_INT 0
27516: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27517: LD_INT 35
27519: PPUSH
27520: CALL_OW 67
// p := p + 1 ;
27524: LD_ADDR_VAR 0 2
27528: PUSH
27529: LD_VAR 0 2
27533: PUSH
27534: LD_INT 1
27536: PLUS
27537: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27538: LD_VAR 0 3
27542: PPUSH
27543: CALL_OW 256
27547: PUSH
27548: LD_INT 1000
27550: LESS
27551: IFFALSE 27565
// SetLives ( un , 1000 ) ;
27553: LD_VAR 0 3
27557: PPUSH
27558: LD_INT 1000
27560: PPUSH
27561: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27565: LD_VAR 0 3
27569: PPUSH
27570: LD_INT 81
27572: PUSH
27573: LD_OWVAR 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 91
27584: PUSH
27585: LD_VAR 0 3
27589: PUSH
27590: LD_INT 30
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PPUSH
27602: CALL_OW 69
27606: PPUSH
27607: LD_VAR 0 3
27611: PPUSH
27612: CALL_OW 74
27616: PPUSH
27617: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27621: LD_VAR 0 2
27625: PUSH
27626: LD_INT 80
27628: GREATER
27629: PUSH
27630: LD_VAR 0 3
27634: PPUSH
27635: CALL_OW 301
27639: OR
27640: IFFALSE 27517
// if un then
27642: LD_VAR 0 3
27646: IFFALSE 27657
// RemoveUnit ( un ) ;
27648: LD_VAR 0 3
27652: PPUSH
27653: CALL_OW 64
// end ;
27657: PPOPN 3
27659: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27660: LD_EXP 101
27664: IFFALSE 27780
27666: GO 27668
27668: DISABLE
27669: LD_INT 0
27671: PPUSH
27672: PPUSH
27673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: LD_INT 81
27681: PUSH
27682: LD_OWVAR 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 21
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PPUSH
27705: CALL_OW 69
27709: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27710: LD_STRING playComputer()
27712: PPUSH
27713: CALL_OW 559
// if not tmp then
27717: LD_VAR 0 2
27721: NOT
27722: IFFALSE 27726
// exit ;
27724: GO 27780
// for i in tmp do
27726: LD_ADDR_VAR 0 1
27730: PUSH
27731: LD_VAR 0 2
27735: PUSH
27736: FOR_IN
27737: IFFALSE 27778
// for j := 1 to 4 do
27739: LD_ADDR_VAR 0 3
27743: PUSH
27744: DOUBLE
27745: LD_INT 1
27747: DEC
27748: ST_TO_ADDR
27749: LD_INT 4
27751: PUSH
27752: FOR_TO
27753: IFFALSE 27774
// SetSkill ( i , j , 10 ) ;
27755: LD_VAR 0 1
27759: PPUSH
27760: LD_VAR 0 3
27764: PPUSH
27765: LD_INT 10
27767: PPUSH
27768: CALL_OW 237
27772: GO 27752
27774: POP
27775: POP
27776: GO 27736
27778: POP
27779: POP
// end ;
27780: PPOPN 3
27782: END
// every 0 0$1 trigger s30 do var i , tmp ;
27783: LD_EXP 102
27787: IFFALSE 27856
27789: GO 27791
27791: DISABLE
27792: LD_INT 0
27794: PPUSH
27795: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27796: LD_ADDR_VAR 0 2
27800: PUSH
27801: LD_INT 22
27803: PUSH
27804: LD_OWVAR 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PPUSH
27813: CALL_OW 69
27817: ST_TO_ADDR
// if not tmp then
27818: LD_VAR 0 2
27822: NOT
27823: IFFALSE 27827
// exit ;
27825: GO 27856
// for i in tmp do
27827: LD_ADDR_VAR 0 1
27831: PUSH
27832: LD_VAR 0 2
27836: PUSH
27837: FOR_IN
27838: IFFALSE 27854
// SetLives ( i , 300 ) ;
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_INT 300
27847: PPUSH
27848: CALL_OW 234
27852: GO 27837
27854: POP
27855: POP
// end ;
27856: PPOPN 2
27858: END
// every 0 0$1 trigger s60 do var i , tmp ;
27859: LD_EXP 103
27863: IFFALSE 27932
27865: GO 27867
27867: DISABLE
27868: LD_INT 0
27870: PPUSH
27871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27872: LD_ADDR_VAR 0 2
27876: PUSH
27877: LD_INT 22
27879: PUSH
27880: LD_OWVAR 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: ST_TO_ADDR
// if not tmp then
27894: LD_VAR 0 2
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 27932
// for i in tmp do
27903: LD_ADDR_VAR 0 1
27907: PUSH
27908: LD_VAR 0 2
27912: PUSH
27913: FOR_IN
27914: IFFALSE 27930
// SetLives ( i , 600 ) ;
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 600
27923: PPUSH
27924: CALL_OW 234
27928: GO 27913
27930: POP
27931: POP
// end ;
27932: PPOPN 2
27934: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27935: LD_INT 0
27937: PPUSH
// case cmd of 301 :
27938: LD_VAR 0 1
27942: PUSH
27943: LD_INT 301
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27983
27951: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27952: LD_VAR 0 6
27956: PPUSH
27957: LD_VAR 0 7
27961: PPUSH
27962: LD_VAR 0 8
27966: PPUSH
27967: LD_VAR 0 4
27971: PPUSH
27972: LD_VAR 0 5
27976: PPUSH
27977: CALL 29184 0 5
27981: GO 28104
27983: LD_INT 302
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 28028
27991: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27992: LD_VAR 0 6
27996: PPUSH
27997: LD_VAR 0 7
28001: PPUSH
28002: LD_VAR 0 8
28006: PPUSH
28007: LD_VAR 0 9
28011: PPUSH
28012: LD_VAR 0 4
28016: PPUSH
28017: LD_VAR 0 5
28021: PPUSH
28022: CALL 29275 0 6
28026: GO 28104
28028: LD_INT 303
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28073
28036: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28037: LD_VAR 0 6
28041: PPUSH
28042: LD_VAR 0 7
28046: PPUSH
28047: LD_VAR 0 8
28051: PPUSH
28052: LD_VAR 0 9
28056: PPUSH
28057: LD_VAR 0 4
28061: PPUSH
28062: LD_VAR 0 5
28066: PPUSH
28067: CALL 28109 0 6
28071: GO 28104
28073: LD_INT 304
28075: DOUBLE
28076: EQUAL
28077: IFTRUE 28081
28079: GO 28103
28081: POP
// hHackTeleport ( unit , x , y ) ; end ;
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_VAR 0 4
28091: PPUSH
28092: LD_VAR 0 5
28096: PPUSH
28097: CALL 29868 0 3
28101: GO 28104
28103: POP
// end ;
28104: LD_VAR 0 12
28108: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 1
28120: LESS
28121: PUSH
28122: LD_VAR 0 1
28126: PUSH
28127: LD_INT 3
28129: GREATER
28130: OR
28131: PUSH
28132: LD_VAR 0 5
28136: PPUSH
28137: LD_VAR 0 6
28141: PPUSH
28142: CALL_OW 428
28146: OR
28147: IFFALSE 28151
// exit ;
28149: GO 28871
// uc_side := your_side ;
28151: LD_ADDR_OWVAR 20
28155: PUSH
28156: LD_OWVAR 2
28160: ST_TO_ADDR
// uc_nation := nation ;
28161: LD_ADDR_OWVAR 21
28165: PUSH
28166: LD_VAR 0 1
28170: ST_TO_ADDR
// bc_level = 1 ;
28171: LD_ADDR_OWVAR 43
28175: PUSH
28176: LD_INT 1
28178: ST_TO_ADDR
// case btype of 1 :
28179: LD_VAR 0 2
28183: PUSH
28184: LD_INT 1
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28203
28192: POP
// bc_type := b_depot ; 2 :
28193: LD_ADDR_OWVAR 42
28197: PUSH
28198: LD_INT 0
28200: ST_TO_ADDR
28201: GO 28815
28203: LD_INT 2
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28222
28211: POP
// bc_type := b_warehouse ; 3 :
28212: LD_ADDR_OWVAR 42
28216: PUSH
28217: LD_INT 1
28219: ST_TO_ADDR
28220: GO 28815
28222: LD_INT 3
28224: DOUBLE
28225: EQUAL
28226: IFTRUE 28230
28228: GO 28241
28230: POP
// bc_type := b_lab ; 4 .. 9 :
28231: LD_ADDR_OWVAR 42
28235: PUSH
28236: LD_INT 6
28238: ST_TO_ADDR
28239: GO 28815
28241: LD_INT 4
28243: DOUBLE
28244: GREATEREQUAL
28245: IFFALSE 28253
28247: LD_INT 9
28249: DOUBLE
28250: LESSEQUAL
28251: IFTRUE 28255
28253: GO 28307
28255: POP
// begin bc_type := b_lab_half ;
28256: LD_ADDR_OWVAR 42
28260: PUSH
28261: LD_INT 7
28263: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28264: LD_ADDR_OWVAR 44
28268: PUSH
28269: LD_INT 10
28271: PUSH
28272: LD_INT 11
28274: PUSH
28275: LD_INT 12
28277: PUSH
28278: LD_INT 15
28280: PUSH
28281: LD_INT 14
28283: PUSH
28284: LD_INT 13
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: PUSH
28295: LD_VAR 0 2
28299: PUSH
28300: LD_INT 3
28302: MINUS
28303: ARRAY
28304: ST_TO_ADDR
// end ; 10 .. 13 :
28305: GO 28815
28307: LD_INT 10
28309: DOUBLE
28310: GREATEREQUAL
28311: IFFALSE 28319
28313: LD_INT 13
28315: DOUBLE
28316: LESSEQUAL
28317: IFTRUE 28321
28319: GO 28398
28321: POP
// begin bc_type := b_lab_full ;
28322: LD_ADDR_OWVAR 42
28326: PUSH
28327: LD_INT 8
28329: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28330: LD_ADDR_OWVAR 44
28334: PUSH
28335: LD_INT 10
28337: PUSH
28338: LD_INT 12
28340: PUSH
28341: LD_INT 14
28343: PUSH
28344: LD_INT 13
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: LD_INT 9
28360: MINUS
28361: ARRAY
28362: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28363: LD_ADDR_OWVAR 45
28367: PUSH
28368: LD_INT 11
28370: PUSH
28371: LD_INT 15
28373: PUSH
28374: LD_INT 12
28376: PUSH
28377: LD_INT 15
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: PUSH
28386: LD_VAR 0 2
28390: PUSH
28391: LD_INT 9
28393: MINUS
28394: ARRAY
28395: ST_TO_ADDR
// end ; 14 :
28396: GO 28815
28398: LD_INT 14
28400: DOUBLE
28401: EQUAL
28402: IFTRUE 28406
28404: GO 28417
28406: POP
// bc_type := b_workshop ; 15 :
28407: LD_ADDR_OWVAR 42
28411: PUSH
28412: LD_INT 2
28414: ST_TO_ADDR
28415: GO 28815
28417: LD_INT 15
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28436
28425: POP
// bc_type := b_factory ; 16 :
28426: LD_ADDR_OWVAR 42
28430: PUSH
28431: LD_INT 3
28433: ST_TO_ADDR
28434: GO 28815
28436: LD_INT 16
28438: DOUBLE
28439: EQUAL
28440: IFTRUE 28444
28442: GO 28455
28444: POP
// bc_type := b_ext_gun ; 17 :
28445: LD_ADDR_OWVAR 42
28449: PUSH
28450: LD_INT 17
28452: ST_TO_ADDR
28453: GO 28815
28455: LD_INT 17
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28491
28463: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28464: LD_ADDR_OWVAR 42
28468: PUSH
28469: LD_INT 19
28471: PUSH
28472: LD_INT 23
28474: PUSH
28475: LD_INT 19
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: PUSH
28483: LD_VAR 0 1
28487: ARRAY
28488: ST_TO_ADDR
28489: GO 28815
28491: LD_INT 18
28493: DOUBLE
28494: EQUAL
28495: IFTRUE 28499
28497: GO 28510
28499: POP
// bc_type := b_ext_radar ; 19 :
28500: LD_ADDR_OWVAR 42
28504: PUSH
28505: LD_INT 20
28507: ST_TO_ADDR
28508: GO 28815
28510: LD_INT 19
28512: DOUBLE
28513: EQUAL
28514: IFTRUE 28518
28516: GO 28529
28518: POP
// bc_type := b_ext_radio ; 20 :
28519: LD_ADDR_OWVAR 42
28523: PUSH
28524: LD_INT 22
28526: ST_TO_ADDR
28527: GO 28815
28529: LD_INT 20
28531: DOUBLE
28532: EQUAL
28533: IFTRUE 28537
28535: GO 28548
28537: POP
// bc_type := b_ext_siberium ; 21 :
28538: LD_ADDR_OWVAR 42
28542: PUSH
28543: LD_INT 21
28545: ST_TO_ADDR
28546: GO 28815
28548: LD_INT 21
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28567
28556: POP
// bc_type := b_ext_computer ; 22 :
28557: LD_ADDR_OWVAR 42
28561: PUSH
28562: LD_INT 24
28564: ST_TO_ADDR
28565: GO 28815
28567: LD_INT 22
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28586
28575: POP
// bc_type := b_ext_track ; 23 :
28576: LD_ADDR_OWVAR 42
28580: PUSH
28581: LD_INT 16
28583: ST_TO_ADDR
28584: GO 28815
28586: LD_INT 23
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28605
28594: POP
// bc_type := b_ext_laser ; 24 :
28595: LD_ADDR_OWVAR 42
28599: PUSH
28600: LD_INT 25
28602: ST_TO_ADDR
28603: GO 28815
28605: LD_INT 24
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28624
28613: POP
// bc_type := b_control_tower ; 25 :
28614: LD_ADDR_OWVAR 42
28618: PUSH
28619: LD_INT 36
28621: ST_TO_ADDR
28622: GO 28815
28624: LD_INT 25
28626: DOUBLE
28627: EQUAL
28628: IFTRUE 28632
28630: GO 28643
28632: POP
// bc_type := b_breastwork ; 26 :
28633: LD_ADDR_OWVAR 42
28637: PUSH
28638: LD_INT 31
28640: ST_TO_ADDR
28641: GO 28815
28643: LD_INT 26
28645: DOUBLE
28646: EQUAL
28647: IFTRUE 28651
28649: GO 28662
28651: POP
// bc_type := b_bunker ; 27 :
28652: LD_ADDR_OWVAR 42
28656: PUSH
28657: LD_INT 32
28659: ST_TO_ADDR
28660: GO 28815
28662: LD_INT 27
28664: DOUBLE
28665: EQUAL
28666: IFTRUE 28670
28668: GO 28681
28670: POP
// bc_type := b_turret ; 28 :
28671: LD_ADDR_OWVAR 42
28675: PUSH
28676: LD_INT 33
28678: ST_TO_ADDR
28679: GO 28815
28681: LD_INT 28
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28700
28689: POP
// bc_type := b_armoury ; 29 :
28690: LD_ADDR_OWVAR 42
28694: PUSH
28695: LD_INT 4
28697: ST_TO_ADDR
28698: GO 28815
28700: LD_INT 29
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28719
28708: POP
// bc_type := b_barracks ; 30 :
28709: LD_ADDR_OWVAR 42
28713: PUSH
28714: LD_INT 5
28716: ST_TO_ADDR
28717: GO 28815
28719: LD_INT 30
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28738
28727: POP
// bc_type := b_solar_power ; 31 :
28728: LD_ADDR_OWVAR 42
28732: PUSH
28733: LD_INT 27
28735: ST_TO_ADDR
28736: GO 28815
28738: LD_INT 31
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28757
28746: POP
// bc_type := b_oil_power ; 32 :
28747: LD_ADDR_OWVAR 42
28751: PUSH
28752: LD_INT 26
28754: ST_TO_ADDR
28755: GO 28815
28757: LD_INT 32
28759: DOUBLE
28760: EQUAL
28761: IFTRUE 28765
28763: GO 28776
28765: POP
// bc_type := b_siberite_power ; 33 :
28766: LD_ADDR_OWVAR 42
28770: PUSH
28771: LD_INT 28
28773: ST_TO_ADDR
28774: GO 28815
28776: LD_INT 33
28778: DOUBLE
28779: EQUAL
28780: IFTRUE 28784
28782: GO 28795
28784: POP
// bc_type := b_oil_mine ; 34 :
28785: LD_ADDR_OWVAR 42
28789: PUSH
28790: LD_INT 29
28792: ST_TO_ADDR
28793: GO 28815
28795: LD_INT 34
28797: DOUBLE
28798: EQUAL
28799: IFTRUE 28803
28801: GO 28814
28803: POP
// bc_type := b_siberite_mine ; end ;
28804: LD_ADDR_OWVAR 42
28808: PUSH
28809: LD_INT 30
28811: ST_TO_ADDR
28812: GO 28815
28814: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28815: LD_ADDR_VAR 0 8
28819: PUSH
28820: LD_VAR 0 5
28824: PPUSH
28825: LD_VAR 0 6
28829: PPUSH
28830: LD_VAR 0 3
28834: PPUSH
28835: CALL_OW 47
28839: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28840: LD_OWVAR 42
28844: PUSH
28845: LD_INT 32
28847: PUSH
28848: LD_INT 33
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: IN
28855: IFFALSE 28871
// PlaceWeaponTurret ( b , weapon ) ;
28857: LD_VAR 0 8
28861: PPUSH
28862: LD_VAR 0 4
28866: PPUSH
28867: CALL_OW 431
// end ;
28871: LD_VAR 0 7
28875: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28882: LD_ADDR_VAR 0 4
28886: PUSH
28887: LD_INT 22
28889: PUSH
28890: LD_OWVAR 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 30
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 30
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 4
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 29004
// for i in tmp do
28945: LD_ADDR_VAR 0 2
28949: PUSH
28950: LD_VAR 0 4
28954: PUSH
28955: FOR_IN
28956: IFFALSE 29002
// for j = 1 to 3 do
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: DOUBLE
28964: LD_INT 1
28966: DEC
28967: ST_TO_ADDR
28968: LD_INT 3
28970: PUSH
28971: FOR_TO
28972: IFFALSE 28998
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28974: LD_VAR 0 2
28978: PPUSH
28979: CALL_OW 274
28983: PPUSH
28984: LD_VAR 0 3
28988: PPUSH
28989: LD_INT 99999
28991: PPUSH
28992: CALL_OW 277
28996: GO 28971
28998: POP
28999: POP
29000: GO 28955
29002: POP
29003: POP
// end ;
29004: LD_VAR 0 1
29008: RET
// export function hHackSetLevel10 ; var i , j ; begin
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29014: LD_ADDR_VAR 0 2
29018: PUSH
29019: LD_INT 21
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PPUSH
29029: CALL_OW 69
29033: PUSH
29034: FOR_IN
29035: IFFALSE 29087
// if IsSelected ( i ) then
29037: LD_VAR 0 2
29041: PPUSH
29042: CALL_OW 306
29046: IFFALSE 29085
// begin for j := 1 to 4 do
29048: LD_ADDR_VAR 0 3
29052: PUSH
29053: DOUBLE
29054: LD_INT 1
29056: DEC
29057: ST_TO_ADDR
29058: LD_INT 4
29060: PUSH
29061: FOR_TO
29062: IFFALSE 29083
// SetSkill ( i , j , 10 ) ;
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_VAR 0 3
29073: PPUSH
29074: LD_INT 10
29076: PPUSH
29077: CALL_OW 237
29081: GO 29061
29083: POP
29084: POP
// end ;
29085: GO 29034
29087: POP
29088: POP
// end ;
29089: LD_VAR 0 1
29093: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
29098: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29099: LD_ADDR_VAR 0 2
29103: PUSH
29104: LD_INT 22
29106: PUSH
29107: LD_OWVAR 2
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 21
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PPUSH
29130: CALL_OW 69
29134: PUSH
29135: FOR_IN
29136: IFFALSE 29177
// begin for j := 1 to 4 do
29138: LD_ADDR_VAR 0 3
29142: PUSH
29143: DOUBLE
29144: LD_INT 1
29146: DEC
29147: ST_TO_ADDR
29148: LD_INT 4
29150: PUSH
29151: FOR_TO
29152: IFFALSE 29173
// SetSkill ( i , j , 10 ) ;
29154: LD_VAR 0 2
29158: PPUSH
29159: LD_VAR 0 3
29163: PPUSH
29164: LD_INT 10
29166: PPUSH
29167: CALL_OW 237
29171: GO 29151
29173: POP
29174: POP
// end ;
29175: GO 29135
29177: POP
29178: POP
// end ;
29179: LD_VAR 0 1
29183: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29184: LD_INT 0
29186: PPUSH
// uc_side := your_side ;
29187: LD_ADDR_OWVAR 20
29191: PUSH
29192: LD_OWVAR 2
29196: ST_TO_ADDR
// uc_nation := nation ;
29197: LD_ADDR_OWVAR 21
29201: PUSH
29202: LD_VAR 0 1
29206: ST_TO_ADDR
// InitHc ;
29207: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29211: LD_INT 0
29213: PPUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: LD_VAR 0 3
29223: PPUSH
29224: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29228: LD_VAR 0 4
29232: PPUSH
29233: LD_VAR 0 5
29237: PPUSH
29238: CALL_OW 428
29242: PUSH
29243: LD_INT 0
29245: EQUAL
29246: IFFALSE 29270
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29248: CALL_OW 44
29252: PPUSH
29253: LD_VAR 0 4
29257: PPUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: LD_INT 1
29265: PPUSH
29266: CALL_OW 48
// end ;
29270: LD_VAR 0 6
29274: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
// uc_side := your_side ;
29279: LD_ADDR_OWVAR 20
29283: PUSH
29284: LD_OWVAR 2
29288: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29289: LD_VAR 0 1
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: LD_INT 4
29305: PUSH
29306: LD_INT 5
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: IN
29316: IFFALSE 29328
// uc_nation := nation_american else
29318: LD_ADDR_OWVAR 21
29322: PUSH
29323: LD_INT 1
29325: ST_TO_ADDR
29326: GO 29371
// if chassis in [ 11 , 12 , 13 , 14 ] then
29328: LD_VAR 0 1
29332: PUSH
29333: LD_INT 11
29335: PUSH
29336: LD_INT 12
29338: PUSH
29339: LD_INT 13
29341: PUSH
29342: LD_INT 14
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: IN
29351: IFFALSE 29363
// uc_nation := nation_arabian else
29353: LD_ADDR_OWVAR 21
29357: PUSH
29358: LD_INT 2
29360: ST_TO_ADDR
29361: GO 29371
// uc_nation := nation_russian ;
29363: LD_ADDR_OWVAR 21
29367: PUSH
29368: LD_INT 3
29370: ST_TO_ADDR
// vc_chassis := chassis ;
29371: LD_ADDR_OWVAR 37
29375: PUSH
29376: LD_VAR 0 1
29380: ST_TO_ADDR
// vc_engine := engine ;
29381: LD_ADDR_OWVAR 39
29385: PUSH
29386: LD_VAR 0 2
29390: ST_TO_ADDR
// vc_control := control ;
29391: LD_ADDR_OWVAR 38
29395: PUSH
29396: LD_VAR 0 3
29400: ST_TO_ADDR
// vc_weapon := weapon ;
29401: LD_ADDR_OWVAR 40
29405: PUSH
29406: LD_VAR 0 4
29410: ST_TO_ADDR
// un := CreateVehicle ;
29411: LD_ADDR_VAR 0 8
29415: PUSH
29416: CALL_OW 45
29420: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29421: LD_VAR 0 8
29425: PPUSH
29426: LD_INT 0
29428: PPUSH
29429: LD_INT 5
29431: PPUSH
29432: CALL_OW 12
29436: PPUSH
29437: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29441: LD_VAR 0 8
29445: PPUSH
29446: LD_VAR 0 5
29450: PPUSH
29451: LD_VAR 0 6
29455: PPUSH
29456: LD_INT 1
29458: PPUSH
29459: CALL_OW 48
// end ;
29463: LD_VAR 0 7
29467: RET
// export hInvincible ; every 1 do
29468: GO 29470
29470: DISABLE
// hInvincible := [ ] ;
29471: LD_ADDR_EXP 104
29475: PUSH
29476: EMPTY
29477: ST_TO_ADDR
29478: END
// every 10 do var i ;
29479: GO 29481
29481: DISABLE
29482: LD_INT 0
29484: PPUSH
// begin enable ;
29485: ENABLE
// if not hInvincible then
29486: LD_EXP 104
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29539
// for i in hInvincible do
29495: LD_ADDR_VAR 0 1
29499: PUSH
29500: LD_EXP 104
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29537
// if GetLives ( i ) < 1000 then
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 256
29517: PUSH
29518: LD_INT 1000
29520: LESS
29521: IFFALSE 29535
// SetLives ( i , 1000 ) ;
29523: LD_VAR 0 1
29527: PPUSH
29528: LD_INT 1000
29530: PPUSH
29531: CALL_OW 234
29535: GO 29505
29537: POP
29538: POP
// end ;
29539: PPOPN 1
29541: END
// export function hHackInvincible ; var i ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29546: LD_ADDR_VAR 0 2
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 21
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 21
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 69
29583: PUSH
29584: FOR_IN
29585: IFFALSE 29646
// if IsSelected ( i ) then
29587: LD_VAR 0 2
29591: PPUSH
29592: CALL_OW 306
29596: IFFALSE 29644
// begin if i in hInvincible then
29598: LD_VAR 0 2
29602: PUSH
29603: LD_EXP 104
29607: IN
29608: IFFALSE 29628
// hInvincible := hInvincible diff i else
29610: LD_ADDR_EXP 104
29614: PUSH
29615: LD_EXP 104
29619: PUSH
29620: LD_VAR 0 2
29624: DIFF
29625: ST_TO_ADDR
29626: GO 29644
// hInvincible := hInvincible union i ;
29628: LD_ADDR_EXP 104
29632: PUSH
29633: LD_EXP 104
29637: PUSH
29638: LD_VAR 0 2
29642: UNION
29643: ST_TO_ADDR
// end ;
29644: GO 29584
29646: POP
29647: POP
// end ;
29648: LD_VAR 0 1
29652: RET
// export function hHackInvisible ; var i , j ; begin
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29658: LD_ADDR_VAR 0 2
29662: PUSH
29663: LD_INT 21
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PPUSH
29673: CALL_OW 69
29677: PUSH
29678: FOR_IN
29679: IFFALSE 29703
// if IsSelected ( i ) then
29681: LD_VAR 0 2
29685: PPUSH
29686: CALL_OW 306
29690: IFFALSE 29701
// ComForceInvisible ( i ) ;
29692: LD_VAR 0 2
29696: PPUSH
29697: CALL_OW 496
29701: GO 29678
29703: POP
29704: POP
// end ;
29705: LD_VAR 0 1
29709: RET
// export function hHackChangeYourSide ; begin
29710: LD_INT 0
29712: PPUSH
// if your_side = 8 then
29713: LD_OWVAR 2
29717: PUSH
29718: LD_INT 8
29720: EQUAL
29721: IFFALSE 29733
// your_side := 0 else
29723: LD_ADDR_OWVAR 2
29727: PUSH
29728: LD_INT 0
29730: ST_TO_ADDR
29731: GO 29747
// your_side := your_side + 1 ;
29733: LD_ADDR_OWVAR 2
29737: PUSH
29738: LD_OWVAR 2
29742: PUSH
29743: LD_INT 1
29745: PLUS
29746: ST_TO_ADDR
// end ;
29747: LD_VAR 0 1
29751: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
29756: PPUSH
// for i in all_units do
29757: LD_ADDR_VAR 0 2
29761: PUSH
29762: LD_OWVAR 3
29766: PUSH
29767: FOR_IN
29768: IFFALSE 29846
// if IsSelected ( i ) then
29770: LD_VAR 0 2
29774: PPUSH
29775: CALL_OW 306
29779: IFFALSE 29844
// begin j := GetSide ( i ) ;
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: LD_VAR 0 2
29790: PPUSH
29791: CALL_OW 255
29795: ST_TO_ADDR
// if j = 8 then
29796: LD_VAR 0 3
29800: PUSH
29801: LD_INT 8
29803: EQUAL
29804: IFFALSE 29816
// j := 0 else
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 0
29813: ST_TO_ADDR
29814: GO 29830
// j := j + 1 ;
29816: LD_ADDR_VAR 0 3
29820: PUSH
29821: LD_VAR 0 3
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: ST_TO_ADDR
// SetSide ( i , j ) ;
29830: LD_VAR 0 2
29834: PPUSH
29835: LD_VAR 0 3
29839: PPUSH
29840: CALL_OW 235
// end ;
29844: GO 29767
29846: POP
29847: POP
// end ;
29848: LD_VAR 0 1
29852: RET
// export function hHackFog ; begin
29853: LD_INT 0
29855: PPUSH
// FogOff ( true ) ;
29856: LD_INT 1
29858: PPUSH
29859: CALL_OW 344
// end ;
29863: LD_VAR 0 1
29867: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29868: LD_INT 0
29870: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29871: LD_VAR 0 1
29875: PPUSH
29876: LD_VAR 0 2
29880: PPUSH
29881: LD_VAR 0 3
29885: PPUSH
29886: LD_INT 1
29888: PPUSH
29889: LD_INT 1
29891: PPUSH
29892: CALL_OW 483
// CenterOnXY ( x , y ) ;
29896: LD_VAR 0 2
29900: PPUSH
29901: LD_VAR 0 3
29905: PPUSH
29906: CALL_OW 84
// end ; end_of_file end_of_file
29910: LD_VAR 0 4
29914: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29915: LD_INT 0
29917: PPUSH
// ar_miner := 81 ;
29918: LD_ADDR_EXP 112
29922: PUSH
29923: LD_INT 81
29925: ST_TO_ADDR
// ar_crane := 88 ;
29926: LD_ADDR_EXP 111
29930: PUSH
29931: LD_INT 88
29933: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29934: LD_ADDR_EXP 106
29938: PUSH
29939: LD_INT 89
29941: ST_TO_ADDR
// us_hack := 99 ;
29942: LD_ADDR_EXP 107
29946: PUSH
29947: LD_INT 99
29949: ST_TO_ADDR
// us_artillery := 97 ;
29950: LD_ADDR_EXP 108
29954: PUSH
29955: LD_INT 97
29957: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29958: LD_ADDR_EXP 109
29962: PUSH
29963: LD_INT 91
29965: ST_TO_ADDR
// ar_mortar := 92 ;
29966: LD_ADDR_EXP 110
29970: PUSH
29971: LD_INT 92
29973: ST_TO_ADDR
// ru_radar := 98 ;
29974: LD_ADDR_EXP 105
29978: PUSH
29979: LD_INT 98
29981: ST_TO_ADDR
// tech_Artillery := 80 ;
29982: LD_ADDR_EXP 113
29986: PUSH
29987: LD_INT 80
29989: ST_TO_ADDR
// tech_RadMat := 81 ;
29990: LD_ADDR_EXP 114
29994: PUSH
29995: LD_INT 81
29997: ST_TO_ADDR
// tech_BasicTools := 82 ;
29998: LD_ADDR_EXP 115
30002: PUSH
30003: LD_INT 82
30005: ST_TO_ADDR
// tech_Cargo := 83 ;
30006: LD_ADDR_EXP 116
30010: PUSH
30011: LD_INT 83
30013: ST_TO_ADDR
// tech_Track := 84 ;
30014: LD_ADDR_EXP 117
30018: PUSH
30019: LD_INT 84
30021: ST_TO_ADDR
// tech_Crane := 85 ;
30022: LD_ADDR_EXP 118
30026: PUSH
30027: LD_INT 85
30029: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30030: LD_ADDR_EXP 119
30034: PUSH
30035: LD_INT 86
30037: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30038: LD_ADDR_EXP 120
30042: PUSH
30043: LD_INT 87
30045: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30046: LD_ADDR_EXP 121
30050: PUSH
30051: LD_INT 88
30053: ST_TO_ADDR
// class_mastodont := 31 ;
30054: LD_ADDR_EXP 122
30058: PUSH
30059: LD_INT 31
30061: ST_TO_ADDR
// class_horse := 21 ;
30062: LD_ADDR_EXP 123
30066: PUSH
30067: LD_INT 21
30069: ST_TO_ADDR
// end ;
30070: LD_VAR 0 1
30074: RET
// every 1 do
30075: GO 30077
30077: DISABLE
// InitGlobalVariables ; end_of_file
30078: CALL 29915 0 0
30082: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30083: LD_INT 0
30085: PPUSH
30086: PPUSH
// if exist_mode then
30087: LD_VAR 0 2
30091: IFFALSE 30116
// unit := CreateCharacter ( prefix & ident ) else
30093: LD_ADDR_VAR 0 5
30097: PUSH
30098: LD_VAR 0 3
30102: PUSH
30103: LD_VAR 0 1
30107: STR
30108: PPUSH
30109: CALL_OW 34
30113: ST_TO_ADDR
30114: GO 30131
// unit := NewCharacter ( ident ) ;
30116: LD_ADDR_VAR 0 5
30120: PUSH
30121: LD_VAR 0 1
30125: PPUSH
30126: CALL_OW 25
30130: ST_TO_ADDR
// result := unit ;
30131: LD_ADDR_VAR 0 4
30135: PUSH
30136: LD_VAR 0 5
30140: ST_TO_ADDR
// end ;
30141: LD_VAR 0 4
30145: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
// if not side or not nation then
30150: LD_VAR 0 1
30154: NOT
30155: PUSH
30156: LD_VAR 0 2
30160: NOT
30161: OR
30162: IFFALSE 30166
// exit ;
30164: GO 30934
// case nation of nation_american :
30166: LD_VAR 0 2
30170: PUSH
30171: LD_INT 1
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30393
30179: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30180: LD_ADDR_VAR 0 4
30184: PUSH
30185: LD_INT 35
30187: PUSH
30188: LD_INT 45
30190: PUSH
30191: LD_INT 46
30193: PUSH
30194: LD_INT 47
30196: PUSH
30197: LD_INT 82
30199: PUSH
30200: LD_INT 83
30202: PUSH
30203: LD_INT 84
30205: PUSH
30206: LD_INT 85
30208: PUSH
30209: LD_INT 86
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 6
30220: PUSH
30221: LD_INT 15
30223: PUSH
30224: LD_INT 16
30226: PUSH
30227: LD_INT 7
30229: PUSH
30230: LD_INT 12
30232: PUSH
30233: LD_INT 13
30235: PUSH
30236: LD_INT 10
30238: PUSH
30239: LD_INT 14
30241: PUSH
30242: LD_INT 20
30244: PUSH
30245: LD_INT 21
30247: PUSH
30248: LD_INT 22
30250: PUSH
30251: LD_INT 25
30253: PUSH
30254: LD_INT 32
30256: PUSH
30257: LD_INT 27
30259: PUSH
30260: LD_INT 36
30262: PUSH
30263: LD_INT 69
30265: PUSH
30266: LD_INT 39
30268: PUSH
30269: LD_INT 34
30271: PUSH
30272: LD_INT 40
30274: PUSH
30275: LD_INT 48
30277: PUSH
30278: LD_INT 49
30280: PUSH
30281: LD_INT 50
30283: PUSH
30284: LD_INT 51
30286: PUSH
30287: LD_INT 52
30289: PUSH
30290: LD_INT 53
30292: PUSH
30293: LD_INT 54
30295: PUSH
30296: LD_INT 55
30298: PUSH
30299: LD_INT 56
30301: PUSH
30302: LD_INT 57
30304: PUSH
30305: LD_INT 58
30307: PUSH
30308: LD_INT 59
30310: PUSH
30311: LD_INT 60
30313: PUSH
30314: LD_INT 61
30316: PUSH
30317: LD_INT 62
30319: PUSH
30320: LD_INT 80
30322: PUSH
30323: LD_INT 82
30325: PUSH
30326: LD_INT 83
30328: PUSH
30329: LD_INT 84
30331: PUSH
30332: LD_INT 85
30334: PUSH
30335: LD_INT 86
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
30391: GO 30858
30393: LD_INT 2
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30627
30401: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30402: LD_ADDR_VAR 0 4
30406: PUSH
30407: LD_INT 35
30409: PUSH
30410: LD_INT 45
30412: PUSH
30413: LD_INT 46
30415: PUSH
30416: LD_INT 47
30418: PUSH
30419: LD_INT 82
30421: PUSH
30422: LD_INT 83
30424: PUSH
30425: LD_INT 84
30427: PUSH
30428: LD_INT 85
30430: PUSH
30431: LD_INT 87
30433: PUSH
30434: LD_INT 70
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 11
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: LD_INT 4
30448: PUSH
30449: LD_INT 5
30451: PUSH
30452: LD_INT 6
30454: PUSH
30455: LD_INT 15
30457: PUSH
30458: LD_INT 18
30460: PUSH
30461: LD_INT 7
30463: PUSH
30464: LD_INT 17
30466: PUSH
30467: LD_INT 8
30469: PUSH
30470: LD_INT 20
30472: PUSH
30473: LD_INT 21
30475: PUSH
30476: LD_INT 22
30478: PUSH
30479: LD_INT 72
30481: PUSH
30482: LD_INT 26
30484: PUSH
30485: LD_INT 69
30487: PUSH
30488: LD_INT 39
30490: PUSH
30491: LD_INT 40
30493: PUSH
30494: LD_INT 41
30496: PUSH
30497: LD_INT 42
30499: PUSH
30500: LD_INT 43
30502: PUSH
30503: LD_INT 48
30505: PUSH
30506: LD_INT 49
30508: PUSH
30509: LD_INT 50
30511: PUSH
30512: LD_INT 51
30514: PUSH
30515: LD_INT 52
30517: PUSH
30518: LD_INT 53
30520: PUSH
30521: LD_INT 54
30523: PUSH
30524: LD_INT 55
30526: PUSH
30527: LD_INT 56
30529: PUSH
30530: LD_INT 60
30532: PUSH
30533: LD_INT 61
30535: PUSH
30536: LD_INT 62
30538: PUSH
30539: LD_INT 66
30541: PUSH
30542: LD_INT 67
30544: PUSH
30545: LD_INT 68
30547: PUSH
30548: LD_INT 81
30550: PUSH
30551: LD_INT 82
30553: PUSH
30554: LD_INT 83
30556: PUSH
30557: LD_INT 84
30559: PUSH
30560: LD_INT 85
30562: PUSH
30563: LD_INT 87
30565: PUSH
30566: LD_INT 88
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
30625: GO 30858
30627: LD_INT 3
30629: DOUBLE
30630: EQUAL
30631: IFTRUE 30635
30633: GO 30857
30635: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30636: LD_ADDR_VAR 0 4
30640: PUSH
30641: LD_INT 46
30643: PUSH
30644: LD_INT 47
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 82
30655: PUSH
30656: LD_INT 83
30658: PUSH
30659: LD_INT 84
30661: PUSH
30662: LD_INT 85
30664: PUSH
30665: LD_INT 86
30667: PUSH
30668: LD_INT 11
30670: PUSH
30671: LD_INT 9
30673: PUSH
30674: LD_INT 20
30676: PUSH
30677: LD_INT 19
30679: PUSH
30680: LD_INT 21
30682: PUSH
30683: LD_INT 24
30685: PUSH
30686: LD_INT 22
30688: PUSH
30689: LD_INT 25
30691: PUSH
30692: LD_INT 28
30694: PUSH
30695: LD_INT 29
30697: PUSH
30698: LD_INT 30
30700: PUSH
30701: LD_INT 31
30703: PUSH
30704: LD_INT 37
30706: PUSH
30707: LD_INT 38
30709: PUSH
30710: LD_INT 32
30712: PUSH
30713: LD_INT 27
30715: PUSH
30716: LD_INT 33
30718: PUSH
30719: LD_INT 69
30721: PUSH
30722: LD_INT 39
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 40
30730: PUSH
30731: LD_INT 71
30733: PUSH
30734: LD_INT 23
30736: PUSH
30737: LD_INT 44
30739: PUSH
30740: LD_INT 48
30742: PUSH
30743: LD_INT 49
30745: PUSH
30746: LD_INT 50
30748: PUSH
30749: LD_INT 51
30751: PUSH
30752: LD_INT 52
30754: PUSH
30755: LD_INT 53
30757: PUSH
30758: LD_INT 54
30760: PUSH
30761: LD_INT 55
30763: PUSH
30764: LD_INT 56
30766: PUSH
30767: LD_INT 57
30769: PUSH
30770: LD_INT 58
30772: PUSH
30773: LD_INT 59
30775: PUSH
30776: LD_INT 63
30778: PUSH
30779: LD_INT 64
30781: PUSH
30782: LD_INT 65
30784: PUSH
30785: LD_INT 82
30787: PUSH
30788: LD_INT 83
30790: PUSH
30791: LD_INT 84
30793: PUSH
30794: LD_INT 85
30796: PUSH
30797: LD_INT 86
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: ST_TO_ADDR
30855: GO 30858
30857: POP
// if state > - 1 and state < 3 then
30858: LD_VAR 0 3
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: GREATER
30867: PUSH
30868: LD_VAR 0 3
30872: PUSH
30873: LD_INT 3
30875: LESS
30876: AND
30877: IFFALSE 30934
// for i in result do
30879: LD_ADDR_VAR 0 5
30883: PUSH
30884: LD_VAR 0 4
30888: PUSH
30889: FOR_IN
30890: IFFALSE 30932
// if GetTech ( i , side ) <> state then
30892: LD_VAR 0 5
30896: PPUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 321
30906: PUSH
30907: LD_VAR 0 3
30911: NONEQUAL
30912: IFFALSE 30930
// result := result diff i ;
30914: LD_ADDR_VAR 0 4
30918: PUSH
30919: LD_VAR 0 4
30923: PUSH
30924: LD_VAR 0 5
30928: DIFF
30929: ST_TO_ADDR
30930: GO 30889
30932: POP
30933: POP
// end ;
30934: LD_VAR 0 4
30938: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30939: LD_INT 0
30941: PPUSH
30942: PPUSH
30943: PPUSH
// result := true ;
30944: LD_ADDR_VAR 0 3
30948: PUSH
30949: LD_INT 1
30951: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30952: LD_ADDR_VAR 0 5
30956: PUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL_OW 480
30966: ST_TO_ADDR
// if not tmp then
30967: LD_VAR 0 5
30971: NOT
30972: IFFALSE 30976
// exit ;
30974: GO 31025
// for i in tmp do
30976: LD_ADDR_VAR 0 4
30980: PUSH
30981: LD_VAR 0 5
30985: PUSH
30986: FOR_IN
30987: IFFALSE 31023
// if GetTech ( i , side ) <> state_researched then
30989: LD_VAR 0 4
30993: PPUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 321
31003: PUSH
31004: LD_INT 2
31006: NONEQUAL
31007: IFFALSE 31021
// begin result := false ;
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_INT 0
31016: ST_TO_ADDR
// exit ;
31017: POP
31018: POP
31019: GO 31025
// end ;
31021: GO 30986
31023: POP
31024: POP
// end ;
31025: LD_VAR 0 3
31029: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31030: LD_INT 0
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31045: LD_VAR 0 1
31049: NOT
31050: PUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 257
31060: PUSH
31061: LD_INT 9
31063: NONEQUAL
31064: OR
31065: IFFALSE 31069
// exit ;
31067: GO 31642
// side := GetSide ( unit ) ;
31069: LD_ADDR_VAR 0 9
31073: PUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 255
31083: ST_TO_ADDR
// tech_space := tech_spacanom ;
31084: LD_ADDR_VAR 0 12
31088: PUSH
31089: LD_INT 29
31091: ST_TO_ADDR
// tech_time := tech_taurad ;
31092: LD_ADDR_VAR 0 13
31096: PUSH
31097: LD_INT 28
31099: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31100: LD_ADDR_VAR 0 11
31104: PUSH
31105: LD_VAR 0 1
31109: PPUSH
31110: CALL_OW 310
31114: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31115: LD_VAR 0 11
31119: PPUSH
31120: CALL_OW 247
31124: PUSH
31125: LD_INT 2
31127: EQUAL
31128: IFFALSE 31132
// exit ;
31130: GO 31642
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31132: LD_ADDR_VAR 0 8
31136: PUSH
31137: LD_INT 81
31139: PUSH
31140: LD_VAR 0 9
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 21
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PPUSH
31170: CALL_OW 69
31174: ST_TO_ADDR
// if not tmp then
31175: LD_VAR 0 8
31179: NOT
31180: IFFALSE 31184
// exit ;
31182: GO 31642
// if in_unit then
31184: LD_VAR 0 11
31188: IFFALSE 31212
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31190: LD_ADDR_VAR 0 10
31194: PUSH
31195: LD_VAR 0 8
31199: PPUSH
31200: LD_VAR 0 11
31204: PPUSH
31205: CALL_OW 74
31209: ST_TO_ADDR
31210: GO 31232
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31212: LD_ADDR_VAR 0 10
31216: PUSH
31217: LD_VAR 0 8
31221: PPUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 74
31231: ST_TO_ADDR
// if not enemy then
31232: LD_VAR 0 10
31236: NOT
31237: IFFALSE 31241
// exit ;
31239: GO 31642
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31241: LD_VAR 0 11
31245: PUSH
31246: LD_VAR 0 11
31250: PPUSH
31251: LD_VAR 0 10
31255: PPUSH
31256: CALL_OW 296
31260: PUSH
31261: LD_INT 13
31263: GREATER
31264: AND
31265: PUSH
31266: LD_VAR 0 1
31270: PPUSH
31271: LD_VAR 0 10
31275: PPUSH
31276: CALL_OW 296
31280: PUSH
31281: LD_INT 12
31283: GREATER
31284: OR
31285: IFFALSE 31289
// exit ;
31287: GO 31642
// missile := [ 1 ] ;
31289: LD_ADDR_VAR 0 14
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31300: LD_VAR 0 9
31304: PPUSH
31305: LD_VAR 0 12
31309: PPUSH
31310: CALL_OW 325
31314: IFFALSE 31343
// missile := Replace ( missile , missile + 1 , 2 ) ;
31316: LD_ADDR_VAR 0 14
31320: PUSH
31321: LD_VAR 0 14
31325: PPUSH
31326: LD_VAR 0 14
31330: PUSH
31331: LD_INT 1
31333: PLUS
31334: PPUSH
31335: LD_INT 2
31337: PPUSH
31338: CALL_OW 1
31342: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31343: LD_VAR 0 9
31347: PPUSH
31348: LD_VAR 0 13
31352: PPUSH
31353: CALL_OW 325
31357: PUSH
31358: LD_VAR 0 10
31362: PPUSH
31363: CALL_OW 255
31367: PPUSH
31368: LD_VAR 0 13
31372: PPUSH
31373: CALL_OW 325
31377: NOT
31378: AND
31379: IFFALSE 31408
// missile := Replace ( missile , missile + 1 , 3 ) ;
31381: LD_ADDR_VAR 0 14
31385: PUSH
31386: LD_VAR 0 14
31390: PPUSH
31391: LD_VAR 0 14
31395: PUSH
31396: LD_INT 1
31398: PLUS
31399: PPUSH
31400: LD_INT 3
31402: PPUSH
31403: CALL_OW 1
31407: ST_TO_ADDR
// if missile < 2 then
31408: LD_VAR 0 14
31412: PUSH
31413: LD_INT 2
31415: LESS
31416: IFFALSE 31420
// exit ;
31418: GO 31642
// x := GetX ( enemy ) ;
31420: LD_ADDR_VAR 0 4
31424: PUSH
31425: LD_VAR 0 10
31429: PPUSH
31430: CALL_OW 250
31434: ST_TO_ADDR
// y := GetY ( enemy ) ;
31435: LD_ADDR_VAR 0 5
31439: PUSH
31440: LD_VAR 0 10
31444: PPUSH
31445: CALL_OW 251
31449: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31450: LD_ADDR_VAR 0 6
31454: PUSH
31455: LD_VAR 0 4
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PPUSH
31464: LD_INT 1
31466: PPUSH
31467: CALL_OW 12
31471: PLUS
31472: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31473: LD_ADDR_VAR 0 7
31477: PUSH
31478: LD_VAR 0 5
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PPUSH
31487: LD_INT 1
31489: PPUSH
31490: CALL_OW 12
31494: PLUS
31495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31496: LD_VAR 0 6
31500: PPUSH
31501: LD_VAR 0 7
31505: PPUSH
31506: CALL_OW 488
31510: NOT
31511: IFFALSE 31533
// begin _x := x ;
31513: LD_ADDR_VAR 0 6
31517: PUSH
31518: LD_VAR 0 4
31522: ST_TO_ADDR
// _y := y ;
31523: LD_ADDR_VAR 0 7
31527: PUSH
31528: LD_VAR 0 5
31532: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 1
31540: PPUSH
31541: LD_VAR 0 14
31545: PPUSH
31546: CALL_OW 12
31550: ST_TO_ADDR
// case i of 1 :
31551: LD_VAR 0 3
31555: PUSH
31556: LD_INT 1
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31581
31564: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31565: LD_VAR 0 1
31569: PPUSH
31570: LD_VAR 0 10
31574: PPUSH
31575: CALL_OW 115
31579: GO 31642
31581: LD_INT 2
31583: DOUBLE
31584: EQUAL
31585: IFTRUE 31589
31587: GO 31611
31589: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31590: LD_VAR 0 1
31594: PPUSH
31595: LD_VAR 0 6
31599: PPUSH
31600: LD_VAR 0 7
31604: PPUSH
31605: CALL_OW 153
31609: GO 31642
31611: LD_INT 3
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 31641
31619: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31620: LD_VAR 0 1
31624: PPUSH
31625: LD_VAR 0 6
31629: PPUSH
31630: LD_VAR 0 7
31634: PPUSH
31635: CALL_OW 154
31639: GO 31642
31641: POP
// end ;
31642: LD_VAR 0 2
31646: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
// if not unit or not building then
31655: LD_VAR 0 1
31659: NOT
31660: PUSH
31661: LD_VAR 0 2
31665: NOT
31666: OR
31667: IFFALSE 31671
// exit ;
31669: GO 31829
// x := GetX ( building ) ;
31671: LD_ADDR_VAR 0 5
31675: PUSH
31676: LD_VAR 0 2
31680: PPUSH
31681: CALL_OW 250
31685: ST_TO_ADDR
// y := GetY ( building ) ;
31686: LD_ADDR_VAR 0 6
31690: PUSH
31691: LD_VAR 0 2
31695: PPUSH
31696: CALL_OW 251
31700: ST_TO_ADDR
// for i = 0 to 5 do
31701: LD_ADDR_VAR 0 4
31705: PUSH
31706: DOUBLE
31707: LD_INT 0
31709: DEC
31710: ST_TO_ADDR
31711: LD_INT 5
31713: PUSH
31714: FOR_TO
31715: IFFALSE 31827
// begin _x := ShiftX ( x , i , 3 ) ;
31717: LD_ADDR_VAR 0 7
31721: PUSH
31722: LD_VAR 0 5
31726: PPUSH
31727: LD_VAR 0 4
31731: PPUSH
31732: LD_INT 3
31734: PPUSH
31735: CALL_OW 272
31739: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31740: LD_ADDR_VAR 0 8
31744: PUSH
31745: LD_VAR 0 6
31749: PPUSH
31750: LD_VAR 0 4
31754: PPUSH
31755: LD_INT 3
31757: PPUSH
31758: CALL_OW 273
31762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31763: LD_VAR 0 7
31767: PPUSH
31768: LD_VAR 0 8
31772: PPUSH
31773: CALL_OW 488
31777: NOT
31778: IFFALSE 31782
// continue ;
31780: GO 31714
// if HexInfo ( _x , _y ) = 0 then
31782: LD_VAR 0 7
31786: PPUSH
31787: LD_VAR 0 8
31791: PPUSH
31792: CALL_OW 428
31796: PUSH
31797: LD_INT 0
31799: EQUAL
31800: IFFALSE 31825
// begin ComMoveXY ( unit , _x , _y ) ;
31802: LD_VAR 0 1
31806: PPUSH
31807: LD_VAR 0 7
31811: PPUSH
31812: LD_VAR 0 8
31816: PPUSH
31817: CALL_OW 111
// exit ;
31821: POP
31822: POP
31823: GO 31829
// end ; end ;
31825: GO 31714
31827: POP
31828: POP
// end ;
31829: LD_VAR 0 3
31833: RET
// export function ScanBase ( side , base_area ) ; begin
31834: LD_INT 0
31836: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: LD_VAR 0 2
31846: PPUSH
31847: LD_INT 81
31849: PUSH
31850: LD_VAR 0 1
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PPUSH
31859: CALL_OW 70
31863: ST_TO_ADDR
// end ;
31864: LD_VAR 0 3
31868: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31869: LD_INT 0
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
// result := false ;
31875: LD_ADDR_VAR 0 2
31879: PUSH
31880: LD_INT 0
31882: ST_TO_ADDR
// side := GetSide ( unit ) ;
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 255
31897: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31898: LD_ADDR_VAR 0 4
31902: PUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 248
31912: ST_TO_ADDR
// case nat of 1 :
31913: LD_VAR 0 4
31917: PUSH
31918: LD_INT 1
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// tech := tech_lassight ; 2 :
31927: LD_ADDR_VAR 0 5
31931: PUSH
31932: LD_INT 12
31934: ST_TO_ADDR
31935: GO 31976
31937: LD_INT 2
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31956
31945: POP
// tech := tech_mortar ; 3 :
31946: LD_ADDR_VAR 0 5
31950: PUSH
31951: LD_INT 41
31953: ST_TO_ADDR
31954: GO 31976
31956: LD_INT 3
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// tech := tech_bazooka ; end ;
31965: LD_ADDR_VAR 0 5
31969: PUSH
31970: LD_INT 44
31972: ST_TO_ADDR
31973: GO 31976
31975: POP
// if Researched ( side , tech ) then
31976: LD_VAR 0 3
31980: PPUSH
31981: LD_VAR 0 5
31985: PPUSH
31986: CALL_OW 325
31990: IFFALSE 32017
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31992: LD_ADDR_VAR 0 2
31996: PUSH
31997: LD_INT 5
31999: PUSH
32000: LD_INT 8
32002: PUSH
32003: LD_INT 9
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: PUSH
32011: LD_VAR 0 4
32015: ARRAY
32016: ST_TO_ADDR
// end ;
32017: LD_VAR 0 2
32021: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32022: LD_INT 0
32024: PPUSH
32025: PPUSH
32026: PPUSH
// if not mines then
32027: LD_VAR 0 2
32031: NOT
32032: IFFALSE 32036
// exit ;
32034: GO 32180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32036: LD_ADDR_VAR 0 5
32040: PUSH
32041: LD_INT 81
32043: PUSH
32044: LD_VAR 0 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 21
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PPUSH
32074: CALL_OW 69
32078: ST_TO_ADDR
// for i in mines do
32079: LD_ADDR_VAR 0 4
32083: PUSH
32084: LD_VAR 0 2
32088: PUSH
32089: FOR_IN
32090: IFFALSE 32178
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32092: LD_VAR 0 4
32096: PUSH
32097: LD_INT 1
32099: ARRAY
32100: PPUSH
32101: LD_VAR 0 4
32105: PUSH
32106: LD_INT 2
32108: ARRAY
32109: PPUSH
32110: CALL_OW 458
32114: NOT
32115: IFFALSE 32119
// continue ;
32117: GO 32089
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32119: LD_VAR 0 4
32123: PUSH
32124: LD_INT 1
32126: ARRAY
32127: PPUSH
32128: LD_VAR 0 4
32132: PUSH
32133: LD_INT 2
32135: ARRAY
32136: PPUSH
32137: CALL_OW 428
32141: PUSH
32142: LD_VAR 0 5
32146: IN
32147: IFFALSE 32176
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32149: LD_VAR 0 4
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: PPUSH
32158: LD_VAR 0 4
32162: PUSH
32163: LD_INT 2
32165: ARRAY
32166: PPUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 456
// end ;
32176: GO 32089
32178: POP
32179: POP
// end ;
32180: LD_VAR 0 3
32184: RET
// export function Count ( array ) ; var i ; begin
32185: LD_INT 0
32187: PPUSH
32188: PPUSH
// result := 0 ;
32189: LD_ADDR_VAR 0 2
32193: PUSH
32194: LD_INT 0
32196: ST_TO_ADDR
// for i in array do
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_VAR 0 1
32206: PUSH
32207: FOR_IN
32208: IFFALSE 32232
// if i then
32210: LD_VAR 0 3
32214: IFFALSE 32230
// result := result + 1 ;
32216: LD_ADDR_VAR 0 2
32220: PUSH
32221: LD_VAR 0 2
32225: PUSH
32226: LD_INT 1
32228: PLUS
32229: ST_TO_ADDR
32230: GO 32207
32232: POP
32233: POP
// end ;
32234: LD_VAR 0 2
32238: RET
// export function IsEmpty ( building ) ; begin
32239: LD_INT 0
32241: PPUSH
// if not building then
32242: LD_VAR 0 1
32246: NOT
32247: IFFALSE 32251
// exit ;
32249: GO 32294
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32251: LD_ADDR_VAR 0 2
32255: PUSH
32256: LD_VAR 0 1
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_VAR 0 1
32268: PPUSH
32269: CALL_OW 255
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 58
32280: PUSH
32281: EMPTY
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PPUSH
32288: CALL_OW 69
32292: IN
32293: ST_TO_ADDR
// end ;
32294: LD_VAR 0 2
32298: RET
// export function IsNotFull ( building ) ; begin
32299: LD_INT 0
32301: PPUSH
// if not building then
32302: LD_VAR 0 1
32306: NOT
32307: IFFALSE 32311
// exit ;
32309: GO 32330
// result := UnitsInside ( building ) < 6 ;
32311: LD_ADDR_VAR 0 2
32315: PUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: CALL_OW 313
32325: PUSH
32326: LD_INT 6
32328: LESS
32329: ST_TO_ADDR
// end ;
32330: LD_VAR 0 2
32334: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32335: LD_INT 0
32337: PPUSH
32338: PPUSH
32339: PPUSH
32340: PPUSH
// tmp := [ ] ;
32341: LD_ADDR_VAR 0 3
32345: PUSH
32346: EMPTY
32347: ST_TO_ADDR
// list := [ ] ;
32348: LD_ADDR_VAR 0 5
32352: PUSH
32353: EMPTY
32354: ST_TO_ADDR
// for i = 16 to 25 do
32355: LD_ADDR_VAR 0 4
32359: PUSH
32360: DOUBLE
32361: LD_INT 16
32363: DEC
32364: ST_TO_ADDR
32365: LD_INT 25
32367: PUSH
32368: FOR_TO
32369: IFFALSE 32442
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_VAR 0 3
32380: PUSH
32381: LD_INT 22
32383: PUSH
32384: LD_VAR 0 1
32388: PPUSH
32389: CALL_OW 255
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 91
32400: PUSH
32401: LD_VAR 0 1
32405: PUSH
32406: LD_INT 6
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 30
32416: PUSH
32417: LD_VAR 0 4
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: PPUSH
32434: CALL_OW 69
32438: ADD
32439: ST_TO_ADDR
32440: GO 32368
32442: POP
32443: POP
// for i = 1 to tmp do
32444: LD_ADDR_VAR 0 4
32448: PUSH
32449: DOUBLE
32450: LD_INT 1
32452: DEC
32453: ST_TO_ADDR
32454: LD_VAR 0 3
32458: PUSH
32459: FOR_TO
32460: IFFALSE 32548
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_VAR 0 5
32471: PUSH
32472: LD_VAR 0 3
32476: PUSH
32477: LD_VAR 0 4
32481: ARRAY
32482: PPUSH
32483: CALL_OW 266
32487: PUSH
32488: LD_VAR 0 3
32492: PUSH
32493: LD_VAR 0 4
32497: ARRAY
32498: PPUSH
32499: CALL_OW 250
32503: PUSH
32504: LD_VAR 0 3
32508: PUSH
32509: LD_VAR 0 4
32513: ARRAY
32514: PPUSH
32515: CALL_OW 251
32519: PUSH
32520: LD_VAR 0 3
32524: PUSH
32525: LD_VAR 0 4
32529: ARRAY
32530: PPUSH
32531: CALL_OW 254
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: ADD
32545: ST_TO_ADDR
32546: GO 32459
32548: POP
32549: POP
// result := list ;
32550: LD_ADDR_VAR 0 2
32554: PUSH
32555: LD_VAR 0 5
32559: ST_TO_ADDR
// end ;
32560: LD_VAR 0 2
32564: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
// if not factory then
32574: LD_VAR 0 1
32578: NOT
32579: IFFALSE 32583
// exit ;
32581: GO 33176
// if control = control_apeman then
32583: LD_VAR 0 4
32587: PUSH
32588: LD_INT 5
32590: EQUAL
32591: IFFALSE 32700
// begin tmp := UnitsInside ( factory ) ;
32593: LD_ADDR_VAR 0 8
32597: PUSH
32598: LD_VAR 0 1
32602: PPUSH
32603: CALL_OW 313
32607: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32608: LD_VAR 0 8
32612: PPUSH
32613: LD_INT 25
32615: PUSH
32616: LD_INT 12
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PPUSH
32623: CALL_OW 72
32627: NOT
32628: IFFALSE 32638
// control := control_manual ;
32630: LD_ADDR_VAR 0 4
32634: PUSH
32635: LD_INT 1
32637: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32638: LD_ADDR_VAR 0 8
32642: PUSH
32643: LD_VAR 0 1
32647: PPUSH
32648: CALL 32335 0 1
32652: ST_TO_ADDR
// if tmp then
32653: LD_VAR 0 8
32657: IFFALSE 32700
// begin for i in tmp do
32659: LD_ADDR_VAR 0 7
32663: PUSH
32664: LD_VAR 0 8
32668: PUSH
32669: FOR_IN
32670: IFFALSE 32698
// if i [ 1 ] = b_ext_radio then
32672: LD_VAR 0 7
32676: PUSH
32677: LD_INT 1
32679: ARRAY
32680: PUSH
32681: LD_INT 22
32683: EQUAL
32684: IFFALSE 32696
// begin control := control_remote ;
32686: LD_ADDR_VAR 0 4
32690: PUSH
32691: LD_INT 2
32693: ST_TO_ADDR
// break ;
32694: GO 32698
// end ;
32696: GO 32669
32698: POP
32699: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32700: LD_VAR 0 1
32704: PPUSH
32705: LD_VAR 0 2
32709: PPUSH
32710: LD_VAR 0 3
32714: PPUSH
32715: LD_VAR 0 4
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL_OW 448
32729: IFFALSE 32764
// begin result := [ chassis , engine , control , weapon ] ;
32731: LD_ADDR_VAR 0 6
32735: PUSH
32736: LD_VAR 0 2
32740: PUSH
32741: LD_VAR 0 3
32745: PUSH
32746: LD_VAR 0 4
32750: PUSH
32751: LD_VAR 0 5
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// exit ;
32762: GO 33176
// end ; _chassis := AvailableChassisList ( factory ) ;
32764: LD_ADDR_VAR 0 9
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 475
32778: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32779: LD_ADDR_VAR 0 11
32783: PUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 476
32793: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32794: LD_ADDR_VAR 0 12
32798: PUSH
32799: LD_VAR 0 1
32803: PPUSH
32804: CALL_OW 477
32808: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32809: LD_ADDR_VAR 0 10
32813: PUSH
32814: LD_VAR 0 1
32818: PPUSH
32819: CALL_OW 478
32823: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32824: LD_VAR 0 9
32828: NOT
32829: PUSH
32830: LD_VAR 0 11
32834: NOT
32835: OR
32836: PUSH
32837: LD_VAR 0 12
32841: NOT
32842: OR
32843: PUSH
32844: LD_VAR 0 10
32848: NOT
32849: OR
32850: IFFALSE 32885
// begin result := [ chassis , engine , control , weapon ] ;
32852: LD_ADDR_VAR 0 6
32856: PUSH
32857: LD_VAR 0 2
32861: PUSH
32862: LD_VAR 0 3
32866: PUSH
32867: LD_VAR 0 4
32871: PUSH
32872: LD_VAR 0 5
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: ST_TO_ADDR
// exit ;
32883: GO 33176
// end ; if not chassis in _chassis then
32885: LD_VAR 0 2
32889: PUSH
32890: LD_VAR 0 9
32894: IN
32895: NOT
32896: IFFALSE 32922
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_VAR 0 9
32907: PUSH
32908: LD_INT 1
32910: PPUSH
32911: LD_VAR 0 9
32915: PPUSH
32916: CALL_OW 12
32920: ARRAY
32921: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_VAR 0 3
32931: PPUSH
32932: CALL 33181 0 2
32936: NOT
32937: IFFALSE 32996
// repeat engine := _engine [ 1 ] ;
32939: LD_ADDR_VAR 0 3
32943: PUSH
32944: LD_VAR 0 11
32948: PUSH
32949: LD_INT 1
32951: ARRAY
32952: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32953: LD_ADDR_VAR 0 11
32957: PUSH
32958: LD_VAR 0 11
32962: PPUSH
32963: LD_INT 1
32965: PPUSH
32966: CALL_OW 3
32970: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 3
32980: PPUSH
32981: CALL 33181 0 2
32985: PUSH
32986: LD_VAR 0 11
32990: PUSH
32991: EMPTY
32992: EQUAL
32993: OR
32994: IFFALSE 32939
// if not control in _control then
32996: LD_VAR 0 4
33000: PUSH
33001: LD_VAR 0 12
33005: IN
33006: NOT
33007: IFFALSE 33033
// control := _control [ rand ( 1 , _control ) ] ;
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: LD_VAR 0 12
33018: PUSH
33019: LD_INT 1
33021: PPUSH
33022: LD_VAR 0 12
33026: PPUSH
33027: CALL_OW 12
33031: ARRAY
33032: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33033: LD_VAR 0 2
33037: PPUSH
33038: LD_VAR 0 5
33042: PPUSH
33043: CALL 33401 0 2
33047: NOT
33048: IFFALSE 33107
// repeat weapon := _weapon [ 1 ] ;
33050: LD_ADDR_VAR 0 5
33054: PUSH
33055: LD_VAR 0 10
33059: PUSH
33060: LD_INT 1
33062: ARRAY
33063: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33064: LD_ADDR_VAR 0 10
33068: PUSH
33069: LD_VAR 0 10
33073: PPUSH
33074: LD_INT 1
33076: PPUSH
33077: CALL_OW 3
33081: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33082: LD_VAR 0 2
33086: PPUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: CALL 33401 0 2
33096: PUSH
33097: LD_VAR 0 10
33101: PUSH
33102: EMPTY
33103: EQUAL
33104: OR
33105: IFFALSE 33050
// result := [ ] ;
33107: LD_ADDR_VAR 0 6
33111: PUSH
33112: EMPTY
33113: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33114: LD_VAR 0 1
33118: PPUSH
33119: LD_VAR 0 2
33123: PPUSH
33124: LD_VAR 0 3
33128: PPUSH
33129: LD_VAR 0 4
33133: PPUSH
33134: LD_VAR 0 5
33138: PPUSH
33139: CALL_OW 448
33143: IFFALSE 33176
// result := [ chassis , engine , control , weapon ] ;
33145: LD_ADDR_VAR 0 6
33149: PUSH
33150: LD_VAR 0 2
33154: PUSH
33155: LD_VAR 0 3
33159: PUSH
33160: LD_VAR 0 4
33164: PUSH
33165: LD_VAR 0 5
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// end ;
33176: LD_VAR 0 6
33180: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33181: LD_INT 0
33183: PPUSH
// if not chassis or not engine then
33184: LD_VAR 0 1
33188: NOT
33189: PUSH
33190: LD_VAR 0 2
33194: NOT
33195: OR
33196: IFFALSE 33200
// exit ;
33198: GO 33396
// case engine of engine_solar :
33200: LD_VAR 0 2
33204: PUSH
33205: LD_INT 2
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33213
33211: GO 33251
33213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33214: LD_ADDR_VAR 0 3
33218: PUSH
33219: LD_INT 11
33221: PUSH
33222: LD_INT 12
33224: PUSH
33225: LD_INT 13
33227: PUSH
33228: LD_INT 14
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: ST_TO_ADDR
33249: GO 33380
33251: LD_INT 1
33253: DOUBLE
33254: EQUAL
33255: IFTRUE 33259
33257: GO 33321
33259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33260: LD_ADDR_VAR 0 3
33264: PUSH
33265: LD_INT 11
33267: PUSH
33268: LD_INT 12
33270: PUSH
33271: LD_INT 13
33273: PUSH
33274: LD_INT 14
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: LD_INT 3
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 5
33291: PUSH
33292: LD_INT 21
33294: PUSH
33295: LD_INT 23
33297: PUSH
33298: LD_INT 22
33300: PUSH
33301: LD_INT 24
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
33319: GO 33380
33321: LD_INT 3
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33329
33327: GO 33379
33329: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_INT 13
33337: PUSH
33338: LD_INT 14
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: LD_INT 4
33349: PUSH
33350: LD_INT 5
33352: PUSH
33353: LD_INT 21
33355: PUSH
33356: LD_INT 22
33358: PUSH
33359: LD_INT 23
33361: PUSH
33362: LD_INT 24
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: ST_TO_ADDR
33377: GO 33380
33379: POP
// result := ( chassis in result ) ;
33380: LD_ADDR_VAR 0 3
33384: PUSH
33385: LD_VAR 0 1
33389: PUSH
33390: LD_VAR 0 3
33394: IN
33395: ST_TO_ADDR
// end ;
33396: LD_VAR 0 3
33400: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33401: LD_INT 0
33403: PPUSH
// if not chassis or not weapon then
33404: LD_VAR 0 1
33408: NOT
33409: PUSH
33410: LD_VAR 0 2
33414: NOT
33415: OR
33416: IFFALSE 33420
// exit ;
33418: GO 34482
// case weapon of us_machine_gun :
33420: LD_VAR 0 2
33424: PUSH
33425: LD_INT 2
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33463
33433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 34466
33463: LD_INT 3
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33501
33471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 5
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
33499: GO 34466
33501: LD_INT 11
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33539
33509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 34466
33539: LD_INT 4
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33573
33547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
33571: GO 34466
33573: LD_INT 5
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33607
33581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
33605: GO 34466
33607: LD_INT 9
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33641
33615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: LD_INT 5
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 34466
33641: LD_INT 7
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33675
33649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
33673: GO 34466
33675: LD_INT 12
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33709
33683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
33707: GO 34466
33709: LD_INT 13
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33743
33717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 4
33731: PUSH
33732: LD_INT 5
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 34466
33743: LD_INT 14
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33769
33751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 4
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: ST_TO_ADDR
33767: GO 34466
33769: LD_INT 6
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33795
33777: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: LD_INT 5
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 34466
33795: LD_INT 10
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33821
33803: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: LD_INT 5
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: ST_TO_ADDR
33819: GO 34466
33821: LD_INT 22
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33855
33829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 11
33837: PUSH
33838: LD_INT 12
33840: PUSH
33841: LD_INT 13
33843: PUSH
33844: LD_INT 14
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: ST_TO_ADDR
33853: GO 34466
33855: LD_INT 23
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33889
33863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33864: LD_ADDR_VAR 0 3
33868: PUSH
33869: LD_INT 11
33871: PUSH
33872: LD_INT 12
33874: PUSH
33875: LD_INT 13
33877: PUSH
33878: LD_INT 14
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
33887: GO 34466
33889: LD_INT 24
33891: DOUBLE
33892: EQUAL
33893: IFTRUE 33897
33895: GO 33923
33897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33898: LD_ADDR_VAR 0 3
33902: PUSH
33903: LD_INT 11
33905: PUSH
33906: LD_INT 12
33908: PUSH
33909: LD_INT 13
33911: PUSH
33912: LD_INT 14
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: ST_TO_ADDR
33921: GO 34466
33923: LD_INT 30
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33957
33931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_INT 11
33939: PUSH
33940: LD_INT 12
33942: PUSH
33943: LD_INT 13
33945: PUSH
33946: LD_INT 14
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
33955: GO 34466
33957: LD_INT 25
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 33965
33963: GO 33983
33965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: LD_INT 13
33973: PUSH
33974: LD_INT 14
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: ST_TO_ADDR
33981: GO 34466
33983: LD_INT 27
33985: DOUBLE
33986: EQUAL
33987: IFTRUE 33991
33989: GO 34009
33991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33992: LD_ADDR_VAR 0 3
33996: PUSH
33997: LD_INT 13
33999: PUSH
34000: LD_INT 14
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: ST_TO_ADDR
34007: GO 34466
34009: LD_EXP 110
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34045
34019: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34020: LD_ADDR_VAR 0 3
34024: PUSH
34025: LD_INT 11
34027: PUSH
34028: LD_INT 12
34030: PUSH
34031: LD_INT 13
34033: PUSH
34034: LD_INT 14
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: ST_TO_ADDR
34043: GO 34466
34045: LD_INT 28
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34071
34053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34054: LD_ADDR_VAR 0 3
34058: PUSH
34059: LD_INT 13
34061: PUSH
34062: LD_INT 14
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: ST_TO_ADDR
34069: GO 34466
34071: LD_INT 29
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34097
34079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_INT 13
34087: PUSH
34088: LD_INT 14
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: ST_TO_ADDR
34095: GO 34466
34097: LD_INT 31
34099: DOUBLE
34100: EQUAL
34101: IFTRUE 34105
34103: GO 34123
34105: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34106: LD_ADDR_VAR 0 3
34110: PUSH
34111: LD_INT 13
34113: PUSH
34114: LD_INT 14
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: ST_TO_ADDR
34121: GO 34466
34123: LD_INT 26
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34149
34131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_INT 13
34139: PUSH
34140: LD_INT 14
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: ST_TO_ADDR
34147: GO 34466
34149: LD_INT 42
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34183
34157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_INT 21
34165: PUSH
34166: LD_INT 22
34168: PUSH
34169: LD_INT 23
34171: PUSH
34172: LD_INT 24
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
34181: GO 34466
34183: LD_INT 43
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34191
34189: GO 34217
34191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34192: LD_ADDR_VAR 0 3
34196: PUSH
34197: LD_INT 21
34199: PUSH
34200: LD_INT 22
34202: PUSH
34203: LD_INT 23
34205: PUSH
34206: LD_INT 24
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: ST_TO_ADDR
34215: GO 34466
34217: LD_INT 44
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34251
34225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 22
34236: PUSH
34237: LD_INT 23
34239: PUSH
34240: LD_INT 24
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: ST_TO_ADDR
34249: GO 34466
34251: LD_INT 45
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34259
34257: GO 34285
34259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34260: LD_ADDR_VAR 0 3
34264: PUSH
34265: LD_INT 21
34267: PUSH
34268: LD_INT 22
34270: PUSH
34271: LD_INT 23
34273: PUSH
34274: LD_INT 24
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
34283: GO 34466
34285: LD_INT 49
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34319
34293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 21
34301: PUSH
34302: LD_INT 22
34304: PUSH
34305: LD_INT 23
34307: PUSH
34308: LD_INT 24
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
34317: GO 34466
34319: LD_INT 51
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34327
34325: GO 34353
34327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_INT 21
34335: PUSH
34336: LD_INT 22
34338: PUSH
34339: LD_INT 23
34341: PUSH
34342: LD_INT 24
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
34351: GO 34466
34353: LD_INT 52
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34387
34361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 21
34369: PUSH
34370: LD_INT 22
34372: PUSH
34373: LD_INT 23
34375: PUSH
34376: LD_INT 24
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 34466
34387: LD_INT 53
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34413
34395: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 23
34403: PUSH
34404: LD_INT 24
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: ST_TO_ADDR
34411: GO 34466
34413: LD_INT 46
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34439
34421: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_INT 23
34429: PUSH
34430: LD_INT 24
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: ST_TO_ADDR
34437: GO 34466
34439: LD_INT 47
34441: DOUBLE
34442: EQUAL
34443: IFTRUE 34447
34445: GO 34465
34447: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: LD_INT 23
34455: PUSH
34456: LD_INT 24
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: ST_TO_ADDR
34463: GO 34466
34465: POP
// result := ( chassis in result ) ;
34466: LD_ADDR_VAR 0 3
34470: PUSH
34471: LD_VAR 0 1
34475: PUSH
34476: LD_VAR 0 3
34480: IN
34481: ST_TO_ADDR
// end ;
34482: LD_VAR 0 3
34486: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34487: LD_INT 0
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
// result := array ;
34496: LD_ADDR_VAR 0 5
34500: PUSH
34501: LD_VAR 0 1
34505: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34506: LD_VAR 0 1
34510: NOT
34511: PUSH
34512: LD_VAR 0 2
34516: NOT
34517: OR
34518: PUSH
34519: LD_VAR 0 3
34523: NOT
34524: OR
34525: PUSH
34526: LD_VAR 0 2
34530: PUSH
34531: LD_VAR 0 1
34535: GREATER
34536: OR
34537: PUSH
34538: LD_VAR 0 3
34542: PUSH
34543: LD_VAR 0 1
34547: GREATER
34548: OR
34549: IFFALSE 34553
// exit ;
34551: GO 34849
// if direction then
34553: LD_VAR 0 4
34557: IFFALSE 34621
// begin d := 1 ;
34559: LD_ADDR_VAR 0 9
34563: PUSH
34564: LD_INT 1
34566: ST_TO_ADDR
// if i_from > i_to then
34567: LD_VAR 0 2
34571: PUSH
34572: LD_VAR 0 3
34576: GREATER
34577: IFFALSE 34603
// length := ( array - i_from ) + i_to else
34579: LD_ADDR_VAR 0 11
34583: PUSH
34584: LD_VAR 0 1
34588: PUSH
34589: LD_VAR 0 2
34593: MINUS
34594: PUSH
34595: LD_VAR 0 3
34599: PLUS
34600: ST_TO_ADDR
34601: GO 34619
// length := i_to - i_from ;
34603: LD_ADDR_VAR 0 11
34607: PUSH
34608: LD_VAR 0 3
34612: PUSH
34613: LD_VAR 0 2
34617: MINUS
34618: ST_TO_ADDR
// end else
34619: GO 34682
// begin d := - 1 ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: ST_TO_ADDR
// if i_from > i_to then
34630: LD_VAR 0 2
34634: PUSH
34635: LD_VAR 0 3
34639: GREATER
34640: IFFALSE 34660
// length := i_from - i_to else
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: LD_VAR 0 2
34651: PUSH
34652: LD_VAR 0 3
34656: MINUS
34657: ST_TO_ADDR
34658: GO 34682
// length := ( array - i_to ) + i_from ;
34660: LD_ADDR_VAR 0 11
34664: PUSH
34665: LD_VAR 0 1
34669: PUSH
34670: LD_VAR 0 3
34674: MINUS
34675: PUSH
34676: LD_VAR 0 2
34680: PLUS
34681: ST_TO_ADDR
// end ; if not length then
34682: LD_VAR 0 11
34686: NOT
34687: IFFALSE 34691
// exit ;
34689: GO 34849
// tmp := array ;
34691: LD_ADDR_VAR 0 10
34695: PUSH
34696: LD_VAR 0 1
34700: ST_TO_ADDR
// for i = 1 to length do
34701: LD_ADDR_VAR 0 6
34705: PUSH
34706: DOUBLE
34707: LD_INT 1
34709: DEC
34710: ST_TO_ADDR
34711: LD_VAR 0 11
34715: PUSH
34716: FOR_TO
34717: IFFALSE 34837
// begin for j = 1 to array do
34719: LD_ADDR_VAR 0 7
34723: PUSH
34724: DOUBLE
34725: LD_INT 1
34727: DEC
34728: ST_TO_ADDR
34729: LD_VAR 0 1
34733: PUSH
34734: FOR_TO
34735: IFFALSE 34823
// begin k := j + d ;
34737: LD_ADDR_VAR 0 8
34741: PUSH
34742: LD_VAR 0 7
34746: PUSH
34747: LD_VAR 0 9
34751: PLUS
34752: ST_TO_ADDR
// if k > array then
34753: LD_VAR 0 8
34757: PUSH
34758: LD_VAR 0 1
34762: GREATER
34763: IFFALSE 34773
// k := 1 ;
34765: LD_ADDR_VAR 0 8
34769: PUSH
34770: LD_INT 1
34772: ST_TO_ADDR
// if not k then
34773: LD_VAR 0 8
34777: NOT
34778: IFFALSE 34790
// k := array ;
34780: LD_ADDR_VAR 0 8
34784: PUSH
34785: LD_VAR 0 1
34789: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34790: LD_ADDR_VAR 0 10
34794: PUSH
34795: LD_VAR 0 10
34799: PPUSH
34800: LD_VAR 0 8
34804: PPUSH
34805: LD_VAR 0 1
34809: PUSH
34810: LD_VAR 0 7
34814: ARRAY
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// end ;
34821: GO 34734
34823: POP
34824: POP
// array := tmp ;
34825: LD_ADDR_VAR 0 1
34829: PUSH
34830: LD_VAR 0 10
34834: ST_TO_ADDR
// end ;
34835: GO 34716
34837: POP
34838: POP
// result := array ;
34839: LD_ADDR_VAR 0 5
34843: PUSH
34844: LD_VAR 0 1
34848: ST_TO_ADDR
// end ;
34849: LD_VAR 0 5
34853: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34854: LD_INT 0
34856: PPUSH
34857: PPUSH
// result := 0 ;
34858: LD_ADDR_VAR 0 3
34862: PUSH
34863: LD_INT 0
34865: ST_TO_ADDR
// if not array or not value in array then
34866: LD_VAR 0 1
34870: NOT
34871: PUSH
34872: LD_VAR 0 2
34876: PUSH
34877: LD_VAR 0 1
34881: IN
34882: NOT
34883: OR
34884: IFFALSE 34888
// exit ;
34886: GO 34942
// for i = 1 to array do
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: DOUBLE
34894: LD_INT 1
34896: DEC
34897: ST_TO_ADDR
34898: LD_VAR 0 1
34902: PUSH
34903: FOR_TO
34904: IFFALSE 34940
// if value = array [ i ] then
34906: LD_VAR 0 2
34910: PUSH
34911: LD_VAR 0 1
34915: PUSH
34916: LD_VAR 0 4
34920: ARRAY
34921: EQUAL
34922: IFFALSE 34938
// begin result := i ;
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_VAR 0 4
34933: ST_TO_ADDR
// exit ;
34934: POP
34935: POP
34936: GO 34942
// end ;
34938: GO 34903
34940: POP
34941: POP
// end ;
34942: LD_VAR 0 3
34946: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34947: LD_INT 0
34949: PPUSH
// vc_chassis := chassis ;
34950: LD_ADDR_OWVAR 37
34954: PUSH
34955: LD_VAR 0 1
34959: ST_TO_ADDR
// vc_engine := engine ;
34960: LD_ADDR_OWVAR 39
34964: PUSH
34965: LD_VAR 0 2
34969: ST_TO_ADDR
// vc_control := control ;
34970: LD_ADDR_OWVAR 38
34974: PUSH
34975: LD_VAR 0 3
34979: ST_TO_ADDR
// vc_weapon := weapon ;
34980: LD_ADDR_OWVAR 40
34984: PUSH
34985: LD_VAR 0 4
34989: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34990: LD_ADDR_OWVAR 41
34994: PUSH
34995: LD_VAR 0 5
34999: ST_TO_ADDR
// end ;
35000: LD_VAR 0 6
35004: RET
// export function WantPlant ( unit ) ; var task ; begin
35005: LD_INT 0
35007: PPUSH
35008: PPUSH
// result := false ;
35009: LD_ADDR_VAR 0 2
35013: PUSH
35014: LD_INT 0
35016: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 437
35031: ST_TO_ADDR
// if task then
35032: LD_VAR 0 3
35036: IFFALSE 35064
// if task [ 1 ] [ 1 ] = p then
35038: LD_VAR 0 3
35042: PUSH
35043: LD_INT 1
35045: ARRAY
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: PUSH
35051: LD_STRING p
35053: EQUAL
35054: IFFALSE 35064
// result := true ;
35056: LD_ADDR_VAR 0 2
35060: PUSH
35061: LD_INT 1
35063: ST_TO_ADDR
// end ;
35064: LD_VAR 0 2
35068: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
// if pos < 1 then
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 1
35082: LESS
35083: IFFALSE 35087
// exit ;
35085: GO 35390
// if pos = 1 then
35087: LD_VAR 0 2
35091: PUSH
35092: LD_INT 1
35094: EQUAL
35095: IFFALSE 35128
// result := Replace ( arr , pos [ 1 ] , value ) else
35097: LD_ADDR_VAR 0 4
35101: PUSH
35102: LD_VAR 0 1
35106: PPUSH
35107: LD_VAR 0 2
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: PPUSH
35116: LD_VAR 0 3
35120: PPUSH
35121: CALL_OW 1
35125: ST_TO_ADDR
35126: GO 35390
// begin tmp := arr ;
35128: LD_ADDR_VAR 0 6
35132: PUSH
35133: LD_VAR 0 1
35137: ST_TO_ADDR
// s_arr := [ tmp ] ;
35138: LD_ADDR_VAR 0 7
35142: PUSH
35143: LD_VAR 0 6
35147: PUSH
35148: EMPTY
35149: LIST
35150: ST_TO_ADDR
// for i = 1 to pos - 1 do
35151: LD_ADDR_VAR 0 5
35155: PUSH
35156: DOUBLE
35157: LD_INT 1
35159: DEC
35160: ST_TO_ADDR
35161: LD_VAR 0 2
35165: PUSH
35166: LD_INT 1
35168: MINUS
35169: PUSH
35170: FOR_TO
35171: IFFALSE 35216
// begin tmp := tmp [ pos [ i ] ] ;
35173: LD_ADDR_VAR 0 6
35177: PUSH
35178: LD_VAR 0 6
35182: PUSH
35183: LD_VAR 0 2
35187: PUSH
35188: LD_VAR 0 5
35192: ARRAY
35193: ARRAY
35194: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35195: LD_ADDR_VAR 0 7
35199: PUSH
35200: LD_VAR 0 7
35204: PUSH
35205: LD_VAR 0 6
35209: PUSH
35210: EMPTY
35211: LIST
35212: ADD
35213: ST_TO_ADDR
// end ;
35214: GO 35170
35216: POP
35217: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35218: LD_ADDR_VAR 0 6
35222: PUSH
35223: LD_VAR 0 6
35227: PPUSH
35228: LD_VAR 0 2
35232: PUSH
35233: LD_VAR 0 2
35237: ARRAY
35238: PPUSH
35239: LD_VAR 0 3
35243: PPUSH
35244: CALL_OW 1
35248: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35249: LD_ADDR_VAR 0 7
35253: PUSH
35254: LD_VAR 0 7
35258: PPUSH
35259: LD_VAR 0 7
35263: PPUSH
35264: LD_VAR 0 6
35268: PPUSH
35269: CALL_OW 1
35273: ST_TO_ADDR
// for i = s_arr downto 2 do
35274: LD_ADDR_VAR 0 5
35278: PUSH
35279: DOUBLE
35280: LD_VAR 0 7
35284: INC
35285: ST_TO_ADDR
35286: LD_INT 2
35288: PUSH
35289: FOR_DOWNTO
35290: IFFALSE 35374
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35292: LD_ADDR_VAR 0 6
35296: PUSH
35297: LD_VAR 0 7
35301: PUSH
35302: LD_VAR 0 5
35306: PUSH
35307: LD_INT 1
35309: MINUS
35310: ARRAY
35311: PPUSH
35312: LD_VAR 0 2
35316: PUSH
35317: LD_VAR 0 5
35321: PUSH
35322: LD_INT 1
35324: MINUS
35325: ARRAY
35326: PPUSH
35327: LD_VAR 0 7
35331: PUSH
35332: LD_VAR 0 5
35336: ARRAY
35337: PPUSH
35338: CALL_OW 1
35342: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35343: LD_ADDR_VAR 0 7
35347: PUSH
35348: LD_VAR 0 7
35352: PPUSH
35353: LD_VAR 0 5
35357: PUSH
35358: LD_INT 1
35360: MINUS
35361: PPUSH
35362: LD_VAR 0 6
35366: PPUSH
35367: CALL_OW 1
35371: ST_TO_ADDR
// end ;
35372: GO 35289
35374: POP
35375: POP
// result := s_arr [ 1 ] ;
35376: LD_ADDR_VAR 0 4
35380: PUSH
35381: LD_VAR 0 7
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: ST_TO_ADDR
// end ; end ;
35390: LD_VAR 0 4
35394: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35395: LD_INT 0
35397: PPUSH
35398: PPUSH
// if not list then
35399: LD_VAR 0 1
35403: NOT
35404: IFFALSE 35408
// exit ;
35406: GO 35499
// i := list [ pos1 ] ;
35408: LD_ADDR_VAR 0 5
35412: PUSH
35413: LD_VAR 0 1
35417: PUSH
35418: LD_VAR 0 2
35422: ARRAY
35423: ST_TO_ADDR
// if not i then
35424: LD_VAR 0 5
35428: NOT
35429: IFFALSE 35433
// exit ;
35431: GO 35499
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35433: LD_ADDR_VAR 0 1
35437: PUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: LD_VAR 0 1
35452: PUSH
35453: LD_VAR 0 3
35457: ARRAY
35458: PPUSH
35459: CALL_OW 1
35463: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35464: LD_ADDR_VAR 0 1
35468: PUSH
35469: LD_VAR 0 1
35473: PPUSH
35474: LD_VAR 0 3
35478: PPUSH
35479: LD_VAR 0 5
35483: PPUSH
35484: CALL_OW 1
35488: ST_TO_ADDR
// result := list ;
35489: LD_ADDR_VAR 0 4
35493: PUSH
35494: LD_VAR 0 1
35498: ST_TO_ADDR
// end ;
35499: LD_VAR 0 4
35503: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35504: LD_INT 0
35506: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35507: LD_ADDR_VAR 0 5
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 250
35521: PPUSH
35522: LD_VAR 0 1
35526: PPUSH
35527: CALL_OW 251
35531: PPUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: LD_VAR 0 3
35541: PPUSH
35542: LD_VAR 0 4
35546: PPUSH
35547: CALL 35557 0 5
35551: ST_TO_ADDR
// end ;
35552: LD_VAR 0 5
35556: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35557: LD_INT 0
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
// if not list then
35563: LD_VAR 0 3
35567: NOT
35568: IFFALSE 35572
// exit ;
35570: GO 35960
// result := [ ] ;
35572: LD_ADDR_VAR 0 6
35576: PUSH
35577: EMPTY
35578: ST_TO_ADDR
// for i in list do
35579: LD_ADDR_VAR 0 7
35583: PUSH
35584: LD_VAR 0 3
35588: PUSH
35589: FOR_IN
35590: IFFALSE 35792
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35592: LD_ADDR_VAR 0 9
35596: PUSH
35597: LD_VAR 0 7
35601: PPUSH
35602: LD_VAR 0 1
35606: PPUSH
35607: LD_VAR 0 2
35611: PPUSH
35612: CALL_OW 297
35616: ST_TO_ADDR
// if not result then
35617: LD_VAR 0 6
35621: NOT
35622: IFFALSE 35648
// result := [ [ i , tmp ] ] else
35624: LD_ADDR_VAR 0 6
35628: PUSH
35629: LD_VAR 0 7
35633: PUSH
35634: LD_VAR 0 9
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: EMPTY
35644: LIST
35645: ST_TO_ADDR
35646: GO 35790
// begin if result [ result ] [ 2 ] < tmp then
35648: LD_VAR 0 6
35652: PUSH
35653: LD_VAR 0 6
35657: ARRAY
35658: PUSH
35659: LD_INT 2
35661: ARRAY
35662: PUSH
35663: LD_VAR 0 9
35667: LESS
35668: IFFALSE 35710
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35670: LD_ADDR_VAR 0 6
35674: PUSH
35675: LD_VAR 0 6
35679: PPUSH
35680: LD_VAR 0 6
35684: PUSH
35685: LD_INT 1
35687: PLUS
35688: PPUSH
35689: LD_VAR 0 7
35693: PUSH
35694: LD_VAR 0 9
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PPUSH
35703: CALL_OW 2
35707: ST_TO_ADDR
35708: GO 35790
// for j = 1 to result do
35710: LD_ADDR_VAR 0 8
35714: PUSH
35715: DOUBLE
35716: LD_INT 1
35718: DEC
35719: ST_TO_ADDR
35720: LD_VAR 0 6
35724: PUSH
35725: FOR_TO
35726: IFFALSE 35788
// begin if tmp < result [ j ] [ 2 ] then
35728: LD_VAR 0 9
35732: PUSH
35733: LD_VAR 0 6
35737: PUSH
35738: LD_VAR 0 8
35742: ARRAY
35743: PUSH
35744: LD_INT 2
35746: ARRAY
35747: LESS
35748: IFFALSE 35786
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35750: LD_ADDR_VAR 0 6
35754: PUSH
35755: LD_VAR 0 6
35759: PPUSH
35760: LD_VAR 0 8
35764: PPUSH
35765: LD_VAR 0 7
35769: PUSH
35770: LD_VAR 0 9
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PPUSH
35779: CALL_OW 2
35783: ST_TO_ADDR
// break ;
35784: GO 35788
// end ; end ;
35786: GO 35725
35788: POP
35789: POP
// end ; end ;
35790: GO 35589
35792: POP
35793: POP
// if result and not asc then
35794: LD_VAR 0 6
35798: PUSH
35799: LD_VAR 0 4
35803: NOT
35804: AND
35805: IFFALSE 35880
// begin tmp := result ;
35807: LD_ADDR_VAR 0 9
35811: PUSH
35812: LD_VAR 0 6
35816: ST_TO_ADDR
// for i = tmp downto 1 do
35817: LD_ADDR_VAR 0 7
35821: PUSH
35822: DOUBLE
35823: LD_VAR 0 9
35827: INC
35828: ST_TO_ADDR
35829: LD_INT 1
35831: PUSH
35832: FOR_DOWNTO
35833: IFFALSE 35878
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35835: LD_ADDR_VAR 0 6
35839: PUSH
35840: LD_VAR 0 6
35844: PPUSH
35845: LD_VAR 0 9
35849: PUSH
35850: LD_VAR 0 7
35854: MINUS
35855: PUSH
35856: LD_INT 1
35858: PLUS
35859: PPUSH
35860: LD_VAR 0 9
35864: PUSH
35865: LD_VAR 0 7
35869: ARRAY
35870: PPUSH
35871: CALL_OW 1
35875: ST_TO_ADDR
35876: GO 35832
35878: POP
35879: POP
// end ; tmp := [ ] ;
35880: LD_ADDR_VAR 0 9
35884: PUSH
35885: EMPTY
35886: ST_TO_ADDR
// if mode then
35887: LD_VAR 0 5
35891: IFFALSE 35960
// begin for i = 1 to result do
35893: LD_ADDR_VAR 0 7
35897: PUSH
35898: DOUBLE
35899: LD_INT 1
35901: DEC
35902: ST_TO_ADDR
35903: LD_VAR 0 6
35907: PUSH
35908: FOR_TO
35909: IFFALSE 35948
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35911: LD_ADDR_VAR 0 9
35915: PUSH
35916: LD_VAR 0 9
35920: PPUSH
35921: LD_VAR 0 7
35925: PPUSH
35926: LD_VAR 0 6
35930: PUSH
35931: LD_VAR 0 7
35935: ARRAY
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PPUSH
35941: CALL_OW 1
35945: ST_TO_ADDR
35946: GO 35908
35948: POP
35949: POP
// result := tmp ;
35950: LD_ADDR_VAR 0 6
35954: PUSH
35955: LD_VAR 0 9
35959: ST_TO_ADDR
// end ; end ;
35960: LD_VAR 0 6
35964: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35965: LD_INT 0
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
35972: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35973: LD_ADDR_VAR 0 5
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// if not x or not y then
35995: LD_VAR 0 2
35999: NOT
36000: PUSH
36001: LD_VAR 0 3
36005: NOT
36006: OR
36007: IFFALSE 36011
// exit ;
36009: GO 37663
// if not range then
36011: LD_VAR 0 4
36015: NOT
36016: IFFALSE 36026
// range := 10 ;
36018: LD_ADDR_VAR 0 4
36022: PUSH
36023: LD_INT 10
36025: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36026: LD_ADDR_VAR 0 8
36030: PUSH
36031: LD_INT 81
36033: PUSH
36034: LD_VAR 0 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 92
36045: PUSH
36046: LD_VAR 0 2
36050: PUSH
36051: LD_VAR 0 3
36055: PUSH
36056: LD_VAR 0 4
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: LD_INT 21
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: PPUSH
36089: CALL_OW 69
36093: ST_TO_ADDR
// if not tmp then
36094: LD_VAR 0 8
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 37663
// for i in tmp do
36103: LD_ADDR_VAR 0 6
36107: PUSH
36108: LD_VAR 0 8
36112: PUSH
36113: FOR_IN
36114: IFFALSE 37638
// begin points := [ 0 , 0 , 0 ] ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: ST_TO_ADDR
// bpoints := 1 ;
36135: LD_ADDR_VAR 0 10
36139: PUSH
36140: LD_INT 1
36142: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36143: LD_VAR 0 6
36147: PPUSH
36148: CALL_OW 247
36152: PUSH
36153: LD_INT 1
36155: DOUBLE
36156: EQUAL
36157: IFTRUE 36161
36159: GO 36739
36161: POP
// begin if GetClass ( i ) = 1 then
36162: LD_VAR 0 6
36166: PPUSH
36167: CALL_OW 257
36171: PUSH
36172: LD_INT 1
36174: EQUAL
36175: IFFALSE 36196
// points := [ 10 , 5 , 3 ] ;
36177: LD_ADDR_VAR 0 9
36181: PUSH
36182: LD_INT 10
36184: PUSH
36185: LD_INT 5
36187: PUSH
36188: LD_INT 3
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36196: LD_VAR 0 6
36200: PPUSH
36201: CALL_OW 257
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 3
36211: PUSH
36212: LD_INT 4
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: IN
36220: IFFALSE 36241
// points := [ 3 , 2 , 1 ] ;
36222: LD_ADDR_VAR 0 9
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36241: LD_VAR 0 6
36245: PPUSH
36246: CALL_OW 257
36250: PUSH
36251: LD_INT 5
36253: EQUAL
36254: IFFALSE 36275
// points := [ 130 , 5 , 2 ] ;
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_INT 130
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36275: LD_VAR 0 6
36279: PPUSH
36280: CALL_OW 257
36284: PUSH
36285: LD_INT 8
36287: EQUAL
36288: IFFALSE 36309
// points := [ 35 , 35 , 30 ] ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: LD_INT 35
36297: PUSH
36298: LD_INT 35
36300: PUSH
36301: LD_INT 30
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 257
36318: PUSH
36319: LD_INT 9
36321: EQUAL
36322: IFFALSE 36343
// points := [ 20 , 55 , 40 ] ;
36324: LD_ADDR_VAR 0 9
36328: PUSH
36329: LD_INT 20
36331: PUSH
36332: LD_INT 55
36334: PUSH
36335: LD_INT 40
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36343: LD_VAR 0 6
36347: PPUSH
36348: CALL_OW 257
36352: PUSH
36353: LD_INT 12
36355: PUSH
36356: LD_INT 16
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: IN
36363: IFFALSE 36384
// points := [ 5 , 3 , 2 ] ;
36365: LD_ADDR_VAR 0 9
36369: PUSH
36370: LD_INT 5
36372: PUSH
36373: LD_INT 3
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36384: LD_VAR 0 6
36388: PPUSH
36389: CALL_OW 257
36393: PUSH
36394: LD_INT 17
36396: EQUAL
36397: IFFALSE 36418
// points := [ 100 , 50 , 75 ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_INT 100
36406: PUSH
36407: LD_INT 50
36409: PUSH
36410: LD_INT 75
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 257
36427: PUSH
36428: LD_INT 15
36430: EQUAL
36431: IFFALSE 36452
// points := [ 10 , 5 , 3 ] ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_INT 10
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36452: LD_VAR 0 6
36456: PPUSH
36457: CALL_OW 257
36461: PUSH
36462: LD_INT 14
36464: EQUAL
36465: IFFALSE 36486
// points := [ 10 , 0 , 0 ] ;
36467: LD_ADDR_VAR 0 9
36471: PUSH
36472: LD_INT 10
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36486: LD_VAR 0 6
36490: PPUSH
36491: CALL_OW 257
36495: PUSH
36496: LD_INT 11
36498: EQUAL
36499: IFFALSE 36520
// points := [ 30 , 10 , 5 ] ;
36501: LD_ADDR_VAR 0 9
36505: PUSH
36506: LD_INT 30
36508: PUSH
36509: LD_INT 10
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36520: LD_VAR 0 1
36524: PPUSH
36525: LD_INT 5
36527: PPUSH
36528: CALL_OW 321
36532: PUSH
36533: LD_INT 2
36535: EQUAL
36536: IFFALSE 36553
// bpoints := bpoints * 1.8 ;
36538: LD_ADDR_VAR 0 10
36542: PUSH
36543: LD_VAR 0 10
36547: PUSH
36548: LD_REAL  1.80000000000000E+0000
36551: MUL
36552: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36553: LD_VAR 0 6
36557: PPUSH
36558: CALL_OW 257
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: LD_INT 4
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: IN
36581: PUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: LD_INT 51
36589: PPUSH
36590: CALL_OW 321
36594: PUSH
36595: LD_INT 2
36597: EQUAL
36598: AND
36599: IFFALSE 36616
// bpoints := bpoints * 1.2 ;
36601: LD_ADDR_VAR 0 10
36605: PUSH
36606: LD_VAR 0 10
36610: PUSH
36611: LD_REAL  1.20000000000000E+0000
36614: MUL
36615: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 257
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: LD_INT 7
36631: PUSH
36632: LD_INT 9
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: IN
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: LD_INT 52
36648: PPUSH
36649: CALL_OW 321
36653: PUSH
36654: LD_INT 2
36656: EQUAL
36657: AND
36658: IFFALSE 36675
// bpoints := bpoints * 1.5 ;
36660: LD_ADDR_VAR 0 10
36664: PUSH
36665: LD_VAR 0 10
36669: PUSH
36670: LD_REAL  1.50000000000000E+0000
36673: MUL
36674: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36675: LD_VAR 0 1
36679: PPUSH
36680: LD_INT 66
36682: PPUSH
36683: CALL_OW 321
36687: PUSH
36688: LD_INT 2
36690: EQUAL
36691: IFFALSE 36708
// bpoints := bpoints * 1.1 ;
36693: LD_ADDR_VAR 0 10
36697: PUSH
36698: LD_VAR 0 10
36702: PUSH
36703: LD_REAL  1.10000000000000E+0000
36706: MUL
36707: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36708: LD_ADDR_VAR 0 10
36712: PUSH
36713: LD_VAR 0 10
36717: PUSH
36718: LD_VAR 0 6
36722: PPUSH
36723: LD_INT 1
36725: PPUSH
36726: CALL_OW 259
36730: PUSH
36731: LD_REAL  1.15000000000000E+0000
36734: MUL
36735: MUL
36736: ST_TO_ADDR
// end ; unit_vehicle :
36737: GO 37567
36739: LD_INT 2
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36747
36745: GO 37555
36747: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36748: LD_VAR 0 6
36752: PPUSH
36753: CALL_OW 264
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 42
36763: PUSH
36764: LD_INT 24
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: IN
36772: IFFALSE 36793
// points := [ 25 , 5 , 3 ] ;
36774: LD_ADDR_VAR 0 9
36778: PUSH
36779: LD_INT 25
36781: PUSH
36782: LD_INT 5
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36793: LD_VAR 0 6
36797: PPUSH
36798: CALL_OW 264
36802: PUSH
36803: LD_INT 4
36805: PUSH
36806: LD_INT 43
36808: PUSH
36809: LD_INT 25
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: IN
36817: IFFALSE 36838
// points := [ 40 , 15 , 5 ] ;
36819: LD_ADDR_VAR 0 9
36823: PUSH
36824: LD_INT 40
36826: PUSH
36827: LD_INT 15
36829: PUSH
36830: LD_INT 5
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36838: LD_VAR 0 6
36842: PPUSH
36843: CALL_OW 264
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: LD_INT 23
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: IN
36858: IFFALSE 36879
// points := [ 7 , 25 , 8 ] ;
36860: LD_ADDR_VAR 0 9
36864: PUSH
36865: LD_INT 7
36867: PUSH
36868: LD_INT 25
36870: PUSH
36871: LD_INT 8
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36879: LD_VAR 0 6
36883: PPUSH
36884: CALL_OW 264
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: LD_INT 27
36894: PUSH
36895: LD_INT 44
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: IN
36903: IFFALSE 36924
// points := [ 14 , 50 , 16 ] ;
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: LD_INT 14
36912: PUSH
36913: LD_INT 50
36915: PUSH
36916: LD_INT 16
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36924: LD_VAR 0 6
36928: PPUSH
36929: CALL_OW 264
36933: PUSH
36934: LD_INT 6
36936: PUSH
36937: LD_INT 46
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: IN
36944: IFFALSE 36965
// points := [ 32 , 120 , 70 ] ;
36946: LD_ADDR_VAR 0 9
36950: PUSH
36951: LD_INT 32
36953: PUSH
36954: LD_INT 120
36956: PUSH
36957: LD_INT 70
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36965: LD_VAR 0 6
36969: PPUSH
36970: CALL_OW 264
36974: PUSH
36975: LD_INT 7
36977: PUSH
36978: LD_INT 28
36980: PUSH
36981: LD_INT 45
36983: PUSH
36984: LD_EXP 110
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: IN
36995: IFFALSE 37016
// points := [ 35 , 20 , 45 ] ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_INT 35
37004: PUSH
37005: LD_INT 20
37007: PUSH
37008: LD_INT 45
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37016: LD_VAR 0 6
37020: PPUSH
37021: CALL_OW 264
37025: PUSH
37026: LD_INT 47
37028: PUSH
37029: EMPTY
37030: LIST
37031: IN
37032: IFFALSE 37053
// points := [ 67 , 45 , 75 ] ;
37034: LD_ADDR_VAR 0 9
37038: PUSH
37039: LD_INT 67
37041: PUSH
37042: LD_INT 45
37044: PUSH
37045: LD_INT 75
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37053: LD_VAR 0 6
37057: PPUSH
37058: CALL_OW 264
37062: PUSH
37063: LD_INT 26
37065: PUSH
37066: EMPTY
37067: LIST
37068: IN
37069: IFFALSE 37090
// points := [ 120 , 30 , 80 ] ;
37071: LD_ADDR_VAR 0 9
37075: PUSH
37076: LD_INT 120
37078: PUSH
37079: LD_INT 30
37081: PUSH
37082: LD_INT 80
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37090: LD_VAR 0 6
37094: PPUSH
37095: CALL_OW 264
37099: PUSH
37100: LD_INT 22
37102: PUSH
37103: EMPTY
37104: LIST
37105: IN
37106: IFFALSE 37127
// points := [ 40 , 1 , 1 ] ;
37108: LD_ADDR_VAR 0 9
37112: PUSH
37113: LD_INT 40
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37127: LD_VAR 0 6
37131: PPUSH
37132: CALL_OW 264
37136: PUSH
37137: LD_INT 29
37139: PUSH
37140: EMPTY
37141: LIST
37142: IN
37143: IFFALSE 37164
// points := [ 70 , 200 , 400 ] ;
37145: LD_ADDR_VAR 0 9
37149: PUSH
37150: LD_INT 70
37152: PUSH
37153: LD_INT 200
37155: PUSH
37156: LD_INT 400
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37164: LD_VAR 0 6
37168: PPUSH
37169: CALL_OW 264
37173: PUSH
37174: LD_INT 14
37176: PUSH
37177: LD_INT 53
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: IN
37184: IFFALSE 37205
// points := [ 40 , 10 , 20 ] ;
37186: LD_ADDR_VAR 0 9
37190: PUSH
37191: LD_INT 40
37193: PUSH
37194: LD_INT 10
37196: PUSH
37197: LD_INT 20
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 264
37214: PUSH
37215: LD_INT 9
37217: PUSH
37218: EMPTY
37219: LIST
37220: IN
37221: IFFALSE 37242
// points := [ 5 , 70 , 20 ] ;
37223: LD_ADDR_VAR 0 9
37227: PUSH
37228: LD_INT 5
37230: PUSH
37231: LD_INT 70
37233: PUSH
37234: LD_INT 20
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37242: LD_VAR 0 6
37246: PPUSH
37247: CALL_OW 264
37251: PUSH
37252: LD_INT 10
37254: PUSH
37255: EMPTY
37256: LIST
37257: IN
37258: IFFALSE 37279
// points := [ 35 , 110 , 70 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 35
37267: PUSH
37268: LD_INT 110
37270: PUSH
37271: LD_INT 70
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 265
37288: PUSH
37289: LD_INT 25
37291: EQUAL
37292: IFFALSE 37313
// points := [ 80 , 65 , 100 ] ;
37294: LD_ADDR_VAR 0 9
37298: PUSH
37299: LD_INT 80
37301: PUSH
37302: LD_INT 65
37304: PUSH
37305: LD_INT 100
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37313: LD_VAR 0 6
37317: PPUSH
37318: CALL_OW 263
37322: PUSH
37323: LD_INT 1
37325: EQUAL
37326: IFFALSE 37361
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37328: LD_ADDR_VAR 0 10
37332: PUSH
37333: LD_VAR 0 10
37337: PUSH
37338: LD_VAR 0 6
37342: PPUSH
37343: CALL_OW 311
37347: PPUSH
37348: LD_INT 3
37350: PPUSH
37351: CALL_OW 259
37355: PUSH
37356: LD_INT 4
37358: MUL
37359: MUL
37360: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37361: LD_VAR 0 6
37365: PPUSH
37366: CALL_OW 263
37370: PUSH
37371: LD_INT 2
37373: EQUAL
37374: IFFALSE 37425
// begin j := IsControledBy ( i ) ;
37376: LD_ADDR_VAR 0 7
37380: PUSH
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 312
37390: ST_TO_ADDR
// if j then
37391: LD_VAR 0 7
37395: IFFALSE 37425
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37397: LD_ADDR_VAR 0 10
37401: PUSH
37402: LD_VAR 0 10
37406: PUSH
37407: LD_VAR 0 7
37411: PPUSH
37412: LD_INT 3
37414: PPUSH
37415: CALL_OW 259
37419: PUSH
37420: LD_INT 3
37422: MUL
37423: MUL
37424: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37425: LD_VAR 0 6
37429: PPUSH
37430: CALL_OW 264
37434: PUSH
37435: LD_INT 5
37437: PUSH
37438: LD_INT 6
37440: PUSH
37441: LD_INT 46
37443: PUSH
37444: LD_INT 44
37446: PUSH
37447: LD_INT 47
37449: PUSH
37450: LD_INT 45
37452: PUSH
37453: LD_INT 28
37455: PUSH
37456: LD_INT 7
37458: PUSH
37459: LD_INT 27
37461: PUSH
37462: LD_INT 29
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: IN
37477: PUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: LD_INT 52
37485: PPUSH
37486: CALL_OW 321
37490: PUSH
37491: LD_INT 2
37493: EQUAL
37494: AND
37495: IFFALSE 37512
// bpoints := bpoints * 1.2 ;
37497: LD_ADDR_VAR 0 10
37501: PUSH
37502: LD_VAR 0 10
37506: PUSH
37507: LD_REAL  1.20000000000000E+0000
37510: MUL
37511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37512: LD_VAR 0 6
37516: PPUSH
37517: CALL_OW 264
37521: PUSH
37522: LD_INT 6
37524: PUSH
37525: LD_INT 46
37527: PUSH
37528: LD_INT 47
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: IN
37536: IFFALSE 37553
// bpoints := bpoints * 1.2 ;
37538: LD_ADDR_VAR 0 10
37542: PUSH
37543: LD_VAR 0 10
37547: PUSH
37548: LD_REAL  1.20000000000000E+0000
37551: MUL
37552: ST_TO_ADDR
// end ; unit_building :
37553: GO 37567
37555: LD_INT 3
37557: DOUBLE
37558: EQUAL
37559: IFTRUE 37563
37561: GO 37566
37563: POP
// ; end ;
37564: GO 37567
37566: POP
// for j = 1 to 3 do
37567: LD_ADDR_VAR 0 7
37571: PUSH
37572: DOUBLE
37573: LD_INT 1
37575: DEC
37576: ST_TO_ADDR
37577: LD_INT 3
37579: PUSH
37580: FOR_TO
37581: IFFALSE 37634
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37583: LD_ADDR_VAR 0 5
37587: PUSH
37588: LD_VAR 0 5
37592: PPUSH
37593: LD_VAR 0 7
37597: PPUSH
37598: LD_VAR 0 5
37602: PUSH
37603: LD_VAR 0 7
37607: ARRAY
37608: PUSH
37609: LD_VAR 0 9
37613: PUSH
37614: LD_VAR 0 7
37618: ARRAY
37619: PUSH
37620: LD_VAR 0 10
37624: MUL
37625: PLUS
37626: PPUSH
37627: CALL_OW 1
37631: ST_TO_ADDR
37632: GO 37580
37634: POP
37635: POP
// end ;
37636: GO 36113
37638: POP
37639: POP
// result := Replace ( result , 4 , tmp ) ;
37640: LD_ADDR_VAR 0 5
37644: PUSH
37645: LD_VAR 0 5
37649: PPUSH
37650: LD_INT 4
37652: PPUSH
37653: LD_VAR 0 8
37657: PPUSH
37658: CALL_OW 1
37662: ST_TO_ADDR
// end ;
37663: LD_VAR 0 5
37667: RET
// export function DangerAtRange ( unit , range ) ; begin
37668: LD_INT 0
37670: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37671: LD_ADDR_VAR 0 3
37675: PUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 255
37685: PPUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 250
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL_OW 251
37705: PPUSH
37706: LD_VAR 0 2
37710: PPUSH
37711: CALL 35965 0 4
37715: ST_TO_ADDR
// end ;
37716: LD_VAR 0 3
37720: RET
// export function DangerInArea ( side , area ) ; begin
37721: LD_INT 0
37723: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37724: LD_ADDR_VAR 0 3
37728: PUSH
37729: LD_VAR 0 2
37733: PPUSH
37734: LD_INT 81
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PPUSH
37746: CALL_OW 70
37750: ST_TO_ADDR
// end ;
37751: LD_VAR 0 3
37755: RET
// export function IsExtension ( b ) ; begin
37756: LD_INT 0
37758: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37759: LD_ADDR_VAR 0 2
37763: PUSH
37764: LD_VAR 0 1
37768: PUSH
37769: LD_INT 23
37771: PUSH
37772: LD_INT 20
37774: PUSH
37775: LD_INT 22
37777: PUSH
37778: LD_INT 17
37780: PUSH
37781: LD_INT 24
37783: PUSH
37784: LD_INT 21
37786: PUSH
37787: LD_INT 19
37789: PUSH
37790: LD_INT 16
37792: PUSH
37793: LD_INT 25
37795: PUSH
37796: LD_INT 18
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: IN
37811: ST_TO_ADDR
// end ;
37812: LD_VAR 0 2
37816: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37817: LD_INT 0
37819: PPUSH
37820: PPUSH
37821: PPUSH
// result := [ ] ;
37822: LD_ADDR_VAR 0 4
37826: PUSH
37827: EMPTY
37828: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37829: LD_ADDR_VAR 0 5
37833: PUSH
37834: LD_VAR 0 2
37838: PPUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PPUSH
37849: CALL_OW 70
37853: ST_TO_ADDR
// if not tmp then
37854: LD_VAR 0 5
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 37927
// if checkLink then
37863: LD_VAR 0 3
37867: IFFALSE 37917
// begin for i in tmp do
37869: LD_ADDR_VAR 0 6
37873: PUSH
37874: LD_VAR 0 5
37878: PUSH
37879: FOR_IN
37880: IFFALSE 37915
// if GetBase ( i ) <> base then
37882: LD_VAR 0 6
37886: PPUSH
37887: CALL_OW 274
37891: PUSH
37892: LD_VAR 0 1
37896: NONEQUAL
37897: IFFALSE 37913
// ComLinkToBase ( base , i ) ;
37899: LD_VAR 0 1
37903: PPUSH
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 169
37913: GO 37879
37915: POP
37916: POP
// end ; result := tmp ;
37917: LD_ADDR_VAR 0 4
37921: PUSH
37922: LD_VAR 0 5
37926: ST_TO_ADDR
// end ;
37927: LD_VAR 0 4
37931: RET
// export function ComComplete ( units , b ) ; var i ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
// if not units then
37936: LD_VAR 0 1
37940: NOT
37941: IFFALSE 37945
// exit ;
37943: GO 38035
// for i in units do
37945: LD_ADDR_VAR 0 4
37949: PUSH
37950: LD_VAR 0 1
37954: PUSH
37955: FOR_IN
37956: IFFALSE 38033
// if BuildingStatus ( b ) = bs_build then
37958: LD_VAR 0 2
37962: PPUSH
37963: CALL_OW 461
37967: PUSH
37968: LD_INT 1
37970: EQUAL
37971: IFFALSE 38031
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37973: LD_VAR 0 4
37977: PPUSH
37978: LD_STRING h
37980: PUSH
37981: LD_VAR 0 2
37985: PPUSH
37986: CALL_OW 250
37990: PUSH
37991: LD_VAR 0 2
37995: PPUSH
37996: CALL_OW 251
38000: PUSH
38001: LD_VAR 0 2
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: PUSH
38024: EMPTY
38025: LIST
38026: PPUSH
38027: CALL_OW 446
38031: GO 37955
38033: POP
38034: POP
// end ;
38035: LD_VAR 0 3
38039: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38048: LD_VAR 0 1
38052: NOT
38053: PUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: CALL_OW 263
38063: PUSH
38064: LD_INT 2
38066: NONEQUAL
38067: OR
38068: IFFALSE 38072
// exit ;
38070: GO 38388
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38072: LD_ADDR_VAR 0 6
38076: PUSH
38077: LD_INT 22
38079: PUSH
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 255
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 30
38099: PUSH
38100: LD_INT 36
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 34
38109: PUSH
38110: LD_INT 31
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PPUSH
38126: CALL_OW 69
38130: ST_TO_ADDR
// if not tmp then
38131: LD_VAR 0 6
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38388
// result := [ ] ;
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: EMPTY
38146: ST_TO_ADDR
// for i in tmp do
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: LD_VAR 0 6
38156: PUSH
38157: FOR_IN
38158: IFFALSE 38229
// begin t := UnitsInside ( i ) ;
38160: LD_ADDR_VAR 0 4
38164: PUSH
38165: LD_VAR 0 3
38169: PPUSH
38170: CALL_OW 313
38174: ST_TO_ADDR
// if t then
38175: LD_VAR 0 4
38179: IFFALSE 38227
// for j in t do
38181: LD_ADDR_VAR 0 7
38185: PUSH
38186: LD_VAR 0 4
38190: PUSH
38191: FOR_IN
38192: IFFALSE 38225
// result := Replace ( result , result + 1 , j ) ;
38194: LD_ADDR_VAR 0 2
38198: PUSH
38199: LD_VAR 0 2
38203: PPUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_INT 1
38211: PLUS
38212: PPUSH
38213: LD_VAR 0 7
38217: PPUSH
38218: CALL_OW 1
38222: ST_TO_ADDR
38223: GO 38191
38225: POP
38226: POP
// end ;
38227: GO 38157
38229: POP
38230: POP
// if not result then
38231: LD_VAR 0 2
38235: NOT
38236: IFFALSE 38240
// exit ;
38238: GO 38388
// mech := result [ 1 ] ;
38240: LD_ADDR_VAR 0 5
38244: PUSH
38245: LD_VAR 0 2
38249: PUSH
38250: LD_INT 1
38252: ARRAY
38253: ST_TO_ADDR
// if result > 1 then
38254: LD_VAR 0 2
38258: PUSH
38259: LD_INT 1
38261: GREATER
38262: IFFALSE 38374
// begin for i = 2 to result do
38264: LD_ADDR_VAR 0 3
38268: PUSH
38269: DOUBLE
38270: LD_INT 2
38272: DEC
38273: ST_TO_ADDR
38274: LD_VAR 0 2
38278: PUSH
38279: FOR_TO
38280: IFFALSE 38372
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38282: LD_ADDR_VAR 0 4
38286: PUSH
38287: LD_VAR 0 2
38291: PUSH
38292: LD_VAR 0 3
38296: ARRAY
38297: PPUSH
38298: LD_INT 3
38300: PPUSH
38301: CALL_OW 259
38305: PUSH
38306: LD_VAR 0 2
38310: PUSH
38311: LD_VAR 0 3
38315: ARRAY
38316: PPUSH
38317: CALL_OW 432
38321: MINUS
38322: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38323: LD_VAR 0 4
38327: PUSH
38328: LD_VAR 0 5
38332: PPUSH
38333: LD_INT 3
38335: PPUSH
38336: CALL_OW 259
38340: PUSH
38341: LD_VAR 0 5
38345: PPUSH
38346: CALL_OW 432
38350: MINUS
38351: GREATEREQUAL
38352: IFFALSE 38370
// mech := result [ i ] ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_VAR 0 3
38368: ARRAY
38369: ST_TO_ADDR
// end ;
38370: GO 38279
38372: POP
38373: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38374: LD_VAR 0 1
38378: PPUSH
38379: LD_VAR 0 5
38383: PPUSH
38384: CALL_OW 135
// end ;
38388: LD_VAR 0 2
38392: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38393: LD_INT 0
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
// result := [ ] ;
38408: LD_ADDR_VAR 0 7
38412: PUSH
38413: EMPTY
38414: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 266
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: IN
38435: NOT
38436: IFFALSE 38440
// exit ;
38438: GO 40074
// if name then
38440: LD_VAR 0 3
38444: IFFALSE 38460
// SetBName ( base_dep , name ) ;
38446: LD_VAR 0 1
38450: PPUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: CALL_OW 500
// base := GetBase ( base_dep ) ;
38460: LD_ADDR_VAR 0 15
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: CALL_OW 274
38474: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38475: LD_ADDR_VAR 0 16
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 255
38489: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38490: LD_ADDR_VAR 0 17
38494: PUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 248
38504: ST_TO_ADDR
// if sources then
38505: LD_VAR 0 5
38509: IFFALSE 38556
// for i = 1 to 3 do
38511: LD_ADDR_VAR 0 8
38515: PUSH
38516: DOUBLE
38517: LD_INT 1
38519: DEC
38520: ST_TO_ADDR
38521: LD_INT 3
38523: PUSH
38524: FOR_TO
38525: IFFALSE 38554
// AddResourceType ( base , i , sources [ i ] ) ;
38527: LD_VAR 0 15
38531: PPUSH
38532: LD_VAR 0 8
38536: PPUSH
38537: LD_VAR 0 5
38541: PUSH
38542: LD_VAR 0 8
38546: ARRAY
38547: PPUSH
38548: CALL_OW 276
38552: GO 38524
38554: POP
38555: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38556: LD_ADDR_VAR 0 18
38560: PUSH
38561: LD_VAR 0 15
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: LD_INT 1
38573: PPUSH
38574: CALL 37817 0 3
38578: ST_TO_ADDR
// InitHc ;
38579: CALL_OW 19
// InitUc ;
38583: CALL_OW 18
// uc_side := side ;
38587: LD_ADDR_OWVAR 20
38591: PUSH
38592: LD_VAR 0 16
38596: ST_TO_ADDR
// uc_nation := nation ;
38597: LD_ADDR_OWVAR 21
38601: PUSH
38602: LD_VAR 0 17
38606: ST_TO_ADDR
// if buildings then
38607: LD_VAR 0 18
38611: IFFALSE 39933
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38613: LD_ADDR_VAR 0 19
38617: PUSH
38618: LD_VAR 0 18
38622: PPUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 30
38628: PUSH
38629: LD_INT 29
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 30
38638: PUSH
38639: LD_INT 30
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: PPUSH
38651: CALL_OW 72
38655: ST_TO_ADDR
// if tmp then
38656: LD_VAR 0 19
38660: IFFALSE 38708
// for i in tmp do
38662: LD_ADDR_VAR 0 8
38666: PUSH
38667: LD_VAR 0 19
38671: PUSH
38672: FOR_IN
38673: IFFALSE 38706
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38675: LD_VAR 0 8
38679: PPUSH
38680: CALL_OW 250
38684: PPUSH
38685: LD_VAR 0 8
38689: PPUSH
38690: CALL_OW 251
38694: PPUSH
38695: LD_VAR 0 16
38699: PPUSH
38700: CALL_OW 441
38704: GO 38672
38706: POP
38707: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38708: LD_VAR 0 18
38712: PPUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 32
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 30
38728: PUSH
38729: LD_INT 33
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: PPUSH
38741: CALL_OW 72
38745: IFFALSE 38833
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38747: LD_ADDR_VAR 0 8
38751: PUSH
38752: LD_VAR 0 18
38756: PPUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 30
38762: PUSH
38763: LD_INT 32
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 30
38772: PUSH
38773: LD_INT 33
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: PPUSH
38785: CALL_OW 72
38789: PUSH
38790: FOR_IN
38791: IFFALSE 38831
// begin if not GetBWeapon ( i ) then
38793: LD_VAR 0 8
38797: PPUSH
38798: CALL_OW 269
38802: NOT
38803: IFFALSE 38829
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38805: LD_VAR 0 8
38809: PPUSH
38810: LD_VAR 0 8
38814: PPUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: CALL 40079 0 2
38824: PPUSH
38825: CALL_OW 431
// end ;
38829: GO 38790
38831: POP
38832: POP
// end ; for i = 1 to personel do
38833: LD_ADDR_VAR 0 8
38837: PUSH
38838: DOUBLE
38839: LD_INT 1
38841: DEC
38842: ST_TO_ADDR
38843: LD_VAR 0 6
38847: PUSH
38848: FOR_TO
38849: IFFALSE 39913
// begin if i > 4 then
38851: LD_VAR 0 8
38855: PUSH
38856: LD_INT 4
38858: GREATER
38859: IFFALSE 38863
// break ;
38861: GO 39913
// case i of 1 :
38863: LD_VAR 0 8
38867: PUSH
38868: LD_INT 1
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38876
38874: GO 38956
38876: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38877: LD_ADDR_VAR 0 12
38881: PUSH
38882: LD_VAR 0 18
38886: PPUSH
38887: LD_INT 22
38889: PUSH
38890: LD_VAR 0 16
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 58
38901: PUSH
38902: EMPTY
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 30
38910: PUSH
38911: LD_INT 32
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 30
38920: PUSH
38921: LD_INT 4
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 30
38930: PUSH
38931: LD_INT 5
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: PPUSH
38949: CALL_OW 72
38953: ST_TO_ADDR
38954: GO 39178
38956: LD_INT 2
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 38964
38962: GO 39026
38964: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38965: LD_ADDR_VAR 0 12
38969: PUSH
38970: LD_VAR 0 18
38974: PPUSH
38975: LD_INT 22
38977: PUSH
38978: LD_VAR 0 16
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 30
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 30
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 72
39023: ST_TO_ADDR
39024: GO 39178
39026: LD_INT 3
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39096
39034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39035: LD_ADDR_VAR 0 12
39039: PUSH
39040: LD_VAR 0 18
39044: PPUSH
39045: LD_INT 22
39047: PUSH
39048: LD_VAR 0 16
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PPUSH
39089: CALL_OW 72
39093: ST_TO_ADDR
39094: GO 39178
39096: LD_INT 4
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39104
39102: GO 39177
39104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39105: LD_ADDR_VAR 0 12
39109: PUSH
39110: LD_VAR 0 18
39114: PPUSH
39115: LD_INT 22
39117: PUSH
39118: LD_VAR 0 16
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 30
39132: PUSH
39133: LD_INT 6
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 30
39142: PUSH
39143: LD_INT 7
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 30
39152: PUSH
39153: LD_INT 8
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PPUSH
39170: CALL_OW 72
39174: ST_TO_ADDR
39175: GO 39178
39177: POP
// if i = 1 then
39178: LD_VAR 0 8
39182: PUSH
39183: LD_INT 1
39185: EQUAL
39186: IFFALSE 39297
// begin tmp := [ ] ;
39188: LD_ADDR_VAR 0 19
39192: PUSH
39193: EMPTY
39194: ST_TO_ADDR
// for j in f do
39195: LD_ADDR_VAR 0 9
39199: PUSH
39200: LD_VAR 0 12
39204: PUSH
39205: FOR_IN
39206: IFFALSE 39279
// if GetBType ( j ) = b_bunker then
39208: LD_VAR 0 9
39212: PPUSH
39213: CALL_OW 266
39217: PUSH
39218: LD_INT 32
39220: EQUAL
39221: IFFALSE 39248
// tmp := Insert ( tmp , 1 , j ) else
39223: LD_ADDR_VAR 0 19
39227: PUSH
39228: LD_VAR 0 19
39232: PPUSH
39233: LD_INT 1
39235: PPUSH
39236: LD_VAR 0 9
39240: PPUSH
39241: CALL_OW 2
39245: ST_TO_ADDR
39246: GO 39277
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39248: LD_ADDR_VAR 0 19
39252: PUSH
39253: LD_VAR 0 19
39257: PPUSH
39258: LD_VAR 0 19
39262: PUSH
39263: LD_INT 1
39265: PLUS
39266: PPUSH
39267: LD_VAR 0 9
39271: PPUSH
39272: CALL_OW 2
39276: ST_TO_ADDR
39277: GO 39205
39279: POP
39280: POP
// if tmp then
39281: LD_VAR 0 19
39285: IFFALSE 39297
// f := tmp ;
39287: LD_ADDR_VAR 0 12
39291: PUSH
39292: LD_VAR 0 19
39296: ST_TO_ADDR
// end ; x := personel [ i ] ;
39297: LD_ADDR_VAR 0 13
39301: PUSH
39302: LD_VAR 0 6
39306: PUSH
39307: LD_VAR 0 8
39311: ARRAY
39312: ST_TO_ADDR
// if x = - 1 then
39313: LD_VAR 0 13
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: EQUAL
39322: IFFALSE 39531
// begin for j in f do
39324: LD_ADDR_VAR 0 9
39328: PUSH
39329: LD_VAR 0 12
39333: PUSH
39334: FOR_IN
39335: IFFALSE 39527
// repeat InitHc ;
39337: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39341: LD_VAR 0 9
39345: PPUSH
39346: CALL_OW 266
39350: PUSH
39351: LD_INT 5
39353: EQUAL
39354: IFFALSE 39424
// begin if UnitsInside ( j ) < 3 then
39356: LD_VAR 0 9
39360: PPUSH
39361: CALL_OW 313
39365: PUSH
39366: LD_INT 3
39368: LESS
39369: IFFALSE 39405
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39371: LD_INT 0
39373: PPUSH
39374: LD_INT 5
39376: PUSH
39377: LD_INT 8
39379: PUSH
39380: LD_INT 9
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: PUSH
39388: LD_VAR 0 17
39392: ARRAY
39393: PPUSH
39394: LD_VAR 0 4
39398: PPUSH
39399: CALL_OW 380
39403: GO 39422
// PrepareHuman ( false , i , skill ) ;
39405: LD_INT 0
39407: PPUSH
39408: LD_VAR 0 8
39412: PPUSH
39413: LD_VAR 0 4
39417: PPUSH
39418: CALL_OW 380
// end else
39422: GO 39441
// PrepareHuman ( false , i , skill ) ;
39424: LD_INT 0
39426: PPUSH
39427: LD_VAR 0 8
39431: PPUSH
39432: LD_VAR 0 4
39436: PPUSH
39437: CALL_OW 380
// un := CreateHuman ;
39441: LD_ADDR_VAR 0 14
39445: PUSH
39446: CALL_OW 44
39450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39451: LD_ADDR_VAR 0 7
39455: PUSH
39456: LD_VAR 0 7
39460: PPUSH
39461: LD_INT 1
39463: PPUSH
39464: LD_VAR 0 14
39468: PPUSH
39469: CALL_OW 2
39473: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39474: LD_VAR 0 14
39478: PPUSH
39479: LD_VAR 0 9
39483: PPUSH
39484: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39488: LD_VAR 0 9
39492: PPUSH
39493: CALL_OW 313
39497: PUSH
39498: LD_INT 6
39500: EQUAL
39501: PUSH
39502: LD_VAR 0 9
39506: PPUSH
39507: CALL_OW 266
39511: PUSH
39512: LD_INT 32
39514: PUSH
39515: LD_INT 31
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: IN
39522: OR
39523: IFFALSE 39337
39525: GO 39334
39527: POP
39528: POP
// end else
39529: GO 39911
// for j = 1 to x do
39531: LD_ADDR_VAR 0 9
39535: PUSH
39536: DOUBLE
39537: LD_INT 1
39539: DEC
39540: ST_TO_ADDR
39541: LD_VAR 0 13
39545: PUSH
39546: FOR_TO
39547: IFFALSE 39909
// begin InitHc ;
39549: CALL_OW 19
// if not f then
39553: LD_VAR 0 12
39557: NOT
39558: IFFALSE 39647
// begin PrepareHuman ( false , i , skill ) ;
39560: LD_INT 0
39562: PPUSH
39563: LD_VAR 0 8
39567: PPUSH
39568: LD_VAR 0 4
39572: PPUSH
39573: CALL_OW 380
// un := CreateHuman ;
39577: LD_ADDR_VAR 0 14
39581: PUSH
39582: CALL_OW 44
39586: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39587: LD_ADDR_VAR 0 7
39591: PUSH
39592: LD_VAR 0 7
39596: PPUSH
39597: LD_INT 1
39599: PPUSH
39600: LD_VAR 0 14
39604: PPUSH
39605: CALL_OW 2
39609: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39610: LD_VAR 0 14
39614: PPUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 250
39624: PPUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 251
39634: PPUSH
39635: LD_INT 10
39637: PPUSH
39638: LD_INT 0
39640: PPUSH
39641: CALL_OW 50
// continue ;
39645: GO 39546
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39647: LD_VAR 0 12
39651: PUSH
39652: LD_INT 1
39654: ARRAY
39655: PPUSH
39656: CALL_OW 313
39660: PUSH
39661: LD_VAR 0 12
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: PPUSH
39670: CALL_OW 266
39674: PUSH
39675: LD_INT 32
39677: PUSH
39678: LD_INT 31
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: IN
39685: AND
39686: PUSH
39687: LD_VAR 0 12
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: PPUSH
39696: CALL_OW 313
39700: PUSH
39701: LD_INT 6
39703: EQUAL
39704: OR
39705: IFFALSE 39725
// f := Delete ( f , 1 ) ;
39707: LD_ADDR_VAR 0 12
39711: PUSH
39712: LD_VAR 0 12
39716: PPUSH
39717: LD_INT 1
39719: PPUSH
39720: CALL_OW 3
39724: ST_TO_ADDR
// if not f then
39725: LD_VAR 0 12
39729: NOT
39730: IFFALSE 39748
// begin x := x + 2 ;
39732: LD_ADDR_VAR 0 13
39736: PUSH
39737: LD_VAR 0 13
39741: PUSH
39742: LD_INT 2
39744: PLUS
39745: ST_TO_ADDR
// continue ;
39746: GO 39546
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39748: LD_VAR 0 12
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PPUSH
39757: CALL_OW 266
39761: PUSH
39762: LD_INT 5
39764: EQUAL
39765: IFFALSE 39839
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39767: LD_VAR 0 12
39771: PUSH
39772: LD_INT 1
39774: ARRAY
39775: PPUSH
39776: CALL_OW 313
39780: PUSH
39781: LD_INT 3
39783: LESS
39784: IFFALSE 39820
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39786: LD_INT 0
39788: PPUSH
39789: LD_INT 5
39791: PUSH
39792: LD_INT 8
39794: PUSH
39795: LD_INT 9
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: PUSH
39803: LD_VAR 0 17
39807: ARRAY
39808: PPUSH
39809: LD_VAR 0 4
39813: PPUSH
39814: CALL_OW 380
39818: GO 39837
// PrepareHuman ( false , i , skill ) ;
39820: LD_INT 0
39822: PPUSH
39823: LD_VAR 0 8
39827: PPUSH
39828: LD_VAR 0 4
39832: PPUSH
39833: CALL_OW 380
// end else
39837: GO 39856
// PrepareHuman ( false , i , skill ) ;
39839: LD_INT 0
39841: PPUSH
39842: LD_VAR 0 8
39846: PPUSH
39847: LD_VAR 0 4
39851: PPUSH
39852: CALL_OW 380
// un := CreateHuman ;
39856: LD_ADDR_VAR 0 14
39860: PUSH
39861: CALL_OW 44
39865: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39866: LD_ADDR_VAR 0 7
39870: PUSH
39871: LD_VAR 0 7
39875: PPUSH
39876: LD_INT 1
39878: PPUSH
39879: LD_VAR 0 14
39883: PPUSH
39884: CALL_OW 2
39888: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39889: LD_VAR 0 14
39893: PPUSH
39894: LD_VAR 0 12
39898: PUSH
39899: LD_INT 1
39901: ARRAY
39902: PPUSH
39903: CALL_OW 52
// end ;
39907: GO 39546
39909: POP
39910: POP
// end ;
39911: GO 38848
39913: POP
39914: POP
// result := result ^ buildings ;
39915: LD_ADDR_VAR 0 7
39919: PUSH
39920: LD_VAR 0 7
39924: PUSH
39925: LD_VAR 0 18
39929: ADD
39930: ST_TO_ADDR
// end else
39931: GO 40074
// begin for i = 1 to personel do
39933: LD_ADDR_VAR 0 8
39937: PUSH
39938: DOUBLE
39939: LD_INT 1
39941: DEC
39942: ST_TO_ADDR
39943: LD_VAR 0 6
39947: PUSH
39948: FOR_TO
39949: IFFALSE 40072
// begin if i > 4 then
39951: LD_VAR 0 8
39955: PUSH
39956: LD_INT 4
39958: GREATER
39959: IFFALSE 39963
// break ;
39961: GO 40072
// x := personel [ i ] ;
39963: LD_ADDR_VAR 0 13
39967: PUSH
39968: LD_VAR 0 6
39972: PUSH
39973: LD_VAR 0 8
39977: ARRAY
39978: ST_TO_ADDR
// if x = - 1 then
39979: LD_VAR 0 13
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: EQUAL
39988: IFFALSE 39992
// continue ;
39990: GO 39948
// PrepareHuman ( false , i , skill ) ;
39992: LD_INT 0
39994: PPUSH
39995: LD_VAR 0 8
39999: PPUSH
40000: LD_VAR 0 4
40004: PPUSH
40005: CALL_OW 380
// un := CreateHuman ;
40009: LD_ADDR_VAR 0 14
40013: PUSH
40014: CALL_OW 44
40018: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40019: LD_VAR 0 14
40023: PPUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 250
40033: PPUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 251
40043: PPUSH
40044: LD_INT 10
40046: PPUSH
40047: LD_INT 0
40049: PPUSH
40050: CALL_OW 50
// result := result ^ un ;
40054: LD_ADDR_VAR 0 7
40058: PUSH
40059: LD_VAR 0 7
40063: PUSH
40064: LD_VAR 0 14
40068: ADD
40069: ST_TO_ADDR
// end ;
40070: GO 39948
40072: POP
40073: POP
// end ; end ;
40074: LD_VAR 0 7
40078: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40079: LD_INT 0
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
// result := false ;
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_INT 0
40104: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40105: LD_VAR 0 1
40109: NOT
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 266
40120: PUSH
40121: LD_INT 32
40123: PUSH
40124: LD_INT 33
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: IN
40131: NOT
40132: OR
40133: IFFALSE 40137
// exit ;
40135: GO 41246
// nat := GetNation ( tower ) ;
40137: LD_ADDR_VAR 0 12
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 248
40151: ST_TO_ADDR
// side := GetSide ( tower ) ;
40152: LD_ADDR_VAR 0 16
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 255
40166: ST_TO_ADDR
// x := GetX ( tower ) ;
40167: LD_ADDR_VAR 0 10
40171: PUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 250
40181: ST_TO_ADDR
// y := GetY ( tower ) ;
40182: LD_ADDR_VAR 0 11
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 251
40196: ST_TO_ADDR
// if not x or not y then
40197: LD_VAR 0 10
40201: NOT
40202: PUSH
40203: LD_VAR 0 11
40207: NOT
40208: OR
40209: IFFALSE 40213
// exit ;
40211: GO 41246
// weapon := 0 ;
40213: LD_ADDR_VAR 0 18
40217: PUSH
40218: LD_INT 0
40220: ST_TO_ADDR
// fac_list := [ ] ;
40221: LD_ADDR_VAR 0 17
40225: PUSH
40226: EMPTY
40227: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40228: LD_ADDR_VAR 0 6
40232: PUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 274
40242: PPUSH
40243: LD_VAR 0 2
40247: PPUSH
40248: LD_INT 0
40250: PPUSH
40251: CALL 37817 0 3
40255: PPUSH
40256: LD_INT 30
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PPUSH
40266: CALL_OW 72
40270: ST_TO_ADDR
// if not factories then
40271: LD_VAR 0 6
40275: NOT
40276: IFFALSE 40280
// exit ;
40278: GO 41246
// for i in factories do
40280: LD_ADDR_VAR 0 8
40284: PUSH
40285: LD_VAR 0 6
40289: PUSH
40290: FOR_IN
40291: IFFALSE 40316
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40293: LD_ADDR_VAR 0 17
40297: PUSH
40298: LD_VAR 0 17
40302: PUSH
40303: LD_VAR 0 8
40307: PPUSH
40308: CALL_OW 478
40312: UNION
40313: ST_TO_ADDR
40314: GO 40290
40316: POP
40317: POP
// if not fac_list then
40318: LD_VAR 0 17
40322: NOT
40323: IFFALSE 40327
// exit ;
40325: GO 41246
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40327: LD_ADDR_VAR 0 5
40331: PUSH
40332: LD_INT 4
40334: PUSH
40335: LD_INT 5
40337: PUSH
40338: LD_INT 9
40340: PUSH
40341: LD_INT 10
40343: PUSH
40344: LD_INT 6
40346: PUSH
40347: LD_INT 7
40349: PUSH
40350: LD_INT 11
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 27
40364: PUSH
40365: LD_INT 28
40367: PUSH
40368: LD_INT 26
40370: PUSH
40371: LD_INT 30
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 43
40382: PUSH
40383: LD_INT 44
40385: PUSH
40386: LD_INT 46
40388: PUSH
40389: LD_INT 45
40391: PUSH
40392: LD_INT 47
40394: PUSH
40395: LD_INT 49
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: LD_VAR 0 12
40415: ARRAY
40416: ST_TO_ADDR
// list := list isect fac_list ;
40417: LD_ADDR_VAR 0 5
40421: PUSH
40422: LD_VAR 0 5
40426: PUSH
40427: LD_VAR 0 17
40431: ISECT
40432: ST_TO_ADDR
// if not list then
40433: LD_VAR 0 5
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 41246
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40442: LD_VAR 0 12
40446: PUSH
40447: LD_INT 3
40449: EQUAL
40450: PUSH
40451: LD_INT 49
40453: PUSH
40454: LD_VAR 0 5
40458: IN
40459: AND
40460: PUSH
40461: LD_INT 31
40463: PPUSH
40464: LD_VAR 0 16
40468: PPUSH
40469: CALL_OW 321
40473: PUSH
40474: LD_INT 2
40476: EQUAL
40477: AND
40478: IFFALSE 40538
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40480: LD_INT 22
40482: PUSH
40483: LD_VAR 0 16
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 35
40494: PUSH
40495: LD_INT 49
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 91
40504: PUSH
40505: LD_VAR 0 1
40509: PUSH
40510: LD_INT 10
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: PPUSH
40523: CALL_OW 69
40527: NOT
40528: IFFALSE 40538
// weapon := ru_time_lapser ;
40530: LD_ADDR_VAR 0 18
40534: PUSH
40535: LD_INT 49
40537: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40538: LD_VAR 0 12
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: IN
40553: PUSH
40554: LD_INT 11
40556: PUSH
40557: LD_VAR 0 5
40561: IN
40562: PUSH
40563: LD_INT 30
40565: PUSH
40566: LD_VAR 0 5
40570: IN
40571: OR
40572: AND
40573: PUSH
40574: LD_INT 6
40576: PPUSH
40577: LD_VAR 0 16
40581: PPUSH
40582: CALL_OW 321
40586: PUSH
40587: LD_INT 2
40589: EQUAL
40590: AND
40591: IFFALSE 40756
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40593: LD_INT 22
40595: PUSH
40596: LD_VAR 0 16
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: LD_INT 35
40610: PUSH
40611: LD_INT 11
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 35
40620: PUSH
40621: LD_INT 30
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 91
40635: PUSH
40636: LD_VAR 0 1
40640: PUSH
40641: LD_INT 18
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: PPUSH
40654: CALL_OW 69
40658: NOT
40659: PUSH
40660: LD_INT 22
40662: PUSH
40663: LD_VAR 0 16
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 30
40677: PUSH
40678: LD_INT 32
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 30
40687: PUSH
40688: LD_INT 33
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 91
40702: PUSH
40703: LD_VAR 0 1
40707: PUSH
40708: LD_INT 12
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: LIST
40720: PUSH
40721: EMPTY
40722: LIST
40723: PPUSH
40724: CALL_OW 69
40728: PUSH
40729: LD_INT 2
40731: GREATER
40732: AND
40733: IFFALSE 40756
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40735: LD_ADDR_VAR 0 18
40739: PUSH
40740: LD_INT 11
40742: PUSH
40743: LD_INT 30
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_VAR 0 12
40754: ARRAY
40755: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40756: LD_VAR 0 18
40760: NOT
40761: PUSH
40762: LD_INT 40
40764: PPUSH
40765: LD_VAR 0 16
40769: PPUSH
40770: CALL_OW 321
40774: PUSH
40775: LD_INT 2
40777: EQUAL
40778: AND
40779: PUSH
40780: LD_INT 7
40782: PUSH
40783: LD_VAR 0 5
40787: IN
40788: PUSH
40789: LD_INT 28
40791: PUSH
40792: LD_VAR 0 5
40796: IN
40797: OR
40798: PUSH
40799: LD_INT 45
40801: PUSH
40802: LD_VAR 0 5
40806: IN
40807: OR
40808: AND
40809: IFFALSE 41063
// begin hex := GetHexInfo ( x , y ) ;
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: LD_VAR 0 10
40820: PPUSH
40821: LD_VAR 0 11
40825: PPUSH
40826: CALL_OW 546
40830: ST_TO_ADDR
// if hex [ 1 ] then
40831: LD_VAR 0 4
40835: PUSH
40836: LD_INT 1
40838: ARRAY
40839: IFFALSE 40843
// exit ;
40841: GO 41246
// height := hex [ 2 ] ;
40843: LD_ADDR_VAR 0 15
40847: PUSH
40848: LD_VAR 0 4
40852: PUSH
40853: LD_INT 2
40855: ARRAY
40856: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40857: LD_ADDR_VAR 0 14
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 3
40870: PUSH
40871: LD_INT 5
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// for i in tmp do
40880: LD_ADDR_VAR 0 8
40884: PUSH
40885: LD_VAR 0 14
40889: PUSH
40890: FOR_IN
40891: IFFALSE 41061
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40893: LD_ADDR_VAR 0 9
40897: PUSH
40898: LD_VAR 0 10
40902: PPUSH
40903: LD_VAR 0 8
40907: PPUSH
40908: LD_INT 5
40910: PPUSH
40911: CALL_OW 272
40915: PUSH
40916: LD_VAR 0 11
40920: PPUSH
40921: LD_VAR 0 8
40925: PPUSH
40926: LD_INT 5
40928: PPUSH
40929: CALL_OW 273
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40938: LD_VAR 0 9
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 9
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: PPUSH
40956: CALL_OW 488
40960: IFFALSE 41059
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40962: LD_ADDR_VAR 0 4
40966: PUSH
40967: LD_VAR 0 9
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PPUSH
40976: LD_VAR 0 9
40980: PUSH
40981: LD_INT 2
40983: ARRAY
40984: PPUSH
40985: CALL_OW 546
40989: ST_TO_ADDR
// if hex [ 1 ] then
40990: LD_VAR 0 4
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: IFFALSE 41002
// continue ;
41000: GO 40890
// h := hex [ 2 ] ;
41002: LD_ADDR_VAR 0 13
41006: PUSH
41007: LD_VAR 0 4
41011: PUSH
41012: LD_INT 2
41014: ARRAY
41015: ST_TO_ADDR
// if h + 7 < height then
41016: LD_VAR 0 13
41020: PUSH
41021: LD_INT 7
41023: PLUS
41024: PUSH
41025: LD_VAR 0 15
41029: LESS
41030: IFFALSE 41059
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41032: LD_ADDR_VAR 0 18
41036: PUSH
41037: LD_INT 7
41039: PUSH
41040: LD_INT 28
41042: PUSH
41043: LD_INT 45
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: PUSH
41051: LD_VAR 0 12
41055: ARRAY
41056: ST_TO_ADDR
// break ;
41057: GO 41061
// end ; end ; end ;
41059: GO 40890
41061: POP
41062: POP
// end ; if not weapon then
41063: LD_VAR 0 18
41067: NOT
41068: IFFALSE 41128
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41070: LD_ADDR_VAR 0 5
41074: PUSH
41075: LD_VAR 0 5
41079: PUSH
41080: LD_INT 11
41082: PUSH
41083: LD_INT 30
41085: PUSH
41086: LD_INT 49
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: DIFF
41094: ST_TO_ADDR
// if not list then
41095: LD_VAR 0 5
41099: NOT
41100: IFFALSE 41104
// exit ;
41102: GO 41246
// weapon := list [ rand ( 1 , list ) ] ;
41104: LD_ADDR_VAR 0 18
41108: PUSH
41109: LD_VAR 0 5
41113: PUSH
41114: LD_INT 1
41116: PPUSH
41117: LD_VAR 0 5
41121: PPUSH
41122: CALL_OW 12
41126: ARRAY
41127: ST_TO_ADDR
// end ; if weapon then
41128: LD_VAR 0 18
41132: IFFALSE 41246
// begin tmp := CostOfWeapon ( weapon ) ;
41134: LD_ADDR_VAR 0 14
41138: PUSH
41139: LD_VAR 0 18
41143: PPUSH
41144: CALL_OW 451
41148: ST_TO_ADDR
// j := GetBase ( tower ) ;
41149: LD_ADDR_VAR 0 9
41153: PUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 274
41163: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41164: LD_VAR 0 9
41168: PPUSH
41169: LD_INT 1
41171: PPUSH
41172: CALL_OW 275
41176: PUSH
41177: LD_VAR 0 14
41181: PUSH
41182: LD_INT 1
41184: ARRAY
41185: GREATEREQUAL
41186: PUSH
41187: LD_VAR 0 9
41191: PPUSH
41192: LD_INT 2
41194: PPUSH
41195: CALL_OW 275
41199: PUSH
41200: LD_VAR 0 14
41204: PUSH
41205: LD_INT 2
41207: ARRAY
41208: GREATEREQUAL
41209: AND
41210: PUSH
41211: LD_VAR 0 9
41215: PPUSH
41216: LD_INT 3
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 14
41228: PUSH
41229: LD_INT 3
41231: ARRAY
41232: GREATEREQUAL
41233: AND
41234: IFFALSE 41246
// result := weapon ;
41236: LD_ADDR_VAR 0 3
41240: PUSH
41241: LD_VAR 0 18
41245: ST_TO_ADDR
// end ; end ;
41246: LD_VAR 0 3
41250: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41251: LD_INT 0
41253: PPUSH
41254: PPUSH
// result := true ;
41255: LD_ADDR_VAR 0 3
41259: PUSH
41260: LD_INT 1
41262: ST_TO_ADDR
// if array1 = array2 then
41263: LD_VAR 0 1
41267: PUSH
41268: LD_VAR 0 2
41272: EQUAL
41273: IFFALSE 41333
// begin for i = 1 to array1 do
41275: LD_ADDR_VAR 0 4
41279: PUSH
41280: DOUBLE
41281: LD_INT 1
41283: DEC
41284: ST_TO_ADDR
41285: LD_VAR 0 1
41289: PUSH
41290: FOR_TO
41291: IFFALSE 41329
// if array1 [ i ] <> array2 [ i ] then
41293: LD_VAR 0 1
41297: PUSH
41298: LD_VAR 0 4
41302: ARRAY
41303: PUSH
41304: LD_VAR 0 2
41308: PUSH
41309: LD_VAR 0 4
41313: ARRAY
41314: NONEQUAL
41315: IFFALSE 41327
// begin result := false ;
41317: LD_ADDR_VAR 0 3
41321: PUSH
41322: LD_INT 0
41324: ST_TO_ADDR
// break ;
41325: GO 41329
// end ;
41327: GO 41290
41329: POP
41330: POP
// end else
41331: GO 41341
// result := false ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 0
41340: ST_TO_ADDR
// end ;
41341: LD_VAR 0 3
41345: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
// if not array1 or not array2 then
41350: LD_VAR 0 1
41354: NOT
41355: PUSH
41356: LD_VAR 0 2
41360: NOT
41361: OR
41362: IFFALSE 41366
// exit ;
41364: GO 41430
// result := true ;
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 1
41373: ST_TO_ADDR
// for i = 1 to array1 do
41374: LD_ADDR_VAR 0 4
41378: PUSH
41379: DOUBLE
41380: LD_INT 1
41382: DEC
41383: ST_TO_ADDR
41384: LD_VAR 0 1
41388: PUSH
41389: FOR_TO
41390: IFFALSE 41428
// if array1 [ i ] <> array2 [ i ] then
41392: LD_VAR 0 1
41396: PUSH
41397: LD_VAR 0 4
41401: ARRAY
41402: PUSH
41403: LD_VAR 0 2
41407: PUSH
41408: LD_VAR 0 4
41412: ARRAY
41413: NONEQUAL
41414: IFFALSE 41426
// begin result := false ;
41416: LD_ADDR_VAR 0 3
41420: PUSH
41421: LD_INT 0
41423: ST_TO_ADDR
// break ;
41424: GO 41428
// end ;
41426: GO 41389
41428: POP
41429: POP
// end ;
41430: LD_VAR 0 3
41434: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41435: LD_INT 0
41437: PPUSH
41438: PPUSH
41439: PPUSH
// pom := GetBase ( fac ) ;
41440: LD_ADDR_VAR 0 5
41444: PUSH
41445: LD_VAR 0 1
41449: PPUSH
41450: CALL_OW 274
41454: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41455: LD_ADDR_VAR 0 4
41459: PUSH
41460: LD_VAR 0 2
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PPUSH
41469: LD_VAR 0 2
41473: PUSH
41474: LD_INT 2
41476: ARRAY
41477: PPUSH
41478: LD_VAR 0 2
41482: PUSH
41483: LD_INT 3
41485: ARRAY
41486: PPUSH
41487: LD_VAR 0 2
41491: PUSH
41492: LD_INT 4
41494: ARRAY
41495: PPUSH
41496: CALL_OW 449
41500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 5
41510: PPUSH
41511: LD_INT 1
41513: PPUSH
41514: CALL_OW 275
41518: PUSH
41519: LD_VAR 0 4
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: GREATEREQUAL
41528: PUSH
41529: LD_VAR 0 5
41533: PPUSH
41534: LD_INT 2
41536: PPUSH
41537: CALL_OW 275
41541: PUSH
41542: LD_VAR 0 4
41546: PUSH
41547: LD_INT 2
41549: ARRAY
41550: GREATEREQUAL
41551: AND
41552: PUSH
41553: LD_VAR 0 5
41557: PPUSH
41558: LD_INT 3
41560: PPUSH
41561: CALL_OW 275
41565: PUSH
41566: LD_VAR 0 4
41570: PUSH
41571: LD_INT 3
41573: ARRAY
41574: GREATEREQUAL
41575: AND
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 3
41581: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
// pom := GetBase ( building ) ;
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_VAR 0 1
41597: PPUSH
41598: CALL_OW 274
41602: ST_TO_ADDR
// if not pom then
41603: LD_VAR 0 3
41607: NOT
41608: IFFALSE 41612
// exit ;
41610: GO 41782
// btype := GetBType ( building ) ;
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL_OW 266
41626: ST_TO_ADDR
// if btype = b_armoury then
41627: LD_VAR 0 5
41631: PUSH
41632: LD_INT 4
41634: EQUAL
41635: IFFALSE 41645
// btype := b_barracks ;
41637: LD_ADDR_VAR 0 5
41641: PUSH
41642: LD_INT 5
41644: ST_TO_ADDR
// if btype = b_depot then
41645: LD_VAR 0 5
41649: PUSH
41650: LD_INT 0
41652: EQUAL
41653: IFFALSE 41663
// btype := b_warehouse ;
41655: LD_ADDR_VAR 0 5
41659: PUSH
41660: LD_INT 1
41662: ST_TO_ADDR
// if btype = b_workshop then
41663: LD_VAR 0 5
41667: PUSH
41668: LD_INT 2
41670: EQUAL
41671: IFFALSE 41681
// btype := b_factory ;
41673: LD_ADDR_VAR 0 5
41677: PUSH
41678: LD_INT 3
41680: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41681: LD_ADDR_VAR 0 4
41685: PUSH
41686: LD_VAR 0 5
41690: PPUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 248
41700: PPUSH
41701: CALL_OW 450
41705: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41706: LD_ADDR_VAR 0 2
41710: PUSH
41711: LD_VAR 0 3
41715: PPUSH
41716: LD_INT 1
41718: PPUSH
41719: CALL_OW 275
41723: PUSH
41724: LD_VAR 0 4
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: GREATEREQUAL
41733: PUSH
41734: LD_VAR 0 3
41738: PPUSH
41739: LD_INT 2
41741: PPUSH
41742: CALL_OW 275
41746: PUSH
41747: LD_VAR 0 4
41751: PUSH
41752: LD_INT 2
41754: ARRAY
41755: GREATEREQUAL
41756: AND
41757: PUSH
41758: LD_VAR 0 3
41762: PPUSH
41763: LD_INT 3
41765: PPUSH
41766: CALL_OW 275
41770: PUSH
41771: LD_VAR 0 4
41775: PUSH
41776: LD_INT 3
41778: ARRAY
41779: GREATEREQUAL
41780: AND
41781: ST_TO_ADDR
// end ;
41782: LD_VAR 0 2
41786: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41787: LD_INT 0
41789: PPUSH
41790: PPUSH
41791: PPUSH
// pom := GetBase ( building ) ;
41792: LD_ADDR_VAR 0 4
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: CALL_OW 274
41806: ST_TO_ADDR
// if not pom then
41807: LD_VAR 0 4
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 41917
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: LD_VAR 0 1
41830: PPUSH
41831: CALL_OW 248
41835: PPUSH
41836: CALL_OW 450
41840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41841: LD_ADDR_VAR 0 3
41845: PUSH
41846: LD_VAR 0 4
41850: PPUSH
41851: LD_INT 1
41853: PPUSH
41854: CALL_OW 275
41858: PUSH
41859: LD_VAR 0 5
41863: PUSH
41864: LD_INT 1
41866: ARRAY
41867: GREATEREQUAL
41868: PUSH
41869: LD_VAR 0 4
41873: PPUSH
41874: LD_INT 2
41876: PPUSH
41877: CALL_OW 275
41881: PUSH
41882: LD_VAR 0 5
41886: PUSH
41887: LD_INT 2
41889: ARRAY
41890: GREATEREQUAL
41891: AND
41892: PUSH
41893: LD_VAR 0 4
41897: PPUSH
41898: LD_INT 3
41900: PPUSH
41901: CALL_OW 275
41905: PUSH
41906: LD_VAR 0 5
41910: PUSH
41911: LD_INT 3
41913: ARRAY
41914: GREATEREQUAL
41915: AND
41916: ST_TO_ADDR
// end ;
41917: LD_VAR 0 3
41921: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41922: LD_INT 0
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
// result := false ;
41935: LD_ADDR_VAR 0 8
41939: PUSH
41940: LD_INT 0
41942: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41943: LD_VAR 0 5
41947: NOT
41948: PUSH
41949: LD_VAR 0 1
41953: NOT
41954: OR
41955: PUSH
41956: LD_VAR 0 2
41960: NOT
41961: OR
41962: PUSH
41963: LD_VAR 0 3
41967: NOT
41968: OR
41969: IFFALSE 41973
// exit ;
41971: GO 42787
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41973: LD_ADDR_VAR 0 14
41977: PUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: LD_VAR 0 2
41987: PPUSH
41988: LD_VAR 0 3
41992: PPUSH
41993: LD_VAR 0 4
41997: PPUSH
41998: LD_VAR 0 5
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: CALL_OW 248
42011: PPUSH
42012: LD_INT 0
42014: PPUSH
42015: CALL 44024 0 6
42019: ST_TO_ADDR
// if not hexes then
42020: LD_VAR 0 14
42024: NOT
42025: IFFALSE 42029
// exit ;
42027: GO 42787
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42029: LD_ADDR_VAR 0 17
42033: PUSH
42034: LD_VAR 0 5
42038: PPUSH
42039: LD_INT 22
42041: PUSH
42042: LD_VAR 0 13
42046: PPUSH
42047: CALL_OW 255
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 30
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 30
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PPUSH
42088: CALL_OW 72
42092: ST_TO_ADDR
// for i = 1 to hexes do
42093: LD_ADDR_VAR 0 9
42097: PUSH
42098: DOUBLE
42099: LD_INT 1
42101: DEC
42102: ST_TO_ADDR
42103: LD_VAR 0 14
42107: PUSH
42108: FOR_TO
42109: IFFALSE 42785
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42111: LD_ADDR_VAR 0 13
42115: PUSH
42116: LD_VAR 0 14
42120: PUSH
42121: LD_VAR 0 9
42125: ARRAY
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 14
42135: PUSH
42136: LD_VAR 0 9
42140: ARRAY
42141: PUSH
42142: LD_INT 2
42144: ARRAY
42145: PPUSH
42146: CALL_OW 428
42150: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42151: LD_VAR 0 14
42155: PUSH
42156: LD_VAR 0 9
42160: ARRAY
42161: PUSH
42162: LD_INT 1
42164: ARRAY
42165: PPUSH
42166: LD_VAR 0 14
42170: PUSH
42171: LD_VAR 0 9
42175: ARRAY
42176: PUSH
42177: LD_INT 2
42179: ARRAY
42180: PPUSH
42181: CALL_OW 351
42185: PUSH
42186: LD_VAR 0 14
42190: PUSH
42191: LD_VAR 0 9
42195: ARRAY
42196: PUSH
42197: LD_INT 1
42199: ARRAY
42200: PPUSH
42201: LD_VAR 0 14
42205: PUSH
42206: LD_VAR 0 9
42210: ARRAY
42211: PUSH
42212: LD_INT 2
42214: ARRAY
42215: PPUSH
42216: CALL_OW 488
42220: NOT
42221: OR
42222: PUSH
42223: LD_VAR 0 13
42227: PPUSH
42228: CALL_OW 247
42232: PUSH
42233: LD_INT 3
42235: EQUAL
42236: OR
42237: IFFALSE 42243
// exit ;
42239: POP
42240: POP
42241: GO 42787
// if not tmp then
42243: LD_VAR 0 13
42247: NOT
42248: IFFALSE 42252
// continue ;
42250: GO 42108
// result := true ;
42252: LD_ADDR_VAR 0 8
42256: PUSH
42257: LD_INT 1
42259: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42260: LD_VAR 0 6
42264: PUSH
42265: LD_VAR 0 13
42269: PPUSH
42270: CALL_OW 247
42274: PUSH
42275: LD_INT 2
42277: EQUAL
42278: AND
42279: PUSH
42280: LD_VAR 0 13
42284: PPUSH
42285: CALL_OW 263
42289: PUSH
42290: LD_INT 1
42292: EQUAL
42293: AND
42294: IFFALSE 42458
// begin if IsDrivenBy ( tmp ) then
42296: LD_VAR 0 13
42300: PPUSH
42301: CALL_OW 311
42305: IFFALSE 42309
// continue ;
42307: GO 42108
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42309: LD_VAR 0 6
42313: PPUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 60
42319: PUSH
42320: EMPTY
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: LD_INT 55
42332: PUSH
42333: EMPTY
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PPUSH
42344: CALL_OW 72
42348: IFFALSE 42456
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42350: LD_ADDR_VAR 0 18
42354: PUSH
42355: LD_VAR 0 6
42359: PPUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 60
42365: PUSH
42366: EMPTY
42367: LIST
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 55
42378: PUSH
42379: EMPTY
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PPUSH
42390: CALL_OW 72
42394: PUSH
42395: LD_INT 1
42397: ARRAY
42398: ST_TO_ADDR
// if IsInUnit ( driver ) then
42399: LD_VAR 0 18
42403: PPUSH
42404: CALL_OW 310
42408: IFFALSE 42419
// ComExit ( driver ) ;
42410: LD_VAR 0 18
42414: PPUSH
42415: CALL 67152 0 1
// AddComEnterUnit ( driver , tmp ) ;
42419: LD_VAR 0 18
42423: PPUSH
42424: LD_VAR 0 13
42428: PPUSH
42429: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42433: LD_VAR 0 18
42437: PPUSH
42438: LD_VAR 0 7
42442: PPUSH
42443: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42447: LD_VAR 0 18
42451: PPUSH
42452: CALL_OW 181
// end ; continue ;
42456: GO 42108
// end ; if not cleaners or not tmp in cleaners then
42458: LD_VAR 0 6
42462: NOT
42463: PUSH
42464: LD_VAR 0 13
42468: PUSH
42469: LD_VAR 0 6
42473: IN
42474: NOT
42475: OR
42476: IFFALSE 42783
// begin if dep then
42478: LD_VAR 0 17
42482: IFFALSE 42618
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42484: LD_ADDR_VAR 0 16
42488: PUSH
42489: LD_VAR 0 17
42493: PUSH
42494: LD_INT 1
42496: ARRAY
42497: PPUSH
42498: CALL_OW 250
42502: PPUSH
42503: LD_VAR 0 17
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PPUSH
42512: CALL_OW 254
42516: PPUSH
42517: LD_INT 5
42519: PPUSH
42520: CALL_OW 272
42524: PUSH
42525: LD_VAR 0 17
42529: PUSH
42530: LD_INT 1
42532: ARRAY
42533: PPUSH
42534: CALL_OW 251
42538: PPUSH
42539: LD_VAR 0 17
42543: PUSH
42544: LD_INT 1
42546: ARRAY
42547: PPUSH
42548: CALL_OW 254
42552: PPUSH
42553: LD_INT 5
42555: PPUSH
42556: CALL_OW 273
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42565: LD_VAR 0 16
42569: PUSH
42570: LD_INT 1
42572: ARRAY
42573: PPUSH
42574: LD_VAR 0 16
42578: PUSH
42579: LD_INT 2
42581: ARRAY
42582: PPUSH
42583: CALL_OW 488
42587: IFFALSE 42618
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42589: LD_VAR 0 13
42593: PPUSH
42594: LD_VAR 0 16
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: PPUSH
42603: LD_VAR 0 16
42607: PUSH
42608: LD_INT 2
42610: ARRAY
42611: PPUSH
42612: CALL_OW 111
// continue ;
42616: GO 42108
// end ; end ; r := GetDir ( tmp ) ;
42618: LD_ADDR_VAR 0 15
42622: PUSH
42623: LD_VAR 0 13
42627: PPUSH
42628: CALL_OW 254
42632: ST_TO_ADDR
// if r = 5 then
42633: LD_VAR 0 15
42637: PUSH
42638: LD_INT 5
42640: EQUAL
42641: IFFALSE 42651
// r := 0 ;
42643: LD_ADDR_VAR 0 15
42647: PUSH
42648: LD_INT 0
42650: ST_TO_ADDR
// for j = r to 5 do
42651: LD_ADDR_VAR 0 10
42655: PUSH
42656: DOUBLE
42657: LD_VAR 0 15
42661: DEC
42662: ST_TO_ADDR
42663: LD_INT 5
42665: PUSH
42666: FOR_TO
42667: IFFALSE 42781
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42669: LD_ADDR_VAR 0 11
42673: PUSH
42674: LD_VAR 0 13
42678: PPUSH
42679: CALL_OW 250
42683: PPUSH
42684: LD_VAR 0 10
42688: PPUSH
42689: LD_INT 2
42691: PPUSH
42692: CALL_OW 272
42696: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42697: LD_ADDR_VAR 0 12
42701: PUSH
42702: LD_VAR 0 13
42706: PPUSH
42707: CALL_OW 251
42711: PPUSH
42712: LD_VAR 0 10
42716: PPUSH
42717: LD_INT 2
42719: PPUSH
42720: CALL_OW 273
42724: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42725: LD_VAR 0 11
42729: PPUSH
42730: LD_VAR 0 12
42734: PPUSH
42735: CALL_OW 488
42739: PUSH
42740: LD_VAR 0 11
42744: PPUSH
42745: LD_VAR 0 12
42749: PPUSH
42750: CALL_OW 428
42754: NOT
42755: AND
42756: IFFALSE 42779
// begin ComMoveXY ( tmp , _x , _y ) ;
42758: LD_VAR 0 13
42762: PPUSH
42763: LD_VAR 0 11
42767: PPUSH
42768: LD_VAR 0 12
42772: PPUSH
42773: CALL_OW 111
// break ;
42777: GO 42781
// end ; end ;
42779: GO 42666
42781: POP
42782: POP
// end ; end ;
42783: GO 42108
42785: POP
42786: POP
// end ;
42787: LD_VAR 0 8
42791: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42792: LD_INT 0
42794: PPUSH
// result := true ;
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 1
42802: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42803: LD_VAR 0 2
42807: PUSH
42808: LD_INT 24
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42822
42814: LD_INT 33
42816: DOUBLE
42817: EQUAL
42818: IFTRUE 42822
42820: GO 42847
42822: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42823: LD_ADDR_VAR 0 3
42827: PUSH
42828: LD_INT 32
42830: PPUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 321
42840: PUSH
42841: LD_INT 2
42843: EQUAL
42844: ST_TO_ADDR
42845: GO 43167
42847: LD_INT 20
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42855
42853: GO 42880
42855: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_INT 6
42863: PPUSH
42864: LD_VAR 0 1
42868: PPUSH
42869: CALL_OW 321
42873: PUSH
42874: LD_INT 2
42876: EQUAL
42877: ST_TO_ADDR
42878: GO 43167
42880: LD_INT 22
42882: DOUBLE
42883: EQUAL
42884: IFTRUE 42894
42886: LD_INT 36
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42894
42892: GO 42919
42894: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 15
42902: PPUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 321
42912: PUSH
42913: LD_INT 2
42915: EQUAL
42916: ST_TO_ADDR
42917: GO 43167
42919: LD_INT 30
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42927
42925: GO 42952
42927: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_INT 20
42935: PPUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL_OW 321
42945: PUSH
42946: LD_INT 2
42948: EQUAL
42949: ST_TO_ADDR
42950: GO 43167
42952: LD_INT 28
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42966
42958: LD_INT 21
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42991
42966: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_INT 21
42974: PPUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 321
42984: PUSH
42985: LD_INT 2
42987: EQUAL
42988: ST_TO_ADDR
42989: GO 43167
42991: LD_INT 16
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 42999
42997: GO 43026
42999: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43000: LD_ADDR_VAR 0 3
43004: PUSH
43005: LD_EXP 117
43009: PPUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: CALL_OW 321
43019: PUSH
43020: LD_INT 2
43022: EQUAL
43023: ST_TO_ADDR
43024: GO 43167
43026: LD_INT 19
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43040
43032: LD_INT 23
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43040
43038: GO 43067
43040: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43041: LD_ADDR_VAR 0 3
43045: PUSH
43046: LD_EXP 116
43050: PPUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 321
43060: PUSH
43061: LD_INT 2
43063: EQUAL
43064: ST_TO_ADDR
43065: GO 43167
43067: LD_INT 17
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43100
43075: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_INT 39
43083: PPUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 321
43093: PUSH
43094: LD_INT 2
43096: EQUAL
43097: ST_TO_ADDR
43098: GO 43167
43100: LD_INT 18
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43133
43108: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 40
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 321
43126: PUSH
43127: LD_INT 2
43129: EQUAL
43130: ST_TO_ADDR
43131: GO 43167
43133: LD_INT 27
43135: DOUBLE
43136: EQUAL
43137: IFTRUE 43141
43139: GO 43166
43141: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43142: LD_ADDR_VAR 0 3
43146: PUSH
43147: LD_INT 35
43149: PPUSH
43150: LD_VAR 0 1
43154: PPUSH
43155: CALL_OW 321
43159: PUSH
43160: LD_INT 2
43162: EQUAL
43163: ST_TO_ADDR
43164: GO 43167
43166: POP
// end ;
43167: LD_VAR 0 3
43171: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43172: LD_INT 0
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
// result := false ;
43185: LD_ADDR_VAR 0 6
43189: PUSH
43190: LD_INT 0
43192: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43193: LD_VAR 0 1
43197: NOT
43198: PUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: CALL_OW 266
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: IN
43219: NOT
43220: OR
43221: PUSH
43222: LD_VAR 0 2
43226: NOT
43227: OR
43228: PUSH
43229: LD_VAR 0 5
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 5
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: IN
43260: NOT
43261: OR
43262: PUSH
43263: LD_VAR 0 3
43267: PPUSH
43268: LD_VAR 0 4
43272: PPUSH
43273: CALL_OW 488
43277: NOT
43278: OR
43279: IFFALSE 43283
// exit ;
43281: GO 44019
// side := GetSide ( depot ) ;
43283: LD_ADDR_VAR 0 9
43287: PUSH
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 255
43297: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43298: LD_VAR 0 9
43302: PPUSH
43303: LD_VAR 0 2
43307: PPUSH
43308: CALL 42792 0 2
43312: NOT
43313: IFFALSE 43317
// exit ;
43315: GO 44019
// pom := GetBase ( depot ) ;
43317: LD_ADDR_VAR 0 10
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: CALL_OW 274
43331: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43332: LD_ADDR_VAR 0 11
43336: PUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 248
43351: PPUSH
43352: CALL_OW 450
43356: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43357: LD_VAR 0 10
43361: PPUSH
43362: LD_INT 1
43364: PPUSH
43365: CALL_OW 275
43369: PUSH
43370: LD_VAR 0 11
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: GREATEREQUAL
43379: PUSH
43380: LD_VAR 0 10
43384: PPUSH
43385: LD_INT 2
43387: PPUSH
43388: CALL_OW 275
43392: PUSH
43393: LD_VAR 0 11
43397: PUSH
43398: LD_INT 2
43400: ARRAY
43401: GREATEREQUAL
43402: AND
43403: PUSH
43404: LD_VAR 0 10
43408: PPUSH
43409: LD_INT 3
43411: PPUSH
43412: CALL_OW 275
43416: PUSH
43417: LD_VAR 0 11
43421: PUSH
43422: LD_INT 3
43424: ARRAY
43425: GREATEREQUAL
43426: AND
43427: NOT
43428: IFFALSE 43432
// exit ;
43430: GO 44019
// if GetBType ( depot ) = b_depot then
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 266
43441: PUSH
43442: LD_INT 0
43444: EQUAL
43445: IFFALSE 43457
// dist := 28 else
43447: LD_ADDR_VAR 0 14
43451: PUSH
43452: LD_INT 28
43454: ST_TO_ADDR
43455: GO 43465
// dist := 36 ;
43457: LD_ADDR_VAR 0 14
43461: PUSH
43462: LD_INT 36
43464: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43465: LD_VAR 0 1
43469: PPUSH
43470: LD_VAR 0 3
43474: PPUSH
43475: LD_VAR 0 4
43479: PPUSH
43480: CALL_OW 297
43484: PUSH
43485: LD_VAR 0 14
43489: GREATER
43490: IFFALSE 43494
// exit ;
43492: GO 44019
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43494: LD_ADDR_VAR 0 12
43498: PUSH
43499: LD_VAR 0 2
43503: PPUSH
43504: LD_VAR 0 3
43508: PPUSH
43509: LD_VAR 0 4
43513: PPUSH
43514: LD_VAR 0 5
43518: PPUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: CALL_OW 248
43528: PPUSH
43529: LD_INT 0
43531: PPUSH
43532: CALL 44024 0 6
43536: ST_TO_ADDR
// if not hexes then
43537: LD_VAR 0 12
43541: NOT
43542: IFFALSE 43546
// exit ;
43544: GO 44019
// hex := GetHexInfo ( x , y ) ;
43546: LD_ADDR_VAR 0 15
43550: PUSH
43551: LD_VAR 0 3
43555: PPUSH
43556: LD_VAR 0 4
43560: PPUSH
43561: CALL_OW 546
43565: ST_TO_ADDR
// if hex [ 1 ] then
43566: LD_VAR 0 15
43570: PUSH
43571: LD_INT 1
43573: ARRAY
43574: IFFALSE 43578
// exit ;
43576: GO 44019
// height := hex [ 2 ] ;
43578: LD_ADDR_VAR 0 13
43582: PUSH
43583: LD_VAR 0 15
43587: PUSH
43588: LD_INT 2
43590: ARRAY
43591: ST_TO_ADDR
// for i = 1 to hexes do
43592: LD_ADDR_VAR 0 7
43596: PUSH
43597: DOUBLE
43598: LD_INT 1
43600: DEC
43601: ST_TO_ADDR
43602: LD_VAR 0 12
43606: PUSH
43607: FOR_TO
43608: IFFALSE 43938
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43610: LD_VAR 0 12
43614: PUSH
43615: LD_VAR 0 7
43619: ARRAY
43620: PUSH
43621: LD_INT 1
43623: ARRAY
43624: PPUSH
43625: LD_VAR 0 12
43629: PUSH
43630: LD_VAR 0 7
43634: ARRAY
43635: PUSH
43636: LD_INT 2
43638: ARRAY
43639: PPUSH
43640: CALL_OW 488
43644: NOT
43645: PUSH
43646: LD_VAR 0 12
43650: PUSH
43651: LD_VAR 0 7
43655: ARRAY
43656: PUSH
43657: LD_INT 1
43659: ARRAY
43660: PPUSH
43661: LD_VAR 0 12
43665: PUSH
43666: LD_VAR 0 7
43670: ARRAY
43671: PUSH
43672: LD_INT 2
43674: ARRAY
43675: PPUSH
43676: CALL_OW 428
43680: PUSH
43681: LD_INT 0
43683: GREATER
43684: OR
43685: PUSH
43686: LD_VAR 0 12
43690: PUSH
43691: LD_VAR 0 7
43695: ARRAY
43696: PUSH
43697: LD_INT 1
43699: ARRAY
43700: PPUSH
43701: LD_VAR 0 12
43705: PUSH
43706: LD_VAR 0 7
43710: ARRAY
43711: PUSH
43712: LD_INT 2
43714: ARRAY
43715: PPUSH
43716: CALL_OW 351
43720: OR
43721: IFFALSE 43727
// exit ;
43723: POP
43724: POP
43725: GO 44019
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43727: LD_ADDR_VAR 0 8
43731: PUSH
43732: LD_VAR 0 12
43736: PUSH
43737: LD_VAR 0 7
43741: ARRAY
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: LD_VAR 0 12
43751: PUSH
43752: LD_VAR 0 7
43756: ARRAY
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 546
43766: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43767: LD_VAR 0 8
43771: PUSH
43772: LD_INT 1
43774: ARRAY
43775: PUSH
43776: LD_VAR 0 8
43780: PUSH
43781: LD_INT 2
43783: ARRAY
43784: PUSH
43785: LD_VAR 0 13
43789: PUSH
43790: LD_INT 2
43792: PLUS
43793: GREATER
43794: OR
43795: PUSH
43796: LD_VAR 0 8
43800: PUSH
43801: LD_INT 2
43803: ARRAY
43804: PUSH
43805: LD_VAR 0 13
43809: PUSH
43810: LD_INT 2
43812: MINUS
43813: LESS
43814: OR
43815: PUSH
43816: LD_VAR 0 8
43820: PUSH
43821: LD_INT 3
43823: ARRAY
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 8
43830: PUSH
43831: LD_INT 9
43833: PUSH
43834: LD_INT 10
43836: PUSH
43837: LD_INT 11
43839: PUSH
43840: LD_INT 12
43842: PUSH
43843: LD_INT 13
43845: PUSH
43846: LD_INT 16
43848: PUSH
43849: LD_INT 17
43851: PUSH
43852: LD_INT 18
43854: PUSH
43855: LD_INT 19
43857: PUSH
43858: LD_INT 20
43860: PUSH
43861: LD_INT 21
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: IN
43879: NOT
43880: OR
43881: PUSH
43882: LD_VAR 0 8
43886: PUSH
43887: LD_INT 5
43889: ARRAY
43890: NOT
43891: OR
43892: PUSH
43893: LD_VAR 0 8
43897: PUSH
43898: LD_INT 6
43900: ARRAY
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 7
43910: PUSH
43911: LD_INT 9
43913: PUSH
43914: LD_INT 10
43916: PUSH
43917: LD_INT 11
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: IN
43928: NOT
43929: OR
43930: IFFALSE 43936
// exit ;
43932: POP
43933: POP
43934: GO 44019
// end ;
43936: GO 43607
43938: POP
43939: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43940: LD_VAR 0 9
43944: PPUSH
43945: LD_VAR 0 3
43949: PPUSH
43950: LD_VAR 0 4
43954: PPUSH
43955: LD_INT 20
43957: PPUSH
43958: CALL 35965 0 4
43962: PUSH
43963: LD_INT 4
43965: ARRAY
43966: IFFALSE 43970
// exit ;
43968: GO 44019
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43970: LD_VAR 0 2
43974: PUSH
43975: LD_INT 29
43977: PUSH
43978: LD_INT 30
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: IN
43985: PUSH
43986: LD_VAR 0 3
43990: PPUSH
43991: LD_VAR 0 4
43995: PPUSH
43996: LD_VAR 0 9
44000: PPUSH
44001: CALL_OW 440
44005: NOT
44006: AND
44007: IFFALSE 44011
// exit ;
44009: GO 44019
// result := true ;
44011: LD_ADDR_VAR 0 6
44015: PUSH
44016: LD_INT 1
44018: ST_TO_ADDR
// end ;
44019: LD_VAR 0 6
44023: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44024: LD_INT 0
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
// result = [ ] ;
44084: LD_ADDR_VAR 0 7
44088: PUSH
44089: EMPTY
44090: ST_TO_ADDR
// temp_list = [ ] ;
44091: LD_ADDR_VAR 0 9
44095: PUSH
44096: EMPTY
44097: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44098: LD_VAR 0 4
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: LD_INT 4
44117: PUSH
44118: LD_INT 5
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: IN
44129: NOT
44130: PUSH
44131: LD_VAR 0 1
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: IN
44146: PUSH
44147: LD_VAR 0 5
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: IN
44166: NOT
44167: AND
44168: OR
44169: IFFALSE 44173
// exit ;
44171: GO 62564
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44173: LD_VAR 0 1
44177: PUSH
44178: LD_INT 6
44180: PUSH
44181: LD_INT 7
44183: PUSH
44184: LD_INT 8
44186: PUSH
44187: LD_INT 13
44189: PUSH
44190: LD_INT 12
44192: PUSH
44193: LD_INT 15
44195: PUSH
44196: LD_INT 11
44198: PUSH
44199: LD_INT 14
44201: PUSH
44202: LD_INT 10
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: IN
44216: IFFALSE 44226
// btype = b_lab ;
44218: LD_ADDR_VAR 0 1
44222: PUSH
44223: LD_INT 6
44225: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44226: LD_VAR 0 6
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: IN
44245: NOT
44246: PUSH
44247: LD_VAR 0 1
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 6
44266: PUSH
44267: LD_INT 36
44269: PUSH
44270: LD_INT 4
44272: PUSH
44273: LD_INT 5
44275: PUSH
44276: LD_INT 31
44278: PUSH
44279: LD_INT 32
44281: PUSH
44282: LD_INT 33
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: IN
44298: NOT
44299: PUSH
44300: LD_VAR 0 6
44304: PUSH
44305: LD_INT 1
44307: EQUAL
44308: AND
44309: OR
44310: PUSH
44311: LD_VAR 0 1
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: IN
44326: NOT
44327: PUSH
44328: LD_VAR 0 6
44332: PUSH
44333: LD_INT 2
44335: EQUAL
44336: AND
44337: OR
44338: IFFALSE 44348
// mode = 0 ;
44340: LD_ADDR_VAR 0 6
44344: PUSH
44345: LD_INT 0
44347: ST_TO_ADDR
// case mode of 0 :
44348: LD_VAR 0 6
44352: PUSH
44353: LD_INT 0
44355: DOUBLE
44356: EQUAL
44357: IFTRUE 44361
44359: GO 55814
44361: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44362: LD_ADDR_VAR 0 11
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44555: LD_ADDR_VAR 0 12
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 3
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44751: LD_ADDR_VAR 0 13
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 3
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44950: LD_ADDR_VAR 0 14
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 3
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45146: LD_ADDR_VAR 0 15
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45339: LD_ADDR_VAR 0 16
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45532: LD_ADDR_VAR 0 17
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45762: LD_ADDR_VAR 0 18
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: NEG
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45992: LD_ADDR_VAR 0 19
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46222: LD_ADDR_VAR 0 20
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46452: LD_ADDR_VAR 0 21
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 2
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46682: LD_ADDR_VAR 0 22
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46912: LD_ADDR_VAR 0 23
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47192: LD_ADDR_VAR 0 24
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47468: LD_ADDR_VAR 0 25
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47742: LD_ADDR_VAR 0 26
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48018: LD_ADDR_VAR 0 27
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48298: LD_ADDR_VAR 0 28
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48580: LD_ADDR_VAR 0 29
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 3
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48859: LD_ADDR_VAR 0 30
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49137: LD_ADDR_VAR 0 31
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49415: LD_ADDR_VAR 0 32
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49693: LD_ADDR_VAR 0 33
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49972: LD_ADDR_VAR 0 34
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50252: LD_ADDR_VAR 0 35
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50364: LD_ADDR_VAR 0 36
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50476: LD_ADDR_VAR 0 37
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50588: LD_ADDR_VAR 0 38
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50700: LD_ADDR_VAR 0 39
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50812: LD_ADDR_VAR 0 40
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50924: LD_ADDR_VAR 0 41
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51274: LD_ADDR_VAR 0 42
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 3
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51624: LD_ADDR_VAR 0 43
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 3
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51972: LD_ADDR_VAR 0 44
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: NEG
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52322: LD_ADDR_VAR 0 45
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52672: LD_ADDR_VAR 0 46
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 3
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53020: LD_ADDR_VAR 0 47
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53171: LD_ADDR_VAR 0 48
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53318: LD_ADDR_VAR 0 49
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53462: LD_ADDR_VAR 0 50
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53606: LD_ADDR_VAR 0 51
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53753: LD_ADDR_VAR 0 52
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53904: LD_ADDR_VAR 0 53
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54134: LD_ADDR_VAR 0 54
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54364: LD_ADDR_VAR 0 55
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54594: LD_ADDR_VAR 0 56
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54824: LD_ADDR_VAR 0 57
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55054: LD_ADDR_VAR 0 58
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55284: LD_ADDR_VAR 0 59
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55372: LD_ADDR_VAR 0 60
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55460: LD_ADDR_VAR 0 61
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55548: LD_ADDR_VAR 0 62
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55636: LD_ADDR_VAR 0 63
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55724: LD_ADDR_VAR 0 64
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// end ; 1 :
55812: GO 61709
55814: LD_INT 1
55816: DOUBLE
55817: EQUAL
55818: IFTRUE 55822
55820: GO 58445
55822: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55823: LD_ADDR_VAR 0 11
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55867: LD_ADDR_VAR 0 12
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55908: LD_ADDR_VAR 0 13
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55948: LD_ADDR_VAR 0 14
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55989: LD_ADDR_VAR 0 15
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56033: LD_ADDR_VAR 0 16
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56079: LD_ADDR_VAR 0 17
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56123: LD_ADDR_VAR 0 18
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56164: LD_ADDR_VAR 0 19
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56204: LD_ADDR_VAR 0 20
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56245: LD_ADDR_VAR 0 21
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56289: LD_ADDR_VAR 0 22
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56335: LD_ADDR_VAR 0 23
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 4
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56379: LD_ADDR_VAR 0 24
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56420: LD_ADDR_VAR 0 25
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 4
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56460: LD_ADDR_VAR 0 26
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 4
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56501: LD_ADDR_VAR 0 27
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 4
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56545: LD_ADDR_VAR 0 28
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: NEG
56565: PUSH
56566: LD_INT 4
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56591: LD_ADDR_VAR 0 29
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 4
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 5
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 5
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 6
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 6
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56746: LD_ADDR_VAR 0 30
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 5
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 5
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 6
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 6
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56889: LD_ADDR_VAR 0 31
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 4
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: PUSH
56937: LD_INT 4
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 5
56956: PUSH
56957: LD_INT 4
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 5
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 5
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 6
56986: PUSH
56987: LD_INT 5
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 6
56996: PUSH
56997: LD_INT 6
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 5
57006: PUSH
57007: LD_INT 6
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57028: LD_ADDR_VAR 0 32
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 4
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 5
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 5
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 4
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 6
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: LD_INT 6
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 5
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57171: LD_ADDR_VAR 0 33
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 4
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 5
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 5
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 5
57280: NEG
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 6
57291: NEG
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 6
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57326: LD_ADDR_VAR 0 34
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: LD_INT 5
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 5
57417: NEG
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 5
57429: NEG
57430: PUSH
57431: LD_INT 5
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 5
57441: NEG
57442: PUSH
57443: LD_INT 6
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 6
57453: NEG
57454: PUSH
57455: LD_INT 5
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 6
57465: NEG
57466: PUSH
57467: LD_INT 6
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57489: LD_ADDR_VAR 0 41
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57533: LD_ADDR_VAR 0 42
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57574: LD_ADDR_VAR 0 43
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57614: LD_ADDR_VAR 0 44
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57655: LD_ADDR_VAR 0 45
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57699: LD_ADDR_VAR 0 46
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57745: LD_ADDR_VAR 0 47
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57778: LD_ADDR_VAR 0 48
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57809: LD_ADDR_VAR 0 49
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57838: LD_ADDR_VAR 0 50
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57867: LD_ADDR_VAR 0 51
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57898: LD_ADDR_VAR 0 52
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57931: LD_ADDR_VAR 0 53
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57975: LD_ADDR_VAR 0 54
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58016: LD_ADDR_VAR 0 55
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58056: LD_ADDR_VAR 0 56
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58097: LD_ADDR_VAR 0 57
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58141: LD_ADDR_VAR 0 58
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58187: LD_ADDR_VAR 0 59
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58231: LD_ADDR_VAR 0 60
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58272: LD_ADDR_VAR 0 61
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58312: LD_ADDR_VAR 0 62
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58353: LD_ADDR_VAR 0 63
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58397: LD_ADDR_VAR 0 64
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// end ; 2 :
58443: GO 61709
58445: LD_INT 2
58447: DOUBLE
58448: EQUAL
58449: IFTRUE 58453
58451: GO 61708
58453: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58454: LD_ADDR_VAR 0 29
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 5
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 4
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 4
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 5
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 4
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 4
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: LD_INT 5
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 4
58887: NEG
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 5
58911: NEG
58912: PUSH
58913: LD_INT 5
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 5
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 5
58935: NEG
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58992: LD_ADDR_VAR 0 30
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: LD_INT 4
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 4
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 5
59019: PUSH
59020: LD_INT 4
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 5
59029: PUSH
59030: LD_INT 5
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 5
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 3
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 5
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 5
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 4
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 4
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: NEG
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 5
59238: NEG
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 5
59249: NEG
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 5
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 3
59284: NEG
59285: PUSH
59286: LD_INT 3
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 4
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: NEG
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 5
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 4
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 4
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 5
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59539: LD_ADDR_VAR 0 31
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 5
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 4
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 5
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 4
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 4
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 4
59741: NEG
59742: PUSH
59743: LD_INT 4
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 4
59753: NEG
59754: PUSH
59755: LD_INT 5
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: LD_INT 3
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 4
59789: NEG
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 5
59801: NEG
59802: PUSH
59803: LD_INT 4
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 5
59813: NEG
59814: PUSH
59815: LD_INT 5
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: LD_INT 5
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 5
59837: NEG
59838: PUSH
59839: LD_INT 3
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 4
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 4
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 5
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 5
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60089: LD_ADDR_VAR 0 32
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 4
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 5
60152: NEG
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 5
60163: NEG
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 5
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: LD_INT 4
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 4
60258: NEG
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: LD_INT 4
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: LD_INT 4
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 4
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 5
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 4
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 5
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 5
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 4
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 4
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 5
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 5
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60636: LD_ADDR_VAR 0 33
60640: PUSH
60641: LD_INT 4
60643: NEG
60644: PUSH
60645: LD_INT 4
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: NEG
60656: PUSH
60657: LD_INT 5
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 5
60703: NEG
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: NEG
60716: PUSH
60717: LD_INT 5
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: LD_INT 5
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 4
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 5
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 5
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 4
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 4
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 5
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 5
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 5
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61174: LD_ADDR_VAR 0 34
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: LD_INT 4
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 5
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: LD_INT 5
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 4
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 4
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 5
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 5
61406: PUSH
61407: LD_INT 5
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 4
61416: PUSH
61417: LD_INT 5
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: LD_INT 4
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 5
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 4
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 3
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 4
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 4
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 5
61615: NEG
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 5
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: ST_TO_ADDR
// end ; end ;
61706: GO 61709
61708: POP
// case btype of b_depot , b_warehouse :
61709: LD_VAR 0 1
61713: PUSH
61714: LD_INT 0
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61728
61720: LD_INT 1
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61929
61728: POP
// case nation of nation_american :
61729: LD_VAR 0 5
61733: PUSH
61734: LD_INT 1
61736: DOUBLE
61737: EQUAL
61738: IFTRUE 61742
61740: GO 61798
61742: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61743: LD_ADDR_VAR 0 9
61747: PUSH
61748: LD_VAR 0 11
61752: PUSH
61753: LD_VAR 0 12
61757: PUSH
61758: LD_VAR 0 13
61762: PUSH
61763: LD_VAR 0 14
61767: PUSH
61768: LD_VAR 0 15
61772: PUSH
61773: LD_VAR 0 16
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: PUSH
61786: LD_VAR 0 4
61790: PUSH
61791: LD_INT 1
61793: PLUS
61794: ARRAY
61795: ST_TO_ADDR
61796: GO 61927
61798: LD_INT 2
61800: DOUBLE
61801: EQUAL
61802: IFTRUE 61806
61804: GO 61862
61806: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61807: LD_ADDR_VAR 0 9
61811: PUSH
61812: LD_VAR 0 17
61816: PUSH
61817: LD_VAR 0 18
61821: PUSH
61822: LD_VAR 0 19
61826: PUSH
61827: LD_VAR 0 20
61831: PUSH
61832: LD_VAR 0 21
61836: PUSH
61837: LD_VAR 0 22
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: PUSH
61850: LD_VAR 0 4
61854: PUSH
61855: LD_INT 1
61857: PLUS
61858: ARRAY
61859: ST_TO_ADDR
61860: GO 61927
61862: LD_INT 3
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61870
61868: GO 61926
61870: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61871: LD_ADDR_VAR 0 9
61875: PUSH
61876: LD_VAR 0 23
61880: PUSH
61881: LD_VAR 0 24
61885: PUSH
61886: LD_VAR 0 25
61890: PUSH
61891: LD_VAR 0 26
61895: PUSH
61896: LD_VAR 0 27
61900: PUSH
61901: LD_VAR 0 28
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: PUSH
61914: LD_VAR 0 4
61918: PUSH
61919: LD_INT 1
61921: PLUS
61922: ARRAY
61923: ST_TO_ADDR
61924: GO 61927
61926: POP
61927: GO 62482
61929: LD_INT 2
61931: DOUBLE
61932: EQUAL
61933: IFTRUE 61943
61935: LD_INT 3
61937: DOUBLE
61938: EQUAL
61939: IFTRUE 61943
61941: GO 61999
61943: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61944: LD_ADDR_VAR 0 9
61948: PUSH
61949: LD_VAR 0 29
61953: PUSH
61954: LD_VAR 0 30
61958: PUSH
61959: LD_VAR 0 31
61963: PUSH
61964: LD_VAR 0 32
61968: PUSH
61969: LD_VAR 0 33
61973: PUSH
61974: LD_VAR 0 34
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 4
61991: PUSH
61992: LD_INT 1
61994: PLUS
61995: ARRAY
61996: ST_TO_ADDR
61997: GO 62482
61999: LD_INT 16
62001: DOUBLE
62002: EQUAL
62003: IFTRUE 62061
62005: LD_INT 17
62007: DOUBLE
62008: EQUAL
62009: IFTRUE 62061
62011: LD_INT 18
62013: DOUBLE
62014: EQUAL
62015: IFTRUE 62061
62017: LD_INT 19
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62061
62023: LD_INT 22
62025: DOUBLE
62026: EQUAL
62027: IFTRUE 62061
62029: LD_INT 20
62031: DOUBLE
62032: EQUAL
62033: IFTRUE 62061
62035: LD_INT 21
62037: DOUBLE
62038: EQUAL
62039: IFTRUE 62061
62041: LD_INT 23
62043: DOUBLE
62044: EQUAL
62045: IFTRUE 62061
62047: LD_INT 24
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62061
62053: LD_INT 25
62055: DOUBLE
62056: EQUAL
62057: IFTRUE 62061
62059: GO 62117
62061: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62062: LD_ADDR_VAR 0 9
62066: PUSH
62067: LD_VAR 0 35
62071: PUSH
62072: LD_VAR 0 36
62076: PUSH
62077: LD_VAR 0 37
62081: PUSH
62082: LD_VAR 0 38
62086: PUSH
62087: LD_VAR 0 39
62091: PUSH
62092: LD_VAR 0 40
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: PUSH
62105: LD_VAR 0 4
62109: PUSH
62110: LD_INT 1
62112: PLUS
62113: ARRAY
62114: ST_TO_ADDR
62115: GO 62482
62117: LD_INT 6
62119: DOUBLE
62120: EQUAL
62121: IFTRUE 62173
62123: LD_INT 7
62125: DOUBLE
62126: EQUAL
62127: IFTRUE 62173
62129: LD_INT 8
62131: DOUBLE
62132: EQUAL
62133: IFTRUE 62173
62135: LD_INT 13
62137: DOUBLE
62138: EQUAL
62139: IFTRUE 62173
62141: LD_INT 12
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62173
62147: LD_INT 15
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62173
62153: LD_INT 11
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62173
62159: LD_INT 14
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62173
62165: LD_INT 10
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62173
62171: GO 62229
62173: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62174: LD_ADDR_VAR 0 9
62178: PUSH
62179: LD_VAR 0 41
62183: PUSH
62184: LD_VAR 0 42
62188: PUSH
62189: LD_VAR 0 43
62193: PUSH
62194: LD_VAR 0 44
62198: PUSH
62199: LD_VAR 0 45
62203: PUSH
62204: LD_VAR 0 46
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: PUSH
62217: LD_VAR 0 4
62221: PUSH
62222: LD_INT 1
62224: PLUS
62225: ARRAY
62226: ST_TO_ADDR
62227: GO 62482
62229: LD_INT 36
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62237
62235: GO 62293
62237: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62238: LD_ADDR_VAR 0 9
62242: PUSH
62243: LD_VAR 0 47
62247: PUSH
62248: LD_VAR 0 48
62252: PUSH
62253: LD_VAR 0 49
62257: PUSH
62258: LD_VAR 0 50
62262: PUSH
62263: LD_VAR 0 51
62267: PUSH
62268: LD_VAR 0 52
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: LD_VAR 0 4
62285: PUSH
62286: LD_INT 1
62288: PLUS
62289: ARRAY
62290: ST_TO_ADDR
62291: GO 62482
62293: LD_INT 4
62295: DOUBLE
62296: EQUAL
62297: IFTRUE 62319
62299: LD_INT 5
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62319
62305: LD_INT 34
62307: DOUBLE
62308: EQUAL
62309: IFTRUE 62319
62311: LD_INT 37
62313: DOUBLE
62314: EQUAL
62315: IFTRUE 62319
62317: GO 62375
62319: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62320: LD_ADDR_VAR 0 9
62324: PUSH
62325: LD_VAR 0 53
62329: PUSH
62330: LD_VAR 0 54
62334: PUSH
62335: LD_VAR 0 55
62339: PUSH
62340: LD_VAR 0 56
62344: PUSH
62345: LD_VAR 0 57
62349: PUSH
62350: LD_VAR 0 58
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: PUSH
62363: LD_VAR 0 4
62367: PUSH
62368: LD_INT 1
62370: PLUS
62371: ARRAY
62372: ST_TO_ADDR
62373: GO 62482
62375: LD_INT 31
62377: DOUBLE
62378: EQUAL
62379: IFTRUE 62425
62381: LD_INT 32
62383: DOUBLE
62384: EQUAL
62385: IFTRUE 62425
62387: LD_INT 33
62389: DOUBLE
62390: EQUAL
62391: IFTRUE 62425
62393: LD_INT 27
62395: DOUBLE
62396: EQUAL
62397: IFTRUE 62425
62399: LD_INT 26
62401: DOUBLE
62402: EQUAL
62403: IFTRUE 62425
62405: LD_INT 28
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62425
62411: LD_INT 29
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62425
62417: LD_INT 30
62419: DOUBLE
62420: EQUAL
62421: IFTRUE 62425
62423: GO 62481
62425: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62426: LD_ADDR_VAR 0 9
62430: PUSH
62431: LD_VAR 0 59
62435: PUSH
62436: LD_VAR 0 60
62440: PUSH
62441: LD_VAR 0 61
62445: PUSH
62446: LD_VAR 0 62
62450: PUSH
62451: LD_VAR 0 63
62455: PUSH
62456: LD_VAR 0 64
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: PUSH
62469: LD_VAR 0 4
62473: PUSH
62474: LD_INT 1
62476: PLUS
62477: ARRAY
62478: ST_TO_ADDR
62479: GO 62482
62481: POP
// temp_list2 = [ ] ;
62482: LD_ADDR_VAR 0 10
62486: PUSH
62487: EMPTY
62488: ST_TO_ADDR
// for i in temp_list do
62489: LD_ADDR_VAR 0 8
62493: PUSH
62494: LD_VAR 0 9
62498: PUSH
62499: FOR_IN
62500: IFFALSE 62552
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62502: LD_ADDR_VAR 0 10
62506: PUSH
62507: LD_VAR 0 10
62511: PUSH
62512: LD_VAR 0 8
62516: PUSH
62517: LD_INT 1
62519: ARRAY
62520: PUSH
62521: LD_VAR 0 2
62525: PLUS
62526: PUSH
62527: LD_VAR 0 8
62531: PUSH
62532: LD_INT 2
62534: ARRAY
62535: PUSH
62536: LD_VAR 0 3
62540: PLUS
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: ADD
62549: ST_TO_ADDR
62550: GO 62499
62552: POP
62553: POP
// result = temp_list2 ;
62554: LD_ADDR_VAR 0 7
62558: PUSH
62559: LD_VAR 0 10
62563: ST_TO_ADDR
// end ;
62564: LD_VAR 0 7
62568: RET
// export function EnemyInRange ( unit , dist ) ; begin
62569: LD_INT 0
62571: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 255
62586: PPUSH
62587: LD_VAR 0 1
62591: PPUSH
62592: CALL_OW 250
62596: PPUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: CALL_OW 251
62606: PPUSH
62607: LD_VAR 0 2
62611: PPUSH
62612: CALL 35965 0 4
62616: PUSH
62617: LD_INT 4
62619: ARRAY
62620: ST_TO_ADDR
// end ;
62621: LD_VAR 0 3
62625: RET
// export function PlayerSeeMe ( unit ) ; begin
62626: LD_INT 0
62628: PPUSH
// result := See ( your_side , unit ) ;
62629: LD_ADDR_VAR 0 2
62633: PUSH
62634: LD_OWVAR 2
62638: PPUSH
62639: LD_VAR 0 1
62643: PPUSH
62644: CALL_OW 292
62648: ST_TO_ADDR
// end ;
62649: LD_VAR 0 2
62653: RET
// export function ReverseDir ( unit ) ; begin
62654: LD_INT 0
62656: PPUSH
// if not unit then
62657: LD_VAR 0 1
62661: NOT
62662: IFFALSE 62666
// exit ;
62664: GO 62689
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62666: LD_ADDR_VAR 0 2
62670: PUSH
62671: LD_VAR 0 1
62675: PPUSH
62676: CALL_OW 254
62680: PUSH
62681: LD_INT 3
62683: PLUS
62684: PUSH
62685: LD_INT 6
62687: MOD
62688: ST_TO_ADDR
// end ;
62689: LD_VAR 0 2
62693: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62694: LD_INT 0
62696: PPUSH
62697: PPUSH
62698: PPUSH
62699: PPUSH
62700: PPUSH
// if not hexes then
62701: LD_VAR 0 2
62705: NOT
62706: IFFALSE 62710
// exit ;
62708: GO 62858
// dist := 9999 ;
62710: LD_ADDR_VAR 0 5
62714: PUSH
62715: LD_INT 9999
62717: ST_TO_ADDR
// for i = 1 to hexes do
62718: LD_ADDR_VAR 0 4
62722: PUSH
62723: DOUBLE
62724: LD_INT 1
62726: DEC
62727: ST_TO_ADDR
62728: LD_VAR 0 2
62732: PUSH
62733: FOR_TO
62734: IFFALSE 62846
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_VAR 0 4
62750: ARRAY
62751: PUSH
62752: LD_INT 1
62754: ARRAY
62755: PPUSH
62756: LD_VAR 0 2
62760: PUSH
62761: LD_VAR 0 4
62765: ARRAY
62766: PUSH
62767: LD_INT 2
62769: ARRAY
62770: PPUSH
62771: CALL_OW 297
62775: PUSH
62776: LD_VAR 0 5
62780: LESS
62781: IFFALSE 62844
// begin hex := hexes [ i ] ;
62783: LD_ADDR_VAR 0 7
62787: PUSH
62788: LD_VAR 0 2
62792: PUSH
62793: LD_VAR 0 4
62797: ARRAY
62798: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62799: LD_ADDR_VAR 0 5
62803: PUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: LD_VAR 0 2
62813: PUSH
62814: LD_VAR 0 4
62818: ARRAY
62819: PUSH
62820: LD_INT 1
62822: ARRAY
62823: PPUSH
62824: LD_VAR 0 2
62828: PUSH
62829: LD_VAR 0 4
62833: ARRAY
62834: PUSH
62835: LD_INT 2
62837: ARRAY
62838: PPUSH
62839: CALL_OW 297
62843: ST_TO_ADDR
// end ; end ;
62844: GO 62733
62846: POP
62847: POP
// result := hex ;
62848: LD_ADDR_VAR 0 3
62852: PUSH
62853: LD_VAR 0 7
62857: ST_TO_ADDR
// end ;
62858: LD_VAR 0 3
62862: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62863: LD_INT 0
62865: PPUSH
62866: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62867: LD_VAR 0 1
62871: NOT
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_INT 21
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 23
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PPUSH
62902: CALL_OW 69
62906: IN
62907: NOT
62908: OR
62909: IFFALSE 62913
// exit ;
62911: GO 62960
// for i = 1 to 3 do
62913: LD_ADDR_VAR 0 3
62917: PUSH
62918: DOUBLE
62919: LD_INT 1
62921: DEC
62922: ST_TO_ADDR
62923: LD_INT 3
62925: PUSH
62926: FOR_TO
62927: IFFALSE 62958
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62929: LD_VAR 0 1
62933: PPUSH
62934: CALL_OW 250
62938: PPUSH
62939: LD_VAR 0 1
62943: PPUSH
62944: CALL_OW 251
62948: PPUSH
62949: LD_INT 1
62951: PPUSH
62952: CALL_OW 453
62956: GO 62926
62958: POP
62959: POP
// end ;
62960: LD_VAR 0 2
62964: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62965: LD_INT 0
62967: PPUSH
62968: PPUSH
62969: PPUSH
62970: PPUSH
62971: PPUSH
62972: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62973: LD_VAR 0 1
62977: NOT
62978: PUSH
62979: LD_VAR 0 2
62983: NOT
62984: OR
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: CALL_OW 314
62995: OR
62996: IFFALSE 63000
// exit ;
62998: GO 63441
// x := GetX ( enemy_unit ) ;
63000: LD_ADDR_VAR 0 7
63004: PUSH
63005: LD_VAR 0 2
63009: PPUSH
63010: CALL_OW 250
63014: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63015: LD_ADDR_VAR 0 8
63019: PUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: CALL_OW 251
63029: ST_TO_ADDR
// if not x or not y then
63030: LD_VAR 0 7
63034: NOT
63035: PUSH
63036: LD_VAR 0 8
63040: NOT
63041: OR
63042: IFFALSE 63046
// exit ;
63044: GO 63441
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63046: LD_ADDR_VAR 0 6
63050: PUSH
63051: LD_VAR 0 7
63055: PPUSH
63056: LD_INT 0
63058: PPUSH
63059: LD_INT 4
63061: PPUSH
63062: CALL_OW 272
63066: PUSH
63067: LD_VAR 0 8
63071: PPUSH
63072: LD_INT 0
63074: PPUSH
63075: LD_INT 4
63077: PPUSH
63078: CALL_OW 273
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_VAR 0 7
63091: PPUSH
63092: LD_INT 1
63094: PPUSH
63095: LD_INT 4
63097: PPUSH
63098: CALL_OW 272
63102: PUSH
63103: LD_VAR 0 8
63107: PPUSH
63108: LD_INT 1
63110: PPUSH
63111: LD_INT 4
63113: PPUSH
63114: CALL_OW 273
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_VAR 0 7
63127: PPUSH
63128: LD_INT 2
63130: PPUSH
63131: LD_INT 4
63133: PPUSH
63134: CALL_OW 272
63138: PUSH
63139: LD_VAR 0 8
63143: PPUSH
63144: LD_INT 2
63146: PPUSH
63147: LD_INT 4
63149: PPUSH
63150: CALL_OW 273
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_VAR 0 7
63163: PPUSH
63164: LD_INT 3
63166: PPUSH
63167: LD_INT 4
63169: PPUSH
63170: CALL_OW 272
63174: PUSH
63175: LD_VAR 0 8
63179: PPUSH
63180: LD_INT 3
63182: PPUSH
63183: LD_INT 4
63185: PPUSH
63186: CALL_OW 273
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_VAR 0 7
63199: PPUSH
63200: LD_INT 4
63202: PPUSH
63203: LD_INT 4
63205: PPUSH
63206: CALL_OW 272
63210: PUSH
63211: LD_VAR 0 8
63215: PPUSH
63216: LD_INT 4
63218: PPUSH
63219: LD_INT 4
63221: PPUSH
63222: CALL_OW 273
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_VAR 0 7
63235: PPUSH
63236: LD_INT 5
63238: PPUSH
63239: LD_INT 4
63241: PPUSH
63242: CALL_OW 272
63246: PUSH
63247: LD_VAR 0 8
63251: PPUSH
63252: LD_INT 5
63254: PPUSH
63255: LD_INT 4
63257: PPUSH
63258: CALL_OW 273
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// for i = tmp downto 1 do
63275: LD_ADDR_VAR 0 4
63279: PUSH
63280: DOUBLE
63281: LD_VAR 0 6
63285: INC
63286: ST_TO_ADDR
63287: LD_INT 1
63289: PUSH
63290: FOR_DOWNTO
63291: IFFALSE 63392
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63293: LD_VAR 0 6
63297: PUSH
63298: LD_VAR 0 4
63302: ARRAY
63303: PUSH
63304: LD_INT 1
63306: ARRAY
63307: PPUSH
63308: LD_VAR 0 6
63312: PUSH
63313: LD_VAR 0 4
63317: ARRAY
63318: PUSH
63319: LD_INT 2
63321: ARRAY
63322: PPUSH
63323: CALL_OW 488
63327: NOT
63328: PUSH
63329: LD_VAR 0 6
63333: PUSH
63334: LD_VAR 0 4
63338: ARRAY
63339: PUSH
63340: LD_INT 1
63342: ARRAY
63343: PPUSH
63344: LD_VAR 0 6
63348: PUSH
63349: LD_VAR 0 4
63353: ARRAY
63354: PUSH
63355: LD_INT 2
63357: ARRAY
63358: PPUSH
63359: CALL_OW 428
63363: PUSH
63364: LD_INT 0
63366: NONEQUAL
63367: OR
63368: IFFALSE 63390
// tmp := Delete ( tmp , i ) ;
63370: LD_ADDR_VAR 0 6
63374: PUSH
63375: LD_VAR 0 6
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: CALL_OW 3
63389: ST_TO_ADDR
63390: GO 63290
63392: POP
63393: POP
// j := GetClosestHex ( unit , tmp ) ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_VAR 0 1
63403: PPUSH
63404: LD_VAR 0 6
63408: PPUSH
63409: CALL 62694 0 2
63413: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63414: LD_VAR 0 1
63418: PPUSH
63419: LD_VAR 0 5
63423: PUSH
63424: LD_INT 1
63426: ARRAY
63427: PPUSH
63428: LD_VAR 0 5
63432: PUSH
63433: LD_INT 2
63435: ARRAY
63436: PPUSH
63437: CALL_OW 111
// end ;
63441: LD_VAR 0 3
63445: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63446: LD_INT 0
63448: PPUSH
63449: PPUSH
63450: PPUSH
// uc_side = 0 ;
63451: LD_ADDR_OWVAR 20
63455: PUSH
63456: LD_INT 0
63458: ST_TO_ADDR
// uc_nation = 0 ;
63459: LD_ADDR_OWVAR 21
63463: PUSH
63464: LD_INT 0
63466: ST_TO_ADDR
// InitHc_All ( ) ;
63467: CALL_OW 584
// InitVc ;
63471: CALL_OW 20
// if mastodonts then
63475: LD_VAR 0 6
63479: IFFALSE 63546
// for i = 1 to mastodonts do
63481: LD_ADDR_VAR 0 11
63485: PUSH
63486: DOUBLE
63487: LD_INT 1
63489: DEC
63490: ST_TO_ADDR
63491: LD_VAR 0 6
63495: PUSH
63496: FOR_TO
63497: IFFALSE 63544
// begin vc_chassis := 31 ;
63499: LD_ADDR_OWVAR 37
63503: PUSH
63504: LD_INT 31
63506: ST_TO_ADDR
// vc_control := control_rider ;
63507: LD_ADDR_OWVAR 38
63511: PUSH
63512: LD_INT 4
63514: ST_TO_ADDR
// animal := CreateVehicle ;
63515: LD_ADDR_VAR 0 12
63519: PUSH
63520: CALL_OW 45
63524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63525: LD_VAR 0 12
63529: PPUSH
63530: LD_VAR 0 8
63534: PPUSH
63535: LD_INT 0
63537: PPUSH
63538: CALL 65681 0 3
// end ;
63542: GO 63496
63544: POP
63545: POP
// if horses then
63546: LD_VAR 0 5
63550: IFFALSE 63617
// for i = 1 to horses do
63552: LD_ADDR_VAR 0 11
63556: PUSH
63557: DOUBLE
63558: LD_INT 1
63560: DEC
63561: ST_TO_ADDR
63562: LD_VAR 0 5
63566: PUSH
63567: FOR_TO
63568: IFFALSE 63615
// begin hc_class := 21 ;
63570: LD_ADDR_OWVAR 28
63574: PUSH
63575: LD_INT 21
63577: ST_TO_ADDR
// hc_gallery :=  ;
63578: LD_ADDR_OWVAR 33
63582: PUSH
63583: LD_STRING 
63585: ST_TO_ADDR
// animal := CreateHuman ;
63586: LD_ADDR_VAR 0 12
63590: PUSH
63591: CALL_OW 44
63595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63596: LD_VAR 0 12
63600: PPUSH
63601: LD_VAR 0 8
63605: PPUSH
63606: LD_INT 0
63608: PPUSH
63609: CALL 65681 0 3
// end ;
63613: GO 63567
63615: POP
63616: POP
// if birds then
63617: LD_VAR 0 1
63621: IFFALSE 63688
// for i = 1 to birds do
63623: LD_ADDR_VAR 0 11
63627: PUSH
63628: DOUBLE
63629: LD_INT 1
63631: DEC
63632: ST_TO_ADDR
63633: LD_VAR 0 1
63637: PUSH
63638: FOR_TO
63639: IFFALSE 63686
// begin hc_class = 18 ;
63641: LD_ADDR_OWVAR 28
63645: PUSH
63646: LD_INT 18
63648: ST_TO_ADDR
// hc_gallery =  ;
63649: LD_ADDR_OWVAR 33
63653: PUSH
63654: LD_STRING 
63656: ST_TO_ADDR
// animal := CreateHuman ;
63657: LD_ADDR_VAR 0 12
63661: PUSH
63662: CALL_OW 44
63666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63667: LD_VAR 0 12
63671: PPUSH
63672: LD_VAR 0 8
63676: PPUSH
63677: LD_INT 0
63679: PPUSH
63680: CALL 65681 0 3
// end ;
63684: GO 63638
63686: POP
63687: POP
// if tigers then
63688: LD_VAR 0 2
63692: IFFALSE 63776
// for i = 1 to tigers do
63694: LD_ADDR_VAR 0 11
63698: PUSH
63699: DOUBLE
63700: LD_INT 1
63702: DEC
63703: ST_TO_ADDR
63704: LD_VAR 0 2
63708: PUSH
63709: FOR_TO
63710: IFFALSE 63774
// begin hc_class = class_tiger ;
63712: LD_ADDR_OWVAR 28
63716: PUSH
63717: LD_INT 14
63719: ST_TO_ADDR
// hc_gallery =  ;
63720: LD_ADDR_OWVAR 33
63724: PUSH
63725: LD_STRING 
63727: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63728: LD_ADDR_OWVAR 35
63732: PUSH
63733: LD_INT 7
63735: NEG
63736: PPUSH
63737: LD_INT 7
63739: PPUSH
63740: CALL_OW 12
63744: ST_TO_ADDR
// animal := CreateHuman ;
63745: LD_ADDR_VAR 0 12
63749: PUSH
63750: CALL_OW 44
63754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63755: LD_VAR 0 12
63759: PPUSH
63760: LD_VAR 0 8
63764: PPUSH
63765: LD_INT 0
63767: PPUSH
63768: CALL 65681 0 3
// end ;
63772: GO 63709
63774: POP
63775: POP
// if apemans then
63776: LD_VAR 0 3
63780: IFFALSE 63903
// for i = 1 to apemans do
63782: LD_ADDR_VAR 0 11
63786: PUSH
63787: DOUBLE
63788: LD_INT 1
63790: DEC
63791: ST_TO_ADDR
63792: LD_VAR 0 3
63796: PUSH
63797: FOR_TO
63798: IFFALSE 63901
// begin hc_class = class_apeman ;
63800: LD_ADDR_OWVAR 28
63804: PUSH
63805: LD_INT 12
63807: ST_TO_ADDR
// hc_gallery =  ;
63808: LD_ADDR_OWVAR 33
63812: PUSH
63813: LD_STRING 
63815: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63816: LD_ADDR_OWVAR 35
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PPUSH
63825: LD_INT 2
63827: PPUSH
63828: CALL_OW 12
63832: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63833: LD_ADDR_OWVAR 31
63837: PUSH
63838: LD_INT 1
63840: PPUSH
63841: LD_INT 3
63843: PPUSH
63844: CALL_OW 12
63848: PUSH
63849: LD_INT 1
63851: PPUSH
63852: LD_INT 3
63854: PPUSH
63855: CALL_OW 12
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// animal := CreateHuman ;
63872: LD_ADDR_VAR 0 12
63876: PUSH
63877: CALL_OW 44
63881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63882: LD_VAR 0 12
63886: PPUSH
63887: LD_VAR 0 8
63891: PPUSH
63892: LD_INT 0
63894: PPUSH
63895: CALL 65681 0 3
// end ;
63899: GO 63797
63901: POP
63902: POP
// if enchidnas then
63903: LD_VAR 0 4
63907: IFFALSE 63974
// for i = 1 to enchidnas do
63909: LD_ADDR_VAR 0 11
63913: PUSH
63914: DOUBLE
63915: LD_INT 1
63917: DEC
63918: ST_TO_ADDR
63919: LD_VAR 0 4
63923: PUSH
63924: FOR_TO
63925: IFFALSE 63972
// begin hc_class = 13 ;
63927: LD_ADDR_OWVAR 28
63931: PUSH
63932: LD_INT 13
63934: ST_TO_ADDR
// hc_gallery =  ;
63935: LD_ADDR_OWVAR 33
63939: PUSH
63940: LD_STRING 
63942: ST_TO_ADDR
// animal := CreateHuman ;
63943: LD_ADDR_VAR 0 12
63947: PUSH
63948: CALL_OW 44
63952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63953: LD_VAR 0 12
63957: PPUSH
63958: LD_VAR 0 8
63962: PPUSH
63963: LD_INT 0
63965: PPUSH
63966: CALL 65681 0 3
// end ;
63970: GO 63924
63972: POP
63973: POP
// if fishes then
63974: LD_VAR 0 7
63978: IFFALSE 64045
// for i = 1 to fishes do
63980: LD_ADDR_VAR 0 11
63984: PUSH
63985: DOUBLE
63986: LD_INT 1
63988: DEC
63989: ST_TO_ADDR
63990: LD_VAR 0 7
63994: PUSH
63995: FOR_TO
63996: IFFALSE 64043
// begin hc_class = 20 ;
63998: LD_ADDR_OWVAR 28
64002: PUSH
64003: LD_INT 20
64005: ST_TO_ADDR
// hc_gallery =  ;
64006: LD_ADDR_OWVAR 33
64010: PUSH
64011: LD_STRING 
64013: ST_TO_ADDR
// animal := CreateHuman ;
64014: LD_ADDR_VAR 0 12
64018: PUSH
64019: CALL_OW 44
64023: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64024: LD_VAR 0 12
64028: PPUSH
64029: LD_VAR 0 9
64033: PPUSH
64034: LD_INT 0
64036: PPUSH
64037: CALL 65681 0 3
// end ;
64041: GO 63995
64043: POP
64044: POP
// end ;
64045: LD_VAR 0 10
64049: RET
// export function WantHeal ( sci , unit ) ; begin
64050: LD_INT 0
64052: PPUSH
// if GetTaskList ( sci ) > 0 then
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 437
64062: PUSH
64063: LD_INT 0
64065: GREATER
64066: IFFALSE 64136
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64068: LD_VAR 0 1
64072: PPUSH
64073: CALL_OW 437
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PUSH
64082: LD_INT 1
64084: ARRAY
64085: PUSH
64086: LD_STRING l
64088: EQUAL
64089: PUSH
64090: LD_VAR 0 1
64094: PPUSH
64095: CALL_OW 437
64099: PUSH
64100: LD_INT 1
64102: ARRAY
64103: PUSH
64104: LD_INT 4
64106: ARRAY
64107: PUSH
64108: LD_VAR 0 2
64112: EQUAL
64113: AND
64114: IFFALSE 64126
// result := true else
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: LD_INT 1
64123: ST_TO_ADDR
64124: GO 64134
// result := false ;
64126: LD_ADDR_VAR 0 3
64130: PUSH
64131: LD_INT 0
64133: ST_TO_ADDR
// end else
64134: GO 64144
// result := false ;
64136: LD_ADDR_VAR 0 3
64140: PUSH
64141: LD_INT 0
64143: ST_TO_ADDR
// end ;
64144: LD_VAR 0 3
64148: RET
// export function HealTarget ( sci ) ; begin
64149: LD_INT 0
64151: PPUSH
// if not sci then
64152: LD_VAR 0 1
64156: NOT
64157: IFFALSE 64161
// exit ;
64159: GO 64226
// result := 0 ;
64161: LD_ADDR_VAR 0 2
64165: PUSH
64166: LD_INT 0
64168: ST_TO_ADDR
// if GetTaskList ( sci ) then
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 437
64178: IFFALSE 64226
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64180: LD_VAR 0 1
64184: PPUSH
64185: CALL_OW 437
64189: PUSH
64190: LD_INT 1
64192: ARRAY
64193: PUSH
64194: LD_INT 1
64196: ARRAY
64197: PUSH
64198: LD_STRING l
64200: EQUAL
64201: IFFALSE 64226
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64203: LD_ADDR_VAR 0 2
64207: PUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 437
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: PUSH
64222: LD_INT 4
64224: ARRAY
64225: ST_TO_ADDR
// end ;
64226: LD_VAR 0 2
64230: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64231: LD_INT 0
64233: PPUSH
64234: PPUSH
64235: PPUSH
64236: PPUSH
// if not base_units then
64237: LD_VAR 0 1
64241: NOT
64242: IFFALSE 64246
// exit ;
64244: GO 64333
// result := false ;
64246: LD_ADDR_VAR 0 2
64250: PUSH
64251: LD_INT 0
64253: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64254: LD_ADDR_VAR 0 5
64258: PUSH
64259: LD_VAR 0 1
64263: PPUSH
64264: LD_INT 21
64266: PUSH
64267: LD_INT 3
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PPUSH
64274: CALL_OW 72
64278: ST_TO_ADDR
// if not tmp then
64279: LD_VAR 0 5
64283: NOT
64284: IFFALSE 64288
// exit ;
64286: GO 64333
// for i in tmp do
64288: LD_ADDR_VAR 0 3
64292: PUSH
64293: LD_VAR 0 5
64297: PUSH
64298: FOR_IN
64299: IFFALSE 64331
// begin result := EnemyInRange ( i , 22 ) ;
64301: LD_ADDR_VAR 0 2
64305: PUSH
64306: LD_VAR 0 3
64310: PPUSH
64311: LD_INT 22
64313: PPUSH
64314: CALL 62569 0 2
64318: ST_TO_ADDR
// if result then
64319: LD_VAR 0 2
64323: IFFALSE 64329
// exit ;
64325: POP
64326: POP
64327: GO 64333
// end ;
64329: GO 64298
64331: POP
64332: POP
// end ;
64333: LD_VAR 0 2
64337: RET
// export function FilterByTag ( units , tag ) ; begin
64338: LD_INT 0
64340: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64341: LD_ADDR_VAR 0 3
64345: PUSH
64346: LD_VAR 0 1
64350: PPUSH
64351: LD_INT 120
64353: PUSH
64354: LD_VAR 0 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PPUSH
64363: CALL_OW 72
64367: ST_TO_ADDR
// end ;
64368: LD_VAR 0 3
64372: RET
// export function IsDriver ( un ) ; begin
64373: LD_INT 0
64375: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64376: LD_ADDR_VAR 0 2
64380: PUSH
64381: LD_VAR 0 1
64385: PUSH
64386: LD_INT 55
64388: PUSH
64389: EMPTY
64390: LIST
64391: PPUSH
64392: CALL_OW 69
64396: IN
64397: ST_TO_ADDR
// end ;
64398: LD_VAR 0 2
64402: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64403: LD_INT 0
64405: PPUSH
64406: PPUSH
// list := [ ] ;
64407: LD_ADDR_VAR 0 5
64411: PUSH
64412: EMPTY
64413: ST_TO_ADDR
// case d of 0 :
64414: LD_VAR 0 3
64418: PUSH
64419: LD_INT 0
64421: DOUBLE
64422: EQUAL
64423: IFTRUE 64427
64425: GO 64560
64427: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64428: LD_ADDR_VAR 0 5
64432: PUSH
64433: LD_VAR 0 1
64437: PUSH
64438: LD_INT 4
64440: MINUS
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_INT 4
64449: MINUS
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: PUSH
64459: LD_VAR 0 1
64463: PUSH
64464: LD_INT 3
64466: MINUS
64467: PUSH
64468: LD_VAR 0 2
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: PUSH
64481: LD_VAR 0 1
64485: PUSH
64486: LD_INT 4
64488: PLUS
64489: PUSH
64490: LD_VAR 0 2
64494: PUSH
64495: LD_INT 4
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: LIST
64502: PUSH
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 3
64510: PLUS
64511: PUSH
64512: LD_VAR 0 2
64516: PUSH
64517: LD_INT 3
64519: PLUS
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_VAR 0 2
64538: PUSH
64539: LD_INT 4
64541: PLUS
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: ST_TO_ADDR
// end ; 1 :
64558: GO 65258
64560: LD_INT 1
64562: DOUBLE
64563: EQUAL
64564: IFTRUE 64568
64566: GO 64701
64568: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64569: LD_ADDR_VAR 0 5
64573: PUSH
64574: LD_VAR 0 1
64578: PUSH
64579: LD_VAR 0 2
64583: PUSH
64584: LD_INT 4
64586: MINUS
64587: PUSH
64588: LD_INT 3
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: LIST
64595: PUSH
64596: LD_VAR 0 1
64600: PUSH
64601: LD_INT 3
64603: MINUS
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: LD_INT 3
64612: MINUS
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: PUSH
64622: LD_VAR 0 1
64626: PUSH
64627: LD_INT 4
64629: MINUS
64630: PUSH
64631: LD_VAR 0 2
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_VAR 0 1
64648: PUSH
64649: LD_VAR 0 2
64653: PUSH
64654: LD_INT 3
64656: PLUS
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: PUSH
64666: LD_VAR 0 1
64670: PUSH
64671: LD_INT 4
64673: PLUS
64674: PUSH
64675: LD_VAR 0 2
64679: PUSH
64680: LD_INT 4
64682: PLUS
64683: PUSH
64684: LD_INT 5
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: ST_TO_ADDR
// end ; 2 :
64699: GO 65258
64701: LD_INT 2
64703: DOUBLE
64704: EQUAL
64705: IFTRUE 64709
64707: GO 64838
64709: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64710: LD_ADDR_VAR 0 5
64714: PUSH
64715: LD_VAR 0 1
64719: PUSH
64720: LD_VAR 0 2
64724: PUSH
64725: LD_INT 3
64727: MINUS
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: LIST
64736: PUSH
64737: LD_VAR 0 1
64741: PUSH
64742: LD_INT 4
64744: PLUS
64745: PUSH
64746: LD_VAR 0 2
64750: PUSH
64751: LD_INT 4
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: PUSH
64759: LD_VAR 0 1
64763: PUSH
64764: LD_VAR 0 2
64768: PUSH
64769: LD_INT 4
64771: PLUS
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: PUSH
64781: LD_VAR 0 1
64785: PUSH
64786: LD_INT 3
64788: MINUS
64789: PUSH
64790: LD_VAR 0 2
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: PUSH
64803: LD_VAR 0 1
64807: PUSH
64808: LD_INT 4
64810: MINUS
64811: PUSH
64812: LD_VAR 0 2
64816: PUSH
64817: LD_INT 4
64819: MINUS
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: LIST
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: ST_TO_ADDR
// end ; 3 :
64836: GO 65258
64838: LD_INT 3
64840: DOUBLE
64841: EQUAL
64842: IFTRUE 64846
64844: GO 64979
64846: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64847: LD_ADDR_VAR 0 5
64851: PUSH
64852: LD_VAR 0 1
64856: PUSH
64857: LD_INT 3
64859: PLUS
64860: PUSH
64861: LD_VAR 0 2
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: PUSH
64874: LD_VAR 0 1
64878: PUSH
64879: LD_INT 4
64881: PLUS
64882: PUSH
64883: LD_VAR 0 2
64887: PUSH
64888: LD_INT 4
64890: PLUS
64891: PUSH
64892: LD_INT 5
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: PUSH
64900: LD_VAR 0 1
64904: PUSH
64905: LD_INT 4
64907: MINUS
64908: PUSH
64909: LD_VAR 0 2
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: PUSH
64922: LD_VAR 0 1
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: LD_INT 4
64934: MINUS
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: PUSH
64944: LD_VAR 0 1
64948: PUSH
64949: LD_INT 3
64951: MINUS
64952: PUSH
64953: LD_VAR 0 2
64957: PUSH
64958: LD_INT 3
64960: MINUS
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// end ; 4 :
64977: GO 65258
64979: LD_INT 4
64981: DOUBLE
64982: EQUAL
64983: IFTRUE 64987
64985: GO 65120
64987: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64988: LD_ADDR_VAR 0 5
64992: PUSH
64993: LD_VAR 0 1
64997: PUSH
64998: LD_VAR 0 2
65002: PUSH
65003: LD_INT 4
65005: PLUS
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: LD_INT 3
65022: PLUS
65023: PUSH
65024: LD_VAR 0 2
65028: PUSH
65029: LD_INT 3
65031: PLUS
65032: PUSH
65033: LD_INT 5
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: PUSH
65041: LD_VAR 0 1
65045: PUSH
65046: LD_INT 4
65048: PLUS
65049: PUSH
65050: LD_VAR 0 2
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: PUSH
65063: LD_VAR 0 1
65067: PUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_INT 3
65075: MINUS
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: LIST
65084: PUSH
65085: LD_VAR 0 1
65089: PUSH
65090: LD_INT 4
65092: MINUS
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_INT 4
65101: MINUS
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// end ; 5 :
65118: GO 65258
65120: LD_INT 5
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65128
65126: GO 65257
65128: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65129: LD_ADDR_VAR 0 5
65133: PUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 4
65141: MINUS
65142: PUSH
65143: LD_VAR 0 2
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: PUSH
65156: LD_VAR 0 1
65160: PUSH
65161: LD_VAR 0 2
65165: PUSH
65166: LD_INT 4
65168: MINUS
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: PUSH
65178: LD_VAR 0 1
65182: PUSH
65183: LD_INT 4
65185: PLUS
65186: PUSH
65187: LD_VAR 0 2
65191: PUSH
65192: LD_INT 4
65194: PLUS
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: PUSH
65204: LD_VAR 0 1
65208: PUSH
65209: LD_INT 3
65211: PLUS
65212: PUSH
65213: LD_VAR 0 2
65217: PUSH
65218: LD_INT 4
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: PUSH
65226: LD_VAR 0 1
65230: PUSH
65231: LD_VAR 0 2
65235: PUSH
65236: LD_INT 3
65238: PLUS
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// end ; end ;
65255: GO 65258
65257: POP
// result := list ;
65258: LD_ADDR_VAR 0 4
65262: PUSH
65263: LD_VAR 0 5
65267: ST_TO_ADDR
// end ;
65268: LD_VAR 0 4
65272: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65273: LD_INT 0
65275: PPUSH
65276: PPUSH
65277: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65278: LD_VAR 0 1
65282: NOT
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 2
65294: PUSH
65295: LD_INT 3
65297: PUSH
65298: LD_INT 4
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: IN
65307: NOT
65308: OR
65309: IFFALSE 65313
// exit ;
65311: GO 65405
// tmp := [ ] ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: EMPTY
65319: ST_TO_ADDR
// for i in units do
65320: LD_ADDR_VAR 0 4
65324: PUSH
65325: LD_VAR 0 1
65329: PUSH
65330: FOR_IN
65331: IFFALSE 65374
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65333: LD_ADDR_VAR 0 5
65337: PUSH
65338: LD_VAR 0 5
65342: PPUSH
65343: LD_VAR 0 5
65347: PUSH
65348: LD_INT 1
65350: PLUS
65351: PPUSH
65352: LD_VAR 0 4
65356: PPUSH
65357: LD_VAR 0 2
65361: PPUSH
65362: CALL_OW 259
65366: PPUSH
65367: CALL_OW 2
65371: ST_TO_ADDR
65372: GO 65330
65374: POP
65375: POP
// if not tmp then
65376: LD_VAR 0 5
65380: NOT
65381: IFFALSE 65385
// exit ;
65383: GO 65405
// result := SortListByListDesc ( units , tmp ) ;
65385: LD_ADDR_VAR 0 3
65389: PUSH
65390: LD_VAR 0 1
65394: PPUSH
65395: LD_VAR 0 5
65399: PPUSH
65400: CALL_OW 77
65404: ST_TO_ADDR
// end ;
65405: LD_VAR 0 3
65409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65410: LD_INT 0
65412: PPUSH
65413: PPUSH
65414: PPUSH
// result := false ;
65415: LD_ADDR_VAR 0 3
65419: PUSH
65420: LD_INT 0
65422: ST_TO_ADDR
// x := GetX ( building ) ;
65423: LD_ADDR_VAR 0 4
65427: PUSH
65428: LD_VAR 0 2
65432: PPUSH
65433: CALL_OW 250
65437: ST_TO_ADDR
// y := GetY ( building ) ;
65438: LD_ADDR_VAR 0 5
65442: PUSH
65443: LD_VAR 0 2
65447: PPUSH
65448: CALL_OW 251
65452: ST_TO_ADDR
// if not building or not x or not y then
65453: LD_VAR 0 2
65457: NOT
65458: PUSH
65459: LD_VAR 0 4
65463: NOT
65464: OR
65465: PUSH
65466: LD_VAR 0 5
65470: NOT
65471: OR
65472: IFFALSE 65476
// exit ;
65474: GO 65568
// if GetTaskList ( unit ) then
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL_OW 437
65485: IFFALSE 65568
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65487: LD_STRING e
65489: PUSH
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 437
65499: PUSH
65500: LD_INT 1
65502: ARRAY
65503: PUSH
65504: LD_INT 1
65506: ARRAY
65507: EQUAL
65508: PUSH
65509: LD_VAR 0 4
65513: PUSH
65514: LD_VAR 0 1
65518: PPUSH
65519: CALL_OW 437
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: PUSH
65528: LD_INT 2
65530: ARRAY
65531: EQUAL
65532: AND
65533: PUSH
65534: LD_VAR 0 5
65538: PUSH
65539: LD_VAR 0 1
65543: PPUSH
65544: CALL_OW 437
65548: PUSH
65549: LD_INT 1
65551: ARRAY
65552: PUSH
65553: LD_INT 3
65555: ARRAY
65556: EQUAL
65557: AND
65558: IFFALSE 65568
// result := true end ;
65560: LD_ADDR_VAR 0 3
65564: PUSH
65565: LD_INT 1
65567: ST_TO_ADDR
// end ;
65568: LD_VAR 0 3
65572: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65573: LD_INT 0
65575: PPUSH
// result := false ;
65576: LD_ADDR_VAR 0 4
65580: PUSH
65581: LD_INT 0
65583: ST_TO_ADDR
// if GetTaskList ( unit ) then
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 437
65593: IFFALSE 65676
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65595: LD_STRING M
65597: PUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: CALL_OW 437
65607: PUSH
65608: LD_INT 1
65610: ARRAY
65611: PUSH
65612: LD_INT 1
65614: ARRAY
65615: EQUAL
65616: PUSH
65617: LD_VAR 0 2
65621: PUSH
65622: LD_VAR 0 1
65626: PPUSH
65627: CALL_OW 437
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: PUSH
65636: LD_INT 2
65638: ARRAY
65639: EQUAL
65640: AND
65641: PUSH
65642: LD_VAR 0 3
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 437
65656: PUSH
65657: LD_INT 1
65659: ARRAY
65660: PUSH
65661: LD_INT 3
65663: ARRAY
65664: EQUAL
65665: AND
65666: IFFALSE 65676
// result := true ;
65668: LD_ADDR_VAR 0 4
65672: PUSH
65673: LD_INT 1
65675: ST_TO_ADDR
// end ; end ;
65676: LD_VAR 0 4
65680: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65681: LD_INT 0
65683: PPUSH
65684: PPUSH
65685: PPUSH
65686: PPUSH
// if not unit or not area then
65687: LD_VAR 0 1
65691: NOT
65692: PUSH
65693: LD_VAR 0 2
65697: NOT
65698: OR
65699: IFFALSE 65703
// exit ;
65701: GO 65867
// tmp := AreaToList ( area , i ) ;
65703: LD_ADDR_VAR 0 6
65707: PUSH
65708: LD_VAR 0 2
65712: PPUSH
65713: LD_VAR 0 5
65717: PPUSH
65718: CALL_OW 517
65722: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65723: LD_ADDR_VAR 0 5
65727: PUSH
65728: DOUBLE
65729: LD_INT 1
65731: DEC
65732: ST_TO_ADDR
65733: LD_VAR 0 6
65737: PUSH
65738: LD_INT 1
65740: ARRAY
65741: PUSH
65742: FOR_TO
65743: IFFALSE 65865
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65745: LD_ADDR_VAR 0 7
65749: PUSH
65750: LD_VAR 0 6
65754: PUSH
65755: LD_INT 1
65757: ARRAY
65758: PUSH
65759: LD_VAR 0 5
65763: ARRAY
65764: PUSH
65765: LD_VAR 0 6
65769: PUSH
65770: LD_INT 2
65772: ARRAY
65773: PUSH
65774: LD_VAR 0 5
65778: ARRAY
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65784: LD_VAR 0 7
65788: PUSH
65789: LD_INT 1
65791: ARRAY
65792: PPUSH
65793: LD_VAR 0 7
65797: PUSH
65798: LD_INT 2
65800: ARRAY
65801: PPUSH
65802: CALL_OW 428
65806: PUSH
65807: LD_INT 0
65809: EQUAL
65810: IFFALSE 65863
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65812: LD_VAR 0 1
65816: PPUSH
65817: LD_VAR 0 7
65821: PUSH
65822: LD_INT 1
65824: ARRAY
65825: PPUSH
65826: LD_VAR 0 7
65830: PUSH
65831: LD_INT 2
65833: ARRAY
65834: PPUSH
65835: LD_VAR 0 3
65839: PPUSH
65840: CALL_OW 48
// result := IsPlaced ( unit ) ;
65844: LD_ADDR_VAR 0 4
65848: PUSH
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 305
65858: ST_TO_ADDR
// exit ;
65859: POP
65860: POP
65861: GO 65867
// end ; end ;
65863: GO 65742
65865: POP
65866: POP
// end ;
65867: LD_VAR 0 4
65871: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
65876: PPUSH
// if not side or side > 8 then
65877: LD_VAR 0 1
65881: NOT
65882: PUSH
65883: LD_VAR 0 1
65887: PUSH
65888: LD_INT 8
65890: GREATER
65891: OR
65892: IFFALSE 65896
// exit ;
65894: GO 66083
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65896: LD_ADDR_VAR 0 4
65900: PUSH
65901: LD_INT 22
65903: PUSH
65904: LD_VAR 0 1
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 21
65915: PUSH
65916: LD_INT 3
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PPUSH
65927: CALL_OW 69
65931: ST_TO_ADDR
// if not tmp then
65932: LD_VAR 0 4
65936: NOT
65937: IFFALSE 65941
// exit ;
65939: GO 66083
// enable_addtolog := true ;
65941: LD_ADDR_OWVAR 81
65945: PUSH
65946: LD_INT 1
65948: ST_TO_ADDR
// AddToLog ( [ ) ;
65949: LD_STRING [
65951: PPUSH
65952: CALL_OW 561
// for i in tmp do
65956: LD_ADDR_VAR 0 3
65960: PUSH
65961: LD_VAR 0 4
65965: PUSH
65966: FOR_IN
65967: IFFALSE 66074
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65969: LD_STRING [
65971: PUSH
65972: LD_VAR 0 3
65976: PPUSH
65977: CALL_OW 266
65981: STR
65982: PUSH
65983: LD_STRING , 
65985: STR
65986: PUSH
65987: LD_VAR 0 3
65991: PPUSH
65992: CALL_OW 250
65996: STR
65997: PUSH
65998: LD_STRING , 
66000: STR
66001: PUSH
66002: LD_VAR 0 3
66006: PPUSH
66007: CALL_OW 251
66011: STR
66012: PUSH
66013: LD_STRING , 
66015: STR
66016: PUSH
66017: LD_VAR 0 3
66021: PPUSH
66022: CALL_OW 254
66026: STR
66027: PUSH
66028: LD_STRING , 
66030: STR
66031: PUSH
66032: LD_VAR 0 3
66036: PPUSH
66037: LD_INT 1
66039: PPUSH
66040: CALL_OW 268
66044: STR
66045: PUSH
66046: LD_STRING , 
66048: STR
66049: PUSH
66050: LD_VAR 0 3
66054: PPUSH
66055: LD_INT 2
66057: PPUSH
66058: CALL_OW 268
66062: STR
66063: PUSH
66064: LD_STRING ],
66066: STR
66067: PPUSH
66068: CALL_OW 561
// end ;
66072: GO 65966
66074: POP
66075: POP
// AddToLog ( ]; ) ;
66076: LD_STRING ];
66078: PPUSH
66079: CALL_OW 561
// end ;
66083: LD_VAR 0 2
66087: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66088: LD_INT 0
66090: PPUSH
66091: PPUSH
66092: PPUSH
66093: PPUSH
66094: PPUSH
// if not area or not rate or not max then
66095: LD_VAR 0 1
66099: NOT
66100: PUSH
66101: LD_VAR 0 2
66105: NOT
66106: OR
66107: PUSH
66108: LD_VAR 0 4
66112: NOT
66113: OR
66114: IFFALSE 66118
// exit ;
66116: GO 66307
// while 1 do
66118: LD_INT 1
66120: IFFALSE 66307
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66122: LD_ADDR_VAR 0 9
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_INT 1
66134: PPUSH
66135: CALL_OW 287
66139: PUSH
66140: LD_INT 10
66142: MUL
66143: ST_TO_ADDR
// r := rate / 10 ;
66144: LD_ADDR_VAR 0 7
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: LD_INT 10
66156: DIVREAL
66157: ST_TO_ADDR
// time := 1 1$00 ;
66158: LD_ADDR_VAR 0 8
66162: PUSH
66163: LD_INT 2100
66165: ST_TO_ADDR
// if amount < min then
66166: LD_VAR 0 9
66170: PUSH
66171: LD_VAR 0 3
66175: LESS
66176: IFFALSE 66194
// r := r * 2 else
66178: LD_ADDR_VAR 0 7
66182: PUSH
66183: LD_VAR 0 7
66187: PUSH
66188: LD_INT 2
66190: MUL
66191: ST_TO_ADDR
66192: GO 66220
// if amount > max then
66194: LD_VAR 0 9
66198: PUSH
66199: LD_VAR 0 4
66203: GREATER
66204: IFFALSE 66220
// r := r / 2 ;
66206: LD_ADDR_VAR 0 7
66210: PUSH
66211: LD_VAR 0 7
66215: PUSH
66216: LD_INT 2
66218: DIVREAL
66219: ST_TO_ADDR
// time := time / r ;
66220: LD_ADDR_VAR 0 8
66224: PUSH
66225: LD_VAR 0 8
66229: PUSH
66230: LD_VAR 0 7
66234: DIVREAL
66235: ST_TO_ADDR
// if time < 0 then
66236: LD_VAR 0 8
66240: PUSH
66241: LD_INT 0
66243: LESS
66244: IFFALSE 66261
// time := time * - 1 ;
66246: LD_ADDR_VAR 0 8
66250: PUSH
66251: LD_VAR 0 8
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: MUL
66260: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66261: LD_VAR 0 8
66265: PUSH
66266: LD_INT 35
66268: PPUSH
66269: LD_INT 875
66271: PPUSH
66272: CALL_OW 12
66276: PLUS
66277: PPUSH
66278: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66282: LD_INT 1
66284: PPUSH
66285: LD_INT 5
66287: PPUSH
66288: CALL_OW 12
66292: PPUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: LD_INT 1
66300: PPUSH
66301: CALL_OW 55
// end ;
66305: GO 66118
// end ;
66307: LD_VAR 0 5
66311: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66312: LD_INT 0
66314: PPUSH
66315: PPUSH
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
66320: PPUSH
66321: PPUSH
// if not turrets or not factories then
66322: LD_VAR 0 1
66326: NOT
66327: PUSH
66328: LD_VAR 0 2
66332: NOT
66333: OR
66334: IFFALSE 66338
// exit ;
66336: GO 66645
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66338: LD_ADDR_VAR 0 10
66342: PUSH
66343: LD_INT 5
66345: PUSH
66346: LD_INT 6
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 3
66365: PUSH
66366: LD_INT 5
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 24
66380: PUSH
66381: LD_INT 25
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 23
66390: PUSH
66391: LD_INT 27
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 42
66404: PUSH
66405: LD_INT 43
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 44
66414: PUSH
66415: LD_INT 46
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 45
66424: PUSH
66425: LD_INT 47
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// result := [ ] ;
66442: LD_ADDR_VAR 0 3
66446: PUSH
66447: EMPTY
66448: ST_TO_ADDR
// for i in turrets do
66449: LD_ADDR_VAR 0 4
66453: PUSH
66454: LD_VAR 0 1
66458: PUSH
66459: FOR_IN
66460: IFFALSE 66643
// begin nat := GetNation ( i ) ;
66462: LD_ADDR_VAR 0 7
66466: PUSH
66467: LD_VAR 0 4
66471: PPUSH
66472: CALL_OW 248
66476: ST_TO_ADDR
// weapon := 0 ;
66477: LD_ADDR_VAR 0 8
66481: PUSH
66482: LD_INT 0
66484: ST_TO_ADDR
// if not nat then
66485: LD_VAR 0 7
66489: NOT
66490: IFFALSE 66494
// continue ;
66492: GO 66459
// for j in list [ nat ] do
66494: LD_ADDR_VAR 0 5
66498: PUSH
66499: LD_VAR 0 10
66503: PUSH
66504: LD_VAR 0 7
66508: ARRAY
66509: PUSH
66510: FOR_IN
66511: IFFALSE 66552
// if GetBWeapon ( i ) = j [ 1 ] then
66513: LD_VAR 0 4
66517: PPUSH
66518: CALL_OW 269
66522: PUSH
66523: LD_VAR 0 5
66527: PUSH
66528: LD_INT 1
66530: ARRAY
66531: EQUAL
66532: IFFALSE 66550
// begin weapon := j [ 2 ] ;
66534: LD_ADDR_VAR 0 8
66538: PUSH
66539: LD_VAR 0 5
66543: PUSH
66544: LD_INT 2
66546: ARRAY
66547: ST_TO_ADDR
// break ;
66548: GO 66552
// end ;
66550: GO 66510
66552: POP
66553: POP
// if not weapon then
66554: LD_VAR 0 8
66558: NOT
66559: IFFALSE 66563
// continue ;
66561: GO 66459
// for k in factories do
66563: LD_ADDR_VAR 0 6
66567: PUSH
66568: LD_VAR 0 2
66572: PUSH
66573: FOR_IN
66574: IFFALSE 66639
// begin weapons := AvailableWeaponList ( k ) ;
66576: LD_ADDR_VAR 0 9
66580: PUSH
66581: LD_VAR 0 6
66585: PPUSH
66586: CALL_OW 478
66590: ST_TO_ADDR
// if not weapons then
66591: LD_VAR 0 9
66595: NOT
66596: IFFALSE 66600
// continue ;
66598: GO 66573
// if weapon in weapons then
66600: LD_VAR 0 8
66604: PUSH
66605: LD_VAR 0 9
66609: IN
66610: IFFALSE 66637
// begin result := [ i , weapon ] ;
66612: LD_ADDR_VAR 0 3
66616: PUSH
66617: LD_VAR 0 4
66621: PUSH
66622: LD_VAR 0 8
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: ST_TO_ADDR
// exit ;
66631: POP
66632: POP
66633: POP
66634: POP
66635: GO 66645
// end ; end ;
66637: GO 66573
66639: POP
66640: POP
// end ;
66641: GO 66459
66643: POP
66644: POP
// end ;
66645: LD_VAR 0 3
66649: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66650: LD_INT 0
66652: PPUSH
// if not side or side > 8 then
66653: LD_VAR 0 3
66657: NOT
66658: PUSH
66659: LD_VAR 0 3
66663: PUSH
66664: LD_INT 8
66666: GREATER
66667: OR
66668: IFFALSE 66672
// exit ;
66670: GO 66731
// if not range then
66672: LD_VAR 0 4
66676: NOT
66677: IFFALSE 66688
// range := - 12 ;
66679: LD_ADDR_VAR 0 4
66683: PUSH
66684: LD_INT 12
66686: NEG
66687: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66688: LD_VAR 0 1
66692: PPUSH
66693: LD_VAR 0 2
66697: PPUSH
66698: LD_VAR 0 3
66702: PPUSH
66703: LD_VAR 0 4
66707: PPUSH
66708: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66712: LD_VAR 0 1
66716: PPUSH
66717: LD_VAR 0 2
66721: PPUSH
66722: LD_VAR 0 3
66726: PPUSH
66727: CALL_OW 331
// end ;
66731: LD_VAR 0 5
66735: RET
// export function Video ( mode ) ; begin
66736: LD_INT 0
66738: PPUSH
// ingame_video = mode ;
66739: LD_ADDR_OWVAR 52
66743: PUSH
66744: LD_VAR 0 1
66748: ST_TO_ADDR
// interface_hidden = mode ;
66749: LD_ADDR_OWVAR 54
66753: PUSH
66754: LD_VAR 0 1
66758: ST_TO_ADDR
// end ;
66759: LD_VAR 0 2
66763: RET
// export function Join ( array , element ) ; begin
66764: LD_INT 0
66766: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66767: LD_ADDR_VAR 0 3
66771: PUSH
66772: LD_VAR 0 1
66776: PPUSH
66777: LD_VAR 0 1
66781: PUSH
66782: LD_INT 1
66784: PLUS
66785: PPUSH
66786: LD_VAR 0 2
66790: PPUSH
66791: CALL_OW 1
66795: ST_TO_ADDR
// end ;
66796: LD_VAR 0 3
66800: RET
// export function JoinUnion ( array , element ) ; begin
66801: LD_INT 0
66803: PPUSH
// result := array union element ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_VAR 0 1
66813: PUSH
66814: LD_VAR 0 2
66818: UNION
66819: ST_TO_ADDR
// end ;
66820: LD_VAR 0 3
66824: RET
// export function GetBehemoths ( side ) ; begin
66825: LD_INT 0
66827: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66828: LD_ADDR_VAR 0 2
66832: PUSH
66833: LD_INT 22
66835: PUSH
66836: LD_VAR 0 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 31
66847: PUSH
66848: LD_INT 25
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PPUSH
66859: CALL_OW 69
66863: ST_TO_ADDR
// end ;
66864: LD_VAR 0 2
66868: RET
// export function Shuffle ( array ) ; var i , index ; begin
66869: LD_INT 0
66871: PPUSH
66872: PPUSH
66873: PPUSH
// result := [ ] ;
66874: LD_ADDR_VAR 0 2
66878: PUSH
66879: EMPTY
66880: ST_TO_ADDR
// if not array then
66881: LD_VAR 0 1
66885: NOT
66886: IFFALSE 66890
// exit ;
66888: GO 66989
// Randomize ;
66890: CALL_OW 10
// for i = array downto 1 do
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: DOUBLE
66900: LD_VAR 0 1
66904: INC
66905: ST_TO_ADDR
66906: LD_INT 1
66908: PUSH
66909: FOR_DOWNTO
66910: IFFALSE 66987
// begin index := rand ( 1 , array ) ;
66912: LD_ADDR_VAR 0 4
66916: PUSH
66917: LD_INT 1
66919: PPUSH
66920: LD_VAR 0 1
66924: PPUSH
66925: CALL_OW 12
66929: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66930: LD_ADDR_VAR 0 2
66934: PUSH
66935: LD_VAR 0 2
66939: PPUSH
66940: LD_VAR 0 2
66944: PUSH
66945: LD_INT 1
66947: PLUS
66948: PPUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_VAR 0 4
66958: ARRAY
66959: PPUSH
66960: CALL_OW 2
66964: ST_TO_ADDR
// array := Delete ( array , index ) ;
66965: LD_ADDR_VAR 0 1
66969: PUSH
66970: LD_VAR 0 1
66974: PPUSH
66975: LD_VAR 0 4
66979: PPUSH
66980: CALL_OW 3
66984: ST_TO_ADDR
// end ;
66985: GO 66909
66987: POP
66988: POP
// end ;
66989: LD_VAR 0 2
66993: RET
// export function GetBaseMaterials ( base ) ; begin
66994: LD_INT 0
66996: PPUSH
// result := [ 0 , 0 , 0 ] ;
66997: LD_ADDR_VAR 0 2
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// if not base then
67016: LD_VAR 0 1
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67074
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_INT 1
67037: PPUSH
67038: CALL_OW 275
67042: PUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: LD_INT 2
67050: PPUSH
67051: CALL_OW 275
67055: PUSH
67056: LD_VAR 0 1
67060: PPUSH
67061: LD_INT 3
67063: PPUSH
67064: CALL_OW 275
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: ST_TO_ADDR
// end ;
67074: LD_VAR 0 2
67078: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67079: LD_INT 0
67081: PPUSH
67082: PPUSH
// result := array ;
67083: LD_ADDR_VAR 0 3
67087: PUSH
67088: LD_VAR 0 1
67092: ST_TO_ADDR
// if size > 0 then
67093: LD_VAR 0 2
67097: PUSH
67098: LD_INT 0
67100: GREATER
67101: IFFALSE 67147
// for i := array downto size do
67103: LD_ADDR_VAR 0 4
67107: PUSH
67108: DOUBLE
67109: LD_VAR 0 1
67113: INC
67114: ST_TO_ADDR
67115: LD_VAR 0 2
67119: PUSH
67120: FOR_DOWNTO
67121: IFFALSE 67145
// result := Delete ( result , result ) ;
67123: LD_ADDR_VAR 0 3
67127: PUSH
67128: LD_VAR 0 3
67132: PPUSH
67133: LD_VAR 0 3
67137: PPUSH
67138: CALL_OW 3
67142: ST_TO_ADDR
67143: GO 67120
67145: POP
67146: POP
// end ;
67147: LD_VAR 0 3
67151: RET
// export function ComExit ( unit ) ; var tmp ; begin
67152: LD_INT 0
67154: PPUSH
67155: PPUSH
// if not IsInUnit ( unit ) then
67156: LD_VAR 0 1
67160: PPUSH
67161: CALL_OW 310
67165: NOT
67166: IFFALSE 67170
// exit ;
67168: GO 67230
// tmp := IsInUnit ( unit ) ;
67170: LD_ADDR_VAR 0 3
67174: PUSH
67175: LD_VAR 0 1
67179: PPUSH
67180: CALL_OW 310
67184: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67185: LD_VAR 0 3
67189: PPUSH
67190: CALL_OW 247
67194: PUSH
67195: LD_INT 2
67197: EQUAL
67198: IFFALSE 67211
// ComExitVehicle ( unit ) else
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL_OW 121
67209: GO 67220
// ComExitBuilding ( unit ) ;
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 122
// result := tmp ;
67220: LD_ADDR_VAR 0 2
67224: PUSH
67225: LD_VAR 0 3
67229: ST_TO_ADDR
// end ;
67230: LD_VAR 0 2
67234: RET
// export function ComExitAll ( units ) ; var i ; begin
67235: LD_INT 0
67237: PPUSH
67238: PPUSH
// if not units then
67239: LD_VAR 0 1
67243: NOT
67244: IFFALSE 67248
// exit ;
67246: GO 67274
// for i in units do
67248: LD_ADDR_VAR 0 3
67252: PUSH
67253: LD_VAR 0 1
67257: PUSH
67258: FOR_IN
67259: IFFALSE 67272
// ComExit ( i ) ;
67261: LD_VAR 0 3
67265: PPUSH
67266: CALL 67152 0 1
67270: GO 67258
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 2
67278: RET
// export function ResetHc ; begin
67279: LD_INT 0
67281: PPUSH
// InitHc ;
67282: CALL_OW 19
// hc_importance := 0 ;
67286: LD_ADDR_OWVAR 32
67290: PUSH
67291: LD_INT 0
67293: ST_TO_ADDR
// end ;
67294: LD_VAR 0 1
67298: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67299: LD_INT 0
67301: PPUSH
67302: PPUSH
67303: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67304: LD_ADDR_VAR 0 6
67308: PUSH
67309: LD_VAR 0 1
67313: PUSH
67314: LD_VAR 0 3
67318: PLUS
67319: PUSH
67320: LD_INT 2
67322: DIV
67323: ST_TO_ADDR
// if _x < 0 then
67324: LD_VAR 0 6
67328: PUSH
67329: LD_INT 0
67331: LESS
67332: IFFALSE 67349
// _x := _x * - 1 ;
67334: LD_ADDR_VAR 0 6
67338: PUSH
67339: LD_VAR 0 6
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: MUL
67348: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67349: LD_ADDR_VAR 0 7
67353: PUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_VAR 0 4
67363: PLUS
67364: PUSH
67365: LD_INT 2
67367: DIV
67368: ST_TO_ADDR
// if _y < 0 then
67369: LD_VAR 0 7
67373: PUSH
67374: LD_INT 0
67376: LESS
67377: IFFALSE 67394
// _y := _y * - 1 ;
67379: LD_ADDR_VAR 0 7
67383: PUSH
67384: LD_VAR 0 7
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: MUL
67393: ST_TO_ADDR
// result := [ _x , _y ] ;
67394: LD_ADDR_VAR 0 5
67398: PUSH
67399: LD_VAR 0 6
67403: PUSH
67404: LD_VAR 0 7
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: ST_TO_ADDR
// end ;
67413: LD_VAR 0 5
67417: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67418: LD_INT 0
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
// task := GetTaskList ( unit ) ;
67424: LD_ADDR_VAR 0 7
67428: PUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: CALL_OW 437
67438: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67439: LD_VAR 0 7
67443: NOT
67444: PUSH
67445: LD_VAR 0 1
67449: PPUSH
67450: LD_VAR 0 2
67454: PPUSH
67455: CALL_OW 308
67459: NOT
67460: AND
67461: IFFALSE 67465
// exit ;
67463: GO 67583
// if IsInArea ( unit , area ) then
67465: LD_VAR 0 1
67469: PPUSH
67470: LD_VAR 0 2
67474: PPUSH
67475: CALL_OW 308
67479: IFFALSE 67497
// begin ComMoveToArea ( unit , goAway ) ;
67481: LD_VAR 0 1
67485: PPUSH
67486: LD_VAR 0 3
67490: PPUSH
67491: CALL_OW 113
// exit ;
67495: GO 67583
// end ; if task [ 1 ] [ 1 ] <> M then
67497: LD_VAR 0 7
67501: PUSH
67502: LD_INT 1
67504: ARRAY
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_STRING M
67512: NONEQUAL
67513: IFFALSE 67517
// exit ;
67515: GO 67583
// x := task [ 1 ] [ 2 ] ;
67517: LD_ADDR_VAR 0 5
67521: PUSH
67522: LD_VAR 0 7
67526: PUSH
67527: LD_INT 1
67529: ARRAY
67530: PUSH
67531: LD_INT 2
67533: ARRAY
67534: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67535: LD_ADDR_VAR 0 6
67539: PUSH
67540: LD_VAR 0 7
67544: PUSH
67545: LD_INT 1
67547: ARRAY
67548: PUSH
67549: LD_INT 3
67551: ARRAY
67552: ST_TO_ADDR
// if InArea ( x , y , area ) then
67553: LD_VAR 0 5
67557: PPUSH
67558: LD_VAR 0 6
67562: PPUSH
67563: LD_VAR 0 2
67567: PPUSH
67568: CALL_OW 309
67572: IFFALSE 67583
// ComStop ( unit ) ;
67574: LD_VAR 0 1
67578: PPUSH
67579: CALL_OW 141
// end ;
67583: LD_VAR 0 4
67587: RET
// export function Abs ( value ) ; begin
67588: LD_INT 0
67590: PPUSH
// result := value ;
67591: LD_ADDR_VAR 0 2
67595: PUSH
67596: LD_VAR 0 1
67600: ST_TO_ADDR
// if value < 0 then
67601: LD_VAR 0 1
67605: PUSH
67606: LD_INT 0
67608: LESS
67609: IFFALSE 67626
// result := value * - 1 ;
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: MUL
67625: ST_TO_ADDR
// end ;
67626: LD_VAR 0 2
67630: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67631: LD_INT 0
67633: PPUSH
67634: PPUSH
67635: PPUSH
67636: PPUSH
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
// if not unit or not building then
67641: LD_VAR 0 1
67645: NOT
67646: PUSH
67647: LD_VAR 0 2
67651: NOT
67652: OR
67653: IFFALSE 67657
// exit ;
67655: GO 67883
// x := GetX ( building ) ;
67657: LD_ADDR_VAR 0 4
67661: PUSH
67662: LD_VAR 0 2
67666: PPUSH
67667: CALL_OW 250
67671: ST_TO_ADDR
// y := GetY ( building ) ;
67672: LD_ADDR_VAR 0 6
67676: PUSH
67677: LD_VAR 0 2
67681: PPUSH
67682: CALL_OW 251
67686: ST_TO_ADDR
// d := GetDir ( building ) ;
67687: LD_ADDR_VAR 0 8
67691: PUSH
67692: LD_VAR 0 2
67696: PPUSH
67697: CALL_OW 254
67701: ST_TO_ADDR
// r := 4 ;
67702: LD_ADDR_VAR 0 9
67706: PUSH
67707: LD_INT 4
67709: ST_TO_ADDR
// for i := 1 to 5 do
67710: LD_ADDR_VAR 0 10
67714: PUSH
67715: DOUBLE
67716: LD_INT 1
67718: DEC
67719: ST_TO_ADDR
67720: LD_INT 5
67722: PUSH
67723: FOR_TO
67724: IFFALSE 67881
// begin _x := ShiftX ( x , d , r + i ) ;
67726: LD_ADDR_VAR 0 5
67730: PUSH
67731: LD_VAR 0 4
67735: PPUSH
67736: LD_VAR 0 8
67740: PPUSH
67741: LD_VAR 0 9
67745: PUSH
67746: LD_VAR 0 10
67750: PLUS
67751: PPUSH
67752: CALL_OW 272
67756: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67757: LD_ADDR_VAR 0 7
67761: PUSH
67762: LD_VAR 0 6
67766: PPUSH
67767: LD_VAR 0 8
67771: PPUSH
67772: LD_VAR 0 9
67776: PUSH
67777: LD_VAR 0 10
67781: PLUS
67782: PPUSH
67783: CALL_OW 273
67787: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67788: LD_VAR 0 5
67792: PPUSH
67793: LD_VAR 0 7
67797: PPUSH
67798: CALL_OW 488
67802: PUSH
67803: LD_VAR 0 5
67807: PPUSH
67808: LD_VAR 0 7
67812: PPUSH
67813: CALL_OW 428
67817: PPUSH
67818: CALL_OW 247
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: IN
67833: NOT
67834: AND
67835: IFFALSE 67879
// begin ComMoveXY ( unit , _x , _y ) ;
67837: LD_VAR 0 1
67841: PPUSH
67842: LD_VAR 0 5
67846: PPUSH
67847: LD_VAR 0 7
67851: PPUSH
67852: CALL_OW 111
// result := [ _x , _y ] ;
67856: LD_ADDR_VAR 0 3
67860: PUSH
67861: LD_VAR 0 5
67865: PUSH
67866: LD_VAR 0 7
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: ST_TO_ADDR
// exit ;
67875: POP
67876: POP
67877: GO 67883
// end ; end ;
67879: GO 67723
67881: POP
67882: POP
// end ;
67883: LD_VAR 0 3
67887: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67888: LD_INT 0
67890: PPUSH
67891: PPUSH
67892: PPUSH
// result := 0 ;
67893: LD_ADDR_VAR 0 3
67897: PUSH
67898: LD_INT 0
67900: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67901: LD_VAR 0 1
67905: PUSH
67906: LD_INT 0
67908: LESS
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_INT 8
67917: GREATER
67918: OR
67919: PUSH
67920: LD_VAR 0 2
67924: PUSH
67925: LD_INT 0
67927: LESS
67928: OR
67929: PUSH
67930: LD_VAR 0 2
67934: PUSH
67935: LD_INT 8
67937: GREATER
67938: OR
67939: IFFALSE 67943
// exit ;
67941: GO 68018
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67943: LD_ADDR_VAR 0 4
67947: PUSH
67948: LD_INT 22
67950: PUSH
67951: LD_VAR 0 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PPUSH
67960: CALL_OW 69
67964: PUSH
67965: FOR_IN
67966: IFFALSE 68016
// begin un := UnitShoot ( i ) ;
67968: LD_ADDR_VAR 0 5
67972: PUSH
67973: LD_VAR 0 4
67977: PPUSH
67978: CALL_OW 504
67982: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67983: LD_VAR 0 5
67987: PPUSH
67988: CALL_OW 255
67992: PUSH
67993: LD_VAR 0 1
67997: EQUAL
67998: IFFALSE 68014
// begin result := un ;
68000: LD_ADDR_VAR 0 3
68004: PUSH
68005: LD_VAR 0 5
68009: ST_TO_ADDR
// exit ;
68010: POP
68011: POP
68012: GO 68018
// end ; end ;
68014: GO 67965
68016: POP
68017: POP
// end ;
68018: LD_VAR 0 3
68022: RET
// export function GetCargoBay ( units ) ; begin
68023: LD_INT 0
68025: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68026: LD_ADDR_VAR 0 2
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: LD_INT 2
68038: PUSH
68039: LD_INT 34
68041: PUSH
68042: LD_INT 12
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 34
68051: PUSH
68052: LD_INT 51
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 34
68061: PUSH
68062: LD_INT 32
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 34
68071: PUSH
68072: LD_EXP 106
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: PPUSH
68088: CALL_OW 72
68092: ST_TO_ADDR
// end ;
68093: LD_VAR 0 2
68097: RET
// export function Negate ( value ) ; begin
68098: LD_INT 0
68100: PPUSH
// result := not value ;
68101: LD_ADDR_VAR 0 2
68105: PUSH
68106: LD_VAR 0 1
68110: NOT
68111: ST_TO_ADDR
// end ;
68112: LD_VAR 0 2
68116: RET
// export function Inc ( value ) ; begin
68117: LD_INT 0
68119: PPUSH
// result := value + 1 ;
68120: LD_ADDR_VAR 0 2
68124: PUSH
68125: LD_VAR 0 1
68129: PUSH
68130: LD_INT 1
68132: PLUS
68133: ST_TO_ADDR
// end ;
68134: LD_VAR 0 2
68138: RET
// export function Dec ( value ) ; begin
68139: LD_INT 0
68141: PPUSH
// result := value - 1 ;
68142: LD_ADDR_VAR 0 2
68146: PUSH
68147: LD_VAR 0 1
68151: PUSH
68152: LD_INT 1
68154: MINUS
68155: ST_TO_ADDR
// end ;
68156: LD_VAR 0 2
68160: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68161: LD_INT 0
68163: PPUSH
68164: PPUSH
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
68169: PPUSH
68170: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68171: LD_VAR 0 1
68175: PPUSH
68176: LD_VAR 0 2
68180: PPUSH
68181: CALL_OW 488
68185: NOT
68186: PUSH
68187: LD_VAR 0 3
68191: PPUSH
68192: LD_VAR 0 4
68196: PPUSH
68197: CALL_OW 488
68201: NOT
68202: OR
68203: IFFALSE 68216
// begin result := - 1 ;
68205: LD_ADDR_VAR 0 5
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: ST_TO_ADDR
// exit ;
68214: GO 68451
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68216: LD_ADDR_VAR 0 12
68220: PUSH
68221: LD_VAR 0 1
68225: PPUSH
68226: LD_VAR 0 2
68230: PPUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: LD_VAR 0 4
68240: PPUSH
68241: CALL 67299 0 4
68245: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68246: LD_ADDR_VAR 0 11
68250: PUSH
68251: LD_VAR 0 1
68255: PPUSH
68256: LD_VAR 0 2
68260: PPUSH
68261: LD_VAR 0 12
68265: PUSH
68266: LD_INT 1
68268: ARRAY
68269: PPUSH
68270: LD_VAR 0 12
68274: PUSH
68275: LD_INT 2
68277: ARRAY
68278: PPUSH
68279: CALL_OW 298
68283: ST_TO_ADDR
// distance := 9999 ;
68284: LD_ADDR_VAR 0 10
68288: PUSH
68289: LD_INT 9999
68291: ST_TO_ADDR
// for i := 0 to 5 do
68292: LD_ADDR_VAR 0 6
68296: PUSH
68297: DOUBLE
68298: LD_INT 0
68300: DEC
68301: ST_TO_ADDR
68302: LD_INT 5
68304: PUSH
68305: FOR_TO
68306: IFFALSE 68449
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68308: LD_ADDR_VAR 0 7
68312: PUSH
68313: LD_VAR 0 1
68317: PPUSH
68318: LD_VAR 0 6
68322: PPUSH
68323: LD_VAR 0 11
68327: PPUSH
68328: CALL_OW 272
68332: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68333: LD_ADDR_VAR 0 8
68337: PUSH
68338: LD_VAR 0 2
68342: PPUSH
68343: LD_VAR 0 6
68347: PPUSH
68348: LD_VAR 0 11
68352: PPUSH
68353: CALL_OW 273
68357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68358: LD_VAR 0 7
68362: PPUSH
68363: LD_VAR 0 8
68367: PPUSH
68368: CALL_OW 488
68372: NOT
68373: IFFALSE 68377
// continue ;
68375: GO 68305
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68377: LD_ADDR_VAR 0 9
68381: PUSH
68382: LD_VAR 0 12
68386: PUSH
68387: LD_INT 1
68389: ARRAY
68390: PPUSH
68391: LD_VAR 0 12
68395: PUSH
68396: LD_INT 2
68398: ARRAY
68399: PPUSH
68400: LD_VAR 0 7
68404: PPUSH
68405: LD_VAR 0 8
68409: PPUSH
68410: CALL_OW 298
68414: ST_TO_ADDR
// if tmp < distance then
68415: LD_VAR 0 9
68419: PUSH
68420: LD_VAR 0 10
68424: LESS
68425: IFFALSE 68447
// begin result := i ;
68427: LD_ADDR_VAR 0 5
68431: PUSH
68432: LD_VAR 0 6
68436: ST_TO_ADDR
// distance := tmp ;
68437: LD_ADDR_VAR 0 10
68441: PUSH
68442: LD_VAR 0 9
68446: ST_TO_ADDR
// end ; end ;
68447: GO 68305
68449: POP
68450: POP
// end ;
68451: LD_VAR 0 5
68455: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68456: LD_INT 0
68458: PPUSH
68459: PPUSH
// if not driver or not IsInUnit ( driver ) then
68460: LD_VAR 0 1
68464: NOT
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: CALL_OW 310
68475: NOT
68476: OR
68477: IFFALSE 68481
// exit ;
68479: GO 68571
// vehicle := IsInUnit ( driver ) ;
68481: LD_ADDR_VAR 0 3
68485: PUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: CALL_OW 310
68495: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68496: LD_VAR 0 1
68500: PPUSH
68501: LD_STRING \
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: PUSH
68531: LD_STRING E
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: LD_VAR 0 3
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PPUSH
68567: CALL_OW 446
// end ;
68571: LD_VAR 0 2
68575: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68576: LD_INT 0
68578: PPUSH
68579: PPUSH
// if not driver or not IsInUnit ( driver ) then
68580: LD_VAR 0 1
68584: NOT
68585: PUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: CALL_OW 310
68595: NOT
68596: OR
68597: IFFALSE 68601
// exit ;
68599: GO 68691
// vehicle := IsInUnit ( driver ) ;
68601: LD_ADDR_VAR 0 3
68605: PUSH
68606: LD_VAR 0 1
68610: PPUSH
68611: CALL_OW 310
68615: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_STRING \
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: LD_INT 0
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: PUSH
68651: LD_STRING E
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_VAR 0 3
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 447
// end ;
68691: LD_VAR 0 2
68695: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68696: LD_INT 0
68698: PPUSH
68699: PPUSH
68700: PPUSH
// tmp := [ ] ;
68701: LD_ADDR_VAR 0 5
68705: PUSH
68706: EMPTY
68707: ST_TO_ADDR
// for i in units do
68708: LD_ADDR_VAR 0 4
68712: PUSH
68713: LD_VAR 0 1
68717: PUSH
68718: FOR_IN
68719: IFFALSE 68757
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68721: LD_ADDR_VAR 0 5
68725: PUSH
68726: LD_VAR 0 5
68730: PPUSH
68731: LD_VAR 0 5
68735: PUSH
68736: LD_INT 1
68738: PLUS
68739: PPUSH
68740: LD_VAR 0 4
68744: PPUSH
68745: CALL_OW 256
68749: PPUSH
68750: CALL_OW 2
68754: ST_TO_ADDR
68755: GO 68718
68757: POP
68758: POP
// if not tmp then
68759: LD_VAR 0 5
68763: NOT
68764: IFFALSE 68768
// exit ;
68766: GO 68816
// if asc then
68768: LD_VAR 0 2
68772: IFFALSE 68796
// result := SortListByListAsc ( units , tmp ) else
68774: LD_ADDR_VAR 0 3
68778: PUSH
68779: LD_VAR 0 1
68783: PPUSH
68784: LD_VAR 0 5
68788: PPUSH
68789: CALL_OW 76
68793: ST_TO_ADDR
68794: GO 68816
// result := SortListByListDesc ( units , tmp ) ;
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_VAR 0 5
68810: PPUSH
68811: CALL_OW 77
68815: ST_TO_ADDR
// end ;
68816: LD_VAR 0 3
68820: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68821: LD_INT 0
68823: PPUSH
68824: PPUSH
// task := GetTaskList ( mech ) ;
68825: LD_ADDR_VAR 0 4
68829: PUSH
68830: LD_VAR 0 1
68834: PPUSH
68835: CALL_OW 437
68839: ST_TO_ADDR
// if not task then
68840: LD_VAR 0 4
68844: NOT
68845: IFFALSE 68849
// exit ;
68847: GO 68891
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68849: LD_ADDR_VAR 0 3
68853: PUSH
68854: LD_VAR 0 4
68858: PUSH
68859: LD_INT 1
68861: ARRAY
68862: PUSH
68863: LD_INT 1
68865: ARRAY
68866: PUSH
68867: LD_STRING r
68869: EQUAL
68870: PUSH
68871: LD_VAR 0 4
68875: PUSH
68876: LD_INT 1
68878: ARRAY
68879: PUSH
68880: LD_INT 4
68882: ARRAY
68883: PUSH
68884: LD_VAR 0 2
68888: EQUAL
68889: AND
68890: ST_TO_ADDR
// end ;
68891: LD_VAR 0 3
68895: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68896: LD_INT 0
68898: PPUSH
// SetDir ( unit , d ) ;
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_VAR 0 4
68908: PPUSH
68909: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68913: LD_VAR 0 1
68917: PPUSH
68918: LD_VAR 0 2
68922: PPUSH
68923: LD_VAR 0 3
68927: PPUSH
68928: LD_VAR 0 5
68932: PPUSH
68933: CALL_OW 48
// end ;
68937: LD_VAR 0 6
68941: RET
// export function ToNaturalNumber ( number ) ; begin
68942: LD_INT 0
68944: PPUSH
// result := number div 1 ;
68945: LD_ADDR_VAR 0 2
68949: PUSH
68950: LD_VAR 0 1
68954: PUSH
68955: LD_INT 1
68957: DIV
68958: ST_TO_ADDR
// if number < 0 then
68959: LD_VAR 0 1
68963: PUSH
68964: LD_INT 0
68966: LESS
68967: IFFALSE 68977
// result := 0 ;
68969: LD_ADDR_VAR 0 2
68973: PUSH
68974: LD_INT 0
68976: ST_TO_ADDR
// end ;
68977: LD_VAR 0 2
68981: RET
// export function SortByClass ( units , class ) ; var un ; begin
68982: LD_INT 0
68984: PPUSH
68985: PPUSH
// if not units or not class then
68986: LD_VAR 0 1
68990: NOT
68991: PUSH
68992: LD_VAR 0 2
68996: NOT
68997: OR
68998: IFFALSE 69002
// exit ;
69000: GO 69097
// result := [ ] ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: EMPTY
69008: ST_TO_ADDR
// for un in units do
69009: LD_ADDR_VAR 0 4
69013: PUSH
69014: LD_VAR 0 1
69018: PUSH
69019: FOR_IN
69020: IFFALSE 69095
// if GetClass ( un ) = class then
69022: LD_VAR 0 4
69026: PPUSH
69027: CALL_OW 257
69031: PUSH
69032: LD_VAR 0 2
69036: EQUAL
69037: IFFALSE 69064
// result := Insert ( result , 1 , un ) else
69039: LD_ADDR_VAR 0 3
69043: PUSH
69044: LD_VAR 0 3
69048: PPUSH
69049: LD_INT 1
69051: PPUSH
69052: LD_VAR 0 4
69056: PPUSH
69057: CALL_OW 2
69061: ST_TO_ADDR
69062: GO 69093
// result := Replace ( result , result + 1 , un ) ;
69064: LD_ADDR_VAR 0 3
69068: PUSH
69069: LD_VAR 0 3
69073: PPUSH
69074: LD_VAR 0 3
69078: PUSH
69079: LD_INT 1
69081: PLUS
69082: PPUSH
69083: LD_VAR 0 4
69087: PPUSH
69088: CALL_OW 1
69092: ST_TO_ADDR
69093: GO 69019
69095: POP
69096: POP
// end ;
69097: LD_VAR 0 3
69101: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69102: LD_INT 0
69104: PPUSH
69105: PPUSH
69106: PPUSH
69107: PPUSH
69108: PPUSH
69109: PPUSH
69110: PPUSH
// result := [ ] ;
69111: LD_ADDR_VAR 0 4
69115: PUSH
69116: EMPTY
69117: ST_TO_ADDR
// if x - r < 0 then
69118: LD_VAR 0 1
69122: PUSH
69123: LD_VAR 0 3
69127: MINUS
69128: PUSH
69129: LD_INT 0
69131: LESS
69132: IFFALSE 69144
// min_x := 0 else
69134: LD_ADDR_VAR 0 8
69138: PUSH
69139: LD_INT 0
69141: ST_TO_ADDR
69142: GO 69160
// min_x := x - r ;
69144: LD_ADDR_VAR 0 8
69148: PUSH
69149: LD_VAR 0 1
69153: PUSH
69154: LD_VAR 0 3
69158: MINUS
69159: ST_TO_ADDR
// if y - r < 0 then
69160: LD_VAR 0 2
69164: PUSH
69165: LD_VAR 0 3
69169: MINUS
69170: PUSH
69171: LD_INT 0
69173: LESS
69174: IFFALSE 69186
// min_y := 0 else
69176: LD_ADDR_VAR 0 7
69180: PUSH
69181: LD_INT 0
69183: ST_TO_ADDR
69184: GO 69202
// min_y := y - r ;
69186: LD_ADDR_VAR 0 7
69190: PUSH
69191: LD_VAR 0 2
69195: PUSH
69196: LD_VAR 0 3
69200: MINUS
69201: ST_TO_ADDR
// max_x := x + r ;
69202: LD_ADDR_VAR 0 9
69206: PUSH
69207: LD_VAR 0 1
69211: PUSH
69212: LD_VAR 0 3
69216: PLUS
69217: ST_TO_ADDR
// max_y := y + r ;
69218: LD_ADDR_VAR 0 10
69222: PUSH
69223: LD_VAR 0 2
69227: PUSH
69228: LD_VAR 0 3
69232: PLUS
69233: ST_TO_ADDR
// for _x = min_x to max_x do
69234: LD_ADDR_VAR 0 5
69238: PUSH
69239: DOUBLE
69240: LD_VAR 0 8
69244: DEC
69245: ST_TO_ADDR
69246: LD_VAR 0 9
69250: PUSH
69251: FOR_TO
69252: IFFALSE 69353
// for _y = min_y to max_y do
69254: LD_ADDR_VAR 0 6
69258: PUSH
69259: DOUBLE
69260: LD_VAR 0 7
69264: DEC
69265: ST_TO_ADDR
69266: LD_VAR 0 10
69270: PUSH
69271: FOR_TO
69272: IFFALSE 69349
// begin if not ValidHex ( _x , _y ) then
69274: LD_VAR 0 5
69278: PPUSH
69279: LD_VAR 0 6
69283: PPUSH
69284: CALL_OW 488
69288: NOT
69289: IFFALSE 69293
// continue ;
69291: GO 69271
// if GetResourceTypeXY ( _x , _y ) then
69293: LD_VAR 0 5
69297: PPUSH
69298: LD_VAR 0 6
69302: PPUSH
69303: CALL_OW 283
69307: IFFALSE 69347
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69309: LD_ADDR_VAR 0 4
69313: PUSH
69314: LD_VAR 0 4
69318: PPUSH
69319: LD_VAR 0 4
69323: PUSH
69324: LD_INT 1
69326: PLUS
69327: PPUSH
69328: LD_VAR 0 5
69332: PUSH
69333: LD_VAR 0 6
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PPUSH
69342: CALL_OW 1
69346: ST_TO_ADDR
// end ;
69347: GO 69271
69349: POP
69350: POP
69351: GO 69251
69353: POP
69354: POP
// end ;
69355: LD_VAR 0 4
69359: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
69364: PPUSH
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
// if not units then
69370: LD_VAR 0 1
69374: NOT
69375: IFFALSE 69379
// exit ;
69377: GO 69804
// result := UnitFilter ( units , [ f_ok ] ) ;
69379: LD_ADDR_VAR 0 3
69383: PUSH
69384: LD_VAR 0 1
69388: PPUSH
69389: LD_INT 50
69391: PUSH
69392: EMPTY
69393: LIST
69394: PPUSH
69395: CALL_OW 72
69399: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69400: LD_ADDR_VAR 0 8
69404: PUSH
69405: LD_VAR 0 1
69409: PUSH
69410: LD_INT 1
69412: ARRAY
69413: PPUSH
69414: CALL_OW 255
69418: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69419: LD_ADDR_VAR 0 10
69423: PUSH
69424: LD_INT 29
69426: PUSH
69427: LD_EXP 109
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: ST_TO_ADDR
// if not result then
69436: LD_VAR 0 3
69440: NOT
69441: IFFALSE 69445
// exit ;
69443: GO 69804
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69445: LD_ADDR_VAR 0 5
69449: PUSH
69450: LD_INT 81
69452: PUSH
69453: LD_VAR 0 8
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PPUSH
69462: CALL_OW 69
69466: ST_TO_ADDR
// for i in result do
69467: LD_ADDR_VAR 0 4
69471: PUSH
69472: LD_VAR 0 3
69476: PUSH
69477: FOR_IN
69478: IFFALSE 69802
// begin tag := GetTag ( i ) + 1 ;
69480: LD_ADDR_VAR 0 9
69484: PUSH
69485: LD_VAR 0 4
69489: PPUSH
69490: CALL_OW 110
69494: PUSH
69495: LD_INT 1
69497: PLUS
69498: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69499: LD_ADDR_VAR 0 7
69503: PUSH
69504: LD_VAR 0 4
69508: PPUSH
69509: CALL_OW 250
69513: PPUSH
69514: LD_VAR 0 4
69518: PPUSH
69519: CALL_OW 251
69523: PPUSH
69524: LD_INT 6
69526: PPUSH
69527: CALL 69102 0 3
69531: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69532: LD_VAR 0 7
69536: PUSH
69537: LD_VAR 0 4
69541: PPUSH
69542: CALL_OW 264
69546: PUSH
69547: LD_VAR 0 10
69551: IN
69552: NOT
69553: AND
69554: IFFALSE 69593
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69556: LD_VAR 0 4
69560: PPUSH
69561: LD_VAR 0 7
69565: PUSH
69566: LD_INT 1
69568: ARRAY
69569: PUSH
69570: LD_INT 1
69572: ARRAY
69573: PPUSH
69574: LD_VAR 0 7
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PUSH
69583: LD_INT 2
69585: ARRAY
69586: PPUSH
69587: CALL_OW 116
69591: GO 69800
// if path > tag then
69593: LD_VAR 0 2
69597: PUSH
69598: LD_VAR 0 9
69602: GREATER
69603: IFFALSE 69770
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69605: LD_ADDR_VAR 0 6
69609: PUSH
69610: LD_VAR 0 5
69614: PPUSH
69615: LD_INT 91
69617: PUSH
69618: LD_VAR 0 4
69622: PUSH
69623: LD_INT 12
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: LIST
69630: PPUSH
69631: CALL_OW 72
69635: ST_TO_ADDR
// if nearEnemy then
69636: LD_VAR 0 6
69640: IFFALSE 69668
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69642: LD_VAR 0 4
69646: PPUSH
69647: LD_VAR 0 6
69651: PPUSH
69652: LD_VAR 0 4
69656: PPUSH
69657: CALL_OW 74
69661: PPUSH
69662: CALL_OW 115
69666: GO 69768
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69668: LD_VAR 0 4
69672: PPUSH
69673: LD_VAR 0 2
69677: PUSH
69678: LD_VAR 0 9
69682: ARRAY
69683: PUSH
69684: LD_INT 1
69686: ARRAY
69687: PPUSH
69688: LD_VAR 0 2
69692: PUSH
69693: LD_VAR 0 9
69697: ARRAY
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: PPUSH
69703: CALL_OW 297
69707: PUSH
69708: LD_INT 6
69710: GREATER
69711: IFFALSE 69754
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69713: LD_VAR 0 4
69717: PPUSH
69718: LD_VAR 0 2
69722: PUSH
69723: LD_VAR 0 9
69727: ARRAY
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: PPUSH
69733: LD_VAR 0 2
69737: PUSH
69738: LD_VAR 0 9
69742: ARRAY
69743: PUSH
69744: LD_INT 2
69746: ARRAY
69747: PPUSH
69748: CALL_OW 114
69752: GO 69768
// SetTag ( i , tag ) ;
69754: LD_VAR 0 4
69758: PPUSH
69759: LD_VAR 0 9
69763: PPUSH
69764: CALL_OW 109
// end else
69768: GO 69800
// if enemy then
69770: LD_VAR 0 5
69774: IFFALSE 69800
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69776: LD_VAR 0 4
69780: PPUSH
69781: LD_VAR 0 5
69785: PPUSH
69786: LD_VAR 0 4
69790: PPUSH
69791: CALL_OW 74
69795: PPUSH
69796: CALL_OW 115
// end ;
69800: GO 69477
69802: POP
69803: POP
// end ;
69804: LD_VAR 0 3
69808: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69809: LD_INT 0
69811: PPUSH
69812: PPUSH
69813: PPUSH
// if not unit or IsInUnit ( unit ) then
69814: LD_VAR 0 1
69818: NOT
69819: PUSH
69820: LD_VAR 0 1
69824: PPUSH
69825: CALL_OW 310
69829: OR
69830: IFFALSE 69834
// exit ;
69832: GO 69925
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69834: LD_ADDR_VAR 0 4
69838: PUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: CALL_OW 250
69848: PPUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: LD_INT 1
69856: PPUSH
69857: CALL_OW 272
69861: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69862: LD_ADDR_VAR 0 5
69866: PUSH
69867: LD_VAR 0 1
69871: PPUSH
69872: CALL_OW 251
69876: PPUSH
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_INT 1
69884: PPUSH
69885: CALL_OW 273
69889: ST_TO_ADDR
// if ValidHex ( x , y ) then
69890: LD_VAR 0 4
69894: PPUSH
69895: LD_VAR 0 5
69899: PPUSH
69900: CALL_OW 488
69904: IFFALSE 69925
// ComTurnXY ( unit , x , y ) ;
69906: LD_VAR 0 1
69910: PPUSH
69911: LD_VAR 0 4
69915: PPUSH
69916: LD_VAR 0 5
69920: PPUSH
69921: CALL_OW 118
// end ;
69925: LD_VAR 0 3
69929: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
// result := false ;
69934: LD_ADDR_VAR 0 3
69938: PUSH
69939: LD_INT 0
69941: ST_TO_ADDR
// if not units then
69942: LD_VAR 0 2
69946: NOT
69947: IFFALSE 69951
// exit ;
69949: GO 69996
// for i in units do
69951: LD_ADDR_VAR 0 4
69955: PUSH
69956: LD_VAR 0 2
69960: PUSH
69961: FOR_IN
69962: IFFALSE 69994
// if See ( side , i ) then
69964: LD_VAR 0 1
69968: PPUSH
69969: LD_VAR 0 4
69973: PPUSH
69974: CALL_OW 292
69978: IFFALSE 69992
// begin result := true ;
69980: LD_ADDR_VAR 0 3
69984: PUSH
69985: LD_INT 1
69987: ST_TO_ADDR
// exit ;
69988: POP
69989: POP
69990: GO 69996
// end ;
69992: GO 69961
69994: POP
69995: POP
// end ;
69996: LD_VAR 0 3
70000: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70001: LD_INT 0
70003: PPUSH
70004: PPUSH
70005: PPUSH
70006: PPUSH
// if not unit or not points then
70007: LD_VAR 0 1
70011: NOT
70012: PUSH
70013: LD_VAR 0 2
70017: NOT
70018: OR
70019: IFFALSE 70023
// exit ;
70021: GO 70113
// dist := 99999 ;
70023: LD_ADDR_VAR 0 5
70027: PUSH
70028: LD_INT 99999
70030: ST_TO_ADDR
// for i in points do
70031: LD_ADDR_VAR 0 4
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: FOR_IN
70042: IFFALSE 70111
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70044: LD_ADDR_VAR 0 6
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: LD_VAR 0 4
70058: PUSH
70059: LD_INT 1
70061: ARRAY
70062: PPUSH
70063: LD_VAR 0 4
70067: PUSH
70068: LD_INT 2
70070: ARRAY
70071: PPUSH
70072: CALL_OW 297
70076: ST_TO_ADDR
// if tmpDist < dist then
70077: LD_VAR 0 6
70081: PUSH
70082: LD_VAR 0 5
70086: LESS
70087: IFFALSE 70109
// begin result := i ;
70089: LD_ADDR_VAR 0 3
70093: PUSH
70094: LD_VAR 0 4
70098: ST_TO_ADDR
// dist := tmpDist ;
70099: LD_ADDR_VAR 0 5
70103: PUSH
70104: LD_VAR 0 6
70108: ST_TO_ADDR
// end ; end ;
70109: GO 70041
70111: POP
70112: POP
// end ; end_of_file
70113: LD_VAR 0 3
70117: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70118: LD_VAR 0 1
70122: PUSH
70123: LD_INT 200
70125: DOUBLE
70126: GREATEREQUAL
70127: IFFALSE 70135
70129: LD_INT 299
70131: DOUBLE
70132: LESSEQUAL
70133: IFTRUE 70137
70135: GO 70169
70137: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 2
70147: PPUSH
70148: LD_VAR 0 3
70152: PPUSH
70153: LD_VAR 0 4
70157: PPUSH
70158: LD_VAR 0 5
70162: PPUSH
70163: CALL 11319 0 5
70167: GO 70246
70169: LD_INT 300
70171: DOUBLE
70172: GREATEREQUAL
70173: IFFALSE 70181
70175: LD_INT 399
70177: DOUBLE
70178: LESSEQUAL
70179: IFTRUE 70183
70181: GO 70245
70183: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70184: LD_VAR 0 1
70188: PPUSH
70189: LD_VAR 0 2
70193: PPUSH
70194: LD_VAR 0 3
70198: PPUSH
70199: LD_VAR 0 4
70203: PPUSH
70204: LD_VAR 0 5
70208: PPUSH
70209: LD_VAR 0 6
70213: PPUSH
70214: LD_VAR 0 7
70218: PPUSH
70219: LD_VAR 0 8
70223: PPUSH
70224: LD_VAR 0 9
70228: PPUSH
70229: LD_VAR 0 10
70233: PPUSH
70234: LD_VAR 0 11
70238: PPUSH
70239: CALL 27935 0 11
70243: GO 70246
70245: POP
// end ;
70246: PPOPN 11
70248: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70249: LD_VAR 0 1
70253: PPUSH
70254: LD_VAR 0 2
70258: PPUSH
70259: LD_VAR 0 3
70263: PPUSH
70264: LD_VAR 0 4
70268: PPUSH
70269: LD_VAR 0 5
70273: PPUSH
70274: CALL 11055 0 5
// end ; end_of_file
70278: PPOPN 5
70280: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70281: LD_VAR 0 1
70285: PPUSH
70286: LD_VAR 0 2
70290: PPUSH
70291: LD_VAR 0 3
70295: PPUSH
70296: LD_VAR 0 4
70300: PPUSH
70301: LD_VAR 0 5
70305: PPUSH
70306: LD_VAR 0 6
70310: PPUSH
70311: CALL 15628 0 6
// end ;
70315: PPOPN 6
70317: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70318: CALL 15603 0 0
// end ;
70322: PPOPN 1
70324: END
