// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7129 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6916 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1939 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9253 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5732 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: PUSH
1579: LD_EXP 9
1583: AND
1584: IFFALSE 1731
1586: GO 1588
1588: DISABLE
1589: LD_INT 0
1591: PPUSH
// begin enable ;
1592: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1593: LD_ADDR_EXP 31
1597: PUSH
1598: LD_EXP 31
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1607: LD_ADDR_VAR 0 1
1611: PUSH
1612: DOUBLE
1613: LD_INT 1
1615: DEC
1616: ST_TO_ADDR
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_OWVAR 67
1635: ARRAY
1636: PUSH
1637: LD_EXP 31
1641: PLUS
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1674
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1646: LD_INT 1
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 2
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: CALL 1133 0 1
1672: GO 1643
1674: POP
1675: POP
// repeat wait ( 0 0$01 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1683: LD_EXP 32
1687: PUSH
1688: LD_INT 4
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_OWVAR 67
1706: ARRAY
1707: PUSH
1708: LD_EXP 31
1712: PLUS
1713: GREATEREQUAL
1714: IFFALSE 1676
// AddComMoveXY ( al_force , 143 , 178 ) ;
1716: LD_EXP 32
1720: PPUSH
1721: LD_INT 143
1723: PPUSH
1724: LD_INT 178
1726: PPUSH
1727: CALL_OW 171
// end ;
1731: PPOPN 1
1733: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1734: LD_INT 6
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: IFFALSE 1831
1753: GO 1755
1755: DISABLE
1756: LD_INT 0
1758: PPUSH
// begin enable ;
1759: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 6
1767: PPUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 7
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 70
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_INT 81
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 255
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 74
1822: PPUSH
1823: CALL_OW 115
1827: GO 1783
1829: POP
1830: POP
// end ;
1831: PPOPN 1
1833: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1834: LD_EXP 9
1838: IFFALSE 1936
1840: GO 1842
1842: DISABLE
1843: LD_INT 0
1845: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1846: LD_ADDR_VAR 0 1
1850: PUSH
1851: LD_INT 18900
1853: PUSH
1854: LD_INT 18200
1856: PUSH
1857: LD_INT 16450
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_OWVAR 67
1869: ARRAY
1870: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1871: CALL 8616 0 0
// wait ( reload_time / 2 ) ;
1875: LD_VAR 0 1
1879: PUSH
1880: LD_INT 2
1882: DIVREAL
1883: PPUSH
1884: CALL_OW 67
// ActiveArtifact2 ( ) ;
1888: CALL 9061 0 0
// wait ( reload_time / 2 ) ;
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 2
1899: DIVREAL
1900: PPUSH
1901: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1905: LD_INT 22
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 8
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: NOT
1934: IFFALSE 1871
// end ; end_of_file
1936: PPOPN 1
1938: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// uc_side := 8 ;
1947: LD_ADDR_OWVAR 20
1951: PUSH
1952: LD_INT 8
1954: ST_TO_ADDR
// uc_nation := 2 ;
1955: LD_ADDR_OWVAR 21
1959: PUSH
1960: LD_INT 2
1962: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: LD_INT 7
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 9
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_OWVAR 67
1986: ARRAY
1987: ST_TO_ADDR
// dep := ar_base ;
1988: LD_ADDR_VAR 0 5
1992: PUSH
1993: LD_INT 57
1995: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1996: LD_ADDR_VAR 0 6
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 8
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2034: LD_VAR 0 5
2038: PPUSH
2039: CALL_OW 274
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 999999
2049: PPUSH
2050: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2054: LD_VAR 0 5
2058: PPUSH
2059: CALL_OW 274
2063: PPUSH
2064: LD_INT 2
2066: PPUSH
2067: LD_INT 10000
2069: PPUSH
2070: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 274
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 10000
2089: PPUSH
2090: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2094: LD_INT 68
2096: PPUSH
2097: LD_INT 224
2099: PPUSH
2100: LD_INT 5
2102: PPUSH
2103: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 6
2115: PPUSH
2116: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2120: LD_ADDR_OWVAR 26
2124: PUSH
2125: LD_STRING Nicolas Vervecken
2127: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2128: LD_ADDR_OWVAR 33
2132: PUSH
2133: LD_STRING SecondCharsGal
2135: ST_TO_ADDR
// hc_face_number := 3 ;
2136: LD_ADDR_OWVAR 34
2140: PUSH
2141: LD_INT 3
2143: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2144: LD_ADDR_OWVAR 29
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: LD_INT 10
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: ST_TO_ADDR
// Vervecken := CreateHuman ;
2159: LD_ADDR_EXP 3
2163: PUSH
2164: CALL_OW 44
2168: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2169: LD_EXP 3
2173: PPUSH
2174: LD_VAR 0 5
2178: PPUSH
2179: CALL_OW 52
// InitHc_All ( ) ;
2183: CALL_OW 584
// for i = 1 to 4 do
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: DOUBLE
2193: LD_INT 1
2195: DEC
2196: ST_TO_ADDR
2197: LD_INT 4
2199: PUSH
2200: FOR_TO
2201: IFFALSE 2262
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2203: LD_INT 0
2205: PPUSH
2206: LD_INT 9
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2218: CALL_OW 44
2222: PPUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 30
2235: PUSH
2236: LD_INT 5
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PPUSH
2256: CALL_OW 52
// end ;
2260: GO 2200
2262: POP
2263: POP
// for i = 1 to 2 do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 2
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2339
// begin PrepareHuman ( false , 4 , skill ) ;
2280: LD_INT 0
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_VAR 0 4
2290: PPUSH
2291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2295: CALL_OW 44
2299: PPUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 30
2312: PUSH
2313: LD_INT 8
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: CALL_OW 52
// end ;
2337: GO 2277
2339: POP
2340: POP
// for i = 1 to 6 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 6
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2392
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2357: LD_INT 0
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_VAR 0 4
2367: PUSH
2368: LD_INT 1
2370: PLUS
2371: PPUSH
2372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2376: CALL_OW 44
2380: PPUSH
2381: LD_VAR 0 6
2385: PPUSH
2386: CALL_OW 52
// end ;
2390: GO 2354
2392: POP
2393: POP
// uc_nation := 0 ;
2394: LD_ADDR_OWVAR 21
2398: PUSH
2399: LD_INT 0
2401: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2402: LD_ADDR_VAR 0 2
2406: PUSH
2407: LD_INT 22
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 30
2419: PUSH
2420: LD_INT 32
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL_OW 69
2435: PUSH
2436: FOR_IN
2437: IFFALSE 2474
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2439: LD_INT 0
2441: PPUSH
2442: LD_INT 15
2444: PPUSH
2445: LD_VAR 0 4
2449: PUSH
2450: LD_INT 1
2452: PLUS
2453: PPUSH
2454: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2458: CALL_OW 44
2462: PPUSH
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL_OW 52
// end ;
2472: GO 2436
2474: POP
2475: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 5
2481: PPUSH
2482: LD_INT 10
2484: PPUSH
2485: CALL_OW 380
// un := CreateHuman ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: CALL_OW 44
2498: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 175
2506: PPUSH
2507: LD_INT 128
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 115
2524: PPUSH
2525: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 380
// un := CreateHuman ;
2542: LD_ADDR_VAR 0 3
2546: PUSH
2547: CALL_OW 44
2551: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_INT 240
2559: PPUSH
2560: LD_INT 128
2562: PPUSH
2563: CALL_OW 428
2567: PPUSH
2568: CALL_OW 52
// un := CreateHuman ;
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: CALL_OW 44
2581: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 260
2601: PPUSH
2602: LD_INT 147
2604: PPUSH
2605: CALL_OW 428
2609: PPUSH
2610: CALL_OW 52
// for i = 1 to 2 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 2
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2653
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2630: LD_VAR 0 6
2634: PPUSH
2635: LD_INT 14
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: LD_INT 31
2646: PPUSH
2647: CALL_OW 185
2651: GO 2627
2653: POP
2654: POP
// end ;
2655: LD_VAR 0 1
2659: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
// for i = 1 to num do
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: DOUBLE
2670: LD_INT 1
2672: DEC
2673: ST_TO_ADDR
2674: LD_VAR 0 1
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2752
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 30
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: PPUSH
2715: LD_INT 11
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_INT 23
2726: PUSH
2727: LD_INT 24
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 12
2744: ARRAY
2745: PPUSH
2746: CALL_OW 185
2750: GO 2679
2752: POP
2753: POP
// end ;
2754: LD_VAR 0 2
2758: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
// uc_side := 8 ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_INT 8
2771: ST_TO_ADDR
// uc_nation := 0 ;
2772: LD_ADDR_OWVAR 21
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// hc_class := 17 ;
2780: LD_ADDR_OWVAR 28
2784: PUSH
2785: LD_INT 17
2787: ST_TO_ADDR
// hc_gallery :=  ;
2788: LD_ADDR_OWVAR 33
2792: PUSH
2793: LD_STRING 
2795: ST_TO_ADDR
// hc_name :=  ;
2796: LD_ADDR_OWVAR 26
2800: PUSH
2801: LD_STRING 
2803: ST_TO_ADDR
// hc_importance := 0 ;
2804: LD_ADDR_OWVAR 32
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2812: LD_ADDR_OWVAR 31
2816: PUSH
2817: LD_INT 10
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: ST_TO_ADDR
// if ar_base then
2835: LD_INT 57
2837: IFFALSE 2882
// begin un := CreateHuman ;
2839: LD_ADDR_VAR 0 3
2843: PUSH
2844: CALL_OW 44
2848: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_INT 57
2856: PPUSH
2857: CALL_OW 52
// ComExitBuilding ( un ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 68
2877: PPUSH
2878: CALL_OW 180
// end ; end ;
2882: LD_VAR 0 1
2886: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// legion_force := [ ] ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// l_allow_attack := false ;
2898: LD_ADDR_EXP 34
2902: PUSH
2903: LD_INT 0
2905: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2906: LD_VAR 0 1
2910: PPUSH
2911: CALL 2660 0 1
// repeat wait ( 0 0$01 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// until legion_force >= n1 ;
2922: LD_EXP 33
2926: PUSH
2927: LD_VAR 0 1
2931: GREATEREQUAL
2932: IFFALSE 2915
// l_allow_attack := true ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// for i = 1 to n2 do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_VAR 0 2
2956: PUSH
2957: FOR_TO
2958: IFFALSE 2966
// begin AddKamikaze ( ) ;
2960: CALL 2759 0 0
// end ;
2964: GO 2957
2966: POP
2967: POP
// end ;
2968: LD_VAR 0 3
2972: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2973: LD_INT 22
2975: PUSH
2976: LD_INT 8
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 50
2985: PUSH
2986: EMPTY
2987: LIST
2988: PUSH
2989: LD_INT 33
2991: PUSH
2992: LD_INT 2
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: LD_INT 61
3004: PUSH
3005: EMPTY
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: IFFALSE 3102
3024: GO 3026
3026: DISABLE
3027: LD_INT 0
3029: PPUSH
// begin enable ;
3030: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3031: LD_ADDR_VAR 0 1
3035: PUSH
3036: LD_INT 22
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 33
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 61
3067: PUSH
3068: EMPTY
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: FOR_IN
3087: IFFALSE 3100
// Connect ( i ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 37513 0 1
3098: GO 3086
3100: POP
3101: POP
// end ;
3102: PPOPN 1
3104: END
// every 5 5$00 trigger legion_attacks_active do
3105: LD_EXP 7
3109: IFFALSE 3161
3111: GO 3113
3113: DISABLE
// begin enable ;
3114: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3115: LD_INT 5250
3117: PUSH
3118: LD_INT 2100
3120: PUSH
3121: LD_INT 1050
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PPUSH
3135: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3139: LD_EXP 8
3143: PUSH
3144: LD_INT 2
3146: MINUS
3147: PUSH
3148: LD_OWVAR 67
3152: PLUS
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL 2887 0 2
// end ;
3161: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3162: LD_EXP 34
3166: PUSH
3167: LD_EXP 33
3171: PPUSH
3172: LD_INT 3
3174: PUSH
3175: LD_INT 60
3177: PUSH
3178: EMPTY
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 61
3187: PUSH
3188: EMPTY
3189: LIST
3190: PUSH
3191: LD_INT 50
3193: PUSH
3194: EMPTY
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 72
3206: AND
3207: IFFALSE 3338
3209: GO 3211
3211: DISABLE
3212: LD_INT 0
3214: PPUSH
3215: PPUSH
// begin enable ;
3216: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 33
3226: PPUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 60
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 61
3242: PUSH
3243: EMPTY
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 72
3261: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3262: LD_ADDR_VAR 0 1
3266: PUSH
3267: LD_INT 150
3269: PUSH
3270: LD_INT 93
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 232
3279: PUSH
3280: LD_INT 88
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 209
3289: PUSH
3290: LD_INT 50
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 208
3299: PUSH
3300: LD_INT 29
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 191
3309: PUSH
3310: LD_INT 17
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3324: LD_VAR 0 2
3328: PPUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 69478 0 2
// end ;
3338: PPOPN 2
3340: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3341: LD_INT 6
3343: PPUSH
3344: LD_INT 22
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 25
3356: PUSH
3357: LD_INT 17
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 70
3372: IFFALSE 3459
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 6
3388: PPUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 25
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PPUSH
3413: CALL_OW 70
3417: PUSH
3418: FOR_IN
3419: IFFALSE 3457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3421: LD_VAR 0 1
3425: PPUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 6
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 74
3450: PPUSH
3451: CALL_OW 115
3455: GO 3418
3457: POP
3458: POP
// end ;
3459: PPOPN 1
3461: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3462: LD_INT 68
3464: IFFALSE 3695
3466: GO 3468
3468: DISABLE
3469: LD_INT 0
3471: PPUSH
3472: PPUSH
3473: PPUSH
// begin enable ;
3474: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 224
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 160
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 228
3502: PUSH
3503: LD_INT 56
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 271
3512: PUSH
3513: LD_INT 87
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: ST_TO_ADDR
// for i = 1 to 3 do
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 3
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3556
// EraseResourceArea ( telArea , i ) ;
3542: LD_INT 7
3544: PPUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: CALL_OW 286
3554: GO 3539
3556: POP
3557: POP
// for i = xy downto 1 do
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: DOUBLE
3564: LD_VAR 0 2
3568: INC
3569: ST_TO_ADDR
3570: LD_INT 1
3572: PUSH
3573: FOR_DOWNTO
3574: IFFALSE 3656
// begin k := rand ( 1 , xy ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3594: LD_VAR 0 2
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: LD_VAR 0 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PUSH
3620: LD_INT 2
3622: ARRAY
3623: PPUSH
3624: CALL_OW 428
3628: IFFALSE 3652
// xy := Delete ( xy , k ) else
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 3
3649: ST_TO_ADDR
3650: GO 3654
// break ;
3652: GO 3656
// end ;
3654: GO 3573
3656: POP
3657: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3658: LD_INT 68
3660: PPUSH
3661: LD_VAR 0 2
3665: PUSH
3666: LD_VAR 0 1
3670: ARRAY
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: LD_VAR 0 2
3680: PUSH
3681: LD_VAR 0 1
3685: ARRAY
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 243
// end ; end_of_file
3695: PPOPN 3
3697: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3698: LD_INT 0
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
// uc_side := 6 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 6
3714: ST_TO_ADDR
// uc_nation := nation_russian ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 3
3722: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3723: LD_INT 6
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3733: LD_ADDR_VAR 0 6
3737: PUSH
3738: LD_INT 9
3740: PUSH
3741: LD_INT 4
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 8
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 8
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: LD_INT 8
3789: PUSH
3790: LD_INT 7
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: ST_TO_ADDR
// tmp := [ ] ;
3804: LD_ADDR_VAR 0 5
3808: PUSH
3809: EMPTY
3810: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3811: LD_ADDR_EXP 2
3815: PUSH
3816: LD_STRING Davidov
3818: PPUSH
3819: CALL_OW 25
3823: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3824: LD_EXP 2
3828: PPUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 7
3834: PPUSH
3835: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3839: LD_EXP 2
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: LD_INT 8
3849: PPUSH
3850: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3854: LD_EXP 2
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: LD_INT 6
3864: PPUSH
3865: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3869: LD_EXP 2
3873: PPUSH
3874: LD_INT 4
3876: PPUSH
3877: LD_INT 10
3879: PPUSH
3880: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3884: LD_EXP 2
3888: PPUSH
3889: LD_INT 4
3891: PPUSH
3892: CALL_OW 336
// InitHc_All ( ) ;
3896: CALL_OW 584
// while amount [ 1 ] do
3900: LD_VAR 0 6
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: IFFALSE 4241
// begin Wait ( 1 ) ;
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3917: LD_ADDR_VAR 0 7
3921: PUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: CALL_OW 12
3932: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3933: LD_VAR 0 6
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PUSH
3942: LD_VAR 0 5
3946: AND
3947: IFFALSE 4102
// begin if k in [ 1 , 2 ] then
3949: LD_VAR 0 7
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: IN
3964: IFFALSE 3974
// k := 3 ;
3966: LD_ADDR_VAR 0 7
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: LD_INT 24
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 12
3999: ARRAY
4000: ST_TO_ADDR
// vc_engine := engine_siberite ;
4001: LD_ADDR_OWVAR 39
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// vc_control := control_manual ;
4009: LD_ADDR_OWVAR 38
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4017: LD_ADDR_OWVAR 40
4021: PUSH
4022: LD_INT 44
4024: PUSH
4025: LD_INT 45
4027: PUSH
4028: LD_INT 43
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 3
4041: PPUSH
4042: CALL_OW 12
4046: ARRAY
4047: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4048: LD_ADDR_VAR 0 5
4052: PUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 45
4065: PPUSH
4066: CALL_OW 2
4070: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 6
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: PUSH
4093: LD_INT 1
4095: MINUS
4096: PPUSH
4097: CALL_OW 1
4101: ST_TO_ADDR
// end ; if not tmp then
4102: LD_VAR 0 5
4106: NOT
4107: IFFALSE 4117
// k := 2 ;
4109: LD_ADDR_VAR 0 7
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4117: LD_VAR 0 6
4121: PUSH
4122: LD_INT 2
4124: ARRAY
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: PUSH
4130: LD_VAR 0 7
4134: PUSH
4135: LD_INT 3
4137: EQUAL
4138: AND
4139: IFFALSE 4168
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_INT 9
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: CALL_OW 12
4166: ARRAY
4167: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4168: LD_INT 0
4170: PPUSH
4171: LD_VAR 0 7
4175: PPUSH
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4185: LD_ADDR_VAR 0 5
4189: PUSH
4190: LD_VAR 0 5
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 44
4202: PPUSH
4203: CALL_OW 2
4207: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4208: LD_ADDR_VAR 0 6
4212: PUSH
4213: LD_VAR 0 6
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_VAR 0 6
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PUSH
4230: LD_INT 1
4232: MINUS
4233: PPUSH
4234: CALL_OW 1
4238: ST_TO_ADDR
// end ;
4239: GO 3900
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4241: LD_ADDR_VAR 0 5
4245: PUSH
4246: LD_VAR 0 5
4250: PPUSH
4251: LD_VAR 0 5
4255: PUSH
4256: LD_INT 1
4258: PLUS
4259: PPUSH
4260: LD_EXP 2
4264: PPUSH
4265: CALL_OW 2
4269: ST_TO_ADDR
// for i = tmp downto 1 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_VAR 0 5
4280: INC
4281: ST_TO_ADDR
4282: LD_INT 1
4284: PUSH
4285: FOR_DOWNTO
4286: IFFALSE 4448
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4288: LD_VAR 0 5
4292: PUSH
4293: LD_VAR 0 2
4297: ARRAY
4298: PPUSH
4299: CALL_OW 247
4303: PUSH
4304: LD_INT 2
4306: EQUAL
4307: IFFALSE 4397
// begin SetDir ( tmp [ i ] , 3 ) ;
4309: LD_VAR 0 5
4313: PUSH
4314: LD_VAR 0 2
4318: ARRAY
4319: PPUSH
4320: LD_INT 3
4322: PPUSH
4323: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4327: LD_VAR 0 5
4331: PUSH
4332: LD_VAR 0 2
4336: ARRAY
4337: PPUSH
4338: LD_INT 193
4340: PPUSH
4341: LD_INT 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4351: LD_VAR 0 5
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: MINUS
4364: ARRAY
4365: PPUSH
4366: LD_VAR 0 5
4370: PUSH
4371: LD_VAR 0 2
4375: ARRAY
4376: PPUSH
4377: CALL_OW 52
// i := i - 1 ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: MINUS
4394: ST_TO_ADDR
// end else
4395: GO 4418
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4397: LD_VAR 0 5
4401: PUSH
4402: LD_VAR 0 2
4406: ARRAY
4407: PPUSH
4408: LD_INT 2
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4418: LD_VAR 0 5
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: PPUSH
4429: LD_INT 197
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 111
// Wait ( 0 0$02 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// end ;
4446: GO 4285
4448: POP
4449: POP
// Wait ( 0 0$02 ) ;
4450: LD_INT 70
4452: PPUSH
4453: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4457: LD_ADDR_OWVAR 37
4461: PUSH
4462: LD_INT 22
4464: ST_TO_ADDR
// vc_engine := engine_siberite ;
4465: LD_ADDR_OWVAR 39
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// vc_control := control_computer ;
4473: LD_ADDR_OWVAR 38
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4481: LD_ADDR_OWVAR 40
4485: PUSH
4486: LD_INT 51
4488: ST_TO_ADDR
// tmp := CreateVehicle ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: CALL_OW 45
4498: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4499: LD_VAR 0 5
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4511: LD_VAR 0 5
4515: PPUSH
4516: LD_INT 193
4518: PPUSH
4519: LD_INT 3
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 60
4539: PPUSH
4540: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4544: LD_VAR 0 5
4548: PPUSH
4549: LD_INT 197
4551: PPUSH
4552: LD_INT 22
4554: PPUSH
4555: CALL_OW 111
// end ; end_of_file
4559: LD_VAR 0 1
4563: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4564: LD_INT 0
4566: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4567: LD_VAR 0 1
4571: PPUSH
4572: LD_VAR 0 2
4576: PPUSH
4577: CALL 9619 0 2
// side := GetSide ( fac ) ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: CALL_OW 255
4595: ST_TO_ADDR
// case side of 7 :
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 7
4603: DOUBLE
4604: EQUAL
4605: IFTRUE 4609
4607: GO 4656
4609: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4610: LD_ADDR_EXP 32
4614: PUSH
4615: LD_EXP 32
4619: PPUSH
4620: LD_EXP 32
4624: PUSH
4625: LD_INT 1
4627: PLUS
4628: PPUSH
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL_OW 1
4638: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_INT 112
4646: PPUSH
4647: LD_INT 175
4649: PPUSH
4650: CALL_OW 171
// end ; 8 :
4654: GO 4742
4656: LD_INT 8
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4741
4664: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4665: LD_VAR 0 1
4669: PPUSH
4670: CALL_OW 264
4674: PUSH
4675: LD_INT 31
4677: EQUAL
4678: IFFALSE 4695
// ComMoveXY ( veh , 145 , 66 ) ;
4680: LD_VAR 0 1
4684: PPUSH
4685: LD_INT 145
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 265
4704: PUSH
4705: LD_INT 11
4707: EQUAL
4708: IFFALSE 4739
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4710: LD_ADDR_EXP 33
4714: PUSH
4715: LD_EXP 33
4719: PPUSH
4720: LD_EXP 33
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: PPUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 1
4738: ST_TO_ADDR
// end ; end ;
4739: GO 4742
4741: POP
// end ;
4742: PPOPN 3
4744: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL 9499 0 1
// if un in legion_force then
4754: LD_VAR 0 1
4758: PUSH
4759: LD_EXP 33
4763: IN
4764: IFFALSE 4782
// legion_force := legion_force diff un ;
4766: LD_ADDR_EXP 33
4770: PUSH
4771: LD_EXP 33
4775: PUSH
4776: LD_VAR 0 1
4780: DIFF
4781: ST_TO_ADDR
// if un in al_force then
4782: LD_VAR 0 1
4786: PUSH
4787: LD_EXP 32
4791: IN
4792: IFFALSE 4810
// al_force := al_force diff un ;
4794: LD_ADDR_EXP 32
4798: PUSH
4799: LD_EXP 32
4803: PUSH
4804: LD_VAR 0 1
4808: DIFF
4809: ST_TO_ADDR
// end ;
4810: PPOPN 1
4812: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4813: LD_VAR 0 1
4817: PUSH
4818: LD_INT 68
4820: EQUAL
4821: PUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: CALL_OW 257
4831: PUSH
4832: LD_INT 17
4834: EQUAL
4835: AND
4836: IFFALSE 4879
// begin Wait ( 0 0$01 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 6
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 74
4874: PPUSH
4875: CALL_OW 115
// end ; end ;
4879: PPOPN 2
4881: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4882: LD_VAR 0 1
4886: PUSH
4887: LD_EXP 32
4891: IN
4892: IFFALSE 4910
// al_force := al_force diff un ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_VAR 0 1
4908: DIFF
4909: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 263
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4934
// ComUnlink ( un ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 8
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 21
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: IN
4968: IFFALSE 4986
// begin wait ( 0 0$2 ) ;
4970: LD_INT 70
4972: PPUSH
4973: CALL_OW 67
// ComAutodestruct ( un ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL 62388 0 1
// end ; end ;
4986: PPOPN 1
4988: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 25
4996: EQUAL
4997: IFFALSE 5007
// player_start_res_sib_bomb := true ;
4999: LD_ADDR_EXP 4
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// if tech = tech_artifact then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 24
5014: EQUAL
5015: IFFALSE 5025
// player_start_res_artifact := true ;
5017: LD_ADDR_EXP 5
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// end ;
5025: PPOPN 2
5027: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 6
5035: EQUAL
5036: IFFALSE 5046
// player_artifact_loaded := false ;
5038: LD_ADDR_EXP 18
5042: PUSH
5043: LD_INT 0
5045: ST_TO_ADDR
// end ;
5046: PPOPN 2
5048: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 6
5056: EQUAL
5057: IFFALSE 5067
// player_artifact_loaded := true ;
5059: LD_ADDR_EXP 18
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// end ;
5067: PPOPN 2
5069: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5070: LD_INT 0
5072: PPUSH
// begin player_used_sib_bomb := true ;
5073: LD_ADDR_EXP 12
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// for i = 1 to 3 do
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5168
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_EXP 15
5111: PUSH
5112: LD_VAR 0 4
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 15
5126: PUSH
5127: LD_VAR 0 4
5131: ARRAY
5132: PUSH
5133: LD_INT 2
5135: ARRAY
5136: PPUSH
5137: CALL_OW 298
5141: PUSH
5142: LD_EXP 17
5146: LESSEQUAL
5147: IFFALSE 5166
// begin wait ( 0 0$5 ) ;
5149: LD_INT 175
5151: PPUSH
5152: CALL_OW 67
// artifact_destroyed := true ;
5156: LD_ADDR_EXP 16
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// break ;
5164: GO 5168
// end ; end ;
5166: GO 5094
5168: POP
5169: POP
// end ;
5170: PPOPN 4
5172: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5173: LD_VAR 0 1
5177: PPUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: CALL 9595 0 3
// end ;
5192: PPOPN 3
5194: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 9603 0 1
// end ; end_of_file
5204: PPOPN 1
5206: END
// export function CreateArtifact ( type , x , y ) ; begin
5207: LD_INT 0
5209: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5210: LD_INT 4
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 58
// end ;
5235: LD_VAR 0 4
5239: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5240: LD_INT 0
5242: PPUSH
5243: PPUSH
5244: PPUSH
// result := 0 ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5253: LD_ADDR_VAR 0 4
5257: PUSH
5258: LD_INT 22
5260: PUSH
5261: LD_VAR 0 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 2
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: ST_TO_ADDR
// if deps then
5307: LD_VAR 0 4
5311: IFFALSE 5359
// for i in deps do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: PUSH
5323: FOR_IN
5324: IFFALSE 5357
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5326: LD_ADDR_VAR 0 2
5330: PUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 3
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 275
5353: PLUS
5354: ST_TO_ADDR
5355: GO 5323
5357: POP
5358: POP
// end ;
5359: LD_VAR 0 2
5363: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5364: LD_INT 0
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
// if val <= 0 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 0
5377: LESSEQUAL
5378: IFFALSE 5382
// exit ;
5380: GO 5574
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 30
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 69
5435: ST_TO_ADDR
// if deps then
5436: LD_VAR 0 5
5440: IFFALSE 5574
// for i in deps do
5442: LD_ADDR_VAR 0 4
5446: PUSH
5447: LD_VAR 0 5
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5572
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5455: LD_ADDR_VAR 0 6
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 274
5469: PPUSH
5470: LD_INT 3
5472: PPUSH
5473: CALL_OW 275
5477: ST_TO_ADDR
// if val < s then
5478: LD_VAR 0 2
5482: PUSH
5483: LD_VAR 0 6
5487: LESS
5488: IFFALSE 5534
// begin s := s - val ;
5490: LD_ADDR_VAR 0 6
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: LD_VAR 0 2
5504: MINUS
5505: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5506: LD_VAR 0 4
5510: PPUSH
5511: CALL_OW 274
5515: PPUSH
5516: LD_INT 3
5518: PPUSH
5519: LD_VAR 0 6
5523: PPUSH
5524: CALL_OW 277
// exit ;
5528: POP
5529: POP
5530: GO 5574
// end else
5532: GO 5570
// begin val := val - s ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 6
5548: MINUS
5549: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: CALL_OW 274
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 277
// end ; end ;
5570: GO 5452
5572: POP
5573: POP
// end ;
5574: LD_VAR 0 3
5578: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_EXP 35
5588: IN
5589: NOT
5590: IFFALSE 5621
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5592: LD_ADDR_EXP 35
5596: PUSH
5597: LD_EXP 35
5601: PPUSH
5602: LD_EXP 35
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: PPUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// end ;
5621: PPOPN 1
5623: END
// export function DestinationReachable ( unit , x , y ) ; begin
5624: LD_INT 0
5626: PPUSH
// if ValidHex ( x , y ) then
5627: LD_VAR 0 2
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 488
5641: IFFALSE 5667
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 428
5662: PPUSH
5663: CALL_OW 115
// wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// if unit in unreachableList then
5674: LD_VAR 0 1
5678: PUSH
5679: LD_EXP 35
5683: IN
5684: IFFALSE 5696
// result := false else
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
5694: GO 5704
// result := true ;
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if not result then
5704: LD_VAR 0 4
5708: NOT
5709: IFFALSE 5727
// unreachableList := unreachableList diff unit ;
5711: LD_ADDR_EXP 35
5715: PUSH
5716: LD_EXP 35
5720: PUSH
5721: LD_VAR 0 1
5725: DIFF
5726: ST_TO_ADDR
// end ; end_of_file
5727: LD_VAR 0 4
5731: RET
// export function Action ; var dial ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5736: LD_INT 192
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 86
// InGameOn ;
5746: CALL_OW 8
// PrepareRussian ;
5750: CALL 3698 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 6
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 25
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 4
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: PUSH
5828: LD_EXP 2
5832: DIFF
5833: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5834: LD_VAR 0 2
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: LD_INT 202
5845: PPUSH
5846: LD_INT 40
5848: PPUSH
5849: CALL_OW 111
// Wait ( 0 0$03 ) ;
5853: LD_INT 105
5855: PPUSH
5856: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5860: LD_EXP 2
5864: PPUSH
5865: LD_STRING DDav-1
5867: PPUSH
5868: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5872: LD_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_EXP 2
5885: PPUSH
5886: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5890: LD_EXP 2
5894: PPUSH
5895: LD_VAR 0 2
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5908: LD_INT 202
5910: PPUSH
5911: LD_INT 40
5913: PPUSH
5914: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5918: LD_VAR 0 2
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_STRING DRus-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5934: LD_EXP 2
5938: PPUSH
5939: LD_STRING DDav-2
5941: PPUSH
5942: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5946: LD_VAR 0 2
5950: PUSH
5951: LD_INT 1
5953: ARRAY
5954: PPUSH
5955: LD_STRING DRus-2
5957: PPUSH
5958: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5962: LD_EXP 2
5966: PPUSH
5967: LD_STRING DDav-3
5969: PPUSH
5970: CALL_OW 88
// InGameOff ;
5974: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5985: LD_STRING C1
5987: PPUSH
5988: CALL_OW 337
// SaveForQuickRestart ;
5992: CALL_OW 22
// end ;
5996: LD_VAR 0 1
6000: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6001: LD_INT 22
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 6
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 8
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: IFFALSE 6158
6060: GO 6062
6062: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6063: LD_EXP 2
6067: PPUSH
6068: LD_STRING DDav-4
6070: PPUSH
6071: CALL_OW 88
// Wait ( 0 0$40 ) ;
6075: LD_INT 1400
6077: PPUSH
6078: CALL_OW 67
// DialogueOn ;
6082: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6086: LD_EXP 3
6090: PPUSH
6091: LD_STRING Dver-Meet-1
6093: PPUSH
6094: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6098: LD_EXP 2
6102: PPUSH
6103: LD_STRING DDav-Meet-1
6105: PPUSH
6106: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6110: LD_EXP 3
6114: PPUSH
6115: LD_STRING Dver-Meet-2
6117: PPUSH
6118: CALL_OW 94
// DialogueOff ;
6122: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6126: LD_INT 19600
6128: PUSH
6129: LD_INT 15400
6131: PUSH
6132: LD_INT 13300
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_OWVAR 67
6144: ARRAY
6145: PPUSH
6146: CALL_OW 67
// legion_attacks_active := true ;
6150: LD_ADDR_EXP 7
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// end ;
6158: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 30
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_OWVAR 1
6192: PUSH
6193: LD_INT 21000
6195: GREATER
6196: OR
6197: IFFALSE 6431
6199: GO 6201
6201: DISABLE
6202: LD_INT 0
6204: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6205: LD_ADDR_VAR 0 1
6209: PUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 6
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PUSH
6279: LD_EXP 2
6283: DIFF
6284: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6285: LD_VAR 0 1
6289: PUSH
6290: LD_INT 1
6292: ARRAY
6293: PPUSH
6294: LD_STRING DRus-3
6296: PPUSH
6297: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6301: LD_EXP 2
6305: PPUSH
6306: LD_STRING DDav-5
6308: PPUSH
6309: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6313: LD_VAR 0 1
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_STRING DRus-4
6324: PPUSH
6325: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6329: LD_EXP 2
6333: PPUSH
6334: LD_STRING DDav-6
6336: PPUSH
6337: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6341: LD_STRING C2
6343: PPUSH
6344: CALL_OW 337
// Wait ( 5 5$00 ) ;
6348: LD_INT 10500
6350: PPUSH
6351: CALL_OW 67
// DialogueOn ;
6355: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6359: LD_EXP 1
6363: PPUSH
6364: LD_STRING DBag-1
6366: PPUSH
6367: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6371: LD_EXP 2
6375: PPUSH
6376: LD_STRING DDavB-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING DBag-2
6390: PPUSH
6391: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6395: LD_EXP 2
6399: PPUSH
6400: LD_STRING DDavB-2
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6407: LD_EXP 1
6411: PPUSH
6412: LD_STRING DBag-3
6414: PPUSH
6415: CALL_OW 94
// DialogueOff ;
6419: CALL_OW 7
// alliance_attack_active := true ;
6423: LD_ADDR_EXP 9
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// end ;
6431: PPOPN 1
6433: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6434: LD_EXP 10
6438: IFFALSE 6485
6440: GO 6442
6442: DISABLE
// begin DialogueOn ;
6443: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6447: LD_EXP 10
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: LD_EXP 10
6460: PUSH
6461: LD_INT 2
6463: ARRAY
6464: PPUSH
6465: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6469: LD_EXP 2
6473: PPUSH
6474: LD_STRING DDav-Artifact1-1
6476: PPUSH
6477: CALL_OW 88
// DialogueOff ;
6481: CALL_OW 7
// end ;
6485: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6486: LD_EXP 11
6490: IFFALSE 6537
6492: GO 6494
6494: DISABLE
// begin DialogueOn ;
6495: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6499: LD_EXP 11
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: PPUSH
6508: LD_EXP 11
6512: PUSH
6513: LD_INT 2
6515: ARRAY
6516: PPUSH
6517: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6521: LD_EXP 2
6525: PPUSH
6526: LD_STRING DDav-Artifact2-1
6528: PPUSH
6529: CALL_OW 88
// DialogueOff ;
6533: CALL_OW 7
// end ;
6537: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6538: LD_EXP 16
6542: PUSH
6543: LD_INT 6
6545: PPUSH
6546: CALL_OW 469
6550: NOT
6551: PUSH
6552: LD_EXP 18
6556: NOT
6557: AND
6558: OR
6559: IFFALSE 6571
6561: GO 6563
6563: DISABLE
// YouLost ( artifact_destroyed ) ;
6564: LD_STRING artifact_destroyed
6566: PPUSH
6567: CALL_OW 104
6571: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6572: LD_EXP 2
6576: PPUSH
6577: CALL_OW 301
6581: IFFALSE 6593
6583: GO 6585
6585: DISABLE
// YouLost ( dead ) ;
6586: LD_STRING dead
6588: PPUSH
6589: CALL_OW 104
6593: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6594: LD_INT 22
6596: PUSH
6597: LD_INT 7
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6760
6628: GO 6630
6630: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6631: LD_OWVAR 1
6635: PUSH
6636: LD_INT 252000
6638: PUSH
6639: LD_INT 210000
6641: PUSH
6642: LD_INT 189000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_OWVAR 67
6654: ARRAY
6655: LESS
6656: IFFALSE 6670
// AddMedal ( med1 , 1 ) else
6658: LD_STRING med1
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: CALL_OW 101
6668: GO 6681
// AddMedal ( med1 , - 1 ) ;
6670: LD_STRING med1
6672: PPUSH
6673: LD_INT 1
6675: NEG
6676: PPUSH
6677: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: IFFALSE 6710
// AddMedal ( med2 , - 1 ) else
6697: LD_STRING med2
6699: PPUSH
6700: LD_INT 1
6702: NEG
6703: PPUSH
6704: CALL_OW 101
6708: GO 6720
// AddMedal ( med2 , 1 ) ;
6710: LD_STRING med2
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: CALL_OW 101
// if player_used_sib_bomb then
6720: LD_EXP 12
6724: IFFALSE 6739
// AddMedal ( med3 , - 1 ) else
6726: LD_STRING med3
6728: PPUSH
6729: LD_INT 1
6731: NEG
6732: PPUSH
6733: CALL_OW 101
6737: GO 6749
// AddMedal ( med3 , 1 ) ;
6739: LD_STRING med3
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 101
// GiveMedals ( MAIN ) ;
6749: LD_STRING MAIN
6751: PPUSH
6752: CALL_OW 102
// YouWin ;
6756: CALL_OW 103
// end ; end_of_file
6760: END
// every 0 0$22 + 0 0$2 do
6761: GO 6763
6763: DISABLE
// begin enable ;
6764: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6765: LD_INT 4
6767: PPUSH
6768: LD_INT 5
6770: PPUSH
6771: CALL_OW 12
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: LD_INT 1
6781: PPUSH
6782: CALL_OW 55
// if tick >= 4 4$00 then
6786: LD_OWVAR 1
6790: PUSH
6791: LD_INT 8400
6793: GREATEREQUAL
6794: IFFALSE 6801
// begin disable ;
6796: DISABLE
// CratesSpawn ( ) ;
6797: CALL 6802 0 0
// end ; end ;
6801: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6802: LD_INT 0
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 30000
6815: PUSH
6816: LD_INT 20000
6818: PUSH
6819: LD_INT 10000
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_OWVAR 67
6831: ARRAY
6832: ST_TO_ADDR
// while amount > 0 do
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6911
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6843: LD_INT 1050
6845: PPUSH
6846: LD_INT 3150
6848: PPUSH
6849: CALL_OW 12
6853: PPUSH
6854: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6858: LD_ADDR_VAR 0 4
6862: PUSH
6863: LD_INT 1
6865: PPUSH
6866: LD_INT 5
6868: PPUSH
6869: CALL_OW 12
6873: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: LD_VAR 0 3
6883: PUSH
6884: LD_VAR 0 4
6888: PUSH
6889: LD_INT 10
6891: MUL
6892: MINUS
6893: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6894: LD_VAR 0 4
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 55
// end ;
6909: GO 6833
// end ; end_of_file
6911: LD_VAR 0 1
6915: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
// InitHc_All ( ) ;
6920: CALL_OW 584
// for i := 1 to num1 do
6924: LD_ADDR_VAR 0 6
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 1
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6968
// begin PrepareApeman ( 5 ) ;
6942: LD_INT 5
6944: PPUSH
6945: CALL 63155 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6949: CALL_OW 44
6953: PPUSH
6954: LD_VAR 0 4
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6939
6968: POP
6969: POP
// for i := 1 to num2 do
6970: LD_ADDR_VAR 0 6
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_VAR 0 2
6984: PUSH
6985: FOR_TO
6986: IFFALSE 7014
// begin PrepareTiger ( 5 ) ;
6988: LD_INT 5
6990: PPUSH
6991: CALL 63263 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6995: CALL_OW 44
6999: PPUSH
7000: LD_VAR 0 4
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: CALL_OW 49
// end ;
7012: GO 6985
7014: POP
7015: POP
// for i := 1 to num3 do
7016: LD_ADDR_VAR 0 6
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7057
// begin PrepareBird ( ) ;
7034: CALL 63444 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7038: CALL_OW 44
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// end ;
7055: GO 7031
7057: POP
7058: POP
// end ; end_of_file
7059: LD_VAR 0 5
7063: RET
// export function DebugArtifact ; begin
7064: LD_INT 0
7066: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7067: LD_STRING Artifact is loaded: 
7069: PUSH
7070: LD_EXP 18
7074: STR
7075: PPUSH
7076: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7080: LD_STRING Artifact is active: 
7082: PUSH
7083: LD_EXP 29
7087: STR
7088: PPUSH
7089: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7093: LD_STRING Artifact is researched: 
7095: PUSH
7096: LD_EXP 22
7100: STR
7101: PPUSH
7102: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7106: LD_STRING Artifact coords 
7108: PUSH
7109: LD_EXP 19
7113: PPUSH
7114: CALL_OW 469
7118: STR
7119: PPUSH
7120: CALL_OW 561
// end ;
7124: LD_VAR 0 1
7128: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7135: LD_ADDR_VAR 0 4
7139: PUSH
7140: LD_INT 100
7142: PUSH
7143: LD_INT 185
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 99
7152: PUSH
7153: LD_INT 175
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 191
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
// for i = 1 to artifacts_type do
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_EXP 14
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7293
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7193: LD_ADDR_VAR 0 3
7197: PUSH
7198: LD_VAR 0 4
7202: PUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_VAR 0 4
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7217: LD_ADDR_VAR 0 4
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_VAR 0 3
7231: DIFF
7232: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7233: LD_ADDR_EXP 15
7237: PUSH
7238: LD_EXP 15
7242: PPUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7258: LD_EXP 14
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL 5207 0 3
// end ;
7291: GO 7190
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 1
7299: RET
// export function GetUseCost ( dist ) ; begin
7300: LD_INT 0
7302: PPUSH
// if dist < 30 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 30
7310: LESS
7311: IFFALSE 7321
// result := 10 ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 10
7320: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7321: LD_VAR 0 1
7325: PUSH
7326: LD_INT 30
7328: GREATEREQUAL
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: LD_INT 50
7337: LESS
7338: AND
7339: IFFALSE 7349
// result := 35 ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 35
7348: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 50
7356: GREATEREQUAL
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_INT 80
7365: LESS
7366: AND
7367: IFFALSE 7377
// result := 70 ;
7369: LD_ADDR_VAR 0 2
7373: PUSH
7374: LD_INT 70
7376: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 80
7384: GREATEREQUAL
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: LD_INT 120
7393: LESS
7394: AND
7395: IFFALSE 7405
// result := 100 ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 100
7404: ST_TO_ADDR
// if dist >= 120 then
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 120
7412: GREATEREQUAL
7413: IFFALSE 7423
// result := 150 ;
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_INT 150
7422: ST_TO_ADDR
// end ;
7423: LD_VAR 0 2
7427: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 255
7437: PUSH
7438: LD_OWVAR 2
7442: EQUAL
7443: IFFALSE 7453
// player_artifact_researched := true ;
7445: LD_ADDR_EXP 22
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// end ;
7453: PPOPN 1
7455: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7456: LD_INT 22
7458: PUSH
7459: LD_OWVAR 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 30
7473: PUSH
7474: LD_INT 8
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 69
7504: PUSH
7505: LD_EXP 22
7509: AND
7510: PUSH
7511: LD_EXP 18
7515: NOT
7516: AND
7517: IFFALSE 7971
7519: GO 7521
7521: DISABLE
7522: LD_INT 0
7524: PPUSH
7525: PPUSH
// begin enable ;
7526: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_EXP 19
7536: PPUSH
7537: CALL_OW 469
7541: ST_TO_ADDR
// if not coords then
7542: LD_VAR 0 2
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7971
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7551: LD_ADDR_VAR 0 1
7555: PUSH
7556: LD_INT 22
7558: PUSH
7559: LD_OWVAR 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 30
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 2
7621: ARRAY
7622: PPUSH
7623: CALL_OW 73
7627: ST_TO_ADDR
// if not lab then
7628: LD_VAR 0 1
7632: NOT
7633: IFFALSE 7650
// begin if debug then
7635: LD_EXP 6
7639: IFFALSE 7648
// AddToLog ( Cannot find lab for artifact! ) ;
7641: LD_STRING Cannot find lab for artifact!
7643: PPUSH
7644: CALL_OW 561
// exit ;
7648: GO 7971
// end ; if not player_artifact_ready then
7650: LD_EXP 29
7654: NOT
7655: IFFALSE 7779
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 2
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PPUSH
7680: CALL_OW 297
7684: PUSH
7685: LD_EXP 23
7689: LESS
7690: IFFALSE 7755
// begin if BuildingStatus ( lab ) = bs_idle then
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 461
7701: PUSH
7702: LD_INT 2
7704: EQUAL
7705: IFFALSE 7731
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7707: LD_OWVAR 2
7711: PPUSH
7712: LD_EXP 25
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 468
7729: GO 7753
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7731: LD_OWVAR 2
7735: PPUSH
7736: LD_EXP 25
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 468
// end else
7753: GO 7777
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7755: LD_OWVAR 2
7759: PPUSH
7760: LD_EXP 25
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 468
// end else
7777: GO 7971
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_VAR 0 2
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 297
7806: PUSH
7807: LD_EXP 23
7811: LESS
7812: IFFALSE 7927
// begin if BuildingStatus ( lab ) = bs_idle then
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 461
7823: PUSH
7824: LD_INT 2
7826: EQUAL
7827: IFFALSE 7881
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7829: LD_OWVAR 2
7833: PPUSH
7834: LD_EXP 20
7838: PPUSH
7839: LD_INT 4
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 468
// if player_artifact_selected_unit then
7851: LD_EXP 30
7855: IFFALSE 7879
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7857: LD_OWVAR 2
7861: PPUSH
7862: LD_EXP 21
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 468
// end else
7879: GO 7925
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7881: LD_OWVAR 2
7885: PPUSH
7886: LD_EXP 20
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7903: LD_OWVAR 2
7907: PPUSH
7908: LD_EXP 21
7912: PPUSH
7913: LD_INT 1
7915: PPUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 468
// end ; end else
7925: GO 7971
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7927: LD_OWVAR 2
7931: PPUSH
7932: LD_EXP 20
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7949: LD_OWVAR 2
7953: PPUSH
7954: LD_EXP 21
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 468
// end ; end ;
7971: PPOPN 2
7973: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: LD_EXP 19
7991: PPUSH
7992: CALL_OW 469
7996: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_OWVAR 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 30
8019: PUSH
8020: LD_INT 8
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 11
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: PPUSH
8051: LD_VAR 0 5
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PPUSH
8060: LD_VAR 0 5
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PPUSH
8069: CALL_OW 73
8073: ST_TO_ADDR
// if not lab then
8074: LD_VAR 0 7
8078: NOT
8079: IFFALSE 8096
// begin if debug then
8081: LD_EXP 6
8085: IFFALSE 8094
// AddToLog ( Cannot find lab! ) ;
8087: LD_STRING Cannot find lab!
8089: PPUSH
8090: CALL_OW 561
// exit ;
8094: GO 8531
// end ; if icon = player_artifact_icon_res then
8096: LD_VAR 0 2
8100: PUSH
8101: LD_EXP 25
8105: EQUAL
8106: IFFALSE 8147
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8125: LD_OWVAR 2
8129: PPUSH
8130: LD_EXP 25
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: CALL_OW 468
// end ; if icon = player_artifact_icon then
8147: LD_VAR 0 2
8151: PUSH
8152: LD_EXP 20
8156: EQUAL
8157: IFFALSE 8196
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8159: LD_VAR 0 3
8163: PPUSH
8164: CALL_OW 247
8168: PUSH
8169: LD_INT 1
8171: EQUAL
8172: PUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 310
8182: NOT
8183: AND
8184: IFFALSE 8196
// player_artifact_selected_unit := cr1 ;
8186: LD_ADDR_EXP 30
8190: PUSH
8191: LD_VAR 0 3
8195: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8196: LD_VAR 0 2
8200: PUSH
8201: LD_EXP 21
8205: EQUAL
8206: IFFALSE 8521
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 428
8222: PUSH
8223: LD_INT 0
8225: NONEQUAL
8226: PUSH
8227: LD_VAR 0 3
8231: PPUSH
8232: LD_VAR 0 4
8236: PPUSH
8237: CALL_OW 546
8241: PUSH
8242: LD_INT 6
8244: ARRAY
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: LD_INT 4
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 6
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: OR
8265: IFFALSE 8269
// exit ;
8267: GO 8531
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_EXP 30
8278: PPUSH
8279: CALL_OW 250
8283: PPUSH
8284: LD_EXP 30
8288: PPUSH
8289: CALL_OW 251
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: LD_VAR 0 4
8303: PPUSH
8304: CALL_OW 298
8308: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8309: LD_ADDR_VAR 0 10
8313: PUSH
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL 7300 0 1
8323: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8324: LD_VAR 0 10
8328: PUSH
8329: LD_OWVAR 2
8333: PPUSH
8334: CALL 5240 0 1
8338: GREATER
8339: IFFALSE 8353
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8341: LD_STRING ArtFrogJumpCost
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: CALL_OW 338
// exit ;
8351: GO 8531
// end ; SetSibResources ( your_side , cost ) ;
8353: LD_OWVAR 2
8357: PPUSH
8358: LD_VAR 0 10
8362: PPUSH
8363: CALL 5364 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 6
8379: PPUSH
8380: LD_INT 5
8382: NEG
8383: PPUSH
8384: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 6
8400: PPUSH
8401: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8405: LD_EXP 30
8409: PPUSH
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: LD_INT 1
8425: PPUSH
8426: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8430: LD_VAR 0 3
8434: PPUSH
8435: LD_VAR 0 4
8439: PPUSH
8440: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8444: LD_ADDR_EXP 30
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// player_artifact_researched := false ;
8452: LD_ADDR_EXP 22
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8460: LD_OWVAR 2
8464: PPUSH
8465: LD_EXP 20
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_EXP 21
8491: PPUSH
8492: LD_INT 0
8494: PPUSH
8495: LD_VAR 0 7
8499: PPUSH
8500: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8504: LD_EXP 26
8508: PPUSH
8509: CALL_OW 67
// player_artifact_researched := true ;
8513: LD_ADDR_EXP 22
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// end ; if debug then
8521: LD_EXP 6
8525: IFFALSE 8531
// DebugArtifact ;
8527: CALL 7064 0 0
// end ;
8531: PPOPN 10
8533: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 255
8543: PUSH
8544: LD_OWVAR 2
8548: EQUAL
8549: IFFALSE 8588
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8551: LD_OWVAR 2
8555: PPUSH
8556: LD_EXP 25
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 468
// player_artifact_ready := true ;
8573: LD_ADDR_EXP 29
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8581: LD_STRING ArtFrogJump
8583: PPUSH
8584: CALL_OW 339
// end ; end ;
8588: PPOPN 1
8590: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8591: LD_OWVAR 2
8595: PPUSH
8596: LD_EXP 25
8600: PPUSH
8601: LD_INT 2
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 468
// end ;
8613: PPOPN 2
8615: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: LD_INT 81
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 34
8639: PUSH
8640: LD_INT 48
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 81
8658: PUSH
8659: LD_INT 7
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: ADD
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 34
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: LD_INT 49
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 47
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 34
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 31
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: ST_TO_ADDR
// if not tmp then
8926: LD_VAR 0 3
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9056
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 34
8942: PUSH
8943: LD_INT 48
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 72
8954: IFFALSE 8987
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8956: LD_ADDR_VAR 0 4
8960: PUSH
8961: LD_VAR 0 3
8965: PPUSH
8966: LD_INT 34
8968: PUSH
8969: LD_INT 48
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: ST_TO_ADDR
8985: GO 9011
// un := tmp [ rand ( 1 , tmp ) ] ;
8987: LD_ADDR_VAR 0 4
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: CALL_OW 12
9009: ARRAY
9010: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9011: LD_EXP 10
9015: NOT
9016: IFFALSE 9047
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9018: LD_ADDR_EXP 10
9022: PUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 250
9032: PUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: CALL_OW 251
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// KillUnit ( un ) ;
9047: LD_VAR 0 4
9051: PPUSH
9052: CALL_OW 66
// end ;
9056: LD_VAR 0 1
9060: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 6
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 33
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: ST_TO_ADDR
// if not tmp then
9101: LD_VAR 0 4
9105: NOT
9106: IFFALSE 9110
// exit ;
9108: GO 9248
// un := tmp [ rand ( 1 , tmp ) ] ;
9110: LD_ADDR_VAR 0 3
9114: PUSH
9115: LD_VAR 0 4
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 12
9132: ARRAY
9133: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 7
9141: PPUSH
9142: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 264
9155: PUSH
9156: LD_INT 48
9158: EQUAL
9159: IFFALSE 9178
// ComAttackPlace ( un , 194 , 19 ) else
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 194
9168: PPUSH
9169: LD_INT 19
9171: PPUSH
9172: CALL_OW 116
9176: GO 9212
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_INT 81
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: CALL_OW 74
9207: PPUSH
9208: CALL_OW 115
// if not alliance_used_artifact_2 then
9212: LD_EXP 11
9216: NOT
9217: IFFALSE 9248
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9219: LD_ADDR_EXP 11
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 250
9233: PUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 251
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: ST_TO_ADDR
// end ; end_of_file
9248: LD_VAR 0 1
9252: RET
// export function DebugMode ; var i , j , b ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
// enable_addtolog = true ;
9259: LD_ADDR_OWVAR 81
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// FogOff ( 6 ) ;
9267: LD_INT 6
9269: PPUSH
9270: CALL_OW 344
// uc_side = 6 ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_INT 6
9281: ST_TO_ADDR
// uc_nation = 3 ;
9282: LD_ADDR_OWVAR 21
9286: PUSH
9287: LD_INT 3
9289: ST_TO_ADDR
// bc_level = 10 ;
9290: LD_ADDR_OWVAR 43
9294: PUSH
9295: LD_INT 10
9297: ST_TO_ADDR
// bc_type := b_lab_full ;
9298: LD_ADDR_OWVAR 42
9302: PUSH
9303: LD_INT 8
9305: ST_TO_ADDR
// bc_kind1 := 11 ;
9306: LD_ADDR_OWVAR 44
9310: PUSH
9311: LD_INT 11
9313: ST_TO_ADDR
// bc_kind2 := 12 ;
9314: LD_ADDR_OWVAR 45
9318: PUSH
9319: LD_INT 12
9321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9322: LD_INT 189
9324: PPUSH
9325: LD_INT 20
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 47
// bc_type := b_warehouse ;
9335: LD_ADDR_OWVAR 42
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: LD_INT 201
9350: PPUSH
9351: LD_INT 22
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 47
9361: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 274
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 10000
9377: PPUSH
9378: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: LD_INT 10000
9397: PPUSH
9398: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9402: LD_VAR 0 4
9406: PPUSH
9407: CALL_OW 274
9411: PPUSH
9412: LD_INT 3
9414: PPUSH
9415: LD_INT 10000
9417: PPUSH
9418: CALL_OW 277
// bc_type := b_siberite_power ;
9422: LD_ADDR_OWVAR 42
9426: PUSH
9427: LD_INT 28
9429: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9430: LD_ADDR_VAR 0 4
9434: PUSH
9435: LD_INT 216
9437: PPUSH
9438: LD_INT 16
9440: PPUSH
9441: LD_INT 4
9443: PPUSH
9444: CALL_OW 47
9448: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: LD_INT 219
9456: PPUSH
9457: LD_INT 16
9459: PPUSH
9460: LD_INT 4
9462: PPUSH
9463: CALL_OW 47
9467: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9468: LD_INT 55
9470: PPUSH
9471: LD_INT 6
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9481: LD_INT 56
9483: PPUSH
9484: LD_INT 6
9486: PPUSH
9487: LD_INT 2
9489: PPUSH
9490: CALL_OW 322
// end ; end_of_file
9494: LD_VAR 0 1
9498: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 264
9514: PUSH
9515: LD_INT 91
9517: EQUAL
9518: IFFALSE 9590
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
9520: LD_INT 68
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 255
9532: PPUSH
9533: CALL_OW 321
9537: PUSH
9538: LD_INT 2
9540: EQUAL
9541: IFFALSE 9553
// eff := 70 else
9543: LD_ADDR_VAR 0 4
9547: PUSH
9548: LD_INT 70
9550: ST_TO_ADDR
9551: GO 9561
// eff := 30 ;
9553: LD_ADDR_VAR 0 4
9557: PUSH
9558: LD_INT 30
9560: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: CALL_OW 250
9570: PPUSH
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 251
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: CALL_OW 495
// end ; end ;
9590: LD_VAR 0 2
9594: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9595: LD_INT 0
9597: PPUSH
// end ;
9598: LD_VAR 0 4
9602: RET
// export function SOS_Command ( cmd ) ; begin
9603: LD_INT 0
9605: PPUSH
// end ;
9606: LD_VAR 0 2
9610: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9611: LD_INT 0
9613: PPUSH
// end ;
9614: LD_VAR 0 6
9618: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
// if not vehicle or not factory then
9623: LD_VAR 0 1
9627: NOT
9628: PUSH
9629: LD_VAR 0 2
9633: NOT
9634: OR
9635: IFFALSE 9639
// exit ;
9637: GO 9870
// if factoryWaypoints >= factory then
9639: LD_EXP 105
9643: PUSH
9644: LD_VAR 0 2
9648: GREATEREQUAL
9649: IFFALSE 9870
// if factoryWaypoints [ factory ] then
9651: LD_EXP 105
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: IFFALSE 9870
// begin if GetControl ( vehicle ) = control_manual then
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9757
// begin driver := IsDrivenBy ( vehicle ) ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 311
9692: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9693: LD_VAR 0 4
9697: PPUSH
9698: LD_EXP 105
9702: PUSH
9703: LD_VAR 0 2
9707: ARRAY
9708: PUSH
9709: LD_INT 3
9711: ARRAY
9712: PPUSH
9713: LD_EXP 105
9717: PUSH
9718: LD_VAR 0 2
9722: ARRAY
9723: PUSH
9724: LD_INT 4
9726: ARRAY
9727: PPUSH
9728: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9732: LD_VAR 0 4
9736: PPUSH
9737: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
9741: LD_VAR 0 4
9745: PPUSH
9746: LD_VAR 0 2
9750: PPUSH
9751: CALL_OW 180
// end else
9755: GO 9870
// if GetControl ( vehicle ) = control_remote then
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 263
9766: PUSH
9767: LD_INT 2
9769: EQUAL
9770: IFFALSE 9831
// begin wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// if Connect ( vehicle ) then
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL 37513 0 1
9788: IFFALSE 9829
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_EXP 105
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: PUSH
9806: LD_INT 3
9808: ARRAY
9809: PPUSH
9810: LD_EXP 105
9814: PUSH
9815: LD_VAR 0 2
9819: ARRAY
9820: PUSH
9821: LD_INT 4
9823: ARRAY
9824: PPUSH
9825: CALL_OW 171
// end else
9829: GO 9870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_EXP 105
9840: PUSH
9841: LD_VAR 0 2
9845: ARRAY
9846: PUSH
9847: LD_INT 3
9849: ARRAY
9850: PPUSH
9851: LD_EXP 105
9855: PUSH
9856: LD_VAR 0 2
9860: ARRAY
9861: PUSH
9862: LD_INT 4
9864: ARRAY
9865: PPUSH
9866: CALL_OW 171
// end ; end ;
9870: LD_VAR 0 3
9874: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
9875: LD_INT 0
9877: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
9878: LD_VAR 0 1
9882: PUSH
9883: LD_INT 250
9885: EQUAL
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 81
9899: EQUAL
9900: AND
9901: IFFALSE 9922
// MinerPlaceMine ( unit , x , y ) ;
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: LD_VAR 0 5
9917: PPUSH
9918: CALL 12307 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
9922: LD_VAR 0 1
9926: PUSH
9927: LD_INT 251
9929: EQUAL
9930: PUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: CALL_OW 264
9940: PUSH
9941: LD_INT 81
9943: EQUAL
9944: AND
9945: IFFALSE 9966
// MinerDetonateMine ( unit , x , y ) ;
9947: LD_VAR 0 2
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 12582 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
9966: LD_VAR 0 1
9970: PUSH
9971: LD_INT 252
9973: EQUAL
9974: PUSH
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 264
9984: PUSH
9985: LD_INT 81
9987: EQUAL
9988: AND
9989: IFFALSE 10010
// MinerCreateMinefield ( unit , x , y ) ;
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 4
10000: PPUSH
10001: LD_VAR 0 5
10005: PPUSH
10006: CALL 12999 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 253
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 257
10028: PUSH
10029: LD_INT 5
10031: EQUAL
10032: AND
10033: IFFALSE 10054
// ComBinocular ( unit , x , y ) ;
10035: LD_VAR 0 2
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_VAR 0 5
10049: PPUSH
10050: CALL 13368 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10054: LD_VAR 0 1
10058: PUSH
10059: LD_INT 254
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 264
10072: PUSH
10073: LD_INT 99
10075: EQUAL
10076: AND
10077: PUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: CALL_OW 263
10087: PUSH
10088: LD_INT 3
10090: EQUAL
10091: AND
10092: IFFALSE 10108
// HackDestroyVehicle ( unit , selectedUnit ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: CALL 11671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10108: LD_VAR 0 1
10112: PUSH
10113: LD_INT 255
10115: EQUAL
10116: PUSH
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL_OW 264
10126: PUSH
10127: LD_INT 14
10129: PUSH
10130: LD_INT 53
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: IN
10137: AND
10138: PUSH
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 5
10148: PPUSH
10149: CALL_OW 488
10153: AND
10154: IFFALSE 10178
// CutTreeXYR ( unit , x , y , 12 ) ;
10156: LD_VAR 0 2
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: LD_VAR 0 5
10170: PPUSH
10171: LD_INT 12
10173: PPUSH
10174: CALL 10241 0 4
// if cmd = 256 then
10178: LD_VAR 0 1
10182: PUSH
10183: LD_INT 256
10185: EQUAL
10186: IFFALSE 10207
// SetFactoryWaypoint ( unit , x , y ) ;
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: LD_VAR 0 5
10202: PPUSH
10203: CALL 28271 0 3
// if cmd = 257 then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_INT 257
10214: EQUAL
10215: IFFALSE 10236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: LD_VAR 0 5
10231: PPUSH
10232: CALL 28633 0 3
// end ;
10236: LD_VAR 0 6
10240: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10252: LD_VAR 0 1
10256: NOT
10257: PUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 488
10272: NOT
10273: OR
10274: PUSH
10275: LD_VAR 0 4
10279: NOT
10280: OR
10281: IFFALSE 10285
// exit ;
10283: GO 10625
// list := [ ] ;
10285: LD_ADDR_VAR 0 13
10289: PUSH
10290: EMPTY
10291: ST_TO_ADDR
// if x - r < 0 then
10292: LD_VAR 0 2
10296: PUSH
10297: LD_VAR 0 4
10301: MINUS
10302: PUSH
10303: LD_INT 0
10305: LESS
10306: IFFALSE 10318
// min_x := 0 else
10308: LD_ADDR_VAR 0 7
10312: PUSH
10313: LD_INT 0
10315: ST_TO_ADDR
10316: GO 10334
// min_x := x - r ;
10318: LD_ADDR_VAR 0 7
10322: PUSH
10323: LD_VAR 0 2
10327: PUSH
10328: LD_VAR 0 4
10332: MINUS
10333: ST_TO_ADDR
// if y - r < 0 then
10334: LD_VAR 0 3
10338: PUSH
10339: LD_VAR 0 4
10343: MINUS
10344: PUSH
10345: LD_INT 0
10347: LESS
10348: IFFALSE 10360
// min_y := 0 else
10350: LD_ADDR_VAR 0 8
10354: PUSH
10355: LD_INT 0
10357: ST_TO_ADDR
10358: GO 10376
// min_y := y - r ;
10360: LD_ADDR_VAR 0 8
10364: PUSH
10365: LD_VAR 0 3
10369: PUSH
10370: LD_VAR 0 4
10374: MINUS
10375: ST_TO_ADDR
// max_x := x + r ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: LD_VAR 0 4
10390: PLUS
10391: ST_TO_ADDR
// max_y := y + r ;
10392: LD_ADDR_VAR 0 10
10396: PUSH
10397: LD_VAR 0 3
10401: PUSH
10402: LD_VAR 0 4
10406: PLUS
10407: ST_TO_ADDR
// for _x = min_x to max_x do
10408: LD_ADDR_VAR 0 11
10412: PUSH
10413: DOUBLE
10414: LD_VAR 0 7
10418: DEC
10419: ST_TO_ADDR
10420: LD_VAR 0 9
10424: PUSH
10425: FOR_TO
10426: IFFALSE 10543
// for _y = min_y to max_y do
10428: LD_ADDR_VAR 0 12
10432: PUSH
10433: DOUBLE
10434: LD_VAR 0 8
10438: DEC
10439: ST_TO_ADDR
10440: LD_VAR 0 10
10444: PUSH
10445: FOR_TO
10446: IFFALSE 10539
// begin if not ValidHex ( _x , _y ) then
10448: LD_VAR 0 11
10452: PPUSH
10453: LD_VAR 0 12
10457: PPUSH
10458: CALL_OW 488
10462: NOT
10463: IFFALSE 10467
// continue ;
10465: GO 10445
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10467: LD_VAR 0 11
10471: PPUSH
10472: LD_VAR 0 12
10476: PPUSH
10477: CALL_OW 351
10481: PUSH
10482: LD_VAR 0 11
10486: PPUSH
10487: LD_VAR 0 12
10491: PPUSH
10492: CALL_OW 554
10496: AND
10497: IFFALSE 10537
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10499: LD_ADDR_VAR 0 13
10503: PUSH
10504: LD_VAR 0 13
10508: PPUSH
10509: LD_VAR 0 13
10513: PUSH
10514: LD_INT 1
10516: PLUS
10517: PPUSH
10518: LD_VAR 0 11
10522: PUSH
10523: LD_VAR 0 12
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 2
10536: ST_TO_ADDR
// end ;
10537: GO 10445
10539: POP
10540: POP
10541: GO 10425
10543: POP
10544: POP
// if not list then
10545: LD_VAR 0 13
10549: NOT
10550: IFFALSE 10554
// exit ;
10552: GO 10625
// for i in list do
10554: LD_ADDR_VAR 0 6
10558: PUSH
10559: LD_VAR 0 13
10563: PUSH
10564: FOR_IN
10565: IFFALSE 10623
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_STRING M
10574: PUSH
10575: LD_VAR 0 6
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PUSH
10584: LD_VAR 0 6
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PUSH
10593: LD_INT 0
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 0
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: PPUSH
10617: CALL_OW 447
10621: GO 10564
10623: POP
10624: POP
// end ;
10625: LD_VAR 0 5
10629: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
10630: LD_EXP 36
10634: NOT
10635: IFFALSE 10685
10637: GO 10639
10639: DISABLE
// begin initHack := true ;
10640: LD_ADDR_EXP 36
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// hackTanks := [ ] ;
10648: LD_ADDR_EXP 37
10652: PUSH
10653: EMPTY
10654: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
10655: LD_ADDR_EXP 38
10659: PUSH
10660: EMPTY
10661: ST_TO_ADDR
// hackLimit := 3 ;
10662: LD_ADDR_EXP 39
10666: PUSH
10667: LD_INT 3
10669: ST_TO_ADDR
// hackDist := 12 ;
10670: LD_ADDR_EXP 40
10674: PUSH
10675: LD_INT 12
10677: ST_TO_ADDR
// hackCounter := [ ] ;
10678: LD_ADDR_EXP 41
10682: PUSH
10683: EMPTY
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
10686: LD_EXP 36
10690: PUSH
10691: LD_INT 34
10693: PUSH
10694: LD_INT 99
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 69
10705: AND
10706: IFFALSE 10959
10708: GO 10710
10710: DISABLE
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
// begin enable ;
10715: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 34
10723: PUSH
10724: LD_INT 99
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10957
// begin if not i in hackTanks then
10739: LD_VAR 0 1
10743: PUSH
10744: LD_EXP 37
10748: IN
10749: NOT
10750: IFFALSE 10833
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
10752: LD_ADDR_EXP 37
10756: PUSH
10757: LD_EXP 37
10761: PPUSH
10762: LD_EXP 37
10766: PUSH
10767: LD_INT 1
10769: PLUS
10770: PPUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 1
10780: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
10781: LD_ADDR_EXP 38
10785: PUSH
10786: LD_EXP 38
10790: PPUSH
10791: LD_EXP 38
10795: PUSH
10796: LD_INT 1
10798: PLUS
10799: PPUSH
10800: EMPTY
10801: PPUSH
10802: CALL_OW 1
10806: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
10807: LD_ADDR_EXP 41
10811: PUSH
10812: LD_EXP 41
10816: PPUSH
10817: LD_EXP 41
10821: PUSH
10822: LD_INT 1
10824: PLUS
10825: PPUSH
10826: EMPTY
10827: PPUSH
10828: CALL_OW 1
10832: ST_TO_ADDR
// end ; if not IsOk ( i ) then
10833: LD_VAR 0 1
10837: PPUSH
10838: CALL_OW 302
10842: NOT
10843: IFFALSE 10856
// begin HackUnlinkAll ( i ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL 10962 0 1
// continue ;
10854: GO 10736
// end ; HackCheckCapturedStatus ( i ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: CALL 11405 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_INT 81
10872: PUSH
10873: LD_VAR 0 1
10877: PPUSH
10878: CALL_OW 255
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 33
10889: PUSH
10890: LD_INT 3
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 91
10899: PUSH
10900: LD_VAR 0 1
10904: PUSH
10905: LD_EXP 40
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 50
10917: PUSH
10918: EMPTY
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 69
10931: ST_TO_ADDR
// if not tmp then
10932: LD_VAR 0 2
10936: NOT
10937: IFFALSE 10941
// continue ;
10939: GO 10736
// HackLink ( i , tmp ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: CALL 11098 0 2
// end ;
10955: GO 10736
10957: POP
10958: POP
// end ;
10959: PPOPN 2
10961: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
10962: LD_INT 0
10964: PPUSH
10965: PPUSH
10966: PPUSH
// if not hack in hackTanks then
10967: LD_VAR 0 1
10971: PUSH
10972: LD_EXP 37
10976: IN
10977: NOT
10978: IFFALSE 10982
// exit ;
10980: GO 11093
// index := GetElementIndex ( hackTanks , hack ) ;
10982: LD_ADDR_VAR 0 4
10986: PUSH
10987: LD_EXP 37
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL 34329 0 2
11001: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11002: LD_EXP 38
11006: PUSH
11007: LD_VAR 0 4
11011: ARRAY
11012: IFFALSE 11093
// begin for i in hackTanksCaptured [ index ] do
11014: LD_ADDR_VAR 0 3
11018: PUSH
11019: LD_EXP 38
11023: PUSH
11024: LD_VAR 0 4
11028: ARRAY
11029: PUSH
11030: FOR_IN
11031: IFFALSE 11057
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11033: LD_VAR 0 3
11037: PUSH
11038: LD_INT 1
11040: ARRAY
11041: PPUSH
11042: LD_VAR 0 3
11046: PUSH
11047: LD_INT 2
11049: ARRAY
11050: PPUSH
11051: CALL_OW 235
11055: GO 11030
11057: POP
11058: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11059: LD_ADDR_EXP 38
11063: PUSH
11064: LD_EXP 38
11068: PPUSH
11069: LD_VAR 0 4
11073: PPUSH
11074: EMPTY
11075: PPUSH
11076: CALL_OW 1
11080: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11081: LD_VAR 0 1
11085: PPUSH
11086: LD_INT 0
11088: PPUSH
11089: CALL_OW 505
// end ; end ;
11093: LD_VAR 0 2
11097: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11098: LD_INT 0
11100: PPUSH
11101: PPUSH
11102: PPUSH
// if not hack in hackTanks or not vehicles then
11103: LD_VAR 0 1
11107: PUSH
11108: LD_EXP 37
11112: IN
11113: NOT
11114: PUSH
11115: LD_VAR 0 2
11119: NOT
11120: OR
11121: IFFALSE 11125
// exit ;
11123: GO 11400
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11125: LD_ADDR_VAR 0 2
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_VAR 0 2
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL 34979 0 4
11150: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11151: LD_ADDR_VAR 0 5
11155: PUSH
11156: LD_EXP 37
11160: PPUSH
11161: LD_VAR 0 1
11165: PPUSH
11166: CALL 34329 0 2
11170: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11171: LD_EXP 38
11175: PUSH
11176: LD_VAR 0 5
11180: ARRAY
11181: PUSH
11182: LD_EXP 39
11186: LESS
11187: IFFALSE 11376
// begin for i := 1 to vehicles do
11189: LD_ADDR_VAR 0 4
11193: PUSH
11194: DOUBLE
11195: LD_INT 1
11197: DEC
11198: ST_TO_ADDR
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_TO
11205: IFFALSE 11374
// begin if hackTanksCaptured [ index ] = hackLimit then
11207: LD_EXP 38
11211: PUSH
11212: LD_VAR 0 5
11216: ARRAY
11217: PUSH
11218: LD_EXP 39
11222: EQUAL
11223: IFFALSE 11227
// break ;
11225: GO 11374
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11227: LD_ADDR_EXP 41
11231: PUSH
11232: LD_EXP 41
11236: PPUSH
11237: LD_VAR 0 5
11241: PPUSH
11242: LD_EXP 41
11246: PUSH
11247: LD_VAR 0 5
11251: ARRAY
11252: PUSH
11253: LD_INT 1
11255: PLUS
11256: PPUSH
11257: CALL_OW 1
11261: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11262: LD_ADDR_EXP 38
11266: PUSH
11267: LD_EXP 38
11271: PPUSH
11272: LD_VAR 0 5
11276: PUSH
11277: LD_EXP 38
11281: PUSH
11282: LD_VAR 0 5
11286: ARRAY
11287: PUSH
11288: LD_INT 1
11290: PLUS
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: LD_VAR 0 2
11300: PUSH
11301: LD_VAR 0 4
11305: ARRAY
11306: PUSH
11307: LD_VAR 0 2
11311: PUSH
11312: LD_VAR 0 4
11316: ARRAY
11317: PPUSH
11318: CALL_OW 255
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL 34544 0 3
11331: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11332: LD_VAR 0 2
11336: PUSH
11337: LD_VAR 0 4
11341: ARRAY
11342: PPUSH
11343: LD_VAR 0 1
11347: PPUSH
11348: CALL_OW 255
11352: PPUSH
11353: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
11357: LD_VAR 0 2
11361: PUSH
11362: LD_VAR 0 4
11366: ARRAY
11367: PPUSH
11368: CALL_OW 141
// end ;
11372: GO 11204
11374: POP
11375: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11376: LD_VAR 0 1
11380: PPUSH
11381: LD_EXP 38
11385: PUSH
11386: LD_VAR 0 5
11390: ARRAY
11391: PUSH
11392: LD_INT 0
11394: PLUS
11395: PPUSH
11396: CALL_OW 505
// end ;
11400: LD_VAR 0 3
11404: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
11405: LD_INT 0
11407: PPUSH
11408: PPUSH
11409: PPUSH
11410: PPUSH
// if not hack in hackTanks then
11411: LD_VAR 0 1
11415: PUSH
11416: LD_EXP 37
11420: IN
11421: NOT
11422: IFFALSE 11426
// exit ;
11424: GO 11666
// index := GetElementIndex ( hackTanks , hack ) ;
11426: LD_ADDR_VAR 0 4
11430: PUSH
11431: LD_EXP 37
11435: PPUSH
11436: LD_VAR 0 1
11440: PPUSH
11441: CALL 34329 0 2
11445: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
11446: LD_ADDR_VAR 0 3
11450: PUSH
11451: DOUBLE
11452: LD_EXP 38
11456: PUSH
11457: LD_VAR 0 4
11461: ARRAY
11462: INC
11463: ST_TO_ADDR
11464: LD_INT 1
11466: PUSH
11467: FOR_DOWNTO
11468: IFFALSE 11640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
11470: LD_ADDR_VAR 0 5
11474: PUSH
11475: LD_EXP 38
11479: PUSH
11480: LD_VAR 0 4
11484: ARRAY
11485: PUSH
11486: LD_VAR 0 3
11490: ARRAY
11491: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
11492: LD_VAR 0 5
11496: PUSH
11497: LD_INT 1
11499: ARRAY
11500: PPUSH
11501: CALL_OW 302
11505: NOT
11506: PUSH
11507: LD_VAR 0 5
11511: PUSH
11512: LD_INT 1
11514: ARRAY
11515: PPUSH
11516: CALL_OW 255
11520: PUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 255
11530: NONEQUAL
11531: OR
11532: IFFALSE 11638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
11534: LD_VAR 0 5
11538: PUSH
11539: LD_INT 1
11541: ARRAY
11542: PPUSH
11543: CALL_OW 305
11547: PUSH
11548: LD_VAR 0 5
11552: PUSH
11553: LD_INT 1
11555: ARRAY
11556: PPUSH
11557: CALL_OW 255
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 255
11571: EQUAL
11572: AND
11573: IFFALSE 11597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
11575: LD_VAR 0 5
11579: PUSH
11580: LD_INT 1
11582: ARRAY
11583: PPUSH
11584: LD_VAR 0 5
11588: PUSH
11589: LD_INT 2
11591: ARRAY
11592: PPUSH
11593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
11597: LD_ADDR_EXP 38
11601: PUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_VAR 0 4
11611: PPUSH
11612: LD_EXP 38
11616: PUSH
11617: LD_VAR 0 4
11621: ARRAY
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: CALL_OW 3
11632: PPUSH
11633: CALL_OW 1
11637: ST_TO_ADDR
// end ; end ;
11638: GO 11467
11640: POP
11641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11642: LD_VAR 0 1
11646: PPUSH
11647: LD_EXP 38
11651: PUSH
11652: LD_VAR 0 4
11656: ARRAY
11657: PUSH
11658: LD_INT 0
11660: PLUS
11661: PPUSH
11662: CALL_OW 505
// end ;
11666: LD_VAR 0 2
11670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
11675: PPUSH
11676: PPUSH
// if not hack in hackTanks then
11677: LD_VAR 0 1
11681: PUSH
11682: LD_EXP 37
11686: IN
11687: NOT
11688: IFFALSE 11692
// exit ;
11690: GO 11777
// index := GetElementIndex ( hackTanks , hack ) ;
11692: LD_ADDR_VAR 0 5
11696: PUSH
11697: LD_EXP 37
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL 34329 0 2
11711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
11712: LD_ADDR_VAR 0 4
11716: PUSH
11717: DOUBLE
11718: LD_INT 1
11720: DEC
11721: ST_TO_ADDR
11722: LD_EXP 38
11726: PUSH
11727: LD_VAR 0 5
11731: ARRAY
11732: PUSH
11733: FOR_TO
11734: IFFALSE 11775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
11736: LD_EXP 38
11740: PUSH
11741: LD_VAR 0 5
11745: ARRAY
11746: PUSH
11747: LD_VAR 0 4
11751: ARRAY
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: PUSH
11757: LD_VAR 0 2
11761: EQUAL
11762: IFFALSE 11773
// KillUnit ( vehicle ) ;
11764: LD_VAR 0 2
11768: PPUSH
11769: CALL_OW 66
11773: GO 11733
11775: POP
11776: POP
// end ;
11777: LD_VAR 0 3
11781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
11782: LD_EXP 42
11786: NOT
11787: IFFALSE 11822
11789: GO 11791
11791: DISABLE
// begin initMiner := true ;
11792: LD_ADDR_EXP 42
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// minersList := [ ] ;
11800: LD_ADDR_EXP 43
11804: PUSH
11805: EMPTY
11806: ST_TO_ADDR
// minerMinesList := [ ] ;
11807: LD_ADDR_EXP 44
11811: PUSH
11812: EMPTY
11813: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
11814: LD_ADDR_EXP 45
11818: PUSH
11819: LD_INT 5
11821: ST_TO_ADDR
// end ;
11822: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
11823: LD_EXP 42
11827: PUSH
11828: LD_INT 34
11830: PUSH
11831: LD_INT 81
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: AND
11843: IFFALSE 12304
11845: GO 11847
11847: DISABLE
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
11852: PPUSH
11853: PPUSH
// begin enable ;
11854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
11855: LD_ADDR_VAR 0 1
11859: PUSH
11860: LD_INT 34
11862: PUSH
11863: LD_INT 81
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11948
// begin if not i in minersList then
11878: LD_VAR 0 1
11882: PUSH
11883: LD_EXP 43
11887: IN
11888: NOT
11889: IFFALSE 11946
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
11891: LD_ADDR_EXP 43
11895: PUSH
11896: LD_EXP 43
11900: PPUSH
11901: LD_EXP 43
11905: PUSH
11906: LD_INT 1
11908: PLUS
11909: PPUSH
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 1
11919: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11920: LD_ADDR_EXP 44
11924: PUSH
11925: LD_EXP 44
11929: PPUSH
11930: LD_EXP 44
11934: PUSH
11935: LD_INT 1
11937: PLUS
11938: PPUSH
11939: EMPTY
11940: PPUSH
11941: CALL_OW 1
11945: ST_TO_ADDR
// end end ;
11946: GO 11875
11948: POP
11949: POP
// for i := minerMinesList downto 1 do
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: DOUBLE
11956: LD_EXP 44
11960: INC
11961: ST_TO_ADDR
11962: LD_INT 1
11964: PUSH
11965: FOR_DOWNTO
11966: IFFALSE 12302
// begin if IsLive ( minersList [ i ] ) then
11968: LD_EXP 43
11972: PUSH
11973: LD_VAR 0 1
11977: ARRAY
11978: PPUSH
11979: CALL_OW 300
11983: IFFALSE 12011
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
11985: LD_EXP 43
11989: PUSH
11990: LD_VAR 0 1
11994: ARRAY
11995: PPUSH
11996: LD_EXP 44
12000: PUSH
12001: LD_VAR 0 1
12005: ARRAY
12006: PPUSH
12007: CALL_OW 505
// if not minerMinesList [ i ] then
12011: LD_EXP 44
12015: PUSH
12016: LD_VAR 0 1
12020: ARRAY
12021: NOT
12022: IFFALSE 12026
// continue ;
12024: GO 11965
// for j := minerMinesList [ i ] downto 1 do
12026: LD_ADDR_VAR 0 2
12030: PUSH
12031: DOUBLE
12032: LD_EXP 44
12036: PUSH
12037: LD_VAR 0 1
12041: ARRAY
12042: INC
12043: ST_TO_ADDR
12044: LD_INT 1
12046: PUSH
12047: FOR_DOWNTO
12048: IFFALSE 12298
// begin side := GetSide ( minersList [ i ] ) ;
12050: LD_ADDR_VAR 0 3
12054: PUSH
12055: LD_EXP 43
12059: PUSH
12060: LD_VAR 0 1
12064: ARRAY
12065: PPUSH
12066: CALL_OW 255
12070: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_EXP 44
12080: PUSH
12081: LD_VAR 0 1
12085: ARRAY
12086: PUSH
12087: LD_VAR 0 2
12091: ARRAY
12092: PUSH
12093: LD_INT 1
12095: ARRAY
12096: PPUSH
12097: LD_EXP 44
12101: PUSH
12102: LD_VAR 0 1
12106: ARRAY
12107: PUSH
12108: LD_VAR 0 2
12112: ARRAY
12113: PUSH
12114: LD_INT 2
12116: ARRAY
12117: PPUSH
12118: CALL_OW 428
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 4
12127: NOT
12128: IFFALSE 12132
// continue ;
12130: GO 12047
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12132: LD_VAR 0 4
12136: PUSH
12137: LD_INT 81
12139: PUSH
12140: LD_VAR 0 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: IN
12154: PUSH
12155: LD_EXP 44
12159: PUSH
12160: LD_VAR 0 1
12164: ARRAY
12165: PUSH
12166: LD_VAR 0 2
12170: ARRAY
12171: PUSH
12172: LD_INT 1
12174: ARRAY
12175: PPUSH
12176: LD_EXP 44
12180: PUSH
12181: LD_VAR 0 1
12185: ARRAY
12186: PUSH
12187: LD_VAR 0 2
12191: ARRAY
12192: PUSH
12193: LD_INT 2
12195: ARRAY
12196: PPUSH
12197: CALL_OW 458
12201: AND
12202: IFFALSE 12296
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12204: LD_EXP 44
12208: PUSH
12209: LD_VAR 0 1
12213: ARRAY
12214: PUSH
12215: LD_VAR 0 2
12219: ARRAY
12220: PUSH
12221: LD_INT 1
12223: ARRAY
12224: PPUSH
12225: LD_EXP 44
12229: PUSH
12230: LD_VAR 0 1
12234: ARRAY
12235: PUSH
12236: LD_VAR 0 2
12240: ARRAY
12241: PUSH
12242: LD_INT 2
12244: ARRAY
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12255: LD_ADDR_EXP 44
12259: PUSH
12260: LD_EXP 44
12264: PPUSH
12265: LD_VAR 0 1
12269: PPUSH
12270: LD_EXP 44
12274: PUSH
12275: LD_VAR 0 1
12279: ARRAY
12280: PPUSH
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL_OW 3
12290: PPUSH
12291: CALL_OW 1
12295: ST_TO_ADDR
// end ; end ;
12296: GO 12047
12298: POP
12299: POP
// end ;
12300: GO 11965
12302: POP
12303: POP
// end ;
12304: PPOPN 4
12306: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12307: LD_INT 0
12309: PPUSH
12310: PPUSH
// result := false ;
12311: LD_ADDR_VAR 0 4
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12319: LD_VAR 0 1
12323: PPUSH
12324: CALL_OW 264
12328: PUSH
12329: LD_INT 81
12331: EQUAL
12332: NOT
12333: IFFALSE 12337
// exit ;
12335: GO 12577
// index := GetElementIndex ( minersList , unit ) ;
12337: LD_ADDR_VAR 0 5
12341: PUSH
12342: LD_EXP 43
12346: PPUSH
12347: LD_VAR 0 1
12351: PPUSH
12352: CALL 34329 0 2
12356: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
12357: LD_EXP 44
12361: PUSH
12362: LD_VAR 0 5
12366: ARRAY
12367: PUSH
12368: LD_EXP 45
12372: GREATEREQUAL
12373: IFFALSE 12377
// exit ;
12375: GO 12577
// ComMoveXY ( unit , x , y ) ;
12377: LD_VAR 0 1
12381: PPUSH
12382: LD_VAR 0 2
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12396: LD_INT 35
12398: PPUSH
12399: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
12403: LD_VAR 0 1
12407: PPUSH
12408: LD_VAR 0 2
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL 65684 0 3
12422: NOT
12423: PUSH
12424: LD_VAR 0 1
12428: PPUSH
12429: CALL_OW 314
12433: AND
12434: IFFALSE 12438
// exit ;
12436: GO 12577
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
12438: LD_VAR 0 2
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: CALL_OW 428
12452: PUSH
12453: LD_VAR 0 1
12457: EQUAL
12458: PUSH
12459: LD_VAR 0 1
12463: PPUSH
12464: CALL_OW 314
12468: NOT
12469: AND
12470: IFFALSE 12396
// PlaySoundXY ( x , y , PlantMine ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_STRING PlantMine
12484: PPUSH
12485: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
12489: LD_VAR 0 2
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 255
12508: PPUSH
12509: LD_INT 0
12511: PPUSH
12512: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
12516: LD_ADDR_EXP 44
12520: PUSH
12521: LD_EXP 44
12525: PPUSH
12526: LD_VAR 0 5
12530: PUSH
12531: LD_EXP 44
12535: PUSH
12536: LD_VAR 0 5
12540: ARRAY
12541: PUSH
12542: LD_INT 1
12544: PLUS
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PPUSH
12550: LD_VAR 0 2
12554: PUSH
12555: LD_VAR 0 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PPUSH
12564: CALL 34544 0 3
12568: ST_TO_ADDR
// result := true ;
12569: LD_ADDR_VAR 0 4
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// end ;
12577: LD_VAR 0 4
12581: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
12582: LD_INT 0
12584: PPUSH
12585: PPUSH
12586: PPUSH
// if not unit in minersList then
12587: LD_VAR 0 1
12591: PUSH
12592: LD_EXP 43
12596: IN
12597: NOT
12598: IFFALSE 12602
// exit ;
12600: GO 12994
// index := GetElementIndex ( minersList , unit ) ;
12602: LD_ADDR_VAR 0 6
12606: PUSH
12607: LD_EXP 43
12611: PPUSH
12612: LD_VAR 0 1
12616: PPUSH
12617: CALL 34329 0 2
12621: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
12622: LD_ADDR_VAR 0 5
12626: PUSH
12627: DOUBLE
12628: LD_EXP 44
12632: PUSH
12633: LD_VAR 0 6
12637: ARRAY
12638: INC
12639: ST_TO_ADDR
12640: LD_INT 1
12642: PUSH
12643: FOR_DOWNTO
12644: IFFALSE 12805
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
12646: LD_EXP 44
12650: PUSH
12651: LD_VAR 0 6
12655: ARRAY
12656: PUSH
12657: LD_VAR 0 5
12661: ARRAY
12662: PUSH
12663: LD_INT 1
12665: ARRAY
12666: PUSH
12667: LD_VAR 0 2
12671: EQUAL
12672: PUSH
12673: LD_EXP 44
12677: PUSH
12678: LD_VAR 0 6
12682: ARRAY
12683: PUSH
12684: LD_VAR 0 5
12688: ARRAY
12689: PUSH
12690: LD_INT 2
12692: ARRAY
12693: PUSH
12694: LD_VAR 0 3
12698: EQUAL
12699: AND
12700: IFFALSE 12803
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
12702: LD_EXP 44
12706: PUSH
12707: LD_VAR 0 6
12711: ARRAY
12712: PUSH
12713: LD_VAR 0 5
12717: ARRAY
12718: PUSH
12719: LD_INT 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 44
12727: PUSH
12728: LD_VAR 0 6
12732: ARRAY
12733: PUSH
12734: LD_VAR 0 5
12738: ARRAY
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: LD_VAR 0 1
12748: PPUSH
12749: CALL_OW 255
12753: PPUSH
12754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
12758: LD_ADDR_EXP 44
12762: PUSH
12763: LD_EXP 44
12767: PPUSH
12768: LD_VAR 0 6
12772: PPUSH
12773: LD_EXP 44
12777: PUSH
12778: LD_VAR 0 6
12782: ARRAY
12783: PPUSH
12784: LD_VAR 0 5
12788: PPUSH
12789: CALL_OW 3
12793: PPUSH
12794: CALL_OW 1
12798: ST_TO_ADDR
// exit ;
12799: POP
12800: POP
12801: GO 12994
// end ; end ;
12803: GO 12643
12805: POP
12806: POP
// for i := minerMinesList [ index ] downto 1 do
12807: LD_ADDR_VAR 0 5
12811: PUSH
12812: DOUBLE
12813: LD_EXP 44
12817: PUSH
12818: LD_VAR 0 6
12822: ARRAY
12823: INC
12824: ST_TO_ADDR
12825: LD_INT 1
12827: PUSH
12828: FOR_DOWNTO
12829: IFFALSE 12992
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
12831: LD_EXP 44
12835: PUSH
12836: LD_VAR 0 6
12840: ARRAY
12841: PUSH
12842: LD_VAR 0 5
12846: ARRAY
12847: PUSH
12848: LD_INT 1
12850: ARRAY
12851: PPUSH
12852: LD_EXP 44
12856: PUSH
12857: LD_VAR 0 6
12861: ARRAY
12862: PUSH
12863: LD_VAR 0 5
12867: ARRAY
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PPUSH
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: CALL_OW 298
12887: PUSH
12888: LD_INT 6
12890: LESS
12891: IFFALSE 12990
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
12893: LD_EXP 44
12897: PUSH
12898: LD_VAR 0 6
12902: ARRAY
12903: PUSH
12904: LD_VAR 0 5
12908: ARRAY
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_EXP 44
12918: PUSH
12919: LD_VAR 0 6
12923: ARRAY
12924: PUSH
12925: LD_VAR 0 5
12929: ARRAY
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 255
12944: PPUSH
12945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
12949: LD_ADDR_EXP 44
12953: PUSH
12954: LD_EXP 44
12958: PPUSH
12959: LD_VAR 0 6
12963: PPUSH
12964: LD_EXP 44
12968: PUSH
12969: LD_VAR 0 6
12973: ARRAY
12974: PPUSH
12975: LD_VAR 0 5
12979: PPUSH
12980: CALL_OW 3
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
// end ; end ;
12990: GO 12828
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 4
12998: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 264
13019: PUSH
13020: LD_INT 81
13022: EQUAL
13023: NOT
13024: PUSH
13025: LD_VAR 0 1
13029: PUSH
13030: LD_EXP 43
13034: IN
13035: NOT
13036: OR
13037: IFFALSE 13041
// exit ;
13039: GO 13363
// index := GetElementIndex ( minersList , unit ) ;
13041: LD_ADDR_VAR 0 6
13045: PUSH
13046: LD_EXP 43
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL 34329 0 2
13060: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13061: LD_ADDR_VAR 0 8
13065: PUSH
13066: LD_EXP 45
13070: PUSH
13071: LD_EXP 44
13075: PUSH
13076: LD_VAR 0 6
13080: ARRAY
13081: MINUS
13082: ST_TO_ADDR
// if not minesFreeAmount then
13083: LD_VAR 0 8
13087: NOT
13088: IFFALSE 13092
// exit ;
13090: GO 13363
// tmp := [ ] ;
13092: LD_ADDR_VAR 0 7
13096: PUSH
13097: EMPTY
13098: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: DOUBLE
13105: LD_INT 1
13107: DEC
13108: ST_TO_ADDR
13109: LD_VAR 0 8
13113: PUSH
13114: FOR_TO
13115: IFFALSE 13310
// begin _d := rand ( 0 , 5 ) ;
13117: LD_ADDR_VAR 0 11
13121: PUSH
13122: LD_INT 0
13124: PPUSH
13125: LD_INT 5
13127: PPUSH
13128: CALL_OW 12
13132: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13133: LD_ADDR_VAR 0 12
13137: PUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_INT 6
13143: PPUSH
13144: CALL_OW 12
13148: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13149: LD_ADDR_VAR 0 9
13153: PUSH
13154: LD_VAR 0 2
13158: PPUSH
13159: LD_VAR 0 11
13163: PPUSH
13164: LD_VAR 0 12
13168: PPUSH
13169: CALL_OW 272
13173: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13174: LD_ADDR_VAR 0 10
13178: PUSH
13179: LD_VAR 0 3
13183: PPUSH
13184: LD_VAR 0 11
13188: PPUSH
13189: LD_VAR 0 12
13193: PPUSH
13194: CALL_OW 273
13198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13199: LD_VAR 0 9
13203: PPUSH
13204: LD_VAR 0 10
13208: PPUSH
13209: CALL_OW 488
13213: PUSH
13214: LD_VAR 0 9
13218: PUSH
13219: LD_VAR 0 10
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_VAR 0 7
13232: IN
13233: NOT
13234: AND
13235: PUSH
13236: LD_VAR 0 9
13240: PPUSH
13241: LD_VAR 0 10
13245: PPUSH
13246: CALL_OW 458
13250: NOT
13251: AND
13252: IFFALSE 13294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13254: LD_ADDR_VAR 0 7
13258: PUSH
13259: LD_VAR 0 7
13263: PPUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: LD_VAR 0 9
13277: PUSH
13278: LD_VAR 0 10
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 1
13291: ST_TO_ADDR
13292: GO 13308
// i := i - 1 ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_VAR 0 5
13303: PUSH
13304: LD_INT 1
13306: MINUS
13307: ST_TO_ADDR
// end ;
13308: GO 13114
13310: POP
13311: POP
// for i in tmp do
13312: LD_ADDR_VAR 0 5
13316: PUSH
13317: LD_VAR 0 7
13321: PUSH
13322: FOR_IN
13323: IFFALSE 13361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13325: LD_VAR 0 1
13329: PPUSH
13330: LD_VAR 0 5
13334: PUSH
13335: LD_INT 1
13337: ARRAY
13338: PPUSH
13339: LD_VAR 0 5
13343: PUSH
13344: LD_INT 2
13346: ARRAY
13347: PPUSH
13348: CALL 12307 0 3
13352: NOT
13353: IFFALSE 13359
// exit ;
13355: POP
13356: POP
13357: GO 13363
13359: GO 13322
13361: POP
13362: POP
// end ;
13363: LD_VAR 0 4
13367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
// if not GetClass ( unit ) = class_sniper then
13377: LD_VAR 0 1
13381: PPUSH
13382: CALL_OW 257
13386: PUSH
13387: LD_INT 5
13389: EQUAL
13390: NOT
13391: IFFALSE 13395
// exit ;
13393: GO 13783
// dist := 8 ;
13395: LD_ADDR_VAR 0 5
13399: PUSH
13400: LD_INT 8
13402: ST_TO_ADDR
// viewRange := 12 ;
13403: LD_ADDR_VAR 0 7
13407: PUSH
13408: LD_INT 12
13410: ST_TO_ADDR
// side := GetSide ( unit ) ;
13411: LD_ADDR_VAR 0 6
13415: PUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 255
13425: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
13426: LD_INT 61
13428: PPUSH
13429: LD_VAR 0 6
13433: PPUSH
13434: CALL_OW 321
13438: PUSH
13439: LD_INT 2
13441: EQUAL
13442: IFFALSE 13452
// viewRange := 16 ;
13444: LD_ADDR_VAR 0 7
13448: PUSH
13449: LD_INT 16
13451: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_VAR 0 2
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: CALL_OW 297
13471: PUSH
13472: LD_VAR 0 5
13476: GREATER
13477: IFFALSE 13556
// begin ComMoveXY ( unit , x , y ) ;
13479: LD_VAR 0 1
13483: PPUSH
13484: LD_VAR 0 2
13488: PPUSH
13489: LD_VAR 0 3
13493: PPUSH
13494: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13498: LD_INT 35
13500: PPUSH
13501: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
13505: LD_VAR 0 1
13509: PPUSH
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: CALL 65684 0 3
13524: NOT
13525: IFFALSE 13529
// exit ;
13527: GO 13783
// until GetDistUnitXY ( unit , x , y ) < dist ;
13529: LD_VAR 0 1
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: CALL_OW 297
13548: PUSH
13549: LD_VAR 0 5
13553: LESS
13554: IFFALSE 13498
// end ; ComTurnXY ( unit , x , y ) ;
13556: LD_VAR 0 1
13560: PPUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: CALL_OW 118
// wait ( 5 ) ;
13575: LD_INT 5
13577: PPUSH
13578: CALL_OW 67
// _d := GetDir ( unit ) ;
13582: LD_ADDR_VAR 0 10
13586: PUSH
13587: LD_VAR 0 1
13591: PPUSH
13592: CALL_OW 254
13596: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
13597: LD_ADDR_VAR 0 8
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 250
13611: PPUSH
13612: LD_VAR 0 10
13616: PPUSH
13617: LD_VAR 0 5
13621: PPUSH
13622: CALL_OW 272
13626: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
13627: LD_ADDR_VAR 0 9
13631: PUSH
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 251
13641: PPUSH
13642: LD_VAR 0 10
13646: PPUSH
13647: LD_VAR 0 5
13651: PPUSH
13652: CALL_OW 273
13656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13657: LD_VAR 0 8
13661: PPUSH
13662: LD_VAR 0 9
13666: PPUSH
13667: CALL_OW 488
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13783
// ComAnimCustom ( unit , 1 ) ;
13676: LD_VAR 0 1
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
13688: LD_VAR 0 8
13692: PPUSH
13693: LD_VAR 0 9
13697: PPUSH
13698: LD_VAR 0 6
13702: PPUSH
13703: LD_VAR 0 7
13707: PPUSH
13708: CALL_OW 330
// repeat wait ( 1 ) ;
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
13719: LD_VAR 0 1
13723: PPUSH
13724: CALL_OW 316
13728: PUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 314
13738: OR
13739: PUSH
13740: LD_VAR 0 1
13744: PPUSH
13745: CALL_OW 302
13749: NOT
13750: OR
13751: PUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 301
13761: OR
13762: IFFALSE 13712
// RemoveSeeing ( _x , _y , side ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: LD_VAR 0 9
13773: PPUSH
13774: LD_VAR 0 6
13778: PPUSH
13779: CALL_OW 331
// end ; end_of_file
13783: LD_VAR 0 4
13787: RET
// export globalGameSaveCounter ; every 0 0$1 do
13788: GO 13790
13790: DISABLE
// begin enable ;
13791: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13792: LD_STRING updateTimer(
13794: PUSH
13795: LD_OWVAR 1
13799: STR
13800: PUSH
13801: LD_STRING );
13803: STR
13804: PPUSH
13805: CALL_OW 559
// end ;
13809: END
// every 0 0$1 do
13810: GO 13812
13812: DISABLE
// begin globalGameSaveCounter := 0 ;
13813: LD_ADDR_EXP 46
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13821: LD_STRING setGameSaveCounter(0)
13823: PPUSH
13824: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13828: LD_STRING initStreamRollete();
13830: PPUSH
13831: CALL_OW 559
// InitStreamMode ;
13835: CALL 15161 0 0
// DefineStreamItems ( false ) ;
13839: LD_INT 0
13841: PPUSH
13842: CALL 15625 0 1
// end ;
13846: END
// export function SOS_MapStart ( ) ; begin
13847: LD_INT 0
13849: PPUSH
// if streamModeActive then
13850: LD_EXP 47
13854: IFFALSE 13863
// DefineStreamItems ( true ) ;
13856: LD_INT 1
13858: PPUSH
13859: CALL 15625 0 1
// UpdateLuaVariables ( ) ;
13863: CALL 13880 0 0
// UpdateFactoryWaypoints ( ) ;
13867: CALL 28486 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13871: CALL 28743 0 0
// end ;
13875: LD_VAR 0 1
13879: RET
// function UpdateLuaVariables ( ) ; begin
13880: LD_INT 0
13882: PPUSH
// if globalGameSaveCounter then
13883: LD_EXP 46
13887: IFFALSE 13921
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13889: LD_ADDR_EXP 46
13893: PUSH
13894: LD_EXP 46
13898: PPUSH
13899: CALL 68235 0 1
13903: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13904: LD_STRING setGameSaveCounter(
13906: PUSH
13907: LD_EXP 46
13911: STR
13912: PUSH
13913: LD_STRING )
13915: STR
13916: PPUSH
13917: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13921: LD_STRING setGameDifficulty(
13923: PUSH
13924: LD_OWVAR 67
13928: STR
13929: PUSH
13930: LD_STRING )
13932: STR
13933: PPUSH
13934: CALL_OW 559
// end ;
13938: LD_VAR 0 1
13942: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13943: LD_INT 0
13945: PPUSH
// if p2 = stream_mode then
13946: LD_VAR 0 2
13950: PUSH
13951: LD_INT 100
13953: EQUAL
13954: IFFALSE 14957
// begin if not StreamModeActive then
13956: LD_EXP 47
13960: NOT
13961: IFFALSE 13971
// StreamModeActive := true ;
13963: LD_ADDR_EXP 47
13967: PUSH
13968: LD_INT 1
13970: ST_TO_ADDR
// if p3 = 0 then
13971: LD_VAR 0 3
13975: PUSH
13976: LD_INT 0
13978: EQUAL
13979: IFFALSE 13985
// InitStreamMode ;
13981: CALL 15161 0 0
// if p3 = 1 then
13985: LD_VAR 0 3
13989: PUSH
13990: LD_INT 1
13992: EQUAL
13993: IFFALSE 14003
// sRocket := true ;
13995: LD_ADDR_EXP 52
13999: PUSH
14000: LD_INT 1
14002: ST_TO_ADDR
// if p3 = 2 then
14003: LD_VAR 0 3
14007: PUSH
14008: LD_INT 2
14010: EQUAL
14011: IFFALSE 14021
// sSpeed := true ;
14013: LD_ADDR_EXP 51
14017: PUSH
14018: LD_INT 1
14020: ST_TO_ADDR
// if p3 = 3 then
14021: LD_VAR 0 3
14025: PUSH
14026: LD_INT 3
14028: EQUAL
14029: IFFALSE 14039
// sEngine := true ;
14031: LD_ADDR_EXP 53
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// if p3 = 4 then
14039: LD_VAR 0 3
14043: PUSH
14044: LD_INT 4
14046: EQUAL
14047: IFFALSE 14057
// sSpec := true ;
14049: LD_ADDR_EXP 50
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
// if p3 = 5 then
14057: LD_VAR 0 3
14061: PUSH
14062: LD_INT 5
14064: EQUAL
14065: IFFALSE 14075
// sLevel := true ;
14067: LD_ADDR_EXP 54
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// if p3 = 6 then
14075: LD_VAR 0 3
14079: PUSH
14080: LD_INT 6
14082: EQUAL
14083: IFFALSE 14093
// sArmoury := true ;
14085: LD_ADDR_EXP 55
14089: PUSH
14090: LD_INT 1
14092: ST_TO_ADDR
// if p3 = 7 then
14093: LD_VAR 0 3
14097: PUSH
14098: LD_INT 7
14100: EQUAL
14101: IFFALSE 14111
// sRadar := true ;
14103: LD_ADDR_EXP 56
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// if p3 = 8 then
14111: LD_VAR 0 3
14115: PUSH
14116: LD_INT 8
14118: EQUAL
14119: IFFALSE 14129
// sBunker := true ;
14121: LD_ADDR_EXP 57
14125: PUSH
14126: LD_INT 1
14128: ST_TO_ADDR
// if p3 = 9 then
14129: LD_VAR 0 3
14133: PUSH
14134: LD_INT 9
14136: EQUAL
14137: IFFALSE 14147
// sHack := true ;
14139: LD_ADDR_EXP 58
14143: PUSH
14144: LD_INT 1
14146: ST_TO_ADDR
// if p3 = 10 then
14147: LD_VAR 0 3
14151: PUSH
14152: LD_INT 10
14154: EQUAL
14155: IFFALSE 14165
// sFire := true ;
14157: LD_ADDR_EXP 59
14161: PUSH
14162: LD_INT 1
14164: ST_TO_ADDR
// if p3 = 11 then
14165: LD_VAR 0 3
14169: PUSH
14170: LD_INT 11
14172: EQUAL
14173: IFFALSE 14183
// sRefresh := true ;
14175: LD_ADDR_EXP 60
14179: PUSH
14180: LD_INT 1
14182: ST_TO_ADDR
// if p3 = 12 then
14183: LD_VAR 0 3
14187: PUSH
14188: LD_INT 12
14190: EQUAL
14191: IFFALSE 14201
// sExp := true ;
14193: LD_ADDR_EXP 61
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
// if p3 = 13 then
14201: LD_VAR 0 3
14205: PUSH
14206: LD_INT 13
14208: EQUAL
14209: IFFALSE 14219
// sDepot := true ;
14211: LD_ADDR_EXP 62
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// if p3 = 14 then
14219: LD_VAR 0 3
14223: PUSH
14224: LD_INT 14
14226: EQUAL
14227: IFFALSE 14237
// sFlag := true ;
14229: LD_ADDR_EXP 63
14233: PUSH
14234: LD_INT 1
14236: ST_TO_ADDR
// if p3 = 15 then
14237: LD_VAR 0 3
14241: PUSH
14242: LD_INT 15
14244: EQUAL
14245: IFFALSE 14255
// sKamikadze := true ;
14247: LD_ADDR_EXP 71
14251: PUSH
14252: LD_INT 1
14254: ST_TO_ADDR
// if p3 = 16 then
14255: LD_VAR 0 3
14259: PUSH
14260: LD_INT 16
14262: EQUAL
14263: IFFALSE 14273
// sTroll := true ;
14265: LD_ADDR_EXP 72
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// if p3 = 17 then
14273: LD_VAR 0 3
14277: PUSH
14278: LD_INT 17
14280: EQUAL
14281: IFFALSE 14291
// sSlow := true ;
14283: LD_ADDR_EXP 73
14287: PUSH
14288: LD_INT 1
14290: ST_TO_ADDR
// if p3 = 18 then
14291: LD_VAR 0 3
14295: PUSH
14296: LD_INT 18
14298: EQUAL
14299: IFFALSE 14309
// sLack := true ;
14301: LD_ADDR_EXP 74
14305: PUSH
14306: LD_INT 1
14308: ST_TO_ADDR
// if p3 = 19 then
14309: LD_VAR 0 3
14313: PUSH
14314: LD_INT 19
14316: EQUAL
14317: IFFALSE 14327
// sTank := true ;
14319: LD_ADDR_EXP 76
14323: PUSH
14324: LD_INT 1
14326: ST_TO_ADDR
// if p3 = 20 then
14327: LD_VAR 0 3
14331: PUSH
14332: LD_INT 20
14334: EQUAL
14335: IFFALSE 14345
// sRemote := true ;
14337: LD_ADDR_EXP 77
14341: PUSH
14342: LD_INT 1
14344: ST_TO_ADDR
// if p3 = 21 then
14345: LD_VAR 0 3
14349: PUSH
14350: LD_INT 21
14352: EQUAL
14353: IFFALSE 14363
// sPowell := true ;
14355: LD_ADDR_EXP 78
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// if p3 = 22 then
14363: LD_VAR 0 3
14367: PUSH
14368: LD_INT 22
14370: EQUAL
14371: IFFALSE 14381
// sTeleport := true ;
14373: LD_ADDR_EXP 81
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// if p3 = 23 then
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 23
14388: EQUAL
14389: IFFALSE 14399
// sOilTower := true ;
14391: LD_ADDR_EXP 83
14395: PUSH
14396: LD_INT 1
14398: ST_TO_ADDR
// if p3 = 24 then
14399: LD_VAR 0 3
14403: PUSH
14404: LD_INT 24
14406: EQUAL
14407: IFFALSE 14417
// sShovel := true ;
14409: LD_ADDR_EXP 84
14413: PUSH
14414: LD_INT 1
14416: ST_TO_ADDR
// if p3 = 25 then
14417: LD_VAR 0 3
14421: PUSH
14422: LD_INT 25
14424: EQUAL
14425: IFFALSE 14435
// sSheik := true ;
14427: LD_ADDR_EXP 85
14431: PUSH
14432: LD_INT 1
14434: ST_TO_ADDR
// if p3 = 26 then
14435: LD_VAR 0 3
14439: PUSH
14440: LD_INT 26
14442: EQUAL
14443: IFFALSE 14453
// sEarthquake := true ;
14445: LD_ADDR_EXP 87
14449: PUSH
14450: LD_INT 1
14452: ST_TO_ADDR
// if p3 = 27 then
14453: LD_VAR 0 3
14457: PUSH
14458: LD_INT 27
14460: EQUAL
14461: IFFALSE 14471
// sAI := true ;
14463: LD_ADDR_EXP 88
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// if p3 = 28 then
14471: LD_VAR 0 3
14475: PUSH
14476: LD_INT 28
14478: EQUAL
14479: IFFALSE 14489
// sCargo := true ;
14481: LD_ADDR_EXP 91
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// if p3 = 29 then
14489: LD_VAR 0 3
14493: PUSH
14494: LD_INT 29
14496: EQUAL
14497: IFFALSE 14507
// sDLaser := true ;
14499: LD_ADDR_EXP 92
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// if p3 = 30 then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_INT 30
14514: EQUAL
14515: IFFALSE 14525
// sExchange := true ;
14517: LD_ADDR_EXP 93
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// if p3 = 31 then
14525: LD_VAR 0 3
14529: PUSH
14530: LD_INT 31
14532: EQUAL
14533: IFFALSE 14543
// sFac := true ;
14535: LD_ADDR_EXP 94
14539: PUSH
14540: LD_INT 1
14542: ST_TO_ADDR
// if p3 = 32 then
14543: LD_VAR 0 3
14547: PUSH
14548: LD_INT 32
14550: EQUAL
14551: IFFALSE 14561
// sPower := true ;
14553: LD_ADDR_EXP 95
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// if p3 = 33 then
14561: LD_VAR 0 3
14565: PUSH
14566: LD_INT 33
14568: EQUAL
14569: IFFALSE 14579
// sRandom := true ;
14571: LD_ADDR_EXP 96
14575: PUSH
14576: LD_INT 1
14578: ST_TO_ADDR
// if p3 = 34 then
14579: LD_VAR 0 3
14583: PUSH
14584: LD_INT 34
14586: EQUAL
14587: IFFALSE 14597
// sShield := true ;
14589: LD_ADDR_EXP 97
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// if p3 = 35 then
14597: LD_VAR 0 3
14601: PUSH
14602: LD_INT 35
14604: EQUAL
14605: IFFALSE 14615
// sTime := true ;
14607: LD_ADDR_EXP 98
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// if p3 = 36 then
14615: LD_VAR 0 3
14619: PUSH
14620: LD_INT 36
14622: EQUAL
14623: IFFALSE 14633
// sTools := true ;
14625: LD_ADDR_EXP 99
14629: PUSH
14630: LD_INT 1
14632: ST_TO_ADDR
// if p3 = 101 then
14633: LD_VAR 0 3
14637: PUSH
14638: LD_INT 101
14640: EQUAL
14641: IFFALSE 14651
// sSold := true ;
14643: LD_ADDR_EXP 64
14647: PUSH
14648: LD_INT 1
14650: ST_TO_ADDR
// if p3 = 102 then
14651: LD_VAR 0 3
14655: PUSH
14656: LD_INT 102
14658: EQUAL
14659: IFFALSE 14669
// sDiff := true ;
14661: LD_ADDR_EXP 65
14665: PUSH
14666: LD_INT 1
14668: ST_TO_ADDR
// if p3 = 103 then
14669: LD_VAR 0 3
14673: PUSH
14674: LD_INT 103
14676: EQUAL
14677: IFFALSE 14687
// sFog := true ;
14679: LD_ADDR_EXP 68
14683: PUSH
14684: LD_INT 1
14686: ST_TO_ADDR
// if p3 = 104 then
14687: LD_VAR 0 3
14691: PUSH
14692: LD_INT 104
14694: EQUAL
14695: IFFALSE 14705
// sReset := true ;
14697: LD_ADDR_EXP 69
14701: PUSH
14702: LD_INT 1
14704: ST_TO_ADDR
// if p3 = 105 then
14705: LD_VAR 0 3
14709: PUSH
14710: LD_INT 105
14712: EQUAL
14713: IFFALSE 14723
// sSun := true ;
14715: LD_ADDR_EXP 70
14719: PUSH
14720: LD_INT 1
14722: ST_TO_ADDR
// if p3 = 106 then
14723: LD_VAR 0 3
14727: PUSH
14728: LD_INT 106
14730: EQUAL
14731: IFFALSE 14741
// sTiger := true ;
14733: LD_ADDR_EXP 66
14737: PUSH
14738: LD_INT 1
14740: ST_TO_ADDR
// if p3 = 107 then
14741: LD_VAR 0 3
14745: PUSH
14746: LD_INT 107
14748: EQUAL
14749: IFFALSE 14759
// sBomb := true ;
14751: LD_ADDR_EXP 67
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// if p3 = 108 then
14759: LD_VAR 0 3
14763: PUSH
14764: LD_INT 108
14766: EQUAL
14767: IFFALSE 14777
// sWound := true ;
14769: LD_ADDR_EXP 75
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// if p3 = 109 then
14777: LD_VAR 0 3
14781: PUSH
14782: LD_INT 109
14784: EQUAL
14785: IFFALSE 14795
// sBetray := true ;
14787: LD_ADDR_EXP 79
14791: PUSH
14792: LD_INT 1
14794: ST_TO_ADDR
// if p3 = 110 then
14795: LD_VAR 0 3
14799: PUSH
14800: LD_INT 110
14802: EQUAL
14803: IFFALSE 14813
// sContamin := true ;
14805: LD_ADDR_EXP 80
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// if p3 = 111 then
14813: LD_VAR 0 3
14817: PUSH
14818: LD_INT 111
14820: EQUAL
14821: IFFALSE 14831
// sOil := true ;
14823: LD_ADDR_EXP 82
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// if p3 = 112 then
14831: LD_VAR 0 3
14835: PUSH
14836: LD_INT 112
14838: EQUAL
14839: IFFALSE 14849
// sStu := true ;
14841: LD_ADDR_EXP 86
14845: PUSH
14846: LD_INT 1
14848: ST_TO_ADDR
// if p3 = 113 then
14849: LD_VAR 0 3
14853: PUSH
14854: LD_INT 113
14856: EQUAL
14857: IFFALSE 14867
// sBazooka := true ;
14859: LD_ADDR_EXP 89
14863: PUSH
14864: LD_INT 1
14866: ST_TO_ADDR
// if p3 = 114 then
14867: LD_VAR 0 3
14871: PUSH
14872: LD_INT 114
14874: EQUAL
14875: IFFALSE 14885
// sMortar := true ;
14877: LD_ADDR_EXP 90
14881: PUSH
14882: LD_INT 1
14884: ST_TO_ADDR
// if p3 = 115 then
14885: LD_VAR 0 3
14889: PUSH
14890: LD_INT 115
14892: EQUAL
14893: IFFALSE 14903
// sRanger := true ;
14895: LD_ADDR_EXP 100
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if p3 = 116 then
14903: LD_VAR 0 3
14907: PUSH
14908: LD_INT 116
14910: EQUAL
14911: IFFALSE 14921
// sComputer := true ;
14913: LD_ADDR_EXP 101
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// if p3 = 117 then
14921: LD_VAR 0 3
14925: PUSH
14926: LD_INT 117
14928: EQUAL
14929: IFFALSE 14939
// s30 := true ;
14931: LD_ADDR_EXP 102
14935: PUSH
14936: LD_INT 1
14938: ST_TO_ADDR
// if p3 = 118 then
14939: LD_VAR 0 3
14943: PUSH
14944: LD_INT 118
14946: EQUAL
14947: IFFALSE 14957
// s60 := true ;
14949: LD_ADDR_EXP 103
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// end ; if p2 = hack_mode then
14957: LD_VAR 0 2
14961: PUSH
14962: LD_INT 101
14964: EQUAL
14965: IFFALSE 15093
// begin case p3 of 1 :
14967: LD_VAR 0 3
14971: PUSH
14972: LD_INT 1
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 14987
14980: POP
// hHackUnlimitedResources ; 2 :
14981: CALL 27232 0 0
14985: GO 15093
14987: LD_INT 2
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15002
14995: POP
// hHackSetLevel10 ; 3 :
14996: CALL 27365 0 0
15000: GO 15093
15002: LD_INT 3
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15010
15008: GO 15017
15010: POP
// hHackSetLevel10YourUnits ; 4 :
15011: CALL 27450 0 0
15015: GO 15093
15017: LD_INT 4
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15032
15025: POP
// hHackInvincible ; 5 :
15026: CALL 27898 0 0
15030: GO 15093
15032: LD_INT 5
15034: DOUBLE
15035: EQUAL
15036: IFTRUE 15040
15038: GO 15047
15040: POP
// hHackInvisible ; 6 :
15041: CALL 28009 0 0
15045: GO 15093
15047: LD_INT 6
15049: DOUBLE
15050: EQUAL
15051: IFTRUE 15055
15053: GO 15062
15055: POP
// hHackChangeYourSide ; 7 :
15056: CALL 28066 0 0
15060: GO 15093
15062: LD_INT 7
15064: DOUBLE
15065: EQUAL
15066: IFTRUE 15070
15068: GO 15077
15070: POP
// hHackChangeUnitSide ; 8 :
15071: CALL 28108 0 0
15075: GO 15093
15077: LD_INT 8
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15092
15085: POP
// hHackFog ; end ;
15086: CALL 28209 0 0
15090: GO 15093
15092: POP
// end ; if p2 = game_save_mode then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 102
15100: EQUAL
15101: IFFALSE 15156
// begin if p3 = 1 then
15103: LD_VAR 0 3
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: IFFALSE 15123
// globalGameSaveCounter := p4 ;
15113: LD_ADDR_EXP 46
15117: PUSH
15118: LD_VAR 0 4
15122: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15123: LD_VAR 0 3
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: PUSH
15132: LD_EXP 46
15136: AND
15137: IFFALSE 15156
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15139: LD_STRING setGameSaveCounter(
15141: PUSH
15142: LD_EXP 46
15146: STR
15147: PUSH
15148: LD_STRING )
15150: STR
15151: PPUSH
15152: CALL_OW 559
// end ; end ;
15156: LD_VAR 0 7
15160: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15161: LD_INT 0
15163: PPUSH
// streamModeActive := false ;
15164: LD_ADDR_EXP 47
15168: PUSH
15169: LD_INT 0
15171: ST_TO_ADDR
// normalCounter := 36 ;
15172: LD_ADDR_EXP 48
15176: PUSH
15177: LD_INT 36
15179: ST_TO_ADDR
// hardcoreCounter := 18 ;
15180: LD_ADDR_EXP 49
15184: PUSH
15185: LD_INT 18
15187: ST_TO_ADDR
// sRocket := false ;
15188: LD_ADDR_EXP 52
15192: PUSH
15193: LD_INT 0
15195: ST_TO_ADDR
// sSpeed := false ;
15196: LD_ADDR_EXP 51
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// sEngine := false ;
15204: LD_ADDR_EXP 53
15208: PUSH
15209: LD_INT 0
15211: ST_TO_ADDR
// sSpec := false ;
15212: LD_ADDR_EXP 50
15216: PUSH
15217: LD_INT 0
15219: ST_TO_ADDR
// sLevel := false ;
15220: LD_ADDR_EXP 54
15224: PUSH
15225: LD_INT 0
15227: ST_TO_ADDR
// sArmoury := false ;
15228: LD_ADDR_EXP 55
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// sRadar := false ;
15236: LD_ADDR_EXP 56
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// sBunker := false ;
15244: LD_ADDR_EXP 57
15248: PUSH
15249: LD_INT 0
15251: ST_TO_ADDR
// sHack := false ;
15252: LD_ADDR_EXP 58
15256: PUSH
15257: LD_INT 0
15259: ST_TO_ADDR
// sFire := false ;
15260: LD_ADDR_EXP 59
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// sRefresh := false ;
15268: LD_ADDR_EXP 60
15272: PUSH
15273: LD_INT 0
15275: ST_TO_ADDR
// sExp := false ;
15276: LD_ADDR_EXP 61
15280: PUSH
15281: LD_INT 0
15283: ST_TO_ADDR
// sDepot := false ;
15284: LD_ADDR_EXP 62
15288: PUSH
15289: LD_INT 0
15291: ST_TO_ADDR
// sFlag := false ;
15292: LD_ADDR_EXP 63
15296: PUSH
15297: LD_INT 0
15299: ST_TO_ADDR
// sKamikadze := false ;
15300: LD_ADDR_EXP 71
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// sTroll := false ;
15308: LD_ADDR_EXP 72
15312: PUSH
15313: LD_INT 0
15315: ST_TO_ADDR
// sSlow := false ;
15316: LD_ADDR_EXP 73
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// sLack := false ;
15324: LD_ADDR_EXP 74
15328: PUSH
15329: LD_INT 0
15331: ST_TO_ADDR
// sTank := false ;
15332: LD_ADDR_EXP 76
15336: PUSH
15337: LD_INT 0
15339: ST_TO_ADDR
// sRemote := false ;
15340: LD_ADDR_EXP 77
15344: PUSH
15345: LD_INT 0
15347: ST_TO_ADDR
// sPowell := false ;
15348: LD_ADDR_EXP 78
15352: PUSH
15353: LD_INT 0
15355: ST_TO_ADDR
// sTeleport := false ;
15356: LD_ADDR_EXP 81
15360: PUSH
15361: LD_INT 0
15363: ST_TO_ADDR
// sOilTower := false ;
15364: LD_ADDR_EXP 83
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// sShovel := false ;
15372: LD_ADDR_EXP 84
15376: PUSH
15377: LD_INT 0
15379: ST_TO_ADDR
// sSheik := false ;
15380: LD_ADDR_EXP 85
15384: PUSH
15385: LD_INT 0
15387: ST_TO_ADDR
// sEarthquake := false ;
15388: LD_ADDR_EXP 87
15392: PUSH
15393: LD_INT 0
15395: ST_TO_ADDR
// sAI := false ;
15396: LD_ADDR_EXP 88
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// sCargo := false ;
15404: LD_ADDR_EXP 91
15408: PUSH
15409: LD_INT 0
15411: ST_TO_ADDR
// sDLaser := false ;
15412: LD_ADDR_EXP 92
15416: PUSH
15417: LD_INT 0
15419: ST_TO_ADDR
// sExchange := false ;
15420: LD_ADDR_EXP 93
15424: PUSH
15425: LD_INT 0
15427: ST_TO_ADDR
// sFac := false ;
15428: LD_ADDR_EXP 94
15432: PUSH
15433: LD_INT 0
15435: ST_TO_ADDR
// sPower := false ;
15436: LD_ADDR_EXP 95
15440: PUSH
15441: LD_INT 0
15443: ST_TO_ADDR
// sRandom := false ;
15444: LD_ADDR_EXP 96
15448: PUSH
15449: LD_INT 0
15451: ST_TO_ADDR
// sShield := false ;
15452: LD_ADDR_EXP 97
15456: PUSH
15457: LD_INT 0
15459: ST_TO_ADDR
// sTime := false ;
15460: LD_ADDR_EXP 98
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// sTools := false ;
15468: LD_ADDR_EXP 99
15472: PUSH
15473: LD_INT 0
15475: ST_TO_ADDR
// sSold := false ;
15476: LD_ADDR_EXP 64
15480: PUSH
15481: LD_INT 0
15483: ST_TO_ADDR
// sDiff := false ;
15484: LD_ADDR_EXP 65
15488: PUSH
15489: LD_INT 0
15491: ST_TO_ADDR
// sFog := false ;
15492: LD_ADDR_EXP 68
15496: PUSH
15497: LD_INT 0
15499: ST_TO_ADDR
// sReset := false ;
15500: LD_ADDR_EXP 69
15504: PUSH
15505: LD_INT 0
15507: ST_TO_ADDR
// sSun := false ;
15508: LD_ADDR_EXP 70
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// sTiger := false ;
15516: LD_ADDR_EXP 66
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// sBomb := false ;
15524: LD_ADDR_EXP 67
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// sWound := false ;
15532: LD_ADDR_EXP 75
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// sBetray := false ;
15540: LD_ADDR_EXP 79
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// sContamin := false ;
15548: LD_ADDR_EXP 80
15552: PUSH
15553: LD_INT 0
15555: ST_TO_ADDR
// sOil := false ;
15556: LD_ADDR_EXP 82
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
// sStu := false ;
15564: LD_ADDR_EXP 86
15568: PUSH
15569: LD_INT 0
15571: ST_TO_ADDR
// sBazooka := false ;
15572: LD_ADDR_EXP 89
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// sMortar := false ;
15580: LD_ADDR_EXP 90
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// sRanger := false ;
15588: LD_ADDR_EXP 100
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// sComputer := false ;
15596: LD_ADDR_EXP 101
15600: PUSH
15601: LD_INT 0
15603: ST_TO_ADDR
// s30 := false ;
15604: LD_ADDR_EXP 102
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// s60 := false ;
15612: LD_ADDR_EXP 103
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// end ;
15620: LD_VAR 0 1
15624: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
// result := [ ] ;
15634: LD_ADDR_VAR 0 2
15638: PUSH
15639: EMPTY
15640: ST_TO_ADDR
// if campaign_id = 1 then
15641: LD_OWVAR 69
15645: PUSH
15646: LD_INT 1
15648: EQUAL
15649: IFFALSE 18815
// begin case mission_number of 1 :
15651: LD_OWVAR 70
15655: PUSH
15656: LD_INT 1
15658: DOUBLE
15659: EQUAL
15660: IFTRUE 15664
15662: GO 15740
15664: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 4
15675: PUSH
15676: LD_INT 11
15678: PUSH
15679: LD_INT 12
15681: PUSH
15682: LD_INT 15
15684: PUSH
15685: LD_INT 16
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 23
15693: PUSH
15694: LD_INT 26
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 101
15710: PUSH
15711: LD_INT 102
15713: PUSH
15714: LD_INT 106
15716: PUSH
15717: LD_INT 116
15719: PUSH
15720: LD_INT 117
15722: PUSH
15723: LD_INT 118
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: ST_TO_ADDR
15738: GO 18813
15740: LD_INT 2
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15832
15748: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15749: LD_ADDR_VAR 0 2
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 4
15759: PUSH
15760: LD_INT 11
15762: PUSH
15763: LD_INT 12
15765: PUSH
15766: LD_INT 15
15768: PUSH
15769: LD_INT 16
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_INT 23
15777: PUSH
15778: LD_INT 26
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 101
15794: PUSH
15795: LD_INT 102
15797: PUSH
15798: LD_INT 105
15800: PUSH
15801: LD_INT 106
15803: PUSH
15804: LD_INT 108
15806: PUSH
15807: LD_INT 116
15809: PUSH
15810: LD_INT 117
15812: PUSH
15813: LD_INT 118
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 18813
15832: LD_INT 3
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15928
15840: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 11
15857: PUSH
15858: LD_INT 12
15860: PUSH
15861: LD_INT 15
15863: PUSH
15864: LD_INT 16
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_INT 26
15872: PUSH
15873: LD_INT 36
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 101
15890: PUSH
15891: LD_INT 102
15893: PUSH
15894: LD_INT 105
15896: PUSH
15897: LD_INT 106
15899: PUSH
15900: LD_INT 108
15902: PUSH
15903: LD_INT 116
15905: PUSH
15906: LD_INT 117
15908: PUSH
15909: LD_INT 118
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: ST_TO_ADDR
15926: GO 18813
15928: LD_INT 4
15930: DOUBLE
15931: EQUAL
15932: IFTRUE 15936
15934: GO 16032
15936: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 4
15947: PUSH
15948: LD_INT 5
15950: PUSH
15951: LD_INT 8
15953: PUSH
15954: LD_INT 11
15956: PUSH
15957: LD_INT 12
15959: PUSH
15960: LD_INT 15
15962: PUSH
15963: LD_INT 16
15965: PUSH
15966: LD_INT 22
15968: PUSH
15969: LD_INT 23
15971: PUSH
15972: LD_INT 26
15974: PUSH
15975: LD_INT 36
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 101
15994: PUSH
15995: LD_INT 102
15997: PUSH
15998: LD_INT 105
16000: PUSH
16001: LD_INT 106
16003: PUSH
16004: LD_INT 108
16006: PUSH
16007: LD_INT 116
16009: PUSH
16010: LD_INT 117
16012: PUSH
16013: LD_INT 118
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: ST_TO_ADDR
16030: GO 18813
16032: LD_INT 5
16034: DOUBLE
16035: EQUAL
16036: IFTRUE 16040
16038: GO 16152
16040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16041: LD_ADDR_VAR 0 2
16045: PUSH
16046: LD_INT 2
16048: PUSH
16049: LD_INT 4
16051: PUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 6
16057: PUSH
16058: LD_INT 8
16060: PUSH
16061: LD_INT 11
16063: PUSH
16064: LD_INT 12
16066: PUSH
16067: LD_INT 15
16069: PUSH
16070: LD_INT 16
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_INT 23
16078: PUSH
16079: LD_INT 25
16081: PUSH
16082: LD_INT 26
16084: PUSH
16085: LD_INT 36
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 101
16106: PUSH
16107: LD_INT 102
16109: PUSH
16110: LD_INT 105
16112: PUSH
16113: LD_INT 106
16115: PUSH
16116: LD_INT 108
16118: PUSH
16119: LD_INT 109
16121: PUSH
16122: LD_INT 112
16124: PUSH
16125: LD_INT 116
16127: PUSH
16128: LD_INT 117
16130: PUSH
16131: LD_INT 118
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: ST_TO_ADDR
16150: GO 18813
16152: LD_INT 6
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16292
16160: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 4
16171: PUSH
16172: LD_INT 5
16174: PUSH
16175: LD_INT 6
16177: PUSH
16178: LD_INT 8
16180: PUSH
16181: LD_INT 11
16183: PUSH
16184: LD_INT 12
16186: PUSH
16187: LD_INT 15
16189: PUSH
16190: LD_INT 16
16192: PUSH
16193: LD_INT 20
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 23
16204: PUSH
16205: LD_INT 25
16207: PUSH
16208: LD_INT 26
16210: PUSH
16211: LD_INT 30
16213: PUSH
16214: LD_INT 31
16216: PUSH
16217: LD_INT 32
16219: PUSH
16220: LD_INT 36
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 101
16246: PUSH
16247: LD_INT 102
16249: PUSH
16250: LD_INT 105
16252: PUSH
16253: LD_INT 106
16255: PUSH
16256: LD_INT 108
16258: PUSH
16259: LD_INT 109
16261: PUSH
16262: LD_INT 112
16264: PUSH
16265: LD_INT 116
16267: PUSH
16268: LD_INT 117
16270: PUSH
16271: LD_INT 118
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: ST_TO_ADDR
16290: GO 18813
16292: LD_INT 7
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16412
16300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16301: LD_ADDR_VAR 0 2
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 4
16311: PUSH
16312: LD_INT 5
16314: PUSH
16315: LD_INT 7
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 15
16326: PUSH
16327: LD_INT 16
16329: PUSH
16330: LD_INT 20
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_INT 23
16341: PUSH
16342: LD_INT 25
16344: PUSH
16345: LD_INT 26
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 101
16366: PUSH
16367: LD_INT 102
16369: PUSH
16370: LD_INT 103
16372: PUSH
16373: LD_INT 105
16375: PUSH
16376: LD_INT 106
16378: PUSH
16379: LD_INT 108
16381: PUSH
16382: LD_INT 112
16384: PUSH
16385: LD_INT 116
16387: PUSH
16388: LD_INT 117
16390: PUSH
16391: LD_INT 118
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: ST_TO_ADDR
16410: GO 18813
16412: LD_INT 8
16414: DOUBLE
16415: EQUAL
16416: IFTRUE 16420
16418: GO 16560
16420: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16421: LD_ADDR_VAR 0 2
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 4
16431: PUSH
16432: LD_INT 5
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: LD_INT 7
16440: PUSH
16441: LD_INT 8
16443: PUSH
16444: LD_INT 11
16446: PUSH
16447: LD_INT 12
16449: PUSH
16450: LD_INT 15
16452: PUSH
16453: LD_INT 16
16455: PUSH
16456: LD_INT 20
16458: PUSH
16459: LD_INT 21
16461: PUSH
16462: LD_INT 22
16464: PUSH
16465: LD_INT 23
16467: PUSH
16468: LD_INT 25
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 30
16476: PUSH
16477: LD_INT 31
16479: PUSH
16480: LD_INT 32
16482: PUSH
16483: LD_INT 36
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 101
16510: PUSH
16511: LD_INT 102
16513: PUSH
16514: LD_INT 103
16516: PUSH
16517: LD_INT 105
16519: PUSH
16520: LD_INT 106
16522: PUSH
16523: LD_INT 108
16525: PUSH
16526: LD_INT 109
16528: PUSH
16529: LD_INT 112
16531: PUSH
16532: LD_INT 116
16534: PUSH
16535: LD_INT 117
16537: PUSH
16538: LD_INT 118
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: ST_TO_ADDR
16558: GO 18813
16560: LD_INT 9
16562: DOUBLE
16563: EQUAL
16564: IFTRUE 16568
16566: GO 16716
16568: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: LD_INT 4
16579: PUSH
16580: LD_INT 5
16582: PUSH
16583: LD_INT 6
16585: PUSH
16586: LD_INT 7
16588: PUSH
16589: LD_INT 8
16591: PUSH
16592: LD_INT 11
16594: PUSH
16595: LD_INT 12
16597: PUSH
16598: LD_INT 15
16600: PUSH
16601: LD_INT 16
16603: PUSH
16604: LD_INT 20
16606: PUSH
16607: LD_INT 21
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_INT 23
16615: PUSH
16616: LD_INT 25
16618: PUSH
16619: LD_INT 26
16621: PUSH
16622: LD_INT 28
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 31
16630: PUSH
16631: LD_INT 32
16633: PUSH
16634: LD_INT 36
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 101
16662: PUSH
16663: LD_INT 102
16665: PUSH
16666: LD_INT 103
16668: PUSH
16669: LD_INT 105
16671: PUSH
16672: LD_INT 106
16674: PUSH
16675: LD_INT 108
16677: PUSH
16678: LD_INT 109
16680: PUSH
16681: LD_INT 112
16683: PUSH
16684: LD_INT 114
16686: PUSH
16687: LD_INT 116
16689: PUSH
16690: LD_INT 117
16692: PUSH
16693: LD_INT 118
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: ST_TO_ADDR
16714: GO 18813
16716: LD_INT 10
16718: DOUBLE
16719: EQUAL
16720: IFTRUE 16724
16722: GO 16920
16724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: LD_INT 4
16735: PUSH
16736: LD_INT 5
16738: PUSH
16739: LD_INT 6
16741: PUSH
16742: LD_INT 7
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: LD_INT 9
16750: PUSH
16751: LD_INT 10
16753: PUSH
16754: LD_INT 11
16756: PUSH
16757: LD_INT 12
16759: PUSH
16760: LD_INT 13
16762: PUSH
16763: LD_INT 14
16765: PUSH
16766: LD_INT 15
16768: PUSH
16769: LD_INT 16
16771: PUSH
16772: LD_INT 17
16774: PUSH
16775: LD_INT 18
16777: PUSH
16778: LD_INT 19
16780: PUSH
16781: LD_INT 20
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 23
16792: PUSH
16793: LD_INT 24
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 26
16801: PUSH
16802: LD_INT 28
16804: PUSH
16805: LD_INT 30
16807: PUSH
16808: LD_INT 31
16810: PUSH
16811: LD_INT 32
16813: PUSH
16814: LD_INT 36
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 101
16850: PUSH
16851: LD_INT 102
16853: PUSH
16854: LD_INT 103
16856: PUSH
16857: LD_INT 104
16859: PUSH
16860: LD_INT 105
16862: PUSH
16863: LD_INT 106
16865: PUSH
16866: LD_INT 107
16868: PUSH
16869: LD_INT 108
16871: PUSH
16872: LD_INT 109
16874: PUSH
16875: LD_INT 110
16877: PUSH
16878: LD_INT 111
16880: PUSH
16881: LD_INT 112
16883: PUSH
16884: LD_INT 114
16886: PUSH
16887: LD_INT 116
16889: PUSH
16890: LD_INT 117
16892: PUSH
16893: LD_INT 118
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: ST_TO_ADDR
16918: GO 18813
16920: LD_INT 11
16922: DOUBLE
16923: EQUAL
16924: IFTRUE 16928
16926: GO 17132
16928: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 3
16939: PUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 5
16945: PUSH
16946: LD_INT 6
16948: PUSH
16949: LD_INT 7
16951: PUSH
16952: LD_INT 8
16954: PUSH
16955: LD_INT 9
16957: PUSH
16958: LD_INT 10
16960: PUSH
16961: LD_INT 11
16963: PUSH
16964: LD_INT 12
16966: PUSH
16967: LD_INT 13
16969: PUSH
16970: LD_INT 14
16972: PUSH
16973: LD_INT 15
16975: PUSH
16976: LD_INT 16
16978: PUSH
16979: LD_INT 17
16981: PUSH
16982: LD_INT 18
16984: PUSH
16985: LD_INT 19
16987: PUSH
16988: LD_INT 20
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_INT 23
16999: PUSH
17000: LD_INT 24
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 28
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 31
17017: PUSH
17018: LD_INT 32
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 36
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 101
17062: PUSH
17063: LD_INT 102
17065: PUSH
17066: LD_INT 103
17068: PUSH
17069: LD_INT 104
17071: PUSH
17072: LD_INT 105
17074: PUSH
17075: LD_INT 106
17077: PUSH
17078: LD_INT 107
17080: PUSH
17081: LD_INT 108
17083: PUSH
17084: LD_INT 109
17086: PUSH
17087: LD_INT 110
17089: PUSH
17090: LD_INT 111
17092: PUSH
17093: LD_INT 112
17095: PUSH
17096: LD_INT 114
17098: PUSH
17099: LD_INT 116
17101: PUSH
17102: LD_INT 117
17104: PUSH
17105: LD_INT 118
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: ST_TO_ADDR
17130: GO 18813
17132: LD_INT 12
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17360
17140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17141: LD_ADDR_VAR 0 2
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 3
17154: PUSH
17155: LD_INT 4
17157: PUSH
17158: LD_INT 5
17160: PUSH
17161: LD_INT 6
17163: PUSH
17164: LD_INT 7
17166: PUSH
17167: LD_INT 8
17169: PUSH
17170: LD_INT 9
17172: PUSH
17173: LD_INT 10
17175: PUSH
17176: LD_INT 11
17178: PUSH
17179: LD_INT 12
17181: PUSH
17182: LD_INT 13
17184: PUSH
17185: LD_INT 14
17187: PUSH
17188: LD_INT 15
17190: PUSH
17191: LD_INT 16
17193: PUSH
17194: LD_INT 17
17196: PUSH
17197: LD_INT 18
17199: PUSH
17200: LD_INT 19
17202: PUSH
17203: LD_INT 20
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_INT 23
17214: PUSH
17215: LD_INT 24
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 26
17223: PUSH
17224: LD_INT 27
17226: PUSH
17227: LD_INT 28
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 31
17235: PUSH
17236: LD_INT 32
17238: PUSH
17239: LD_INT 33
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 36
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 101
17286: PUSH
17287: LD_INT 102
17289: PUSH
17290: LD_INT 103
17292: PUSH
17293: LD_INT 104
17295: PUSH
17296: LD_INT 105
17298: PUSH
17299: LD_INT 106
17301: PUSH
17302: LD_INT 107
17304: PUSH
17305: LD_INT 108
17307: PUSH
17308: LD_INT 109
17310: PUSH
17311: LD_INT 110
17313: PUSH
17314: LD_INT 111
17316: PUSH
17317: LD_INT 112
17319: PUSH
17320: LD_INT 113
17322: PUSH
17323: LD_INT 114
17325: PUSH
17326: LD_INT 116
17328: PUSH
17329: LD_INT 117
17331: PUSH
17332: LD_INT 118
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: ST_TO_ADDR
17358: GO 18813
17360: LD_INT 13
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17576
17368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: LD_INT 4
17385: PUSH
17386: LD_INT 5
17388: PUSH
17389: LD_INT 8
17391: PUSH
17392: LD_INT 9
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 11
17400: PUSH
17401: LD_INT 12
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: LD_INT 15
17409: PUSH
17410: LD_INT 16
17412: PUSH
17413: LD_INT 17
17415: PUSH
17416: LD_INT 18
17418: PUSH
17419: LD_INT 19
17421: PUSH
17422: LD_INT 20
17424: PUSH
17425: LD_INT 21
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_INT 23
17433: PUSH
17434: LD_INT 24
17436: PUSH
17437: LD_INT 25
17439: PUSH
17440: LD_INT 26
17442: PUSH
17443: LD_INT 27
17445: PUSH
17446: LD_INT 28
17448: PUSH
17449: LD_INT 30
17451: PUSH
17452: LD_INT 31
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: LD_INT 33
17460: PUSH
17461: LD_INT 34
17463: PUSH
17464: LD_INT 36
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 101
17502: PUSH
17503: LD_INT 102
17505: PUSH
17506: LD_INT 103
17508: PUSH
17509: LD_INT 104
17511: PUSH
17512: LD_INT 105
17514: PUSH
17515: LD_INT 106
17517: PUSH
17518: LD_INT 107
17520: PUSH
17521: LD_INT 108
17523: PUSH
17524: LD_INT 109
17526: PUSH
17527: LD_INT 110
17529: PUSH
17530: LD_INT 111
17532: PUSH
17533: LD_INT 112
17535: PUSH
17536: LD_INT 113
17538: PUSH
17539: LD_INT 114
17541: PUSH
17542: LD_INT 116
17544: PUSH
17545: LD_INT 117
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
17574: GO 18813
17576: LD_INT 14
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17808
17584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 4
17601: PUSH
17602: LD_INT 5
17604: PUSH
17605: LD_INT 6
17607: PUSH
17608: LD_INT 7
17610: PUSH
17611: LD_INT 8
17613: PUSH
17614: LD_INT 9
17616: PUSH
17617: LD_INT 10
17619: PUSH
17620: LD_INT 11
17622: PUSH
17623: LD_INT 12
17625: PUSH
17626: LD_INT 13
17628: PUSH
17629: LD_INT 14
17631: PUSH
17632: LD_INT 15
17634: PUSH
17635: LD_INT 16
17637: PUSH
17638: LD_INT 17
17640: PUSH
17641: LD_INT 18
17643: PUSH
17644: LD_INT 19
17646: PUSH
17647: LD_INT 20
17649: PUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 22
17655: PUSH
17656: LD_INT 23
17658: PUSH
17659: LD_INT 24
17661: PUSH
17662: LD_INT 25
17664: PUSH
17665: LD_INT 26
17667: PUSH
17668: LD_INT 27
17670: PUSH
17671: LD_INT 28
17673: PUSH
17674: LD_INT 29
17676: PUSH
17677: LD_INT 30
17679: PUSH
17680: LD_INT 31
17682: PUSH
17683: LD_INT 32
17685: PUSH
17686: LD_INT 33
17688: PUSH
17689: LD_INT 34
17691: PUSH
17692: LD_INT 36
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 101
17734: PUSH
17735: LD_INT 102
17737: PUSH
17738: LD_INT 103
17740: PUSH
17741: LD_INT 104
17743: PUSH
17744: LD_INT 105
17746: PUSH
17747: LD_INT 106
17749: PUSH
17750: LD_INT 107
17752: PUSH
17753: LD_INT 108
17755: PUSH
17756: LD_INT 109
17758: PUSH
17759: LD_INT 110
17761: PUSH
17762: LD_INT 111
17764: PUSH
17765: LD_INT 112
17767: PUSH
17768: LD_INT 113
17770: PUSH
17771: LD_INT 114
17773: PUSH
17774: LD_INT 116
17776: PUSH
17777: LD_INT 117
17779: PUSH
17780: LD_INT 118
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 18813
17808: LD_INT 15
17810: DOUBLE
17811: EQUAL
17812: IFTRUE 17816
17814: GO 18040
17816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 3
17830: PUSH
17831: LD_INT 4
17833: PUSH
17834: LD_INT 5
17836: PUSH
17837: LD_INT 6
17839: PUSH
17840: LD_INT 7
17842: PUSH
17843: LD_INT 8
17845: PUSH
17846: LD_INT 9
17848: PUSH
17849: LD_INT 10
17851: PUSH
17852: LD_INT 11
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 13
17860: PUSH
17861: LD_INT 14
17863: PUSH
17864: LD_INT 15
17866: PUSH
17867: LD_INT 16
17869: PUSH
17870: LD_INT 17
17872: PUSH
17873: LD_INT 18
17875: PUSH
17876: LD_INT 19
17878: PUSH
17879: LD_INT 20
17881: PUSH
17882: LD_INT 21
17884: PUSH
17885: LD_INT 22
17887: PUSH
17888: LD_INT 23
17890: PUSH
17891: LD_INT 24
17893: PUSH
17894: LD_INT 25
17896: PUSH
17897: LD_INT 26
17899: PUSH
17900: LD_INT 27
17902: PUSH
17903: LD_INT 28
17905: PUSH
17906: LD_INT 29
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 31
17914: PUSH
17915: LD_INT 32
17917: PUSH
17918: LD_INT 33
17920: PUSH
17921: LD_INT 34
17923: PUSH
17924: LD_INT 36
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 101
17966: PUSH
17967: LD_INT 102
17969: PUSH
17970: LD_INT 103
17972: PUSH
17973: LD_INT 104
17975: PUSH
17976: LD_INT 105
17978: PUSH
17979: LD_INT 106
17981: PUSH
17982: LD_INT 107
17984: PUSH
17985: LD_INT 108
17987: PUSH
17988: LD_INT 109
17990: PUSH
17991: LD_INT 110
17993: PUSH
17994: LD_INT 111
17996: PUSH
17997: LD_INT 112
17999: PUSH
18000: LD_INT 113
18002: PUSH
18003: LD_INT 114
18005: PUSH
18006: LD_INT 116
18008: PUSH
18009: LD_INT 117
18011: PUSH
18012: LD_INT 118
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: ST_TO_ADDR
18038: GO 18813
18040: LD_INT 16
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18184
18048: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 4
18059: PUSH
18060: LD_INT 5
18062: PUSH
18063: LD_INT 7
18065: PUSH
18066: LD_INT 11
18068: PUSH
18069: LD_INT 12
18071: PUSH
18072: LD_INT 15
18074: PUSH
18075: LD_INT 16
18077: PUSH
18078: LD_INT 20
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 22
18086: PUSH
18087: LD_INT 23
18089: PUSH
18090: LD_INT 25
18092: PUSH
18093: LD_INT 26
18095: PUSH
18096: LD_INT 30
18098: PUSH
18099: LD_INT 31
18101: PUSH
18102: LD_INT 32
18104: PUSH
18105: LD_INT 33
18107: PUSH
18108: LD_INT 34
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 101
18134: PUSH
18135: LD_INT 102
18137: PUSH
18138: LD_INT 103
18140: PUSH
18141: LD_INT 106
18143: PUSH
18144: LD_INT 108
18146: PUSH
18147: LD_INT 112
18149: PUSH
18150: LD_INT 113
18152: PUSH
18153: LD_INT 114
18155: PUSH
18156: LD_INT 116
18158: PUSH
18159: LD_INT 117
18161: PUSH
18162: LD_INT 118
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: ST_TO_ADDR
18182: GO 18813
18184: LD_INT 17
18186: DOUBLE
18187: EQUAL
18188: IFTRUE 18192
18190: GO 18416
18192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18193: LD_ADDR_VAR 0 2
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 3
18206: PUSH
18207: LD_INT 4
18209: PUSH
18210: LD_INT 5
18212: PUSH
18213: LD_INT 6
18215: PUSH
18216: LD_INT 7
18218: PUSH
18219: LD_INT 8
18221: PUSH
18222: LD_INT 9
18224: PUSH
18225: LD_INT 10
18227: PUSH
18228: LD_INT 11
18230: PUSH
18231: LD_INT 12
18233: PUSH
18234: LD_INT 13
18236: PUSH
18237: LD_INT 14
18239: PUSH
18240: LD_INT 15
18242: PUSH
18243: LD_INT 16
18245: PUSH
18246: LD_INT 17
18248: PUSH
18249: LD_INT 18
18251: PUSH
18252: LD_INT 19
18254: PUSH
18255: LD_INT 20
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_INT 23
18266: PUSH
18267: LD_INT 24
18269: PUSH
18270: LD_INT 25
18272: PUSH
18273: LD_INT 26
18275: PUSH
18276: LD_INT 27
18278: PUSH
18279: LD_INT 28
18281: PUSH
18282: LD_INT 29
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: LD_INT 31
18290: PUSH
18291: LD_INT 32
18293: PUSH
18294: LD_INT 33
18296: PUSH
18297: LD_INT 34
18299: PUSH
18300: LD_INT 36
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 101
18342: PUSH
18343: LD_INT 102
18345: PUSH
18346: LD_INT 103
18348: PUSH
18349: LD_INT 104
18351: PUSH
18352: LD_INT 105
18354: PUSH
18355: LD_INT 106
18357: PUSH
18358: LD_INT 107
18360: PUSH
18361: LD_INT 108
18363: PUSH
18364: LD_INT 109
18366: PUSH
18367: LD_INT 110
18369: PUSH
18370: LD_INT 111
18372: PUSH
18373: LD_INT 112
18375: PUSH
18376: LD_INT 113
18378: PUSH
18379: LD_INT 114
18381: PUSH
18382: LD_INT 116
18384: PUSH
18385: LD_INT 117
18387: PUSH
18388: LD_INT 118
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: ST_TO_ADDR
18414: GO 18813
18416: LD_INT 18
18418: DOUBLE
18419: EQUAL
18420: IFTRUE 18424
18422: GO 18572
18424: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18425: LD_ADDR_VAR 0 2
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: LD_INT 4
18435: PUSH
18436: LD_INT 5
18438: PUSH
18439: LD_INT 7
18441: PUSH
18442: LD_INT 11
18444: PUSH
18445: LD_INT 12
18447: PUSH
18448: LD_INT 15
18450: PUSH
18451: LD_INT 16
18453: PUSH
18454: LD_INT 20
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 22
18462: PUSH
18463: LD_INT 23
18465: PUSH
18466: LD_INT 25
18468: PUSH
18469: LD_INT 26
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 31
18477: PUSH
18478: LD_INT 32
18480: PUSH
18481: LD_INT 33
18483: PUSH
18484: LD_INT 34
18486: PUSH
18487: LD_INT 35
18489: PUSH
18490: LD_INT 36
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 101
18518: PUSH
18519: LD_INT 102
18521: PUSH
18522: LD_INT 103
18524: PUSH
18525: LD_INT 106
18527: PUSH
18528: LD_INT 108
18530: PUSH
18531: LD_INT 112
18533: PUSH
18534: LD_INT 113
18536: PUSH
18537: LD_INT 114
18539: PUSH
18540: LD_INT 115
18542: PUSH
18543: LD_INT 116
18545: PUSH
18546: LD_INT 117
18548: PUSH
18549: LD_INT 118
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 18813
18572: LD_INT 19
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18812
18580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: LD_INT 5
18600: PUSH
18601: LD_INT 6
18603: PUSH
18604: LD_INT 7
18606: PUSH
18607: LD_INT 8
18609: PUSH
18610: LD_INT 9
18612: PUSH
18613: LD_INT 10
18615: PUSH
18616: LD_INT 11
18618: PUSH
18619: LD_INT 12
18621: PUSH
18622: LD_INT 13
18624: PUSH
18625: LD_INT 14
18627: PUSH
18628: LD_INT 15
18630: PUSH
18631: LD_INT 16
18633: PUSH
18634: LD_INT 17
18636: PUSH
18637: LD_INT 18
18639: PUSH
18640: LD_INT 19
18642: PUSH
18643: LD_INT 20
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_INT 23
18654: PUSH
18655: LD_INT 24
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 26
18663: PUSH
18664: LD_INT 27
18666: PUSH
18667: LD_INT 28
18669: PUSH
18670: LD_INT 29
18672: PUSH
18673: LD_INT 30
18675: PUSH
18676: LD_INT 31
18678: PUSH
18679: LD_INT 32
18681: PUSH
18682: LD_INT 33
18684: PUSH
18685: LD_INT 34
18687: PUSH
18688: LD_INT 35
18690: PUSH
18691: LD_INT 36
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 101
18734: PUSH
18735: LD_INT 102
18737: PUSH
18738: LD_INT 103
18740: PUSH
18741: LD_INT 104
18743: PUSH
18744: LD_INT 105
18746: PUSH
18747: LD_INT 106
18749: PUSH
18750: LD_INT 107
18752: PUSH
18753: LD_INT 108
18755: PUSH
18756: LD_INT 109
18758: PUSH
18759: LD_INT 110
18761: PUSH
18762: LD_INT 111
18764: PUSH
18765: LD_INT 112
18767: PUSH
18768: LD_INT 113
18770: PUSH
18771: LD_INT 114
18773: PUSH
18774: LD_INT 115
18776: PUSH
18777: LD_INT 116
18779: PUSH
18780: LD_INT 117
18782: PUSH
18783: LD_INT 118
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: ST_TO_ADDR
18810: GO 18813
18812: POP
// end else
18813: GO 19044
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: LD_INT 5
18834: PUSH
18835: LD_INT 6
18837: PUSH
18838: LD_INT 7
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 13
18858: PUSH
18859: LD_INT 14
18861: PUSH
18862: LD_INT 15
18864: PUSH
18865: LD_INT 16
18867: PUSH
18868: LD_INT 17
18870: PUSH
18871: LD_INT 18
18873: PUSH
18874: LD_INT 19
18876: PUSH
18877: LD_INT 20
18879: PUSH
18880: LD_INT 21
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_INT 23
18888: PUSH
18889: LD_INT 24
18891: PUSH
18892: LD_INT 25
18894: PUSH
18895: LD_INT 26
18897: PUSH
18898: LD_INT 27
18900: PUSH
18901: LD_INT 28
18903: PUSH
18904: LD_INT 29
18906: PUSH
18907: LD_INT 30
18909: PUSH
18910: LD_INT 31
18912: PUSH
18913: LD_INT 32
18915: PUSH
18916: LD_INT 33
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 35
18924: PUSH
18925: LD_INT 36
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 101
18968: PUSH
18969: LD_INT 102
18971: PUSH
18972: LD_INT 103
18974: PUSH
18975: LD_INT 104
18977: PUSH
18978: LD_INT 105
18980: PUSH
18981: LD_INT 106
18983: PUSH
18984: LD_INT 107
18986: PUSH
18987: LD_INT 108
18989: PUSH
18990: LD_INT 109
18992: PUSH
18993: LD_INT 110
18995: PUSH
18996: LD_INT 111
18998: PUSH
18999: LD_INT 112
19001: PUSH
19002: LD_INT 113
19004: PUSH
19005: LD_INT 114
19007: PUSH
19008: LD_INT 115
19010: PUSH
19011: LD_INT 116
19013: PUSH
19014: LD_INT 117
19016: PUSH
19017: LD_INT 118
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// if result then
19044: LD_VAR 0 2
19048: IFFALSE 19834
// begin normal :=  ;
19050: LD_ADDR_VAR 0 5
19054: PUSH
19055: LD_STRING 
19057: ST_TO_ADDR
// hardcore :=  ;
19058: LD_ADDR_VAR 0 6
19062: PUSH
19063: LD_STRING 
19065: ST_TO_ADDR
// active :=  ;
19066: LD_ADDR_VAR 0 7
19070: PUSH
19071: LD_STRING 
19073: ST_TO_ADDR
// for i = 1 to normalCounter do
19074: LD_ADDR_VAR 0 8
19078: PUSH
19079: DOUBLE
19080: LD_INT 1
19082: DEC
19083: ST_TO_ADDR
19084: LD_EXP 48
19088: PUSH
19089: FOR_TO
19090: IFFALSE 19191
// begin tmp := 0 ;
19092: LD_ADDR_VAR 0 3
19096: PUSH
19097: LD_STRING 0
19099: ST_TO_ADDR
// if result [ 1 ] then
19100: LD_VAR 0 2
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: IFFALSE 19173
// if result [ 1 ] [ 1 ] = i then
19110: LD_VAR 0 2
19114: PUSH
19115: LD_INT 1
19117: ARRAY
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PUSH
19123: LD_VAR 0 8
19127: EQUAL
19128: IFFALSE 19173
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_VAR 0 2
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: LD_VAR 0 2
19147: PUSH
19148: LD_INT 1
19150: ARRAY
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 3
19159: PPUSH
19160: CALL_OW 1
19164: ST_TO_ADDR
// tmp := 1 ;
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_STRING 1
19172: ST_TO_ADDR
// end ; normal := normal & tmp ;
19173: LD_ADDR_VAR 0 5
19177: PUSH
19178: LD_VAR 0 5
19182: PUSH
19183: LD_VAR 0 3
19187: STR
19188: ST_TO_ADDR
// end ;
19189: GO 19089
19191: POP
19192: POP
// for i = 1 to hardcoreCounter do
19193: LD_ADDR_VAR 0 8
19197: PUSH
19198: DOUBLE
19199: LD_INT 1
19201: DEC
19202: ST_TO_ADDR
19203: LD_EXP 49
19207: PUSH
19208: FOR_TO
19209: IFFALSE 19314
// begin tmp := 0 ;
19211: LD_ADDR_VAR 0 3
19215: PUSH
19216: LD_STRING 0
19218: ST_TO_ADDR
// if result [ 2 ] then
19219: LD_VAR 0 2
19223: PUSH
19224: LD_INT 2
19226: ARRAY
19227: IFFALSE 19296
// if result [ 2 ] [ 1 ] = 100 + i then
19229: LD_VAR 0 2
19233: PUSH
19234: LD_INT 2
19236: ARRAY
19237: PUSH
19238: LD_INT 1
19240: ARRAY
19241: PUSH
19242: LD_INT 100
19244: PUSH
19245: LD_VAR 0 8
19249: PLUS
19250: EQUAL
19251: IFFALSE 19296
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19253: LD_ADDR_VAR 0 2
19257: PUSH
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_INT 2
19265: PPUSH
19266: LD_VAR 0 2
19270: PUSH
19271: LD_INT 2
19273: ARRAY
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 3
19282: PPUSH
19283: CALL_OW 1
19287: ST_TO_ADDR
// tmp := 1 ;
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_STRING 1
19295: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19296: LD_ADDR_VAR 0 6
19300: PUSH
19301: LD_VAR 0 6
19305: PUSH
19306: LD_VAR 0 3
19310: STR
19311: ST_TO_ADDR
// end ;
19312: GO 19208
19314: POP
19315: POP
// if isGameLoad then
19316: LD_VAR 0 1
19320: IFFALSE 19795
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19322: LD_ADDR_VAR 0 4
19326: PUSH
19327: LD_EXP 52
19331: PUSH
19332: LD_EXP 51
19336: PUSH
19337: LD_EXP 53
19341: PUSH
19342: LD_EXP 50
19346: PUSH
19347: LD_EXP 54
19351: PUSH
19352: LD_EXP 55
19356: PUSH
19357: LD_EXP 56
19361: PUSH
19362: LD_EXP 57
19366: PUSH
19367: LD_EXP 58
19371: PUSH
19372: LD_EXP 59
19376: PUSH
19377: LD_EXP 60
19381: PUSH
19382: LD_EXP 61
19386: PUSH
19387: LD_EXP 62
19391: PUSH
19392: LD_EXP 63
19396: PUSH
19397: LD_EXP 71
19401: PUSH
19402: LD_EXP 72
19406: PUSH
19407: LD_EXP 73
19411: PUSH
19412: LD_EXP 74
19416: PUSH
19417: LD_EXP 76
19421: PUSH
19422: LD_EXP 77
19426: PUSH
19427: LD_EXP 78
19431: PUSH
19432: LD_EXP 81
19436: PUSH
19437: LD_EXP 83
19441: PUSH
19442: LD_EXP 84
19446: PUSH
19447: LD_EXP 85
19451: PUSH
19452: LD_EXP 87
19456: PUSH
19457: LD_EXP 88
19461: PUSH
19462: LD_EXP 91
19466: PUSH
19467: LD_EXP 92
19471: PUSH
19472: LD_EXP 93
19476: PUSH
19477: LD_EXP 94
19481: PUSH
19482: LD_EXP 95
19486: PUSH
19487: LD_EXP 96
19491: PUSH
19492: LD_EXP 97
19496: PUSH
19497: LD_EXP 98
19501: PUSH
19502: LD_EXP 99
19506: PUSH
19507: LD_EXP 64
19511: PUSH
19512: LD_EXP 65
19516: PUSH
19517: LD_EXP 68
19521: PUSH
19522: LD_EXP 69
19526: PUSH
19527: LD_EXP 70
19531: PUSH
19532: LD_EXP 66
19536: PUSH
19537: LD_EXP 67
19541: PUSH
19542: LD_EXP 75
19546: PUSH
19547: LD_EXP 79
19551: PUSH
19552: LD_EXP 80
19556: PUSH
19557: LD_EXP 82
19561: PUSH
19562: LD_EXP 86
19566: PUSH
19567: LD_EXP 89
19571: PUSH
19572: LD_EXP 90
19576: PUSH
19577: LD_EXP 100
19581: PUSH
19582: LD_EXP 101
19586: PUSH
19587: LD_EXP 102
19591: PUSH
19592: LD_EXP 103
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: ST_TO_ADDR
// tmp :=  ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_STRING 
19660: ST_TO_ADDR
// for i = 1 to normalCounter do
19661: LD_ADDR_VAR 0 8
19665: PUSH
19666: DOUBLE
19667: LD_INT 1
19669: DEC
19670: ST_TO_ADDR
19671: LD_EXP 48
19675: PUSH
19676: FOR_TO
19677: IFFALSE 19713
// begin if flags [ i ] then
19679: LD_VAR 0 4
19683: PUSH
19684: LD_VAR 0 8
19688: ARRAY
19689: IFFALSE 19711
// tmp := tmp & i & ; ;
19691: LD_ADDR_VAR 0 3
19695: PUSH
19696: LD_VAR 0 3
19700: PUSH
19701: LD_VAR 0 8
19705: STR
19706: PUSH
19707: LD_STRING ;
19709: STR
19710: ST_TO_ADDR
// end ;
19711: GO 19676
19713: POP
19714: POP
// for i = 1 to hardcoreCounter do
19715: LD_ADDR_VAR 0 8
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_EXP 49
19729: PUSH
19730: FOR_TO
19731: IFFALSE 19777
// begin if flags [ normalCounter + i ] then
19733: LD_VAR 0 4
19737: PUSH
19738: LD_EXP 48
19742: PUSH
19743: LD_VAR 0 8
19747: PLUS
19748: ARRAY
19749: IFFALSE 19775
// tmp := tmp & ( 100 + i ) & ; ;
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_INT 100
19763: PUSH
19764: LD_VAR 0 8
19768: PLUS
19769: STR
19770: PUSH
19771: LD_STRING ;
19773: STR
19774: ST_TO_ADDR
// end ;
19775: GO 19730
19777: POP
19778: POP
// if tmp then
19779: LD_VAR 0 3
19783: IFFALSE 19795
// active := tmp ;
19785: LD_ADDR_VAR 0 7
19789: PUSH
19790: LD_VAR 0 3
19794: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19795: LD_STRING getStreamItemsFromMission("
19797: PUSH
19798: LD_VAR 0 5
19802: STR
19803: PUSH
19804: LD_STRING ","
19806: STR
19807: PUSH
19808: LD_VAR 0 6
19812: STR
19813: PUSH
19814: LD_STRING ","
19816: STR
19817: PUSH
19818: LD_VAR 0 7
19822: STR
19823: PUSH
19824: LD_STRING ")
19826: STR
19827: PPUSH
19828: CALL_OW 559
// end else
19832: GO 19841
// ToLua ( getStreamItemsFromMission("","","") ) ;
19834: LD_STRING getStreamItemsFromMission("","","")
19836: PPUSH
19837: CALL_OW 559
// end ;
19841: LD_VAR 0 2
19845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19846: LD_EXP 47
19850: PUSH
19851: LD_EXP 52
19855: AND
19856: IFFALSE 19980
19858: GO 19860
19860: DISABLE
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
// begin enable ;
19865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19866: LD_ADDR_VAR 0 2
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_OWVAR 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: LD_INT 34
19888: PUSH
19889: LD_INT 7
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 34
19898: PUSH
19899: LD_INT 45
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 34
19908: PUSH
19909: LD_INT 28
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 34
19918: PUSH
19919: LD_INT 47
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: ST_TO_ADDR
// if not tmp then
19942: LD_VAR 0 2
19946: NOT
19947: IFFALSE 19951
// exit ;
19949: GO 19980
// for i in tmp do
19951: LD_ADDR_VAR 0 1
19955: PUSH
19956: LD_VAR 0 2
19960: PUSH
19961: FOR_IN
19962: IFFALSE 19978
// begin SetLives ( i , 0 ) ;
19964: LD_VAR 0 1
19968: PPUSH
19969: LD_INT 0
19971: PPUSH
19972: CALL_OW 234
// end ;
19976: GO 19961
19978: POP
19979: POP
// end ;
19980: PPOPN 2
19982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19983: LD_EXP 47
19987: PUSH
19988: LD_EXP 53
19992: AND
19993: IFFALSE 20077
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
// begin enable ;
20002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20003: LD_ADDR_VAR 0 2
20007: PUSH
20008: LD_INT 22
20010: PUSH
20011: LD_OWVAR 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 32
20022: PUSH
20023: LD_INT 3
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: ST_TO_ADDR
// if not tmp then
20039: LD_VAR 0 2
20043: NOT
20044: IFFALSE 20048
// exit ;
20046: GO 20077
// for i in tmp do
20048: LD_ADDR_VAR 0 1
20052: PUSH
20053: LD_VAR 0 2
20057: PUSH
20058: FOR_IN
20059: IFFALSE 20075
// begin SetLives ( i , 0 ) ;
20061: LD_VAR 0 1
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 234
// end ;
20073: GO 20058
20075: POP
20076: POP
// end ;
20077: PPOPN 2
20079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20080: LD_EXP 47
20084: PUSH
20085: LD_EXP 50
20089: AND
20090: IFFALSE 20183
20092: GO 20094
20094: DISABLE
20095: LD_INT 0
20097: PPUSH
// begin enable ;
20098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20099: LD_ADDR_VAR 0 1
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_OWVAR 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 25
20121: PUSH
20122: LD_INT 5
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 25
20131: PUSH
20132: LD_INT 9
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 25
20141: PUSH
20142: LD_INT 8
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20181
// begin SetClass ( i , 1 ) ;
20167: LD_VAR 0 1
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 336
// end ;
20179: GO 20164
20181: POP
20182: POP
// end ;
20183: PPOPN 1
20185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20186: LD_EXP 47
20190: PUSH
20191: LD_EXP 51
20195: AND
20196: PUSH
20197: LD_OWVAR 65
20201: PUSH
20202: LD_INT 7
20204: LESS
20205: AND
20206: IFFALSE 20220
20208: GO 20210
20210: DISABLE
// begin enable ;
20211: ENABLE
// game_speed := 7 ;
20212: LD_ADDR_OWVAR 65
20216: PUSH
20217: LD_INT 7
20219: ST_TO_ADDR
// end ;
20220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20221: LD_EXP 47
20225: PUSH
20226: LD_EXP 54
20230: AND
20231: IFFALSE 20433
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
20240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_INT 81
20248: PUSH
20249: LD_OWVAR 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 21
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: ST_TO_ADDR
// if not tmp then
20277: LD_VAR 0 3
20281: NOT
20282: IFFALSE 20286
// exit ;
20284: GO 20433
// if tmp > 5 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 5
20293: GREATER
20294: IFFALSE 20306
// k := 5 else
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 5
20303: ST_TO_ADDR
20304: GO 20316
// k := tmp ;
20306: LD_ADDR_VAR 0 2
20310: PUSH
20311: LD_VAR 0 3
20315: ST_TO_ADDR
// for i := 1 to k do
20316: LD_ADDR_VAR 0 1
20320: PUSH
20321: DOUBLE
20322: LD_INT 1
20324: DEC
20325: ST_TO_ADDR
20326: LD_VAR 0 2
20330: PUSH
20331: FOR_TO
20332: IFFALSE 20431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20334: LD_VAR 0 3
20338: PUSH
20339: LD_VAR 0 1
20343: ARRAY
20344: PPUSH
20345: LD_VAR 0 1
20349: PUSH
20350: LD_INT 4
20352: MOD
20353: PUSH
20354: LD_INT 1
20356: PLUS
20357: PPUSH
20358: CALL_OW 259
20362: PUSH
20363: LD_INT 10
20365: LESS
20366: IFFALSE 20429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20368: LD_VAR 0 3
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: PPUSH
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 4
20386: MOD
20387: PUSH
20388: LD_INT 1
20390: PLUS
20391: PPUSH
20392: LD_VAR 0 3
20396: PUSH
20397: LD_VAR 0 1
20401: ARRAY
20402: PPUSH
20403: LD_VAR 0 1
20407: PUSH
20408: LD_INT 4
20410: MOD
20411: PUSH
20412: LD_INT 1
20414: PLUS
20415: PPUSH
20416: CALL_OW 259
20420: PUSH
20421: LD_INT 1
20423: PLUS
20424: PPUSH
20425: CALL_OW 237
20429: GO 20331
20431: POP
20432: POP
// end ;
20433: PPOPN 3
20435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20436: LD_EXP 47
20440: PUSH
20441: LD_EXP 55
20445: AND
20446: IFFALSE 20466
20448: GO 20450
20450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20451: LD_INT 4
20453: PPUSH
20454: LD_OWVAR 2
20458: PPUSH
20459: LD_INT 0
20461: PPUSH
20462: CALL_OW 324
20466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20467: LD_EXP 47
20471: PUSH
20472: LD_EXP 84
20476: AND
20477: IFFALSE 20497
20479: GO 20481
20481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20482: LD_INT 19
20484: PPUSH
20485: LD_OWVAR 2
20489: PPUSH
20490: LD_INT 0
20492: PPUSH
20493: CALL_OW 324
20497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20498: LD_EXP 47
20502: PUSH
20503: LD_EXP 56
20507: AND
20508: IFFALSE 20610
20510: GO 20512
20512: DISABLE
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
// begin enable ;
20517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20518: LD_ADDR_VAR 0 2
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_OWVAR 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 34
20540: PUSH
20541: LD_INT 11
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 34
20550: PUSH
20551: LD_INT 30
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: ST_TO_ADDR
// if not tmp then
20572: LD_VAR 0 2
20576: NOT
20577: IFFALSE 20581
// exit ;
20579: GO 20610
// for i in tmp do
20581: LD_ADDR_VAR 0 1
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20608
// begin SetLives ( i , 0 ) ;
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_INT 0
20601: PPUSH
20602: CALL_OW 234
// end ;
20606: GO 20591
20608: POP
20609: POP
// end ;
20610: PPOPN 2
20612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20613: LD_EXP 47
20617: PUSH
20618: LD_EXP 57
20622: AND
20623: IFFALSE 20643
20625: GO 20627
20627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20628: LD_INT 32
20630: PPUSH
20631: LD_OWVAR 2
20635: PPUSH
20636: LD_INT 0
20638: PPUSH
20639: CALL_OW 324
20643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20644: LD_EXP 47
20648: PUSH
20649: LD_EXP 58
20653: AND
20654: IFFALSE 20835
20656: GO 20658
20658: DISABLE
20659: LD_INT 0
20661: PPUSH
20662: PPUSH
20663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_OWVAR 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 33
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PPUSH
20695: CALL_OW 69
20699: ST_TO_ADDR
// if not tmp then
20700: LD_VAR 0 2
20704: NOT
20705: IFFALSE 20709
// exit ;
20707: GO 20835
// side := 0 ;
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: LD_INT 0
20716: ST_TO_ADDR
// for i := 1 to 8 do
20717: LD_ADDR_VAR 0 1
20721: PUSH
20722: DOUBLE
20723: LD_INT 1
20725: DEC
20726: ST_TO_ADDR
20727: LD_INT 8
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20733: LD_OWVAR 2
20737: PUSH
20738: LD_VAR 0 1
20742: NONEQUAL
20743: PUSH
20744: LD_OWVAR 2
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL_OW 81
20758: PUSH
20759: LD_INT 2
20761: EQUAL
20762: AND
20763: IFFALSE 20777
// begin side := i ;
20765: LD_ADDR_VAR 0 3
20769: PUSH
20770: LD_VAR 0 1
20774: ST_TO_ADDR
// break ;
20775: GO 20779
// end ;
20777: GO 20730
20779: POP
20780: POP
// if not side then
20781: LD_VAR 0 3
20785: NOT
20786: IFFALSE 20790
// exit ;
20788: GO 20835
// for i := 1 to tmp do
20790: LD_ADDR_VAR 0 1
20794: PUSH
20795: DOUBLE
20796: LD_INT 1
20798: DEC
20799: ST_TO_ADDR
20800: LD_VAR 0 2
20804: PUSH
20805: FOR_TO
20806: IFFALSE 20833
// if Prob ( 60 ) then
20808: LD_INT 60
20810: PPUSH
20811: CALL_OW 13
20815: IFFALSE 20831
// SetSide ( i , side ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: CALL_OW 235
20831: GO 20805
20833: POP
20834: POP
// end ;
20835: PPOPN 3
20837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20838: LD_EXP 47
20842: PUSH
20843: LD_EXP 60
20847: AND
20848: IFFALSE 20967
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: LD_INT 23
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 257
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 3
20931: PUSH
20932: LD_INT 4
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: IN
20941: IFFALSE 20963
// SetClass ( un , rand ( 1 , 4 ) ) ;
20943: LD_VAR 0 1
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: LD_INT 4
20953: PPUSH
20954: CALL_OW 12
20958: PPUSH
20959: CALL_OW 336
20963: GO 20910
20965: POP
20966: POP
// end ;
20967: PPOPN 1
20969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20970: LD_EXP 47
20974: PUSH
20975: LD_EXP 59
20979: AND
20980: IFFALSE 21059
20982: GO 20984
20984: DISABLE
20985: LD_INT 0
20987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20988: LD_ADDR_VAR 0 1
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_OWVAR 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 21
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// if not tmp then
21024: LD_VAR 0 1
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21033: LD_VAR 0 1
21037: PUSH
21038: LD_INT 1
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 12
21050: ARRAY
21051: PPUSH
21052: LD_INT 100
21054: PPUSH
21055: CALL_OW 234
// end ;
21059: PPOPN 1
21061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21062: LD_EXP 47
21066: PUSH
21067: LD_EXP 61
21071: AND
21072: IFFALSE 21170
21074: GO 21076
21076: DISABLE
21077: LD_INT 0
21079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21080: LD_ADDR_VAR 0 1
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 1
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 1
21132: PPUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 12
21142: ARRAY
21143: PPUSH
21144: LD_INT 1
21146: PPUSH
21147: LD_INT 4
21149: PPUSH
21150: CALL_OW 12
21154: PPUSH
21155: LD_INT 3000
21157: PPUSH
21158: LD_INT 9000
21160: PPUSH
21161: CALL_OW 12
21165: PPUSH
21166: CALL_OW 492
// end ;
21170: PPOPN 1
21172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21173: LD_EXP 47
21177: PUSH
21178: LD_EXP 62
21182: AND
21183: IFFALSE 21203
21185: GO 21187
21187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21188: LD_INT 1
21190: PPUSH
21191: LD_OWVAR 2
21195: PPUSH
21196: LD_INT 0
21198: PPUSH
21199: CALL_OW 324
21203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21204: LD_EXP 47
21208: PUSH
21209: LD_EXP 63
21213: AND
21214: IFFALSE 21297
21216: GO 21218
21218: DISABLE
21219: LD_INT 0
21221: PPUSH
21222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21223: LD_ADDR_VAR 0 2
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_OWVAR 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: ST_TO_ADDR
// if not tmp then
21259: LD_VAR 0 2
21263: NOT
21264: IFFALSE 21268
// exit ;
21266: GO 21297
// for i in tmp do
21268: LD_ADDR_VAR 0 1
21272: PUSH
21273: LD_VAR 0 2
21277: PUSH
21278: FOR_IN
21279: IFFALSE 21295
// SetBLevel ( i , 10 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_INT 10
21288: PPUSH
21289: CALL_OW 241
21293: GO 21278
21295: POP
21296: POP
// end ;
21297: PPOPN 2
21299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21300: LD_EXP 47
21304: PUSH
21305: LD_EXP 64
21309: AND
21310: IFFALSE 21421
21312: GO 21314
21314: DISABLE
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21320: LD_ADDR_VAR 0 3
21324: PUSH
21325: LD_INT 22
21327: PUSH
21328: LD_OWVAR 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 25
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PPUSH
21351: CALL_OW 69
21355: ST_TO_ADDR
// if not tmp then
21356: LD_VAR 0 3
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21421
// un := tmp [ rand ( 1 , tmp ) ] ;
21365: LD_ADDR_VAR 0 2
21369: PUSH
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 1
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: CALL_OW 12
21387: ARRAY
21388: ST_TO_ADDR
// if Crawls ( un ) then
21389: LD_VAR 0 2
21393: PPUSH
21394: CALL_OW 318
21398: IFFALSE 21409
// ComWalk ( un ) ;
21400: LD_VAR 0 2
21404: PPUSH
21405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_INT 5
21416: PPUSH
21417: CALL_OW 336
// end ;
21421: PPOPN 3
21423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21424: LD_EXP 47
21428: PUSH
21429: LD_EXP 65
21433: AND
21434: PUSH
21435: LD_OWVAR 67
21439: PUSH
21440: LD_INT 4
21442: LESS
21443: AND
21444: IFFALSE 21463
21446: GO 21448
21448: DISABLE
// begin Difficulty := Difficulty + 1 ;
21449: LD_ADDR_OWVAR 67
21453: PUSH
21454: LD_OWVAR 67
21458: PUSH
21459: LD_INT 1
21461: PLUS
21462: ST_TO_ADDR
// end ;
21463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21464: LD_EXP 47
21468: PUSH
21469: LD_EXP 66
21473: AND
21474: IFFALSE 21577
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
// begin for i := 1 to 5 do
21482: LD_ADDR_VAR 0 1
21486: PUSH
21487: DOUBLE
21488: LD_INT 1
21490: DEC
21491: ST_TO_ADDR
21492: LD_INT 5
21494: PUSH
21495: FOR_TO
21496: IFFALSE 21575
// begin uc_nation := nation_nature ;
21498: LD_ADDR_OWVAR 21
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// uc_side := 0 ;
21506: LD_ADDR_OWVAR 20
21510: PUSH
21511: LD_INT 0
21513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21514: LD_ADDR_OWVAR 29
21518: PUSH
21519: LD_INT 12
21521: PUSH
21522: LD_INT 12
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// hc_agressivity := 20 ;
21529: LD_ADDR_OWVAR 35
21533: PUSH
21534: LD_INT 20
21536: ST_TO_ADDR
// hc_class := class_tiger ;
21537: LD_ADDR_OWVAR 28
21541: PUSH
21542: LD_INT 14
21544: ST_TO_ADDR
// hc_gallery :=  ;
21545: LD_ADDR_OWVAR 33
21549: PUSH
21550: LD_STRING 
21552: ST_TO_ADDR
// hc_name :=  ;
21553: LD_ADDR_OWVAR 26
21557: PUSH
21558: LD_STRING 
21560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21561: CALL_OW 44
21565: PPUSH
21566: LD_INT 0
21568: PPUSH
21569: CALL_OW 51
// end ;
21573: GO 21495
21575: POP
21576: POP
// end ;
21577: PPOPN 1
21579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21580: LD_EXP 47
21584: PUSH
21585: LD_EXP 67
21589: AND
21590: IFFALSE 21599
21592: GO 21594
21594: DISABLE
// StreamSibBomb ;
21595: CALL 21600 0 0
21599: END
// export function StreamSibBomb ; var i , x , y ; begin
21600: LD_INT 0
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
// result := false ;
21606: LD_ADDR_VAR 0 1
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// for i := 1 to 16 do
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_INT 16
21626: PUSH
21627: FOR_TO
21628: IFFALSE 21827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 10
21637: PUSH
21638: LD_INT 20
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 40
21646: PUSH
21647: LD_INT 50
21649: PUSH
21650: LD_INT 60
21652: PUSH
21653: LD_INT 70
21655: PUSH
21656: LD_INT 80
21658: PUSH
21659: LD_INT 90
21661: PUSH
21662: LD_INT 100
21664: PUSH
21665: LD_INT 110
21667: PUSH
21668: LD_INT 120
21670: PUSH
21671: LD_INT 130
21673: PUSH
21674: LD_INT 140
21676: PUSH
21677: LD_INT 150
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_INT 15
21702: PPUSH
21703: CALL_OW 12
21707: ARRAY
21708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21709: LD_ADDR_VAR 0 4
21713: PUSH
21714: LD_INT 10
21716: PUSH
21717: LD_INT 20
21719: PUSH
21720: LD_INT 30
21722: PUSH
21723: LD_INT 40
21725: PUSH
21726: LD_INT 50
21728: PUSH
21729: LD_INT 60
21731: PUSH
21732: LD_INT 70
21734: PUSH
21735: LD_INT 80
21737: PUSH
21738: LD_INT 90
21740: PUSH
21741: LD_INT 100
21743: PUSH
21744: LD_INT 110
21746: PUSH
21747: LD_INT 120
21749: PUSH
21750: LD_INT 130
21752: PUSH
21753: LD_INT 140
21755: PUSH
21756: LD_INT 150
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 15
21781: PPUSH
21782: CALL_OW 12
21786: ARRAY
21787: ST_TO_ADDR
// if ValidHex ( x , y ) then
21788: LD_VAR 0 3
21792: PPUSH
21793: LD_VAR 0 4
21797: PPUSH
21798: CALL_OW 488
21802: IFFALSE 21825
// begin result := [ x , y ] ;
21804: LD_ADDR_VAR 0 1
21808: PUSH
21809: LD_VAR 0 3
21813: PUSH
21814: LD_VAR 0 4
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// break ;
21823: GO 21827
// end ; end ;
21825: GO 21627
21827: POP
21828: POP
// if result then
21829: LD_VAR 0 1
21833: IFFALSE 21893
// begin ToLua ( playSibBomb() ) ;
21835: LD_STRING playSibBomb()
21837: PPUSH
21838: CALL_OW 559
// wait ( 0 0$14 ) ;
21842: LD_INT 490
21844: PPUSH
21845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21849: LD_VAR 0 1
21853: PUSH
21854: LD_INT 1
21856: ARRAY
21857: PPUSH
21858: LD_VAR 0 1
21862: PUSH
21863: LD_INT 2
21865: ARRAY
21866: PPUSH
21867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21871: LD_VAR 0 1
21875: PUSH
21876: LD_INT 1
21878: ARRAY
21879: PPUSH
21880: LD_VAR 0 1
21884: PUSH
21885: LD_INT 2
21887: ARRAY
21888: PPUSH
21889: CALL_OW 429
// end ; end ;
21893: LD_VAR 0 1
21897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21898: LD_EXP 47
21902: PUSH
21903: LD_EXP 69
21907: AND
21908: IFFALSE 21920
21910: GO 21912
21912: DISABLE
// YouLost (  ) ;
21913: LD_STRING 
21915: PPUSH
21916: CALL_OW 104
21920: END
// every 0 0$1 trigger StreamModeActive and sFog do
21921: LD_EXP 47
21925: PUSH
21926: LD_EXP 68
21930: AND
21931: IFFALSE 21945
21933: GO 21935
21935: DISABLE
// FogOff ( your_side ) ;
21936: LD_OWVAR 2
21940: PPUSH
21941: CALL_OW 344
21945: END
// every 0 0$1 trigger StreamModeActive and sSun do
21946: LD_EXP 47
21950: PUSH
21951: LD_EXP 70
21955: AND
21956: IFFALSE 21984
21958: GO 21960
21960: DISABLE
// begin solar_recharge_percent := 0 ;
21961: LD_ADDR_OWVAR 79
21965: PUSH
21966: LD_INT 0
21968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21969: LD_INT 10500
21971: PPUSH
21972: CALL_OW 67
// solar_recharge_percent := 100 ;
21976: LD_ADDR_OWVAR 79
21980: PUSH
21981: LD_INT 100
21983: ST_TO_ADDR
// end ;
21984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21985: LD_EXP 47
21989: PUSH
21990: LD_EXP 71
21994: AND
21995: IFFALSE 22234
21997: GO 21999
21999: DISABLE
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin tmp := [ ] ;
22005: LD_ADDR_VAR 0 3
22009: PUSH
22010: EMPTY
22011: ST_TO_ADDR
// for i := 1 to 6 do
22012: LD_ADDR_VAR 0 1
22016: PUSH
22017: DOUBLE
22018: LD_INT 1
22020: DEC
22021: ST_TO_ADDR
22022: LD_INT 6
22024: PUSH
22025: FOR_TO
22026: IFFALSE 22131
// begin uc_nation := nation_nature ;
22028: LD_ADDR_OWVAR 21
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// uc_side := 0 ;
22036: LD_ADDR_OWVAR 20
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22044: LD_ADDR_OWVAR 29
22048: PUSH
22049: LD_INT 12
22051: PUSH
22052: LD_INT 12
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: ST_TO_ADDR
// hc_agressivity := 20 ;
22059: LD_ADDR_OWVAR 35
22063: PUSH
22064: LD_INT 20
22066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22067: LD_ADDR_OWVAR 28
22071: PUSH
22072: LD_INT 17
22074: ST_TO_ADDR
// hc_gallery :=  ;
22075: LD_ADDR_OWVAR 33
22079: PUSH
22080: LD_STRING 
22082: ST_TO_ADDR
// hc_name :=  ;
22083: LD_ADDR_OWVAR 26
22087: PUSH
22088: LD_STRING 
22090: ST_TO_ADDR
// un := CreateHuman ;
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: CALL_OW 44
22100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22101: LD_VAR 0 2
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: CALL_OW 51
// tmp := tmp ^ un ;
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_VAR 0 2
22127: ADD
22128: ST_TO_ADDR
// end ;
22129: GO 22025
22131: POP
22132: POP
// repeat wait ( 0 0$1 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// for un in tmp do
22140: LD_ADDR_VAR 0 2
22144: PUSH
22145: LD_VAR 0 3
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22225
// begin if IsDead ( un ) then
22153: LD_VAR 0 2
22157: PPUSH
22158: CALL_OW 301
22162: IFFALSE 22182
// begin tmp := tmp diff un ;
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: LD_VAR 0 3
22173: PUSH
22174: LD_VAR 0 2
22178: DIFF
22179: ST_TO_ADDR
// continue ;
22180: GO 22150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22182: LD_VAR 0 2
22186: PPUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 22
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: PPUSH
22209: LD_VAR 0 2
22213: PPUSH
22214: CALL_OW 74
22218: PPUSH
22219: CALL_OW 115
// end ;
22223: GO 22150
22225: POP
22226: POP
// until not tmp ;
22227: LD_VAR 0 3
22231: NOT
22232: IFFALSE 22133
// end ;
22234: PPOPN 3
22236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22237: LD_EXP 47
22241: PUSH
22242: LD_EXP 72
22246: AND
22247: IFFALSE 22301
22249: GO 22251
22251: DISABLE
// begin ToLua ( displayTroll(); ) ;
22252: LD_STRING displayTroll();
22254: PPUSH
22255: CALL_OW 559
// wait ( 3 3$00 ) ;
22259: LD_INT 6300
22261: PPUSH
22262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22266: LD_STRING hideTroll();
22268: PPUSH
22269: CALL_OW 559
// wait ( 1 1$00 ) ;
22273: LD_INT 2100
22275: PPUSH
22276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22280: LD_STRING displayTroll();
22282: PPUSH
22283: CALL_OW 559
// wait ( 1 1$00 ) ;
22287: LD_INT 2100
22289: PPUSH
22290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22294: LD_STRING hideTroll();
22296: PPUSH
22297: CALL_OW 559
// end ;
22301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22302: LD_EXP 47
22306: PUSH
22307: LD_EXP 73
22311: AND
22312: IFFALSE 22375
22314: GO 22316
22316: DISABLE
22317: LD_INT 0
22319: PPUSH
// begin p := 0 ;
22320: LD_ADDR_VAR 0 1
22324: PUSH
22325: LD_INT 0
22327: ST_TO_ADDR
// repeat game_speed := 1 ;
22328: LD_ADDR_OWVAR 65
22332: PUSH
22333: LD_INT 1
22335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22336: LD_INT 35
22338: PPUSH
22339: CALL_OW 67
// p := p + 1 ;
22343: LD_ADDR_VAR 0 1
22347: PUSH
22348: LD_VAR 0 1
22352: PUSH
22353: LD_INT 1
22355: PLUS
22356: ST_TO_ADDR
// until p >= 60 ;
22357: LD_VAR 0 1
22361: PUSH
22362: LD_INT 60
22364: GREATEREQUAL
22365: IFFALSE 22328
// game_speed := 4 ;
22367: LD_ADDR_OWVAR 65
22371: PUSH
22372: LD_INT 4
22374: ST_TO_ADDR
// end ;
22375: PPOPN 1
22377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22378: LD_EXP 47
22382: PUSH
22383: LD_EXP 74
22387: AND
22388: IFFALSE 22534
22390: GO 22392
22392: DISABLE
22393: LD_INT 0
22395: PPUSH
22396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_OWVAR 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: LD_INT 30
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 30
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 69
22450: ST_TO_ADDR
// if not depot then
22451: LD_VAR 0 1
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22460: LD_ADDR_VAR 0 2
22464: PUSH
22465: LD_VAR 0 1
22469: PUSH
22470: LD_INT 1
22472: PPUSH
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 12
22482: ARRAY
22483: PPUSH
22484: CALL_OW 274
22488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 0
22499: PPUSH
22500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22504: LD_VAR 0 2
22508: PPUSH
22509: LD_INT 2
22511: PPUSH
22512: LD_INT 0
22514: PPUSH
22515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_INT 3
22526: PPUSH
22527: LD_INT 0
22529: PPUSH
22530: CALL_OW 277
// end ;
22534: PPOPN 2
22536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22537: LD_EXP 47
22541: PUSH
22542: LD_EXP 75
22546: AND
22547: IFFALSE 22644
22549: GO 22551
22551: DISABLE
22552: LD_INT 0
22554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22555: LD_ADDR_VAR 0 1
22559: PUSH
22560: LD_INT 22
22562: PUSH
22563: LD_OWVAR 2
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 21
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: LD_INT 23
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: ST_TO_ADDR
// if not tmp then
22609: LD_VAR 0 1
22613: NOT
22614: IFFALSE 22618
// exit ;
22616: GO 22644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22618: LD_VAR 0 1
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 1
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: PPUSH
22637: LD_INT 200
22639: PPUSH
22640: CALL_OW 234
// end ;
22644: PPOPN 1
22646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22647: LD_EXP 47
22651: PUSH
22652: LD_EXP 76
22656: AND
22657: IFFALSE 22736
22659: GO 22661
22661: DISABLE
22662: LD_INT 0
22664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_OWVAR 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PPUSH
22696: CALL_OW 69
22700: ST_TO_ADDR
// if not tmp then
22701: LD_VAR 0 1
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 1
22717: PPUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: CALL_OW 12
22727: ARRAY
22728: PPUSH
22729: LD_INT 60
22731: PPUSH
22732: CALL_OW 234
// end ;
22736: PPOPN 1
22738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22739: LD_EXP 47
22743: PUSH
22744: LD_EXP 77
22748: AND
22749: IFFALSE 22848
22751: GO 22753
22753: DISABLE
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
// begin enable ;
22758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22759: LD_ADDR_VAR 0 1
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_OWVAR 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 61
22778: PUSH
22779: EMPTY
22780: LIST
22781: PUSH
22782: LD_INT 33
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: PPUSH
22797: CALL_OW 69
22801: ST_TO_ADDR
// if not tmp then
22802: LD_VAR 0 1
22806: NOT
22807: IFFALSE 22811
// exit ;
22809: GO 22848
// for i in tmp do
22811: LD_ADDR_VAR 0 2
22815: PUSH
22816: LD_VAR 0 1
22820: PUSH
22821: FOR_IN
22822: IFFALSE 22846
// if IsControledBy ( i ) then
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 312
22833: IFFALSE 22844
// ComUnlink ( i ) ;
22835: LD_VAR 0 2
22839: PPUSH
22840: CALL_OW 136
22844: GO 22821
22846: POP
22847: POP
// end ;
22848: PPOPN 2
22850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22851: LD_EXP 47
22855: PUSH
22856: LD_EXP 78
22860: AND
22861: IFFALSE 23001
22863: GO 22865
22865: DISABLE
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
// begin ToLua ( displayPowell(); ) ;
22870: LD_STRING displayPowell();
22872: PPUSH
22873: CALL_OW 559
// uc_side := 0 ;
22877: LD_ADDR_OWVAR 20
22881: PUSH
22882: LD_INT 0
22884: ST_TO_ADDR
// uc_nation := 2 ;
22885: LD_ADDR_OWVAR 21
22889: PUSH
22890: LD_INT 2
22892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22893: LD_ADDR_OWVAR 37
22897: PUSH
22898: LD_INT 14
22900: ST_TO_ADDR
// vc_engine := engine_siberite ;
22901: LD_ADDR_OWVAR 39
22905: PUSH
22906: LD_INT 3
22908: ST_TO_ADDR
// vc_control := control_apeman ;
22909: LD_ADDR_OWVAR 38
22913: PUSH
22914: LD_INT 5
22916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22917: LD_ADDR_OWVAR 40
22921: PUSH
22922: LD_INT 29
22924: ST_TO_ADDR
// un := CreateVehicle ;
22925: LD_ADDR_VAR 0 2
22929: PUSH
22930: CALL_OW 45
22934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22935: LD_VAR 0 2
22939: PPUSH
22940: LD_INT 1
22942: PPUSH
22943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22947: LD_INT 35
22949: PPUSH
22950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22954: LD_VAR 0 2
22958: PPUSH
22959: LD_INT 22
22961: PUSH
22962: LD_OWVAR 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PPUSH
22971: CALL_OW 69
22975: PPUSH
22976: LD_VAR 0 2
22980: PPUSH
22981: CALL_OW 74
22985: PPUSH
22986: CALL_OW 115
// until IsDead ( un ) ;
22990: LD_VAR 0 2
22994: PPUSH
22995: CALL_OW 301
22999: IFFALSE 22947
// end ;
23001: PPOPN 2
23003: END
// every 0 0$1 trigger StreamModeActive and sStu do
23004: LD_EXP 47
23008: PUSH
23009: LD_EXP 86
23013: AND
23014: IFFALSE 23030
23016: GO 23018
23018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23019: LD_STRING displayStucuk();
23021: PPUSH
23022: CALL_OW 559
// ResetFog ;
23026: CALL_OW 335
// end ;
23030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23031: LD_EXP 47
23035: PUSH
23036: LD_EXP 79
23040: AND
23041: IFFALSE 23182
23043: GO 23045
23045: DISABLE
23046: LD_INT 0
23048: PPUSH
23049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_INT 22
23057: PUSH
23058: LD_OWVAR 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 21
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: ST_TO_ADDR
// if not tmp then
23086: LD_VAR 0 2
23090: NOT
23091: IFFALSE 23095
// exit ;
23093: GO 23182
// un := tmp [ rand ( 1 , tmp ) ] ;
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_VAR 0 2
23104: PUSH
23105: LD_INT 1
23107: PPUSH
23108: LD_VAR 0 2
23112: PPUSH
23113: CALL_OW 12
23117: ARRAY
23118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_INT 0
23126: PPUSH
23127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23131: LD_VAR 0 1
23135: PPUSH
23136: LD_OWVAR 3
23140: PUSH
23141: LD_VAR 0 1
23145: DIFF
23146: PPUSH
23147: LD_VAR 0 1
23151: PPUSH
23152: CALL_OW 74
23156: PPUSH
23157: CALL_OW 115
// wait ( 0 0$20 ) ;
23161: LD_INT 700
23163: PPUSH
23164: CALL_OW 67
// SetSide ( un , your_side ) ;
23168: LD_VAR 0 1
23172: PPUSH
23173: LD_OWVAR 2
23177: PPUSH
23178: CALL_OW 235
// end ;
23182: PPOPN 2
23184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23185: LD_EXP 47
23189: PUSH
23190: LD_EXP 80
23194: AND
23195: IFFALSE 23301
23197: GO 23199
23199: DISABLE
23200: LD_INT 0
23202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_OWVAR 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: CALL_OW 69
23256: ST_TO_ADDR
// if not depot then
23257: LD_VAR 0 1
23261: NOT
23262: IFFALSE 23266
// exit ;
23264: GO 23301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23266: LD_VAR 0 1
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: CALL_OW 250
23279: PPUSH
23280: LD_VAR 0 1
23284: PUSH
23285: LD_INT 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 251
23293: PPUSH
23294: LD_INT 70
23296: PPUSH
23297: CALL_OW 495
// end ;
23301: PPOPN 1
23303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23304: LD_EXP 47
23308: PUSH
23309: LD_EXP 81
23313: AND
23314: IFFALSE 23525
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23326: LD_ADDR_VAR 0 5
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_OWVAR 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 21
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PPUSH
23357: CALL_OW 69
23361: ST_TO_ADDR
// if not tmp then
23362: LD_VAR 0 5
23366: NOT
23367: IFFALSE 23371
// exit ;
23369: GO 23525
// for i in tmp do
23371: LD_ADDR_VAR 0 1
23375: PUSH
23376: LD_VAR 0 5
23380: PUSH
23381: FOR_IN
23382: IFFALSE 23523
// begin d := rand ( 0 , 5 ) ;
23384: LD_ADDR_VAR 0 4
23388: PUSH
23389: LD_INT 0
23391: PPUSH
23392: LD_INT 5
23394: PPUSH
23395: CALL_OW 12
23399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23400: LD_ADDR_VAR 0 2
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 250
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_INT 3
23422: PPUSH
23423: LD_INT 12
23425: PPUSH
23426: CALL_OW 12
23430: PPUSH
23431: CALL_OW 272
23435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 251
23450: PPUSH
23451: LD_VAR 0 4
23455: PPUSH
23456: LD_INT 3
23458: PPUSH
23459: LD_INT 12
23461: PPUSH
23462: CALL_OW 12
23466: PPUSH
23467: CALL_OW 273
23471: ST_TO_ADDR
// if ValidHex ( x , y ) then
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: CALL_OW 488
23486: IFFALSE 23521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23488: LD_VAR 0 1
23492: PPUSH
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 3
23505: PPUSH
23506: LD_INT 6
23508: PPUSH
23509: CALL_OW 12
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 483
// end ;
23521: GO 23381
23523: POP
23524: POP
// end ;
23525: PPOPN 5
23527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23528: LD_EXP 47
23532: PUSH
23533: LD_EXP 82
23537: AND
23538: IFFALSE 23632
23540: GO 23542
23542: DISABLE
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_OWVAR 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 32
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 21
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: ST_TO_ADDR
// if not tmp then
23594: LD_VAR 0 2
23598: NOT
23599: IFFALSE 23603
// exit ;
23601: GO 23632
// for i in tmp do
23603: LD_ADDR_VAR 0 1
23607: PUSH
23608: LD_VAR 0 2
23612: PUSH
23613: FOR_IN
23614: IFFALSE 23630
// SetFuel ( i , 0 ) ;
23616: LD_VAR 0 1
23620: PPUSH
23621: LD_INT 0
23623: PPUSH
23624: CALL_OW 240
23628: GO 23613
23630: POP
23631: POP
// end ;
23632: PPOPN 2
23634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23635: LD_EXP 47
23639: PUSH
23640: LD_EXP 83
23644: AND
23645: IFFALSE 23711
23647: GO 23649
23649: DISABLE
23650: LD_INT 0
23652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23653: LD_ADDR_VAR 0 1
23657: PUSH
23658: LD_INT 22
23660: PUSH
23661: LD_OWVAR 2
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 29
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PPUSH
23684: CALL_OW 69
23688: ST_TO_ADDR
// if not tmp then
23689: LD_VAR 0 1
23693: NOT
23694: IFFALSE 23698
// exit ;
23696: GO 23711
// DestroyUnit ( tmp [ 1 ] ) ;
23698: LD_VAR 0 1
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PPUSH
23707: CALL_OW 65
// end ;
23711: PPOPN 1
23713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23714: LD_EXP 47
23718: PUSH
23719: LD_EXP 85
23723: AND
23724: IFFALSE 23853
23726: GO 23728
23728: DISABLE
23729: LD_INT 0
23731: PPUSH
// begin uc_side := 0 ;
23732: LD_ADDR_OWVAR 20
23736: PUSH
23737: LD_INT 0
23739: ST_TO_ADDR
// uc_nation := nation_arabian ;
23740: LD_ADDR_OWVAR 21
23744: PUSH
23745: LD_INT 2
23747: ST_TO_ADDR
// hc_gallery :=  ;
23748: LD_ADDR_OWVAR 33
23752: PUSH
23753: LD_STRING 
23755: ST_TO_ADDR
// hc_name :=  ;
23756: LD_ADDR_OWVAR 26
23760: PUSH
23761: LD_STRING 
23763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23764: LD_INT 1
23766: PPUSH
23767: LD_INT 11
23769: PPUSH
23770: LD_INT 10
23772: PPUSH
23773: CALL_OW 380
// un := CreateHuman ;
23777: LD_ADDR_VAR 0 1
23781: PUSH
23782: CALL_OW 44
23786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23787: LD_VAR 0 1
23791: PPUSH
23792: LD_INT 1
23794: PPUSH
23795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23799: LD_INT 35
23801: PPUSH
23802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_INT 22
23813: PUSH
23814: LD_OWVAR 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PPUSH
23823: CALL_OW 69
23827: PPUSH
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 74
23837: PPUSH
23838: CALL_OW 115
// until IsDead ( un ) ;
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 301
23851: IFFALSE 23799
// end ;
23853: PPOPN 1
23855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23856: LD_EXP 47
23860: PUSH
23861: LD_EXP 87
23865: AND
23866: IFFALSE 23878
23868: GO 23870
23870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23871: LD_STRING earthquake(getX(game), 0, 32)
23873: PPUSH
23874: CALL_OW 559
23878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23879: LD_EXP 47
23883: PUSH
23884: LD_EXP 88
23888: AND
23889: IFFALSE 23980
23891: GO 23893
23893: DISABLE
23894: LD_INT 0
23896: PPUSH
// begin enable ;
23897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_OWVAR 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 21
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 33
23927: PUSH
23928: LD_INT 3
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 1
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 23980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23954: LD_VAR 0 1
23958: PUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 12
23971: ARRAY
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 234
// end ;
23980: PPOPN 1
23982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23983: LD_EXP 47
23987: PUSH
23988: LD_EXP 89
23992: AND
23993: IFFALSE 24134
23995: GO 23997
23997: DISABLE
23998: LD_INT 0
24000: PPUSH
24001: PPUSH
24002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 22
24010: PUSH
24011: LD_OWVAR 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 25
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PPUSH
24034: CALL_OW 69
24038: ST_TO_ADDR
// if not tmp then
24039: LD_VAR 0 3
24043: NOT
24044: IFFALSE 24048
// exit ;
24046: GO 24134
// un := tmp [ rand ( 1 , tmp ) ] ;
24048: LD_ADDR_VAR 0 2
24052: PUSH
24053: LD_VAR 0 3
24057: PUSH
24058: LD_INT 1
24060: PPUSH
24061: LD_VAR 0 3
24065: PPUSH
24066: CALL_OW 12
24070: ARRAY
24071: ST_TO_ADDR
// if Crawls ( un ) then
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 318
24081: IFFALSE 24092
// ComWalk ( un ) ;
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 9
24099: PPUSH
24100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24104: LD_INT 28
24106: PPUSH
24107: LD_OWVAR 2
24111: PPUSH
24112: LD_INT 2
24114: PPUSH
24115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24119: LD_INT 29
24121: PPUSH
24122: LD_OWVAR 2
24126: PPUSH
24127: LD_INT 2
24129: PPUSH
24130: CALL_OW 322
// end ;
24134: PPOPN 3
24136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24137: LD_EXP 47
24141: PUSH
24142: LD_EXP 90
24146: AND
24147: IFFALSE 24258
24149: GO 24151
24151: DISABLE
24152: LD_INT 0
24154: PPUSH
24155: PPUSH
24156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_OWVAR 2
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 25
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: CALL_OW 69
24192: ST_TO_ADDR
// if not tmp then
24193: LD_VAR 0 3
24197: NOT
24198: IFFALSE 24202
// exit ;
24200: GO 24258
// un := tmp [ rand ( 1 , tmp ) ] ;
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_INT 1
24214: PPUSH
24215: LD_VAR 0 3
24219: PPUSH
24220: CALL_OW 12
24224: ARRAY
24225: ST_TO_ADDR
// if Crawls ( un ) then
24226: LD_VAR 0 2
24230: PPUSH
24231: CALL_OW 318
24235: IFFALSE 24246
// ComWalk ( un ) ;
24237: LD_VAR 0 2
24241: PPUSH
24242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 8
24253: PPUSH
24254: CALL_OW 336
// end ;
24258: PPOPN 3
24260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24261: LD_EXP 47
24265: PUSH
24266: LD_EXP 91
24270: AND
24271: IFFALSE 24415
24273: GO 24275
24275: DISABLE
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: LD_INT 34
24312: PUSH
24313: LD_INT 12
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 34
24322: PUSH
24323: LD_INT 51
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 34
24332: PUSH
24333: LD_INT 32
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: PPUSH
24351: CALL_OW 69
24355: ST_TO_ADDR
// if not tmp then
24356: LD_VAR 0 2
24360: NOT
24361: IFFALSE 24365
// exit ;
24363: GO 24415
// for i in tmp do
24365: LD_ADDR_VAR 0 1
24369: PUSH
24370: LD_VAR 0 2
24374: PUSH
24375: FOR_IN
24376: IFFALSE 24413
// if GetCargo ( i , mat_artifact ) = 0 then
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_INT 4
24385: PPUSH
24386: CALL_OW 289
24390: PUSH
24391: LD_INT 0
24393: EQUAL
24394: IFFALSE 24411
// SetCargo ( i , mat_siberit , 100 ) ;
24396: LD_VAR 0 1
24400: PPUSH
24401: LD_INT 3
24403: PPUSH
24404: LD_INT 100
24406: PPUSH
24407: CALL_OW 290
24411: GO 24375
24413: POP
24414: POP
// end ;
24415: PPOPN 2
24417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24418: LD_EXP 47
24422: PUSH
24423: LD_EXP 92
24427: AND
24428: IFFALSE 24611
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PPUSH
24454: CALL_OW 69
24458: ST_TO_ADDR
// if not tmp then
24459: LD_VAR 0 2
24463: NOT
24464: IFFALSE 24468
// exit ;
24466: GO 24611
// for i := 1 to 2 do
24468: LD_ADDR_VAR 0 1
24472: PUSH
24473: DOUBLE
24474: LD_INT 1
24476: DEC
24477: ST_TO_ADDR
24478: LD_INT 2
24480: PUSH
24481: FOR_TO
24482: IFFALSE 24609
// begin uc_side := your_side ;
24484: LD_ADDR_OWVAR 20
24488: PUSH
24489: LD_OWVAR 2
24493: ST_TO_ADDR
// uc_nation := nation_american ;
24494: LD_ADDR_OWVAR 21
24498: PUSH
24499: LD_INT 1
24501: ST_TO_ADDR
// vc_chassis := us_morphling ;
24502: LD_ADDR_OWVAR 37
24506: PUSH
24507: LD_INT 5
24509: ST_TO_ADDR
// vc_engine := engine_siberite ;
24510: LD_ADDR_OWVAR 39
24514: PUSH
24515: LD_INT 3
24517: ST_TO_ADDR
// vc_control := control_computer ;
24518: LD_ADDR_OWVAR 38
24522: PUSH
24523: LD_INT 3
24525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24526: LD_ADDR_OWVAR 40
24530: PUSH
24531: LD_INT 10
24533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24534: LD_VAR 0 2
24538: PUSH
24539: LD_INT 1
24541: ARRAY
24542: PPUSH
24543: CALL_OW 310
24547: NOT
24548: IFFALSE 24595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24550: CALL_OW 45
24554: PPUSH
24555: LD_VAR 0 2
24559: PUSH
24560: LD_INT 1
24562: ARRAY
24563: PPUSH
24564: CALL_OW 250
24568: PPUSH
24569: LD_VAR 0 2
24573: PUSH
24574: LD_INT 1
24576: ARRAY
24577: PPUSH
24578: CALL_OW 251
24582: PPUSH
24583: LD_INT 12
24585: PPUSH
24586: LD_INT 1
24588: PPUSH
24589: CALL_OW 50
24593: GO 24607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24595: CALL_OW 45
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 51
// end ;
24607: GO 24481
24609: POP
24610: POP
// end ;
24611: PPOPN 2
24613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24614: LD_EXP 47
24618: PUSH
24619: LD_EXP 93
24623: AND
24624: IFFALSE 24846
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24637: LD_ADDR_VAR 0 6
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_OWVAR 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 21
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: PPUSH
24686: CALL_OW 69
24690: ST_TO_ADDR
// if not tmp then
24691: LD_VAR 0 6
24695: NOT
24696: IFFALSE 24700
// exit ;
24698: GO 24846
// s1 := rand ( 1 , 4 ) ;
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_INT 1
24707: PPUSH
24708: LD_INT 4
24710: PPUSH
24711: CALL_OW 12
24715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24716: LD_ADDR_VAR 0 4
24720: PUSH
24721: LD_VAR 0 6
24725: PUSH
24726: LD_INT 1
24728: ARRAY
24729: PPUSH
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 259
24739: ST_TO_ADDR
// if s1 = 1 then
24740: LD_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: EQUAL
24748: IFFALSE 24768
// s2 := rand ( 2 , 4 ) else
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_INT 2
24757: PPUSH
24758: LD_INT 4
24760: PPUSH
24761: CALL_OW 12
24765: ST_TO_ADDR
24766: GO 24776
// s2 := 1 ;
24768: LD_ADDR_VAR 0 3
24772: PUSH
24773: LD_INT 1
24775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_VAR 0 6
24785: PUSH
24786: LD_INT 1
24788: ARRAY
24789: PPUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: CALL_OW 259
24799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24800: LD_VAR 0 6
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: LD_VAR 0 2
24813: PPUSH
24814: LD_VAR 0 5
24818: PPUSH
24819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24823: LD_VAR 0 6
24827: PUSH
24828: LD_INT 1
24830: ARRAY
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: LD_VAR 0 4
24841: PPUSH
24842: CALL_OW 237
// end ;
24846: PPOPN 6
24848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24849: LD_EXP 47
24853: PUSH
24854: LD_EXP 94
24858: AND
24859: IFFALSE 24938
24861: GO 24863
24863: DISABLE
24864: LD_INT 0
24866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24867: LD_ADDR_VAR 0 1
24871: PUSH
24872: LD_INT 22
24874: PUSH
24875: LD_OWVAR 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: ST_TO_ADDR
// if not tmp then
24903: LD_VAR 0 1
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 24938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24912: LD_VAR 0 1
24916: PUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 12
24929: ARRAY
24930: PPUSH
24931: LD_INT 1
24933: PPUSH
24934: CALL_OW 234
// end ;
24938: PPOPN 1
24940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24941: LD_EXP 47
24945: PUSH
24946: LD_EXP 95
24950: AND
24951: IFFALSE 25063
24953: GO 24955
24955: DISABLE
24956: LD_INT 0
24958: PPUSH
24959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: LD_INT 30
24982: PUSH
24983: LD_INT 27
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 30
24992: PUSH
24993: LD_INT 26
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 28
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if not tmp then
25025: LD_VAR 0 2
25029: NOT
25030: IFFALSE 25034
// exit ;
25032: GO 25063
// for i in tmp do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_VAR 0 2
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25061
// SetLives ( i , 1 ) ;
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 234
25059: GO 25044
25061: POP
25062: POP
// end ;
25063: PPOPN 2
25065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25066: LD_EXP 47
25070: PUSH
25071: LD_EXP 96
25075: AND
25076: IFFALSE 25363
25078: GO 25080
25080: DISABLE
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// begin i := rand ( 1 , 7 ) ;
25086: LD_ADDR_VAR 0 1
25090: PUSH
25091: LD_INT 1
25093: PPUSH
25094: LD_INT 7
25096: PPUSH
25097: CALL_OW 12
25101: ST_TO_ADDR
// case i of 1 :
25102: LD_VAR 0 1
25106: PUSH
25107: LD_INT 1
25109: DOUBLE
25110: EQUAL
25111: IFTRUE 25115
25113: GO 25125
25115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25116: LD_STRING earthquake(getX(game), 0, 32)
25118: PPUSH
25119: CALL_OW 559
25123: GO 25363
25125: LD_INT 2
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25147
25133: POP
// begin ToLua ( displayStucuk(); ) ;
25134: LD_STRING displayStucuk();
25136: PPUSH
25137: CALL_OW 559
// ResetFog ;
25141: CALL_OW 335
// end ; 3 :
25145: GO 25363
25147: LD_INT 3
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25259
25155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 22
25163: PUSH
25164: LD_OWVAR 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 25
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25363
// un := tmp [ rand ( 1 , tmp ) ] ;
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: LD_INT 1
25213: PPUSH
25214: LD_VAR 0 2
25218: PPUSH
25219: CALL_OW 12
25223: ARRAY
25224: ST_TO_ADDR
// if Crawls ( un ) then
25225: LD_VAR 0 3
25229: PPUSH
25230: CALL_OW 318
25234: IFFALSE 25245
// ComWalk ( un ) ;
25236: LD_VAR 0 3
25240: PPUSH
25241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25245: LD_VAR 0 3
25249: PPUSH
25250: LD_INT 8
25252: PPUSH
25253: CALL_OW 336
// end ; 4 :
25257: GO 25363
25259: LD_INT 4
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25341
25267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25268: LD_ADDR_VAR 0 2
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_OWVAR 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 30
25287: PUSH
25288: LD_INT 29
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PPUSH
25299: CALL_OW 69
25303: ST_TO_ADDR
// if not tmp then
25304: LD_VAR 0 2
25308: NOT
25309: IFFALSE 25313
// exit ;
25311: GO 25363
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25313: LD_VAR 0 2
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25326: LD_VAR 0 2
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: CALL_OW 65
// end ; 5 .. 7 :
25339: GO 25363
25341: LD_INT 5
25343: DOUBLE
25344: GREATEREQUAL
25345: IFFALSE 25353
25347: LD_INT 7
25349: DOUBLE
25350: LESSEQUAL
25351: IFTRUE 25355
25353: GO 25362
25355: POP
// StreamSibBomb ; end ;
25356: CALL 21600 0 0
25360: GO 25363
25362: POP
// end ;
25363: PPOPN 3
25365: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25366: LD_EXP 47
25370: PUSH
25371: LD_EXP 97
25375: AND
25376: IFFALSE 25532
25378: GO 25380
25380: DISABLE
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_INT 81
25393: PUSH
25394: LD_OWVAR 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 21
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 21
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PPUSH
25435: CALL_OW 69
25439: ST_TO_ADDR
// if not tmp then
25440: LD_VAR 0 2
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25532
// p := 0 ;
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_INT 0
25456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25457: LD_INT 35
25459: PPUSH
25460: CALL_OW 67
// p := p + 1 ;
25464: LD_ADDR_VAR 0 3
25468: PUSH
25469: LD_VAR 0 3
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: ST_TO_ADDR
// for i in tmp do
25478: LD_ADDR_VAR 0 1
25482: PUSH
25483: LD_VAR 0 2
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25520
// if GetLives ( i ) < 1000 then
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL_OW 256
25500: PUSH
25501: LD_INT 1000
25503: LESS
25504: IFFALSE 25518
// SetLives ( i , 1000 ) ;
25506: LD_VAR 0 1
25510: PPUSH
25511: LD_INT 1000
25513: PPUSH
25514: CALL_OW 234
25518: GO 25488
25520: POP
25521: POP
// until p > 20 ;
25522: LD_VAR 0 3
25526: PUSH
25527: LD_INT 20
25529: GREATER
25530: IFFALSE 25457
// end ;
25532: PPOPN 3
25534: END
// every 0 0$1 trigger StreamModeActive and sTime do
25535: LD_EXP 47
25539: PUSH
25540: LD_EXP 98
25544: AND
25545: IFFALSE 25580
25547: GO 25549
25549: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25550: LD_INT 28
25552: PPUSH
25553: LD_OWVAR 2
25557: PPUSH
25558: LD_INT 2
25560: PPUSH
25561: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25565: LD_INT 30
25567: PPUSH
25568: LD_OWVAR 2
25572: PPUSH
25573: LD_INT 2
25575: PPUSH
25576: CALL_OW 322
// end ;
25580: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25581: LD_EXP 47
25585: PUSH
25586: LD_EXP 99
25590: AND
25591: IFFALSE 25712
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
25599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25600: LD_ADDR_VAR 0 2
25604: PUSH
25605: LD_INT 22
25607: PUSH
25608: LD_OWVAR 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 3
25629: PUSH
25630: LD_INT 23
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: PPUSH
25649: CALL_OW 69
25653: ST_TO_ADDR
// if not tmp then
25654: LD_VAR 0 2
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25712
// for i in tmp do
25663: LD_ADDR_VAR 0 1
25667: PUSH
25668: LD_VAR 0 2
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25710
// begin if Crawls ( i ) then
25676: LD_VAR 0 1
25680: PPUSH
25681: CALL_OW 318
25685: IFFALSE 25696
// ComWalk ( i ) ;
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 138
// SetClass ( i , 2 ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_INT 2
25703: PPUSH
25704: CALL_OW 336
// end ;
25708: GO 25673
25710: POP
25711: POP
// end ;
25712: PPOPN 2
25714: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25715: LD_EXP 47
25719: PUSH
25720: LD_EXP 100
25724: AND
25725: IFFALSE 26013
25727: GO 25729
25729: DISABLE
25730: LD_INT 0
25732: PPUSH
25733: PPUSH
25734: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 9
25742: PPUSH
25743: LD_INT 1
25745: PPUSH
25746: LD_INT 1
25748: PPUSH
25749: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25753: LD_INT 9
25755: PPUSH
25756: LD_OWVAR 2
25760: PPUSH
25761: CALL_OW 343
// uc_side := 9 ;
25765: LD_ADDR_OWVAR 20
25769: PUSH
25770: LD_INT 9
25772: ST_TO_ADDR
// uc_nation := 2 ;
25773: LD_ADDR_OWVAR 21
25777: PUSH
25778: LD_INT 2
25780: ST_TO_ADDR
// hc_name := Dark Warrior ;
25781: LD_ADDR_OWVAR 26
25785: PUSH
25786: LD_STRING Dark Warrior
25788: ST_TO_ADDR
// hc_gallery :=  ;
25789: LD_ADDR_OWVAR 33
25793: PUSH
25794: LD_STRING 
25796: ST_TO_ADDR
// hc_noskilllimit := true ;
25797: LD_ADDR_OWVAR 76
25801: PUSH
25802: LD_INT 1
25804: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25805: LD_ADDR_OWVAR 31
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 30
25818: PUSH
25819: LD_INT 30
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// un := CreateHuman ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: CALL_OW 44
25837: ST_TO_ADDR
// hc_noskilllimit := false ;
25838: LD_ADDR_OWVAR 76
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25846: LD_VAR 0 3
25850: PPUSH
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 51
// ToLua ( playRanger() ) ;
25858: LD_STRING playRanger()
25860: PPUSH
25861: CALL_OW 559
// p := 0 ;
25865: LD_ADDR_VAR 0 2
25869: PUSH
25870: LD_INT 0
25872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25873: LD_INT 35
25875: PPUSH
25876: CALL_OW 67
// p := p + 1 ;
25880: LD_ADDR_VAR 0 2
25884: PUSH
25885: LD_VAR 0 2
25889: PUSH
25890: LD_INT 1
25892: PLUS
25893: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25894: LD_VAR 0 3
25898: PPUSH
25899: CALL_OW 256
25903: PUSH
25904: LD_INT 1000
25906: LESS
25907: IFFALSE 25921
// SetLives ( un , 1000 ) ;
25909: LD_VAR 0 3
25913: PPUSH
25914: LD_INT 1000
25916: PPUSH
25917: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25921: LD_VAR 0 3
25925: PPUSH
25926: LD_INT 81
25928: PUSH
25929: LD_OWVAR 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 91
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 30
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: CALL_OW 74
25972: PPUSH
25973: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25977: LD_VAR 0 2
25981: PUSH
25982: LD_INT 80
25984: GREATER
25985: PUSH
25986: LD_VAR 0 3
25990: PPUSH
25991: CALL_OW 301
25995: OR
25996: IFFALSE 25873
// if un then
25998: LD_VAR 0 3
26002: IFFALSE 26013
// RemoveUnit ( un ) ;
26004: LD_VAR 0 3
26008: PPUSH
26009: CALL_OW 64
// end ;
26013: PPOPN 3
26015: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26016: LD_EXP 101
26020: IFFALSE 26136
26022: GO 26024
26024: DISABLE
26025: LD_INT 0
26027: PPUSH
26028: PPUSH
26029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26030: LD_ADDR_VAR 0 2
26034: PUSH
26035: LD_INT 81
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PPUSH
26061: CALL_OW 69
26065: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26066: LD_STRING playComputer()
26068: PPUSH
26069: CALL_OW 559
// if not tmp then
26073: LD_VAR 0 2
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26136
// for i in tmp do
26082: LD_ADDR_VAR 0 1
26086: PUSH
26087: LD_VAR 0 2
26091: PUSH
26092: FOR_IN
26093: IFFALSE 26134
// for j := 1 to 4 do
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: DOUBLE
26101: LD_INT 1
26103: DEC
26104: ST_TO_ADDR
26105: LD_INT 4
26107: PUSH
26108: FOR_TO
26109: IFFALSE 26130
// SetSkill ( i , j , 10 ) ;
26111: LD_VAR 0 1
26115: PPUSH
26116: LD_VAR 0 3
26120: PPUSH
26121: LD_INT 10
26123: PPUSH
26124: CALL_OW 237
26128: GO 26108
26130: POP
26131: POP
26132: GO 26092
26134: POP
26135: POP
// end ;
26136: PPOPN 3
26138: END
// every 0 0$1 trigger s30 do var i , tmp ;
26139: LD_EXP 102
26143: IFFALSE 26212
26145: GO 26147
26147: DISABLE
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 22
26159: PUSH
26160: LD_OWVAR 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: ST_TO_ADDR
// if not tmp then
26174: LD_VAR 0 2
26178: NOT
26179: IFFALSE 26183
// exit ;
26181: GO 26212
// for i in tmp do
26183: LD_ADDR_VAR 0 1
26187: PUSH
26188: LD_VAR 0 2
26192: PUSH
26193: FOR_IN
26194: IFFALSE 26210
// SetLives ( i , 300 ) ;
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_INT 300
26203: PPUSH
26204: CALL_OW 234
26208: GO 26193
26210: POP
26211: POP
// end ;
26212: PPOPN 2
26214: END
// every 0 0$1 trigger s60 do var i , tmp ;
26215: LD_EXP 103
26219: IFFALSE 26288
26221: GO 26223
26223: DISABLE
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26228: LD_ADDR_VAR 0 2
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_OWVAR 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 2
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26288
// for i in tmp do
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_VAR 0 2
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26286
// SetLives ( i , 600 ) ;
26272: LD_VAR 0 1
26276: PPUSH
26277: LD_INT 600
26279: PPUSH
26280: CALL_OW 234
26284: GO 26269
26286: POP
26287: POP
// end ;
26288: PPOPN 2
26290: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26291: LD_INT 0
26293: PPUSH
// case cmd of 301 :
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 301
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26339
26307: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26308: LD_VAR 0 6
26312: PPUSH
26313: LD_VAR 0 7
26317: PPUSH
26318: LD_VAR 0 8
26322: PPUSH
26323: LD_VAR 0 4
26327: PPUSH
26328: LD_VAR 0 5
26332: PPUSH
26333: CALL 27540 0 5
26337: GO 26460
26339: LD_INT 302
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26384
26347: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26348: LD_VAR 0 6
26352: PPUSH
26353: LD_VAR 0 7
26357: PPUSH
26358: LD_VAR 0 8
26362: PPUSH
26363: LD_VAR 0 9
26367: PPUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_VAR 0 5
26377: PPUSH
26378: CALL 27631 0 6
26382: GO 26460
26384: LD_INT 303
26386: DOUBLE
26387: EQUAL
26388: IFTRUE 26392
26390: GO 26429
26392: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26393: LD_VAR 0 6
26397: PPUSH
26398: LD_VAR 0 7
26402: PPUSH
26403: LD_VAR 0 8
26407: PPUSH
26408: LD_VAR 0 9
26412: PPUSH
26413: LD_VAR 0 4
26417: PPUSH
26418: LD_VAR 0 5
26422: PPUSH
26423: CALL 26465 0 6
26427: GO 26460
26429: LD_INT 304
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 26459
26437: POP
// hHackTeleport ( unit , x , y ) ; end ;
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 4
26447: PPUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: CALL 28224 0 3
26457: GO 26460
26459: POP
// end ;
26460: LD_VAR 0 12
26464: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26465: LD_INT 0
26467: PPUSH
26468: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26469: LD_VAR 0 1
26473: PUSH
26474: LD_INT 1
26476: LESS
26477: PUSH
26478: LD_VAR 0 1
26482: PUSH
26483: LD_INT 3
26485: GREATER
26486: OR
26487: PUSH
26488: LD_VAR 0 5
26492: PPUSH
26493: LD_VAR 0 6
26497: PPUSH
26498: CALL_OW 428
26502: OR
26503: IFFALSE 26507
// exit ;
26505: GO 27227
// uc_side := your_side ;
26507: LD_ADDR_OWVAR 20
26511: PUSH
26512: LD_OWVAR 2
26516: ST_TO_ADDR
// uc_nation := nation ;
26517: LD_ADDR_OWVAR 21
26521: PUSH
26522: LD_VAR 0 1
26526: ST_TO_ADDR
// bc_level = 1 ;
26527: LD_ADDR_OWVAR 43
26531: PUSH
26532: LD_INT 1
26534: ST_TO_ADDR
// case btype of 1 :
26535: LD_VAR 0 2
26539: PUSH
26540: LD_INT 1
26542: DOUBLE
26543: EQUAL
26544: IFTRUE 26548
26546: GO 26559
26548: POP
// bc_type := b_depot ; 2 :
26549: LD_ADDR_OWVAR 42
26553: PUSH
26554: LD_INT 0
26556: ST_TO_ADDR
26557: GO 27171
26559: LD_INT 2
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26578
26567: POP
// bc_type := b_warehouse ; 3 :
26568: LD_ADDR_OWVAR 42
26572: PUSH
26573: LD_INT 1
26575: ST_TO_ADDR
26576: GO 27171
26578: LD_INT 3
26580: DOUBLE
26581: EQUAL
26582: IFTRUE 26586
26584: GO 26597
26586: POP
// bc_type := b_lab ; 4 .. 9 :
26587: LD_ADDR_OWVAR 42
26591: PUSH
26592: LD_INT 6
26594: ST_TO_ADDR
26595: GO 27171
26597: LD_INT 4
26599: DOUBLE
26600: GREATEREQUAL
26601: IFFALSE 26609
26603: LD_INT 9
26605: DOUBLE
26606: LESSEQUAL
26607: IFTRUE 26611
26609: GO 26663
26611: POP
// begin bc_type := b_lab_half ;
26612: LD_ADDR_OWVAR 42
26616: PUSH
26617: LD_INT 7
26619: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26620: LD_ADDR_OWVAR 44
26624: PUSH
26625: LD_INT 10
26627: PUSH
26628: LD_INT 11
26630: PUSH
26631: LD_INT 12
26633: PUSH
26634: LD_INT 15
26636: PUSH
26637: LD_INT 14
26639: PUSH
26640: LD_INT 13
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: PUSH
26651: LD_VAR 0 2
26655: PUSH
26656: LD_INT 3
26658: MINUS
26659: ARRAY
26660: ST_TO_ADDR
// end ; 10 .. 13 :
26661: GO 27171
26663: LD_INT 10
26665: DOUBLE
26666: GREATEREQUAL
26667: IFFALSE 26675
26669: LD_INT 13
26671: DOUBLE
26672: LESSEQUAL
26673: IFTRUE 26677
26675: GO 26754
26677: POP
// begin bc_type := b_lab_full ;
26678: LD_ADDR_OWVAR 42
26682: PUSH
26683: LD_INT 8
26685: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26686: LD_ADDR_OWVAR 44
26690: PUSH
26691: LD_INT 10
26693: PUSH
26694: LD_INT 12
26696: PUSH
26697: LD_INT 14
26699: PUSH
26700: LD_INT 13
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: PUSH
26709: LD_VAR 0 2
26713: PUSH
26714: LD_INT 9
26716: MINUS
26717: ARRAY
26718: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26719: LD_ADDR_OWVAR 45
26723: PUSH
26724: LD_INT 11
26726: PUSH
26727: LD_INT 15
26729: PUSH
26730: LD_INT 12
26732: PUSH
26733: LD_INT 15
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: PUSH
26742: LD_VAR 0 2
26746: PUSH
26747: LD_INT 9
26749: MINUS
26750: ARRAY
26751: ST_TO_ADDR
// end ; 14 :
26752: GO 27171
26754: LD_INT 14
26756: DOUBLE
26757: EQUAL
26758: IFTRUE 26762
26760: GO 26773
26762: POP
// bc_type := b_workshop ; 15 :
26763: LD_ADDR_OWVAR 42
26767: PUSH
26768: LD_INT 2
26770: ST_TO_ADDR
26771: GO 27171
26773: LD_INT 15
26775: DOUBLE
26776: EQUAL
26777: IFTRUE 26781
26779: GO 26792
26781: POP
// bc_type := b_factory ; 16 :
26782: LD_ADDR_OWVAR 42
26786: PUSH
26787: LD_INT 3
26789: ST_TO_ADDR
26790: GO 27171
26792: LD_INT 16
26794: DOUBLE
26795: EQUAL
26796: IFTRUE 26800
26798: GO 26811
26800: POP
// bc_type := b_ext_gun ; 17 :
26801: LD_ADDR_OWVAR 42
26805: PUSH
26806: LD_INT 17
26808: ST_TO_ADDR
26809: GO 27171
26811: LD_INT 17
26813: DOUBLE
26814: EQUAL
26815: IFTRUE 26819
26817: GO 26847
26819: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26820: LD_ADDR_OWVAR 42
26824: PUSH
26825: LD_INT 19
26827: PUSH
26828: LD_INT 23
26830: PUSH
26831: LD_INT 19
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: PUSH
26839: LD_VAR 0 1
26843: ARRAY
26844: ST_TO_ADDR
26845: GO 27171
26847: LD_INT 18
26849: DOUBLE
26850: EQUAL
26851: IFTRUE 26855
26853: GO 26866
26855: POP
// bc_type := b_ext_radar ; 19 :
26856: LD_ADDR_OWVAR 42
26860: PUSH
26861: LD_INT 20
26863: ST_TO_ADDR
26864: GO 27171
26866: LD_INT 19
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26885
26874: POP
// bc_type := b_ext_radio ; 20 :
26875: LD_ADDR_OWVAR 42
26879: PUSH
26880: LD_INT 22
26882: ST_TO_ADDR
26883: GO 27171
26885: LD_INT 20
26887: DOUBLE
26888: EQUAL
26889: IFTRUE 26893
26891: GO 26904
26893: POP
// bc_type := b_ext_siberium ; 21 :
26894: LD_ADDR_OWVAR 42
26898: PUSH
26899: LD_INT 21
26901: ST_TO_ADDR
26902: GO 27171
26904: LD_INT 21
26906: DOUBLE
26907: EQUAL
26908: IFTRUE 26912
26910: GO 26923
26912: POP
// bc_type := b_ext_computer ; 22 :
26913: LD_ADDR_OWVAR 42
26917: PUSH
26918: LD_INT 24
26920: ST_TO_ADDR
26921: GO 27171
26923: LD_INT 22
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26931
26929: GO 26942
26931: POP
// bc_type := b_ext_track ; 23 :
26932: LD_ADDR_OWVAR 42
26936: PUSH
26937: LD_INT 16
26939: ST_TO_ADDR
26940: GO 27171
26942: LD_INT 23
26944: DOUBLE
26945: EQUAL
26946: IFTRUE 26950
26948: GO 26961
26950: POP
// bc_type := b_ext_laser ; 24 :
26951: LD_ADDR_OWVAR 42
26955: PUSH
26956: LD_INT 25
26958: ST_TO_ADDR
26959: GO 27171
26961: LD_INT 24
26963: DOUBLE
26964: EQUAL
26965: IFTRUE 26969
26967: GO 26980
26969: POP
// bc_type := b_control_tower ; 25 :
26970: LD_ADDR_OWVAR 42
26974: PUSH
26975: LD_INT 36
26977: ST_TO_ADDR
26978: GO 27171
26980: LD_INT 25
26982: DOUBLE
26983: EQUAL
26984: IFTRUE 26988
26986: GO 26999
26988: POP
// bc_type := b_breastwork ; 26 :
26989: LD_ADDR_OWVAR 42
26993: PUSH
26994: LD_INT 31
26996: ST_TO_ADDR
26997: GO 27171
26999: LD_INT 26
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27007
27005: GO 27018
27007: POP
// bc_type := b_bunker ; 27 :
27008: LD_ADDR_OWVAR 42
27012: PUSH
27013: LD_INT 32
27015: ST_TO_ADDR
27016: GO 27171
27018: LD_INT 27
27020: DOUBLE
27021: EQUAL
27022: IFTRUE 27026
27024: GO 27037
27026: POP
// bc_type := b_turret ; 28 :
27027: LD_ADDR_OWVAR 42
27031: PUSH
27032: LD_INT 33
27034: ST_TO_ADDR
27035: GO 27171
27037: LD_INT 28
27039: DOUBLE
27040: EQUAL
27041: IFTRUE 27045
27043: GO 27056
27045: POP
// bc_type := b_armoury ; 29 :
27046: LD_ADDR_OWVAR 42
27050: PUSH
27051: LD_INT 4
27053: ST_TO_ADDR
27054: GO 27171
27056: LD_INT 29
27058: DOUBLE
27059: EQUAL
27060: IFTRUE 27064
27062: GO 27075
27064: POP
// bc_type := b_barracks ; 30 :
27065: LD_ADDR_OWVAR 42
27069: PUSH
27070: LD_INT 5
27072: ST_TO_ADDR
27073: GO 27171
27075: LD_INT 30
27077: DOUBLE
27078: EQUAL
27079: IFTRUE 27083
27081: GO 27094
27083: POP
// bc_type := b_solar_power ; 31 :
27084: LD_ADDR_OWVAR 42
27088: PUSH
27089: LD_INT 27
27091: ST_TO_ADDR
27092: GO 27171
27094: LD_INT 31
27096: DOUBLE
27097: EQUAL
27098: IFTRUE 27102
27100: GO 27113
27102: POP
// bc_type := b_oil_power ; 32 :
27103: LD_ADDR_OWVAR 42
27107: PUSH
27108: LD_INT 26
27110: ST_TO_ADDR
27111: GO 27171
27113: LD_INT 32
27115: DOUBLE
27116: EQUAL
27117: IFTRUE 27121
27119: GO 27132
27121: POP
// bc_type := b_siberite_power ; 33 :
27122: LD_ADDR_OWVAR 42
27126: PUSH
27127: LD_INT 28
27129: ST_TO_ADDR
27130: GO 27171
27132: LD_INT 33
27134: DOUBLE
27135: EQUAL
27136: IFTRUE 27140
27138: GO 27151
27140: POP
// bc_type := b_oil_mine ; 34 :
27141: LD_ADDR_OWVAR 42
27145: PUSH
27146: LD_INT 29
27148: ST_TO_ADDR
27149: GO 27171
27151: LD_INT 34
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27170
27159: POP
// bc_type := b_siberite_mine ; end ;
27160: LD_ADDR_OWVAR 42
27164: PUSH
27165: LD_INT 30
27167: ST_TO_ADDR
27168: GO 27171
27170: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27171: LD_ADDR_VAR 0 8
27175: PUSH
27176: LD_VAR 0 5
27180: PPUSH
27181: LD_VAR 0 6
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 47
27195: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27196: LD_OWVAR 42
27200: PUSH
27201: LD_INT 32
27203: PUSH
27204: LD_INT 33
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: IN
27211: IFFALSE 27227
// PlaceWeaponTurret ( b , weapon ) ;
27213: LD_VAR 0 8
27217: PPUSH
27218: LD_VAR 0 4
27222: PPUSH
27223: CALL_OW 431
// end ;
27227: LD_VAR 0 7
27231: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27232: LD_INT 0
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_INT 22
27245: PUSH
27246: LD_OWVAR 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: LD_INT 30
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 30
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PPUSH
27287: CALL_OW 69
27291: ST_TO_ADDR
// if not tmp then
27292: LD_VAR 0 4
27296: NOT
27297: IFFALSE 27301
// exit ;
27299: GO 27360
// for i in tmp do
27301: LD_ADDR_VAR 0 2
27305: PUSH
27306: LD_VAR 0 4
27310: PUSH
27311: FOR_IN
27312: IFFALSE 27358
// for j = 1 to 3 do
27314: LD_ADDR_VAR 0 3
27318: PUSH
27319: DOUBLE
27320: LD_INT 1
27322: DEC
27323: ST_TO_ADDR
27324: LD_INT 3
27326: PUSH
27327: FOR_TO
27328: IFFALSE 27354
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27330: LD_VAR 0 2
27334: PPUSH
27335: CALL_OW 274
27339: PPUSH
27340: LD_VAR 0 3
27344: PPUSH
27345: LD_INT 99999
27347: PPUSH
27348: CALL_OW 277
27352: GO 27327
27354: POP
27355: POP
27356: GO 27311
27358: POP
27359: POP
// end ;
27360: LD_VAR 0 1
27364: RET
// export function hHackSetLevel10 ; var i , j ; begin
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
27369: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27370: LD_ADDR_VAR 0 2
27374: PUSH
27375: LD_INT 21
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL_OW 69
27389: PUSH
27390: FOR_IN
27391: IFFALSE 27443
// if IsSelected ( i ) then
27393: LD_VAR 0 2
27397: PPUSH
27398: CALL_OW 306
27402: IFFALSE 27441
// begin for j := 1 to 4 do
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: DOUBLE
27410: LD_INT 1
27412: DEC
27413: ST_TO_ADDR
27414: LD_INT 4
27416: PUSH
27417: FOR_TO
27418: IFFALSE 27439
// SetSkill ( i , j , 10 ) ;
27420: LD_VAR 0 2
27424: PPUSH
27425: LD_VAR 0 3
27429: PPUSH
27430: LD_INT 10
27432: PPUSH
27433: CALL_OW 237
27437: GO 27417
27439: POP
27440: POP
// end ;
27441: GO 27390
27443: POP
27444: POP
// end ;
27445: LD_VAR 0 1
27449: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27450: LD_INT 0
27452: PPUSH
27453: PPUSH
27454: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27455: LD_ADDR_VAR 0 2
27459: PUSH
27460: LD_INT 22
27462: PUSH
27463: LD_OWVAR 2
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 21
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: PUSH
27491: FOR_IN
27492: IFFALSE 27533
// begin for j := 1 to 4 do
27494: LD_ADDR_VAR 0 3
27498: PUSH
27499: DOUBLE
27500: LD_INT 1
27502: DEC
27503: ST_TO_ADDR
27504: LD_INT 4
27506: PUSH
27507: FOR_TO
27508: IFFALSE 27529
// SetSkill ( i , j , 10 ) ;
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_VAR 0 3
27519: PPUSH
27520: LD_INT 10
27522: PPUSH
27523: CALL_OW 237
27527: GO 27507
27529: POP
27530: POP
// end ;
27531: GO 27491
27533: POP
27534: POP
// end ;
27535: LD_VAR 0 1
27539: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27540: LD_INT 0
27542: PPUSH
// uc_side := your_side ;
27543: LD_ADDR_OWVAR 20
27547: PUSH
27548: LD_OWVAR 2
27552: ST_TO_ADDR
// uc_nation := nation ;
27553: LD_ADDR_OWVAR 21
27557: PUSH
27558: LD_VAR 0 1
27562: ST_TO_ADDR
// InitHc ;
27563: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27567: LD_INT 0
27569: PPUSH
27570: LD_VAR 0 2
27574: PPUSH
27575: LD_VAR 0 3
27579: PPUSH
27580: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27584: LD_VAR 0 4
27588: PPUSH
27589: LD_VAR 0 5
27593: PPUSH
27594: CALL_OW 428
27598: PUSH
27599: LD_INT 0
27601: EQUAL
27602: IFFALSE 27626
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27604: CALL_OW 44
27608: PPUSH
27609: LD_VAR 0 4
27613: PPUSH
27614: LD_VAR 0 5
27618: PPUSH
27619: LD_INT 1
27621: PPUSH
27622: CALL_OW 48
// end ;
27626: LD_VAR 0 6
27630: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27631: LD_INT 0
27633: PPUSH
27634: PPUSH
// uc_side := your_side ;
27635: LD_ADDR_OWVAR 20
27639: PUSH
27640: LD_OWVAR 2
27644: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27645: LD_VAR 0 1
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: IN
27672: IFFALSE 27684
// uc_nation := nation_american else
27674: LD_ADDR_OWVAR 21
27678: PUSH
27679: LD_INT 1
27681: ST_TO_ADDR
27682: GO 27727
// if chassis in [ 11 , 12 , 13 , 14 ] then
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 11
27691: PUSH
27692: LD_INT 12
27694: PUSH
27695: LD_INT 13
27697: PUSH
27698: LD_INT 14
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: IN
27707: IFFALSE 27719
// uc_nation := nation_arabian else
27709: LD_ADDR_OWVAR 21
27713: PUSH
27714: LD_INT 2
27716: ST_TO_ADDR
27717: GO 27727
// uc_nation := nation_russian ;
27719: LD_ADDR_OWVAR 21
27723: PUSH
27724: LD_INT 3
27726: ST_TO_ADDR
// vc_chassis := chassis ;
27727: LD_ADDR_OWVAR 37
27731: PUSH
27732: LD_VAR 0 1
27736: ST_TO_ADDR
// vc_engine := engine ;
27737: LD_ADDR_OWVAR 39
27741: PUSH
27742: LD_VAR 0 2
27746: ST_TO_ADDR
// vc_control := control ;
27747: LD_ADDR_OWVAR 38
27751: PUSH
27752: LD_VAR 0 3
27756: ST_TO_ADDR
// vc_weapon := weapon ;
27757: LD_ADDR_OWVAR 40
27761: PUSH
27762: LD_VAR 0 4
27766: ST_TO_ADDR
// un := CreateVehicle ;
27767: LD_ADDR_VAR 0 8
27771: PUSH
27772: CALL_OW 45
27776: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27777: LD_VAR 0 8
27781: PPUSH
27782: LD_INT 0
27784: PPUSH
27785: LD_INT 5
27787: PPUSH
27788: CALL_OW 12
27792: PPUSH
27793: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27797: LD_VAR 0 8
27801: PPUSH
27802: LD_VAR 0 5
27806: PPUSH
27807: LD_VAR 0 6
27811: PPUSH
27812: LD_INT 1
27814: PPUSH
27815: CALL_OW 48
// end ;
27819: LD_VAR 0 7
27823: RET
// export hInvincible ; every 1 do
27824: GO 27826
27826: DISABLE
// hInvincible := [ ] ;
27827: LD_ADDR_EXP 104
27831: PUSH
27832: EMPTY
27833: ST_TO_ADDR
27834: END
// every 10 do var i ;
27835: GO 27837
27837: DISABLE
27838: LD_INT 0
27840: PPUSH
// begin enable ;
27841: ENABLE
// if not hInvincible then
27842: LD_EXP 104
27846: NOT
27847: IFFALSE 27851
// exit ;
27849: GO 27895
// for i in hInvincible do
27851: LD_ADDR_VAR 0 1
27855: PUSH
27856: LD_EXP 104
27860: PUSH
27861: FOR_IN
27862: IFFALSE 27893
// if GetLives ( i ) < 1000 then
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL_OW 256
27873: PUSH
27874: LD_INT 1000
27876: LESS
27877: IFFALSE 27891
// SetLives ( i , 1000 ) ;
27879: LD_VAR 0 1
27883: PPUSH
27884: LD_INT 1000
27886: PPUSH
27887: CALL_OW 234
27891: GO 27861
27893: POP
27894: POP
// end ;
27895: PPOPN 1
27897: END
// export function hHackInvincible ; var i ; begin
27898: LD_INT 0
27900: PPUSH
27901: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27902: LD_ADDR_VAR 0 2
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 21
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 21
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: PPUSH
27935: CALL_OW 69
27939: PUSH
27940: FOR_IN
27941: IFFALSE 28002
// if IsSelected ( i ) then
27943: LD_VAR 0 2
27947: PPUSH
27948: CALL_OW 306
27952: IFFALSE 28000
// begin if i in hInvincible then
27954: LD_VAR 0 2
27958: PUSH
27959: LD_EXP 104
27963: IN
27964: IFFALSE 27984
// hInvincible := hInvincible diff i else
27966: LD_ADDR_EXP 104
27970: PUSH
27971: LD_EXP 104
27975: PUSH
27976: LD_VAR 0 2
27980: DIFF
27981: ST_TO_ADDR
27982: GO 28000
// hInvincible := hInvincible union i ;
27984: LD_ADDR_EXP 104
27988: PUSH
27989: LD_EXP 104
27993: PUSH
27994: LD_VAR 0 2
27998: UNION
27999: ST_TO_ADDR
// end ;
28000: GO 27940
28002: POP
28003: POP
// end ;
28004: LD_VAR 0 1
28008: RET
// export function hHackInvisible ; var i , j ; begin
28009: LD_INT 0
28011: PPUSH
28012: PPUSH
28013: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28014: LD_ADDR_VAR 0 2
28018: PUSH
28019: LD_INT 21
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PPUSH
28029: CALL_OW 69
28033: PUSH
28034: FOR_IN
28035: IFFALSE 28059
// if IsSelected ( i ) then
28037: LD_VAR 0 2
28041: PPUSH
28042: CALL_OW 306
28046: IFFALSE 28057
// ComForceInvisible ( i ) ;
28048: LD_VAR 0 2
28052: PPUSH
28053: CALL_OW 496
28057: GO 28034
28059: POP
28060: POP
// end ;
28061: LD_VAR 0 1
28065: RET
// export function hHackChangeYourSide ; begin
28066: LD_INT 0
28068: PPUSH
// if your_side = 8 then
28069: LD_OWVAR 2
28073: PUSH
28074: LD_INT 8
28076: EQUAL
28077: IFFALSE 28089
// your_side := 0 else
28079: LD_ADDR_OWVAR 2
28083: PUSH
28084: LD_INT 0
28086: ST_TO_ADDR
28087: GO 28103
// your_side := your_side + 1 ;
28089: LD_ADDR_OWVAR 2
28093: PUSH
28094: LD_OWVAR 2
28098: PUSH
28099: LD_INT 1
28101: PLUS
28102: ST_TO_ADDR
// end ;
28103: LD_VAR 0 1
28107: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28108: LD_INT 0
28110: PPUSH
28111: PPUSH
28112: PPUSH
// for i in all_units do
28113: LD_ADDR_VAR 0 2
28117: PUSH
28118: LD_OWVAR 3
28122: PUSH
28123: FOR_IN
28124: IFFALSE 28202
// if IsSelected ( i ) then
28126: LD_VAR 0 2
28130: PPUSH
28131: CALL_OW 306
28135: IFFALSE 28200
// begin j := GetSide ( i ) ;
28137: LD_ADDR_VAR 0 3
28141: PUSH
28142: LD_VAR 0 2
28146: PPUSH
28147: CALL_OW 255
28151: ST_TO_ADDR
// if j = 8 then
28152: LD_VAR 0 3
28156: PUSH
28157: LD_INT 8
28159: EQUAL
28160: IFFALSE 28172
// j := 0 else
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_INT 0
28169: ST_TO_ADDR
28170: GO 28186
// j := j + 1 ;
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_VAR 0 3
28181: PUSH
28182: LD_INT 1
28184: PLUS
28185: ST_TO_ADDR
// SetSide ( i , j ) ;
28186: LD_VAR 0 2
28190: PPUSH
28191: LD_VAR 0 3
28195: PPUSH
28196: CALL_OW 235
// end ;
28200: GO 28123
28202: POP
28203: POP
// end ;
28204: LD_VAR 0 1
28208: RET
// export function hHackFog ; begin
28209: LD_INT 0
28211: PPUSH
// FogOff ( true ) ;
28212: LD_INT 1
28214: PPUSH
28215: CALL_OW 344
// end ;
28219: LD_VAR 0 1
28223: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28224: LD_INT 0
28226: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28227: LD_VAR 0 1
28231: PPUSH
28232: LD_VAR 0 2
28236: PPUSH
28237: LD_VAR 0 3
28241: PPUSH
28242: LD_INT 1
28244: PPUSH
28245: LD_INT 1
28247: PPUSH
28248: CALL_OW 483
// CenterOnXY ( x , y ) ;
28252: LD_VAR 0 2
28256: PPUSH
28257: LD_VAR 0 3
28261: PPUSH
28262: CALL_OW 84
// end ;
28266: LD_VAR 0 4
28270: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28271: LD_INT 0
28273: PPUSH
28274: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28275: LD_VAR 0 1
28279: NOT
28280: PUSH
28281: LD_VAR 0 2
28285: PPUSH
28286: LD_VAR 0 3
28290: PPUSH
28291: CALL_OW 488
28295: NOT
28296: OR
28297: PUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 266
28307: PUSH
28308: LD_INT 3
28310: NONEQUAL
28311: PUSH
28312: LD_VAR 0 1
28316: PPUSH
28317: CALL_OW 247
28321: PUSH
28322: LD_INT 1
28324: EQUAL
28325: NOT
28326: AND
28327: OR
28328: IFFALSE 28332
// exit ;
28330: GO 28481
// if GetType ( factory ) = unit_human then
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 247
28341: PUSH
28342: LD_INT 1
28344: EQUAL
28345: IFFALSE 28362
// factory := IsInUnit ( factory ) ;
28347: LD_ADDR_VAR 0 1
28351: PUSH
28352: LD_VAR 0 1
28356: PPUSH
28357: CALL_OW 310
28361: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 266
28371: PUSH
28372: LD_INT 3
28374: NONEQUAL
28375: IFFALSE 28379
// exit ;
28377: GO 28481
// if HexInfo ( x , y ) = factory then
28379: LD_VAR 0 2
28383: PPUSH
28384: LD_VAR 0 3
28388: PPUSH
28389: CALL_OW 428
28393: PUSH
28394: LD_VAR 0 1
28398: EQUAL
28399: IFFALSE 28426
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28401: LD_ADDR_EXP 105
28405: PUSH
28406: LD_EXP 105
28410: PPUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: LD_INT 0
28418: PPUSH
28419: CALL_OW 1
28423: ST_TO_ADDR
28424: GO 28477
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28426: LD_ADDR_EXP 105
28430: PUSH
28431: LD_EXP 105
28435: PPUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: LD_VAR 0 1
28445: PPUSH
28446: CALL_OW 255
28450: PUSH
28451: LD_VAR 0 1
28455: PUSH
28456: LD_VAR 0 2
28460: PUSH
28461: LD_VAR 0 3
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: PPUSH
28472: CALL_OW 1
28476: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28477: CALL 28486 0 0
// end ;
28481: LD_VAR 0 4
28485: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28486: LD_INT 0
28488: PPUSH
28489: PPUSH
28490: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28491: LD_STRING resetFactoryWaypoint();
28493: PPUSH
28494: CALL_OW 559
// if factoryWaypoints then
28498: LD_EXP 105
28502: IFFALSE 28628
// begin list := PrepareArray ( factoryWaypoints ) ;
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_EXP 105
28513: PPUSH
28514: CALL 70632 0 1
28518: ST_TO_ADDR
// for i := 1 to list do
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: DOUBLE
28525: LD_INT 1
28527: DEC
28528: ST_TO_ADDR
28529: LD_VAR 0 3
28533: PUSH
28534: FOR_TO
28535: IFFALSE 28626
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28537: LD_STRING setFactoryWaypointXY(
28539: PUSH
28540: LD_VAR 0 3
28544: PUSH
28545: LD_VAR 0 2
28549: ARRAY
28550: PUSH
28551: LD_INT 1
28553: ARRAY
28554: STR
28555: PUSH
28556: LD_STRING ,
28558: STR
28559: PUSH
28560: LD_VAR 0 3
28564: PUSH
28565: LD_VAR 0 2
28569: ARRAY
28570: PUSH
28571: LD_INT 2
28573: ARRAY
28574: STR
28575: PUSH
28576: LD_STRING ,
28578: STR
28579: PUSH
28580: LD_VAR 0 3
28584: PUSH
28585: LD_VAR 0 2
28589: ARRAY
28590: PUSH
28591: LD_INT 3
28593: ARRAY
28594: STR
28595: PUSH
28596: LD_STRING ,
28598: STR
28599: PUSH
28600: LD_VAR 0 3
28604: PUSH
28605: LD_VAR 0 2
28609: ARRAY
28610: PUSH
28611: LD_INT 4
28613: ARRAY
28614: STR
28615: PUSH
28616: LD_STRING )
28618: STR
28619: PPUSH
28620: CALL_OW 559
28624: GO 28534
28626: POP
28627: POP
// end ; end ;
28628: LD_VAR 0 1
28632: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28633: LD_INT 0
28635: PPUSH
// if HexInfo ( x , y ) = warehouse then
28636: LD_VAR 0 2
28640: PPUSH
28641: LD_VAR 0 3
28645: PPUSH
28646: CALL_OW 428
28650: PUSH
28651: LD_VAR 0 1
28655: EQUAL
28656: IFFALSE 28683
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28658: LD_ADDR_EXP 106
28662: PUSH
28663: LD_EXP 106
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_INT 0
28675: PPUSH
28676: CALL_OW 1
28680: ST_TO_ADDR
28681: GO 28734
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28683: LD_ADDR_EXP 106
28687: PUSH
28688: LD_EXP 106
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 255
28707: PUSH
28708: LD_VAR 0 1
28712: PUSH
28713: LD_VAR 0 2
28717: PUSH
28718: LD_VAR 0 3
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 1
28733: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28734: CALL 28743 0 0
// end ;
28738: LD_VAR 0 4
28742: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
28747: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28748: LD_STRING resetWarehouseGatheringPoints();
28750: PPUSH
28751: CALL_OW 559
// if warehouseGatheringPoints then
28755: LD_EXP 106
28759: IFFALSE 28885
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28761: LD_ADDR_VAR 0 3
28765: PUSH
28766: LD_EXP 106
28770: PPUSH
28771: CALL 70632 0 1
28775: ST_TO_ADDR
// for i := 1 to list do
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: DOUBLE
28782: LD_INT 1
28784: DEC
28785: ST_TO_ADDR
28786: LD_VAR 0 3
28790: PUSH
28791: FOR_TO
28792: IFFALSE 28883
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28794: LD_STRING setWarehouseGatheringPointXY(
28796: PUSH
28797: LD_VAR 0 3
28801: PUSH
28802: LD_VAR 0 2
28806: ARRAY
28807: PUSH
28808: LD_INT 1
28810: ARRAY
28811: STR
28812: PUSH
28813: LD_STRING ,
28815: STR
28816: PUSH
28817: LD_VAR 0 3
28821: PUSH
28822: LD_VAR 0 2
28826: ARRAY
28827: PUSH
28828: LD_INT 2
28830: ARRAY
28831: STR
28832: PUSH
28833: LD_STRING ,
28835: STR
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_VAR 0 2
28846: ARRAY
28847: PUSH
28848: LD_INT 3
28850: ARRAY
28851: STR
28852: PUSH
28853: LD_STRING ,
28855: STR
28856: PUSH
28857: LD_VAR 0 3
28861: PUSH
28862: LD_VAR 0 2
28866: ARRAY
28867: PUSH
28868: LD_INT 4
28870: ARRAY
28871: STR
28872: PUSH
28873: LD_STRING )
28875: STR
28876: PPUSH
28877: CALL_OW 559
28881: GO 28791
28883: POP
28884: POP
// end ; end ;
28885: LD_VAR 0 1
28889: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28890: LD_EXP 106
28894: IFFALSE 29579
28896: GO 28898
28898: DISABLE
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
// begin enable ;
28910: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_EXP 106
28920: PPUSH
28921: CALL 70632 0 1
28925: ST_TO_ADDR
// if not list then
28926: LD_VAR 0 3
28930: NOT
28931: IFFALSE 28935
// exit ;
28933: GO 29579
// for i := 1 to list do
28935: LD_ADDR_VAR 0 1
28939: PUSH
28940: DOUBLE
28941: LD_INT 1
28943: DEC
28944: ST_TO_ADDR
28945: LD_VAR 0 3
28949: PUSH
28950: FOR_TO
28951: IFFALSE 29577
// begin depot := list [ i ] [ 2 ] ;
28953: LD_ADDR_VAR 0 8
28957: PUSH
28958: LD_VAR 0 3
28962: PUSH
28963: LD_VAR 0 1
28967: ARRAY
28968: PUSH
28969: LD_INT 2
28971: ARRAY
28972: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28973: LD_ADDR_VAR 0 5
28977: PUSH
28978: LD_VAR 0 3
28982: PUSH
28983: LD_VAR 0 1
28987: ARRAY
28988: PUSH
28989: LD_INT 1
28991: ARRAY
28992: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28993: LD_VAR 0 8
28997: PPUSH
28998: CALL_OW 301
29002: PUSH
29003: LD_VAR 0 5
29007: PUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: CALL_OW 255
29017: NONEQUAL
29018: OR
29019: IFFALSE 29048
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29021: LD_ADDR_EXP 106
29025: PUSH
29026: LD_EXP 106
29030: PPUSH
29031: LD_VAR 0 8
29035: PPUSH
29036: LD_INT 0
29038: PPUSH
29039: CALL_OW 1
29043: ST_TO_ADDR
// exit ;
29044: POP
29045: POP
29046: GO 29579
// end ; x := list [ i ] [ 3 ] ;
29048: LD_ADDR_VAR 0 6
29052: PUSH
29053: LD_VAR 0 3
29057: PUSH
29058: LD_VAR 0 1
29062: ARRAY
29063: PUSH
29064: LD_INT 3
29066: ARRAY
29067: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29068: LD_ADDR_VAR 0 7
29072: PUSH
29073: LD_VAR 0 3
29077: PUSH
29078: LD_VAR 0 1
29082: ARRAY
29083: PUSH
29084: LD_INT 4
29086: ARRAY
29087: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29088: LD_ADDR_VAR 0 9
29092: PUSH
29093: LD_VAR 0 6
29097: PPUSH
29098: LD_VAR 0 7
29102: PPUSH
29103: LD_INT 16
29105: PPUSH
29106: CALL 69220 0 3
29110: ST_TO_ADDR
// if not cratesNearbyPoint then
29111: LD_VAR 0 9
29115: NOT
29116: IFFALSE 29122
// exit ;
29118: POP
29119: POP
29120: GO 29579
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29122: LD_ADDR_VAR 0 4
29126: PUSH
29127: LD_INT 22
29129: PUSH
29130: LD_VAR 0 5
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: PUSH
29142: LD_INT 60
29144: PUSH
29145: EMPTY
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 91
29154: PUSH
29155: LD_VAR 0 8
29159: PUSH
29160: LD_INT 6
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: LD_INT 25
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 25
29183: PUSH
29184: LD_INT 16
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: PPUSH
29202: CALL_OW 69
29206: PUSH
29207: LD_VAR 0 8
29211: PPUSH
29212: CALL_OW 313
29216: PPUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 60
29222: PUSH
29223: EMPTY
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 25
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 25
29245: PUSH
29246: LD_INT 16
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 72
29266: UNION
29267: ST_TO_ADDR
// if tmp then
29268: LD_VAR 0 4
29272: IFFALSE 29352
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29274: LD_ADDR_VAR 0 4
29278: PUSH
29279: LD_VAR 0 4
29283: PPUSH
29284: LD_INT 3
29286: PPUSH
29287: CALL 67189 0 2
29291: ST_TO_ADDR
// for j in tmp do
29292: LD_ADDR_VAR 0 2
29296: PUSH
29297: LD_VAR 0 4
29301: PUSH
29302: FOR_IN
29303: IFFALSE 29346
// begin if IsInUnit ( j ) then
29305: LD_VAR 0 2
29309: PPUSH
29310: CALL_OW 310
29314: IFFALSE 29325
// ComExit ( j ) ;
29316: LD_VAR 0 2
29320: PPUSH
29321: CALL 67272 0 1
// AddComCollect ( j , x , y ) ;
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_VAR 0 6
29334: PPUSH
29335: LD_VAR 0 7
29339: PPUSH
29340: CALL_OW 177
// end ;
29344: GO 29302
29346: POP
29347: POP
// exit ;
29348: POP
29349: POP
29350: GO 29579
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29352: LD_ADDR_VAR 0 4
29356: PUSH
29357: LD_INT 22
29359: PUSH
29360: LD_VAR 0 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 91
29371: PUSH
29372: LD_VAR 0 8
29376: PUSH
29377: LD_INT 8
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 34
29390: PUSH
29391: LD_INT 12
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 34
29400: PUSH
29401: LD_INT 51
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 34
29410: PUSH
29411: LD_INT 32
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 34
29420: PUSH
29421: LD_INT 89
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: PPUSH
29440: CALL_OW 69
29444: ST_TO_ADDR
// if tmp then
29445: LD_VAR 0 4
29449: IFFALSE 29575
// begin for j in tmp do
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_VAR 0 4
29460: PUSH
29461: FOR_IN
29462: IFFALSE 29573
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29464: LD_VAR 0 2
29468: PPUSH
29469: CALL_OW 262
29473: PUSH
29474: LD_INT 3
29476: EQUAL
29477: PUSH
29478: LD_VAR 0 2
29482: PPUSH
29483: CALL_OW 261
29487: PUSH
29488: LD_INT 20
29490: GREATER
29491: OR
29492: PUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: CALL_OW 314
29502: NOT
29503: AND
29504: PUSH
29505: LD_VAR 0 2
29509: PPUSH
29510: CALL_OW 263
29514: PUSH
29515: LD_INT 1
29517: NONEQUAL
29518: PUSH
29519: LD_VAR 0 2
29523: PPUSH
29524: CALL_OW 311
29528: OR
29529: AND
29530: IFFALSE 29571
// begin ComCollect ( j , x , y ) ;
29532: LD_VAR 0 2
29536: PPUSH
29537: LD_VAR 0 6
29541: PPUSH
29542: LD_VAR 0 7
29546: PPUSH
29547: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29551: LD_VAR 0 2
29555: PPUSH
29556: LD_VAR 0 8
29560: PPUSH
29561: CALL_OW 172
// exit ;
29565: POP
29566: POP
29567: POP
29568: POP
29569: GO 29579
// end ;
29571: GO 29461
29573: POP
29574: POP
// end ; end ;
29575: GO 28950
29577: POP
29578: POP
// end ; end_of_file end_of_file
29579: PPOPN 9
29581: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29582: LD_INT 0
29584: PPUSH
29585: PPUSH
// if exist_mode then
29586: LD_VAR 0 2
29590: IFFALSE 29615
// unit := CreateCharacter ( prefix & ident ) else
29592: LD_ADDR_VAR 0 5
29596: PUSH
29597: LD_VAR 0 3
29601: PUSH
29602: LD_VAR 0 1
29606: STR
29607: PPUSH
29608: CALL_OW 34
29612: ST_TO_ADDR
29613: GO 29630
// unit := NewCharacter ( ident ) ;
29615: LD_ADDR_VAR 0 5
29619: PUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL_OW 25
29629: ST_TO_ADDR
// result := unit ;
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: LD_VAR 0 5
29639: ST_TO_ADDR
// end ;
29640: LD_VAR 0 4
29644: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29645: LD_INT 0
29647: PPUSH
29648: PPUSH
// if not side or not nation then
29649: LD_VAR 0 1
29653: NOT
29654: PUSH
29655: LD_VAR 0 2
29659: NOT
29660: OR
29661: IFFALSE 29665
// exit ;
29663: GO 30433
// case nation of nation_american :
29665: LD_VAR 0 2
29669: PUSH
29670: LD_INT 1
29672: DOUBLE
29673: EQUAL
29674: IFTRUE 29678
29676: GO 29892
29678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29679: LD_ADDR_VAR 0 4
29683: PUSH
29684: LD_INT 35
29686: PUSH
29687: LD_INT 45
29689: PUSH
29690: LD_INT 46
29692: PUSH
29693: LD_INT 47
29695: PUSH
29696: LD_INT 82
29698: PUSH
29699: LD_INT 83
29701: PUSH
29702: LD_INT 84
29704: PUSH
29705: LD_INT 85
29707: PUSH
29708: LD_INT 86
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 6
29719: PUSH
29720: LD_INT 15
29722: PUSH
29723: LD_INT 16
29725: PUSH
29726: LD_INT 7
29728: PUSH
29729: LD_INT 12
29731: PUSH
29732: LD_INT 13
29734: PUSH
29735: LD_INT 10
29737: PUSH
29738: LD_INT 14
29740: PUSH
29741: LD_INT 20
29743: PUSH
29744: LD_INT 21
29746: PUSH
29747: LD_INT 22
29749: PUSH
29750: LD_INT 25
29752: PUSH
29753: LD_INT 32
29755: PUSH
29756: LD_INT 27
29758: PUSH
29759: LD_INT 36
29761: PUSH
29762: LD_INT 69
29764: PUSH
29765: LD_INT 39
29767: PUSH
29768: LD_INT 34
29770: PUSH
29771: LD_INT 40
29773: PUSH
29774: LD_INT 48
29776: PUSH
29777: LD_INT 49
29779: PUSH
29780: LD_INT 50
29782: PUSH
29783: LD_INT 51
29785: PUSH
29786: LD_INT 52
29788: PUSH
29789: LD_INT 53
29791: PUSH
29792: LD_INT 54
29794: PUSH
29795: LD_INT 55
29797: PUSH
29798: LD_INT 56
29800: PUSH
29801: LD_INT 57
29803: PUSH
29804: LD_INT 58
29806: PUSH
29807: LD_INT 59
29809: PUSH
29810: LD_INT 60
29812: PUSH
29813: LD_INT 61
29815: PUSH
29816: LD_INT 62
29818: PUSH
29819: LD_INT 80
29821: PUSH
29822: LD_INT 82
29824: PUSH
29825: LD_INT 83
29827: PUSH
29828: LD_INT 84
29830: PUSH
29831: LD_INT 85
29833: PUSH
29834: LD_INT 86
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
29890: GO 30357
29892: LD_INT 2
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 30126
29900: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29901: LD_ADDR_VAR 0 4
29905: PUSH
29906: LD_INT 35
29908: PUSH
29909: LD_INT 45
29911: PUSH
29912: LD_INT 46
29914: PUSH
29915: LD_INT 47
29917: PUSH
29918: LD_INT 82
29920: PUSH
29921: LD_INT 83
29923: PUSH
29924: LD_INT 84
29926: PUSH
29927: LD_INT 85
29929: PUSH
29930: LD_INT 87
29932: PUSH
29933: LD_INT 70
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 11
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: LD_INT 4
29947: PUSH
29948: LD_INT 5
29950: PUSH
29951: LD_INT 6
29953: PUSH
29954: LD_INT 15
29956: PUSH
29957: LD_INT 18
29959: PUSH
29960: LD_INT 7
29962: PUSH
29963: LD_INT 17
29965: PUSH
29966: LD_INT 8
29968: PUSH
29969: LD_INT 20
29971: PUSH
29972: LD_INT 21
29974: PUSH
29975: LD_INT 22
29977: PUSH
29978: LD_INT 72
29980: PUSH
29981: LD_INT 26
29983: PUSH
29984: LD_INT 69
29986: PUSH
29987: LD_INT 39
29989: PUSH
29990: LD_INT 40
29992: PUSH
29993: LD_INT 41
29995: PUSH
29996: LD_INT 42
29998: PUSH
29999: LD_INT 43
30001: PUSH
30002: LD_INT 48
30004: PUSH
30005: LD_INT 49
30007: PUSH
30008: LD_INT 50
30010: PUSH
30011: LD_INT 51
30013: PUSH
30014: LD_INT 52
30016: PUSH
30017: LD_INT 53
30019: PUSH
30020: LD_INT 54
30022: PUSH
30023: LD_INT 55
30025: PUSH
30026: LD_INT 56
30028: PUSH
30029: LD_INT 60
30031: PUSH
30032: LD_INT 61
30034: PUSH
30035: LD_INT 62
30037: PUSH
30038: LD_INT 66
30040: PUSH
30041: LD_INT 67
30043: PUSH
30044: LD_INT 68
30046: PUSH
30047: LD_INT 81
30049: PUSH
30050: LD_INT 82
30052: PUSH
30053: LD_INT 83
30055: PUSH
30056: LD_INT 84
30058: PUSH
30059: LD_INT 85
30061: PUSH
30062: LD_INT 87
30064: PUSH
30065: LD_INT 88
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
30124: GO 30357
30126: LD_INT 3
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30356
30134: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30135: LD_ADDR_VAR 0 4
30139: PUSH
30140: LD_INT 46
30142: PUSH
30143: LD_INT 47
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: LD_INT 82
30154: PUSH
30155: LD_INT 83
30157: PUSH
30158: LD_INT 84
30160: PUSH
30161: LD_INT 85
30163: PUSH
30164: LD_INT 86
30166: PUSH
30167: LD_INT 11
30169: PUSH
30170: LD_INT 9
30172: PUSH
30173: LD_INT 20
30175: PUSH
30176: LD_INT 19
30178: PUSH
30179: LD_INT 21
30181: PUSH
30182: LD_INT 24
30184: PUSH
30185: LD_INT 22
30187: PUSH
30188: LD_INT 25
30190: PUSH
30191: LD_INT 28
30193: PUSH
30194: LD_INT 29
30196: PUSH
30197: LD_INT 30
30199: PUSH
30200: LD_INT 31
30202: PUSH
30203: LD_INT 37
30205: PUSH
30206: LD_INT 38
30208: PUSH
30209: LD_INT 32
30211: PUSH
30212: LD_INT 27
30214: PUSH
30215: LD_INT 33
30217: PUSH
30218: LD_INT 69
30220: PUSH
30221: LD_INT 39
30223: PUSH
30224: LD_INT 34
30226: PUSH
30227: LD_INT 40
30229: PUSH
30230: LD_INT 71
30232: PUSH
30233: LD_INT 23
30235: PUSH
30236: LD_INT 44
30238: PUSH
30239: LD_INT 48
30241: PUSH
30242: LD_INT 49
30244: PUSH
30245: LD_INT 50
30247: PUSH
30248: LD_INT 51
30250: PUSH
30251: LD_INT 52
30253: PUSH
30254: LD_INT 53
30256: PUSH
30257: LD_INT 54
30259: PUSH
30260: LD_INT 55
30262: PUSH
30263: LD_INT 56
30265: PUSH
30266: LD_INT 57
30268: PUSH
30269: LD_INT 58
30271: PUSH
30272: LD_INT 59
30274: PUSH
30275: LD_INT 63
30277: PUSH
30278: LD_INT 64
30280: PUSH
30281: LD_INT 65
30283: PUSH
30284: LD_INT 82
30286: PUSH
30287: LD_INT 83
30289: PUSH
30290: LD_INT 84
30292: PUSH
30293: LD_INT 85
30295: PUSH
30296: LD_INT 86
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
30354: GO 30357
30356: POP
// if state > - 1 and state < 3 then
30357: LD_VAR 0 3
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: GREATER
30366: PUSH
30367: LD_VAR 0 3
30371: PUSH
30372: LD_INT 3
30374: LESS
30375: AND
30376: IFFALSE 30433
// for i in result do
30378: LD_ADDR_VAR 0 5
30382: PUSH
30383: LD_VAR 0 4
30387: PUSH
30388: FOR_IN
30389: IFFALSE 30431
// if GetTech ( i , side ) <> state then
30391: LD_VAR 0 5
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 321
30405: PUSH
30406: LD_VAR 0 3
30410: NONEQUAL
30411: IFFALSE 30429
// result := result diff i ;
30413: LD_ADDR_VAR 0 4
30417: PUSH
30418: LD_VAR 0 4
30422: PUSH
30423: LD_VAR 0 5
30427: DIFF
30428: ST_TO_ADDR
30429: GO 30388
30431: POP
30432: POP
// end ;
30433: LD_VAR 0 4
30437: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
30442: PPUSH
// result := true ;
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 1
30450: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30451: LD_ADDR_VAR 0 5
30455: PUSH
30456: LD_VAR 0 2
30460: PPUSH
30461: CALL_OW 480
30465: ST_TO_ADDR
// if not tmp then
30466: LD_VAR 0 5
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30524
// for i in tmp do
30475: LD_ADDR_VAR 0 4
30479: PUSH
30480: LD_VAR 0 5
30484: PUSH
30485: FOR_IN
30486: IFFALSE 30522
// if GetTech ( i , side ) <> state_researched then
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_VAR 0 1
30497: PPUSH
30498: CALL_OW 321
30502: PUSH
30503: LD_INT 2
30505: NONEQUAL
30506: IFFALSE 30520
// begin result := false ;
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: LD_INT 0
30515: ST_TO_ADDR
// exit ;
30516: POP
30517: POP
30518: GO 30524
// end ;
30520: GO 30485
30522: POP
30523: POP
// end ;
30524: LD_VAR 0 3
30528: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30529: LD_INT 0
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30544: LD_VAR 0 1
30548: NOT
30549: PUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: CALL_OW 257
30559: PUSH
30560: LD_INT 9
30562: NONEQUAL
30563: OR
30564: IFFALSE 30568
// exit ;
30566: GO 31141
// side := GetSide ( unit ) ;
30568: LD_ADDR_VAR 0 9
30572: PUSH
30573: LD_VAR 0 1
30577: PPUSH
30578: CALL_OW 255
30582: ST_TO_ADDR
// tech_space := tech_spacanom ;
30583: LD_ADDR_VAR 0 12
30587: PUSH
30588: LD_INT 29
30590: ST_TO_ADDR
// tech_time := tech_taurad ;
30591: LD_ADDR_VAR 0 13
30595: PUSH
30596: LD_INT 28
30598: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30599: LD_ADDR_VAR 0 11
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 310
30613: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30614: LD_VAR 0 11
30618: PPUSH
30619: CALL_OW 247
30623: PUSH
30624: LD_INT 2
30626: EQUAL
30627: IFFALSE 30631
// exit ;
30629: GO 31141
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30631: LD_ADDR_VAR 0 8
30635: PUSH
30636: LD_INT 81
30638: PUSH
30639: LD_VAR 0 9
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: LD_INT 21
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL_OW 69
30673: ST_TO_ADDR
// if not tmp then
30674: LD_VAR 0 8
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 31141
// if in_unit then
30683: LD_VAR 0 11
30687: IFFALSE 30711
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30689: LD_ADDR_VAR 0 10
30693: PUSH
30694: LD_VAR 0 8
30698: PPUSH
30699: LD_VAR 0 11
30703: PPUSH
30704: CALL_OW 74
30708: ST_TO_ADDR
30709: GO 30731
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30711: LD_ADDR_VAR 0 10
30715: PUSH
30716: LD_VAR 0 8
30720: PPUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 74
30730: ST_TO_ADDR
// if not enemy then
30731: LD_VAR 0 10
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 31141
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30740: LD_VAR 0 11
30744: PUSH
30745: LD_VAR 0 11
30749: PPUSH
30750: LD_VAR 0 10
30754: PPUSH
30755: CALL_OW 296
30759: PUSH
30760: LD_INT 13
30762: GREATER
30763: AND
30764: PUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: LD_VAR 0 10
30774: PPUSH
30775: CALL_OW 296
30779: PUSH
30780: LD_INT 12
30782: GREATER
30783: OR
30784: IFFALSE 30788
// exit ;
30786: GO 31141
// missile := [ 1 ] ;
30788: LD_ADDR_VAR 0 14
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30799: LD_VAR 0 9
30803: PPUSH
30804: LD_VAR 0 12
30808: PPUSH
30809: CALL_OW 325
30813: IFFALSE 30842
// missile := Replace ( missile , missile + 1 , 2 ) ;
30815: LD_ADDR_VAR 0 14
30819: PUSH
30820: LD_VAR 0 14
30824: PPUSH
30825: LD_VAR 0 14
30829: PUSH
30830: LD_INT 1
30832: PLUS
30833: PPUSH
30834: LD_INT 2
30836: PPUSH
30837: CALL_OW 1
30841: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30842: LD_VAR 0 9
30846: PPUSH
30847: LD_VAR 0 13
30851: PPUSH
30852: CALL_OW 325
30856: PUSH
30857: LD_VAR 0 10
30861: PPUSH
30862: CALL_OW 255
30866: PPUSH
30867: LD_VAR 0 13
30871: PPUSH
30872: CALL_OW 325
30876: NOT
30877: AND
30878: IFFALSE 30907
// missile := Replace ( missile , missile + 1 , 3 ) ;
30880: LD_ADDR_VAR 0 14
30884: PUSH
30885: LD_VAR 0 14
30889: PPUSH
30890: LD_VAR 0 14
30894: PUSH
30895: LD_INT 1
30897: PLUS
30898: PPUSH
30899: LD_INT 3
30901: PPUSH
30902: CALL_OW 1
30906: ST_TO_ADDR
// if missile < 2 then
30907: LD_VAR 0 14
30911: PUSH
30912: LD_INT 2
30914: LESS
30915: IFFALSE 30919
// exit ;
30917: GO 31141
// x := GetX ( enemy ) ;
30919: LD_ADDR_VAR 0 4
30923: PUSH
30924: LD_VAR 0 10
30928: PPUSH
30929: CALL_OW 250
30933: ST_TO_ADDR
// y := GetY ( enemy ) ;
30934: LD_ADDR_VAR 0 5
30938: PUSH
30939: LD_VAR 0 10
30943: PPUSH
30944: CALL_OW 251
30948: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30949: LD_ADDR_VAR 0 6
30953: PUSH
30954: LD_VAR 0 4
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PPUSH
30963: LD_INT 1
30965: PPUSH
30966: CALL_OW 12
30970: PLUS
30971: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30972: LD_ADDR_VAR 0 7
30976: PUSH
30977: LD_VAR 0 5
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PPUSH
30986: LD_INT 1
30988: PPUSH
30989: CALL_OW 12
30993: PLUS
30994: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30995: LD_VAR 0 6
30999: PPUSH
31000: LD_VAR 0 7
31004: PPUSH
31005: CALL_OW 488
31009: NOT
31010: IFFALSE 31032
// begin _x := x ;
31012: LD_ADDR_VAR 0 6
31016: PUSH
31017: LD_VAR 0 4
31021: ST_TO_ADDR
// _y := y ;
31022: LD_ADDR_VAR 0 7
31026: PUSH
31027: LD_VAR 0 5
31031: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_INT 1
31039: PPUSH
31040: LD_VAR 0 14
31044: PPUSH
31045: CALL_OW 12
31049: ST_TO_ADDR
// case i of 1 :
31050: LD_VAR 0 3
31054: PUSH
31055: LD_INT 1
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31080
31063: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31064: LD_VAR 0 1
31068: PPUSH
31069: LD_VAR 0 10
31073: PPUSH
31074: CALL_OW 115
31078: GO 31141
31080: LD_INT 2
31082: DOUBLE
31083: EQUAL
31084: IFTRUE 31088
31086: GO 31110
31088: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31089: LD_VAR 0 1
31093: PPUSH
31094: LD_VAR 0 6
31098: PPUSH
31099: LD_VAR 0 7
31103: PPUSH
31104: CALL_OW 153
31108: GO 31141
31110: LD_INT 3
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31140
31118: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_VAR 0 6
31128: PPUSH
31129: LD_VAR 0 7
31133: PPUSH
31134: CALL_OW 154
31138: GO 31141
31140: POP
// end ;
31141: LD_VAR 0 2
31145: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31146: LD_INT 0
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
// if not unit or not building then
31154: LD_VAR 0 1
31158: NOT
31159: PUSH
31160: LD_VAR 0 2
31164: NOT
31165: OR
31166: IFFALSE 31170
// exit ;
31168: GO 31328
// x := GetX ( building ) ;
31170: LD_ADDR_VAR 0 5
31174: PUSH
31175: LD_VAR 0 2
31179: PPUSH
31180: CALL_OW 250
31184: ST_TO_ADDR
// y := GetY ( building ) ;
31185: LD_ADDR_VAR 0 6
31189: PUSH
31190: LD_VAR 0 2
31194: PPUSH
31195: CALL_OW 251
31199: ST_TO_ADDR
// for i = 0 to 5 do
31200: LD_ADDR_VAR 0 4
31204: PUSH
31205: DOUBLE
31206: LD_INT 0
31208: DEC
31209: ST_TO_ADDR
31210: LD_INT 5
31212: PUSH
31213: FOR_TO
31214: IFFALSE 31326
// begin _x := ShiftX ( x , i , 3 ) ;
31216: LD_ADDR_VAR 0 7
31220: PUSH
31221: LD_VAR 0 5
31225: PPUSH
31226: LD_VAR 0 4
31230: PPUSH
31231: LD_INT 3
31233: PPUSH
31234: CALL_OW 272
31238: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31239: LD_ADDR_VAR 0 8
31243: PUSH
31244: LD_VAR 0 6
31248: PPUSH
31249: LD_VAR 0 4
31253: PPUSH
31254: LD_INT 3
31256: PPUSH
31257: CALL_OW 273
31261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31262: LD_VAR 0 7
31266: PPUSH
31267: LD_VAR 0 8
31271: PPUSH
31272: CALL_OW 488
31276: NOT
31277: IFFALSE 31281
// continue ;
31279: GO 31213
// if HexInfo ( _x , _y ) = 0 then
31281: LD_VAR 0 7
31285: PPUSH
31286: LD_VAR 0 8
31290: PPUSH
31291: CALL_OW 428
31295: PUSH
31296: LD_INT 0
31298: EQUAL
31299: IFFALSE 31324
// begin ComMoveXY ( unit , _x , _y ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_VAR 0 7
31310: PPUSH
31311: LD_VAR 0 8
31315: PPUSH
31316: CALL_OW 111
// exit ;
31320: POP
31321: POP
31322: GO 31328
// end ; end ;
31324: GO 31213
31326: POP
31327: POP
// end ;
31328: LD_VAR 0 3
31332: RET
// export function ScanBase ( side , base_area ) ; begin
31333: LD_INT 0
31335: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31336: LD_ADDR_VAR 0 3
31340: PUSH
31341: LD_VAR 0 2
31345: PPUSH
31346: LD_INT 81
31348: PUSH
31349: LD_VAR 0 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: CALL_OW 70
31362: ST_TO_ADDR
// end ;
31363: LD_VAR 0 3
31367: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
// result := false ;
31374: LD_ADDR_VAR 0 2
31378: PUSH
31379: LD_INT 0
31381: ST_TO_ADDR
// side := GetSide ( unit ) ;
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 255
31396: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31397: LD_ADDR_VAR 0 4
31401: PUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 248
31411: ST_TO_ADDR
// case nat of 1 :
31412: LD_VAR 0 4
31416: PUSH
31417: LD_INT 1
31419: DOUBLE
31420: EQUAL
31421: IFTRUE 31425
31423: GO 31436
31425: POP
// tech := tech_lassight ; 2 :
31426: LD_ADDR_VAR 0 5
31430: PUSH
31431: LD_INT 12
31433: ST_TO_ADDR
31434: GO 31475
31436: LD_INT 2
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31455
31444: POP
// tech := tech_mortar ; 3 :
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_INT 41
31452: ST_TO_ADDR
31453: GO 31475
31455: LD_INT 3
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31474
31463: POP
// tech := tech_bazooka ; end ;
31464: LD_ADDR_VAR 0 5
31468: PUSH
31469: LD_INT 44
31471: ST_TO_ADDR
31472: GO 31475
31474: POP
// if Researched ( side , tech ) then
31475: LD_VAR 0 3
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: CALL_OW 325
31489: IFFALSE 31516
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: LD_INT 8
31501: PUSH
31502: LD_INT 9
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: PUSH
31510: LD_VAR 0 4
31514: ARRAY
31515: ST_TO_ADDR
// end ;
31516: LD_VAR 0 2
31520: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
// if not mines then
31526: LD_VAR 0 2
31530: NOT
31531: IFFALSE 31535
// exit ;
31533: GO 31679
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31535: LD_ADDR_VAR 0 5
31539: PUSH
31540: LD_INT 81
31542: PUSH
31543: LD_VAR 0 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: LD_INT 21
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PPUSH
31573: CALL_OW 69
31577: ST_TO_ADDR
// for i in mines do
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31677
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31591: LD_VAR 0 4
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: LD_VAR 0 4
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: PPUSH
31609: CALL_OW 458
31613: NOT
31614: IFFALSE 31618
// continue ;
31616: GO 31588
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31618: LD_VAR 0 4
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: LD_VAR 0 4
31631: PUSH
31632: LD_INT 2
31634: ARRAY
31635: PPUSH
31636: CALL_OW 428
31640: PUSH
31641: LD_VAR 0 5
31645: IN
31646: IFFALSE 31675
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31648: LD_VAR 0 4
31652: PUSH
31653: LD_INT 1
31655: ARRAY
31656: PPUSH
31657: LD_VAR 0 4
31661: PUSH
31662: LD_INT 2
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 1
31670: PPUSH
31671: CALL_OW 456
// end ;
31675: GO 31588
31677: POP
31678: POP
// end ;
31679: LD_VAR 0 3
31683: RET
// export function Count ( array ) ; begin
31684: LD_INT 0
31686: PPUSH
// result := array + 0 ;
31687: LD_ADDR_VAR 0 2
31691: PUSH
31692: LD_VAR 0 1
31696: PUSH
31697: LD_INT 0
31699: PLUS
31700: ST_TO_ADDR
// end ;
31701: LD_VAR 0 2
31705: RET
// export function IsEmpty ( building ) ; begin
31706: LD_INT 0
31708: PPUSH
// if not building then
31709: LD_VAR 0 1
31713: NOT
31714: IFFALSE 31718
// exit ;
31716: GO 31761
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31718: LD_ADDR_VAR 0 2
31722: PUSH
31723: LD_VAR 0 1
31727: PUSH
31728: LD_INT 22
31730: PUSH
31731: LD_VAR 0 1
31735: PPUSH
31736: CALL_OW 255
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 58
31747: PUSH
31748: EMPTY
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PPUSH
31755: CALL_OW 69
31759: IN
31760: ST_TO_ADDR
// end ;
31761: LD_VAR 0 2
31765: RET
// export function IsNotFull ( building ) ; var places ; begin
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
// if not building then
31770: LD_VAR 0 1
31774: NOT
31775: IFFALSE 31779
// exit ;
31777: GO 31807
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31779: LD_ADDR_VAR 0 2
31783: PUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: LD_INT 3
31791: PUSH
31792: LD_INT 62
31794: PUSH
31795: EMPTY
31796: LIST
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PPUSH
31802: CALL_OW 72
31806: ST_TO_ADDR
// end ;
31807: LD_VAR 0 2
31811: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
// tmp := [ ] ;
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: EMPTY
31824: ST_TO_ADDR
// list := [ ] ;
31825: LD_ADDR_VAR 0 5
31829: PUSH
31830: EMPTY
31831: ST_TO_ADDR
// for i = 16 to 25 do
31832: LD_ADDR_VAR 0 4
31836: PUSH
31837: DOUBLE
31838: LD_INT 16
31840: DEC
31841: ST_TO_ADDR
31842: LD_INT 25
31844: PUSH
31845: FOR_TO
31846: IFFALSE 31919
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_VAR 0 3
31857: PUSH
31858: LD_INT 22
31860: PUSH
31861: LD_VAR 0 1
31865: PPUSH
31866: CALL_OW 255
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 91
31877: PUSH
31878: LD_VAR 0 1
31882: PUSH
31883: LD_INT 6
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: LD_VAR 0 4
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: PPUSH
31911: CALL_OW 69
31915: ADD
31916: ST_TO_ADDR
31917: GO 31845
31919: POP
31920: POP
// for i = 1 to tmp do
31921: LD_ADDR_VAR 0 4
31925: PUSH
31926: DOUBLE
31927: LD_INT 1
31929: DEC
31930: ST_TO_ADDR
31931: LD_VAR 0 3
31935: PUSH
31936: FOR_TO
31937: IFFALSE 32025
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31939: LD_ADDR_VAR 0 5
31943: PUSH
31944: LD_VAR 0 5
31948: PUSH
31949: LD_VAR 0 3
31953: PUSH
31954: LD_VAR 0 4
31958: ARRAY
31959: PPUSH
31960: CALL_OW 266
31964: PUSH
31965: LD_VAR 0 3
31969: PUSH
31970: LD_VAR 0 4
31974: ARRAY
31975: PPUSH
31976: CALL_OW 250
31980: PUSH
31981: LD_VAR 0 3
31985: PUSH
31986: LD_VAR 0 4
31990: ARRAY
31991: PPUSH
31992: CALL_OW 251
31996: PUSH
31997: LD_VAR 0 3
32001: PUSH
32002: LD_VAR 0 4
32006: ARRAY
32007: PPUSH
32008: CALL_OW 254
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: ADD
32022: ST_TO_ADDR
32023: GO 31936
32025: POP
32026: POP
// result := list ;
32027: LD_ADDR_VAR 0 2
32031: PUSH
32032: LD_VAR 0 5
32036: ST_TO_ADDR
// end ;
32037: LD_VAR 0 2
32041: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32042: LD_INT 0
32044: PPUSH
32045: PPUSH
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
// if not factory then
32051: LD_VAR 0 1
32055: NOT
32056: IFFALSE 32060
// exit ;
32058: GO 32653
// if control = control_apeman then
32060: LD_VAR 0 4
32064: PUSH
32065: LD_INT 5
32067: EQUAL
32068: IFFALSE 32177
// begin tmp := UnitsInside ( factory ) ;
32070: LD_ADDR_VAR 0 8
32074: PUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: CALL_OW 313
32084: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32085: LD_VAR 0 8
32089: PPUSH
32090: LD_INT 25
32092: PUSH
32093: LD_INT 12
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 72
32104: NOT
32105: IFFALSE 32115
// control := control_manual ;
32107: LD_ADDR_VAR 0 4
32111: PUSH
32112: LD_INT 1
32114: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32115: LD_ADDR_VAR 0 8
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL 31812 0 1
32129: ST_TO_ADDR
// if tmp then
32130: LD_VAR 0 8
32134: IFFALSE 32177
// begin for i in tmp do
32136: LD_ADDR_VAR 0 7
32140: PUSH
32141: LD_VAR 0 8
32145: PUSH
32146: FOR_IN
32147: IFFALSE 32175
// if i [ 1 ] = b_ext_radio then
32149: LD_VAR 0 7
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: PUSH
32158: LD_INT 22
32160: EQUAL
32161: IFFALSE 32173
// begin control := control_remote ;
32163: LD_ADDR_VAR 0 4
32167: PUSH
32168: LD_INT 2
32170: ST_TO_ADDR
// break ;
32171: GO 32175
// end ;
32173: GO 32146
32175: POP
32176: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32177: LD_VAR 0 1
32181: PPUSH
32182: LD_VAR 0 2
32186: PPUSH
32187: LD_VAR 0 3
32191: PPUSH
32192: LD_VAR 0 4
32196: PPUSH
32197: LD_VAR 0 5
32201: PPUSH
32202: CALL_OW 448
32206: IFFALSE 32241
// begin result := [ chassis , engine , control , weapon ] ;
32208: LD_ADDR_VAR 0 6
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_VAR 0 3
32222: PUSH
32223: LD_VAR 0 4
32227: PUSH
32228: LD_VAR 0 5
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// exit ;
32239: GO 32653
// end ; _chassis := AvailableChassisList ( factory ) ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 475
32255: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32256: LD_ADDR_VAR 0 11
32260: PUSH
32261: LD_VAR 0 1
32265: PPUSH
32266: CALL_OW 476
32270: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32271: LD_ADDR_VAR 0 12
32275: PUSH
32276: LD_VAR 0 1
32280: PPUSH
32281: CALL_OW 477
32285: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32286: LD_ADDR_VAR 0 10
32290: PUSH
32291: LD_VAR 0 1
32295: PPUSH
32296: CALL_OW 478
32300: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32301: LD_VAR 0 9
32305: NOT
32306: PUSH
32307: LD_VAR 0 11
32311: NOT
32312: OR
32313: PUSH
32314: LD_VAR 0 12
32318: NOT
32319: OR
32320: PUSH
32321: LD_VAR 0 10
32325: NOT
32326: OR
32327: IFFALSE 32362
// begin result := [ chassis , engine , control , weapon ] ;
32329: LD_ADDR_VAR 0 6
32333: PUSH
32334: LD_VAR 0 2
32338: PUSH
32339: LD_VAR 0 3
32343: PUSH
32344: LD_VAR 0 4
32348: PUSH
32349: LD_VAR 0 5
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
// exit ;
32360: GO 32653
// end ; if not chassis in _chassis then
32362: LD_VAR 0 2
32366: PUSH
32367: LD_VAR 0 9
32371: IN
32372: NOT
32373: IFFALSE 32399
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32375: LD_ADDR_VAR 0 2
32379: PUSH
32380: LD_VAR 0 9
32384: PUSH
32385: LD_INT 1
32387: PPUSH
32388: LD_VAR 0 9
32392: PPUSH
32393: CALL_OW 12
32397: ARRAY
32398: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32399: LD_VAR 0 2
32403: PPUSH
32404: LD_VAR 0 3
32408: PPUSH
32409: CALL 32658 0 2
32413: NOT
32414: IFFALSE 32473
// repeat engine := _engine [ 1 ] ;
32416: LD_ADDR_VAR 0 3
32420: PUSH
32421: LD_VAR 0 11
32425: PUSH
32426: LD_INT 1
32428: ARRAY
32429: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32430: LD_ADDR_VAR 0 11
32434: PUSH
32435: LD_VAR 0 11
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL_OW 3
32447: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 3
32457: PPUSH
32458: CALL 32658 0 2
32462: PUSH
32463: LD_VAR 0 11
32467: PUSH
32468: EMPTY
32469: EQUAL
32470: OR
32471: IFFALSE 32416
// if not control in _control then
32473: LD_VAR 0 4
32477: PUSH
32478: LD_VAR 0 12
32482: IN
32483: NOT
32484: IFFALSE 32510
// control := _control [ rand ( 1 , _control ) ] ;
32486: LD_ADDR_VAR 0 4
32490: PUSH
32491: LD_VAR 0 12
32495: PUSH
32496: LD_INT 1
32498: PPUSH
32499: LD_VAR 0 12
32503: PPUSH
32504: CALL_OW 12
32508: ARRAY
32509: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32510: LD_VAR 0 2
32514: PPUSH
32515: LD_VAR 0 5
32519: PPUSH
32520: CALL 32878 0 2
32524: NOT
32525: IFFALSE 32584
// repeat weapon := _weapon [ 1 ] ;
32527: LD_ADDR_VAR 0 5
32531: PUSH
32532: LD_VAR 0 10
32536: PUSH
32537: LD_INT 1
32539: ARRAY
32540: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32541: LD_ADDR_VAR 0 10
32545: PUSH
32546: LD_VAR 0 10
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 3
32558: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32559: LD_VAR 0 2
32563: PPUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: CALL 32878 0 2
32573: PUSH
32574: LD_VAR 0 10
32578: PUSH
32579: EMPTY
32580: EQUAL
32581: OR
32582: IFFALSE 32527
// result := [ ] ;
32584: LD_ADDR_VAR 0 6
32588: PUSH
32589: EMPTY
32590: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_VAR 0 3
32605: PPUSH
32606: LD_VAR 0 4
32610: PPUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: CALL_OW 448
32620: IFFALSE 32653
// result := [ chassis , engine , control , weapon ] ;
32622: LD_ADDR_VAR 0 6
32626: PUSH
32627: LD_VAR 0 2
32631: PUSH
32632: LD_VAR 0 3
32636: PUSH
32637: LD_VAR 0 4
32641: PUSH
32642: LD_VAR 0 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// end ;
32653: LD_VAR 0 6
32657: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32658: LD_INT 0
32660: PPUSH
// if not chassis or not engine then
32661: LD_VAR 0 1
32665: NOT
32666: PUSH
32667: LD_VAR 0 2
32671: NOT
32672: OR
32673: IFFALSE 32677
// exit ;
32675: GO 32873
// case engine of engine_solar :
32677: LD_VAR 0 2
32681: PUSH
32682: LD_INT 2
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32728
32690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 11
32698: PUSH
32699: LD_INT 12
32701: PUSH
32702: LD_INT 13
32704: PUSH
32705: LD_INT 14
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
32726: GO 32857
32728: LD_INT 1
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32798
32736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 11
32744: PUSH
32745: LD_INT 12
32747: PUSH
32748: LD_INT 13
32750: PUSH
32751: LD_INT 14
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: LD_INT 21
32771: PUSH
32772: LD_INT 23
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_INT 24
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: ST_TO_ADDR
32796: GO 32857
32798: LD_INT 3
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32856
32806: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32807: LD_ADDR_VAR 0 3
32811: PUSH
32812: LD_INT 13
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 22
32835: PUSH
32836: LD_INT 23
32838: PUSH
32839: LD_INT 24
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
32854: GO 32857
32856: POP
// result := ( chassis in result ) ;
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_VAR 0 1
32866: PUSH
32867: LD_VAR 0 3
32871: IN
32872: ST_TO_ADDR
// end ;
32873: LD_VAR 0 3
32877: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32878: LD_INT 0
32880: PPUSH
// if not chassis or not weapon then
32881: LD_VAR 0 1
32885: NOT
32886: PUSH
32887: LD_VAR 0 2
32891: NOT
32892: OR
32893: IFFALSE 32897
// exit ;
32895: GO 33957
// case weapon of us_machine_gun :
32897: LD_VAR 0 2
32901: PUSH
32902: LD_INT 2
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32940
32910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
32938: GO 33941
32940: LD_INT 3
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32948
32946: GO 32978
32948: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 3
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: LD_INT 5
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: ST_TO_ADDR
32976: GO 33941
32978: LD_INT 11
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33016
32986: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: LD_INT 5
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
33014: GO 33941
33016: LD_INT 4
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33050
33024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: LD_INT 5
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
33048: GO 33941
33050: LD_INT 5
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33084
33058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33059: LD_ADDR_VAR 0 3
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: LD_INT 4
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: ST_TO_ADDR
33082: GO 33941
33084: LD_INT 9
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33118
33092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: LD_INT 4
33106: PUSH
33107: LD_INT 5
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
33116: GO 33941
33118: LD_INT 7
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33152
33126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: LD_INT 5
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
33150: GO 33941
33152: LD_INT 12
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33186
33160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33161: LD_ADDR_VAR 0 3
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 4
33174: PUSH
33175: LD_INT 5
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
33184: GO 33941
33186: LD_INT 13
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33220
33194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: LD_INT 4
33208: PUSH
33209: LD_INT 5
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
33218: GO 33941
33220: LD_INT 14
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33246
33228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_INT 4
33236: PUSH
33237: LD_INT 5
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: ST_TO_ADDR
33244: GO 33941
33246: LD_INT 6
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33272
33254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33255: LD_ADDR_VAR 0 3
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: ST_TO_ADDR
33270: GO 33941
33272: LD_INT 10
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33280
33278: GO 33298
33280: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 5
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: ST_TO_ADDR
33296: GO 33941
33298: LD_INT 22
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33332
33306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: LD_INT 11
33314: PUSH
33315: LD_INT 12
33317: PUSH
33318: LD_INT 13
33320: PUSH
33321: LD_INT 14
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: ST_TO_ADDR
33330: GO 33941
33332: LD_INT 23
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33340
33338: GO 33366
33340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33341: LD_ADDR_VAR 0 3
33345: PUSH
33346: LD_INT 11
33348: PUSH
33349: LD_INT 12
33351: PUSH
33352: LD_INT 13
33354: PUSH
33355: LD_INT 14
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
33364: GO 33941
33366: LD_INT 24
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33400
33374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33375: LD_ADDR_VAR 0 3
33379: PUSH
33380: LD_INT 11
33382: PUSH
33383: LD_INT 12
33385: PUSH
33386: LD_INT 13
33388: PUSH
33389: LD_INT 14
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
33398: GO 33941
33400: LD_INT 30
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33434
33408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_INT 11
33416: PUSH
33417: LD_INT 12
33419: PUSH
33420: LD_INT 13
33422: PUSH
33423: LD_INT 14
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
33432: GO 33941
33434: LD_INT 25
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33460
33442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_INT 13
33450: PUSH
33451: LD_INT 14
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: ST_TO_ADDR
33458: GO 33941
33460: LD_INT 27
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33486
33468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 13
33476: PUSH
33477: LD_INT 14
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33941
33486: LD_INT 92
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33520
33494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 11
33502: PUSH
33503: LD_INT 12
33505: PUSH
33506: LD_INT 13
33508: PUSH
33509: LD_INT 14
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33941
33520: LD_INT 28
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33546
33528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 13
33536: PUSH
33537: LD_INT 14
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: ST_TO_ADDR
33544: GO 33941
33546: LD_INT 29
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33572
33554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: LD_INT 13
33562: PUSH
33563: LD_INT 14
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: ST_TO_ADDR
33570: GO 33941
33572: LD_INT 31
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33598
33580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_INT 13
33588: PUSH
33589: LD_INT 14
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: ST_TO_ADDR
33596: GO 33941
33598: LD_INT 26
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33606
33604: GO 33624
33606: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 13
33614: PUSH
33615: LD_INT 14
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: ST_TO_ADDR
33622: GO 33941
33624: LD_INT 42
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33632
33630: GO 33658
33632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33633: LD_ADDR_VAR 0 3
33637: PUSH
33638: LD_INT 21
33640: PUSH
33641: LD_INT 22
33643: PUSH
33644: LD_INT 23
33646: PUSH
33647: LD_INT 24
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
33656: GO 33941
33658: LD_INT 43
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33692
33666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_INT 21
33674: PUSH
33675: LD_INT 22
33677: PUSH
33678: LD_INT 23
33680: PUSH
33681: LD_INT 24
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
33690: GO 33941
33692: LD_INT 44
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33726
33700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33701: LD_ADDR_VAR 0 3
33705: PUSH
33706: LD_INT 21
33708: PUSH
33709: LD_INT 22
33711: PUSH
33712: LD_INT 23
33714: PUSH
33715: LD_INT 24
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
33724: GO 33941
33726: LD_INT 45
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33760
33734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 21
33742: PUSH
33743: LD_INT 22
33745: PUSH
33746: LD_INT 23
33748: PUSH
33749: LD_INT 24
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
33758: GO 33941
33760: LD_INT 49
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33768
33766: GO 33794
33768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_INT 21
33776: PUSH
33777: LD_INT 22
33779: PUSH
33780: LD_INT 23
33782: PUSH
33783: LD_INT 24
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
33792: GO 33941
33794: LD_INT 51
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33828
33802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 21
33810: PUSH
33811: LD_INT 22
33813: PUSH
33814: LD_INT 23
33816: PUSH
33817: LD_INT 24
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
33826: GO 33941
33828: LD_INT 52
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 33862
33836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33837: LD_ADDR_VAR 0 3
33841: PUSH
33842: LD_INT 21
33844: PUSH
33845: LD_INT 22
33847: PUSH
33848: LD_INT 23
33850: PUSH
33851: LD_INT 24
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
33860: GO 33941
33862: LD_INT 53
33864: DOUBLE
33865: EQUAL
33866: IFTRUE 33870
33868: GO 33888
33870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_INT 23
33878: PUSH
33879: LD_INT 24
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: ST_TO_ADDR
33886: GO 33941
33888: LD_INT 46
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33896
33894: GO 33914
33896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 23
33904: PUSH
33905: LD_INT 24
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: ST_TO_ADDR
33912: GO 33941
33914: LD_INT 47
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 33940
33922: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33923: LD_ADDR_VAR 0 3
33927: PUSH
33928: LD_INT 23
33930: PUSH
33931: LD_INT 24
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: ST_TO_ADDR
33938: GO 33941
33940: POP
// result := ( chassis in result ) ;
33941: LD_ADDR_VAR 0 3
33945: PUSH
33946: LD_VAR 0 1
33950: PUSH
33951: LD_VAR 0 3
33955: IN
33956: ST_TO_ADDR
// end ;
33957: LD_VAR 0 3
33961: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
// result := array ;
33971: LD_ADDR_VAR 0 5
33975: PUSH
33976: LD_VAR 0 1
33980: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33981: LD_VAR 0 1
33985: NOT
33986: PUSH
33987: LD_VAR 0 2
33991: NOT
33992: OR
33993: PUSH
33994: LD_VAR 0 3
33998: NOT
33999: OR
34000: PUSH
34001: LD_VAR 0 2
34005: PUSH
34006: LD_VAR 0 1
34010: GREATER
34011: OR
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_VAR 0 1
34022: GREATER
34023: OR
34024: IFFALSE 34028
// exit ;
34026: GO 34324
// if direction then
34028: LD_VAR 0 4
34032: IFFALSE 34096
// begin d := 1 ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 1
34041: ST_TO_ADDR
// if i_from > i_to then
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 3
34051: GREATER
34052: IFFALSE 34078
// length := ( array - i_from ) + i_to else
34054: LD_ADDR_VAR 0 11
34058: PUSH
34059: LD_VAR 0 1
34063: PUSH
34064: LD_VAR 0 2
34068: MINUS
34069: PUSH
34070: LD_VAR 0 3
34074: PLUS
34075: ST_TO_ADDR
34076: GO 34094
// length := i_to - i_from ;
34078: LD_ADDR_VAR 0 11
34082: PUSH
34083: LD_VAR 0 3
34087: PUSH
34088: LD_VAR 0 2
34092: MINUS
34093: ST_TO_ADDR
// end else
34094: GO 34157
// begin d := - 1 ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: ST_TO_ADDR
// if i_from > i_to then
34105: LD_VAR 0 2
34109: PUSH
34110: LD_VAR 0 3
34114: GREATER
34115: IFFALSE 34135
// length := i_from - i_to else
34117: LD_ADDR_VAR 0 11
34121: PUSH
34122: LD_VAR 0 2
34126: PUSH
34127: LD_VAR 0 3
34131: MINUS
34132: ST_TO_ADDR
34133: GO 34157
// length := ( array - i_to ) + i_from ;
34135: LD_ADDR_VAR 0 11
34139: PUSH
34140: LD_VAR 0 1
34144: PUSH
34145: LD_VAR 0 3
34149: MINUS
34150: PUSH
34151: LD_VAR 0 2
34155: PLUS
34156: ST_TO_ADDR
// end ; if not length then
34157: LD_VAR 0 11
34161: NOT
34162: IFFALSE 34166
// exit ;
34164: GO 34324
// tmp := array ;
34166: LD_ADDR_VAR 0 10
34170: PUSH
34171: LD_VAR 0 1
34175: ST_TO_ADDR
// for i = 1 to length do
34176: LD_ADDR_VAR 0 6
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 11
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34312
// begin for j = 1 to array do
34194: LD_ADDR_VAR 0 7
34198: PUSH
34199: DOUBLE
34200: LD_INT 1
34202: DEC
34203: ST_TO_ADDR
34204: LD_VAR 0 1
34208: PUSH
34209: FOR_TO
34210: IFFALSE 34298
// begin k := j + d ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_VAR 0 7
34221: PUSH
34222: LD_VAR 0 9
34226: PLUS
34227: ST_TO_ADDR
// if k > array then
34228: LD_VAR 0 8
34232: PUSH
34233: LD_VAR 0 1
34237: GREATER
34238: IFFALSE 34248
// k := 1 ;
34240: LD_ADDR_VAR 0 8
34244: PUSH
34245: LD_INT 1
34247: ST_TO_ADDR
// if not k then
34248: LD_VAR 0 8
34252: NOT
34253: IFFALSE 34265
// k := array ;
34255: LD_ADDR_VAR 0 8
34259: PUSH
34260: LD_VAR 0 1
34264: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34265: LD_ADDR_VAR 0 10
34269: PUSH
34270: LD_VAR 0 10
34274: PPUSH
34275: LD_VAR 0 8
34279: PPUSH
34280: LD_VAR 0 1
34284: PUSH
34285: LD_VAR 0 7
34289: ARRAY
34290: PPUSH
34291: CALL_OW 1
34295: ST_TO_ADDR
// end ;
34296: GO 34209
34298: POP
34299: POP
// array := tmp ;
34300: LD_ADDR_VAR 0 1
34304: PUSH
34305: LD_VAR 0 10
34309: ST_TO_ADDR
// end ;
34310: GO 34191
34312: POP
34313: POP
// result := array ;
34314: LD_ADDR_VAR 0 5
34318: PUSH
34319: LD_VAR 0 1
34323: ST_TO_ADDR
// end ;
34324: LD_VAR 0 5
34328: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34329: LD_INT 0
34331: PPUSH
34332: PPUSH
// result := 0 ;
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
// if not array or not value in array then
34341: LD_VAR 0 1
34345: NOT
34346: PUSH
34347: LD_VAR 0 2
34351: PUSH
34352: LD_VAR 0 1
34356: IN
34357: NOT
34358: OR
34359: IFFALSE 34363
// exit ;
34361: GO 34417
// for i = 1 to array do
34363: LD_ADDR_VAR 0 4
34367: PUSH
34368: DOUBLE
34369: LD_INT 1
34371: DEC
34372: ST_TO_ADDR
34373: LD_VAR 0 1
34377: PUSH
34378: FOR_TO
34379: IFFALSE 34415
// if value = array [ i ] then
34381: LD_VAR 0 2
34385: PUSH
34386: LD_VAR 0 1
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: EQUAL
34397: IFFALSE 34413
// begin result := i ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 4
34408: ST_TO_ADDR
// exit ;
34409: POP
34410: POP
34411: GO 34417
// end ;
34413: GO 34378
34415: POP
34416: POP
// end ;
34417: LD_VAR 0 3
34421: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34422: LD_INT 0
34424: PPUSH
// vc_chassis := chassis ;
34425: LD_ADDR_OWVAR 37
34429: PUSH
34430: LD_VAR 0 1
34434: ST_TO_ADDR
// vc_engine := engine ;
34435: LD_ADDR_OWVAR 39
34439: PUSH
34440: LD_VAR 0 2
34444: ST_TO_ADDR
// vc_control := control ;
34445: LD_ADDR_OWVAR 38
34449: PUSH
34450: LD_VAR 0 3
34454: ST_TO_ADDR
// vc_weapon := weapon ;
34455: LD_ADDR_OWVAR 40
34459: PUSH
34460: LD_VAR 0 4
34464: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34465: LD_ADDR_OWVAR 41
34469: PUSH
34470: LD_VAR 0 5
34474: ST_TO_ADDR
// end ;
34475: LD_VAR 0 6
34479: RET
// export function WantPlant ( unit ) ; var task ; begin
34480: LD_INT 0
34482: PPUSH
34483: PPUSH
// result := false ;
34484: LD_ADDR_VAR 0 2
34488: PUSH
34489: LD_INT 0
34491: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 437
34506: ST_TO_ADDR
// if task then
34507: LD_VAR 0 3
34511: IFFALSE 34539
// if task [ 1 ] [ 1 ] = p then
34513: LD_VAR 0 3
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PUSH
34526: LD_STRING p
34528: EQUAL
34529: IFFALSE 34539
// result := true ;
34531: LD_ADDR_VAR 0 2
34535: PUSH
34536: LD_INT 1
34538: ST_TO_ADDR
// end ;
34539: LD_VAR 0 2
34543: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// if pos < 1 then
34550: LD_VAR 0 2
34554: PUSH
34555: LD_INT 1
34557: LESS
34558: IFFALSE 34562
// exit ;
34560: GO 34865
// if pos = 1 then
34562: LD_VAR 0 2
34566: PUSH
34567: LD_INT 1
34569: EQUAL
34570: IFFALSE 34603
// result := Replace ( arr , pos [ 1 ] , value ) else
34572: LD_ADDR_VAR 0 4
34576: PUSH
34577: LD_VAR 0 1
34581: PPUSH
34582: LD_VAR 0 2
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: CALL_OW 1
34600: ST_TO_ADDR
34601: GO 34865
// begin tmp := arr ;
34603: LD_ADDR_VAR 0 6
34607: PUSH
34608: LD_VAR 0 1
34612: ST_TO_ADDR
// s_arr := [ tmp ] ;
34613: LD_ADDR_VAR 0 7
34617: PUSH
34618: LD_VAR 0 6
34622: PUSH
34623: EMPTY
34624: LIST
34625: ST_TO_ADDR
// for i = 1 to pos - 1 do
34626: LD_ADDR_VAR 0 5
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_VAR 0 2
34640: PUSH
34641: LD_INT 1
34643: MINUS
34644: PUSH
34645: FOR_TO
34646: IFFALSE 34691
// begin tmp := tmp [ pos [ i ] ] ;
34648: LD_ADDR_VAR 0 6
34652: PUSH
34653: LD_VAR 0 6
34657: PUSH
34658: LD_VAR 0 2
34662: PUSH
34663: LD_VAR 0 5
34667: ARRAY
34668: ARRAY
34669: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34670: LD_ADDR_VAR 0 7
34674: PUSH
34675: LD_VAR 0 7
34679: PUSH
34680: LD_VAR 0 6
34684: PUSH
34685: EMPTY
34686: LIST
34687: ADD
34688: ST_TO_ADDR
// end ;
34689: GO 34645
34691: POP
34692: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34693: LD_ADDR_VAR 0 6
34697: PUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: LD_VAR 0 2
34707: PUSH
34708: LD_VAR 0 2
34712: ARRAY
34713: PPUSH
34714: LD_VAR 0 3
34718: PPUSH
34719: CALL_OW 1
34723: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34724: LD_ADDR_VAR 0 7
34728: PUSH
34729: LD_VAR 0 7
34733: PPUSH
34734: LD_VAR 0 7
34738: PPUSH
34739: LD_VAR 0 6
34743: PPUSH
34744: CALL_OW 1
34748: ST_TO_ADDR
// for i = s_arr downto 2 do
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: DOUBLE
34755: LD_VAR 0 7
34759: INC
34760: ST_TO_ADDR
34761: LD_INT 2
34763: PUSH
34764: FOR_DOWNTO
34765: IFFALSE 34849
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34767: LD_ADDR_VAR 0 6
34771: PUSH
34772: LD_VAR 0 7
34776: PUSH
34777: LD_VAR 0 5
34781: PUSH
34782: LD_INT 1
34784: MINUS
34785: ARRAY
34786: PPUSH
34787: LD_VAR 0 2
34791: PUSH
34792: LD_VAR 0 5
34796: PUSH
34797: LD_INT 1
34799: MINUS
34800: ARRAY
34801: PPUSH
34802: LD_VAR 0 7
34806: PUSH
34807: LD_VAR 0 5
34811: ARRAY
34812: PPUSH
34813: CALL_OW 1
34817: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34818: LD_ADDR_VAR 0 7
34822: PUSH
34823: LD_VAR 0 7
34827: PPUSH
34828: LD_VAR 0 5
34832: PUSH
34833: LD_INT 1
34835: MINUS
34836: PPUSH
34837: LD_VAR 0 6
34841: PPUSH
34842: CALL_OW 1
34846: ST_TO_ADDR
// end ;
34847: GO 34764
34849: POP
34850: POP
// result := s_arr [ 1 ] ;
34851: LD_ADDR_VAR 0 4
34855: PUSH
34856: LD_VAR 0 7
34860: PUSH
34861: LD_INT 1
34863: ARRAY
34864: ST_TO_ADDR
// end ; end ;
34865: LD_VAR 0 4
34869: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34870: LD_INT 0
34872: PPUSH
34873: PPUSH
// if not list then
34874: LD_VAR 0 1
34878: NOT
34879: IFFALSE 34883
// exit ;
34881: GO 34974
// i := list [ pos1 ] ;
34883: LD_ADDR_VAR 0 5
34887: PUSH
34888: LD_VAR 0 1
34892: PUSH
34893: LD_VAR 0 2
34897: ARRAY
34898: ST_TO_ADDR
// if not i then
34899: LD_VAR 0 5
34903: NOT
34904: IFFALSE 34908
// exit ;
34906: GO 34974
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34908: LD_ADDR_VAR 0 1
34912: PUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 1
34927: PUSH
34928: LD_VAR 0 3
34932: ARRAY
34933: PPUSH
34934: CALL_OW 1
34938: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34939: LD_ADDR_VAR 0 1
34943: PUSH
34944: LD_VAR 0 1
34948: PPUSH
34949: LD_VAR 0 3
34953: PPUSH
34954: LD_VAR 0 5
34958: PPUSH
34959: CALL_OW 1
34963: ST_TO_ADDR
// result := list ;
34964: LD_ADDR_VAR 0 4
34968: PUSH
34969: LD_VAR 0 1
34973: ST_TO_ADDR
// end ;
34974: LD_VAR 0 4
34978: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34979: LD_INT 0
34981: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 250
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 251
35006: PPUSH
35007: LD_VAR 0 2
35011: PPUSH
35012: LD_VAR 0 3
35016: PPUSH
35017: LD_VAR 0 4
35021: PPUSH
35022: CALL 35032 0 5
35026: ST_TO_ADDR
// end ;
35027: LD_VAR 0 5
35031: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35032: LD_INT 0
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
// if not list then
35038: LD_VAR 0 3
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 35435
// result := [ ] ;
35047: LD_ADDR_VAR 0 6
35051: PUSH
35052: EMPTY
35053: ST_TO_ADDR
// for i in list do
35054: LD_ADDR_VAR 0 7
35058: PUSH
35059: LD_VAR 0 3
35063: PUSH
35064: FOR_IN
35065: IFFALSE 35267
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_VAR 0 7
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: LD_VAR 0 2
35086: PPUSH
35087: CALL_OW 297
35091: ST_TO_ADDR
// if not result then
35092: LD_VAR 0 6
35096: NOT
35097: IFFALSE 35123
// result := [ [ i , tmp ] ] else
35099: LD_ADDR_VAR 0 6
35103: PUSH
35104: LD_VAR 0 7
35108: PUSH
35109: LD_VAR 0 9
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: ST_TO_ADDR
35121: GO 35265
// begin if result [ result ] [ 2 ] < tmp then
35123: LD_VAR 0 6
35127: PUSH
35128: LD_VAR 0 6
35132: ARRAY
35133: PUSH
35134: LD_INT 2
35136: ARRAY
35137: PUSH
35138: LD_VAR 0 9
35142: LESS
35143: IFFALSE 35185
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_VAR 0 6
35154: PPUSH
35155: LD_VAR 0 6
35159: PUSH
35160: LD_INT 1
35162: PLUS
35163: PPUSH
35164: LD_VAR 0 7
35168: PUSH
35169: LD_VAR 0 9
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PPUSH
35178: CALL_OW 2
35182: ST_TO_ADDR
35183: GO 35265
// for j = 1 to result do
35185: LD_ADDR_VAR 0 8
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_VAR 0 6
35199: PUSH
35200: FOR_TO
35201: IFFALSE 35263
// begin if tmp < result [ j ] [ 2 ] then
35203: LD_VAR 0 9
35207: PUSH
35208: LD_VAR 0 6
35212: PUSH
35213: LD_VAR 0 8
35217: ARRAY
35218: PUSH
35219: LD_INT 2
35221: ARRAY
35222: LESS
35223: IFFALSE 35261
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35225: LD_ADDR_VAR 0 6
35229: PUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_VAR 0 7
35244: PUSH
35245: LD_VAR 0 9
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 2
35258: ST_TO_ADDR
// break ;
35259: GO 35263
// end ; end ;
35261: GO 35200
35263: POP
35264: POP
// end ; end ;
35265: GO 35064
35267: POP
35268: POP
// if result and not asc then
35269: LD_VAR 0 6
35273: PUSH
35274: LD_VAR 0 4
35278: NOT
35279: AND
35280: IFFALSE 35355
// begin tmp := result ;
35282: LD_ADDR_VAR 0 9
35286: PUSH
35287: LD_VAR 0 6
35291: ST_TO_ADDR
// for i = tmp downto 1 do
35292: LD_ADDR_VAR 0 7
35296: PUSH
35297: DOUBLE
35298: LD_VAR 0 9
35302: INC
35303: ST_TO_ADDR
35304: LD_INT 1
35306: PUSH
35307: FOR_DOWNTO
35308: IFFALSE 35353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35310: LD_ADDR_VAR 0 6
35314: PUSH
35315: LD_VAR 0 6
35319: PPUSH
35320: LD_VAR 0 9
35324: PUSH
35325: LD_VAR 0 7
35329: MINUS
35330: PUSH
35331: LD_INT 1
35333: PLUS
35334: PPUSH
35335: LD_VAR 0 9
35339: PUSH
35340: LD_VAR 0 7
35344: ARRAY
35345: PPUSH
35346: CALL_OW 1
35350: ST_TO_ADDR
35351: GO 35307
35353: POP
35354: POP
// end ; tmp := [ ] ;
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: EMPTY
35361: ST_TO_ADDR
// if mode then
35362: LD_VAR 0 5
35366: IFFALSE 35435
// begin for i = 1 to result do
35368: LD_ADDR_VAR 0 7
35372: PUSH
35373: DOUBLE
35374: LD_INT 1
35376: DEC
35377: ST_TO_ADDR
35378: LD_VAR 0 6
35382: PUSH
35383: FOR_TO
35384: IFFALSE 35423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35386: LD_ADDR_VAR 0 9
35390: PUSH
35391: LD_VAR 0 9
35395: PPUSH
35396: LD_VAR 0 7
35400: PPUSH
35401: LD_VAR 0 6
35405: PUSH
35406: LD_VAR 0 7
35410: ARRAY
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: CALL_OW 1
35420: ST_TO_ADDR
35421: GO 35383
35423: POP
35424: POP
// result := tmp ;
35425: LD_ADDR_VAR 0 6
35429: PUSH
35430: LD_VAR 0 9
35434: ST_TO_ADDR
// end ; end ;
35435: LD_VAR 0 6
35439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35440: LD_INT 0
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35448: LD_ADDR_VAR 0 5
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: ST_TO_ADDR
// if not x or not y then
35470: LD_VAR 0 2
35474: NOT
35475: PUSH
35476: LD_VAR 0 3
35480: NOT
35481: OR
35482: IFFALSE 35486
// exit ;
35484: GO 37136
// if not range then
35486: LD_VAR 0 4
35490: NOT
35491: IFFALSE 35501
// range := 10 ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_INT 10
35500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35501: LD_ADDR_VAR 0 8
35505: PUSH
35506: LD_INT 81
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 92
35520: PUSH
35521: LD_VAR 0 2
35525: PUSH
35526: LD_VAR 0 3
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 21
35547: PUSH
35548: LD_INT 3
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: PPUSH
35564: CALL_OW 69
35568: ST_TO_ADDR
// if not tmp then
35569: LD_VAR 0 8
35573: NOT
35574: IFFALSE 35578
// exit ;
35576: GO 37136
// for i in tmp do
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_VAR 0 8
35587: PUSH
35588: FOR_IN
35589: IFFALSE 37111
// begin points := [ 0 , 0 , 0 ] ;
35591: LD_ADDR_VAR 0 9
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// bpoints := 1 ;
35610: LD_ADDR_VAR 0 10
35614: PUSH
35615: LD_INT 1
35617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 247
35627: PUSH
35628: LD_INT 1
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 36214
35636: POP
// begin if GetClass ( i ) = 1 then
35637: LD_VAR 0 6
35641: PPUSH
35642: CALL_OW 257
35646: PUSH
35647: LD_INT 1
35649: EQUAL
35650: IFFALSE 35671
// points := [ 10 , 5 , 3 ] ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_INT 10
35659: PUSH
35660: LD_INT 5
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35671: LD_VAR 0 6
35675: PPUSH
35676: CALL_OW 257
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: LD_INT 4
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: IN
35695: IFFALSE 35716
// points := [ 3 , 2 , 1 ] ;
35697: LD_ADDR_VAR 0 9
35701: PUSH
35702: LD_INT 3
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35716: LD_VAR 0 6
35720: PPUSH
35721: CALL_OW 257
35725: PUSH
35726: LD_INT 5
35728: EQUAL
35729: IFFALSE 35750
// points := [ 130 , 5 , 2 ] ;
35731: LD_ADDR_VAR 0 9
35735: PUSH
35736: LD_INT 130
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35750: LD_VAR 0 6
35754: PPUSH
35755: CALL_OW 257
35759: PUSH
35760: LD_INT 8
35762: EQUAL
35763: IFFALSE 35784
// points := [ 35 , 35 , 30 ] ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_INT 35
35772: PUSH
35773: LD_INT 35
35775: PUSH
35776: LD_INT 30
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 257
35793: PUSH
35794: LD_INT 9
35796: EQUAL
35797: IFFALSE 35818
// points := [ 20 , 55 , 40 ] ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_INT 20
35806: PUSH
35807: LD_INT 55
35809: PUSH
35810: LD_INT 40
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35818: LD_VAR 0 6
35822: PPUSH
35823: CALL_OW 257
35827: PUSH
35828: LD_INT 12
35830: PUSH
35831: LD_INT 16
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: IN
35838: IFFALSE 35859
// points := [ 5 , 3 , 2 ] ;
35840: LD_ADDR_VAR 0 9
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35859: LD_VAR 0 6
35863: PPUSH
35864: CALL_OW 257
35868: PUSH
35869: LD_INT 17
35871: EQUAL
35872: IFFALSE 35893
// points := [ 100 , 50 , 75 ] ;
35874: LD_ADDR_VAR 0 9
35878: PUSH
35879: LD_INT 100
35881: PUSH
35882: LD_INT 50
35884: PUSH
35885: LD_INT 75
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35893: LD_VAR 0 6
35897: PPUSH
35898: CALL_OW 257
35902: PUSH
35903: LD_INT 15
35905: EQUAL
35906: IFFALSE 35927
// points := [ 10 , 5 , 3 ] ;
35908: LD_ADDR_VAR 0 9
35912: PUSH
35913: LD_INT 10
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35927: LD_VAR 0 6
35931: PPUSH
35932: CALL_OW 257
35936: PUSH
35937: LD_INT 14
35939: EQUAL
35940: IFFALSE 35961
// points := [ 10 , 0 , 0 ] ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_INT 10
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 257
35970: PUSH
35971: LD_INT 11
35973: EQUAL
35974: IFFALSE 35995
// points := [ 30 , 10 , 5 ] ;
35976: LD_ADDR_VAR 0 9
35980: PUSH
35981: LD_INT 30
35983: PUSH
35984: LD_INT 10
35986: PUSH
35987: LD_INT 5
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35995: LD_VAR 0 1
35999: PPUSH
36000: LD_INT 5
36002: PPUSH
36003: CALL_OW 321
36007: PUSH
36008: LD_INT 2
36010: EQUAL
36011: IFFALSE 36028
// bpoints := bpoints * 1.8 ;
36013: LD_ADDR_VAR 0 10
36017: PUSH
36018: LD_VAR 0 10
36022: PUSH
36023: LD_REAL  1.80000000000000E+0000
36026: MUL
36027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 257
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 4
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: IN
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: LD_INT 51
36064: PPUSH
36065: CALL_OW 321
36069: PUSH
36070: LD_INT 2
36072: EQUAL
36073: AND
36074: IFFALSE 36091
// bpoints := bpoints * 1.2 ;
36076: LD_ADDR_VAR 0 10
36080: PUSH
36081: LD_VAR 0 10
36085: PUSH
36086: LD_REAL  1.20000000000000E+0000
36089: MUL
36090: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36091: LD_VAR 0 6
36095: PPUSH
36096: CALL_OW 257
36100: PUSH
36101: LD_INT 5
36103: PUSH
36104: LD_INT 7
36106: PUSH
36107: LD_INT 9
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: IN
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_INT 52
36123: PPUSH
36124: CALL_OW 321
36128: PUSH
36129: LD_INT 2
36131: EQUAL
36132: AND
36133: IFFALSE 36150
// bpoints := bpoints * 1.5 ;
36135: LD_ADDR_VAR 0 10
36139: PUSH
36140: LD_VAR 0 10
36144: PUSH
36145: LD_REAL  1.50000000000000E+0000
36148: MUL
36149: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_INT 66
36157: PPUSH
36158: CALL_OW 321
36162: PUSH
36163: LD_INT 2
36165: EQUAL
36166: IFFALSE 36183
// bpoints := bpoints * 1.1 ;
36168: LD_ADDR_VAR 0 10
36172: PUSH
36173: LD_VAR 0 10
36177: PUSH
36178: LD_REAL  1.10000000000000E+0000
36181: MUL
36182: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36183: LD_ADDR_VAR 0 10
36187: PUSH
36188: LD_VAR 0 10
36192: PUSH
36193: LD_VAR 0 6
36197: PPUSH
36198: LD_INT 1
36200: PPUSH
36201: CALL_OW 259
36205: PUSH
36206: LD_REAL  1.15000000000000E+0000
36209: MUL
36210: MUL
36211: ST_TO_ADDR
// end ; unit_vehicle :
36212: GO 37040
36214: LD_INT 2
36216: DOUBLE
36217: EQUAL
36218: IFTRUE 36222
36220: GO 37028
36222: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36223: LD_VAR 0 6
36227: PPUSH
36228: CALL_OW 264
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 42
36238: PUSH
36239: LD_INT 24
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: IN
36247: IFFALSE 36268
// points := [ 25 , 5 , 3 ] ;
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_INT 25
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 264
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: LD_INT 43
36283: PUSH
36284: LD_INT 25
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 40 , 15 , 5 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 40
36301: PUSH
36302: LD_INT 15
36304: PUSH
36305: LD_INT 5
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 23
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: IN
36333: IFFALSE 36354
// points := [ 7 , 25 , 8 ] ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_INT 7
36342: PUSH
36343: LD_INT 25
36345: PUSH
36346: LD_INT 8
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 264
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: LD_INT 27
36369: PUSH
36370: LD_INT 44
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: IN
36378: IFFALSE 36399
// points := [ 14 , 50 , 16 ] ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_INT 14
36387: PUSH
36388: LD_INT 50
36390: PUSH
36391: LD_INT 16
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36399: LD_VAR 0 6
36403: PPUSH
36404: CALL_OW 264
36408: PUSH
36409: LD_INT 6
36411: PUSH
36412: LD_INT 46
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: IN
36419: IFFALSE 36440
// points := [ 32 , 120 , 70 ] ;
36421: LD_ADDR_VAR 0 9
36425: PUSH
36426: LD_INT 32
36428: PUSH
36429: LD_INT 120
36431: PUSH
36432: LD_INT 70
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36440: LD_VAR 0 6
36444: PPUSH
36445: CALL_OW 264
36449: PUSH
36450: LD_INT 7
36452: PUSH
36453: LD_INT 28
36455: PUSH
36456: LD_INT 45
36458: PUSH
36459: LD_INT 92
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: IN
36468: IFFALSE 36489
// points := [ 35 , 20 , 45 ] ;
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_INT 35
36477: PUSH
36478: LD_INT 20
36480: PUSH
36481: LD_INT 45
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36489: LD_VAR 0 6
36493: PPUSH
36494: CALL_OW 264
36498: PUSH
36499: LD_INT 47
36501: PUSH
36502: EMPTY
36503: LIST
36504: IN
36505: IFFALSE 36526
// points := [ 67 , 45 , 75 ] ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_INT 67
36514: PUSH
36515: LD_INT 45
36517: PUSH
36518: LD_INT 75
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 26
36538: PUSH
36539: EMPTY
36540: LIST
36541: IN
36542: IFFALSE 36563
// points := [ 120 , 30 , 80 ] ;
36544: LD_ADDR_VAR 0 9
36548: PUSH
36549: LD_INT 120
36551: PUSH
36552: LD_INT 30
36554: PUSH
36555: LD_INT 80
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36563: LD_VAR 0 6
36567: PPUSH
36568: CALL_OW 264
36572: PUSH
36573: LD_INT 22
36575: PUSH
36576: EMPTY
36577: LIST
36578: IN
36579: IFFALSE 36600
// points := [ 40 , 1 , 1 ] ;
36581: LD_ADDR_VAR 0 9
36585: PUSH
36586: LD_INT 40
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36600: LD_VAR 0 6
36604: PPUSH
36605: CALL_OW 264
36609: PUSH
36610: LD_INT 29
36612: PUSH
36613: EMPTY
36614: LIST
36615: IN
36616: IFFALSE 36637
// points := [ 70 , 200 , 400 ] ;
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: LD_INT 70
36625: PUSH
36626: LD_INT 200
36628: PUSH
36629: LD_INT 400
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36637: LD_VAR 0 6
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 14
36649: PUSH
36650: LD_INT 53
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: IN
36657: IFFALSE 36678
// points := [ 40 , 10 , 20 ] ;
36659: LD_ADDR_VAR 0 9
36663: PUSH
36664: LD_INT 40
36666: PUSH
36667: LD_INT 10
36669: PUSH
36670: LD_INT 20
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36678: LD_VAR 0 6
36682: PPUSH
36683: CALL_OW 264
36687: PUSH
36688: LD_INT 9
36690: PUSH
36691: EMPTY
36692: LIST
36693: IN
36694: IFFALSE 36715
// points := [ 5 , 70 , 20 ] ;
36696: LD_ADDR_VAR 0 9
36700: PUSH
36701: LD_INT 5
36703: PUSH
36704: LD_INT 70
36706: PUSH
36707: LD_INT 20
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_INT 10
36727: PUSH
36728: EMPTY
36729: LIST
36730: IN
36731: IFFALSE 36752
// points := [ 35 , 110 , 70 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 35
36740: PUSH
36741: LD_INT 110
36743: PUSH
36744: LD_INT 70
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 265
36761: PUSH
36762: LD_INT 25
36764: EQUAL
36765: IFFALSE 36786
// points := [ 80 , 65 , 100 ] ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_INT 80
36774: PUSH
36775: LD_INT 65
36777: PUSH
36778: LD_INT 100
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36786: LD_VAR 0 6
36790: PPUSH
36791: CALL_OW 263
36795: PUSH
36796: LD_INT 1
36798: EQUAL
36799: IFFALSE 36834
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL_OW 311
36820: PPUSH
36821: LD_INT 3
36823: PPUSH
36824: CALL_OW 259
36828: PUSH
36829: LD_INT 4
36831: MUL
36832: MUL
36833: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36834: LD_VAR 0 6
36838: PPUSH
36839: CALL_OW 263
36843: PUSH
36844: LD_INT 2
36846: EQUAL
36847: IFFALSE 36898
// begin j := IsControledBy ( i ) ;
36849: LD_ADDR_VAR 0 7
36853: PUSH
36854: LD_VAR 0 6
36858: PPUSH
36859: CALL_OW 312
36863: ST_TO_ADDR
// if j then
36864: LD_VAR 0 7
36868: IFFALSE 36898
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36870: LD_ADDR_VAR 0 10
36874: PUSH
36875: LD_VAR 0 10
36879: PUSH
36880: LD_VAR 0 7
36884: PPUSH
36885: LD_INT 3
36887: PPUSH
36888: CALL_OW 259
36892: PUSH
36893: LD_INT 3
36895: MUL
36896: MUL
36897: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36898: LD_VAR 0 6
36902: PPUSH
36903: CALL_OW 264
36907: PUSH
36908: LD_INT 5
36910: PUSH
36911: LD_INT 6
36913: PUSH
36914: LD_INT 46
36916: PUSH
36917: LD_INT 44
36919: PUSH
36920: LD_INT 47
36922: PUSH
36923: LD_INT 45
36925: PUSH
36926: LD_INT 28
36928: PUSH
36929: LD_INT 7
36931: PUSH
36932: LD_INT 27
36934: PUSH
36935: LD_INT 29
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: IN
36950: PUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: LD_INT 52
36958: PPUSH
36959: CALL_OW 321
36963: PUSH
36964: LD_INT 2
36966: EQUAL
36967: AND
36968: IFFALSE 36985
// bpoints := bpoints * 1.2 ;
36970: LD_ADDR_VAR 0 10
36974: PUSH
36975: LD_VAR 0 10
36979: PUSH
36980: LD_REAL  1.20000000000000E+0000
36983: MUL
36984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36985: LD_VAR 0 6
36989: PPUSH
36990: CALL_OW 264
36994: PUSH
36995: LD_INT 6
36997: PUSH
36998: LD_INT 46
37000: PUSH
37001: LD_INT 47
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: IN
37009: IFFALSE 37026
// bpoints := bpoints * 1.2 ;
37011: LD_ADDR_VAR 0 10
37015: PUSH
37016: LD_VAR 0 10
37020: PUSH
37021: LD_REAL  1.20000000000000E+0000
37024: MUL
37025: ST_TO_ADDR
// end ; unit_building :
37026: GO 37040
37028: LD_INT 3
37030: DOUBLE
37031: EQUAL
37032: IFTRUE 37036
37034: GO 37039
37036: POP
// ; end ;
37037: GO 37040
37039: POP
// for j = 1 to 3 do
37040: LD_ADDR_VAR 0 7
37044: PUSH
37045: DOUBLE
37046: LD_INT 1
37048: DEC
37049: ST_TO_ADDR
37050: LD_INT 3
37052: PUSH
37053: FOR_TO
37054: IFFALSE 37107
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37056: LD_ADDR_VAR 0 5
37060: PUSH
37061: LD_VAR 0 5
37065: PPUSH
37066: LD_VAR 0 7
37070: PPUSH
37071: LD_VAR 0 5
37075: PUSH
37076: LD_VAR 0 7
37080: ARRAY
37081: PUSH
37082: LD_VAR 0 9
37086: PUSH
37087: LD_VAR 0 7
37091: ARRAY
37092: PUSH
37093: LD_VAR 0 10
37097: MUL
37098: PLUS
37099: PPUSH
37100: CALL_OW 1
37104: ST_TO_ADDR
37105: GO 37053
37107: POP
37108: POP
// end ;
37109: GO 35588
37111: POP
37112: POP
// result := Replace ( result , 4 , tmp ) ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: LD_INT 4
37125: PPUSH
37126: LD_VAR 0 8
37130: PPUSH
37131: CALL_OW 1
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 5
37140: RET
// export function DangerAtRange ( unit , range ) ; begin
37141: LD_INT 0
37143: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_VAR 0 1
37153: PPUSH
37154: CALL_OW 255
37158: PPUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL_OW 250
37168: PPUSH
37169: LD_VAR 0 1
37173: PPUSH
37174: CALL_OW 251
37178: PPUSH
37179: LD_VAR 0 2
37183: PPUSH
37184: CALL 35440 0 4
37188: ST_TO_ADDR
// end ;
37189: LD_VAR 0 3
37193: RET
// export function DangerInArea ( side , area ) ; begin
37194: LD_INT 0
37196: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37197: LD_ADDR_VAR 0 3
37201: PUSH
37202: LD_VAR 0 2
37206: PPUSH
37207: LD_INT 81
37209: PUSH
37210: LD_VAR 0 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 70
37223: ST_TO_ADDR
// end ;
37224: LD_VAR 0 3
37228: RET
// export function IsExtension ( b ) ; begin
37229: LD_INT 0
37231: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37232: LD_ADDR_VAR 0 2
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 23
37244: PUSH
37245: LD_INT 20
37247: PUSH
37248: LD_INT 22
37250: PUSH
37251: LD_INT 17
37253: PUSH
37254: LD_INT 24
37256: PUSH
37257: LD_INT 21
37259: PUSH
37260: LD_INT 19
37262: PUSH
37263: LD_INT 16
37265: PUSH
37266: LD_INT 25
37268: PUSH
37269: LD_INT 18
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: IN
37284: ST_TO_ADDR
// end ;
37285: LD_VAR 0 2
37289: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37290: LD_INT 0
37292: PPUSH
37293: PPUSH
37294: PPUSH
// result := [ ] ;
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: EMPTY
37301: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37302: LD_ADDR_VAR 0 5
37306: PUSH
37307: LD_VAR 0 2
37311: PPUSH
37312: LD_INT 21
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: CALL_OW 70
37326: ST_TO_ADDR
// if not tmp then
37327: LD_VAR 0 5
37331: NOT
37332: IFFALSE 37336
// exit ;
37334: GO 37400
// if checkLink then
37336: LD_VAR 0 3
37340: IFFALSE 37390
// begin for i in tmp do
37342: LD_ADDR_VAR 0 6
37346: PUSH
37347: LD_VAR 0 5
37351: PUSH
37352: FOR_IN
37353: IFFALSE 37388
// if GetBase ( i ) <> base then
37355: LD_VAR 0 6
37359: PPUSH
37360: CALL_OW 274
37364: PUSH
37365: LD_VAR 0 1
37369: NONEQUAL
37370: IFFALSE 37386
// ComLinkToBase ( base , i ) ;
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 169
37386: GO 37352
37388: POP
37389: POP
// end ; result := tmp ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 5
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 4
37404: RET
// export function ComComplete ( units , b ) ; var i ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
// if not units then
37409: LD_VAR 0 1
37413: NOT
37414: IFFALSE 37418
// exit ;
37416: GO 37508
// for i in units do
37418: LD_ADDR_VAR 0 4
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: FOR_IN
37429: IFFALSE 37506
// if BuildingStatus ( b ) = bs_build then
37431: LD_VAR 0 2
37435: PPUSH
37436: CALL_OW 461
37440: PUSH
37441: LD_INT 1
37443: EQUAL
37444: IFFALSE 37504
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37446: LD_VAR 0 4
37450: PPUSH
37451: LD_STRING h
37453: PUSH
37454: LD_VAR 0 2
37458: PPUSH
37459: CALL_OW 250
37463: PUSH
37464: LD_VAR 0 2
37468: PPUSH
37469: CALL_OW 251
37473: PUSH
37474: LD_VAR 0 2
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: PUSH
37497: EMPTY
37498: LIST
37499: PPUSH
37500: CALL_OW 446
37504: GO 37428
37506: POP
37507: POP
// end ;
37508: LD_VAR 0 3
37512: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37513: LD_INT 0
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37521: LD_VAR 0 1
37525: NOT
37526: PUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: CALL_OW 263
37536: PUSH
37537: LD_INT 2
37539: NONEQUAL
37540: OR
37541: IFFALSE 37545
// exit ;
37543: GO 37861
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37545: LD_ADDR_VAR 0 6
37549: PUSH
37550: LD_INT 22
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 255
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 30
37572: PUSH
37573: LD_INT 36
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 34
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PPUSH
37599: CALL_OW 69
37603: ST_TO_ADDR
// if not tmp then
37604: LD_VAR 0 6
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37861
// result := [ ] ;
37613: LD_ADDR_VAR 0 2
37617: PUSH
37618: EMPTY
37619: ST_TO_ADDR
// for i in tmp do
37620: LD_ADDR_VAR 0 3
37624: PUSH
37625: LD_VAR 0 6
37629: PUSH
37630: FOR_IN
37631: IFFALSE 37702
// begin t := UnitsInside ( i ) ;
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_VAR 0 3
37642: PPUSH
37643: CALL_OW 313
37647: ST_TO_ADDR
// if t then
37648: LD_VAR 0 4
37652: IFFALSE 37700
// for j in t do
37654: LD_ADDR_VAR 0 7
37658: PUSH
37659: LD_VAR 0 4
37663: PUSH
37664: FOR_IN
37665: IFFALSE 37698
// result := Replace ( result , result + 1 , j ) ;
37667: LD_ADDR_VAR 0 2
37671: PUSH
37672: LD_VAR 0 2
37676: PPUSH
37677: LD_VAR 0 2
37681: PUSH
37682: LD_INT 1
37684: PLUS
37685: PPUSH
37686: LD_VAR 0 7
37690: PPUSH
37691: CALL_OW 1
37695: ST_TO_ADDR
37696: GO 37664
37698: POP
37699: POP
// end ;
37700: GO 37630
37702: POP
37703: POP
// if not result then
37704: LD_VAR 0 2
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 37861
// mech := result [ 1 ] ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 2
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: ST_TO_ADDR
// if result > 1 then
37727: LD_VAR 0 2
37731: PUSH
37732: LD_INT 1
37734: GREATER
37735: IFFALSE 37847
// begin for i = 2 to result do
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: DOUBLE
37743: LD_INT 2
37745: DEC
37746: ST_TO_ADDR
37747: LD_VAR 0 2
37751: PUSH
37752: FOR_TO
37753: IFFALSE 37845
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: LD_VAR 0 2
37764: PUSH
37765: LD_VAR 0 3
37769: ARRAY
37770: PPUSH
37771: LD_INT 3
37773: PPUSH
37774: CALL_OW 259
37778: PUSH
37779: LD_VAR 0 2
37783: PUSH
37784: LD_VAR 0 3
37788: ARRAY
37789: PPUSH
37790: CALL_OW 432
37794: MINUS
37795: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37796: LD_VAR 0 4
37800: PUSH
37801: LD_VAR 0 5
37805: PPUSH
37806: LD_INT 3
37808: PPUSH
37809: CALL_OW 259
37813: PUSH
37814: LD_VAR 0 5
37818: PPUSH
37819: CALL_OW 432
37823: MINUS
37824: GREATEREQUAL
37825: IFFALSE 37843
// mech := result [ i ] ;
37827: LD_ADDR_VAR 0 5
37831: PUSH
37832: LD_VAR 0 2
37836: PUSH
37837: LD_VAR 0 3
37841: ARRAY
37842: ST_TO_ADDR
// end ;
37843: GO 37752
37845: POP
37846: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37847: LD_VAR 0 1
37851: PPUSH
37852: LD_VAR 0 5
37856: PPUSH
37857: CALL_OW 135
// end ;
37861: LD_VAR 0 2
37865: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37866: LD_INT 0
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
// result := [ ] ;
37881: LD_ADDR_VAR 0 7
37885: PUSH
37886: EMPTY
37887: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 266
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: IN
37908: NOT
37909: IFFALSE 37913
// exit ;
37911: GO 39547
// if name then
37913: LD_VAR 0 3
37917: IFFALSE 37933
// SetBName ( base_dep , name ) ;
37919: LD_VAR 0 1
37923: PPUSH
37924: LD_VAR 0 3
37928: PPUSH
37929: CALL_OW 500
// base := GetBase ( base_dep ) ;
37933: LD_ADDR_VAR 0 15
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 274
37947: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37948: LD_ADDR_VAR 0 16
37952: PUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: CALL_OW 255
37962: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37963: LD_ADDR_VAR 0 17
37967: PUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 248
37977: ST_TO_ADDR
// if sources then
37978: LD_VAR 0 5
37982: IFFALSE 38029
// for i = 1 to 3 do
37984: LD_ADDR_VAR 0 8
37988: PUSH
37989: DOUBLE
37990: LD_INT 1
37992: DEC
37993: ST_TO_ADDR
37994: LD_INT 3
37996: PUSH
37997: FOR_TO
37998: IFFALSE 38027
// AddResourceType ( base , i , sources [ i ] ) ;
38000: LD_VAR 0 15
38004: PPUSH
38005: LD_VAR 0 8
38009: PPUSH
38010: LD_VAR 0 5
38014: PUSH
38015: LD_VAR 0 8
38019: ARRAY
38020: PPUSH
38021: CALL_OW 276
38025: GO 37997
38027: POP
38028: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38029: LD_ADDR_VAR 0 18
38033: PUSH
38034: LD_VAR 0 15
38038: PPUSH
38039: LD_VAR 0 2
38043: PPUSH
38044: LD_INT 1
38046: PPUSH
38047: CALL 37290 0 3
38051: ST_TO_ADDR
// InitHc ;
38052: CALL_OW 19
// InitUc ;
38056: CALL_OW 18
// uc_side := side ;
38060: LD_ADDR_OWVAR 20
38064: PUSH
38065: LD_VAR 0 16
38069: ST_TO_ADDR
// uc_nation := nation ;
38070: LD_ADDR_OWVAR 21
38074: PUSH
38075: LD_VAR 0 17
38079: ST_TO_ADDR
// if buildings then
38080: LD_VAR 0 18
38084: IFFALSE 39406
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38086: LD_ADDR_VAR 0 19
38090: PUSH
38091: LD_VAR 0 18
38095: PPUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 30
38101: PUSH
38102: LD_INT 29
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 30
38111: PUSH
38112: LD_INT 30
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: PPUSH
38124: CALL_OW 72
38128: ST_TO_ADDR
// if tmp then
38129: LD_VAR 0 19
38133: IFFALSE 38181
// for i in tmp do
38135: LD_ADDR_VAR 0 8
38139: PUSH
38140: LD_VAR 0 19
38144: PUSH
38145: FOR_IN
38146: IFFALSE 38179
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38148: LD_VAR 0 8
38152: PPUSH
38153: CALL_OW 250
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: CALL_OW 251
38167: PPUSH
38168: LD_VAR 0 16
38172: PPUSH
38173: CALL_OW 441
38177: GO 38145
38179: POP
38180: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38181: LD_VAR 0 18
38185: PPUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 30
38191: PUSH
38192: LD_INT 32
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 30
38201: PUSH
38202: LD_INT 33
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: PPUSH
38214: CALL_OW 72
38218: IFFALSE 38306
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38220: LD_ADDR_VAR 0 8
38224: PUSH
38225: LD_VAR 0 18
38229: PPUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 30
38235: PUSH
38236: LD_INT 32
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 30
38245: PUSH
38246: LD_INT 33
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PPUSH
38258: CALL_OW 72
38262: PUSH
38263: FOR_IN
38264: IFFALSE 38304
// begin if not GetBWeapon ( i ) then
38266: LD_VAR 0 8
38270: PPUSH
38271: CALL_OW 269
38275: NOT
38276: IFFALSE 38302
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38278: LD_VAR 0 8
38282: PPUSH
38283: LD_VAR 0 8
38287: PPUSH
38288: LD_VAR 0 2
38292: PPUSH
38293: CALL 39552 0 2
38297: PPUSH
38298: CALL_OW 431
// end ;
38302: GO 38263
38304: POP
38305: POP
// end ; for i = 1 to personel do
38306: LD_ADDR_VAR 0 8
38310: PUSH
38311: DOUBLE
38312: LD_INT 1
38314: DEC
38315: ST_TO_ADDR
38316: LD_VAR 0 6
38320: PUSH
38321: FOR_TO
38322: IFFALSE 39386
// begin if i > 4 then
38324: LD_VAR 0 8
38328: PUSH
38329: LD_INT 4
38331: GREATER
38332: IFFALSE 38336
// break ;
38334: GO 39386
// case i of 1 :
38336: LD_VAR 0 8
38340: PUSH
38341: LD_INT 1
38343: DOUBLE
38344: EQUAL
38345: IFTRUE 38349
38347: GO 38429
38349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38350: LD_ADDR_VAR 0 12
38354: PUSH
38355: LD_VAR 0 18
38359: PPUSH
38360: LD_INT 22
38362: PUSH
38363: LD_VAR 0 16
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 58
38374: PUSH
38375: EMPTY
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 30
38383: PUSH
38384: LD_INT 32
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 30
38393: PUSH
38394: LD_INT 4
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 30
38403: PUSH
38404: LD_INT 5
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: PPUSH
38422: CALL_OW 72
38426: ST_TO_ADDR
38427: GO 38651
38429: LD_INT 2
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38499
38437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38438: LD_ADDR_VAR 0 12
38442: PUSH
38443: LD_VAR 0 18
38447: PPUSH
38448: LD_INT 22
38450: PUSH
38451: LD_VAR 0 16
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 30
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 72
38496: ST_TO_ADDR
38497: GO 38651
38499: LD_INT 3
38501: DOUBLE
38502: EQUAL
38503: IFTRUE 38507
38505: GO 38569
38507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38508: LD_ADDR_VAR 0 12
38512: PUSH
38513: LD_VAR 0 18
38517: PPUSH
38518: LD_INT 22
38520: PUSH
38521: LD_VAR 0 16
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 30
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 30
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PPUSH
38562: CALL_OW 72
38566: ST_TO_ADDR
38567: GO 38651
38569: LD_INT 4
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38650
38577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38578: LD_ADDR_VAR 0 12
38582: PUSH
38583: LD_VAR 0 18
38587: PPUSH
38588: LD_INT 22
38590: PUSH
38591: LD_VAR 0 16
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 6
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 30
38615: PUSH
38616: LD_INT 7
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: LD_INT 8
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 72
38647: ST_TO_ADDR
38648: GO 38651
38650: POP
// if i = 1 then
38651: LD_VAR 0 8
38655: PUSH
38656: LD_INT 1
38658: EQUAL
38659: IFFALSE 38770
// begin tmp := [ ] ;
38661: LD_ADDR_VAR 0 19
38665: PUSH
38666: EMPTY
38667: ST_TO_ADDR
// for j in f do
38668: LD_ADDR_VAR 0 9
38672: PUSH
38673: LD_VAR 0 12
38677: PUSH
38678: FOR_IN
38679: IFFALSE 38752
// if GetBType ( j ) = b_bunker then
38681: LD_VAR 0 9
38685: PPUSH
38686: CALL_OW 266
38690: PUSH
38691: LD_INT 32
38693: EQUAL
38694: IFFALSE 38721
// tmp := Insert ( tmp , 1 , j ) else
38696: LD_ADDR_VAR 0 19
38700: PUSH
38701: LD_VAR 0 19
38705: PPUSH
38706: LD_INT 1
38708: PPUSH
38709: LD_VAR 0 9
38713: PPUSH
38714: CALL_OW 2
38718: ST_TO_ADDR
38719: GO 38750
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38721: LD_ADDR_VAR 0 19
38725: PUSH
38726: LD_VAR 0 19
38730: PPUSH
38731: LD_VAR 0 19
38735: PUSH
38736: LD_INT 1
38738: PLUS
38739: PPUSH
38740: LD_VAR 0 9
38744: PPUSH
38745: CALL_OW 2
38749: ST_TO_ADDR
38750: GO 38678
38752: POP
38753: POP
// if tmp then
38754: LD_VAR 0 19
38758: IFFALSE 38770
// f := tmp ;
38760: LD_ADDR_VAR 0 12
38764: PUSH
38765: LD_VAR 0 19
38769: ST_TO_ADDR
// end ; x := personel [ i ] ;
38770: LD_ADDR_VAR 0 13
38774: PUSH
38775: LD_VAR 0 6
38779: PUSH
38780: LD_VAR 0 8
38784: ARRAY
38785: ST_TO_ADDR
// if x = - 1 then
38786: LD_VAR 0 13
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: EQUAL
38795: IFFALSE 39004
// begin for j in f do
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_VAR 0 12
38806: PUSH
38807: FOR_IN
38808: IFFALSE 39000
// repeat InitHc ;
38810: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38814: LD_VAR 0 9
38818: PPUSH
38819: CALL_OW 266
38823: PUSH
38824: LD_INT 5
38826: EQUAL
38827: IFFALSE 38897
// begin if UnitsInside ( j ) < 3 then
38829: LD_VAR 0 9
38833: PPUSH
38834: CALL_OW 313
38838: PUSH
38839: LD_INT 3
38841: LESS
38842: IFFALSE 38878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38844: LD_INT 0
38846: PPUSH
38847: LD_INT 5
38849: PUSH
38850: LD_INT 8
38852: PUSH
38853: LD_INT 9
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_VAR 0 17
38865: ARRAY
38866: PPUSH
38867: LD_VAR 0 4
38871: PPUSH
38872: CALL_OW 380
38876: GO 38895
// PrepareHuman ( false , i , skill ) ;
38878: LD_INT 0
38880: PPUSH
38881: LD_VAR 0 8
38885: PPUSH
38886: LD_VAR 0 4
38890: PPUSH
38891: CALL_OW 380
// end else
38895: GO 38914
// PrepareHuman ( false , i , skill ) ;
38897: LD_INT 0
38899: PPUSH
38900: LD_VAR 0 8
38904: PPUSH
38905: LD_VAR 0 4
38909: PPUSH
38910: CALL_OW 380
// un := CreateHuman ;
38914: LD_ADDR_VAR 0 14
38918: PUSH
38919: CALL_OW 44
38923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38924: LD_ADDR_VAR 0 7
38928: PUSH
38929: LD_VAR 0 7
38933: PPUSH
38934: LD_INT 1
38936: PPUSH
38937: LD_VAR 0 14
38941: PPUSH
38942: CALL_OW 2
38946: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38947: LD_VAR 0 14
38951: PPUSH
38952: LD_VAR 0 9
38956: PPUSH
38957: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38961: LD_VAR 0 9
38965: PPUSH
38966: CALL_OW 313
38970: PUSH
38971: LD_INT 6
38973: EQUAL
38974: PUSH
38975: LD_VAR 0 9
38979: PPUSH
38980: CALL_OW 266
38984: PUSH
38985: LD_INT 32
38987: PUSH
38988: LD_INT 31
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: IN
38995: OR
38996: IFFALSE 38810
38998: GO 38807
39000: POP
39001: POP
// end else
39002: GO 39384
// for j = 1 to x do
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: DOUBLE
39010: LD_INT 1
39012: DEC
39013: ST_TO_ADDR
39014: LD_VAR 0 13
39018: PUSH
39019: FOR_TO
39020: IFFALSE 39382
// begin InitHc ;
39022: CALL_OW 19
// if not f then
39026: LD_VAR 0 12
39030: NOT
39031: IFFALSE 39120
// begin PrepareHuman ( false , i , skill ) ;
39033: LD_INT 0
39035: PPUSH
39036: LD_VAR 0 8
39040: PPUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: CALL_OW 380
// un := CreateHuman ;
39050: LD_ADDR_VAR 0 14
39054: PUSH
39055: CALL_OW 44
39059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39060: LD_ADDR_VAR 0 7
39064: PUSH
39065: LD_VAR 0 7
39069: PPUSH
39070: LD_INT 1
39072: PPUSH
39073: LD_VAR 0 14
39077: PPUSH
39078: CALL_OW 2
39082: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39083: LD_VAR 0 14
39087: PPUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL_OW 250
39097: PPUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 251
39107: PPUSH
39108: LD_INT 10
39110: PPUSH
39111: LD_INT 0
39113: PPUSH
39114: CALL_OW 50
// continue ;
39118: GO 39019
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39120: LD_VAR 0 12
39124: PUSH
39125: LD_INT 1
39127: ARRAY
39128: PPUSH
39129: CALL_OW 313
39133: PUSH
39134: LD_VAR 0 12
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: CALL_OW 266
39147: PUSH
39148: LD_INT 32
39150: PUSH
39151: LD_INT 31
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: IN
39158: AND
39159: PUSH
39160: LD_VAR 0 12
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PPUSH
39169: CALL_OW 313
39173: PUSH
39174: LD_INT 6
39176: EQUAL
39177: OR
39178: IFFALSE 39198
// f := Delete ( f , 1 ) ;
39180: LD_ADDR_VAR 0 12
39184: PUSH
39185: LD_VAR 0 12
39189: PPUSH
39190: LD_INT 1
39192: PPUSH
39193: CALL_OW 3
39197: ST_TO_ADDR
// if not f then
39198: LD_VAR 0 12
39202: NOT
39203: IFFALSE 39221
// begin x := x + 2 ;
39205: LD_ADDR_VAR 0 13
39209: PUSH
39210: LD_VAR 0 13
39214: PUSH
39215: LD_INT 2
39217: PLUS
39218: ST_TO_ADDR
// continue ;
39219: GO 39019
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39221: LD_VAR 0 12
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PPUSH
39230: CALL_OW 266
39234: PUSH
39235: LD_INT 5
39237: EQUAL
39238: IFFALSE 39312
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39240: LD_VAR 0 12
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PPUSH
39249: CALL_OW 313
39253: PUSH
39254: LD_INT 3
39256: LESS
39257: IFFALSE 39293
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39259: LD_INT 0
39261: PPUSH
39262: LD_INT 5
39264: PUSH
39265: LD_INT 8
39267: PUSH
39268: LD_INT 9
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: PUSH
39276: LD_VAR 0 17
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 4
39286: PPUSH
39287: CALL_OW 380
39291: GO 39310
// PrepareHuman ( false , i , skill ) ;
39293: LD_INT 0
39295: PPUSH
39296: LD_VAR 0 8
39300: PPUSH
39301: LD_VAR 0 4
39305: PPUSH
39306: CALL_OW 380
// end else
39310: GO 39329
// PrepareHuman ( false , i , skill ) ;
39312: LD_INT 0
39314: PPUSH
39315: LD_VAR 0 8
39319: PPUSH
39320: LD_VAR 0 4
39324: PPUSH
39325: CALL_OW 380
// un := CreateHuman ;
39329: LD_ADDR_VAR 0 14
39333: PUSH
39334: CALL_OW 44
39338: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39339: LD_ADDR_VAR 0 7
39343: PUSH
39344: LD_VAR 0 7
39348: PPUSH
39349: LD_INT 1
39351: PPUSH
39352: LD_VAR 0 14
39356: PPUSH
39357: CALL_OW 2
39361: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39362: LD_VAR 0 14
39366: PPUSH
39367: LD_VAR 0 12
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: CALL_OW 52
// end ;
39380: GO 39019
39382: POP
39383: POP
// end ;
39384: GO 38321
39386: POP
39387: POP
// result := result ^ buildings ;
39388: LD_ADDR_VAR 0 7
39392: PUSH
39393: LD_VAR 0 7
39397: PUSH
39398: LD_VAR 0 18
39402: ADD
39403: ST_TO_ADDR
// end else
39404: GO 39547
// begin for i = 1 to personel do
39406: LD_ADDR_VAR 0 8
39410: PUSH
39411: DOUBLE
39412: LD_INT 1
39414: DEC
39415: ST_TO_ADDR
39416: LD_VAR 0 6
39420: PUSH
39421: FOR_TO
39422: IFFALSE 39545
// begin if i > 4 then
39424: LD_VAR 0 8
39428: PUSH
39429: LD_INT 4
39431: GREATER
39432: IFFALSE 39436
// break ;
39434: GO 39545
// x := personel [ i ] ;
39436: LD_ADDR_VAR 0 13
39440: PUSH
39441: LD_VAR 0 6
39445: PUSH
39446: LD_VAR 0 8
39450: ARRAY
39451: ST_TO_ADDR
// if x = - 1 then
39452: LD_VAR 0 13
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: EQUAL
39461: IFFALSE 39465
// continue ;
39463: GO 39421
// PrepareHuman ( false , i , skill ) ;
39465: LD_INT 0
39467: PPUSH
39468: LD_VAR 0 8
39472: PPUSH
39473: LD_VAR 0 4
39477: PPUSH
39478: CALL_OW 380
// un := CreateHuman ;
39482: LD_ADDR_VAR 0 14
39486: PUSH
39487: CALL_OW 44
39491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39492: LD_VAR 0 14
39496: PPUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 250
39506: PPUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 251
39516: PPUSH
39517: LD_INT 10
39519: PPUSH
39520: LD_INT 0
39522: PPUSH
39523: CALL_OW 50
// result := result ^ un ;
39527: LD_ADDR_VAR 0 7
39531: PUSH
39532: LD_VAR 0 7
39536: PUSH
39537: LD_VAR 0 14
39541: ADD
39542: ST_TO_ADDR
// end ;
39543: GO 39421
39545: POP
39546: POP
// end ; end ;
39547: LD_VAR 0 7
39551: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
// result := false ;
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_INT 0
39577: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39578: LD_VAR 0 1
39582: NOT
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 266
39593: PUSH
39594: LD_INT 32
39596: PUSH
39597: LD_INT 33
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: IN
39604: NOT
39605: OR
39606: IFFALSE 39610
// exit ;
39608: GO 40719
// nat := GetNation ( tower ) ;
39610: LD_ADDR_VAR 0 12
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 248
39624: ST_TO_ADDR
// side := GetSide ( tower ) ;
39625: LD_ADDR_VAR 0 16
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 255
39639: ST_TO_ADDR
// x := GetX ( tower ) ;
39640: LD_ADDR_VAR 0 10
39644: PUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL_OW 250
39654: ST_TO_ADDR
// y := GetY ( tower ) ;
39655: LD_ADDR_VAR 0 11
39659: PUSH
39660: LD_VAR 0 1
39664: PPUSH
39665: CALL_OW 251
39669: ST_TO_ADDR
// if not x or not y then
39670: LD_VAR 0 10
39674: NOT
39675: PUSH
39676: LD_VAR 0 11
39680: NOT
39681: OR
39682: IFFALSE 39686
// exit ;
39684: GO 40719
// weapon := 0 ;
39686: LD_ADDR_VAR 0 18
39690: PUSH
39691: LD_INT 0
39693: ST_TO_ADDR
// fac_list := [ ] ;
39694: LD_ADDR_VAR 0 17
39698: PUSH
39699: EMPTY
39700: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39701: LD_ADDR_VAR 0 6
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: CALL_OW 274
39715: PPUSH
39716: LD_VAR 0 2
39720: PPUSH
39721: LD_INT 0
39723: PPUSH
39724: CALL 37290 0 3
39728: PPUSH
39729: LD_INT 30
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PPUSH
39739: CALL_OW 72
39743: ST_TO_ADDR
// if not factories then
39744: LD_VAR 0 6
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 40719
// for i in factories do
39753: LD_ADDR_VAR 0 8
39757: PUSH
39758: LD_VAR 0 6
39762: PUSH
39763: FOR_IN
39764: IFFALSE 39789
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39766: LD_ADDR_VAR 0 17
39770: PUSH
39771: LD_VAR 0 17
39775: PUSH
39776: LD_VAR 0 8
39780: PPUSH
39781: CALL_OW 478
39785: UNION
39786: ST_TO_ADDR
39787: GO 39763
39789: POP
39790: POP
// if not fac_list then
39791: LD_VAR 0 17
39795: NOT
39796: IFFALSE 39800
// exit ;
39798: GO 40719
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39800: LD_ADDR_VAR 0 5
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 5
39810: PUSH
39811: LD_INT 9
39813: PUSH
39814: LD_INT 10
39816: PUSH
39817: LD_INT 6
39819: PUSH
39820: LD_INT 7
39822: PUSH
39823: LD_INT 11
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 27
39837: PUSH
39838: LD_INT 28
39840: PUSH
39841: LD_INT 26
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 43
39855: PUSH
39856: LD_INT 44
39858: PUSH
39859: LD_INT 46
39861: PUSH
39862: LD_INT 45
39864: PUSH
39865: LD_INT 47
39867: PUSH
39868: LD_INT 49
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: PUSH
39884: LD_VAR 0 12
39888: ARRAY
39889: ST_TO_ADDR
// list := list isect fac_list ;
39890: LD_ADDR_VAR 0 5
39894: PUSH
39895: LD_VAR 0 5
39899: PUSH
39900: LD_VAR 0 17
39904: ISECT
39905: ST_TO_ADDR
// if not list then
39906: LD_VAR 0 5
39910: NOT
39911: IFFALSE 39915
// exit ;
39913: GO 40719
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39915: LD_VAR 0 12
39919: PUSH
39920: LD_INT 3
39922: EQUAL
39923: PUSH
39924: LD_INT 49
39926: PUSH
39927: LD_VAR 0 5
39931: IN
39932: AND
39933: PUSH
39934: LD_INT 31
39936: PPUSH
39937: LD_VAR 0 16
39941: PPUSH
39942: CALL_OW 321
39946: PUSH
39947: LD_INT 2
39949: EQUAL
39950: AND
39951: IFFALSE 40011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39953: LD_INT 22
39955: PUSH
39956: LD_VAR 0 16
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 35
39967: PUSH
39968: LD_INT 49
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 91
39977: PUSH
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 10
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: PPUSH
39996: CALL_OW 69
40000: NOT
40001: IFFALSE 40011
// weapon := ru_time_lapser ;
40003: LD_ADDR_VAR 0 18
40007: PUSH
40008: LD_INT 49
40010: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40011: LD_VAR 0 12
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: IN
40026: PUSH
40027: LD_INT 11
40029: PUSH
40030: LD_VAR 0 5
40034: IN
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_VAR 0 5
40043: IN
40044: OR
40045: AND
40046: PUSH
40047: LD_INT 6
40049: PPUSH
40050: LD_VAR 0 16
40054: PPUSH
40055: CALL_OW 321
40059: PUSH
40060: LD_INT 2
40062: EQUAL
40063: AND
40064: IFFALSE 40229
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40066: LD_INT 22
40068: PUSH
40069: LD_VAR 0 16
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 35
40083: PUSH
40084: LD_INT 11
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 35
40093: PUSH
40094: LD_INT 30
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 91
40108: PUSH
40109: LD_VAR 0 1
40113: PUSH
40114: LD_INT 18
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: PPUSH
40127: CALL_OW 69
40131: NOT
40132: PUSH
40133: LD_INT 22
40135: PUSH
40136: LD_VAR 0 16
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: LD_INT 30
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 30
40160: PUSH
40161: LD_INT 33
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 91
40175: PUSH
40176: LD_VAR 0 1
40180: PUSH
40181: LD_INT 12
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: PPUSH
40197: CALL_OW 69
40201: PUSH
40202: LD_INT 2
40204: GREATER
40205: AND
40206: IFFALSE 40229
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40208: LD_ADDR_VAR 0 18
40212: PUSH
40213: LD_INT 11
40215: PUSH
40216: LD_INT 30
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_VAR 0 12
40227: ARRAY
40228: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40229: LD_VAR 0 18
40233: NOT
40234: PUSH
40235: LD_INT 40
40237: PPUSH
40238: LD_VAR 0 16
40242: PPUSH
40243: CALL_OW 321
40247: PUSH
40248: LD_INT 2
40250: EQUAL
40251: AND
40252: PUSH
40253: LD_INT 7
40255: PUSH
40256: LD_VAR 0 5
40260: IN
40261: PUSH
40262: LD_INT 28
40264: PUSH
40265: LD_VAR 0 5
40269: IN
40270: OR
40271: PUSH
40272: LD_INT 45
40274: PUSH
40275: LD_VAR 0 5
40279: IN
40280: OR
40281: AND
40282: IFFALSE 40536
// begin hex := GetHexInfo ( x , y ) ;
40284: LD_ADDR_VAR 0 4
40288: PUSH
40289: LD_VAR 0 10
40293: PPUSH
40294: LD_VAR 0 11
40298: PPUSH
40299: CALL_OW 546
40303: ST_TO_ADDR
// if hex [ 1 ] then
40304: LD_VAR 0 4
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: IFFALSE 40316
// exit ;
40314: GO 40719
// height := hex [ 2 ] ;
40316: LD_ADDR_VAR 0 15
40320: PUSH
40321: LD_VAR 0 4
40325: PUSH
40326: LD_INT 2
40328: ARRAY
40329: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40330: LD_ADDR_VAR 0 14
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 3
40343: PUSH
40344: LD_INT 5
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// for i in tmp do
40353: LD_ADDR_VAR 0 8
40357: PUSH
40358: LD_VAR 0 14
40362: PUSH
40363: FOR_IN
40364: IFFALSE 40534
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40366: LD_ADDR_VAR 0 9
40370: PUSH
40371: LD_VAR 0 10
40375: PPUSH
40376: LD_VAR 0 8
40380: PPUSH
40381: LD_INT 5
40383: PPUSH
40384: CALL_OW 272
40388: PUSH
40389: LD_VAR 0 11
40393: PPUSH
40394: LD_VAR 0 8
40398: PPUSH
40399: LD_INT 5
40401: PPUSH
40402: CALL_OW 273
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40411: LD_VAR 0 9
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: PPUSH
40420: LD_VAR 0 9
40424: PUSH
40425: LD_INT 2
40427: ARRAY
40428: PPUSH
40429: CALL_OW 488
40433: IFFALSE 40532
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40435: LD_ADDR_VAR 0 4
40439: PUSH
40440: LD_VAR 0 9
40444: PUSH
40445: LD_INT 1
40447: ARRAY
40448: PPUSH
40449: LD_VAR 0 9
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: PPUSH
40458: CALL_OW 546
40462: ST_TO_ADDR
// if hex [ 1 ] then
40463: LD_VAR 0 4
40467: PUSH
40468: LD_INT 1
40470: ARRAY
40471: IFFALSE 40475
// continue ;
40473: GO 40363
// h := hex [ 2 ] ;
40475: LD_ADDR_VAR 0 13
40479: PUSH
40480: LD_VAR 0 4
40484: PUSH
40485: LD_INT 2
40487: ARRAY
40488: ST_TO_ADDR
// if h + 7 < height then
40489: LD_VAR 0 13
40493: PUSH
40494: LD_INT 7
40496: PLUS
40497: PUSH
40498: LD_VAR 0 15
40502: LESS
40503: IFFALSE 40532
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40505: LD_ADDR_VAR 0 18
40509: PUSH
40510: LD_INT 7
40512: PUSH
40513: LD_INT 28
40515: PUSH
40516: LD_INT 45
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: PUSH
40524: LD_VAR 0 12
40528: ARRAY
40529: ST_TO_ADDR
// break ;
40530: GO 40534
// end ; end ; end ;
40532: GO 40363
40534: POP
40535: POP
// end ; if not weapon then
40536: LD_VAR 0 18
40540: NOT
40541: IFFALSE 40601
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40543: LD_ADDR_VAR 0 5
40547: PUSH
40548: LD_VAR 0 5
40552: PUSH
40553: LD_INT 11
40555: PUSH
40556: LD_INT 30
40558: PUSH
40559: LD_INT 49
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: DIFF
40567: ST_TO_ADDR
// if not list then
40568: LD_VAR 0 5
40572: NOT
40573: IFFALSE 40577
// exit ;
40575: GO 40719
// weapon := list [ rand ( 1 , list ) ] ;
40577: LD_ADDR_VAR 0 18
40581: PUSH
40582: LD_VAR 0 5
40586: PUSH
40587: LD_INT 1
40589: PPUSH
40590: LD_VAR 0 5
40594: PPUSH
40595: CALL_OW 12
40599: ARRAY
40600: ST_TO_ADDR
// end ; if weapon then
40601: LD_VAR 0 18
40605: IFFALSE 40719
// begin tmp := CostOfWeapon ( weapon ) ;
40607: LD_ADDR_VAR 0 14
40611: PUSH
40612: LD_VAR 0 18
40616: PPUSH
40617: CALL_OW 451
40621: ST_TO_ADDR
// j := GetBase ( tower ) ;
40622: LD_ADDR_VAR 0 9
40626: PUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: CALL_OW 274
40636: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40637: LD_VAR 0 9
40641: PPUSH
40642: LD_INT 1
40644: PPUSH
40645: CALL_OW 275
40649: PUSH
40650: LD_VAR 0 14
40654: PUSH
40655: LD_INT 1
40657: ARRAY
40658: GREATEREQUAL
40659: PUSH
40660: LD_VAR 0 9
40664: PPUSH
40665: LD_INT 2
40667: PPUSH
40668: CALL_OW 275
40672: PUSH
40673: LD_VAR 0 14
40677: PUSH
40678: LD_INT 2
40680: ARRAY
40681: GREATEREQUAL
40682: AND
40683: PUSH
40684: LD_VAR 0 9
40688: PPUSH
40689: LD_INT 3
40691: PPUSH
40692: CALL_OW 275
40696: PUSH
40697: LD_VAR 0 14
40701: PUSH
40702: LD_INT 3
40704: ARRAY
40705: GREATEREQUAL
40706: AND
40707: IFFALSE 40719
// result := weapon ;
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_VAR 0 18
40718: ST_TO_ADDR
// end ; end ;
40719: LD_VAR 0 3
40723: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40724: LD_INT 0
40726: PPUSH
40727: PPUSH
// result := true ;
40728: LD_ADDR_VAR 0 3
40732: PUSH
40733: LD_INT 1
40735: ST_TO_ADDR
// if array1 = array2 then
40736: LD_VAR 0 1
40740: PUSH
40741: LD_VAR 0 2
40745: EQUAL
40746: IFFALSE 40806
// begin for i = 1 to array1 do
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: DOUBLE
40754: LD_INT 1
40756: DEC
40757: ST_TO_ADDR
40758: LD_VAR 0 1
40762: PUSH
40763: FOR_TO
40764: IFFALSE 40802
// if array1 [ i ] <> array2 [ i ] then
40766: LD_VAR 0 1
40770: PUSH
40771: LD_VAR 0 4
40775: ARRAY
40776: PUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_VAR 0 4
40786: ARRAY
40787: NONEQUAL
40788: IFFALSE 40800
// begin result := false ;
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_INT 0
40797: ST_TO_ADDR
// break ;
40798: GO 40802
// end ;
40800: GO 40763
40802: POP
40803: POP
// end else
40804: GO 40814
// result := false ;
40806: LD_ADDR_VAR 0 3
40810: PUSH
40811: LD_INT 0
40813: ST_TO_ADDR
// end ;
40814: LD_VAR 0 3
40818: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40819: LD_INT 0
40821: PPUSH
40822: PPUSH
// if not array1 or not array2 then
40823: LD_VAR 0 1
40827: NOT
40828: PUSH
40829: LD_VAR 0 2
40833: NOT
40834: OR
40835: IFFALSE 40839
// exit ;
40837: GO 40903
// result := true ;
40839: LD_ADDR_VAR 0 3
40843: PUSH
40844: LD_INT 1
40846: ST_TO_ADDR
// for i = 1 to array1 do
40847: LD_ADDR_VAR 0 4
40851: PUSH
40852: DOUBLE
40853: LD_INT 1
40855: DEC
40856: ST_TO_ADDR
40857: LD_VAR 0 1
40861: PUSH
40862: FOR_TO
40863: IFFALSE 40901
// if array1 [ i ] <> array2 [ i ] then
40865: LD_VAR 0 1
40869: PUSH
40870: LD_VAR 0 4
40874: ARRAY
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_VAR 0 4
40885: ARRAY
40886: NONEQUAL
40887: IFFALSE 40899
// begin result := false ;
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_INT 0
40896: ST_TO_ADDR
// break ;
40897: GO 40901
// end ;
40899: GO 40862
40901: POP
40902: POP
// end ;
40903: LD_VAR 0 3
40907: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
40912: PPUSH
// pom := GetBase ( fac ) ;
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 274
40927: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40928: LD_ADDR_VAR 0 4
40932: PUSH
40933: LD_VAR 0 2
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_INT 2
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_INT 3
40958: ARRAY
40959: PPUSH
40960: LD_VAR 0 2
40964: PUSH
40965: LD_INT 4
40967: ARRAY
40968: PPUSH
40969: CALL_OW 449
40973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_INT 1
40986: PPUSH
40987: CALL_OW 275
40991: PUSH
40992: LD_VAR 0 4
40996: PUSH
40997: LD_INT 1
40999: ARRAY
41000: GREATEREQUAL
41001: PUSH
41002: LD_VAR 0 5
41006: PPUSH
41007: LD_INT 2
41009: PPUSH
41010: CALL_OW 275
41014: PUSH
41015: LD_VAR 0 4
41019: PUSH
41020: LD_INT 2
41022: ARRAY
41023: GREATEREQUAL
41024: AND
41025: PUSH
41026: LD_VAR 0 5
41030: PPUSH
41031: LD_INT 3
41033: PPUSH
41034: CALL_OW 275
41038: PUSH
41039: LD_VAR 0 4
41043: PUSH
41044: LD_INT 3
41046: ARRAY
41047: GREATEREQUAL
41048: AND
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 3
41054: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
// pom := GetBase ( building ) ;
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 274
41075: ST_TO_ADDR
// if not pom then
41076: LD_VAR 0 3
41080: NOT
41081: IFFALSE 41085
// exit ;
41083: GO 41255
// btype := GetBType ( building ) ;
41085: LD_ADDR_VAR 0 5
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 266
41099: ST_TO_ADDR
// if btype = b_armoury then
41100: LD_VAR 0 5
41104: PUSH
41105: LD_INT 4
41107: EQUAL
41108: IFFALSE 41118
// btype := b_barracks ;
41110: LD_ADDR_VAR 0 5
41114: PUSH
41115: LD_INT 5
41117: ST_TO_ADDR
// if btype = b_depot then
41118: LD_VAR 0 5
41122: PUSH
41123: LD_INT 0
41125: EQUAL
41126: IFFALSE 41136
// btype := b_warehouse ;
41128: LD_ADDR_VAR 0 5
41132: PUSH
41133: LD_INT 1
41135: ST_TO_ADDR
// if btype = b_workshop then
41136: LD_VAR 0 5
41140: PUSH
41141: LD_INT 2
41143: EQUAL
41144: IFFALSE 41154
// btype := b_factory ;
41146: LD_ADDR_VAR 0 5
41150: PUSH
41151: LD_INT 3
41153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41154: LD_ADDR_VAR 0 4
41158: PUSH
41159: LD_VAR 0 5
41163: PPUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 248
41173: PPUSH
41174: CALL_OW 450
41178: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41179: LD_ADDR_VAR 0 2
41183: PUSH
41184: LD_VAR 0 3
41188: PPUSH
41189: LD_INT 1
41191: PPUSH
41192: CALL_OW 275
41196: PUSH
41197: LD_VAR 0 4
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: GREATEREQUAL
41206: PUSH
41207: LD_VAR 0 3
41211: PPUSH
41212: LD_INT 2
41214: PPUSH
41215: CALL_OW 275
41219: PUSH
41220: LD_VAR 0 4
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: GREATEREQUAL
41229: AND
41230: PUSH
41231: LD_VAR 0 3
41235: PPUSH
41236: LD_INT 3
41238: PPUSH
41239: CALL_OW 275
41243: PUSH
41244: LD_VAR 0 4
41248: PUSH
41249: LD_INT 3
41251: ARRAY
41252: GREATEREQUAL
41253: AND
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 2
41259: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
// pom := GetBase ( building ) ;
41265: LD_ADDR_VAR 0 4
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: CALL_OW 274
41279: ST_TO_ADDR
// if not pom then
41280: LD_VAR 0 4
41284: NOT
41285: IFFALSE 41289
// exit ;
41287: GO 41390
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41289: LD_ADDR_VAR 0 5
41293: PUSH
41294: LD_VAR 0 2
41298: PPUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: CALL_OW 248
41308: PPUSH
41309: CALL_OW 450
41313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_VAR 0 4
41323: PPUSH
41324: LD_INT 1
41326: PPUSH
41327: CALL_OW 275
41331: PUSH
41332: LD_VAR 0 5
41336: PUSH
41337: LD_INT 1
41339: ARRAY
41340: GREATEREQUAL
41341: PUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: LD_INT 2
41349: PPUSH
41350: CALL_OW 275
41354: PUSH
41355: LD_VAR 0 5
41359: PUSH
41360: LD_INT 2
41362: ARRAY
41363: GREATEREQUAL
41364: AND
41365: PUSH
41366: LD_VAR 0 4
41370: PPUSH
41371: LD_INT 3
41373: PPUSH
41374: CALL_OW 275
41378: PUSH
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 3
41386: ARRAY
41387: GREATEREQUAL
41388: AND
41389: ST_TO_ADDR
// end ;
41390: LD_VAR 0 3
41394: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41395: LD_INT 0
41397: PPUSH
41398: PPUSH
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
// result := false ;
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_INT 0
41415: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41416: LD_VAR 0 5
41420: NOT
41421: PUSH
41422: LD_VAR 0 1
41426: NOT
41427: OR
41428: PUSH
41429: LD_VAR 0 2
41433: NOT
41434: OR
41435: PUSH
41436: LD_VAR 0 3
41440: NOT
41441: OR
41442: IFFALSE 41446
// exit ;
41444: GO 42260
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41446: LD_ADDR_VAR 0 14
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: LD_VAR 0 2
41460: PPUSH
41461: LD_VAR 0 3
41465: PPUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: LD_VAR 0 5
41475: PUSH
41476: LD_INT 1
41478: ARRAY
41479: PPUSH
41480: CALL_OW 248
41484: PPUSH
41485: LD_INT 0
41487: PPUSH
41488: CALL 43493 0 6
41492: ST_TO_ADDR
// if not hexes then
41493: LD_VAR 0 14
41497: NOT
41498: IFFALSE 41502
// exit ;
41500: GO 42260
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41502: LD_ADDR_VAR 0 17
41506: PUSH
41507: LD_VAR 0 5
41511: PPUSH
41512: LD_INT 22
41514: PUSH
41515: LD_VAR 0 13
41519: PPUSH
41520: CALL_OW 255
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 30
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 30
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PPUSH
41561: CALL_OW 72
41565: ST_TO_ADDR
// for i = 1 to hexes do
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: DOUBLE
41572: LD_INT 1
41574: DEC
41575: ST_TO_ADDR
41576: LD_VAR 0 14
41580: PUSH
41581: FOR_TO
41582: IFFALSE 42258
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41584: LD_ADDR_VAR 0 13
41588: PUSH
41589: LD_VAR 0 14
41593: PUSH
41594: LD_VAR 0 9
41598: ARRAY
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PPUSH
41604: LD_VAR 0 14
41608: PUSH
41609: LD_VAR 0 9
41613: ARRAY
41614: PUSH
41615: LD_INT 2
41617: ARRAY
41618: PPUSH
41619: CALL_OW 428
41623: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41624: LD_VAR 0 14
41628: PUSH
41629: LD_VAR 0 9
41633: ARRAY
41634: PUSH
41635: LD_INT 1
41637: ARRAY
41638: PPUSH
41639: LD_VAR 0 14
41643: PUSH
41644: LD_VAR 0 9
41648: ARRAY
41649: PUSH
41650: LD_INT 2
41652: ARRAY
41653: PPUSH
41654: CALL_OW 351
41658: PUSH
41659: LD_VAR 0 14
41663: PUSH
41664: LD_VAR 0 9
41668: ARRAY
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PPUSH
41674: LD_VAR 0 14
41678: PUSH
41679: LD_VAR 0 9
41683: ARRAY
41684: PUSH
41685: LD_INT 2
41687: ARRAY
41688: PPUSH
41689: CALL_OW 488
41693: NOT
41694: OR
41695: PUSH
41696: LD_VAR 0 13
41700: PPUSH
41701: CALL_OW 247
41705: PUSH
41706: LD_INT 3
41708: EQUAL
41709: OR
41710: IFFALSE 41716
// exit ;
41712: POP
41713: POP
41714: GO 42260
// if not tmp then
41716: LD_VAR 0 13
41720: NOT
41721: IFFALSE 41725
// continue ;
41723: GO 41581
// result := true ;
41725: LD_ADDR_VAR 0 8
41729: PUSH
41730: LD_INT 1
41732: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41733: LD_VAR 0 6
41737: PUSH
41738: LD_VAR 0 13
41742: PPUSH
41743: CALL_OW 247
41747: PUSH
41748: LD_INT 2
41750: EQUAL
41751: AND
41752: PUSH
41753: LD_VAR 0 13
41757: PPUSH
41758: CALL_OW 263
41762: PUSH
41763: LD_INT 1
41765: EQUAL
41766: AND
41767: IFFALSE 41931
// begin if IsDrivenBy ( tmp ) then
41769: LD_VAR 0 13
41773: PPUSH
41774: CALL_OW 311
41778: IFFALSE 41782
// continue ;
41780: GO 41581
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41782: LD_VAR 0 6
41786: PPUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 60
41792: PUSH
41793: EMPTY
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 55
41805: PUSH
41806: EMPTY
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PPUSH
41817: CALL_OW 72
41821: IFFALSE 41929
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41823: LD_ADDR_VAR 0 18
41827: PUSH
41828: LD_VAR 0 6
41832: PPUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 60
41838: PUSH
41839: EMPTY
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: PUSH
41849: LD_INT 55
41851: PUSH
41852: EMPTY
41853: LIST
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PPUSH
41863: CALL_OW 72
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: ST_TO_ADDR
// if IsInUnit ( driver ) then
41872: LD_VAR 0 18
41876: PPUSH
41877: CALL_OW 310
41881: IFFALSE 41892
// ComExit ( driver ) ;
41883: LD_VAR 0 18
41887: PPUSH
41888: CALL 67272 0 1
// AddComEnterUnit ( driver , tmp ) ;
41892: LD_VAR 0 18
41896: PPUSH
41897: LD_VAR 0 13
41901: PPUSH
41902: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41906: LD_VAR 0 18
41910: PPUSH
41911: LD_VAR 0 7
41915: PPUSH
41916: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41920: LD_VAR 0 18
41924: PPUSH
41925: CALL_OW 181
// end ; continue ;
41929: GO 41581
// end ; if not cleaners or not tmp in cleaners then
41931: LD_VAR 0 6
41935: NOT
41936: PUSH
41937: LD_VAR 0 13
41941: PUSH
41942: LD_VAR 0 6
41946: IN
41947: NOT
41948: OR
41949: IFFALSE 42256
// begin if dep then
41951: LD_VAR 0 17
41955: IFFALSE 42091
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41957: LD_ADDR_VAR 0 16
41961: PUSH
41962: LD_VAR 0 17
41966: PUSH
41967: LD_INT 1
41969: ARRAY
41970: PPUSH
41971: CALL_OW 250
41975: PPUSH
41976: LD_VAR 0 17
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: CALL_OW 254
41989: PPUSH
41990: LD_INT 5
41992: PPUSH
41993: CALL_OW 272
41997: PUSH
41998: LD_VAR 0 17
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: CALL_OW 251
42011: PPUSH
42012: LD_VAR 0 17
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PPUSH
42021: CALL_OW 254
42025: PPUSH
42026: LD_INT 5
42028: PPUSH
42029: CALL_OW 273
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42038: LD_VAR 0 16
42042: PUSH
42043: LD_INT 1
42045: ARRAY
42046: PPUSH
42047: LD_VAR 0 16
42051: PUSH
42052: LD_INT 2
42054: ARRAY
42055: PPUSH
42056: CALL_OW 488
42060: IFFALSE 42091
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42062: LD_VAR 0 13
42066: PPUSH
42067: LD_VAR 0 16
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: PPUSH
42076: LD_VAR 0 16
42080: PUSH
42081: LD_INT 2
42083: ARRAY
42084: PPUSH
42085: CALL_OW 111
// continue ;
42089: GO 41581
// end ; end ; r := GetDir ( tmp ) ;
42091: LD_ADDR_VAR 0 15
42095: PUSH
42096: LD_VAR 0 13
42100: PPUSH
42101: CALL_OW 254
42105: ST_TO_ADDR
// if r = 5 then
42106: LD_VAR 0 15
42110: PUSH
42111: LD_INT 5
42113: EQUAL
42114: IFFALSE 42124
// r := 0 ;
42116: LD_ADDR_VAR 0 15
42120: PUSH
42121: LD_INT 0
42123: ST_TO_ADDR
// for j = r to 5 do
42124: LD_ADDR_VAR 0 10
42128: PUSH
42129: DOUBLE
42130: LD_VAR 0 15
42134: DEC
42135: ST_TO_ADDR
42136: LD_INT 5
42138: PUSH
42139: FOR_TO
42140: IFFALSE 42254
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42142: LD_ADDR_VAR 0 11
42146: PUSH
42147: LD_VAR 0 13
42151: PPUSH
42152: CALL_OW 250
42156: PPUSH
42157: LD_VAR 0 10
42161: PPUSH
42162: LD_INT 2
42164: PPUSH
42165: CALL_OW 272
42169: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42170: LD_ADDR_VAR 0 12
42174: PUSH
42175: LD_VAR 0 13
42179: PPUSH
42180: CALL_OW 251
42184: PPUSH
42185: LD_VAR 0 10
42189: PPUSH
42190: LD_INT 2
42192: PPUSH
42193: CALL_OW 273
42197: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42198: LD_VAR 0 11
42202: PPUSH
42203: LD_VAR 0 12
42207: PPUSH
42208: CALL_OW 488
42212: PUSH
42213: LD_VAR 0 11
42217: PPUSH
42218: LD_VAR 0 12
42222: PPUSH
42223: CALL_OW 428
42227: NOT
42228: AND
42229: IFFALSE 42252
// begin ComMoveXY ( tmp , _x , _y ) ;
42231: LD_VAR 0 13
42235: PPUSH
42236: LD_VAR 0 11
42240: PPUSH
42241: LD_VAR 0 12
42245: PPUSH
42246: CALL_OW 111
// break ;
42250: GO 42254
// end ; end ;
42252: GO 42139
42254: POP
42255: POP
// end ; end ;
42256: GO 41581
42258: POP
42259: POP
// end ;
42260: LD_VAR 0 8
42264: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42265: LD_INT 0
42267: PPUSH
// result := true ;
42268: LD_ADDR_VAR 0 3
42272: PUSH
42273: LD_INT 1
42275: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42276: LD_VAR 0 2
42280: PUSH
42281: LD_INT 24
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42295
42287: LD_INT 33
42289: DOUBLE
42290: EQUAL
42291: IFTRUE 42295
42293: GO 42320
42295: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42296: LD_ADDR_VAR 0 3
42300: PUSH
42301: LD_INT 32
42303: PPUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 321
42313: PUSH
42314: LD_INT 2
42316: EQUAL
42317: ST_TO_ADDR
42318: GO 42636
42320: LD_INT 20
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42353
42328: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_INT 6
42336: PPUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 321
42346: PUSH
42347: LD_INT 2
42349: EQUAL
42350: ST_TO_ADDR
42351: GO 42636
42353: LD_INT 22
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42367
42359: LD_INT 36
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42392
42367: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 15
42375: PPUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 321
42385: PUSH
42386: LD_INT 2
42388: EQUAL
42389: ST_TO_ADDR
42390: GO 42636
42392: LD_INT 30
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42425
42400: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_INT 20
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 321
42418: PUSH
42419: LD_INT 2
42421: EQUAL
42422: ST_TO_ADDR
42423: GO 42636
42425: LD_INT 28
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42439
42431: LD_INT 21
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42464
42439: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 21
42447: PPUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 321
42457: PUSH
42458: LD_INT 2
42460: EQUAL
42461: ST_TO_ADDR
42462: GO 42636
42464: LD_INT 16
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42472
42470: GO 42497
42472: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 84
42480: PPUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: CALL_OW 321
42490: PUSH
42491: LD_INT 2
42493: EQUAL
42494: ST_TO_ADDR
42495: GO 42636
42497: LD_INT 19
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42511
42503: LD_INT 23
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42511
42509: GO 42536
42511: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 83
42519: PPUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 321
42529: PUSH
42530: LD_INT 2
42532: EQUAL
42533: ST_TO_ADDR
42534: GO 42636
42536: LD_INT 17
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42569
42544: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 39
42552: PPUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 321
42562: PUSH
42563: LD_INT 2
42565: EQUAL
42566: ST_TO_ADDR
42567: GO 42636
42569: LD_INT 18
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42602
42577: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_INT 40
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 321
42595: PUSH
42596: LD_INT 2
42598: EQUAL
42599: ST_TO_ADDR
42600: GO 42636
42602: LD_INT 27
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 35
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42636
42635: POP
// end ;
42636: LD_VAR 0 3
42640: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42641: LD_INT 0
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
// result := false ;
42654: LD_ADDR_VAR 0 6
42658: PUSH
42659: LD_INT 0
42661: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42662: LD_VAR 0 1
42666: NOT
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 266
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: IN
42688: NOT
42689: OR
42690: PUSH
42691: LD_VAR 0 2
42695: NOT
42696: OR
42697: PUSH
42698: LD_VAR 0 5
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 4
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: IN
42729: NOT
42730: OR
42731: PUSH
42732: LD_VAR 0 3
42736: PPUSH
42737: LD_VAR 0 4
42741: PPUSH
42742: CALL_OW 488
42746: NOT
42747: OR
42748: IFFALSE 42752
// exit ;
42750: GO 43488
// side := GetSide ( depot ) ;
42752: LD_ADDR_VAR 0 9
42756: PUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 255
42766: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42767: LD_VAR 0 9
42771: PPUSH
42772: LD_VAR 0 2
42776: PPUSH
42777: CALL 42265 0 2
42781: NOT
42782: IFFALSE 42786
// exit ;
42784: GO 43488
// pom := GetBase ( depot ) ;
42786: LD_ADDR_VAR 0 10
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 274
42800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42801: LD_ADDR_VAR 0 11
42805: PUSH
42806: LD_VAR 0 2
42810: PPUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 248
42820: PPUSH
42821: CALL_OW 450
42825: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42826: LD_VAR 0 10
42830: PPUSH
42831: LD_INT 1
42833: PPUSH
42834: CALL_OW 275
42838: PUSH
42839: LD_VAR 0 11
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: GREATEREQUAL
42848: PUSH
42849: LD_VAR 0 10
42853: PPUSH
42854: LD_INT 2
42856: PPUSH
42857: CALL_OW 275
42861: PUSH
42862: LD_VAR 0 11
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: GREATEREQUAL
42871: AND
42872: PUSH
42873: LD_VAR 0 10
42877: PPUSH
42878: LD_INT 3
42880: PPUSH
42881: CALL_OW 275
42885: PUSH
42886: LD_VAR 0 11
42890: PUSH
42891: LD_INT 3
42893: ARRAY
42894: GREATEREQUAL
42895: AND
42896: NOT
42897: IFFALSE 42901
// exit ;
42899: GO 43488
// if GetBType ( depot ) = b_depot then
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 266
42910: PUSH
42911: LD_INT 0
42913: EQUAL
42914: IFFALSE 42926
// dist := 28 else
42916: LD_ADDR_VAR 0 14
42920: PUSH
42921: LD_INT 28
42923: ST_TO_ADDR
42924: GO 42934
// dist := 36 ;
42926: LD_ADDR_VAR 0 14
42930: PUSH
42931: LD_INT 36
42933: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42934: LD_VAR 0 1
42938: PPUSH
42939: LD_VAR 0 3
42943: PPUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: CALL_OW 297
42953: PUSH
42954: LD_VAR 0 14
42958: GREATER
42959: IFFALSE 42963
// exit ;
42961: GO 43488
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42963: LD_ADDR_VAR 0 12
42967: PUSH
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_VAR 0 3
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: LD_VAR 0 5
42987: PPUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 248
42997: PPUSH
42998: LD_INT 0
43000: PPUSH
43001: CALL 43493 0 6
43005: ST_TO_ADDR
// if not hexes then
43006: LD_VAR 0 12
43010: NOT
43011: IFFALSE 43015
// exit ;
43013: GO 43488
// hex := GetHexInfo ( x , y ) ;
43015: LD_ADDR_VAR 0 15
43019: PUSH
43020: LD_VAR 0 3
43024: PPUSH
43025: LD_VAR 0 4
43029: PPUSH
43030: CALL_OW 546
43034: ST_TO_ADDR
// if hex [ 1 ] then
43035: LD_VAR 0 15
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: IFFALSE 43047
// exit ;
43045: GO 43488
// height := hex [ 2 ] ;
43047: LD_ADDR_VAR 0 13
43051: PUSH
43052: LD_VAR 0 15
43056: PUSH
43057: LD_INT 2
43059: ARRAY
43060: ST_TO_ADDR
// for i = 1 to hexes do
43061: LD_ADDR_VAR 0 7
43065: PUSH
43066: DOUBLE
43067: LD_INT 1
43069: DEC
43070: ST_TO_ADDR
43071: LD_VAR 0 12
43075: PUSH
43076: FOR_TO
43077: IFFALSE 43407
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43079: LD_VAR 0 12
43083: PUSH
43084: LD_VAR 0 7
43088: ARRAY
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: LD_VAR 0 12
43098: PUSH
43099: LD_VAR 0 7
43103: ARRAY
43104: PUSH
43105: LD_INT 2
43107: ARRAY
43108: PPUSH
43109: CALL_OW 488
43113: NOT
43114: PUSH
43115: LD_VAR 0 12
43119: PUSH
43120: LD_VAR 0 7
43124: ARRAY
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: PPUSH
43130: LD_VAR 0 12
43134: PUSH
43135: LD_VAR 0 7
43139: ARRAY
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PPUSH
43145: CALL_OW 428
43149: PUSH
43150: LD_INT 0
43152: GREATER
43153: OR
43154: PUSH
43155: LD_VAR 0 12
43159: PUSH
43160: LD_VAR 0 7
43164: ARRAY
43165: PUSH
43166: LD_INT 1
43168: ARRAY
43169: PPUSH
43170: LD_VAR 0 12
43174: PUSH
43175: LD_VAR 0 7
43179: ARRAY
43180: PUSH
43181: LD_INT 2
43183: ARRAY
43184: PPUSH
43185: CALL_OW 351
43189: OR
43190: IFFALSE 43196
// exit ;
43192: POP
43193: POP
43194: GO 43488
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43196: LD_ADDR_VAR 0 8
43200: PUSH
43201: LD_VAR 0 12
43205: PUSH
43206: LD_VAR 0 7
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 12
43220: PUSH
43221: LD_VAR 0 7
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 546
43235: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43236: LD_VAR 0 8
43240: PUSH
43241: LD_INT 1
43243: ARRAY
43244: PUSH
43245: LD_VAR 0 8
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: PUSH
43254: LD_VAR 0 13
43258: PUSH
43259: LD_INT 2
43261: PLUS
43262: GREATER
43263: OR
43264: PUSH
43265: LD_VAR 0 8
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PUSH
43274: LD_VAR 0 13
43278: PUSH
43279: LD_INT 2
43281: MINUS
43282: LESS
43283: OR
43284: PUSH
43285: LD_VAR 0 8
43289: PUSH
43290: LD_INT 3
43292: ARRAY
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 8
43299: PUSH
43300: LD_INT 9
43302: PUSH
43303: LD_INT 10
43305: PUSH
43306: LD_INT 11
43308: PUSH
43309: LD_INT 12
43311: PUSH
43312: LD_INT 13
43314: PUSH
43315: LD_INT 16
43317: PUSH
43318: LD_INT 17
43320: PUSH
43321: LD_INT 18
43323: PUSH
43324: LD_INT 19
43326: PUSH
43327: LD_INT 20
43329: PUSH
43330: LD_INT 21
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: IN
43348: NOT
43349: OR
43350: PUSH
43351: LD_VAR 0 8
43355: PUSH
43356: LD_INT 5
43358: ARRAY
43359: NOT
43360: OR
43361: PUSH
43362: LD_VAR 0 8
43366: PUSH
43367: LD_INT 6
43369: ARRAY
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 7
43379: PUSH
43380: LD_INT 9
43382: PUSH
43383: LD_INT 10
43385: PUSH
43386: LD_INT 11
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: IN
43397: NOT
43398: OR
43399: IFFALSE 43405
// exit ;
43401: POP
43402: POP
43403: GO 43488
// end ;
43405: GO 43076
43407: POP
43408: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43409: LD_VAR 0 9
43413: PPUSH
43414: LD_VAR 0 3
43418: PPUSH
43419: LD_VAR 0 4
43423: PPUSH
43424: LD_INT 20
43426: PPUSH
43427: CALL 35440 0 4
43431: PUSH
43432: LD_INT 4
43434: ARRAY
43435: IFFALSE 43439
// exit ;
43437: GO 43488
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43439: LD_VAR 0 2
43443: PUSH
43444: LD_INT 29
43446: PUSH
43447: LD_INT 30
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: IN
43454: PUSH
43455: LD_VAR 0 3
43459: PPUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: LD_VAR 0 9
43469: PPUSH
43470: CALL_OW 440
43474: NOT
43475: AND
43476: IFFALSE 43480
// exit ;
43478: GO 43488
// result := true ;
43480: LD_ADDR_VAR 0 6
43484: PUSH
43485: LD_INT 1
43487: ST_TO_ADDR
// end ;
43488: LD_VAR 0 6
43492: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43493: LD_INT 0
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
// result = [ ] ;
43553: LD_ADDR_VAR 0 7
43557: PUSH
43558: EMPTY
43559: ST_TO_ADDR
// temp_list = [ ] ;
43560: LD_ADDR_VAR 0 9
43564: PUSH
43565: EMPTY
43566: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43567: LD_VAR 0 4
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: LD_INT 4
43586: PUSH
43587: LD_INT 5
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: IN
43598: NOT
43599: PUSH
43600: LD_VAR 0 1
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: IN
43615: PUSH
43616: LD_VAR 0 5
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: IN
43635: NOT
43636: AND
43637: OR
43638: IFFALSE 43642
// exit ;
43640: GO 62033
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43642: LD_VAR 0 1
43646: PUSH
43647: LD_INT 6
43649: PUSH
43650: LD_INT 7
43652: PUSH
43653: LD_INT 8
43655: PUSH
43656: LD_INT 13
43658: PUSH
43659: LD_INT 12
43661: PUSH
43662: LD_INT 15
43664: PUSH
43665: LD_INT 11
43667: PUSH
43668: LD_INT 14
43670: PUSH
43671: LD_INT 10
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: IN
43685: IFFALSE 43695
// btype = b_lab ;
43687: LD_ADDR_VAR 0 1
43691: PUSH
43692: LD_INT 6
43694: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43695: LD_VAR 0 6
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: IN
43714: NOT
43715: PUSH
43716: LD_VAR 0 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: LD_INT 36
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: LD_INT 5
43744: PUSH
43745: LD_INT 31
43747: PUSH
43748: LD_INT 32
43750: PUSH
43751: LD_INT 33
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: IN
43767: NOT
43768: PUSH
43769: LD_VAR 0 6
43773: PUSH
43774: LD_INT 1
43776: EQUAL
43777: AND
43778: OR
43779: PUSH
43780: LD_VAR 0 1
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: IN
43795: NOT
43796: PUSH
43797: LD_VAR 0 6
43801: PUSH
43802: LD_INT 2
43804: EQUAL
43805: AND
43806: OR
43807: IFFALSE 43817
// mode = 0 ;
43809: LD_ADDR_VAR 0 6
43813: PUSH
43814: LD_INT 0
43816: ST_TO_ADDR
// case mode of 0 :
43817: LD_VAR 0 6
43821: PUSH
43822: LD_INT 0
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 55283
43830: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43831: LD_ADDR_VAR 0 11
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 3
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44024: LD_ADDR_VAR 0 12
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44220: LD_ADDR_VAR 0 13
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: LD_INT 3
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44419: LD_ADDR_VAR 0 14
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44615: LD_ADDR_VAR 0 15
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44808: LD_ADDR_VAR 0 16
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45001: LD_ADDR_VAR 0 17
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45231: LD_ADDR_VAR 0 18
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45461: LD_ADDR_VAR 0 19
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45691: LD_ADDR_VAR 0 20
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45921: LD_ADDR_VAR 0 21
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46151: LD_ADDR_VAR 0 22
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46381: LD_ADDR_VAR 0 23
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46661: LD_ADDR_VAR 0 24
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46937: LD_ADDR_VAR 0 25
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47211: LD_ADDR_VAR 0 26
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47487: LD_ADDR_VAR 0 27
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47767: LD_ADDR_VAR 0 28
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48049: LD_ADDR_VAR 0 29
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 3
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48328: LD_ADDR_VAR 0 30
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48606: LD_ADDR_VAR 0 31
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 3
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48884: LD_ADDR_VAR 0 32
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49162: LD_ADDR_VAR 0 33
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49441: LD_ADDR_VAR 0 34
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49721: LD_ADDR_VAR 0 35
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49833: LD_ADDR_VAR 0 36
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49945: LD_ADDR_VAR 0 37
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50057: LD_ADDR_VAR 0 38
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50169: LD_ADDR_VAR 0 39
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50281: LD_ADDR_VAR 0 40
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50393: LD_ADDR_VAR 0 41
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: NEG
50703: PUSH
50704: LD_INT 3
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50743: LD_ADDR_VAR 0 42
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51093: LD_ADDR_VAR 0 43
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51441: LD_ADDR_VAR 0 44
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 3
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: NEG
51751: PUSH
51752: LD_INT 3
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51791: LD_ADDR_VAR 0 45
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52141: LD_ADDR_VAR 0 46
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52489: LD_ADDR_VAR 0 47
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52640: LD_ADDR_VAR 0 48
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52787: LD_ADDR_VAR 0 49
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52931: LD_ADDR_VAR 0 50
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53075: LD_ADDR_VAR 0 51
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53222: LD_ADDR_VAR 0 52
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53373: LD_ADDR_VAR 0 53
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 54
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53833: LD_ADDR_VAR 0 55
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54063: LD_ADDR_VAR 0 56
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54293: LD_ADDR_VAR 0 57
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54523: LD_ADDR_VAR 0 58
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54753: LD_ADDR_VAR 0 59
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54841: LD_ADDR_VAR 0 60
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54929: LD_ADDR_VAR 0 61
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55017: LD_ADDR_VAR 0 62
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55105: LD_ADDR_VAR 0 63
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55193: LD_ADDR_VAR 0 64
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// end ; 1 :
55281: GO 61178
55283: LD_INT 1
55285: DOUBLE
55286: EQUAL
55287: IFTRUE 55291
55289: GO 57914
55291: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55292: LD_ADDR_VAR 0 11
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55336: LD_ADDR_VAR 0 12
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55377: LD_ADDR_VAR 0 13
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 3
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55417: LD_ADDR_VAR 0 14
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55458: LD_ADDR_VAR 0 15
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55502: LD_ADDR_VAR 0 16
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55548: LD_ADDR_VAR 0 17
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55592: LD_ADDR_VAR 0 18
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55633: LD_ADDR_VAR 0 19
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 3
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55673: LD_ADDR_VAR 0 20
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55714: LD_ADDR_VAR 0 21
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 3
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55758: LD_ADDR_VAR 0 22
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: LD_INT 3
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55804: LD_ADDR_VAR 0 23
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 4
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55848: LD_ADDR_VAR 0 24
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55889: LD_ADDR_VAR 0 25
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55929: LD_ADDR_VAR 0 26
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 27
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56014: LD_ADDR_VAR 0 28
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56060: LD_ADDR_VAR 0 29
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 5
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 5
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 6
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 6
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 5
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56215: LD_ADDR_VAR 0 30
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 4
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 6
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 6
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56358: LD_ADDR_VAR 0 31
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 4
56405: PUSH
56406: LD_INT 4
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 5
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 5
56435: PUSH
56436: LD_INT 5
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: LD_INT 5
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 6
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 6
56465: PUSH
56466: LD_INT 6
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 5
56475: PUSH
56476: LD_INT 6
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56497: LD_ADDR_VAR 0 32
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 4
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 4
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 5
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 5
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 6
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 6
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 5
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56640: LD_ADDR_VAR 0 33
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 4
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 4
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 5
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 6
56760: NEG
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 6
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56795: LD_ADDR_VAR 0 34
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 4
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 4
56862: NEG
56863: PUSH
56864: LD_INT 4
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 4
56874: NEG
56875: PUSH
56876: LD_INT 5
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 5
56886: NEG
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 5
56898: NEG
56899: PUSH
56900: LD_INT 5
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 5
56910: NEG
56911: PUSH
56912: LD_INT 6
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 6
56922: NEG
56923: PUSH
56924: LD_INT 5
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 6
56934: NEG
56935: PUSH
56936: LD_INT 6
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56958: LD_ADDR_VAR 0 41
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57002: LD_ADDR_VAR 0 42
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57043: LD_ADDR_VAR 0 43
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57083: LD_ADDR_VAR 0 44
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57124: LD_ADDR_VAR 0 45
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57168: LD_ADDR_VAR 0 46
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57214: LD_ADDR_VAR 0 47
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57247: LD_ADDR_VAR 0 48
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57278: LD_ADDR_VAR 0 49
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57307: LD_ADDR_VAR 0 50
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57336: LD_ADDR_VAR 0 51
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57367: LD_ADDR_VAR 0 52
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57400: LD_ADDR_VAR 0 53
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57444: LD_ADDR_VAR 0 54
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57485: LD_ADDR_VAR 0 55
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57525: LD_ADDR_VAR 0 56
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57566: LD_ADDR_VAR 0 57
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57610: LD_ADDR_VAR 0 58
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57656: LD_ADDR_VAR 0 59
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57700: LD_ADDR_VAR 0 60
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57741: LD_ADDR_VAR 0 61
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57781: LD_ADDR_VAR 0 62
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57822: LD_ADDR_VAR 0 63
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57866: LD_ADDR_VAR 0 64
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// end ; 2 :
57912: GO 61178
57914: LD_INT 2
57916: DOUBLE
57917: EQUAL
57918: IFTRUE 57922
57920: GO 61177
57922: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57923: LD_ADDR_VAR 0 29
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 4
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 5
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 4
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 4
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 4
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 5
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 5
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 4
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: NEG
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: NEG
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: NEG
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: LD_INT 5
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 4
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 4
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 5
58368: NEG
58369: PUSH
58370: LD_INT 4
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: LD_INT 5
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: LD_INT 5
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 5
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58461: LD_ADDR_VAR 0 30
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 5
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 5
58498: PUSH
58499: LD_INT 5
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: LD_INT 5
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 5
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 5
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 4
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 4
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 4
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 5
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 5
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 5
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: NEG
58766: PUSH
58767: LD_INT 4
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 4
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 4
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 5
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 4
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 5
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59008: LD_ADDR_VAR 0 31
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 5
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 5
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 4
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: LD_INT 4
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 4
59222: NEG
59223: PUSH
59224: LD_INT 5
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 4
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 4
59258: NEG
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: NEG
59271: PUSH
59272: LD_INT 4
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: LD_INT 5
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 5
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 5
59306: NEG
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 4
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: LD_INT 4
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 4
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 4
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59558: LD_ADDR_VAR 0 32
59562: PUSH
59563: LD_INT 4
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 5
59621: NEG
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 5
59644: NEG
59645: PUSH
59646: LD_INT 2
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: NEG
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: NEG
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 4
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: NEG
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 5
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 5
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: LD_INT 5
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 5
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: LD_INT 5
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60105: LD_ADDR_VAR 0 33
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: LD_INT 5
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: LD_INT 4
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: NEG
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: LD_INT 5
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 5
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 5
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 4
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 4
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 5
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 4
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 4
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 4
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 4
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 5
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 5
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: LD_INT 5
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60643: LD_ADDR_VAR 0 34
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 4
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 5
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 4
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 5
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 4
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 4
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: LD_INT 5
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 5
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 5
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 5
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 4
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 4
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 4
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 5
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 5
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 5
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// end ; end ;
61175: GO 61178
61177: POP
// case btype of b_depot , b_warehouse :
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 0
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61197
61189: LD_INT 1
61191: DOUBLE
61192: EQUAL
61193: IFTRUE 61197
61195: GO 61398
61197: POP
// case nation of nation_american :
61198: LD_VAR 0 5
61202: PUSH
61203: LD_INT 1
61205: DOUBLE
61206: EQUAL
61207: IFTRUE 61211
61209: GO 61267
61211: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61212: LD_ADDR_VAR 0 9
61216: PUSH
61217: LD_VAR 0 11
61221: PUSH
61222: LD_VAR 0 12
61226: PUSH
61227: LD_VAR 0 13
61231: PUSH
61232: LD_VAR 0 14
61236: PUSH
61237: LD_VAR 0 15
61241: PUSH
61242: LD_VAR 0 16
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: LD_VAR 0 4
61259: PUSH
61260: LD_INT 1
61262: PLUS
61263: ARRAY
61264: ST_TO_ADDR
61265: GO 61396
61267: LD_INT 2
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61331
61275: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61276: LD_ADDR_VAR 0 9
61280: PUSH
61281: LD_VAR 0 17
61285: PUSH
61286: LD_VAR 0 18
61290: PUSH
61291: LD_VAR 0 19
61295: PUSH
61296: LD_VAR 0 20
61300: PUSH
61301: LD_VAR 0 21
61305: PUSH
61306: LD_VAR 0 22
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: PUSH
61319: LD_VAR 0 4
61323: PUSH
61324: LD_INT 1
61326: PLUS
61327: ARRAY
61328: ST_TO_ADDR
61329: GO 61396
61331: LD_INT 3
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 61395
61339: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61340: LD_ADDR_VAR 0 9
61344: PUSH
61345: LD_VAR 0 23
61349: PUSH
61350: LD_VAR 0 24
61354: PUSH
61355: LD_VAR 0 25
61359: PUSH
61360: LD_VAR 0 26
61364: PUSH
61365: LD_VAR 0 27
61369: PUSH
61370: LD_VAR 0 28
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: PUSH
61383: LD_VAR 0 4
61387: PUSH
61388: LD_INT 1
61390: PLUS
61391: ARRAY
61392: ST_TO_ADDR
61393: GO 61396
61395: POP
61396: GO 61951
61398: LD_INT 2
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61412
61404: LD_INT 3
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61412
61410: GO 61468
61412: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61413: LD_ADDR_VAR 0 9
61417: PUSH
61418: LD_VAR 0 29
61422: PUSH
61423: LD_VAR 0 30
61427: PUSH
61428: LD_VAR 0 31
61432: PUSH
61433: LD_VAR 0 32
61437: PUSH
61438: LD_VAR 0 33
61442: PUSH
61443: LD_VAR 0 34
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_INT 1
61463: PLUS
61464: ARRAY
61465: ST_TO_ADDR
61466: GO 61951
61468: LD_INT 16
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61530
61474: LD_INT 17
61476: DOUBLE
61477: EQUAL
61478: IFTRUE 61530
61480: LD_INT 18
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61530
61486: LD_INT 19
61488: DOUBLE
61489: EQUAL
61490: IFTRUE 61530
61492: LD_INT 22
61494: DOUBLE
61495: EQUAL
61496: IFTRUE 61530
61498: LD_INT 20
61500: DOUBLE
61501: EQUAL
61502: IFTRUE 61530
61504: LD_INT 21
61506: DOUBLE
61507: EQUAL
61508: IFTRUE 61530
61510: LD_INT 23
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61530
61516: LD_INT 24
61518: DOUBLE
61519: EQUAL
61520: IFTRUE 61530
61522: LD_INT 25
61524: DOUBLE
61525: EQUAL
61526: IFTRUE 61530
61528: GO 61586
61530: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61531: LD_ADDR_VAR 0 9
61535: PUSH
61536: LD_VAR 0 35
61540: PUSH
61541: LD_VAR 0 36
61545: PUSH
61546: LD_VAR 0 37
61550: PUSH
61551: LD_VAR 0 38
61555: PUSH
61556: LD_VAR 0 39
61560: PUSH
61561: LD_VAR 0 40
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: PUSH
61574: LD_VAR 0 4
61578: PUSH
61579: LD_INT 1
61581: PLUS
61582: ARRAY
61583: ST_TO_ADDR
61584: GO 61951
61586: LD_INT 6
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61642
61592: LD_INT 7
61594: DOUBLE
61595: EQUAL
61596: IFTRUE 61642
61598: LD_INT 8
61600: DOUBLE
61601: EQUAL
61602: IFTRUE 61642
61604: LD_INT 13
61606: DOUBLE
61607: EQUAL
61608: IFTRUE 61642
61610: LD_INT 12
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61642
61616: LD_INT 15
61618: DOUBLE
61619: EQUAL
61620: IFTRUE 61642
61622: LD_INT 11
61624: DOUBLE
61625: EQUAL
61626: IFTRUE 61642
61628: LD_INT 14
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61642
61634: LD_INT 10
61636: DOUBLE
61637: EQUAL
61638: IFTRUE 61642
61640: GO 61698
61642: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61643: LD_ADDR_VAR 0 9
61647: PUSH
61648: LD_VAR 0 41
61652: PUSH
61653: LD_VAR 0 42
61657: PUSH
61658: LD_VAR 0 43
61662: PUSH
61663: LD_VAR 0 44
61667: PUSH
61668: LD_VAR 0 45
61672: PUSH
61673: LD_VAR 0 46
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: PUSH
61686: LD_VAR 0 4
61690: PUSH
61691: LD_INT 1
61693: PLUS
61694: ARRAY
61695: ST_TO_ADDR
61696: GO 61951
61698: LD_INT 36
61700: DOUBLE
61701: EQUAL
61702: IFTRUE 61706
61704: GO 61762
61706: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61707: LD_ADDR_VAR 0 9
61711: PUSH
61712: LD_VAR 0 47
61716: PUSH
61717: LD_VAR 0 48
61721: PUSH
61722: LD_VAR 0 49
61726: PUSH
61727: LD_VAR 0 50
61731: PUSH
61732: LD_VAR 0 51
61736: PUSH
61737: LD_VAR 0 52
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: LD_VAR 0 4
61754: PUSH
61755: LD_INT 1
61757: PLUS
61758: ARRAY
61759: ST_TO_ADDR
61760: GO 61951
61762: LD_INT 4
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61788
61768: LD_INT 5
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61788
61774: LD_INT 34
61776: DOUBLE
61777: EQUAL
61778: IFTRUE 61788
61780: LD_INT 37
61782: DOUBLE
61783: EQUAL
61784: IFTRUE 61788
61786: GO 61844
61788: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61789: LD_ADDR_VAR 0 9
61793: PUSH
61794: LD_VAR 0 53
61798: PUSH
61799: LD_VAR 0 54
61803: PUSH
61804: LD_VAR 0 55
61808: PUSH
61809: LD_VAR 0 56
61813: PUSH
61814: LD_VAR 0 57
61818: PUSH
61819: LD_VAR 0 58
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: LD_VAR 0 4
61836: PUSH
61837: LD_INT 1
61839: PLUS
61840: ARRAY
61841: ST_TO_ADDR
61842: GO 61951
61844: LD_INT 31
61846: DOUBLE
61847: EQUAL
61848: IFTRUE 61894
61850: LD_INT 32
61852: DOUBLE
61853: EQUAL
61854: IFTRUE 61894
61856: LD_INT 33
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61894
61862: LD_INT 27
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61894
61868: LD_INT 26
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61894
61874: LD_INT 28
61876: DOUBLE
61877: EQUAL
61878: IFTRUE 61894
61880: LD_INT 29
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61894
61886: LD_INT 30
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61950
61894: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61895: LD_ADDR_VAR 0 9
61899: PUSH
61900: LD_VAR 0 59
61904: PUSH
61905: LD_VAR 0 60
61909: PUSH
61910: LD_VAR 0 61
61914: PUSH
61915: LD_VAR 0 62
61919: PUSH
61920: LD_VAR 0 63
61924: PUSH
61925: LD_VAR 0 64
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: ARRAY
61947: ST_TO_ADDR
61948: GO 61951
61950: POP
// temp_list2 = [ ] ;
61951: LD_ADDR_VAR 0 10
61955: PUSH
61956: EMPTY
61957: ST_TO_ADDR
// for i in temp_list do
61958: LD_ADDR_VAR 0 8
61962: PUSH
61963: LD_VAR 0 9
61967: PUSH
61968: FOR_IN
61969: IFFALSE 62021
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61971: LD_ADDR_VAR 0 10
61975: PUSH
61976: LD_VAR 0 10
61980: PUSH
61981: LD_VAR 0 8
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PUSH
61990: LD_VAR 0 2
61994: PLUS
61995: PUSH
61996: LD_VAR 0 8
62000: PUSH
62001: LD_INT 2
62003: ARRAY
62004: PUSH
62005: LD_VAR 0 3
62009: PLUS
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: EMPTY
62016: LIST
62017: ADD
62018: ST_TO_ADDR
62019: GO 61968
62021: POP
62022: POP
// result = temp_list2 ;
62023: LD_ADDR_VAR 0 7
62027: PUSH
62028: LD_VAR 0 10
62032: ST_TO_ADDR
// end ;
62033: LD_VAR 0 7
62037: RET
// export function EnemyInRange ( unit , dist ) ; begin
62038: LD_INT 0
62040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62041: LD_ADDR_VAR 0 3
62045: PUSH
62046: LD_VAR 0 1
62050: PPUSH
62051: CALL_OW 255
62055: PPUSH
62056: LD_VAR 0 1
62060: PPUSH
62061: CALL_OW 250
62065: PPUSH
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 251
62075: PPUSH
62076: LD_VAR 0 2
62080: PPUSH
62081: CALL 35440 0 4
62085: PUSH
62086: LD_INT 4
62088: ARRAY
62089: ST_TO_ADDR
// end ;
62090: LD_VAR 0 3
62094: RET
// export function PlayerSeeMe ( unit ) ; begin
62095: LD_INT 0
62097: PPUSH
// result := See ( your_side , unit ) ;
62098: LD_ADDR_VAR 0 2
62102: PUSH
62103: LD_OWVAR 2
62107: PPUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: CALL_OW 292
62117: ST_TO_ADDR
// end ;
62118: LD_VAR 0 2
62122: RET
// export function ReverseDir ( unit ) ; begin
62123: LD_INT 0
62125: PPUSH
// if not unit then
62126: LD_VAR 0 1
62130: NOT
62131: IFFALSE 62135
// exit ;
62133: GO 62158
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62135: LD_ADDR_VAR 0 2
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 254
62149: PUSH
62150: LD_INT 3
62152: PLUS
62153: PUSH
62154: LD_INT 6
62156: MOD
62157: ST_TO_ADDR
// end ;
62158: LD_VAR 0 2
62162: RET
// export function ReverseArray ( array ) ; var i ; begin
62163: LD_INT 0
62165: PPUSH
62166: PPUSH
// if not array then
62167: LD_VAR 0 1
62171: NOT
62172: IFFALSE 62176
// exit ;
62174: GO 62231
// result := [ ] ;
62176: LD_ADDR_VAR 0 2
62180: PUSH
62181: EMPTY
62182: ST_TO_ADDR
// for i := array downto 1 do
62183: LD_ADDR_VAR 0 3
62187: PUSH
62188: DOUBLE
62189: LD_VAR 0 1
62193: INC
62194: ST_TO_ADDR
62195: LD_INT 1
62197: PUSH
62198: FOR_DOWNTO
62199: IFFALSE 62229
// result := Join ( result , array [ i ] ) ;
62201: LD_ADDR_VAR 0 2
62205: PUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: LD_VAR 0 1
62215: PUSH
62216: LD_VAR 0 3
62220: ARRAY
62221: PPUSH
62222: CALL 66874 0 2
62226: ST_TO_ADDR
62227: GO 62198
62229: POP
62230: POP
// end ;
62231: LD_VAR 0 2
62235: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62236: LD_INT 0
62238: PPUSH
62239: PPUSH
62240: PPUSH
62241: PPUSH
62242: PPUSH
62243: PPUSH
// if not unit or not hexes then
62244: LD_VAR 0 1
62248: NOT
62249: PUSH
62250: LD_VAR 0 2
62254: NOT
62255: OR
62256: IFFALSE 62260
// exit ;
62258: GO 62383
// dist := 9999 ;
62260: LD_ADDR_VAR 0 5
62264: PUSH
62265: LD_INT 9999
62267: ST_TO_ADDR
// for i = 1 to hexes do
62268: LD_ADDR_VAR 0 4
62272: PUSH
62273: DOUBLE
62274: LD_INT 1
62276: DEC
62277: ST_TO_ADDR
62278: LD_VAR 0 2
62282: PUSH
62283: FOR_TO
62284: IFFALSE 62371
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62286: LD_ADDR_VAR 0 6
62290: PUSH
62291: LD_VAR 0 1
62295: PPUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_VAR 0 4
62305: ARRAY
62306: PUSH
62307: LD_INT 1
62309: ARRAY
62310: PPUSH
62311: LD_VAR 0 2
62315: PUSH
62316: LD_VAR 0 4
62320: ARRAY
62321: PUSH
62322: LD_INT 2
62324: ARRAY
62325: PPUSH
62326: CALL_OW 297
62330: ST_TO_ADDR
// if tdist < dist then
62331: LD_VAR 0 6
62335: PUSH
62336: LD_VAR 0 5
62340: LESS
62341: IFFALSE 62369
// begin hex := hexes [ i ] ;
62343: LD_ADDR_VAR 0 8
62347: PUSH
62348: LD_VAR 0 2
62352: PUSH
62353: LD_VAR 0 4
62357: ARRAY
62358: ST_TO_ADDR
// dist := tdist ;
62359: LD_ADDR_VAR 0 5
62363: PUSH
62364: LD_VAR 0 6
62368: ST_TO_ADDR
// end ; end ;
62369: GO 62283
62371: POP
62372: POP
// result := hex ;
62373: LD_ADDR_VAR 0 3
62377: PUSH
62378: LD_VAR 0 8
62382: ST_TO_ADDR
// end ;
62383: LD_VAR 0 3
62387: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 1
62402: PUSH
62403: LD_INT 21
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 23
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PPUSH
62427: CALL_OW 69
62431: IN
62432: NOT
62433: OR
62434: IFFALSE 62438
// exit ;
62436: GO 62485
// for i = 1 to 3 do
62438: LD_ADDR_VAR 0 3
62442: PUSH
62443: DOUBLE
62444: LD_INT 1
62446: DEC
62447: ST_TO_ADDR
62448: LD_INT 3
62450: PUSH
62451: FOR_TO
62452: IFFALSE 62483
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62454: LD_VAR 0 1
62458: PPUSH
62459: CALL_OW 250
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: CALL_OW 251
62473: PPUSH
62474: LD_INT 1
62476: PPUSH
62477: CALL_OW 453
62481: GO 62451
62483: POP
62484: POP
// end ;
62485: LD_VAR 0 2
62489: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62490: LD_INT 0
62492: PPUSH
62493: PPUSH
62494: PPUSH
62495: PPUSH
62496: PPUSH
62497: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62498: LD_VAR 0 1
62502: NOT
62503: PUSH
62504: LD_VAR 0 2
62508: NOT
62509: OR
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 314
62520: OR
62521: IFFALSE 62525
// exit ;
62523: GO 62992
// if GetLives ( i ) < 250 then
62525: LD_VAR 0 4
62529: PPUSH
62530: CALL_OW 256
62534: PUSH
62535: LD_INT 250
62537: LESS
62538: IFFALSE 62551
// begin ComAutodestruct ( i ) ;
62540: LD_VAR 0 4
62544: PPUSH
62545: CALL 62388 0 1
// exit ;
62549: GO 62992
// end ; x := GetX ( enemy_unit ) ;
62551: LD_ADDR_VAR 0 7
62555: PUSH
62556: LD_VAR 0 2
62560: PPUSH
62561: CALL_OW 250
62565: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62566: LD_ADDR_VAR 0 8
62570: PUSH
62571: LD_VAR 0 2
62575: PPUSH
62576: CALL_OW 251
62580: ST_TO_ADDR
// if not x or not y then
62581: LD_VAR 0 7
62585: NOT
62586: PUSH
62587: LD_VAR 0 8
62591: NOT
62592: OR
62593: IFFALSE 62597
// exit ;
62595: GO 62992
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62597: LD_ADDR_VAR 0 6
62601: PUSH
62602: LD_VAR 0 7
62606: PPUSH
62607: LD_INT 0
62609: PPUSH
62610: LD_INT 4
62612: PPUSH
62613: CALL_OW 272
62617: PUSH
62618: LD_VAR 0 8
62622: PPUSH
62623: LD_INT 0
62625: PPUSH
62626: LD_INT 4
62628: PPUSH
62629: CALL_OW 273
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_VAR 0 7
62642: PPUSH
62643: LD_INT 1
62645: PPUSH
62646: LD_INT 4
62648: PPUSH
62649: CALL_OW 272
62653: PUSH
62654: LD_VAR 0 8
62658: PPUSH
62659: LD_INT 1
62661: PPUSH
62662: LD_INT 4
62664: PPUSH
62665: CALL_OW 273
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_VAR 0 7
62678: PPUSH
62679: LD_INT 2
62681: PPUSH
62682: LD_INT 4
62684: PPUSH
62685: CALL_OW 272
62689: PUSH
62690: LD_VAR 0 8
62694: PPUSH
62695: LD_INT 2
62697: PPUSH
62698: LD_INT 4
62700: PPUSH
62701: CALL_OW 273
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_VAR 0 7
62714: PPUSH
62715: LD_INT 3
62717: PPUSH
62718: LD_INT 4
62720: PPUSH
62721: CALL_OW 272
62725: PUSH
62726: LD_VAR 0 8
62730: PPUSH
62731: LD_INT 3
62733: PPUSH
62734: LD_INT 4
62736: PPUSH
62737: CALL_OW 273
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_VAR 0 7
62750: PPUSH
62751: LD_INT 4
62753: PPUSH
62754: LD_INT 4
62756: PPUSH
62757: CALL_OW 272
62761: PUSH
62762: LD_VAR 0 8
62766: PPUSH
62767: LD_INT 4
62769: PPUSH
62770: LD_INT 4
62772: PPUSH
62773: CALL_OW 273
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_VAR 0 7
62786: PPUSH
62787: LD_INT 5
62789: PPUSH
62790: LD_INT 4
62792: PPUSH
62793: CALL_OW 272
62797: PUSH
62798: LD_VAR 0 8
62802: PPUSH
62803: LD_INT 5
62805: PPUSH
62806: LD_INT 4
62808: PPUSH
62809: CALL_OW 273
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// for i = tmp downto 1 do
62826: LD_ADDR_VAR 0 4
62830: PUSH
62831: DOUBLE
62832: LD_VAR 0 6
62836: INC
62837: ST_TO_ADDR
62838: LD_INT 1
62840: PUSH
62841: FOR_DOWNTO
62842: IFFALSE 62943
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62844: LD_VAR 0 6
62848: PUSH
62849: LD_VAR 0 4
62853: ARRAY
62854: PUSH
62855: LD_INT 1
62857: ARRAY
62858: PPUSH
62859: LD_VAR 0 6
62863: PUSH
62864: LD_VAR 0 4
62868: ARRAY
62869: PUSH
62870: LD_INT 2
62872: ARRAY
62873: PPUSH
62874: CALL_OW 488
62878: NOT
62879: PUSH
62880: LD_VAR 0 6
62884: PUSH
62885: LD_VAR 0 4
62889: ARRAY
62890: PUSH
62891: LD_INT 1
62893: ARRAY
62894: PPUSH
62895: LD_VAR 0 6
62899: PUSH
62900: LD_VAR 0 4
62904: ARRAY
62905: PUSH
62906: LD_INT 2
62908: ARRAY
62909: PPUSH
62910: CALL_OW 428
62914: PUSH
62915: LD_INT 0
62917: NONEQUAL
62918: OR
62919: IFFALSE 62941
// tmp := Delete ( tmp , i ) ;
62921: LD_ADDR_VAR 0 6
62925: PUSH
62926: LD_VAR 0 6
62930: PPUSH
62931: LD_VAR 0 4
62935: PPUSH
62936: CALL_OW 3
62940: ST_TO_ADDR
62941: GO 62841
62943: POP
62944: POP
// j := GetClosestHex ( unit , tmp ) ;
62945: LD_ADDR_VAR 0 5
62949: PUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: LD_VAR 0 6
62959: PPUSH
62960: CALL 62236 0 2
62964: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_VAR 0 5
62974: PUSH
62975: LD_INT 1
62977: ARRAY
62978: PPUSH
62979: LD_VAR 0 5
62983: PUSH
62984: LD_INT 2
62986: ARRAY
62987: PPUSH
62988: CALL_OW 111
// end ;
62992: LD_VAR 0 3
62996: RET
// export function PrepareApemanSoldier ( ) ; begin
62997: LD_INT 0
62999: PPUSH
// uc_nation := 0 ;
63000: LD_ADDR_OWVAR 21
63004: PUSH
63005: LD_INT 0
63007: ST_TO_ADDR
// hc_sex := sex_male ;
63008: LD_ADDR_OWVAR 27
63012: PUSH
63013: LD_INT 1
63015: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63016: LD_ADDR_OWVAR 28
63020: PUSH
63021: LD_INT 15
63023: ST_TO_ADDR
// hc_gallery :=  ;
63024: LD_ADDR_OWVAR 33
63028: PUSH
63029: LD_STRING 
63031: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63032: LD_ADDR_OWVAR 31
63036: PUSH
63037: LD_INT 0
63039: PPUSH
63040: LD_INT 3
63042: PPUSH
63043: CALL_OW 12
63047: PUSH
63048: LD_INT 0
63050: PPUSH
63051: LD_INT 3
63053: PPUSH
63054: CALL_OW 12
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: ST_TO_ADDR
// end ;
63071: LD_VAR 0 1
63075: RET
// export function PrepareApemanEngineer ( ) ; begin
63076: LD_INT 0
63078: PPUSH
// uc_nation := 0 ;
63079: LD_ADDR_OWVAR 21
63083: PUSH
63084: LD_INT 0
63086: ST_TO_ADDR
// hc_sex := sex_male ;
63087: LD_ADDR_OWVAR 27
63091: PUSH
63092: LD_INT 1
63094: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63095: LD_ADDR_OWVAR 28
63099: PUSH
63100: LD_INT 16
63102: ST_TO_ADDR
// hc_gallery :=  ;
63103: LD_ADDR_OWVAR 33
63107: PUSH
63108: LD_STRING 
63110: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63111: LD_ADDR_OWVAR 31
63115: PUSH
63116: LD_INT 0
63118: PPUSH
63119: LD_INT 3
63121: PPUSH
63122: CALL_OW 12
63126: PUSH
63127: LD_INT 0
63129: PPUSH
63130: LD_INT 3
63132: PPUSH
63133: CALL_OW 12
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// end ;
63150: LD_VAR 0 1
63154: RET
// export function PrepareApeman ( agressivity ) ; begin
63155: LD_INT 0
63157: PPUSH
// uc_side := 0 ;
63158: LD_ADDR_OWVAR 20
63162: PUSH
63163: LD_INT 0
63165: ST_TO_ADDR
// uc_nation := 0 ;
63166: LD_ADDR_OWVAR 21
63170: PUSH
63171: LD_INT 0
63173: ST_TO_ADDR
// hc_sex := sex_male ;
63174: LD_ADDR_OWVAR 27
63178: PUSH
63179: LD_INT 1
63181: ST_TO_ADDR
// hc_class := class_apeman ;
63182: LD_ADDR_OWVAR 28
63186: PUSH
63187: LD_INT 12
63189: ST_TO_ADDR
// hc_gallery :=  ;
63190: LD_ADDR_OWVAR 33
63194: PUSH
63195: LD_STRING 
63197: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63198: LD_ADDR_OWVAR 35
63202: PUSH
63203: LD_VAR 0 1
63207: NEG
63208: PPUSH
63209: LD_VAR 0 1
63213: PPUSH
63214: CALL_OW 12
63218: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63219: LD_ADDR_OWVAR 31
63223: PUSH
63224: LD_INT 0
63226: PPUSH
63227: LD_INT 3
63229: PPUSH
63230: CALL_OW 12
63234: PUSH
63235: LD_INT 0
63237: PPUSH
63238: LD_INT 3
63240: PPUSH
63241: CALL_OW 12
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 2
63262: RET
// export function PrepareTiger ( agressivity ) ; begin
63263: LD_INT 0
63265: PPUSH
// uc_side := 0 ;
63266: LD_ADDR_OWVAR 20
63270: PUSH
63271: LD_INT 0
63273: ST_TO_ADDR
// uc_nation := 0 ;
63274: LD_ADDR_OWVAR 21
63278: PUSH
63279: LD_INT 0
63281: ST_TO_ADDR
// hc_class := class_tiger ;
63282: LD_ADDR_OWVAR 28
63286: PUSH
63287: LD_INT 14
63289: ST_TO_ADDR
// hc_gallery :=  ;
63290: LD_ADDR_OWVAR 33
63294: PUSH
63295: LD_STRING 
63297: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63298: LD_ADDR_OWVAR 35
63302: PUSH
63303: LD_VAR 0 1
63307: NEG
63308: PPUSH
63309: LD_VAR 0 1
63313: PPUSH
63314: CALL_OW 12
63318: ST_TO_ADDR
// end ;
63319: LD_VAR 0 2
63323: RET
// export function PrepareEnchidna ( ) ; begin
63324: LD_INT 0
63326: PPUSH
// uc_side := 0 ;
63327: LD_ADDR_OWVAR 20
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// uc_nation := 0 ;
63335: LD_ADDR_OWVAR 21
63339: PUSH
63340: LD_INT 0
63342: ST_TO_ADDR
// hc_class := class_baggie ;
63343: LD_ADDR_OWVAR 28
63347: PUSH
63348: LD_INT 13
63350: ST_TO_ADDR
// hc_gallery :=  ;
63351: LD_ADDR_OWVAR 33
63355: PUSH
63356: LD_STRING 
63358: ST_TO_ADDR
// end ;
63359: LD_VAR 0 1
63363: RET
// export function PrepareFrog ( ) ; begin
63364: LD_INT 0
63366: PPUSH
// uc_side := 0 ;
63367: LD_ADDR_OWVAR 20
63371: PUSH
63372: LD_INT 0
63374: ST_TO_ADDR
// uc_nation := 0 ;
63375: LD_ADDR_OWVAR 21
63379: PUSH
63380: LD_INT 0
63382: ST_TO_ADDR
// hc_class := class_frog ;
63383: LD_ADDR_OWVAR 28
63387: PUSH
63388: LD_INT 19
63390: ST_TO_ADDR
// hc_gallery :=  ;
63391: LD_ADDR_OWVAR 33
63395: PUSH
63396: LD_STRING 
63398: ST_TO_ADDR
// end ;
63399: LD_VAR 0 1
63403: RET
// export function PrepareFish ( ) ; begin
63404: LD_INT 0
63406: PPUSH
// uc_side := 0 ;
63407: LD_ADDR_OWVAR 20
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// uc_nation := 0 ;
63415: LD_ADDR_OWVAR 21
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
// hc_class := class_fish ;
63423: LD_ADDR_OWVAR 28
63427: PUSH
63428: LD_INT 20
63430: ST_TO_ADDR
// hc_gallery :=  ;
63431: LD_ADDR_OWVAR 33
63435: PUSH
63436: LD_STRING 
63438: ST_TO_ADDR
// end ;
63439: LD_VAR 0 1
63443: RET
// export function PrepareBird ( ) ; begin
63444: LD_INT 0
63446: PPUSH
// uc_side := 0 ;
63447: LD_ADDR_OWVAR 20
63451: PUSH
63452: LD_INT 0
63454: ST_TO_ADDR
// uc_nation := 0 ;
63455: LD_ADDR_OWVAR 21
63459: PUSH
63460: LD_INT 0
63462: ST_TO_ADDR
// hc_class := class_phororhacos ;
63463: LD_ADDR_OWVAR 28
63467: PUSH
63468: LD_INT 18
63470: ST_TO_ADDR
// hc_gallery :=  ;
63471: LD_ADDR_OWVAR 33
63475: PUSH
63476: LD_STRING 
63478: ST_TO_ADDR
// end ;
63479: LD_VAR 0 1
63483: RET
// export function PrepareHorse ( ) ; begin
63484: LD_INT 0
63486: PPUSH
// uc_side := 0 ;
63487: LD_ADDR_OWVAR 20
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// uc_nation := 0 ;
63495: LD_ADDR_OWVAR 21
63499: PUSH
63500: LD_INT 0
63502: ST_TO_ADDR
// hc_class := class_horse ;
63503: LD_ADDR_OWVAR 28
63507: PUSH
63508: LD_INT 21
63510: ST_TO_ADDR
// hc_gallery :=  ;
63511: LD_ADDR_OWVAR 33
63515: PUSH
63516: LD_STRING 
63518: ST_TO_ADDR
// end ;
63519: LD_VAR 0 1
63523: RET
// export function PrepareMastodont ( ) ; begin
63524: LD_INT 0
63526: PPUSH
// uc_side := 0 ;
63527: LD_ADDR_OWVAR 20
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// uc_nation := 0 ;
63535: LD_ADDR_OWVAR 21
63539: PUSH
63540: LD_INT 0
63542: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63543: LD_ADDR_OWVAR 37
63547: PUSH
63548: LD_INT 31
63550: ST_TO_ADDR
// vc_control := control_rider ;
63551: LD_ADDR_OWVAR 38
63555: PUSH
63556: LD_INT 4
63558: ST_TO_ADDR
// end ;
63559: LD_VAR 0 1
63563: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63564: LD_INT 0
63566: PPUSH
63567: PPUSH
63568: PPUSH
// uc_side = 0 ;
63569: LD_ADDR_OWVAR 20
63573: PUSH
63574: LD_INT 0
63576: ST_TO_ADDR
// uc_nation = 0 ;
63577: LD_ADDR_OWVAR 21
63581: PUSH
63582: LD_INT 0
63584: ST_TO_ADDR
// InitHc_All ( ) ;
63585: CALL_OW 584
// InitVc ;
63589: CALL_OW 20
// if mastodonts then
63593: LD_VAR 0 6
63597: IFFALSE 63664
// for i = 1 to mastodonts do
63599: LD_ADDR_VAR 0 11
63603: PUSH
63604: DOUBLE
63605: LD_INT 1
63607: DEC
63608: ST_TO_ADDR
63609: LD_VAR 0 6
63613: PUSH
63614: FOR_TO
63615: IFFALSE 63662
// begin vc_chassis := 31 ;
63617: LD_ADDR_OWVAR 37
63621: PUSH
63622: LD_INT 31
63624: ST_TO_ADDR
// vc_control := control_rider ;
63625: LD_ADDR_OWVAR 38
63629: PUSH
63630: LD_INT 4
63632: ST_TO_ADDR
// animal := CreateVehicle ;
63633: LD_ADDR_VAR 0 12
63637: PUSH
63638: CALL_OW 45
63642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63643: LD_VAR 0 12
63647: PPUSH
63648: LD_VAR 0 8
63652: PPUSH
63653: LD_INT 0
63655: PPUSH
63656: CALL 65792 0 3
// end ;
63660: GO 63614
63662: POP
63663: POP
// if horses then
63664: LD_VAR 0 5
63668: IFFALSE 63735
// for i = 1 to horses do
63670: LD_ADDR_VAR 0 11
63674: PUSH
63675: DOUBLE
63676: LD_INT 1
63678: DEC
63679: ST_TO_ADDR
63680: LD_VAR 0 5
63684: PUSH
63685: FOR_TO
63686: IFFALSE 63733
// begin hc_class := 21 ;
63688: LD_ADDR_OWVAR 28
63692: PUSH
63693: LD_INT 21
63695: ST_TO_ADDR
// hc_gallery :=  ;
63696: LD_ADDR_OWVAR 33
63700: PUSH
63701: LD_STRING 
63703: ST_TO_ADDR
// animal := CreateHuman ;
63704: LD_ADDR_VAR 0 12
63708: PUSH
63709: CALL_OW 44
63713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63714: LD_VAR 0 12
63718: PPUSH
63719: LD_VAR 0 8
63723: PPUSH
63724: LD_INT 0
63726: PPUSH
63727: CALL 65792 0 3
// end ;
63731: GO 63685
63733: POP
63734: POP
// if birds then
63735: LD_VAR 0 1
63739: IFFALSE 63806
// for i = 1 to birds do
63741: LD_ADDR_VAR 0 11
63745: PUSH
63746: DOUBLE
63747: LD_INT 1
63749: DEC
63750: ST_TO_ADDR
63751: LD_VAR 0 1
63755: PUSH
63756: FOR_TO
63757: IFFALSE 63804
// begin hc_class = 18 ;
63759: LD_ADDR_OWVAR 28
63763: PUSH
63764: LD_INT 18
63766: ST_TO_ADDR
// hc_gallery =  ;
63767: LD_ADDR_OWVAR 33
63771: PUSH
63772: LD_STRING 
63774: ST_TO_ADDR
// animal := CreateHuman ;
63775: LD_ADDR_VAR 0 12
63779: PUSH
63780: CALL_OW 44
63784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63785: LD_VAR 0 12
63789: PPUSH
63790: LD_VAR 0 8
63794: PPUSH
63795: LD_INT 0
63797: PPUSH
63798: CALL 65792 0 3
// end ;
63802: GO 63756
63804: POP
63805: POP
// if tigers then
63806: LD_VAR 0 2
63810: IFFALSE 63894
// for i = 1 to tigers do
63812: LD_ADDR_VAR 0 11
63816: PUSH
63817: DOUBLE
63818: LD_INT 1
63820: DEC
63821: ST_TO_ADDR
63822: LD_VAR 0 2
63826: PUSH
63827: FOR_TO
63828: IFFALSE 63892
// begin hc_class = class_tiger ;
63830: LD_ADDR_OWVAR 28
63834: PUSH
63835: LD_INT 14
63837: ST_TO_ADDR
// hc_gallery =  ;
63838: LD_ADDR_OWVAR 33
63842: PUSH
63843: LD_STRING 
63845: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63846: LD_ADDR_OWVAR 35
63850: PUSH
63851: LD_INT 7
63853: NEG
63854: PPUSH
63855: LD_INT 7
63857: PPUSH
63858: CALL_OW 12
63862: ST_TO_ADDR
// animal := CreateHuman ;
63863: LD_ADDR_VAR 0 12
63867: PUSH
63868: CALL_OW 44
63872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63873: LD_VAR 0 12
63877: PPUSH
63878: LD_VAR 0 8
63882: PPUSH
63883: LD_INT 0
63885: PPUSH
63886: CALL 65792 0 3
// end ;
63890: GO 63827
63892: POP
63893: POP
// if apemans then
63894: LD_VAR 0 3
63898: IFFALSE 64021
// for i = 1 to apemans do
63900: LD_ADDR_VAR 0 11
63904: PUSH
63905: DOUBLE
63906: LD_INT 1
63908: DEC
63909: ST_TO_ADDR
63910: LD_VAR 0 3
63914: PUSH
63915: FOR_TO
63916: IFFALSE 64019
// begin hc_class = class_apeman ;
63918: LD_ADDR_OWVAR 28
63922: PUSH
63923: LD_INT 12
63925: ST_TO_ADDR
// hc_gallery =  ;
63926: LD_ADDR_OWVAR 33
63930: PUSH
63931: LD_STRING 
63933: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63934: LD_ADDR_OWVAR 35
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PPUSH
63943: LD_INT 2
63945: PPUSH
63946: CALL_OW 12
63950: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63951: LD_ADDR_OWVAR 31
63955: PUSH
63956: LD_INT 1
63958: PPUSH
63959: LD_INT 3
63961: PPUSH
63962: CALL_OW 12
63966: PUSH
63967: LD_INT 1
63969: PPUSH
63970: LD_INT 3
63972: PPUSH
63973: CALL_OW 12
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// animal := CreateHuman ;
63990: LD_ADDR_VAR 0 12
63994: PUSH
63995: CALL_OW 44
63999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64000: LD_VAR 0 12
64004: PPUSH
64005: LD_VAR 0 8
64009: PPUSH
64010: LD_INT 0
64012: PPUSH
64013: CALL 65792 0 3
// end ;
64017: GO 63915
64019: POP
64020: POP
// if enchidnas then
64021: LD_VAR 0 4
64025: IFFALSE 64092
// for i = 1 to enchidnas do
64027: LD_ADDR_VAR 0 11
64031: PUSH
64032: DOUBLE
64033: LD_INT 1
64035: DEC
64036: ST_TO_ADDR
64037: LD_VAR 0 4
64041: PUSH
64042: FOR_TO
64043: IFFALSE 64090
// begin hc_class = 13 ;
64045: LD_ADDR_OWVAR 28
64049: PUSH
64050: LD_INT 13
64052: ST_TO_ADDR
// hc_gallery =  ;
64053: LD_ADDR_OWVAR 33
64057: PUSH
64058: LD_STRING 
64060: ST_TO_ADDR
// animal := CreateHuman ;
64061: LD_ADDR_VAR 0 12
64065: PUSH
64066: CALL_OW 44
64070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64071: LD_VAR 0 12
64075: PPUSH
64076: LD_VAR 0 8
64080: PPUSH
64081: LD_INT 0
64083: PPUSH
64084: CALL 65792 0 3
// end ;
64088: GO 64042
64090: POP
64091: POP
// if fishes then
64092: LD_VAR 0 7
64096: IFFALSE 64163
// for i = 1 to fishes do
64098: LD_ADDR_VAR 0 11
64102: PUSH
64103: DOUBLE
64104: LD_INT 1
64106: DEC
64107: ST_TO_ADDR
64108: LD_VAR 0 7
64112: PUSH
64113: FOR_TO
64114: IFFALSE 64161
// begin hc_class = 20 ;
64116: LD_ADDR_OWVAR 28
64120: PUSH
64121: LD_INT 20
64123: ST_TO_ADDR
// hc_gallery =  ;
64124: LD_ADDR_OWVAR 33
64128: PUSH
64129: LD_STRING 
64131: ST_TO_ADDR
// animal := CreateHuman ;
64132: LD_ADDR_VAR 0 12
64136: PUSH
64137: CALL_OW 44
64141: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64142: LD_VAR 0 12
64146: PPUSH
64147: LD_VAR 0 9
64151: PPUSH
64152: LD_INT 0
64154: PPUSH
64155: CALL 65792 0 3
// end ;
64159: GO 64113
64161: POP
64162: POP
// end ;
64163: LD_VAR 0 10
64167: RET
// export function WantHeal ( sci , unit ) ; begin
64168: LD_INT 0
64170: PPUSH
// if GetTaskList ( sci ) > 0 then
64171: LD_VAR 0 1
64175: PPUSH
64176: CALL_OW 437
64180: PUSH
64181: LD_INT 0
64183: GREATER
64184: IFFALSE 64254
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 437
64195: PUSH
64196: LD_INT 1
64198: ARRAY
64199: PUSH
64200: LD_INT 1
64202: ARRAY
64203: PUSH
64204: LD_STRING l
64206: EQUAL
64207: PUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 437
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: PUSH
64222: LD_INT 4
64224: ARRAY
64225: PUSH
64226: LD_VAR 0 2
64230: EQUAL
64231: AND
64232: IFFALSE 64244
// result := true else
64234: LD_ADDR_VAR 0 3
64238: PUSH
64239: LD_INT 1
64241: ST_TO_ADDR
64242: GO 64252
// result := false ;
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: LD_INT 0
64251: ST_TO_ADDR
// end else
64252: GO 64262
// result := false ;
64254: LD_ADDR_VAR 0 3
64258: PUSH
64259: LD_INT 0
64261: ST_TO_ADDR
// end ;
64262: LD_VAR 0 3
64266: RET
// export function HealTarget ( sci ) ; begin
64267: LD_INT 0
64269: PPUSH
// if not sci then
64270: LD_VAR 0 1
64274: NOT
64275: IFFALSE 64279
// exit ;
64277: GO 64344
// result := 0 ;
64279: LD_ADDR_VAR 0 2
64283: PUSH
64284: LD_INT 0
64286: ST_TO_ADDR
// if GetTaskList ( sci ) then
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 437
64296: IFFALSE 64344
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 437
64307: PUSH
64308: LD_INT 1
64310: ARRAY
64311: PUSH
64312: LD_INT 1
64314: ARRAY
64315: PUSH
64316: LD_STRING l
64318: EQUAL
64319: IFFALSE 64344
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64321: LD_ADDR_VAR 0 2
64325: PUSH
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 437
64335: PUSH
64336: LD_INT 1
64338: ARRAY
64339: PUSH
64340: LD_INT 4
64342: ARRAY
64343: ST_TO_ADDR
// end ;
64344: LD_VAR 0 2
64348: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64349: LD_INT 0
64351: PPUSH
64352: PPUSH
64353: PPUSH
64354: PPUSH
// if not base_units then
64355: LD_VAR 0 1
64359: NOT
64360: IFFALSE 64364
// exit ;
64362: GO 64451
// result := false ;
64364: LD_ADDR_VAR 0 2
64368: PUSH
64369: LD_INT 0
64371: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64372: LD_ADDR_VAR 0 5
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: LD_INT 21
64384: PUSH
64385: LD_INT 3
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PPUSH
64392: CALL_OW 72
64396: ST_TO_ADDR
// if not tmp then
64397: LD_VAR 0 5
64401: NOT
64402: IFFALSE 64406
// exit ;
64404: GO 64451
// for i in tmp do
64406: LD_ADDR_VAR 0 3
64410: PUSH
64411: LD_VAR 0 5
64415: PUSH
64416: FOR_IN
64417: IFFALSE 64449
// begin result := EnemyInRange ( i , 22 ) ;
64419: LD_ADDR_VAR 0 2
64423: PUSH
64424: LD_VAR 0 3
64428: PPUSH
64429: LD_INT 22
64431: PPUSH
64432: CALL 62038 0 2
64436: ST_TO_ADDR
// if result then
64437: LD_VAR 0 2
64441: IFFALSE 64447
// exit ;
64443: POP
64444: POP
64445: GO 64451
// end ;
64447: GO 64416
64449: POP
64450: POP
// end ;
64451: LD_VAR 0 2
64455: RET
// export function FilterByTag ( units , tag ) ; begin
64456: LD_INT 0
64458: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64459: LD_ADDR_VAR 0 3
64463: PUSH
64464: LD_VAR 0 1
64468: PPUSH
64469: LD_INT 120
64471: PUSH
64472: LD_VAR 0 2
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PPUSH
64481: CALL_OW 72
64485: ST_TO_ADDR
// end ;
64486: LD_VAR 0 3
64490: RET
// export function IsDriver ( un ) ; begin
64491: LD_INT 0
64493: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64494: LD_ADDR_VAR 0 2
64498: PUSH
64499: LD_VAR 0 1
64503: PUSH
64504: LD_INT 55
64506: PUSH
64507: EMPTY
64508: LIST
64509: PPUSH
64510: CALL_OW 69
64514: IN
64515: ST_TO_ADDR
// end ;
64516: LD_VAR 0 2
64520: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64521: LD_INT 0
64523: PPUSH
64524: PPUSH
// list := [ ] ;
64525: LD_ADDR_VAR 0 5
64529: PUSH
64530: EMPTY
64531: ST_TO_ADDR
// case d of 0 :
64532: LD_VAR 0 3
64536: PUSH
64537: LD_INT 0
64539: DOUBLE
64540: EQUAL
64541: IFTRUE 64545
64543: GO 64678
64545: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64546: LD_ADDR_VAR 0 5
64550: PUSH
64551: LD_VAR 0 1
64555: PUSH
64556: LD_INT 4
64558: MINUS
64559: PUSH
64560: LD_VAR 0 2
64564: PUSH
64565: LD_INT 4
64567: MINUS
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: PUSH
64577: LD_VAR 0 1
64581: PUSH
64582: LD_INT 3
64584: MINUS
64585: PUSH
64586: LD_VAR 0 2
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: LD_INT 4
64606: PLUS
64607: PUSH
64608: LD_VAR 0 2
64612: PUSH
64613: LD_INT 4
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 3
64628: PLUS
64629: PUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_INT 3
64637: PLUS
64638: PUSH
64639: LD_INT 5
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: PUSH
64647: LD_VAR 0 1
64651: PUSH
64652: LD_VAR 0 2
64656: PUSH
64657: LD_INT 4
64659: PLUS
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// end ; 1 :
64676: GO 65376
64678: LD_INT 1
64680: DOUBLE
64681: EQUAL
64682: IFTRUE 64686
64684: GO 64819
64686: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64687: LD_ADDR_VAR 0 5
64691: PUSH
64692: LD_VAR 0 1
64696: PUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_INT 4
64704: MINUS
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: PUSH
64714: LD_VAR 0 1
64718: PUSH
64719: LD_INT 3
64721: MINUS
64722: PUSH
64723: LD_VAR 0 2
64727: PUSH
64728: LD_INT 3
64730: MINUS
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: PUSH
64740: LD_VAR 0 1
64744: PUSH
64745: LD_INT 4
64747: MINUS
64748: PUSH
64749: LD_VAR 0 2
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: PUSH
64762: LD_VAR 0 1
64766: PUSH
64767: LD_VAR 0 2
64771: PUSH
64772: LD_INT 3
64774: PLUS
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: LIST
64783: PUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_INT 4
64791: PLUS
64792: PUSH
64793: LD_VAR 0 2
64797: PUSH
64798: LD_INT 4
64800: PLUS
64801: PUSH
64802: LD_INT 5
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// end ; 2 :
64817: GO 65376
64819: LD_INT 2
64821: DOUBLE
64822: EQUAL
64823: IFTRUE 64827
64825: GO 64956
64827: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64828: LD_ADDR_VAR 0 5
64832: PUSH
64833: LD_VAR 0 1
64837: PUSH
64838: LD_VAR 0 2
64842: PUSH
64843: LD_INT 3
64845: MINUS
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: PUSH
64855: LD_VAR 0 1
64859: PUSH
64860: LD_INT 4
64862: PLUS
64863: PUSH
64864: LD_VAR 0 2
64868: PUSH
64869: LD_INT 4
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: PUSH
64877: LD_VAR 0 1
64881: PUSH
64882: LD_VAR 0 2
64886: PUSH
64887: LD_INT 4
64889: PLUS
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 3
64906: MINUS
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: PUSH
64921: LD_VAR 0 1
64925: PUSH
64926: LD_INT 4
64928: MINUS
64929: PUSH
64930: LD_VAR 0 2
64934: PUSH
64935: LD_INT 4
64937: MINUS
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: ST_TO_ADDR
// end ; 3 :
64954: GO 65376
64956: LD_INT 3
64958: DOUBLE
64959: EQUAL
64960: IFTRUE 64964
64962: GO 65097
64964: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64965: LD_ADDR_VAR 0 5
64969: PUSH
64970: LD_VAR 0 1
64974: PUSH
64975: LD_INT 3
64977: PLUS
64978: PUSH
64979: LD_VAR 0 2
64983: PUSH
64984: LD_INT 4
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: PUSH
64992: LD_VAR 0 1
64996: PUSH
64997: LD_INT 4
64999: PLUS
65000: PUSH
65001: LD_VAR 0 2
65005: PUSH
65006: LD_INT 4
65008: PLUS
65009: PUSH
65010: LD_INT 5
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 4
65025: MINUS
65026: PUSH
65027: LD_VAR 0 2
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: PUSH
65040: LD_VAR 0 1
65044: PUSH
65045: LD_VAR 0 2
65049: PUSH
65050: LD_INT 4
65052: MINUS
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: PUSH
65062: LD_VAR 0 1
65066: PUSH
65067: LD_INT 3
65069: MINUS
65070: PUSH
65071: LD_VAR 0 2
65075: PUSH
65076: LD_INT 3
65078: MINUS
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: ST_TO_ADDR
// end ; 4 :
65095: GO 65376
65097: LD_INT 4
65099: DOUBLE
65100: EQUAL
65101: IFTRUE 65105
65103: GO 65238
65105: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65106: LD_ADDR_VAR 0 5
65110: PUSH
65111: LD_VAR 0 1
65115: PUSH
65116: LD_VAR 0 2
65120: PUSH
65121: LD_INT 4
65123: PLUS
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: LD_VAR 0 1
65137: PUSH
65138: LD_INT 3
65140: PLUS
65141: PUSH
65142: LD_VAR 0 2
65146: PUSH
65147: LD_INT 3
65149: PLUS
65150: PUSH
65151: LD_INT 5
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 4
65166: PLUS
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_INT 4
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: LD_VAR 0 1
65185: PUSH
65186: LD_VAR 0 2
65190: PUSH
65191: LD_INT 3
65193: MINUS
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: LD_INT 4
65210: MINUS
65211: PUSH
65212: LD_VAR 0 2
65216: PUSH
65217: LD_INT 4
65219: MINUS
65220: PUSH
65221: LD_INT 2
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: ST_TO_ADDR
// end ; 5 :
65236: GO 65376
65238: LD_INT 5
65240: DOUBLE
65241: EQUAL
65242: IFTRUE 65246
65244: GO 65375
65246: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65247: LD_ADDR_VAR 0 5
65251: PUSH
65252: LD_VAR 0 1
65256: PUSH
65257: LD_INT 4
65259: MINUS
65260: PUSH
65261: LD_VAR 0 2
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: PUSH
65274: LD_VAR 0 1
65278: PUSH
65279: LD_VAR 0 2
65283: PUSH
65284: LD_INT 4
65286: MINUS
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: PUSH
65296: LD_VAR 0 1
65300: PUSH
65301: LD_INT 4
65303: PLUS
65304: PUSH
65305: LD_VAR 0 2
65309: PUSH
65310: LD_INT 4
65312: PLUS
65313: PUSH
65314: LD_INT 5
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: LIST
65321: PUSH
65322: LD_VAR 0 1
65326: PUSH
65327: LD_INT 3
65329: PLUS
65330: PUSH
65331: LD_VAR 0 2
65335: PUSH
65336: LD_INT 4
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: PUSH
65344: LD_VAR 0 1
65348: PUSH
65349: LD_VAR 0 2
65353: PUSH
65354: LD_INT 3
65356: PLUS
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: ST_TO_ADDR
// end ; end ;
65373: GO 65376
65375: POP
// result := list ;
65376: LD_ADDR_VAR 0 4
65380: PUSH
65381: LD_VAR 0 5
65385: ST_TO_ADDR
// end ;
65386: LD_VAR 0 4
65390: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65391: LD_INT 0
65393: PPUSH
65394: PPUSH
65395: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65396: LD_VAR 0 1
65400: NOT
65401: PUSH
65402: LD_VAR 0 2
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: LD_INT 4
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: IN
65425: NOT
65426: OR
65427: IFFALSE 65431
// exit ;
65429: GO 65514
// tmp := [ ] ;
65431: LD_ADDR_VAR 0 5
65435: PUSH
65436: EMPTY
65437: ST_TO_ADDR
// for i in units do
65438: LD_ADDR_VAR 0 4
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: FOR_IN
65449: IFFALSE 65483
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65451: LD_ADDR_VAR 0 5
65455: PUSH
65456: LD_VAR 0 5
65460: PPUSH
65461: LD_VAR 0 4
65465: PPUSH
65466: LD_VAR 0 2
65470: PPUSH
65471: CALL_OW 259
65475: PPUSH
65476: CALL 66874 0 2
65480: ST_TO_ADDR
65481: GO 65448
65483: POP
65484: POP
// if not tmp then
65485: LD_VAR 0 5
65489: NOT
65490: IFFALSE 65494
// exit ;
65492: GO 65514
// result := SortListByListDesc ( units , tmp ) ;
65494: LD_ADDR_VAR 0 3
65498: PUSH
65499: LD_VAR 0 1
65503: PPUSH
65504: LD_VAR 0 5
65508: PPUSH
65509: CALL_OW 77
65513: ST_TO_ADDR
// end ;
65514: LD_VAR 0 3
65518: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65519: LD_INT 0
65521: PPUSH
65522: PPUSH
65523: PPUSH
// result := false ;
65524: LD_ADDR_VAR 0 3
65528: PUSH
65529: LD_INT 0
65531: ST_TO_ADDR
// if not building then
65532: LD_VAR 0 2
65536: NOT
65537: IFFALSE 65541
// exit ;
65539: GO 65679
// x := GetX ( building ) ;
65541: LD_ADDR_VAR 0 4
65545: PUSH
65546: LD_VAR 0 2
65550: PPUSH
65551: CALL_OW 250
65555: ST_TO_ADDR
// y := GetY ( building ) ;
65556: LD_ADDR_VAR 0 5
65560: PUSH
65561: LD_VAR 0 2
65565: PPUSH
65566: CALL_OW 251
65570: ST_TO_ADDR
// if not x or not y then
65571: LD_VAR 0 4
65575: NOT
65576: PUSH
65577: LD_VAR 0 5
65581: NOT
65582: OR
65583: IFFALSE 65587
// exit ;
65585: GO 65679
// if GetTaskList ( unit ) then
65587: LD_VAR 0 1
65591: PPUSH
65592: CALL_OW 437
65596: IFFALSE 65679
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65598: LD_STRING e
65600: PUSH
65601: LD_VAR 0 1
65605: PPUSH
65606: CALL_OW 437
65610: PUSH
65611: LD_INT 1
65613: ARRAY
65614: PUSH
65615: LD_INT 1
65617: ARRAY
65618: EQUAL
65619: PUSH
65620: LD_VAR 0 4
65624: PUSH
65625: LD_VAR 0 1
65629: PPUSH
65630: CALL_OW 437
65634: PUSH
65635: LD_INT 1
65637: ARRAY
65638: PUSH
65639: LD_INT 2
65641: ARRAY
65642: EQUAL
65643: AND
65644: PUSH
65645: LD_VAR 0 5
65649: PUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: CALL_OW 437
65659: PUSH
65660: LD_INT 1
65662: ARRAY
65663: PUSH
65664: LD_INT 3
65666: ARRAY
65667: EQUAL
65668: AND
65669: IFFALSE 65679
// result := true end ;
65671: LD_ADDR_VAR 0 3
65675: PUSH
65676: LD_INT 1
65678: ST_TO_ADDR
// end ;
65679: LD_VAR 0 3
65683: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65684: LD_INT 0
65686: PPUSH
// result := false ;
65687: LD_ADDR_VAR 0 4
65691: PUSH
65692: LD_INT 0
65694: ST_TO_ADDR
// if GetTaskList ( unit ) then
65695: LD_VAR 0 1
65699: PPUSH
65700: CALL_OW 437
65704: IFFALSE 65787
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65706: LD_STRING M
65708: PUSH
65709: LD_VAR 0 1
65713: PPUSH
65714: CALL_OW 437
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: EQUAL
65727: PUSH
65728: LD_VAR 0 2
65732: PUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 437
65742: PUSH
65743: LD_INT 1
65745: ARRAY
65746: PUSH
65747: LD_INT 2
65749: ARRAY
65750: EQUAL
65751: AND
65752: PUSH
65753: LD_VAR 0 3
65757: PUSH
65758: LD_VAR 0 1
65762: PPUSH
65763: CALL_OW 437
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PUSH
65772: LD_INT 3
65774: ARRAY
65775: EQUAL
65776: AND
65777: IFFALSE 65787
// result := true ;
65779: LD_ADDR_VAR 0 4
65783: PUSH
65784: LD_INT 1
65786: ST_TO_ADDR
// end ; end ;
65787: LD_VAR 0 4
65791: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65792: LD_INT 0
65794: PPUSH
65795: PPUSH
65796: PPUSH
65797: PPUSH
// if not unit or not area then
65798: LD_VAR 0 1
65802: NOT
65803: PUSH
65804: LD_VAR 0 2
65808: NOT
65809: OR
65810: IFFALSE 65814
// exit ;
65812: GO 65977
// tmp := AreaToList ( area , i ) ;
65814: LD_ADDR_VAR 0 6
65818: PUSH
65819: LD_VAR 0 2
65823: PPUSH
65824: LD_VAR 0 5
65828: PPUSH
65829: CALL_OW 517
65833: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65834: LD_ADDR_VAR 0 5
65838: PUSH
65839: DOUBLE
65840: LD_INT 1
65842: DEC
65843: ST_TO_ADDR
65844: LD_VAR 0 6
65848: PUSH
65849: LD_INT 1
65851: ARRAY
65852: PUSH
65853: FOR_TO
65854: IFFALSE 65975
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65856: LD_ADDR_VAR 0 7
65860: PUSH
65861: LD_VAR 0 6
65865: PUSH
65866: LD_INT 1
65868: ARRAY
65869: PUSH
65870: LD_VAR 0 5
65874: ARRAY
65875: PUSH
65876: LD_VAR 0 6
65880: PUSH
65881: LD_INT 2
65883: ARRAY
65884: PUSH
65885: LD_VAR 0 5
65889: ARRAY
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
65895: LD_INT 92
65897: PUSH
65898: LD_VAR 0 7
65902: PUSH
65903: LD_INT 1
65905: ARRAY
65906: PUSH
65907: LD_VAR 0 7
65911: PUSH
65912: LD_INT 2
65914: ARRAY
65915: PUSH
65916: LD_INT 3
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: PPUSH
65925: CALL_OW 69
65929: PUSH
65930: LD_INT 0
65932: EQUAL
65933: IFFALSE 65973
// begin PlaceUnitArea ( unit , area , mode ) ;
65935: LD_VAR 0 1
65939: PPUSH
65940: LD_VAR 0 2
65944: PPUSH
65945: LD_VAR 0 3
65949: PPUSH
65950: CALL_OW 49
// result := IsPlaced ( unit ) ;
65954: LD_ADDR_VAR 0 4
65958: PUSH
65959: LD_VAR 0 1
65963: PPUSH
65964: CALL_OW 305
65968: ST_TO_ADDR
// exit ;
65969: POP
65970: POP
65971: GO 65977
// end ; end ;
65973: GO 65853
65975: POP
65976: POP
// end ;
65977: LD_VAR 0 4
65981: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
65986: PPUSH
// if not side or side > 8 then
65987: LD_VAR 0 1
65991: NOT
65992: PUSH
65993: LD_VAR 0 1
65997: PUSH
65998: LD_INT 8
66000: GREATER
66001: OR
66002: IFFALSE 66006
// exit ;
66004: GO 66193
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66006: LD_ADDR_VAR 0 4
66010: PUSH
66011: LD_INT 22
66013: PUSH
66014: LD_VAR 0 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 21
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PPUSH
66037: CALL_OW 69
66041: ST_TO_ADDR
// if not tmp then
66042: LD_VAR 0 4
66046: NOT
66047: IFFALSE 66051
// exit ;
66049: GO 66193
// enable_addtolog := true ;
66051: LD_ADDR_OWVAR 81
66055: PUSH
66056: LD_INT 1
66058: ST_TO_ADDR
// AddToLog ( [ ) ;
66059: LD_STRING [
66061: PPUSH
66062: CALL_OW 561
// for i in tmp do
66066: LD_ADDR_VAR 0 3
66070: PUSH
66071: LD_VAR 0 4
66075: PUSH
66076: FOR_IN
66077: IFFALSE 66184
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66079: LD_STRING [
66081: PUSH
66082: LD_VAR 0 3
66086: PPUSH
66087: CALL_OW 266
66091: STR
66092: PUSH
66093: LD_STRING , 
66095: STR
66096: PUSH
66097: LD_VAR 0 3
66101: PPUSH
66102: CALL_OW 250
66106: STR
66107: PUSH
66108: LD_STRING , 
66110: STR
66111: PUSH
66112: LD_VAR 0 3
66116: PPUSH
66117: CALL_OW 251
66121: STR
66122: PUSH
66123: LD_STRING , 
66125: STR
66126: PUSH
66127: LD_VAR 0 3
66131: PPUSH
66132: CALL_OW 254
66136: STR
66137: PUSH
66138: LD_STRING , 
66140: STR
66141: PUSH
66142: LD_VAR 0 3
66146: PPUSH
66147: LD_INT 1
66149: PPUSH
66150: CALL_OW 268
66154: STR
66155: PUSH
66156: LD_STRING , 
66158: STR
66159: PUSH
66160: LD_VAR 0 3
66164: PPUSH
66165: LD_INT 2
66167: PPUSH
66168: CALL_OW 268
66172: STR
66173: PUSH
66174: LD_STRING ],
66176: STR
66177: PPUSH
66178: CALL_OW 561
// end ;
66182: GO 66076
66184: POP
66185: POP
// AddToLog ( ]; ) ;
66186: LD_STRING ];
66188: PPUSH
66189: CALL_OW 561
// end ;
66193: LD_VAR 0 2
66197: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66198: LD_INT 0
66200: PPUSH
66201: PPUSH
66202: PPUSH
66203: PPUSH
66204: PPUSH
// if not area or not rate or not max then
66205: LD_VAR 0 1
66209: NOT
66210: PUSH
66211: LD_VAR 0 2
66215: NOT
66216: OR
66217: PUSH
66218: LD_VAR 0 4
66222: NOT
66223: OR
66224: IFFALSE 66228
// exit ;
66226: GO 66417
// while 1 do
66228: LD_INT 1
66230: IFFALSE 66417
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66232: LD_ADDR_VAR 0 9
66236: PUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: LD_INT 1
66244: PPUSH
66245: CALL_OW 287
66249: PUSH
66250: LD_INT 10
66252: MUL
66253: ST_TO_ADDR
// r := rate / 10 ;
66254: LD_ADDR_VAR 0 7
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 10
66266: DIVREAL
66267: ST_TO_ADDR
// time := 1 1$00 ;
66268: LD_ADDR_VAR 0 8
66272: PUSH
66273: LD_INT 2100
66275: ST_TO_ADDR
// if amount < min then
66276: LD_VAR 0 9
66280: PUSH
66281: LD_VAR 0 3
66285: LESS
66286: IFFALSE 66304
// r := r * 2 else
66288: LD_ADDR_VAR 0 7
66292: PUSH
66293: LD_VAR 0 7
66297: PUSH
66298: LD_INT 2
66300: MUL
66301: ST_TO_ADDR
66302: GO 66330
// if amount > max then
66304: LD_VAR 0 9
66308: PUSH
66309: LD_VAR 0 4
66313: GREATER
66314: IFFALSE 66330
// r := r / 2 ;
66316: LD_ADDR_VAR 0 7
66320: PUSH
66321: LD_VAR 0 7
66325: PUSH
66326: LD_INT 2
66328: DIVREAL
66329: ST_TO_ADDR
// time := time / r ;
66330: LD_ADDR_VAR 0 8
66334: PUSH
66335: LD_VAR 0 8
66339: PUSH
66340: LD_VAR 0 7
66344: DIVREAL
66345: ST_TO_ADDR
// if time < 0 then
66346: LD_VAR 0 8
66350: PUSH
66351: LD_INT 0
66353: LESS
66354: IFFALSE 66371
// time := time * - 1 ;
66356: LD_ADDR_VAR 0 8
66360: PUSH
66361: LD_VAR 0 8
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: MUL
66370: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66371: LD_VAR 0 8
66375: PUSH
66376: LD_INT 35
66378: PPUSH
66379: LD_INT 875
66381: PPUSH
66382: CALL_OW 12
66386: PLUS
66387: PPUSH
66388: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66392: LD_INT 1
66394: PPUSH
66395: LD_INT 5
66397: PPUSH
66398: CALL_OW 12
66402: PPUSH
66403: LD_VAR 0 1
66407: PPUSH
66408: LD_INT 1
66410: PPUSH
66411: CALL_OW 55
// end ;
66415: GO 66228
// end ;
66417: LD_VAR 0 5
66421: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66422: LD_INT 0
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
66430: PPUSH
66431: PPUSH
// if not turrets or not factories then
66432: LD_VAR 0 1
66436: NOT
66437: PUSH
66438: LD_VAR 0 2
66442: NOT
66443: OR
66444: IFFALSE 66448
// exit ;
66446: GO 66755
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66448: LD_ADDR_VAR 0 10
66452: PUSH
66453: LD_INT 5
66455: PUSH
66456: LD_INT 6
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 5
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 24
66490: PUSH
66491: LD_INT 25
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 23
66500: PUSH
66501: LD_INT 27
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 42
66514: PUSH
66515: LD_INT 43
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 44
66524: PUSH
66525: LD_INT 46
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 45
66534: PUSH
66535: LD_INT 47
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: LIST
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// result := [ ] ;
66552: LD_ADDR_VAR 0 3
66556: PUSH
66557: EMPTY
66558: ST_TO_ADDR
// for i in turrets do
66559: LD_ADDR_VAR 0 4
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: FOR_IN
66570: IFFALSE 66753
// begin nat := GetNation ( i ) ;
66572: LD_ADDR_VAR 0 7
66576: PUSH
66577: LD_VAR 0 4
66581: PPUSH
66582: CALL_OW 248
66586: ST_TO_ADDR
// weapon := 0 ;
66587: LD_ADDR_VAR 0 8
66591: PUSH
66592: LD_INT 0
66594: ST_TO_ADDR
// if not nat then
66595: LD_VAR 0 7
66599: NOT
66600: IFFALSE 66604
// continue ;
66602: GO 66569
// for j in list [ nat ] do
66604: LD_ADDR_VAR 0 5
66608: PUSH
66609: LD_VAR 0 10
66613: PUSH
66614: LD_VAR 0 7
66618: ARRAY
66619: PUSH
66620: FOR_IN
66621: IFFALSE 66662
// if GetBWeapon ( i ) = j [ 1 ] then
66623: LD_VAR 0 4
66627: PPUSH
66628: CALL_OW 269
66632: PUSH
66633: LD_VAR 0 5
66637: PUSH
66638: LD_INT 1
66640: ARRAY
66641: EQUAL
66642: IFFALSE 66660
// begin weapon := j [ 2 ] ;
66644: LD_ADDR_VAR 0 8
66648: PUSH
66649: LD_VAR 0 5
66653: PUSH
66654: LD_INT 2
66656: ARRAY
66657: ST_TO_ADDR
// break ;
66658: GO 66662
// end ;
66660: GO 66620
66662: POP
66663: POP
// if not weapon then
66664: LD_VAR 0 8
66668: NOT
66669: IFFALSE 66673
// continue ;
66671: GO 66569
// for k in factories do
66673: LD_ADDR_VAR 0 6
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: FOR_IN
66684: IFFALSE 66749
// begin weapons := AvailableWeaponList ( k ) ;
66686: LD_ADDR_VAR 0 9
66690: PUSH
66691: LD_VAR 0 6
66695: PPUSH
66696: CALL_OW 478
66700: ST_TO_ADDR
// if not weapons then
66701: LD_VAR 0 9
66705: NOT
66706: IFFALSE 66710
// continue ;
66708: GO 66683
// if weapon in weapons then
66710: LD_VAR 0 8
66714: PUSH
66715: LD_VAR 0 9
66719: IN
66720: IFFALSE 66747
// begin result := [ i , weapon ] ;
66722: LD_ADDR_VAR 0 3
66726: PUSH
66727: LD_VAR 0 4
66731: PUSH
66732: LD_VAR 0 8
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: ST_TO_ADDR
// exit ;
66741: POP
66742: POP
66743: POP
66744: POP
66745: GO 66755
// end ; end ;
66747: GO 66683
66749: POP
66750: POP
// end ;
66751: GO 66569
66753: POP
66754: POP
// end ;
66755: LD_VAR 0 3
66759: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66760: LD_INT 0
66762: PPUSH
// if not side or side > 8 then
66763: LD_VAR 0 3
66767: NOT
66768: PUSH
66769: LD_VAR 0 3
66773: PUSH
66774: LD_INT 8
66776: GREATER
66777: OR
66778: IFFALSE 66782
// exit ;
66780: GO 66841
// if not range then
66782: LD_VAR 0 4
66786: NOT
66787: IFFALSE 66798
// range := - 12 ;
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: LD_INT 12
66796: NEG
66797: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66798: LD_VAR 0 1
66802: PPUSH
66803: LD_VAR 0 2
66807: PPUSH
66808: LD_VAR 0 3
66812: PPUSH
66813: LD_VAR 0 4
66817: PPUSH
66818: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66822: LD_VAR 0 1
66826: PPUSH
66827: LD_VAR 0 2
66831: PPUSH
66832: LD_VAR 0 3
66836: PPUSH
66837: CALL_OW 331
// end ;
66841: LD_VAR 0 5
66845: RET
// export function Video ( mode ) ; begin
66846: LD_INT 0
66848: PPUSH
// ingame_video = mode ;
66849: LD_ADDR_OWVAR 52
66853: PUSH
66854: LD_VAR 0 1
66858: ST_TO_ADDR
// interface_hidden = mode ;
66859: LD_ADDR_OWVAR 54
66863: PUSH
66864: LD_VAR 0 1
66868: ST_TO_ADDR
// end ;
66869: LD_VAR 0 2
66873: RET
// export function Join ( array , element ) ; begin
66874: LD_INT 0
66876: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66877: LD_ADDR_VAR 0 3
66881: PUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: LD_VAR 0 1
66891: PUSH
66892: LD_INT 1
66894: PLUS
66895: PPUSH
66896: LD_VAR 0 2
66900: PPUSH
66901: CALL_OW 1
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 3
66910: RET
// export function JoinUnion ( array , element ) ; begin
66911: LD_INT 0
66913: PPUSH
// result := array union element ;
66914: LD_ADDR_VAR 0 3
66918: PUSH
66919: LD_VAR 0 1
66923: PUSH
66924: LD_VAR 0 2
66928: UNION
66929: ST_TO_ADDR
// end ;
66930: LD_VAR 0 3
66934: RET
// export function GetBehemoths ( side ) ; begin
66935: LD_INT 0
66937: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66938: LD_ADDR_VAR 0 2
66942: PUSH
66943: LD_INT 22
66945: PUSH
66946: LD_VAR 0 1
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 31
66957: PUSH
66958: LD_INT 25
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PPUSH
66969: CALL_OW 69
66973: ST_TO_ADDR
// end ;
66974: LD_VAR 0 2
66978: RET
// export function Shuffle ( array ) ; var i , index ; begin
66979: LD_INT 0
66981: PPUSH
66982: PPUSH
66983: PPUSH
// result := [ ] ;
66984: LD_ADDR_VAR 0 2
66988: PUSH
66989: EMPTY
66990: ST_TO_ADDR
// if not array then
66991: LD_VAR 0 1
66995: NOT
66996: IFFALSE 67000
// exit ;
66998: GO 67099
// Randomize ;
67000: CALL_OW 10
// for i = array downto 1 do
67004: LD_ADDR_VAR 0 3
67008: PUSH
67009: DOUBLE
67010: LD_VAR 0 1
67014: INC
67015: ST_TO_ADDR
67016: LD_INT 1
67018: PUSH
67019: FOR_DOWNTO
67020: IFFALSE 67097
// begin index := rand ( 1 , array ) ;
67022: LD_ADDR_VAR 0 4
67026: PUSH
67027: LD_INT 1
67029: PPUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: CALL_OW 12
67039: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67040: LD_ADDR_VAR 0 2
67044: PUSH
67045: LD_VAR 0 2
67049: PPUSH
67050: LD_VAR 0 2
67054: PUSH
67055: LD_INT 1
67057: PLUS
67058: PPUSH
67059: LD_VAR 0 1
67063: PUSH
67064: LD_VAR 0 4
67068: ARRAY
67069: PPUSH
67070: CALL_OW 2
67074: ST_TO_ADDR
// array := Delete ( array , index ) ;
67075: LD_ADDR_VAR 0 1
67079: PUSH
67080: LD_VAR 0 1
67084: PPUSH
67085: LD_VAR 0 4
67089: PPUSH
67090: CALL_OW 3
67094: ST_TO_ADDR
// end ;
67095: GO 67019
67097: POP
67098: POP
// end ;
67099: LD_VAR 0 2
67103: RET
// export function GetBaseMaterials ( base ) ; begin
67104: LD_INT 0
67106: PPUSH
// result := [ 0 , 0 , 0 ] ;
67107: LD_ADDR_VAR 0 2
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// if not base then
67126: LD_VAR 0 1
67130: NOT
67131: IFFALSE 67135
// exit ;
67133: GO 67184
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67135: LD_ADDR_VAR 0 2
67139: PUSH
67140: LD_VAR 0 1
67144: PPUSH
67145: LD_INT 1
67147: PPUSH
67148: CALL_OW 275
67152: PUSH
67153: LD_VAR 0 1
67157: PPUSH
67158: LD_INT 2
67160: PPUSH
67161: CALL_OW 275
67165: PUSH
67166: LD_VAR 0 1
67170: PPUSH
67171: LD_INT 3
67173: PPUSH
67174: CALL_OW 275
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: ST_TO_ADDR
// end ;
67184: LD_VAR 0 2
67188: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67189: LD_INT 0
67191: PPUSH
67192: PPUSH
// result := array ;
67193: LD_ADDR_VAR 0 3
67197: PUSH
67198: LD_VAR 0 1
67202: ST_TO_ADDR
// if size >= result then
67203: LD_VAR 0 2
67207: PUSH
67208: LD_VAR 0 3
67212: GREATEREQUAL
67213: IFFALSE 67217
// exit ;
67215: GO 67267
// if size then
67217: LD_VAR 0 2
67221: IFFALSE 67267
// for i := array downto size do
67223: LD_ADDR_VAR 0 4
67227: PUSH
67228: DOUBLE
67229: LD_VAR 0 1
67233: INC
67234: ST_TO_ADDR
67235: LD_VAR 0 2
67239: PUSH
67240: FOR_DOWNTO
67241: IFFALSE 67265
// result := Delete ( result , result ) ;
67243: LD_ADDR_VAR 0 3
67247: PUSH
67248: LD_VAR 0 3
67252: PPUSH
67253: LD_VAR 0 3
67257: PPUSH
67258: CALL_OW 3
67262: ST_TO_ADDR
67263: GO 67240
67265: POP
67266: POP
// end ;
67267: LD_VAR 0 3
67271: RET
// export function ComExit ( unit ) ; var tmp ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
// if not IsInUnit ( unit ) then
67276: LD_VAR 0 1
67280: PPUSH
67281: CALL_OW 310
67285: NOT
67286: IFFALSE 67290
// exit ;
67288: GO 67350
// tmp := IsInUnit ( unit ) ;
67290: LD_ADDR_VAR 0 3
67294: PUSH
67295: LD_VAR 0 1
67299: PPUSH
67300: CALL_OW 310
67304: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67305: LD_VAR 0 3
67309: PPUSH
67310: CALL_OW 247
67314: PUSH
67315: LD_INT 2
67317: EQUAL
67318: IFFALSE 67331
// ComExitVehicle ( unit ) else
67320: LD_VAR 0 1
67324: PPUSH
67325: CALL_OW 121
67329: GO 67340
// ComExitBuilding ( unit ) ;
67331: LD_VAR 0 1
67335: PPUSH
67336: CALL_OW 122
// result := tmp ;
67340: LD_ADDR_VAR 0 2
67344: PUSH
67345: LD_VAR 0 3
67349: ST_TO_ADDR
// end ;
67350: LD_VAR 0 2
67354: RET
// export function ComExitAll ( units ) ; var i ; begin
67355: LD_INT 0
67357: PPUSH
67358: PPUSH
// if not units then
67359: LD_VAR 0 1
67363: NOT
67364: IFFALSE 67368
// exit ;
67366: GO 67394
// for i in units do
67368: LD_ADDR_VAR 0 3
67372: PUSH
67373: LD_VAR 0 1
67377: PUSH
67378: FOR_IN
67379: IFFALSE 67392
// ComExit ( i ) ;
67381: LD_VAR 0 3
67385: PPUSH
67386: CALL 67272 0 1
67390: GO 67378
67392: POP
67393: POP
// end ;
67394: LD_VAR 0 2
67398: RET
// export function ResetHc ; begin
67399: LD_INT 0
67401: PPUSH
// InitHc ;
67402: CALL_OW 19
// hc_importance := 0 ;
67406: LD_ADDR_OWVAR 32
67410: PUSH
67411: LD_INT 0
67413: ST_TO_ADDR
// end ;
67414: LD_VAR 0 1
67418: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67419: LD_INT 0
67421: PPUSH
67422: PPUSH
67423: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67424: LD_ADDR_VAR 0 6
67428: PUSH
67429: LD_VAR 0 1
67433: PUSH
67434: LD_VAR 0 3
67438: PLUS
67439: PUSH
67440: LD_INT 2
67442: DIV
67443: ST_TO_ADDR
// if _x < 0 then
67444: LD_VAR 0 6
67448: PUSH
67449: LD_INT 0
67451: LESS
67452: IFFALSE 67469
// _x := _x * - 1 ;
67454: LD_ADDR_VAR 0 6
67458: PUSH
67459: LD_VAR 0 6
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: MUL
67468: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67469: LD_ADDR_VAR 0 7
67473: PUSH
67474: LD_VAR 0 2
67478: PUSH
67479: LD_VAR 0 4
67483: PLUS
67484: PUSH
67485: LD_INT 2
67487: DIV
67488: ST_TO_ADDR
// if _y < 0 then
67489: LD_VAR 0 7
67493: PUSH
67494: LD_INT 0
67496: LESS
67497: IFFALSE 67514
// _y := _y * - 1 ;
67499: LD_ADDR_VAR 0 7
67503: PUSH
67504: LD_VAR 0 7
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: MUL
67513: ST_TO_ADDR
// result := [ _x , _y ] ;
67514: LD_ADDR_VAR 0 5
67518: PUSH
67519: LD_VAR 0 6
67523: PUSH
67524: LD_VAR 0 7
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: ST_TO_ADDR
// end ;
67533: LD_VAR 0 5
67537: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
67542: PPUSH
67543: PPUSH
// task := GetTaskList ( unit ) ;
67544: LD_ADDR_VAR 0 7
67548: PUSH
67549: LD_VAR 0 1
67553: PPUSH
67554: CALL_OW 437
67558: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67559: LD_VAR 0 7
67563: NOT
67564: PUSH
67565: LD_VAR 0 1
67569: PPUSH
67570: LD_VAR 0 2
67574: PPUSH
67575: CALL_OW 308
67579: NOT
67580: AND
67581: IFFALSE 67585
// exit ;
67583: GO 67703
// if IsInArea ( unit , area ) then
67585: LD_VAR 0 1
67589: PPUSH
67590: LD_VAR 0 2
67594: PPUSH
67595: CALL_OW 308
67599: IFFALSE 67617
// begin ComMoveToArea ( unit , goAway ) ;
67601: LD_VAR 0 1
67605: PPUSH
67606: LD_VAR 0 3
67610: PPUSH
67611: CALL_OW 113
// exit ;
67615: GO 67703
// end ; if task [ 1 ] [ 1 ] <> M then
67617: LD_VAR 0 7
67621: PUSH
67622: LD_INT 1
67624: ARRAY
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PUSH
67630: LD_STRING M
67632: NONEQUAL
67633: IFFALSE 67637
// exit ;
67635: GO 67703
// x := task [ 1 ] [ 2 ] ;
67637: LD_ADDR_VAR 0 5
67641: PUSH
67642: LD_VAR 0 7
67646: PUSH
67647: LD_INT 1
67649: ARRAY
67650: PUSH
67651: LD_INT 2
67653: ARRAY
67654: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67655: LD_ADDR_VAR 0 6
67659: PUSH
67660: LD_VAR 0 7
67664: PUSH
67665: LD_INT 1
67667: ARRAY
67668: PUSH
67669: LD_INT 3
67671: ARRAY
67672: ST_TO_ADDR
// if InArea ( x , y , area ) then
67673: LD_VAR 0 5
67677: PPUSH
67678: LD_VAR 0 6
67682: PPUSH
67683: LD_VAR 0 2
67687: PPUSH
67688: CALL_OW 309
67692: IFFALSE 67703
// ComStop ( unit ) ;
67694: LD_VAR 0 1
67698: PPUSH
67699: CALL_OW 141
// end ;
67703: LD_VAR 0 4
67707: RET
// export function Abs ( value ) ; begin
67708: LD_INT 0
67710: PPUSH
// result := value ;
67711: LD_ADDR_VAR 0 2
67715: PUSH
67716: LD_VAR 0 1
67720: ST_TO_ADDR
// if value < 0 then
67721: LD_VAR 0 1
67725: PUSH
67726: LD_INT 0
67728: LESS
67729: IFFALSE 67746
// result := value * - 1 ;
67731: LD_ADDR_VAR 0 2
67735: PUSH
67736: LD_VAR 0 1
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: MUL
67745: ST_TO_ADDR
// end ;
67746: LD_VAR 0 2
67750: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67751: LD_INT 0
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
67758: PPUSH
67759: PPUSH
67760: PPUSH
// if not unit or not building then
67761: LD_VAR 0 1
67765: NOT
67766: PUSH
67767: LD_VAR 0 2
67771: NOT
67772: OR
67773: IFFALSE 67777
// exit ;
67775: GO 68003
// x := GetX ( building ) ;
67777: LD_ADDR_VAR 0 4
67781: PUSH
67782: LD_VAR 0 2
67786: PPUSH
67787: CALL_OW 250
67791: ST_TO_ADDR
// y := GetY ( building ) ;
67792: LD_ADDR_VAR 0 6
67796: PUSH
67797: LD_VAR 0 2
67801: PPUSH
67802: CALL_OW 251
67806: ST_TO_ADDR
// d := GetDir ( building ) ;
67807: LD_ADDR_VAR 0 8
67811: PUSH
67812: LD_VAR 0 2
67816: PPUSH
67817: CALL_OW 254
67821: ST_TO_ADDR
// r := 4 ;
67822: LD_ADDR_VAR 0 9
67826: PUSH
67827: LD_INT 4
67829: ST_TO_ADDR
// for i := 1 to 5 do
67830: LD_ADDR_VAR 0 10
67834: PUSH
67835: DOUBLE
67836: LD_INT 1
67838: DEC
67839: ST_TO_ADDR
67840: LD_INT 5
67842: PUSH
67843: FOR_TO
67844: IFFALSE 68001
// begin _x := ShiftX ( x , d , r + i ) ;
67846: LD_ADDR_VAR 0 5
67850: PUSH
67851: LD_VAR 0 4
67855: PPUSH
67856: LD_VAR 0 8
67860: PPUSH
67861: LD_VAR 0 9
67865: PUSH
67866: LD_VAR 0 10
67870: PLUS
67871: PPUSH
67872: CALL_OW 272
67876: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67877: LD_ADDR_VAR 0 7
67881: PUSH
67882: LD_VAR 0 6
67886: PPUSH
67887: LD_VAR 0 8
67891: PPUSH
67892: LD_VAR 0 9
67896: PUSH
67897: LD_VAR 0 10
67901: PLUS
67902: PPUSH
67903: CALL_OW 273
67907: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67908: LD_VAR 0 5
67912: PPUSH
67913: LD_VAR 0 7
67917: PPUSH
67918: CALL_OW 488
67922: PUSH
67923: LD_VAR 0 5
67927: PPUSH
67928: LD_VAR 0 7
67932: PPUSH
67933: CALL_OW 428
67937: PPUSH
67938: CALL_OW 247
67942: PUSH
67943: LD_INT 3
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: IN
67953: NOT
67954: AND
67955: IFFALSE 67999
// begin ComMoveXY ( unit , _x , _y ) ;
67957: LD_VAR 0 1
67961: PPUSH
67962: LD_VAR 0 5
67966: PPUSH
67967: LD_VAR 0 7
67971: PPUSH
67972: CALL_OW 111
// result := [ _x , _y ] ;
67976: LD_ADDR_VAR 0 3
67980: PUSH
67981: LD_VAR 0 5
67985: PUSH
67986: LD_VAR 0 7
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: ST_TO_ADDR
// exit ;
67995: POP
67996: POP
67997: GO 68003
// end ; end ;
67999: GO 67843
68001: POP
68002: POP
// end ;
68003: LD_VAR 0 3
68007: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
// result := 0 ;
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_INT 0
68020: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68021: LD_VAR 0 1
68025: PUSH
68026: LD_INT 0
68028: LESS
68029: PUSH
68030: LD_VAR 0 1
68034: PUSH
68035: LD_INT 8
68037: GREATER
68038: OR
68039: PUSH
68040: LD_VAR 0 2
68044: PUSH
68045: LD_INT 0
68047: LESS
68048: OR
68049: PUSH
68050: LD_VAR 0 2
68054: PUSH
68055: LD_INT 8
68057: GREATER
68058: OR
68059: IFFALSE 68063
// exit ;
68061: GO 68138
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_INT 22
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PPUSH
68080: CALL_OW 69
68084: PUSH
68085: FOR_IN
68086: IFFALSE 68136
// begin un := UnitShoot ( i ) ;
68088: LD_ADDR_VAR 0 5
68092: PUSH
68093: LD_VAR 0 4
68097: PPUSH
68098: CALL_OW 504
68102: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68103: LD_VAR 0 5
68107: PPUSH
68108: CALL_OW 255
68112: PUSH
68113: LD_VAR 0 1
68117: EQUAL
68118: IFFALSE 68134
// begin result := un ;
68120: LD_ADDR_VAR 0 3
68124: PUSH
68125: LD_VAR 0 5
68129: ST_TO_ADDR
// exit ;
68130: POP
68131: POP
68132: GO 68138
// end ; end ;
68134: GO 68085
68136: POP
68137: POP
// end ;
68138: LD_VAR 0 3
68142: RET
// export function GetCargoBay ( units ) ; begin
68143: LD_INT 0
68145: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68146: LD_ADDR_VAR 0 2
68150: PUSH
68151: LD_VAR 0 1
68155: PPUSH
68156: LD_INT 2
68158: PUSH
68159: LD_INT 34
68161: PUSH
68162: LD_INT 12
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 34
68171: PUSH
68172: LD_INT 51
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 34
68181: PUSH
68182: LD_INT 32
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 34
68191: PUSH
68192: LD_INT 89
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: PPUSH
68206: CALL_OW 72
68210: ST_TO_ADDR
// end ;
68211: LD_VAR 0 2
68215: RET
// export function Negate ( value ) ; begin
68216: LD_INT 0
68218: PPUSH
// result := not value ;
68219: LD_ADDR_VAR 0 2
68223: PUSH
68224: LD_VAR 0 1
68228: NOT
68229: ST_TO_ADDR
// end ;
68230: LD_VAR 0 2
68234: RET
// export function Inc ( value ) ; begin
68235: LD_INT 0
68237: PPUSH
// result := value + 1 ;
68238: LD_ADDR_VAR 0 2
68242: PUSH
68243: LD_VAR 0 1
68247: PUSH
68248: LD_INT 1
68250: PLUS
68251: ST_TO_ADDR
// end ;
68252: LD_VAR 0 2
68256: RET
// export function Dec ( value ) ; begin
68257: LD_INT 0
68259: PPUSH
// result := value - 1 ;
68260: LD_ADDR_VAR 0 2
68264: PUSH
68265: LD_VAR 0 1
68269: PUSH
68270: LD_INT 1
68272: MINUS
68273: ST_TO_ADDR
// end ;
68274: LD_VAR 0 2
68278: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
68286: PPUSH
68287: PPUSH
68288: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68289: LD_VAR 0 1
68293: PPUSH
68294: LD_VAR 0 2
68298: PPUSH
68299: CALL_OW 488
68303: NOT
68304: PUSH
68305: LD_VAR 0 3
68309: PPUSH
68310: LD_VAR 0 4
68314: PPUSH
68315: CALL_OW 488
68319: NOT
68320: OR
68321: IFFALSE 68334
// begin result := - 1 ;
68323: LD_ADDR_VAR 0 5
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: ST_TO_ADDR
// exit ;
68332: GO 68569
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68334: LD_ADDR_VAR 0 12
68338: PUSH
68339: LD_VAR 0 1
68343: PPUSH
68344: LD_VAR 0 2
68348: PPUSH
68349: LD_VAR 0 3
68353: PPUSH
68354: LD_VAR 0 4
68358: PPUSH
68359: CALL 67419 0 4
68363: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68364: LD_ADDR_VAR 0 11
68368: PUSH
68369: LD_VAR 0 1
68373: PPUSH
68374: LD_VAR 0 2
68378: PPUSH
68379: LD_VAR 0 12
68383: PUSH
68384: LD_INT 1
68386: ARRAY
68387: PPUSH
68388: LD_VAR 0 12
68392: PUSH
68393: LD_INT 2
68395: ARRAY
68396: PPUSH
68397: CALL_OW 298
68401: ST_TO_ADDR
// distance := 9999 ;
68402: LD_ADDR_VAR 0 10
68406: PUSH
68407: LD_INT 9999
68409: ST_TO_ADDR
// for i := 0 to 5 do
68410: LD_ADDR_VAR 0 6
68414: PUSH
68415: DOUBLE
68416: LD_INT 0
68418: DEC
68419: ST_TO_ADDR
68420: LD_INT 5
68422: PUSH
68423: FOR_TO
68424: IFFALSE 68567
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68426: LD_ADDR_VAR 0 7
68430: PUSH
68431: LD_VAR 0 1
68435: PPUSH
68436: LD_VAR 0 6
68440: PPUSH
68441: LD_VAR 0 11
68445: PPUSH
68446: CALL_OW 272
68450: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68451: LD_ADDR_VAR 0 8
68455: PUSH
68456: LD_VAR 0 2
68460: PPUSH
68461: LD_VAR 0 6
68465: PPUSH
68466: LD_VAR 0 11
68470: PPUSH
68471: CALL_OW 273
68475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68476: LD_VAR 0 7
68480: PPUSH
68481: LD_VAR 0 8
68485: PPUSH
68486: CALL_OW 488
68490: NOT
68491: IFFALSE 68495
// continue ;
68493: GO 68423
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68495: LD_ADDR_VAR 0 9
68499: PUSH
68500: LD_VAR 0 12
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PPUSH
68509: LD_VAR 0 12
68513: PUSH
68514: LD_INT 2
68516: ARRAY
68517: PPUSH
68518: LD_VAR 0 7
68522: PPUSH
68523: LD_VAR 0 8
68527: PPUSH
68528: CALL_OW 298
68532: ST_TO_ADDR
// if tmp < distance then
68533: LD_VAR 0 9
68537: PUSH
68538: LD_VAR 0 10
68542: LESS
68543: IFFALSE 68565
// begin result := i ;
68545: LD_ADDR_VAR 0 5
68549: PUSH
68550: LD_VAR 0 6
68554: ST_TO_ADDR
// distance := tmp ;
68555: LD_ADDR_VAR 0 10
68559: PUSH
68560: LD_VAR 0 9
68564: ST_TO_ADDR
// end ; end ;
68565: GO 68423
68567: POP
68568: POP
// end ;
68569: LD_VAR 0 5
68573: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68574: LD_INT 0
68576: PPUSH
68577: PPUSH
// if not driver or not IsInUnit ( driver ) then
68578: LD_VAR 0 1
68582: NOT
68583: PUSH
68584: LD_VAR 0 1
68588: PPUSH
68589: CALL_OW 310
68593: NOT
68594: OR
68595: IFFALSE 68599
// exit ;
68597: GO 68689
// vehicle := IsInUnit ( driver ) ;
68599: LD_ADDR_VAR 0 3
68603: PUSH
68604: LD_VAR 0 1
68608: PPUSH
68609: CALL_OW 310
68613: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_STRING \
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: PUSH
68649: LD_STRING E
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: LD_VAR 0 3
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PPUSH
68685: CALL_OW 446
// end ;
68689: LD_VAR 0 2
68693: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68694: LD_INT 0
68696: PPUSH
68697: PPUSH
// if not driver or not IsInUnit ( driver ) then
68698: LD_VAR 0 1
68702: NOT
68703: PUSH
68704: LD_VAR 0 1
68708: PPUSH
68709: CALL_OW 310
68713: NOT
68714: OR
68715: IFFALSE 68719
// exit ;
68717: GO 68809
// vehicle := IsInUnit ( driver ) ;
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: LD_VAR 0 1
68728: PPUSH
68729: CALL_OW 310
68733: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68734: LD_VAR 0 1
68738: PPUSH
68739: LD_STRING \
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: PUSH
68769: LD_STRING E
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: LD_VAR 0 3
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PPUSH
68805: CALL_OW 447
// end ;
68809: LD_VAR 0 2
68813: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68814: LD_INT 0
68816: PPUSH
68817: PPUSH
68818: PPUSH
// tmp := [ ] ;
68819: LD_ADDR_VAR 0 5
68823: PUSH
68824: EMPTY
68825: ST_TO_ADDR
// for i in units do
68826: LD_ADDR_VAR 0 4
68830: PUSH
68831: LD_VAR 0 1
68835: PUSH
68836: FOR_IN
68837: IFFALSE 68875
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68839: LD_ADDR_VAR 0 5
68843: PUSH
68844: LD_VAR 0 5
68848: PPUSH
68849: LD_VAR 0 5
68853: PUSH
68854: LD_INT 1
68856: PLUS
68857: PPUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: CALL_OW 256
68867: PPUSH
68868: CALL_OW 2
68872: ST_TO_ADDR
68873: GO 68836
68875: POP
68876: POP
// if not tmp then
68877: LD_VAR 0 5
68881: NOT
68882: IFFALSE 68886
// exit ;
68884: GO 68934
// if asc then
68886: LD_VAR 0 2
68890: IFFALSE 68914
// result := SortListByListAsc ( units , tmp ) else
68892: LD_ADDR_VAR 0 3
68896: PUSH
68897: LD_VAR 0 1
68901: PPUSH
68902: LD_VAR 0 5
68906: PPUSH
68907: CALL_OW 76
68911: ST_TO_ADDR
68912: GO 68934
// result := SortListByListDesc ( units , tmp ) ;
68914: LD_ADDR_VAR 0 3
68918: PUSH
68919: LD_VAR 0 1
68923: PPUSH
68924: LD_VAR 0 5
68928: PPUSH
68929: CALL_OW 77
68933: ST_TO_ADDR
// end ;
68934: LD_VAR 0 3
68938: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68939: LD_INT 0
68941: PPUSH
68942: PPUSH
// task := GetTaskList ( mech ) ;
68943: LD_ADDR_VAR 0 4
68947: PUSH
68948: LD_VAR 0 1
68952: PPUSH
68953: CALL_OW 437
68957: ST_TO_ADDR
// if not task then
68958: LD_VAR 0 4
68962: NOT
68963: IFFALSE 68967
// exit ;
68965: GO 69009
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68967: LD_ADDR_VAR 0 3
68971: PUSH
68972: LD_VAR 0 4
68976: PUSH
68977: LD_INT 1
68979: ARRAY
68980: PUSH
68981: LD_INT 1
68983: ARRAY
68984: PUSH
68985: LD_STRING r
68987: EQUAL
68988: PUSH
68989: LD_VAR 0 4
68993: PUSH
68994: LD_INT 1
68996: ARRAY
68997: PUSH
68998: LD_INT 4
69000: ARRAY
69001: PUSH
69002: LD_VAR 0 2
69006: EQUAL
69007: AND
69008: ST_TO_ADDR
// end ;
69009: LD_VAR 0 3
69013: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69014: LD_INT 0
69016: PPUSH
// SetDir ( unit , d ) ;
69017: LD_VAR 0 1
69021: PPUSH
69022: LD_VAR 0 4
69026: PPUSH
69027: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_VAR 0 2
69040: PPUSH
69041: LD_VAR 0 3
69045: PPUSH
69046: LD_VAR 0 5
69050: PPUSH
69051: CALL_OW 48
// end ;
69055: LD_VAR 0 6
69059: RET
// export function ToNaturalNumber ( number ) ; begin
69060: LD_INT 0
69062: PPUSH
// result := number div 1 ;
69063: LD_ADDR_VAR 0 2
69067: PUSH
69068: LD_VAR 0 1
69072: PUSH
69073: LD_INT 1
69075: DIV
69076: ST_TO_ADDR
// if number < 0 then
69077: LD_VAR 0 1
69081: PUSH
69082: LD_INT 0
69084: LESS
69085: IFFALSE 69095
// result := 0 ;
69087: LD_ADDR_VAR 0 2
69091: PUSH
69092: LD_INT 0
69094: ST_TO_ADDR
// end ;
69095: LD_VAR 0 2
69099: RET
// export function SortByClass ( units , class ) ; var un ; begin
69100: LD_INT 0
69102: PPUSH
69103: PPUSH
// if not units or not class then
69104: LD_VAR 0 1
69108: NOT
69109: PUSH
69110: LD_VAR 0 2
69114: NOT
69115: OR
69116: IFFALSE 69120
// exit ;
69118: GO 69215
// result := [ ] ;
69120: LD_ADDR_VAR 0 3
69124: PUSH
69125: EMPTY
69126: ST_TO_ADDR
// for un in units do
69127: LD_ADDR_VAR 0 4
69131: PUSH
69132: LD_VAR 0 1
69136: PUSH
69137: FOR_IN
69138: IFFALSE 69213
// if GetClass ( un ) = class then
69140: LD_VAR 0 4
69144: PPUSH
69145: CALL_OW 257
69149: PUSH
69150: LD_VAR 0 2
69154: EQUAL
69155: IFFALSE 69182
// result := Insert ( result , 1 , un ) else
69157: LD_ADDR_VAR 0 3
69161: PUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: LD_INT 1
69169: PPUSH
69170: LD_VAR 0 4
69174: PPUSH
69175: CALL_OW 2
69179: ST_TO_ADDR
69180: GO 69211
// result := Replace ( result , result + 1 , un ) ;
69182: LD_ADDR_VAR 0 3
69186: PUSH
69187: LD_VAR 0 3
69191: PPUSH
69192: LD_VAR 0 3
69196: PUSH
69197: LD_INT 1
69199: PLUS
69200: PPUSH
69201: LD_VAR 0 4
69205: PPUSH
69206: CALL_OW 1
69210: ST_TO_ADDR
69211: GO 69137
69213: POP
69214: POP
// end ;
69215: LD_VAR 0 3
69219: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
69225: PPUSH
69226: PPUSH
69227: PPUSH
69228: PPUSH
// result := [ ] ;
69229: LD_ADDR_VAR 0 4
69233: PUSH
69234: EMPTY
69235: ST_TO_ADDR
// if x - r < 0 then
69236: LD_VAR 0 1
69240: PUSH
69241: LD_VAR 0 3
69245: MINUS
69246: PUSH
69247: LD_INT 0
69249: LESS
69250: IFFALSE 69262
// min_x := 0 else
69252: LD_ADDR_VAR 0 8
69256: PUSH
69257: LD_INT 0
69259: ST_TO_ADDR
69260: GO 69278
// min_x := x - r ;
69262: LD_ADDR_VAR 0 8
69266: PUSH
69267: LD_VAR 0 1
69271: PUSH
69272: LD_VAR 0 3
69276: MINUS
69277: ST_TO_ADDR
// if y - r < 0 then
69278: LD_VAR 0 2
69282: PUSH
69283: LD_VAR 0 3
69287: MINUS
69288: PUSH
69289: LD_INT 0
69291: LESS
69292: IFFALSE 69304
// min_y := 0 else
69294: LD_ADDR_VAR 0 7
69298: PUSH
69299: LD_INT 0
69301: ST_TO_ADDR
69302: GO 69320
// min_y := y - r ;
69304: LD_ADDR_VAR 0 7
69308: PUSH
69309: LD_VAR 0 2
69313: PUSH
69314: LD_VAR 0 3
69318: MINUS
69319: ST_TO_ADDR
// max_x := x + r ;
69320: LD_ADDR_VAR 0 9
69324: PUSH
69325: LD_VAR 0 1
69329: PUSH
69330: LD_VAR 0 3
69334: PLUS
69335: ST_TO_ADDR
// max_y := y + r ;
69336: LD_ADDR_VAR 0 10
69340: PUSH
69341: LD_VAR 0 2
69345: PUSH
69346: LD_VAR 0 3
69350: PLUS
69351: ST_TO_ADDR
// for _x = min_x to max_x do
69352: LD_ADDR_VAR 0 5
69356: PUSH
69357: DOUBLE
69358: LD_VAR 0 8
69362: DEC
69363: ST_TO_ADDR
69364: LD_VAR 0 9
69368: PUSH
69369: FOR_TO
69370: IFFALSE 69471
// for _y = min_y to max_y do
69372: LD_ADDR_VAR 0 6
69376: PUSH
69377: DOUBLE
69378: LD_VAR 0 7
69382: DEC
69383: ST_TO_ADDR
69384: LD_VAR 0 10
69388: PUSH
69389: FOR_TO
69390: IFFALSE 69467
// begin if not ValidHex ( _x , _y ) then
69392: LD_VAR 0 5
69396: PPUSH
69397: LD_VAR 0 6
69401: PPUSH
69402: CALL_OW 488
69406: NOT
69407: IFFALSE 69411
// continue ;
69409: GO 69389
// if GetResourceTypeXY ( _x , _y ) then
69411: LD_VAR 0 5
69415: PPUSH
69416: LD_VAR 0 6
69420: PPUSH
69421: CALL_OW 283
69425: IFFALSE 69465
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69427: LD_ADDR_VAR 0 4
69431: PUSH
69432: LD_VAR 0 4
69436: PPUSH
69437: LD_VAR 0 4
69441: PUSH
69442: LD_INT 1
69444: PLUS
69445: PPUSH
69446: LD_VAR 0 5
69450: PUSH
69451: LD_VAR 0 6
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PPUSH
69460: CALL_OW 1
69464: ST_TO_ADDR
// end ;
69465: GO 69389
69467: POP
69468: POP
69469: GO 69369
69471: POP
69472: POP
// end ;
69473: LD_VAR 0 4
69477: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69478: LD_INT 0
69480: PPUSH
69481: PPUSH
69482: PPUSH
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
// if not units then
69488: LD_VAR 0 1
69492: NOT
69493: IFFALSE 69497
// exit ;
69495: GO 70021
// result := UnitFilter ( units , [ f_ok ] ) ;
69497: LD_ADDR_VAR 0 3
69501: PUSH
69502: LD_VAR 0 1
69506: PPUSH
69507: LD_INT 50
69509: PUSH
69510: EMPTY
69511: LIST
69512: PPUSH
69513: CALL_OW 72
69517: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69518: LD_ADDR_VAR 0 8
69522: PUSH
69523: LD_VAR 0 1
69527: PUSH
69528: LD_INT 1
69530: ARRAY
69531: PPUSH
69532: CALL_OW 255
69536: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69537: LD_ADDR_VAR 0 10
69541: PUSH
69542: LD_INT 29
69544: PUSH
69545: LD_INT 91
69547: PUSH
69548: LD_INT 49
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: ST_TO_ADDR
// if not result then
69556: LD_VAR 0 3
69560: NOT
69561: IFFALSE 69565
// exit ;
69563: GO 70021
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69565: LD_ADDR_VAR 0 5
69569: PUSH
69570: LD_INT 81
69572: PUSH
69573: LD_VAR 0 8
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PPUSH
69582: CALL_OW 69
69586: ST_TO_ADDR
// for i in result do
69587: LD_ADDR_VAR 0 4
69591: PUSH
69592: LD_VAR 0 3
69596: PUSH
69597: FOR_IN
69598: IFFALSE 70019
// begin tag := GetTag ( i ) + 1 ;
69600: LD_ADDR_VAR 0 9
69604: PUSH
69605: LD_VAR 0 4
69609: PPUSH
69610: CALL_OW 110
69614: PUSH
69615: LD_INT 1
69617: PLUS
69618: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69619: LD_ADDR_VAR 0 7
69623: PUSH
69624: LD_VAR 0 4
69628: PPUSH
69629: CALL_OW 250
69633: PPUSH
69634: LD_VAR 0 4
69638: PPUSH
69639: CALL_OW 251
69643: PPUSH
69644: LD_INT 6
69646: PPUSH
69647: CALL 69220 0 3
69651: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69652: LD_VAR 0 4
69656: PPUSH
69657: CALL_OW 247
69661: PUSH
69662: LD_INT 2
69664: EQUAL
69665: PUSH
69666: LD_VAR 0 7
69670: AND
69671: PUSH
69672: LD_VAR 0 4
69676: PPUSH
69677: CALL_OW 264
69681: PUSH
69682: LD_VAR 0 10
69686: IN
69687: NOT
69688: AND
69689: IFFALSE 69728
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69691: LD_VAR 0 4
69695: PPUSH
69696: LD_VAR 0 7
69700: PUSH
69701: LD_INT 1
69703: ARRAY
69704: PUSH
69705: LD_INT 1
69707: ARRAY
69708: PPUSH
69709: LD_VAR 0 7
69713: PUSH
69714: LD_INT 1
69716: ARRAY
69717: PUSH
69718: LD_INT 2
69720: ARRAY
69721: PPUSH
69722: CALL_OW 116
69726: GO 70017
// if path > tag then
69728: LD_VAR 0 2
69732: PUSH
69733: LD_VAR 0 9
69737: GREATER
69738: IFFALSE 69946
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69740: LD_ADDR_VAR 0 6
69744: PUSH
69745: LD_VAR 0 5
69749: PPUSH
69750: LD_INT 91
69752: PUSH
69753: LD_VAR 0 4
69757: PUSH
69758: LD_INT 8
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: LIST
69765: PPUSH
69766: CALL_OW 72
69770: ST_TO_ADDR
// if nearEnemy then
69771: LD_VAR 0 6
69775: IFFALSE 69844
// begin if GetWeapon ( i ) = ru_time_lapser then
69777: LD_VAR 0 4
69781: PPUSH
69782: CALL_OW 264
69786: PUSH
69787: LD_INT 49
69789: EQUAL
69790: IFFALSE 69818
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69792: LD_VAR 0 4
69796: PPUSH
69797: LD_VAR 0 6
69801: PPUSH
69802: LD_VAR 0 4
69806: PPUSH
69807: CALL_OW 74
69811: PPUSH
69812: CALL_OW 112
69816: GO 69842
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69818: LD_VAR 0 4
69822: PPUSH
69823: LD_VAR 0 6
69827: PPUSH
69828: LD_VAR 0 4
69832: PPUSH
69833: CALL_OW 74
69837: PPUSH
69838: CALL_OW 115
// end else
69842: GO 69944
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69844: LD_VAR 0 4
69848: PPUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_VAR 0 9
69858: ARRAY
69859: PUSH
69860: LD_INT 1
69862: ARRAY
69863: PPUSH
69864: LD_VAR 0 2
69868: PUSH
69869: LD_VAR 0 9
69873: ARRAY
69874: PUSH
69875: LD_INT 2
69877: ARRAY
69878: PPUSH
69879: CALL_OW 297
69883: PUSH
69884: LD_INT 6
69886: GREATER
69887: IFFALSE 69930
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69889: LD_VAR 0 4
69893: PPUSH
69894: LD_VAR 0 2
69898: PUSH
69899: LD_VAR 0 9
69903: ARRAY
69904: PUSH
69905: LD_INT 1
69907: ARRAY
69908: PPUSH
69909: LD_VAR 0 2
69913: PUSH
69914: LD_VAR 0 9
69918: ARRAY
69919: PUSH
69920: LD_INT 2
69922: ARRAY
69923: PPUSH
69924: CALL_OW 114
69928: GO 69944
// SetTag ( i , tag ) ;
69930: LD_VAR 0 4
69934: PPUSH
69935: LD_VAR 0 9
69939: PPUSH
69940: CALL_OW 109
// end else
69944: GO 70017
// if enemy then
69946: LD_VAR 0 5
69950: IFFALSE 70017
// begin if GetWeapon ( i ) = ru_time_lapser then
69952: LD_VAR 0 4
69956: PPUSH
69957: CALL_OW 264
69961: PUSH
69962: LD_INT 49
69964: EQUAL
69965: IFFALSE 69993
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 5
69976: PPUSH
69977: LD_VAR 0 4
69981: PPUSH
69982: CALL_OW 74
69986: PPUSH
69987: CALL_OW 112
69991: GO 70017
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69993: LD_VAR 0 4
69997: PPUSH
69998: LD_VAR 0 5
70002: PPUSH
70003: LD_VAR 0 4
70007: PPUSH
70008: CALL_OW 74
70012: PPUSH
70013: CALL_OW 115
// end ; end ;
70017: GO 69597
70019: POP
70020: POP
// end ;
70021: LD_VAR 0 3
70025: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70026: LD_INT 0
70028: PPUSH
70029: PPUSH
70030: PPUSH
// if not unit or IsInUnit ( unit ) then
70031: LD_VAR 0 1
70035: NOT
70036: PUSH
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 310
70046: OR
70047: IFFALSE 70051
// exit ;
70049: GO 70142
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70051: LD_ADDR_VAR 0 4
70055: PUSH
70056: LD_VAR 0 1
70060: PPUSH
70061: CALL_OW 250
70065: PPUSH
70066: LD_VAR 0 2
70070: PPUSH
70071: LD_INT 1
70073: PPUSH
70074: CALL_OW 272
70078: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70079: LD_ADDR_VAR 0 5
70083: PUSH
70084: LD_VAR 0 1
70088: PPUSH
70089: CALL_OW 251
70093: PPUSH
70094: LD_VAR 0 2
70098: PPUSH
70099: LD_INT 1
70101: PPUSH
70102: CALL_OW 273
70106: ST_TO_ADDR
// if ValidHex ( x , y ) then
70107: LD_VAR 0 4
70111: PPUSH
70112: LD_VAR 0 5
70116: PPUSH
70117: CALL_OW 488
70121: IFFALSE 70142
// ComTurnXY ( unit , x , y ) ;
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_VAR 0 4
70132: PPUSH
70133: LD_VAR 0 5
70137: PPUSH
70138: CALL_OW 118
// end ;
70142: LD_VAR 0 3
70146: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70147: LD_INT 0
70149: PPUSH
70150: PPUSH
// result := false ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_INT 0
70158: ST_TO_ADDR
// if not units then
70159: LD_VAR 0 2
70163: NOT
70164: IFFALSE 70168
// exit ;
70166: GO 70213
// for i in units do
70168: LD_ADDR_VAR 0 4
70172: PUSH
70173: LD_VAR 0 2
70177: PUSH
70178: FOR_IN
70179: IFFALSE 70211
// if See ( side , i ) then
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 4
70190: PPUSH
70191: CALL_OW 292
70195: IFFALSE 70209
// begin result := true ;
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: LD_INT 1
70204: ST_TO_ADDR
// exit ;
70205: POP
70206: POP
70207: GO 70213
// end ;
70209: GO 70178
70211: POP
70212: POP
// end ;
70213: LD_VAR 0 3
70217: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70218: LD_INT 0
70220: PPUSH
70221: PPUSH
70222: PPUSH
70223: PPUSH
// if not unit or not points then
70224: LD_VAR 0 1
70228: NOT
70229: PUSH
70230: LD_VAR 0 2
70234: NOT
70235: OR
70236: IFFALSE 70240
// exit ;
70238: GO 70330
// dist := 99999 ;
70240: LD_ADDR_VAR 0 5
70244: PUSH
70245: LD_INT 99999
70247: ST_TO_ADDR
// for i in points do
70248: LD_ADDR_VAR 0 4
70252: PUSH
70253: LD_VAR 0 2
70257: PUSH
70258: FOR_IN
70259: IFFALSE 70328
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70261: LD_ADDR_VAR 0 6
70265: PUSH
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_VAR 0 4
70275: PUSH
70276: LD_INT 1
70278: ARRAY
70279: PPUSH
70280: LD_VAR 0 4
70284: PUSH
70285: LD_INT 2
70287: ARRAY
70288: PPUSH
70289: CALL_OW 297
70293: ST_TO_ADDR
// if tmpDist < dist then
70294: LD_VAR 0 6
70298: PUSH
70299: LD_VAR 0 5
70303: LESS
70304: IFFALSE 70326
// begin result := i ;
70306: LD_ADDR_VAR 0 3
70310: PUSH
70311: LD_VAR 0 4
70315: ST_TO_ADDR
// dist := tmpDist ;
70316: LD_ADDR_VAR 0 5
70320: PUSH
70321: LD_VAR 0 6
70325: ST_TO_ADDR
// end ; end ;
70326: GO 70258
70328: POP
70329: POP
// end ;
70330: LD_VAR 0 3
70334: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70335: LD_INT 0
70337: PPUSH
// uc_side := side ;
70338: LD_ADDR_OWVAR 20
70342: PUSH
70343: LD_VAR 0 1
70347: ST_TO_ADDR
// uc_nation := 3 ;
70348: LD_ADDR_OWVAR 21
70352: PUSH
70353: LD_INT 3
70355: ST_TO_ADDR
// vc_chassis := 25 ;
70356: LD_ADDR_OWVAR 37
70360: PUSH
70361: LD_INT 25
70363: ST_TO_ADDR
// vc_engine := engine_siberite ;
70364: LD_ADDR_OWVAR 39
70368: PUSH
70369: LD_INT 3
70371: ST_TO_ADDR
// vc_control := control_computer ;
70372: LD_ADDR_OWVAR 38
70376: PUSH
70377: LD_INT 3
70379: ST_TO_ADDR
// vc_weapon := 59 ;
70380: LD_ADDR_OWVAR 40
70384: PUSH
70385: LD_INT 59
70387: ST_TO_ADDR
// result := CreateVehicle ;
70388: LD_ADDR_VAR 0 5
70392: PUSH
70393: CALL_OW 45
70397: ST_TO_ADDR
// SetDir ( result , d ) ;
70398: LD_VAR 0 5
70402: PPUSH
70403: LD_VAR 0 4
70407: PPUSH
70408: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70412: LD_VAR 0 5
70416: PPUSH
70417: LD_VAR 0 2
70421: PPUSH
70422: LD_VAR 0 3
70426: PPUSH
70427: LD_INT 0
70429: PPUSH
70430: CALL_OW 48
// end ;
70434: LD_VAR 0 5
70438: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70439: LD_INT 0
70441: PPUSH
70442: PPUSH
70443: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70444: LD_ADDR_VAR 0 2
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: LD_INT 0
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70467: LD_VAR 0 1
70471: NOT
70472: PUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: CALL_OW 264
70482: PUSH
70483: LD_INT 12
70485: PUSH
70486: LD_INT 51
70488: PUSH
70489: LD_INT 32
70491: PUSH
70492: LD_INT 89
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: IN
70501: NOT
70502: OR
70503: IFFALSE 70507
// exit ;
70505: GO 70605
// for i := 1 to 3 do
70507: LD_ADDR_VAR 0 3
70511: PUSH
70512: DOUBLE
70513: LD_INT 1
70515: DEC
70516: ST_TO_ADDR
70517: LD_INT 3
70519: PUSH
70520: FOR_TO
70521: IFFALSE 70603
// begin tmp := GetCargo ( cargo , i ) ;
70523: LD_ADDR_VAR 0 4
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: LD_VAR 0 3
70537: PPUSH
70538: CALL_OW 289
70542: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70543: LD_ADDR_VAR 0 2
70547: PUSH
70548: LD_VAR 0 2
70552: PPUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: LD_VAR 0 4
70562: PPUSH
70563: CALL_OW 1
70567: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70568: LD_ADDR_VAR 0 2
70572: PUSH
70573: LD_VAR 0 2
70577: PPUSH
70578: LD_INT 4
70580: PPUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_INT 4
70588: ARRAY
70589: PUSH
70590: LD_VAR 0 4
70594: PLUS
70595: PPUSH
70596: CALL_OW 1
70600: ST_TO_ADDR
// end ;
70601: GO 70520
70603: POP
70604: POP
// end ;
70605: LD_VAR 0 2
70609: RET
// export function Length ( array ) ; begin
70610: LD_INT 0
70612: PPUSH
// result := array + 0 ;
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_VAR 0 1
70622: PUSH
70623: LD_INT 0
70625: PLUS
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 2
70631: RET
// export function PrepareArray ( array ) ; begin
70632: LD_INT 0
70634: PPUSH
// result := array diff 0 ;
70635: LD_ADDR_VAR 0 2
70639: PUSH
70640: LD_VAR 0 1
70644: PUSH
70645: LD_INT 0
70647: DIFF
70648: ST_TO_ADDR
// if not result [ 1 ] then
70649: LD_VAR 0 2
70653: PUSH
70654: LD_INT 1
70656: ARRAY
70657: NOT
70658: IFFALSE 70678
// result := Delete ( result , 1 ) ;
70660: LD_ADDR_VAR 0 2
70664: PUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: LD_INT 1
70672: PPUSH
70673: CALL_OW 3
70677: ST_TO_ADDR
// end ;
70678: LD_VAR 0 2
70682: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70683: LD_INT 0
70685: PPUSH
70686: PPUSH
70687: PPUSH
70688: PPUSH
// sibRocketRange := 25 ;
70689: LD_ADDR_VAR 0 6
70693: PUSH
70694: LD_INT 25
70696: ST_TO_ADDR
// result := false ;
70697: LD_ADDR_VAR 0 4
70701: PUSH
70702: LD_INT 0
70704: ST_TO_ADDR
// for i := 0 to 5 do
70705: LD_ADDR_VAR 0 5
70709: PUSH
70710: DOUBLE
70711: LD_INT 0
70713: DEC
70714: ST_TO_ADDR
70715: LD_INT 5
70717: PUSH
70718: FOR_TO
70719: IFFALSE 70786
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70721: LD_VAR 0 1
70725: PPUSH
70726: LD_VAR 0 5
70730: PPUSH
70731: LD_VAR 0 6
70735: PPUSH
70736: CALL_OW 272
70740: PPUSH
70741: LD_VAR 0 2
70745: PPUSH
70746: LD_VAR 0 5
70750: PPUSH
70751: LD_VAR 0 6
70755: PPUSH
70756: CALL_OW 273
70760: PPUSH
70761: LD_VAR 0 3
70765: PPUSH
70766: CALL_OW 309
70770: IFFALSE 70784
// begin result := true ;
70772: LD_ADDR_VAR 0 4
70776: PUSH
70777: LD_INT 1
70779: ST_TO_ADDR
// exit ;
70780: POP
70781: POP
70782: GO 70788
// end ;
70784: GO 70718
70786: POP
70787: POP
// end ;
70788: LD_VAR 0 4
70792: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70793: LD_INT 0
70795: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70796: LD_VAR 0 1
70800: PPUSH
70801: LD_VAR 0 2
70805: PPUSH
70806: LD_INT 0
70808: PPUSH
70809: LD_INT 0
70811: PPUSH
70812: LD_INT 1
70814: PPUSH
70815: LD_INT 0
70817: PPUSH
70818: CALL_OW 587
// end ;
70822: LD_VAR 0 3
70826: RET
// export function CenterOnNow ( unit ) ; begin
70827: LD_INT 0
70829: PPUSH
// result := IsInUnit ( unit ) ;
70830: LD_ADDR_VAR 0 2
70834: PUSH
70835: LD_VAR 0 1
70839: PPUSH
70840: CALL_OW 310
70844: ST_TO_ADDR
// if not result then
70845: LD_VAR 0 2
70849: NOT
70850: IFFALSE 70862
// result := unit ;
70852: LD_ADDR_VAR 0 2
70856: PUSH
70857: LD_VAR 0 1
70861: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70862: LD_VAR 0 1
70866: PPUSH
70867: CALL_OW 87
// end ; end_of_file
70871: LD_VAR 0 2
70875: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70876: LD_VAR 0 1
70880: PUSH
70881: LD_INT 200
70883: DOUBLE
70884: GREATEREQUAL
70885: IFFALSE 70893
70887: LD_INT 299
70889: DOUBLE
70890: LESSEQUAL
70891: IFTRUE 70895
70893: GO 70927
70895: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70896: LD_VAR 0 1
70900: PPUSH
70901: LD_VAR 0 2
70905: PPUSH
70906: LD_VAR 0 3
70910: PPUSH
70911: LD_VAR 0 4
70915: PPUSH
70916: LD_VAR 0 5
70920: PPUSH
70921: CALL 9875 0 5
70925: GO 71004
70927: LD_INT 300
70929: DOUBLE
70930: GREATEREQUAL
70931: IFFALSE 70939
70933: LD_INT 399
70935: DOUBLE
70936: LESSEQUAL
70937: IFTRUE 70941
70939: GO 71003
70941: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70942: LD_VAR 0 1
70946: PPUSH
70947: LD_VAR 0 2
70951: PPUSH
70952: LD_VAR 0 3
70956: PPUSH
70957: LD_VAR 0 4
70961: PPUSH
70962: LD_VAR 0 5
70966: PPUSH
70967: LD_VAR 0 6
70971: PPUSH
70972: LD_VAR 0 7
70976: PPUSH
70977: LD_VAR 0 8
70981: PPUSH
70982: LD_VAR 0 9
70986: PPUSH
70987: LD_VAR 0 10
70991: PPUSH
70992: LD_VAR 0 11
70996: PPUSH
70997: CALL 26291 0 11
71001: GO 71004
71003: POP
// end ;
71004: PPOPN 11
71006: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71007: LD_VAR 0 1
71011: PPUSH
71012: LD_VAR 0 2
71016: PPUSH
71017: LD_VAR 0 3
71021: PPUSH
71022: LD_VAR 0 4
71026: PPUSH
71027: LD_VAR 0 5
71031: PPUSH
71032: CALL 9611 0 5
// end ; end_of_file
71036: PPOPN 5
71038: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71039: LD_VAR 0 1
71043: PPUSH
71044: LD_VAR 0 2
71048: PPUSH
71049: LD_VAR 0 3
71053: PPUSH
71054: LD_VAR 0 4
71058: PPUSH
71059: LD_VAR 0 5
71063: PPUSH
71064: LD_VAR 0 6
71068: PPUSH
71069: CALL 13943 0 6
// end ;
71073: PPOPN 6
71075: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71076: LD_INT 0
71078: PPUSH
// begin if not units then
71079: LD_VAR 0 1
71083: NOT
71084: IFFALSE 71088
// exit ;
71086: GO 71088
// end ;
71088: PPOPN 7
71090: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71091: CALL 13847 0 0
// end ;
71095: PPOPN 1
71097: END
