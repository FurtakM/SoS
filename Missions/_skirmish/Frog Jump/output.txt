// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8849 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8296 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10922 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 7112 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10297 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10742 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38275 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 69595 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 11290 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 11168 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63098 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 11266 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 11274 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 64608 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if unit in unreachableList then
6026: LD_VAR 0 1
6030: PUSH
6031: LD_EXP 35
6035: IN
6036: IFFALSE 6054
// unreachableList := unreachableList diff unit ;
6038: LD_ADDR_EXP 35
6042: PUSH
6043: LD_EXP 35
6047: PUSH
6048: LD_VAR 0 1
6052: DIFF
6053: ST_TO_ADDR
// if ValidHex ( x , y ) then
6054: LD_VAR 0 2
6058: PPUSH
6059: LD_VAR 0 3
6063: PPUSH
6064: CALL_OW 488
6068: IFFALSE 6094
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_VAR 0 2
6079: PPUSH
6080: LD_VAR 0 3
6084: PPUSH
6085: CALL_OW 428
6089: PPUSH
6090: CALL_OW 115
// wait ( 0 0$1 ) ;
6094: LD_INT 35
6096: PPUSH
6097: CALL_OW 67
// if unit in unreachableList then
6101: LD_VAR 0 1
6105: PUSH
6106: LD_EXP 35
6110: IN
6111: IFFALSE 6123
// result := false else
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
6121: GO 6131
// result := true ;
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// end ;
6131: LD_VAR 0 4
6135: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
6136: LD_INT 0
6138: PPUSH
6139: PPUSH
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6146: LD_ADDR_VAR 0 5
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_VAR 0 2
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL_OW 69
6167: ST_TO_ADDR
// change_target_counter := 0 ;
6168: LD_ADDR_VAR 0 9
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// last_target := 0 ;
6176: LD_ADDR_VAR 0 10
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// if not enemy then
6184: LD_VAR 0 5
6188: NOT
6189: IFFALSE 6193
// exit ;
6191: GO 6398
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 300
6202: PUSH
6203: LD_VAR 0 9
6207: PUSH
6208: LD_INT 4
6210: LESS
6211: AND
6212: IFFALSE 6398
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
6214: LD_VAR 0 5
6218: PPUSH
6219: LD_INT 59
6221: PUSH
6222: EMPTY
6223: LIST
6224: PPUSH
6225: CALL_OW 72
6229: IFFALSE 6365
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6231: LD_ADDR_VAR 0 6
6235: PUSH
6236: LD_VAR 0 5
6240: PPUSH
6241: LD_INT 59
6243: PUSH
6244: EMPTY
6245: LIST
6246: PPUSH
6247: CALL_OW 72
6251: PPUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 74
6261: ST_TO_ADDR
// if ( last_target <> t ) then
6262: LD_VAR 0 10
6266: PUSH
6267: LD_VAR 0 6
6271: NONEQUAL
6272: IFFALSE 6288
// change_target_counter := change_target_counter + 1 ;
6274: LD_ADDR_VAR 0 9
6278: PUSH
6279: LD_VAR 0 9
6283: PUSH
6284: LD_INT 1
6286: PLUS
6287: ST_TO_ADDR
// last_target := t ;
6288: LD_ADDR_VAR 0 10
6292: PUSH
6293: LD_VAR 0 6
6297: ST_TO_ADDR
// x := GetX ( t ) ;
6298: LD_ADDR_VAR 0 7
6302: PUSH
6303: LD_VAR 0 6
6307: PPUSH
6308: CALL_OW 250
6312: ST_TO_ADDR
// y := GetY ( t ) ;
6313: LD_ADDR_VAR 0 8
6317: PUSH
6318: LD_VAR 0 6
6322: PPUSH
6323: CALL_OW 251
6327: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6328: LD_VAR 0 1
6332: PPUSH
6333: LD_VAR 0 7
6337: PPUSH
6338: LD_VAR 0 8
6342: PPUSH
6343: CALL 6023 0 3
6347: IFFALSE 6363
// ComAttackUnit ( unit , t ) ;
6349: LD_VAR 0 1
6353: PPUSH
6354: LD_VAR 0 6
6358: PPUSH
6359: CALL_OW 115
// end else
6363: GO 6389
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_VAR 0 5
6374: PPUSH
6375: LD_VAR 0 1
6379: PPUSH
6380: CALL_OW 74
6384: PPUSH
6385: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6389: LD_INT 10
6391: PPUSH
6392: CALL_OW 67
// end ;
6396: GO 6193
// end ;
6398: LD_VAR 0 3
6402: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
6409: PPUSH
6410: PPUSH
6411: PPUSH
6412: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6413: LD_ADDR_VAR 0 5
6417: PUSH
6418: LD_INT 22
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PPUSH
6430: CALL_OW 69
6434: ST_TO_ADDR
// target := 0 ;
6435: LD_ADDR_VAR 0 9
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// if not enemy then
6443: LD_VAR 0 5
6447: NOT
6448: IFFALSE 6452
// exit ;
6450: GO 7107
// while units do
6452: LD_VAR 0 1
6456: IFFALSE 7107
// begin wait ( 0 0$1 ) ;
6458: LD_INT 35
6460: PPUSH
6461: CALL_OW 67
// for unit in units do
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: LD_VAR 0 1
6474: PUSH
6475: FOR_IN
6476: IFFALSE 7103
// begin if not IsPlaced ( unit ) then
6478: LD_VAR 0 10
6482: PPUSH
6483: CALL_OW 305
6487: NOT
6488: IFFALSE 6508
// begin units := units diff unit ;
6490: LD_ADDR_VAR 0 1
6494: PUSH
6495: LD_VAR 0 1
6499: PUSH
6500: LD_VAR 0 10
6504: DIFF
6505: ST_TO_ADDR
// continue ;
6506: GO 6475
// end ; if not IsPlaced ( target ) then
6508: LD_VAR 0 9
6512: PPUSH
6513: CALL_OW 305
6517: NOT
6518: IFFALSE 6528
// target := 0 ;
6520: LD_ADDR_VAR 0 9
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6528: LD_VAR 0 9
6532: NOT
6533: PUSH
6534: LD_VAR 0 5
6538: PPUSH
6539: LD_INT 21
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 3
6551: PUSH
6552: LD_INT 54
6554: PUSH
6555: EMPTY
6556: LIST
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 72
6570: AND
6571: IFFALSE 6833
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6573: LD_ADDR_VAR 0 6
6577: PUSH
6578: LD_VAR 0 5
6582: PPUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 54
6598: PUSH
6599: EMPTY
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: PPUSH
6615: LD_VAR 0 10
6619: PPUSH
6620: CALL_OW 74
6624: ST_TO_ADDR
// x := GetX ( t ) ;
6625: LD_ADDR_VAR 0 7
6629: PUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: CALL_OW 250
6639: ST_TO_ADDR
// y := GetY ( t ) ;
6640: LD_ADDR_VAR 0 8
6644: PUSH
6645: LD_VAR 0 6
6649: PPUSH
6650: CALL_OW 251
6654: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6655: LD_VAR 0 10
6659: PPUSH
6660: LD_VAR 0 7
6664: PPUSH
6665: LD_VAR 0 8
6669: PPUSH
6670: CALL 6023 0 3
6674: IFFALSE 6688
// target := t else
6676: LD_ADDR_VAR 0 9
6680: PUSH
6681: LD_VAR 0 6
6685: ST_TO_ADDR
6686: GO 6833
// if UnitFilter ( enemy , [ f_occupied ] ) then
6688: LD_VAR 0 5
6692: PPUSH
6693: LD_INT 59
6695: PUSH
6696: EMPTY
6697: LIST
6698: PPUSH
6699: CALL_OW 72
6703: IFFALSE 6833
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6705: LD_ADDR_VAR 0 6
6709: PUSH
6710: LD_VAR 0 5
6714: PPUSH
6715: LD_INT 59
6717: PUSH
6718: EMPTY
6719: LIST
6720: PPUSH
6721: CALL_OW 72
6725: PPUSH
6726: LD_VAR 0 10
6730: PPUSH
6731: CALL_OW 74
6735: ST_TO_ADDR
// x := GetX ( t ) ;
6736: LD_ADDR_VAR 0 7
6740: PUSH
6741: LD_VAR 0 6
6745: PPUSH
6746: CALL_OW 250
6750: ST_TO_ADDR
// y := GetY ( t ) ;
6751: LD_ADDR_VAR 0 8
6755: PUSH
6756: LD_VAR 0 6
6760: PPUSH
6761: CALL_OW 251
6765: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6766: LD_VAR 0 10
6770: PPUSH
6771: LD_VAR 0 7
6775: PPUSH
6776: LD_VAR 0 8
6780: PPUSH
6781: CALL 6023 0 3
6785: IFFALSE 6799
// target := t else
6787: LD_ADDR_VAR 0 9
6791: PUSH
6792: LD_VAR 0 6
6796: ST_TO_ADDR
6797: GO 6833
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6799: LD_VAR 0 10
6803: PPUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 6
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PPUSH
6814: CALL_OW 69
6818: PPUSH
6819: LD_VAR 0 10
6823: PPUSH
6824: CALL_OW 74
6828: PPUSH
6829: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6833: LD_VAR 0 9
6837: NOT
6838: PUSH
6839: LD_VAR 0 10
6843: PPUSH
6844: LD_VAR 0 9
6848: PPUSH
6849: CALL_OW 250
6853: PPUSH
6854: LD_VAR 0 9
6858: PPUSH
6859: CALL_OW 251
6863: PPUSH
6864: CALL 6023 0 3
6868: NOT
6869: OR
6870: IFFALSE 6904
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6872: LD_ADDR_VAR 0 9
6876: PUSH
6877: LD_INT 22
6879: PUSH
6880: LD_VAR 0 2
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: PPUSH
6894: LD_VAR 0 10
6898: PPUSH
6899: CALL_OW 74
6903: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6904: LD_VAR 0 9
6908: PPUSH
6909: LD_VAR 0 10
6913: PPUSH
6914: CALL_OW 296
6918: PUSH
6919: LD_INT 4
6921: LESS
6922: PUSH
6923: LD_VAR 0 10
6927: PPUSH
6928: CALL_OW 256
6932: PUSH
6933: LD_INT 600
6935: LESS
6936: AND
6937: PUSH
6938: LD_VAR 0 10
6942: PPUSH
6943: CALL_OW 256
6947: PUSH
6948: LD_INT 200
6950: LESS
6951: PUSH
6952: LD_OWVAR 3
6956: PUSH
6957: LD_VAR 0 10
6961: DIFF
6962: PPUSH
6963: LD_VAR 0 10
6967: PPUSH
6968: CALL_OW 74
6972: PPUSH
6973: CALL_OW 255
6977: PUSH
6978: LD_VAR 0 10
6982: PPUSH
6983: CALL_OW 255
6987: NONEQUAL
6988: AND
6989: OR
6990: IFFALSE 7041
// begin for i = 1 to 4 do
6992: LD_ADDR_VAR 0 4
6996: PUSH
6997: DOUBLE
6998: LD_INT 1
7000: DEC
7001: ST_TO_ADDR
7002: LD_INT 4
7004: PUSH
7005: FOR_TO
7006: IFFALSE 7037
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: CALL_OW 250
7017: PPUSH
7018: LD_VAR 0 10
7022: PPUSH
7023: CALL_OW 251
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: CALL_OW 453
7035: GO 7005
7037: POP
7038: POP
// end else
7039: GO 7101
// if GetType ( target ) <> unit_human then
7041: LD_VAR 0 9
7045: PPUSH
7046: CALL_OW 247
7050: PUSH
7051: LD_INT 1
7053: NONEQUAL
7054: IFFALSE 7072
// ComAttackUnit ( unit , target ) else
7056: LD_VAR 0 10
7060: PPUSH
7061: LD_VAR 0 9
7065: PPUSH
7066: CALL_OW 115
7070: GO 7101
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
7072: LD_VAR 0 10
7076: PPUSH
7077: LD_VAR 0 9
7081: PPUSH
7082: CALL_OW 250
7086: PPUSH
7087: LD_VAR 0 9
7091: PPUSH
7092: CALL_OW 251
7096: PPUSH
7097: CALL_OW 111
// end ;
7101: GO 6475
7103: POP
7104: POP
// end ;
7105: GO 6452
// end ; end_of_file
7107: LD_VAR 0 3
7111: RET
// export function Action ; var dial ; begin
7112: LD_INT 0
7114: PPUSH
7115: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
7116: LD_INT 192
7118: PPUSH
7119: LD_INT 1
7121: PPUSH
7122: CALL_OW 86
// InGameOn ;
7126: CALL_OW 8
// PrepareRussian ;
7130: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 6
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 1
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 3
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 25
7184: PUSH
7185: LD_INT 4
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: PUSH
7208: LD_EXP 2
7212: DIFF
7213: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
7214: LD_VAR 0 2
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PPUSH
7223: LD_INT 202
7225: PPUSH
7226: LD_INT 40
7228: PPUSH
7229: CALL_OW 111
// Wait ( 0 0$03 ) ;
7233: LD_INT 105
7235: PPUSH
7236: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7240: LD_EXP 2
7244: PPUSH
7245: LD_STRING DDav-1
7247: PPUSH
7248: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: PPUSH
7261: LD_EXP 2
7265: PPUSH
7266: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7270: LD_EXP 2
7274: PPUSH
7275: LD_VAR 0 2
7279: PUSH
7280: LD_INT 1
7282: ARRAY
7283: PPUSH
7284: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7288: LD_INT 202
7290: PPUSH
7291: LD_INT 40
7293: PPUSH
7294: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7298: LD_VAR 0 2
7302: PUSH
7303: LD_INT 1
7305: ARRAY
7306: PPUSH
7307: LD_STRING DRus-1
7309: PPUSH
7310: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7314: LD_EXP 2
7318: PPUSH
7319: LD_STRING DDav-2
7321: PPUSH
7322: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 1
7333: ARRAY
7334: PPUSH
7335: LD_STRING DRus-2
7337: PPUSH
7338: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7342: LD_EXP 2
7346: PPUSH
7347: LD_STRING DDav-3
7349: PPUSH
7350: CALL_OW 88
// InGameOff ;
7354: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7358: LD_INT 10
7360: PPUSH
7361: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7365: LD_STRING C1
7367: PPUSH
7368: CALL_OW 337
// SaveForQuickRestart ;
7372: CALL_OW 22
// end ;
7376: LD_VAR 0 1
7380: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7381: LD_INT 22
7383: PUSH
7384: LD_INT 6
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 2
7393: PUSH
7394: LD_INT 30
7396: PUSH
7397: LD_INT 6
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 30
7406: PUSH
7407: LD_INT 7
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 30
7416: PUSH
7417: LD_INT 8
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: IFFALSE 7538
7440: GO 7442
7442: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7443: LD_EXP 2
7447: PPUSH
7448: LD_STRING DDav-4
7450: PPUSH
7451: CALL_OW 88
// Wait ( 0 0$40 ) ;
7455: LD_INT 1400
7457: PPUSH
7458: CALL_OW 67
// DialogueOn ;
7462: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7466: LD_EXP 3
7470: PPUSH
7471: LD_STRING Dver-Meet-1
7473: PPUSH
7474: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7478: LD_EXP 2
7482: PPUSH
7483: LD_STRING DDav-Meet-1
7485: PPUSH
7486: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7490: LD_EXP 3
7494: PPUSH
7495: LD_STRING Dver-Meet-2
7497: PPUSH
7498: CALL_OW 94
// DialogueOff ;
7502: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7506: LD_INT 19600
7508: PUSH
7509: LD_INT 15400
7511: PUSH
7512: LD_INT 13300
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_OWVAR 67
7524: ARRAY
7525: PPUSH
7526: CALL_OW 67
// legion_attacks_active := true ;
7530: LD_ADDR_EXP 7
7534: PUSH
7535: LD_INT 1
7537: ST_TO_ADDR
// end ;
7538: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7539: LD_INT 22
7541: PUSH
7542: LD_INT 6
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 30
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: PUSH
7568: LD_OWVAR 1
7572: PUSH
7573: LD_INT 21000
7575: GREATER
7576: OR
7577: IFFALSE 7811
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 6
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 25
7605: PUSH
7606: LD_INT 1
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 25
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 25
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 4
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PUSH
7659: LD_EXP 2
7663: DIFF
7664: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7665: LD_VAR 0 1
7669: PUSH
7670: LD_INT 1
7672: ARRAY
7673: PPUSH
7674: LD_STRING DRus-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-5
7688: PPUSH
7689: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7693: LD_VAR 0 1
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PPUSH
7702: LD_STRING DRus-4
7704: PPUSH
7705: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7709: LD_EXP 2
7713: PPUSH
7714: LD_STRING DDav-6
7716: PPUSH
7717: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7721: LD_STRING C2
7723: PPUSH
7724: CALL_OW 337
// Wait ( 5 5$00 ) ;
7728: LD_INT 10500
7730: PPUSH
7731: CALL_OW 67
// DialogueOn ;
7735: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7739: LD_EXP 1
7743: PPUSH
7744: LD_STRING DBag-1
7746: PPUSH
7747: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7751: LD_EXP 2
7755: PPUSH
7756: LD_STRING DDavB-1
7758: PPUSH
7759: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING DBag-2
7770: PPUSH
7771: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7775: LD_EXP 2
7779: PPUSH
7780: LD_STRING DDavB-2
7782: PPUSH
7783: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING DBag-3
7794: PPUSH
7795: CALL_OW 94
// DialogueOff ;
7799: CALL_OW 7
// alliance_attack_active := true ;
7803: LD_ADDR_EXP 9
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// end ;
7811: PPOPN 1
7813: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7814: LD_EXP 10
7818: IFFALSE 7865
7820: GO 7822
7822: DISABLE
// begin DialogueOn ;
7823: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7827: LD_EXP 10
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PPUSH
7836: LD_EXP 10
7840: PUSH
7841: LD_INT 2
7843: ARRAY
7844: PPUSH
7845: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7849: LD_EXP 2
7853: PPUSH
7854: LD_STRING DDav-Artifact1-1
7856: PPUSH
7857: CALL_OW 88
// DialogueOff ;
7861: CALL_OW 7
// end ;
7865: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7866: LD_EXP 11
7870: IFFALSE 7917
7872: GO 7874
7874: DISABLE
// begin DialogueOn ;
7875: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7879: LD_EXP 11
7883: PUSH
7884: LD_INT 1
7886: ARRAY
7887: PPUSH
7888: LD_EXP 11
7892: PUSH
7893: LD_INT 2
7895: ARRAY
7896: PPUSH
7897: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7901: LD_EXP 2
7905: PPUSH
7906: LD_STRING DDav-Artifact2-1
7908: PPUSH
7909: CALL_OW 88
// DialogueOff ;
7913: CALL_OW 7
// end ;
7917: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7918: LD_EXP 16
7922: PUSH
7923: LD_INT 6
7925: PPUSH
7926: CALL_OW 469
7930: NOT
7931: PUSH
7932: LD_EXP 18
7936: NOT
7937: AND
7938: OR
7939: IFFALSE 7951
7941: GO 7943
7943: DISABLE
// YouLost ( artifact_destroyed ) ;
7944: LD_STRING artifact_destroyed
7946: PPUSH
7947: CALL_OW 104
7951: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7952: LD_EXP 2
7956: PPUSH
7957: CALL_OW 301
7961: IFFALSE 7973
7963: GO 7965
7965: DISABLE
// YouLost ( dead ) ;
7966: LD_STRING dead
7968: PPUSH
7969: CALL_OW 104
7973: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7974: LD_INT 22
7976: PUSH
7977: LD_INT 7
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 21
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PPUSH
7998: CALL_OW 69
8002: PUSH
8003: LD_INT 0
8005: EQUAL
8006: IFFALSE 8140
8008: GO 8010
8010: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
8011: LD_OWVAR 1
8015: PUSH
8016: LD_INT 252000
8018: PUSH
8019: LD_INT 210000
8021: PUSH
8022: LD_INT 189000
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: PUSH
8030: LD_OWVAR 67
8034: ARRAY
8035: LESS
8036: IFFALSE 8050
// AddMedal ( med1 , 1 ) else
8038: LD_STRING med1
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 101
8048: GO 8061
// AddMedal ( med1 , - 1 ) ;
8050: LD_STRING med1
8052: PPUSH
8053: LD_INT 1
8055: NEG
8056: PPUSH
8057: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
8061: LD_INT 22
8063: PUSH
8064: LD_INT 8
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: IFFALSE 8090
// AddMedal ( med2 , - 1 ) else
8077: LD_STRING med2
8079: PPUSH
8080: LD_INT 1
8082: NEG
8083: PPUSH
8084: CALL_OW 101
8088: GO 8100
// AddMedal ( med2 , 1 ) ;
8090: LD_STRING med2
8092: PPUSH
8093: LD_INT 1
8095: PPUSH
8096: CALL_OW 101
// if player_used_sib_bomb then
8100: LD_EXP 12
8104: IFFALSE 8119
// AddMedal ( med3 , - 1 ) else
8106: LD_STRING med3
8108: PPUSH
8109: LD_INT 1
8111: NEG
8112: PPUSH
8113: CALL_OW 101
8117: GO 8129
// AddMedal ( med3 , 1 ) ;
8119: LD_STRING med3
8121: PPUSH
8122: LD_INT 1
8124: PPUSH
8125: CALL_OW 101
// GiveMedals ( MAIN ) ;
8129: LD_STRING MAIN
8131: PPUSH
8132: CALL_OW 102
// YouWin ;
8136: CALL_OW 103
// end ; end_of_file
8140: END
// every 0 0$22 + 0 0$2 do
8141: GO 8143
8143: DISABLE
// begin enable ;
8144: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
8145: LD_INT 4
8147: PPUSH
8148: LD_INT 5
8150: PPUSH
8151: CALL_OW 12
8155: PPUSH
8156: LD_INT 3
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 55
// if tick >= 4 4$00 then
8166: LD_OWVAR 1
8170: PUSH
8171: LD_INT 8400
8173: GREATEREQUAL
8174: IFFALSE 8181
// begin disable ;
8176: DISABLE
// CratesSpawn ( ) ;
8177: CALL 8182 0 0
// end ; end ;
8181: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 30000
8195: PUSH
8196: LD_INT 20000
8198: PUSH
8199: LD_INT 10000
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: PUSH
8207: LD_OWVAR 67
8211: ARRAY
8212: ST_TO_ADDR
// while amount > 0 do
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 0
8220: GREATER
8221: IFFALSE 8291
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8223: LD_INT 1050
8225: PPUSH
8226: LD_INT 3150
8228: PPUSH
8229: CALL_OW 12
8233: PPUSH
8234: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8238: LD_ADDR_VAR 0 4
8242: PUSH
8243: LD_INT 1
8245: PPUSH
8246: LD_INT 5
8248: PPUSH
8249: CALL_OW 12
8253: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8254: LD_ADDR_VAR 0 3
8258: PUSH
8259: LD_VAR 0 3
8263: PUSH
8264: LD_VAR 0 4
8268: PUSH
8269: LD_INT 10
8271: MUL
8272: MINUS
8273: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8274: LD_VAR 0 4
8278: PPUSH
8279: LD_INT 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: CALL_OW 55
// end ;
8289: GO 8213
// end ; end_of_file
8291: LD_VAR 0 1
8295: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8296: LD_INT 0
8298: PPUSH
8299: PPUSH
8300: PPUSH
8301: PPUSH
8302: PPUSH
8303: PPUSH
// uc_nation = nation_nature ;
8304: LD_ADDR_OWVAR 21
8308: PUSH
8309: LD_INT 0
8311: ST_TO_ADDR
// uc_side = 0 ;
8312: LD_ADDR_OWVAR 20
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// l = 0 ;
8320: LD_ADDR_VAR 0 6
8324: PUSH
8325: LD_INT 0
8327: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8328: LD_ADDR_OWVAR 24
8332: PUSH
8333: LD_INT 0
8335: PPUSH
8336: LD_INT 5
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8344: LD_ADDR_OWVAR 35
8348: PUSH
8349: LD_INT 5
8351: NEG
8352: PPUSH
8353: LD_INT 5
8355: PPUSH
8356: CALL_OW 12
8360: ST_TO_ADDR
// hc_gallery =  ;
8361: LD_ADDR_OWVAR 33
8365: PUSH
8366: LD_STRING 
8368: ST_TO_ADDR
// hc_class = class_apeman ;
8369: LD_ADDR_OWVAR 28
8373: PUSH
8374: LD_INT 12
8376: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8377: LD_ADDR_OWVAR 29
8381: PUSH
8382: LD_INT 11
8384: PPUSH
8385: LD_INT 13
8387: PPUSH
8388: CALL_OW 12
8392: PUSH
8393: LD_INT 10
8395: PPUSH
8396: LD_INT 11
8398: PPUSH
8399: CALL_OW 12
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// hc_sex = sex_male ;
8408: LD_ADDR_OWVAR 27
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8416: LD_ADDR_OWVAR 31
8420: PUSH
8421: LD_INT 0
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: CALL_OW 12
8431: PUSH
8432: LD_INT 0
8434: PUSH
8435: LD_INT 0
8437: PUSH
8438: LD_INT 0
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// apeman = CreateHuman ;
8447: LD_ADDR_VAR 0 7
8451: PUSH
8452: CALL_OW 44
8456: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8457: LD_VAR 0 7
8461: PPUSH
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_INT 0
8469: PPUSH
8470: CALL_OW 49
// l = l + 1 ;
8474: LD_ADDR_VAR 0 6
8478: PUSH
8479: LD_VAR 0 6
8483: PUSH
8484: LD_INT 1
8486: PLUS
8487: ST_TO_ADDR
// end until l = num1 ;
8488: LD_VAR 0 6
8492: PUSH
8493: LD_VAR 0 1
8497: EQUAL
8498: IFFALSE 8328
// l = 0 ;
8500: LD_ADDR_VAR 0 6
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8508: LD_ADDR_OWVAR 35
8512: PUSH
8513: LD_INT 0
8515: PPUSH
8516: LD_INT 25
8518: PPUSH
8519: CALL_OW 12
8523: ST_TO_ADDR
// hc_class = class_tiger ;
8524: LD_ADDR_OWVAR 28
8528: PUSH
8529: LD_INT 14
8531: ST_TO_ADDR
// hc_sex = sex_male ;
8532: LD_ADDR_OWVAR 27
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// hc_gallery = sandnature ;
8540: LD_ADDR_OWVAR 33
8544: PUSH
8545: LD_STRING sandnature
8547: ST_TO_ADDR
// hc_face_number = 3 ;
8548: LD_ADDR_OWVAR 34
8552: PUSH
8553: LD_INT 3
8555: ST_TO_ADDR
// tiger = CreateHuman ;
8556: LD_ADDR_VAR 0 8
8560: PUSH
8561: CALL_OW 44
8565: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8566: LD_VAR 0 8
8570: PPUSH
8571: LD_VAR 0 4
8575: PPUSH
8576: LD_INT 0
8578: PPUSH
8579: CALL_OW 49
// l = l + 1 ;
8583: LD_ADDR_VAR 0 6
8587: PUSH
8588: LD_VAR 0 6
8592: PUSH
8593: LD_INT 1
8595: PLUS
8596: ST_TO_ADDR
// end until l = num2 ;
8597: LD_VAR 0 6
8601: PUSH
8602: LD_VAR 0 2
8606: EQUAL
8607: IFFALSE 8508
// l = 0 ;
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8617: LD_ADDR_OWVAR 28
8621: PUSH
8622: LD_INT 18
8624: ST_TO_ADDR
// hc_gallery = sandnature ;
8625: LD_ADDR_OWVAR 33
8629: PUSH
8630: LD_STRING sandnature
8632: ST_TO_ADDR
// hc_face_number = 1 ;
8633: LD_ADDR_OWVAR 34
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// bird = CreateHuman ;
8641: LD_ADDR_VAR 0 9
8645: PUSH
8646: CALL_OW 44
8650: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8651: LD_VAR 0 9
8655: PPUSH
8656: LD_INT 0
8658: PPUSH
8659: CALL_OW 51
// l = l + 1 ;
8663: LD_ADDR_VAR 0 6
8667: PUSH
8668: LD_VAR 0 6
8672: PUSH
8673: LD_INT 1
8675: PLUS
8676: ST_TO_ADDR
// end until l = num3 ;
8677: LD_VAR 0 6
8681: PUSH
8682: LD_VAR 0 3
8686: EQUAL
8687: IFFALSE 8617
// for l = 1 to 2 do
8689: LD_ADDR_VAR 0 6
8693: PUSH
8694: DOUBLE
8695: LD_INT 1
8697: DEC
8698: ST_TO_ADDR
8699: LD_INT 2
8701: PUSH
8702: FOR_TO
8703: IFFALSE 8761
// begin hc_class = 21 ;
8705: LD_ADDR_OWVAR 28
8709: PUSH
8710: LD_INT 21
8712: ST_TO_ADDR
// hc_gallery =  ;
8713: LD_ADDR_OWVAR 33
8717: PUSH
8718: LD_STRING 
8720: ST_TO_ADDR
// hc_agressivity = 0 ;
8721: LD_ADDR_OWVAR 35
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// hc_face_number = 5 ;
8729: LD_ADDR_OWVAR 34
8733: PUSH
8734: LD_INT 5
8736: ST_TO_ADDR
// horse := CreateHuman ;
8737: LD_ADDR_VAR 0 10
8741: PUSH
8742: CALL_OW 44
8746: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8747: LD_VAR 0 10
8751: PPUSH
8752: LD_INT 0
8754: PPUSH
8755: CALL_OW 51
// end ;
8759: GO 8702
8761: POP
8762: POP
// hc_gallery :=  ;
8763: LD_ADDR_OWVAR 33
8767: PUSH
8768: LD_STRING 
8770: ST_TO_ADDR
// hc_name :=  ;
8771: LD_ADDR_OWVAR 26
8775: PUSH
8776: LD_STRING 
8778: ST_TO_ADDR
// end ; end_of_file
8779: LD_VAR 0 5
8783: RET
// export function DebugArtifact ; begin
8784: LD_INT 0
8786: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8787: LD_STRING Artifact is loaded: 
8789: PUSH
8790: LD_EXP 18
8794: STR
8795: PPUSH
8796: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8800: LD_STRING Artifact is active: 
8802: PUSH
8803: LD_EXP 29
8807: STR
8808: PPUSH
8809: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8813: LD_STRING Artifact is researched: 
8815: PUSH
8816: LD_EXP 22
8820: STR
8821: PPUSH
8822: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8826: LD_STRING Artifact coords 
8828: PUSH
8829: LD_EXP 19
8833: PPUSH
8834: CALL_OW 469
8838: STR
8839: PPUSH
8840: CALL_OW 561
// end ;
8844: LD_VAR 0 1
8848: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8855: LD_ADDR_VAR 0 4
8859: PUSH
8860: LD_INT 100
8862: PUSH
8863: LD_INT 185
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 99
8872: PUSH
8873: LD_INT 175
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 117
8882: PUSH
8883: LD_INT 191
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: ST_TO_ADDR
// for i = 1 to artifacts_type do
8895: LD_ADDR_VAR 0 2
8899: PUSH
8900: DOUBLE
8901: LD_INT 1
8903: DEC
8904: ST_TO_ADDR
8905: LD_EXP 14
8909: PUSH
8910: FOR_TO
8911: IFFALSE 9013
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8913: LD_ADDR_VAR 0 3
8917: PUSH
8918: LD_VAR 0 4
8922: PUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_VAR 0 4
8930: PPUSH
8931: CALL_OW 12
8935: ARRAY
8936: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8937: LD_ADDR_VAR 0 4
8941: PUSH
8942: LD_VAR 0 4
8946: PUSH
8947: LD_VAR 0 3
8951: DIFF
8952: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8953: LD_ADDR_EXP 15
8957: PUSH
8958: LD_EXP 15
8962: PPUSH
8963: LD_VAR 0 2
8967: PPUSH
8968: LD_VAR 0 3
8972: PPUSH
8973: CALL_OW 2
8977: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8978: LD_EXP 14
8982: PUSH
8983: LD_VAR 0 2
8987: ARRAY
8988: PPUSH
8989: LD_VAR 0 3
8993: PUSH
8994: LD_INT 1
8996: ARRAY
8997: PPUSH
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 2
9005: ARRAY
9006: PPUSH
9007: CALL 5425 0 3
// end ;
9011: GO 8910
9013: POP
9014: POP
// end ;
9015: LD_VAR 0 1
9019: RET
// export function GetUseCost ( dist ) ; begin
9020: LD_INT 0
9022: PPUSH
// if dist < 30 then
9023: LD_VAR 0 1
9027: PUSH
9028: LD_INT 30
9030: LESS
9031: IFFALSE 9041
// result := 10 ;
9033: LD_ADDR_VAR 0 2
9037: PUSH
9038: LD_INT 10
9040: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
9041: LD_VAR 0 1
9045: PUSH
9046: LD_INT 30
9048: GREATEREQUAL
9049: PUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 50
9057: LESS
9058: AND
9059: IFFALSE 9069
// result := 35 ;
9061: LD_ADDR_VAR 0 2
9065: PUSH
9066: LD_INT 35
9068: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
9069: LD_VAR 0 1
9073: PUSH
9074: LD_INT 50
9076: GREATEREQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PUSH
9083: LD_INT 80
9085: LESS
9086: AND
9087: IFFALSE 9097
// result := 70 ;
9089: LD_ADDR_VAR 0 2
9093: PUSH
9094: LD_INT 70
9096: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
9097: LD_VAR 0 1
9101: PUSH
9102: LD_INT 80
9104: GREATEREQUAL
9105: PUSH
9106: LD_VAR 0 1
9110: PUSH
9111: LD_INT 120
9113: LESS
9114: AND
9115: IFFALSE 9125
// result := 100 ;
9117: LD_ADDR_VAR 0 2
9121: PUSH
9122: LD_INT 100
9124: ST_TO_ADDR
// if dist >= 120 then
9125: LD_VAR 0 1
9129: PUSH
9130: LD_INT 120
9132: GREATEREQUAL
9133: IFFALSE 9143
// result := 150 ;
9135: LD_ADDR_VAR 0 2
9139: PUSH
9140: LD_INT 150
9142: ST_TO_ADDR
// end ;
9143: LD_VAR 0 2
9147: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL_OW 255
9157: PUSH
9158: LD_OWVAR 2
9162: EQUAL
9163: IFFALSE 9173
// player_artifact_researched := true ;
9165: LD_ADDR_EXP 22
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// end ;
9173: PPOPN 1
9175: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9176: LD_INT 22
9178: PUSH
9179: LD_OWVAR 2
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 2
9190: PUSH
9191: LD_INT 30
9193: PUSH
9194: LD_INT 8
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 30
9203: PUSH
9204: LD_INT 11
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PPUSH
9220: CALL_OW 69
9224: PUSH
9225: LD_EXP 22
9229: AND
9230: PUSH
9231: LD_EXP 18
9235: NOT
9236: AND
9237: IFFALSE 9691
9239: GO 9241
9241: DISABLE
9242: LD_INT 0
9244: PPUSH
9245: PPUSH
// begin enable ;
9246: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_EXP 19
9256: PPUSH
9257: CALL_OW 469
9261: ST_TO_ADDR
// if not coords then
9262: LD_VAR 0 2
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9691
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_INT 22
9278: PUSH
9279: LD_OWVAR 2
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 30
9293: PUSH
9294: LD_INT 8
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 30
9303: PUSH
9304: LD_INT 11
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 69
9324: PPUSH
9325: LD_VAR 0 2
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_VAR 0 2
9338: PUSH
9339: LD_INT 2
9341: ARRAY
9342: PPUSH
9343: CALL_OW 73
9347: ST_TO_ADDR
// if not lab then
9348: LD_VAR 0 1
9352: NOT
9353: IFFALSE 9370
// begin if debug then
9355: LD_EXP 6
9359: IFFALSE 9368
// AddToLog ( Cannot find lab for artifact! ) ;
9361: LD_STRING Cannot find lab for artifact!
9363: PPUSH
9364: CALL_OW 561
// exit ;
9368: GO 9691
// end ; if not player_artifact_ready then
9370: LD_EXP 29
9374: NOT
9375: IFFALSE 9499
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9377: LD_VAR 0 1
9381: PPUSH
9382: LD_VAR 0 2
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PPUSH
9391: LD_VAR 0 2
9395: PUSH
9396: LD_INT 2
9398: ARRAY
9399: PPUSH
9400: CALL_OW 297
9404: PUSH
9405: LD_EXP 23
9409: LESS
9410: IFFALSE 9475
// begin if BuildingStatus ( lab ) = bs_idle then
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 461
9421: PUSH
9422: LD_INT 2
9424: EQUAL
9425: IFFALSE 9451
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9427: LD_OWVAR 2
9431: PPUSH
9432: LD_EXP 25
9436: PPUSH
9437: LD_INT 2
9439: PPUSH
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 468
9449: GO 9473
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9451: LD_OWVAR 2
9455: PPUSH
9456: LD_EXP 25
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 1
9468: PPUSH
9469: CALL_OW 468
// end else
9473: GO 9497
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9475: LD_OWVAR 2
9479: PPUSH
9480: LD_EXP 25
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 468
// end else
9497: GO 9691
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_VAR 0 2
9508: PUSH
9509: LD_INT 1
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 2
9517: PUSH
9518: LD_INT 2
9520: ARRAY
9521: PPUSH
9522: CALL_OW 297
9526: PUSH
9527: LD_EXP 23
9531: LESS
9532: IFFALSE 9647
// begin if BuildingStatus ( lab ) = bs_idle then
9534: LD_VAR 0 1
9538: PPUSH
9539: CALL_OW 461
9543: PUSH
9544: LD_INT 2
9546: EQUAL
9547: IFFALSE 9601
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9549: LD_OWVAR 2
9553: PPUSH
9554: LD_EXP 20
9558: PPUSH
9559: LD_INT 4
9561: PPUSH
9562: LD_VAR 0 1
9566: PPUSH
9567: CALL_OW 468
// if player_artifact_selected_unit then
9571: LD_EXP 30
9575: IFFALSE 9599
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9577: LD_OWVAR 2
9581: PPUSH
9582: LD_EXP 21
9586: PPUSH
9587: LD_INT 3
9589: PPUSH
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 468
// end else
9599: GO 9645
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9601: LD_OWVAR 2
9605: PPUSH
9606: LD_EXP 20
9610: PPUSH
9611: LD_INT 1
9613: PPUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9623: LD_OWVAR 2
9627: PPUSH
9628: LD_EXP 21
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 1
9640: PPUSH
9641: CALL_OW 468
// end ; end else
9645: GO 9691
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9647: LD_OWVAR 2
9651: PPUSH
9652: LD_EXP 20
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9669: LD_OWVAR 2
9673: PPUSH
9674: LD_EXP 21
9678: PPUSH
9679: LD_INT 1
9681: PPUSH
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 468
// end ; end ;
9691: PPOPN 2
9693: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9694: LD_INT 0
9696: PPUSH
9697: PPUSH
9698: PPUSH
9699: PPUSH
9700: PPUSH
9701: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9702: LD_ADDR_VAR 0 5
9706: PUSH
9707: LD_EXP 19
9711: PPUSH
9712: CALL_OW 469
9716: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9717: LD_ADDR_VAR 0 7
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_OWVAR 2
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 8
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 11
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PPUSH
9766: CALL_OW 69
9770: PPUSH
9771: LD_VAR 0 5
9775: PUSH
9776: LD_INT 1
9778: ARRAY
9779: PPUSH
9780: LD_VAR 0 5
9784: PUSH
9785: LD_INT 2
9787: ARRAY
9788: PPUSH
9789: CALL_OW 73
9793: ST_TO_ADDR
// if not lab then
9794: LD_VAR 0 7
9798: NOT
9799: IFFALSE 9816
// begin if debug then
9801: LD_EXP 6
9805: IFFALSE 9814
// AddToLog ( Cannot find lab! ) ;
9807: LD_STRING Cannot find lab!
9809: PPUSH
9810: CALL_OW 561
// exit ;
9814: GO 10212
// end ; if icon = player_artifact_icon_res then
9816: LD_VAR 0 2
9820: PUSH
9821: LD_EXP 25
9825: EQUAL
9826: IFFALSE 9867
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9828: LD_VAR 0 7
9832: PPUSH
9833: LD_EXP 27
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9845: LD_OWVAR 2
9849: PPUSH
9850: LD_EXP 25
9854: PPUSH
9855: LD_INT 0
9857: PPUSH
9858: LD_VAR 0 7
9862: PPUSH
9863: CALL_OW 468
// end ; if icon = player_artifact_icon then
9867: LD_VAR 0 2
9871: PUSH
9872: LD_EXP 20
9876: EQUAL
9877: IFFALSE 9916
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9879: LD_VAR 0 3
9883: PPUSH
9884: CALL_OW 247
9888: PUSH
9889: LD_INT 1
9891: EQUAL
9892: PUSH
9893: LD_VAR 0 3
9897: PPUSH
9898: CALL_OW 310
9902: NOT
9903: AND
9904: IFFALSE 9916
// player_artifact_selected_unit := cr1 ;
9906: LD_ADDR_EXP 30
9910: PUSH
9911: LD_VAR 0 3
9915: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9916: LD_VAR 0 2
9920: PUSH
9921: LD_EXP 21
9925: EQUAL
9926: IFFALSE 10202
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9928: LD_VAR 0 3
9932: PPUSH
9933: LD_VAR 0 4
9937: PPUSH
9938: CALL_OW 428
9942: PUSH
9943: LD_INT 0
9945: NONEQUAL
9946: IFFALSE 9950
// exit ;
9948: GO 10212
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9950: LD_ADDR_VAR 0 9
9954: PUSH
9955: LD_EXP 30
9959: PPUSH
9960: CALL_OW 250
9964: PPUSH
9965: LD_EXP 30
9969: PPUSH
9970: CALL_OW 251
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 298
9989: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9990: LD_ADDR_VAR 0 10
9994: PUSH
9995: LD_VAR 0 9
9999: PPUSH
10000: CALL 9020 0 1
10004: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
10005: LD_VAR 0 10
10009: PUSH
10010: LD_OWVAR 2
10014: PPUSH
10015: CALL 5639 0 1
10019: GREATER
10020: IFFALSE 10034
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
10022: LD_STRING ArtFrogJumpCost
10024: PPUSH
10025: LD_INT 2
10027: PPUSH
10028: CALL_OW 338
// exit ;
10032: GO 10212
// end ; SetSibResources ( your_side , cost ) ;
10034: LD_OWVAR 2
10038: PPUSH
10039: LD_VAR 0 10
10043: PPUSH
10044: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
10048: LD_VAR 0 3
10052: PPUSH
10053: LD_VAR 0 4
10057: PPUSH
10058: LD_INT 6
10060: PPUSH
10061: LD_INT 5
10063: NEG
10064: PPUSH
10065: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_VAR 0 4
10078: PPUSH
10079: LD_INT 6
10081: PPUSH
10082: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_VAR 0 4
10100: PPUSH
10101: LD_INT 0
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
10111: LD_VAR 0 3
10115: PPUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: CALL_OW 84
// player_artifact_selected_unit := 0 ;
10125: LD_ADDR_EXP 30
10129: PUSH
10130: LD_INT 0
10132: ST_TO_ADDR
// player_artifact_researched := false ;
10133: LD_ADDR_EXP 22
10137: PUSH
10138: LD_INT 0
10140: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
10141: LD_OWVAR 2
10145: PPUSH
10146: LD_EXP 20
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: LD_VAR 0 7
10158: PPUSH
10159: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
10163: LD_OWVAR 2
10167: PPUSH
10168: LD_EXP 21
10172: PPUSH
10173: LD_INT 0
10175: PPUSH
10176: LD_VAR 0 7
10180: PPUSH
10181: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
10185: LD_EXP 26
10189: PPUSH
10190: CALL_OW 67
// player_artifact_researched := true ;
10194: LD_ADDR_EXP 22
10198: PUSH
10199: LD_INT 1
10201: ST_TO_ADDR
// end ; if debug then
10202: LD_EXP 6
10206: IFFALSE 10212
// DebugArtifact ;
10208: CALL 8784 0 0
// end ;
10212: PPOPN 10
10214: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10215: LD_VAR 0 1
10219: PPUSH
10220: CALL_OW 255
10224: PUSH
10225: LD_OWVAR 2
10229: EQUAL
10230: IFFALSE 10269
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10232: LD_OWVAR 2
10236: PPUSH
10237: LD_EXP 25
10241: PPUSH
10242: LD_INT 0
10244: PPUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 468
// player_artifact_ready := true ;
10254: LD_ADDR_EXP 29
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10262: LD_STRING ArtFrogJump
10264: PPUSH
10265: CALL_OW 339
// end ; end ;
10269: PPOPN 1
10271: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10272: LD_OWVAR 2
10276: PPUSH
10277: LD_EXP 25
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: LD_VAR 0 1
10289: PPUSH
10290: CALL_OW 468
// end ;
10294: PPOPN 2
10296: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10297: LD_INT 0
10299: PPUSH
10300: PPUSH
10301: PPUSH
10302: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10303: LD_ADDR_VAR 0 3
10307: PUSH
10308: LD_INT 81
10310: PUSH
10311: LD_INT 7
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 34
10320: PUSH
10321: LD_INT 48
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_INT 81
10339: PUSH
10340: LD_INT 7
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 30
10349: PUSH
10350: LD_INT 28
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: ADD
10366: PUSH
10367: LD_INT 81
10369: PUSH
10370: LD_INT 7
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 30
10379: PUSH
10380: LD_INT 30
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: ADD
10396: PUSH
10397: LD_INT 81
10399: PUSH
10400: LD_INT 7
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: ADD
10426: PUSH
10427: LD_INT 81
10429: PUSH
10430: LD_INT 7
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 30
10439: PUSH
10440: LD_INT 34
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 69
10455: ADD
10456: PUSH
10457: LD_INT 81
10459: PUSH
10460: LD_INT 7
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 35
10469: PUSH
10470: LD_INT 49
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ADD
10486: PUSH
10487: LD_INT 81
10489: PUSH
10490: LD_INT 7
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 35
10499: PUSH
10500: LD_INT 47
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ADD
10516: PUSH
10517: LD_INT 81
10519: PUSH
10520: LD_INT 7
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 34
10529: PUSH
10530: LD_INT 47
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PPUSH
10541: CALL_OW 69
10545: ADD
10546: PUSH
10547: LD_INT 81
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 31
10559: PUSH
10560: LD_INT 25
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: ADD
10576: PUSH
10577: LD_INT 81
10579: PUSH
10580: LD_INT 7
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 32
10589: PUSH
10590: LD_INT 3
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: ADD
10606: ST_TO_ADDR
// if not tmp then
10607: LD_VAR 0 3
10611: NOT
10612: IFFALSE 10616
// exit ;
10614: GO 10737
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_INT 34
10623: PUSH
10624: LD_INT 48
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: IFFALSE 10668
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10637: LD_ADDR_VAR 0 4
10641: PUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 34
10649: PUSH
10650: LD_INT 48
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 72
10661: PUSH
10662: LD_INT 1
10664: ARRAY
10665: ST_TO_ADDR
10666: GO 10692
// un := tmp [ rand ( 1 , tmp ) ] ;
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_VAR 0 3
10677: PUSH
10678: LD_INT 1
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: CALL_OW 12
10690: ARRAY
10691: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10692: LD_EXP 10
10696: NOT
10697: IFFALSE 10728
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10699: LD_ADDR_EXP 10
10703: PUSH
10704: LD_VAR 0 4
10708: PPUSH
10709: CALL_OW 250
10713: PUSH
10714: LD_VAR 0 4
10718: PPUSH
10719: CALL_OW 251
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: ST_TO_ADDR
// KillUnit ( un ) ;
10728: LD_VAR 0 4
10732: PPUSH
10733: CALL_OW 66
// end ;
10737: LD_VAR 0 1
10741: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 6
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 33
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 69
10781: ST_TO_ADDR
// if not tmp then
10782: LD_VAR 0 4
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 10917
// un := tmp [ rand ( 1 , tmp ) ] ;
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: LD_VAR 0 4
10800: PUSH
10801: LD_INT 1
10803: PPUSH
10804: LD_VAR 0 4
10808: PPUSH
10809: CALL_OW 12
10813: ARRAY
10814: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10815: LD_VAR 0 3
10819: PPUSH
10820: CALL_OW 264
10824: PUSH
10825: LD_INT 48
10827: EQUAL
10828: IFFALSE 10847
// ComAttackPlace ( un , 194 , 19 ) else
10830: LD_VAR 0 3
10834: PPUSH
10835: LD_INT 194
10837: PPUSH
10838: LD_INT 19
10840: PPUSH
10841: CALL_OW 116
10845: GO 10881
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10847: LD_VAR 0 3
10851: PPUSH
10852: LD_INT 81
10854: PUSH
10855: LD_INT 7
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PPUSH
10862: CALL_OW 69
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: CALL_OW 74
10876: PPUSH
10877: CALL_OW 115
// if not alliance_used_artifact_2 then
10881: LD_EXP 11
10885: NOT
10886: IFFALSE 10917
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10888: LD_ADDR_EXP 11
10892: PUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: CALL_OW 250
10902: PUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: CALL_OW 251
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: ST_TO_ADDR
// end ; end_of_file
10917: LD_VAR 0 1
10921: RET
// export function DebugMode ; var i , j , b ; begin
10922: LD_INT 0
10924: PPUSH
10925: PPUSH
10926: PPUSH
10927: PPUSH
// enable_addtolog = true ;
10928: LD_ADDR_OWVAR 81
10932: PUSH
10933: LD_INT 1
10935: ST_TO_ADDR
// FogOff ( 6 ) ;
10936: LD_INT 6
10938: PPUSH
10939: CALL_OW 344
// uc_side = 6 ;
10943: LD_ADDR_OWVAR 20
10947: PUSH
10948: LD_INT 6
10950: ST_TO_ADDR
// uc_nation = 3 ;
10951: LD_ADDR_OWVAR 21
10955: PUSH
10956: LD_INT 3
10958: ST_TO_ADDR
// bc_level = 10 ;
10959: LD_ADDR_OWVAR 43
10963: PUSH
10964: LD_INT 10
10966: ST_TO_ADDR
// bc_type := b_lab_full ;
10967: LD_ADDR_OWVAR 42
10971: PUSH
10972: LD_INT 8
10974: ST_TO_ADDR
// bc_kind1 := 11 ;
10975: LD_ADDR_OWVAR 44
10979: PUSH
10980: LD_INT 11
10982: ST_TO_ADDR
// bc_kind2 := 12 ;
10983: LD_ADDR_OWVAR 45
10987: PUSH
10988: LD_INT 12
10990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10991: LD_INT 189
10993: PPUSH
10994: LD_INT 20
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 47
// bc_type := b_warehouse ;
11004: LD_ADDR_OWVAR 42
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
11012: LD_ADDR_VAR 0 4
11016: PUSH
11017: LD_INT 201
11019: PPUSH
11020: LD_INT 22
11022: PPUSH
11023: LD_INT 4
11025: PPUSH
11026: CALL_OW 47
11030: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
11031: LD_VAR 0 4
11035: PPUSH
11036: CALL_OW 274
11040: PPUSH
11041: LD_INT 1
11043: PPUSH
11044: LD_INT 10000
11046: PPUSH
11047: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
11051: LD_VAR 0 4
11055: PPUSH
11056: CALL_OW 274
11060: PPUSH
11061: LD_INT 2
11063: PPUSH
11064: LD_INT 10000
11066: PPUSH
11067: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
11071: LD_VAR 0 4
11075: PPUSH
11076: CALL_OW 274
11080: PPUSH
11081: LD_INT 3
11083: PPUSH
11084: LD_INT 10000
11086: PPUSH
11087: CALL_OW 277
// bc_type := b_siberite_power ;
11091: LD_ADDR_OWVAR 42
11095: PUSH
11096: LD_INT 28
11098: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
11099: LD_ADDR_VAR 0 4
11103: PUSH
11104: LD_INT 216
11106: PPUSH
11107: LD_INT 16
11109: PPUSH
11110: LD_INT 4
11112: PPUSH
11113: CALL_OW 47
11117: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
11118: LD_ADDR_VAR 0 4
11122: PUSH
11123: LD_INT 219
11125: PPUSH
11126: LD_INT 16
11128: PPUSH
11129: LD_INT 4
11131: PPUSH
11132: CALL_OW 47
11136: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
11137: LD_INT 55
11139: PPUSH
11140: LD_INT 6
11142: PPUSH
11143: LD_INT 2
11145: PPUSH
11146: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
11150: LD_INT 56
11152: PPUSH
11153: LD_INT 6
11155: PPUSH
11156: LD_INT 2
11158: PPUSH
11159: CALL_OW 322
// end ; end_of_file
11163: LD_VAR 0 1
11167: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
11168: LD_INT 0
11170: PPUSH
11171: PPUSH
11172: PPUSH
11173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 264
11183: PUSH
11184: LD_EXP 109
11188: EQUAL
11189: IFFALSE 11261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
11191: LD_INT 68
11193: PPUSH
11194: LD_VAR 0 1
11198: PPUSH
11199: CALL_OW 255
11203: PPUSH
11204: CALL_OW 321
11208: PUSH
11209: LD_INT 2
11211: EQUAL
11212: IFFALSE 11224
// eff := 70 else
11214: LD_ADDR_VAR 0 4
11218: PUSH
11219: LD_INT 70
11221: ST_TO_ADDR
11222: GO 11232
// eff := 30 ;
11224: LD_ADDR_VAR 0 4
11228: PUSH
11229: LD_INT 30
11231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
11232: LD_VAR 0 1
11236: PPUSH
11237: CALL_OW 250
11241: PPUSH
11242: LD_VAR 0 1
11246: PPUSH
11247: CALL_OW 251
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: CALL_OW 495
// end ; end ;
11261: LD_VAR 0 2
11265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11266: LD_INT 0
11268: PPUSH
// end ;
11269: LD_VAR 0 4
11273: RET
// export function SOS_Command ( cmd ) ; begin
11274: LD_INT 0
11276: PPUSH
// end ;
11277: LD_VAR 0 2
11281: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11282: LD_INT 0
11284: PPUSH
// end ;
11285: LD_VAR 0 6
11289: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
11290: LD_INT 0
11292: PPUSH
11293: PPUSH
// if not vehicle or not factory then
11294: LD_VAR 0 1
11298: NOT
11299: PUSH
11300: LD_VAR 0 2
11304: NOT
11305: OR
11306: IFFALSE 11310
// exit ;
11308: GO 11541
// if factoryWaypoints >= factory then
11310: LD_EXP 36
11314: PUSH
11315: LD_VAR 0 2
11319: GREATEREQUAL
11320: IFFALSE 11541
// if factoryWaypoints [ factory ] then
11322: LD_EXP 36
11326: PUSH
11327: LD_VAR 0 2
11331: ARRAY
11332: IFFALSE 11541
// begin if GetControl ( vehicle ) = control_manual then
11334: LD_VAR 0 1
11338: PPUSH
11339: CALL_OW 263
11343: PUSH
11344: LD_INT 1
11346: EQUAL
11347: IFFALSE 11428
// begin driver := IsDrivenBy ( vehicle ) ;
11349: LD_ADDR_VAR 0 4
11353: PUSH
11354: LD_VAR 0 1
11358: PPUSH
11359: CALL_OW 311
11363: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11364: LD_VAR 0 4
11368: PPUSH
11369: LD_EXP 36
11373: PUSH
11374: LD_VAR 0 2
11378: ARRAY
11379: PUSH
11380: LD_INT 3
11382: ARRAY
11383: PPUSH
11384: LD_EXP 36
11388: PUSH
11389: LD_VAR 0 2
11393: ARRAY
11394: PUSH
11395: LD_INT 4
11397: ARRAY
11398: PPUSH
11399: CALL_OW 171
// AddComExitVehicle ( driver ) ;
11403: LD_VAR 0 4
11407: PPUSH
11408: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
11412: LD_VAR 0 4
11416: PPUSH
11417: LD_VAR 0 2
11421: PPUSH
11422: CALL_OW 180
// end else
11426: GO 11541
// if GetControl ( vehicle ) = control_remote then
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 263
11437: PUSH
11438: LD_INT 2
11440: EQUAL
11441: IFFALSE 11502
// begin wait ( 0 0$2 ) ;
11443: LD_INT 70
11445: PPUSH
11446: CALL_OW 67
// if Connect ( vehicle ) then
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL 38275 0 1
11459: IFFALSE 11500
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: LD_EXP 36
11470: PUSH
11471: LD_VAR 0 2
11475: ARRAY
11476: PUSH
11477: LD_INT 3
11479: ARRAY
11480: PPUSH
11481: LD_EXP 36
11485: PUSH
11486: LD_VAR 0 2
11490: ARRAY
11491: PUSH
11492: LD_INT 4
11494: ARRAY
11495: PPUSH
11496: CALL_OW 171
// end else
11500: GO 11541
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11502: LD_VAR 0 1
11506: PPUSH
11507: LD_EXP 36
11511: PUSH
11512: LD_VAR 0 2
11516: ARRAY
11517: PUSH
11518: LD_INT 3
11520: ARRAY
11521: PPUSH
11522: LD_EXP 36
11526: PUSH
11527: LD_VAR 0 2
11531: ARRAY
11532: PUSH
11533: LD_INT 4
11535: ARRAY
11536: PPUSH
11537: CALL_OW 171
// end ; end ;
11541: LD_VAR 0 3
11545: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11546: LD_INT 0
11548: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 250
11556: EQUAL
11557: PUSH
11558: LD_VAR 0 2
11562: PPUSH
11563: CALL_OW 264
11567: PUSH
11568: LD_EXP 112
11572: EQUAL
11573: AND
11574: IFFALSE 11595
// MinerPlaceMine ( unit , x , y ) ;
11576: LD_VAR 0 2
11580: PPUSH
11581: LD_VAR 0 4
11585: PPUSH
11586: LD_VAR 0 5
11590: PPUSH
11591: CALL 14323 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11595: LD_VAR 0 1
11599: PUSH
11600: LD_INT 251
11602: EQUAL
11603: PUSH
11604: LD_VAR 0 2
11608: PPUSH
11609: CALL_OW 264
11613: PUSH
11614: LD_EXP 112
11618: EQUAL
11619: AND
11620: IFFALSE 11641
// MinerDetonateMine ( unit , x , y ) ;
11622: LD_VAR 0 2
11626: PPUSH
11627: LD_VAR 0 4
11631: PPUSH
11632: LD_VAR 0 5
11636: PPUSH
11637: CALL 14600 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11641: LD_VAR 0 1
11645: PUSH
11646: LD_INT 252
11648: EQUAL
11649: PUSH
11650: LD_VAR 0 2
11654: PPUSH
11655: CALL_OW 264
11659: PUSH
11660: LD_EXP 112
11664: EQUAL
11665: AND
11666: IFFALSE 11687
// MinerCreateMinefield ( unit , x , y ) ;
11668: LD_VAR 0 2
11672: PPUSH
11673: LD_VAR 0 4
11677: PPUSH
11678: LD_VAR 0 5
11682: PPUSH
11683: CALL 15017 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11687: LD_VAR 0 1
11691: PUSH
11692: LD_INT 253
11694: EQUAL
11695: PUSH
11696: LD_VAR 0 2
11700: PPUSH
11701: CALL_OW 257
11705: PUSH
11706: LD_INT 5
11708: EQUAL
11709: AND
11710: IFFALSE 11731
// ComBinocular ( unit , x , y ) ;
11712: LD_VAR 0 2
11716: PPUSH
11717: LD_VAR 0 4
11721: PPUSH
11722: LD_VAR 0 5
11726: PPUSH
11727: CALL 15388 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11731: LD_VAR 0 1
11735: PUSH
11736: LD_INT 254
11738: EQUAL
11739: PUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: CALL_OW 264
11749: PUSH
11750: LD_EXP 107
11754: EQUAL
11755: AND
11756: PUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: CALL_OW 263
11766: PUSH
11767: LD_INT 3
11769: EQUAL
11770: AND
11771: IFFALSE 11787
// HackDestroyVehicle ( unit , selectedUnit ) ;
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: CALL 13683 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11787: LD_VAR 0 1
11791: PUSH
11792: LD_INT 255
11794: EQUAL
11795: PUSH
11796: LD_VAR 0 2
11800: PPUSH
11801: CALL_OW 264
11805: PUSH
11806: LD_INT 14
11808: PUSH
11809: LD_INT 53
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: IN
11816: AND
11817: PUSH
11818: LD_VAR 0 4
11822: PPUSH
11823: LD_VAR 0 5
11827: PPUSH
11828: CALL_OW 488
11832: AND
11833: IFFALSE 11857
// CutTreeXYR ( unit , x , y , 12 ) ;
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_VAR 0 4
11844: PPUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: LD_INT 12
11852: PPUSH
11853: CALL 12249 0 4
// if cmd = 256 then
11857: LD_VAR 0 1
11861: PUSH
11862: LD_INT 256
11864: EQUAL
11865: IFFALSE 11886
// SetFactoryWaypoint ( unit , x , y ) ;
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 4
11876: PPUSH
11877: LD_VAR 0 5
11881: PPUSH
11882: CALL 11891 0 3
// end ;
11886: LD_VAR 0 6
11890: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11891: LD_INT 0
11893: PPUSH
11894: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11895: LD_VAR 0 1
11899: NOT
11900: PUSH
11901: LD_VAR 0 2
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: CALL_OW 488
11915: NOT
11916: OR
11917: PUSH
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL_OW 266
11927: PUSH
11928: LD_INT 3
11930: NONEQUAL
11931: PUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 247
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: NOT
11946: AND
11947: OR
11948: IFFALSE 11952
// exit ;
11950: GO 12101
// if GetType ( factory ) = unit_human then
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 247
11961: PUSH
11962: LD_INT 1
11964: EQUAL
11965: IFFALSE 11982
// factory := IsInUnit ( factory ) ;
11967: LD_ADDR_VAR 0 1
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 310
11981: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11982: LD_VAR 0 1
11986: PPUSH
11987: CALL_OW 266
11991: PUSH
11992: LD_INT 3
11994: NONEQUAL
11995: IFFALSE 11999
// exit ;
11997: GO 12101
// if HexInfo ( x , y ) = factory then
11999: LD_VAR 0 2
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: CALL_OW 428
12013: PUSH
12014: LD_VAR 0 1
12018: EQUAL
12019: IFFALSE 12046
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
12021: LD_ADDR_EXP 36
12025: PUSH
12026: LD_EXP 36
12030: PPUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 1
12043: ST_TO_ADDR
12044: GO 12097
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
12046: LD_ADDR_EXP 36
12050: PUSH
12051: LD_EXP 36
12055: PPUSH
12056: LD_VAR 0 1
12060: PPUSH
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 255
12070: PUSH
12071: LD_VAR 0 1
12075: PUSH
12076: LD_VAR 0 2
12080: PUSH
12081: LD_VAR 0 3
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PPUSH
12092: CALL_OW 1
12096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
12097: CALL 12106 0 0
// end ;
12101: LD_VAR 0 4
12105: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
12110: LD_STRING resetFactoryWaypoint();
12112: PPUSH
12113: CALL_OW 559
// if factoryWaypoints then
12117: LD_EXP 36
12121: IFFALSE 12244
// begin for i := 1 to factoryWaypoints do
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: DOUBLE
12129: LD_INT 1
12131: DEC
12132: ST_TO_ADDR
12133: LD_EXP 36
12137: PUSH
12138: FOR_TO
12139: IFFALSE 12242
// if factoryWaypoints [ i ] then
12141: LD_EXP 36
12145: PUSH
12146: LD_VAR 0 2
12150: ARRAY
12151: IFFALSE 12240
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
12153: LD_STRING setFactoryWaypointXY(
12155: PUSH
12156: LD_EXP 36
12160: PUSH
12161: LD_VAR 0 2
12165: ARRAY
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: STR
12171: PUSH
12172: LD_STRING ,
12174: STR
12175: PUSH
12176: LD_EXP 36
12180: PUSH
12181: LD_VAR 0 2
12185: ARRAY
12186: PUSH
12187: LD_INT 2
12189: ARRAY
12190: STR
12191: PUSH
12192: LD_STRING ,
12194: STR
12195: PUSH
12196: LD_EXP 36
12200: PUSH
12201: LD_VAR 0 2
12205: ARRAY
12206: PUSH
12207: LD_INT 3
12209: ARRAY
12210: STR
12211: PUSH
12212: LD_STRING ,
12214: STR
12215: PUSH
12216: LD_EXP 36
12220: PUSH
12221: LD_VAR 0 2
12225: ARRAY
12226: PUSH
12227: LD_INT 4
12229: ARRAY
12230: STR
12231: PUSH
12232: LD_STRING )
12234: STR
12235: PPUSH
12236: CALL_OW 559
12240: GO 12138
12242: POP
12243: POP
// end ; end ;
12244: LD_VAR 0 1
12248: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
12249: LD_INT 0
12251: PPUSH
12252: PPUSH
12253: PPUSH
12254: PPUSH
12255: PPUSH
12256: PPUSH
12257: PPUSH
12258: PPUSH
12259: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
12260: LD_VAR 0 1
12264: NOT
12265: PUSH
12266: LD_VAR 0 2
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: CALL_OW 488
12280: NOT
12281: OR
12282: PUSH
12283: LD_VAR 0 4
12287: NOT
12288: OR
12289: IFFALSE 12293
// exit ;
12291: GO 12633
// list := [ ] ;
12293: LD_ADDR_VAR 0 13
12297: PUSH
12298: EMPTY
12299: ST_TO_ADDR
// if x - r < 0 then
12300: LD_VAR 0 2
12304: PUSH
12305: LD_VAR 0 4
12309: MINUS
12310: PUSH
12311: LD_INT 0
12313: LESS
12314: IFFALSE 12326
// min_x := 0 else
12316: LD_ADDR_VAR 0 7
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
12324: GO 12342
// min_x := x - r ;
12326: LD_ADDR_VAR 0 7
12330: PUSH
12331: LD_VAR 0 2
12335: PUSH
12336: LD_VAR 0 4
12340: MINUS
12341: ST_TO_ADDR
// if y - r < 0 then
12342: LD_VAR 0 3
12346: PUSH
12347: LD_VAR 0 4
12351: MINUS
12352: PUSH
12353: LD_INT 0
12355: LESS
12356: IFFALSE 12368
// min_y := 0 else
12358: LD_ADDR_VAR 0 8
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
12366: GO 12384
// min_y := y - r ;
12368: LD_ADDR_VAR 0 8
12372: PUSH
12373: LD_VAR 0 3
12377: PUSH
12378: LD_VAR 0 4
12382: MINUS
12383: ST_TO_ADDR
// max_x := x + r ;
12384: LD_ADDR_VAR 0 9
12388: PUSH
12389: LD_VAR 0 2
12393: PUSH
12394: LD_VAR 0 4
12398: PLUS
12399: ST_TO_ADDR
// max_y := y + r ;
12400: LD_ADDR_VAR 0 10
12404: PUSH
12405: LD_VAR 0 3
12409: PUSH
12410: LD_VAR 0 4
12414: PLUS
12415: ST_TO_ADDR
// for _x = min_x to max_x do
12416: LD_ADDR_VAR 0 11
12420: PUSH
12421: DOUBLE
12422: LD_VAR 0 7
12426: DEC
12427: ST_TO_ADDR
12428: LD_VAR 0 9
12432: PUSH
12433: FOR_TO
12434: IFFALSE 12551
// for _y = min_y to max_y do
12436: LD_ADDR_VAR 0 12
12440: PUSH
12441: DOUBLE
12442: LD_VAR 0 8
12446: DEC
12447: ST_TO_ADDR
12448: LD_VAR 0 10
12452: PUSH
12453: FOR_TO
12454: IFFALSE 12547
// begin if not ValidHex ( _x , _y ) then
12456: LD_VAR 0 11
12460: PPUSH
12461: LD_VAR 0 12
12465: PPUSH
12466: CALL_OW 488
12470: NOT
12471: IFFALSE 12475
// continue ;
12473: GO 12453
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12475: LD_VAR 0 11
12479: PPUSH
12480: LD_VAR 0 12
12484: PPUSH
12485: CALL_OW 351
12489: PUSH
12490: LD_VAR 0 11
12494: PPUSH
12495: LD_VAR 0 12
12499: PPUSH
12500: CALL_OW 554
12504: AND
12505: IFFALSE 12545
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12507: LD_ADDR_VAR 0 13
12511: PUSH
12512: LD_VAR 0 13
12516: PPUSH
12517: LD_VAR 0 13
12521: PUSH
12522: LD_INT 1
12524: PLUS
12525: PPUSH
12526: LD_VAR 0 11
12530: PUSH
12531: LD_VAR 0 12
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 2
12544: ST_TO_ADDR
// end ;
12545: GO 12453
12547: POP
12548: POP
12549: GO 12433
12551: POP
12552: POP
// if not list then
12553: LD_VAR 0 13
12557: NOT
12558: IFFALSE 12562
// exit ;
12560: GO 12633
// for i in list do
12562: LD_ADDR_VAR 0 6
12566: PUSH
12567: LD_VAR 0 13
12571: PUSH
12572: FOR_IN
12573: IFFALSE 12631
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_STRING M
12582: PUSH
12583: LD_VAR 0 6
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PUSH
12592: LD_VAR 0 6
12596: PUSH
12597: LD_INT 2
12599: ARRAY
12600: PUSH
12601: LD_INT 0
12603: PUSH
12604: LD_INT 0
12606: PUSH
12607: LD_INT 0
12609: PUSH
12610: LD_INT 0
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: PPUSH
12625: CALL_OW 447
12629: GO 12572
12631: POP
12632: POP
// end ;
12633: LD_VAR 0 5
12637: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12638: LD_EXP 37
12642: NOT
12643: IFFALSE 12693
12645: GO 12647
12647: DISABLE
// begin initHack := true ;
12648: LD_ADDR_EXP 37
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// hackTanks := [ ] ;
12656: LD_ADDR_EXP 38
12660: PUSH
12661: EMPTY
12662: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12663: LD_ADDR_EXP 39
12667: PUSH
12668: EMPTY
12669: ST_TO_ADDR
// hackLimit := 3 ;
12670: LD_ADDR_EXP 40
12674: PUSH
12675: LD_INT 3
12677: ST_TO_ADDR
// hackDist := 12 ;
12678: LD_ADDR_EXP 41
12682: PUSH
12683: LD_INT 12
12685: ST_TO_ADDR
// hackCounter := [ ] ;
12686: LD_ADDR_EXP 42
12690: PUSH
12691: EMPTY
12692: ST_TO_ADDR
// end ;
12693: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12694: LD_EXP 37
12698: PUSH
12699: LD_INT 34
12701: PUSH
12702: LD_EXP 107
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 69
12715: AND
12716: IFFALSE 12971
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin enable ;
12725: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_INT 34
12733: PUSH
12734: LD_EXP 107
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: FOR_IN
12749: IFFALSE 12969
// begin if not i in hackTanks then
12751: LD_VAR 0 1
12755: PUSH
12756: LD_EXP 38
12760: IN
12761: NOT
12762: IFFALSE 12845
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12764: LD_ADDR_EXP 38
12768: PUSH
12769: LD_EXP 38
12773: PPUSH
12774: LD_EXP 38
12778: PUSH
12779: LD_INT 1
12781: PLUS
12782: PPUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 1
12792: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12793: LD_ADDR_EXP 39
12797: PUSH
12798: LD_EXP 39
12802: PPUSH
12803: LD_EXP 39
12807: PUSH
12808: LD_INT 1
12810: PLUS
12811: PPUSH
12812: EMPTY
12813: PPUSH
12814: CALL_OW 1
12818: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12819: LD_ADDR_EXP 42
12823: PUSH
12824: LD_EXP 42
12828: PPUSH
12829: LD_EXP 42
12833: PUSH
12834: LD_INT 1
12836: PLUS
12837: PPUSH
12838: EMPTY
12839: PPUSH
12840: CALL_OW 1
12844: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 302
12854: NOT
12855: IFFALSE 12868
// begin HackUnlinkAll ( i ) ;
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL 12974 0 1
// continue ;
12866: GO 12748
// end ; HackCheckCapturedStatus ( i ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL 13417 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12877: LD_ADDR_VAR 0 2
12881: PUSH
12882: LD_INT 81
12884: PUSH
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 255
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 33
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 91
12911: PUSH
12912: LD_VAR 0 1
12916: PUSH
12917: LD_EXP 41
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 50
12929: PUSH
12930: EMPTY
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: ST_TO_ADDR
// if not tmp then
12944: LD_VAR 0 2
12948: NOT
12949: IFFALSE 12953
// continue ;
12951: GO 12748
// HackLink ( i , tmp ) ;
12953: LD_VAR 0 1
12957: PPUSH
12958: LD_VAR 0 2
12962: PPUSH
12963: CALL 13110 0 2
// end ;
12967: GO 12748
12969: POP
12970: POP
// end ;
12971: PPOPN 2
12973: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
12978: PPUSH
// if not hack in hackTanks then
12979: LD_VAR 0 1
12983: PUSH
12984: LD_EXP 38
12988: IN
12989: NOT
12990: IFFALSE 12994
// exit ;
12992: GO 13105
// index := GetElementIndex ( hackTanks , hack ) ;
12994: LD_ADDR_VAR 0 4
12998: PUSH
12999: LD_EXP 38
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL 35089 0 2
13013: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13014: LD_EXP 39
13018: PUSH
13019: LD_VAR 0 4
13023: ARRAY
13024: IFFALSE 13105
// begin for i in hackTanksCaptured [ index ] do
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_EXP 39
13035: PUSH
13036: LD_VAR 0 4
13040: ARRAY
13041: PUSH
13042: FOR_IN
13043: IFFALSE 13069
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13045: LD_VAR 0 3
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PPUSH
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 2
13061: ARRAY
13062: PPUSH
13063: CALL_OW 235
13067: GO 13042
13069: POP
13070: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13071: LD_ADDR_EXP 39
13075: PUSH
13076: LD_EXP 39
13080: PPUSH
13081: LD_VAR 0 4
13085: PPUSH
13086: EMPTY
13087: PPUSH
13088: CALL_OW 1
13092: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13093: LD_VAR 0 1
13097: PPUSH
13098: LD_INT 0
13100: PPUSH
13101: CALL_OW 505
// end ; end ;
13105: LD_VAR 0 2
13109: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
13114: PPUSH
// if not hack in hackTanks or not vehicles then
13115: LD_VAR 0 1
13119: PUSH
13120: LD_EXP 38
13124: IN
13125: NOT
13126: PUSH
13127: LD_VAR 0 2
13131: NOT
13132: OR
13133: IFFALSE 13137
// exit ;
13135: GO 13412
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: LD_VAR 0 1
13146: PPUSH
13147: LD_VAR 0 2
13151: PPUSH
13152: LD_INT 1
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL 35739 0 4
13162: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13163: LD_ADDR_VAR 0 5
13167: PUSH
13168: LD_EXP 38
13172: PPUSH
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL 35089 0 2
13182: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13183: LD_EXP 39
13187: PUSH
13188: LD_VAR 0 5
13192: ARRAY
13193: PUSH
13194: LD_EXP 40
13198: LESS
13199: IFFALSE 13388
// begin for i := 1 to vehicles do
13201: LD_ADDR_VAR 0 4
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_VAR 0 2
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13386
// begin if hackTanksCaptured [ index ] = hackLimit then
13219: LD_EXP 39
13223: PUSH
13224: LD_VAR 0 5
13228: ARRAY
13229: PUSH
13230: LD_EXP 40
13234: EQUAL
13235: IFFALSE 13239
// break ;
13237: GO 13386
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13239: LD_ADDR_EXP 42
13243: PUSH
13244: LD_EXP 42
13248: PPUSH
13249: LD_VAR 0 5
13253: PPUSH
13254: LD_EXP 42
13258: PUSH
13259: LD_VAR 0 5
13263: ARRAY
13264: PUSH
13265: LD_INT 1
13267: PLUS
13268: PPUSH
13269: CALL_OW 1
13273: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13274: LD_ADDR_EXP 39
13278: PUSH
13279: LD_EXP 39
13283: PPUSH
13284: LD_VAR 0 5
13288: PUSH
13289: LD_EXP 39
13293: PUSH
13294: LD_VAR 0 5
13298: ARRAY
13299: PUSH
13300: LD_INT 1
13302: PLUS
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: LD_VAR 0 2
13312: PUSH
13313: LD_VAR 0 4
13317: ARRAY
13318: PUSH
13319: LD_VAR 0 2
13323: PUSH
13324: LD_VAR 0 4
13328: ARRAY
13329: PPUSH
13330: CALL_OW 255
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL 35304 0 3
13343: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13344: LD_VAR 0 2
13348: PUSH
13349: LD_VAR 0 4
13353: ARRAY
13354: PPUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 255
13364: PPUSH
13365: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13369: LD_VAR 0 2
13373: PUSH
13374: LD_VAR 0 4
13378: ARRAY
13379: PPUSH
13380: CALL_OW 141
// end ;
13384: GO 13216
13386: POP
13387: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_EXP 39
13397: PUSH
13398: LD_VAR 0 5
13402: ARRAY
13403: PUSH
13404: LD_INT 0
13406: PLUS
13407: PPUSH
13408: CALL_OW 505
// end ;
13412: LD_VAR 0 3
13416: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
// if not hack in hackTanks then
13423: LD_VAR 0 1
13427: PUSH
13428: LD_EXP 38
13432: IN
13433: NOT
13434: IFFALSE 13438
// exit ;
13436: GO 13678
// index := GetElementIndex ( hackTanks , hack ) ;
13438: LD_ADDR_VAR 0 4
13442: PUSH
13443: LD_EXP 38
13447: PPUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL 35089 0 2
13457: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13458: LD_ADDR_VAR 0 3
13462: PUSH
13463: DOUBLE
13464: LD_EXP 39
13468: PUSH
13469: LD_VAR 0 4
13473: ARRAY
13474: INC
13475: ST_TO_ADDR
13476: LD_INT 1
13478: PUSH
13479: FOR_DOWNTO
13480: IFFALSE 13652
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13482: LD_ADDR_VAR 0 5
13486: PUSH
13487: LD_EXP 39
13491: PUSH
13492: LD_VAR 0 4
13496: ARRAY
13497: PUSH
13498: LD_VAR 0 3
13502: ARRAY
13503: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13504: LD_VAR 0 5
13508: PUSH
13509: LD_INT 1
13511: ARRAY
13512: PPUSH
13513: CALL_OW 302
13517: NOT
13518: PUSH
13519: LD_VAR 0 5
13523: PUSH
13524: LD_INT 1
13526: ARRAY
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 255
13542: NONEQUAL
13543: OR
13544: IFFALSE 13650
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13546: LD_VAR 0 5
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: CALL_OW 305
13559: PUSH
13560: LD_VAR 0 5
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: CALL_OW 255
13573: PUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 255
13583: EQUAL
13584: AND
13585: IFFALSE 13609
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13587: LD_VAR 0 5
13591: PUSH
13592: LD_INT 1
13594: ARRAY
13595: PPUSH
13596: LD_VAR 0 5
13600: PUSH
13601: LD_INT 2
13603: ARRAY
13604: PPUSH
13605: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13609: LD_ADDR_EXP 39
13613: PUSH
13614: LD_EXP 39
13618: PPUSH
13619: LD_VAR 0 4
13623: PPUSH
13624: LD_EXP 39
13628: PUSH
13629: LD_VAR 0 4
13633: ARRAY
13634: PPUSH
13635: LD_VAR 0 3
13639: PPUSH
13640: CALL_OW 3
13644: PPUSH
13645: CALL_OW 1
13649: ST_TO_ADDR
// end ; end ;
13650: GO 13479
13652: POP
13653: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: LD_EXP 39
13663: PUSH
13664: LD_VAR 0 4
13668: ARRAY
13669: PUSH
13670: LD_INT 0
13672: PLUS
13673: PPUSH
13674: CALL_OW 505
// end ;
13678: LD_VAR 0 2
13682: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// if not hack in hackTanks then
13689: LD_VAR 0 1
13693: PUSH
13694: LD_EXP 38
13698: IN
13699: NOT
13700: IFFALSE 13704
// exit ;
13702: GO 13789
// index := GetElementIndex ( hackTanks , hack ) ;
13704: LD_ADDR_VAR 0 5
13708: PUSH
13709: LD_EXP 38
13713: PPUSH
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL 35089 0 2
13723: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13724: LD_ADDR_VAR 0 4
13728: PUSH
13729: DOUBLE
13730: LD_INT 1
13732: DEC
13733: ST_TO_ADDR
13734: LD_EXP 39
13738: PUSH
13739: LD_VAR 0 5
13743: ARRAY
13744: PUSH
13745: FOR_TO
13746: IFFALSE 13787
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13748: LD_EXP 39
13752: PUSH
13753: LD_VAR 0 5
13757: ARRAY
13758: PUSH
13759: LD_VAR 0 4
13763: ARRAY
13764: PUSH
13765: LD_INT 1
13767: ARRAY
13768: PUSH
13769: LD_VAR 0 2
13773: EQUAL
13774: IFFALSE 13785
// KillUnit ( vehicle ) ;
13776: LD_VAR 0 2
13780: PPUSH
13781: CALL_OW 66
13785: GO 13745
13787: POP
13788: POP
// end ;
13789: LD_VAR 0 3
13793: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13794: LD_EXP 43
13798: NOT
13799: IFFALSE 13834
13801: GO 13803
13803: DISABLE
// begin initMiner := true ;
13804: LD_ADDR_EXP 43
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// minersList := [ ] ;
13812: LD_ADDR_EXP 44
13816: PUSH
13817: EMPTY
13818: ST_TO_ADDR
// minerMinesList := [ ] ;
13819: LD_ADDR_EXP 45
13823: PUSH
13824: EMPTY
13825: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13826: LD_ADDR_EXP 46
13830: PUSH
13831: LD_INT 5
13833: ST_TO_ADDR
// end ;
13834: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13835: LD_EXP 43
13839: PUSH
13840: LD_INT 34
13842: PUSH
13843: LD_EXP 112
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 69
13856: AND
13857: IFFALSE 14320
13859: GO 13861
13861: DISABLE
13862: LD_INT 0
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
// begin enable ;
13868: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13869: LD_ADDR_VAR 0 1
13873: PUSH
13874: LD_INT 34
13876: PUSH
13877: LD_EXP 112
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 69
13890: PUSH
13891: FOR_IN
13892: IFFALSE 13964
// begin if not i in minersList then
13894: LD_VAR 0 1
13898: PUSH
13899: LD_EXP 44
13903: IN
13904: NOT
13905: IFFALSE 13962
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13907: LD_ADDR_EXP 44
13911: PUSH
13912: LD_EXP 44
13916: PPUSH
13917: LD_EXP 44
13921: PUSH
13922: LD_INT 1
13924: PLUS
13925: PPUSH
13926: LD_VAR 0 1
13930: PPUSH
13931: CALL_OW 1
13935: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13936: LD_ADDR_EXP 45
13940: PUSH
13941: LD_EXP 45
13945: PPUSH
13946: LD_EXP 45
13950: PUSH
13951: LD_INT 1
13953: PLUS
13954: PPUSH
13955: EMPTY
13956: PPUSH
13957: CALL_OW 1
13961: ST_TO_ADDR
// end end ;
13962: GO 13891
13964: POP
13965: POP
// for i := minerMinesList downto 1 do
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: DOUBLE
13972: LD_EXP 45
13976: INC
13977: ST_TO_ADDR
13978: LD_INT 1
13980: PUSH
13981: FOR_DOWNTO
13982: IFFALSE 14318
// begin if IsLive ( minersList [ i ] ) then
13984: LD_EXP 44
13988: PUSH
13989: LD_VAR 0 1
13993: ARRAY
13994: PPUSH
13995: CALL_OW 300
13999: IFFALSE 14027
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14001: LD_EXP 44
14005: PUSH
14006: LD_VAR 0 1
14010: ARRAY
14011: PPUSH
14012: LD_EXP 45
14016: PUSH
14017: LD_VAR 0 1
14021: ARRAY
14022: PPUSH
14023: CALL_OW 505
// if not minerMinesList [ i ] then
14027: LD_EXP 45
14031: PUSH
14032: LD_VAR 0 1
14036: ARRAY
14037: NOT
14038: IFFALSE 14042
// continue ;
14040: GO 13981
// for j := minerMinesList [ i ] downto 1 do
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: DOUBLE
14048: LD_EXP 45
14052: PUSH
14053: LD_VAR 0 1
14057: ARRAY
14058: INC
14059: ST_TO_ADDR
14060: LD_INT 1
14062: PUSH
14063: FOR_DOWNTO
14064: IFFALSE 14314
// begin side := GetSide ( minersList [ i ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_EXP 44
14075: PUSH
14076: LD_VAR 0 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 255
14086: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14087: LD_ADDR_VAR 0 4
14091: PUSH
14092: LD_EXP 45
14096: PUSH
14097: LD_VAR 0 1
14101: ARRAY
14102: PUSH
14103: LD_VAR 0 2
14107: ARRAY
14108: PUSH
14109: LD_INT 1
14111: ARRAY
14112: PPUSH
14113: LD_EXP 45
14117: PUSH
14118: LD_VAR 0 1
14122: ARRAY
14123: PUSH
14124: LD_VAR 0 2
14128: ARRAY
14129: PUSH
14130: LD_INT 2
14132: ARRAY
14133: PPUSH
14134: CALL_OW 428
14138: ST_TO_ADDR
// if not tmp then
14139: LD_VAR 0 4
14143: NOT
14144: IFFALSE 14148
// continue ;
14146: GO 14063
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14148: LD_VAR 0 4
14152: PUSH
14153: LD_INT 81
14155: PUSH
14156: LD_VAR 0 3
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 69
14169: IN
14170: PUSH
14171: LD_EXP 45
14175: PUSH
14176: LD_VAR 0 1
14180: ARRAY
14181: PUSH
14182: LD_VAR 0 2
14186: ARRAY
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: PPUSH
14192: LD_EXP 45
14196: PUSH
14197: LD_VAR 0 1
14201: ARRAY
14202: PUSH
14203: LD_VAR 0 2
14207: ARRAY
14208: PUSH
14209: LD_INT 2
14211: ARRAY
14212: PPUSH
14213: CALL_OW 458
14217: AND
14218: IFFALSE 14312
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14220: LD_EXP 45
14224: PUSH
14225: LD_VAR 0 1
14229: ARRAY
14230: PUSH
14231: LD_VAR 0 2
14235: ARRAY
14236: PUSH
14237: LD_INT 1
14239: ARRAY
14240: PPUSH
14241: LD_EXP 45
14245: PUSH
14246: LD_VAR 0 1
14250: ARRAY
14251: PUSH
14252: LD_VAR 0 2
14256: ARRAY
14257: PUSH
14258: LD_INT 2
14260: ARRAY
14261: PPUSH
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14271: LD_ADDR_EXP 45
14275: PUSH
14276: LD_EXP 45
14280: PPUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_EXP 45
14290: PUSH
14291: LD_VAR 0 1
14295: ARRAY
14296: PPUSH
14297: LD_VAR 0 2
14301: PPUSH
14302: CALL_OW 3
14306: PPUSH
14307: CALL_OW 1
14311: ST_TO_ADDR
// end ; end ;
14312: GO 14063
14314: POP
14315: POP
// end ;
14316: GO 13981
14318: POP
14319: POP
// end ;
14320: PPOPN 4
14322: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14323: LD_INT 0
14325: PPUSH
14326: PPUSH
// result := false ;
14327: LD_ADDR_VAR 0 4
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14335: LD_VAR 0 1
14339: PPUSH
14340: CALL_OW 264
14344: PUSH
14345: LD_EXP 112
14349: EQUAL
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14595
// index := GetElementIndex ( minersList , unit ) ;
14355: LD_ADDR_VAR 0 5
14359: PUSH
14360: LD_EXP 44
14364: PPUSH
14365: LD_VAR 0 1
14369: PPUSH
14370: CALL 35089 0 2
14374: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14375: LD_EXP 45
14379: PUSH
14380: LD_VAR 0 5
14384: ARRAY
14385: PUSH
14386: LD_EXP 46
14390: GREATEREQUAL
14391: IFFALSE 14395
// exit ;
14393: GO 14595
// ComMoveXY ( unit , x , y ) ;
14395: LD_VAR 0 1
14399: PPUSH
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14414: LD_INT 35
14416: PPUSH
14417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14421: LD_VAR 0 1
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL 65808 0 3
14440: NOT
14441: PUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 314
14451: AND
14452: IFFALSE 14456
// exit ;
14454: GO 14595
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14456: LD_VAR 0 2
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: CALL_OW 428
14470: PUSH
14471: LD_VAR 0 1
14475: EQUAL
14476: PUSH
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 314
14486: NOT
14487: AND
14488: IFFALSE 14414
// PlaySoundXY ( x , y , PlantMine ) ;
14490: LD_VAR 0 2
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_STRING PlantMine
14502: PPUSH
14503: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14507: LD_VAR 0 2
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 255
14526: PPUSH
14527: LD_INT 0
14529: PPUSH
14530: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14534: LD_ADDR_EXP 45
14538: PUSH
14539: LD_EXP 45
14543: PPUSH
14544: LD_VAR 0 5
14548: PUSH
14549: LD_EXP 45
14553: PUSH
14554: LD_VAR 0 5
14558: ARRAY
14559: PUSH
14560: LD_INT 1
14562: PLUS
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PPUSH
14568: LD_VAR 0 2
14572: PUSH
14573: LD_VAR 0 3
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PPUSH
14582: CALL 35304 0 3
14586: ST_TO_ADDR
// result := true ;
14587: LD_ADDR_VAR 0 4
14591: PUSH
14592: LD_INT 1
14594: ST_TO_ADDR
// end ;
14595: LD_VAR 0 4
14599: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
// if not unit in minersList then
14605: LD_VAR 0 1
14609: PUSH
14610: LD_EXP 44
14614: IN
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 15012
// index := GetElementIndex ( minersList , unit ) ;
14620: LD_ADDR_VAR 0 6
14624: PUSH
14625: LD_EXP 44
14629: PPUSH
14630: LD_VAR 0 1
14634: PPUSH
14635: CALL 35089 0 2
14639: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14640: LD_ADDR_VAR 0 5
14644: PUSH
14645: DOUBLE
14646: LD_EXP 45
14650: PUSH
14651: LD_VAR 0 6
14655: ARRAY
14656: INC
14657: ST_TO_ADDR
14658: LD_INT 1
14660: PUSH
14661: FOR_DOWNTO
14662: IFFALSE 14823
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14664: LD_EXP 45
14668: PUSH
14669: LD_VAR 0 6
14673: ARRAY
14674: PUSH
14675: LD_VAR 0 5
14679: ARRAY
14680: PUSH
14681: LD_INT 1
14683: ARRAY
14684: PUSH
14685: LD_VAR 0 2
14689: EQUAL
14690: PUSH
14691: LD_EXP 45
14695: PUSH
14696: LD_VAR 0 6
14700: ARRAY
14701: PUSH
14702: LD_VAR 0 5
14706: ARRAY
14707: PUSH
14708: LD_INT 2
14710: ARRAY
14711: PUSH
14712: LD_VAR 0 3
14716: EQUAL
14717: AND
14718: IFFALSE 14821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14720: LD_EXP 45
14724: PUSH
14725: LD_VAR 0 6
14729: ARRAY
14730: PUSH
14731: LD_VAR 0 5
14735: ARRAY
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: LD_EXP 45
14745: PUSH
14746: LD_VAR 0 6
14750: ARRAY
14751: PUSH
14752: LD_VAR 0 5
14756: ARRAY
14757: PUSH
14758: LD_INT 2
14760: ARRAY
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 255
14771: PPUSH
14772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14776: LD_ADDR_EXP 45
14780: PUSH
14781: LD_EXP 45
14785: PPUSH
14786: LD_VAR 0 6
14790: PPUSH
14791: LD_EXP 45
14795: PUSH
14796: LD_VAR 0 6
14800: ARRAY
14801: PPUSH
14802: LD_VAR 0 5
14806: PPUSH
14807: CALL_OW 3
14811: PPUSH
14812: CALL_OW 1
14816: ST_TO_ADDR
// exit ;
14817: POP
14818: POP
14819: GO 15012
// end ; end ;
14821: GO 14661
14823: POP
14824: POP
// for i := minerMinesList [ index ] downto 1 do
14825: LD_ADDR_VAR 0 5
14829: PUSH
14830: DOUBLE
14831: LD_EXP 45
14835: PUSH
14836: LD_VAR 0 6
14840: ARRAY
14841: INC
14842: ST_TO_ADDR
14843: LD_INT 1
14845: PUSH
14846: FOR_DOWNTO
14847: IFFALSE 15010
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14849: LD_EXP 45
14853: PUSH
14854: LD_VAR 0 6
14858: ARRAY
14859: PUSH
14860: LD_VAR 0 5
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: LD_EXP 45
14874: PUSH
14875: LD_VAR 0 6
14879: ARRAY
14880: PUSH
14881: LD_VAR 0 5
14885: ARRAY
14886: PUSH
14887: LD_INT 2
14889: ARRAY
14890: PPUSH
14891: LD_VAR 0 2
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: CALL_OW 298
14905: PUSH
14906: LD_INT 6
14908: LESS
14909: IFFALSE 15008
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14911: LD_EXP 45
14915: PUSH
14916: LD_VAR 0 6
14920: ARRAY
14921: PUSH
14922: LD_VAR 0 5
14926: ARRAY
14927: PUSH
14928: LD_INT 1
14930: ARRAY
14931: PPUSH
14932: LD_EXP 45
14936: PUSH
14937: LD_VAR 0 6
14941: ARRAY
14942: PUSH
14943: LD_VAR 0 5
14947: ARRAY
14948: PUSH
14949: LD_INT 2
14951: ARRAY
14952: PPUSH
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 255
14962: PPUSH
14963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14967: LD_ADDR_EXP 45
14971: PUSH
14972: LD_EXP 45
14976: PPUSH
14977: LD_VAR 0 6
14981: PPUSH
14982: LD_EXP 45
14986: PUSH
14987: LD_VAR 0 6
14991: ARRAY
14992: PPUSH
14993: LD_VAR 0 5
14997: PPUSH
14998: CALL_OW 3
15002: PPUSH
15003: CALL_OW 1
15007: ST_TO_ADDR
// end ; end ;
15008: GO 14846
15010: POP
15011: POP
// end ;
15012: LD_VAR 0 4
15016: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15028: LD_VAR 0 1
15032: PPUSH
15033: CALL_OW 264
15037: PUSH
15038: LD_EXP 112
15042: EQUAL
15043: NOT
15044: PUSH
15045: LD_VAR 0 1
15049: PUSH
15050: LD_EXP 44
15054: IN
15055: NOT
15056: OR
15057: IFFALSE 15061
// exit ;
15059: GO 15383
// index := GetElementIndex ( minersList , unit ) ;
15061: LD_ADDR_VAR 0 6
15065: PUSH
15066: LD_EXP 44
15070: PPUSH
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL 35089 0 2
15080: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15081: LD_ADDR_VAR 0 8
15085: PUSH
15086: LD_EXP 46
15090: PUSH
15091: LD_EXP 45
15095: PUSH
15096: LD_VAR 0 6
15100: ARRAY
15101: MINUS
15102: ST_TO_ADDR
// if not minesFreeAmount then
15103: LD_VAR 0 8
15107: NOT
15108: IFFALSE 15112
// exit ;
15110: GO 15383
// tmp := [ ] ;
15112: LD_ADDR_VAR 0 7
15116: PUSH
15117: EMPTY
15118: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15119: LD_ADDR_VAR 0 5
15123: PUSH
15124: DOUBLE
15125: LD_INT 1
15127: DEC
15128: ST_TO_ADDR
15129: LD_VAR 0 8
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15330
// begin _d := rand ( 0 , 5 ) ;
15137: LD_ADDR_VAR 0 11
15141: PUSH
15142: LD_INT 0
15144: PPUSH
15145: LD_INT 5
15147: PPUSH
15148: CALL_OW 12
15152: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15153: LD_ADDR_VAR 0 12
15157: PUSH
15158: LD_INT 2
15160: PPUSH
15161: LD_INT 6
15163: PPUSH
15164: CALL_OW 12
15168: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15169: LD_ADDR_VAR 0 9
15173: PUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 11
15183: PPUSH
15184: LD_VAR 0 12
15188: PPUSH
15189: CALL_OW 272
15193: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15194: LD_ADDR_VAR 0 10
15198: PUSH
15199: LD_VAR 0 3
15203: PPUSH
15204: LD_VAR 0 11
15208: PPUSH
15209: LD_VAR 0 12
15213: PPUSH
15214: CALL_OW 273
15218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15219: LD_VAR 0 9
15223: PPUSH
15224: LD_VAR 0 10
15228: PPUSH
15229: CALL_OW 488
15233: PUSH
15234: LD_VAR 0 9
15238: PUSH
15239: LD_VAR 0 10
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_VAR 0 7
15252: IN
15253: NOT
15254: AND
15255: PUSH
15256: LD_VAR 0 9
15260: PPUSH
15261: LD_VAR 0 10
15265: PPUSH
15266: CALL_OW 458
15270: NOT
15271: AND
15272: IFFALSE 15314
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15274: LD_ADDR_VAR 0 7
15278: PUSH
15279: LD_VAR 0 7
15283: PPUSH
15284: LD_VAR 0 7
15288: PUSH
15289: LD_INT 1
15291: PLUS
15292: PPUSH
15293: LD_VAR 0 9
15297: PUSH
15298: LD_VAR 0 10
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 1
15311: ST_TO_ADDR
15312: GO 15328
// i := i - 1 ;
15314: LD_ADDR_VAR 0 5
15318: PUSH
15319: LD_VAR 0 5
15323: PUSH
15324: LD_INT 1
15326: MINUS
15327: ST_TO_ADDR
// end ;
15328: GO 15134
15330: POP
15331: POP
// for i in tmp do
15332: LD_ADDR_VAR 0 5
15336: PUSH
15337: LD_VAR 0 7
15341: PUSH
15342: FOR_IN
15343: IFFALSE 15381
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15345: LD_VAR 0 1
15349: PPUSH
15350: LD_VAR 0 5
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: PPUSH
15359: LD_VAR 0 5
15363: PUSH
15364: LD_INT 2
15366: ARRAY
15367: PPUSH
15368: CALL 14323 0 3
15372: NOT
15373: IFFALSE 15379
// exit ;
15375: POP
15376: POP
15377: GO 15383
15379: GO 15342
15381: POP
15382: POP
// end ;
15383: LD_VAR 0 4
15387: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
15388: LD_INT 0
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
// if not GetClass ( unit ) = class_sniper then
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 257
15406: PUSH
15407: LD_INT 5
15409: EQUAL
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 15803
// dist := 8 ;
15415: LD_ADDR_VAR 0 5
15419: PUSH
15420: LD_INT 8
15422: ST_TO_ADDR
// viewRange := 12 ;
15423: LD_ADDR_VAR 0 7
15427: PUSH
15428: LD_INT 12
15430: ST_TO_ADDR
// side := GetSide ( unit ) ;
15431: LD_ADDR_VAR 0 6
15435: PUSH
15436: LD_VAR 0 1
15440: PPUSH
15441: CALL_OW 255
15445: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15446: LD_INT 61
15448: PPUSH
15449: LD_VAR 0 6
15453: PPUSH
15454: CALL_OW 321
15458: PUSH
15459: LD_INT 2
15461: EQUAL
15462: IFFALSE 15472
// viewRange := 16 ;
15464: LD_ADDR_VAR 0 7
15468: PUSH
15469: LD_INT 16
15471: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15472: LD_VAR 0 1
15476: PPUSH
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: CALL_OW 297
15491: PUSH
15492: LD_VAR 0 5
15496: GREATER
15497: IFFALSE 15576
// begin ComMoveXY ( unit , x , y ) ;
15499: LD_VAR 0 1
15503: PPUSH
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15518: LD_INT 35
15520: PPUSH
15521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15525: LD_VAR 0 1
15529: PPUSH
15530: LD_VAR 0 2
15534: PPUSH
15535: LD_VAR 0 3
15539: PPUSH
15540: CALL 65808 0 3
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 15803
// until GetDistUnitXY ( unit , x , y ) < dist ;
15549: LD_VAR 0 1
15553: PPUSH
15554: LD_VAR 0 2
15558: PPUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: CALL_OW 297
15568: PUSH
15569: LD_VAR 0 5
15573: LESS
15574: IFFALSE 15518
// end ; ComTurnXY ( unit , x , y ) ;
15576: LD_VAR 0 1
15580: PPUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_VAR 0 3
15590: PPUSH
15591: CALL_OW 118
// wait ( 5 ) ;
15595: LD_INT 5
15597: PPUSH
15598: CALL_OW 67
// _d := GetDir ( unit ) ;
15602: LD_ADDR_VAR 0 10
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 254
15616: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
15617: LD_ADDR_VAR 0 8
15621: PUSH
15622: LD_VAR 0 1
15626: PPUSH
15627: CALL_OW 250
15631: PPUSH
15632: LD_VAR 0 10
15636: PPUSH
15637: LD_VAR 0 5
15641: PPUSH
15642: CALL_OW 272
15646: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15647: LD_ADDR_VAR 0 9
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 251
15661: PPUSH
15662: LD_VAR 0 10
15666: PPUSH
15667: LD_VAR 0 5
15671: PPUSH
15672: CALL_OW 273
15676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15677: LD_VAR 0 8
15681: PPUSH
15682: LD_VAR 0 9
15686: PPUSH
15687: CALL_OW 488
15691: NOT
15692: IFFALSE 15696
// exit ;
15694: GO 15803
// ComAnimCustom ( unit , 1 ) ;
15696: LD_VAR 0 1
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15708: LD_VAR 0 8
15712: PPUSH
15713: LD_VAR 0 9
15717: PPUSH
15718: LD_VAR 0 6
15722: PPUSH
15723: LD_VAR 0 7
15727: PPUSH
15728: CALL_OW 330
// repeat wait ( 1 ) ;
15732: LD_INT 1
15734: PPUSH
15735: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 316
15748: PUSH
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 314
15758: OR
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 302
15769: NOT
15770: OR
15771: PUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 301
15781: OR
15782: IFFALSE 15732
// RemoveSeeing ( _x , _y , side ) ;
15784: LD_VAR 0 8
15788: PPUSH
15789: LD_VAR 0 9
15793: PPUSH
15794: LD_VAR 0 6
15798: PPUSH
15799: CALL_OW 331
// end ; end_of_file
15803: LD_VAR 0 4
15807: RET
// every 0 0$1 do
15808: GO 15810
15810: DISABLE
// begin enable ;
15811: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15812: LD_STRING updateTimer(
15814: PUSH
15815: LD_OWVAR 1
15819: STR
15820: PUSH
15821: LD_STRING );
15823: STR
15824: PPUSH
15825: CALL_OW 559
// end ;
15829: END
// export function SOS_MapStart ( ) ; begin
15830: LD_INT 0
15832: PPUSH
// if streamModeActive then
15833: LD_EXP 47
15837: IFFALSE 15846
// DefineStreamItems ( true ) ;
15839: LD_INT 1
15841: PPUSH
15842: CALL 17496 0 1
// UpdateFactoryWaypoints ( ) ;
15846: CALL 12106 0 0
// end ;
15850: LD_VAR 0 1
15854: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15855: LD_INT 0
15857: PPUSH
// if p2 = 100 then
15858: LD_VAR 0 2
15862: PUSH
15863: LD_INT 100
15865: EQUAL
15866: IFFALSE 16869
// begin if not StreamModeActive then
15868: LD_EXP 47
15872: NOT
15873: IFFALSE 15883
// StreamModeActive := true ;
15875: LD_ADDR_EXP 47
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// if p3 = 0 then
15883: LD_VAR 0 3
15887: PUSH
15888: LD_INT 0
15890: EQUAL
15891: IFFALSE 15897
// InitStreamMode ;
15893: CALL 17032 0 0
// if p3 = 1 then
15897: LD_VAR 0 3
15901: PUSH
15902: LD_INT 1
15904: EQUAL
15905: IFFALSE 15915
// sRocket := true ;
15907: LD_ADDR_EXP 52
15911: PUSH
15912: LD_INT 1
15914: ST_TO_ADDR
// if p3 = 2 then
15915: LD_VAR 0 3
15919: PUSH
15920: LD_INT 2
15922: EQUAL
15923: IFFALSE 15933
// sSpeed := true ;
15925: LD_ADDR_EXP 51
15929: PUSH
15930: LD_INT 1
15932: ST_TO_ADDR
// if p3 = 3 then
15933: LD_VAR 0 3
15937: PUSH
15938: LD_INT 3
15940: EQUAL
15941: IFFALSE 15951
// sEngine := true ;
15943: LD_ADDR_EXP 53
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// if p3 = 4 then
15951: LD_VAR 0 3
15955: PUSH
15956: LD_INT 4
15958: EQUAL
15959: IFFALSE 15969
// sSpec := true ;
15961: LD_ADDR_EXP 50
15965: PUSH
15966: LD_INT 1
15968: ST_TO_ADDR
// if p3 = 5 then
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 5
15976: EQUAL
15977: IFFALSE 15987
// sLevel := true ;
15979: LD_ADDR_EXP 54
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
// if p3 = 6 then
15987: LD_VAR 0 3
15991: PUSH
15992: LD_INT 6
15994: EQUAL
15995: IFFALSE 16005
// sArmoury := true ;
15997: LD_ADDR_EXP 55
16001: PUSH
16002: LD_INT 1
16004: ST_TO_ADDR
// if p3 = 7 then
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// sRadar := true ;
16015: LD_ADDR_EXP 56
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if p3 = 8 then
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 8
16030: EQUAL
16031: IFFALSE 16041
// sBunker := true ;
16033: LD_ADDR_EXP 57
16037: PUSH
16038: LD_INT 1
16040: ST_TO_ADDR
// if p3 = 9 then
16041: LD_VAR 0 3
16045: PUSH
16046: LD_INT 9
16048: EQUAL
16049: IFFALSE 16059
// sHack := true ;
16051: LD_ADDR_EXP 58
16055: PUSH
16056: LD_INT 1
16058: ST_TO_ADDR
// if p3 = 10 then
16059: LD_VAR 0 3
16063: PUSH
16064: LD_INT 10
16066: EQUAL
16067: IFFALSE 16077
// sFire := true ;
16069: LD_ADDR_EXP 59
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// if p3 = 11 then
16077: LD_VAR 0 3
16081: PUSH
16082: LD_INT 11
16084: EQUAL
16085: IFFALSE 16095
// sRefresh := true ;
16087: LD_ADDR_EXP 60
16091: PUSH
16092: LD_INT 1
16094: ST_TO_ADDR
// if p3 = 12 then
16095: LD_VAR 0 3
16099: PUSH
16100: LD_INT 12
16102: EQUAL
16103: IFFALSE 16113
// sExp := true ;
16105: LD_ADDR_EXP 61
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// if p3 = 13 then
16113: LD_VAR 0 3
16117: PUSH
16118: LD_INT 13
16120: EQUAL
16121: IFFALSE 16131
// sDepot := true ;
16123: LD_ADDR_EXP 62
16127: PUSH
16128: LD_INT 1
16130: ST_TO_ADDR
// if p3 = 14 then
16131: LD_VAR 0 3
16135: PUSH
16136: LD_INT 14
16138: EQUAL
16139: IFFALSE 16149
// sFlag := true ;
16141: LD_ADDR_EXP 63
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// if p3 = 15 then
16149: LD_VAR 0 3
16153: PUSH
16154: LD_INT 15
16156: EQUAL
16157: IFFALSE 16167
// sKamikadze := true ;
16159: LD_ADDR_EXP 71
16163: PUSH
16164: LD_INT 1
16166: ST_TO_ADDR
// if p3 = 16 then
16167: LD_VAR 0 3
16171: PUSH
16172: LD_INT 16
16174: EQUAL
16175: IFFALSE 16185
// sTroll := true ;
16177: LD_ADDR_EXP 72
16181: PUSH
16182: LD_INT 1
16184: ST_TO_ADDR
// if p3 = 17 then
16185: LD_VAR 0 3
16189: PUSH
16190: LD_INT 17
16192: EQUAL
16193: IFFALSE 16203
// sSlow := true ;
16195: LD_ADDR_EXP 73
16199: PUSH
16200: LD_INT 1
16202: ST_TO_ADDR
// if p3 = 18 then
16203: LD_VAR 0 3
16207: PUSH
16208: LD_INT 18
16210: EQUAL
16211: IFFALSE 16221
// sLack := true ;
16213: LD_ADDR_EXP 74
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// if p3 = 19 then
16221: LD_VAR 0 3
16225: PUSH
16226: LD_INT 19
16228: EQUAL
16229: IFFALSE 16239
// sTank := true ;
16231: LD_ADDR_EXP 76
16235: PUSH
16236: LD_INT 1
16238: ST_TO_ADDR
// if p3 = 20 then
16239: LD_VAR 0 3
16243: PUSH
16244: LD_INT 20
16246: EQUAL
16247: IFFALSE 16257
// sRemote := true ;
16249: LD_ADDR_EXP 77
16253: PUSH
16254: LD_INT 1
16256: ST_TO_ADDR
// if p3 = 21 then
16257: LD_VAR 0 3
16261: PUSH
16262: LD_INT 21
16264: EQUAL
16265: IFFALSE 16275
// sPowell := true ;
16267: LD_ADDR_EXP 78
16271: PUSH
16272: LD_INT 1
16274: ST_TO_ADDR
// if p3 = 22 then
16275: LD_VAR 0 3
16279: PUSH
16280: LD_INT 22
16282: EQUAL
16283: IFFALSE 16293
// sTeleport := true ;
16285: LD_ADDR_EXP 81
16289: PUSH
16290: LD_INT 1
16292: ST_TO_ADDR
// if p3 = 23 then
16293: LD_VAR 0 3
16297: PUSH
16298: LD_INT 23
16300: EQUAL
16301: IFFALSE 16311
// sOilTower := true ;
16303: LD_ADDR_EXP 83
16307: PUSH
16308: LD_INT 1
16310: ST_TO_ADDR
// if p3 = 24 then
16311: LD_VAR 0 3
16315: PUSH
16316: LD_INT 24
16318: EQUAL
16319: IFFALSE 16329
// sShovel := true ;
16321: LD_ADDR_EXP 84
16325: PUSH
16326: LD_INT 1
16328: ST_TO_ADDR
// if p3 = 25 then
16329: LD_VAR 0 3
16333: PUSH
16334: LD_INT 25
16336: EQUAL
16337: IFFALSE 16347
// sSheik := true ;
16339: LD_ADDR_EXP 85
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// if p3 = 26 then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 26
16354: EQUAL
16355: IFFALSE 16365
// sEarthquake := true ;
16357: LD_ADDR_EXP 87
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// if p3 = 27 then
16365: LD_VAR 0 3
16369: PUSH
16370: LD_INT 27
16372: EQUAL
16373: IFFALSE 16383
// sAI := true ;
16375: LD_ADDR_EXP 88
16379: PUSH
16380: LD_INT 1
16382: ST_TO_ADDR
// if p3 = 28 then
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 28
16390: EQUAL
16391: IFFALSE 16401
// sCargo := true ;
16393: LD_ADDR_EXP 91
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// if p3 = 29 then
16401: LD_VAR 0 3
16405: PUSH
16406: LD_INT 29
16408: EQUAL
16409: IFFALSE 16419
// sDLaser := true ;
16411: LD_ADDR_EXP 92
16415: PUSH
16416: LD_INT 1
16418: ST_TO_ADDR
// if p3 = 30 then
16419: LD_VAR 0 3
16423: PUSH
16424: LD_INT 30
16426: EQUAL
16427: IFFALSE 16437
// sExchange := true ;
16429: LD_ADDR_EXP 93
16433: PUSH
16434: LD_INT 1
16436: ST_TO_ADDR
// if p3 = 31 then
16437: LD_VAR 0 3
16441: PUSH
16442: LD_INT 31
16444: EQUAL
16445: IFFALSE 16455
// sFac := true ;
16447: LD_ADDR_EXP 94
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// if p3 = 32 then
16455: LD_VAR 0 3
16459: PUSH
16460: LD_INT 32
16462: EQUAL
16463: IFFALSE 16473
// sPower := true ;
16465: LD_ADDR_EXP 95
16469: PUSH
16470: LD_INT 1
16472: ST_TO_ADDR
// if p3 = 33 then
16473: LD_VAR 0 3
16477: PUSH
16478: LD_INT 33
16480: EQUAL
16481: IFFALSE 16491
// sRandom := true ;
16483: LD_ADDR_EXP 96
16487: PUSH
16488: LD_INT 1
16490: ST_TO_ADDR
// if p3 = 34 then
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 34
16498: EQUAL
16499: IFFALSE 16509
// sShield := true ;
16501: LD_ADDR_EXP 97
16505: PUSH
16506: LD_INT 1
16508: ST_TO_ADDR
// if p3 = 35 then
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 35
16516: EQUAL
16517: IFFALSE 16527
// sTime := true ;
16519: LD_ADDR_EXP 98
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// if p3 = 36 then
16527: LD_VAR 0 3
16531: PUSH
16532: LD_INT 36
16534: EQUAL
16535: IFFALSE 16545
// sTools := true ;
16537: LD_ADDR_EXP 99
16541: PUSH
16542: LD_INT 1
16544: ST_TO_ADDR
// if p3 = 101 then
16545: LD_VAR 0 3
16549: PUSH
16550: LD_INT 101
16552: EQUAL
16553: IFFALSE 16563
// sSold := true ;
16555: LD_ADDR_EXP 64
16559: PUSH
16560: LD_INT 1
16562: ST_TO_ADDR
// if p3 = 102 then
16563: LD_VAR 0 3
16567: PUSH
16568: LD_INT 102
16570: EQUAL
16571: IFFALSE 16581
// sDiff := true ;
16573: LD_ADDR_EXP 65
16577: PUSH
16578: LD_INT 1
16580: ST_TO_ADDR
// if p3 = 103 then
16581: LD_VAR 0 3
16585: PUSH
16586: LD_INT 103
16588: EQUAL
16589: IFFALSE 16599
// sFog := true ;
16591: LD_ADDR_EXP 68
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// if p3 = 104 then
16599: LD_VAR 0 3
16603: PUSH
16604: LD_INT 104
16606: EQUAL
16607: IFFALSE 16617
// sReset := true ;
16609: LD_ADDR_EXP 69
16613: PUSH
16614: LD_INT 1
16616: ST_TO_ADDR
// if p3 = 105 then
16617: LD_VAR 0 3
16621: PUSH
16622: LD_INT 105
16624: EQUAL
16625: IFFALSE 16635
// sSun := true ;
16627: LD_ADDR_EXP 70
16631: PUSH
16632: LD_INT 1
16634: ST_TO_ADDR
// if p3 = 106 then
16635: LD_VAR 0 3
16639: PUSH
16640: LD_INT 106
16642: EQUAL
16643: IFFALSE 16653
// sTiger := true ;
16645: LD_ADDR_EXP 66
16649: PUSH
16650: LD_INT 1
16652: ST_TO_ADDR
// if p3 = 107 then
16653: LD_VAR 0 3
16657: PUSH
16658: LD_INT 107
16660: EQUAL
16661: IFFALSE 16671
// sBomb := true ;
16663: LD_ADDR_EXP 67
16667: PUSH
16668: LD_INT 1
16670: ST_TO_ADDR
// if p3 = 108 then
16671: LD_VAR 0 3
16675: PUSH
16676: LD_INT 108
16678: EQUAL
16679: IFFALSE 16689
// sWound := true ;
16681: LD_ADDR_EXP 75
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// if p3 = 109 then
16689: LD_VAR 0 3
16693: PUSH
16694: LD_INT 109
16696: EQUAL
16697: IFFALSE 16707
// sBetray := true ;
16699: LD_ADDR_EXP 79
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// if p3 = 110 then
16707: LD_VAR 0 3
16711: PUSH
16712: LD_INT 110
16714: EQUAL
16715: IFFALSE 16725
// sContamin := true ;
16717: LD_ADDR_EXP 80
16721: PUSH
16722: LD_INT 1
16724: ST_TO_ADDR
// if p3 = 111 then
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 111
16732: EQUAL
16733: IFFALSE 16743
// sOil := true ;
16735: LD_ADDR_EXP 82
16739: PUSH
16740: LD_INT 1
16742: ST_TO_ADDR
// if p3 = 112 then
16743: LD_VAR 0 3
16747: PUSH
16748: LD_INT 112
16750: EQUAL
16751: IFFALSE 16761
// sStu := true ;
16753: LD_ADDR_EXP 86
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// if p3 = 113 then
16761: LD_VAR 0 3
16765: PUSH
16766: LD_INT 113
16768: EQUAL
16769: IFFALSE 16779
// sBazooka := true ;
16771: LD_ADDR_EXP 89
16775: PUSH
16776: LD_INT 1
16778: ST_TO_ADDR
// if p3 = 114 then
16779: LD_VAR 0 3
16783: PUSH
16784: LD_INT 114
16786: EQUAL
16787: IFFALSE 16797
// sMortar := true ;
16789: LD_ADDR_EXP 90
16793: PUSH
16794: LD_INT 1
16796: ST_TO_ADDR
// if p3 = 115 then
16797: LD_VAR 0 3
16801: PUSH
16802: LD_INT 115
16804: EQUAL
16805: IFFALSE 16815
// sRanger := true ;
16807: LD_ADDR_EXP 100
16811: PUSH
16812: LD_INT 1
16814: ST_TO_ADDR
// if p3 = 116 then
16815: LD_VAR 0 3
16819: PUSH
16820: LD_INT 116
16822: EQUAL
16823: IFFALSE 16833
// sComputer := true ;
16825: LD_ADDR_EXP 101
16829: PUSH
16830: LD_INT 1
16832: ST_TO_ADDR
// if p3 = 117 then
16833: LD_VAR 0 3
16837: PUSH
16838: LD_INT 117
16840: EQUAL
16841: IFFALSE 16851
// s30 := true ;
16843: LD_ADDR_EXP 102
16847: PUSH
16848: LD_INT 1
16850: ST_TO_ADDR
// if p3 = 118 then
16851: LD_VAR 0 3
16855: PUSH
16856: LD_INT 118
16858: EQUAL
16859: IFFALSE 16869
// s60 := true ;
16861: LD_ADDR_EXP 103
16865: PUSH
16866: LD_INT 1
16868: ST_TO_ADDR
// end ; if p2 = 101 then
16869: LD_VAR 0 2
16873: PUSH
16874: LD_INT 101
16876: EQUAL
16877: IFFALSE 17005
// begin case p3 of 1 :
16879: LD_VAR 0 3
16883: PUSH
16884: LD_INT 1
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16899
16892: POP
// hHackUnlimitedResources ; 2 :
16893: CALL 29103 0 0
16897: GO 17005
16899: LD_INT 2
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16914
16907: POP
// hHackSetLevel10 ; 3 :
16908: CALL 29236 0 0
16912: GO 17005
16914: LD_INT 3
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 16929
16922: POP
// hHackSetLevel10YourUnits ; 4 :
16923: CALL 29321 0 0
16927: GO 17005
16929: LD_INT 4
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 16944
16937: POP
// hHackInvincible ; 5 :
16938: CALL 29769 0 0
16942: GO 17005
16944: LD_INT 5
16946: DOUBLE
16947: EQUAL
16948: IFTRUE 16952
16950: GO 16959
16952: POP
// hHackInvisible ; 6 :
16953: CALL 29880 0 0
16957: GO 17005
16959: LD_INT 6
16961: DOUBLE
16962: EQUAL
16963: IFTRUE 16967
16965: GO 16974
16967: POP
// hHackChangeYourSide ; 7 :
16968: CALL 29937 0 0
16972: GO 17005
16974: LD_INT 7
16976: DOUBLE
16977: EQUAL
16978: IFTRUE 16982
16980: GO 16989
16982: POP
// hHackChangeUnitSide ; 8 :
16983: CALL 29979 0 0
16987: GO 17005
16989: LD_INT 8
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17004
16997: POP
// hHackFog ; end ;
16998: CALL 30080 0 0
17002: GO 17005
17004: POP
// end ; end ;
17005: LD_VAR 0 7
17009: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
17010: GO 17012
17012: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
17013: LD_STRING initStreamRollete();
17015: PPUSH
17016: CALL_OW 559
// InitStreamMode ;
17020: CALL 17032 0 0
// DefineStreamItems ( false ) ;
17024: LD_INT 0
17026: PPUSH
17027: CALL 17496 0 1
// end ;
17031: END
// function InitStreamMode ; begin
17032: LD_INT 0
17034: PPUSH
// streamModeActive := false ;
17035: LD_ADDR_EXP 47
17039: PUSH
17040: LD_INT 0
17042: ST_TO_ADDR
// normalCounter := 36 ;
17043: LD_ADDR_EXP 48
17047: PUSH
17048: LD_INT 36
17050: ST_TO_ADDR
// hardcoreCounter := 18 ;
17051: LD_ADDR_EXP 49
17055: PUSH
17056: LD_INT 18
17058: ST_TO_ADDR
// sRocket := false ;
17059: LD_ADDR_EXP 52
17063: PUSH
17064: LD_INT 0
17066: ST_TO_ADDR
// sSpeed := false ;
17067: LD_ADDR_EXP 51
17071: PUSH
17072: LD_INT 0
17074: ST_TO_ADDR
// sEngine := false ;
17075: LD_ADDR_EXP 53
17079: PUSH
17080: LD_INT 0
17082: ST_TO_ADDR
// sSpec := false ;
17083: LD_ADDR_EXP 50
17087: PUSH
17088: LD_INT 0
17090: ST_TO_ADDR
// sLevel := false ;
17091: LD_ADDR_EXP 54
17095: PUSH
17096: LD_INT 0
17098: ST_TO_ADDR
// sArmoury := false ;
17099: LD_ADDR_EXP 55
17103: PUSH
17104: LD_INT 0
17106: ST_TO_ADDR
// sRadar := false ;
17107: LD_ADDR_EXP 56
17111: PUSH
17112: LD_INT 0
17114: ST_TO_ADDR
// sBunker := false ;
17115: LD_ADDR_EXP 57
17119: PUSH
17120: LD_INT 0
17122: ST_TO_ADDR
// sHack := false ;
17123: LD_ADDR_EXP 58
17127: PUSH
17128: LD_INT 0
17130: ST_TO_ADDR
// sFire := false ;
17131: LD_ADDR_EXP 59
17135: PUSH
17136: LD_INT 0
17138: ST_TO_ADDR
// sRefresh := false ;
17139: LD_ADDR_EXP 60
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
// sExp := false ;
17147: LD_ADDR_EXP 61
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// sDepot := false ;
17155: LD_ADDR_EXP 62
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// sFlag := false ;
17163: LD_ADDR_EXP 63
17167: PUSH
17168: LD_INT 0
17170: ST_TO_ADDR
// sKamikadze := false ;
17171: LD_ADDR_EXP 71
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// sTroll := false ;
17179: LD_ADDR_EXP 72
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// sSlow := false ;
17187: LD_ADDR_EXP 73
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// sLack := false ;
17195: LD_ADDR_EXP 74
17199: PUSH
17200: LD_INT 0
17202: ST_TO_ADDR
// sTank := false ;
17203: LD_ADDR_EXP 76
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// sRemote := false ;
17211: LD_ADDR_EXP 77
17215: PUSH
17216: LD_INT 0
17218: ST_TO_ADDR
// sPowell := false ;
17219: LD_ADDR_EXP 78
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// sTeleport := false ;
17227: LD_ADDR_EXP 81
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// sOilTower := false ;
17235: LD_ADDR_EXP 83
17239: PUSH
17240: LD_INT 0
17242: ST_TO_ADDR
// sShovel := false ;
17243: LD_ADDR_EXP 84
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// sSheik := false ;
17251: LD_ADDR_EXP 85
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// sEarthquake := false ;
17259: LD_ADDR_EXP 87
17263: PUSH
17264: LD_INT 0
17266: ST_TO_ADDR
// sAI := false ;
17267: LD_ADDR_EXP 88
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// sCargo := false ;
17275: LD_ADDR_EXP 91
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
// sDLaser := false ;
17283: LD_ADDR_EXP 92
17287: PUSH
17288: LD_INT 0
17290: ST_TO_ADDR
// sExchange := false ;
17291: LD_ADDR_EXP 93
17295: PUSH
17296: LD_INT 0
17298: ST_TO_ADDR
// sFac := false ;
17299: LD_ADDR_EXP 94
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// sPower := false ;
17307: LD_ADDR_EXP 95
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// sRandom := false ;
17315: LD_ADDR_EXP 96
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// sShield := false ;
17323: LD_ADDR_EXP 97
17327: PUSH
17328: LD_INT 0
17330: ST_TO_ADDR
// sTime := false ;
17331: LD_ADDR_EXP 98
17335: PUSH
17336: LD_INT 0
17338: ST_TO_ADDR
// sTools := false ;
17339: LD_ADDR_EXP 99
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// sSold := false ;
17347: LD_ADDR_EXP 64
17351: PUSH
17352: LD_INT 0
17354: ST_TO_ADDR
// sDiff := false ;
17355: LD_ADDR_EXP 65
17359: PUSH
17360: LD_INT 0
17362: ST_TO_ADDR
// sFog := false ;
17363: LD_ADDR_EXP 68
17367: PUSH
17368: LD_INT 0
17370: ST_TO_ADDR
// sReset := false ;
17371: LD_ADDR_EXP 69
17375: PUSH
17376: LD_INT 0
17378: ST_TO_ADDR
// sSun := false ;
17379: LD_ADDR_EXP 70
17383: PUSH
17384: LD_INT 0
17386: ST_TO_ADDR
// sTiger := false ;
17387: LD_ADDR_EXP 66
17391: PUSH
17392: LD_INT 0
17394: ST_TO_ADDR
// sBomb := false ;
17395: LD_ADDR_EXP 67
17399: PUSH
17400: LD_INT 0
17402: ST_TO_ADDR
// sWound := false ;
17403: LD_ADDR_EXP 75
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// sBetray := false ;
17411: LD_ADDR_EXP 79
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// sContamin := false ;
17419: LD_ADDR_EXP 80
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// sOil := false ;
17427: LD_ADDR_EXP 82
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// sStu := false ;
17435: LD_ADDR_EXP 86
17439: PUSH
17440: LD_INT 0
17442: ST_TO_ADDR
// sBazooka := false ;
17443: LD_ADDR_EXP 89
17447: PUSH
17448: LD_INT 0
17450: ST_TO_ADDR
// sMortar := false ;
17451: LD_ADDR_EXP 90
17455: PUSH
17456: LD_INT 0
17458: ST_TO_ADDR
// sRanger := false ;
17459: LD_ADDR_EXP 100
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// sComputer := false ;
17467: LD_ADDR_EXP 101
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// s30 := false ;
17475: LD_ADDR_EXP 102
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// s60 := false ;
17483: LD_ADDR_EXP 103
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// end ;
17491: LD_VAR 0 1
17495: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17496: LD_INT 0
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// result := [ ] ;
17505: LD_ADDR_VAR 0 2
17509: PUSH
17510: EMPTY
17511: ST_TO_ADDR
// if campaign_id = 1 then
17512: LD_OWVAR 69
17516: PUSH
17517: LD_INT 1
17519: EQUAL
17520: IFFALSE 20686
// begin case mission_number of 1 :
17522: LD_OWVAR 70
17526: PUSH
17527: LD_INT 1
17529: DOUBLE
17530: EQUAL
17531: IFTRUE 17535
17533: GO 17611
17535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 4
17546: PUSH
17547: LD_INT 11
17549: PUSH
17550: LD_INT 12
17552: PUSH
17553: LD_INT 15
17555: PUSH
17556: LD_INT 16
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_INT 23
17564: PUSH
17565: LD_INT 26
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 101
17581: PUSH
17582: LD_INT 102
17584: PUSH
17585: LD_INT 106
17587: PUSH
17588: LD_INT 116
17590: PUSH
17591: LD_INT 117
17593: PUSH
17594: LD_INT 118
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: ST_TO_ADDR
17609: GO 20684
17611: LD_INT 2
17613: DOUBLE
17614: EQUAL
17615: IFTRUE 17619
17617: GO 17703
17619: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17620: LD_ADDR_VAR 0 2
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 4
17630: PUSH
17631: LD_INT 11
17633: PUSH
17634: LD_INT 12
17636: PUSH
17637: LD_INT 15
17639: PUSH
17640: LD_INT 16
17642: PUSH
17643: LD_INT 22
17645: PUSH
17646: LD_INT 23
17648: PUSH
17649: LD_INT 26
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 101
17665: PUSH
17666: LD_INT 102
17668: PUSH
17669: LD_INT 105
17671: PUSH
17672: LD_INT 106
17674: PUSH
17675: LD_INT 108
17677: PUSH
17678: LD_INT 116
17680: PUSH
17681: LD_INT 117
17683: PUSH
17684: LD_INT 118
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: ST_TO_ADDR
17701: GO 20684
17703: LD_INT 3
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17799
17711: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: LD_INT 4
17722: PUSH
17723: LD_INT 5
17725: PUSH
17726: LD_INT 11
17728: PUSH
17729: LD_INT 12
17731: PUSH
17732: LD_INT 15
17734: PUSH
17735: LD_INT 16
17737: PUSH
17738: LD_INT 22
17740: PUSH
17741: LD_INT 26
17743: PUSH
17744: LD_INT 36
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 101
17761: PUSH
17762: LD_INT 102
17764: PUSH
17765: LD_INT 105
17767: PUSH
17768: LD_INT 106
17770: PUSH
17771: LD_INT 108
17773: PUSH
17774: LD_INT 116
17776: PUSH
17777: LD_INT 117
17779: PUSH
17780: LD_INT 118
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: ST_TO_ADDR
17797: GO 20684
17799: LD_INT 4
17801: DOUBLE
17802: EQUAL
17803: IFTRUE 17807
17805: GO 17903
17807: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 2
17815: PUSH
17816: LD_INT 4
17818: PUSH
17819: LD_INT 5
17821: PUSH
17822: LD_INT 8
17824: PUSH
17825: LD_INT 11
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 15
17833: PUSH
17834: LD_INT 16
17836: PUSH
17837: LD_INT 22
17839: PUSH
17840: LD_INT 23
17842: PUSH
17843: LD_INT 26
17845: PUSH
17846: LD_INT 36
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 101
17865: PUSH
17866: LD_INT 102
17868: PUSH
17869: LD_INT 105
17871: PUSH
17872: LD_INT 106
17874: PUSH
17875: LD_INT 108
17877: PUSH
17878: LD_INT 116
17880: PUSH
17881: LD_INT 117
17883: PUSH
17884: LD_INT 118
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: ST_TO_ADDR
17901: GO 20684
17903: LD_INT 5
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 18023
17911: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17912: LD_ADDR_VAR 0 2
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 4
17922: PUSH
17923: LD_INT 5
17925: PUSH
17926: LD_INT 6
17928: PUSH
17929: LD_INT 8
17931: PUSH
17932: LD_INT 11
17934: PUSH
17935: LD_INT 12
17937: PUSH
17938: LD_INT 15
17940: PUSH
17941: LD_INT 16
17943: PUSH
17944: LD_INT 22
17946: PUSH
17947: LD_INT 23
17949: PUSH
17950: LD_INT 25
17952: PUSH
17953: LD_INT 26
17955: PUSH
17956: LD_INT 36
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 101
17977: PUSH
17978: LD_INT 102
17980: PUSH
17981: LD_INT 105
17983: PUSH
17984: LD_INT 106
17986: PUSH
17987: LD_INT 108
17989: PUSH
17990: LD_INT 109
17992: PUSH
17993: LD_INT 112
17995: PUSH
17996: LD_INT 116
17998: PUSH
17999: LD_INT 117
18001: PUSH
18002: LD_INT 118
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: ST_TO_ADDR
18021: GO 20684
18023: LD_INT 6
18025: DOUBLE
18026: EQUAL
18027: IFTRUE 18031
18029: GO 18163
18031: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18032: LD_ADDR_VAR 0 2
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 4
18042: PUSH
18043: LD_INT 5
18045: PUSH
18046: LD_INT 6
18048: PUSH
18049: LD_INT 8
18051: PUSH
18052: LD_INT 11
18054: PUSH
18055: LD_INT 12
18057: PUSH
18058: LD_INT 15
18060: PUSH
18061: LD_INT 16
18063: PUSH
18064: LD_INT 20
18066: PUSH
18067: LD_INT 21
18069: PUSH
18070: LD_INT 22
18072: PUSH
18073: LD_INT 23
18075: PUSH
18076: LD_INT 25
18078: PUSH
18079: LD_INT 26
18081: PUSH
18082: LD_INT 30
18084: PUSH
18085: LD_INT 31
18087: PUSH
18088: LD_INT 32
18090: PUSH
18091: LD_INT 36
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 101
18117: PUSH
18118: LD_INT 102
18120: PUSH
18121: LD_INT 105
18123: PUSH
18124: LD_INT 106
18126: PUSH
18127: LD_INT 108
18129: PUSH
18130: LD_INT 109
18132: PUSH
18133: LD_INT 112
18135: PUSH
18136: LD_INT 116
18138: PUSH
18139: LD_INT 117
18141: PUSH
18142: LD_INT 118
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: ST_TO_ADDR
18161: GO 20684
18163: LD_INT 7
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18283
18171: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: LD_INT 5
18185: PUSH
18186: LD_INT 7
18188: PUSH
18189: LD_INT 11
18191: PUSH
18192: LD_INT 12
18194: PUSH
18195: LD_INT 15
18197: PUSH
18198: LD_INT 16
18200: PUSH
18201: LD_INT 20
18203: PUSH
18204: LD_INT 21
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_INT 23
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 26
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 101
18237: PUSH
18238: LD_INT 102
18240: PUSH
18241: LD_INT 103
18243: PUSH
18244: LD_INT 105
18246: PUSH
18247: LD_INT 106
18249: PUSH
18250: LD_INT 108
18252: PUSH
18253: LD_INT 112
18255: PUSH
18256: LD_INT 116
18258: PUSH
18259: LD_INT 117
18261: PUSH
18262: LD_INT 118
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: ST_TO_ADDR
18281: GO 20684
18283: LD_INT 8
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18431
18291: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18292: LD_ADDR_VAR 0 2
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: LD_INT 4
18302: PUSH
18303: LD_INT 5
18305: PUSH
18306: LD_INT 6
18308: PUSH
18309: LD_INT 7
18311: PUSH
18312: LD_INT 8
18314: PUSH
18315: LD_INT 11
18317: PUSH
18318: LD_INT 12
18320: PUSH
18321: LD_INT 15
18323: PUSH
18324: LD_INT 16
18326: PUSH
18327: LD_INT 20
18329: PUSH
18330: LD_INT 21
18332: PUSH
18333: LD_INT 22
18335: PUSH
18336: LD_INT 23
18338: PUSH
18339: LD_INT 25
18341: PUSH
18342: LD_INT 26
18344: PUSH
18345: LD_INT 30
18347: PUSH
18348: LD_INT 31
18350: PUSH
18351: LD_INT 32
18353: PUSH
18354: LD_INT 36
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 101
18381: PUSH
18382: LD_INT 102
18384: PUSH
18385: LD_INT 103
18387: PUSH
18388: LD_INT 105
18390: PUSH
18391: LD_INT 106
18393: PUSH
18394: LD_INT 108
18396: PUSH
18397: LD_INT 109
18399: PUSH
18400: LD_INT 112
18402: PUSH
18403: LD_INT 116
18405: PUSH
18406: LD_INT 117
18408: PUSH
18409: LD_INT 118
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: ST_TO_ADDR
18429: GO 20684
18431: LD_INT 9
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18587
18439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 4
18450: PUSH
18451: LD_INT 5
18453: PUSH
18454: LD_INT 6
18456: PUSH
18457: LD_INT 7
18459: PUSH
18460: LD_INT 8
18462: PUSH
18463: LD_INT 11
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: LD_INT 15
18471: PUSH
18472: LD_INT 16
18474: PUSH
18475: LD_INT 20
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_INT 23
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 26
18492: PUSH
18493: LD_INT 28
18495: PUSH
18496: LD_INT 30
18498: PUSH
18499: LD_INT 31
18501: PUSH
18502: LD_INT 32
18504: PUSH
18505: LD_INT 36
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 101
18533: PUSH
18534: LD_INT 102
18536: PUSH
18537: LD_INT 103
18539: PUSH
18540: LD_INT 105
18542: PUSH
18543: LD_INT 106
18545: PUSH
18546: LD_INT 108
18548: PUSH
18549: LD_INT 109
18551: PUSH
18552: LD_INT 112
18554: PUSH
18555: LD_INT 114
18557: PUSH
18558: LD_INT 116
18560: PUSH
18561: LD_INT 117
18563: PUSH
18564: LD_INT 118
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: ST_TO_ADDR
18585: GO 20684
18587: LD_INT 10
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18791
18595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18596: LD_ADDR_VAR 0 2
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 4
18606: PUSH
18607: LD_INT 5
18609: PUSH
18610: LD_INT 6
18612: PUSH
18613: LD_INT 7
18615: PUSH
18616: LD_INT 8
18618: PUSH
18619: LD_INT 9
18621: PUSH
18622: LD_INT 10
18624: PUSH
18625: LD_INT 11
18627: PUSH
18628: LD_INT 12
18630: PUSH
18631: LD_INT 13
18633: PUSH
18634: LD_INT 14
18636: PUSH
18637: LD_INT 15
18639: PUSH
18640: LD_INT 16
18642: PUSH
18643: LD_INT 17
18645: PUSH
18646: LD_INT 18
18648: PUSH
18649: LD_INT 19
18651: PUSH
18652: LD_INT 20
18654: PUSH
18655: LD_INT 21
18657: PUSH
18658: LD_INT 22
18660: PUSH
18661: LD_INT 23
18663: PUSH
18664: LD_INT 24
18666: PUSH
18667: LD_INT 25
18669: PUSH
18670: LD_INT 26
18672: PUSH
18673: LD_INT 28
18675: PUSH
18676: LD_INT 30
18678: PUSH
18679: LD_INT 31
18681: PUSH
18682: LD_INT 32
18684: PUSH
18685: LD_INT 36
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 101
18721: PUSH
18722: LD_INT 102
18724: PUSH
18725: LD_INT 103
18727: PUSH
18728: LD_INT 104
18730: PUSH
18731: LD_INT 105
18733: PUSH
18734: LD_INT 106
18736: PUSH
18737: LD_INT 107
18739: PUSH
18740: LD_INT 108
18742: PUSH
18743: LD_INT 109
18745: PUSH
18746: LD_INT 110
18748: PUSH
18749: LD_INT 111
18751: PUSH
18752: LD_INT 112
18754: PUSH
18755: LD_INT 114
18757: PUSH
18758: LD_INT 116
18760: PUSH
18761: LD_INT 117
18763: PUSH
18764: LD_INT 118
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: ST_TO_ADDR
18789: GO 20684
18791: LD_INT 11
18793: DOUBLE
18794: EQUAL
18795: IFTRUE 18799
18797: GO 19003
18799: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18800: LD_ADDR_VAR 0 2
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 4
18813: PUSH
18814: LD_INT 5
18816: PUSH
18817: LD_INT 6
18819: PUSH
18820: LD_INT 7
18822: PUSH
18823: LD_INT 8
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: LD_INT 10
18831: PUSH
18832: LD_INT 11
18834: PUSH
18835: LD_INT 12
18837: PUSH
18838: LD_INT 13
18840: PUSH
18841: LD_INT 14
18843: PUSH
18844: LD_INT 15
18846: PUSH
18847: LD_INT 16
18849: PUSH
18850: LD_INT 17
18852: PUSH
18853: LD_INT 18
18855: PUSH
18856: LD_INT 19
18858: PUSH
18859: LD_INT 20
18861: PUSH
18862: LD_INT 21
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_INT 23
18870: PUSH
18871: LD_INT 24
18873: PUSH
18874: LD_INT 25
18876: PUSH
18877: LD_INT 26
18879: PUSH
18880: LD_INT 28
18882: PUSH
18883: LD_INT 30
18885: PUSH
18886: LD_INT 31
18888: PUSH
18889: LD_INT 32
18891: PUSH
18892: LD_INT 34
18894: PUSH
18895: LD_INT 36
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 101
18933: PUSH
18934: LD_INT 102
18936: PUSH
18937: LD_INT 103
18939: PUSH
18940: LD_INT 104
18942: PUSH
18943: LD_INT 105
18945: PUSH
18946: LD_INT 106
18948: PUSH
18949: LD_INT 107
18951: PUSH
18952: LD_INT 108
18954: PUSH
18955: LD_INT 109
18957: PUSH
18958: LD_INT 110
18960: PUSH
18961: LD_INT 111
18963: PUSH
18964: LD_INT 112
18966: PUSH
18967: LD_INT 114
18969: PUSH
18970: LD_INT 116
18972: PUSH
18973: LD_INT 117
18975: PUSH
18976: LD_INT 118
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: ST_TO_ADDR
19001: GO 20684
19003: LD_INT 12
19005: DOUBLE
19006: EQUAL
19007: IFTRUE 19011
19009: GO 19231
19011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19012: LD_ADDR_VAR 0 2
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 3
19025: PUSH
19026: LD_INT 4
19028: PUSH
19029: LD_INT 5
19031: PUSH
19032: LD_INT 6
19034: PUSH
19035: LD_INT 7
19037: PUSH
19038: LD_INT 8
19040: PUSH
19041: LD_INT 9
19043: PUSH
19044: LD_INT 10
19046: PUSH
19047: LD_INT 11
19049: PUSH
19050: LD_INT 12
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 14
19058: PUSH
19059: LD_INT 15
19061: PUSH
19062: LD_INT 16
19064: PUSH
19065: LD_INT 17
19067: PUSH
19068: LD_INT 18
19070: PUSH
19071: LD_INT 19
19073: PUSH
19074: LD_INT 20
19076: PUSH
19077: LD_INT 21
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_INT 23
19085: PUSH
19086: LD_INT 24
19088: PUSH
19089: LD_INT 25
19091: PUSH
19092: LD_INT 26
19094: PUSH
19095: LD_INT 27
19097: PUSH
19098: LD_INT 28
19100: PUSH
19101: LD_INT 30
19103: PUSH
19104: LD_INT 31
19106: PUSH
19107: LD_INT 32
19109: PUSH
19110: LD_INT 33
19112: PUSH
19113: LD_INT 34
19115: PUSH
19116: LD_INT 36
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 101
19157: PUSH
19158: LD_INT 102
19160: PUSH
19161: LD_INT 103
19163: PUSH
19164: LD_INT 104
19166: PUSH
19167: LD_INT 105
19169: PUSH
19170: LD_INT 106
19172: PUSH
19173: LD_INT 107
19175: PUSH
19176: LD_INT 108
19178: PUSH
19179: LD_INT 109
19181: PUSH
19182: LD_INT 110
19184: PUSH
19185: LD_INT 111
19187: PUSH
19188: LD_INT 112
19190: PUSH
19191: LD_INT 113
19193: PUSH
19194: LD_INT 114
19196: PUSH
19197: LD_INT 116
19199: PUSH
19200: LD_INT 117
19202: PUSH
19203: LD_INT 118
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: ST_TO_ADDR
19229: GO 20684
19231: LD_INT 13
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19447
19239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 3
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: LD_INT 5
19259: PUSH
19260: LD_INT 8
19262: PUSH
19263: LD_INT 9
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 11
19271: PUSH
19272: LD_INT 12
19274: PUSH
19275: LD_INT 14
19277: PUSH
19278: LD_INT 15
19280: PUSH
19281: LD_INT 16
19283: PUSH
19284: LD_INT 17
19286: PUSH
19287: LD_INT 18
19289: PUSH
19290: LD_INT 19
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 24
19307: PUSH
19308: LD_INT 25
19310: PUSH
19311: LD_INT 26
19313: PUSH
19314: LD_INT 27
19316: PUSH
19317: LD_INT 28
19319: PUSH
19320: LD_INT 30
19322: PUSH
19323: LD_INT 31
19325: PUSH
19326: LD_INT 32
19328: PUSH
19329: LD_INT 33
19331: PUSH
19332: LD_INT 34
19334: PUSH
19335: LD_INT 36
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 101
19373: PUSH
19374: LD_INT 102
19376: PUSH
19377: LD_INT 103
19379: PUSH
19380: LD_INT 104
19382: PUSH
19383: LD_INT 105
19385: PUSH
19386: LD_INT 106
19388: PUSH
19389: LD_INT 107
19391: PUSH
19392: LD_INT 108
19394: PUSH
19395: LD_INT 109
19397: PUSH
19398: LD_INT 110
19400: PUSH
19401: LD_INT 111
19403: PUSH
19404: LD_INT 112
19406: PUSH
19407: LD_INT 113
19409: PUSH
19410: LD_INT 114
19412: PUSH
19413: LD_INT 116
19415: PUSH
19416: LD_INT 117
19418: PUSH
19419: LD_INT 118
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: ST_TO_ADDR
19445: GO 20684
19447: LD_INT 14
19449: DOUBLE
19450: EQUAL
19451: IFTRUE 19455
19453: GO 19679
19455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19456: LD_ADDR_VAR 0 2
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: LD_INT 4
19472: PUSH
19473: LD_INT 5
19475: PUSH
19476: LD_INT 6
19478: PUSH
19479: LD_INT 7
19481: PUSH
19482: LD_INT 8
19484: PUSH
19485: LD_INT 9
19487: PUSH
19488: LD_INT 10
19490: PUSH
19491: LD_INT 11
19493: PUSH
19494: LD_INT 12
19496: PUSH
19497: LD_INT 13
19499: PUSH
19500: LD_INT 14
19502: PUSH
19503: LD_INT 15
19505: PUSH
19506: LD_INT 16
19508: PUSH
19509: LD_INT 17
19511: PUSH
19512: LD_INT 18
19514: PUSH
19515: LD_INT 19
19517: PUSH
19518: LD_INT 20
19520: PUSH
19521: LD_INT 21
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_INT 23
19529: PUSH
19530: LD_INT 24
19532: PUSH
19533: LD_INT 25
19535: PUSH
19536: LD_INT 26
19538: PUSH
19539: LD_INT 27
19541: PUSH
19542: LD_INT 28
19544: PUSH
19545: LD_INT 29
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 31
19553: PUSH
19554: LD_INT 32
19556: PUSH
19557: LD_INT 33
19559: PUSH
19560: LD_INT 34
19562: PUSH
19563: LD_INT 36
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 101
19605: PUSH
19606: LD_INT 102
19608: PUSH
19609: LD_INT 103
19611: PUSH
19612: LD_INT 104
19614: PUSH
19615: LD_INT 105
19617: PUSH
19618: LD_INT 106
19620: PUSH
19621: LD_INT 107
19623: PUSH
19624: LD_INT 108
19626: PUSH
19627: LD_INT 109
19629: PUSH
19630: LD_INT 110
19632: PUSH
19633: LD_INT 111
19635: PUSH
19636: LD_INT 112
19638: PUSH
19639: LD_INT 113
19641: PUSH
19642: LD_INT 114
19644: PUSH
19645: LD_INT 116
19647: PUSH
19648: LD_INT 117
19650: PUSH
19651: LD_INT 118
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: ST_TO_ADDR
19677: GO 20684
19679: LD_INT 15
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19911
19687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19688: LD_ADDR_VAR 0 2
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: LD_INT 4
19704: PUSH
19705: LD_INT 5
19707: PUSH
19708: LD_INT 6
19710: PUSH
19711: LD_INT 7
19713: PUSH
19714: LD_INT 8
19716: PUSH
19717: LD_INT 9
19719: PUSH
19720: LD_INT 10
19722: PUSH
19723: LD_INT 11
19725: PUSH
19726: LD_INT 12
19728: PUSH
19729: LD_INT 13
19731: PUSH
19732: LD_INT 14
19734: PUSH
19735: LD_INT 15
19737: PUSH
19738: LD_INT 16
19740: PUSH
19741: LD_INT 17
19743: PUSH
19744: LD_INT 18
19746: PUSH
19747: LD_INT 19
19749: PUSH
19750: LD_INT 20
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 22
19758: PUSH
19759: LD_INT 23
19761: PUSH
19762: LD_INT 24
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 26
19770: PUSH
19771: LD_INT 27
19773: PUSH
19774: LD_INT 28
19776: PUSH
19777: LD_INT 29
19779: PUSH
19780: LD_INT 30
19782: PUSH
19783: LD_INT 31
19785: PUSH
19786: LD_INT 32
19788: PUSH
19789: LD_INT 33
19791: PUSH
19792: LD_INT 34
19794: PUSH
19795: LD_INT 36
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 101
19837: PUSH
19838: LD_INT 102
19840: PUSH
19841: LD_INT 103
19843: PUSH
19844: LD_INT 104
19846: PUSH
19847: LD_INT 105
19849: PUSH
19850: LD_INT 106
19852: PUSH
19853: LD_INT 107
19855: PUSH
19856: LD_INT 108
19858: PUSH
19859: LD_INT 109
19861: PUSH
19862: LD_INT 110
19864: PUSH
19865: LD_INT 111
19867: PUSH
19868: LD_INT 112
19870: PUSH
19871: LD_INT 113
19873: PUSH
19874: LD_INT 114
19876: PUSH
19877: LD_INT 116
19879: PUSH
19880: LD_INT 117
19882: PUSH
19883: LD_INT 118
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: ST_TO_ADDR
19909: GO 20684
19911: LD_INT 16
19913: DOUBLE
19914: EQUAL
19915: IFTRUE 19919
19917: GO 20055
19919: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19920: LD_ADDR_VAR 0 2
19924: PUSH
19925: LD_INT 2
19927: PUSH
19928: LD_INT 4
19930: PUSH
19931: LD_INT 5
19933: PUSH
19934: LD_INT 7
19936: PUSH
19937: LD_INT 11
19939: PUSH
19940: LD_INT 12
19942: PUSH
19943: LD_INT 15
19945: PUSH
19946: LD_INT 16
19948: PUSH
19949: LD_INT 20
19951: PUSH
19952: LD_INT 21
19954: PUSH
19955: LD_INT 22
19957: PUSH
19958: LD_INT 23
19960: PUSH
19961: LD_INT 25
19963: PUSH
19964: LD_INT 26
19966: PUSH
19967: LD_INT 30
19969: PUSH
19970: LD_INT 31
19972: PUSH
19973: LD_INT 32
19975: PUSH
19976: LD_INT 33
19978: PUSH
19979: LD_INT 34
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 101
20005: PUSH
20006: LD_INT 102
20008: PUSH
20009: LD_INT 103
20011: PUSH
20012: LD_INT 106
20014: PUSH
20015: LD_INT 108
20017: PUSH
20018: LD_INT 112
20020: PUSH
20021: LD_INT 113
20023: PUSH
20024: LD_INT 114
20026: PUSH
20027: LD_INT 116
20029: PUSH
20030: LD_INT 117
20032: PUSH
20033: LD_INT 118
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: ST_TO_ADDR
20053: GO 20684
20055: LD_INT 17
20057: DOUBLE
20058: EQUAL
20059: IFTRUE 20063
20061: GO 20287
20063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20064: LD_ADDR_VAR 0 2
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 3
20077: PUSH
20078: LD_INT 4
20080: PUSH
20081: LD_INT 5
20083: PUSH
20084: LD_INT 6
20086: PUSH
20087: LD_INT 7
20089: PUSH
20090: LD_INT 8
20092: PUSH
20093: LD_INT 9
20095: PUSH
20096: LD_INT 10
20098: PUSH
20099: LD_INT 11
20101: PUSH
20102: LD_INT 12
20104: PUSH
20105: LD_INT 13
20107: PUSH
20108: LD_INT 14
20110: PUSH
20111: LD_INT 15
20113: PUSH
20114: LD_INT 16
20116: PUSH
20117: LD_INT 17
20119: PUSH
20120: LD_INT 18
20122: PUSH
20123: LD_INT 19
20125: PUSH
20126: LD_INT 20
20128: PUSH
20129: LD_INT 21
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_INT 23
20137: PUSH
20138: LD_INT 24
20140: PUSH
20141: LD_INT 25
20143: PUSH
20144: LD_INT 26
20146: PUSH
20147: LD_INT 27
20149: PUSH
20150: LD_INT 28
20152: PUSH
20153: LD_INT 29
20155: PUSH
20156: LD_INT 30
20158: PUSH
20159: LD_INT 31
20161: PUSH
20162: LD_INT 32
20164: PUSH
20165: LD_INT 33
20167: PUSH
20168: LD_INT 34
20170: PUSH
20171: LD_INT 36
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 101
20213: PUSH
20214: LD_INT 102
20216: PUSH
20217: LD_INT 103
20219: PUSH
20220: LD_INT 104
20222: PUSH
20223: LD_INT 105
20225: PUSH
20226: LD_INT 106
20228: PUSH
20229: LD_INT 107
20231: PUSH
20232: LD_INT 108
20234: PUSH
20235: LD_INT 109
20237: PUSH
20238: LD_INT 110
20240: PUSH
20241: LD_INT 111
20243: PUSH
20244: LD_INT 112
20246: PUSH
20247: LD_INT 113
20249: PUSH
20250: LD_INT 114
20252: PUSH
20253: LD_INT 116
20255: PUSH
20256: LD_INT 117
20258: PUSH
20259: LD_INT 118
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: ST_TO_ADDR
20285: GO 20684
20287: LD_INT 18
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20443
20295: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 4
20306: PUSH
20307: LD_INT 5
20309: PUSH
20310: LD_INT 7
20312: PUSH
20313: LD_INT 11
20315: PUSH
20316: LD_INT 12
20318: PUSH
20319: LD_INT 15
20321: PUSH
20322: LD_INT 16
20324: PUSH
20325: LD_INT 20
20327: PUSH
20328: LD_INT 21
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_INT 23
20336: PUSH
20337: LD_INT 25
20339: PUSH
20340: LD_INT 26
20342: PUSH
20343: LD_INT 30
20345: PUSH
20346: LD_INT 31
20348: PUSH
20349: LD_INT 32
20351: PUSH
20352: LD_INT 33
20354: PUSH
20355: LD_INT 34
20357: PUSH
20358: LD_INT 35
20360: PUSH
20361: LD_INT 36
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 101
20389: PUSH
20390: LD_INT 102
20392: PUSH
20393: LD_INT 103
20395: PUSH
20396: LD_INT 106
20398: PUSH
20399: LD_INT 108
20401: PUSH
20402: LD_INT 112
20404: PUSH
20405: LD_INT 113
20407: PUSH
20408: LD_INT 114
20410: PUSH
20411: LD_INT 115
20413: PUSH
20414: LD_INT 116
20416: PUSH
20417: LD_INT 117
20419: PUSH
20420: LD_INT 118
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: ST_TO_ADDR
20441: GO 20684
20443: LD_INT 19
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20683
20451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: LD_INT 2
20462: PUSH
20463: LD_INT 3
20465: PUSH
20466: LD_INT 4
20468: PUSH
20469: LD_INT 5
20471: PUSH
20472: LD_INT 6
20474: PUSH
20475: LD_INT 7
20477: PUSH
20478: LD_INT 8
20480: PUSH
20481: LD_INT 9
20483: PUSH
20484: LD_INT 10
20486: PUSH
20487: LD_INT 11
20489: PUSH
20490: LD_INT 12
20492: PUSH
20493: LD_INT 13
20495: PUSH
20496: LD_INT 14
20498: PUSH
20499: LD_INT 15
20501: PUSH
20502: LD_INT 16
20504: PUSH
20505: LD_INT 17
20507: PUSH
20508: LD_INT 18
20510: PUSH
20511: LD_INT 19
20513: PUSH
20514: LD_INT 20
20516: PUSH
20517: LD_INT 21
20519: PUSH
20520: LD_INT 22
20522: PUSH
20523: LD_INT 23
20525: PUSH
20526: LD_INT 24
20528: PUSH
20529: LD_INT 25
20531: PUSH
20532: LD_INT 26
20534: PUSH
20535: LD_INT 27
20537: PUSH
20538: LD_INT 28
20540: PUSH
20541: LD_INT 29
20543: PUSH
20544: LD_INT 30
20546: PUSH
20547: LD_INT 31
20549: PUSH
20550: LD_INT 32
20552: PUSH
20553: LD_INT 33
20555: PUSH
20556: LD_INT 34
20558: PUSH
20559: LD_INT 35
20561: PUSH
20562: LD_INT 36
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 101
20605: PUSH
20606: LD_INT 102
20608: PUSH
20609: LD_INT 103
20611: PUSH
20612: LD_INT 104
20614: PUSH
20615: LD_INT 105
20617: PUSH
20618: LD_INT 106
20620: PUSH
20621: LD_INT 107
20623: PUSH
20624: LD_INT 108
20626: PUSH
20627: LD_INT 109
20629: PUSH
20630: LD_INT 110
20632: PUSH
20633: LD_INT 111
20635: PUSH
20636: LD_INT 112
20638: PUSH
20639: LD_INT 113
20641: PUSH
20642: LD_INT 114
20644: PUSH
20645: LD_INT 115
20647: PUSH
20648: LD_INT 116
20650: PUSH
20651: LD_INT 117
20653: PUSH
20654: LD_INT 118
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: ST_TO_ADDR
20681: GO 20684
20683: POP
// end else
20684: GO 20915
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20686: LD_ADDR_VAR 0 2
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 3
20699: PUSH
20700: LD_INT 4
20702: PUSH
20703: LD_INT 5
20705: PUSH
20706: LD_INT 6
20708: PUSH
20709: LD_INT 7
20711: PUSH
20712: LD_INT 8
20714: PUSH
20715: LD_INT 9
20717: PUSH
20718: LD_INT 10
20720: PUSH
20721: LD_INT 11
20723: PUSH
20724: LD_INT 12
20726: PUSH
20727: LD_INT 13
20729: PUSH
20730: LD_INT 14
20732: PUSH
20733: LD_INT 15
20735: PUSH
20736: LD_INT 16
20738: PUSH
20739: LD_INT 17
20741: PUSH
20742: LD_INT 18
20744: PUSH
20745: LD_INT 19
20747: PUSH
20748: LD_INT 20
20750: PUSH
20751: LD_INT 21
20753: PUSH
20754: LD_INT 22
20756: PUSH
20757: LD_INT 23
20759: PUSH
20760: LD_INT 24
20762: PUSH
20763: LD_INT 25
20765: PUSH
20766: LD_INT 26
20768: PUSH
20769: LD_INT 27
20771: PUSH
20772: LD_INT 28
20774: PUSH
20775: LD_INT 29
20777: PUSH
20778: LD_INT 30
20780: PUSH
20781: LD_INT 31
20783: PUSH
20784: LD_INT 32
20786: PUSH
20787: LD_INT 33
20789: PUSH
20790: LD_INT 34
20792: PUSH
20793: LD_INT 35
20795: PUSH
20796: LD_INT 36
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 101
20839: PUSH
20840: LD_INT 102
20842: PUSH
20843: LD_INT 103
20845: PUSH
20846: LD_INT 104
20848: PUSH
20849: LD_INT 105
20851: PUSH
20852: LD_INT 106
20854: PUSH
20855: LD_INT 107
20857: PUSH
20858: LD_INT 108
20860: PUSH
20861: LD_INT 109
20863: PUSH
20864: LD_INT 110
20866: PUSH
20867: LD_INT 111
20869: PUSH
20870: LD_INT 112
20872: PUSH
20873: LD_INT 113
20875: PUSH
20876: LD_INT 114
20878: PUSH
20879: LD_INT 115
20881: PUSH
20882: LD_INT 116
20884: PUSH
20885: LD_INT 117
20887: PUSH
20888: LD_INT 118
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: ST_TO_ADDR
// if result then
20915: LD_VAR 0 2
20919: IFFALSE 21705
// begin normal :=  ;
20921: LD_ADDR_VAR 0 5
20925: PUSH
20926: LD_STRING 
20928: ST_TO_ADDR
// hardcore :=  ;
20929: LD_ADDR_VAR 0 6
20933: PUSH
20934: LD_STRING 
20936: ST_TO_ADDR
// active :=  ;
20937: LD_ADDR_VAR 0 7
20941: PUSH
20942: LD_STRING 
20944: ST_TO_ADDR
// for i = 1 to normalCounter do
20945: LD_ADDR_VAR 0 8
20949: PUSH
20950: DOUBLE
20951: LD_INT 1
20953: DEC
20954: ST_TO_ADDR
20955: LD_EXP 48
20959: PUSH
20960: FOR_TO
20961: IFFALSE 21062
// begin tmp := 0 ;
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_STRING 0
20970: ST_TO_ADDR
// if result [ 1 ] then
20971: LD_VAR 0 2
20975: PUSH
20976: LD_INT 1
20978: ARRAY
20979: IFFALSE 21044
// if result [ 1 ] [ 1 ] = i then
20981: LD_VAR 0 2
20985: PUSH
20986: LD_INT 1
20988: ARRAY
20989: PUSH
20990: LD_INT 1
20992: ARRAY
20993: PUSH
20994: LD_VAR 0 8
20998: EQUAL
20999: IFFALSE 21044
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_VAR 0 2
21010: PPUSH
21011: LD_INT 1
21013: PPUSH
21014: LD_VAR 0 2
21018: PUSH
21019: LD_INT 1
21021: ARRAY
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: CALL_OW 3
21030: PPUSH
21031: CALL_OW 1
21035: ST_TO_ADDR
// tmp := 1 ;
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: LD_STRING 1
21043: ST_TO_ADDR
// end ; normal := normal & tmp ;
21044: LD_ADDR_VAR 0 5
21048: PUSH
21049: LD_VAR 0 5
21053: PUSH
21054: LD_VAR 0 3
21058: STR
21059: ST_TO_ADDR
// end ;
21060: GO 20960
21062: POP
21063: POP
// for i = 1 to hardcoreCounter do
21064: LD_ADDR_VAR 0 8
21068: PUSH
21069: DOUBLE
21070: LD_INT 1
21072: DEC
21073: ST_TO_ADDR
21074: LD_EXP 49
21078: PUSH
21079: FOR_TO
21080: IFFALSE 21185
// begin tmp := 0 ;
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: LD_STRING 0
21089: ST_TO_ADDR
// if result [ 2 ] then
21090: LD_VAR 0 2
21094: PUSH
21095: LD_INT 2
21097: ARRAY
21098: IFFALSE 21167
// if result [ 2 ] [ 1 ] = 100 + i then
21100: LD_VAR 0 2
21104: PUSH
21105: LD_INT 2
21107: ARRAY
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: PUSH
21113: LD_INT 100
21115: PUSH
21116: LD_VAR 0 8
21120: PLUS
21121: EQUAL
21122: IFFALSE 21167
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21124: LD_ADDR_VAR 0 2
21128: PUSH
21129: LD_VAR 0 2
21133: PPUSH
21134: LD_INT 2
21136: PPUSH
21137: LD_VAR 0 2
21141: PUSH
21142: LD_INT 2
21144: ARRAY
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 3
21153: PPUSH
21154: CALL_OW 1
21158: ST_TO_ADDR
// tmp := 1 ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_STRING 1
21166: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21167: LD_ADDR_VAR 0 6
21171: PUSH
21172: LD_VAR 0 6
21176: PUSH
21177: LD_VAR 0 3
21181: STR
21182: ST_TO_ADDR
// end ;
21183: GO 21079
21185: POP
21186: POP
// if isGameLoad then
21187: LD_VAR 0 1
21191: IFFALSE 21666
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21193: LD_ADDR_VAR 0 4
21197: PUSH
21198: LD_EXP 52
21202: PUSH
21203: LD_EXP 51
21207: PUSH
21208: LD_EXP 53
21212: PUSH
21213: LD_EXP 50
21217: PUSH
21218: LD_EXP 54
21222: PUSH
21223: LD_EXP 55
21227: PUSH
21228: LD_EXP 56
21232: PUSH
21233: LD_EXP 57
21237: PUSH
21238: LD_EXP 58
21242: PUSH
21243: LD_EXP 59
21247: PUSH
21248: LD_EXP 60
21252: PUSH
21253: LD_EXP 61
21257: PUSH
21258: LD_EXP 62
21262: PUSH
21263: LD_EXP 63
21267: PUSH
21268: LD_EXP 71
21272: PUSH
21273: LD_EXP 72
21277: PUSH
21278: LD_EXP 73
21282: PUSH
21283: LD_EXP 74
21287: PUSH
21288: LD_EXP 76
21292: PUSH
21293: LD_EXP 77
21297: PUSH
21298: LD_EXP 78
21302: PUSH
21303: LD_EXP 81
21307: PUSH
21308: LD_EXP 83
21312: PUSH
21313: LD_EXP 84
21317: PUSH
21318: LD_EXP 85
21322: PUSH
21323: LD_EXP 87
21327: PUSH
21328: LD_EXP 88
21332: PUSH
21333: LD_EXP 91
21337: PUSH
21338: LD_EXP 92
21342: PUSH
21343: LD_EXP 93
21347: PUSH
21348: LD_EXP 94
21352: PUSH
21353: LD_EXP 95
21357: PUSH
21358: LD_EXP 96
21362: PUSH
21363: LD_EXP 97
21367: PUSH
21368: LD_EXP 98
21372: PUSH
21373: LD_EXP 99
21377: PUSH
21378: LD_EXP 64
21382: PUSH
21383: LD_EXP 65
21387: PUSH
21388: LD_EXP 68
21392: PUSH
21393: LD_EXP 69
21397: PUSH
21398: LD_EXP 70
21402: PUSH
21403: LD_EXP 66
21407: PUSH
21408: LD_EXP 67
21412: PUSH
21413: LD_EXP 75
21417: PUSH
21418: LD_EXP 79
21422: PUSH
21423: LD_EXP 80
21427: PUSH
21428: LD_EXP 82
21432: PUSH
21433: LD_EXP 86
21437: PUSH
21438: LD_EXP 89
21442: PUSH
21443: LD_EXP 90
21447: PUSH
21448: LD_EXP 100
21452: PUSH
21453: LD_EXP 101
21457: PUSH
21458: LD_EXP 102
21462: PUSH
21463: LD_EXP 103
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: ST_TO_ADDR
// tmp :=  ;
21524: LD_ADDR_VAR 0 3
21528: PUSH
21529: LD_STRING 
21531: ST_TO_ADDR
// for i = 1 to normalCounter do
21532: LD_ADDR_VAR 0 8
21536: PUSH
21537: DOUBLE
21538: LD_INT 1
21540: DEC
21541: ST_TO_ADDR
21542: LD_EXP 48
21546: PUSH
21547: FOR_TO
21548: IFFALSE 21584
// begin if flags [ i ] then
21550: LD_VAR 0 4
21554: PUSH
21555: LD_VAR 0 8
21559: ARRAY
21560: IFFALSE 21582
// tmp := tmp & i & ; ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: LD_VAR 0 3
21571: PUSH
21572: LD_VAR 0 8
21576: STR
21577: PUSH
21578: LD_STRING ;
21580: STR
21581: ST_TO_ADDR
// end ;
21582: GO 21547
21584: POP
21585: POP
// for i = 1 to hardcoreCounter do
21586: LD_ADDR_VAR 0 8
21590: PUSH
21591: DOUBLE
21592: LD_INT 1
21594: DEC
21595: ST_TO_ADDR
21596: LD_EXP 49
21600: PUSH
21601: FOR_TO
21602: IFFALSE 21648
// begin if flags [ normalCounter + i ] then
21604: LD_VAR 0 4
21608: PUSH
21609: LD_EXP 48
21613: PUSH
21614: LD_VAR 0 8
21618: PLUS
21619: ARRAY
21620: IFFALSE 21646
// tmp := tmp & ( 100 + i ) & ; ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_VAR 0 3
21631: PUSH
21632: LD_INT 100
21634: PUSH
21635: LD_VAR 0 8
21639: PLUS
21640: STR
21641: PUSH
21642: LD_STRING ;
21644: STR
21645: ST_TO_ADDR
// end ;
21646: GO 21601
21648: POP
21649: POP
// if tmp then
21650: LD_VAR 0 3
21654: IFFALSE 21666
// active := tmp ;
21656: LD_ADDR_VAR 0 7
21660: PUSH
21661: LD_VAR 0 3
21665: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21666: LD_STRING getStreamItemsFromMission("
21668: PUSH
21669: LD_VAR 0 5
21673: STR
21674: PUSH
21675: LD_STRING ","
21677: STR
21678: PUSH
21679: LD_VAR 0 6
21683: STR
21684: PUSH
21685: LD_STRING ","
21687: STR
21688: PUSH
21689: LD_VAR 0 7
21693: STR
21694: PUSH
21695: LD_STRING ")
21697: STR
21698: PPUSH
21699: CALL_OW 559
// end else
21703: GO 21712
// ToLua ( getStreamItemsFromMission("","","") ) ;
21705: LD_STRING getStreamItemsFromMission("","","")
21707: PPUSH
21708: CALL_OW 559
// end ;
21712: LD_VAR 0 2
21716: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21717: LD_EXP 47
21721: PUSH
21722: LD_EXP 52
21726: AND
21727: IFFALSE 21851
21729: GO 21731
21731: DISABLE
21732: LD_INT 0
21734: PPUSH
21735: PPUSH
// begin enable ;
21736: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21737: LD_ADDR_VAR 0 2
21741: PUSH
21742: LD_INT 22
21744: PUSH
21745: LD_OWVAR 2
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: LD_INT 34
21759: PUSH
21760: LD_INT 7
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 34
21769: PUSH
21770: LD_INT 45
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 34
21779: PUSH
21780: LD_INT 28
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 34
21789: PUSH
21790: LD_INT 47
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 69
21812: ST_TO_ADDR
// if not tmp then
21813: LD_VAR 0 2
21817: NOT
21818: IFFALSE 21822
// exit ;
21820: GO 21851
// for i in tmp do
21822: LD_ADDR_VAR 0 1
21826: PUSH
21827: LD_VAR 0 2
21831: PUSH
21832: FOR_IN
21833: IFFALSE 21849
// begin SetLives ( i , 0 ) ;
21835: LD_VAR 0 1
21839: PPUSH
21840: LD_INT 0
21842: PPUSH
21843: CALL_OW 234
// end ;
21847: GO 21832
21849: POP
21850: POP
// end ;
21851: PPOPN 2
21853: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21854: LD_EXP 47
21858: PUSH
21859: LD_EXP 53
21863: AND
21864: IFFALSE 21948
21866: GO 21868
21868: DISABLE
21869: LD_INT 0
21871: PPUSH
21872: PPUSH
// begin enable ;
21873: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21874: LD_ADDR_VAR 0 2
21878: PUSH
21879: LD_INT 22
21881: PUSH
21882: LD_OWVAR 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 32
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: ST_TO_ADDR
// if not tmp then
21910: LD_VAR 0 2
21914: NOT
21915: IFFALSE 21919
// exit ;
21917: GO 21948
// for i in tmp do
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: LD_VAR 0 2
21928: PUSH
21929: FOR_IN
21930: IFFALSE 21946
// begin SetLives ( i , 0 ) ;
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_INT 0
21939: PPUSH
21940: CALL_OW 234
// end ;
21944: GO 21929
21946: POP
21947: POP
// end ;
21948: PPOPN 2
21950: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21951: LD_EXP 47
21955: PUSH
21956: LD_EXP 50
21960: AND
21961: IFFALSE 22054
21963: GO 21965
21965: DISABLE
21966: LD_INT 0
21968: PPUSH
// begin enable ;
21969: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21970: LD_ADDR_VAR 0 1
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_OWVAR 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 5
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 25
22002: PUSH
22003: LD_INT 9
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 25
22012: PUSH
22013: LD_INT 8
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 69
22034: PUSH
22035: FOR_IN
22036: IFFALSE 22052
// begin SetClass ( i , 1 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 336
// end ;
22050: GO 22035
22052: POP
22053: POP
// end ;
22054: PPOPN 1
22056: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22057: LD_EXP 47
22061: PUSH
22062: LD_EXP 51
22066: AND
22067: PUSH
22068: LD_OWVAR 65
22072: PUSH
22073: LD_INT 7
22075: LESS
22076: AND
22077: IFFALSE 22091
22079: GO 22081
22081: DISABLE
// begin enable ;
22082: ENABLE
// game_speed := 7 ;
22083: LD_ADDR_OWVAR 65
22087: PUSH
22088: LD_INT 7
22090: ST_TO_ADDR
// end ;
22091: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22092: LD_EXP 47
22096: PUSH
22097: LD_EXP 54
22101: AND
22102: IFFALSE 22304
22104: GO 22106
22106: DISABLE
22107: LD_INT 0
22109: PPUSH
22110: PPUSH
22111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22112: LD_ADDR_VAR 0 3
22116: PUSH
22117: LD_INT 81
22119: PUSH
22120: LD_OWVAR 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: ST_TO_ADDR
// if not tmp then
22148: LD_VAR 0 3
22152: NOT
22153: IFFALSE 22157
// exit ;
22155: GO 22304
// if tmp > 5 then
22157: LD_VAR 0 3
22161: PUSH
22162: LD_INT 5
22164: GREATER
22165: IFFALSE 22177
// k := 5 else
22167: LD_ADDR_VAR 0 2
22171: PUSH
22172: LD_INT 5
22174: ST_TO_ADDR
22175: GO 22187
// k := tmp ;
22177: LD_ADDR_VAR 0 2
22181: PUSH
22182: LD_VAR 0 3
22186: ST_TO_ADDR
// for i := 1 to k do
22187: LD_ADDR_VAR 0 1
22191: PUSH
22192: DOUBLE
22193: LD_INT 1
22195: DEC
22196: ST_TO_ADDR
22197: LD_VAR 0 2
22201: PUSH
22202: FOR_TO
22203: IFFALSE 22302
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22205: LD_VAR 0 3
22209: PUSH
22210: LD_VAR 0 1
22214: ARRAY
22215: PPUSH
22216: LD_VAR 0 1
22220: PUSH
22221: LD_INT 4
22223: MOD
22224: PUSH
22225: LD_INT 1
22227: PLUS
22228: PPUSH
22229: CALL_OW 259
22233: PUSH
22234: LD_INT 10
22236: LESS
22237: IFFALSE 22300
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22239: LD_VAR 0 3
22243: PUSH
22244: LD_VAR 0 1
22248: ARRAY
22249: PPUSH
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 4
22257: MOD
22258: PUSH
22259: LD_INT 1
22261: PLUS
22262: PPUSH
22263: LD_VAR 0 3
22267: PUSH
22268: LD_VAR 0 1
22272: ARRAY
22273: PPUSH
22274: LD_VAR 0 1
22278: PUSH
22279: LD_INT 4
22281: MOD
22282: PUSH
22283: LD_INT 1
22285: PLUS
22286: PPUSH
22287: CALL_OW 259
22291: PUSH
22292: LD_INT 1
22294: PLUS
22295: PPUSH
22296: CALL_OW 237
22300: GO 22202
22302: POP
22303: POP
// end ;
22304: PPOPN 3
22306: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22307: LD_EXP 47
22311: PUSH
22312: LD_EXP 55
22316: AND
22317: IFFALSE 22337
22319: GO 22321
22321: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22322: LD_INT 4
22324: PPUSH
22325: LD_OWVAR 2
22329: PPUSH
22330: LD_INT 0
22332: PPUSH
22333: CALL_OW 324
22337: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22338: LD_EXP 47
22342: PUSH
22343: LD_EXP 84
22347: AND
22348: IFFALSE 22368
22350: GO 22352
22352: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22353: LD_INT 19
22355: PPUSH
22356: LD_OWVAR 2
22360: PPUSH
22361: LD_INT 0
22363: PPUSH
22364: CALL_OW 324
22368: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22369: LD_EXP 47
22373: PUSH
22374: LD_EXP 56
22378: AND
22379: IFFALSE 22481
22381: GO 22383
22383: DISABLE
22384: LD_INT 0
22386: PPUSH
22387: PPUSH
// begin enable ;
22388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22389: LD_ADDR_VAR 0 2
22393: PUSH
22394: LD_INT 22
22396: PUSH
22397: LD_OWVAR 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 34
22411: PUSH
22412: LD_INT 11
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 34
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PPUSH
22438: CALL_OW 69
22442: ST_TO_ADDR
// if not tmp then
22443: LD_VAR 0 2
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22481
// for i in tmp do
22452: LD_ADDR_VAR 0 1
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: FOR_IN
22463: IFFALSE 22479
// begin SetLives ( i , 0 ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_INT 0
22472: PPUSH
22473: CALL_OW 234
// end ;
22477: GO 22462
22479: POP
22480: POP
// end ;
22481: PPOPN 2
22483: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22484: LD_EXP 47
22488: PUSH
22489: LD_EXP 57
22493: AND
22494: IFFALSE 22514
22496: GO 22498
22498: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22499: LD_INT 32
22501: PPUSH
22502: LD_OWVAR 2
22506: PPUSH
22507: LD_INT 0
22509: PPUSH
22510: CALL_OW 324
22514: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22515: LD_EXP 47
22519: PUSH
22520: LD_EXP 58
22524: AND
22525: IFFALSE 22706
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
22534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22535: LD_ADDR_VAR 0 2
22539: PUSH
22540: LD_INT 22
22542: PUSH
22543: LD_OWVAR 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 33
22554: PUSH
22555: LD_INT 3
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL_OW 69
22570: ST_TO_ADDR
// if not tmp then
22571: LD_VAR 0 2
22575: NOT
22576: IFFALSE 22580
// exit ;
22578: GO 22706
// side := 0 ;
22580: LD_ADDR_VAR 0 3
22584: PUSH
22585: LD_INT 0
22587: ST_TO_ADDR
// for i := 1 to 8 do
22588: LD_ADDR_VAR 0 1
22592: PUSH
22593: DOUBLE
22594: LD_INT 1
22596: DEC
22597: ST_TO_ADDR
22598: LD_INT 8
22600: PUSH
22601: FOR_TO
22602: IFFALSE 22650
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22604: LD_OWVAR 2
22608: PUSH
22609: LD_VAR 0 1
22613: NONEQUAL
22614: PUSH
22615: LD_OWVAR 2
22619: PPUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 81
22629: PUSH
22630: LD_INT 2
22632: EQUAL
22633: AND
22634: IFFALSE 22648
// begin side := i ;
22636: LD_ADDR_VAR 0 3
22640: PUSH
22641: LD_VAR 0 1
22645: ST_TO_ADDR
// break ;
22646: GO 22650
// end ;
22648: GO 22601
22650: POP
22651: POP
// if not side then
22652: LD_VAR 0 3
22656: NOT
22657: IFFALSE 22661
// exit ;
22659: GO 22706
// for i := 1 to tmp do
22661: LD_ADDR_VAR 0 1
22665: PUSH
22666: DOUBLE
22667: LD_INT 1
22669: DEC
22670: ST_TO_ADDR
22671: LD_VAR 0 2
22675: PUSH
22676: FOR_TO
22677: IFFALSE 22704
// if Prob ( 60 ) then
22679: LD_INT 60
22681: PPUSH
22682: CALL_OW 13
22686: IFFALSE 22702
// SetSide ( i , side ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: CALL_OW 235
22702: GO 22676
22704: POP
22705: POP
// end ;
22706: PPOPN 3
22708: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22709: LD_EXP 47
22713: PUSH
22714: LD_EXP 60
22718: AND
22719: IFFALSE 22838
22721: GO 22723
22723: DISABLE
22724: LD_INT 0
22726: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22727: LD_ADDR_VAR 0 1
22731: PUSH
22732: LD_INT 22
22734: PUSH
22735: LD_OWVAR 2
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 21
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: LD_INT 23
22759: PUSH
22760: LD_INT 0
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 69
22780: PUSH
22781: FOR_IN
22782: IFFALSE 22836
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 257
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 4
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: IN
22812: IFFALSE 22834
// SetClass ( un , rand ( 1 , 4 ) ) ;
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_INT 4
22824: PPUSH
22825: CALL_OW 12
22829: PPUSH
22830: CALL_OW 336
22834: GO 22781
22836: POP
22837: POP
// end ;
22838: PPOPN 1
22840: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22841: LD_EXP 47
22845: PUSH
22846: LD_EXP 59
22850: AND
22851: IFFALSE 22930
22853: GO 22855
22855: DISABLE
22856: LD_INT 0
22858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22859: LD_ADDR_VAR 0 1
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_OWVAR 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 21
22878: PUSH
22879: LD_INT 3
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: ST_TO_ADDR
// if not tmp then
22895: LD_VAR 0 1
22899: NOT
22900: IFFALSE 22904
// exit ;
22902: GO 22930
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22904: LD_VAR 0 1
22908: PUSH
22909: LD_INT 1
22911: PPUSH
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 12
22921: ARRAY
22922: PPUSH
22923: LD_INT 100
22925: PPUSH
22926: CALL_OW 234
// end ;
22930: PPOPN 1
22932: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22933: LD_EXP 47
22937: PUSH
22938: LD_EXP 61
22942: AND
22943: IFFALSE 23041
22945: GO 22947
22947: DISABLE
22948: LD_INT 0
22950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22951: LD_ADDR_VAR 0 1
22955: PUSH
22956: LD_INT 22
22958: PUSH
22959: LD_OWVAR 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 21
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PPUSH
22982: CALL_OW 69
22986: ST_TO_ADDR
// if not tmp then
22987: LD_VAR 0 1
22991: NOT
22992: IFFALSE 22996
// exit ;
22994: GO 23041
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22996: LD_VAR 0 1
23000: PUSH
23001: LD_INT 1
23003: PPUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 12
23013: ARRAY
23014: PPUSH
23015: LD_INT 1
23017: PPUSH
23018: LD_INT 4
23020: PPUSH
23021: CALL_OW 12
23025: PPUSH
23026: LD_INT 3000
23028: PPUSH
23029: LD_INT 9000
23031: PPUSH
23032: CALL_OW 12
23036: PPUSH
23037: CALL_OW 492
// end ;
23041: PPOPN 1
23043: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23044: LD_EXP 47
23048: PUSH
23049: LD_EXP 62
23053: AND
23054: IFFALSE 23074
23056: GO 23058
23058: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23059: LD_INT 1
23061: PPUSH
23062: LD_OWVAR 2
23066: PPUSH
23067: LD_INT 0
23069: PPUSH
23070: CALL_OW 324
23074: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23075: LD_EXP 47
23079: PUSH
23080: LD_EXP 63
23084: AND
23085: IFFALSE 23168
23087: GO 23089
23089: DISABLE
23090: LD_INT 0
23092: PPUSH
23093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_OWVAR 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 21
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 69
23129: ST_TO_ADDR
// if not tmp then
23130: LD_VAR 0 2
23134: NOT
23135: IFFALSE 23139
// exit ;
23137: GO 23168
// for i in tmp do
23139: LD_ADDR_VAR 0 1
23143: PUSH
23144: LD_VAR 0 2
23148: PUSH
23149: FOR_IN
23150: IFFALSE 23166
// SetBLevel ( i , 10 ) ;
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_INT 10
23159: PPUSH
23160: CALL_OW 241
23164: GO 23149
23166: POP
23167: POP
// end ;
23168: PPOPN 2
23170: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23171: LD_EXP 47
23175: PUSH
23176: LD_EXP 64
23180: AND
23181: IFFALSE 23292
23183: GO 23185
23185: DISABLE
23186: LD_INT 0
23188: PPUSH
23189: PPUSH
23190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23191: LD_ADDR_VAR 0 3
23195: PUSH
23196: LD_INT 22
23198: PUSH
23199: LD_OWVAR 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 25
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 69
23226: ST_TO_ADDR
// if not tmp then
23227: LD_VAR 0 3
23231: NOT
23232: IFFALSE 23236
// exit ;
23234: GO 23292
// un := tmp [ rand ( 1 , tmp ) ] ;
23236: LD_ADDR_VAR 0 2
23240: PUSH
23241: LD_VAR 0 3
23245: PUSH
23246: LD_INT 1
23248: PPUSH
23249: LD_VAR 0 3
23253: PPUSH
23254: CALL_OW 12
23258: ARRAY
23259: ST_TO_ADDR
// if Crawls ( un ) then
23260: LD_VAR 0 2
23264: PPUSH
23265: CALL_OW 318
23269: IFFALSE 23280
// ComWalk ( un ) ;
23271: LD_VAR 0 2
23275: PPUSH
23276: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23280: LD_VAR 0 2
23284: PPUSH
23285: LD_INT 5
23287: PPUSH
23288: CALL_OW 336
// end ;
23292: PPOPN 3
23294: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23295: LD_EXP 47
23299: PUSH
23300: LD_EXP 65
23304: AND
23305: PUSH
23306: LD_OWVAR 67
23310: PUSH
23311: LD_INT 4
23313: LESS
23314: AND
23315: IFFALSE 23334
23317: GO 23319
23319: DISABLE
// begin Difficulty := Difficulty + 1 ;
23320: LD_ADDR_OWVAR 67
23324: PUSH
23325: LD_OWVAR 67
23329: PUSH
23330: LD_INT 1
23332: PLUS
23333: ST_TO_ADDR
// end ;
23334: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23335: LD_EXP 47
23339: PUSH
23340: LD_EXP 66
23344: AND
23345: IFFALSE 23448
23347: GO 23349
23349: DISABLE
23350: LD_INT 0
23352: PPUSH
// begin for i := 1 to 5 do
23353: LD_ADDR_VAR 0 1
23357: PUSH
23358: DOUBLE
23359: LD_INT 1
23361: DEC
23362: ST_TO_ADDR
23363: LD_INT 5
23365: PUSH
23366: FOR_TO
23367: IFFALSE 23446
// begin uc_nation := nation_nature ;
23369: LD_ADDR_OWVAR 21
23373: PUSH
23374: LD_INT 0
23376: ST_TO_ADDR
// uc_side := 0 ;
23377: LD_ADDR_OWVAR 20
23381: PUSH
23382: LD_INT 0
23384: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23385: LD_ADDR_OWVAR 29
23389: PUSH
23390: LD_INT 12
23392: PUSH
23393: LD_INT 12
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: ST_TO_ADDR
// hc_agressivity := 20 ;
23400: LD_ADDR_OWVAR 35
23404: PUSH
23405: LD_INT 20
23407: ST_TO_ADDR
// hc_class := class_tiger ;
23408: LD_ADDR_OWVAR 28
23412: PUSH
23413: LD_INT 14
23415: ST_TO_ADDR
// hc_gallery :=  ;
23416: LD_ADDR_OWVAR 33
23420: PUSH
23421: LD_STRING 
23423: ST_TO_ADDR
// hc_name :=  ;
23424: LD_ADDR_OWVAR 26
23428: PUSH
23429: LD_STRING 
23431: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23432: CALL_OW 44
23436: PPUSH
23437: LD_INT 0
23439: PPUSH
23440: CALL_OW 51
// end ;
23444: GO 23366
23446: POP
23447: POP
// end ;
23448: PPOPN 1
23450: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23451: LD_EXP 47
23455: PUSH
23456: LD_EXP 67
23460: AND
23461: IFFALSE 23470
23463: GO 23465
23465: DISABLE
// StreamSibBomb ;
23466: CALL 23471 0 0
23470: END
// export function StreamSibBomb ; var i , x , y ; begin
23471: LD_INT 0
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
// result := false ;
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_INT 0
23484: ST_TO_ADDR
// for i := 1 to 16 do
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: DOUBLE
23491: LD_INT 1
23493: DEC
23494: ST_TO_ADDR
23495: LD_INT 16
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23698
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23501: LD_ADDR_VAR 0 3
23505: PUSH
23506: LD_INT 10
23508: PUSH
23509: LD_INT 20
23511: PUSH
23512: LD_INT 30
23514: PUSH
23515: LD_INT 40
23517: PUSH
23518: LD_INT 50
23520: PUSH
23521: LD_INT 60
23523: PUSH
23524: LD_INT 70
23526: PUSH
23527: LD_INT 80
23529: PUSH
23530: LD_INT 90
23532: PUSH
23533: LD_INT 100
23535: PUSH
23536: LD_INT 110
23538: PUSH
23539: LD_INT 120
23541: PUSH
23542: LD_INT 130
23544: PUSH
23545: LD_INT 140
23547: PUSH
23548: LD_INT 150
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PPUSH
23571: LD_INT 15
23573: PPUSH
23574: CALL_OW 12
23578: ARRAY
23579: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23580: LD_ADDR_VAR 0 4
23584: PUSH
23585: LD_INT 10
23587: PUSH
23588: LD_INT 20
23590: PUSH
23591: LD_INT 30
23593: PUSH
23594: LD_INT 40
23596: PUSH
23597: LD_INT 50
23599: PUSH
23600: LD_INT 60
23602: PUSH
23603: LD_INT 70
23605: PUSH
23606: LD_INT 80
23608: PUSH
23609: LD_INT 90
23611: PUSH
23612: LD_INT 100
23614: PUSH
23615: LD_INT 110
23617: PUSH
23618: LD_INT 120
23620: PUSH
23621: LD_INT 130
23623: PUSH
23624: LD_INT 140
23626: PUSH
23627: LD_INT 150
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PPUSH
23650: LD_INT 15
23652: PPUSH
23653: CALL_OW 12
23657: ARRAY
23658: ST_TO_ADDR
// if ValidHex ( x , y ) then
23659: LD_VAR 0 3
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 488
23673: IFFALSE 23696
// begin result := [ x , y ] ;
23675: LD_ADDR_VAR 0 1
23679: PUSH
23680: LD_VAR 0 3
23684: PUSH
23685: LD_VAR 0 4
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
// break ;
23694: GO 23698
// end ; end ;
23696: GO 23498
23698: POP
23699: POP
// if result then
23700: LD_VAR 0 1
23704: IFFALSE 23764
// begin ToLua ( playSibBomb() ) ;
23706: LD_STRING playSibBomb()
23708: PPUSH
23709: CALL_OW 559
// wait ( 0 0$14 ) ;
23713: LD_INT 490
23715: PPUSH
23716: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23720: LD_VAR 0 1
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: PPUSH
23729: LD_VAR 0 1
23733: PUSH
23734: LD_INT 2
23736: ARRAY
23737: PPUSH
23738: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23742: LD_VAR 0 1
23746: PUSH
23747: LD_INT 1
23749: ARRAY
23750: PPUSH
23751: LD_VAR 0 1
23755: PUSH
23756: LD_INT 2
23758: ARRAY
23759: PPUSH
23760: CALL_OW 429
// end ; end ;
23764: LD_VAR 0 1
23768: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23769: LD_EXP 47
23773: PUSH
23774: LD_EXP 69
23778: AND
23779: IFFALSE 23791
23781: GO 23783
23783: DISABLE
// YouLost (  ) ;
23784: LD_STRING 
23786: PPUSH
23787: CALL_OW 104
23791: END
// every 0 0$1 trigger StreamModeActive and sFog do
23792: LD_EXP 47
23796: PUSH
23797: LD_EXP 68
23801: AND
23802: IFFALSE 23816
23804: GO 23806
23806: DISABLE
// FogOff ( your_side ) ;
23807: LD_OWVAR 2
23811: PPUSH
23812: CALL_OW 344
23816: END
// every 0 0$1 trigger StreamModeActive and sSun do
23817: LD_EXP 47
23821: PUSH
23822: LD_EXP 70
23826: AND
23827: IFFALSE 23855
23829: GO 23831
23831: DISABLE
// begin solar_recharge_percent := 0 ;
23832: LD_ADDR_OWVAR 79
23836: PUSH
23837: LD_INT 0
23839: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23840: LD_INT 10500
23842: PPUSH
23843: CALL_OW 67
// solar_recharge_percent := 100 ;
23847: LD_ADDR_OWVAR 79
23851: PUSH
23852: LD_INT 100
23854: ST_TO_ADDR
// end ;
23855: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23856: LD_EXP 47
23860: PUSH
23861: LD_EXP 71
23865: AND
23866: IFFALSE 24105
23868: GO 23870
23870: DISABLE
23871: LD_INT 0
23873: PPUSH
23874: PPUSH
23875: PPUSH
// begin tmp := [ ] ;
23876: LD_ADDR_VAR 0 3
23880: PUSH
23881: EMPTY
23882: ST_TO_ADDR
// for i := 1 to 6 do
23883: LD_ADDR_VAR 0 1
23887: PUSH
23888: DOUBLE
23889: LD_INT 1
23891: DEC
23892: ST_TO_ADDR
23893: LD_INT 6
23895: PUSH
23896: FOR_TO
23897: IFFALSE 24002
// begin uc_nation := nation_nature ;
23899: LD_ADDR_OWVAR 21
23903: PUSH
23904: LD_INT 0
23906: ST_TO_ADDR
// uc_side := 0 ;
23907: LD_ADDR_OWVAR 20
23911: PUSH
23912: LD_INT 0
23914: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23915: LD_ADDR_OWVAR 29
23919: PUSH
23920: LD_INT 12
23922: PUSH
23923: LD_INT 12
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// hc_agressivity := 20 ;
23930: LD_ADDR_OWVAR 35
23934: PUSH
23935: LD_INT 20
23937: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23938: LD_ADDR_OWVAR 28
23942: PUSH
23943: LD_INT 17
23945: ST_TO_ADDR
// hc_gallery :=  ;
23946: LD_ADDR_OWVAR 33
23950: PUSH
23951: LD_STRING 
23953: ST_TO_ADDR
// hc_name :=  ;
23954: LD_ADDR_OWVAR 26
23958: PUSH
23959: LD_STRING 
23961: ST_TO_ADDR
// un := CreateHuman ;
23962: LD_ADDR_VAR 0 2
23966: PUSH
23967: CALL_OW 44
23971: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23972: LD_VAR 0 2
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: CALL_OW 51
// tmp := tmp ^ un ;
23984: LD_ADDR_VAR 0 3
23988: PUSH
23989: LD_VAR 0 3
23993: PUSH
23994: LD_VAR 0 2
23998: ADD
23999: ST_TO_ADDR
// end ;
24000: GO 23896
24002: POP
24003: POP
// repeat wait ( 0 0$1 ) ;
24004: LD_INT 35
24006: PPUSH
24007: CALL_OW 67
// for un in tmp do
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_VAR 0 3
24020: PUSH
24021: FOR_IN
24022: IFFALSE 24096
// begin if IsDead ( un ) then
24024: LD_VAR 0 2
24028: PPUSH
24029: CALL_OW 301
24033: IFFALSE 24053
// begin tmp := tmp diff un ;
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: LD_VAR 0 3
24044: PUSH
24045: LD_VAR 0 2
24049: DIFF
24050: ST_TO_ADDR
// continue ;
24051: GO 24021
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24053: LD_VAR 0 2
24057: PPUSH
24058: LD_INT 3
24060: PUSH
24061: LD_INT 22
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PPUSH
24075: CALL_OW 69
24079: PPUSH
24080: LD_VAR 0 2
24084: PPUSH
24085: CALL_OW 74
24089: PPUSH
24090: CALL_OW 115
// end ;
24094: GO 24021
24096: POP
24097: POP
// until not tmp ;
24098: LD_VAR 0 3
24102: NOT
24103: IFFALSE 24004
// end ;
24105: PPOPN 3
24107: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24108: LD_EXP 47
24112: PUSH
24113: LD_EXP 72
24117: AND
24118: IFFALSE 24172
24120: GO 24122
24122: DISABLE
// begin ToLua ( displayTroll(); ) ;
24123: LD_STRING displayTroll();
24125: PPUSH
24126: CALL_OW 559
// wait ( 3 3$00 ) ;
24130: LD_INT 6300
24132: PPUSH
24133: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24137: LD_STRING hideTroll();
24139: PPUSH
24140: CALL_OW 559
// wait ( 1 1$00 ) ;
24144: LD_INT 2100
24146: PPUSH
24147: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24151: LD_STRING displayTroll();
24153: PPUSH
24154: CALL_OW 559
// wait ( 1 1$00 ) ;
24158: LD_INT 2100
24160: PPUSH
24161: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24165: LD_STRING hideTroll();
24167: PPUSH
24168: CALL_OW 559
// end ;
24172: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24173: LD_EXP 47
24177: PUSH
24178: LD_EXP 73
24182: AND
24183: IFFALSE 24246
24185: GO 24187
24187: DISABLE
24188: LD_INT 0
24190: PPUSH
// begin p := 0 ;
24191: LD_ADDR_VAR 0 1
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// repeat game_speed := 1 ;
24199: LD_ADDR_OWVAR 65
24203: PUSH
24204: LD_INT 1
24206: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24207: LD_INT 35
24209: PPUSH
24210: CALL_OW 67
// p := p + 1 ;
24214: LD_ADDR_VAR 0 1
24218: PUSH
24219: LD_VAR 0 1
24223: PUSH
24224: LD_INT 1
24226: PLUS
24227: ST_TO_ADDR
// until p >= 60 ;
24228: LD_VAR 0 1
24232: PUSH
24233: LD_INT 60
24235: GREATEREQUAL
24236: IFFALSE 24199
// game_speed := 4 ;
24238: LD_ADDR_OWVAR 65
24242: PUSH
24243: LD_INT 4
24245: ST_TO_ADDR
// end ;
24246: PPOPN 1
24248: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24249: LD_EXP 47
24253: PUSH
24254: LD_EXP 74
24258: AND
24259: IFFALSE 24405
24261: GO 24263
24263: DISABLE
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24268: LD_ADDR_VAR 0 1
24272: PUSH
24273: LD_INT 22
24275: PUSH
24276: LD_OWVAR 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: LD_INT 30
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 30
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PPUSH
24317: CALL_OW 69
24321: ST_TO_ADDR
// if not depot then
24322: LD_VAR 0 1
24326: NOT
24327: IFFALSE 24331
// exit ;
24329: GO 24405
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_VAR 0 1
24340: PUSH
24341: LD_INT 1
24343: PPUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 12
24353: ARRAY
24354: PPUSH
24355: CALL_OW 274
24359: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: LD_INT 0
24370: PPUSH
24371: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_INT 2
24382: PPUSH
24383: LD_INT 0
24385: PPUSH
24386: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_INT 3
24397: PPUSH
24398: LD_INT 0
24400: PPUSH
24401: CALL_OW 277
// end ;
24405: PPOPN 2
24407: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24408: LD_EXP 47
24412: PUSH
24413: LD_EXP 75
24417: AND
24418: IFFALSE 24515
24420: GO 24422
24422: DISABLE
24423: LD_INT 0
24425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24426: LD_ADDR_VAR 0 1
24430: PUSH
24431: LD_INT 22
24433: PUSH
24434: LD_OWVAR 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 21
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 3
24455: PUSH
24456: LD_INT 23
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: ST_TO_ADDR
// if not tmp then
24480: LD_VAR 0 1
24484: NOT
24485: IFFALSE 24489
// exit ;
24487: GO 24515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24489: LD_VAR 0 1
24493: PUSH
24494: LD_INT 1
24496: PPUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 12
24506: ARRAY
24507: PPUSH
24508: LD_INT 200
24510: PPUSH
24511: CALL_OW 234
// end ;
24515: PPOPN 1
24517: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24518: LD_EXP 47
24522: PUSH
24523: LD_EXP 76
24527: AND
24528: IFFALSE 24607
24530: GO 24532
24532: DISABLE
24533: LD_INT 0
24535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24536: LD_ADDR_VAR 0 1
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_OWVAR 2
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PPUSH
24567: CALL_OW 69
24571: ST_TO_ADDR
// if not tmp then
24572: LD_VAR 0 1
24576: NOT
24577: IFFALSE 24581
// exit ;
24579: GO 24607
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24581: LD_VAR 0 1
24585: PUSH
24586: LD_INT 1
24588: PPUSH
24589: LD_VAR 0 1
24593: PPUSH
24594: CALL_OW 12
24598: ARRAY
24599: PPUSH
24600: LD_INT 60
24602: PPUSH
24603: CALL_OW 234
// end ;
24607: PPOPN 1
24609: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24610: LD_EXP 47
24614: PUSH
24615: LD_EXP 77
24619: AND
24620: IFFALSE 24719
24622: GO 24624
24624: DISABLE
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
// begin enable ;
24629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24630: LD_ADDR_VAR 0 1
24634: PUSH
24635: LD_INT 22
24637: PUSH
24638: LD_OWVAR 2
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 61
24649: PUSH
24650: EMPTY
24651: LIST
24652: PUSH
24653: LD_INT 33
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: PPUSH
24668: CALL_OW 69
24672: ST_TO_ADDR
// if not tmp then
24673: LD_VAR 0 1
24677: NOT
24678: IFFALSE 24682
// exit ;
24680: GO 24719
// for i in tmp do
24682: LD_ADDR_VAR 0 2
24686: PUSH
24687: LD_VAR 0 1
24691: PUSH
24692: FOR_IN
24693: IFFALSE 24717
// if IsControledBy ( i ) then
24695: LD_VAR 0 2
24699: PPUSH
24700: CALL_OW 312
24704: IFFALSE 24715
// ComUnlink ( i ) ;
24706: LD_VAR 0 2
24710: PPUSH
24711: CALL_OW 136
24715: GO 24692
24717: POP
24718: POP
// end ;
24719: PPOPN 2
24721: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24722: LD_EXP 47
24726: PUSH
24727: LD_EXP 78
24731: AND
24732: IFFALSE 24872
24734: GO 24736
24736: DISABLE
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
// begin ToLua ( displayPowell(); ) ;
24741: LD_STRING displayPowell();
24743: PPUSH
24744: CALL_OW 559
// uc_side := 0 ;
24748: LD_ADDR_OWVAR 20
24752: PUSH
24753: LD_INT 0
24755: ST_TO_ADDR
// uc_nation := 2 ;
24756: LD_ADDR_OWVAR 21
24760: PUSH
24761: LD_INT 2
24763: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24764: LD_ADDR_OWVAR 37
24768: PUSH
24769: LD_INT 14
24771: ST_TO_ADDR
// vc_engine := engine_siberite ;
24772: LD_ADDR_OWVAR 39
24776: PUSH
24777: LD_INT 3
24779: ST_TO_ADDR
// vc_control := control_apeman ;
24780: LD_ADDR_OWVAR 38
24784: PUSH
24785: LD_INT 5
24787: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24788: LD_ADDR_OWVAR 40
24792: PUSH
24793: LD_INT 29
24795: ST_TO_ADDR
// un := CreateVehicle ;
24796: LD_ADDR_VAR 0 2
24800: PUSH
24801: CALL_OW 45
24805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24806: LD_VAR 0 2
24810: PPUSH
24811: LD_INT 1
24813: PPUSH
24814: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24818: LD_INT 35
24820: PPUSH
24821: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24825: LD_VAR 0 2
24829: PPUSH
24830: LD_INT 22
24832: PUSH
24833: LD_OWVAR 2
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PPUSH
24842: CALL_OW 69
24846: PPUSH
24847: LD_VAR 0 2
24851: PPUSH
24852: CALL_OW 74
24856: PPUSH
24857: CALL_OW 115
// until IsDead ( un ) ;
24861: LD_VAR 0 2
24865: PPUSH
24866: CALL_OW 301
24870: IFFALSE 24818
// end ;
24872: PPOPN 2
24874: END
// every 0 0$1 trigger StreamModeActive and sStu do
24875: LD_EXP 47
24879: PUSH
24880: LD_EXP 86
24884: AND
24885: IFFALSE 24901
24887: GO 24889
24889: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24890: LD_STRING displayStucuk();
24892: PPUSH
24893: CALL_OW 559
// ResetFog ;
24897: CALL_OW 335
// end ;
24901: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24902: LD_EXP 47
24906: PUSH
24907: LD_EXP 79
24911: AND
24912: IFFALSE 25053
24914: GO 24916
24916: DISABLE
24917: LD_INT 0
24919: PPUSH
24920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24921: LD_ADDR_VAR 0 2
24925: PUSH
24926: LD_INT 22
24928: PUSH
24929: LD_OWVAR 2
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 21
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PPUSH
24952: CALL_OW 69
24956: ST_TO_ADDR
// if not tmp then
24957: LD_VAR 0 2
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25053
// un := tmp [ rand ( 1 , tmp ) ] ;
24966: LD_ADDR_VAR 0 1
24970: PUSH
24971: LD_VAR 0 2
24975: PUSH
24976: LD_INT 1
24978: PPUSH
24979: LD_VAR 0 2
24983: PPUSH
24984: CALL_OW 12
24988: ARRAY
24989: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24990: LD_VAR 0 1
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25002: LD_VAR 0 1
25006: PPUSH
25007: LD_OWVAR 3
25011: PUSH
25012: LD_VAR 0 1
25016: DIFF
25017: PPUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 74
25027: PPUSH
25028: CALL_OW 115
// wait ( 0 0$20 ) ;
25032: LD_INT 700
25034: PPUSH
25035: CALL_OW 67
// SetSide ( un , your_side ) ;
25039: LD_VAR 0 1
25043: PPUSH
25044: LD_OWVAR 2
25048: PPUSH
25049: CALL_OW 235
// end ;
25053: PPOPN 2
25055: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25056: LD_EXP 47
25060: PUSH
25061: LD_EXP 80
25065: AND
25066: IFFALSE 25172
25068: GO 25070
25070: DISABLE
25071: LD_INT 0
25073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25074: LD_ADDR_VAR 0 1
25078: PUSH
25079: LD_INT 22
25081: PUSH
25082: LD_OWVAR 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 30
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 30
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: ST_TO_ADDR
// if not depot then
25128: LD_VAR 0 1
25132: NOT
25133: IFFALSE 25137
// exit ;
25135: GO 25172
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25137: LD_VAR 0 1
25141: PUSH
25142: LD_INT 1
25144: ARRAY
25145: PPUSH
25146: CALL_OW 250
25150: PPUSH
25151: LD_VAR 0 1
25155: PUSH
25156: LD_INT 1
25158: ARRAY
25159: PPUSH
25160: CALL_OW 251
25164: PPUSH
25165: LD_INT 70
25167: PPUSH
25168: CALL_OW 495
// end ;
25172: PPOPN 1
25174: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25175: LD_EXP 47
25179: PUSH
25180: LD_EXP 81
25184: AND
25185: IFFALSE 25396
25187: GO 25189
25189: DISABLE
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25197: LD_ADDR_VAR 0 5
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_OWVAR 2
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PPUSH
25228: CALL_OW 69
25232: ST_TO_ADDR
// if not tmp then
25233: LD_VAR 0 5
25237: NOT
25238: IFFALSE 25242
// exit ;
25240: GO 25396
// for i in tmp do
25242: LD_ADDR_VAR 0 1
25246: PUSH
25247: LD_VAR 0 5
25251: PUSH
25252: FOR_IN
25253: IFFALSE 25394
// begin d := rand ( 0 , 5 ) ;
25255: LD_ADDR_VAR 0 4
25259: PUSH
25260: LD_INT 0
25262: PPUSH
25263: LD_INT 5
25265: PPUSH
25266: CALL_OW 12
25270: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25271: LD_ADDR_VAR 0 2
25275: PUSH
25276: LD_VAR 0 1
25280: PPUSH
25281: CALL_OW 250
25285: PPUSH
25286: LD_VAR 0 4
25290: PPUSH
25291: LD_INT 3
25293: PPUSH
25294: LD_INT 12
25296: PPUSH
25297: CALL_OW 12
25301: PPUSH
25302: CALL_OW 272
25306: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25307: LD_ADDR_VAR 0 3
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 251
25321: PPUSH
25322: LD_VAR 0 4
25326: PPUSH
25327: LD_INT 3
25329: PPUSH
25330: LD_INT 12
25332: PPUSH
25333: CALL_OW 12
25337: PPUSH
25338: CALL_OW 273
25342: ST_TO_ADDR
// if ValidHex ( x , y ) then
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_VAR 0 3
25352: PPUSH
25353: CALL_OW 488
25357: IFFALSE 25392
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25359: LD_VAR 0 1
25363: PPUSH
25364: LD_VAR 0 2
25368: PPUSH
25369: LD_VAR 0 3
25373: PPUSH
25374: LD_INT 3
25376: PPUSH
25377: LD_INT 6
25379: PPUSH
25380: CALL_OW 12
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: CALL_OW 483
// end ;
25392: GO 25252
25394: POP
25395: POP
// end ;
25396: PPOPN 5
25398: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25399: LD_EXP 47
25403: PUSH
25404: LD_EXP 82
25408: AND
25409: IFFALSE 25503
25411: GO 25413
25413: DISABLE
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25418: LD_ADDR_VAR 0 2
25422: PUSH
25423: LD_INT 22
25425: PUSH
25426: LD_OWVAR 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 32
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 21
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 69
25464: ST_TO_ADDR
// if not tmp then
25465: LD_VAR 0 2
25469: NOT
25470: IFFALSE 25474
// exit ;
25472: GO 25503
// for i in tmp do
25474: LD_ADDR_VAR 0 1
25478: PUSH
25479: LD_VAR 0 2
25483: PUSH
25484: FOR_IN
25485: IFFALSE 25501
// SetFuel ( i , 0 ) ;
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_INT 0
25494: PPUSH
25495: CALL_OW 240
25499: GO 25484
25501: POP
25502: POP
// end ;
25503: PPOPN 2
25505: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25506: LD_EXP 47
25510: PUSH
25511: LD_EXP 83
25515: AND
25516: IFFALSE 25582
25518: GO 25520
25520: DISABLE
25521: LD_INT 0
25523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_INT 22
25531: PUSH
25532: LD_OWVAR 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 30
25543: PUSH
25544: LD_INT 29
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PPUSH
25555: CALL_OW 69
25559: ST_TO_ADDR
// if not tmp then
25560: LD_VAR 0 1
25564: NOT
25565: IFFALSE 25569
// exit ;
25567: GO 25582
// DestroyUnit ( tmp [ 1 ] ) ;
25569: LD_VAR 0 1
25573: PUSH
25574: LD_INT 1
25576: ARRAY
25577: PPUSH
25578: CALL_OW 65
// end ;
25582: PPOPN 1
25584: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25585: LD_EXP 47
25589: PUSH
25590: LD_EXP 85
25594: AND
25595: IFFALSE 25724
25597: GO 25599
25599: DISABLE
25600: LD_INT 0
25602: PPUSH
// begin uc_side := 0 ;
25603: LD_ADDR_OWVAR 20
25607: PUSH
25608: LD_INT 0
25610: ST_TO_ADDR
// uc_nation := nation_arabian ;
25611: LD_ADDR_OWVAR 21
25615: PUSH
25616: LD_INT 2
25618: ST_TO_ADDR
// hc_gallery :=  ;
25619: LD_ADDR_OWVAR 33
25623: PUSH
25624: LD_STRING 
25626: ST_TO_ADDR
// hc_name :=  ;
25627: LD_ADDR_OWVAR 26
25631: PUSH
25632: LD_STRING 
25634: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25635: LD_INT 1
25637: PPUSH
25638: LD_INT 11
25640: PPUSH
25641: LD_INT 10
25643: PPUSH
25644: CALL_OW 380
// un := CreateHuman ;
25648: LD_ADDR_VAR 0 1
25652: PUSH
25653: CALL_OW 44
25657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25658: LD_VAR 0 1
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25670: LD_INT 35
25672: PPUSH
25673: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_INT 22
25684: PUSH
25685: LD_OWVAR 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PPUSH
25694: CALL_OW 69
25698: PPUSH
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 74
25708: PPUSH
25709: CALL_OW 115
// until IsDead ( un ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL_OW 301
25722: IFFALSE 25670
// end ;
25724: PPOPN 1
25726: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25727: LD_EXP 47
25731: PUSH
25732: LD_EXP 87
25736: AND
25737: IFFALSE 25749
25739: GO 25741
25741: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25742: LD_STRING earthquake(getX(game), 0, 32)
25744: PPUSH
25745: CALL_OW 559
25749: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25750: LD_EXP 47
25754: PUSH
25755: LD_EXP 88
25759: AND
25760: IFFALSE 25851
25762: GO 25764
25764: DISABLE
25765: LD_INT 0
25767: PPUSH
// begin enable ;
25768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: LD_INT 22
25776: PUSH
25777: LD_OWVAR 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 21
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 33
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: PPUSH
25811: CALL_OW 69
25815: ST_TO_ADDR
// if not tmp then
25816: LD_VAR 0 1
25820: NOT
25821: IFFALSE 25825
// exit ;
25823: GO 25851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25825: LD_VAR 0 1
25829: PUSH
25830: LD_INT 1
25832: PPUSH
25833: LD_VAR 0 1
25837: PPUSH
25838: CALL_OW 12
25842: ARRAY
25843: PPUSH
25844: LD_INT 1
25846: PPUSH
25847: CALL_OW 234
// end ;
25851: PPOPN 1
25853: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25854: LD_EXP 47
25858: PUSH
25859: LD_EXP 89
25863: AND
25864: IFFALSE 26005
25866: GO 25868
25868: DISABLE
25869: LD_INT 0
25871: PPUSH
25872: PPUSH
25873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 22
25881: PUSH
25882: LD_OWVAR 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 25
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PPUSH
25905: CALL_OW 69
25909: ST_TO_ADDR
// if not tmp then
25910: LD_VAR 0 3
25914: NOT
25915: IFFALSE 25919
// exit ;
25917: GO 26005
// un := tmp [ rand ( 1 , tmp ) ] ;
25919: LD_ADDR_VAR 0 2
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_INT 1
25931: PPUSH
25932: LD_VAR 0 3
25936: PPUSH
25937: CALL_OW 12
25941: ARRAY
25942: ST_TO_ADDR
// if Crawls ( un ) then
25943: LD_VAR 0 2
25947: PPUSH
25948: CALL_OW 318
25952: IFFALSE 25963
// ComWalk ( un ) ;
25954: LD_VAR 0 2
25958: PPUSH
25959: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_INT 9
25970: PPUSH
25971: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25975: LD_INT 28
25977: PPUSH
25978: LD_OWVAR 2
25982: PPUSH
25983: LD_INT 2
25985: PPUSH
25986: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25990: LD_INT 29
25992: PPUSH
25993: LD_OWVAR 2
25997: PPUSH
25998: LD_INT 2
26000: PPUSH
26001: CALL_OW 322
// end ;
26005: PPOPN 3
26007: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26008: LD_EXP 47
26012: PUSH
26013: LD_EXP 90
26017: AND
26018: IFFALSE 26129
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
26026: PPUSH
26027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26028: LD_ADDR_VAR 0 3
26032: PUSH
26033: LD_INT 22
26035: PUSH
26036: LD_OWVAR 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 25
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: ST_TO_ADDR
// if not tmp then
26064: LD_VAR 0 3
26068: NOT
26069: IFFALSE 26073
// exit ;
26071: GO 26129
// un := tmp [ rand ( 1 , tmp ) ] ;
26073: LD_ADDR_VAR 0 2
26077: PUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_INT 1
26085: PPUSH
26086: LD_VAR 0 3
26090: PPUSH
26091: CALL_OW 12
26095: ARRAY
26096: ST_TO_ADDR
// if Crawls ( un ) then
26097: LD_VAR 0 2
26101: PPUSH
26102: CALL_OW 318
26106: IFFALSE 26117
// ComWalk ( un ) ;
26108: LD_VAR 0 2
26112: PPUSH
26113: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_INT 8
26124: PPUSH
26125: CALL_OW 336
// end ;
26129: PPOPN 3
26131: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26132: LD_EXP 47
26136: PUSH
26137: LD_EXP 91
26141: AND
26142: IFFALSE 26286
26144: GO 26146
26146: DISABLE
26147: LD_INT 0
26149: PPUSH
26150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26151: LD_ADDR_VAR 0 2
26155: PUSH
26156: LD_INT 22
26158: PUSH
26159: LD_OWVAR 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 21
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 34
26183: PUSH
26184: LD_INT 12
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 34
26193: PUSH
26194: LD_INT 51
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 34
26203: PUSH
26204: LD_INT 32
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: ST_TO_ADDR
// if not tmp then
26227: LD_VAR 0 2
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 26286
// for i in tmp do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_IN
26247: IFFALSE 26284
// if GetCargo ( i , mat_artifact ) = 0 then
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_INT 4
26256: PPUSH
26257: CALL_OW 289
26261: PUSH
26262: LD_INT 0
26264: EQUAL
26265: IFFALSE 26282
// SetCargo ( i , mat_siberit , 100 ) ;
26267: LD_VAR 0 1
26271: PPUSH
26272: LD_INT 3
26274: PPUSH
26275: LD_INT 100
26277: PPUSH
26278: CALL_OW 290
26282: GO 26246
26284: POP
26285: POP
// end ;
26286: PPOPN 2
26288: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26289: LD_EXP 47
26293: PUSH
26294: LD_EXP 92
26298: AND
26299: IFFALSE 26482
26301: GO 26303
26303: DISABLE
26304: LD_INT 0
26306: PPUSH
26307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26308: LD_ADDR_VAR 0 2
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_OWVAR 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 2
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26482
// for i := 1 to 2 do
26339: LD_ADDR_VAR 0 1
26343: PUSH
26344: DOUBLE
26345: LD_INT 1
26347: DEC
26348: ST_TO_ADDR
26349: LD_INT 2
26351: PUSH
26352: FOR_TO
26353: IFFALSE 26480
// begin uc_side := your_side ;
26355: LD_ADDR_OWVAR 20
26359: PUSH
26360: LD_OWVAR 2
26364: ST_TO_ADDR
// uc_nation := nation_american ;
26365: LD_ADDR_OWVAR 21
26369: PUSH
26370: LD_INT 1
26372: ST_TO_ADDR
// vc_chassis := us_morphling ;
26373: LD_ADDR_OWVAR 37
26377: PUSH
26378: LD_INT 5
26380: ST_TO_ADDR
// vc_engine := engine_siberite ;
26381: LD_ADDR_OWVAR 39
26385: PUSH
26386: LD_INT 3
26388: ST_TO_ADDR
// vc_control := control_computer ;
26389: LD_ADDR_OWVAR 38
26393: PUSH
26394: LD_INT 3
26396: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26397: LD_ADDR_OWVAR 40
26401: PUSH
26402: LD_INT 10
26404: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26405: LD_VAR 0 2
26409: PUSH
26410: LD_INT 1
26412: ARRAY
26413: PPUSH
26414: CALL_OW 310
26418: NOT
26419: IFFALSE 26466
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26421: CALL_OW 45
26425: PPUSH
26426: LD_VAR 0 2
26430: PUSH
26431: LD_INT 1
26433: ARRAY
26434: PPUSH
26435: CALL_OW 250
26439: PPUSH
26440: LD_VAR 0 2
26444: PUSH
26445: LD_INT 1
26447: ARRAY
26448: PPUSH
26449: CALL_OW 251
26453: PPUSH
26454: LD_INT 12
26456: PPUSH
26457: LD_INT 1
26459: PPUSH
26460: CALL_OW 50
26464: GO 26478
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26466: CALL_OW 45
26470: PPUSH
26471: LD_INT 1
26473: PPUSH
26474: CALL_OW 51
// end ;
26478: GO 26352
26480: POP
26481: POP
// end ;
26482: PPOPN 2
26484: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26485: LD_EXP 47
26489: PUSH
26490: LD_EXP 93
26494: AND
26495: IFFALSE 26717
26497: GO 26499
26499: DISABLE
26500: LD_INT 0
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26508: LD_ADDR_VAR 0 6
26512: PUSH
26513: LD_INT 22
26515: PUSH
26516: LD_OWVAR 2
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 21
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 3
26537: PUSH
26538: LD_INT 23
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: PPUSH
26557: CALL_OW 69
26561: ST_TO_ADDR
// if not tmp then
26562: LD_VAR 0 6
26566: NOT
26567: IFFALSE 26571
// exit ;
26569: GO 26717
// s1 := rand ( 1 , 4 ) ;
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: LD_INT 1
26578: PPUSH
26579: LD_INT 4
26581: PPUSH
26582: CALL_OW 12
26586: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26587: LD_ADDR_VAR 0 4
26591: PUSH
26592: LD_VAR 0 6
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: LD_VAR 0 2
26605: PPUSH
26606: CALL_OW 259
26610: ST_TO_ADDR
// if s1 = 1 then
26611: LD_VAR 0 2
26615: PUSH
26616: LD_INT 1
26618: EQUAL
26619: IFFALSE 26639
// s2 := rand ( 2 , 4 ) else
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 2
26628: PPUSH
26629: LD_INT 4
26631: PPUSH
26632: CALL_OW 12
26636: ST_TO_ADDR
26637: GO 26647
// s2 := 1 ;
26639: LD_ADDR_VAR 0 3
26643: PUSH
26644: LD_INT 1
26646: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26647: LD_ADDR_VAR 0 5
26651: PUSH
26652: LD_VAR 0 6
26656: PUSH
26657: LD_INT 1
26659: ARRAY
26660: PPUSH
26661: LD_VAR 0 3
26665: PPUSH
26666: CALL_OW 259
26670: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26671: LD_VAR 0 6
26675: PUSH
26676: LD_INT 1
26678: ARRAY
26679: PPUSH
26680: LD_VAR 0 2
26684: PPUSH
26685: LD_VAR 0 5
26689: PPUSH
26690: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26694: LD_VAR 0 6
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_VAR 0 3
26707: PPUSH
26708: LD_VAR 0 4
26712: PPUSH
26713: CALL_OW 237
// end ;
26717: PPOPN 6
26719: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26720: LD_EXP 47
26724: PUSH
26725: LD_EXP 94
26729: AND
26730: IFFALSE 26809
26732: GO 26734
26734: DISABLE
26735: LD_INT 0
26737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26738: LD_ADDR_VAR 0 1
26742: PUSH
26743: LD_INT 22
26745: PUSH
26746: LD_OWVAR 2
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 30
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PPUSH
26769: CALL_OW 69
26773: ST_TO_ADDR
// if not tmp then
26774: LD_VAR 0 1
26778: NOT
26779: IFFALSE 26783
// exit ;
26781: GO 26809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26783: LD_VAR 0 1
26787: PUSH
26788: LD_INT 1
26790: PPUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: CALL_OW 12
26800: ARRAY
26801: PPUSH
26802: LD_INT 1
26804: PPUSH
26805: CALL_OW 234
// end ;
26809: PPOPN 1
26811: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26812: LD_EXP 47
26816: PUSH
26817: LD_EXP 95
26821: AND
26822: IFFALSE 26934
26824: GO 26826
26826: DISABLE
26827: LD_INT 0
26829: PPUSH
26830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26831: LD_ADDR_VAR 0 2
26835: PUSH
26836: LD_INT 22
26838: PUSH
26839: LD_OWVAR 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 30
26853: PUSH
26854: LD_INT 27
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 30
26863: PUSH
26864: LD_INT 26
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 30
26873: PUSH
26874: LD_INT 28
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PPUSH
26891: CALL_OW 69
26895: ST_TO_ADDR
// if not tmp then
26896: LD_VAR 0 2
26900: NOT
26901: IFFALSE 26905
// exit ;
26903: GO 26934
// for i in tmp do
26905: LD_ADDR_VAR 0 1
26909: PUSH
26910: LD_VAR 0 2
26914: PUSH
26915: FOR_IN
26916: IFFALSE 26932
// SetLives ( i , 1 ) ;
26918: LD_VAR 0 1
26922: PPUSH
26923: LD_INT 1
26925: PPUSH
26926: CALL_OW 234
26930: GO 26915
26932: POP
26933: POP
// end ;
26934: PPOPN 2
26936: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26937: LD_EXP 47
26941: PUSH
26942: LD_EXP 96
26946: AND
26947: IFFALSE 27234
26949: GO 26951
26951: DISABLE
26952: LD_INT 0
26954: PPUSH
26955: PPUSH
26956: PPUSH
// begin i := rand ( 1 , 7 ) ;
26957: LD_ADDR_VAR 0 1
26961: PUSH
26962: LD_INT 1
26964: PPUSH
26965: LD_INT 7
26967: PPUSH
26968: CALL_OW 12
26972: ST_TO_ADDR
// case i of 1 :
26973: LD_VAR 0 1
26977: PUSH
26978: LD_INT 1
26980: DOUBLE
26981: EQUAL
26982: IFTRUE 26986
26984: GO 26996
26986: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26987: LD_STRING earthquake(getX(game), 0, 32)
26989: PPUSH
26990: CALL_OW 559
26994: GO 27234
26996: LD_INT 2
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 27018
27004: POP
// begin ToLua ( displayStucuk(); ) ;
27005: LD_STRING displayStucuk();
27007: PPUSH
27008: CALL_OW 559
// ResetFog ;
27012: CALL_OW 335
// end ; 3 :
27016: GO 27234
27018: LD_INT 3
27020: DOUBLE
27021: EQUAL
27022: IFTRUE 27026
27024: GO 27130
27026: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27027: LD_ADDR_VAR 0 2
27031: PUSH
27032: LD_INT 22
27034: PUSH
27035: LD_OWVAR 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 25
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 2
27067: NOT
27068: IFFALSE 27072
// exit ;
27070: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27072: LD_ADDR_VAR 0 3
27076: PUSH
27077: LD_VAR 0 2
27081: PUSH
27082: LD_INT 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL_OW 12
27094: ARRAY
27095: ST_TO_ADDR
// if Crawls ( un ) then
27096: LD_VAR 0 3
27100: PPUSH
27101: CALL_OW 318
27105: IFFALSE 27116
// ComWalk ( un ) ;
27107: LD_VAR 0 3
27111: PPUSH
27112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27116: LD_VAR 0 3
27120: PPUSH
27121: LD_INT 8
27123: PPUSH
27124: CALL_OW 336
// end ; 4 :
27128: GO 27234
27130: LD_INT 4
27132: DOUBLE
27133: EQUAL
27134: IFTRUE 27138
27136: GO 27212
27138: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27139: LD_ADDR_VAR 0 2
27143: PUSH
27144: LD_INT 22
27146: PUSH
27147: LD_OWVAR 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 30
27158: PUSH
27159: LD_INT 29
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: ST_TO_ADDR
// if not tmp then
27175: LD_VAR 0 2
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27234
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27184: LD_VAR 0 2
27188: PUSH
27189: LD_INT 1
27191: ARRAY
27192: PPUSH
27193: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27197: LD_VAR 0 2
27201: PUSH
27202: LD_INT 1
27204: ARRAY
27205: PPUSH
27206: CALL_OW 65
// end ; 5 .. 7 :
27210: GO 27234
27212: LD_INT 5
27214: DOUBLE
27215: GREATEREQUAL
27216: IFFALSE 27224
27218: LD_INT 7
27220: DOUBLE
27221: LESSEQUAL
27222: IFTRUE 27226
27224: GO 27233
27226: POP
// StreamSibBomb ; end ;
27227: CALL 23471 0 0
27231: GO 27234
27233: POP
// end ;
27234: PPOPN 3
27236: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27237: LD_EXP 47
27241: PUSH
27242: LD_EXP 97
27246: AND
27247: IFFALSE 27403
27249: GO 27251
27251: DISABLE
27252: LD_INT 0
27254: PPUSH
27255: PPUSH
27256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27257: LD_ADDR_VAR 0 2
27261: PUSH
27262: LD_INT 81
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 21
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 21
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: ST_TO_ADDR
// if not tmp then
27311: LD_VAR 0 2
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 27403
// p := 0 ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_INT 0
27327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27328: LD_INT 35
27330: PPUSH
27331: CALL_OW 67
// p := p + 1 ;
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_VAR 0 3
27344: PUSH
27345: LD_INT 1
27347: PLUS
27348: ST_TO_ADDR
// for i in tmp do
27349: LD_ADDR_VAR 0 1
27353: PUSH
27354: LD_VAR 0 2
27358: PUSH
27359: FOR_IN
27360: IFFALSE 27391
// if GetLives ( i ) < 1000 then
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 256
27371: PUSH
27372: LD_INT 1000
27374: LESS
27375: IFFALSE 27389
// SetLives ( i , 1000 ) ;
27377: LD_VAR 0 1
27381: PPUSH
27382: LD_INT 1000
27384: PPUSH
27385: CALL_OW 234
27389: GO 27359
27391: POP
27392: POP
// until p > 20 ;
27393: LD_VAR 0 3
27397: PUSH
27398: LD_INT 20
27400: GREATER
27401: IFFALSE 27328
// end ;
27403: PPOPN 3
27405: END
// every 0 0$1 trigger StreamModeActive and sTime do
27406: LD_EXP 47
27410: PUSH
27411: LD_EXP 98
27415: AND
27416: IFFALSE 27451
27418: GO 27420
27420: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27421: LD_INT 28
27423: PPUSH
27424: LD_OWVAR 2
27428: PPUSH
27429: LD_INT 2
27431: PPUSH
27432: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27436: LD_INT 30
27438: PPUSH
27439: LD_OWVAR 2
27443: PPUSH
27444: LD_INT 2
27446: PPUSH
27447: CALL_OW 322
// end ;
27451: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27452: LD_EXP 47
27456: PUSH
27457: LD_EXP 99
27461: AND
27462: IFFALSE 27583
27464: GO 27466
27466: DISABLE
27467: LD_INT 0
27469: PPUSH
27470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27471: LD_ADDR_VAR 0 2
27475: PUSH
27476: LD_INT 22
27478: PUSH
27479: LD_OWVAR 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 21
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 23
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: ST_TO_ADDR
// if not tmp then
27525: LD_VAR 0 2
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27583
// for i in tmp do
27534: LD_ADDR_VAR 0 1
27538: PUSH
27539: LD_VAR 0 2
27543: PUSH
27544: FOR_IN
27545: IFFALSE 27581
// begin if Crawls ( i ) then
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 318
27556: IFFALSE 27567
// ComWalk ( i ) ;
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 138
// SetClass ( i , 2 ) ;
27567: LD_VAR 0 1
27571: PPUSH
27572: LD_INT 2
27574: PPUSH
27575: CALL_OW 336
// end ;
27579: GO 27544
27581: POP
27582: POP
// end ;
27583: PPOPN 2
27585: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27586: LD_EXP 47
27590: PUSH
27591: LD_EXP 100
27595: AND
27596: IFFALSE 27884
27598: GO 27600
27600: DISABLE
27601: LD_INT 0
27603: PPUSH
27604: PPUSH
27605: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27606: LD_OWVAR 2
27610: PPUSH
27611: LD_INT 9
27613: PPUSH
27614: LD_INT 1
27616: PPUSH
27617: LD_INT 1
27619: PPUSH
27620: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27624: LD_INT 9
27626: PPUSH
27627: LD_OWVAR 2
27631: PPUSH
27632: CALL_OW 343
// uc_side := 9 ;
27636: LD_ADDR_OWVAR 20
27640: PUSH
27641: LD_INT 9
27643: ST_TO_ADDR
// uc_nation := 2 ;
27644: LD_ADDR_OWVAR 21
27648: PUSH
27649: LD_INT 2
27651: ST_TO_ADDR
// hc_name := Dark Warrior ;
27652: LD_ADDR_OWVAR 26
27656: PUSH
27657: LD_STRING Dark Warrior
27659: ST_TO_ADDR
// hc_gallery :=  ;
27660: LD_ADDR_OWVAR 33
27664: PUSH
27665: LD_STRING 
27667: ST_TO_ADDR
// hc_noskilllimit := true ;
27668: LD_ADDR_OWVAR 76
27672: PUSH
27673: LD_INT 1
27675: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27676: LD_ADDR_OWVAR 31
27680: PUSH
27681: LD_INT 30
27683: PUSH
27684: LD_INT 30
27686: PUSH
27687: LD_INT 30
27689: PUSH
27690: LD_INT 30
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: ST_TO_ADDR
// un := CreateHuman ;
27699: LD_ADDR_VAR 0 3
27703: PUSH
27704: CALL_OW 44
27708: ST_TO_ADDR
// hc_noskilllimit := false ;
27709: LD_ADDR_OWVAR 76
27713: PUSH
27714: LD_INT 0
27716: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27717: LD_VAR 0 3
27721: PPUSH
27722: LD_INT 1
27724: PPUSH
27725: CALL_OW 51
// ToLua ( playRanger() ) ;
27729: LD_STRING playRanger()
27731: PPUSH
27732: CALL_OW 559
// p := 0 ;
27736: LD_ADDR_VAR 0 2
27740: PUSH
27741: LD_INT 0
27743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27744: LD_INT 35
27746: PPUSH
27747: CALL_OW 67
// p := p + 1 ;
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: LD_VAR 0 2
27760: PUSH
27761: LD_INT 1
27763: PLUS
27764: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27765: LD_VAR 0 3
27769: PPUSH
27770: CALL_OW 256
27774: PUSH
27775: LD_INT 1000
27777: LESS
27778: IFFALSE 27792
// SetLives ( un , 1000 ) ;
27780: LD_VAR 0 3
27784: PPUSH
27785: LD_INT 1000
27787: PPUSH
27788: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27792: LD_VAR 0 3
27796: PPUSH
27797: LD_INT 81
27799: PUSH
27800: LD_OWVAR 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 91
27811: PUSH
27812: LD_VAR 0 3
27816: PUSH
27817: LD_INT 30
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: PPUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 74
27843: PPUSH
27844: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27848: LD_VAR 0 2
27852: PUSH
27853: LD_INT 80
27855: GREATER
27856: PUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 301
27866: OR
27867: IFFALSE 27744
// if un then
27869: LD_VAR 0 3
27873: IFFALSE 27884
// RemoveUnit ( un ) ;
27875: LD_VAR 0 3
27879: PPUSH
27880: CALL_OW 64
// end ;
27884: PPOPN 3
27886: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27887: LD_EXP 101
27891: IFFALSE 28007
27893: GO 27895
27895: DISABLE
27896: LD_INT 0
27898: PPUSH
27899: PPUSH
27900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27901: LD_ADDR_VAR 0 2
27905: PUSH
27906: LD_INT 81
27908: PUSH
27909: LD_OWVAR 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 21
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PPUSH
27932: CALL_OW 69
27936: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27937: LD_STRING playComputer()
27939: PPUSH
27940: CALL_OW 559
// if not tmp then
27944: LD_VAR 0 2
27948: NOT
27949: IFFALSE 27953
// exit ;
27951: GO 28007
// for i in tmp do
27953: LD_ADDR_VAR 0 1
27957: PUSH
27958: LD_VAR 0 2
27962: PUSH
27963: FOR_IN
27964: IFFALSE 28005
// for j := 1 to 4 do
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: DOUBLE
27972: LD_INT 1
27974: DEC
27975: ST_TO_ADDR
27976: LD_INT 4
27978: PUSH
27979: FOR_TO
27980: IFFALSE 28001
// SetSkill ( i , j , 10 ) ;
27982: LD_VAR 0 1
27986: PPUSH
27987: LD_VAR 0 3
27991: PPUSH
27992: LD_INT 10
27994: PPUSH
27995: CALL_OW 237
27999: GO 27979
28001: POP
28002: POP
28003: GO 27963
28005: POP
28006: POP
// end ;
28007: PPOPN 3
28009: END
// every 0 0$1 trigger s30 do var i , tmp ;
28010: LD_EXP 102
28014: IFFALSE 28083
28016: GO 28018
28018: DISABLE
28019: LD_INT 0
28021: PPUSH
28022: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28023: LD_ADDR_VAR 0 2
28027: PUSH
28028: LD_INT 22
28030: PUSH
28031: LD_OWVAR 2
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PPUSH
28040: CALL_OW 69
28044: ST_TO_ADDR
// if not tmp then
28045: LD_VAR 0 2
28049: NOT
28050: IFFALSE 28054
// exit ;
28052: GO 28083
// for i in tmp do
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: LD_VAR 0 2
28063: PUSH
28064: FOR_IN
28065: IFFALSE 28081
// SetLives ( i , 300 ) ;
28067: LD_VAR 0 1
28071: PPUSH
28072: LD_INT 300
28074: PPUSH
28075: CALL_OW 234
28079: GO 28064
28081: POP
28082: POP
// end ;
28083: PPOPN 2
28085: END
// every 0 0$1 trigger s60 do var i , tmp ;
28086: LD_EXP 103
28090: IFFALSE 28159
28092: GO 28094
28094: DISABLE
28095: LD_INT 0
28097: PPUSH
28098: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: LD_INT 22
28106: PUSH
28107: LD_OWVAR 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 2
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28159
// for i in tmp do
28130: LD_ADDR_VAR 0 1
28134: PUSH
28135: LD_VAR 0 2
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28157
// SetLives ( i , 600 ) ;
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_INT 600
28150: PPUSH
28151: CALL_OW 234
28155: GO 28140
28157: POP
28158: POP
// end ;
28159: PPOPN 2
28161: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28162: LD_INT 0
28164: PPUSH
// case cmd of 301 :
28165: LD_VAR 0 1
28169: PUSH
28170: LD_INT 301
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28210
28178: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28179: LD_VAR 0 6
28183: PPUSH
28184: LD_VAR 0 7
28188: PPUSH
28189: LD_VAR 0 8
28193: PPUSH
28194: LD_VAR 0 4
28198: PPUSH
28199: LD_VAR 0 5
28203: PPUSH
28204: CALL 29411 0 5
28208: GO 28331
28210: LD_INT 302
28212: DOUBLE
28213: EQUAL
28214: IFTRUE 28218
28216: GO 28255
28218: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28219: LD_VAR 0 6
28223: PPUSH
28224: LD_VAR 0 7
28228: PPUSH
28229: LD_VAR 0 8
28233: PPUSH
28234: LD_VAR 0 9
28238: PPUSH
28239: LD_VAR 0 4
28243: PPUSH
28244: LD_VAR 0 5
28248: PPUSH
28249: CALL 29502 0 6
28253: GO 28331
28255: LD_INT 303
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28300
28263: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28264: LD_VAR 0 6
28268: PPUSH
28269: LD_VAR 0 7
28273: PPUSH
28274: LD_VAR 0 8
28278: PPUSH
28279: LD_VAR 0 9
28283: PPUSH
28284: LD_VAR 0 4
28288: PPUSH
28289: LD_VAR 0 5
28293: PPUSH
28294: CALL 28336 0 6
28298: GO 28331
28300: LD_INT 304
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28330
28308: POP
// hHackTeleport ( unit , x , y ) ; end ;
28309: LD_VAR 0 2
28313: PPUSH
28314: LD_VAR 0 4
28318: PPUSH
28319: LD_VAR 0 5
28323: PPUSH
28324: CALL 30095 0 3
28328: GO 28331
28330: POP
// end ;
28331: LD_VAR 0 12
28335: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28336: LD_INT 0
28338: PPUSH
28339: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28340: LD_VAR 0 1
28344: PUSH
28345: LD_INT 1
28347: LESS
28348: PUSH
28349: LD_VAR 0 1
28353: PUSH
28354: LD_INT 3
28356: GREATER
28357: OR
28358: PUSH
28359: LD_VAR 0 5
28363: PPUSH
28364: LD_VAR 0 6
28368: PPUSH
28369: CALL_OW 428
28373: OR
28374: IFFALSE 28378
// exit ;
28376: GO 29098
// uc_side := your_side ;
28378: LD_ADDR_OWVAR 20
28382: PUSH
28383: LD_OWVAR 2
28387: ST_TO_ADDR
// uc_nation := nation ;
28388: LD_ADDR_OWVAR 21
28392: PUSH
28393: LD_VAR 0 1
28397: ST_TO_ADDR
// bc_level = 1 ;
28398: LD_ADDR_OWVAR 43
28402: PUSH
28403: LD_INT 1
28405: ST_TO_ADDR
// case btype of 1 :
28406: LD_VAR 0 2
28410: PUSH
28411: LD_INT 1
28413: DOUBLE
28414: EQUAL
28415: IFTRUE 28419
28417: GO 28430
28419: POP
// bc_type := b_depot ; 2 :
28420: LD_ADDR_OWVAR 42
28424: PUSH
28425: LD_INT 0
28427: ST_TO_ADDR
28428: GO 29042
28430: LD_INT 2
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28449
28438: POP
// bc_type := b_warehouse ; 3 :
28439: LD_ADDR_OWVAR 42
28443: PUSH
28444: LD_INT 1
28446: ST_TO_ADDR
28447: GO 29042
28449: LD_INT 3
28451: DOUBLE
28452: EQUAL
28453: IFTRUE 28457
28455: GO 28468
28457: POP
// bc_type := b_lab ; 4 .. 9 :
28458: LD_ADDR_OWVAR 42
28462: PUSH
28463: LD_INT 6
28465: ST_TO_ADDR
28466: GO 29042
28468: LD_INT 4
28470: DOUBLE
28471: GREATEREQUAL
28472: IFFALSE 28480
28474: LD_INT 9
28476: DOUBLE
28477: LESSEQUAL
28478: IFTRUE 28482
28480: GO 28534
28482: POP
// begin bc_type := b_lab_half ;
28483: LD_ADDR_OWVAR 42
28487: PUSH
28488: LD_INT 7
28490: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28491: LD_ADDR_OWVAR 44
28495: PUSH
28496: LD_INT 10
28498: PUSH
28499: LD_INT 11
28501: PUSH
28502: LD_INT 12
28504: PUSH
28505: LD_INT 15
28507: PUSH
28508: LD_INT 14
28510: PUSH
28511: LD_INT 13
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: PUSH
28522: LD_VAR 0 2
28526: PUSH
28527: LD_INT 3
28529: MINUS
28530: ARRAY
28531: ST_TO_ADDR
// end ; 10 .. 13 :
28532: GO 29042
28534: LD_INT 10
28536: DOUBLE
28537: GREATEREQUAL
28538: IFFALSE 28546
28540: LD_INT 13
28542: DOUBLE
28543: LESSEQUAL
28544: IFTRUE 28548
28546: GO 28625
28548: POP
// begin bc_type := b_lab_full ;
28549: LD_ADDR_OWVAR 42
28553: PUSH
28554: LD_INT 8
28556: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28557: LD_ADDR_OWVAR 44
28561: PUSH
28562: LD_INT 10
28564: PUSH
28565: LD_INT 12
28567: PUSH
28568: LD_INT 14
28570: PUSH
28571: LD_INT 13
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: PUSH
28580: LD_VAR 0 2
28584: PUSH
28585: LD_INT 9
28587: MINUS
28588: ARRAY
28589: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28590: LD_ADDR_OWVAR 45
28594: PUSH
28595: LD_INT 11
28597: PUSH
28598: LD_INT 15
28600: PUSH
28601: LD_INT 12
28603: PUSH
28604: LD_INT 15
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: PUSH
28613: LD_VAR 0 2
28617: PUSH
28618: LD_INT 9
28620: MINUS
28621: ARRAY
28622: ST_TO_ADDR
// end ; 14 :
28623: GO 29042
28625: LD_INT 14
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 28644
28633: POP
// bc_type := b_workshop ; 15 :
28634: LD_ADDR_OWVAR 42
28638: PUSH
28639: LD_INT 2
28641: ST_TO_ADDR
28642: GO 29042
28644: LD_INT 15
28646: DOUBLE
28647: EQUAL
28648: IFTRUE 28652
28650: GO 28663
28652: POP
// bc_type := b_factory ; 16 :
28653: LD_ADDR_OWVAR 42
28657: PUSH
28658: LD_INT 3
28660: ST_TO_ADDR
28661: GO 29042
28663: LD_INT 16
28665: DOUBLE
28666: EQUAL
28667: IFTRUE 28671
28669: GO 28682
28671: POP
// bc_type := b_ext_gun ; 17 :
28672: LD_ADDR_OWVAR 42
28676: PUSH
28677: LD_INT 17
28679: ST_TO_ADDR
28680: GO 29042
28682: LD_INT 17
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28690
28688: GO 28718
28690: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28691: LD_ADDR_OWVAR 42
28695: PUSH
28696: LD_INT 19
28698: PUSH
28699: LD_INT 23
28701: PUSH
28702: LD_INT 19
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: PUSH
28710: LD_VAR 0 1
28714: ARRAY
28715: ST_TO_ADDR
28716: GO 29042
28718: LD_INT 18
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28737
28726: POP
// bc_type := b_ext_radar ; 19 :
28727: LD_ADDR_OWVAR 42
28731: PUSH
28732: LD_INT 20
28734: ST_TO_ADDR
28735: GO 29042
28737: LD_INT 19
28739: DOUBLE
28740: EQUAL
28741: IFTRUE 28745
28743: GO 28756
28745: POP
// bc_type := b_ext_radio ; 20 :
28746: LD_ADDR_OWVAR 42
28750: PUSH
28751: LD_INT 22
28753: ST_TO_ADDR
28754: GO 29042
28756: LD_INT 20
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28775
28764: POP
// bc_type := b_ext_siberium ; 21 :
28765: LD_ADDR_OWVAR 42
28769: PUSH
28770: LD_INT 21
28772: ST_TO_ADDR
28773: GO 29042
28775: LD_INT 21
28777: DOUBLE
28778: EQUAL
28779: IFTRUE 28783
28781: GO 28794
28783: POP
// bc_type := b_ext_computer ; 22 :
28784: LD_ADDR_OWVAR 42
28788: PUSH
28789: LD_INT 24
28791: ST_TO_ADDR
28792: GO 29042
28794: LD_INT 22
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28813
28802: POP
// bc_type := b_ext_track ; 23 :
28803: LD_ADDR_OWVAR 42
28807: PUSH
28808: LD_INT 16
28810: ST_TO_ADDR
28811: GO 29042
28813: LD_INT 23
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28832
28821: POP
// bc_type := b_ext_laser ; 24 :
28822: LD_ADDR_OWVAR 42
28826: PUSH
28827: LD_INT 25
28829: ST_TO_ADDR
28830: GO 29042
28832: LD_INT 24
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28851
28840: POP
// bc_type := b_control_tower ; 25 :
28841: LD_ADDR_OWVAR 42
28845: PUSH
28846: LD_INT 36
28848: ST_TO_ADDR
28849: GO 29042
28851: LD_INT 25
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28870
28859: POP
// bc_type := b_breastwork ; 26 :
28860: LD_ADDR_OWVAR 42
28864: PUSH
28865: LD_INT 31
28867: ST_TO_ADDR
28868: GO 29042
28870: LD_INT 26
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28889
28878: POP
// bc_type := b_bunker ; 27 :
28879: LD_ADDR_OWVAR 42
28883: PUSH
28884: LD_INT 32
28886: ST_TO_ADDR
28887: GO 29042
28889: LD_INT 27
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28908
28897: POP
// bc_type := b_turret ; 28 :
28898: LD_ADDR_OWVAR 42
28902: PUSH
28903: LD_INT 33
28905: ST_TO_ADDR
28906: GO 29042
28908: LD_INT 28
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28916
28914: GO 28927
28916: POP
// bc_type := b_armoury ; 29 :
28917: LD_ADDR_OWVAR 42
28921: PUSH
28922: LD_INT 4
28924: ST_TO_ADDR
28925: GO 29042
28927: LD_INT 29
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28946
28935: POP
// bc_type := b_barracks ; 30 :
28936: LD_ADDR_OWVAR 42
28940: PUSH
28941: LD_INT 5
28943: ST_TO_ADDR
28944: GO 29042
28946: LD_INT 30
28948: DOUBLE
28949: EQUAL
28950: IFTRUE 28954
28952: GO 28965
28954: POP
// bc_type := b_solar_power ; 31 :
28955: LD_ADDR_OWVAR 42
28959: PUSH
28960: LD_INT 27
28962: ST_TO_ADDR
28963: GO 29042
28965: LD_INT 31
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 28973
28971: GO 28984
28973: POP
// bc_type := b_oil_power ; 32 :
28974: LD_ADDR_OWVAR 42
28978: PUSH
28979: LD_INT 26
28981: ST_TO_ADDR
28982: GO 29042
28984: LD_INT 32
28986: DOUBLE
28987: EQUAL
28988: IFTRUE 28992
28990: GO 29003
28992: POP
// bc_type := b_siberite_power ; 33 :
28993: LD_ADDR_OWVAR 42
28997: PUSH
28998: LD_INT 28
29000: ST_TO_ADDR
29001: GO 29042
29003: LD_INT 33
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 29022
29011: POP
// bc_type := b_oil_mine ; 34 :
29012: LD_ADDR_OWVAR 42
29016: PUSH
29017: LD_INT 29
29019: ST_TO_ADDR
29020: GO 29042
29022: LD_INT 34
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29041
29030: POP
// bc_type := b_siberite_mine ; end ;
29031: LD_ADDR_OWVAR 42
29035: PUSH
29036: LD_INT 30
29038: ST_TO_ADDR
29039: GO 29042
29041: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29042: LD_ADDR_VAR 0 8
29046: PUSH
29047: LD_VAR 0 5
29051: PPUSH
29052: LD_VAR 0 6
29056: PPUSH
29057: LD_VAR 0 3
29061: PPUSH
29062: CALL_OW 47
29066: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29067: LD_OWVAR 42
29071: PUSH
29072: LD_INT 32
29074: PUSH
29075: LD_INT 33
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: IN
29082: IFFALSE 29098
// PlaceWeaponTurret ( b , weapon ) ;
29084: LD_VAR 0 8
29088: PPUSH
29089: LD_VAR 0 4
29093: PPUSH
29094: CALL_OW 431
// end ;
29098: LD_VAR 0 7
29102: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29103: LD_INT 0
29105: PPUSH
29106: PPUSH
29107: PPUSH
29108: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29109: LD_ADDR_VAR 0 4
29113: PUSH
29114: LD_INT 22
29116: PUSH
29117: LD_OWVAR 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: LD_INT 30
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 30
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PPUSH
29158: CALL_OW 69
29162: ST_TO_ADDR
// if not tmp then
29163: LD_VAR 0 4
29167: NOT
29168: IFFALSE 29172
// exit ;
29170: GO 29231
// for i in tmp do
29172: LD_ADDR_VAR 0 2
29176: PUSH
29177: LD_VAR 0 4
29181: PUSH
29182: FOR_IN
29183: IFFALSE 29229
// for j = 1 to 3 do
29185: LD_ADDR_VAR 0 3
29189: PUSH
29190: DOUBLE
29191: LD_INT 1
29193: DEC
29194: ST_TO_ADDR
29195: LD_INT 3
29197: PUSH
29198: FOR_TO
29199: IFFALSE 29225
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29201: LD_VAR 0 2
29205: PPUSH
29206: CALL_OW 274
29210: PPUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_INT 99999
29218: PPUSH
29219: CALL_OW 277
29223: GO 29198
29225: POP
29226: POP
29227: GO 29182
29229: POP
29230: POP
// end ;
29231: LD_VAR 0 1
29235: RET
// export function hHackSetLevel10 ; var i , j ; begin
29236: LD_INT 0
29238: PPUSH
29239: PPUSH
29240: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29241: LD_ADDR_VAR 0 2
29245: PUSH
29246: LD_INT 21
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 69
29260: PUSH
29261: FOR_IN
29262: IFFALSE 29314
// if IsSelected ( i ) then
29264: LD_VAR 0 2
29268: PPUSH
29269: CALL_OW 306
29273: IFFALSE 29312
// begin for j := 1 to 4 do
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: DOUBLE
29281: LD_INT 1
29283: DEC
29284: ST_TO_ADDR
29285: LD_INT 4
29287: PUSH
29288: FOR_TO
29289: IFFALSE 29310
// SetSkill ( i , j , 10 ) ;
29291: LD_VAR 0 2
29295: PPUSH
29296: LD_VAR 0 3
29300: PPUSH
29301: LD_INT 10
29303: PPUSH
29304: CALL_OW 237
29308: GO 29288
29310: POP
29311: POP
// end ;
29312: GO 29261
29314: POP
29315: POP
// end ;
29316: LD_VAR 0 1
29320: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
29325: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29326: LD_ADDR_VAR 0 2
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_OWVAR 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 69
29361: PUSH
29362: FOR_IN
29363: IFFALSE 29404
// begin for j := 1 to 4 do
29365: LD_ADDR_VAR 0 3
29369: PUSH
29370: DOUBLE
29371: LD_INT 1
29373: DEC
29374: ST_TO_ADDR
29375: LD_INT 4
29377: PUSH
29378: FOR_TO
29379: IFFALSE 29400
// SetSkill ( i , j , 10 ) ;
29381: LD_VAR 0 2
29385: PPUSH
29386: LD_VAR 0 3
29390: PPUSH
29391: LD_INT 10
29393: PPUSH
29394: CALL_OW 237
29398: GO 29378
29400: POP
29401: POP
// end ;
29402: GO 29362
29404: POP
29405: POP
// end ;
29406: LD_VAR 0 1
29410: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29411: LD_INT 0
29413: PPUSH
// uc_side := your_side ;
29414: LD_ADDR_OWVAR 20
29418: PUSH
29419: LD_OWVAR 2
29423: ST_TO_ADDR
// uc_nation := nation ;
29424: LD_ADDR_OWVAR 21
29428: PUSH
29429: LD_VAR 0 1
29433: ST_TO_ADDR
// InitHc ;
29434: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29438: LD_INT 0
29440: PPUSH
29441: LD_VAR 0 2
29445: PPUSH
29446: LD_VAR 0 3
29450: PPUSH
29451: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29455: LD_VAR 0 4
29459: PPUSH
29460: LD_VAR 0 5
29464: PPUSH
29465: CALL_OW 428
29469: PUSH
29470: LD_INT 0
29472: EQUAL
29473: IFFALSE 29497
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29475: CALL_OW 44
29479: PPUSH
29480: LD_VAR 0 4
29484: PPUSH
29485: LD_VAR 0 5
29489: PPUSH
29490: LD_INT 1
29492: PPUSH
29493: CALL_OW 48
// end ;
29497: LD_VAR 0 6
29501: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29502: LD_INT 0
29504: PPUSH
29505: PPUSH
// uc_side := your_side ;
29506: LD_ADDR_OWVAR 20
29510: PUSH
29511: LD_OWVAR 2
29515: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 4
29532: PUSH
29533: LD_INT 5
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: IN
29543: IFFALSE 29555
// uc_nation := nation_american else
29545: LD_ADDR_OWVAR 21
29549: PUSH
29550: LD_INT 1
29552: ST_TO_ADDR
29553: GO 29598
// if chassis in [ 11 , 12 , 13 , 14 ] then
29555: LD_VAR 0 1
29559: PUSH
29560: LD_INT 11
29562: PUSH
29563: LD_INT 12
29565: PUSH
29566: LD_INT 13
29568: PUSH
29569: LD_INT 14
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: IN
29578: IFFALSE 29590
// uc_nation := nation_arabian else
29580: LD_ADDR_OWVAR 21
29584: PUSH
29585: LD_INT 2
29587: ST_TO_ADDR
29588: GO 29598
// uc_nation := nation_russian ;
29590: LD_ADDR_OWVAR 21
29594: PUSH
29595: LD_INT 3
29597: ST_TO_ADDR
// vc_chassis := chassis ;
29598: LD_ADDR_OWVAR 37
29602: PUSH
29603: LD_VAR 0 1
29607: ST_TO_ADDR
// vc_engine := engine ;
29608: LD_ADDR_OWVAR 39
29612: PUSH
29613: LD_VAR 0 2
29617: ST_TO_ADDR
// vc_control := control ;
29618: LD_ADDR_OWVAR 38
29622: PUSH
29623: LD_VAR 0 3
29627: ST_TO_ADDR
// vc_weapon := weapon ;
29628: LD_ADDR_OWVAR 40
29632: PUSH
29633: LD_VAR 0 4
29637: ST_TO_ADDR
// un := CreateVehicle ;
29638: LD_ADDR_VAR 0 8
29642: PUSH
29643: CALL_OW 45
29647: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29648: LD_VAR 0 8
29652: PPUSH
29653: LD_INT 0
29655: PPUSH
29656: LD_INT 5
29658: PPUSH
29659: CALL_OW 12
29663: PPUSH
29664: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29668: LD_VAR 0 8
29672: PPUSH
29673: LD_VAR 0 5
29677: PPUSH
29678: LD_VAR 0 6
29682: PPUSH
29683: LD_INT 1
29685: PPUSH
29686: CALL_OW 48
// end ;
29690: LD_VAR 0 7
29694: RET
// export hInvincible ; every 1 do
29695: GO 29697
29697: DISABLE
// hInvincible := [ ] ;
29698: LD_ADDR_EXP 104
29702: PUSH
29703: EMPTY
29704: ST_TO_ADDR
29705: END
// every 10 do var i ;
29706: GO 29708
29708: DISABLE
29709: LD_INT 0
29711: PPUSH
// begin enable ;
29712: ENABLE
// if not hInvincible then
29713: LD_EXP 104
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29766
// for i in hInvincible do
29722: LD_ADDR_VAR 0 1
29726: PUSH
29727: LD_EXP 104
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29764
// if GetLives ( i ) < 1000 then
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 256
29744: PUSH
29745: LD_INT 1000
29747: LESS
29748: IFFALSE 29762
// SetLives ( i , 1000 ) ;
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_INT 1000
29757: PPUSH
29758: CALL_OW 234
29762: GO 29732
29764: POP
29765: POP
// end ;
29766: PPOPN 1
29768: END
// export function hHackInvincible ; var i ; begin
29769: LD_INT 0
29771: PPUSH
29772: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29773: LD_ADDR_VAR 0 2
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 21
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 21
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: PPUSH
29806: CALL_OW 69
29810: PUSH
29811: FOR_IN
29812: IFFALSE 29873
// if IsSelected ( i ) then
29814: LD_VAR 0 2
29818: PPUSH
29819: CALL_OW 306
29823: IFFALSE 29871
// begin if i in hInvincible then
29825: LD_VAR 0 2
29829: PUSH
29830: LD_EXP 104
29834: IN
29835: IFFALSE 29855
// hInvincible := hInvincible diff i else
29837: LD_ADDR_EXP 104
29841: PUSH
29842: LD_EXP 104
29846: PUSH
29847: LD_VAR 0 2
29851: DIFF
29852: ST_TO_ADDR
29853: GO 29871
// hInvincible := hInvincible union i ;
29855: LD_ADDR_EXP 104
29859: PUSH
29860: LD_EXP 104
29864: PUSH
29865: LD_VAR 0 2
29869: UNION
29870: ST_TO_ADDR
// end ;
29871: GO 29811
29873: POP
29874: POP
// end ;
29875: LD_VAR 0 1
29879: RET
// export function hHackInvisible ; var i , j ; begin
29880: LD_INT 0
29882: PPUSH
29883: PPUSH
29884: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29885: LD_ADDR_VAR 0 2
29889: PUSH
29890: LD_INT 21
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PPUSH
29900: CALL_OW 69
29904: PUSH
29905: FOR_IN
29906: IFFALSE 29930
// if IsSelected ( i ) then
29908: LD_VAR 0 2
29912: PPUSH
29913: CALL_OW 306
29917: IFFALSE 29928
// ComForceInvisible ( i ) ;
29919: LD_VAR 0 2
29923: PPUSH
29924: CALL_OW 496
29928: GO 29905
29930: POP
29931: POP
// end ;
29932: LD_VAR 0 1
29936: RET
// export function hHackChangeYourSide ; begin
29937: LD_INT 0
29939: PPUSH
// if your_side = 8 then
29940: LD_OWVAR 2
29944: PUSH
29945: LD_INT 8
29947: EQUAL
29948: IFFALSE 29960
// your_side := 0 else
29950: LD_ADDR_OWVAR 2
29954: PUSH
29955: LD_INT 0
29957: ST_TO_ADDR
29958: GO 29974
// your_side := your_side + 1 ;
29960: LD_ADDR_OWVAR 2
29964: PUSH
29965: LD_OWVAR 2
29969: PUSH
29970: LD_INT 1
29972: PLUS
29973: ST_TO_ADDR
// end ;
29974: LD_VAR 0 1
29978: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29979: LD_INT 0
29981: PPUSH
29982: PPUSH
29983: PPUSH
// for i in all_units do
29984: LD_ADDR_VAR 0 2
29988: PUSH
29989: LD_OWVAR 3
29993: PUSH
29994: FOR_IN
29995: IFFALSE 30073
// if IsSelected ( i ) then
29997: LD_VAR 0 2
30001: PPUSH
30002: CALL_OW 306
30006: IFFALSE 30071
// begin j := GetSide ( i ) ;
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: CALL_OW 255
30022: ST_TO_ADDR
// if j = 8 then
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 8
30030: EQUAL
30031: IFFALSE 30043
// j := 0 else
30033: LD_ADDR_VAR 0 3
30037: PUSH
30038: LD_INT 0
30040: ST_TO_ADDR
30041: GO 30057
// j := j + 1 ;
30043: LD_ADDR_VAR 0 3
30047: PUSH
30048: LD_VAR 0 3
30052: PUSH
30053: LD_INT 1
30055: PLUS
30056: ST_TO_ADDR
// SetSide ( i , j ) ;
30057: LD_VAR 0 2
30061: PPUSH
30062: LD_VAR 0 3
30066: PPUSH
30067: CALL_OW 235
// end ;
30071: GO 29994
30073: POP
30074: POP
// end ;
30075: LD_VAR 0 1
30079: RET
// export function hHackFog ; begin
30080: LD_INT 0
30082: PPUSH
// FogOff ( true ) ;
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 344
// end ;
30090: LD_VAR 0 1
30094: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30095: LD_INT 0
30097: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30098: LD_VAR 0 1
30102: PPUSH
30103: LD_VAR 0 2
30107: PPUSH
30108: LD_VAR 0 3
30112: PPUSH
30113: LD_INT 1
30115: PPUSH
30116: LD_INT 1
30118: PPUSH
30119: CALL_OW 483
// CenterOnXY ( x , y ) ;
30123: LD_VAR 0 2
30127: PPUSH
30128: LD_VAR 0 3
30132: PPUSH
30133: CALL_OW 84
// end ; end_of_file end_of_file
30137: LD_VAR 0 4
30141: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
30142: LD_INT 0
30144: PPUSH
// ar_miner := 81 ;
30145: LD_ADDR_EXP 112
30149: PUSH
30150: LD_INT 81
30152: ST_TO_ADDR
// ar_crane := 88 ;
30153: LD_ADDR_EXP 111
30157: PUSH
30158: LD_INT 88
30160: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30161: LD_ADDR_EXP 106
30165: PUSH
30166: LD_INT 89
30168: ST_TO_ADDR
// us_hack := 99 ;
30169: LD_ADDR_EXP 107
30173: PUSH
30174: LD_INT 99
30176: ST_TO_ADDR
// us_artillery := 97 ;
30177: LD_ADDR_EXP 108
30181: PUSH
30182: LD_INT 97
30184: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30185: LD_ADDR_EXP 109
30189: PUSH
30190: LD_INT 91
30192: ST_TO_ADDR
// ar_mortar := 92 ;
30193: LD_ADDR_EXP 110
30197: PUSH
30198: LD_INT 92
30200: ST_TO_ADDR
// ru_flamethrower := 93 ;
30201: LD_ADDR_EXP 113
30205: PUSH
30206: LD_INT 93
30208: ST_TO_ADDR
// ru_radar := 98 ;
30209: LD_ADDR_EXP 105
30213: PUSH
30214: LD_INT 98
30216: ST_TO_ADDR
// tech_Artillery := 80 ;
30217: LD_ADDR_EXP 114
30221: PUSH
30222: LD_INT 80
30224: ST_TO_ADDR
// tech_RadMat := 81 ;
30225: LD_ADDR_EXP 115
30229: PUSH
30230: LD_INT 81
30232: ST_TO_ADDR
// tech_BasicTools := 82 ;
30233: LD_ADDR_EXP 116
30237: PUSH
30238: LD_INT 82
30240: ST_TO_ADDR
// tech_Cargo := 83 ;
30241: LD_ADDR_EXP 117
30245: PUSH
30246: LD_INT 83
30248: ST_TO_ADDR
// tech_Track := 84 ;
30249: LD_ADDR_EXP 118
30253: PUSH
30254: LD_INT 84
30256: ST_TO_ADDR
// tech_Crane := 85 ;
30257: LD_ADDR_EXP 119
30261: PUSH
30262: LD_INT 85
30264: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30265: LD_ADDR_EXP 120
30269: PUSH
30270: LD_INT 86
30272: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30273: LD_ADDR_EXP 121
30277: PUSH
30278: LD_INT 87
30280: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30281: LD_ADDR_EXP 122
30285: PUSH
30286: LD_INT 88
30288: ST_TO_ADDR
// class_mastodont := 31 ;
30289: LD_ADDR_EXP 123
30293: PUSH
30294: LD_INT 31
30296: ST_TO_ADDR
// class_horse := 21 ;
30297: LD_ADDR_EXP 124
30301: PUSH
30302: LD_INT 21
30304: ST_TO_ADDR
// end ;
30305: LD_VAR 0 1
30309: RET
// every 1 do
30310: GO 30312
30312: DISABLE
// InitGlobalVariables ; end_of_file
30313: CALL 30142 0 0
30317: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30318: LD_INT 0
30320: PPUSH
30321: PPUSH
// if exist_mode then
30322: LD_VAR 0 2
30326: IFFALSE 30351
// unit := CreateCharacter ( prefix & ident ) else
30328: LD_ADDR_VAR 0 5
30332: PUSH
30333: LD_VAR 0 3
30337: PUSH
30338: LD_VAR 0 1
30342: STR
30343: PPUSH
30344: CALL_OW 34
30348: ST_TO_ADDR
30349: GO 30366
// unit := NewCharacter ( ident ) ;
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_VAR 0 1
30360: PPUSH
30361: CALL_OW 25
30365: ST_TO_ADDR
// result := unit ;
30366: LD_ADDR_VAR 0 4
30370: PUSH
30371: LD_VAR 0 5
30375: ST_TO_ADDR
// end ;
30376: LD_VAR 0 4
30380: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30381: LD_INT 0
30383: PPUSH
30384: PPUSH
// if not side or not nation then
30385: LD_VAR 0 1
30389: NOT
30390: PUSH
30391: LD_VAR 0 2
30395: NOT
30396: OR
30397: IFFALSE 30401
// exit ;
30399: GO 31169
// case nation of nation_american :
30401: LD_VAR 0 2
30405: PUSH
30406: LD_INT 1
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30628
30414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: LD_INT 35
30422: PUSH
30423: LD_INT 45
30425: PUSH
30426: LD_INT 46
30428: PUSH
30429: LD_INT 47
30431: PUSH
30432: LD_INT 82
30434: PUSH
30435: LD_INT 83
30437: PUSH
30438: LD_INT 84
30440: PUSH
30441: LD_INT 85
30443: PUSH
30444: LD_INT 86
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 6
30455: PUSH
30456: LD_INT 15
30458: PUSH
30459: LD_INT 16
30461: PUSH
30462: LD_INT 7
30464: PUSH
30465: LD_INT 12
30467: PUSH
30468: LD_INT 13
30470: PUSH
30471: LD_INT 10
30473: PUSH
30474: LD_INT 14
30476: PUSH
30477: LD_INT 20
30479: PUSH
30480: LD_INT 21
30482: PUSH
30483: LD_INT 22
30485: PUSH
30486: LD_INT 25
30488: PUSH
30489: LD_INT 32
30491: PUSH
30492: LD_INT 27
30494: PUSH
30495: LD_INT 36
30497: PUSH
30498: LD_INT 69
30500: PUSH
30501: LD_INT 39
30503: PUSH
30504: LD_INT 34
30506: PUSH
30507: LD_INT 40
30509: PUSH
30510: LD_INT 48
30512: PUSH
30513: LD_INT 49
30515: PUSH
30516: LD_INT 50
30518: PUSH
30519: LD_INT 51
30521: PUSH
30522: LD_INT 52
30524: PUSH
30525: LD_INT 53
30527: PUSH
30528: LD_INT 54
30530: PUSH
30531: LD_INT 55
30533: PUSH
30534: LD_INT 56
30536: PUSH
30537: LD_INT 57
30539: PUSH
30540: LD_INT 58
30542: PUSH
30543: LD_INT 59
30545: PUSH
30546: LD_INT 60
30548: PUSH
30549: LD_INT 61
30551: PUSH
30552: LD_INT 62
30554: PUSH
30555: LD_INT 80
30557: PUSH
30558: LD_INT 82
30560: PUSH
30561: LD_INT 83
30563: PUSH
30564: LD_INT 84
30566: PUSH
30567: LD_INT 85
30569: PUSH
30570: LD_INT 86
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: ST_TO_ADDR
30626: GO 31093
30628: LD_INT 2
30630: DOUBLE
30631: EQUAL
30632: IFTRUE 30636
30634: GO 30862
30636: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30637: LD_ADDR_VAR 0 4
30641: PUSH
30642: LD_INT 35
30644: PUSH
30645: LD_INT 45
30647: PUSH
30648: LD_INT 46
30650: PUSH
30651: LD_INT 47
30653: PUSH
30654: LD_INT 82
30656: PUSH
30657: LD_INT 83
30659: PUSH
30660: LD_INT 84
30662: PUSH
30663: LD_INT 85
30665: PUSH
30666: LD_INT 87
30668: PUSH
30669: LD_INT 70
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 11
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: LD_INT 5
30686: PUSH
30687: LD_INT 6
30689: PUSH
30690: LD_INT 15
30692: PUSH
30693: LD_INT 18
30695: PUSH
30696: LD_INT 7
30698: PUSH
30699: LD_INT 17
30701: PUSH
30702: LD_INT 8
30704: PUSH
30705: LD_INT 20
30707: PUSH
30708: LD_INT 21
30710: PUSH
30711: LD_INT 22
30713: PUSH
30714: LD_INT 72
30716: PUSH
30717: LD_INT 26
30719: PUSH
30720: LD_INT 69
30722: PUSH
30723: LD_INT 39
30725: PUSH
30726: LD_INT 40
30728: PUSH
30729: LD_INT 41
30731: PUSH
30732: LD_INT 42
30734: PUSH
30735: LD_INT 43
30737: PUSH
30738: LD_INT 48
30740: PUSH
30741: LD_INT 49
30743: PUSH
30744: LD_INT 50
30746: PUSH
30747: LD_INT 51
30749: PUSH
30750: LD_INT 52
30752: PUSH
30753: LD_INT 53
30755: PUSH
30756: LD_INT 54
30758: PUSH
30759: LD_INT 55
30761: PUSH
30762: LD_INT 56
30764: PUSH
30765: LD_INT 60
30767: PUSH
30768: LD_INT 61
30770: PUSH
30771: LD_INT 62
30773: PUSH
30774: LD_INT 66
30776: PUSH
30777: LD_INT 67
30779: PUSH
30780: LD_INT 68
30782: PUSH
30783: LD_INT 81
30785: PUSH
30786: LD_INT 82
30788: PUSH
30789: LD_INT 83
30791: PUSH
30792: LD_INT 84
30794: PUSH
30795: LD_INT 85
30797: PUSH
30798: LD_INT 87
30800: PUSH
30801: LD_INT 88
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: ST_TO_ADDR
30860: GO 31093
30862: LD_INT 3
30864: DOUBLE
30865: EQUAL
30866: IFTRUE 30870
30868: GO 31092
30870: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30871: LD_ADDR_VAR 0 4
30875: PUSH
30876: LD_INT 46
30878: PUSH
30879: LD_INT 47
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 82
30890: PUSH
30891: LD_INT 83
30893: PUSH
30894: LD_INT 84
30896: PUSH
30897: LD_INT 85
30899: PUSH
30900: LD_INT 86
30902: PUSH
30903: LD_INT 11
30905: PUSH
30906: LD_INT 9
30908: PUSH
30909: LD_INT 20
30911: PUSH
30912: LD_INT 19
30914: PUSH
30915: LD_INT 21
30917: PUSH
30918: LD_INT 24
30920: PUSH
30921: LD_INT 22
30923: PUSH
30924: LD_INT 25
30926: PUSH
30927: LD_INT 28
30929: PUSH
30930: LD_INT 29
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 31
30938: PUSH
30939: LD_INT 37
30941: PUSH
30942: LD_INT 38
30944: PUSH
30945: LD_INT 32
30947: PUSH
30948: LD_INT 27
30950: PUSH
30951: LD_INT 33
30953: PUSH
30954: LD_INT 69
30956: PUSH
30957: LD_INT 39
30959: PUSH
30960: LD_INT 34
30962: PUSH
30963: LD_INT 40
30965: PUSH
30966: LD_INT 71
30968: PUSH
30969: LD_INT 23
30971: PUSH
30972: LD_INT 44
30974: PUSH
30975: LD_INT 48
30977: PUSH
30978: LD_INT 49
30980: PUSH
30981: LD_INT 50
30983: PUSH
30984: LD_INT 51
30986: PUSH
30987: LD_INT 52
30989: PUSH
30990: LD_INT 53
30992: PUSH
30993: LD_INT 54
30995: PUSH
30996: LD_INT 55
30998: PUSH
30999: LD_INT 56
31001: PUSH
31002: LD_INT 57
31004: PUSH
31005: LD_INT 58
31007: PUSH
31008: LD_INT 59
31010: PUSH
31011: LD_INT 63
31013: PUSH
31014: LD_INT 64
31016: PUSH
31017: LD_INT 65
31019: PUSH
31020: LD_INT 82
31022: PUSH
31023: LD_INT 83
31025: PUSH
31026: LD_INT 84
31028: PUSH
31029: LD_INT 85
31031: PUSH
31032: LD_INT 86
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: ST_TO_ADDR
31090: GO 31093
31092: POP
// if state > - 1 and state < 3 then
31093: LD_VAR 0 3
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: GREATER
31102: PUSH
31103: LD_VAR 0 3
31107: PUSH
31108: LD_INT 3
31110: LESS
31111: AND
31112: IFFALSE 31169
// for i in result do
31114: LD_ADDR_VAR 0 5
31118: PUSH
31119: LD_VAR 0 4
31123: PUSH
31124: FOR_IN
31125: IFFALSE 31167
// if GetTech ( i , side ) <> state then
31127: LD_VAR 0 5
31131: PPUSH
31132: LD_VAR 0 1
31136: PPUSH
31137: CALL_OW 321
31141: PUSH
31142: LD_VAR 0 3
31146: NONEQUAL
31147: IFFALSE 31165
// result := result diff i ;
31149: LD_ADDR_VAR 0 4
31153: PUSH
31154: LD_VAR 0 4
31158: PUSH
31159: LD_VAR 0 5
31163: DIFF
31164: ST_TO_ADDR
31165: GO 31124
31167: POP
31168: POP
// end ;
31169: LD_VAR 0 4
31173: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31174: LD_INT 0
31176: PPUSH
31177: PPUSH
31178: PPUSH
// result := true ;
31179: LD_ADDR_VAR 0 3
31183: PUSH
31184: LD_INT 1
31186: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31187: LD_ADDR_VAR 0 5
31191: PUSH
31192: LD_VAR 0 2
31196: PPUSH
31197: CALL_OW 480
31201: ST_TO_ADDR
// if not tmp then
31202: LD_VAR 0 5
31206: NOT
31207: IFFALSE 31211
// exit ;
31209: GO 31260
// for i in tmp do
31211: LD_ADDR_VAR 0 4
31215: PUSH
31216: LD_VAR 0 5
31220: PUSH
31221: FOR_IN
31222: IFFALSE 31258
// if GetTech ( i , side ) <> state_researched then
31224: LD_VAR 0 4
31228: PPUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL_OW 321
31238: PUSH
31239: LD_INT 2
31241: NONEQUAL
31242: IFFALSE 31256
// begin result := false ;
31244: LD_ADDR_VAR 0 3
31248: PUSH
31249: LD_INT 0
31251: ST_TO_ADDR
// exit ;
31252: POP
31253: POP
31254: GO 31260
// end ;
31256: GO 31221
31258: POP
31259: POP
// end ;
31260: LD_VAR 0 3
31264: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31265: LD_INT 0
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31280: LD_VAR 0 1
31284: NOT
31285: PUSH
31286: LD_VAR 0 1
31290: PPUSH
31291: CALL_OW 257
31295: PUSH
31296: LD_INT 9
31298: NONEQUAL
31299: OR
31300: IFFALSE 31304
// exit ;
31302: GO 31877
// side := GetSide ( unit ) ;
31304: LD_ADDR_VAR 0 9
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 255
31318: ST_TO_ADDR
// tech_space := tech_spacanom ;
31319: LD_ADDR_VAR 0 12
31323: PUSH
31324: LD_INT 29
31326: ST_TO_ADDR
// tech_time := tech_taurad ;
31327: LD_ADDR_VAR 0 13
31331: PUSH
31332: LD_INT 28
31334: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31335: LD_ADDR_VAR 0 11
31339: PUSH
31340: LD_VAR 0 1
31344: PPUSH
31345: CALL_OW 310
31349: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31350: LD_VAR 0 11
31354: PPUSH
31355: CALL_OW 247
31359: PUSH
31360: LD_INT 2
31362: EQUAL
31363: IFFALSE 31367
// exit ;
31365: GO 31877
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31367: LD_ADDR_VAR 0 8
31371: PUSH
31372: LD_INT 81
31374: PUSH
31375: LD_VAR 0 9
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: LD_INT 21
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PPUSH
31405: CALL_OW 69
31409: ST_TO_ADDR
// if not tmp then
31410: LD_VAR 0 8
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31877
// if in_unit then
31419: LD_VAR 0 11
31423: IFFALSE 31447
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31425: LD_ADDR_VAR 0 10
31429: PUSH
31430: LD_VAR 0 8
31434: PPUSH
31435: LD_VAR 0 11
31439: PPUSH
31440: CALL_OW 74
31444: ST_TO_ADDR
31445: GO 31467
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31447: LD_ADDR_VAR 0 10
31451: PUSH
31452: LD_VAR 0 8
31456: PPUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: CALL_OW 74
31466: ST_TO_ADDR
// if not enemy then
31467: LD_VAR 0 10
31471: NOT
31472: IFFALSE 31476
// exit ;
31474: GO 31877
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31476: LD_VAR 0 11
31480: PUSH
31481: LD_VAR 0 11
31485: PPUSH
31486: LD_VAR 0 10
31490: PPUSH
31491: CALL_OW 296
31495: PUSH
31496: LD_INT 13
31498: GREATER
31499: AND
31500: PUSH
31501: LD_VAR 0 1
31505: PPUSH
31506: LD_VAR 0 10
31510: PPUSH
31511: CALL_OW 296
31515: PUSH
31516: LD_INT 12
31518: GREATER
31519: OR
31520: IFFALSE 31524
// exit ;
31522: GO 31877
// missile := [ 1 ] ;
31524: LD_ADDR_VAR 0 14
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31535: LD_VAR 0 9
31539: PPUSH
31540: LD_VAR 0 12
31544: PPUSH
31545: CALL_OW 325
31549: IFFALSE 31578
// missile := Replace ( missile , missile + 1 , 2 ) ;
31551: LD_ADDR_VAR 0 14
31555: PUSH
31556: LD_VAR 0 14
31560: PPUSH
31561: LD_VAR 0 14
31565: PUSH
31566: LD_INT 1
31568: PLUS
31569: PPUSH
31570: LD_INT 2
31572: PPUSH
31573: CALL_OW 1
31577: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31578: LD_VAR 0 9
31582: PPUSH
31583: LD_VAR 0 13
31587: PPUSH
31588: CALL_OW 325
31592: PUSH
31593: LD_VAR 0 10
31597: PPUSH
31598: CALL_OW 255
31602: PPUSH
31603: LD_VAR 0 13
31607: PPUSH
31608: CALL_OW 325
31612: NOT
31613: AND
31614: IFFALSE 31643
// missile := Replace ( missile , missile + 1 , 3 ) ;
31616: LD_ADDR_VAR 0 14
31620: PUSH
31621: LD_VAR 0 14
31625: PPUSH
31626: LD_VAR 0 14
31630: PUSH
31631: LD_INT 1
31633: PLUS
31634: PPUSH
31635: LD_INT 3
31637: PPUSH
31638: CALL_OW 1
31642: ST_TO_ADDR
// if missile < 2 then
31643: LD_VAR 0 14
31647: PUSH
31648: LD_INT 2
31650: LESS
31651: IFFALSE 31655
// exit ;
31653: GO 31877
// x := GetX ( enemy ) ;
31655: LD_ADDR_VAR 0 4
31659: PUSH
31660: LD_VAR 0 10
31664: PPUSH
31665: CALL_OW 250
31669: ST_TO_ADDR
// y := GetY ( enemy ) ;
31670: LD_ADDR_VAR 0 5
31674: PUSH
31675: LD_VAR 0 10
31679: PPUSH
31680: CALL_OW 251
31684: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31685: LD_ADDR_VAR 0 6
31689: PUSH
31690: LD_VAR 0 4
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PPUSH
31699: LD_INT 1
31701: PPUSH
31702: CALL_OW 12
31706: PLUS
31707: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31708: LD_ADDR_VAR 0 7
31712: PUSH
31713: LD_VAR 0 5
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PPUSH
31722: LD_INT 1
31724: PPUSH
31725: CALL_OW 12
31729: PLUS
31730: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31731: LD_VAR 0 6
31735: PPUSH
31736: LD_VAR 0 7
31740: PPUSH
31741: CALL_OW 488
31745: NOT
31746: IFFALSE 31768
// begin _x := x ;
31748: LD_ADDR_VAR 0 6
31752: PUSH
31753: LD_VAR 0 4
31757: ST_TO_ADDR
// _y := y ;
31758: LD_ADDR_VAR 0 7
31762: PUSH
31763: LD_VAR 0 5
31767: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_INT 1
31775: PPUSH
31776: LD_VAR 0 14
31780: PPUSH
31781: CALL_OW 12
31785: ST_TO_ADDR
// case i of 1 :
31786: LD_VAR 0 3
31790: PUSH
31791: LD_INT 1
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31816
31799: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31800: LD_VAR 0 1
31804: PPUSH
31805: LD_VAR 0 10
31809: PPUSH
31810: CALL_OW 115
31814: GO 31877
31816: LD_INT 2
31818: DOUBLE
31819: EQUAL
31820: IFTRUE 31824
31822: GO 31846
31824: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31825: LD_VAR 0 1
31829: PPUSH
31830: LD_VAR 0 6
31834: PPUSH
31835: LD_VAR 0 7
31839: PPUSH
31840: CALL_OW 153
31844: GO 31877
31846: LD_INT 3
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31854
31852: GO 31876
31854: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_VAR 0 6
31864: PPUSH
31865: LD_VAR 0 7
31869: PPUSH
31870: CALL_OW 154
31874: GO 31877
31876: POP
// end ;
31877: LD_VAR 0 2
31881: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
// if not unit or not building then
31890: LD_VAR 0 1
31894: NOT
31895: PUSH
31896: LD_VAR 0 2
31900: NOT
31901: OR
31902: IFFALSE 31906
// exit ;
31904: GO 32064
// x := GetX ( building ) ;
31906: LD_ADDR_VAR 0 5
31910: PUSH
31911: LD_VAR 0 2
31915: PPUSH
31916: CALL_OW 250
31920: ST_TO_ADDR
// y := GetY ( building ) ;
31921: LD_ADDR_VAR 0 6
31925: PUSH
31926: LD_VAR 0 2
31930: PPUSH
31931: CALL_OW 251
31935: ST_TO_ADDR
// for i = 0 to 5 do
31936: LD_ADDR_VAR 0 4
31940: PUSH
31941: DOUBLE
31942: LD_INT 0
31944: DEC
31945: ST_TO_ADDR
31946: LD_INT 5
31948: PUSH
31949: FOR_TO
31950: IFFALSE 32062
// begin _x := ShiftX ( x , i , 3 ) ;
31952: LD_ADDR_VAR 0 7
31956: PUSH
31957: LD_VAR 0 5
31961: PPUSH
31962: LD_VAR 0 4
31966: PPUSH
31967: LD_INT 3
31969: PPUSH
31970: CALL_OW 272
31974: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31975: LD_ADDR_VAR 0 8
31979: PUSH
31980: LD_VAR 0 6
31984: PPUSH
31985: LD_VAR 0 4
31989: PPUSH
31990: LD_INT 3
31992: PPUSH
31993: CALL_OW 273
31997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31998: LD_VAR 0 7
32002: PPUSH
32003: LD_VAR 0 8
32007: PPUSH
32008: CALL_OW 488
32012: NOT
32013: IFFALSE 32017
// continue ;
32015: GO 31949
// if HexInfo ( _x , _y ) = 0 then
32017: LD_VAR 0 7
32021: PPUSH
32022: LD_VAR 0 8
32026: PPUSH
32027: CALL_OW 428
32031: PUSH
32032: LD_INT 0
32034: EQUAL
32035: IFFALSE 32060
// begin ComMoveXY ( unit , _x , _y ) ;
32037: LD_VAR 0 1
32041: PPUSH
32042: LD_VAR 0 7
32046: PPUSH
32047: LD_VAR 0 8
32051: PPUSH
32052: CALL_OW 111
// exit ;
32056: POP
32057: POP
32058: GO 32064
// end ; end ;
32060: GO 31949
32062: POP
32063: POP
// end ;
32064: LD_VAR 0 3
32068: RET
// export function ScanBase ( side , base_area ) ; begin
32069: LD_INT 0
32071: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32072: LD_ADDR_VAR 0 3
32076: PUSH
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_INT 81
32084: PUSH
32085: LD_VAR 0 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 70
32098: ST_TO_ADDR
// end ;
32099: LD_VAR 0 3
32103: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
// result := false ;
32110: LD_ADDR_VAR 0 2
32114: PUSH
32115: LD_INT 0
32117: ST_TO_ADDR
// side := GetSide ( unit ) ;
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 255
32132: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32133: LD_ADDR_VAR 0 4
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: CALL_OW 248
32147: ST_TO_ADDR
// case nat of 1 :
32148: LD_VAR 0 4
32152: PUSH
32153: LD_INT 1
32155: DOUBLE
32156: EQUAL
32157: IFTRUE 32161
32159: GO 32172
32161: POP
// tech := tech_lassight ; 2 :
32162: LD_ADDR_VAR 0 5
32166: PUSH
32167: LD_INT 12
32169: ST_TO_ADDR
32170: GO 32211
32172: LD_INT 2
32174: DOUBLE
32175: EQUAL
32176: IFTRUE 32180
32178: GO 32191
32180: POP
// tech := tech_mortar ; 3 :
32181: LD_ADDR_VAR 0 5
32185: PUSH
32186: LD_INT 41
32188: ST_TO_ADDR
32189: GO 32211
32191: LD_INT 3
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32210
32199: POP
// tech := tech_bazooka ; end ;
32200: LD_ADDR_VAR 0 5
32204: PUSH
32205: LD_INT 44
32207: ST_TO_ADDR
32208: GO 32211
32210: POP
// if Researched ( side , tech ) then
32211: LD_VAR 0 3
32215: PPUSH
32216: LD_VAR 0 5
32220: PPUSH
32221: CALL_OW 325
32225: IFFALSE 32252
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32227: LD_ADDR_VAR 0 2
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: LD_INT 8
32237: PUSH
32238: LD_INT 9
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_VAR 0 4
32250: ARRAY
32251: ST_TO_ADDR
// end ;
32252: LD_VAR 0 2
32256: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32257: LD_INT 0
32259: PPUSH
32260: PPUSH
32261: PPUSH
// if not mines then
32262: LD_VAR 0 2
32266: NOT
32267: IFFALSE 32271
// exit ;
32269: GO 32415
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32271: LD_ADDR_VAR 0 5
32275: PUSH
32276: LD_INT 81
32278: PUSH
32279: LD_VAR 0 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: LD_INT 21
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PPUSH
32309: CALL_OW 69
32313: ST_TO_ADDR
// for i in mines do
32314: LD_ADDR_VAR 0 4
32318: PUSH
32319: LD_VAR 0 2
32323: PUSH
32324: FOR_IN
32325: IFFALSE 32413
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32327: LD_VAR 0 4
32331: PUSH
32332: LD_INT 1
32334: ARRAY
32335: PPUSH
32336: LD_VAR 0 4
32340: PUSH
32341: LD_INT 2
32343: ARRAY
32344: PPUSH
32345: CALL_OW 458
32349: NOT
32350: IFFALSE 32354
// continue ;
32352: GO 32324
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32354: LD_VAR 0 4
32358: PUSH
32359: LD_INT 1
32361: ARRAY
32362: PPUSH
32363: LD_VAR 0 4
32367: PUSH
32368: LD_INT 2
32370: ARRAY
32371: PPUSH
32372: CALL_OW 428
32376: PUSH
32377: LD_VAR 0 5
32381: IN
32382: IFFALSE 32411
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32384: LD_VAR 0 4
32388: PUSH
32389: LD_INT 1
32391: ARRAY
32392: PPUSH
32393: LD_VAR 0 4
32397: PUSH
32398: LD_INT 2
32400: ARRAY
32401: PPUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 456
// end ;
32411: GO 32324
32413: POP
32414: POP
// end ;
32415: LD_VAR 0 3
32419: RET
// export function Count ( array ) ; var i ; begin
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
// result := 0 ;
32424: LD_ADDR_VAR 0 2
32428: PUSH
32429: LD_INT 0
32431: ST_TO_ADDR
// for i in array do
32432: LD_ADDR_VAR 0 3
32436: PUSH
32437: LD_VAR 0 1
32441: PUSH
32442: FOR_IN
32443: IFFALSE 32467
// if i then
32445: LD_VAR 0 3
32449: IFFALSE 32465
// result := result + 1 ;
32451: LD_ADDR_VAR 0 2
32455: PUSH
32456: LD_VAR 0 2
32460: PUSH
32461: LD_INT 1
32463: PLUS
32464: ST_TO_ADDR
32465: GO 32442
32467: POP
32468: POP
// end ;
32469: LD_VAR 0 2
32473: RET
// export function IsEmpty ( building ) ; begin
32474: LD_INT 0
32476: PPUSH
// if not building then
32477: LD_VAR 0 1
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32529
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32486: LD_ADDR_VAR 0 2
32490: PUSH
32491: LD_VAR 0 1
32495: PUSH
32496: LD_INT 22
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 255
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 58
32515: PUSH
32516: EMPTY
32517: LIST
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: IN
32528: ST_TO_ADDR
// end ;
32529: LD_VAR 0 2
32533: RET
// export function IsNotFull ( building ) ; begin
32534: LD_INT 0
32536: PPUSH
// if not building then
32537: LD_VAR 0 1
32541: NOT
32542: IFFALSE 32546
// exit ;
32544: GO 32565
// result := UnitsInside ( building ) < 6 ;
32546: LD_ADDR_VAR 0 2
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 313
32560: PUSH
32561: LD_INT 6
32563: LESS
32564: ST_TO_ADDR
// end ;
32565: LD_VAR 0 2
32569: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
// tmp := [ ] ;
32576: LD_ADDR_VAR 0 3
32580: PUSH
32581: EMPTY
32582: ST_TO_ADDR
// list := [ ] ;
32583: LD_ADDR_VAR 0 5
32587: PUSH
32588: EMPTY
32589: ST_TO_ADDR
// for i = 16 to 25 do
32590: LD_ADDR_VAR 0 4
32594: PUSH
32595: DOUBLE
32596: LD_INT 16
32598: DEC
32599: ST_TO_ADDR
32600: LD_INT 25
32602: PUSH
32603: FOR_TO
32604: IFFALSE 32677
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32606: LD_ADDR_VAR 0 3
32610: PUSH
32611: LD_VAR 0 3
32615: PUSH
32616: LD_INT 22
32618: PUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 255
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 91
32635: PUSH
32636: LD_VAR 0 1
32640: PUSH
32641: LD_INT 6
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 30
32651: PUSH
32652: LD_VAR 0 4
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: PPUSH
32669: CALL_OW 69
32673: ADD
32674: ST_TO_ADDR
32675: GO 32603
32677: POP
32678: POP
// for i = 1 to tmp do
32679: LD_ADDR_VAR 0 4
32683: PUSH
32684: DOUBLE
32685: LD_INT 1
32687: DEC
32688: ST_TO_ADDR
32689: LD_VAR 0 3
32693: PUSH
32694: FOR_TO
32695: IFFALSE 32783
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32697: LD_ADDR_VAR 0 5
32701: PUSH
32702: LD_VAR 0 5
32706: PUSH
32707: LD_VAR 0 3
32711: PUSH
32712: LD_VAR 0 4
32716: ARRAY
32717: PPUSH
32718: CALL_OW 266
32722: PUSH
32723: LD_VAR 0 3
32727: PUSH
32728: LD_VAR 0 4
32732: ARRAY
32733: PPUSH
32734: CALL_OW 250
32738: PUSH
32739: LD_VAR 0 3
32743: PUSH
32744: LD_VAR 0 4
32748: ARRAY
32749: PPUSH
32750: CALL_OW 251
32754: PUSH
32755: LD_VAR 0 3
32759: PUSH
32760: LD_VAR 0 4
32764: ARRAY
32765: PPUSH
32766: CALL_OW 254
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: ADD
32780: ST_TO_ADDR
32781: GO 32694
32783: POP
32784: POP
// result := list ;
32785: LD_ADDR_VAR 0 2
32789: PUSH
32790: LD_VAR 0 5
32794: ST_TO_ADDR
// end ;
32795: LD_VAR 0 2
32799: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
// if not factory then
32809: LD_VAR 0 1
32813: NOT
32814: IFFALSE 32818
// exit ;
32816: GO 33411
// if control = control_apeman then
32818: LD_VAR 0 4
32822: PUSH
32823: LD_INT 5
32825: EQUAL
32826: IFFALSE 32935
// begin tmp := UnitsInside ( factory ) ;
32828: LD_ADDR_VAR 0 8
32832: PUSH
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 313
32842: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32843: LD_VAR 0 8
32847: PPUSH
32848: LD_INT 25
32850: PUSH
32851: LD_INT 12
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PPUSH
32858: CALL_OW 72
32862: NOT
32863: IFFALSE 32873
// control := control_manual ;
32865: LD_ADDR_VAR 0 4
32869: PUSH
32870: LD_INT 1
32872: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32873: LD_ADDR_VAR 0 8
32877: PUSH
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL 32570 0 1
32887: ST_TO_ADDR
// if tmp then
32888: LD_VAR 0 8
32892: IFFALSE 32935
// begin for i in tmp do
32894: LD_ADDR_VAR 0 7
32898: PUSH
32899: LD_VAR 0 8
32903: PUSH
32904: FOR_IN
32905: IFFALSE 32933
// if i [ 1 ] = b_ext_radio then
32907: LD_VAR 0 7
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: PUSH
32916: LD_INT 22
32918: EQUAL
32919: IFFALSE 32931
// begin control := control_remote ;
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_INT 2
32928: ST_TO_ADDR
// break ;
32929: GO 32933
// end ;
32931: GO 32904
32933: POP
32934: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32935: LD_VAR 0 1
32939: PPUSH
32940: LD_VAR 0 2
32944: PPUSH
32945: LD_VAR 0 3
32949: PPUSH
32950: LD_VAR 0 4
32954: PPUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL_OW 448
32964: IFFALSE 32999
// begin result := [ chassis , engine , control , weapon ] ;
32966: LD_ADDR_VAR 0 6
32970: PUSH
32971: LD_VAR 0 2
32975: PUSH
32976: LD_VAR 0 3
32980: PUSH
32981: LD_VAR 0 4
32985: PUSH
32986: LD_VAR 0 5
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: ST_TO_ADDR
// exit ;
32997: GO 33411
// end ; _chassis := AvailableChassisList ( factory ) ;
32999: LD_ADDR_VAR 0 9
33003: PUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: CALL_OW 475
33013: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33014: LD_ADDR_VAR 0 11
33018: PUSH
33019: LD_VAR 0 1
33023: PPUSH
33024: CALL_OW 476
33028: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33029: LD_ADDR_VAR 0 12
33033: PUSH
33034: LD_VAR 0 1
33038: PPUSH
33039: CALL_OW 477
33043: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33044: LD_ADDR_VAR 0 10
33048: PUSH
33049: LD_VAR 0 1
33053: PPUSH
33054: CALL_OW 478
33058: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33059: LD_VAR 0 9
33063: NOT
33064: PUSH
33065: LD_VAR 0 11
33069: NOT
33070: OR
33071: PUSH
33072: LD_VAR 0 12
33076: NOT
33077: OR
33078: PUSH
33079: LD_VAR 0 10
33083: NOT
33084: OR
33085: IFFALSE 33120
// begin result := [ chassis , engine , control , weapon ] ;
33087: LD_ADDR_VAR 0 6
33091: PUSH
33092: LD_VAR 0 2
33096: PUSH
33097: LD_VAR 0 3
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_VAR 0 5
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// exit ;
33118: GO 33411
// end ; if not chassis in _chassis then
33120: LD_VAR 0 2
33124: PUSH
33125: LD_VAR 0 9
33129: IN
33130: NOT
33131: IFFALSE 33157
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33133: LD_ADDR_VAR 0 2
33137: PUSH
33138: LD_VAR 0 9
33142: PUSH
33143: LD_INT 1
33145: PPUSH
33146: LD_VAR 0 9
33150: PPUSH
33151: CALL_OW 12
33155: ARRAY
33156: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33157: LD_VAR 0 2
33161: PPUSH
33162: LD_VAR 0 3
33166: PPUSH
33167: CALL 33416 0 2
33171: NOT
33172: IFFALSE 33231
// repeat engine := _engine [ 1 ] ;
33174: LD_ADDR_VAR 0 3
33178: PUSH
33179: LD_VAR 0 11
33183: PUSH
33184: LD_INT 1
33186: ARRAY
33187: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33188: LD_ADDR_VAR 0 11
33192: PUSH
33193: LD_VAR 0 11
33197: PPUSH
33198: LD_INT 1
33200: PPUSH
33201: CALL_OW 3
33205: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33206: LD_VAR 0 2
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: CALL 33416 0 2
33220: PUSH
33221: LD_VAR 0 11
33225: PUSH
33226: EMPTY
33227: EQUAL
33228: OR
33229: IFFALSE 33174
// if not control in _control then
33231: LD_VAR 0 4
33235: PUSH
33236: LD_VAR 0 12
33240: IN
33241: NOT
33242: IFFALSE 33268
// control := _control [ rand ( 1 , _control ) ] ;
33244: LD_ADDR_VAR 0 4
33248: PUSH
33249: LD_VAR 0 12
33253: PUSH
33254: LD_INT 1
33256: PPUSH
33257: LD_VAR 0 12
33261: PPUSH
33262: CALL_OW 12
33266: ARRAY
33267: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33268: LD_VAR 0 2
33272: PPUSH
33273: LD_VAR 0 5
33277: PPUSH
33278: CALL 33636 0 2
33282: NOT
33283: IFFALSE 33342
// repeat weapon := _weapon [ 1 ] ;
33285: LD_ADDR_VAR 0 5
33289: PUSH
33290: LD_VAR 0 10
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33299: LD_ADDR_VAR 0 10
33303: PUSH
33304: LD_VAR 0 10
33308: PPUSH
33309: LD_INT 1
33311: PPUSH
33312: CALL_OW 3
33316: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33317: LD_VAR 0 2
33321: PPUSH
33322: LD_VAR 0 5
33326: PPUSH
33327: CALL 33636 0 2
33331: PUSH
33332: LD_VAR 0 10
33336: PUSH
33337: EMPTY
33338: EQUAL
33339: OR
33340: IFFALSE 33285
// result := [ ] ;
33342: LD_ADDR_VAR 0 6
33346: PUSH
33347: EMPTY
33348: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33349: LD_VAR 0 1
33353: PPUSH
33354: LD_VAR 0 2
33358: PPUSH
33359: LD_VAR 0 3
33363: PPUSH
33364: LD_VAR 0 4
33368: PPUSH
33369: LD_VAR 0 5
33373: PPUSH
33374: CALL_OW 448
33378: IFFALSE 33411
// result := [ chassis , engine , control , weapon ] ;
33380: LD_ADDR_VAR 0 6
33384: PUSH
33385: LD_VAR 0 2
33389: PUSH
33390: LD_VAR 0 3
33394: PUSH
33395: LD_VAR 0 4
33399: PUSH
33400: LD_VAR 0 5
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// end ;
33411: LD_VAR 0 6
33415: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33416: LD_INT 0
33418: PPUSH
// if not chassis or not engine then
33419: LD_VAR 0 1
33423: NOT
33424: PUSH
33425: LD_VAR 0 2
33429: NOT
33430: OR
33431: IFFALSE 33435
// exit ;
33433: GO 33631
// case engine of engine_solar :
33435: LD_VAR 0 2
33439: PUSH
33440: LD_INT 2
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33486
33448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33449: LD_ADDR_VAR 0 3
33453: PUSH
33454: LD_INT 11
33456: PUSH
33457: LD_INT 12
33459: PUSH
33460: LD_INT 13
33462: PUSH
33463: LD_INT 14
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33615
33486: LD_INT 1
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33556
33494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 11
33502: PUSH
33503: LD_INT 12
33505: PUSH
33506: LD_INT 13
33508: PUSH
33509: LD_INT 14
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 23
33532: PUSH
33533: LD_INT 22
33535: PUSH
33536: LD_INT 24
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
33554: GO 33615
33556: LD_INT 3
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33614
33564: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_INT 13
33572: PUSH
33573: LD_INT 14
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: LD_INT 21
33590: PUSH
33591: LD_INT 22
33593: PUSH
33594: LD_INT 23
33596: PUSH
33597: LD_INT 24
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: ST_TO_ADDR
33612: GO 33615
33614: POP
// result := ( chassis in result ) ;
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_VAR 0 1
33624: PUSH
33625: LD_VAR 0 3
33629: IN
33630: ST_TO_ADDR
// end ;
33631: LD_VAR 0 3
33635: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33636: LD_INT 0
33638: PPUSH
// if not chassis or not weapon then
33639: LD_VAR 0 1
33643: NOT
33644: PUSH
33645: LD_VAR 0 2
33649: NOT
33650: OR
33651: IFFALSE 33655
// exit ;
33653: GO 34717
// case weapon of us_machine_gun :
33655: LD_VAR 0 2
33659: PUSH
33660: LD_INT 2
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33698
33668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 3
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
33696: GO 34701
33698: LD_INT 3
33700: DOUBLE
33701: EQUAL
33702: IFTRUE 33706
33704: GO 33736
33706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33707: LD_ADDR_VAR 0 3
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: LD_INT 4
33723: PUSH
33724: LD_INT 5
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: ST_TO_ADDR
33734: GO 34701
33736: LD_INT 11
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33744
33742: GO 33774
33744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 3
33758: PUSH
33759: LD_INT 4
33761: PUSH
33762: LD_INT 5
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 34701
33774: LD_INT 4
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33808
33782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: LD_INT 3
33793: PUSH
33794: LD_INT 4
33796: PUSH
33797: LD_INT 5
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 34701
33808: LD_INT 5
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33842
33816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: LD_INT 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
33840: GO 34701
33842: LD_INT 9
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33876
33850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33851: LD_ADDR_VAR 0 3
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: LD_INT 4
33864: PUSH
33865: LD_INT 5
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 34701
33876: LD_INT 7
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33910
33884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: LD_INT 4
33898: PUSH
33899: LD_INT 5
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
33908: GO 34701
33910: LD_INT 12
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33944
33918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: LD_INT 4
33932: PUSH
33933: LD_INT 5
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: ST_TO_ADDR
33942: GO 34701
33944: LD_INT 13
33946: DOUBLE
33947: EQUAL
33948: IFTRUE 33952
33950: GO 33978
33952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33953: LD_ADDR_VAR 0 3
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: LD_INT 3
33963: PUSH
33964: LD_INT 4
33966: PUSH
33967: LD_INT 5
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
33976: GO 34701
33978: LD_INT 14
33980: DOUBLE
33981: EQUAL
33982: IFTRUE 33986
33984: GO 34004
33986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33987: LD_ADDR_VAR 0 3
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: LD_INT 5
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: ST_TO_ADDR
34002: GO 34701
34004: LD_INT 6
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34012
34010: GO 34030
34012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 34701
34030: LD_INT 10
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34056
34038: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_INT 4
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: ST_TO_ADDR
34054: GO 34701
34056: LD_INT 22
34058: DOUBLE
34059: EQUAL
34060: IFTRUE 34064
34062: GO 34090
34064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34065: LD_ADDR_VAR 0 3
34069: PUSH
34070: LD_INT 11
34072: PUSH
34073: LD_INT 12
34075: PUSH
34076: LD_INT 13
34078: PUSH
34079: LD_INT 14
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: ST_TO_ADDR
34088: GO 34701
34090: LD_INT 23
34092: DOUBLE
34093: EQUAL
34094: IFTRUE 34098
34096: GO 34124
34098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_INT 11
34106: PUSH
34107: LD_INT 12
34109: PUSH
34110: LD_INT 13
34112: PUSH
34113: LD_INT 14
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: ST_TO_ADDR
34122: GO 34701
34124: LD_INT 24
34126: DOUBLE
34127: EQUAL
34128: IFTRUE 34132
34130: GO 34158
34132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34133: LD_ADDR_VAR 0 3
34137: PUSH
34138: LD_INT 11
34140: PUSH
34141: LD_INT 12
34143: PUSH
34144: LD_INT 13
34146: PUSH
34147: LD_INT 14
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
34156: GO 34701
34158: LD_INT 30
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34192
34166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34167: LD_ADDR_VAR 0 3
34171: PUSH
34172: LD_INT 11
34174: PUSH
34175: LD_INT 12
34177: PUSH
34178: LD_INT 13
34180: PUSH
34181: LD_INT 14
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: ST_TO_ADDR
34190: GO 34701
34192: LD_INT 25
34194: DOUBLE
34195: EQUAL
34196: IFTRUE 34200
34198: GO 34218
34200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34201: LD_ADDR_VAR 0 3
34205: PUSH
34206: LD_INT 13
34208: PUSH
34209: LD_INT 14
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: ST_TO_ADDR
34216: GO 34701
34218: LD_INT 27
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34244
34226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_INT 13
34234: PUSH
34235: LD_INT 14
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 34701
34244: LD_EXP 110
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34280
34254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34255: LD_ADDR_VAR 0 3
34259: PUSH
34260: LD_INT 11
34262: PUSH
34263: LD_INT 12
34265: PUSH
34266: LD_INT 13
34268: PUSH
34269: LD_INT 14
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
34278: GO 34701
34280: LD_INT 28
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34306
34288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34289: LD_ADDR_VAR 0 3
34293: PUSH
34294: LD_INT 13
34296: PUSH
34297: LD_INT 14
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: ST_TO_ADDR
34304: GO 34701
34306: LD_INT 29
34308: DOUBLE
34309: EQUAL
34310: IFTRUE 34314
34312: GO 34332
34314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34315: LD_ADDR_VAR 0 3
34319: PUSH
34320: LD_INT 13
34322: PUSH
34323: LD_INT 14
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: ST_TO_ADDR
34330: GO 34701
34332: LD_INT 31
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34340
34338: GO 34358
34340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 13
34348: PUSH
34349: LD_INT 14
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: ST_TO_ADDR
34356: GO 34701
34358: LD_INT 26
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 34384
34366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 13
34374: PUSH
34375: LD_INT 14
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: ST_TO_ADDR
34382: GO 34701
34384: LD_INT 42
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34418
34392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 21
34400: PUSH
34401: LD_INT 22
34403: PUSH
34404: LD_INT 23
34406: PUSH
34407: LD_INT 24
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 34701
34418: LD_INT 43
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 21
34434: PUSH
34435: LD_INT 22
34437: PUSH
34438: LD_INT 23
34440: PUSH
34441: LD_INT 24
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34701
34452: LD_INT 44
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34486
34460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 22
34471: PUSH
34472: LD_INT 23
34474: PUSH
34475: LD_INT 24
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
34484: GO 34701
34486: LD_INT 45
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34520
34494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_INT 23
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
34518: GO 34701
34520: LD_INT 49
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34528
34526: GO 34554
34528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_INT 21
34536: PUSH
34537: LD_INT 22
34539: PUSH
34540: LD_INT 23
34542: PUSH
34543: LD_INT 24
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
34552: GO 34701
34554: LD_INT 51
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34562
34560: GO 34588
34562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_INT 21
34570: PUSH
34571: LD_INT 22
34573: PUSH
34574: LD_INT 23
34576: PUSH
34577: LD_INT 24
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 34701
34588: LD_INT 52
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34622
34596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34597: LD_ADDR_VAR 0 3
34601: PUSH
34602: LD_INT 21
34604: PUSH
34605: LD_INT 22
34607: PUSH
34608: LD_INT 23
34610: PUSH
34611: LD_INT 24
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
34620: GO 34701
34622: LD_INT 53
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34630
34628: GO 34648
34630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34631: LD_ADDR_VAR 0 3
34635: PUSH
34636: LD_INT 23
34638: PUSH
34639: LD_INT 24
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: ST_TO_ADDR
34646: GO 34701
34648: LD_INT 46
34650: DOUBLE
34651: EQUAL
34652: IFTRUE 34656
34654: GO 34674
34656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_INT 23
34664: PUSH
34665: LD_INT 24
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: ST_TO_ADDR
34672: GO 34701
34674: LD_INT 47
34676: DOUBLE
34677: EQUAL
34678: IFTRUE 34682
34680: GO 34700
34682: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34683: LD_ADDR_VAR 0 3
34687: PUSH
34688: LD_INT 23
34690: PUSH
34691: LD_INT 24
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: ST_TO_ADDR
34698: GO 34701
34700: POP
// result := ( chassis in result ) ;
34701: LD_ADDR_VAR 0 3
34705: PUSH
34706: LD_VAR 0 1
34710: PUSH
34711: LD_VAR 0 3
34715: IN
34716: ST_TO_ADDR
// end ;
34717: LD_VAR 0 3
34721: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
// result := array ;
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: LD_VAR 0 1
34740: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34741: LD_VAR 0 1
34745: NOT
34746: PUSH
34747: LD_VAR 0 2
34751: NOT
34752: OR
34753: PUSH
34754: LD_VAR 0 3
34758: NOT
34759: OR
34760: PUSH
34761: LD_VAR 0 2
34765: PUSH
34766: LD_VAR 0 1
34770: GREATER
34771: OR
34772: PUSH
34773: LD_VAR 0 3
34777: PUSH
34778: LD_VAR 0 1
34782: GREATER
34783: OR
34784: IFFALSE 34788
// exit ;
34786: GO 35084
// if direction then
34788: LD_VAR 0 4
34792: IFFALSE 34856
// begin d := 1 ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_INT 1
34801: ST_TO_ADDR
// if i_from > i_to then
34802: LD_VAR 0 2
34806: PUSH
34807: LD_VAR 0 3
34811: GREATER
34812: IFFALSE 34838
// length := ( array - i_from ) + i_to else
34814: LD_ADDR_VAR 0 11
34818: PUSH
34819: LD_VAR 0 1
34823: PUSH
34824: LD_VAR 0 2
34828: MINUS
34829: PUSH
34830: LD_VAR 0 3
34834: PLUS
34835: ST_TO_ADDR
34836: GO 34854
// length := i_to - i_from ;
34838: LD_ADDR_VAR 0 11
34842: PUSH
34843: LD_VAR 0 3
34847: PUSH
34848: LD_VAR 0 2
34852: MINUS
34853: ST_TO_ADDR
// end else
34854: GO 34917
// begin d := - 1 ;
34856: LD_ADDR_VAR 0 9
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: ST_TO_ADDR
// if i_from > i_to then
34865: LD_VAR 0 2
34869: PUSH
34870: LD_VAR 0 3
34874: GREATER
34875: IFFALSE 34895
// length := i_from - i_to else
34877: LD_ADDR_VAR 0 11
34881: PUSH
34882: LD_VAR 0 2
34886: PUSH
34887: LD_VAR 0 3
34891: MINUS
34892: ST_TO_ADDR
34893: GO 34917
// length := ( array - i_to ) + i_from ;
34895: LD_ADDR_VAR 0 11
34899: PUSH
34900: LD_VAR 0 1
34904: PUSH
34905: LD_VAR 0 3
34909: MINUS
34910: PUSH
34911: LD_VAR 0 2
34915: PLUS
34916: ST_TO_ADDR
// end ; if not length then
34917: LD_VAR 0 11
34921: NOT
34922: IFFALSE 34926
// exit ;
34924: GO 35084
// tmp := array ;
34926: LD_ADDR_VAR 0 10
34930: PUSH
34931: LD_VAR 0 1
34935: ST_TO_ADDR
// for i = 1 to length do
34936: LD_ADDR_VAR 0 6
34940: PUSH
34941: DOUBLE
34942: LD_INT 1
34944: DEC
34945: ST_TO_ADDR
34946: LD_VAR 0 11
34950: PUSH
34951: FOR_TO
34952: IFFALSE 35072
// begin for j = 1 to array do
34954: LD_ADDR_VAR 0 7
34958: PUSH
34959: DOUBLE
34960: LD_INT 1
34962: DEC
34963: ST_TO_ADDR
34964: LD_VAR 0 1
34968: PUSH
34969: FOR_TO
34970: IFFALSE 35058
// begin k := j + d ;
34972: LD_ADDR_VAR 0 8
34976: PUSH
34977: LD_VAR 0 7
34981: PUSH
34982: LD_VAR 0 9
34986: PLUS
34987: ST_TO_ADDR
// if k > array then
34988: LD_VAR 0 8
34992: PUSH
34993: LD_VAR 0 1
34997: GREATER
34998: IFFALSE 35008
// k := 1 ;
35000: LD_ADDR_VAR 0 8
35004: PUSH
35005: LD_INT 1
35007: ST_TO_ADDR
// if not k then
35008: LD_VAR 0 8
35012: NOT
35013: IFFALSE 35025
// k := array ;
35015: LD_ADDR_VAR 0 8
35019: PUSH
35020: LD_VAR 0 1
35024: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35025: LD_ADDR_VAR 0 10
35029: PUSH
35030: LD_VAR 0 10
35034: PPUSH
35035: LD_VAR 0 8
35039: PPUSH
35040: LD_VAR 0 1
35044: PUSH
35045: LD_VAR 0 7
35049: ARRAY
35050: PPUSH
35051: CALL_OW 1
35055: ST_TO_ADDR
// end ;
35056: GO 34969
35058: POP
35059: POP
// array := tmp ;
35060: LD_ADDR_VAR 0 1
35064: PUSH
35065: LD_VAR 0 10
35069: ST_TO_ADDR
// end ;
35070: GO 34951
35072: POP
35073: POP
// result := array ;
35074: LD_ADDR_VAR 0 5
35078: PUSH
35079: LD_VAR 0 1
35083: ST_TO_ADDR
// end ;
35084: LD_VAR 0 5
35088: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35089: LD_INT 0
35091: PPUSH
35092: PPUSH
// result := 0 ;
35093: LD_ADDR_VAR 0 3
35097: PUSH
35098: LD_INT 0
35100: ST_TO_ADDR
// if not array or not value in array then
35101: LD_VAR 0 1
35105: NOT
35106: PUSH
35107: LD_VAR 0 2
35111: PUSH
35112: LD_VAR 0 1
35116: IN
35117: NOT
35118: OR
35119: IFFALSE 35123
// exit ;
35121: GO 35177
// for i = 1 to array do
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: DOUBLE
35129: LD_INT 1
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 1
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35175
// if value = array [ i ] then
35141: LD_VAR 0 2
35145: PUSH
35146: LD_VAR 0 1
35150: PUSH
35151: LD_VAR 0 4
35155: ARRAY
35156: EQUAL
35157: IFFALSE 35173
// begin result := i ;
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_VAR 0 4
35168: ST_TO_ADDR
// exit ;
35169: POP
35170: POP
35171: GO 35177
// end ;
35173: GO 35138
35175: POP
35176: POP
// end ;
35177: LD_VAR 0 3
35181: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35182: LD_INT 0
35184: PPUSH
// vc_chassis := chassis ;
35185: LD_ADDR_OWVAR 37
35189: PUSH
35190: LD_VAR 0 1
35194: ST_TO_ADDR
// vc_engine := engine ;
35195: LD_ADDR_OWVAR 39
35199: PUSH
35200: LD_VAR 0 2
35204: ST_TO_ADDR
// vc_control := control ;
35205: LD_ADDR_OWVAR 38
35209: PUSH
35210: LD_VAR 0 3
35214: ST_TO_ADDR
// vc_weapon := weapon ;
35215: LD_ADDR_OWVAR 40
35219: PUSH
35220: LD_VAR 0 4
35224: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35225: LD_ADDR_OWVAR 41
35229: PUSH
35230: LD_VAR 0 5
35234: ST_TO_ADDR
// end ;
35235: LD_VAR 0 6
35239: RET
// export function WantPlant ( unit ) ; var task ; begin
35240: LD_INT 0
35242: PPUSH
35243: PPUSH
// result := false ;
35244: LD_ADDR_VAR 0 2
35248: PUSH
35249: LD_INT 0
35251: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35252: LD_ADDR_VAR 0 3
35256: PUSH
35257: LD_VAR 0 1
35261: PPUSH
35262: CALL_OW 437
35266: ST_TO_ADDR
// if task then
35267: LD_VAR 0 3
35271: IFFALSE 35299
// if task [ 1 ] [ 1 ] = p then
35273: LD_VAR 0 3
35277: PUSH
35278: LD_INT 1
35280: ARRAY
35281: PUSH
35282: LD_INT 1
35284: ARRAY
35285: PUSH
35286: LD_STRING p
35288: EQUAL
35289: IFFALSE 35299
// result := true ;
35291: LD_ADDR_VAR 0 2
35295: PUSH
35296: LD_INT 1
35298: ST_TO_ADDR
// end ;
35299: LD_VAR 0 2
35303: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35304: LD_INT 0
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
// if pos < 1 then
35310: LD_VAR 0 2
35314: PUSH
35315: LD_INT 1
35317: LESS
35318: IFFALSE 35322
// exit ;
35320: GO 35625
// if pos = 1 then
35322: LD_VAR 0 2
35326: PUSH
35327: LD_INT 1
35329: EQUAL
35330: IFFALSE 35363
// result := Replace ( arr , pos [ 1 ] , value ) else
35332: LD_ADDR_VAR 0 4
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: LD_VAR 0 2
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: PPUSH
35351: LD_VAR 0 3
35355: PPUSH
35356: CALL_OW 1
35360: ST_TO_ADDR
35361: GO 35625
// begin tmp := arr ;
35363: LD_ADDR_VAR 0 6
35367: PUSH
35368: LD_VAR 0 1
35372: ST_TO_ADDR
// s_arr := [ tmp ] ;
35373: LD_ADDR_VAR 0 7
35377: PUSH
35378: LD_VAR 0 6
35382: PUSH
35383: EMPTY
35384: LIST
35385: ST_TO_ADDR
// for i = 1 to pos - 1 do
35386: LD_ADDR_VAR 0 5
35390: PUSH
35391: DOUBLE
35392: LD_INT 1
35394: DEC
35395: ST_TO_ADDR
35396: LD_VAR 0 2
35400: PUSH
35401: LD_INT 1
35403: MINUS
35404: PUSH
35405: FOR_TO
35406: IFFALSE 35451
// begin tmp := tmp [ pos [ i ] ] ;
35408: LD_ADDR_VAR 0 6
35412: PUSH
35413: LD_VAR 0 6
35417: PUSH
35418: LD_VAR 0 2
35422: PUSH
35423: LD_VAR 0 5
35427: ARRAY
35428: ARRAY
35429: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35430: LD_ADDR_VAR 0 7
35434: PUSH
35435: LD_VAR 0 7
35439: PUSH
35440: LD_VAR 0 6
35444: PUSH
35445: EMPTY
35446: LIST
35447: ADD
35448: ST_TO_ADDR
// end ;
35449: GO 35405
35451: POP
35452: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35453: LD_ADDR_VAR 0 6
35457: PUSH
35458: LD_VAR 0 6
35462: PPUSH
35463: LD_VAR 0 2
35467: PUSH
35468: LD_VAR 0 2
35472: ARRAY
35473: PPUSH
35474: LD_VAR 0 3
35478: PPUSH
35479: CALL_OW 1
35483: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35484: LD_ADDR_VAR 0 7
35488: PUSH
35489: LD_VAR 0 7
35493: PPUSH
35494: LD_VAR 0 7
35498: PPUSH
35499: LD_VAR 0 6
35503: PPUSH
35504: CALL_OW 1
35508: ST_TO_ADDR
// for i = s_arr downto 2 do
35509: LD_ADDR_VAR 0 5
35513: PUSH
35514: DOUBLE
35515: LD_VAR 0 7
35519: INC
35520: ST_TO_ADDR
35521: LD_INT 2
35523: PUSH
35524: FOR_DOWNTO
35525: IFFALSE 35609
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35527: LD_ADDR_VAR 0 6
35531: PUSH
35532: LD_VAR 0 7
35536: PUSH
35537: LD_VAR 0 5
35541: PUSH
35542: LD_INT 1
35544: MINUS
35545: ARRAY
35546: PPUSH
35547: LD_VAR 0 2
35551: PUSH
35552: LD_VAR 0 5
35556: PUSH
35557: LD_INT 1
35559: MINUS
35560: ARRAY
35561: PPUSH
35562: LD_VAR 0 7
35566: PUSH
35567: LD_VAR 0 5
35571: ARRAY
35572: PPUSH
35573: CALL_OW 1
35577: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35578: LD_ADDR_VAR 0 7
35582: PUSH
35583: LD_VAR 0 7
35587: PPUSH
35588: LD_VAR 0 5
35592: PUSH
35593: LD_INT 1
35595: MINUS
35596: PPUSH
35597: LD_VAR 0 6
35601: PPUSH
35602: CALL_OW 1
35606: ST_TO_ADDR
// end ;
35607: GO 35524
35609: POP
35610: POP
// result := s_arr [ 1 ] ;
35611: LD_ADDR_VAR 0 4
35615: PUSH
35616: LD_VAR 0 7
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: ST_TO_ADDR
// end ; end ;
35625: LD_VAR 0 4
35629: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35630: LD_INT 0
35632: PPUSH
35633: PPUSH
// if not list then
35634: LD_VAR 0 1
35638: NOT
35639: IFFALSE 35643
// exit ;
35641: GO 35734
// i := list [ pos1 ] ;
35643: LD_ADDR_VAR 0 5
35647: PUSH
35648: LD_VAR 0 1
35652: PUSH
35653: LD_VAR 0 2
35657: ARRAY
35658: ST_TO_ADDR
// if not i then
35659: LD_VAR 0 5
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 35734
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35668: LD_ADDR_VAR 0 1
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 2
35682: PPUSH
35683: LD_VAR 0 1
35687: PUSH
35688: LD_VAR 0 3
35692: ARRAY
35693: PPUSH
35694: CALL_OW 1
35698: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35699: LD_ADDR_VAR 0 1
35703: PUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: LD_VAR 0 3
35713: PPUSH
35714: LD_VAR 0 5
35718: PPUSH
35719: CALL_OW 1
35723: ST_TO_ADDR
// result := list ;
35724: LD_ADDR_VAR 0 4
35728: PUSH
35729: LD_VAR 0 1
35733: ST_TO_ADDR
// end ;
35734: LD_VAR 0 4
35738: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35739: LD_INT 0
35741: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35742: LD_ADDR_VAR 0 5
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 250
35756: PPUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 251
35766: PPUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: LD_VAR 0 3
35776: PPUSH
35777: LD_VAR 0 4
35781: PPUSH
35782: CALL 35792 0 5
35786: ST_TO_ADDR
// end ;
35787: LD_VAR 0 5
35791: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35792: LD_INT 0
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
// if not list then
35798: LD_VAR 0 3
35802: NOT
35803: IFFALSE 35807
// exit ;
35805: GO 36195
// result := [ ] ;
35807: LD_ADDR_VAR 0 6
35811: PUSH
35812: EMPTY
35813: ST_TO_ADDR
// for i in list do
35814: LD_ADDR_VAR 0 7
35818: PUSH
35819: LD_VAR 0 3
35823: PUSH
35824: FOR_IN
35825: IFFALSE 36027
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35827: LD_ADDR_VAR 0 9
35831: PUSH
35832: LD_VAR 0 7
35836: PPUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: LD_VAR 0 2
35846: PPUSH
35847: CALL_OW 297
35851: ST_TO_ADDR
// if not result then
35852: LD_VAR 0 6
35856: NOT
35857: IFFALSE 35883
// result := [ [ i , tmp ] ] else
35859: LD_ADDR_VAR 0 6
35863: PUSH
35864: LD_VAR 0 7
35868: PUSH
35869: LD_VAR 0 9
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: ST_TO_ADDR
35881: GO 36025
// begin if result [ result ] [ 2 ] < tmp then
35883: LD_VAR 0 6
35887: PUSH
35888: LD_VAR 0 6
35892: ARRAY
35893: PUSH
35894: LD_INT 2
35896: ARRAY
35897: PUSH
35898: LD_VAR 0 9
35902: LESS
35903: IFFALSE 35945
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35905: LD_ADDR_VAR 0 6
35909: PUSH
35910: LD_VAR 0 6
35914: PPUSH
35915: LD_VAR 0 6
35919: PUSH
35920: LD_INT 1
35922: PLUS
35923: PPUSH
35924: LD_VAR 0 7
35928: PUSH
35929: LD_VAR 0 9
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PPUSH
35938: CALL_OW 2
35942: ST_TO_ADDR
35943: GO 36025
// for j = 1 to result do
35945: LD_ADDR_VAR 0 8
35949: PUSH
35950: DOUBLE
35951: LD_INT 1
35953: DEC
35954: ST_TO_ADDR
35955: LD_VAR 0 6
35959: PUSH
35960: FOR_TO
35961: IFFALSE 36023
// begin if tmp < result [ j ] [ 2 ] then
35963: LD_VAR 0 9
35967: PUSH
35968: LD_VAR 0 6
35972: PUSH
35973: LD_VAR 0 8
35977: ARRAY
35978: PUSH
35979: LD_INT 2
35981: ARRAY
35982: LESS
35983: IFFALSE 36021
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35985: LD_ADDR_VAR 0 6
35989: PUSH
35990: LD_VAR 0 6
35994: PPUSH
35995: LD_VAR 0 8
35999: PPUSH
36000: LD_VAR 0 7
36004: PUSH
36005: LD_VAR 0 9
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PPUSH
36014: CALL_OW 2
36018: ST_TO_ADDR
// break ;
36019: GO 36023
// end ; end ;
36021: GO 35960
36023: POP
36024: POP
// end ; end ;
36025: GO 35824
36027: POP
36028: POP
// if result and not asc then
36029: LD_VAR 0 6
36033: PUSH
36034: LD_VAR 0 4
36038: NOT
36039: AND
36040: IFFALSE 36115
// begin tmp := result ;
36042: LD_ADDR_VAR 0 9
36046: PUSH
36047: LD_VAR 0 6
36051: ST_TO_ADDR
// for i = tmp downto 1 do
36052: LD_ADDR_VAR 0 7
36056: PUSH
36057: DOUBLE
36058: LD_VAR 0 9
36062: INC
36063: ST_TO_ADDR
36064: LD_INT 1
36066: PUSH
36067: FOR_DOWNTO
36068: IFFALSE 36113
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36070: LD_ADDR_VAR 0 6
36074: PUSH
36075: LD_VAR 0 6
36079: PPUSH
36080: LD_VAR 0 9
36084: PUSH
36085: LD_VAR 0 7
36089: MINUS
36090: PUSH
36091: LD_INT 1
36093: PLUS
36094: PPUSH
36095: LD_VAR 0 9
36099: PUSH
36100: LD_VAR 0 7
36104: ARRAY
36105: PPUSH
36106: CALL_OW 1
36110: ST_TO_ADDR
36111: GO 36067
36113: POP
36114: POP
// end ; tmp := [ ] ;
36115: LD_ADDR_VAR 0 9
36119: PUSH
36120: EMPTY
36121: ST_TO_ADDR
// if mode then
36122: LD_VAR 0 5
36126: IFFALSE 36195
// begin for i = 1 to result do
36128: LD_ADDR_VAR 0 7
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 6
36142: PUSH
36143: FOR_TO
36144: IFFALSE 36183
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36146: LD_ADDR_VAR 0 9
36150: PUSH
36151: LD_VAR 0 9
36155: PPUSH
36156: LD_VAR 0 7
36160: PPUSH
36161: LD_VAR 0 6
36165: PUSH
36166: LD_VAR 0 7
36170: ARRAY
36171: PUSH
36172: LD_INT 1
36174: ARRAY
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
36181: GO 36143
36183: POP
36184: POP
// result := tmp ;
36185: LD_ADDR_VAR 0 6
36189: PUSH
36190: LD_VAR 0 9
36194: ST_TO_ADDR
// end ; end ;
36195: LD_VAR 0 6
36199: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36200: LD_INT 0
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36208: LD_ADDR_VAR 0 5
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: ST_TO_ADDR
// if not x or not y then
36230: LD_VAR 0 2
36234: NOT
36235: PUSH
36236: LD_VAR 0 3
36240: NOT
36241: OR
36242: IFFALSE 36246
// exit ;
36244: GO 37898
// if not range then
36246: LD_VAR 0 4
36250: NOT
36251: IFFALSE 36261
// range := 10 ;
36253: LD_ADDR_VAR 0 4
36257: PUSH
36258: LD_INT 10
36260: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36261: LD_ADDR_VAR 0 8
36265: PUSH
36266: LD_INT 81
36268: PUSH
36269: LD_VAR 0 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 92
36280: PUSH
36281: LD_VAR 0 2
36285: PUSH
36286: LD_VAR 0 3
36290: PUSH
36291: LD_VAR 0 4
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: LD_INT 21
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: PPUSH
36324: CALL_OW 69
36328: ST_TO_ADDR
// if not tmp then
36329: LD_VAR 0 8
36333: NOT
36334: IFFALSE 36338
// exit ;
36336: GO 37898
// for i in tmp do
36338: LD_ADDR_VAR 0 6
36342: PUSH
36343: LD_VAR 0 8
36347: PUSH
36348: FOR_IN
36349: IFFALSE 37873
// begin points := [ 0 , 0 , 0 ] ;
36351: LD_ADDR_VAR 0 9
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// bpoints := 1 ;
36370: LD_ADDR_VAR 0 10
36374: PUSH
36375: LD_INT 1
36377: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36378: LD_VAR 0 6
36382: PPUSH
36383: CALL_OW 247
36387: PUSH
36388: LD_INT 1
36390: DOUBLE
36391: EQUAL
36392: IFTRUE 36396
36394: GO 36974
36396: POP
// begin if GetClass ( i ) = 1 then
36397: LD_VAR 0 6
36401: PPUSH
36402: CALL_OW 257
36406: PUSH
36407: LD_INT 1
36409: EQUAL
36410: IFFALSE 36431
// points := [ 10 , 5 , 3 ] ;
36412: LD_ADDR_VAR 0 9
36416: PUSH
36417: LD_INT 10
36419: PUSH
36420: LD_INT 5
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36431: LD_VAR 0 6
36435: PPUSH
36436: CALL_OW 257
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: IN
36455: IFFALSE 36476
// points := [ 3 , 2 , 1 ] ;
36457: LD_ADDR_VAR 0 9
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36476: LD_VAR 0 6
36480: PPUSH
36481: CALL_OW 257
36485: PUSH
36486: LD_INT 5
36488: EQUAL
36489: IFFALSE 36510
// points := [ 130 , 5 , 2 ] ;
36491: LD_ADDR_VAR 0 9
36495: PUSH
36496: LD_INT 130
36498: PUSH
36499: LD_INT 5
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36510: LD_VAR 0 6
36514: PPUSH
36515: CALL_OW 257
36519: PUSH
36520: LD_INT 8
36522: EQUAL
36523: IFFALSE 36544
// points := [ 35 , 35 , 30 ] ;
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_INT 35
36532: PUSH
36533: LD_INT 35
36535: PUSH
36536: LD_INT 30
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36544: LD_VAR 0 6
36548: PPUSH
36549: CALL_OW 257
36553: PUSH
36554: LD_INT 9
36556: EQUAL
36557: IFFALSE 36578
// points := [ 20 , 55 , 40 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 20
36566: PUSH
36567: LD_INT 55
36569: PUSH
36570: LD_INT 40
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 257
36587: PUSH
36588: LD_INT 12
36590: PUSH
36591: LD_INT 16
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: IN
36598: IFFALSE 36619
// points := [ 5 , 3 , 2 ] ;
36600: LD_ADDR_VAR 0 9
36604: PUSH
36605: LD_INT 5
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36619: LD_VAR 0 6
36623: PPUSH
36624: CALL_OW 257
36628: PUSH
36629: LD_INT 17
36631: EQUAL
36632: IFFALSE 36653
// points := [ 100 , 50 , 75 ] ;
36634: LD_ADDR_VAR 0 9
36638: PUSH
36639: LD_INT 100
36641: PUSH
36642: LD_INT 50
36644: PUSH
36645: LD_INT 75
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36653: LD_VAR 0 6
36657: PPUSH
36658: CALL_OW 257
36662: PUSH
36663: LD_INT 15
36665: EQUAL
36666: IFFALSE 36687
// points := [ 10 , 5 , 3 ] ;
36668: LD_ADDR_VAR 0 9
36672: PUSH
36673: LD_INT 10
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36687: LD_VAR 0 6
36691: PPUSH
36692: CALL_OW 257
36696: PUSH
36697: LD_INT 14
36699: EQUAL
36700: IFFALSE 36721
// points := [ 10 , 0 , 0 ] ;
36702: LD_ADDR_VAR 0 9
36706: PUSH
36707: LD_INT 10
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36721: LD_VAR 0 6
36725: PPUSH
36726: CALL_OW 257
36730: PUSH
36731: LD_INT 11
36733: EQUAL
36734: IFFALSE 36755
// points := [ 30 , 10 , 5 ] ;
36736: LD_ADDR_VAR 0 9
36740: PUSH
36741: LD_INT 30
36743: PUSH
36744: LD_INT 10
36746: PUSH
36747: LD_INT 5
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36755: LD_VAR 0 1
36759: PPUSH
36760: LD_INT 5
36762: PPUSH
36763: CALL_OW 321
36767: PUSH
36768: LD_INT 2
36770: EQUAL
36771: IFFALSE 36788
// bpoints := bpoints * 1.8 ;
36773: LD_ADDR_VAR 0 10
36777: PUSH
36778: LD_VAR 0 10
36782: PUSH
36783: LD_REAL  1.80000000000000E+0000
36786: MUL
36787: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36788: LD_VAR 0 6
36792: PPUSH
36793: CALL_OW 257
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 3
36806: PUSH
36807: LD_INT 4
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: IN
36816: PUSH
36817: LD_VAR 0 1
36821: PPUSH
36822: LD_INT 51
36824: PPUSH
36825: CALL_OW 321
36829: PUSH
36830: LD_INT 2
36832: EQUAL
36833: AND
36834: IFFALSE 36851
// bpoints := bpoints * 1.2 ;
36836: LD_ADDR_VAR 0 10
36840: PUSH
36841: LD_VAR 0 10
36845: PUSH
36846: LD_REAL  1.20000000000000E+0000
36849: MUL
36850: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 257
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 7
36866: PUSH
36867: LD_INT 9
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: IN
36875: PUSH
36876: LD_VAR 0 1
36880: PPUSH
36881: LD_INT 52
36883: PPUSH
36884: CALL_OW 321
36888: PUSH
36889: LD_INT 2
36891: EQUAL
36892: AND
36893: IFFALSE 36910
// bpoints := bpoints * 1.5 ;
36895: LD_ADDR_VAR 0 10
36899: PUSH
36900: LD_VAR 0 10
36904: PUSH
36905: LD_REAL  1.50000000000000E+0000
36908: MUL
36909: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36910: LD_VAR 0 1
36914: PPUSH
36915: LD_INT 66
36917: PPUSH
36918: CALL_OW 321
36922: PUSH
36923: LD_INT 2
36925: EQUAL
36926: IFFALSE 36943
// bpoints := bpoints * 1.1 ;
36928: LD_ADDR_VAR 0 10
36932: PUSH
36933: LD_VAR 0 10
36937: PUSH
36938: LD_REAL  1.10000000000000E+0000
36941: MUL
36942: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36943: LD_ADDR_VAR 0 10
36947: PUSH
36948: LD_VAR 0 10
36952: PUSH
36953: LD_VAR 0 6
36957: PPUSH
36958: LD_INT 1
36960: PPUSH
36961: CALL_OW 259
36965: PUSH
36966: LD_REAL  1.15000000000000E+0000
36969: MUL
36970: MUL
36971: ST_TO_ADDR
// end ; unit_vehicle :
36972: GO 37802
36974: LD_INT 2
36976: DOUBLE
36977: EQUAL
36978: IFTRUE 36982
36980: GO 37790
36982: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 264
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 42
36998: PUSH
36999: LD_INT 24
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: IN
37007: IFFALSE 37028
// points := [ 25 , 5 , 3 ] ;
37009: LD_ADDR_VAR 0 9
37013: PUSH
37014: LD_INT 25
37016: PUSH
37017: LD_INT 5
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37028: LD_VAR 0 6
37032: PPUSH
37033: CALL_OW 264
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: LD_INT 43
37043: PUSH
37044: LD_INT 25
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: IN
37052: IFFALSE 37073
// points := [ 40 , 15 , 5 ] ;
37054: LD_ADDR_VAR 0 9
37058: PUSH
37059: LD_INT 40
37061: PUSH
37062: LD_INT 15
37064: PUSH
37065: LD_INT 5
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL_OW 264
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: LD_INT 23
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: IN
37093: IFFALSE 37114
// points := [ 7 , 25 , 8 ] ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_INT 7
37102: PUSH
37103: LD_INT 25
37105: PUSH
37106: LD_INT 8
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 264
37123: PUSH
37124: LD_INT 5
37126: PUSH
37127: LD_INT 27
37129: PUSH
37130: LD_INT 44
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: IN
37138: IFFALSE 37159
// points := [ 14 , 50 , 16 ] ;
37140: LD_ADDR_VAR 0 9
37144: PUSH
37145: LD_INT 14
37147: PUSH
37148: LD_INT 50
37150: PUSH
37151: LD_INT 16
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37159: LD_VAR 0 6
37163: PPUSH
37164: CALL_OW 264
37168: PUSH
37169: LD_INT 6
37171: PUSH
37172: LD_INT 46
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: IN
37179: IFFALSE 37200
// points := [ 32 , 120 , 70 ] ;
37181: LD_ADDR_VAR 0 9
37185: PUSH
37186: LD_INT 32
37188: PUSH
37189: LD_INT 120
37191: PUSH
37192: LD_INT 70
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37200: LD_VAR 0 6
37204: PPUSH
37205: CALL_OW 264
37209: PUSH
37210: LD_INT 7
37212: PUSH
37213: LD_INT 28
37215: PUSH
37216: LD_INT 45
37218: PUSH
37219: LD_EXP 110
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: IN
37230: IFFALSE 37251
// points := [ 35 , 20 , 45 ] ;
37232: LD_ADDR_VAR 0 9
37236: PUSH
37237: LD_INT 35
37239: PUSH
37240: LD_INT 20
37242: PUSH
37243: LD_INT 45
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37251: LD_VAR 0 6
37255: PPUSH
37256: CALL_OW 264
37260: PUSH
37261: LD_INT 47
37263: PUSH
37264: EMPTY
37265: LIST
37266: IN
37267: IFFALSE 37288
// points := [ 67 , 45 , 75 ] ;
37269: LD_ADDR_VAR 0 9
37273: PUSH
37274: LD_INT 67
37276: PUSH
37277: LD_INT 45
37279: PUSH
37280: LD_INT 75
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37288: LD_VAR 0 6
37292: PPUSH
37293: CALL_OW 264
37297: PUSH
37298: LD_INT 26
37300: PUSH
37301: EMPTY
37302: LIST
37303: IN
37304: IFFALSE 37325
// points := [ 120 , 30 , 80 ] ;
37306: LD_ADDR_VAR 0 9
37310: PUSH
37311: LD_INT 120
37313: PUSH
37314: LD_INT 30
37316: PUSH
37317: LD_INT 80
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37325: LD_VAR 0 6
37329: PPUSH
37330: CALL_OW 264
37334: PUSH
37335: LD_INT 22
37337: PUSH
37338: EMPTY
37339: LIST
37340: IN
37341: IFFALSE 37362
// points := [ 40 , 1 , 1 ] ;
37343: LD_ADDR_VAR 0 9
37347: PUSH
37348: LD_INT 40
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37362: LD_VAR 0 6
37366: PPUSH
37367: CALL_OW 264
37371: PUSH
37372: LD_INT 29
37374: PUSH
37375: EMPTY
37376: LIST
37377: IN
37378: IFFALSE 37399
// points := [ 70 , 200 , 400 ] ;
37380: LD_ADDR_VAR 0 9
37384: PUSH
37385: LD_INT 70
37387: PUSH
37388: LD_INT 200
37390: PUSH
37391: LD_INT 400
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37399: LD_VAR 0 6
37403: PPUSH
37404: CALL_OW 264
37408: PUSH
37409: LD_INT 14
37411: PUSH
37412: LD_INT 53
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: IN
37419: IFFALSE 37440
// points := [ 40 , 10 , 20 ] ;
37421: LD_ADDR_VAR 0 9
37425: PUSH
37426: LD_INT 40
37428: PUSH
37429: LD_INT 10
37431: PUSH
37432: LD_INT 20
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37440: LD_VAR 0 6
37444: PPUSH
37445: CALL_OW 264
37449: PUSH
37450: LD_INT 9
37452: PUSH
37453: EMPTY
37454: LIST
37455: IN
37456: IFFALSE 37477
// points := [ 5 , 70 , 20 ] ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_INT 5
37465: PUSH
37466: LD_INT 70
37468: PUSH
37469: LD_INT 20
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37477: LD_VAR 0 6
37481: PPUSH
37482: CALL_OW 264
37486: PUSH
37487: LD_INT 10
37489: PUSH
37490: EMPTY
37491: LIST
37492: IN
37493: IFFALSE 37514
// points := [ 35 , 110 , 70 ] ;
37495: LD_ADDR_VAR 0 9
37499: PUSH
37500: LD_INT 35
37502: PUSH
37503: LD_INT 110
37505: PUSH
37506: LD_INT 70
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 265
37523: PUSH
37524: LD_INT 25
37526: EQUAL
37527: IFFALSE 37548
// points := [ 80 , 65 , 100 ] ;
37529: LD_ADDR_VAR 0 9
37533: PUSH
37534: LD_INT 80
37536: PUSH
37537: LD_INT 65
37539: PUSH
37540: LD_INT 100
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37548: LD_VAR 0 6
37552: PPUSH
37553: CALL_OW 263
37557: PUSH
37558: LD_INT 1
37560: EQUAL
37561: IFFALSE 37596
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37563: LD_ADDR_VAR 0 10
37567: PUSH
37568: LD_VAR 0 10
37572: PUSH
37573: LD_VAR 0 6
37577: PPUSH
37578: CALL_OW 311
37582: PPUSH
37583: LD_INT 3
37585: PPUSH
37586: CALL_OW 259
37590: PUSH
37591: LD_INT 4
37593: MUL
37594: MUL
37595: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37596: LD_VAR 0 6
37600: PPUSH
37601: CALL_OW 263
37605: PUSH
37606: LD_INT 2
37608: EQUAL
37609: IFFALSE 37660
// begin j := IsControledBy ( i ) ;
37611: LD_ADDR_VAR 0 7
37615: PUSH
37616: LD_VAR 0 6
37620: PPUSH
37621: CALL_OW 312
37625: ST_TO_ADDR
// if j then
37626: LD_VAR 0 7
37630: IFFALSE 37660
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37632: LD_ADDR_VAR 0 10
37636: PUSH
37637: LD_VAR 0 10
37641: PUSH
37642: LD_VAR 0 7
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL_OW 259
37654: PUSH
37655: LD_INT 3
37657: MUL
37658: MUL
37659: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 264
37669: PUSH
37670: LD_INT 5
37672: PUSH
37673: LD_INT 6
37675: PUSH
37676: LD_INT 46
37678: PUSH
37679: LD_INT 44
37681: PUSH
37682: LD_INT 47
37684: PUSH
37685: LD_INT 45
37687: PUSH
37688: LD_INT 28
37690: PUSH
37691: LD_INT 7
37693: PUSH
37694: LD_INT 27
37696: PUSH
37697: LD_INT 29
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: IN
37712: PUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: LD_INT 52
37720: PPUSH
37721: CALL_OW 321
37725: PUSH
37726: LD_INT 2
37728: EQUAL
37729: AND
37730: IFFALSE 37747
// bpoints := bpoints * 1.2 ;
37732: LD_ADDR_VAR 0 10
37736: PUSH
37737: LD_VAR 0 10
37741: PUSH
37742: LD_REAL  1.20000000000000E+0000
37745: MUL
37746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37747: LD_VAR 0 6
37751: PPUSH
37752: CALL_OW 264
37756: PUSH
37757: LD_INT 6
37759: PUSH
37760: LD_INT 46
37762: PUSH
37763: LD_INT 47
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: IN
37771: IFFALSE 37788
// bpoints := bpoints * 1.2 ;
37773: LD_ADDR_VAR 0 10
37777: PUSH
37778: LD_VAR 0 10
37782: PUSH
37783: LD_REAL  1.20000000000000E+0000
37786: MUL
37787: ST_TO_ADDR
// end ; unit_building :
37788: GO 37802
37790: LD_INT 3
37792: DOUBLE
37793: EQUAL
37794: IFTRUE 37798
37796: GO 37801
37798: POP
// ; end ;
37799: GO 37802
37801: POP
// for j = 1 to 3 do
37802: LD_ADDR_VAR 0 7
37806: PUSH
37807: DOUBLE
37808: LD_INT 1
37810: DEC
37811: ST_TO_ADDR
37812: LD_INT 3
37814: PUSH
37815: FOR_TO
37816: IFFALSE 37869
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: LD_VAR 0 5
37827: PPUSH
37828: LD_VAR 0 7
37832: PPUSH
37833: LD_VAR 0 5
37837: PUSH
37838: LD_VAR 0 7
37842: ARRAY
37843: PUSH
37844: LD_VAR 0 9
37848: PUSH
37849: LD_VAR 0 7
37853: ARRAY
37854: PUSH
37855: LD_VAR 0 10
37859: MUL
37860: PLUS
37861: PPUSH
37862: CALL_OW 1
37866: ST_TO_ADDR
37867: GO 37815
37869: POP
37870: POP
// end ;
37871: GO 36348
37873: POP
37874: POP
// result := Replace ( result , 4 , tmp ) ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 5
37884: PPUSH
37885: LD_INT 4
37887: PPUSH
37888: LD_VAR 0 8
37892: PPUSH
37893: CALL_OW 1
37897: ST_TO_ADDR
// end ;
37898: LD_VAR 0 5
37902: RET
// export function DangerAtRange ( unit , range ) ; begin
37903: LD_INT 0
37905: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37906: LD_ADDR_VAR 0 3
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 255
37920: PPUSH
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 250
37930: PPUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 251
37940: PPUSH
37941: LD_VAR 0 2
37945: PPUSH
37946: CALL 36200 0 4
37950: ST_TO_ADDR
// end ;
37951: LD_VAR 0 3
37955: RET
// export function DangerInArea ( side , area ) ; begin
37956: LD_INT 0
37958: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: LD_INT 81
37971: PUSH
37972: LD_VAR 0 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PPUSH
37981: CALL_OW 70
37985: ST_TO_ADDR
// end ;
37986: LD_VAR 0 3
37990: RET
// export function IsExtension ( b ) ; begin
37991: LD_INT 0
37993: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37994: LD_ADDR_VAR 0 2
37998: PUSH
37999: LD_VAR 0 1
38003: PUSH
38004: LD_INT 23
38006: PUSH
38007: LD_INT 20
38009: PUSH
38010: LD_INT 22
38012: PUSH
38013: LD_INT 17
38015: PUSH
38016: LD_INT 24
38018: PUSH
38019: LD_INT 21
38021: PUSH
38022: LD_INT 19
38024: PUSH
38025: LD_INT 16
38027: PUSH
38028: LD_INT 25
38030: PUSH
38031: LD_INT 18
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: IN
38046: ST_TO_ADDR
// end ;
38047: LD_VAR 0 2
38051: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38052: LD_INT 0
38054: PPUSH
38055: PPUSH
38056: PPUSH
// result := [ ] ;
38057: LD_ADDR_VAR 0 4
38061: PUSH
38062: EMPTY
38063: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: LD_VAR 0 2
38073: PPUSH
38074: LD_INT 21
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PPUSH
38084: CALL_OW 70
38088: ST_TO_ADDR
// if not tmp then
38089: LD_VAR 0 5
38093: NOT
38094: IFFALSE 38098
// exit ;
38096: GO 38162
// if checkLink then
38098: LD_VAR 0 3
38102: IFFALSE 38152
// begin for i in tmp do
38104: LD_ADDR_VAR 0 6
38108: PUSH
38109: LD_VAR 0 5
38113: PUSH
38114: FOR_IN
38115: IFFALSE 38150
// if GetBase ( i ) <> base then
38117: LD_VAR 0 6
38121: PPUSH
38122: CALL_OW 274
38126: PUSH
38127: LD_VAR 0 1
38131: NONEQUAL
38132: IFFALSE 38148
// ComLinkToBase ( base , i ) ;
38134: LD_VAR 0 1
38138: PPUSH
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 169
38148: GO 38114
38150: POP
38151: POP
// end ; result := tmp ;
38152: LD_ADDR_VAR 0 4
38156: PUSH
38157: LD_VAR 0 5
38161: ST_TO_ADDR
// end ;
38162: LD_VAR 0 4
38166: RET
// export function ComComplete ( units , b ) ; var i ; begin
38167: LD_INT 0
38169: PPUSH
38170: PPUSH
// if not units then
38171: LD_VAR 0 1
38175: NOT
38176: IFFALSE 38180
// exit ;
38178: GO 38270
// for i in units do
38180: LD_ADDR_VAR 0 4
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: FOR_IN
38191: IFFALSE 38268
// if BuildingStatus ( b ) = bs_build then
38193: LD_VAR 0 2
38197: PPUSH
38198: CALL_OW 461
38202: PUSH
38203: LD_INT 1
38205: EQUAL
38206: IFFALSE 38266
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38208: LD_VAR 0 4
38212: PPUSH
38213: LD_STRING h
38215: PUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: CALL_OW 250
38225: PUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: CALL_OW 251
38235: PUSH
38236: LD_VAR 0 2
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: PPUSH
38262: CALL_OW 446
38266: GO 38190
38268: POP
38269: POP
// end ;
38270: LD_VAR 0 3
38274: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38275: LD_INT 0
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38283: LD_VAR 0 1
38287: NOT
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 263
38298: PUSH
38299: LD_INT 2
38301: NONEQUAL
38302: OR
38303: IFFALSE 38307
// exit ;
38305: GO 38623
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38307: LD_ADDR_VAR 0 6
38311: PUSH
38312: LD_INT 22
38314: PUSH
38315: LD_VAR 0 1
38319: PPUSH
38320: CALL_OW 255
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 30
38334: PUSH
38335: LD_INT 36
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 34
38344: PUSH
38345: LD_INT 31
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PPUSH
38361: CALL_OW 69
38365: ST_TO_ADDR
// if not tmp then
38366: LD_VAR 0 6
38370: NOT
38371: IFFALSE 38375
// exit ;
38373: GO 38623
// result := [ ] ;
38375: LD_ADDR_VAR 0 2
38379: PUSH
38380: EMPTY
38381: ST_TO_ADDR
// for i in tmp do
38382: LD_ADDR_VAR 0 3
38386: PUSH
38387: LD_VAR 0 6
38391: PUSH
38392: FOR_IN
38393: IFFALSE 38464
// begin t := UnitsInside ( i ) ;
38395: LD_ADDR_VAR 0 4
38399: PUSH
38400: LD_VAR 0 3
38404: PPUSH
38405: CALL_OW 313
38409: ST_TO_ADDR
// if t then
38410: LD_VAR 0 4
38414: IFFALSE 38462
// for j in t do
38416: LD_ADDR_VAR 0 7
38420: PUSH
38421: LD_VAR 0 4
38425: PUSH
38426: FOR_IN
38427: IFFALSE 38460
// result := Replace ( result , result + 1 , j ) ;
38429: LD_ADDR_VAR 0 2
38433: PUSH
38434: LD_VAR 0 2
38438: PPUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 1
38446: PLUS
38447: PPUSH
38448: LD_VAR 0 7
38452: PPUSH
38453: CALL_OW 1
38457: ST_TO_ADDR
38458: GO 38426
38460: POP
38461: POP
// end ;
38462: GO 38392
38464: POP
38465: POP
// if not result then
38466: LD_VAR 0 2
38470: NOT
38471: IFFALSE 38475
// exit ;
38473: GO 38623
// mech := result [ 1 ] ;
38475: LD_ADDR_VAR 0 5
38479: PUSH
38480: LD_VAR 0 2
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: ST_TO_ADDR
// if result > 1 then
38489: LD_VAR 0 2
38493: PUSH
38494: LD_INT 1
38496: GREATER
38497: IFFALSE 38609
// begin for i = 2 to result do
38499: LD_ADDR_VAR 0 3
38503: PUSH
38504: DOUBLE
38505: LD_INT 2
38507: DEC
38508: ST_TO_ADDR
38509: LD_VAR 0 2
38513: PUSH
38514: FOR_TO
38515: IFFALSE 38607
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38517: LD_ADDR_VAR 0 4
38521: PUSH
38522: LD_VAR 0 2
38526: PUSH
38527: LD_VAR 0 3
38531: ARRAY
38532: PPUSH
38533: LD_INT 3
38535: PPUSH
38536: CALL_OW 259
38540: PUSH
38541: LD_VAR 0 2
38545: PUSH
38546: LD_VAR 0 3
38550: ARRAY
38551: PPUSH
38552: CALL_OW 432
38556: MINUS
38557: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38558: LD_VAR 0 4
38562: PUSH
38563: LD_VAR 0 5
38567: PPUSH
38568: LD_INT 3
38570: PPUSH
38571: CALL_OW 259
38575: PUSH
38576: LD_VAR 0 5
38580: PPUSH
38581: CALL_OW 432
38585: MINUS
38586: GREATEREQUAL
38587: IFFALSE 38605
// mech := result [ i ] ;
38589: LD_ADDR_VAR 0 5
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_VAR 0 3
38603: ARRAY
38604: ST_TO_ADDR
// end ;
38605: GO 38514
38607: POP
38608: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38609: LD_VAR 0 1
38613: PPUSH
38614: LD_VAR 0 5
38618: PPUSH
38619: CALL_OW 135
// end ;
38623: LD_VAR 0 2
38627: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38628: LD_INT 0
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
// result := [ ] ;
38643: LD_ADDR_VAR 0 7
38647: PUSH
38648: EMPTY
38649: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL_OW 266
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: IN
38670: NOT
38671: IFFALSE 38675
// exit ;
38673: GO 40309
// if name then
38675: LD_VAR 0 3
38679: IFFALSE 38695
// SetBName ( base_dep , name ) ;
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_VAR 0 3
38690: PPUSH
38691: CALL_OW 500
// base := GetBase ( base_dep ) ;
38695: LD_ADDR_VAR 0 15
38699: PUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 274
38709: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38710: LD_ADDR_VAR 0 16
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 255
38724: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38725: LD_ADDR_VAR 0 17
38729: PUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: CALL_OW 248
38739: ST_TO_ADDR
// if sources then
38740: LD_VAR 0 5
38744: IFFALSE 38791
// for i = 1 to 3 do
38746: LD_ADDR_VAR 0 8
38750: PUSH
38751: DOUBLE
38752: LD_INT 1
38754: DEC
38755: ST_TO_ADDR
38756: LD_INT 3
38758: PUSH
38759: FOR_TO
38760: IFFALSE 38789
// AddResourceType ( base , i , sources [ i ] ) ;
38762: LD_VAR 0 15
38766: PPUSH
38767: LD_VAR 0 8
38771: PPUSH
38772: LD_VAR 0 5
38776: PUSH
38777: LD_VAR 0 8
38781: ARRAY
38782: PPUSH
38783: CALL_OW 276
38787: GO 38759
38789: POP
38790: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38791: LD_ADDR_VAR 0 18
38795: PUSH
38796: LD_VAR 0 15
38800: PPUSH
38801: LD_VAR 0 2
38805: PPUSH
38806: LD_INT 1
38808: PPUSH
38809: CALL 38052 0 3
38813: ST_TO_ADDR
// InitHc ;
38814: CALL_OW 19
// InitUc ;
38818: CALL_OW 18
// uc_side := side ;
38822: LD_ADDR_OWVAR 20
38826: PUSH
38827: LD_VAR 0 16
38831: ST_TO_ADDR
// uc_nation := nation ;
38832: LD_ADDR_OWVAR 21
38836: PUSH
38837: LD_VAR 0 17
38841: ST_TO_ADDR
// if buildings then
38842: LD_VAR 0 18
38846: IFFALSE 40168
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38848: LD_ADDR_VAR 0 19
38852: PUSH
38853: LD_VAR 0 18
38857: PPUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 30
38863: PUSH
38864: LD_INT 29
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 30
38873: PUSH
38874: LD_INT 30
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PPUSH
38886: CALL_OW 72
38890: ST_TO_ADDR
// if tmp then
38891: LD_VAR 0 19
38895: IFFALSE 38943
// for i in tmp do
38897: LD_ADDR_VAR 0 8
38901: PUSH
38902: LD_VAR 0 19
38906: PUSH
38907: FOR_IN
38908: IFFALSE 38941
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38910: LD_VAR 0 8
38914: PPUSH
38915: CALL_OW 250
38919: PPUSH
38920: LD_VAR 0 8
38924: PPUSH
38925: CALL_OW 251
38929: PPUSH
38930: LD_VAR 0 16
38934: PPUSH
38935: CALL_OW 441
38939: GO 38907
38941: POP
38942: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38943: LD_VAR 0 18
38947: PPUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 30
38953: PUSH
38954: LD_INT 32
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 30
38963: PUSH
38964: LD_INT 33
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL_OW 72
38980: IFFALSE 39068
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38982: LD_ADDR_VAR 0 8
38986: PUSH
38987: LD_VAR 0 18
38991: PPUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 30
38997: PUSH
38998: LD_INT 32
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 30
39007: PUSH
39008: LD_INT 33
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PPUSH
39020: CALL_OW 72
39024: PUSH
39025: FOR_IN
39026: IFFALSE 39066
// begin if not GetBWeapon ( i ) then
39028: LD_VAR 0 8
39032: PPUSH
39033: CALL_OW 269
39037: NOT
39038: IFFALSE 39064
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39040: LD_VAR 0 8
39044: PPUSH
39045: LD_VAR 0 8
39049: PPUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: CALL 40314 0 2
39059: PPUSH
39060: CALL_OW 431
// end ;
39064: GO 39025
39066: POP
39067: POP
// end ; for i = 1 to personel do
39068: LD_ADDR_VAR 0 8
39072: PUSH
39073: DOUBLE
39074: LD_INT 1
39076: DEC
39077: ST_TO_ADDR
39078: LD_VAR 0 6
39082: PUSH
39083: FOR_TO
39084: IFFALSE 40148
// begin if i > 4 then
39086: LD_VAR 0 8
39090: PUSH
39091: LD_INT 4
39093: GREATER
39094: IFFALSE 39098
// break ;
39096: GO 40148
// case i of 1 :
39098: LD_VAR 0 8
39102: PUSH
39103: LD_INT 1
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39191
39111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39112: LD_ADDR_VAR 0 12
39116: PUSH
39117: LD_VAR 0 18
39121: PPUSH
39122: LD_INT 22
39124: PUSH
39125: LD_VAR 0 16
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 58
39136: PUSH
39137: EMPTY
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 30
39145: PUSH
39146: LD_INT 32
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 30
39155: PUSH
39156: LD_INT 4
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 30
39165: PUSH
39166: LD_INT 5
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PPUSH
39184: CALL_OW 72
39188: ST_TO_ADDR
39189: GO 39413
39191: LD_INT 2
39193: DOUBLE
39194: EQUAL
39195: IFTRUE 39199
39197: GO 39261
39199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39200: LD_ADDR_VAR 0 12
39204: PUSH
39205: LD_VAR 0 18
39209: PPUSH
39210: LD_INT 22
39212: PUSH
39213: LD_VAR 0 16
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 30
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PPUSH
39254: CALL_OW 72
39258: ST_TO_ADDR
39259: GO 39413
39261: LD_INT 3
39263: DOUBLE
39264: EQUAL
39265: IFTRUE 39269
39267: GO 39331
39269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39270: LD_ADDR_VAR 0 12
39274: PUSH
39275: LD_VAR 0 18
39279: PPUSH
39280: LD_INT 22
39282: PUSH
39283: LD_VAR 0 16
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 30
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 30
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PPUSH
39324: CALL_OW 72
39328: ST_TO_ADDR
39329: GO 39413
39331: LD_INT 4
39333: DOUBLE
39334: EQUAL
39335: IFTRUE 39339
39337: GO 39412
39339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39340: LD_ADDR_VAR 0 12
39344: PUSH
39345: LD_VAR 0 18
39349: PPUSH
39350: LD_INT 22
39352: PUSH
39353: LD_VAR 0 16
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 30
39367: PUSH
39368: LD_INT 6
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 30
39377: PUSH
39378: LD_INT 7
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 30
39387: PUSH
39388: LD_INT 8
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PPUSH
39405: CALL_OW 72
39409: ST_TO_ADDR
39410: GO 39413
39412: POP
// if i = 1 then
39413: LD_VAR 0 8
39417: PUSH
39418: LD_INT 1
39420: EQUAL
39421: IFFALSE 39532
// begin tmp := [ ] ;
39423: LD_ADDR_VAR 0 19
39427: PUSH
39428: EMPTY
39429: ST_TO_ADDR
// for j in f do
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_VAR 0 12
39439: PUSH
39440: FOR_IN
39441: IFFALSE 39514
// if GetBType ( j ) = b_bunker then
39443: LD_VAR 0 9
39447: PPUSH
39448: CALL_OW 266
39452: PUSH
39453: LD_INT 32
39455: EQUAL
39456: IFFALSE 39483
// tmp := Insert ( tmp , 1 , j ) else
39458: LD_ADDR_VAR 0 19
39462: PUSH
39463: LD_VAR 0 19
39467: PPUSH
39468: LD_INT 1
39470: PPUSH
39471: LD_VAR 0 9
39475: PPUSH
39476: CALL_OW 2
39480: ST_TO_ADDR
39481: GO 39512
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39483: LD_ADDR_VAR 0 19
39487: PUSH
39488: LD_VAR 0 19
39492: PPUSH
39493: LD_VAR 0 19
39497: PUSH
39498: LD_INT 1
39500: PLUS
39501: PPUSH
39502: LD_VAR 0 9
39506: PPUSH
39507: CALL_OW 2
39511: ST_TO_ADDR
39512: GO 39440
39514: POP
39515: POP
// if tmp then
39516: LD_VAR 0 19
39520: IFFALSE 39532
// f := tmp ;
39522: LD_ADDR_VAR 0 12
39526: PUSH
39527: LD_VAR 0 19
39531: ST_TO_ADDR
// end ; x := personel [ i ] ;
39532: LD_ADDR_VAR 0 13
39536: PUSH
39537: LD_VAR 0 6
39541: PUSH
39542: LD_VAR 0 8
39546: ARRAY
39547: ST_TO_ADDR
// if x = - 1 then
39548: LD_VAR 0 13
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: EQUAL
39557: IFFALSE 39766
// begin for j in f do
39559: LD_ADDR_VAR 0 9
39563: PUSH
39564: LD_VAR 0 12
39568: PUSH
39569: FOR_IN
39570: IFFALSE 39762
// repeat InitHc ;
39572: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39576: LD_VAR 0 9
39580: PPUSH
39581: CALL_OW 266
39585: PUSH
39586: LD_INT 5
39588: EQUAL
39589: IFFALSE 39659
// begin if UnitsInside ( j ) < 3 then
39591: LD_VAR 0 9
39595: PPUSH
39596: CALL_OW 313
39600: PUSH
39601: LD_INT 3
39603: LESS
39604: IFFALSE 39640
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39606: LD_INT 0
39608: PPUSH
39609: LD_INT 5
39611: PUSH
39612: LD_INT 8
39614: PUSH
39615: LD_INT 9
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: PUSH
39623: LD_VAR 0 17
39627: ARRAY
39628: PPUSH
39629: LD_VAR 0 4
39633: PPUSH
39634: CALL_OW 380
39638: GO 39657
// PrepareHuman ( false , i , skill ) ;
39640: LD_INT 0
39642: PPUSH
39643: LD_VAR 0 8
39647: PPUSH
39648: LD_VAR 0 4
39652: PPUSH
39653: CALL_OW 380
// end else
39657: GO 39676
// PrepareHuman ( false , i , skill ) ;
39659: LD_INT 0
39661: PPUSH
39662: LD_VAR 0 8
39666: PPUSH
39667: LD_VAR 0 4
39671: PPUSH
39672: CALL_OW 380
// un := CreateHuman ;
39676: LD_ADDR_VAR 0 14
39680: PUSH
39681: CALL_OW 44
39685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39686: LD_ADDR_VAR 0 7
39690: PUSH
39691: LD_VAR 0 7
39695: PPUSH
39696: LD_INT 1
39698: PPUSH
39699: LD_VAR 0 14
39703: PPUSH
39704: CALL_OW 2
39708: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39709: LD_VAR 0 14
39713: PPUSH
39714: LD_VAR 0 9
39718: PPUSH
39719: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39723: LD_VAR 0 9
39727: PPUSH
39728: CALL_OW 313
39732: PUSH
39733: LD_INT 6
39735: EQUAL
39736: PUSH
39737: LD_VAR 0 9
39741: PPUSH
39742: CALL_OW 266
39746: PUSH
39747: LD_INT 32
39749: PUSH
39750: LD_INT 31
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: IN
39757: OR
39758: IFFALSE 39572
39760: GO 39569
39762: POP
39763: POP
// end else
39764: GO 40146
// for j = 1 to x do
39766: LD_ADDR_VAR 0 9
39770: PUSH
39771: DOUBLE
39772: LD_INT 1
39774: DEC
39775: ST_TO_ADDR
39776: LD_VAR 0 13
39780: PUSH
39781: FOR_TO
39782: IFFALSE 40144
// begin InitHc ;
39784: CALL_OW 19
// if not f then
39788: LD_VAR 0 12
39792: NOT
39793: IFFALSE 39882
// begin PrepareHuman ( false , i , skill ) ;
39795: LD_INT 0
39797: PPUSH
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 4
39807: PPUSH
39808: CALL_OW 380
// un := CreateHuman ;
39812: LD_ADDR_VAR 0 14
39816: PUSH
39817: CALL_OW 44
39821: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39822: LD_ADDR_VAR 0 7
39826: PUSH
39827: LD_VAR 0 7
39831: PPUSH
39832: LD_INT 1
39834: PPUSH
39835: LD_VAR 0 14
39839: PPUSH
39840: CALL_OW 2
39844: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39845: LD_VAR 0 14
39849: PPUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 250
39859: PPUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: CALL_OW 251
39869: PPUSH
39870: LD_INT 10
39872: PPUSH
39873: LD_INT 0
39875: PPUSH
39876: CALL_OW 50
// continue ;
39880: GO 39781
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39882: LD_VAR 0 12
39886: PUSH
39887: LD_INT 1
39889: ARRAY
39890: PPUSH
39891: CALL_OW 313
39895: PUSH
39896: LD_VAR 0 12
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PPUSH
39905: CALL_OW 266
39909: PUSH
39910: LD_INT 32
39912: PUSH
39913: LD_INT 31
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: IN
39920: AND
39921: PUSH
39922: LD_VAR 0 12
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: PPUSH
39931: CALL_OW 313
39935: PUSH
39936: LD_INT 6
39938: EQUAL
39939: OR
39940: IFFALSE 39960
// f := Delete ( f , 1 ) ;
39942: LD_ADDR_VAR 0 12
39946: PUSH
39947: LD_VAR 0 12
39951: PPUSH
39952: LD_INT 1
39954: PPUSH
39955: CALL_OW 3
39959: ST_TO_ADDR
// if not f then
39960: LD_VAR 0 12
39964: NOT
39965: IFFALSE 39983
// begin x := x + 2 ;
39967: LD_ADDR_VAR 0 13
39971: PUSH
39972: LD_VAR 0 13
39976: PUSH
39977: LD_INT 2
39979: PLUS
39980: ST_TO_ADDR
// continue ;
39981: GO 39781
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39983: LD_VAR 0 12
39987: PUSH
39988: LD_INT 1
39990: ARRAY
39991: PPUSH
39992: CALL_OW 266
39996: PUSH
39997: LD_INT 5
39999: EQUAL
40000: IFFALSE 40074
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40002: LD_VAR 0 12
40006: PUSH
40007: LD_INT 1
40009: ARRAY
40010: PPUSH
40011: CALL_OW 313
40015: PUSH
40016: LD_INT 3
40018: LESS
40019: IFFALSE 40055
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40021: LD_INT 0
40023: PPUSH
40024: LD_INT 5
40026: PUSH
40027: LD_INT 8
40029: PUSH
40030: LD_INT 9
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: PUSH
40038: LD_VAR 0 17
40042: ARRAY
40043: PPUSH
40044: LD_VAR 0 4
40048: PPUSH
40049: CALL_OW 380
40053: GO 40072
// PrepareHuman ( false , i , skill ) ;
40055: LD_INT 0
40057: PPUSH
40058: LD_VAR 0 8
40062: PPUSH
40063: LD_VAR 0 4
40067: PPUSH
40068: CALL_OW 380
// end else
40072: GO 40091
// PrepareHuman ( false , i , skill ) ;
40074: LD_INT 0
40076: PPUSH
40077: LD_VAR 0 8
40081: PPUSH
40082: LD_VAR 0 4
40086: PPUSH
40087: CALL_OW 380
// un := CreateHuman ;
40091: LD_ADDR_VAR 0 14
40095: PUSH
40096: CALL_OW 44
40100: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40101: LD_ADDR_VAR 0 7
40105: PUSH
40106: LD_VAR 0 7
40110: PPUSH
40111: LD_INT 1
40113: PPUSH
40114: LD_VAR 0 14
40118: PPUSH
40119: CALL_OW 2
40123: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40124: LD_VAR 0 14
40128: PPUSH
40129: LD_VAR 0 12
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PPUSH
40138: CALL_OW 52
// end ;
40142: GO 39781
40144: POP
40145: POP
// end ;
40146: GO 39083
40148: POP
40149: POP
// result := result ^ buildings ;
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: LD_VAR 0 7
40159: PUSH
40160: LD_VAR 0 18
40164: ADD
40165: ST_TO_ADDR
// end else
40166: GO 40309
// begin for i = 1 to personel do
40168: LD_ADDR_VAR 0 8
40172: PUSH
40173: DOUBLE
40174: LD_INT 1
40176: DEC
40177: ST_TO_ADDR
40178: LD_VAR 0 6
40182: PUSH
40183: FOR_TO
40184: IFFALSE 40307
// begin if i > 4 then
40186: LD_VAR 0 8
40190: PUSH
40191: LD_INT 4
40193: GREATER
40194: IFFALSE 40198
// break ;
40196: GO 40307
// x := personel [ i ] ;
40198: LD_ADDR_VAR 0 13
40202: PUSH
40203: LD_VAR 0 6
40207: PUSH
40208: LD_VAR 0 8
40212: ARRAY
40213: ST_TO_ADDR
// if x = - 1 then
40214: LD_VAR 0 13
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: EQUAL
40223: IFFALSE 40227
// continue ;
40225: GO 40183
// PrepareHuman ( false , i , skill ) ;
40227: LD_INT 0
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: LD_VAR 0 4
40239: PPUSH
40240: CALL_OW 380
// un := CreateHuman ;
40244: LD_ADDR_VAR 0 14
40248: PUSH
40249: CALL_OW 44
40253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40254: LD_VAR 0 14
40258: PPUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 250
40268: PPUSH
40269: LD_VAR 0 1
40273: PPUSH
40274: CALL_OW 251
40278: PPUSH
40279: LD_INT 10
40281: PPUSH
40282: LD_INT 0
40284: PPUSH
40285: CALL_OW 50
// result := result ^ un ;
40289: LD_ADDR_VAR 0 7
40293: PUSH
40294: LD_VAR 0 7
40298: PUSH
40299: LD_VAR 0 14
40303: ADD
40304: ST_TO_ADDR
// end ;
40305: GO 40183
40307: POP
40308: POP
// end ; end ;
40309: LD_VAR 0 7
40313: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
// result := false ;
40332: LD_ADDR_VAR 0 3
40336: PUSH
40337: LD_INT 0
40339: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40340: LD_VAR 0 1
40344: NOT
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 266
40355: PUSH
40356: LD_INT 32
40358: PUSH
40359: LD_INT 33
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: IN
40366: NOT
40367: OR
40368: IFFALSE 40372
// exit ;
40370: GO 41481
// nat := GetNation ( tower ) ;
40372: LD_ADDR_VAR 0 12
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: CALL_OW 248
40386: ST_TO_ADDR
// side := GetSide ( tower ) ;
40387: LD_ADDR_VAR 0 16
40391: PUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 255
40401: ST_TO_ADDR
// x := GetX ( tower ) ;
40402: LD_ADDR_VAR 0 10
40406: PUSH
40407: LD_VAR 0 1
40411: PPUSH
40412: CALL_OW 250
40416: ST_TO_ADDR
// y := GetY ( tower ) ;
40417: LD_ADDR_VAR 0 11
40421: PUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 251
40431: ST_TO_ADDR
// if not x or not y then
40432: LD_VAR 0 10
40436: NOT
40437: PUSH
40438: LD_VAR 0 11
40442: NOT
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 41481
// weapon := 0 ;
40448: LD_ADDR_VAR 0 18
40452: PUSH
40453: LD_INT 0
40455: ST_TO_ADDR
// fac_list := [ ] ;
40456: LD_ADDR_VAR 0 17
40460: PUSH
40461: EMPTY
40462: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40463: LD_ADDR_VAR 0 6
40467: PUSH
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 274
40477: PPUSH
40478: LD_VAR 0 2
40482: PPUSH
40483: LD_INT 0
40485: PPUSH
40486: CALL 38052 0 3
40490: PPUSH
40491: LD_INT 30
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PPUSH
40501: CALL_OW 72
40505: ST_TO_ADDR
// if not factories then
40506: LD_VAR 0 6
40510: NOT
40511: IFFALSE 40515
// exit ;
40513: GO 41481
// for i in factories do
40515: LD_ADDR_VAR 0 8
40519: PUSH
40520: LD_VAR 0 6
40524: PUSH
40525: FOR_IN
40526: IFFALSE 40551
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40528: LD_ADDR_VAR 0 17
40532: PUSH
40533: LD_VAR 0 17
40537: PUSH
40538: LD_VAR 0 8
40542: PPUSH
40543: CALL_OW 478
40547: UNION
40548: ST_TO_ADDR
40549: GO 40525
40551: POP
40552: POP
// if not fac_list then
40553: LD_VAR 0 17
40557: NOT
40558: IFFALSE 40562
// exit ;
40560: GO 41481
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40562: LD_ADDR_VAR 0 5
40566: PUSH
40567: LD_INT 4
40569: PUSH
40570: LD_INT 5
40572: PUSH
40573: LD_INT 9
40575: PUSH
40576: LD_INT 10
40578: PUSH
40579: LD_INT 6
40581: PUSH
40582: LD_INT 7
40584: PUSH
40585: LD_INT 11
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 27
40599: PUSH
40600: LD_INT 28
40602: PUSH
40603: LD_INT 26
40605: PUSH
40606: LD_INT 30
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 43
40617: PUSH
40618: LD_INT 44
40620: PUSH
40621: LD_INT 46
40623: PUSH
40624: LD_INT 45
40626: PUSH
40627: LD_INT 47
40629: PUSH
40630: LD_INT 49
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: PUSH
40646: LD_VAR 0 12
40650: ARRAY
40651: ST_TO_ADDR
// list := list isect fac_list ;
40652: LD_ADDR_VAR 0 5
40656: PUSH
40657: LD_VAR 0 5
40661: PUSH
40662: LD_VAR 0 17
40666: ISECT
40667: ST_TO_ADDR
// if not list then
40668: LD_VAR 0 5
40672: NOT
40673: IFFALSE 40677
// exit ;
40675: GO 41481
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40677: LD_VAR 0 12
40681: PUSH
40682: LD_INT 3
40684: EQUAL
40685: PUSH
40686: LD_INT 49
40688: PUSH
40689: LD_VAR 0 5
40693: IN
40694: AND
40695: PUSH
40696: LD_INT 31
40698: PPUSH
40699: LD_VAR 0 16
40703: PPUSH
40704: CALL_OW 321
40708: PUSH
40709: LD_INT 2
40711: EQUAL
40712: AND
40713: IFFALSE 40773
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40715: LD_INT 22
40717: PUSH
40718: LD_VAR 0 16
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 35
40729: PUSH
40730: LD_INT 49
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 91
40739: PUSH
40740: LD_VAR 0 1
40744: PUSH
40745: LD_INT 10
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: PPUSH
40758: CALL_OW 69
40762: NOT
40763: IFFALSE 40773
// weapon := ru_time_lapser ;
40765: LD_ADDR_VAR 0 18
40769: PUSH
40770: LD_INT 49
40772: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40773: LD_VAR 0 12
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: IN
40788: PUSH
40789: LD_INT 11
40791: PUSH
40792: LD_VAR 0 5
40796: IN
40797: PUSH
40798: LD_INT 30
40800: PUSH
40801: LD_VAR 0 5
40805: IN
40806: OR
40807: AND
40808: PUSH
40809: LD_INT 6
40811: PPUSH
40812: LD_VAR 0 16
40816: PPUSH
40817: CALL_OW 321
40821: PUSH
40822: LD_INT 2
40824: EQUAL
40825: AND
40826: IFFALSE 40991
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40828: LD_INT 22
40830: PUSH
40831: LD_VAR 0 16
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 35
40845: PUSH
40846: LD_INT 11
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 35
40855: PUSH
40856: LD_INT 30
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 91
40870: PUSH
40871: LD_VAR 0 1
40875: PUSH
40876: LD_INT 18
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: PPUSH
40889: CALL_OW 69
40893: NOT
40894: PUSH
40895: LD_INT 22
40897: PUSH
40898: LD_VAR 0 16
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 30
40912: PUSH
40913: LD_INT 32
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 30
40922: PUSH
40923: LD_INT 33
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 91
40937: PUSH
40938: LD_VAR 0 1
40942: PUSH
40943: LD_INT 12
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: PPUSH
40959: CALL_OW 69
40963: PUSH
40964: LD_INT 2
40966: GREATER
40967: AND
40968: IFFALSE 40991
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40970: LD_ADDR_VAR 0 18
40974: PUSH
40975: LD_INT 11
40977: PUSH
40978: LD_INT 30
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_VAR 0 12
40989: ARRAY
40990: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40991: LD_VAR 0 18
40995: NOT
40996: PUSH
40997: LD_INT 40
40999: PPUSH
41000: LD_VAR 0 16
41004: PPUSH
41005: CALL_OW 321
41009: PUSH
41010: LD_INT 2
41012: EQUAL
41013: AND
41014: PUSH
41015: LD_INT 7
41017: PUSH
41018: LD_VAR 0 5
41022: IN
41023: PUSH
41024: LD_INT 28
41026: PUSH
41027: LD_VAR 0 5
41031: IN
41032: OR
41033: PUSH
41034: LD_INT 45
41036: PUSH
41037: LD_VAR 0 5
41041: IN
41042: OR
41043: AND
41044: IFFALSE 41298
// begin hex := GetHexInfo ( x , y ) ;
41046: LD_ADDR_VAR 0 4
41050: PUSH
41051: LD_VAR 0 10
41055: PPUSH
41056: LD_VAR 0 11
41060: PPUSH
41061: CALL_OW 546
41065: ST_TO_ADDR
// if hex [ 1 ] then
41066: LD_VAR 0 4
41070: PUSH
41071: LD_INT 1
41073: ARRAY
41074: IFFALSE 41078
// exit ;
41076: GO 41481
// height := hex [ 2 ] ;
41078: LD_ADDR_VAR 0 15
41082: PUSH
41083: LD_VAR 0 4
41087: PUSH
41088: LD_INT 2
41090: ARRAY
41091: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41092: LD_ADDR_VAR 0 14
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// for i in tmp do
41115: LD_ADDR_VAR 0 8
41119: PUSH
41120: LD_VAR 0 14
41124: PUSH
41125: FOR_IN
41126: IFFALSE 41296
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41128: LD_ADDR_VAR 0 9
41132: PUSH
41133: LD_VAR 0 10
41137: PPUSH
41138: LD_VAR 0 8
41142: PPUSH
41143: LD_INT 5
41145: PPUSH
41146: CALL_OW 272
41150: PUSH
41151: LD_VAR 0 11
41155: PPUSH
41156: LD_VAR 0 8
41160: PPUSH
41161: LD_INT 5
41163: PPUSH
41164: CALL_OW 273
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41173: LD_VAR 0 9
41177: PUSH
41178: LD_INT 1
41180: ARRAY
41181: PPUSH
41182: LD_VAR 0 9
41186: PUSH
41187: LD_INT 2
41189: ARRAY
41190: PPUSH
41191: CALL_OW 488
41195: IFFALSE 41294
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41197: LD_ADDR_VAR 0 4
41201: PUSH
41202: LD_VAR 0 9
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: PPUSH
41211: LD_VAR 0 9
41215: PUSH
41216: LD_INT 2
41218: ARRAY
41219: PPUSH
41220: CALL_OW 546
41224: ST_TO_ADDR
// if hex [ 1 ] then
41225: LD_VAR 0 4
41229: PUSH
41230: LD_INT 1
41232: ARRAY
41233: IFFALSE 41237
// continue ;
41235: GO 41125
// h := hex [ 2 ] ;
41237: LD_ADDR_VAR 0 13
41241: PUSH
41242: LD_VAR 0 4
41246: PUSH
41247: LD_INT 2
41249: ARRAY
41250: ST_TO_ADDR
// if h + 7 < height then
41251: LD_VAR 0 13
41255: PUSH
41256: LD_INT 7
41258: PLUS
41259: PUSH
41260: LD_VAR 0 15
41264: LESS
41265: IFFALSE 41294
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41267: LD_ADDR_VAR 0 18
41271: PUSH
41272: LD_INT 7
41274: PUSH
41275: LD_INT 28
41277: PUSH
41278: LD_INT 45
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: PUSH
41286: LD_VAR 0 12
41290: ARRAY
41291: ST_TO_ADDR
// break ;
41292: GO 41296
// end ; end ; end ;
41294: GO 41125
41296: POP
41297: POP
// end ; if not weapon then
41298: LD_VAR 0 18
41302: NOT
41303: IFFALSE 41363
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41305: LD_ADDR_VAR 0 5
41309: PUSH
41310: LD_VAR 0 5
41314: PUSH
41315: LD_INT 11
41317: PUSH
41318: LD_INT 30
41320: PUSH
41321: LD_INT 49
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: DIFF
41329: ST_TO_ADDR
// if not list then
41330: LD_VAR 0 5
41334: NOT
41335: IFFALSE 41339
// exit ;
41337: GO 41481
// weapon := list [ rand ( 1 , list ) ] ;
41339: LD_ADDR_VAR 0 18
41343: PUSH
41344: LD_VAR 0 5
41348: PUSH
41349: LD_INT 1
41351: PPUSH
41352: LD_VAR 0 5
41356: PPUSH
41357: CALL_OW 12
41361: ARRAY
41362: ST_TO_ADDR
// end ; if weapon then
41363: LD_VAR 0 18
41367: IFFALSE 41481
// begin tmp := CostOfWeapon ( weapon ) ;
41369: LD_ADDR_VAR 0 14
41373: PUSH
41374: LD_VAR 0 18
41378: PPUSH
41379: CALL_OW 451
41383: ST_TO_ADDR
// j := GetBase ( tower ) ;
41384: LD_ADDR_VAR 0 9
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 274
41398: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41399: LD_VAR 0 9
41403: PPUSH
41404: LD_INT 1
41406: PPUSH
41407: CALL_OW 275
41411: PUSH
41412: LD_VAR 0 14
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: GREATEREQUAL
41421: PUSH
41422: LD_VAR 0 9
41426: PPUSH
41427: LD_INT 2
41429: PPUSH
41430: CALL_OW 275
41434: PUSH
41435: LD_VAR 0 14
41439: PUSH
41440: LD_INT 2
41442: ARRAY
41443: GREATEREQUAL
41444: AND
41445: PUSH
41446: LD_VAR 0 9
41450: PPUSH
41451: LD_INT 3
41453: PPUSH
41454: CALL_OW 275
41458: PUSH
41459: LD_VAR 0 14
41463: PUSH
41464: LD_INT 3
41466: ARRAY
41467: GREATEREQUAL
41468: AND
41469: IFFALSE 41481
// result := weapon ;
41471: LD_ADDR_VAR 0 3
41475: PUSH
41476: LD_VAR 0 18
41480: ST_TO_ADDR
// end ; end ;
41481: LD_VAR 0 3
41485: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41486: LD_INT 0
41488: PPUSH
41489: PPUSH
// result := true ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_INT 1
41497: ST_TO_ADDR
// if array1 = array2 then
41498: LD_VAR 0 1
41502: PUSH
41503: LD_VAR 0 2
41507: EQUAL
41508: IFFALSE 41568
// begin for i = 1 to array1 do
41510: LD_ADDR_VAR 0 4
41514: PUSH
41515: DOUBLE
41516: LD_INT 1
41518: DEC
41519: ST_TO_ADDR
41520: LD_VAR 0 1
41524: PUSH
41525: FOR_TO
41526: IFFALSE 41564
// if array1 [ i ] <> array2 [ i ] then
41528: LD_VAR 0 1
41532: PUSH
41533: LD_VAR 0 4
41537: ARRAY
41538: PUSH
41539: LD_VAR 0 2
41543: PUSH
41544: LD_VAR 0 4
41548: ARRAY
41549: NONEQUAL
41550: IFFALSE 41562
// begin result := false ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_INT 0
41559: ST_TO_ADDR
// break ;
41560: GO 41564
// end ;
41562: GO 41525
41564: POP
41565: POP
// end else
41566: GO 41576
// result := false ;
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_INT 0
41575: ST_TO_ADDR
// end ;
41576: LD_VAR 0 3
41580: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
// if not array1 or not array2 then
41585: LD_VAR 0 1
41589: NOT
41590: PUSH
41591: LD_VAR 0 2
41595: NOT
41596: OR
41597: IFFALSE 41601
// exit ;
41599: GO 41665
// result := true ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_INT 1
41608: ST_TO_ADDR
// for i = 1 to array1 do
41609: LD_ADDR_VAR 0 4
41613: PUSH
41614: DOUBLE
41615: LD_INT 1
41617: DEC
41618: ST_TO_ADDR
41619: LD_VAR 0 1
41623: PUSH
41624: FOR_TO
41625: IFFALSE 41663
// if array1 [ i ] <> array2 [ i ] then
41627: LD_VAR 0 1
41631: PUSH
41632: LD_VAR 0 4
41636: ARRAY
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: LD_VAR 0 4
41647: ARRAY
41648: NONEQUAL
41649: IFFALSE 41661
// begin result := false ;
41651: LD_ADDR_VAR 0 3
41655: PUSH
41656: LD_INT 0
41658: ST_TO_ADDR
// break ;
41659: GO 41663
// end ;
41661: GO 41624
41663: POP
41664: POP
// end ;
41665: LD_VAR 0 3
41669: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41670: LD_INT 0
41672: PPUSH
41673: PPUSH
41674: PPUSH
// pom := GetBase ( fac ) ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_VAR 0 1
41684: PPUSH
41685: CALL_OW 274
41689: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41690: LD_ADDR_VAR 0 4
41694: PUSH
41695: LD_VAR 0 2
41699: PUSH
41700: LD_INT 1
41702: ARRAY
41703: PPUSH
41704: LD_VAR 0 2
41708: PUSH
41709: LD_INT 2
41711: ARRAY
41712: PPUSH
41713: LD_VAR 0 2
41717: PUSH
41718: LD_INT 3
41720: ARRAY
41721: PPUSH
41722: LD_VAR 0 2
41726: PUSH
41727: LD_INT 4
41729: ARRAY
41730: PPUSH
41731: CALL_OW 449
41735: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_VAR 0 5
41745: PPUSH
41746: LD_INT 1
41748: PPUSH
41749: CALL_OW 275
41753: PUSH
41754: LD_VAR 0 4
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: GREATEREQUAL
41763: PUSH
41764: LD_VAR 0 5
41768: PPUSH
41769: LD_INT 2
41771: PPUSH
41772: CALL_OW 275
41776: PUSH
41777: LD_VAR 0 4
41781: PUSH
41782: LD_INT 2
41784: ARRAY
41785: GREATEREQUAL
41786: AND
41787: PUSH
41788: LD_VAR 0 5
41792: PPUSH
41793: LD_INT 3
41795: PPUSH
41796: CALL_OW 275
41800: PUSH
41801: LD_VAR 0 4
41805: PUSH
41806: LD_INT 3
41808: ARRAY
41809: GREATEREQUAL
41810: AND
41811: ST_TO_ADDR
// end ;
41812: LD_VAR 0 3
41816: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41817: LD_INT 0
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
// pom := GetBase ( building ) ;
41823: LD_ADDR_VAR 0 3
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 274
41837: ST_TO_ADDR
// if not pom then
41838: LD_VAR 0 3
41842: NOT
41843: IFFALSE 41847
// exit ;
41845: GO 42017
// btype := GetBType ( building ) ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 1
41856: PPUSH
41857: CALL_OW 266
41861: ST_TO_ADDR
// if btype = b_armoury then
41862: LD_VAR 0 5
41866: PUSH
41867: LD_INT 4
41869: EQUAL
41870: IFFALSE 41880
// btype := b_barracks ;
41872: LD_ADDR_VAR 0 5
41876: PUSH
41877: LD_INT 5
41879: ST_TO_ADDR
// if btype = b_depot then
41880: LD_VAR 0 5
41884: PUSH
41885: LD_INT 0
41887: EQUAL
41888: IFFALSE 41898
// btype := b_warehouse ;
41890: LD_ADDR_VAR 0 5
41894: PUSH
41895: LD_INT 1
41897: ST_TO_ADDR
// if btype = b_workshop then
41898: LD_VAR 0 5
41902: PUSH
41903: LD_INT 2
41905: EQUAL
41906: IFFALSE 41916
// btype := b_factory ;
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: LD_INT 3
41915: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41916: LD_ADDR_VAR 0 4
41920: PUSH
41921: LD_VAR 0 5
41925: PPUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 248
41935: PPUSH
41936: CALL_OW 450
41940: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41941: LD_ADDR_VAR 0 2
41945: PUSH
41946: LD_VAR 0 3
41950: PPUSH
41951: LD_INT 1
41953: PPUSH
41954: CALL_OW 275
41958: PUSH
41959: LD_VAR 0 4
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: GREATEREQUAL
41968: PUSH
41969: LD_VAR 0 3
41973: PPUSH
41974: LD_INT 2
41976: PPUSH
41977: CALL_OW 275
41981: PUSH
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: GREATEREQUAL
41991: AND
41992: PUSH
41993: LD_VAR 0 3
41997: PPUSH
41998: LD_INT 3
42000: PPUSH
42001: CALL_OW 275
42005: PUSH
42006: LD_VAR 0 4
42010: PUSH
42011: LD_INT 3
42013: ARRAY
42014: GREATEREQUAL
42015: AND
42016: ST_TO_ADDR
// end ;
42017: LD_VAR 0 2
42021: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42022: LD_INT 0
42024: PPUSH
42025: PPUSH
42026: PPUSH
// pom := GetBase ( building ) ;
42027: LD_ADDR_VAR 0 4
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 274
42041: ST_TO_ADDR
// if not pom then
42042: LD_VAR 0 4
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42152
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42051: LD_ADDR_VAR 0 5
42055: PUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 248
42070: PPUSH
42071: CALL_OW 450
42075: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_VAR 0 4
42085: PPUSH
42086: LD_INT 1
42088: PPUSH
42089: CALL_OW 275
42093: PUSH
42094: LD_VAR 0 5
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: GREATEREQUAL
42103: PUSH
42104: LD_VAR 0 4
42108: PPUSH
42109: LD_INT 2
42111: PPUSH
42112: CALL_OW 275
42116: PUSH
42117: LD_VAR 0 5
42121: PUSH
42122: LD_INT 2
42124: ARRAY
42125: GREATEREQUAL
42126: AND
42127: PUSH
42128: LD_VAR 0 4
42132: PPUSH
42133: LD_INT 3
42135: PPUSH
42136: CALL_OW 275
42140: PUSH
42141: LD_VAR 0 5
42145: PUSH
42146: LD_INT 3
42148: ARRAY
42149: GREATEREQUAL
42150: AND
42151: ST_TO_ADDR
// end ;
42152: LD_VAR 0 3
42156: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
42169: PPUSH
// result := false ;
42170: LD_ADDR_VAR 0 8
42174: PUSH
42175: LD_INT 0
42177: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42178: LD_VAR 0 5
42182: NOT
42183: PUSH
42184: LD_VAR 0 1
42188: NOT
42189: OR
42190: PUSH
42191: LD_VAR 0 2
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 3
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 43022
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42208: LD_ADDR_VAR 0 14
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: LD_VAR 0 2
42222: PPUSH
42223: LD_VAR 0 3
42227: PPUSH
42228: LD_VAR 0 4
42232: PPUSH
42233: LD_VAR 0 5
42237: PUSH
42238: LD_INT 1
42240: ARRAY
42241: PPUSH
42242: CALL_OW 248
42246: PPUSH
42247: LD_INT 0
42249: PPUSH
42250: CALL 44259 0 6
42254: ST_TO_ADDR
// if not hexes then
42255: LD_VAR 0 14
42259: NOT
42260: IFFALSE 42264
// exit ;
42262: GO 43022
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42264: LD_ADDR_VAR 0 17
42268: PUSH
42269: LD_VAR 0 5
42273: PPUSH
42274: LD_INT 22
42276: PUSH
42277: LD_VAR 0 13
42281: PPUSH
42282: CALL_OW 255
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 30
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 30
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PPUSH
42323: CALL_OW 72
42327: ST_TO_ADDR
// for i = 1 to hexes do
42328: LD_ADDR_VAR 0 9
42332: PUSH
42333: DOUBLE
42334: LD_INT 1
42336: DEC
42337: ST_TO_ADDR
42338: LD_VAR 0 14
42342: PUSH
42343: FOR_TO
42344: IFFALSE 43020
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42346: LD_ADDR_VAR 0 13
42350: PUSH
42351: LD_VAR 0 14
42355: PUSH
42356: LD_VAR 0 9
42360: ARRAY
42361: PUSH
42362: LD_INT 1
42364: ARRAY
42365: PPUSH
42366: LD_VAR 0 14
42370: PUSH
42371: LD_VAR 0 9
42375: ARRAY
42376: PUSH
42377: LD_INT 2
42379: ARRAY
42380: PPUSH
42381: CALL_OW 428
42385: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42386: LD_VAR 0 14
42390: PUSH
42391: LD_VAR 0 9
42395: ARRAY
42396: PUSH
42397: LD_INT 1
42399: ARRAY
42400: PPUSH
42401: LD_VAR 0 14
42405: PUSH
42406: LD_VAR 0 9
42410: ARRAY
42411: PUSH
42412: LD_INT 2
42414: ARRAY
42415: PPUSH
42416: CALL_OW 351
42420: PUSH
42421: LD_VAR 0 14
42425: PUSH
42426: LD_VAR 0 9
42430: ARRAY
42431: PUSH
42432: LD_INT 1
42434: ARRAY
42435: PPUSH
42436: LD_VAR 0 14
42440: PUSH
42441: LD_VAR 0 9
42445: ARRAY
42446: PUSH
42447: LD_INT 2
42449: ARRAY
42450: PPUSH
42451: CALL_OW 488
42455: NOT
42456: OR
42457: PUSH
42458: LD_VAR 0 13
42462: PPUSH
42463: CALL_OW 247
42467: PUSH
42468: LD_INT 3
42470: EQUAL
42471: OR
42472: IFFALSE 42478
// exit ;
42474: POP
42475: POP
42476: GO 43022
// if not tmp then
42478: LD_VAR 0 13
42482: NOT
42483: IFFALSE 42487
// continue ;
42485: GO 42343
// result := true ;
42487: LD_ADDR_VAR 0 8
42491: PUSH
42492: LD_INT 1
42494: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42495: LD_VAR 0 6
42499: PUSH
42500: LD_VAR 0 13
42504: PPUSH
42505: CALL_OW 247
42509: PUSH
42510: LD_INT 2
42512: EQUAL
42513: AND
42514: PUSH
42515: LD_VAR 0 13
42519: PPUSH
42520: CALL_OW 263
42524: PUSH
42525: LD_INT 1
42527: EQUAL
42528: AND
42529: IFFALSE 42693
// begin if IsDrivenBy ( tmp ) then
42531: LD_VAR 0 13
42535: PPUSH
42536: CALL_OW 311
42540: IFFALSE 42544
// continue ;
42542: GO 42343
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42544: LD_VAR 0 6
42548: PPUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 60
42554: PUSH
42555: EMPTY
42556: LIST
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 3
42564: PUSH
42565: LD_INT 55
42567: PUSH
42568: EMPTY
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PPUSH
42579: CALL_OW 72
42583: IFFALSE 42691
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42585: LD_ADDR_VAR 0 18
42589: PUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 60
42600: PUSH
42601: EMPTY
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 55
42613: PUSH
42614: EMPTY
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PPUSH
42625: CALL_OW 72
42629: PUSH
42630: LD_INT 1
42632: ARRAY
42633: ST_TO_ADDR
// if IsInUnit ( driver ) then
42634: LD_VAR 0 18
42638: PPUSH
42639: CALL_OW 310
42643: IFFALSE 42654
// ComExit ( driver ) ;
42645: LD_VAR 0 18
42649: PPUSH
42650: CALL 67387 0 1
// AddComEnterUnit ( driver , tmp ) ;
42654: LD_VAR 0 18
42658: PPUSH
42659: LD_VAR 0 13
42663: PPUSH
42664: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42668: LD_VAR 0 18
42672: PPUSH
42673: LD_VAR 0 7
42677: PPUSH
42678: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42682: LD_VAR 0 18
42686: PPUSH
42687: CALL_OW 181
// end ; continue ;
42691: GO 42343
// end ; if not cleaners or not tmp in cleaners then
42693: LD_VAR 0 6
42697: NOT
42698: PUSH
42699: LD_VAR 0 13
42703: PUSH
42704: LD_VAR 0 6
42708: IN
42709: NOT
42710: OR
42711: IFFALSE 43018
// begin if dep then
42713: LD_VAR 0 17
42717: IFFALSE 42853
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42719: LD_ADDR_VAR 0 16
42723: PUSH
42724: LD_VAR 0 17
42728: PUSH
42729: LD_INT 1
42731: ARRAY
42732: PPUSH
42733: CALL_OW 250
42737: PPUSH
42738: LD_VAR 0 17
42742: PUSH
42743: LD_INT 1
42745: ARRAY
42746: PPUSH
42747: CALL_OW 254
42751: PPUSH
42752: LD_INT 5
42754: PPUSH
42755: CALL_OW 272
42759: PUSH
42760: LD_VAR 0 17
42764: PUSH
42765: LD_INT 1
42767: ARRAY
42768: PPUSH
42769: CALL_OW 251
42773: PPUSH
42774: LD_VAR 0 17
42778: PUSH
42779: LD_INT 1
42781: ARRAY
42782: PPUSH
42783: CALL_OW 254
42787: PPUSH
42788: LD_INT 5
42790: PPUSH
42791: CALL_OW 273
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42800: LD_VAR 0 16
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 16
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: PPUSH
42818: CALL_OW 488
42822: IFFALSE 42853
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42824: LD_VAR 0 13
42828: PPUSH
42829: LD_VAR 0 16
42833: PUSH
42834: LD_INT 1
42836: ARRAY
42837: PPUSH
42838: LD_VAR 0 16
42842: PUSH
42843: LD_INT 2
42845: ARRAY
42846: PPUSH
42847: CALL_OW 111
// continue ;
42851: GO 42343
// end ; end ; r := GetDir ( tmp ) ;
42853: LD_ADDR_VAR 0 15
42857: PUSH
42858: LD_VAR 0 13
42862: PPUSH
42863: CALL_OW 254
42867: ST_TO_ADDR
// if r = 5 then
42868: LD_VAR 0 15
42872: PUSH
42873: LD_INT 5
42875: EQUAL
42876: IFFALSE 42886
// r := 0 ;
42878: LD_ADDR_VAR 0 15
42882: PUSH
42883: LD_INT 0
42885: ST_TO_ADDR
// for j = r to 5 do
42886: LD_ADDR_VAR 0 10
42890: PUSH
42891: DOUBLE
42892: LD_VAR 0 15
42896: DEC
42897: ST_TO_ADDR
42898: LD_INT 5
42900: PUSH
42901: FOR_TO
42902: IFFALSE 43016
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42904: LD_ADDR_VAR 0 11
42908: PUSH
42909: LD_VAR 0 13
42913: PPUSH
42914: CALL_OW 250
42918: PPUSH
42919: LD_VAR 0 10
42923: PPUSH
42924: LD_INT 2
42926: PPUSH
42927: CALL_OW 272
42931: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42932: LD_ADDR_VAR 0 12
42936: PUSH
42937: LD_VAR 0 13
42941: PPUSH
42942: CALL_OW 251
42946: PPUSH
42947: LD_VAR 0 10
42951: PPUSH
42952: LD_INT 2
42954: PPUSH
42955: CALL_OW 273
42959: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42960: LD_VAR 0 11
42964: PPUSH
42965: LD_VAR 0 12
42969: PPUSH
42970: CALL_OW 488
42974: PUSH
42975: LD_VAR 0 11
42979: PPUSH
42980: LD_VAR 0 12
42984: PPUSH
42985: CALL_OW 428
42989: NOT
42990: AND
42991: IFFALSE 43014
// begin ComMoveXY ( tmp , _x , _y ) ;
42993: LD_VAR 0 13
42997: PPUSH
42998: LD_VAR 0 11
43002: PPUSH
43003: LD_VAR 0 12
43007: PPUSH
43008: CALL_OW 111
// break ;
43012: GO 43016
// end ; end ;
43014: GO 42901
43016: POP
43017: POP
// end ; end ;
43018: GO 42343
43020: POP
43021: POP
// end ;
43022: LD_VAR 0 8
43026: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43027: LD_INT 0
43029: PPUSH
// result := true ;
43030: LD_ADDR_VAR 0 3
43034: PUSH
43035: LD_INT 1
43037: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43038: LD_VAR 0 2
43042: PUSH
43043: LD_INT 24
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43057
43049: LD_INT 33
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43057
43055: GO 43082
43057: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43058: LD_ADDR_VAR 0 3
43062: PUSH
43063: LD_INT 32
43065: PPUSH
43066: LD_VAR 0 1
43070: PPUSH
43071: CALL_OW 321
43075: PUSH
43076: LD_INT 2
43078: EQUAL
43079: ST_TO_ADDR
43080: GO 43402
43082: LD_INT 20
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43115
43090: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_INT 6
43098: PPUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 321
43108: PUSH
43109: LD_INT 2
43111: EQUAL
43112: ST_TO_ADDR
43113: GO 43402
43115: LD_INT 22
43117: DOUBLE
43118: EQUAL
43119: IFTRUE 43129
43121: LD_INT 36
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43129
43127: GO 43154
43129: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_INT 15
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 321
43147: PUSH
43148: LD_INT 2
43150: EQUAL
43151: ST_TO_ADDR
43152: GO 43402
43154: LD_INT 30
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43187
43162: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_INT 20
43170: PPUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 321
43180: PUSH
43181: LD_INT 2
43183: EQUAL
43184: ST_TO_ADDR
43185: GO 43402
43187: LD_INT 28
43189: DOUBLE
43190: EQUAL
43191: IFTRUE 43201
43193: LD_INT 21
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43201
43199: GO 43226
43201: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_INT 21
43209: PPUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 321
43219: PUSH
43220: LD_INT 2
43222: EQUAL
43223: ST_TO_ADDR
43224: GO 43402
43226: LD_INT 16
43228: DOUBLE
43229: EQUAL
43230: IFTRUE 43234
43232: GO 43261
43234: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_EXP 118
43244: PPUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: CALL_OW 321
43254: PUSH
43255: LD_INT 2
43257: EQUAL
43258: ST_TO_ADDR
43259: GO 43402
43261: LD_INT 19
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43275
43267: LD_INT 23
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43275
43273: GO 43302
43275: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43276: LD_ADDR_VAR 0 3
43280: PUSH
43281: LD_EXP 117
43285: PPUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: CALL_OW 321
43295: PUSH
43296: LD_INT 2
43298: EQUAL
43299: ST_TO_ADDR
43300: GO 43402
43302: LD_INT 17
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43335
43310: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 39
43318: PPUSH
43319: LD_VAR 0 1
43323: PPUSH
43324: CALL_OW 321
43328: PUSH
43329: LD_INT 2
43331: EQUAL
43332: ST_TO_ADDR
43333: GO 43402
43335: LD_INT 18
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43368
43343: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_INT 40
43351: PPUSH
43352: LD_VAR 0 1
43356: PPUSH
43357: CALL_OW 321
43361: PUSH
43362: LD_INT 2
43364: EQUAL
43365: ST_TO_ADDR
43366: GO 43402
43368: LD_INT 27
43370: DOUBLE
43371: EQUAL
43372: IFTRUE 43376
43374: GO 43401
43376: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: LD_INT 35
43384: PPUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 321
43394: PUSH
43395: LD_INT 2
43397: EQUAL
43398: ST_TO_ADDR
43399: GO 43402
43401: POP
// end ;
43402: LD_VAR 0 3
43406: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43407: LD_INT 0
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
// result := false ;
43420: LD_ADDR_VAR 0 6
43424: PUSH
43425: LD_INT 0
43427: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43428: LD_VAR 0 1
43432: NOT
43433: PUSH
43434: LD_VAR 0 1
43438: PPUSH
43439: CALL_OW 266
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: IN
43454: NOT
43455: OR
43456: PUSH
43457: LD_VAR 0 2
43461: NOT
43462: OR
43463: PUSH
43464: LD_VAR 0 5
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: LD_INT 4
43483: PUSH
43484: LD_INT 5
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: IN
43495: NOT
43496: OR
43497: PUSH
43498: LD_VAR 0 3
43502: PPUSH
43503: LD_VAR 0 4
43507: PPUSH
43508: CALL_OW 488
43512: NOT
43513: OR
43514: IFFALSE 43518
// exit ;
43516: GO 44254
// side := GetSide ( depot ) ;
43518: LD_ADDR_VAR 0 9
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 255
43532: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43533: LD_VAR 0 9
43537: PPUSH
43538: LD_VAR 0 2
43542: PPUSH
43543: CALL 43027 0 2
43547: NOT
43548: IFFALSE 43552
// exit ;
43550: GO 44254
// pom := GetBase ( depot ) ;
43552: LD_ADDR_VAR 0 10
43556: PUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 274
43566: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43567: LD_ADDR_VAR 0 11
43571: PUSH
43572: LD_VAR 0 2
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 248
43586: PPUSH
43587: CALL_OW 450
43591: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43592: LD_VAR 0 10
43596: PPUSH
43597: LD_INT 1
43599: PPUSH
43600: CALL_OW 275
43604: PUSH
43605: LD_VAR 0 11
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: GREATEREQUAL
43614: PUSH
43615: LD_VAR 0 10
43619: PPUSH
43620: LD_INT 2
43622: PPUSH
43623: CALL_OW 275
43627: PUSH
43628: LD_VAR 0 11
43632: PUSH
43633: LD_INT 2
43635: ARRAY
43636: GREATEREQUAL
43637: AND
43638: PUSH
43639: LD_VAR 0 10
43643: PPUSH
43644: LD_INT 3
43646: PPUSH
43647: CALL_OW 275
43651: PUSH
43652: LD_VAR 0 11
43656: PUSH
43657: LD_INT 3
43659: ARRAY
43660: GREATEREQUAL
43661: AND
43662: NOT
43663: IFFALSE 43667
// exit ;
43665: GO 44254
// if GetBType ( depot ) = b_depot then
43667: LD_VAR 0 1
43671: PPUSH
43672: CALL_OW 266
43676: PUSH
43677: LD_INT 0
43679: EQUAL
43680: IFFALSE 43692
// dist := 28 else
43682: LD_ADDR_VAR 0 14
43686: PUSH
43687: LD_INT 28
43689: ST_TO_ADDR
43690: GO 43700
// dist := 36 ;
43692: LD_ADDR_VAR 0 14
43696: PUSH
43697: LD_INT 36
43699: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43700: LD_VAR 0 1
43704: PPUSH
43705: LD_VAR 0 3
43709: PPUSH
43710: LD_VAR 0 4
43714: PPUSH
43715: CALL_OW 297
43719: PUSH
43720: LD_VAR 0 14
43724: GREATER
43725: IFFALSE 43729
// exit ;
43727: GO 44254
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43729: LD_ADDR_VAR 0 12
43733: PUSH
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: LD_VAR 0 5
43753: PPUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 248
43763: PPUSH
43764: LD_INT 0
43766: PPUSH
43767: CALL 44259 0 6
43771: ST_TO_ADDR
// if not hexes then
43772: LD_VAR 0 12
43776: NOT
43777: IFFALSE 43781
// exit ;
43779: GO 44254
// hex := GetHexInfo ( x , y ) ;
43781: LD_ADDR_VAR 0 15
43785: PUSH
43786: LD_VAR 0 3
43790: PPUSH
43791: LD_VAR 0 4
43795: PPUSH
43796: CALL_OW 546
43800: ST_TO_ADDR
// if hex [ 1 ] then
43801: LD_VAR 0 15
43805: PUSH
43806: LD_INT 1
43808: ARRAY
43809: IFFALSE 43813
// exit ;
43811: GO 44254
// height := hex [ 2 ] ;
43813: LD_ADDR_VAR 0 13
43817: PUSH
43818: LD_VAR 0 15
43822: PUSH
43823: LD_INT 2
43825: ARRAY
43826: ST_TO_ADDR
// for i = 1 to hexes do
43827: LD_ADDR_VAR 0 7
43831: PUSH
43832: DOUBLE
43833: LD_INT 1
43835: DEC
43836: ST_TO_ADDR
43837: LD_VAR 0 12
43841: PUSH
43842: FOR_TO
43843: IFFALSE 44173
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43845: LD_VAR 0 12
43849: PUSH
43850: LD_VAR 0 7
43854: ARRAY
43855: PUSH
43856: LD_INT 1
43858: ARRAY
43859: PPUSH
43860: LD_VAR 0 12
43864: PUSH
43865: LD_VAR 0 7
43869: ARRAY
43870: PUSH
43871: LD_INT 2
43873: ARRAY
43874: PPUSH
43875: CALL_OW 488
43879: NOT
43880: PUSH
43881: LD_VAR 0 12
43885: PUSH
43886: LD_VAR 0 7
43890: ARRAY
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: PPUSH
43896: LD_VAR 0 12
43900: PUSH
43901: LD_VAR 0 7
43905: ARRAY
43906: PUSH
43907: LD_INT 2
43909: ARRAY
43910: PPUSH
43911: CALL_OW 428
43915: PUSH
43916: LD_INT 0
43918: GREATER
43919: OR
43920: PUSH
43921: LD_VAR 0 12
43925: PUSH
43926: LD_VAR 0 7
43930: ARRAY
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PPUSH
43936: LD_VAR 0 12
43940: PUSH
43941: LD_VAR 0 7
43945: ARRAY
43946: PUSH
43947: LD_INT 2
43949: ARRAY
43950: PPUSH
43951: CALL_OW 351
43955: OR
43956: IFFALSE 43962
// exit ;
43958: POP
43959: POP
43960: GO 44254
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43962: LD_ADDR_VAR 0 8
43966: PUSH
43967: LD_VAR 0 12
43971: PUSH
43972: LD_VAR 0 7
43976: ARRAY
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: PPUSH
43982: LD_VAR 0 12
43986: PUSH
43987: LD_VAR 0 7
43991: ARRAY
43992: PUSH
43993: LD_INT 2
43995: ARRAY
43996: PPUSH
43997: CALL_OW 546
44001: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44002: LD_VAR 0 8
44006: PUSH
44007: LD_INT 1
44009: ARRAY
44010: PUSH
44011: LD_VAR 0 8
44015: PUSH
44016: LD_INT 2
44018: ARRAY
44019: PUSH
44020: LD_VAR 0 13
44024: PUSH
44025: LD_INT 2
44027: PLUS
44028: GREATER
44029: OR
44030: PUSH
44031: LD_VAR 0 8
44035: PUSH
44036: LD_INT 2
44038: ARRAY
44039: PUSH
44040: LD_VAR 0 13
44044: PUSH
44045: LD_INT 2
44047: MINUS
44048: LESS
44049: OR
44050: PUSH
44051: LD_VAR 0 8
44055: PUSH
44056: LD_INT 3
44058: ARRAY
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 8
44065: PUSH
44066: LD_INT 9
44068: PUSH
44069: LD_INT 10
44071: PUSH
44072: LD_INT 11
44074: PUSH
44075: LD_INT 12
44077: PUSH
44078: LD_INT 13
44080: PUSH
44081: LD_INT 16
44083: PUSH
44084: LD_INT 17
44086: PUSH
44087: LD_INT 18
44089: PUSH
44090: LD_INT 19
44092: PUSH
44093: LD_INT 20
44095: PUSH
44096: LD_INT 21
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: IN
44114: NOT
44115: OR
44116: PUSH
44117: LD_VAR 0 8
44121: PUSH
44122: LD_INT 5
44124: ARRAY
44125: NOT
44126: OR
44127: PUSH
44128: LD_VAR 0 8
44132: PUSH
44133: LD_INT 6
44135: ARRAY
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 7
44145: PUSH
44146: LD_INT 9
44148: PUSH
44149: LD_INT 10
44151: PUSH
44152: LD_INT 11
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: IN
44163: NOT
44164: OR
44165: IFFALSE 44171
// exit ;
44167: POP
44168: POP
44169: GO 44254
// end ;
44171: GO 43842
44173: POP
44174: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44175: LD_VAR 0 9
44179: PPUSH
44180: LD_VAR 0 3
44184: PPUSH
44185: LD_VAR 0 4
44189: PPUSH
44190: LD_INT 20
44192: PPUSH
44193: CALL 36200 0 4
44197: PUSH
44198: LD_INT 4
44200: ARRAY
44201: IFFALSE 44205
// exit ;
44203: GO 44254
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44205: LD_VAR 0 2
44209: PUSH
44210: LD_INT 29
44212: PUSH
44213: LD_INT 30
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: IN
44220: PUSH
44221: LD_VAR 0 3
44225: PPUSH
44226: LD_VAR 0 4
44230: PPUSH
44231: LD_VAR 0 9
44235: PPUSH
44236: CALL_OW 440
44240: NOT
44241: AND
44242: IFFALSE 44246
// exit ;
44244: GO 44254
// result := true ;
44246: LD_ADDR_VAR 0 6
44250: PUSH
44251: LD_INT 1
44253: ST_TO_ADDR
// end ;
44254: LD_VAR 0 6
44258: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44259: LD_INT 0
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
44304: PPUSH
44305: PPUSH
44306: PPUSH
44307: PPUSH
44308: PPUSH
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// result = [ ] ;
44319: LD_ADDR_VAR 0 7
44323: PUSH
44324: EMPTY
44325: ST_TO_ADDR
// temp_list = [ ] ;
44326: LD_ADDR_VAR 0 9
44330: PUSH
44331: EMPTY
44332: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44333: LD_VAR 0 4
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: LD_INT 5
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: IN
44364: NOT
44365: PUSH
44366: LD_VAR 0 1
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: IN
44381: PUSH
44382: LD_VAR 0 5
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: IN
44401: NOT
44402: AND
44403: OR
44404: IFFALSE 44408
// exit ;
44406: GO 62799
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44408: LD_VAR 0 1
44412: PUSH
44413: LD_INT 6
44415: PUSH
44416: LD_INT 7
44418: PUSH
44419: LD_INT 8
44421: PUSH
44422: LD_INT 13
44424: PUSH
44425: LD_INT 12
44427: PUSH
44428: LD_INT 15
44430: PUSH
44431: LD_INT 11
44433: PUSH
44434: LD_INT 14
44436: PUSH
44437: LD_INT 10
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: IN
44451: IFFALSE 44461
// btype = b_lab ;
44453: LD_ADDR_VAR 0 1
44457: PUSH
44458: LD_INT 6
44460: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44461: LD_VAR 0 6
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: IN
44480: NOT
44481: PUSH
44482: LD_VAR 0 1
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: LD_INT 6
44501: PUSH
44502: LD_INT 36
44504: PUSH
44505: LD_INT 4
44507: PUSH
44508: LD_INT 5
44510: PUSH
44511: LD_INT 31
44513: PUSH
44514: LD_INT 32
44516: PUSH
44517: LD_INT 33
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: IN
44533: NOT
44534: PUSH
44535: LD_VAR 0 6
44539: PUSH
44540: LD_INT 1
44542: EQUAL
44543: AND
44544: OR
44545: PUSH
44546: LD_VAR 0 1
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: IN
44561: NOT
44562: PUSH
44563: LD_VAR 0 6
44567: PUSH
44568: LD_INT 2
44570: EQUAL
44571: AND
44572: OR
44573: IFFALSE 44583
// mode = 0 ;
44575: LD_ADDR_VAR 0 6
44579: PUSH
44580: LD_INT 0
44582: ST_TO_ADDR
// case mode of 0 :
44583: LD_VAR 0 6
44587: PUSH
44588: LD_INT 0
44590: DOUBLE
44591: EQUAL
44592: IFTRUE 44596
44594: GO 56049
44596: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44597: LD_ADDR_VAR 0 11
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44790: LD_ADDR_VAR 0 12
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: NEG
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 3
44958: NEG
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44986: LD_ADDR_VAR 0 13
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: NEG
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45185: LD_ADDR_VAR 0 14
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 3
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45381: LD_ADDR_VAR 0 15
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45574: LD_ADDR_VAR 0 16
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45767: LD_ADDR_VAR 0 17
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45997: LD_ADDR_VAR 0 18
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46227: LD_ADDR_VAR 0 19
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46457: LD_ADDR_VAR 0 20
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46687: LD_ADDR_VAR 0 21
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46917: LD_ADDR_VAR 0 22
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47147: LD_ADDR_VAR 0 23
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 3
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47427: LD_ADDR_VAR 0 24
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47703: LD_ADDR_VAR 0 25
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 3
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 3
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47977: LD_ADDR_VAR 0 26
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48253: LD_ADDR_VAR 0 27
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48533: LD_ADDR_VAR 0 28
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 3
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48815: LD_ADDR_VAR 0 29
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 3
49059: NEG
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49094: LD_ADDR_VAR 0 30
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49372: LD_ADDR_VAR 0 31
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49650: LD_ADDR_VAR 0 32
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49928: LD_ADDR_VAR 0 33
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50207: LD_ADDR_VAR 0 34
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50487: LD_ADDR_VAR 0 35
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50599: LD_ADDR_VAR 0 36
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50711: LD_ADDR_VAR 0 37
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50823: LD_ADDR_VAR 0 38
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50935: LD_ADDR_VAR 0 39
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51047: LD_ADDR_VAR 0 40
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51159: LD_ADDR_VAR 0 41
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51509: LD_ADDR_VAR 0 42
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 3
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51859: LD_ADDR_VAR 0 43
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52207: LD_ADDR_VAR 0 44
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52557: LD_ADDR_VAR 0 45
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 3
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52907: LD_ADDR_VAR 0 46
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 3
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53255: LD_ADDR_VAR 0 47
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53406: LD_ADDR_VAR 0 48
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53553: LD_ADDR_VAR 0 49
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53697: LD_ADDR_VAR 0 50
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53841: LD_ADDR_VAR 0 51
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53988: LD_ADDR_VAR 0 52
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54139: LD_ADDR_VAR 0 53
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54369: LD_ADDR_VAR 0 54
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54599: LD_ADDR_VAR 0 55
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54829: LD_ADDR_VAR 0 56
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55059: LD_ADDR_VAR 0 57
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55289: LD_ADDR_VAR 0 58
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55519: LD_ADDR_VAR 0 59
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55607: LD_ADDR_VAR 0 60
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55695: LD_ADDR_VAR 0 61
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55783: LD_ADDR_VAR 0 62
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55871: LD_ADDR_VAR 0 63
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55959: LD_ADDR_VAR 0 64
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: ST_TO_ADDR
// end ; 1 :
56047: GO 61944
56049: LD_INT 1
56051: DOUBLE
56052: EQUAL
56053: IFTRUE 56057
56055: GO 58680
56057: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56058: LD_ADDR_VAR 0 11
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56102: LD_ADDR_VAR 0 12
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56143: LD_ADDR_VAR 0 13
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56183: LD_ADDR_VAR 0 14
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56224: LD_ADDR_VAR 0 15
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56268: LD_ADDR_VAR 0 16
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56314: LD_ADDR_VAR 0 17
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56358: LD_ADDR_VAR 0 18
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56399: LD_ADDR_VAR 0 19
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56439: LD_ADDR_VAR 0 20
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 21
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56524: LD_ADDR_VAR 0 22
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56570: LD_ADDR_VAR 0 23
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56614: LD_ADDR_VAR 0 24
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56655: LD_ADDR_VAR 0 25
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 4
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56695: LD_ADDR_VAR 0 26
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56736: LD_ADDR_VAR 0 27
56740: PUSH
56741: LD_INT 3
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56780: LD_ADDR_VAR 0 28
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56826: LD_ADDR_VAR 0 29
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 4
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 4
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 3
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 5
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 5
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 6
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 6
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 5
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56981: LD_ADDR_VAR 0 30
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 4
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 4
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 5
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 5
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 5
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 6
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 6
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57124: LD_ADDR_VAR 0 31
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 5
57191: PUSH
57192: LD_INT 4
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: LD_INT 5
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 4
57211: PUSH
57212: LD_INT 5
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 6
57221: PUSH
57222: LD_INT 5
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 6
57231: PUSH
57232: LD_INT 6
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 5
57241: PUSH
57242: LD_INT 6
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57263: LD_ADDR_VAR 0 32
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 4
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 5
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 6
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 6
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 5
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57406: LD_ADDR_VAR 0 33
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 4
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 5
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 6
57526: NEG
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 6
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57561: LD_ADDR_VAR 0 34
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: LD_INT 4
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: LD_INT 5
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: LD_INT 4
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 5
57664: NEG
57665: PUSH
57666: LD_INT 5
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 5
57676: NEG
57677: PUSH
57678: LD_INT 6
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 6
57688: NEG
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 6
57700: NEG
57701: PUSH
57702: LD_INT 6
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57724: LD_ADDR_VAR 0 41
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57768: LD_ADDR_VAR 0 42
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57809: LD_ADDR_VAR 0 43
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57849: LD_ADDR_VAR 0 44
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57890: LD_ADDR_VAR 0 45
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57934: LD_ADDR_VAR 0 46
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57980: LD_ADDR_VAR 0 47
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58013: LD_ADDR_VAR 0 48
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58044: LD_ADDR_VAR 0 49
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58073: LD_ADDR_VAR 0 50
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 3
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58102: LD_ADDR_VAR 0 51
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58133: LD_ADDR_VAR 0 52
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58166: LD_ADDR_VAR 0 53
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58210: LD_ADDR_VAR 0 54
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58251: LD_ADDR_VAR 0 55
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58291: LD_ADDR_VAR 0 56
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58332: LD_ADDR_VAR 0 57
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58376: LD_ADDR_VAR 0 58
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58422: LD_ADDR_VAR 0 59
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58466: LD_ADDR_VAR 0 60
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58507: LD_ADDR_VAR 0 61
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58547: LD_ADDR_VAR 0 62
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 63
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58632: LD_ADDR_VAR 0 64
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// end ; 2 :
58678: GO 61944
58680: LD_INT 2
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58688
58686: GO 61943
58688: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58689: LD_ADDR_VAR 0 29
58693: PUSH
58694: LD_INT 4
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 5
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 5
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 5
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 3
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: PUSH
58820: LD_INT 4
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 4
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 4
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 5
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 5
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 4
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 4
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 4
59086: NEG
59087: PUSH
59088: LD_INT 5
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: LD_INT 4
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: LD_INT 4
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 5
59146: NEG
59147: PUSH
59148: LD_INT 5
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: LD_INT 5
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 5
59170: NEG
59171: PUSH
59172: LD_INT 3
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59227: LD_ADDR_VAR 0 30
59231: PUSH
59232: LD_INT 4
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 5
59254: PUSH
59255: LD_INT 4
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 5
59264: PUSH
59265: LD_INT 5
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: LD_INT 5
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 5
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: LD_INT 5
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 4
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 4
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 4
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 4
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 4
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 5
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 3
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 4
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 5
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 4
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 4
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 5
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: LD_INT 5
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59774: LD_ADDR_VAR 0 31
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 4
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 5
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 5
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 4
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 4
59988: NEG
59989: PUSH
59990: LD_INT 5
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: LD_INT 4
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: NEG
60049: PUSH
60050: LD_INT 5
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 5
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 5
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 4
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: LD_INT 4
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 5
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 4
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60324: LD_ADDR_VAR 0 32
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 4
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 5
60387: NEG
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 5
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 5
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: NEG
60506: PUSH
60507: LD_INT 4
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: LD_INT 4
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 3
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 3
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 4
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 5
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 5
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 3
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 4
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 4
60736: PUSH
60737: LD_INT 4
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 5
60756: PUSH
60757: LD_INT 4
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 5
60766: PUSH
60767: LD_INT 5
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: LD_INT 5
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: LD_INT 4
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 5
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 5
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60871: LD_ADDR_VAR 0 33
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 4
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: NEG
60891: PUSH
60892: LD_INT 5
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 4
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: LD_INT 4
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: LD_INT 5
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: LD_INT 5
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 5
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 4
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 3
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 4
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 4
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 4
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 5
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 5
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: PUSH
61212: LD_INT 4
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 4
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: LD_INT 4
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 4
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 4
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 5
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 5
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 4
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: LD_INT 5
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61409: LD_ADDR_VAR 0 34
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 4
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 5
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 3
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 4
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 5
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 5
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 4
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 5
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 5
61641: PUSH
61642: LD_INT 5
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: LD_INT 4
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 5
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 4
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: NEG
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 5
61850: NEG
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 5
61861: NEG
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 5
61873: NEG
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: ST_TO_ADDR
// end ; end ;
61941: GO 61944
61943: POP
// case btype of b_depot , b_warehouse :
61944: LD_VAR 0 1
61948: PUSH
61949: LD_INT 0
61951: DOUBLE
61952: EQUAL
61953: IFTRUE 61963
61955: LD_INT 1
61957: DOUBLE
61958: EQUAL
61959: IFTRUE 61963
61961: GO 62164
61963: POP
// case nation of nation_american :
61964: LD_VAR 0 5
61968: PUSH
61969: LD_INT 1
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 61977
61975: GO 62033
61977: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61978: LD_ADDR_VAR 0 9
61982: PUSH
61983: LD_VAR 0 11
61987: PUSH
61988: LD_VAR 0 12
61992: PUSH
61993: LD_VAR 0 13
61997: PUSH
61998: LD_VAR 0 14
62002: PUSH
62003: LD_VAR 0 15
62007: PUSH
62008: LD_VAR 0 16
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 4
62025: PUSH
62026: LD_INT 1
62028: PLUS
62029: ARRAY
62030: ST_TO_ADDR
62031: GO 62162
62033: LD_INT 2
62035: DOUBLE
62036: EQUAL
62037: IFTRUE 62041
62039: GO 62097
62041: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62042: LD_ADDR_VAR 0 9
62046: PUSH
62047: LD_VAR 0 17
62051: PUSH
62052: LD_VAR 0 18
62056: PUSH
62057: LD_VAR 0 19
62061: PUSH
62062: LD_VAR 0 20
62066: PUSH
62067: LD_VAR 0 21
62071: PUSH
62072: LD_VAR 0 22
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: PUSH
62085: LD_VAR 0 4
62089: PUSH
62090: LD_INT 1
62092: PLUS
62093: ARRAY
62094: ST_TO_ADDR
62095: GO 62162
62097: LD_INT 3
62099: DOUBLE
62100: EQUAL
62101: IFTRUE 62105
62103: GO 62161
62105: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62106: LD_ADDR_VAR 0 9
62110: PUSH
62111: LD_VAR 0 23
62115: PUSH
62116: LD_VAR 0 24
62120: PUSH
62121: LD_VAR 0 25
62125: PUSH
62126: LD_VAR 0 26
62130: PUSH
62131: LD_VAR 0 27
62135: PUSH
62136: LD_VAR 0 28
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: LD_VAR 0 4
62153: PUSH
62154: LD_INT 1
62156: PLUS
62157: ARRAY
62158: ST_TO_ADDR
62159: GO 62162
62161: POP
62162: GO 62717
62164: LD_INT 2
62166: DOUBLE
62167: EQUAL
62168: IFTRUE 62178
62170: LD_INT 3
62172: DOUBLE
62173: EQUAL
62174: IFTRUE 62178
62176: GO 62234
62178: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62179: LD_ADDR_VAR 0 9
62183: PUSH
62184: LD_VAR 0 29
62188: PUSH
62189: LD_VAR 0 30
62193: PUSH
62194: LD_VAR 0 31
62198: PUSH
62199: LD_VAR 0 32
62203: PUSH
62204: LD_VAR 0 33
62208: PUSH
62209: LD_VAR 0 34
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: PUSH
62222: LD_VAR 0 4
62226: PUSH
62227: LD_INT 1
62229: PLUS
62230: ARRAY
62231: ST_TO_ADDR
62232: GO 62717
62234: LD_INT 16
62236: DOUBLE
62237: EQUAL
62238: IFTRUE 62296
62240: LD_INT 17
62242: DOUBLE
62243: EQUAL
62244: IFTRUE 62296
62246: LD_INT 18
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62296
62252: LD_INT 19
62254: DOUBLE
62255: EQUAL
62256: IFTRUE 62296
62258: LD_INT 22
62260: DOUBLE
62261: EQUAL
62262: IFTRUE 62296
62264: LD_INT 20
62266: DOUBLE
62267: EQUAL
62268: IFTRUE 62296
62270: LD_INT 21
62272: DOUBLE
62273: EQUAL
62274: IFTRUE 62296
62276: LD_INT 23
62278: DOUBLE
62279: EQUAL
62280: IFTRUE 62296
62282: LD_INT 24
62284: DOUBLE
62285: EQUAL
62286: IFTRUE 62296
62288: LD_INT 25
62290: DOUBLE
62291: EQUAL
62292: IFTRUE 62296
62294: GO 62352
62296: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62297: LD_ADDR_VAR 0 9
62301: PUSH
62302: LD_VAR 0 35
62306: PUSH
62307: LD_VAR 0 36
62311: PUSH
62312: LD_VAR 0 37
62316: PUSH
62317: LD_VAR 0 38
62321: PUSH
62322: LD_VAR 0 39
62326: PUSH
62327: LD_VAR 0 40
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: PUSH
62340: LD_VAR 0 4
62344: PUSH
62345: LD_INT 1
62347: PLUS
62348: ARRAY
62349: ST_TO_ADDR
62350: GO 62717
62352: LD_INT 6
62354: DOUBLE
62355: EQUAL
62356: IFTRUE 62408
62358: LD_INT 7
62360: DOUBLE
62361: EQUAL
62362: IFTRUE 62408
62364: LD_INT 8
62366: DOUBLE
62367: EQUAL
62368: IFTRUE 62408
62370: LD_INT 13
62372: DOUBLE
62373: EQUAL
62374: IFTRUE 62408
62376: LD_INT 12
62378: DOUBLE
62379: EQUAL
62380: IFTRUE 62408
62382: LD_INT 15
62384: DOUBLE
62385: EQUAL
62386: IFTRUE 62408
62388: LD_INT 11
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62408
62394: LD_INT 14
62396: DOUBLE
62397: EQUAL
62398: IFTRUE 62408
62400: LD_INT 10
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62408
62406: GO 62464
62408: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62409: LD_ADDR_VAR 0 9
62413: PUSH
62414: LD_VAR 0 41
62418: PUSH
62419: LD_VAR 0 42
62423: PUSH
62424: LD_VAR 0 43
62428: PUSH
62429: LD_VAR 0 44
62433: PUSH
62434: LD_VAR 0 45
62438: PUSH
62439: LD_VAR 0 46
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: PUSH
62452: LD_VAR 0 4
62456: PUSH
62457: LD_INT 1
62459: PLUS
62460: ARRAY
62461: ST_TO_ADDR
62462: GO 62717
62464: LD_INT 36
62466: DOUBLE
62467: EQUAL
62468: IFTRUE 62472
62470: GO 62528
62472: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62473: LD_ADDR_VAR 0 9
62477: PUSH
62478: LD_VAR 0 47
62482: PUSH
62483: LD_VAR 0 48
62487: PUSH
62488: LD_VAR 0 49
62492: PUSH
62493: LD_VAR 0 50
62497: PUSH
62498: LD_VAR 0 51
62502: PUSH
62503: LD_VAR 0 52
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: PUSH
62516: LD_VAR 0 4
62520: PUSH
62521: LD_INT 1
62523: PLUS
62524: ARRAY
62525: ST_TO_ADDR
62526: GO 62717
62528: LD_INT 4
62530: DOUBLE
62531: EQUAL
62532: IFTRUE 62554
62534: LD_INT 5
62536: DOUBLE
62537: EQUAL
62538: IFTRUE 62554
62540: LD_INT 34
62542: DOUBLE
62543: EQUAL
62544: IFTRUE 62554
62546: LD_INT 37
62548: DOUBLE
62549: EQUAL
62550: IFTRUE 62554
62552: GO 62610
62554: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62555: LD_ADDR_VAR 0 9
62559: PUSH
62560: LD_VAR 0 53
62564: PUSH
62565: LD_VAR 0 54
62569: PUSH
62570: LD_VAR 0 55
62574: PUSH
62575: LD_VAR 0 56
62579: PUSH
62580: LD_VAR 0 57
62584: PUSH
62585: LD_VAR 0 58
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: LD_VAR 0 4
62602: PUSH
62603: LD_INT 1
62605: PLUS
62606: ARRAY
62607: ST_TO_ADDR
62608: GO 62717
62610: LD_INT 31
62612: DOUBLE
62613: EQUAL
62614: IFTRUE 62660
62616: LD_INT 32
62618: DOUBLE
62619: EQUAL
62620: IFTRUE 62660
62622: LD_INT 33
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62660
62628: LD_INT 27
62630: DOUBLE
62631: EQUAL
62632: IFTRUE 62660
62634: LD_INT 26
62636: DOUBLE
62637: EQUAL
62638: IFTRUE 62660
62640: LD_INT 28
62642: DOUBLE
62643: EQUAL
62644: IFTRUE 62660
62646: LD_INT 29
62648: DOUBLE
62649: EQUAL
62650: IFTRUE 62660
62652: LD_INT 30
62654: DOUBLE
62655: EQUAL
62656: IFTRUE 62660
62658: GO 62716
62660: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62661: LD_ADDR_VAR 0 9
62665: PUSH
62666: LD_VAR 0 59
62670: PUSH
62671: LD_VAR 0 60
62675: PUSH
62676: LD_VAR 0 61
62680: PUSH
62681: LD_VAR 0 62
62685: PUSH
62686: LD_VAR 0 63
62690: PUSH
62691: LD_VAR 0 64
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: PUSH
62704: LD_VAR 0 4
62708: PUSH
62709: LD_INT 1
62711: PLUS
62712: ARRAY
62713: ST_TO_ADDR
62714: GO 62717
62716: POP
// temp_list2 = [ ] ;
62717: LD_ADDR_VAR 0 10
62721: PUSH
62722: EMPTY
62723: ST_TO_ADDR
// for i in temp_list do
62724: LD_ADDR_VAR 0 8
62728: PUSH
62729: LD_VAR 0 9
62733: PUSH
62734: FOR_IN
62735: IFFALSE 62787
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62737: LD_ADDR_VAR 0 10
62741: PUSH
62742: LD_VAR 0 10
62746: PUSH
62747: LD_VAR 0 8
62751: PUSH
62752: LD_INT 1
62754: ARRAY
62755: PUSH
62756: LD_VAR 0 2
62760: PLUS
62761: PUSH
62762: LD_VAR 0 8
62766: PUSH
62767: LD_INT 2
62769: ARRAY
62770: PUSH
62771: LD_VAR 0 3
62775: PLUS
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: EMPTY
62782: LIST
62783: ADD
62784: ST_TO_ADDR
62785: GO 62734
62787: POP
62788: POP
// result = temp_list2 ;
62789: LD_ADDR_VAR 0 7
62793: PUSH
62794: LD_VAR 0 10
62798: ST_TO_ADDR
// end ;
62799: LD_VAR 0 7
62803: RET
// export function EnemyInRange ( unit , dist ) ; begin
62804: LD_INT 0
62806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62807: LD_ADDR_VAR 0 3
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: CALL_OW 255
62821: PPUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 250
62831: PPUSH
62832: LD_VAR 0 1
62836: PPUSH
62837: CALL_OW 251
62841: PPUSH
62842: LD_VAR 0 2
62846: PPUSH
62847: CALL 36200 0 4
62851: PUSH
62852: LD_INT 4
62854: ARRAY
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 3
62860: RET
// export function PlayerSeeMe ( unit ) ; begin
62861: LD_INT 0
62863: PPUSH
// result := See ( your_side , unit ) ;
62864: LD_ADDR_VAR 0 2
62868: PUSH
62869: LD_OWVAR 2
62873: PPUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: CALL_OW 292
62883: ST_TO_ADDR
// end ;
62884: LD_VAR 0 2
62888: RET
// export function ReverseDir ( unit ) ; begin
62889: LD_INT 0
62891: PPUSH
// if not unit then
62892: LD_VAR 0 1
62896: NOT
62897: IFFALSE 62901
// exit ;
62899: GO 62924
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62901: LD_ADDR_VAR 0 2
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 254
62915: PUSH
62916: LD_INT 3
62918: PLUS
62919: PUSH
62920: LD_INT 6
62922: MOD
62923: ST_TO_ADDR
// end ;
62924: LD_VAR 0 2
62928: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62929: LD_INT 0
62931: PPUSH
62932: PPUSH
62933: PPUSH
62934: PPUSH
62935: PPUSH
// if not hexes then
62936: LD_VAR 0 2
62940: NOT
62941: IFFALSE 62945
// exit ;
62943: GO 63093
// dist := 9999 ;
62945: LD_ADDR_VAR 0 5
62949: PUSH
62950: LD_INT 9999
62952: ST_TO_ADDR
// for i = 1 to hexes do
62953: LD_ADDR_VAR 0 4
62957: PUSH
62958: DOUBLE
62959: LD_INT 1
62961: DEC
62962: ST_TO_ADDR
62963: LD_VAR 0 2
62967: PUSH
62968: FOR_TO
62969: IFFALSE 63081
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62971: LD_VAR 0 1
62975: PPUSH
62976: LD_VAR 0 2
62980: PUSH
62981: LD_VAR 0 4
62985: ARRAY
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PPUSH
62991: LD_VAR 0 2
62995: PUSH
62996: LD_VAR 0 4
63000: ARRAY
63001: PUSH
63002: LD_INT 2
63004: ARRAY
63005: PPUSH
63006: CALL_OW 297
63010: PUSH
63011: LD_VAR 0 5
63015: LESS
63016: IFFALSE 63079
// begin hex := hexes [ i ] ;
63018: LD_ADDR_VAR 0 7
63022: PUSH
63023: LD_VAR 0 2
63027: PUSH
63028: LD_VAR 0 4
63032: ARRAY
63033: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63034: LD_ADDR_VAR 0 5
63038: PUSH
63039: LD_VAR 0 1
63043: PPUSH
63044: LD_VAR 0 2
63048: PUSH
63049: LD_VAR 0 4
63053: ARRAY
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PPUSH
63059: LD_VAR 0 2
63063: PUSH
63064: LD_VAR 0 4
63068: ARRAY
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: CALL_OW 297
63078: ST_TO_ADDR
// end ; end ;
63079: GO 62968
63081: POP
63082: POP
// result := hex ;
63083: LD_ADDR_VAR 0 3
63087: PUSH
63088: LD_VAR 0 7
63092: ST_TO_ADDR
// end ;
63093: LD_VAR 0 3
63097: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63098: LD_INT 0
63100: PPUSH
63101: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63102: LD_VAR 0 1
63106: NOT
63107: PUSH
63108: LD_VAR 0 1
63112: PUSH
63113: LD_INT 21
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 23
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PPUSH
63137: CALL_OW 69
63141: IN
63142: NOT
63143: OR
63144: IFFALSE 63148
// exit ;
63146: GO 63195
// for i = 1 to 3 do
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: DOUBLE
63154: LD_INT 1
63156: DEC
63157: ST_TO_ADDR
63158: LD_INT 3
63160: PUSH
63161: FOR_TO
63162: IFFALSE 63193
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63164: LD_VAR 0 1
63168: PPUSH
63169: CALL_OW 250
63173: PPUSH
63174: LD_VAR 0 1
63178: PPUSH
63179: CALL_OW 251
63183: PPUSH
63184: LD_INT 1
63186: PPUSH
63187: CALL_OW 453
63191: GO 63161
63193: POP
63194: POP
// end ;
63195: LD_VAR 0 2
63199: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63200: LD_INT 0
63202: PPUSH
63203: PPUSH
63204: PPUSH
63205: PPUSH
63206: PPUSH
63207: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63208: LD_VAR 0 1
63212: NOT
63213: PUSH
63214: LD_VAR 0 2
63218: NOT
63219: OR
63220: PUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 314
63230: OR
63231: IFFALSE 63235
// exit ;
63233: GO 63676
// x := GetX ( enemy_unit ) ;
63235: LD_ADDR_VAR 0 7
63239: PUSH
63240: LD_VAR 0 2
63244: PPUSH
63245: CALL_OW 250
63249: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63250: LD_ADDR_VAR 0 8
63254: PUSH
63255: LD_VAR 0 2
63259: PPUSH
63260: CALL_OW 251
63264: ST_TO_ADDR
// if not x or not y then
63265: LD_VAR 0 7
63269: NOT
63270: PUSH
63271: LD_VAR 0 8
63275: NOT
63276: OR
63277: IFFALSE 63281
// exit ;
63279: GO 63676
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63281: LD_ADDR_VAR 0 6
63285: PUSH
63286: LD_VAR 0 7
63290: PPUSH
63291: LD_INT 0
63293: PPUSH
63294: LD_INT 4
63296: PPUSH
63297: CALL_OW 272
63301: PUSH
63302: LD_VAR 0 8
63306: PPUSH
63307: LD_INT 0
63309: PPUSH
63310: LD_INT 4
63312: PPUSH
63313: CALL_OW 273
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_VAR 0 7
63326: PPUSH
63327: LD_INT 1
63329: PPUSH
63330: LD_INT 4
63332: PPUSH
63333: CALL_OW 272
63337: PUSH
63338: LD_VAR 0 8
63342: PPUSH
63343: LD_INT 1
63345: PPUSH
63346: LD_INT 4
63348: PPUSH
63349: CALL_OW 273
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_VAR 0 7
63362: PPUSH
63363: LD_INT 2
63365: PPUSH
63366: LD_INT 4
63368: PPUSH
63369: CALL_OW 272
63373: PUSH
63374: LD_VAR 0 8
63378: PPUSH
63379: LD_INT 2
63381: PPUSH
63382: LD_INT 4
63384: PPUSH
63385: CALL_OW 273
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_VAR 0 7
63398: PPUSH
63399: LD_INT 3
63401: PPUSH
63402: LD_INT 4
63404: PPUSH
63405: CALL_OW 272
63409: PUSH
63410: LD_VAR 0 8
63414: PPUSH
63415: LD_INT 3
63417: PPUSH
63418: LD_INT 4
63420: PPUSH
63421: CALL_OW 273
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_VAR 0 7
63434: PPUSH
63435: LD_INT 4
63437: PPUSH
63438: LD_INT 4
63440: PPUSH
63441: CALL_OW 272
63445: PUSH
63446: LD_VAR 0 8
63450: PPUSH
63451: LD_INT 4
63453: PPUSH
63454: LD_INT 4
63456: PPUSH
63457: CALL_OW 273
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_VAR 0 7
63470: PPUSH
63471: LD_INT 5
63473: PPUSH
63474: LD_INT 4
63476: PPUSH
63477: CALL_OW 272
63481: PUSH
63482: LD_VAR 0 8
63486: PPUSH
63487: LD_INT 5
63489: PPUSH
63490: LD_INT 4
63492: PPUSH
63493: CALL_OW 273
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// for i = tmp downto 1 do
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: DOUBLE
63516: LD_VAR 0 6
63520: INC
63521: ST_TO_ADDR
63522: LD_INT 1
63524: PUSH
63525: FOR_DOWNTO
63526: IFFALSE 63627
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63528: LD_VAR 0 6
63532: PUSH
63533: LD_VAR 0 4
63537: ARRAY
63538: PUSH
63539: LD_INT 1
63541: ARRAY
63542: PPUSH
63543: LD_VAR 0 6
63547: PUSH
63548: LD_VAR 0 4
63552: ARRAY
63553: PUSH
63554: LD_INT 2
63556: ARRAY
63557: PPUSH
63558: CALL_OW 488
63562: NOT
63563: PUSH
63564: LD_VAR 0 6
63568: PUSH
63569: LD_VAR 0 4
63573: ARRAY
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PPUSH
63579: LD_VAR 0 6
63583: PUSH
63584: LD_VAR 0 4
63588: ARRAY
63589: PUSH
63590: LD_INT 2
63592: ARRAY
63593: PPUSH
63594: CALL_OW 428
63598: PUSH
63599: LD_INT 0
63601: NONEQUAL
63602: OR
63603: IFFALSE 63625
// tmp := Delete ( tmp , i ) ;
63605: LD_ADDR_VAR 0 6
63609: PUSH
63610: LD_VAR 0 6
63614: PPUSH
63615: LD_VAR 0 4
63619: PPUSH
63620: CALL_OW 3
63624: ST_TO_ADDR
63625: GO 63525
63627: POP
63628: POP
// j := GetClosestHex ( unit , tmp ) ;
63629: LD_ADDR_VAR 0 5
63633: PUSH
63634: LD_VAR 0 1
63638: PPUSH
63639: LD_VAR 0 6
63643: PPUSH
63644: CALL 62929 0 2
63648: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63649: LD_VAR 0 1
63653: PPUSH
63654: LD_VAR 0 5
63658: PUSH
63659: LD_INT 1
63661: ARRAY
63662: PPUSH
63663: LD_VAR 0 5
63667: PUSH
63668: LD_INT 2
63670: ARRAY
63671: PPUSH
63672: CALL_OW 111
// end ;
63676: LD_VAR 0 3
63680: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63681: LD_INT 0
63683: PPUSH
63684: PPUSH
63685: PPUSH
// uc_side = 0 ;
63686: LD_ADDR_OWVAR 20
63690: PUSH
63691: LD_INT 0
63693: ST_TO_ADDR
// uc_nation = 0 ;
63694: LD_ADDR_OWVAR 21
63698: PUSH
63699: LD_INT 0
63701: ST_TO_ADDR
// InitHc_All ( ) ;
63702: CALL_OW 584
// InitVc ;
63706: CALL_OW 20
// if mastodonts then
63710: LD_VAR 0 6
63714: IFFALSE 63781
// for i = 1 to mastodonts do
63716: LD_ADDR_VAR 0 11
63720: PUSH
63721: DOUBLE
63722: LD_INT 1
63724: DEC
63725: ST_TO_ADDR
63726: LD_VAR 0 6
63730: PUSH
63731: FOR_TO
63732: IFFALSE 63779
// begin vc_chassis := 31 ;
63734: LD_ADDR_OWVAR 37
63738: PUSH
63739: LD_INT 31
63741: ST_TO_ADDR
// vc_control := control_rider ;
63742: LD_ADDR_OWVAR 38
63746: PUSH
63747: LD_INT 4
63749: ST_TO_ADDR
// animal := CreateVehicle ;
63750: LD_ADDR_VAR 0 12
63754: PUSH
63755: CALL_OW 45
63759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63760: LD_VAR 0 12
63764: PPUSH
63765: LD_VAR 0 8
63769: PPUSH
63770: LD_INT 0
63772: PPUSH
63773: CALL 65916 0 3
// end ;
63777: GO 63731
63779: POP
63780: POP
// if horses then
63781: LD_VAR 0 5
63785: IFFALSE 63852
// for i = 1 to horses do
63787: LD_ADDR_VAR 0 11
63791: PUSH
63792: DOUBLE
63793: LD_INT 1
63795: DEC
63796: ST_TO_ADDR
63797: LD_VAR 0 5
63801: PUSH
63802: FOR_TO
63803: IFFALSE 63850
// begin hc_class := 21 ;
63805: LD_ADDR_OWVAR 28
63809: PUSH
63810: LD_INT 21
63812: ST_TO_ADDR
// hc_gallery :=  ;
63813: LD_ADDR_OWVAR 33
63817: PUSH
63818: LD_STRING 
63820: ST_TO_ADDR
// animal := CreateHuman ;
63821: LD_ADDR_VAR 0 12
63825: PUSH
63826: CALL_OW 44
63830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63831: LD_VAR 0 12
63835: PPUSH
63836: LD_VAR 0 8
63840: PPUSH
63841: LD_INT 0
63843: PPUSH
63844: CALL 65916 0 3
// end ;
63848: GO 63802
63850: POP
63851: POP
// if birds then
63852: LD_VAR 0 1
63856: IFFALSE 63923
// for i = 1 to birds do
63858: LD_ADDR_VAR 0 11
63862: PUSH
63863: DOUBLE
63864: LD_INT 1
63866: DEC
63867: ST_TO_ADDR
63868: LD_VAR 0 1
63872: PUSH
63873: FOR_TO
63874: IFFALSE 63921
// begin hc_class = 18 ;
63876: LD_ADDR_OWVAR 28
63880: PUSH
63881: LD_INT 18
63883: ST_TO_ADDR
// hc_gallery =  ;
63884: LD_ADDR_OWVAR 33
63888: PUSH
63889: LD_STRING 
63891: ST_TO_ADDR
// animal := CreateHuman ;
63892: LD_ADDR_VAR 0 12
63896: PUSH
63897: CALL_OW 44
63901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63902: LD_VAR 0 12
63906: PPUSH
63907: LD_VAR 0 8
63911: PPUSH
63912: LD_INT 0
63914: PPUSH
63915: CALL 65916 0 3
// end ;
63919: GO 63873
63921: POP
63922: POP
// if tigers then
63923: LD_VAR 0 2
63927: IFFALSE 64011
// for i = 1 to tigers do
63929: LD_ADDR_VAR 0 11
63933: PUSH
63934: DOUBLE
63935: LD_INT 1
63937: DEC
63938: ST_TO_ADDR
63939: LD_VAR 0 2
63943: PUSH
63944: FOR_TO
63945: IFFALSE 64009
// begin hc_class = class_tiger ;
63947: LD_ADDR_OWVAR 28
63951: PUSH
63952: LD_INT 14
63954: ST_TO_ADDR
// hc_gallery =  ;
63955: LD_ADDR_OWVAR 33
63959: PUSH
63960: LD_STRING 
63962: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63963: LD_ADDR_OWVAR 35
63967: PUSH
63968: LD_INT 7
63970: NEG
63971: PPUSH
63972: LD_INT 7
63974: PPUSH
63975: CALL_OW 12
63979: ST_TO_ADDR
// animal := CreateHuman ;
63980: LD_ADDR_VAR 0 12
63984: PUSH
63985: CALL_OW 44
63989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63990: LD_VAR 0 12
63994: PPUSH
63995: LD_VAR 0 8
63999: PPUSH
64000: LD_INT 0
64002: PPUSH
64003: CALL 65916 0 3
// end ;
64007: GO 63944
64009: POP
64010: POP
// if apemans then
64011: LD_VAR 0 3
64015: IFFALSE 64138
// for i = 1 to apemans do
64017: LD_ADDR_VAR 0 11
64021: PUSH
64022: DOUBLE
64023: LD_INT 1
64025: DEC
64026: ST_TO_ADDR
64027: LD_VAR 0 3
64031: PUSH
64032: FOR_TO
64033: IFFALSE 64136
// begin hc_class = class_apeman ;
64035: LD_ADDR_OWVAR 28
64039: PUSH
64040: LD_INT 12
64042: ST_TO_ADDR
// hc_gallery =  ;
64043: LD_ADDR_OWVAR 33
64047: PUSH
64048: LD_STRING 
64050: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64051: LD_ADDR_OWVAR 35
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PPUSH
64060: LD_INT 2
64062: PPUSH
64063: CALL_OW 12
64067: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64068: LD_ADDR_OWVAR 31
64072: PUSH
64073: LD_INT 1
64075: PPUSH
64076: LD_INT 3
64078: PPUSH
64079: CALL_OW 12
64083: PUSH
64084: LD_INT 1
64086: PPUSH
64087: LD_INT 3
64089: PPUSH
64090: CALL_OW 12
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// animal := CreateHuman ;
64107: LD_ADDR_VAR 0 12
64111: PUSH
64112: CALL_OW 44
64116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64117: LD_VAR 0 12
64121: PPUSH
64122: LD_VAR 0 8
64126: PPUSH
64127: LD_INT 0
64129: PPUSH
64130: CALL 65916 0 3
// end ;
64134: GO 64032
64136: POP
64137: POP
// if enchidnas then
64138: LD_VAR 0 4
64142: IFFALSE 64209
// for i = 1 to enchidnas do
64144: LD_ADDR_VAR 0 11
64148: PUSH
64149: DOUBLE
64150: LD_INT 1
64152: DEC
64153: ST_TO_ADDR
64154: LD_VAR 0 4
64158: PUSH
64159: FOR_TO
64160: IFFALSE 64207
// begin hc_class = 13 ;
64162: LD_ADDR_OWVAR 28
64166: PUSH
64167: LD_INT 13
64169: ST_TO_ADDR
// hc_gallery =  ;
64170: LD_ADDR_OWVAR 33
64174: PUSH
64175: LD_STRING 
64177: ST_TO_ADDR
// animal := CreateHuman ;
64178: LD_ADDR_VAR 0 12
64182: PUSH
64183: CALL_OW 44
64187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64188: LD_VAR 0 12
64192: PPUSH
64193: LD_VAR 0 8
64197: PPUSH
64198: LD_INT 0
64200: PPUSH
64201: CALL 65916 0 3
// end ;
64205: GO 64159
64207: POP
64208: POP
// if fishes then
64209: LD_VAR 0 7
64213: IFFALSE 64280
// for i = 1 to fishes do
64215: LD_ADDR_VAR 0 11
64219: PUSH
64220: DOUBLE
64221: LD_INT 1
64223: DEC
64224: ST_TO_ADDR
64225: LD_VAR 0 7
64229: PUSH
64230: FOR_TO
64231: IFFALSE 64278
// begin hc_class = 20 ;
64233: LD_ADDR_OWVAR 28
64237: PUSH
64238: LD_INT 20
64240: ST_TO_ADDR
// hc_gallery =  ;
64241: LD_ADDR_OWVAR 33
64245: PUSH
64246: LD_STRING 
64248: ST_TO_ADDR
// animal := CreateHuman ;
64249: LD_ADDR_VAR 0 12
64253: PUSH
64254: CALL_OW 44
64258: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64259: LD_VAR 0 12
64263: PPUSH
64264: LD_VAR 0 9
64268: PPUSH
64269: LD_INT 0
64271: PPUSH
64272: CALL 65916 0 3
// end ;
64276: GO 64230
64278: POP
64279: POP
// end ;
64280: LD_VAR 0 10
64284: RET
// export function WantHeal ( sci , unit ) ; begin
64285: LD_INT 0
64287: PPUSH
// if GetTaskList ( sci ) > 0 then
64288: LD_VAR 0 1
64292: PPUSH
64293: CALL_OW 437
64297: PUSH
64298: LD_INT 0
64300: GREATER
64301: IFFALSE 64371
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64303: LD_VAR 0 1
64307: PPUSH
64308: CALL_OW 437
64312: PUSH
64313: LD_INT 1
64315: ARRAY
64316: PUSH
64317: LD_INT 1
64319: ARRAY
64320: PUSH
64321: LD_STRING l
64323: EQUAL
64324: PUSH
64325: LD_VAR 0 1
64329: PPUSH
64330: CALL_OW 437
64334: PUSH
64335: LD_INT 1
64337: ARRAY
64338: PUSH
64339: LD_INT 4
64341: ARRAY
64342: PUSH
64343: LD_VAR 0 2
64347: EQUAL
64348: AND
64349: IFFALSE 64361
// result := true else
64351: LD_ADDR_VAR 0 3
64355: PUSH
64356: LD_INT 1
64358: ST_TO_ADDR
64359: GO 64369
// result := false ;
64361: LD_ADDR_VAR 0 3
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// end else
64369: GO 64379
// result := false ;
64371: LD_ADDR_VAR 0 3
64375: PUSH
64376: LD_INT 0
64378: ST_TO_ADDR
// end ;
64379: LD_VAR 0 3
64383: RET
// export function HealTarget ( sci ) ; begin
64384: LD_INT 0
64386: PPUSH
// if not sci then
64387: LD_VAR 0 1
64391: NOT
64392: IFFALSE 64396
// exit ;
64394: GO 64461
// result := 0 ;
64396: LD_ADDR_VAR 0 2
64400: PUSH
64401: LD_INT 0
64403: ST_TO_ADDR
// if GetTaskList ( sci ) then
64404: LD_VAR 0 1
64408: PPUSH
64409: CALL_OW 437
64413: IFFALSE 64461
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 437
64424: PUSH
64425: LD_INT 1
64427: ARRAY
64428: PUSH
64429: LD_INT 1
64431: ARRAY
64432: PUSH
64433: LD_STRING l
64435: EQUAL
64436: IFFALSE 64461
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64438: LD_ADDR_VAR 0 2
64442: PUSH
64443: LD_VAR 0 1
64447: PPUSH
64448: CALL_OW 437
64452: PUSH
64453: LD_INT 1
64455: ARRAY
64456: PUSH
64457: LD_INT 4
64459: ARRAY
64460: ST_TO_ADDR
// end ;
64461: LD_VAR 0 2
64465: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64466: LD_INT 0
64468: PPUSH
64469: PPUSH
64470: PPUSH
64471: PPUSH
// if not base_units then
64472: LD_VAR 0 1
64476: NOT
64477: IFFALSE 64481
// exit ;
64479: GO 64568
// result := false ;
64481: LD_ADDR_VAR 0 2
64485: PUSH
64486: LD_INT 0
64488: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_VAR 0 1
64498: PPUSH
64499: LD_INT 21
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PPUSH
64509: CALL_OW 72
64513: ST_TO_ADDR
// if not tmp then
64514: LD_VAR 0 5
64518: NOT
64519: IFFALSE 64523
// exit ;
64521: GO 64568
// for i in tmp do
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: LD_VAR 0 5
64532: PUSH
64533: FOR_IN
64534: IFFALSE 64566
// begin result := EnemyInRange ( i , 22 ) ;
64536: LD_ADDR_VAR 0 2
64540: PUSH
64541: LD_VAR 0 3
64545: PPUSH
64546: LD_INT 22
64548: PPUSH
64549: CALL 62804 0 2
64553: ST_TO_ADDR
// if result then
64554: LD_VAR 0 2
64558: IFFALSE 64564
// exit ;
64560: POP
64561: POP
64562: GO 64568
// end ;
64564: GO 64533
64566: POP
64567: POP
// end ;
64568: LD_VAR 0 2
64572: RET
// export function FilterByTag ( units , tag ) ; begin
64573: LD_INT 0
64575: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64576: LD_ADDR_VAR 0 3
64580: PUSH
64581: LD_VAR 0 1
64585: PPUSH
64586: LD_INT 120
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PPUSH
64598: CALL_OW 72
64602: ST_TO_ADDR
// end ;
64603: LD_VAR 0 3
64607: RET
// export function IsDriver ( un ) ; begin
64608: LD_INT 0
64610: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64611: LD_ADDR_VAR 0 2
64615: PUSH
64616: LD_VAR 0 1
64620: PUSH
64621: LD_INT 55
64623: PUSH
64624: EMPTY
64625: LIST
64626: PPUSH
64627: CALL_OW 69
64631: IN
64632: ST_TO_ADDR
// end ;
64633: LD_VAR 0 2
64637: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64638: LD_INT 0
64640: PPUSH
64641: PPUSH
// list := [ ] ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: EMPTY
64648: ST_TO_ADDR
// case d of 0 :
64649: LD_VAR 0 3
64653: PUSH
64654: LD_INT 0
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64662
64660: GO 64795
64662: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64663: LD_ADDR_VAR 0 5
64667: PUSH
64668: LD_VAR 0 1
64672: PUSH
64673: LD_INT 4
64675: MINUS
64676: PUSH
64677: LD_VAR 0 2
64681: PUSH
64682: LD_INT 4
64684: MINUS
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: PUSH
64694: LD_VAR 0 1
64698: PUSH
64699: LD_INT 3
64701: MINUS
64702: PUSH
64703: LD_VAR 0 2
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: LIST
64715: PUSH
64716: LD_VAR 0 1
64720: PUSH
64721: LD_INT 4
64723: PLUS
64724: PUSH
64725: LD_VAR 0 2
64729: PUSH
64730: LD_INT 4
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: LIST
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: LD_INT 3
64745: PLUS
64746: PUSH
64747: LD_VAR 0 2
64751: PUSH
64752: LD_INT 3
64754: PLUS
64755: PUSH
64756: LD_INT 5
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: PUSH
64764: LD_VAR 0 1
64768: PUSH
64769: LD_VAR 0 2
64773: PUSH
64774: LD_INT 4
64776: PLUS
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: ST_TO_ADDR
// end ; 1 :
64793: GO 65493
64795: LD_INT 1
64797: DOUBLE
64798: EQUAL
64799: IFTRUE 64803
64801: GO 64936
64803: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64804: LD_ADDR_VAR 0 5
64808: PUSH
64809: LD_VAR 0 1
64813: PUSH
64814: LD_VAR 0 2
64818: PUSH
64819: LD_INT 4
64821: MINUS
64822: PUSH
64823: LD_INT 3
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: PUSH
64831: LD_VAR 0 1
64835: PUSH
64836: LD_INT 3
64838: MINUS
64839: PUSH
64840: LD_VAR 0 2
64844: PUSH
64845: LD_INT 3
64847: MINUS
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: PUSH
64857: LD_VAR 0 1
64861: PUSH
64862: LD_INT 4
64864: MINUS
64865: PUSH
64866: LD_VAR 0 2
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: PUSH
64879: LD_VAR 0 1
64883: PUSH
64884: LD_VAR 0 2
64888: PUSH
64889: LD_INT 3
64891: PLUS
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: PUSH
64901: LD_VAR 0 1
64905: PUSH
64906: LD_INT 4
64908: PLUS
64909: PUSH
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 4
64917: PLUS
64918: PUSH
64919: LD_INT 5
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// end ; 2 :
64934: GO 65493
64936: LD_INT 2
64938: DOUBLE
64939: EQUAL
64940: IFTRUE 64944
64942: GO 65073
64944: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64945: LD_ADDR_VAR 0 5
64949: PUSH
64950: LD_VAR 0 1
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 3
64962: MINUS
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_INT 4
64979: PLUS
64980: PUSH
64981: LD_VAR 0 2
64985: PUSH
64986: LD_INT 4
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: PUSH
64994: LD_VAR 0 1
64998: PUSH
64999: LD_VAR 0 2
65003: PUSH
65004: LD_INT 4
65006: PLUS
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: LD_VAR 0 1
65020: PUSH
65021: LD_INT 3
65023: MINUS
65024: PUSH
65025: LD_VAR 0 2
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: LD_VAR 0 1
65042: PUSH
65043: LD_INT 4
65045: MINUS
65046: PUSH
65047: LD_VAR 0 2
65051: PUSH
65052: LD_INT 4
65054: MINUS
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// end ; 3 :
65071: GO 65493
65073: LD_INT 3
65075: DOUBLE
65076: EQUAL
65077: IFTRUE 65081
65079: GO 65214
65081: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65082: LD_ADDR_VAR 0 5
65086: PUSH
65087: LD_VAR 0 1
65091: PUSH
65092: LD_INT 3
65094: PLUS
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: LD_INT 4
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_INT 4
65116: PLUS
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_INT 4
65125: PLUS
65126: PUSH
65127: LD_INT 5
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: PUSH
65135: LD_VAR 0 1
65139: PUSH
65140: LD_INT 4
65142: MINUS
65143: PUSH
65144: LD_VAR 0 2
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_VAR 0 2
65166: PUSH
65167: LD_INT 4
65169: MINUS
65170: PUSH
65171: LD_INT 3
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: PUSH
65179: LD_VAR 0 1
65183: PUSH
65184: LD_INT 3
65186: MINUS
65187: PUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_INT 3
65195: MINUS
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// end ; 4 :
65212: GO 65493
65214: LD_INT 4
65216: DOUBLE
65217: EQUAL
65218: IFTRUE 65222
65220: GO 65355
65222: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65223: LD_ADDR_VAR 0 5
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 4
65240: PLUS
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_INT 3
65257: PLUS
65258: PUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_INT 3
65266: PLUS
65267: PUSH
65268: LD_INT 5
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: PUSH
65276: LD_VAR 0 1
65280: PUSH
65281: LD_INT 4
65283: PLUS
65284: PUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_INT 4
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: PUSH
65298: LD_VAR 0 1
65302: PUSH
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 3
65310: MINUS
65311: PUSH
65312: LD_INT 3
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 4
65327: MINUS
65328: PUSH
65329: LD_VAR 0 2
65333: PUSH
65334: LD_INT 4
65336: MINUS
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// end ; 5 :
65353: GO 65493
65355: LD_INT 5
65357: DOUBLE
65358: EQUAL
65359: IFTRUE 65363
65361: GO 65492
65363: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65364: LD_ADDR_VAR 0 5
65368: PUSH
65369: LD_VAR 0 1
65373: PUSH
65374: LD_INT 4
65376: MINUS
65377: PUSH
65378: LD_VAR 0 2
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: PUSH
65391: LD_VAR 0 1
65395: PUSH
65396: LD_VAR 0 2
65400: PUSH
65401: LD_INT 4
65403: MINUS
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: PUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 4
65420: PLUS
65421: PUSH
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 4
65429: PLUS
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: PUSH
65439: LD_VAR 0 1
65443: PUSH
65444: LD_INT 3
65446: PLUS
65447: PUSH
65448: LD_VAR 0 2
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_VAR 0 2
65470: PUSH
65471: LD_INT 3
65473: PLUS
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: ST_TO_ADDR
// end ; end ;
65490: GO 65493
65492: POP
// result := list ;
65493: LD_ADDR_VAR 0 4
65497: PUSH
65498: LD_VAR 0 5
65502: ST_TO_ADDR
// end ;
65503: LD_VAR 0 4
65507: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65508: LD_INT 0
65510: PPUSH
65511: PPUSH
65512: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65513: LD_VAR 0 1
65517: NOT
65518: PUSH
65519: LD_VAR 0 2
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: LD_INT 2
65529: PUSH
65530: LD_INT 3
65532: PUSH
65533: LD_INT 4
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: IN
65542: NOT
65543: OR
65544: IFFALSE 65548
// exit ;
65546: GO 65640
// tmp := [ ] ;
65548: LD_ADDR_VAR 0 5
65552: PUSH
65553: EMPTY
65554: ST_TO_ADDR
// for i in units do
65555: LD_ADDR_VAR 0 4
65559: PUSH
65560: LD_VAR 0 1
65564: PUSH
65565: FOR_IN
65566: IFFALSE 65609
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65568: LD_ADDR_VAR 0 5
65572: PUSH
65573: LD_VAR 0 5
65577: PPUSH
65578: LD_VAR 0 5
65582: PUSH
65583: LD_INT 1
65585: PLUS
65586: PPUSH
65587: LD_VAR 0 4
65591: PPUSH
65592: LD_VAR 0 2
65596: PPUSH
65597: CALL_OW 259
65601: PPUSH
65602: CALL_OW 2
65606: ST_TO_ADDR
65607: GO 65565
65609: POP
65610: POP
// if not tmp then
65611: LD_VAR 0 5
65615: NOT
65616: IFFALSE 65620
// exit ;
65618: GO 65640
// result := SortListByListDesc ( units , tmp ) ;
65620: LD_ADDR_VAR 0 3
65624: PUSH
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 5
65634: PPUSH
65635: CALL_OW 77
65639: ST_TO_ADDR
// end ;
65640: LD_VAR 0 3
65644: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65645: LD_INT 0
65647: PPUSH
65648: PPUSH
65649: PPUSH
// result := false ;
65650: LD_ADDR_VAR 0 3
65654: PUSH
65655: LD_INT 0
65657: ST_TO_ADDR
// x := GetX ( building ) ;
65658: LD_ADDR_VAR 0 4
65662: PUSH
65663: LD_VAR 0 2
65667: PPUSH
65668: CALL_OW 250
65672: ST_TO_ADDR
// y := GetY ( building ) ;
65673: LD_ADDR_VAR 0 5
65677: PUSH
65678: LD_VAR 0 2
65682: PPUSH
65683: CALL_OW 251
65687: ST_TO_ADDR
// if not building or not x or not y then
65688: LD_VAR 0 2
65692: NOT
65693: PUSH
65694: LD_VAR 0 4
65698: NOT
65699: OR
65700: PUSH
65701: LD_VAR 0 5
65705: NOT
65706: OR
65707: IFFALSE 65711
// exit ;
65709: GO 65803
// if GetTaskList ( unit ) then
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: IFFALSE 65803
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65722: LD_STRING e
65724: PUSH
65725: LD_VAR 0 1
65729: PPUSH
65730: CALL_OW 437
65734: PUSH
65735: LD_INT 1
65737: ARRAY
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: EQUAL
65743: PUSH
65744: LD_VAR 0 4
65748: PUSH
65749: LD_VAR 0 1
65753: PPUSH
65754: CALL_OW 437
65758: PUSH
65759: LD_INT 1
65761: ARRAY
65762: PUSH
65763: LD_INT 2
65765: ARRAY
65766: EQUAL
65767: AND
65768: PUSH
65769: LD_VAR 0 5
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 437
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: PUSH
65788: LD_INT 3
65790: ARRAY
65791: EQUAL
65792: AND
65793: IFFALSE 65803
// result := true end ;
65795: LD_ADDR_VAR 0 3
65799: PUSH
65800: LD_INT 1
65802: ST_TO_ADDR
// end ;
65803: LD_VAR 0 3
65807: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65808: LD_INT 0
65810: PPUSH
// result := false ;
65811: LD_ADDR_VAR 0 4
65815: PUSH
65816: LD_INT 0
65818: ST_TO_ADDR
// if GetTaskList ( unit ) then
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 437
65828: IFFALSE 65911
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65830: LD_STRING M
65832: PUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 437
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: EQUAL
65851: PUSH
65852: LD_VAR 0 2
65856: PUSH
65857: LD_VAR 0 1
65861: PPUSH
65862: CALL_OW 437
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: PUSH
65871: LD_INT 2
65873: ARRAY
65874: EQUAL
65875: AND
65876: PUSH
65877: LD_VAR 0 3
65881: PUSH
65882: LD_VAR 0 1
65886: PPUSH
65887: CALL_OW 437
65891: PUSH
65892: LD_INT 1
65894: ARRAY
65895: PUSH
65896: LD_INT 3
65898: ARRAY
65899: EQUAL
65900: AND
65901: IFFALSE 65911
// result := true ;
65903: LD_ADDR_VAR 0 4
65907: PUSH
65908: LD_INT 1
65910: ST_TO_ADDR
// end ; end ;
65911: LD_VAR 0 4
65915: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65916: LD_INT 0
65918: PPUSH
65919: PPUSH
65920: PPUSH
65921: PPUSH
// if not unit or not area then
65922: LD_VAR 0 1
65926: NOT
65927: PUSH
65928: LD_VAR 0 2
65932: NOT
65933: OR
65934: IFFALSE 65938
// exit ;
65936: GO 66102
// tmp := AreaToList ( area , i ) ;
65938: LD_ADDR_VAR 0 6
65942: PUSH
65943: LD_VAR 0 2
65947: PPUSH
65948: LD_VAR 0 5
65952: PPUSH
65953: CALL_OW 517
65957: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65958: LD_ADDR_VAR 0 5
65962: PUSH
65963: DOUBLE
65964: LD_INT 1
65966: DEC
65967: ST_TO_ADDR
65968: LD_VAR 0 6
65972: PUSH
65973: LD_INT 1
65975: ARRAY
65976: PUSH
65977: FOR_TO
65978: IFFALSE 66100
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65980: LD_ADDR_VAR 0 7
65984: PUSH
65985: LD_VAR 0 6
65989: PUSH
65990: LD_INT 1
65992: ARRAY
65993: PUSH
65994: LD_VAR 0 5
65998: ARRAY
65999: PUSH
66000: LD_VAR 0 6
66004: PUSH
66005: LD_INT 2
66007: ARRAY
66008: PUSH
66009: LD_VAR 0 5
66013: ARRAY
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66019: LD_VAR 0 7
66023: PUSH
66024: LD_INT 1
66026: ARRAY
66027: PPUSH
66028: LD_VAR 0 7
66032: PUSH
66033: LD_INT 2
66035: ARRAY
66036: PPUSH
66037: CALL_OW 428
66041: PUSH
66042: LD_INT 0
66044: EQUAL
66045: IFFALSE 66098
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66047: LD_VAR 0 1
66051: PPUSH
66052: LD_VAR 0 7
66056: PUSH
66057: LD_INT 1
66059: ARRAY
66060: PPUSH
66061: LD_VAR 0 7
66065: PUSH
66066: LD_INT 2
66068: ARRAY
66069: PPUSH
66070: LD_VAR 0 3
66074: PPUSH
66075: CALL_OW 48
// result := IsPlaced ( unit ) ;
66079: LD_ADDR_VAR 0 4
66083: PUSH
66084: LD_VAR 0 1
66088: PPUSH
66089: CALL_OW 305
66093: ST_TO_ADDR
// exit ;
66094: POP
66095: POP
66096: GO 66102
// end ; end ;
66098: GO 65977
66100: POP
66101: POP
// end ;
66102: LD_VAR 0 4
66106: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66107: LD_INT 0
66109: PPUSH
66110: PPUSH
66111: PPUSH
// if not side or side > 8 then
66112: LD_VAR 0 1
66116: NOT
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 8
66125: GREATER
66126: OR
66127: IFFALSE 66131
// exit ;
66129: GO 66318
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66131: LD_ADDR_VAR 0 4
66135: PUSH
66136: LD_INT 22
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 21
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PPUSH
66162: CALL_OW 69
66166: ST_TO_ADDR
// if not tmp then
66167: LD_VAR 0 4
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66318
// enable_addtolog := true ;
66176: LD_ADDR_OWVAR 81
66180: PUSH
66181: LD_INT 1
66183: ST_TO_ADDR
// AddToLog ( [ ) ;
66184: LD_STRING [
66186: PPUSH
66187: CALL_OW 561
// for i in tmp do
66191: LD_ADDR_VAR 0 3
66195: PUSH
66196: LD_VAR 0 4
66200: PUSH
66201: FOR_IN
66202: IFFALSE 66309
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66204: LD_STRING [
66206: PUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: CALL_OW 266
66216: STR
66217: PUSH
66218: LD_STRING , 
66220: STR
66221: PUSH
66222: LD_VAR 0 3
66226: PPUSH
66227: CALL_OW 250
66231: STR
66232: PUSH
66233: LD_STRING , 
66235: STR
66236: PUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: CALL_OW 251
66246: STR
66247: PUSH
66248: LD_STRING , 
66250: STR
66251: PUSH
66252: LD_VAR 0 3
66256: PPUSH
66257: CALL_OW 254
66261: STR
66262: PUSH
66263: LD_STRING , 
66265: STR
66266: PUSH
66267: LD_VAR 0 3
66271: PPUSH
66272: LD_INT 1
66274: PPUSH
66275: CALL_OW 268
66279: STR
66280: PUSH
66281: LD_STRING , 
66283: STR
66284: PUSH
66285: LD_VAR 0 3
66289: PPUSH
66290: LD_INT 2
66292: PPUSH
66293: CALL_OW 268
66297: STR
66298: PUSH
66299: LD_STRING ],
66301: STR
66302: PPUSH
66303: CALL_OW 561
// end ;
66307: GO 66201
66309: POP
66310: POP
// AddToLog ( ]; ) ;
66311: LD_STRING ];
66313: PPUSH
66314: CALL_OW 561
// end ;
66318: LD_VAR 0 2
66322: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66323: LD_INT 0
66325: PPUSH
66326: PPUSH
66327: PPUSH
66328: PPUSH
66329: PPUSH
// if not area or not rate or not max then
66330: LD_VAR 0 1
66334: NOT
66335: PUSH
66336: LD_VAR 0 2
66340: NOT
66341: OR
66342: PUSH
66343: LD_VAR 0 4
66347: NOT
66348: OR
66349: IFFALSE 66353
// exit ;
66351: GO 66542
// while 1 do
66353: LD_INT 1
66355: IFFALSE 66542
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66357: LD_ADDR_VAR 0 9
66361: PUSH
66362: LD_VAR 0 1
66366: PPUSH
66367: LD_INT 1
66369: PPUSH
66370: CALL_OW 287
66374: PUSH
66375: LD_INT 10
66377: MUL
66378: ST_TO_ADDR
// r := rate / 10 ;
66379: LD_ADDR_VAR 0 7
66383: PUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_INT 10
66391: DIVREAL
66392: ST_TO_ADDR
// time := 1 1$00 ;
66393: LD_ADDR_VAR 0 8
66397: PUSH
66398: LD_INT 2100
66400: ST_TO_ADDR
// if amount < min then
66401: LD_VAR 0 9
66405: PUSH
66406: LD_VAR 0 3
66410: LESS
66411: IFFALSE 66429
// r := r * 2 else
66413: LD_ADDR_VAR 0 7
66417: PUSH
66418: LD_VAR 0 7
66422: PUSH
66423: LD_INT 2
66425: MUL
66426: ST_TO_ADDR
66427: GO 66455
// if amount > max then
66429: LD_VAR 0 9
66433: PUSH
66434: LD_VAR 0 4
66438: GREATER
66439: IFFALSE 66455
// r := r / 2 ;
66441: LD_ADDR_VAR 0 7
66445: PUSH
66446: LD_VAR 0 7
66450: PUSH
66451: LD_INT 2
66453: DIVREAL
66454: ST_TO_ADDR
// time := time / r ;
66455: LD_ADDR_VAR 0 8
66459: PUSH
66460: LD_VAR 0 8
66464: PUSH
66465: LD_VAR 0 7
66469: DIVREAL
66470: ST_TO_ADDR
// if time < 0 then
66471: LD_VAR 0 8
66475: PUSH
66476: LD_INT 0
66478: LESS
66479: IFFALSE 66496
// time := time * - 1 ;
66481: LD_ADDR_VAR 0 8
66485: PUSH
66486: LD_VAR 0 8
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: MUL
66495: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66496: LD_VAR 0 8
66500: PUSH
66501: LD_INT 35
66503: PPUSH
66504: LD_INT 875
66506: PPUSH
66507: CALL_OW 12
66511: PLUS
66512: PPUSH
66513: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66517: LD_INT 1
66519: PPUSH
66520: LD_INT 5
66522: PPUSH
66523: CALL_OW 12
66527: PPUSH
66528: LD_VAR 0 1
66532: PPUSH
66533: LD_INT 1
66535: PPUSH
66536: CALL_OW 55
// end ;
66540: GO 66353
// end ;
66542: LD_VAR 0 5
66546: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66547: LD_INT 0
66549: PPUSH
66550: PPUSH
66551: PPUSH
66552: PPUSH
66553: PPUSH
66554: PPUSH
66555: PPUSH
66556: PPUSH
// if not turrets or not factories then
66557: LD_VAR 0 1
66561: NOT
66562: PUSH
66563: LD_VAR 0 2
66567: NOT
66568: OR
66569: IFFALSE 66573
// exit ;
66571: GO 66880
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66573: LD_ADDR_VAR 0 10
66577: PUSH
66578: LD_INT 5
66580: PUSH
66581: LD_INT 6
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 4
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 3
66600: PUSH
66601: LD_INT 5
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 24
66615: PUSH
66616: LD_INT 25
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 23
66625: PUSH
66626: LD_INT 27
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 42
66639: PUSH
66640: LD_INT 43
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 44
66649: PUSH
66650: LD_INT 46
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 45
66659: PUSH
66660: LD_INT 47
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// result := [ ] ;
66677: LD_ADDR_VAR 0 3
66681: PUSH
66682: EMPTY
66683: ST_TO_ADDR
// for i in turrets do
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: LD_VAR 0 1
66693: PUSH
66694: FOR_IN
66695: IFFALSE 66878
// begin nat := GetNation ( i ) ;
66697: LD_ADDR_VAR 0 7
66701: PUSH
66702: LD_VAR 0 4
66706: PPUSH
66707: CALL_OW 248
66711: ST_TO_ADDR
// weapon := 0 ;
66712: LD_ADDR_VAR 0 8
66716: PUSH
66717: LD_INT 0
66719: ST_TO_ADDR
// if not nat then
66720: LD_VAR 0 7
66724: NOT
66725: IFFALSE 66729
// continue ;
66727: GO 66694
// for j in list [ nat ] do
66729: LD_ADDR_VAR 0 5
66733: PUSH
66734: LD_VAR 0 10
66738: PUSH
66739: LD_VAR 0 7
66743: ARRAY
66744: PUSH
66745: FOR_IN
66746: IFFALSE 66787
// if GetBWeapon ( i ) = j [ 1 ] then
66748: LD_VAR 0 4
66752: PPUSH
66753: CALL_OW 269
66757: PUSH
66758: LD_VAR 0 5
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: EQUAL
66767: IFFALSE 66785
// begin weapon := j [ 2 ] ;
66769: LD_ADDR_VAR 0 8
66773: PUSH
66774: LD_VAR 0 5
66778: PUSH
66779: LD_INT 2
66781: ARRAY
66782: ST_TO_ADDR
// break ;
66783: GO 66787
// end ;
66785: GO 66745
66787: POP
66788: POP
// if not weapon then
66789: LD_VAR 0 8
66793: NOT
66794: IFFALSE 66798
// continue ;
66796: GO 66694
// for k in factories do
66798: LD_ADDR_VAR 0 6
66802: PUSH
66803: LD_VAR 0 2
66807: PUSH
66808: FOR_IN
66809: IFFALSE 66874
// begin weapons := AvailableWeaponList ( k ) ;
66811: LD_ADDR_VAR 0 9
66815: PUSH
66816: LD_VAR 0 6
66820: PPUSH
66821: CALL_OW 478
66825: ST_TO_ADDR
// if not weapons then
66826: LD_VAR 0 9
66830: NOT
66831: IFFALSE 66835
// continue ;
66833: GO 66808
// if weapon in weapons then
66835: LD_VAR 0 8
66839: PUSH
66840: LD_VAR 0 9
66844: IN
66845: IFFALSE 66872
// begin result := [ i , weapon ] ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 4
66856: PUSH
66857: LD_VAR 0 8
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: ST_TO_ADDR
// exit ;
66866: POP
66867: POP
66868: POP
66869: POP
66870: GO 66880
// end ; end ;
66872: GO 66808
66874: POP
66875: POP
// end ;
66876: GO 66694
66878: POP
66879: POP
// end ;
66880: LD_VAR 0 3
66884: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66885: LD_INT 0
66887: PPUSH
// if not side or side > 8 then
66888: LD_VAR 0 3
66892: NOT
66893: PUSH
66894: LD_VAR 0 3
66898: PUSH
66899: LD_INT 8
66901: GREATER
66902: OR
66903: IFFALSE 66907
// exit ;
66905: GO 66966
// if not range then
66907: LD_VAR 0 4
66911: NOT
66912: IFFALSE 66923
// range := - 12 ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_INT 12
66921: NEG
66922: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66923: LD_VAR 0 1
66927: PPUSH
66928: LD_VAR 0 2
66932: PPUSH
66933: LD_VAR 0 3
66937: PPUSH
66938: LD_VAR 0 4
66942: PPUSH
66943: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66947: LD_VAR 0 1
66951: PPUSH
66952: LD_VAR 0 2
66956: PPUSH
66957: LD_VAR 0 3
66961: PPUSH
66962: CALL_OW 331
// end ;
66966: LD_VAR 0 5
66970: RET
// export function Video ( mode ) ; begin
66971: LD_INT 0
66973: PPUSH
// ingame_video = mode ;
66974: LD_ADDR_OWVAR 52
66978: PUSH
66979: LD_VAR 0 1
66983: ST_TO_ADDR
// interface_hidden = mode ;
66984: LD_ADDR_OWVAR 54
66988: PUSH
66989: LD_VAR 0 1
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 2
66998: RET
// export function Join ( array , element ) ; begin
66999: LD_INT 0
67001: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 1
67019: PLUS
67020: PPUSH
67021: LD_VAR 0 2
67025: PPUSH
67026: CALL_OW 1
67030: ST_TO_ADDR
// end ;
67031: LD_VAR 0 3
67035: RET
// export function JoinUnion ( array , element ) ; begin
67036: LD_INT 0
67038: PPUSH
// result := array union element ;
67039: LD_ADDR_VAR 0 3
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_VAR 0 2
67053: UNION
67054: ST_TO_ADDR
// end ;
67055: LD_VAR 0 3
67059: RET
// export function GetBehemoths ( side ) ; begin
67060: LD_INT 0
67062: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67063: LD_ADDR_VAR 0 2
67067: PUSH
67068: LD_INT 22
67070: PUSH
67071: LD_VAR 0 1
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 31
67082: PUSH
67083: LD_INT 25
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PPUSH
67094: CALL_OW 69
67098: ST_TO_ADDR
// end ;
67099: LD_VAR 0 2
67103: RET
// export function Shuffle ( array ) ; var i , index ; begin
67104: LD_INT 0
67106: PPUSH
67107: PPUSH
67108: PPUSH
// result := [ ] ;
67109: LD_ADDR_VAR 0 2
67113: PUSH
67114: EMPTY
67115: ST_TO_ADDR
// if not array then
67116: LD_VAR 0 1
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67224
// Randomize ;
67125: CALL_OW 10
// for i = array downto 1 do
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: DOUBLE
67135: LD_VAR 0 1
67139: INC
67140: ST_TO_ADDR
67141: LD_INT 1
67143: PUSH
67144: FOR_DOWNTO
67145: IFFALSE 67222
// begin index := rand ( 1 , array ) ;
67147: LD_ADDR_VAR 0 4
67151: PUSH
67152: LD_INT 1
67154: PPUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 12
67164: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67165: LD_ADDR_VAR 0 2
67169: PUSH
67170: LD_VAR 0 2
67174: PPUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 1
67182: PLUS
67183: PPUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_VAR 0 4
67193: ARRAY
67194: PPUSH
67195: CALL_OW 2
67199: ST_TO_ADDR
// array := Delete ( array , index ) ;
67200: LD_ADDR_VAR 0 1
67204: PUSH
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: CALL_OW 3
67219: ST_TO_ADDR
// end ;
67220: GO 67144
67222: POP
67223: POP
// end ;
67224: LD_VAR 0 2
67228: RET
// export function GetBaseMaterials ( base ) ; begin
67229: LD_INT 0
67231: PPUSH
// result := [ 0 , 0 , 0 ] ;
67232: LD_ADDR_VAR 0 2
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// if not base then
67251: LD_VAR 0 1
67255: NOT
67256: IFFALSE 67260
// exit ;
67258: GO 67309
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_VAR 0 1
67269: PPUSH
67270: LD_INT 1
67272: PPUSH
67273: CALL_OW 275
67277: PUSH
67278: LD_VAR 0 1
67282: PPUSH
67283: LD_INT 2
67285: PPUSH
67286: CALL_OW 275
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_INT 3
67298: PPUSH
67299: CALL_OW 275
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// end ;
67309: LD_VAR 0 2
67313: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67314: LD_INT 0
67316: PPUSH
67317: PPUSH
// result := array ;
67318: LD_ADDR_VAR 0 3
67322: PUSH
67323: LD_VAR 0 1
67327: ST_TO_ADDR
// if size > 0 then
67328: LD_VAR 0 2
67332: PUSH
67333: LD_INT 0
67335: GREATER
67336: IFFALSE 67382
// for i := array downto size do
67338: LD_ADDR_VAR 0 4
67342: PUSH
67343: DOUBLE
67344: LD_VAR 0 1
67348: INC
67349: ST_TO_ADDR
67350: LD_VAR 0 2
67354: PUSH
67355: FOR_DOWNTO
67356: IFFALSE 67380
// result := Delete ( result , result ) ;
67358: LD_ADDR_VAR 0 3
67362: PUSH
67363: LD_VAR 0 3
67367: PPUSH
67368: LD_VAR 0 3
67372: PPUSH
67373: CALL_OW 3
67377: ST_TO_ADDR
67378: GO 67355
67380: POP
67381: POP
// end ;
67382: LD_VAR 0 3
67386: RET
// export function ComExit ( unit ) ; var tmp ; begin
67387: LD_INT 0
67389: PPUSH
67390: PPUSH
// if not IsInUnit ( unit ) then
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 310
67400: NOT
67401: IFFALSE 67405
// exit ;
67403: GO 67465
// tmp := IsInUnit ( unit ) ;
67405: LD_ADDR_VAR 0 3
67409: PUSH
67410: LD_VAR 0 1
67414: PPUSH
67415: CALL_OW 310
67419: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67420: LD_VAR 0 3
67424: PPUSH
67425: CALL_OW 247
67429: PUSH
67430: LD_INT 2
67432: EQUAL
67433: IFFALSE 67446
// ComExitVehicle ( unit ) else
67435: LD_VAR 0 1
67439: PPUSH
67440: CALL_OW 121
67444: GO 67455
// ComExitBuilding ( unit ) ;
67446: LD_VAR 0 1
67450: PPUSH
67451: CALL_OW 122
// result := tmp ;
67455: LD_ADDR_VAR 0 2
67459: PUSH
67460: LD_VAR 0 3
67464: ST_TO_ADDR
// end ;
67465: LD_VAR 0 2
67469: RET
// export function ComExitAll ( units ) ; var i ; begin
67470: LD_INT 0
67472: PPUSH
67473: PPUSH
// if not units then
67474: LD_VAR 0 1
67478: NOT
67479: IFFALSE 67483
// exit ;
67481: GO 67509
// for i in units do
67483: LD_ADDR_VAR 0 3
67487: PUSH
67488: LD_VAR 0 1
67492: PUSH
67493: FOR_IN
67494: IFFALSE 67507
// ComExit ( i ) ;
67496: LD_VAR 0 3
67500: PPUSH
67501: CALL 67387 0 1
67505: GO 67493
67507: POP
67508: POP
// end ;
67509: LD_VAR 0 2
67513: RET
// export function ResetHc ; begin
67514: LD_INT 0
67516: PPUSH
// InitHc ;
67517: CALL_OW 19
// hc_importance := 0 ;
67521: LD_ADDR_OWVAR 32
67525: PUSH
67526: LD_INT 0
67528: ST_TO_ADDR
// end ;
67529: LD_VAR 0 1
67533: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67539: LD_ADDR_VAR 0 6
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: LD_VAR 0 3
67553: PLUS
67554: PUSH
67555: LD_INT 2
67557: DIV
67558: ST_TO_ADDR
// if _x < 0 then
67559: LD_VAR 0 6
67563: PUSH
67564: LD_INT 0
67566: LESS
67567: IFFALSE 67584
// _x := _x * - 1 ;
67569: LD_ADDR_VAR 0 6
67573: PUSH
67574: LD_VAR 0 6
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: MUL
67583: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67584: LD_ADDR_VAR 0 7
67588: PUSH
67589: LD_VAR 0 2
67593: PUSH
67594: LD_VAR 0 4
67598: PLUS
67599: PUSH
67600: LD_INT 2
67602: DIV
67603: ST_TO_ADDR
// if _y < 0 then
67604: LD_VAR 0 7
67608: PUSH
67609: LD_INT 0
67611: LESS
67612: IFFALSE 67629
// _y := _y * - 1 ;
67614: LD_ADDR_VAR 0 7
67618: PUSH
67619: LD_VAR 0 7
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: MUL
67628: ST_TO_ADDR
// result := [ _x , _y ] ;
67629: LD_ADDR_VAR 0 5
67633: PUSH
67634: LD_VAR 0 6
67638: PUSH
67639: LD_VAR 0 7
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: ST_TO_ADDR
// end ;
67648: LD_VAR 0 5
67652: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67653: LD_INT 0
67655: PPUSH
67656: PPUSH
67657: PPUSH
67658: PPUSH
// task := GetTaskList ( unit ) ;
67659: LD_ADDR_VAR 0 7
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: CALL_OW 437
67673: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67674: LD_VAR 0 7
67678: NOT
67679: PUSH
67680: LD_VAR 0 1
67684: PPUSH
67685: LD_VAR 0 2
67689: PPUSH
67690: CALL_OW 308
67694: NOT
67695: AND
67696: IFFALSE 67700
// exit ;
67698: GO 67818
// if IsInArea ( unit , area ) then
67700: LD_VAR 0 1
67704: PPUSH
67705: LD_VAR 0 2
67709: PPUSH
67710: CALL_OW 308
67714: IFFALSE 67732
// begin ComMoveToArea ( unit , goAway ) ;
67716: LD_VAR 0 1
67720: PPUSH
67721: LD_VAR 0 3
67725: PPUSH
67726: CALL_OW 113
// exit ;
67730: GO 67818
// end ; if task [ 1 ] [ 1 ] <> M then
67732: LD_VAR 0 7
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_INT 1
67743: ARRAY
67744: PUSH
67745: LD_STRING M
67747: NONEQUAL
67748: IFFALSE 67752
// exit ;
67750: GO 67818
// x := task [ 1 ] [ 2 ] ;
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: LD_VAR 0 7
67761: PUSH
67762: LD_INT 1
67764: ARRAY
67765: PUSH
67766: LD_INT 2
67768: ARRAY
67769: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67770: LD_ADDR_VAR 0 6
67774: PUSH
67775: LD_VAR 0 7
67779: PUSH
67780: LD_INT 1
67782: ARRAY
67783: PUSH
67784: LD_INT 3
67786: ARRAY
67787: ST_TO_ADDR
// if InArea ( x , y , area ) then
67788: LD_VAR 0 5
67792: PPUSH
67793: LD_VAR 0 6
67797: PPUSH
67798: LD_VAR 0 2
67802: PPUSH
67803: CALL_OW 309
67807: IFFALSE 67818
// ComStop ( unit ) ;
67809: LD_VAR 0 1
67813: PPUSH
67814: CALL_OW 141
// end ;
67818: LD_VAR 0 4
67822: RET
// export function Abs ( value ) ; begin
67823: LD_INT 0
67825: PPUSH
// result := value ;
67826: LD_ADDR_VAR 0 2
67830: PUSH
67831: LD_VAR 0 1
67835: ST_TO_ADDR
// if value < 0 then
67836: LD_VAR 0 1
67840: PUSH
67841: LD_INT 0
67843: LESS
67844: IFFALSE 67861
// result := value * - 1 ;
67846: LD_ADDR_VAR 0 2
67850: PUSH
67851: LD_VAR 0 1
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: MUL
67860: ST_TO_ADDR
// end ;
67861: LD_VAR 0 2
67865: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67866: LD_INT 0
67868: PPUSH
67869: PPUSH
67870: PPUSH
67871: PPUSH
67872: PPUSH
67873: PPUSH
67874: PPUSH
67875: PPUSH
// if not unit or not building then
67876: LD_VAR 0 1
67880: NOT
67881: PUSH
67882: LD_VAR 0 2
67886: NOT
67887: OR
67888: IFFALSE 67892
// exit ;
67890: GO 68118
// x := GetX ( building ) ;
67892: LD_ADDR_VAR 0 4
67896: PUSH
67897: LD_VAR 0 2
67901: PPUSH
67902: CALL_OW 250
67906: ST_TO_ADDR
// y := GetY ( building ) ;
67907: LD_ADDR_VAR 0 6
67911: PUSH
67912: LD_VAR 0 2
67916: PPUSH
67917: CALL_OW 251
67921: ST_TO_ADDR
// d := GetDir ( building ) ;
67922: LD_ADDR_VAR 0 8
67926: PUSH
67927: LD_VAR 0 2
67931: PPUSH
67932: CALL_OW 254
67936: ST_TO_ADDR
// r := 4 ;
67937: LD_ADDR_VAR 0 9
67941: PUSH
67942: LD_INT 4
67944: ST_TO_ADDR
// for i := 1 to 5 do
67945: LD_ADDR_VAR 0 10
67949: PUSH
67950: DOUBLE
67951: LD_INT 1
67953: DEC
67954: ST_TO_ADDR
67955: LD_INT 5
67957: PUSH
67958: FOR_TO
67959: IFFALSE 68116
// begin _x := ShiftX ( x , d , r + i ) ;
67961: LD_ADDR_VAR 0 5
67965: PUSH
67966: LD_VAR 0 4
67970: PPUSH
67971: LD_VAR 0 8
67975: PPUSH
67976: LD_VAR 0 9
67980: PUSH
67981: LD_VAR 0 10
67985: PLUS
67986: PPUSH
67987: CALL_OW 272
67991: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67992: LD_ADDR_VAR 0 7
67996: PUSH
67997: LD_VAR 0 6
68001: PPUSH
68002: LD_VAR 0 8
68006: PPUSH
68007: LD_VAR 0 9
68011: PUSH
68012: LD_VAR 0 10
68016: PLUS
68017: PPUSH
68018: CALL_OW 273
68022: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68023: LD_VAR 0 5
68027: PPUSH
68028: LD_VAR 0 7
68032: PPUSH
68033: CALL_OW 488
68037: PUSH
68038: LD_VAR 0 5
68042: PPUSH
68043: LD_VAR 0 7
68047: PPUSH
68048: CALL_OW 428
68052: PPUSH
68053: CALL_OW 247
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: IN
68068: NOT
68069: AND
68070: IFFALSE 68114
// begin ComMoveXY ( unit , _x , _y ) ;
68072: LD_VAR 0 1
68076: PPUSH
68077: LD_VAR 0 5
68081: PPUSH
68082: LD_VAR 0 7
68086: PPUSH
68087: CALL_OW 111
// result := [ _x , _y ] ;
68091: LD_ADDR_VAR 0 3
68095: PUSH
68096: LD_VAR 0 5
68100: PUSH
68101: LD_VAR 0 7
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// exit ;
68110: POP
68111: POP
68112: GO 68118
// end ; end ;
68114: GO 67958
68116: POP
68117: POP
// end ;
68118: LD_VAR 0 3
68122: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68123: LD_INT 0
68125: PPUSH
68126: PPUSH
68127: PPUSH
// result := 0 ;
68128: LD_ADDR_VAR 0 3
68132: PUSH
68133: LD_INT 0
68135: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68136: LD_VAR 0 1
68140: PUSH
68141: LD_INT 0
68143: LESS
68144: PUSH
68145: LD_VAR 0 1
68149: PUSH
68150: LD_INT 8
68152: GREATER
68153: OR
68154: PUSH
68155: LD_VAR 0 2
68159: PUSH
68160: LD_INT 0
68162: LESS
68163: OR
68164: PUSH
68165: LD_VAR 0 2
68169: PUSH
68170: LD_INT 8
68172: GREATER
68173: OR
68174: IFFALSE 68178
// exit ;
68176: GO 68253
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68178: LD_ADDR_VAR 0 4
68182: PUSH
68183: LD_INT 22
68185: PUSH
68186: LD_VAR 0 2
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PPUSH
68195: CALL_OW 69
68199: PUSH
68200: FOR_IN
68201: IFFALSE 68251
// begin un := UnitShoot ( i ) ;
68203: LD_ADDR_VAR 0 5
68207: PUSH
68208: LD_VAR 0 4
68212: PPUSH
68213: CALL_OW 504
68217: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68218: LD_VAR 0 5
68222: PPUSH
68223: CALL_OW 255
68227: PUSH
68228: LD_VAR 0 1
68232: EQUAL
68233: IFFALSE 68249
// begin result := un ;
68235: LD_ADDR_VAR 0 3
68239: PUSH
68240: LD_VAR 0 5
68244: ST_TO_ADDR
// exit ;
68245: POP
68246: POP
68247: GO 68253
// end ; end ;
68249: GO 68200
68251: POP
68252: POP
// end ;
68253: LD_VAR 0 3
68257: RET
// export function GetCargoBay ( units ) ; begin
68258: LD_INT 0
68260: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68261: LD_ADDR_VAR 0 2
68265: PUSH
68266: LD_VAR 0 1
68270: PPUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 34
68276: PUSH
68277: LD_INT 12
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 34
68286: PUSH
68287: LD_INT 51
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 34
68296: PUSH
68297: LD_INT 32
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 34
68306: PUSH
68307: LD_EXP 106
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: PPUSH
68323: CALL_OW 72
68327: ST_TO_ADDR
// end ;
68328: LD_VAR 0 2
68332: RET
// export function Negate ( value ) ; begin
68333: LD_INT 0
68335: PPUSH
// result := not value ;
68336: LD_ADDR_VAR 0 2
68340: PUSH
68341: LD_VAR 0 1
68345: NOT
68346: ST_TO_ADDR
// end ;
68347: LD_VAR 0 2
68351: RET
// export function Inc ( value ) ; begin
68352: LD_INT 0
68354: PPUSH
// result := value + 1 ;
68355: LD_ADDR_VAR 0 2
68359: PUSH
68360: LD_VAR 0 1
68364: PUSH
68365: LD_INT 1
68367: PLUS
68368: ST_TO_ADDR
// end ;
68369: LD_VAR 0 2
68373: RET
// export function Dec ( value ) ; begin
68374: LD_INT 0
68376: PPUSH
// result := value - 1 ;
68377: LD_ADDR_VAR 0 2
68381: PUSH
68382: LD_VAR 0 1
68386: PUSH
68387: LD_INT 1
68389: MINUS
68390: ST_TO_ADDR
// end ;
68391: LD_VAR 0 2
68395: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68396: LD_INT 0
68398: PPUSH
68399: PPUSH
68400: PPUSH
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68406: LD_VAR 0 1
68410: PPUSH
68411: LD_VAR 0 2
68415: PPUSH
68416: CALL_OW 488
68420: NOT
68421: PUSH
68422: LD_VAR 0 3
68426: PPUSH
68427: LD_VAR 0 4
68431: PPUSH
68432: CALL_OW 488
68436: NOT
68437: OR
68438: IFFALSE 68451
// begin result := - 1 ;
68440: LD_ADDR_VAR 0 5
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: ST_TO_ADDR
// exit ;
68449: GO 68686
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68451: LD_ADDR_VAR 0 12
68455: PUSH
68456: LD_VAR 0 1
68460: PPUSH
68461: LD_VAR 0 2
68465: PPUSH
68466: LD_VAR 0 3
68470: PPUSH
68471: LD_VAR 0 4
68475: PPUSH
68476: CALL 67534 0 4
68480: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68481: LD_ADDR_VAR 0 11
68485: PUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: LD_VAR 0 2
68495: PPUSH
68496: LD_VAR 0 12
68500: PUSH
68501: LD_INT 1
68503: ARRAY
68504: PPUSH
68505: LD_VAR 0 12
68509: PUSH
68510: LD_INT 2
68512: ARRAY
68513: PPUSH
68514: CALL_OW 298
68518: ST_TO_ADDR
// distance := 9999 ;
68519: LD_ADDR_VAR 0 10
68523: PUSH
68524: LD_INT 9999
68526: ST_TO_ADDR
// for i := 0 to 5 do
68527: LD_ADDR_VAR 0 6
68531: PUSH
68532: DOUBLE
68533: LD_INT 0
68535: DEC
68536: ST_TO_ADDR
68537: LD_INT 5
68539: PUSH
68540: FOR_TO
68541: IFFALSE 68684
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68543: LD_ADDR_VAR 0 7
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: LD_VAR 0 6
68557: PPUSH
68558: LD_VAR 0 11
68562: PPUSH
68563: CALL_OW 272
68567: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68568: LD_ADDR_VAR 0 8
68572: PUSH
68573: LD_VAR 0 2
68577: PPUSH
68578: LD_VAR 0 6
68582: PPUSH
68583: LD_VAR 0 11
68587: PPUSH
68588: CALL_OW 273
68592: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68593: LD_VAR 0 7
68597: PPUSH
68598: LD_VAR 0 8
68602: PPUSH
68603: CALL_OW 488
68607: NOT
68608: IFFALSE 68612
// continue ;
68610: GO 68540
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68612: LD_ADDR_VAR 0 9
68616: PUSH
68617: LD_VAR 0 12
68621: PUSH
68622: LD_INT 1
68624: ARRAY
68625: PPUSH
68626: LD_VAR 0 12
68630: PUSH
68631: LD_INT 2
68633: ARRAY
68634: PPUSH
68635: LD_VAR 0 7
68639: PPUSH
68640: LD_VAR 0 8
68644: PPUSH
68645: CALL_OW 298
68649: ST_TO_ADDR
// if tmp < distance then
68650: LD_VAR 0 9
68654: PUSH
68655: LD_VAR 0 10
68659: LESS
68660: IFFALSE 68682
// begin result := i ;
68662: LD_ADDR_VAR 0 5
68666: PUSH
68667: LD_VAR 0 6
68671: ST_TO_ADDR
// distance := tmp ;
68672: LD_ADDR_VAR 0 10
68676: PUSH
68677: LD_VAR 0 9
68681: ST_TO_ADDR
// end ; end ;
68682: GO 68540
68684: POP
68685: POP
// end ;
68686: LD_VAR 0 5
68690: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68691: LD_INT 0
68693: PPUSH
68694: PPUSH
// if not driver or not IsInUnit ( driver ) then
68695: LD_VAR 0 1
68699: NOT
68700: PUSH
68701: LD_VAR 0 1
68705: PPUSH
68706: CALL_OW 310
68710: NOT
68711: OR
68712: IFFALSE 68716
// exit ;
68714: GO 68806
// vehicle := IsInUnit ( driver ) ;
68716: LD_ADDR_VAR 0 3
68720: PUSH
68721: LD_VAR 0 1
68725: PPUSH
68726: CALL_OW 310
68730: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68731: LD_VAR 0 1
68735: PPUSH
68736: LD_STRING \
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: PUSH
68766: LD_STRING E
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_VAR 0 3
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PPUSH
68802: CALL_OW 446
// end ;
68806: LD_VAR 0 2
68810: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68811: LD_INT 0
68813: PPUSH
68814: PPUSH
// if not driver or not IsInUnit ( driver ) then
68815: LD_VAR 0 1
68819: NOT
68820: PUSH
68821: LD_VAR 0 1
68825: PPUSH
68826: CALL_OW 310
68830: NOT
68831: OR
68832: IFFALSE 68836
// exit ;
68834: GO 68926
// vehicle := IsInUnit ( driver ) ;
68836: LD_ADDR_VAR 0 3
68840: PUSH
68841: LD_VAR 0 1
68845: PPUSH
68846: CALL_OW 310
68850: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68851: LD_VAR 0 1
68855: PPUSH
68856: LD_STRING \
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: PUSH
68886: LD_STRING E
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_VAR 0 3
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PPUSH
68922: CALL_OW 447
// end ;
68926: LD_VAR 0 2
68930: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
// tmp := [ ] ;
68936: LD_ADDR_VAR 0 5
68940: PUSH
68941: EMPTY
68942: ST_TO_ADDR
// for i in units do
68943: LD_ADDR_VAR 0 4
68947: PUSH
68948: LD_VAR 0 1
68952: PUSH
68953: FOR_IN
68954: IFFALSE 68992
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68956: LD_ADDR_VAR 0 5
68960: PUSH
68961: LD_VAR 0 5
68965: PPUSH
68966: LD_VAR 0 5
68970: PUSH
68971: LD_INT 1
68973: PLUS
68974: PPUSH
68975: LD_VAR 0 4
68979: PPUSH
68980: CALL_OW 256
68984: PPUSH
68985: CALL_OW 2
68989: ST_TO_ADDR
68990: GO 68953
68992: POP
68993: POP
// if not tmp then
68994: LD_VAR 0 5
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69051
// if asc then
69003: LD_VAR 0 2
69007: IFFALSE 69031
// result := SortListByListAsc ( units , tmp ) else
69009: LD_ADDR_VAR 0 3
69013: PUSH
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_VAR 0 5
69023: PPUSH
69024: CALL_OW 76
69028: ST_TO_ADDR
69029: GO 69051
// result := SortListByListDesc ( units , tmp ) ;
69031: LD_ADDR_VAR 0 3
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: LD_VAR 0 5
69045: PPUSH
69046: CALL_OW 77
69050: ST_TO_ADDR
// end ;
69051: LD_VAR 0 3
69055: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69056: LD_INT 0
69058: PPUSH
69059: PPUSH
// task := GetTaskList ( mech ) ;
69060: LD_ADDR_VAR 0 4
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: CALL_OW 437
69074: ST_TO_ADDR
// if not task then
69075: LD_VAR 0 4
69079: NOT
69080: IFFALSE 69084
// exit ;
69082: GO 69126
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69084: LD_ADDR_VAR 0 3
69088: PUSH
69089: LD_VAR 0 4
69093: PUSH
69094: LD_INT 1
69096: ARRAY
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: LD_STRING r
69104: EQUAL
69105: PUSH
69106: LD_VAR 0 4
69110: PUSH
69111: LD_INT 1
69113: ARRAY
69114: PUSH
69115: LD_INT 4
69117: ARRAY
69118: PUSH
69119: LD_VAR 0 2
69123: EQUAL
69124: AND
69125: ST_TO_ADDR
// end ;
69126: LD_VAR 0 3
69130: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69131: LD_INT 0
69133: PPUSH
// SetDir ( unit , d ) ;
69134: LD_VAR 0 1
69138: PPUSH
69139: LD_VAR 0 4
69143: PPUSH
69144: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69148: LD_VAR 0 1
69152: PPUSH
69153: LD_VAR 0 2
69157: PPUSH
69158: LD_VAR 0 3
69162: PPUSH
69163: LD_VAR 0 5
69167: PPUSH
69168: CALL_OW 48
// end ;
69172: LD_VAR 0 6
69176: RET
// export function ToNaturalNumber ( number ) ; begin
69177: LD_INT 0
69179: PPUSH
// result := number div 1 ;
69180: LD_ADDR_VAR 0 2
69184: PUSH
69185: LD_VAR 0 1
69189: PUSH
69190: LD_INT 1
69192: DIV
69193: ST_TO_ADDR
// if number < 0 then
69194: LD_VAR 0 1
69198: PUSH
69199: LD_INT 0
69201: LESS
69202: IFFALSE 69212
// result := 0 ;
69204: LD_ADDR_VAR 0 2
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// end ;
69212: LD_VAR 0 2
69216: RET
// export function SortByClass ( units , class ) ; var un ; begin
69217: LD_INT 0
69219: PPUSH
69220: PPUSH
// if not units or not class then
69221: LD_VAR 0 1
69225: NOT
69226: PUSH
69227: LD_VAR 0 2
69231: NOT
69232: OR
69233: IFFALSE 69237
// exit ;
69235: GO 69332
// result := [ ] ;
69237: LD_ADDR_VAR 0 3
69241: PUSH
69242: EMPTY
69243: ST_TO_ADDR
// for un in units do
69244: LD_ADDR_VAR 0 4
69248: PUSH
69249: LD_VAR 0 1
69253: PUSH
69254: FOR_IN
69255: IFFALSE 69330
// if GetClass ( un ) = class then
69257: LD_VAR 0 4
69261: PPUSH
69262: CALL_OW 257
69266: PUSH
69267: LD_VAR 0 2
69271: EQUAL
69272: IFFALSE 69299
// result := Insert ( result , 1 , un ) else
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_VAR 0 3
69283: PPUSH
69284: LD_INT 1
69286: PPUSH
69287: LD_VAR 0 4
69291: PPUSH
69292: CALL_OW 2
69296: ST_TO_ADDR
69297: GO 69328
// result := Replace ( result , result + 1 , un ) ;
69299: LD_ADDR_VAR 0 3
69303: PUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: LD_VAR 0 3
69313: PUSH
69314: LD_INT 1
69316: PLUS
69317: PPUSH
69318: LD_VAR 0 4
69322: PPUSH
69323: CALL_OW 1
69327: ST_TO_ADDR
69328: GO 69254
69330: POP
69331: POP
// end ;
69332: LD_VAR 0 3
69336: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69337: LD_INT 0
69339: PPUSH
69340: PPUSH
69341: PPUSH
69342: PPUSH
69343: PPUSH
69344: PPUSH
69345: PPUSH
// result := [ ] ;
69346: LD_ADDR_VAR 0 4
69350: PUSH
69351: EMPTY
69352: ST_TO_ADDR
// if x - r < 0 then
69353: LD_VAR 0 1
69357: PUSH
69358: LD_VAR 0 3
69362: MINUS
69363: PUSH
69364: LD_INT 0
69366: LESS
69367: IFFALSE 69379
// min_x := 0 else
69369: LD_ADDR_VAR 0 8
69373: PUSH
69374: LD_INT 0
69376: ST_TO_ADDR
69377: GO 69395
// min_x := x - r ;
69379: LD_ADDR_VAR 0 8
69383: PUSH
69384: LD_VAR 0 1
69388: PUSH
69389: LD_VAR 0 3
69393: MINUS
69394: ST_TO_ADDR
// if y - r < 0 then
69395: LD_VAR 0 2
69399: PUSH
69400: LD_VAR 0 3
69404: MINUS
69405: PUSH
69406: LD_INT 0
69408: LESS
69409: IFFALSE 69421
// min_y := 0 else
69411: LD_ADDR_VAR 0 7
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
69419: GO 69437
// min_y := y - r ;
69421: LD_ADDR_VAR 0 7
69425: PUSH
69426: LD_VAR 0 2
69430: PUSH
69431: LD_VAR 0 3
69435: MINUS
69436: ST_TO_ADDR
// max_x := x + r ;
69437: LD_ADDR_VAR 0 9
69441: PUSH
69442: LD_VAR 0 1
69446: PUSH
69447: LD_VAR 0 3
69451: PLUS
69452: ST_TO_ADDR
// max_y := y + r ;
69453: LD_ADDR_VAR 0 10
69457: PUSH
69458: LD_VAR 0 2
69462: PUSH
69463: LD_VAR 0 3
69467: PLUS
69468: ST_TO_ADDR
// for _x = min_x to max_x do
69469: LD_ADDR_VAR 0 5
69473: PUSH
69474: DOUBLE
69475: LD_VAR 0 8
69479: DEC
69480: ST_TO_ADDR
69481: LD_VAR 0 9
69485: PUSH
69486: FOR_TO
69487: IFFALSE 69588
// for _y = min_y to max_y do
69489: LD_ADDR_VAR 0 6
69493: PUSH
69494: DOUBLE
69495: LD_VAR 0 7
69499: DEC
69500: ST_TO_ADDR
69501: LD_VAR 0 10
69505: PUSH
69506: FOR_TO
69507: IFFALSE 69584
// begin if not ValidHex ( _x , _y ) then
69509: LD_VAR 0 5
69513: PPUSH
69514: LD_VAR 0 6
69518: PPUSH
69519: CALL_OW 488
69523: NOT
69524: IFFALSE 69528
// continue ;
69526: GO 69506
// if GetResourceTypeXY ( _x , _y ) then
69528: LD_VAR 0 5
69532: PPUSH
69533: LD_VAR 0 6
69537: PPUSH
69538: CALL_OW 283
69542: IFFALSE 69582
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69544: LD_ADDR_VAR 0 4
69548: PUSH
69549: LD_VAR 0 4
69553: PPUSH
69554: LD_VAR 0 4
69558: PUSH
69559: LD_INT 1
69561: PLUS
69562: PPUSH
69563: LD_VAR 0 5
69567: PUSH
69568: LD_VAR 0 6
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PPUSH
69577: CALL_OW 1
69581: ST_TO_ADDR
// end ;
69582: GO 69506
69584: POP
69585: POP
69586: GO 69486
69588: POP
69589: POP
// end ;
69590: LD_VAR 0 4
69594: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69595: LD_INT 0
69597: PPUSH
69598: PPUSH
69599: PPUSH
69600: PPUSH
69601: PPUSH
69602: PPUSH
69603: PPUSH
69604: PPUSH
// if not units then
69605: LD_VAR 0 1
69609: NOT
69610: IFFALSE 69614
// exit ;
69612: GO 70039
// result := UnitFilter ( units , [ f_ok ] ) ;
69614: LD_ADDR_VAR 0 3
69618: PUSH
69619: LD_VAR 0 1
69623: PPUSH
69624: LD_INT 50
69626: PUSH
69627: EMPTY
69628: LIST
69629: PPUSH
69630: CALL_OW 72
69634: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69635: LD_ADDR_VAR 0 8
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_INT 1
69647: ARRAY
69648: PPUSH
69649: CALL_OW 255
69653: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69654: LD_ADDR_VAR 0 10
69658: PUSH
69659: LD_INT 29
69661: PUSH
69662: LD_EXP 109
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: ST_TO_ADDR
// if not result then
69671: LD_VAR 0 3
69675: NOT
69676: IFFALSE 69680
// exit ;
69678: GO 70039
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69680: LD_ADDR_VAR 0 5
69684: PUSH
69685: LD_INT 81
69687: PUSH
69688: LD_VAR 0 8
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PPUSH
69697: CALL_OW 69
69701: ST_TO_ADDR
// for i in result do
69702: LD_ADDR_VAR 0 4
69706: PUSH
69707: LD_VAR 0 3
69711: PUSH
69712: FOR_IN
69713: IFFALSE 70037
// begin tag := GetTag ( i ) + 1 ;
69715: LD_ADDR_VAR 0 9
69719: PUSH
69720: LD_VAR 0 4
69724: PPUSH
69725: CALL_OW 110
69729: PUSH
69730: LD_INT 1
69732: PLUS
69733: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69734: LD_ADDR_VAR 0 7
69738: PUSH
69739: LD_VAR 0 4
69743: PPUSH
69744: CALL_OW 250
69748: PPUSH
69749: LD_VAR 0 4
69753: PPUSH
69754: CALL_OW 251
69758: PPUSH
69759: LD_INT 6
69761: PPUSH
69762: CALL 69337 0 3
69766: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69767: LD_VAR 0 7
69771: PUSH
69772: LD_VAR 0 4
69776: PPUSH
69777: CALL_OW 264
69781: PUSH
69782: LD_VAR 0 10
69786: IN
69787: NOT
69788: AND
69789: IFFALSE 69828
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69791: LD_VAR 0 4
69795: PPUSH
69796: LD_VAR 0 7
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PUSH
69805: LD_INT 1
69807: ARRAY
69808: PPUSH
69809: LD_VAR 0 7
69813: PUSH
69814: LD_INT 1
69816: ARRAY
69817: PUSH
69818: LD_INT 2
69820: ARRAY
69821: PPUSH
69822: CALL_OW 116
69826: GO 70035
// if path > tag then
69828: LD_VAR 0 2
69832: PUSH
69833: LD_VAR 0 9
69837: GREATER
69838: IFFALSE 70005
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69840: LD_ADDR_VAR 0 6
69844: PUSH
69845: LD_VAR 0 5
69849: PPUSH
69850: LD_INT 91
69852: PUSH
69853: LD_VAR 0 4
69857: PUSH
69858: LD_INT 12
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: LIST
69865: PPUSH
69866: CALL_OW 72
69870: ST_TO_ADDR
// if nearEnemy then
69871: LD_VAR 0 6
69875: IFFALSE 69903
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69877: LD_VAR 0 4
69881: PPUSH
69882: LD_VAR 0 6
69886: PPUSH
69887: LD_VAR 0 4
69891: PPUSH
69892: CALL_OW 74
69896: PPUSH
69897: CALL_OW 115
69901: GO 70003
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69903: LD_VAR 0 4
69907: PPUSH
69908: LD_VAR 0 2
69912: PUSH
69913: LD_VAR 0 9
69917: ARRAY
69918: PUSH
69919: LD_INT 1
69921: ARRAY
69922: PPUSH
69923: LD_VAR 0 2
69927: PUSH
69928: LD_VAR 0 9
69932: ARRAY
69933: PUSH
69934: LD_INT 2
69936: ARRAY
69937: PPUSH
69938: CALL_OW 297
69942: PUSH
69943: LD_INT 6
69945: GREATER
69946: IFFALSE 69989
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69948: LD_VAR 0 4
69952: PPUSH
69953: LD_VAR 0 2
69957: PUSH
69958: LD_VAR 0 9
69962: ARRAY
69963: PUSH
69964: LD_INT 1
69966: ARRAY
69967: PPUSH
69968: LD_VAR 0 2
69972: PUSH
69973: LD_VAR 0 9
69977: ARRAY
69978: PUSH
69979: LD_INT 2
69981: ARRAY
69982: PPUSH
69983: CALL_OW 114
69987: GO 70003
// SetTag ( i , tag ) ;
69989: LD_VAR 0 4
69993: PPUSH
69994: LD_VAR 0 9
69998: PPUSH
69999: CALL_OW 109
// end else
70003: GO 70035
// if enemy then
70005: LD_VAR 0 5
70009: IFFALSE 70035
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70011: LD_VAR 0 4
70015: PPUSH
70016: LD_VAR 0 5
70020: PPUSH
70021: LD_VAR 0 4
70025: PPUSH
70026: CALL_OW 74
70030: PPUSH
70031: CALL_OW 115
// end ;
70035: GO 69712
70037: POP
70038: POP
// end ;
70039: LD_VAR 0 3
70043: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70044: LD_INT 0
70046: PPUSH
70047: PPUSH
70048: PPUSH
// if not unit or IsInUnit ( unit ) then
70049: LD_VAR 0 1
70053: NOT
70054: PUSH
70055: LD_VAR 0 1
70059: PPUSH
70060: CALL_OW 310
70064: OR
70065: IFFALSE 70069
// exit ;
70067: GO 70160
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70069: LD_ADDR_VAR 0 4
70073: PUSH
70074: LD_VAR 0 1
70078: PPUSH
70079: CALL_OW 250
70083: PPUSH
70084: LD_VAR 0 2
70088: PPUSH
70089: LD_INT 1
70091: PPUSH
70092: CALL_OW 272
70096: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70097: LD_ADDR_VAR 0 5
70101: PUSH
70102: LD_VAR 0 1
70106: PPUSH
70107: CALL_OW 251
70111: PPUSH
70112: LD_VAR 0 2
70116: PPUSH
70117: LD_INT 1
70119: PPUSH
70120: CALL_OW 273
70124: ST_TO_ADDR
// if ValidHex ( x , y ) then
70125: LD_VAR 0 4
70129: PPUSH
70130: LD_VAR 0 5
70134: PPUSH
70135: CALL_OW 488
70139: IFFALSE 70160
// ComTurnXY ( unit , x , y ) ;
70141: LD_VAR 0 1
70145: PPUSH
70146: LD_VAR 0 4
70150: PPUSH
70151: LD_VAR 0 5
70155: PPUSH
70156: CALL_OW 118
// end ;
70160: LD_VAR 0 3
70164: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70165: LD_INT 0
70167: PPUSH
70168: PPUSH
// result := false ;
70169: LD_ADDR_VAR 0 3
70173: PUSH
70174: LD_INT 0
70176: ST_TO_ADDR
// if not units then
70177: LD_VAR 0 2
70181: NOT
70182: IFFALSE 70186
// exit ;
70184: GO 70231
// for i in units do
70186: LD_ADDR_VAR 0 4
70190: PUSH
70191: LD_VAR 0 2
70195: PUSH
70196: FOR_IN
70197: IFFALSE 70229
// if See ( side , i ) then
70199: LD_VAR 0 1
70203: PPUSH
70204: LD_VAR 0 4
70208: PPUSH
70209: CALL_OW 292
70213: IFFALSE 70227
// begin result := true ;
70215: LD_ADDR_VAR 0 3
70219: PUSH
70220: LD_INT 1
70222: ST_TO_ADDR
// exit ;
70223: POP
70224: POP
70225: GO 70231
// end ;
70227: GO 70196
70229: POP
70230: POP
// end ;
70231: LD_VAR 0 3
70235: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70236: LD_INT 0
70238: PPUSH
70239: PPUSH
70240: PPUSH
70241: PPUSH
// if not unit or not points then
70242: LD_VAR 0 1
70246: NOT
70247: PUSH
70248: LD_VAR 0 2
70252: NOT
70253: OR
70254: IFFALSE 70258
// exit ;
70256: GO 70348
// dist := 99999 ;
70258: LD_ADDR_VAR 0 5
70262: PUSH
70263: LD_INT 99999
70265: ST_TO_ADDR
// for i in points do
70266: LD_ADDR_VAR 0 4
70270: PUSH
70271: LD_VAR 0 2
70275: PUSH
70276: FOR_IN
70277: IFFALSE 70346
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70279: LD_ADDR_VAR 0 6
70283: PUSH
70284: LD_VAR 0 1
70288: PPUSH
70289: LD_VAR 0 4
70293: PUSH
70294: LD_INT 1
70296: ARRAY
70297: PPUSH
70298: LD_VAR 0 4
70302: PUSH
70303: LD_INT 2
70305: ARRAY
70306: PPUSH
70307: CALL_OW 297
70311: ST_TO_ADDR
// if tmpDist < dist then
70312: LD_VAR 0 6
70316: PUSH
70317: LD_VAR 0 5
70321: LESS
70322: IFFALSE 70344
// begin result := i ;
70324: LD_ADDR_VAR 0 3
70328: PUSH
70329: LD_VAR 0 4
70333: ST_TO_ADDR
// dist := tmpDist ;
70334: LD_ADDR_VAR 0 5
70338: PUSH
70339: LD_VAR 0 6
70343: ST_TO_ADDR
// end ; end ;
70344: GO 70276
70346: POP
70347: POP
// end ;
70348: LD_VAR 0 3
70352: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70353: LD_INT 0
70355: PPUSH
// uc_side := side ;
70356: LD_ADDR_OWVAR 20
70360: PUSH
70361: LD_VAR 0 1
70365: ST_TO_ADDR
// uc_nation := 3 ;
70366: LD_ADDR_OWVAR 21
70370: PUSH
70371: LD_INT 3
70373: ST_TO_ADDR
// vc_chassis := 25 ;
70374: LD_ADDR_OWVAR 37
70378: PUSH
70379: LD_INT 25
70381: ST_TO_ADDR
// vc_engine := engine_siberite ;
70382: LD_ADDR_OWVAR 39
70386: PUSH
70387: LD_INT 3
70389: ST_TO_ADDR
// vc_control := control_computer ;
70390: LD_ADDR_OWVAR 38
70394: PUSH
70395: LD_INT 3
70397: ST_TO_ADDR
// vc_weapon := 59 ;
70398: LD_ADDR_OWVAR 40
70402: PUSH
70403: LD_INT 59
70405: ST_TO_ADDR
// result := CreateVehicle ;
70406: LD_ADDR_VAR 0 5
70410: PUSH
70411: CALL_OW 45
70415: ST_TO_ADDR
// SetDir ( result , d ) ;
70416: LD_VAR 0 5
70420: PPUSH
70421: LD_VAR 0 4
70425: PPUSH
70426: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70430: LD_VAR 0 5
70434: PPUSH
70435: LD_VAR 0 2
70439: PPUSH
70440: LD_VAR 0 3
70444: PPUSH
70445: LD_INT 0
70447: PPUSH
70448: CALL_OW 48
// end ;
70452: LD_VAR 0 5
70456: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70457: LD_INT 0
70459: PPUSH
70460: PPUSH
70461: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70462: LD_ADDR_VAR 0 2
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70485: LD_VAR 0 1
70489: NOT
70490: PUSH
70491: LD_VAR 0 1
70495: PPUSH
70496: CALL_OW 264
70500: PUSH
70501: LD_INT 12
70503: PUSH
70504: LD_INT 51
70506: PUSH
70507: LD_INT 32
70509: PUSH
70510: LD_EXP 106
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: IN
70521: NOT
70522: OR
70523: IFFALSE 70527
// exit ;
70525: GO 70625
// for i := 1 to 3 do
70527: LD_ADDR_VAR 0 3
70531: PUSH
70532: DOUBLE
70533: LD_INT 1
70535: DEC
70536: ST_TO_ADDR
70537: LD_INT 3
70539: PUSH
70540: FOR_TO
70541: IFFALSE 70623
// begin tmp := GetCargo ( cargo , i ) ;
70543: LD_ADDR_VAR 0 4
70547: PUSH
70548: LD_VAR 0 1
70552: PPUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: CALL_OW 289
70562: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70563: LD_ADDR_VAR 0 2
70567: PUSH
70568: LD_VAR 0 2
70572: PPUSH
70573: LD_VAR 0 3
70577: PPUSH
70578: LD_VAR 0 4
70582: PPUSH
70583: CALL_OW 1
70587: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70588: LD_ADDR_VAR 0 2
70592: PUSH
70593: LD_VAR 0 2
70597: PPUSH
70598: LD_INT 4
70600: PPUSH
70601: LD_VAR 0 2
70605: PUSH
70606: LD_INT 4
70608: ARRAY
70609: PUSH
70610: LD_VAR 0 4
70614: PLUS
70615: PPUSH
70616: CALL_OW 1
70620: ST_TO_ADDR
// end ;
70621: GO 70540
70623: POP
70624: POP
// end ; end_of_file
70625: LD_VAR 0 2
70629: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70630: LD_VAR 0 1
70634: PUSH
70635: LD_INT 200
70637: DOUBLE
70638: GREATEREQUAL
70639: IFFALSE 70647
70641: LD_INT 299
70643: DOUBLE
70644: LESSEQUAL
70645: IFTRUE 70649
70647: GO 70681
70649: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70650: LD_VAR 0 1
70654: PPUSH
70655: LD_VAR 0 2
70659: PPUSH
70660: LD_VAR 0 3
70664: PPUSH
70665: LD_VAR 0 4
70669: PPUSH
70670: LD_VAR 0 5
70674: PPUSH
70675: CALL 11546 0 5
70679: GO 70758
70681: LD_INT 300
70683: DOUBLE
70684: GREATEREQUAL
70685: IFFALSE 70693
70687: LD_INT 399
70689: DOUBLE
70690: LESSEQUAL
70691: IFTRUE 70695
70693: GO 70757
70695: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70696: LD_VAR 0 1
70700: PPUSH
70701: LD_VAR 0 2
70705: PPUSH
70706: LD_VAR 0 3
70710: PPUSH
70711: LD_VAR 0 4
70715: PPUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: LD_VAR 0 6
70725: PPUSH
70726: LD_VAR 0 7
70730: PPUSH
70731: LD_VAR 0 8
70735: PPUSH
70736: LD_VAR 0 9
70740: PPUSH
70741: LD_VAR 0 10
70745: PPUSH
70746: LD_VAR 0 11
70750: PPUSH
70751: CALL 28162 0 11
70755: GO 70758
70757: POP
// end ;
70758: PPOPN 11
70760: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70761: LD_VAR 0 1
70765: PPUSH
70766: LD_VAR 0 2
70770: PPUSH
70771: LD_VAR 0 3
70775: PPUSH
70776: LD_VAR 0 4
70780: PPUSH
70781: LD_VAR 0 5
70785: PPUSH
70786: CALL 11282 0 5
// end ; end_of_file
70790: PPOPN 5
70792: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_VAR 0 2
70802: PPUSH
70803: LD_VAR 0 3
70807: PPUSH
70808: LD_VAR 0 4
70812: PPUSH
70813: LD_VAR 0 5
70817: PPUSH
70818: LD_VAR 0 6
70822: PPUSH
70823: CALL 15855 0 6
// end ;
70827: PPOPN 6
70829: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70830: CALL 15830 0 0
// end ;
70834: PPOPN 1
70836: END
