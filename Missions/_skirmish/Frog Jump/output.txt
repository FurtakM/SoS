// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 8697 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 8076 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 10672 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6896 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 10107 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 10492 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// for i = 1 to 2 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: FOR_TO
2546: IFFALSE 2571
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2548: LD_VAR 0 6
2552: PPUSH
2553: LD_INT 14
2555: PPUSH
2556: LD_INT 2
2558: PPUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 31
2564: PPUSH
2565: CALL_OW 185
2569: GO 2545
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
// for i = 1 to num do
2582: LD_ADDR_VAR 0 3
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_VAR 0 1
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2670
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2600: LD_INT 22
2602: PUSH
2603: LD_INT 8
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 30
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: CALL_OW 69
2628: PUSH
2629: LD_INT 1
2631: ARRAY
2632: PPUSH
2633: LD_INT 11
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: LD_INT 2
2641: PPUSH
2642: LD_INT 23
2644: PUSH
2645: LD_INT 24
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 2
2657: PPUSH
2658: CALL_OW 12
2662: ARRAY
2663: PPUSH
2664: CALL_OW 185
2668: GO 2597
2670: POP
2671: POP
// end ;
2672: LD_VAR 0 2
2676: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// uc_side := 8 ;
2682: LD_ADDR_OWVAR 20
2686: PUSH
2687: LD_INT 8
2689: ST_TO_ADDR
// uc_nation := 0 ;
2690: LD_ADDR_OWVAR 21
2694: PUSH
2695: LD_INT 0
2697: ST_TO_ADDR
// hc_class := 17 ;
2698: LD_ADDR_OWVAR 28
2702: PUSH
2703: LD_INT 17
2705: ST_TO_ADDR
// hc_gallery :=  ;
2706: LD_ADDR_OWVAR 33
2710: PUSH
2711: LD_STRING 
2713: ST_TO_ADDR
// hc_name :=  ;
2714: LD_ADDR_OWVAR 26
2718: PUSH
2719: LD_STRING 
2721: ST_TO_ADDR
// hc_importance := 0 ;
2722: LD_ADDR_OWVAR 32
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2730: LD_ADDR_OWVAR 31
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: LD_INT 10
2743: PUSH
2744: LD_INT 10
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if ar_base then
2753: LD_INT 57
2755: IFFALSE 2800
// begin un := CreateHuman ;
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_INT 57
2774: PPUSH
2775: CALL_OW 52
// ComExitBuilding ( un ) ;
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 68
2795: PPUSH
2796: CALL_OW 180
// end ; end ;
2800: LD_VAR 0 1
2804: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
// legion_force := [ ] ;
2809: LD_ADDR_EXP 33
2813: PUSH
2814: EMPTY
2815: ST_TO_ADDR
// l_allow_attack := false ;
2816: LD_ADDR_EXP 34
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 2578 0 1
// repeat wait ( 0 0$01 ) ;
2833: LD_INT 35
2835: PPUSH
2836: CALL_OW 67
// until legion_force = n1 ;
2840: LD_EXP 33
2844: PUSH
2845: LD_VAR 0 1
2849: EQUAL
2850: IFFALSE 2833
// l_allow_attack := true ;
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 1
2859: ST_TO_ADDR
// for i = 1 to n2 do
2860: LD_ADDR_VAR 0 4
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_VAR 0 2
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2884
// begin AddKamikaze ( ) ;
2878: CALL 2677 0 0
// end ;
2882: GO 2875
2884: POP
2885: POP
// ComBrutalAttack ( legion_force , 6 ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL 6187 0 2
// end ;
2898: LD_VAR 0 3
2902: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
2903: LD_INT 22
2905: PUSH
2906: LD_INT 8
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 33
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: IFFALSE 3143
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// begin enable ;
2945: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
2946: LD_ADDR_VAR 0 4
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 8
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 33
2963: PUSH
2964: LD_INT 2
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 3
2973: PUSH
2974: LD_INT 61
2976: PUSH
2977: EMPTY
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: PPUSH
2989: CALL_OW 69
2993: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
2994: LD_ADDR_VAR 0 3
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 8
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 34
3011: PUSH
3012: LD_INT 31
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// best := 10 ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_INT 10
3035: ST_TO_ADDR
// best_mechanic := - 1 ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_INT 1
3043: NEG
3044: ST_TO_ADDR
// if vehs then
3045: LD_VAR 0 4
3049: IFFALSE 3143
// begin for j in cts do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3123
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: CALL 5242 0 1
3078: PPUSH
3079: CALL_OW 432
3083: ST_TO_ADDR
// if p < best then
3084: LD_VAR 0 7
3088: PUSH
3089: LD_VAR 0 5
3093: LESS
3094: IFFALSE 3121
// begin best := p ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 7
3105: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
3106: LD_ADDR_VAR 0 6
3110: PUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: CALL 5242 0 1
3120: ST_TO_ADDR
// end ; end ;
3121: GO 3061
3123: POP
3124: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
3125: LD_VAR 0 4
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 6
3138: PPUSH
3139: CALL_OW 135
// end ; end ;
3143: PPOPN 7
3145: END
// every 5 5$00 trigger legion_attacks_active do
3146: LD_EXP 7
3150: IFFALSE 3202
3152: GO 3154
3154: DISABLE
// begin enable ;
3155: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3156: LD_INT 5250
3158: PUSH
3159: LD_INT 2100
3161: PUSH
3162: LD_INT 1050
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_OWVAR 67
3174: ARRAY
3175: PPUSH
3176: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3180: LD_EXP 8
3184: PUSH
3185: LD_INT 2
3187: MINUS
3188: PUSH
3189: LD_OWVAR 67
3193: PLUS
3194: PPUSH
3195: LD_INT 2
3197: PPUSH
3198: CALL 2805 0 2
// end ;
3202: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3203: LD_INT 6
3205: PPUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 8
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 25
3218: PUSH
3219: LD_INT 17
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 70
3234: IFFALSE 3321
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
// begin enable ;
3242: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3243: LD_ADDR_VAR 0 1
3247: PUSH
3248: LD_INT 6
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 8
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 17
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 70
3279: PUSH
3280: FOR_IN
3281: IFFALSE 3319
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3283: LD_VAR 0 1
3287: PPUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 6
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 74
3312: PPUSH
3313: CALL_OW 115
3317: GO 3280
3319: POP
3320: POP
// end ;
3321: PPOPN 1
3323: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3324: LD_INT 68
3326: IFFALSE 3557
3328: GO 3330
3330: DISABLE
3331: LD_INT 0
3333: PPUSH
3334: PPUSH
3335: PPUSH
// begin enable ;
3336: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_INT 224
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 160
3354: PUSH
3355: LD_INT 4
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 228
3364: PUSH
3365: LD_INT 56
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 271
3374: PUSH
3375: LD_INT 87
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: ST_TO_ADDR
// for i = 1 to 3 do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 3
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3418
// EraseResourceArea ( telArea , i ) ;
3404: LD_INT 7
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL_OW 286
3416: GO 3401
3418: POP
3419: POP
// for i = xy downto 1 do
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: DOUBLE
3426: LD_VAR 0 2
3430: INC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: FOR_DOWNTO
3436: IFFALSE 3518
// begin k := rand ( 1 , xy ) ;
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: LD_INT 1
3445: PPUSH
3446: LD_VAR 0 2
3450: PPUSH
3451: CALL_OW 12
3455: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PUSH
3467: LD_INT 1
3469: ARRAY
3470: PPUSH
3471: LD_VAR 0 2
3475: PUSH
3476: LD_VAR 0 1
3480: ARRAY
3481: PUSH
3482: LD_INT 2
3484: ARRAY
3485: PPUSH
3486: CALL_OW 428
3490: IFFALSE 3514
// xy := Delete ( xy , k ) else
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
3512: GO 3516
// break ;
3514: GO 3518
// end ;
3516: GO 3435
3518: POP
3519: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3520: LD_INT 68
3522: PPUSH
3523: LD_VAR 0 2
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: PUSH
3534: LD_INT 1
3536: ARRAY
3537: PPUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 1
3547: ARRAY
3548: PUSH
3549: LD_INT 2
3551: ARRAY
3552: PPUSH
3553: CALL_OW 243
// end ; end_of_file
3557: PPOPN 3
3559: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
// uc_side := 6 ;
3569: LD_ADDR_OWVAR 20
3573: PUSH
3574: LD_INT 6
3576: ST_TO_ADDR
// uc_nation := nation_russian ;
3577: LD_ADDR_OWVAR 21
3581: PUSH
3582: LD_INT 3
3584: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3585: LD_INT 6
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3595: LD_ADDR_VAR 0 6
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 8
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 8
3622: PUSH
3623: LD_INT 2
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_OWVAR 67
3639: ARRAY
3640: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 9
3648: PUSH
3649: LD_INT 8
3651: PUSH
3652: LD_INT 7
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_OWVAR 67
3664: ARRAY
3665: ST_TO_ADDR
// tmp := [ ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: EMPTY
3672: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3673: LD_ADDR_EXP 2
3677: PUSH
3678: LD_STRING Davidov
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 7
3696: PPUSH
3697: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3701: LD_EXP 2
3705: PPUSH
3706: LD_INT 2
3708: PPUSH
3709: LD_INT 8
3711: PPUSH
3712: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3716: LD_EXP 2
3720: PPUSH
3721: LD_INT 3
3723: PPUSH
3724: LD_INT 6
3726: PPUSH
3727: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3731: LD_EXP 2
3735: PPUSH
3736: LD_INT 4
3738: PPUSH
3739: LD_INT 10
3741: PPUSH
3742: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3746: LD_EXP 2
3750: PPUSH
3751: LD_INT 4
3753: PPUSH
3754: CALL_OW 336
// hc_importance := 0 ;
3758: LD_ADDR_OWVAR 32
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// while amount [ 1 ] do
3766: LD_VAR 0 6
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: IFFALSE 4107
// begin Wait ( 1 ) ;
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3783: LD_ADDR_VAR 0 7
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: CALL_OW 12
3798: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3799: LD_VAR 0 6
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PUSH
3808: LD_VAR 0 5
3812: AND
3813: IFFALSE 3968
// begin if k in [ 1 , 2 ] then
3815: LD_VAR 0 7
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: IN
3830: IFFALSE 3840
// k := 3 ;
3832: LD_ADDR_VAR 0 7
3836: PUSH
3837: LD_INT 3
3839: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3840: LD_ADDR_OWVAR 37
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 2
3860: PPUSH
3861: CALL_OW 12
3865: ARRAY
3866: ST_TO_ADDR
// vc_engine := engine_siberite ;
3867: LD_ADDR_OWVAR 39
3871: PUSH
3872: LD_INT 3
3874: ST_TO_ADDR
// vc_control := control_manual ;
3875: LD_ADDR_OWVAR 38
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
3883: LD_ADDR_OWVAR 40
3887: PUSH
3888: LD_INT 44
3890: PUSH
3891: LD_INT 45
3893: PUSH
3894: LD_INT 43
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 1
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: CALL_OW 12
3912: ARRAY
3913: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 45
3931: PPUSH
3932: CALL_OW 2
3936: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 6
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_VAR 0 6
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PUSH
3959: LD_INT 1
3961: MINUS
3962: PPUSH
3963: CALL_OW 1
3967: ST_TO_ADDR
// end ; if not tmp then
3968: LD_VAR 0 5
3972: NOT
3973: IFFALSE 3983
// k := 2 ;
3975: LD_ADDR_VAR 0 7
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
3983: LD_VAR 0 6
3987: PUSH
3988: LD_INT 2
3990: ARRAY
3991: PUSH
3992: LD_INT 0
3994: EQUAL
3995: PUSH
3996: LD_VAR 0 7
4000: PUSH
4001: LD_INT 3
4003: EQUAL
4004: AND
4005: IFFALSE 4034
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: LD_INT 9
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4034: LD_INT 0
4036: PPUSH
4037: LD_VAR 0 7
4041: PPUSH
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 5
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 44
4068: PPUSH
4069: CALL_OW 2
4073: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4074: LD_ADDR_VAR 0 6
4078: PUSH
4079: LD_VAR 0 6
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 6
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 1
4098: MINUS
4099: PPUSH
4100: CALL_OW 1
4104: ST_TO_ADDR
// end ;
4105: GO 3766
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4107: LD_ADDR_VAR 0 5
4111: PUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_VAR 0 5
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: LD_EXP 2
4130: PPUSH
4131: CALL_OW 2
4135: ST_TO_ADDR
// for i = tmp downto 1 do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_VAR 0 5
4146: INC
4147: ST_TO_ADDR
4148: LD_INT 1
4150: PUSH
4151: FOR_DOWNTO
4152: IFFALSE 4314
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4154: LD_VAR 0 5
4158: PUSH
4159: LD_VAR 0 2
4163: ARRAY
4164: PPUSH
4165: CALL_OW 247
4169: PUSH
4170: LD_INT 2
4172: EQUAL
4173: IFFALSE 4263
// begin SetDir ( tmp [ i ] , 3 ) ;
4175: LD_VAR 0 5
4179: PUSH
4180: LD_VAR 0 2
4184: ARRAY
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4193: LD_VAR 0 5
4197: PUSH
4198: LD_VAR 0 2
4202: ARRAY
4203: PPUSH
4204: LD_INT 193
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 0
4212: PPUSH
4213: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4217: LD_VAR 0 5
4221: PUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 1
4229: MINUS
4230: ARRAY
4231: PPUSH
4232: LD_VAR 0 5
4236: PUSH
4237: LD_VAR 0 2
4241: ARRAY
4242: PPUSH
4243: CALL_OW 52
// i := i - 1 ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 2
4256: PUSH
4257: LD_INT 1
4259: MINUS
4260: ST_TO_ADDR
// end else
4261: GO 4284
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4263: LD_VAR 0 5
4267: PUSH
4268: LD_VAR 0 2
4272: ARRAY
4273: PPUSH
4274: LD_INT 2
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4284: LD_VAR 0 5
4288: PUSH
4289: LD_VAR 0 2
4293: ARRAY
4294: PPUSH
4295: LD_INT 197
4297: PPUSH
4298: LD_INT 22
4300: PPUSH
4301: CALL_OW 111
// Wait ( 0 0$02 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// end ;
4312: GO 4151
4314: POP
4315: POP
// Wait ( 0 0$02 ) ;
4316: LD_INT 70
4318: PPUSH
4319: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4323: LD_ADDR_OWVAR 37
4327: PUSH
4328: LD_INT 22
4330: ST_TO_ADDR
// vc_engine := engine_siberite ;
4331: LD_ADDR_OWVAR 39
4335: PUSH
4336: LD_INT 3
4338: ST_TO_ADDR
// vc_control := control_computer ;
4339: LD_ADDR_OWVAR 38
4343: PUSH
4344: LD_INT 3
4346: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4347: LD_ADDR_OWVAR 40
4351: PUSH
4352: LD_INT 51
4354: ST_TO_ADDR
// tmp := CreateVehicle ;
4355: LD_ADDR_VAR 0 5
4359: PUSH
4360: CALL_OW 45
4364: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4365: LD_VAR 0 5
4369: PPUSH
4370: LD_INT 3
4372: PPUSH
4373: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4377: LD_VAR 0 5
4381: PPUSH
4382: LD_INT 193
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 60
4405: PPUSH
4406: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_INT 197
4417: PPUSH
4418: LD_INT 22
4420: PPUSH
4421: CALL_OW 111
// end ; end_of_file
4425: LD_VAR 0 1
4429: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4430: LD_INT 0
4432: PPUSH
// begin side := GetSide ( fac ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 2
4442: PPUSH
4443: CALL_OW 255
4447: ST_TO_ADDR
// case side of 7 :
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 7
4455: DOUBLE
4456: EQUAL
4457: IFTRUE 4461
4459: GO 4508
4461: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4462: LD_ADDR_EXP 32
4466: PUSH
4467: LD_EXP 32
4471: PPUSH
4472: LD_EXP 32
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 1
4490: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 112
4498: PPUSH
4499: LD_INT 175
4501: PPUSH
4502: CALL_OW 171
// end ; 8 :
4506: GO 4594
4508: LD_INT 8
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4593
4516: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 264
4526: PUSH
4527: LD_INT 31
4529: EQUAL
4530: IFFALSE 4547
// ComMoveXY ( veh , 145 , 66 ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_INT 145
4539: PPUSH
4540: LD_INT 66
4542: PPUSH
4543: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 265
4556: PUSH
4557: LD_INT 11
4559: EQUAL
4560: IFFALSE 4591
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4562: LD_ADDR_EXP 33
4566: PUSH
4567: LD_EXP 33
4571: PPUSH
4572: LD_EXP 33
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: LD_VAR 0 1
4585: PPUSH
4586: CALL_OW 1
4590: ST_TO_ADDR
// end ; end ;
4591: GO 4594
4593: POP
// end ;
4594: PPOPN 3
4596: END
// on UnitDestroyed ( un ) do begin if un in legion_force then
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 33
4606: IN
4607: IFFALSE 4625
// legion_force := legion_force diff un ;
4609: LD_ADDR_EXP 33
4613: PUSH
4614: LD_EXP 33
4618: PUSH
4619: LD_VAR 0 1
4623: DIFF
4624: ST_TO_ADDR
// if un in al_force then
4625: LD_VAR 0 1
4629: PUSH
4630: LD_EXP 32
4634: IN
4635: IFFALSE 4653
// al_force := al_force diff un ;
4637: LD_ADDR_EXP 32
4641: PUSH
4642: LD_EXP 32
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// end ;
4653: PPOPN 1
4655: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4656: LD_VAR 0 1
4660: PUSH
4661: LD_INT 68
4663: EQUAL
4664: PUSH
4665: LD_VAR 0 2
4669: PPUSH
4670: CALL_OW 257
4674: PUSH
4675: LD_INT 17
4677: EQUAL
4678: AND
4679: IFFALSE 4722
// begin Wait ( 0 0$01 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 6
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_VAR 0 2
4712: PPUSH
4713: CALL_OW 74
4717: PPUSH
4718: CALL_OW 115
// end ; end ;
4722: PPOPN 2
4724: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: LD_INT 3
4742: PPUSH
4743: CALL_OW 309
4747: PUSH
4748: LD_INT 6
4750: PPUSH
4751: LD_INT 81
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PPUSH
4761: CALL_OW 70
4765: PUSH
4766: LD_INT 0
4768: EQUAL
4769: AND
4770: IFFALSE 4933
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4772: LD_ADDR_VAR 0 7
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 6
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 25
4789: PUSH
4790: LD_INT 16
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 69
4805: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4806: LD_VAR 0 7
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 6
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 0
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 1
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: OR
4866: IFFALSE 4870
// exit ;
4868: GO 4933
// if UnitFilter ( apes , [ f_inside ] ) then
4870: LD_VAR 0 7
4874: PPUSH
4875: LD_INT 54
4877: PUSH
4878: EMPTY
4879: LIST
4880: PPUSH
4881: CALL_OW 72
4885: IFFALSE 4914
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 54
4894: PUSH
4895: EMPTY
4896: LIST
4897: PPUSH
4898: CALL_OW 72
4902: PPUSH
4903: CALL_OW 122
// wait ( 3 ) ;
4907: LD_INT 3
4909: PPUSH
4910: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
4914: LD_VAR 0 7
4918: PPUSH
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 3
4928: PPUSH
4929: CALL_OW 177
// end ; end ;
4933: PPOPN 8
4935: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4936: LD_VAR 0 1
4940: PUSH
4941: LD_EXP 32
4945: IN
4946: IFFALSE 4964
// al_force := al_force diff un ;
4948: LD_ADDR_EXP 32
4952: PUSH
4953: LD_EXP 32
4957: PUSH
4958: LD_VAR 0 1
4962: DIFF
4963: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 263
4973: PUSH
4974: LD_INT 2
4976: EQUAL
4977: IFFALSE 4988
// ComUnlink ( un ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: CALL_OW 136
// end ;
4988: PPOPN 1
4990: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4991: LD_VAR 0 1
4995: PUSH
4996: LD_INT 25
4998: EQUAL
4999: IFFALSE 5009
// player_start_res_sib_bomb := true ;
5001: LD_ADDR_EXP 4
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if tech = tech_artifact then
5009: LD_VAR 0 1
5013: PUSH
5014: LD_INT 24
5016: EQUAL
5017: IFFALSE 5027
// player_start_res_artifact := true ;
5019: LD_ADDR_EXP 5
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: PPOPN 2
5029: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 6
5037: EQUAL
5038: IFFALSE 5048
// player_artifact_loaded := false ;
5040: LD_ADDR_EXP 18
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// end ;
5048: PPOPN 2
5050: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 6
5058: EQUAL
5059: IFFALSE 5069
// player_artifact_loaded := true ;
5061: LD_ADDR_EXP 18
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// end ;
5069: PPOPN 2
5071: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5072: LD_INT 0
5074: PPUSH
// begin player_used_sib_bomb := true ;
5075: LD_ADDR_EXP 12
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// for i = 1 to 3 do
5083: LD_ADDR_VAR 0 4
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 3
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: LD_EXP 15
5113: PUSH
5114: LD_VAR 0 4
5118: ARRAY
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_EXP 15
5128: PUSH
5129: LD_VAR 0 4
5133: ARRAY
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: PPUSH
5139: CALL_OW 298
5143: PUSH
5144: LD_EXP 17
5148: LESSEQUAL
5149: IFFALSE 5168
// begin wait ( 0 0$5 ) ;
5151: LD_INT 175
5153: PPUSH
5154: CALL_OW 67
// artifact_destroyed := true ;
5158: LD_ADDR_EXP 16
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// break ;
5166: GO 5170
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// end ;
5172: PPOPN 4
5174: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 3
5189: PPUSH
5190: CALL 11016 0 3
// end ;
5194: PPOPN 3
5196: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL 11024 0 1
// end ; end_of_file
5206: PPOPN 1
5208: END
// export function CreateArtifact ( type , x , y ) ; begin
5209: LD_INT 0
5211: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5212: LD_INT 4
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 58
// end ;
5237: LD_VAR 0 4
5241: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// if not GetControl ( veh ) = control_manual then
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 263
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: NOT
5261: IFFALSE 5273
// result := false else
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
5271: GO 5418
// if veh in FilterAllUnits ( [ f_empty ] ) then
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 58
5280: PUSH
5281: EMPTY
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: IN
5289: IFFALSE 5301
// result := false else
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 0
5298: ST_TO_ADDR
5299: GO 5418
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: LD_INT 55
5325: PUSH
5326: EMPTY
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PPUSH
5333: CALL_OW 69
5337: ST_TO_ADDR
// if not filter then
5338: LD_VAR 0 4
5342: NOT
5343: IFFALSE 5355
// result := false else
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
5353: GO 5418
// for i = 1 to filter do
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 4
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5416
// if IsDriver ( filter [ i ] ) = veh then
5373: LD_VAR 0 4
5377: PUSH
5378: LD_VAR 0 3
5382: ARRAY
5383: PPUSH
5384: CALL 62193 0 1
5388: PUSH
5389: LD_VAR 0 1
5393: EQUAL
5394: IFFALSE 5414
// begin result := filter [ i ] ;
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_VAR 0 4
5405: PUSH
5406: LD_VAR 0 3
5410: ARRAY
5411: ST_TO_ADDR
// break ;
5412: GO 5416
// end ;
5414: GO 5370
5416: POP
5417: POP
// end ; end ;
5418: LD_VAR 0 2
5422: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5423: LD_INT 0
5425: PPUSH
5426: PPUSH
5427: PPUSH
// result := 0 ;
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5436: LD_ADDR_VAR 0 4
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 0
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PPUSH
5485: CALL_OW 69
5489: ST_TO_ADDR
// if deps then
5490: LD_VAR 0 4
5494: IFFALSE 5542
// for i in deps do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: LD_VAR 0 4
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5540
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 3
5523: PPUSH
5524: CALL_OW 274
5528: PPUSH
5529: LD_INT 3
5531: PPUSH
5532: CALL_OW 275
5536: PLUS
5537: ST_TO_ADDR
5538: GO 5506
5540: POP
5541: POP
// end ;
5542: LD_VAR 0 2
5546: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5547: LD_INT 0
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// if val <= 0 then
5553: LD_VAR 0 2
5557: PUSH
5558: LD_INT 0
5560: LESSEQUAL
5561: IFFALSE 5565
// exit ;
5563: GO 5757
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5565: LD_ADDR_VAR 0 5
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_VAR 0 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// if deps then
5619: LD_VAR 0 5
5623: IFFALSE 5757
// for i in deps do
5625: LD_ADDR_VAR 0 4
5629: PUSH
5630: LD_VAR 0 5
5634: PUSH
5635: FOR_IN
5636: IFFALSE 5755
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 274
5652: PPUSH
5653: LD_INT 3
5655: PPUSH
5656: CALL_OW 275
5660: ST_TO_ADDR
// if val < s then
5661: LD_VAR 0 2
5665: PUSH
5666: LD_VAR 0 6
5670: LESS
5671: IFFALSE 5717
// begin s := s - val ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 6
5682: PUSH
5683: LD_VAR 0 2
5687: MINUS
5688: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5689: LD_VAR 0 4
5693: PPUSH
5694: CALL_OW 274
5698: PPUSH
5699: LD_INT 3
5701: PPUSH
5702: LD_VAR 0 6
5706: PPUSH
5707: CALL_OW 277
// exit ;
5711: POP
5712: POP
5713: GO 5757
// end else
5715: GO 5753
// begin val := val - s ;
5717: LD_ADDR_VAR 0 2
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 6
5731: MINUS
5732: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5733: LD_VAR 0 4
5737: PPUSH
5738: CALL_OW 274
5742: PPUSH
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 277
// end ; end ;
5753: GO 5635
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 3
5761: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 35
5771: IN
5772: NOT
5773: IFFALSE 5804
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
5775: LD_ADDR_EXP 35
5779: PUSH
5780: LD_EXP 35
5784: PPUSH
5785: LD_EXP 35
5789: PUSH
5790: LD_INT 1
5792: PLUS
5793: PPUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 2
5803: ST_TO_ADDR
// end ;
5804: PPOPN 1
5806: END
// export function DestinationReachable ( unit , x , y ) ; begin
5807: LD_INT 0
5809: PPUSH
// if unit in unreachableList then
5810: LD_VAR 0 1
5814: PUSH
5815: LD_EXP 35
5819: IN
5820: IFFALSE 5838
// unreachableList := unreachableList diff unit ;
5822: LD_ADDR_EXP 35
5826: PUSH
5827: LD_EXP 35
5831: PUSH
5832: LD_VAR 0 1
5836: DIFF
5837: ST_TO_ADDR
// if ValidHex ( x , y ) then
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 488
5852: IFFALSE 5878
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 428
5873: PPUSH
5874: CALL_OW 115
// Wait ( 3 ) ;
5878: LD_INT 3
5880: PPUSH
5881: CALL_OW 67
// if unit in unreachableList then
5885: LD_VAR 0 1
5889: PUSH
5890: LD_EXP 35
5894: IN
5895: IFFALSE 5907
// result := false else
5897: LD_ADDR_VAR 0 4
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
5905: GO 5915
// result := true ;
5907: LD_ADDR_VAR 0 4
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// end ;
5915: LD_VAR 0 4
5919: RET
// export function ComBombAttack ( unit , side ) ; var i , enemy , t , x , y , change_target_counter , last_target ; begin
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// change_target_counter := 0 ;
5952: LD_ADDR_VAR 0 9
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// last_target := 0 ;
5960: LD_ADDR_VAR 0 10
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// if not enemy then
5968: LD_VAR 0 5
5972: NOT
5973: IFFALSE 5977
// exit ;
5975: GO 6182
// while ( IsLive ( unit ) and change_target_counter < 4 ) do
5977: LD_VAR 0 1
5981: PPUSH
5982: CALL_OW 300
5986: PUSH
5987: LD_VAR 0 9
5991: PUSH
5992: LD_INT 4
5994: LESS
5995: AND
5996: IFFALSE 6182
// begin if UnitFilter ( enemy , [ f_occupied ] ) then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 59
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: IFFALSE 6149
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: LD_INT 59
6027: PUSH
6028: EMPTY
6029: LIST
6030: PPUSH
6031: CALL_OW 72
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 74
6045: ST_TO_ADDR
// if ( last_target <> t ) then
6046: LD_VAR 0 10
6050: PUSH
6051: LD_VAR 0 6
6055: NONEQUAL
6056: IFFALSE 6072
// change_target_counter := change_target_counter + 1 ;
6058: LD_ADDR_VAR 0 9
6062: PUSH
6063: LD_VAR 0 9
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ST_TO_ADDR
// last_target := t ;
6072: LD_ADDR_VAR 0 10
6076: PUSH
6077: LD_VAR 0 6
6081: ST_TO_ADDR
// x := GetX ( t ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 6
6091: PPUSH
6092: CALL_OW 250
6096: ST_TO_ADDR
// y := GetY ( t ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 251
6111: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_VAR 0 8
6126: PPUSH
6127: CALL 5807 0 3
6131: IFFALSE 6147
// ComAttackUnit ( unit , t ) ;
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 6
6142: PPUSH
6143: CALL_OW 115
// end else
6147: GO 6173
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_VAR 0 5
6158: PPUSH
6159: LD_VAR 0 1
6163: PPUSH
6164: CALL_OW 74
6168: PPUSH
6169: CALL_OW 115
// Wait ( 0 0$0.3 ) ;
6173: LD_INT 10
6175: PPUSH
6176: CALL_OW 67
// end ;
6180: GO 5977
// end ;
6182: LD_VAR 0 3
6186: RET
// export function ComBrutalAttack ( units , side ) ; var i , enemy , t , x , y , target , unit ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
6195: PPUSH
6196: PPUSH
// enemy := FilterAllUnits ( [ f_side , side ] ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_VAR 0 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: ST_TO_ADDR
// target := 0 ;
6219: LD_ADDR_VAR 0 9
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// if not enemy then
6227: LD_VAR 0 5
6231: NOT
6232: IFFALSE 6236
// exit ;
6234: GO 6891
// while units do
6236: LD_VAR 0 1
6240: IFFALSE 6891
// begin wait ( 0 0$0.3 ) ;
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 67
// for unit in units do
6249: LD_ADDR_VAR 0 10
6253: PUSH
6254: LD_VAR 0 1
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6887
// begin if not IsPlaced ( unit ) then
6262: LD_VAR 0 10
6266: PPUSH
6267: CALL_OW 305
6271: NOT
6272: IFFALSE 6292
// begin units := units diff unit ;
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 10
6288: DIFF
6289: ST_TO_ADDR
// continue ;
6290: GO 6259
// end ; if not IsPlaced ( target ) then
6292: LD_VAR 0 9
6296: PPUSH
6297: CALL_OW 305
6301: NOT
6302: IFFALSE 6312
// target := 0 ;
6304: LD_ADDR_VAR 0 9
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not target and UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) then
6312: LD_VAR 0 9
6316: NOT
6317: PUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 54
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 72
6354: AND
6355: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , unit ) ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 5
6366: PPUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: PPUSH
6399: LD_VAR 0 10
6403: PPUSH
6404: CALL_OW 74
6408: ST_TO_ADDR
// x := GetX ( t ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 250
6423: ST_TO_ADDR
// y := GetY ( t ) ;
6424: LD_ADDR_VAR 0 8
6428: PUSH
6429: LD_VAR 0 6
6433: PPUSH
6434: CALL_OW 251
6438: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6439: LD_VAR 0 10
6443: PPUSH
6444: LD_VAR 0 7
6448: PPUSH
6449: LD_VAR 0 8
6453: PPUSH
6454: CALL 5807 0 3
6458: IFFALSE 6472
// target := t else
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 6
6469: ST_TO_ADDR
6470: GO 6617
// if UnitFilter ( enemy , [ f_occupied ] ) then
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_INT 59
6479: PUSH
6480: EMPTY
6481: LIST
6482: PPUSH
6483: CALL_OW 72
6487: IFFALSE 6617
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
6489: LD_ADDR_VAR 0 6
6493: PUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: LD_INT 59
6501: PUSH
6502: EMPTY
6503: LIST
6504: PPUSH
6505: CALL_OW 72
6509: PPUSH
6510: LD_VAR 0 10
6514: PPUSH
6515: CALL_OW 74
6519: ST_TO_ADDR
// x := GetX ( t ) ;
6520: LD_ADDR_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 250
6534: ST_TO_ADDR
// y := GetY ( t ) ;
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_VAR 0 6
6544: PPUSH
6545: CALL_OW 251
6549: ST_TO_ADDR
// if DestinationReachable ( unit , x , y ) then
6550: LD_VAR 0 10
6554: PPUSH
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL 5807 0 3
6569: IFFALSE 6583
// target := t else
6571: LD_ADDR_VAR 0 9
6575: PUSH
6576: LD_VAR 0 6
6580: ST_TO_ADDR
6581: GO 6617
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , unit ) ) ;
6583: LD_VAR 0 10
6587: PPUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 6
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: PPUSH
6603: LD_VAR 0 10
6607: PPUSH
6608: CALL_OW 74
6612: PPUSH
6613: CALL_OW 115
// end ; end ; if not target or not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
6617: LD_VAR 0 9
6621: NOT
6622: PUSH
6623: LD_VAR 0 10
6627: PPUSH
6628: LD_VAR 0 9
6632: PPUSH
6633: CALL_OW 250
6637: PPUSH
6638: LD_VAR 0 9
6642: PPUSH
6643: CALL_OW 251
6647: PPUSH
6648: CALL 5807 0 3
6652: NOT
6653: OR
6654: IFFALSE 6688
// target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
6656: LD_ADDR_VAR 0 9
6660: PUSH
6661: LD_INT 22
6663: PUSH
6664: LD_VAR 0 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PPUSH
6678: LD_VAR 0 10
6682: PPUSH
6683: CALL_OW 74
6687: ST_TO_ADDR
// if ( GetDistUnits ( target , unit ) < 4 and GetLives ( unit ) < 600 ) or ( GetLives ( unit ) < 200 and GetSide ( NearestUnitToUnit ( all_units diff unit , unit ) ) <> GetSide ( unit ) ) then
6688: LD_VAR 0 9
6692: PPUSH
6693: LD_VAR 0 10
6697: PPUSH
6698: CALL_OW 296
6702: PUSH
6703: LD_INT 4
6705: LESS
6706: PUSH
6707: LD_VAR 0 10
6711: PPUSH
6712: CALL_OW 256
6716: PUSH
6717: LD_INT 600
6719: LESS
6720: AND
6721: PUSH
6722: LD_VAR 0 10
6726: PPUSH
6727: CALL_OW 256
6731: PUSH
6732: LD_INT 200
6734: LESS
6735: PUSH
6736: LD_OWVAR 3
6740: PUSH
6741: LD_VAR 0 10
6745: DIFF
6746: PPUSH
6747: LD_VAR 0 10
6751: PPUSH
6752: CALL_OW 74
6756: PPUSH
6757: CALL_OW 255
6761: PUSH
6762: LD_VAR 0 10
6766: PPUSH
6767: CALL_OW 255
6771: NONEQUAL
6772: AND
6773: OR
6774: IFFALSE 6825
// begin for i = 1 to 4 do
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_INT 4
6788: PUSH
6789: FOR_TO
6790: IFFALSE 6821
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
6792: LD_VAR 0 10
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 10
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 453
6819: GO 6789
6821: POP
6822: POP
// end else
6823: GO 6885
// if GetType ( target ) <> unit_human then
6825: LD_VAR 0 9
6829: PPUSH
6830: CALL_OW 247
6834: PUSH
6835: LD_INT 1
6837: NONEQUAL
6838: IFFALSE 6856
// ComAttackUnit ( unit , target ) else
6840: LD_VAR 0 10
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 115
6854: GO 6885
// ComMoveXY ( unit , GetX ( target ) , GetY ( target ) ) ;
6856: LD_VAR 0 10
6860: PPUSH
6861: LD_VAR 0 9
6865: PPUSH
6866: CALL_OW 250
6870: PPUSH
6871: LD_VAR 0 9
6875: PPUSH
6876: CALL_OW 251
6880: PPUSH
6881: CALL_OW 111
// end ;
6885: GO 6259
6887: POP
6888: POP
// end ;
6889: GO 6236
// end ; end_of_file
6891: LD_VAR 0 3
6895: RET
// export function Action ; var dial ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6900: LD_INT 192
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: CALL_OW 86
// InGameOn ;
6910: CALL_OW 8
// PrepareRussian ;
6914: CALL 3560 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 22
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 25
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 4
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_EXP 2
6996: DIFF
6997: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6998: LD_VAR 0 2
7002: PUSH
7003: LD_INT 1
7005: ARRAY
7006: PPUSH
7007: LD_INT 202
7009: PPUSH
7010: LD_INT 40
7012: PPUSH
7013: CALL_OW 111
// Wait ( 0 0$03 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
7024: LD_EXP 2
7028: PPUSH
7029: LD_STRING DDav-1
7031: PPUSH
7032: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PPUSH
7045: LD_EXP 2
7049: PPUSH
7050: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
7072: LD_INT 202
7074: PPUSH
7075: LD_INT 40
7077: PPUSH
7078: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING DRus-1
7093: PPUSH
7094: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
7098: LD_EXP 2
7102: PPUSH
7103: LD_STRING DDav-2
7105: PPUSH
7106: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
7110: LD_VAR 0 2
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PPUSH
7119: LD_STRING DRus-2
7121: PPUSH
7122: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
7126: LD_EXP 2
7130: PPUSH
7131: LD_STRING DDav-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
7142: LD_INT 10
7144: PPUSH
7145: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
7149: LD_STRING C1
7151: PPUSH
7152: CALL_OW 337
// end ;
7156: LD_VAR 0 1
7160: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
7161: LD_INT 22
7163: PUSH
7164: LD_INT 6
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 6
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 30
7186: PUSH
7187: LD_INT 7
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 30
7196: PUSH
7197: LD_INT 8
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IFFALSE 7318
7220: GO 7222
7222: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
7223: LD_EXP 2
7227: PPUSH
7228: LD_STRING DDav-4
7230: PPUSH
7231: CALL_OW 88
// Wait ( 0 0$40 ) ;
7235: LD_INT 1400
7237: PPUSH
7238: CALL_OW 67
// DialogueOn ;
7242: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
7246: LD_EXP 3
7250: PPUSH
7251: LD_STRING Dver-Meet-1
7253: PPUSH
7254: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
7258: LD_EXP 2
7262: PPUSH
7263: LD_STRING DDav-Meet-1
7265: PPUSH
7266: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
7270: LD_EXP 3
7274: PPUSH
7275: LD_STRING Dver-Meet-2
7277: PPUSH
7278: CALL_OW 94
// DialogueOff ;
7282: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
7286: LD_INT 19600
7288: PUSH
7289: LD_INT 15400
7291: PUSH
7292: LD_INT 13300
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_OWVAR 67
7304: ARRAY
7305: PPUSH
7306: CALL_OW 67
// legion_attacks_active := true ;
7310: LD_ADDR_EXP 7
7314: PUSH
7315: LD_INT 1
7317: ST_TO_ADDR
// end ;
7318: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
7319: LD_INT 22
7321: PUSH
7322: LD_INT 6
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: LD_INT 21000
7355: GREATER
7356: OR
7357: IFFALSE 7591
7359: GO 7361
7361: DISABLE
7362: LD_INT 0
7364: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
7365: LD_ADDR_VAR 0 1
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 6
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PPUSH
7434: CALL_OW 69
7438: PUSH
7439: LD_EXP 2
7443: DIFF
7444: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
7445: LD_VAR 0 1
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: LD_STRING DRus-3
7456: PPUSH
7457: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
7461: LD_EXP 2
7465: PPUSH
7466: LD_STRING DDav-5
7468: PPUSH
7469: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_STRING DRus-4
7484: PPUSH
7485: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
7489: LD_EXP 2
7493: PPUSH
7494: LD_STRING DDav-6
7496: PPUSH
7497: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
7501: LD_STRING C2
7503: PPUSH
7504: CALL_OW 337
// Wait ( 5 5$00 ) ;
7508: LD_INT 10500
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
7519: LD_EXP 1
7523: PPUSH
7524: LD_STRING DBag-1
7526: PPUSH
7527: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
7531: LD_EXP 2
7535: PPUSH
7536: LD_STRING DDavB-1
7538: PPUSH
7539: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
7543: LD_EXP 1
7547: PPUSH
7548: LD_STRING DBag-2
7550: PPUSH
7551: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
7555: LD_EXP 2
7559: PPUSH
7560: LD_STRING DDavB-2
7562: PPUSH
7563: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
7567: LD_EXP 1
7571: PPUSH
7572: LD_STRING DBag-3
7574: PPUSH
7575: CALL_OW 94
// DialogueOff ;
7579: CALL_OW 7
// alliance_attack_active := true ;
7583: LD_ADDR_EXP 9
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// every 0 0$1 trigger alliance_used_artifact_1 do
7594: LD_EXP 10
7598: IFFALSE 7645
7600: GO 7602
7602: DISABLE
// begin DialogueOn ;
7603: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
7607: LD_EXP 10
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PPUSH
7616: LD_EXP 10
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
7629: LD_EXP 2
7633: PPUSH
7634: LD_STRING DDav-Artifact1-1
7636: PPUSH
7637: CALL_OW 88
// DialogueOff ;
7641: CALL_OW 7
// end ;
7645: END
// every 0 0$1 trigger alliance_used_artifact_2 do
7646: LD_EXP 11
7650: IFFALSE 7697
7652: GO 7654
7654: DISABLE
// begin DialogueOn ;
7655: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
7659: LD_EXP 11
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PPUSH
7668: LD_EXP 11
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
7681: LD_EXP 2
7685: PPUSH
7686: LD_STRING DDav-Artifact2-1
7688: PPUSH
7689: CALL_OW 88
// DialogueOff ;
7693: CALL_OW 7
// end ;
7697: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
7698: LD_EXP 16
7702: PUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 469
7710: NOT
7711: PUSH
7712: LD_EXP 18
7716: NOT
7717: AND
7718: OR
7719: IFFALSE 7731
7721: GO 7723
7723: DISABLE
// YouLost ( artifact_destroyed ) ;
7724: LD_STRING artifact_destroyed
7726: PPUSH
7727: CALL_OW 104
7731: END
// every 0 0$01 trigger IsDead ( Davidov ) do
7732: LD_EXP 2
7736: PPUSH
7737: CALL_OW 301
7741: IFFALSE 7753
7743: GO 7745
7745: DISABLE
// YouLost ( dead ) ;
7746: LD_STRING dead
7748: PPUSH
7749: CALL_OW 104
7753: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
7754: LD_INT 22
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: LD_INT 0
7785: EQUAL
7786: IFFALSE 7920
7788: GO 7790
7790: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7791: LD_OWVAR 1
7795: PUSH
7796: LD_INT 252000
7798: PUSH
7799: LD_INT 210000
7801: PUSH
7802: LD_INT 189000
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_OWVAR 67
7814: ARRAY
7815: LESS
7816: IFFALSE 7830
// AddMedal ( med1 , 1 ) else
7818: LD_STRING med1
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 101
7828: GO 7841
// AddMedal ( med1 , - 1 ) ;
7830: LD_STRING med1
7832: PPUSH
7833: LD_INT 1
7835: NEG
7836: PPUSH
7837: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7841: LD_INT 22
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: IFFALSE 7870
// AddMedal ( med2 , - 1 ) else
7857: LD_STRING med2
7859: PPUSH
7860: LD_INT 1
7862: NEG
7863: PPUSH
7864: CALL_OW 101
7868: GO 7880
// AddMedal ( med2 , 1 ) ;
7870: LD_STRING med2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 101
// if player_used_sib_bomb then
7880: LD_EXP 12
7884: IFFALSE 7899
// AddMedal ( med3 , - 1 ) else
7886: LD_STRING med3
7888: PPUSH
7889: LD_INT 1
7891: NEG
7892: PPUSH
7893: CALL_OW 101
7897: GO 7909
// AddMedal ( med3 , 1 ) ;
7899: LD_STRING med3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL_OW 101
// GiveMedals ( MAIN ) ;
7909: LD_STRING MAIN
7911: PPUSH
7912: CALL_OW 102
// YouWin ;
7916: CALL_OW 103
// end ; end_of_file
7920: END
// every 0 0$22 + 0 0$2 do
7921: GO 7923
7923: DISABLE
// begin enable ;
7924: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7925: LD_INT 4
7927: PPUSH
7928: LD_INT 5
7930: PPUSH
7931: CALL_OW 12
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: CALL_OW 55
// if tick >= 4 4$00 then
7946: LD_OWVAR 1
7950: PUSH
7951: LD_INT 8400
7953: GREATEREQUAL
7954: IFFALSE 7961
// begin disable ;
7956: DISABLE
// CratesSpawn ( ) ;
7957: CALL 7962 0 0
// end ; end ;
7961: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7968: LD_ADDR_VAR 0 3
7972: PUSH
7973: LD_INT 30000
7975: PUSH
7976: LD_INT 20000
7978: PUSH
7979: LD_INT 10000
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_OWVAR 67
7991: ARRAY
7992: ST_TO_ADDR
// while amount > 0 do
7993: LD_VAR 0 3
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8071
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
8003: LD_INT 1050
8005: PPUSH
8006: LD_INT 3150
8008: PPUSH
8009: CALL_OW 12
8013: PPUSH
8014: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8018: LD_ADDR_VAR 0 4
8022: PUSH
8023: LD_INT 1
8025: PPUSH
8026: LD_INT 5
8028: PPUSH
8029: CALL_OW 12
8033: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_VAR 0 3
8043: PUSH
8044: LD_VAR 0 4
8048: PUSH
8049: LD_INT 10
8051: MUL
8052: MINUS
8053: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8054: LD_VAR 0 4
8058: PPUSH
8059: LD_INT 3
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 55
// end ;
8069: GO 7993
// end ; end_of_file
8071: LD_VAR 0 1
8075: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
// uc_nation = nation_nature ;
8084: LD_ADDR_OWVAR 21
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// uc_side = 0 ;
8092: LD_ADDR_OWVAR 20
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// l = 0 ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
8108: LD_ADDR_OWVAR 24
8112: PUSH
8113: LD_INT 0
8115: PPUSH
8116: LD_INT 5
8118: PPUSH
8119: CALL_OW 12
8123: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
8124: LD_ADDR_OWVAR 35
8128: PUSH
8129: LD_INT 5
8131: NEG
8132: PPUSH
8133: LD_INT 5
8135: PPUSH
8136: CALL_OW 12
8140: ST_TO_ADDR
// hc_gallery =  ;
8141: LD_ADDR_OWVAR 33
8145: PUSH
8146: LD_STRING 
8148: ST_TO_ADDR
// hc_class = class_apeman ;
8149: LD_ADDR_OWVAR 28
8153: PUSH
8154: LD_INT 12
8156: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
8157: LD_ADDR_OWVAR 29
8161: PUSH
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 13
8167: PPUSH
8168: CALL_OW 12
8172: PUSH
8173: LD_INT 10
8175: PPUSH
8176: LD_INT 11
8178: PPUSH
8179: CALL_OW 12
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
// hc_sex = sex_male ;
8188: LD_ADDR_OWVAR 27
8192: PUSH
8193: LD_INT 1
8195: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
8196: LD_ADDR_OWVAR 31
8200: PUSH
8201: LD_INT 0
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 12
8211: PUSH
8212: LD_INT 0
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// apeman = CreateHuman ;
8227: LD_ADDR_VAR 0 7
8231: PUSH
8232: CALL_OW 44
8236: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
8237: LD_VAR 0 7
8241: PPUSH
8242: LD_VAR 0 4
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// l = l + 1 ;
8254: LD_ADDR_VAR 0 6
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: PLUS
8267: ST_TO_ADDR
// end until l = num1 ;
8268: LD_VAR 0 6
8272: PUSH
8273: LD_VAR 0 1
8277: EQUAL
8278: IFFALSE 8108
// l = 0 ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
8288: LD_ADDR_OWVAR 35
8292: PUSH
8293: LD_INT 0
8295: PPUSH
8296: LD_INT 25
8298: PPUSH
8299: CALL_OW 12
8303: ST_TO_ADDR
// hc_class = class_tiger ;
8304: LD_ADDR_OWVAR 28
8308: PUSH
8309: LD_INT 14
8311: ST_TO_ADDR
// hc_sex = sex_male ;
8312: LD_ADDR_OWVAR 27
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// hc_gallery = sandnature ;
8320: LD_ADDR_OWVAR 33
8324: PUSH
8325: LD_STRING sandnature
8327: ST_TO_ADDR
// hc_face_number = 3 ;
8328: LD_ADDR_OWVAR 34
8332: PUSH
8333: LD_INT 3
8335: ST_TO_ADDR
// tiger = CreateHuman ;
8336: LD_ADDR_VAR 0 8
8340: PUSH
8341: CALL_OW 44
8345: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
8346: LD_VAR 0 8
8350: PPUSH
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 0
8358: PPUSH
8359: CALL_OW 49
// l = l + 1 ;
8363: LD_ADDR_VAR 0 6
8367: PUSH
8368: LD_VAR 0 6
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ST_TO_ADDR
// end until l = num2 ;
8377: LD_VAR 0 6
8381: PUSH
8382: LD_VAR 0 2
8386: EQUAL
8387: IFFALSE 8288
// l = 0 ;
8389: LD_ADDR_VAR 0 6
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
8397: LD_ADDR_OWVAR 28
8401: PUSH
8402: LD_INT 18
8404: ST_TO_ADDR
// hc_gallery = sandnature ;
8405: LD_ADDR_OWVAR 33
8409: PUSH
8410: LD_STRING sandnature
8412: ST_TO_ADDR
// hc_face_number = 1 ;
8413: LD_ADDR_OWVAR 34
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// bird = CreateHuman ;
8421: LD_ADDR_VAR 0 9
8425: PUSH
8426: CALL_OW 44
8430: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
8431: LD_VAR 0 9
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 51
// l = l + 1 ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end until l = num3 ;
8457: LD_VAR 0 6
8461: PUSH
8462: LD_VAR 0 3
8466: EQUAL
8467: IFFALSE 8397
// for l = 1 to 2 do
8469: LD_ADDR_VAR 0 6
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_INT 2
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8541
// begin hc_class = 21 ;
8485: LD_ADDR_OWVAR 28
8489: PUSH
8490: LD_INT 21
8492: ST_TO_ADDR
// hc_gallery =  ;
8493: LD_ADDR_OWVAR 33
8497: PUSH
8498: LD_STRING 
8500: ST_TO_ADDR
// hc_agressivity = 0 ;
8501: LD_ADDR_OWVAR 35
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// hc_face_number = 5 ;
8509: LD_ADDR_OWVAR 34
8513: PUSH
8514: LD_INT 5
8516: ST_TO_ADDR
// horse := CreateHuman ;
8517: LD_ADDR_VAR 0 10
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
8527: LD_VAR 0 10
8531: PPUSH
8532: LD_INT 0
8534: PPUSH
8535: CALL_OW 51
// end ;
8539: GO 8482
8541: POP
8542: POP
// hc_gallery :=  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// hc_name :=  ;
8551: LD_ADDR_OWVAR 26
8555: PUSH
8556: LD_STRING 
8558: ST_TO_ADDR
// end ; end_of_file
8559: LD_VAR 0 5
8563: RET
// every 0 0$01 trigger not debug do var timer ;
8564: LD_EXP 6
8568: NOT
8569: IFFALSE 8629
8571: GO 8573
8573: DISABLE
8574: LD_INT 0
8576: PPUSH
// begin timer := 0 0$00 ;
8577: LD_ADDR_VAR 0 1
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// while ( true ) do
8585: LD_INT 1
8587: IFFALSE 8629
// begin timer := timer + 0 0$01 ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 35
8601: PLUS
8602: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
8603: LD_ADDR_OWVAR 47
8607: PUSH
8608: LD_STRING #tick
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
8620: LD_INT 35
8622: PPUSH
8623: CALL_OW 67
// end ;
8627: GO 8585
// end ; end_of_file
8629: PPOPN 1
8631: END
// export function DebugArtifact ; begin
8632: LD_INT 0
8634: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
8635: LD_STRING Artifact is loaded: 
8637: PUSH
8638: LD_EXP 18
8642: STR
8643: PPUSH
8644: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
8648: LD_STRING Artifact is active: 
8650: PUSH
8651: LD_EXP 29
8655: STR
8656: PPUSH
8657: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
8661: LD_STRING Artifact is researched: 
8663: PUSH
8664: LD_EXP 22
8668: STR
8669: PPUSH
8670: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
8674: LD_STRING Artifact coords 
8676: PUSH
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 469
8686: STR
8687: PPUSH
8688: CALL_OW 561
// end ;
8692: LD_VAR 0 1
8696: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
8697: LD_INT 0
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
8703: LD_ADDR_VAR 0 4
8707: PUSH
8708: LD_INT 100
8710: PUSH
8711: LD_INT 185
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 99
8720: PUSH
8721: LD_INT 175
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PUSH
8728: LD_INT 117
8730: PUSH
8731: LD_INT 191
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: ST_TO_ADDR
// for i = 1 to artifacts_type do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: DOUBLE
8749: LD_INT 1
8751: DEC
8752: ST_TO_ADDR
8753: LD_EXP 14
8757: PUSH
8758: FOR_TO
8759: IFFALSE 8861
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
8761: LD_ADDR_VAR 0 3
8765: PUSH
8766: LD_VAR 0 4
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 4
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: LD_VAR 0 4
8794: PUSH
8795: LD_VAR 0 3
8799: DIFF
8800: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
8801: LD_ADDR_EXP 15
8805: PUSH
8806: LD_EXP 15
8810: PPUSH
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL_OW 2
8825: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
8826: LD_EXP 14
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: PPUSH
8837: LD_VAR 0 3
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL 5209 0 3
// end ;
8859: GO 8758
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 1
8867: RET
// export function GetUseCost ( dist ) ; begin
8868: LD_INT 0
8870: PPUSH
// if dist < 30 then
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 30
8878: LESS
8879: IFFALSE 8889
// result := 10 ;
8881: LD_ADDR_VAR 0 2
8885: PUSH
8886: LD_INT 10
8888: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 30
8896: GREATEREQUAL
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: LD_INT 50
8905: LESS
8906: AND
8907: IFFALSE 8917
// result := 35 ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 35
8916: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 50
8924: GREATEREQUAL
8925: PUSH
8926: LD_VAR 0 1
8930: PUSH
8931: LD_INT 80
8933: LESS
8934: AND
8935: IFFALSE 8945
// result := 70 ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 70
8944: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 80
8952: GREATEREQUAL
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 120
8961: LESS
8962: AND
8963: IFFALSE 8973
// result := 100 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 100
8972: ST_TO_ADDR
// if dist >= 120 then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 120
8980: GREATEREQUAL
8981: IFFALSE 8991
// result := 150 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 150
8990: ST_TO_ADDR
// end ;
8991: LD_VAR 0 2
8995: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 255
9005: PUSH
9006: LD_OWVAR 2
9010: EQUAL
9011: IFFALSE 9021
// player_artifact_researched := true ;
9013: LD_ADDR_EXP 22
9017: PUSH
9018: LD_INT 1
9020: ST_TO_ADDR
// end ;
9021: PPOPN 1
9023: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
9024: LD_INT 22
9026: PUSH
9027: LD_OWVAR 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PPUSH
9068: CALL_OW 69
9072: PUSH
9073: LD_EXP 22
9077: AND
9078: PUSH
9079: LD_EXP 18
9083: NOT
9084: AND
9085: IFFALSE 9539
9087: GO 9089
9089: DISABLE
9090: LD_INT 0
9092: PPUSH
9093: PPUSH
// begin enable ;
9094: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 19
9104: PPUSH
9105: CALL_OW 469
9109: ST_TO_ADDR
// if not coords then
9110: LD_VAR 0 2
9114: NOT
9115: IFFALSE 9119
// exit ;
9117: GO 9539
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_OWVAR 2
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 2
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 8
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 11
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 2
9177: PUSH
9178: LD_INT 1
9180: ARRAY
9181: PPUSH
9182: LD_VAR 0 2
9186: PUSH
9187: LD_INT 2
9189: ARRAY
9190: PPUSH
9191: CALL_OW 73
9195: ST_TO_ADDR
// if not lab then
9196: LD_VAR 0 1
9200: NOT
9201: IFFALSE 9218
// begin if debug then
9203: LD_EXP 6
9207: IFFALSE 9216
// AddToLog ( Cannot find lab for artifact! ) ;
9209: LD_STRING Cannot find lab for artifact!
9211: PPUSH
9212: CALL_OW 561
// exit ;
9216: GO 9539
// end ; if not player_artifact_ready then
9218: LD_EXP 29
9222: NOT
9223: IFFALSE 9347
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9225: LD_VAR 0 1
9229: PPUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: LD_VAR 0 2
9243: PUSH
9244: LD_INT 2
9246: ARRAY
9247: PPUSH
9248: CALL_OW 297
9252: PUSH
9253: LD_EXP 23
9257: LESS
9258: IFFALSE 9323
// begin if BuildingStatus ( lab ) = bs_idle then
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 461
9269: PUSH
9270: LD_INT 2
9272: EQUAL
9273: IFFALSE 9299
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
9275: LD_OWVAR 2
9279: PPUSH
9280: LD_EXP 25
9284: PPUSH
9285: LD_INT 2
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 468
9297: GO 9321
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9299: LD_OWVAR 2
9303: PPUSH
9304: LD_EXP 25
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 468
// end else
9321: GO 9345
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
9323: LD_OWVAR 2
9327: PPUSH
9328: LD_EXP 25
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: CALL_OW 468
// end else
9345: GO 9539
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_VAR 0 2
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: CALL_OW 297
9374: PUSH
9375: LD_EXP 23
9379: LESS
9380: IFFALSE 9495
// begin if BuildingStatus ( lab ) = bs_idle then
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: IFFALSE 9449
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_EXP 20
9406: PPUSH
9407: LD_INT 4
9409: PPUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 468
// if player_artifact_selected_unit then
9419: LD_EXP 30
9423: IFFALSE 9447
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
9425: LD_OWVAR 2
9429: PPUSH
9430: LD_EXP 21
9434: PPUSH
9435: LD_INT 3
9437: PPUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 468
// end else
9447: GO 9493
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9449: LD_OWVAR 2
9453: PPUSH
9454: LD_EXP 20
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9471: LD_OWVAR 2
9475: PPUSH
9476: LD_EXP 21
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 468
// end ; end else
9493: GO 9539
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9495: LD_OWVAR 2
9499: PPUSH
9500: LD_EXP 20
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
9517: LD_OWVAR 2
9521: PPUSH
9522: LD_EXP 21
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 468
// end ; end ;
9539: PPOPN 2
9541: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_EXP 19
9559: PPUSH
9560: CALL_OW 469
9564: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
9565: LD_ADDR_VAR 0 7
9569: PUSH
9570: LD_INT 22
9572: PUSH
9573: LD_OWVAR 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 30
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 30
9597: PUSH
9598: LD_INT 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PPUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 5
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 73
9641: ST_TO_ADDR
// if not lab then
9642: LD_VAR 0 7
9646: NOT
9647: IFFALSE 9664
// begin if debug then
9649: LD_EXP 6
9653: IFFALSE 9662
// AddToLog ( Cannot find lab! ) ;
9655: LD_STRING Cannot find lab!
9657: PPUSH
9658: CALL_OW 561
// exit ;
9662: GO 10022
// end ; if icon = player_artifact_icon_res then
9664: LD_VAR 0 2
9668: PUSH
9669: LD_EXP 25
9673: EQUAL
9674: IFFALSE 9715
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
9676: LD_VAR 0 7
9680: PPUSH
9681: LD_EXP 27
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9693: LD_OWVAR 2
9697: PPUSH
9698: LD_EXP 25
9702: PPUSH
9703: LD_INT 0
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL_OW 468
// end ; if icon = player_artifact_icon then
9715: LD_VAR 0 2
9719: PUSH
9720: LD_EXP 20
9724: EQUAL
9725: IFFALSE 9764
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
9727: LD_VAR 0 3
9731: PPUSH
9732: CALL_OW 247
9736: PUSH
9737: LD_INT 1
9739: EQUAL
9740: PUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: CALL_OW 310
9750: NOT
9751: AND
9752: IFFALSE 9764
// player_artifact_selected_unit := cr1 ;
9754: LD_ADDR_EXP 30
9758: PUSH
9759: LD_VAR 0 3
9763: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_EXP 21
9773: EQUAL
9774: IFFALSE 10012
// begin if HexInfo ( cr1 , cr2 ) <> 0 then
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL_OW 428
9790: PUSH
9791: LD_INT 0
9793: NONEQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 10022
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9798: LD_ADDR_VAR 0 9
9802: PUSH
9803: LD_EXP 30
9807: PPUSH
9808: CALL_OW 250
9812: PPUSH
9813: LD_EXP 30
9817: PPUSH
9818: CALL_OW 251
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 298
9837: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9838: LD_ADDR_VAR 0 10
9842: PUSH
9843: LD_VAR 0 9
9847: PPUSH
9848: CALL 8868 0 1
9852: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9853: LD_VAR 0 10
9857: PUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL 5423 0 1
9867: GREATER
9868: IFFALSE 9882
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9870: LD_STRING ArtFrogJumpCost
9872: PPUSH
9873: LD_INT 2
9875: PPUSH
9876: CALL_OW 338
// exit ;
9880: GO 10022
// end ; SetSibResources ( your_side , cost ) ;
9882: LD_OWVAR 2
9886: PPUSH
9887: LD_VAR 0 10
9891: PPUSH
9892: CALL 5547 0 2
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9896: LD_EXP 30
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_VAR 0 4
9910: PPUSH
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9921: LD_VAR 0 3
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9935: LD_ADDR_EXP 30
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// player_artifact_researched := false ;
9943: LD_ADDR_EXP 22
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9951: LD_OWVAR 2
9955: PPUSH
9956: LD_EXP 20
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 7
9968: PPUSH
9969: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9973: LD_OWVAR 2
9977: PPUSH
9978: LD_EXP 21
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 7
9990: PPUSH
9991: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9995: LD_EXP 26
9999: PPUSH
10000: CALL_OW 67
// player_artifact_researched := true ;
10004: LD_ADDR_EXP 22
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// end ; if debug then
10012: LD_EXP 6
10016: IFFALSE 10022
// DebugArtifact ;
10018: CALL 8632 0 0
// end ;
10022: PPOPN 10
10024: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 255
10034: PUSH
10035: LD_OWVAR 2
10039: EQUAL
10040: IFFALSE 10079
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
10042: LD_OWVAR 2
10046: PPUSH
10047: LD_EXP 25
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 468
// player_artifact_ready := true ;
10064: LD_ADDR_EXP 29
10068: PUSH
10069: LD_INT 1
10071: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
10072: LD_STRING ArtFrogJump
10074: PPUSH
10075: CALL_OW 339
// end ; end ;
10079: PPOPN 1
10081: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
10082: LD_OWVAR 2
10086: PPUSH
10087: LD_EXP 25
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 468
// end ;
10104: PPOPN 2
10106: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
10107: LD_INT 0
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 7
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 48
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 69
10146: PUSH
10147: LD_INT 81
10149: PUSH
10150: LD_INT 7
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 30
10159: PUSH
10160: LD_INT 28
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: ADD
10176: PUSH
10177: LD_INT 81
10179: PUSH
10180: LD_INT 7
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: ADD
10206: PUSH
10207: LD_INT 81
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ADD
10236: PUSH
10237: LD_INT 81
10239: PUSH
10240: LD_INT 7
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ADD
10266: PUSH
10267: LD_INT 81
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 35
10279: PUSH
10280: LD_INT 49
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: PUSH
10297: LD_INT 81
10299: PUSH
10300: LD_INT 7
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 35
10309: PUSH
10310: LD_INT 47
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ADD
10326: PUSH
10327: LD_INT 81
10329: PUSH
10330: LD_INT 7
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ADD
10356: ST_TO_ADDR
// if not tmp then
10357: LD_VAR 0 3
10361: NOT
10362: IFFALSE 10366
// exit ;
10364: GO 10487
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 48
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 72
10385: IFFALSE 10418
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
10387: LD_ADDR_VAR 0 4
10391: PUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 48
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: ST_TO_ADDR
10416: GO 10442
// un := tmp [ rand ( 1 , tmp ) ] ;
10418: LD_ADDR_VAR 0 4
10422: PUSH
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 1
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: CALL_OW 12
10440: ARRAY
10441: ST_TO_ADDR
// if not alliance_used_artifact_1 then
10442: LD_EXP 10
10446: NOT
10447: IFFALSE 10478
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
10449: LD_ADDR_EXP 10
10453: PUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: CALL_OW 250
10463: PUSH
10464: LD_VAR 0 4
10468: PPUSH
10469: CALL_OW 251
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// KillUnit ( un ) ;
10478: LD_VAR 0 4
10482: PPUSH
10483: CALL_OW 66
// end ;
10487: LD_VAR 0 1
10491: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
10492: LD_INT 0
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 3
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// if not tmp then
10532: LD_VAR 0 4
10536: NOT
10537: IFFALSE 10541
// exit ;
10539: GO 10667
// un := tmp [ rand ( 1 , tmp ) ] ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_VAR 0 4
10558: PPUSH
10559: CALL_OW 12
10563: ARRAY
10564: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
10565: LD_VAR 0 3
10569: PPUSH
10570: CALL_OW 264
10574: PUSH
10575: LD_INT 48
10577: EQUAL
10578: IFFALSE 10597
// ComAttackPlace ( un , 194 , 19 ) else
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 194
10587: PPUSH
10588: LD_INT 19
10590: PPUSH
10591: CALL_OW 116
10595: GO 10631
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 81
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: CALL_OW 74
10626: PPUSH
10627: CALL_OW 115
// if not alliance_used_artifact_2 then
10631: LD_EXP 11
10635: NOT
10636: IFFALSE 10667
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
10638: LD_ADDR_EXP 11
10642: PUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL_OW 250
10652: PUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: CALL_OW 251
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// export function DebugMode ; var i , j , b ; begin
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// enable_addtolog = true ;
10678: LD_ADDR_OWVAR 81
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// FogOff ( 6 ) ;
10686: LD_INT 6
10688: PPUSH
10689: CALL_OW 344
// uc_side = 6 ;
10693: LD_ADDR_OWVAR 20
10697: PUSH
10698: LD_INT 6
10700: ST_TO_ADDR
// uc_nation = 3 ;
10701: LD_ADDR_OWVAR 21
10705: PUSH
10706: LD_INT 3
10708: ST_TO_ADDR
// bc_level = 10 ;
10709: LD_ADDR_OWVAR 43
10713: PUSH
10714: LD_INT 10
10716: ST_TO_ADDR
// bc_type := b_lab_full ;
10717: LD_ADDR_OWVAR 42
10721: PUSH
10722: LD_INT 8
10724: ST_TO_ADDR
// bc_kind1 := 11 ;
10725: LD_ADDR_OWVAR 44
10729: PUSH
10730: LD_INT 11
10732: ST_TO_ADDR
// bc_kind2 := 12 ;
10733: LD_ADDR_OWVAR 45
10737: PUSH
10738: LD_INT 12
10740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10741: LD_INT 189
10743: PPUSH
10744: LD_INT 20
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 47
// bc_type := b_warehouse ;
10754: LD_ADDR_OWVAR 42
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_INT 201
10769: PPUSH
10770: LD_INT 22
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: CALL_OW 47
10780: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10781: LD_VAR 0 4
10785: PPUSH
10786: CALL_OW 274
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: LD_INT 10000
10796: PPUSH
10797: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 274
10810: PPUSH
10811: LD_INT 2
10813: PPUSH
10814: LD_INT 10000
10816: PPUSH
10817: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 274
10830: PPUSH
10831: LD_INT 3
10833: PPUSH
10834: LD_INT 10000
10836: PPUSH
10837: CALL_OW 277
// bc_type := b_siberite_power ;
10841: LD_ADDR_OWVAR 42
10845: PUSH
10846: LD_INT 28
10848: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10849: LD_ADDR_VAR 0 4
10853: PUSH
10854: LD_INT 216
10856: PPUSH
10857: LD_INT 16
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 47
10867: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10868: LD_ADDR_VAR 0 4
10872: PUSH
10873: LD_INT 219
10875: PPUSH
10876: LD_INT 16
10878: PPUSH
10879: LD_INT 4
10881: PPUSH
10882: CALL_OW 47
10886: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10887: LD_INT 55
10889: PPUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_INT 2
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10900: LD_INT 56
10902: PPUSH
10903: LD_INT 6
10905: PPUSH
10906: LD_INT 2
10908: PPUSH
10909: CALL_OW 322
// end ; end_of_file
10913: LD_VAR 0 1
10917: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10924: LD_VAR 0 1
10928: PPUSH
10929: CALL_OW 264
10933: PUSH
10934: LD_EXP 107
10938: EQUAL
10939: IFFALSE 11011
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10941: LD_INT 68
10943: PPUSH
10944: LD_VAR 0 1
10948: PPUSH
10949: CALL_OW 255
10953: PPUSH
10954: CALL_OW 321
10958: PUSH
10959: LD_INT 2
10961: EQUAL
10962: IFFALSE 10974
// eff := 70 else
10964: LD_ADDR_VAR 0 4
10968: PUSH
10969: LD_INT 70
10971: ST_TO_ADDR
10972: GO 10982
// eff := 30 ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_INT 30
10981: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 250
10991: PPUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 495
// end ; end ;
11011: LD_VAR 0 2
11015: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
11016: LD_INT 0
11018: PPUSH
// end ;
11019: LD_VAR 0 4
11023: RET
// export function SOS_Command ( cmd ) ; begin
11024: LD_INT 0
11026: PPUSH
// end ;
11027: LD_VAR 0 2
11031: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
11032: LD_INT 0
11034: PPUSH
// if cmd = 121 then
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 121
11042: EQUAL
11043: IFFALSE 11045
// end ;
11045: LD_VAR 0 6
11049: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11050: LD_INT 0
11052: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11053: LD_VAR 0 1
11057: PUSH
11058: LD_INT 250
11060: EQUAL
11061: PUSH
11062: LD_VAR 0 2
11066: PPUSH
11067: CALL_OW 264
11071: PUSH
11072: LD_EXP 110
11076: EQUAL
11077: AND
11078: IFFALSE 11099
// MinerPlaceMine ( unit , x , y ) ;
11080: LD_VAR 0 2
11084: PPUSH
11085: LD_VAR 0 4
11089: PPUSH
11090: LD_VAR 0 5
11094: PPUSH
11095: CALL 13448 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11099: LD_VAR 0 1
11103: PUSH
11104: LD_INT 251
11106: EQUAL
11107: PUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 264
11117: PUSH
11118: LD_EXP 110
11122: EQUAL
11123: AND
11124: IFFALSE 11145
// MinerDetonateMine ( unit , x , y ) ;
11126: LD_VAR 0 2
11130: PPUSH
11131: LD_VAR 0 4
11135: PPUSH
11136: LD_VAR 0 5
11140: PPUSH
11141: CALL 13725 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11145: LD_VAR 0 1
11149: PUSH
11150: LD_INT 252
11152: EQUAL
11153: PUSH
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 264
11163: PUSH
11164: LD_EXP 110
11168: EQUAL
11169: AND
11170: IFFALSE 11191
// MinerCreateMinefield ( unit , x , y ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_VAR 0 4
11181: PPUSH
11182: LD_VAR 0 5
11186: PPUSH
11187: CALL 14142 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11191: LD_VAR 0 1
11195: PUSH
11196: LD_INT 253
11198: EQUAL
11199: PUSH
11200: LD_VAR 0 2
11204: PPUSH
11205: CALL_OW 257
11209: PUSH
11210: LD_INT 5
11212: EQUAL
11213: AND
11214: IFFALSE 11235
// ComBinocular ( unit , x , y ) ;
11216: LD_VAR 0 2
11220: PPUSH
11221: LD_VAR 0 4
11225: PPUSH
11226: LD_VAR 0 5
11230: PPUSH
11231: CALL 14513 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 254
11242: EQUAL
11243: PUSH
11244: LD_VAR 0 2
11248: PPUSH
11249: CALL_OW 264
11253: PUSH
11254: LD_EXP 105
11258: EQUAL
11259: AND
11260: PUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: CALL_OW 263
11270: PUSH
11271: LD_INT 3
11273: EQUAL
11274: AND
11275: IFFALSE 11291
// HackDestroyVehicle ( unit , selectedUnit ) ;
11277: LD_VAR 0 2
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: CALL 12808 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11291: LD_VAR 0 1
11295: PUSH
11296: LD_INT 255
11298: EQUAL
11299: PUSH
11300: LD_VAR 0 2
11304: PPUSH
11305: CALL_OW 264
11309: PUSH
11310: LD_INT 14
11312: PUSH
11313: LD_INT 53
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: IN
11320: AND
11321: PUSH
11322: LD_VAR 0 4
11326: PPUSH
11327: LD_VAR 0 5
11331: PPUSH
11332: CALL_OW 488
11336: AND
11337: IFFALSE 11361
// CutTreeXYR ( unit , x , y , 12 ) ;
11339: LD_VAR 0 2
11343: PPUSH
11344: LD_VAR 0 4
11348: PPUSH
11349: LD_VAR 0 5
11353: PPUSH
11354: LD_INT 12
11356: PPUSH
11357: CALL 11374 0 4
// end ;
11361: LD_VAR 0 6
11365: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
11366: LD_INT 0
11368: PPUSH
// end ;
11369: LD_VAR 0 4
11373: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11374: LD_INT 0
11376: PPUSH
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11385: LD_VAR 0 1
11389: NOT
11390: PUSH
11391: LD_VAR 0 2
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: CALL_OW 488
11405: NOT
11406: OR
11407: PUSH
11408: LD_VAR 0 4
11412: NOT
11413: OR
11414: IFFALSE 11418
// exit ;
11416: GO 11758
// list := [ ] ;
11418: LD_ADDR_VAR 0 13
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// if x - r < 0 then
11425: LD_VAR 0 2
11429: PUSH
11430: LD_VAR 0 4
11434: MINUS
11435: PUSH
11436: LD_INT 0
11438: LESS
11439: IFFALSE 11451
// min_x := 0 else
11441: LD_ADDR_VAR 0 7
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
11449: GO 11467
// min_x := x - r ;
11451: LD_ADDR_VAR 0 7
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: LD_VAR 0 4
11465: MINUS
11466: ST_TO_ADDR
// if y - r < 0 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_VAR 0 4
11476: MINUS
11477: PUSH
11478: LD_INT 0
11480: LESS
11481: IFFALSE 11493
// min_y := 0 else
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
11491: GO 11509
// min_y := y - r ;
11493: LD_ADDR_VAR 0 8
11497: PUSH
11498: LD_VAR 0 3
11502: PUSH
11503: LD_VAR 0 4
11507: MINUS
11508: ST_TO_ADDR
// max_x := x + r ;
11509: LD_ADDR_VAR 0 9
11513: PUSH
11514: LD_VAR 0 2
11518: PUSH
11519: LD_VAR 0 4
11523: PLUS
11524: ST_TO_ADDR
// max_y := y + r ;
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 3
11534: PUSH
11535: LD_VAR 0 4
11539: PLUS
11540: ST_TO_ADDR
// for _x = min_x to max_x do
11541: LD_ADDR_VAR 0 11
11545: PUSH
11546: DOUBLE
11547: LD_VAR 0 7
11551: DEC
11552: ST_TO_ADDR
11553: LD_VAR 0 9
11557: PUSH
11558: FOR_TO
11559: IFFALSE 11676
// for _y = min_y to max_y do
11561: LD_ADDR_VAR 0 12
11565: PUSH
11566: DOUBLE
11567: LD_VAR 0 8
11571: DEC
11572: ST_TO_ADDR
11573: LD_VAR 0 10
11577: PUSH
11578: FOR_TO
11579: IFFALSE 11672
// begin if not ValidHex ( _x , _y ) then
11581: LD_VAR 0 11
11585: PPUSH
11586: LD_VAR 0 12
11590: PPUSH
11591: CALL_OW 488
11595: NOT
11596: IFFALSE 11600
// continue ;
11598: GO 11578
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11600: LD_VAR 0 11
11604: PPUSH
11605: LD_VAR 0 12
11609: PPUSH
11610: CALL_OW 351
11614: PUSH
11615: LD_VAR 0 11
11619: PPUSH
11620: LD_VAR 0 12
11624: PPUSH
11625: CALL_OW 554
11629: AND
11630: IFFALSE 11670
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11632: LD_ADDR_VAR 0 13
11636: PUSH
11637: LD_VAR 0 13
11641: PPUSH
11642: LD_VAR 0 13
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: PPUSH
11651: LD_VAR 0 11
11655: PUSH
11656: LD_VAR 0 12
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 2
11669: ST_TO_ADDR
// end ;
11670: GO 11578
11672: POP
11673: POP
11674: GO 11558
11676: POP
11677: POP
// if not list then
11678: LD_VAR 0 13
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11758
// for i in list do
11687: LD_ADDR_VAR 0 6
11691: PUSH
11692: LD_VAR 0 13
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11756
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_STRING M
11707: PUSH
11708: LD_VAR 0 6
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PUSH
11717: LD_VAR 0 6
11721: PUSH
11722: LD_INT 2
11724: ARRAY
11725: PUSH
11726: LD_INT 0
11728: PUSH
11729: LD_INT 0
11731: PUSH
11732: LD_INT 0
11734: PUSH
11735: LD_INT 0
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: PPUSH
11750: CALL_OW 447
11754: GO 11697
11756: POP
11757: POP
// end ;
11758: LD_VAR 0 5
11762: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11763: LD_EXP 38
11767: NOT
11768: IFFALSE 11818
11770: GO 11772
11772: DISABLE
// begin initHack := true ;
11773: LD_ADDR_EXP 38
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// hackTanks := [ ] ;
11781: LD_ADDR_EXP 39
11785: PUSH
11786: EMPTY
11787: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11788: LD_ADDR_EXP 40
11792: PUSH
11793: EMPTY
11794: ST_TO_ADDR
// hackLimit := 3 ;
11795: LD_ADDR_EXP 41
11799: PUSH
11800: LD_INT 3
11802: ST_TO_ADDR
// hackDist := 12 ;
11803: LD_ADDR_EXP 42
11807: PUSH
11808: LD_INT 12
11810: ST_TO_ADDR
// hackCounter := [ ] ;
11811: LD_ADDR_EXP 43
11815: PUSH
11816: EMPTY
11817: ST_TO_ADDR
// end ;
11818: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11819: LD_EXP 38
11823: PUSH
11824: LD_INT 34
11826: PUSH
11827: LD_EXP 105
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: AND
11841: IFFALSE 12096
11843: GO 11845
11845: DISABLE
11846: LD_INT 0
11848: PPUSH
11849: PPUSH
// begin enable ;
11850: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_INT 34
11858: PUSH
11859: LD_EXP 105
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: PUSH
11873: FOR_IN
11874: IFFALSE 12094
// begin if not i in hackTanks then
11876: LD_VAR 0 1
11880: PUSH
11881: LD_EXP 39
11885: IN
11886: NOT
11887: IFFALSE 11970
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11889: LD_ADDR_EXP 39
11893: PUSH
11894: LD_EXP 39
11898: PPUSH
11899: LD_EXP 39
11903: PUSH
11904: LD_INT 1
11906: PLUS
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 1
11917: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11918: LD_ADDR_EXP 40
11922: PUSH
11923: LD_EXP 40
11927: PPUSH
11928: LD_EXP 40
11932: PUSH
11933: LD_INT 1
11935: PLUS
11936: PPUSH
11937: EMPTY
11938: PPUSH
11939: CALL_OW 1
11943: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11944: LD_ADDR_EXP 43
11948: PUSH
11949: LD_EXP 43
11953: PPUSH
11954: LD_EXP 43
11958: PUSH
11959: LD_INT 1
11961: PLUS
11962: PPUSH
11963: EMPTY
11964: PPUSH
11965: CALL_OW 1
11969: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: CALL_OW 302
11979: NOT
11980: IFFALSE 11993
// begin HackUnlinkAll ( i ) ;
11982: LD_VAR 0 1
11986: PPUSH
11987: CALL 12099 0 1
// continue ;
11991: GO 11873
// end ; HackCheckCapturedStatus ( i ) ;
11993: LD_VAR 0 1
11997: PPUSH
11998: CALL 12542 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12002: LD_ADDR_VAR 0 2
12006: PUSH
12007: LD_INT 81
12009: PUSH
12010: LD_VAR 0 1
12014: PPUSH
12015: CALL_OW 255
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 91
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: LD_EXP 42
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 50
12054: PUSH
12055: EMPTY
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 69
12068: ST_TO_ADDR
// if not tmp then
12069: LD_VAR 0 2
12073: NOT
12074: IFFALSE 12078
// continue ;
12076: GO 11873
// HackLink ( i , tmp ) ;
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_VAR 0 2
12087: PPUSH
12088: CALL 12235 0 2
// end ;
12092: GO 11873
12094: POP
12095: POP
// end ;
12096: PPOPN 2
12098: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
// if not hack in hackTanks then
12104: LD_VAR 0 1
12108: PUSH
12109: LD_EXP 39
12113: IN
12114: NOT
12115: IFFALSE 12119
// exit ;
12117: GO 12230
// index := GetElementIndex ( hackTanks , hack ) ;
12119: LD_ADDR_VAR 0 4
12123: PUSH
12124: LD_EXP 39
12128: PPUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL 32996 0 2
12138: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12139: LD_EXP 40
12143: PUSH
12144: LD_VAR 0 4
12148: ARRAY
12149: IFFALSE 12230
// begin for i in hackTanksCaptured [ index ] do
12151: LD_ADDR_VAR 0 3
12155: PUSH
12156: LD_EXP 40
12160: PUSH
12161: LD_VAR 0 4
12165: ARRAY
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12194
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: PPUSH
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 2
12186: ARRAY
12187: PPUSH
12188: CALL_OW 235
12192: GO 12167
12194: POP
12195: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12196: LD_ADDR_EXP 40
12200: PUSH
12201: LD_EXP 40
12205: PPUSH
12206: LD_VAR 0 4
12210: PPUSH
12211: EMPTY
12212: PPUSH
12213: CALL_OW 1
12217: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12218: LD_VAR 0 1
12222: PPUSH
12223: LD_INT 0
12225: PPUSH
12226: CALL_OW 505
// end ; end ;
12230: LD_VAR 0 2
12234: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
12239: PPUSH
// if not hack in hackTanks or not vehicles then
12240: LD_VAR 0 1
12244: PUSH
12245: LD_EXP 39
12249: IN
12250: NOT
12251: PUSH
12252: LD_VAR 0 2
12256: NOT
12257: OR
12258: IFFALSE 12262
// exit ;
12260: GO 12537
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: PPUSH
12272: LD_VAR 0 2
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL 33646 0 4
12287: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12288: LD_ADDR_VAR 0 5
12292: PUSH
12293: LD_EXP 39
12297: PPUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL 32996 0 2
12307: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12308: LD_EXP 40
12312: PUSH
12313: LD_VAR 0 5
12317: ARRAY
12318: PUSH
12319: LD_EXP 41
12323: LESS
12324: IFFALSE 12513
// begin for i := 1 to vehicles do
12326: LD_ADDR_VAR 0 4
12330: PUSH
12331: DOUBLE
12332: LD_INT 1
12334: DEC
12335: ST_TO_ADDR
12336: LD_VAR 0 2
12340: PUSH
12341: FOR_TO
12342: IFFALSE 12511
// begin if hackTanksCaptured [ index ] = hackLimit then
12344: LD_EXP 40
12348: PUSH
12349: LD_VAR 0 5
12353: ARRAY
12354: PUSH
12355: LD_EXP 41
12359: EQUAL
12360: IFFALSE 12364
// break ;
12362: GO 12511
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12364: LD_ADDR_EXP 43
12368: PUSH
12369: LD_EXP 43
12373: PPUSH
12374: LD_VAR 0 5
12378: PPUSH
12379: LD_EXP 43
12383: PUSH
12384: LD_VAR 0 5
12388: ARRAY
12389: PUSH
12390: LD_INT 1
12392: PLUS
12393: PPUSH
12394: CALL_OW 1
12398: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12399: LD_ADDR_EXP 40
12403: PUSH
12404: LD_EXP 40
12408: PPUSH
12409: LD_VAR 0 5
12413: PUSH
12414: LD_EXP 40
12418: PUSH
12419: LD_VAR 0 5
12423: ARRAY
12424: PUSH
12425: LD_INT 1
12427: PLUS
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: LD_VAR 0 2
12437: PUSH
12438: LD_VAR 0 4
12442: ARRAY
12443: PUSH
12444: LD_VAR 0 2
12448: PUSH
12449: LD_VAR 0 4
12453: ARRAY
12454: PPUSH
12455: CALL_OW 255
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL 33211 0 3
12468: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12469: LD_VAR 0 2
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PPUSH
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 255
12489: PPUSH
12490: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12494: LD_VAR 0 2
12498: PUSH
12499: LD_VAR 0 4
12503: ARRAY
12504: PPUSH
12505: CALL_OW 141
// end ;
12509: GO 12341
12511: POP
12512: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12513: LD_VAR 0 1
12517: PPUSH
12518: LD_EXP 40
12522: PUSH
12523: LD_VAR 0 5
12527: ARRAY
12528: PUSH
12529: LD_INT 0
12531: PLUS
12532: PPUSH
12533: CALL_OW 505
// end ;
12537: LD_VAR 0 3
12541: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12542: LD_INT 0
12544: PPUSH
12545: PPUSH
12546: PPUSH
12547: PPUSH
// if not hack in hackTanks then
12548: LD_VAR 0 1
12552: PUSH
12553: LD_EXP 39
12557: IN
12558: NOT
12559: IFFALSE 12563
// exit ;
12561: GO 12803
// index := GetElementIndex ( hackTanks , hack ) ;
12563: LD_ADDR_VAR 0 4
12567: PUSH
12568: LD_EXP 39
12572: PPUSH
12573: LD_VAR 0 1
12577: PPUSH
12578: CALL 32996 0 2
12582: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12583: LD_ADDR_VAR 0 3
12587: PUSH
12588: DOUBLE
12589: LD_EXP 40
12593: PUSH
12594: LD_VAR 0 4
12598: ARRAY
12599: INC
12600: ST_TO_ADDR
12601: LD_INT 1
12603: PUSH
12604: FOR_DOWNTO
12605: IFFALSE 12777
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12607: LD_ADDR_VAR 0 5
12611: PUSH
12612: LD_EXP 40
12616: PUSH
12617: LD_VAR 0 4
12621: ARRAY
12622: PUSH
12623: LD_VAR 0 3
12627: ARRAY
12628: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12629: LD_VAR 0 5
12633: PUSH
12634: LD_INT 1
12636: ARRAY
12637: PPUSH
12638: CALL_OW 302
12642: NOT
12643: PUSH
12644: LD_VAR 0 5
12648: PUSH
12649: LD_INT 1
12651: ARRAY
12652: PPUSH
12653: CALL_OW 255
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 255
12667: NONEQUAL
12668: OR
12669: IFFALSE 12775
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12671: LD_VAR 0 5
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PPUSH
12680: CALL_OW 305
12684: PUSH
12685: LD_VAR 0 5
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 255
12698: PUSH
12699: LD_VAR 0 1
12703: PPUSH
12704: CALL_OW 255
12708: EQUAL
12709: AND
12710: IFFALSE 12734
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12712: LD_VAR 0 5
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 5
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12734: LD_ADDR_EXP 40
12738: PUSH
12739: LD_EXP 40
12743: PPUSH
12744: LD_VAR 0 4
12748: PPUSH
12749: LD_EXP 40
12753: PUSH
12754: LD_VAR 0 4
12758: ARRAY
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: CALL_OW 3
12769: PPUSH
12770: CALL_OW 1
12774: ST_TO_ADDR
// end ; end ;
12775: GO 12604
12777: POP
12778: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12779: LD_VAR 0 1
12783: PPUSH
12784: LD_EXP 40
12788: PUSH
12789: LD_VAR 0 4
12793: ARRAY
12794: PUSH
12795: LD_INT 0
12797: PLUS
12798: PPUSH
12799: CALL_OW 505
// end ;
12803: LD_VAR 0 2
12807: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12808: LD_INT 0
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
// if not hack in hackTanks then
12814: LD_VAR 0 1
12818: PUSH
12819: LD_EXP 39
12823: IN
12824: NOT
12825: IFFALSE 12829
// exit ;
12827: GO 12914
// index := GetElementIndex ( hackTanks , hack ) ;
12829: LD_ADDR_VAR 0 5
12833: PUSH
12834: LD_EXP 39
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL 32996 0 2
12848: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12849: LD_ADDR_VAR 0 4
12853: PUSH
12854: DOUBLE
12855: LD_INT 1
12857: DEC
12858: ST_TO_ADDR
12859: LD_EXP 40
12863: PUSH
12864: LD_VAR 0 5
12868: ARRAY
12869: PUSH
12870: FOR_TO
12871: IFFALSE 12912
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12873: LD_EXP 40
12877: PUSH
12878: LD_VAR 0 5
12882: ARRAY
12883: PUSH
12884: LD_VAR 0 4
12888: ARRAY
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PUSH
12894: LD_VAR 0 2
12898: EQUAL
12899: IFFALSE 12910
// KillUnit ( vehicle ) ;
12901: LD_VAR 0 2
12905: PPUSH
12906: CALL_OW 66
12910: GO 12870
12912: POP
12913: POP
// end ;
12914: LD_VAR 0 3
12918: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12919: LD_EXP 44
12923: NOT
12924: IFFALSE 12959
12926: GO 12928
12928: DISABLE
// begin initMiner := true ;
12929: LD_ADDR_EXP 44
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// minersList := [ ] ;
12937: LD_ADDR_EXP 45
12941: PUSH
12942: EMPTY
12943: ST_TO_ADDR
// minerMinesList := [ ] ;
12944: LD_ADDR_EXP 46
12948: PUSH
12949: EMPTY
12950: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12951: LD_ADDR_EXP 47
12955: PUSH
12956: LD_INT 5
12958: ST_TO_ADDR
// end ;
12959: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12960: LD_EXP 44
12964: PUSH
12965: LD_INT 34
12967: PUSH
12968: LD_EXP 110
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: AND
12982: IFFALSE 13445
12984: GO 12986
12986: DISABLE
12987: LD_INT 0
12989: PPUSH
12990: PPUSH
12991: PPUSH
12992: PPUSH
// begin enable ;
12993: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12994: LD_ADDR_VAR 0 1
12998: PUSH
12999: LD_INT 34
13001: PUSH
13002: LD_EXP 110
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: PUSH
13016: FOR_IN
13017: IFFALSE 13089
// begin if not i in minersList then
13019: LD_VAR 0 1
13023: PUSH
13024: LD_EXP 45
13028: IN
13029: NOT
13030: IFFALSE 13087
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13032: LD_ADDR_EXP 45
13036: PUSH
13037: LD_EXP 45
13041: PPUSH
13042: LD_EXP 45
13046: PUSH
13047: LD_INT 1
13049: PLUS
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 1
13060: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13061: LD_ADDR_EXP 46
13065: PUSH
13066: LD_EXP 46
13070: PPUSH
13071: LD_EXP 46
13075: PUSH
13076: LD_INT 1
13078: PLUS
13079: PPUSH
13080: EMPTY
13081: PPUSH
13082: CALL_OW 1
13086: ST_TO_ADDR
// end end ;
13087: GO 13016
13089: POP
13090: POP
// for i := minerMinesList downto 1 do
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: DOUBLE
13097: LD_EXP 46
13101: INC
13102: ST_TO_ADDR
13103: LD_INT 1
13105: PUSH
13106: FOR_DOWNTO
13107: IFFALSE 13443
// begin if IsLive ( minersList [ i ] ) then
13109: LD_EXP 45
13113: PUSH
13114: LD_VAR 0 1
13118: ARRAY
13119: PPUSH
13120: CALL_OW 300
13124: IFFALSE 13152
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13126: LD_EXP 45
13130: PUSH
13131: LD_VAR 0 1
13135: ARRAY
13136: PPUSH
13137: LD_EXP 46
13141: PUSH
13142: LD_VAR 0 1
13146: ARRAY
13147: PPUSH
13148: CALL_OW 505
// if not minerMinesList [ i ] then
13152: LD_EXP 46
13156: PUSH
13157: LD_VAR 0 1
13161: ARRAY
13162: NOT
13163: IFFALSE 13167
// continue ;
13165: GO 13106
// for j := minerMinesList [ i ] downto 1 do
13167: LD_ADDR_VAR 0 2
13171: PUSH
13172: DOUBLE
13173: LD_EXP 46
13177: PUSH
13178: LD_VAR 0 1
13182: ARRAY
13183: INC
13184: ST_TO_ADDR
13185: LD_INT 1
13187: PUSH
13188: FOR_DOWNTO
13189: IFFALSE 13439
// begin side := GetSide ( minersList [ i ] ) ;
13191: LD_ADDR_VAR 0 3
13195: PUSH
13196: LD_EXP 45
13200: PUSH
13201: LD_VAR 0 1
13205: ARRAY
13206: PPUSH
13207: CALL_OW 255
13211: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13212: LD_ADDR_VAR 0 4
13216: PUSH
13217: LD_EXP 46
13221: PUSH
13222: LD_VAR 0 1
13226: ARRAY
13227: PUSH
13228: LD_VAR 0 2
13232: ARRAY
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: LD_EXP 46
13242: PUSH
13243: LD_VAR 0 1
13247: ARRAY
13248: PUSH
13249: LD_VAR 0 2
13253: ARRAY
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: PPUSH
13259: CALL_OW 428
13263: ST_TO_ADDR
// if not tmp then
13264: LD_VAR 0 4
13268: NOT
13269: IFFALSE 13273
// continue ;
13271: GO 13188
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13273: LD_VAR 0 4
13277: PUSH
13278: LD_INT 81
13280: PUSH
13281: LD_VAR 0 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: IN
13295: PUSH
13296: LD_EXP 46
13300: PUSH
13301: LD_VAR 0 1
13305: ARRAY
13306: PUSH
13307: LD_VAR 0 2
13311: ARRAY
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: LD_EXP 46
13321: PUSH
13322: LD_VAR 0 1
13326: ARRAY
13327: PUSH
13328: LD_VAR 0 2
13332: ARRAY
13333: PUSH
13334: LD_INT 2
13336: ARRAY
13337: PPUSH
13338: CALL_OW 458
13342: AND
13343: IFFALSE 13437
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13345: LD_EXP 46
13349: PUSH
13350: LD_VAR 0 1
13354: ARRAY
13355: PUSH
13356: LD_VAR 0 2
13360: ARRAY
13361: PUSH
13362: LD_INT 1
13364: ARRAY
13365: PPUSH
13366: LD_EXP 46
13370: PUSH
13371: LD_VAR 0 1
13375: ARRAY
13376: PUSH
13377: LD_VAR 0 2
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13396: LD_ADDR_EXP 46
13400: PUSH
13401: LD_EXP 46
13405: PPUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: LD_EXP 46
13415: PUSH
13416: LD_VAR 0 1
13420: ARRAY
13421: PPUSH
13422: LD_VAR 0 2
13426: PPUSH
13427: CALL_OW 3
13431: PPUSH
13432: CALL_OW 1
13436: ST_TO_ADDR
// end ; end ;
13437: GO 13188
13439: POP
13440: POP
// end ;
13441: GO 13106
13443: POP
13444: POP
// end ;
13445: PPOPN 4
13447: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
// result := false ;
13452: LD_ADDR_VAR 0 4
13456: PUSH
13457: LD_INT 0
13459: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 264
13469: PUSH
13470: LD_EXP 110
13474: EQUAL
13475: NOT
13476: IFFALSE 13480
// exit ;
13478: GO 13720
// index := GetElementIndex ( minersList , unit ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_EXP 45
13489: PPUSH
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL 32996 0 2
13499: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13500: LD_EXP 46
13504: PUSH
13505: LD_VAR 0 5
13509: ARRAY
13510: PUSH
13511: LD_EXP 47
13515: GREATEREQUAL
13516: IFFALSE 13520
// exit ;
13518: GO 13720
// ComMoveXY ( unit , x , y ) ;
13520: LD_VAR 0 1
13524: PPUSH
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13539: LD_INT 35
13541: PPUSH
13542: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13546: LD_VAR 0 1
13550: PPUSH
13551: LD_VAR 0 2
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: CALL 63393 0 3
13565: NOT
13566: PUSH
13567: LD_VAR 0 1
13571: PPUSH
13572: CALL_OW 314
13576: AND
13577: IFFALSE 13581
// exit ;
13579: GO 13720
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13581: LD_VAR 0 2
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: CALL_OW 428
13595: PUSH
13596: LD_VAR 0 1
13600: EQUAL
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL_OW 314
13611: NOT
13612: AND
13613: IFFALSE 13539
// PlaySoundXY ( x , y , PlantMine ) ;
13615: LD_VAR 0 2
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_STRING PlantMine
13627: PPUSH
13628: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 255
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13659: LD_ADDR_EXP 46
13663: PUSH
13664: LD_EXP 46
13668: PPUSH
13669: LD_VAR 0 5
13673: PUSH
13674: LD_EXP 46
13678: PUSH
13679: LD_VAR 0 5
13683: ARRAY
13684: PUSH
13685: LD_INT 1
13687: PLUS
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PPUSH
13693: LD_VAR 0 2
13697: PUSH
13698: LD_VAR 0 3
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL 33211 0 3
13711: ST_TO_ADDR
// result := true ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// end ;
13720: LD_VAR 0 4
13724: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13725: LD_INT 0
13727: PPUSH
13728: PPUSH
13729: PPUSH
// if not unit in minersList then
13730: LD_VAR 0 1
13734: PUSH
13735: LD_EXP 45
13739: IN
13740: NOT
13741: IFFALSE 13745
// exit ;
13743: GO 14137
// index := GetElementIndex ( minersList , unit ) ;
13745: LD_ADDR_VAR 0 6
13749: PUSH
13750: LD_EXP 45
13754: PPUSH
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL 32996 0 2
13764: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13765: LD_ADDR_VAR 0 5
13769: PUSH
13770: DOUBLE
13771: LD_EXP 46
13775: PUSH
13776: LD_VAR 0 6
13780: ARRAY
13781: INC
13782: ST_TO_ADDR
13783: LD_INT 1
13785: PUSH
13786: FOR_DOWNTO
13787: IFFALSE 13948
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13789: LD_EXP 46
13793: PUSH
13794: LD_VAR 0 6
13798: ARRAY
13799: PUSH
13800: LD_VAR 0 5
13804: ARRAY
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PUSH
13810: LD_VAR 0 2
13814: EQUAL
13815: PUSH
13816: LD_EXP 46
13820: PUSH
13821: LD_VAR 0 6
13825: ARRAY
13826: PUSH
13827: LD_VAR 0 5
13831: ARRAY
13832: PUSH
13833: LD_INT 2
13835: ARRAY
13836: PUSH
13837: LD_VAR 0 3
13841: EQUAL
13842: AND
13843: IFFALSE 13946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13845: LD_EXP 46
13849: PUSH
13850: LD_VAR 0 6
13854: ARRAY
13855: PUSH
13856: LD_VAR 0 5
13860: ARRAY
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: PPUSH
13866: LD_EXP 46
13870: PUSH
13871: LD_VAR 0 6
13875: ARRAY
13876: PUSH
13877: LD_VAR 0 5
13881: ARRAY
13882: PUSH
13883: LD_INT 2
13885: ARRAY
13886: PPUSH
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 255
13896: PPUSH
13897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13901: LD_ADDR_EXP 46
13905: PUSH
13906: LD_EXP 46
13910: PPUSH
13911: LD_VAR 0 6
13915: PPUSH
13916: LD_EXP 46
13920: PUSH
13921: LD_VAR 0 6
13925: ARRAY
13926: PPUSH
13927: LD_VAR 0 5
13931: PPUSH
13932: CALL_OW 3
13936: PPUSH
13937: CALL_OW 1
13941: ST_TO_ADDR
// exit ;
13942: POP
13943: POP
13944: GO 14137
// end ; end ;
13946: GO 13786
13948: POP
13949: POP
// for i := minerMinesList [ index ] downto 1 do
13950: LD_ADDR_VAR 0 5
13954: PUSH
13955: DOUBLE
13956: LD_EXP 46
13960: PUSH
13961: LD_VAR 0 6
13965: ARRAY
13966: INC
13967: ST_TO_ADDR
13968: LD_INT 1
13970: PUSH
13971: FOR_DOWNTO
13972: IFFALSE 14135
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13974: LD_EXP 46
13978: PUSH
13979: LD_VAR 0 6
13983: ARRAY
13984: PUSH
13985: LD_VAR 0 5
13989: ARRAY
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: PPUSH
13995: LD_EXP 46
13999: PUSH
14000: LD_VAR 0 6
14004: ARRAY
14005: PUSH
14006: LD_VAR 0 5
14010: ARRAY
14011: PUSH
14012: LD_INT 2
14014: ARRAY
14015: PPUSH
14016: LD_VAR 0 2
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: CALL_OW 298
14030: PUSH
14031: LD_INT 6
14033: LESS
14034: IFFALSE 14133
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14036: LD_EXP 46
14040: PUSH
14041: LD_VAR 0 6
14045: ARRAY
14046: PUSH
14047: LD_VAR 0 5
14051: ARRAY
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_EXP 46
14061: PUSH
14062: LD_VAR 0 6
14066: ARRAY
14067: PUSH
14068: LD_VAR 0 5
14072: ARRAY
14073: PUSH
14074: LD_INT 2
14076: ARRAY
14077: PPUSH
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 255
14087: PPUSH
14088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14092: LD_ADDR_EXP 46
14096: PUSH
14097: LD_EXP 46
14101: PPUSH
14102: LD_VAR 0 6
14106: PPUSH
14107: LD_EXP 46
14111: PUSH
14112: LD_VAR 0 6
14116: ARRAY
14117: PPUSH
14118: LD_VAR 0 5
14122: PPUSH
14123: CALL_OW 3
14127: PPUSH
14128: CALL_OW 1
14132: ST_TO_ADDR
// end ; end ;
14133: GO 13971
14135: POP
14136: POP
// end ;
14137: LD_VAR 0 4
14141: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14142: LD_INT 0
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
14149: PPUSH
14150: PPUSH
14151: PPUSH
14152: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 264
14162: PUSH
14163: LD_EXP 110
14167: EQUAL
14168: NOT
14169: PUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_EXP 45
14179: IN
14180: NOT
14181: OR
14182: IFFALSE 14186
// exit ;
14184: GO 14508
// index := GetElementIndex ( minersList , unit ) ;
14186: LD_ADDR_VAR 0 6
14190: PUSH
14191: LD_EXP 45
14195: PPUSH
14196: LD_VAR 0 1
14200: PPUSH
14201: CALL 32996 0 2
14205: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14206: LD_ADDR_VAR 0 8
14210: PUSH
14211: LD_EXP 47
14215: PUSH
14216: LD_EXP 46
14220: PUSH
14221: LD_VAR 0 6
14225: ARRAY
14226: MINUS
14227: ST_TO_ADDR
// if not minesFreeAmount then
14228: LD_VAR 0 8
14232: NOT
14233: IFFALSE 14237
// exit ;
14235: GO 14508
// tmp := [ ] ;
14237: LD_ADDR_VAR 0 7
14241: PUSH
14242: EMPTY
14243: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14244: LD_ADDR_VAR 0 5
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 8
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14455
// begin _d := rand ( 0 , 5 ) ;
14262: LD_ADDR_VAR 0 11
14266: PUSH
14267: LD_INT 0
14269: PPUSH
14270: LD_INT 5
14272: PPUSH
14273: CALL_OW 12
14277: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14278: LD_ADDR_VAR 0 12
14282: PUSH
14283: LD_INT 2
14285: PPUSH
14286: LD_INT 6
14288: PPUSH
14289: CALL_OW 12
14293: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14294: LD_ADDR_VAR 0 9
14298: PUSH
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_VAR 0 11
14308: PPUSH
14309: LD_VAR 0 12
14313: PPUSH
14314: CALL_OW 272
14318: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14319: LD_ADDR_VAR 0 10
14323: PUSH
14324: LD_VAR 0 3
14328: PPUSH
14329: LD_VAR 0 11
14333: PPUSH
14334: LD_VAR 0 12
14338: PPUSH
14339: CALL_OW 273
14343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14344: LD_VAR 0 9
14348: PPUSH
14349: LD_VAR 0 10
14353: PPUSH
14354: CALL_OW 488
14358: PUSH
14359: LD_VAR 0 9
14363: PUSH
14364: LD_VAR 0 10
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_VAR 0 7
14377: IN
14378: NOT
14379: AND
14380: PUSH
14381: LD_VAR 0 9
14385: PPUSH
14386: LD_VAR 0 10
14390: PPUSH
14391: CALL_OW 458
14395: NOT
14396: AND
14397: IFFALSE 14439
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14399: LD_ADDR_VAR 0 7
14403: PUSH
14404: LD_VAR 0 7
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_INT 1
14416: PLUS
14417: PPUSH
14418: LD_VAR 0 9
14422: PUSH
14423: LD_VAR 0 10
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 1
14436: ST_TO_ADDR
14437: GO 14453
// i := i - 1 ;
14439: LD_ADDR_VAR 0 5
14443: PUSH
14444: LD_VAR 0 5
14448: PUSH
14449: LD_INT 1
14451: MINUS
14452: ST_TO_ADDR
// end ;
14453: GO 14259
14455: POP
14456: POP
// for i in tmp do
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_VAR 0 7
14466: PUSH
14467: FOR_IN
14468: IFFALSE 14506
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_VAR 0 5
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 5
14488: PUSH
14489: LD_INT 2
14491: ARRAY
14492: PPUSH
14493: CALL 13448 0 3
14497: NOT
14498: IFFALSE 14504
// exit ;
14500: POP
14501: POP
14502: GO 14508
14504: GO 14467
14506: POP
14507: POP
// end ;
14508: LD_VAR 0 4
14512: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14513: LD_INT 0
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
// if not GetClass ( unit ) = class_sniper then
14522: LD_VAR 0 1
14526: PPUSH
14527: CALL_OW 257
14531: PUSH
14532: LD_INT 5
14534: EQUAL
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14928
// dist := 8 ;
14540: LD_ADDR_VAR 0 5
14544: PUSH
14545: LD_INT 8
14547: ST_TO_ADDR
// viewRange := 12 ;
14548: LD_ADDR_VAR 0 7
14552: PUSH
14553: LD_INT 12
14555: ST_TO_ADDR
// side := GetSide ( unit ) ;
14556: LD_ADDR_VAR 0 6
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 255
14570: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14571: LD_INT 61
14573: PPUSH
14574: LD_VAR 0 6
14578: PPUSH
14579: CALL_OW 321
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: IFFALSE 14597
// viewRange := 16 ;
14589: LD_ADDR_VAR 0 7
14593: PUSH
14594: LD_INT 16
14596: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 3
14611: PPUSH
14612: CALL_OW 297
14616: PUSH
14617: LD_VAR 0 5
14621: GREATER
14622: IFFALSE 14701
// begin ComMoveXY ( unit , x , y ) ;
14624: LD_VAR 0 1
14628: PPUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14643: LD_INT 35
14645: PPUSH
14646: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_VAR 0 3
14664: PPUSH
14665: CALL 63393 0 3
14669: NOT
14670: IFFALSE 14674
// exit ;
14672: GO 14928
// until GetDistUnitXY ( unit , x , y ) < dist ;
14674: LD_VAR 0 1
14678: PPUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: LD_VAR 0 3
14688: PPUSH
14689: CALL_OW 297
14693: PUSH
14694: LD_VAR 0 5
14698: LESS
14699: IFFALSE 14643
// end ; ComTurnXY ( unit , x , y ) ;
14701: LD_VAR 0 1
14705: PPUSH
14706: LD_VAR 0 2
14710: PPUSH
14711: LD_VAR 0 3
14715: PPUSH
14716: CALL_OW 118
// wait ( 5 ) ;
14720: LD_INT 5
14722: PPUSH
14723: CALL_OW 67
// _d := GetDir ( unit ) ;
14727: LD_ADDR_VAR 0 10
14731: PUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 254
14741: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14742: LD_ADDR_VAR 0 8
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 250
14756: PPUSH
14757: LD_VAR 0 10
14761: PPUSH
14762: LD_VAR 0 5
14766: PPUSH
14767: CALL_OW 272
14771: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14772: LD_ADDR_VAR 0 9
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 251
14786: PPUSH
14787: LD_VAR 0 10
14791: PPUSH
14792: LD_VAR 0 5
14796: PPUSH
14797: CALL_OW 273
14801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14802: LD_VAR 0 8
14806: PPUSH
14807: LD_VAR 0 9
14811: PPUSH
14812: CALL_OW 488
14816: NOT
14817: IFFALSE 14821
// exit ;
14819: GO 14928
// ComAnimCustom ( unit , 1 ) ;
14821: LD_VAR 0 1
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14833: LD_VAR 0 8
14837: PPUSH
14838: LD_VAR 0 9
14842: PPUSH
14843: LD_VAR 0 6
14847: PPUSH
14848: LD_VAR 0 7
14852: PPUSH
14853: CALL_OW 330
// repeat wait ( 1 ) ;
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 316
14873: PUSH
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 314
14883: OR
14884: PUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 302
14894: NOT
14895: OR
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 301
14906: OR
14907: IFFALSE 14857
// RemoveSeeing ( _x , _y , side ) ;
14909: LD_VAR 0 8
14913: PPUSH
14914: LD_VAR 0 9
14918: PPUSH
14919: LD_VAR 0 6
14923: PPUSH
14924: CALL_OW 331
// end ; end_of_file
14928: LD_VAR 0 4
14932: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14933: LD_INT 0
14935: PPUSH
// if p2 = 100 then
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 100
14943: EQUAL
14944: IFFALSE 15893
// begin if not StreamModeActive then
14946: LD_EXP 48
14950: NOT
14951: IFFALSE 14961
// StreamModeActive := true ;
14953: LD_ADDR_EXP 48
14957: PUSH
14958: LD_INT 1
14960: ST_TO_ADDR
// if p3 = 0 then
14961: LD_VAR 0 3
14965: PUSH
14966: LD_INT 0
14968: EQUAL
14969: IFFALSE 14975
// InitStreamMode ;
14971: CALL 16053 0 0
// if p3 = 1 then
14975: LD_VAR 0 3
14979: PUSH
14980: LD_INT 1
14982: EQUAL
14983: IFFALSE 14993
// sRocket := true ;
14985: LD_ADDR_EXP 53
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// if p3 = 2 then
14993: LD_VAR 0 3
14997: PUSH
14998: LD_INT 2
15000: EQUAL
15001: IFFALSE 15011
// sSpeed := true ;
15003: LD_ADDR_EXP 52
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// if p3 = 3 then
15011: LD_VAR 0 3
15015: PUSH
15016: LD_INT 3
15018: EQUAL
15019: IFFALSE 15029
// sEngine := true ;
15021: LD_ADDR_EXP 54
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// if p3 = 4 then
15029: LD_VAR 0 3
15033: PUSH
15034: LD_INT 4
15036: EQUAL
15037: IFFALSE 15047
// sSpec := true ;
15039: LD_ADDR_EXP 51
15043: PUSH
15044: LD_INT 1
15046: ST_TO_ADDR
// if p3 = 5 then
15047: LD_VAR 0 3
15051: PUSH
15052: LD_INT 5
15054: EQUAL
15055: IFFALSE 15065
// sLevel := true ;
15057: LD_ADDR_EXP 55
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// if p3 = 6 then
15065: LD_VAR 0 3
15069: PUSH
15070: LD_INT 6
15072: EQUAL
15073: IFFALSE 15083
// sArmoury := true ;
15075: LD_ADDR_EXP 56
15079: PUSH
15080: LD_INT 1
15082: ST_TO_ADDR
// if p3 = 7 then
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 7
15090: EQUAL
15091: IFFALSE 15101
// sRadar := true ;
15093: LD_ADDR_EXP 57
15097: PUSH
15098: LD_INT 1
15100: ST_TO_ADDR
// if p3 = 8 then
15101: LD_VAR 0 3
15105: PUSH
15106: LD_INT 8
15108: EQUAL
15109: IFFALSE 15119
// sBunker := true ;
15111: LD_ADDR_EXP 58
15115: PUSH
15116: LD_INT 1
15118: ST_TO_ADDR
// if p3 = 9 then
15119: LD_VAR 0 3
15123: PUSH
15124: LD_INT 9
15126: EQUAL
15127: IFFALSE 15137
// sHack := true ;
15129: LD_ADDR_EXP 59
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// if p3 = 10 then
15137: LD_VAR 0 3
15141: PUSH
15142: LD_INT 10
15144: EQUAL
15145: IFFALSE 15155
// sFire := true ;
15147: LD_ADDR_EXP 60
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// if p3 = 11 then
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 11
15162: EQUAL
15163: IFFALSE 15173
// sRefresh := true ;
15165: LD_ADDR_EXP 61
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// if p3 = 12 then
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 12
15180: EQUAL
15181: IFFALSE 15191
// sExp := true ;
15183: LD_ADDR_EXP 62
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// if p3 = 13 then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 13
15198: EQUAL
15199: IFFALSE 15209
// sDepot := true ;
15201: LD_ADDR_EXP 63
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// if p3 = 14 then
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 14
15216: EQUAL
15217: IFFALSE 15227
// sFlag := true ;
15219: LD_ADDR_EXP 64
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// if p3 = 15 then
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 15
15234: EQUAL
15235: IFFALSE 15245
// sKamikadze := true ;
15237: LD_ADDR_EXP 72
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// if p3 = 16 then
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 16
15252: EQUAL
15253: IFFALSE 15263
// sTroll := true ;
15255: LD_ADDR_EXP 73
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// if p3 = 17 then
15263: LD_VAR 0 3
15267: PUSH
15268: LD_INT 17
15270: EQUAL
15271: IFFALSE 15281
// sSlow := true ;
15273: LD_ADDR_EXP 74
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// if p3 = 18 then
15281: LD_VAR 0 3
15285: PUSH
15286: LD_INT 18
15288: EQUAL
15289: IFFALSE 15299
// sLack := true ;
15291: LD_ADDR_EXP 75
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// if p3 = 19 then
15299: LD_VAR 0 3
15303: PUSH
15304: LD_INT 19
15306: EQUAL
15307: IFFALSE 15317
// sTank := true ;
15309: LD_ADDR_EXP 77
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// if p3 = 20 then
15317: LD_VAR 0 3
15321: PUSH
15322: LD_INT 20
15324: EQUAL
15325: IFFALSE 15335
// sRemote := true ;
15327: LD_ADDR_EXP 78
15331: PUSH
15332: LD_INT 1
15334: ST_TO_ADDR
// if p3 = 21 then
15335: LD_VAR 0 3
15339: PUSH
15340: LD_INT 21
15342: EQUAL
15343: IFFALSE 15353
// sPowell := true ;
15345: LD_ADDR_EXP 79
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// if p3 = 22 then
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 22
15360: EQUAL
15361: IFFALSE 15371
// sTeleport := true ;
15363: LD_ADDR_EXP 82
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// if p3 = 23 then
15371: LD_VAR 0 3
15375: PUSH
15376: LD_INT 23
15378: EQUAL
15379: IFFALSE 15389
// sOilTower := true ;
15381: LD_ADDR_EXP 84
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// if p3 = 24 then
15389: LD_VAR 0 3
15393: PUSH
15394: LD_INT 24
15396: EQUAL
15397: IFFALSE 15407
// sShovel := true ;
15399: LD_ADDR_EXP 85
15403: PUSH
15404: LD_INT 1
15406: ST_TO_ADDR
// if p3 = 25 then
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 25
15414: EQUAL
15415: IFFALSE 15425
// sSheik := true ;
15417: LD_ADDR_EXP 86
15421: PUSH
15422: LD_INT 1
15424: ST_TO_ADDR
// if p3 = 26 then
15425: LD_VAR 0 3
15429: PUSH
15430: LD_INT 26
15432: EQUAL
15433: IFFALSE 15443
// sEarthquake := true ;
15435: LD_ADDR_EXP 88
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// if p3 = 27 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 27
15450: EQUAL
15451: IFFALSE 15461
// sAI := true ;
15453: LD_ADDR_EXP 89
15457: PUSH
15458: LD_INT 1
15460: ST_TO_ADDR
// if p3 = 28 then
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 28
15468: EQUAL
15469: IFFALSE 15479
// sCargo := true ;
15471: LD_ADDR_EXP 92
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// if p3 = 29 then
15479: LD_VAR 0 3
15483: PUSH
15484: LD_INT 29
15486: EQUAL
15487: IFFALSE 15497
// sDLaser := true ;
15489: LD_ADDR_EXP 93
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// if p3 = 30 then
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 30
15504: EQUAL
15505: IFFALSE 15515
// sExchange := true ;
15507: LD_ADDR_EXP 94
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// if p3 = 31 then
15515: LD_VAR 0 3
15519: PUSH
15520: LD_INT 31
15522: EQUAL
15523: IFFALSE 15533
// sFac := true ;
15525: LD_ADDR_EXP 95
15529: PUSH
15530: LD_INT 1
15532: ST_TO_ADDR
// if p3 = 32 then
15533: LD_VAR 0 3
15537: PUSH
15538: LD_INT 32
15540: EQUAL
15541: IFFALSE 15551
// sPower := true ;
15543: LD_ADDR_EXP 96
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// if p3 = 33 then
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 33
15558: EQUAL
15559: IFFALSE 15569
// sRandom := true ;
15561: LD_ADDR_EXP 97
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// if p3 = 34 then
15569: LD_VAR 0 3
15573: PUSH
15574: LD_INT 34
15576: EQUAL
15577: IFFALSE 15587
// sShield := true ;
15579: LD_ADDR_EXP 98
15583: PUSH
15584: LD_INT 1
15586: ST_TO_ADDR
// if p3 = 35 then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_INT 35
15594: EQUAL
15595: IFFALSE 15605
// sTime := true ;
15597: LD_ADDR_EXP 99
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// if p3 = 36 then
15605: LD_VAR 0 3
15609: PUSH
15610: LD_INT 36
15612: EQUAL
15613: IFFALSE 15623
// sTools := true ;
15615: LD_ADDR_EXP 100
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// if p3 = 101 then
15623: LD_VAR 0 3
15627: PUSH
15628: LD_INT 101
15630: EQUAL
15631: IFFALSE 15641
// sSold := true ;
15633: LD_ADDR_EXP 65
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// if p3 = 102 then
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 102
15648: EQUAL
15649: IFFALSE 15659
// sDiff := true ;
15651: LD_ADDR_EXP 66
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// if p3 = 103 then
15659: LD_VAR 0 3
15663: PUSH
15664: LD_INT 103
15666: EQUAL
15667: IFFALSE 15677
// sFog := true ;
15669: LD_ADDR_EXP 69
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// if p3 = 104 then
15677: LD_VAR 0 3
15681: PUSH
15682: LD_INT 104
15684: EQUAL
15685: IFFALSE 15695
// sReset := true ;
15687: LD_ADDR_EXP 70
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// if p3 = 105 then
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 105
15702: EQUAL
15703: IFFALSE 15713
// sSun := true ;
15705: LD_ADDR_EXP 71
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// if p3 = 106 then
15713: LD_VAR 0 3
15717: PUSH
15718: LD_INT 106
15720: EQUAL
15721: IFFALSE 15731
// sTiger := true ;
15723: LD_ADDR_EXP 67
15727: PUSH
15728: LD_INT 1
15730: ST_TO_ADDR
// if p3 = 107 then
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 107
15738: EQUAL
15739: IFFALSE 15749
// sBomb := true ;
15741: LD_ADDR_EXP 68
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
// if p3 = 108 then
15749: LD_VAR 0 3
15753: PUSH
15754: LD_INT 108
15756: EQUAL
15757: IFFALSE 15767
// sWound := true ;
15759: LD_ADDR_EXP 76
15763: PUSH
15764: LD_INT 1
15766: ST_TO_ADDR
// if p3 = 109 then
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 109
15774: EQUAL
15775: IFFALSE 15785
// sBetray := true ;
15777: LD_ADDR_EXP 80
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// if p3 = 110 then
15785: LD_VAR 0 3
15789: PUSH
15790: LD_INT 110
15792: EQUAL
15793: IFFALSE 15803
// sContamin := true ;
15795: LD_ADDR_EXP 81
15799: PUSH
15800: LD_INT 1
15802: ST_TO_ADDR
// if p3 = 111 then
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 111
15810: EQUAL
15811: IFFALSE 15821
// sOil := true ;
15813: LD_ADDR_EXP 83
15817: PUSH
15818: LD_INT 1
15820: ST_TO_ADDR
// if p3 = 112 then
15821: LD_VAR 0 3
15825: PUSH
15826: LD_INT 112
15828: EQUAL
15829: IFFALSE 15839
// sStu := true ;
15831: LD_ADDR_EXP 87
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// if p3 = 113 then
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 113
15846: EQUAL
15847: IFFALSE 15857
// sBazooka := true ;
15849: LD_ADDR_EXP 90
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// if p3 = 114 then
15857: LD_VAR 0 3
15861: PUSH
15862: LD_INT 114
15864: EQUAL
15865: IFFALSE 15875
// sMortar := true ;
15867: LD_ADDR_EXP 91
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// if p3 = 115 then
15875: LD_VAR 0 3
15879: PUSH
15880: LD_INT 115
15882: EQUAL
15883: IFFALSE 15893
// sRanger := true ;
15885: LD_ADDR_EXP 101
15889: PUSH
15890: LD_INT 1
15892: ST_TO_ADDR
// end ; if p2 = 101 then
15893: LD_VAR 0 2
15897: PUSH
15898: LD_INT 101
15900: EQUAL
15901: IFFALSE 16029
// begin case p3 of 1 :
15903: LD_VAR 0 3
15907: PUSH
15908: LD_INT 1
15910: DOUBLE
15911: EQUAL
15912: IFTRUE 15916
15914: GO 15923
15916: POP
// hHackUnlimitedResources ; 2 :
15917: CALL 27066 0 0
15921: GO 16029
15923: LD_INT 2
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15938
15931: POP
// hHackSetLevel10 ; 3 :
15932: CALL 27199 0 0
15936: GO 16029
15938: LD_INT 3
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 15953
15946: POP
// hHackSetLevel10YourUnits ; 4 :
15947: CALL 27284 0 0
15951: GO 16029
15953: LD_INT 4
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 15968
15961: POP
// hHackInvincible ; 5 :
15962: CALL 27732 0 0
15966: GO 16029
15968: LD_INT 5
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 15983
15976: POP
// hHackInvisible ; 6 :
15977: CALL 27843 0 0
15981: GO 16029
15983: LD_INT 6
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 15998
15991: POP
// hHackChangeYourSide ; 7 :
15992: CALL 27900 0 0
15996: GO 16029
15998: LD_INT 7
16000: DOUBLE
16001: EQUAL
16002: IFTRUE 16006
16004: GO 16013
16006: POP
// hHackChangeUnitSide ; 8 :
16007: CALL 27942 0 0
16011: GO 16029
16013: LD_INT 8
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16028
16021: POP
// hHackFog ; end ;
16022: CALL 28043 0 0
16026: GO 16029
16028: POP
// end ; end ;
16029: LD_VAR 0 7
16033: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16034: GO 16036
16036: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16037: LD_STRING initStreamRollete();
16039: PPUSH
16040: CALL_OW 559
// InitStreamMode ;
16044: CALL 16053 0 0
// DefineStreamItems ( ) ;
16048: CALL 16493 0 0
// end ;
16052: END
// function InitStreamMode ; begin
16053: LD_INT 0
16055: PPUSH
// streamModeActive := false ;
16056: LD_ADDR_EXP 48
16060: PUSH
16061: LD_INT 0
16063: ST_TO_ADDR
// normalCounter := 36 ;
16064: LD_ADDR_EXP 49
16068: PUSH
16069: LD_INT 36
16071: ST_TO_ADDR
// hardcoreCounter := 16 ;
16072: LD_ADDR_EXP 50
16076: PUSH
16077: LD_INT 16
16079: ST_TO_ADDR
// sRocket := false ;
16080: LD_ADDR_EXP 53
16084: PUSH
16085: LD_INT 0
16087: ST_TO_ADDR
// sSpeed := false ;
16088: LD_ADDR_EXP 52
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
// sEngine := false ;
16096: LD_ADDR_EXP 54
16100: PUSH
16101: LD_INT 0
16103: ST_TO_ADDR
// sSpec := false ;
16104: LD_ADDR_EXP 51
16108: PUSH
16109: LD_INT 0
16111: ST_TO_ADDR
// sLevel := false ;
16112: LD_ADDR_EXP 55
16116: PUSH
16117: LD_INT 0
16119: ST_TO_ADDR
// sArmoury := false ;
16120: LD_ADDR_EXP 56
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// sRadar := false ;
16128: LD_ADDR_EXP 57
16132: PUSH
16133: LD_INT 0
16135: ST_TO_ADDR
// sBunker := false ;
16136: LD_ADDR_EXP 58
16140: PUSH
16141: LD_INT 0
16143: ST_TO_ADDR
// sHack := false ;
16144: LD_ADDR_EXP 59
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// sFire := false ;
16152: LD_ADDR_EXP 60
16156: PUSH
16157: LD_INT 0
16159: ST_TO_ADDR
// sRefresh := false ;
16160: LD_ADDR_EXP 61
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// sExp := false ;
16168: LD_ADDR_EXP 62
16172: PUSH
16173: LD_INT 0
16175: ST_TO_ADDR
// sDepot := false ;
16176: LD_ADDR_EXP 63
16180: PUSH
16181: LD_INT 0
16183: ST_TO_ADDR
// sFlag := false ;
16184: LD_ADDR_EXP 64
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// sKamikadze := false ;
16192: LD_ADDR_EXP 72
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
// sTroll := false ;
16200: LD_ADDR_EXP 73
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// sSlow := false ;
16208: LD_ADDR_EXP 74
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// sLack := false ;
16216: LD_ADDR_EXP 75
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// sTank := false ;
16224: LD_ADDR_EXP 77
16228: PUSH
16229: LD_INT 0
16231: ST_TO_ADDR
// sRemote := false ;
16232: LD_ADDR_EXP 78
16236: PUSH
16237: LD_INT 0
16239: ST_TO_ADDR
// sPowell := false ;
16240: LD_ADDR_EXP 79
16244: PUSH
16245: LD_INT 0
16247: ST_TO_ADDR
// sTeleport := false ;
16248: LD_ADDR_EXP 82
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// sOilTower := false ;
16256: LD_ADDR_EXP 84
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
// sShovel := false ;
16264: LD_ADDR_EXP 85
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// sSheik := false ;
16272: LD_ADDR_EXP 86
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// sEarthquake := false ;
16280: LD_ADDR_EXP 88
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// sAI := false ;
16288: LD_ADDR_EXP 89
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// sCargo := false ;
16296: LD_ADDR_EXP 92
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// sDLaser := false ;
16304: LD_ADDR_EXP 93
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sExchange := false ;
16312: LD_ADDR_EXP 94
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sFac := false ;
16320: LD_ADDR_EXP 95
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sPower := false ;
16328: LD_ADDR_EXP 96
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// sRandom := false ;
16336: LD_ADDR_EXP 97
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// sShield := false ;
16344: LD_ADDR_EXP 98
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// sTime := false ;
16352: LD_ADDR_EXP 99
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// sTools := false ;
16360: LD_ADDR_EXP 100
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// sSold := false ;
16368: LD_ADDR_EXP 65
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// sDiff := false ;
16376: LD_ADDR_EXP 66
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// sFog := false ;
16384: LD_ADDR_EXP 69
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// sReset := false ;
16392: LD_ADDR_EXP 70
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// sSun := false ;
16400: LD_ADDR_EXP 71
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sTiger := false ;
16408: LD_ADDR_EXP 67
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sBomb := false ;
16416: LD_ADDR_EXP 68
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sWound := false ;
16424: LD_ADDR_EXP 76
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sBetray := false ;
16432: LD_ADDR_EXP 80
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sContamin := false ;
16440: LD_ADDR_EXP 81
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sOil := false ;
16448: LD_ADDR_EXP 83
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sStu := false ;
16456: LD_ADDR_EXP 87
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sBazooka := false ;
16464: LD_ADDR_EXP 90
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sMortar := false ;
16472: LD_ADDR_EXP 91
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sRanger := false ;
16480: LD_ADDR_EXP 101
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// end ;
16488: LD_VAR 0 1
16492: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16493: LD_INT 0
16495: PPUSH
16496: PPUSH
16497: PPUSH
16498: PPUSH
16499: PPUSH
// result := [ ] ;
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: EMPTY
16506: ST_TO_ADDR
// if campaign_id = 1 then
16507: LD_OWVAR 69
16511: PUSH
16512: LD_INT 1
16514: EQUAL
16515: IFFALSE 19453
// begin case mission_number of 1 :
16517: LD_OWVAR 70
16521: PUSH
16522: LD_INT 1
16524: DOUBLE
16525: EQUAL
16526: IFTRUE 16530
16528: GO 16594
16530: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16531: LD_ADDR_VAR 0 1
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: LD_INT 4
16541: PUSH
16542: LD_INT 11
16544: PUSH
16545: LD_INT 12
16547: PUSH
16548: LD_INT 15
16550: PUSH
16551: LD_INT 16
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 26
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 101
16576: PUSH
16577: LD_INT 102
16579: PUSH
16580: LD_INT 106
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: ST_TO_ADDR
16592: GO 19451
16594: LD_INT 2
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16674
16602: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: LD_INT 11
16616: PUSH
16617: LD_INT 12
16619: PUSH
16620: LD_INT 15
16622: PUSH
16623: LD_INT 16
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: LD_INT 23
16631: PUSH
16632: LD_INT 26
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 101
16648: PUSH
16649: LD_INT 102
16651: PUSH
16652: LD_INT 105
16654: PUSH
16655: LD_INT 106
16657: PUSH
16658: LD_INT 108
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: ST_TO_ADDR
16672: GO 19451
16674: LD_INT 3
16676: DOUBLE
16677: EQUAL
16678: IFTRUE 16682
16680: GO 16758
16682: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16683: LD_ADDR_VAR 0 1
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: LD_INT 5
16696: PUSH
16697: LD_INT 11
16699: PUSH
16700: LD_INT 12
16702: PUSH
16703: LD_INT 15
16705: PUSH
16706: LD_INT 16
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_INT 26
16714: PUSH
16715: LD_INT 36
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 101
16732: PUSH
16733: LD_INT 102
16735: PUSH
16736: LD_INT 105
16738: PUSH
16739: LD_INT 106
16741: PUSH
16742: LD_INT 108
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: ST_TO_ADDR
16756: GO 19451
16758: LD_INT 4
16760: DOUBLE
16761: EQUAL
16762: IFTRUE 16766
16764: GO 16850
16766: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16767: LD_ADDR_VAR 0 1
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 4
16777: PUSH
16778: LD_INT 5
16780: PUSH
16781: LD_INT 8
16783: PUSH
16784: LD_INT 11
16786: PUSH
16787: LD_INT 12
16789: PUSH
16790: LD_INT 15
16792: PUSH
16793: LD_INT 16
16795: PUSH
16796: LD_INT 22
16798: PUSH
16799: LD_INT 23
16801: PUSH
16802: LD_INT 26
16804: PUSH
16805: LD_INT 36
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 101
16824: PUSH
16825: LD_INT 102
16827: PUSH
16828: LD_INT 105
16830: PUSH
16831: LD_INT 106
16833: PUSH
16834: LD_INT 108
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: ST_TO_ADDR
16848: GO 19451
16850: LD_INT 5
16852: DOUBLE
16853: EQUAL
16854: IFTRUE 16858
16856: GO 16958
16858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: LD_INT 4
16869: PUSH
16870: LD_INT 5
16872: PUSH
16873: LD_INT 6
16875: PUSH
16876: LD_INT 8
16878: PUSH
16879: LD_INT 11
16881: PUSH
16882: LD_INT 12
16884: PUSH
16885: LD_INT 15
16887: PUSH
16888: LD_INT 16
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_INT 23
16896: PUSH
16897: LD_INT 25
16899: PUSH
16900: LD_INT 26
16902: PUSH
16903: LD_INT 36
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 101
16924: PUSH
16925: LD_INT 102
16927: PUSH
16928: LD_INT 105
16930: PUSH
16931: LD_INT 106
16933: PUSH
16934: LD_INT 108
16936: PUSH
16937: LD_INT 109
16939: PUSH
16940: LD_INT 112
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: ST_TO_ADDR
16956: GO 19451
16958: LD_INT 6
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 17086
16966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16967: LD_ADDR_VAR 0 1
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 4
16977: PUSH
16978: LD_INT 5
16980: PUSH
16981: LD_INT 6
16983: PUSH
16984: LD_INT 8
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: LD_INT 12
16992: PUSH
16993: LD_INT 15
16995: PUSH
16996: LD_INT 16
16998: PUSH
16999: LD_INT 20
17001: PUSH
17002: LD_INT 21
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_INT 23
17010: PUSH
17011: LD_INT 25
17013: PUSH
17014: LD_INT 26
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 31
17022: PUSH
17023: LD_INT 32
17025: PUSH
17026: LD_INT 36
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 101
17052: PUSH
17053: LD_INT 102
17055: PUSH
17056: LD_INT 105
17058: PUSH
17059: LD_INT 106
17061: PUSH
17062: LD_INT 108
17064: PUSH
17065: LD_INT 109
17067: PUSH
17068: LD_INT 112
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: ST_TO_ADDR
17084: GO 19451
17086: LD_INT 7
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17194
17094: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 4
17105: PUSH
17106: LD_INT 5
17108: PUSH
17109: LD_INT 7
17111: PUSH
17112: LD_INT 11
17114: PUSH
17115: LD_INT 12
17117: PUSH
17118: LD_INT 15
17120: PUSH
17121: LD_INT 16
17123: PUSH
17124: LD_INT 20
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_INT 23
17135: PUSH
17136: LD_INT 25
17138: PUSH
17139: LD_INT 26
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 101
17160: PUSH
17161: LD_INT 102
17163: PUSH
17164: LD_INT 103
17166: PUSH
17167: LD_INT 105
17169: PUSH
17170: LD_INT 106
17172: PUSH
17173: LD_INT 108
17175: PUSH
17176: LD_INT 112
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: ST_TO_ADDR
17192: GO 19451
17194: LD_INT 8
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17330
17202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17203: LD_ADDR_VAR 0 1
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: LD_INT 4
17213: PUSH
17214: LD_INT 5
17216: PUSH
17217: LD_INT 6
17219: PUSH
17220: LD_INT 7
17222: PUSH
17223: LD_INT 8
17225: PUSH
17226: LD_INT 11
17228: PUSH
17229: LD_INT 12
17231: PUSH
17232: LD_INT 15
17234: PUSH
17235: LD_INT 16
17237: PUSH
17238: LD_INT 20
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 25
17252: PUSH
17253: LD_INT 26
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_INT 31
17261: PUSH
17262: LD_INT 32
17264: PUSH
17265: LD_INT 36
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 101
17292: PUSH
17293: LD_INT 102
17295: PUSH
17296: LD_INT 103
17298: PUSH
17299: LD_INT 105
17301: PUSH
17302: LD_INT 106
17304: PUSH
17305: LD_INT 108
17307: PUSH
17308: LD_INT 109
17310: PUSH
17311: LD_INT 112
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 19451
17330: LD_INT 9
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17474
17338: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17339: LD_ADDR_VAR 0 1
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: LD_INT 4
17349: PUSH
17350: LD_INT 5
17352: PUSH
17353: LD_INT 6
17355: PUSH
17356: LD_INT 7
17358: PUSH
17359: LD_INT 8
17361: PUSH
17362: LD_INT 11
17364: PUSH
17365: LD_INT 12
17367: PUSH
17368: LD_INT 15
17370: PUSH
17371: LD_INT 16
17373: PUSH
17374: LD_INT 20
17376: PUSH
17377: LD_INT 21
17379: PUSH
17380: LD_INT 22
17382: PUSH
17383: LD_INT 23
17385: PUSH
17386: LD_INT 25
17388: PUSH
17389: LD_INT 26
17391: PUSH
17392: LD_INT 28
17394: PUSH
17395: LD_INT 30
17397: PUSH
17398: LD_INT 31
17400: PUSH
17401: LD_INT 32
17403: PUSH
17404: LD_INT 36
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 101
17432: PUSH
17433: LD_INT 102
17435: PUSH
17436: LD_INT 103
17438: PUSH
17439: LD_INT 105
17441: PUSH
17442: LD_INT 106
17444: PUSH
17445: LD_INT 108
17447: PUSH
17448: LD_INT 109
17450: PUSH
17451: LD_INT 112
17453: PUSH
17454: LD_INT 114
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: ST_TO_ADDR
17472: GO 19451
17474: LD_INT 10
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17666
17482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17483: LD_ADDR_VAR 0 1
17487: PUSH
17488: LD_INT 2
17490: PUSH
17491: LD_INT 4
17493: PUSH
17494: LD_INT 5
17496: PUSH
17497: LD_INT 6
17499: PUSH
17500: LD_INT 7
17502: PUSH
17503: LD_INT 8
17505: PUSH
17506: LD_INT 9
17508: PUSH
17509: LD_INT 10
17511: PUSH
17512: LD_INT 11
17514: PUSH
17515: LD_INT 12
17517: PUSH
17518: LD_INT 13
17520: PUSH
17521: LD_INT 14
17523: PUSH
17524: LD_INT 15
17526: PUSH
17527: LD_INT 16
17529: PUSH
17530: LD_INT 17
17532: PUSH
17533: LD_INT 18
17535: PUSH
17536: LD_INT 19
17538: PUSH
17539: LD_INT 20
17541: PUSH
17542: LD_INT 21
17544: PUSH
17545: LD_INT 22
17547: PUSH
17548: LD_INT 23
17550: PUSH
17551: LD_INT 24
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: LD_INT 28
17562: PUSH
17563: LD_INT 30
17565: PUSH
17566: LD_INT 31
17568: PUSH
17569: LD_INT 32
17571: PUSH
17572: LD_INT 36
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 101
17608: PUSH
17609: LD_INT 102
17611: PUSH
17612: LD_INT 103
17614: PUSH
17615: LD_INT 104
17617: PUSH
17618: LD_INT 105
17620: PUSH
17621: LD_INT 106
17623: PUSH
17624: LD_INT 107
17626: PUSH
17627: LD_INT 108
17629: PUSH
17630: LD_INT 109
17632: PUSH
17633: LD_INT 110
17635: PUSH
17636: LD_INT 111
17638: PUSH
17639: LD_INT 112
17641: PUSH
17642: LD_INT 114
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: ST_TO_ADDR
17664: GO 19451
17666: LD_INT 11
17668: DOUBLE
17669: EQUAL
17670: IFTRUE 17674
17672: GO 17866
17674: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17675: LD_ADDR_VAR 0 1
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 3
17685: PUSH
17686: LD_INT 4
17688: PUSH
17689: LD_INT 5
17691: PUSH
17692: LD_INT 6
17694: PUSH
17695: LD_INT 7
17697: PUSH
17698: LD_INT 8
17700: PUSH
17701: LD_INT 9
17703: PUSH
17704: LD_INT 10
17706: PUSH
17707: LD_INT 11
17709: PUSH
17710: LD_INT 12
17712: PUSH
17713: LD_INT 13
17715: PUSH
17716: LD_INT 14
17718: PUSH
17719: LD_INT 15
17721: PUSH
17722: LD_INT 16
17724: PUSH
17725: LD_INT 17
17727: PUSH
17728: LD_INT 18
17730: PUSH
17731: LD_INT 19
17733: PUSH
17734: LD_INT 20
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 22
17742: PUSH
17743: LD_INT 23
17745: PUSH
17746: LD_INT 24
17748: PUSH
17749: LD_INT 25
17751: PUSH
17752: LD_INT 26
17754: PUSH
17755: LD_INT 28
17757: PUSH
17758: LD_INT 30
17760: PUSH
17761: LD_INT 31
17763: PUSH
17764: LD_INT 32
17766: PUSH
17767: LD_INT 34
17769: PUSH
17770: LD_INT 36
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 101
17808: PUSH
17809: LD_INT 102
17811: PUSH
17812: LD_INT 103
17814: PUSH
17815: LD_INT 104
17817: PUSH
17818: LD_INT 105
17820: PUSH
17821: LD_INT 106
17823: PUSH
17824: LD_INT 107
17826: PUSH
17827: LD_INT 108
17829: PUSH
17830: LD_INT 109
17832: PUSH
17833: LD_INT 110
17835: PUSH
17836: LD_INT 111
17838: PUSH
17839: LD_INT 112
17841: PUSH
17842: LD_INT 114
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: ST_TO_ADDR
17864: GO 19451
17866: LD_INT 12
17868: DOUBLE
17869: EQUAL
17870: IFTRUE 17874
17872: GO 18082
17874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17875: LD_ADDR_VAR 0 1
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: LD_INT 3
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: LD_INT 5
17894: PUSH
17895: LD_INT 6
17897: PUSH
17898: LD_INT 7
17900: PUSH
17901: LD_INT 8
17903: PUSH
17904: LD_INT 9
17906: PUSH
17907: LD_INT 10
17909: PUSH
17910: LD_INT 11
17912: PUSH
17913: LD_INT 12
17915: PUSH
17916: LD_INT 13
17918: PUSH
17919: LD_INT 14
17921: PUSH
17922: LD_INT 15
17924: PUSH
17925: LD_INT 16
17927: PUSH
17928: LD_INT 17
17930: PUSH
17931: LD_INT 18
17933: PUSH
17934: LD_INT 19
17936: PUSH
17937: LD_INT 20
17939: PUSH
17940: LD_INT 21
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_INT 23
17948: PUSH
17949: LD_INT 24
17951: PUSH
17952: LD_INT 25
17954: PUSH
17955: LD_INT 26
17957: PUSH
17958: LD_INT 27
17960: PUSH
17961: LD_INT 28
17963: PUSH
17964: LD_INT 30
17966: PUSH
17967: LD_INT 31
17969: PUSH
17970: LD_INT 32
17972: PUSH
17973: LD_INT 33
17975: PUSH
17976: LD_INT 34
17978: PUSH
17979: LD_INT 36
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 101
18020: PUSH
18021: LD_INT 102
18023: PUSH
18024: LD_INT 103
18026: PUSH
18027: LD_INT 104
18029: PUSH
18030: LD_INT 105
18032: PUSH
18033: LD_INT 106
18035: PUSH
18036: LD_INT 107
18038: PUSH
18039: LD_INT 108
18041: PUSH
18042: LD_INT 109
18044: PUSH
18045: LD_INT 110
18047: PUSH
18048: LD_INT 111
18050: PUSH
18051: LD_INT 112
18053: PUSH
18054: LD_INT 113
18056: PUSH
18057: LD_INT 114
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: ST_TO_ADDR
18080: GO 19451
18082: LD_INT 13
18084: DOUBLE
18085: EQUAL
18086: IFTRUE 18090
18088: GO 18286
18090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18091: LD_ADDR_VAR 0 1
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: LD_INT 4
18107: PUSH
18108: LD_INT 5
18110: PUSH
18111: LD_INT 8
18113: PUSH
18114: LD_INT 9
18116: PUSH
18117: LD_INT 10
18119: PUSH
18120: LD_INT 11
18122: PUSH
18123: LD_INT 12
18125: PUSH
18126: LD_INT 14
18128: PUSH
18129: LD_INT 15
18131: PUSH
18132: LD_INT 16
18134: PUSH
18135: LD_INT 17
18137: PUSH
18138: LD_INT 18
18140: PUSH
18141: LD_INT 19
18143: PUSH
18144: LD_INT 20
18146: PUSH
18147: LD_INT 21
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_INT 23
18155: PUSH
18156: LD_INT 24
18158: PUSH
18159: LD_INT 25
18161: PUSH
18162: LD_INT 26
18164: PUSH
18165: LD_INT 27
18167: PUSH
18168: LD_INT 28
18170: PUSH
18171: LD_INT 30
18173: PUSH
18174: LD_INT 31
18176: PUSH
18177: LD_INT 32
18179: PUSH
18180: LD_INT 33
18182: PUSH
18183: LD_INT 34
18185: PUSH
18186: LD_INT 36
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 101
18224: PUSH
18225: LD_INT 102
18227: PUSH
18228: LD_INT 103
18230: PUSH
18231: LD_INT 104
18233: PUSH
18234: LD_INT 105
18236: PUSH
18237: LD_INT 106
18239: PUSH
18240: LD_INT 107
18242: PUSH
18243: LD_INT 108
18245: PUSH
18246: LD_INT 109
18248: PUSH
18249: LD_INT 110
18251: PUSH
18252: LD_INT 111
18254: PUSH
18255: LD_INT 112
18257: PUSH
18258: LD_INT 113
18260: PUSH
18261: LD_INT 114
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: ST_TO_ADDR
18284: GO 19451
18286: LD_INT 14
18288: DOUBLE
18289: EQUAL
18290: IFTRUE 18294
18292: GO 18506
18294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: LD_INT 3
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: LD_INT 5
18314: PUSH
18315: LD_INT 6
18317: PUSH
18318: LD_INT 7
18320: PUSH
18321: LD_INT 8
18323: PUSH
18324: LD_INT 9
18326: PUSH
18327: LD_INT 10
18329: PUSH
18330: LD_INT 11
18332: PUSH
18333: LD_INT 12
18335: PUSH
18336: LD_INT 13
18338: PUSH
18339: LD_INT 14
18341: PUSH
18342: LD_INT 15
18344: PUSH
18345: LD_INT 16
18347: PUSH
18348: LD_INT 17
18350: PUSH
18351: LD_INT 18
18353: PUSH
18354: LD_INT 19
18356: PUSH
18357: LD_INT 20
18359: PUSH
18360: LD_INT 21
18362: PUSH
18363: LD_INT 22
18365: PUSH
18366: LD_INT 23
18368: PUSH
18369: LD_INT 24
18371: PUSH
18372: LD_INT 25
18374: PUSH
18375: LD_INT 26
18377: PUSH
18378: LD_INT 27
18380: PUSH
18381: LD_INT 28
18383: PUSH
18384: LD_INT 29
18386: PUSH
18387: LD_INT 30
18389: PUSH
18390: LD_INT 31
18392: PUSH
18393: LD_INT 32
18395: PUSH
18396: LD_INT 33
18398: PUSH
18399: LD_INT 34
18401: PUSH
18402: LD_INT 36
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 101
18444: PUSH
18445: LD_INT 102
18447: PUSH
18448: LD_INT 103
18450: PUSH
18451: LD_INT 104
18453: PUSH
18454: LD_INT 105
18456: PUSH
18457: LD_INT 106
18459: PUSH
18460: LD_INT 107
18462: PUSH
18463: LD_INT 108
18465: PUSH
18466: LD_INT 109
18468: PUSH
18469: LD_INT 110
18471: PUSH
18472: LD_INT 111
18474: PUSH
18475: LD_INT 112
18477: PUSH
18478: LD_INT 113
18480: PUSH
18481: LD_INT 114
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: ST_TO_ADDR
18504: GO 19451
18506: LD_INT 15
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18726
18514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18515: LD_ADDR_VAR 0 1
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 3
18528: PUSH
18529: LD_INT 4
18531: PUSH
18532: LD_INT 5
18534: PUSH
18535: LD_INT 6
18537: PUSH
18538: LD_INT 7
18540: PUSH
18541: LD_INT 8
18543: PUSH
18544: LD_INT 9
18546: PUSH
18547: LD_INT 10
18549: PUSH
18550: LD_INT 11
18552: PUSH
18553: LD_INT 12
18555: PUSH
18556: LD_INT 13
18558: PUSH
18559: LD_INT 14
18561: PUSH
18562: LD_INT 15
18564: PUSH
18565: LD_INT 16
18567: PUSH
18568: LD_INT 17
18570: PUSH
18571: LD_INT 18
18573: PUSH
18574: LD_INT 19
18576: PUSH
18577: LD_INT 20
18579: PUSH
18580: LD_INT 21
18582: PUSH
18583: LD_INT 22
18585: PUSH
18586: LD_INT 23
18588: PUSH
18589: LD_INT 24
18591: PUSH
18592: LD_INT 25
18594: PUSH
18595: LD_INT 26
18597: PUSH
18598: LD_INT 27
18600: PUSH
18601: LD_INT 28
18603: PUSH
18604: LD_INT 29
18606: PUSH
18607: LD_INT 30
18609: PUSH
18610: LD_INT 31
18612: PUSH
18613: LD_INT 32
18615: PUSH
18616: LD_INT 33
18618: PUSH
18619: LD_INT 34
18621: PUSH
18622: LD_INT 36
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 101
18664: PUSH
18665: LD_INT 102
18667: PUSH
18668: LD_INT 103
18670: PUSH
18671: LD_INT 104
18673: PUSH
18674: LD_INT 105
18676: PUSH
18677: LD_INT 106
18679: PUSH
18680: LD_INT 107
18682: PUSH
18683: LD_INT 108
18685: PUSH
18686: LD_INT 109
18688: PUSH
18689: LD_INT 110
18691: PUSH
18692: LD_INT 111
18694: PUSH
18695: LD_INT 112
18697: PUSH
18698: LD_INT 113
18700: PUSH
18701: LD_INT 114
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 19451
18726: LD_INT 16
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18858
18734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18735: LD_ADDR_VAR 0 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: LD_INT 5
18748: PUSH
18749: LD_INT 7
18751: PUSH
18752: LD_INT 11
18754: PUSH
18755: LD_INT 12
18757: PUSH
18758: LD_INT 15
18760: PUSH
18761: LD_INT 16
18763: PUSH
18764: LD_INT 20
18766: PUSH
18767: LD_INT 21
18769: PUSH
18770: LD_INT 22
18772: PUSH
18773: LD_INT 23
18775: PUSH
18776: LD_INT 25
18778: PUSH
18779: LD_INT 26
18781: PUSH
18782: LD_INT 30
18784: PUSH
18785: LD_INT 31
18787: PUSH
18788: LD_INT 32
18790: PUSH
18791: LD_INT 33
18793: PUSH
18794: LD_INT 34
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 101
18820: PUSH
18821: LD_INT 102
18823: PUSH
18824: LD_INT 103
18826: PUSH
18827: LD_INT 106
18829: PUSH
18830: LD_INT 108
18832: PUSH
18833: LD_INT 112
18835: PUSH
18836: LD_INT 113
18838: PUSH
18839: LD_INT 114
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: ST_TO_ADDR
18856: GO 19451
18858: LD_INT 17
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 19078
18866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18867: LD_ADDR_VAR 0 1
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 3
18880: PUSH
18881: LD_INT 4
18883: PUSH
18884: LD_INT 5
18886: PUSH
18887: LD_INT 6
18889: PUSH
18890: LD_INT 7
18892: PUSH
18893: LD_INT 8
18895: PUSH
18896: LD_INT 9
18898: PUSH
18899: LD_INT 10
18901: PUSH
18902: LD_INT 11
18904: PUSH
18905: LD_INT 12
18907: PUSH
18908: LD_INT 13
18910: PUSH
18911: LD_INT 14
18913: PUSH
18914: LD_INT 15
18916: PUSH
18917: LD_INT 16
18919: PUSH
18920: LD_INT 17
18922: PUSH
18923: LD_INT 18
18925: PUSH
18926: LD_INT 19
18928: PUSH
18929: LD_INT 20
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 23
18940: PUSH
18941: LD_INT 24
18943: PUSH
18944: LD_INT 25
18946: PUSH
18947: LD_INT 26
18949: PUSH
18950: LD_INT 27
18952: PUSH
18953: LD_INT 28
18955: PUSH
18956: LD_INT 29
18958: PUSH
18959: LD_INT 30
18961: PUSH
18962: LD_INT 31
18964: PUSH
18965: LD_INT 32
18967: PUSH
18968: LD_INT 33
18970: PUSH
18971: LD_INT 34
18973: PUSH
18974: LD_INT 36
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 101
19016: PUSH
19017: LD_INT 102
19019: PUSH
19020: LD_INT 103
19022: PUSH
19023: LD_INT 104
19025: PUSH
19026: LD_INT 105
19028: PUSH
19029: LD_INT 106
19031: PUSH
19032: LD_INT 107
19034: PUSH
19035: LD_INT 108
19037: PUSH
19038: LD_INT 109
19040: PUSH
19041: LD_INT 110
19043: PUSH
19044: LD_INT 111
19046: PUSH
19047: LD_INT 112
19049: PUSH
19050: LD_INT 113
19052: PUSH
19053: LD_INT 114
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: ST_TO_ADDR
19076: GO 19451
19078: LD_INT 18
19080: DOUBLE
19081: EQUAL
19082: IFTRUE 19086
19084: GO 19222
19086: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19087: LD_ADDR_VAR 0 1
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 4
19097: PUSH
19098: LD_INT 5
19100: PUSH
19101: LD_INT 7
19103: PUSH
19104: LD_INT 11
19106: PUSH
19107: LD_INT 12
19109: PUSH
19110: LD_INT 15
19112: PUSH
19113: LD_INT 16
19115: PUSH
19116: LD_INT 20
19118: PUSH
19119: LD_INT 21
19121: PUSH
19122: LD_INT 22
19124: PUSH
19125: LD_INT 23
19127: PUSH
19128: LD_INT 25
19130: PUSH
19131: LD_INT 26
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 31
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: LD_INT 33
19145: PUSH
19146: LD_INT 34
19148: PUSH
19149: LD_INT 35
19151: PUSH
19152: LD_INT 36
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 101
19180: PUSH
19181: LD_INT 102
19183: PUSH
19184: LD_INT 103
19186: PUSH
19187: LD_INT 106
19189: PUSH
19190: LD_INT 108
19192: PUSH
19193: LD_INT 112
19195: PUSH
19196: LD_INT 113
19198: PUSH
19199: LD_INT 114
19201: PUSH
19202: LD_INT 115
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: ST_TO_ADDR
19220: GO 19451
19222: LD_INT 19
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19450
19230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19231: LD_ADDR_VAR 0 1
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: LD_INT 4
19247: PUSH
19248: LD_INT 5
19250: PUSH
19251: LD_INT 6
19253: PUSH
19254: LD_INT 7
19256: PUSH
19257: LD_INT 8
19259: PUSH
19260: LD_INT 9
19262: PUSH
19263: LD_INT 10
19265: PUSH
19266: LD_INT 11
19268: PUSH
19269: LD_INT 12
19271: PUSH
19272: LD_INT 13
19274: PUSH
19275: LD_INT 14
19277: PUSH
19278: LD_INT 15
19280: PUSH
19281: LD_INT 16
19283: PUSH
19284: LD_INT 17
19286: PUSH
19287: LD_INT 18
19289: PUSH
19290: LD_INT 19
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 24
19307: PUSH
19308: LD_INT 25
19310: PUSH
19311: LD_INT 26
19313: PUSH
19314: LD_INT 27
19316: PUSH
19317: LD_INT 28
19319: PUSH
19320: LD_INT 29
19322: PUSH
19323: LD_INT 30
19325: PUSH
19326: LD_INT 31
19328: PUSH
19329: LD_INT 32
19331: PUSH
19332: LD_INT 33
19334: PUSH
19335: LD_INT 34
19337: PUSH
19338: LD_INT 35
19340: PUSH
19341: LD_INT 36
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 101
19384: PUSH
19385: LD_INT 102
19387: PUSH
19388: LD_INT 103
19390: PUSH
19391: LD_INT 104
19393: PUSH
19394: LD_INT 105
19396: PUSH
19397: LD_INT 106
19399: PUSH
19400: LD_INT 107
19402: PUSH
19403: LD_INT 108
19405: PUSH
19406: LD_INT 109
19408: PUSH
19409: LD_INT 110
19411: PUSH
19412: LD_INT 111
19414: PUSH
19415: LD_INT 112
19417: PUSH
19418: LD_INT 113
19420: PUSH
19421: LD_INT 114
19423: PUSH
19424: LD_INT 115
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: ST_TO_ADDR
19448: GO 19451
19450: POP
// end else
19451: GO 19670
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 3
19466: PUSH
19467: LD_INT 4
19469: PUSH
19470: LD_INT 5
19472: PUSH
19473: LD_INT 6
19475: PUSH
19476: LD_INT 7
19478: PUSH
19479: LD_INT 8
19481: PUSH
19482: LD_INT 9
19484: PUSH
19485: LD_INT 10
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 13
19496: PUSH
19497: LD_INT 14
19499: PUSH
19500: LD_INT 15
19502: PUSH
19503: LD_INT 16
19505: PUSH
19506: LD_INT 17
19508: PUSH
19509: LD_INT 18
19511: PUSH
19512: LD_INT 19
19514: PUSH
19515: LD_INT 20
19517: PUSH
19518: LD_INT 21
19520: PUSH
19521: LD_INT 22
19523: PUSH
19524: LD_INT 23
19526: PUSH
19527: LD_INT 24
19529: PUSH
19530: LD_INT 25
19532: PUSH
19533: LD_INT 26
19535: PUSH
19536: LD_INT 27
19538: PUSH
19539: LD_INT 28
19541: PUSH
19542: LD_INT 29
19544: PUSH
19545: LD_INT 30
19547: PUSH
19548: LD_INT 31
19550: PUSH
19551: LD_INT 32
19553: PUSH
19554: LD_INT 33
19556: PUSH
19557: LD_INT 34
19559: PUSH
19560: LD_INT 35
19562: PUSH
19563: LD_INT 36
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 101
19606: PUSH
19607: LD_INT 102
19609: PUSH
19610: LD_INT 103
19612: PUSH
19613: LD_INT 104
19615: PUSH
19616: LD_INT 105
19618: PUSH
19619: LD_INT 106
19621: PUSH
19622: LD_INT 107
19624: PUSH
19625: LD_INT 108
19627: PUSH
19628: LD_INT 109
19630: PUSH
19631: LD_INT 110
19633: PUSH
19634: LD_INT 111
19636: PUSH
19637: LD_INT 112
19639: PUSH
19640: LD_INT 113
19642: PUSH
19643: LD_INT 114
19645: PUSH
19646: LD_INT 115
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: ST_TO_ADDR
// if result then
19670: LD_VAR 0 1
19674: IFFALSE 19963
// begin normal :=  ;
19676: LD_ADDR_VAR 0 3
19680: PUSH
19681: LD_STRING 
19683: ST_TO_ADDR
// hardcore :=  ;
19684: LD_ADDR_VAR 0 4
19688: PUSH
19689: LD_STRING 
19691: ST_TO_ADDR
// for i = 1 to normalCounter do
19692: LD_ADDR_VAR 0 5
19696: PUSH
19697: DOUBLE
19698: LD_INT 1
19700: DEC
19701: ST_TO_ADDR
19702: LD_EXP 49
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19809
// begin tmp := 0 ;
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_STRING 0
19717: ST_TO_ADDR
// if result [ 1 ] then
19718: LD_VAR 0 1
19722: PUSH
19723: LD_INT 1
19725: ARRAY
19726: IFFALSE 19791
// if result [ 1 ] [ 1 ] = i then
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 1
19735: ARRAY
19736: PUSH
19737: LD_INT 1
19739: ARRAY
19740: PUSH
19741: LD_VAR 0 5
19745: EQUAL
19746: IFFALSE 19791
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19748: LD_ADDR_VAR 0 1
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: LD_INT 1
19772: PPUSH
19773: CALL_OW 3
19777: PPUSH
19778: CALL_OW 1
19782: ST_TO_ADDR
// tmp := 1 ;
19783: LD_ADDR_VAR 0 2
19787: PUSH
19788: LD_STRING 1
19790: ST_TO_ADDR
// end ; normal := normal & tmp ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_VAR 0 3
19800: PUSH
19801: LD_VAR 0 2
19805: STR
19806: ST_TO_ADDR
// end ;
19807: GO 19707
19809: POP
19810: POP
// for i = 1 to hardcoreCounter do
19811: LD_ADDR_VAR 0 5
19815: PUSH
19816: DOUBLE
19817: LD_INT 1
19819: DEC
19820: ST_TO_ADDR
19821: LD_EXP 50
19825: PUSH
19826: FOR_TO
19827: IFFALSE 19932
// begin tmp := 0 ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_STRING 0
19836: ST_TO_ADDR
// if result [ 2 ] then
19837: LD_VAR 0 1
19841: PUSH
19842: LD_INT 2
19844: ARRAY
19845: IFFALSE 19914
// if result [ 2 ] [ 1 ] = 100 + i then
19847: LD_VAR 0 1
19851: PUSH
19852: LD_INT 2
19854: ARRAY
19855: PUSH
19856: LD_INT 1
19858: ARRAY
19859: PUSH
19860: LD_INT 100
19862: PUSH
19863: LD_VAR 0 5
19867: PLUS
19868: EQUAL
19869: IFFALSE 19914
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19871: LD_ADDR_VAR 0 1
19875: PUSH
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 2
19883: PPUSH
19884: LD_VAR 0 1
19888: PUSH
19889: LD_INT 2
19891: ARRAY
19892: PPUSH
19893: LD_INT 1
19895: PPUSH
19896: CALL_OW 3
19900: PPUSH
19901: CALL_OW 1
19905: ST_TO_ADDR
// tmp := 1 ;
19906: LD_ADDR_VAR 0 2
19910: PUSH
19911: LD_STRING 1
19913: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19914: LD_ADDR_VAR 0 4
19918: PUSH
19919: LD_VAR 0 4
19923: PUSH
19924: LD_VAR 0 2
19928: STR
19929: ST_TO_ADDR
// end ;
19930: GO 19826
19932: POP
19933: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19934: LD_STRING getStreamItemsFromMission("
19936: PUSH
19937: LD_VAR 0 3
19941: STR
19942: PUSH
19943: LD_STRING ","
19945: STR
19946: PUSH
19947: LD_VAR 0 4
19951: STR
19952: PUSH
19953: LD_STRING ")
19955: STR
19956: PPUSH
19957: CALL_OW 559
// end else
19961: GO 19970
// ToLua ( getStreamItemsFromMission("","") ) ;
19963: LD_STRING getStreamItemsFromMission("","")
19965: PPUSH
19966: CALL_OW 559
// end ;
19970: LD_VAR 0 1
19974: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19975: LD_EXP 48
19979: PUSH
19980: LD_EXP 53
19984: AND
19985: IFFALSE 20109
19987: GO 19989
19989: DISABLE
19990: LD_INT 0
19992: PPUSH
19993: PPUSH
// begin enable ;
19994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19995: LD_ADDR_VAR 0 2
19999: PUSH
20000: LD_INT 22
20002: PUSH
20003: LD_OWVAR 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: LD_INT 34
20017: PUSH
20018: LD_INT 7
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 34
20027: PUSH
20028: LD_INT 45
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 34
20037: PUSH
20038: LD_INT 28
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 34
20047: PUSH
20048: LD_INT 47
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 69
20070: ST_TO_ADDR
// if not tmp then
20071: LD_VAR 0 2
20075: NOT
20076: IFFALSE 20080
// exit ;
20078: GO 20109
// for i in tmp do
20080: LD_ADDR_VAR 0 1
20084: PUSH
20085: LD_VAR 0 2
20089: PUSH
20090: FOR_IN
20091: IFFALSE 20107
// begin SetLives ( i , 0 ) ;
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_INT 0
20100: PPUSH
20101: CALL_OW 234
// end ;
20105: GO 20090
20107: POP
20108: POP
// end ;
20109: PPOPN 2
20111: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20112: LD_EXP 48
20116: PUSH
20117: LD_EXP 54
20121: AND
20122: IFFALSE 20206
20124: GO 20126
20126: DISABLE
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
// begin enable ;
20131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20132: LD_ADDR_VAR 0 2
20136: PUSH
20137: LD_INT 22
20139: PUSH
20140: LD_OWVAR 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 32
20151: PUSH
20152: LD_INT 3
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PPUSH
20163: CALL_OW 69
20167: ST_TO_ADDR
// if not tmp then
20168: LD_VAR 0 2
20172: NOT
20173: IFFALSE 20177
// exit ;
20175: GO 20206
// for i in tmp do
20177: LD_ADDR_VAR 0 1
20181: PUSH
20182: LD_VAR 0 2
20186: PUSH
20187: FOR_IN
20188: IFFALSE 20204
// begin SetLives ( i , 0 ) ;
20190: LD_VAR 0 1
20194: PPUSH
20195: LD_INT 0
20197: PPUSH
20198: CALL_OW 234
// end ;
20202: GO 20187
20204: POP
20205: POP
// end ;
20206: PPOPN 2
20208: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20209: LD_EXP 48
20213: PUSH
20214: LD_EXP 51
20218: AND
20219: IFFALSE 20312
20221: GO 20223
20223: DISABLE
20224: LD_INT 0
20226: PPUSH
// begin enable ;
20227: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20228: LD_ADDR_VAR 0 1
20232: PUSH
20233: LD_INT 22
20235: PUSH
20236: LD_OWVAR 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 25
20250: PUSH
20251: LD_INT 5
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 25
20260: PUSH
20261: LD_INT 9
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 25
20270: PUSH
20271: LD_INT 8
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: PUSH
20293: FOR_IN
20294: IFFALSE 20310
// begin SetClass ( i , 1 ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 336
// end ;
20308: GO 20293
20310: POP
20311: POP
// end ;
20312: PPOPN 1
20314: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20315: LD_EXP 48
20319: PUSH
20320: LD_EXP 52
20324: AND
20325: PUSH
20326: LD_OWVAR 65
20330: PUSH
20331: LD_INT 7
20333: LESS
20334: AND
20335: IFFALSE 20349
20337: GO 20339
20339: DISABLE
// begin enable ;
20340: ENABLE
// game_speed := 7 ;
20341: LD_ADDR_OWVAR 65
20345: PUSH
20346: LD_INT 7
20348: ST_TO_ADDR
// end ;
20349: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20350: LD_EXP 48
20354: PUSH
20355: LD_EXP 55
20359: AND
20360: IFFALSE 20562
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
20369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_INT 81
20377: PUSH
20378: LD_OWVAR 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 21
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PPUSH
20401: CALL_OW 69
20405: ST_TO_ADDR
// if not tmp then
20406: LD_VAR 0 3
20410: NOT
20411: IFFALSE 20415
// exit ;
20413: GO 20562
// if tmp > 5 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 5
20422: GREATER
20423: IFFALSE 20435
// k := 5 else
20425: LD_ADDR_VAR 0 2
20429: PUSH
20430: LD_INT 5
20432: ST_TO_ADDR
20433: GO 20445
// k := tmp ;
20435: LD_ADDR_VAR 0 2
20439: PUSH
20440: LD_VAR 0 3
20444: ST_TO_ADDR
// for i := 1 to k do
20445: LD_ADDR_VAR 0 1
20449: PUSH
20450: DOUBLE
20451: LD_INT 1
20453: DEC
20454: ST_TO_ADDR
20455: LD_VAR 0 2
20459: PUSH
20460: FOR_TO
20461: IFFALSE 20560
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_VAR 0 1
20472: ARRAY
20473: PPUSH
20474: LD_VAR 0 1
20478: PUSH
20479: LD_INT 4
20481: MOD
20482: PUSH
20483: LD_INT 1
20485: PLUS
20486: PPUSH
20487: CALL_OW 259
20491: PUSH
20492: LD_INT 10
20494: LESS
20495: IFFALSE 20558
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20497: LD_VAR 0 3
20501: PUSH
20502: LD_VAR 0 1
20506: ARRAY
20507: PPUSH
20508: LD_VAR 0 1
20512: PUSH
20513: LD_INT 4
20515: MOD
20516: PUSH
20517: LD_INT 1
20519: PLUS
20520: PPUSH
20521: LD_VAR 0 3
20525: PUSH
20526: LD_VAR 0 1
20530: ARRAY
20531: PPUSH
20532: LD_VAR 0 1
20536: PUSH
20537: LD_INT 4
20539: MOD
20540: PUSH
20541: LD_INT 1
20543: PLUS
20544: PPUSH
20545: CALL_OW 259
20549: PUSH
20550: LD_INT 1
20552: PLUS
20553: PPUSH
20554: CALL_OW 237
20558: GO 20460
20560: POP
20561: POP
// end ;
20562: PPOPN 3
20564: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20565: LD_EXP 48
20569: PUSH
20570: LD_EXP 56
20574: AND
20575: IFFALSE 20595
20577: GO 20579
20579: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20580: LD_INT 4
20582: PPUSH
20583: LD_OWVAR 2
20587: PPUSH
20588: LD_INT 0
20590: PPUSH
20591: CALL_OW 324
20595: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20596: LD_EXP 48
20600: PUSH
20601: LD_EXP 85
20605: AND
20606: IFFALSE 20626
20608: GO 20610
20610: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20611: LD_INT 19
20613: PPUSH
20614: LD_OWVAR 2
20618: PPUSH
20619: LD_INT 0
20621: PPUSH
20622: CALL_OW 324
20626: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20627: LD_EXP 48
20631: PUSH
20632: LD_EXP 57
20636: AND
20637: IFFALSE 20739
20639: GO 20641
20641: DISABLE
20642: LD_INT 0
20644: PPUSH
20645: PPUSH
// begin enable ;
20646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20647: LD_ADDR_VAR 0 2
20651: PUSH
20652: LD_INT 22
20654: PUSH
20655: LD_OWVAR 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 34
20669: PUSH
20670: LD_INT 11
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 34
20679: PUSH
20680: LD_INT 30
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 69
20700: ST_TO_ADDR
// if not tmp then
20701: LD_VAR 0 2
20705: NOT
20706: IFFALSE 20710
// exit ;
20708: GO 20739
// for i in tmp do
20710: LD_ADDR_VAR 0 1
20714: PUSH
20715: LD_VAR 0 2
20719: PUSH
20720: FOR_IN
20721: IFFALSE 20737
// begin SetLives ( i , 0 ) ;
20723: LD_VAR 0 1
20727: PPUSH
20728: LD_INT 0
20730: PPUSH
20731: CALL_OW 234
// end ;
20735: GO 20720
20737: POP
20738: POP
// end ;
20739: PPOPN 2
20741: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20742: LD_EXP 48
20746: PUSH
20747: LD_EXP 58
20751: AND
20752: IFFALSE 20772
20754: GO 20756
20756: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20757: LD_INT 32
20759: PPUSH
20760: LD_OWVAR 2
20764: PPUSH
20765: LD_INT 0
20767: PPUSH
20768: CALL_OW 324
20772: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20773: LD_EXP 48
20777: PUSH
20778: LD_EXP 59
20782: AND
20783: IFFALSE 20964
20785: GO 20787
20787: DISABLE
20788: LD_INT 0
20790: PPUSH
20791: PPUSH
20792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20793: LD_ADDR_VAR 0 2
20797: PUSH
20798: LD_INT 22
20800: PUSH
20801: LD_OWVAR 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 33
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PPUSH
20824: CALL_OW 69
20828: ST_TO_ADDR
// if not tmp then
20829: LD_VAR 0 2
20833: NOT
20834: IFFALSE 20838
// exit ;
20836: GO 20964
// side := 0 ;
20838: LD_ADDR_VAR 0 3
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// for i := 1 to 8 do
20846: LD_ADDR_VAR 0 1
20850: PUSH
20851: DOUBLE
20852: LD_INT 1
20854: DEC
20855: ST_TO_ADDR
20856: LD_INT 8
20858: PUSH
20859: FOR_TO
20860: IFFALSE 20908
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20862: LD_OWVAR 2
20866: PUSH
20867: LD_VAR 0 1
20871: NONEQUAL
20872: PUSH
20873: LD_OWVAR 2
20877: PPUSH
20878: LD_VAR 0 1
20882: PPUSH
20883: CALL_OW 81
20887: PUSH
20888: LD_INT 2
20890: EQUAL
20891: AND
20892: IFFALSE 20906
// begin side := i ;
20894: LD_ADDR_VAR 0 3
20898: PUSH
20899: LD_VAR 0 1
20903: ST_TO_ADDR
// break ;
20904: GO 20908
// end ;
20906: GO 20859
20908: POP
20909: POP
// if not side then
20910: LD_VAR 0 3
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20964
// for i := 1 to tmp do
20919: LD_ADDR_VAR 0 1
20923: PUSH
20924: DOUBLE
20925: LD_INT 1
20927: DEC
20928: ST_TO_ADDR
20929: LD_VAR 0 2
20933: PUSH
20934: FOR_TO
20935: IFFALSE 20962
// if Prob ( 60 ) then
20937: LD_INT 60
20939: PPUSH
20940: CALL_OW 13
20944: IFFALSE 20960
// SetSide ( i , side ) ;
20946: LD_VAR 0 1
20950: PPUSH
20951: LD_VAR 0 3
20955: PPUSH
20956: CALL_OW 235
20960: GO 20934
20962: POP
20963: POP
// end ;
20964: PPOPN 3
20966: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20967: LD_EXP 48
20971: PUSH
20972: LD_EXP 61
20976: AND
20977: IFFALSE 21096
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20985: LD_ADDR_VAR 0 1
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_OWVAR 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 3
21014: PUSH
21015: LD_INT 23
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 69
21038: PUSH
21039: FOR_IN
21040: IFFALSE 21094
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21042: LD_VAR 0 1
21046: PPUSH
21047: CALL_OW 257
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 3
21060: PUSH
21061: LD_INT 4
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: IN
21070: IFFALSE 21092
// SetClass ( un , rand ( 1 , 4 ) ) ;
21072: LD_VAR 0 1
21076: PPUSH
21077: LD_INT 1
21079: PPUSH
21080: LD_INT 4
21082: PPUSH
21083: CALL_OW 12
21087: PPUSH
21088: CALL_OW 336
21092: GO 21039
21094: POP
21095: POP
// end ;
21096: PPOPN 1
21098: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21099: LD_EXP 48
21103: PUSH
21104: LD_EXP 60
21108: AND
21109: IFFALSE 21188
21111: GO 21113
21113: DISABLE
21114: LD_INT 0
21116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21117: LD_ADDR_VAR 0 1
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_OWVAR 2
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 3
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PPUSH
21148: CALL_OW 69
21152: ST_TO_ADDR
// if not tmp then
21153: LD_VAR 0 1
21157: NOT
21158: IFFALSE 21162
// exit ;
21160: GO 21188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21162: LD_VAR 0 1
21166: PUSH
21167: LD_INT 1
21169: PPUSH
21170: LD_VAR 0 1
21174: PPUSH
21175: CALL_OW 12
21179: ARRAY
21180: PPUSH
21181: LD_INT 100
21183: PPUSH
21184: CALL_OW 234
// end ;
21188: PPOPN 1
21190: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21191: LD_EXP 48
21195: PUSH
21196: LD_EXP 62
21200: AND
21201: IFFALSE 21299
21203: GO 21205
21205: DISABLE
21206: LD_INT 0
21208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21209: LD_ADDR_VAR 0 1
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_OWVAR 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 21
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 69
21244: ST_TO_ADDR
// if not tmp then
21245: LD_VAR 0 1
21249: NOT
21250: IFFALSE 21254
// exit ;
21252: GO 21299
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21254: LD_VAR 0 1
21258: PUSH
21259: LD_INT 1
21261: PPUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 12
21271: ARRAY
21272: PPUSH
21273: LD_INT 1
21275: PPUSH
21276: LD_INT 4
21278: PPUSH
21279: CALL_OW 12
21283: PPUSH
21284: LD_INT 3000
21286: PPUSH
21287: LD_INT 9000
21289: PPUSH
21290: CALL_OW 12
21294: PPUSH
21295: CALL_OW 492
// end ;
21299: PPOPN 1
21301: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21302: LD_EXP 48
21306: PUSH
21307: LD_EXP 63
21311: AND
21312: IFFALSE 21332
21314: GO 21316
21316: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21317: LD_INT 1
21319: PPUSH
21320: LD_OWVAR 2
21324: PPUSH
21325: LD_INT 0
21327: PPUSH
21328: CALL_OW 324
21332: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21333: LD_EXP 48
21337: PUSH
21338: LD_EXP 64
21342: AND
21343: IFFALSE 21426
21345: GO 21347
21347: DISABLE
21348: LD_INT 0
21350: PPUSH
21351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 69
21387: ST_TO_ADDR
// if not tmp then
21388: LD_VAR 0 2
21392: NOT
21393: IFFALSE 21397
// exit ;
21395: GO 21426
// for i in tmp do
21397: LD_ADDR_VAR 0 1
21401: PUSH
21402: LD_VAR 0 2
21406: PUSH
21407: FOR_IN
21408: IFFALSE 21424
// SetBLevel ( i , 10 ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: LD_INT 10
21417: PPUSH
21418: CALL_OW 241
21422: GO 21407
21424: POP
21425: POP
// end ;
21426: PPOPN 2
21428: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21429: LD_EXP 48
21433: PUSH
21434: LD_EXP 65
21438: AND
21439: IFFALSE 21550
21441: GO 21443
21443: DISABLE
21444: LD_INT 0
21446: PPUSH
21447: PPUSH
21448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21449: LD_ADDR_VAR 0 3
21453: PUSH
21454: LD_INT 22
21456: PUSH
21457: LD_OWVAR 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 25
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: ST_TO_ADDR
// if not tmp then
21485: LD_VAR 0 3
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21550
// un := tmp [ rand ( 1 , tmp ) ] ;
21494: LD_ADDR_VAR 0 2
21498: PUSH
21499: LD_VAR 0 3
21503: PUSH
21504: LD_INT 1
21506: PPUSH
21507: LD_VAR 0 3
21511: PPUSH
21512: CALL_OW 12
21516: ARRAY
21517: ST_TO_ADDR
// if Crawls ( un ) then
21518: LD_VAR 0 2
21522: PPUSH
21523: CALL_OW 318
21527: IFFALSE 21538
// ComWalk ( un ) ;
21529: LD_VAR 0 2
21533: PPUSH
21534: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21538: LD_VAR 0 2
21542: PPUSH
21543: LD_INT 5
21545: PPUSH
21546: CALL_OW 336
// end ;
21550: PPOPN 3
21552: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21553: LD_EXP 48
21557: PUSH
21558: LD_EXP 66
21562: AND
21563: PUSH
21564: LD_OWVAR 67
21568: PUSH
21569: LD_INT 3
21571: LESS
21572: AND
21573: IFFALSE 21592
21575: GO 21577
21577: DISABLE
// Difficulty := Difficulty + 1 ;
21578: LD_ADDR_OWVAR 67
21582: PUSH
21583: LD_OWVAR 67
21587: PUSH
21588: LD_INT 1
21590: PLUS
21591: ST_TO_ADDR
21592: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21593: LD_EXP 48
21597: PUSH
21598: LD_EXP 67
21602: AND
21603: IFFALSE 21706
21605: GO 21607
21607: DISABLE
21608: LD_INT 0
21610: PPUSH
// begin for i := 1 to 5 do
21611: LD_ADDR_VAR 0 1
21615: PUSH
21616: DOUBLE
21617: LD_INT 1
21619: DEC
21620: ST_TO_ADDR
21621: LD_INT 5
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21704
// begin uc_nation := nation_nature ;
21627: LD_ADDR_OWVAR 21
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// uc_side := 0 ;
21635: LD_ADDR_OWVAR 20
21639: PUSH
21640: LD_INT 0
21642: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21643: LD_ADDR_OWVAR 29
21647: PUSH
21648: LD_INT 12
21650: PUSH
21651: LD_INT 12
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: ST_TO_ADDR
// hc_agressivity := 20 ;
21658: LD_ADDR_OWVAR 35
21662: PUSH
21663: LD_INT 20
21665: ST_TO_ADDR
// hc_class := class_tiger ;
21666: LD_ADDR_OWVAR 28
21670: PUSH
21671: LD_INT 14
21673: ST_TO_ADDR
// hc_gallery :=  ;
21674: LD_ADDR_OWVAR 33
21678: PUSH
21679: LD_STRING 
21681: ST_TO_ADDR
// hc_name :=  ;
21682: LD_ADDR_OWVAR 26
21686: PUSH
21687: LD_STRING 
21689: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21690: CALL_OW 44
21694: PPUSH
21695: LD_INT 0
21697: PPUSH
21698: CALL_OW 51
// end ;
21702: GO 21624
21704: POP
21705: POP
// end ;
21706: PPOPN 1
21708: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21709: LD_EXP 48
21713: PUSH
21714: LD_EXP 68
21718: AND
21719: IFFALSE 21728
21721: GO 21723
21723: DISABLE
// StreamSibBomb ;
21724: CALL 21729 0 0
21728: END
// export function StreamSibBomb ; var i , x , y ; begin
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
21733: PPUSH
21734: PPUSH
// result := false ;
21735: LD_ADDR_VAR 0 1
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// for i := 1 to 16 do
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: DOUBLE
21749: LD_INT 1
21751: DEC
21752: ST_TO_ADDR
21753: LD_INT 16
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21956
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21759: LD_ADDR_VAR 0 3
21763: PUSH
21764: LD_INT 10
21766: PUSH
21767: LD_INT 20
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 40
21775: PUSH
21776: LD_INT 50
21778: PUSH
21779: LD_INT 60
21781: PUSH
21782: LD_INT 70
21784: PUSH
21785: LD_INT 80
21787: PUSH
21788: LD_INT 90
21790: PUSH
21791: LD_INT 100
21793: PUSH
21794: LD_INT 110
21796: PUSH
21797: LD_INT 120
21799: PUSH
21800: LD_INT 130
21802: PUSH
21803: LD_INT 140
21805: PUSH
21806: LD_INT 150
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PPUSH
21829: LD_INT 15
21831: PPUSH
21832: CALL_OW 12
21836: ARRAY
21837: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21838: LD_ADDR_VAR 0 4
21842: PUSH
21843: LD_INT 10
21845: PUSH
21846: LD_INT 20
21848: PUSH
21849: LD_INT 30
21851: PUSH
21852: LD_INT 40
21854: PUSH
21855: LD_INT 50
21857: PUSH
21858: LD_INT 60
21860: PUSH
21861: LD_INT 70
21863: PUSH
21864: LD_INT 80
21866: PUSH
21867: LD_INT 90
21869: PUSH
21870: LD_INT 100
21872: PUSH
21873: LD_INT 110
21875: PUSH
21876: LD_INT 120
21878: PUSH
21879: LD_INT 130
21881: PUSH
21882: LD_INT 140
21884: PUSH
21885: LD_INT 150
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: PPUSH
21908: LD_INT 15
21910: PPUSH
21911: CALL_OW 12
21915: ARRAY
21916: ST_TO_ADDR
// if ValidHex ( x , y ) then
21917: LD_VAR 0 3
21921: PPUSH
21922: LD_VAR 0 4
21926: PPUSH
21927: CALL_OW 488
21931: IFFALSE 21954
// begin result := [ x , y ] ;
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_VAR 0 3
21942: PUSH
21943: LD_VAR 0 4
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: ST_TO_ADDR
// break ;
21952: GO 21956
// end ; end ;
21954: GO 21756
21956: POP
21957: POP
// if result then
21958: LD_VAR 0 1
21962: IFFALSE 22022
// begin ToLua ( playSibBomb() ) ;
21964: LD_STRING playSibBomb()
21966: PPUSH
21967: CALL_OW 559
// wait ( 0 0$14 ) ;
21971: LD_INT 490
21973: PPUSH
21974: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21978: LD_VAR 0 1
21982: PUSH
21983: LD_INT 1
21985: ARRAY
21986: PPUSH
21987: LD_VAR 0 1
21991: PUSH
21992: LD_INT 2
21994: ARRAY
21995: PPUSH
21996: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22000: LD_VAR 0 1
22004: PUSH
22005: LD_INT 1
22007: ARRAY
22008: PPUSH
22009: LD_VAR 0 1
22013: PUSH
22014: LD_INT 2
22016: ARRAY
22017: PPUSH
22018: CALL_OW 429
// end ; end ;
22022: LD_VAR 0 1
22026: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22027: LD_EXP 48
22031: PUSH
22032: LD_EXP 70
22036: AND
22037: IFFALSE 22049
22039: GO 22041
22041: DISABLE
// YouLost (  ) ;
22042: LD_STRING 
22044: PPUSH
22045: CALL_OW 104
22049: END
// every 0 0$1 trigger StreamModeActive and sFog do
22050: LD_EXP 48
22054: PUSH
22055: LD_EXP 69
22059: AND
22060: IFFALSE 22074
22062: GO 22064
22064: DISABLE
// FogOff ( your_side ) ;
22065: LD_OWVAR 2
22069: PPUSH
22070: CALL_OW 344
22074: END
// every 0 0$1 trigger StreamModeActive and sSun do
22075: LD_EXP 48
22079: PUSH
22080: LD_EXP 71
22084: AND
22085: IFFALSE 22113
22087: GO 22089
22089: DISABLE
// begin solar_recharge_percent := 0 ;
22090: LD_ADDR_OWVAR 79
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22098: LD_INT 10500
22100: PPUSH
22101: CALL_OW 67
// solar_recharge_percent := 100 ;
22105: LD_ADDR_OWVAR 79
22109: PUSH
22110: LD_INT 100
22112: ST_TO_ADDR
// end ;
22113: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22114: LD_EXP 48
22118: PUSH
22119: LD_EXP 72
22123: AND
22124: IFFALSE 22363
22126: GO 22128
22128: DISABLE
22129: LD_INT 0
22131: PPUSH
22132: PPUSH
22133: PPUSH
// begin tmp := [ ] ;
22134: LD_ADDR_VAR 0 3
22138: PUSH
22139: EMPTY
22140: ST_TO_ADDR
// for i := 1 to 6 do
22141: LD_ADDR_VAR 0 1
22145: PUSH
22146: DOUBLE
22147: LD_INT 1
22149: DEC
22150: ST_TO_ADDR
22151: LD_INT 6
22153: PUSH
22154: FOR_TO
22155: IFFALSE 22260
// begin uc_nation := nation_nature ;
22157: LD_ADDR_OWVAR 21
22161: PUSH
22162: LD_INT 0
22164: ST_TO_ADDR
// uc_side := 0 ;
22165: LD_ADDR_OWVAR 20
22169: PUSH
22170: LD_INT 0
22172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22173: LD_ADDR_OWVAR 29
22177: PUSH
22178: LD_INT 12
22180: PUSH
22181: LD_INT 12
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: ST_TO_ADDR
// hc_agressivity := 20 ;
22188: LD_ADDR_OWVAR 35
22192: PUSH
22193: LD_INT 20
22195: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22196: LD_ADDR_OWVAR 28
22200: PUSH
22201: LD_INT 17
22203: ST_TO_ADDR
// hc_gallery :=  ;
22204: LD_ADDR_OWVAR 33
22208: PUSH
22209: LD_STRING 
22211: ST_TO_ADDR
// hc_name :=  ;
22212: LD_ADDR_OWVAR 26
22216: PUSH
22217: LD_STRING 
22219: ST_TO_ADDR
// un := CreateHuman ;
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: CALL_OW 44
22229: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22230: LD_VAR 0 2
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 51
// tmp := tmp ^ un ;
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: LD_VAR 0 3
22251: PUSH
22252: LD_VAR 0 2
22256: ADD
22257: ST_TO_ADDR
// end ;
22258: GO 22154
22260: POP
22261: POP
// repeat wait ( 0 0$1 ) ;
22262: LD_INT 35
22264: PPUSH
22265: CALL_OW 67
// for un in tmp do
22269: LD_ADDR_VAR 0 2
22273: PUSH
22274: LD_VAR 0 3
22278: PUSH
22279: FOR_IN
22280: IFFALSE 22354
// begin if IsDead ( un ) then
22282: LD_VAR 0 2
22286: PPUSH
22287: CALL_OW 301
22291: IFFALSE 22311
// begin tmp := tmp diff un ;
22293: LD_ADDR_VAR 0 3
22297: PUSH
22298: LD_VAR 0 3
22302: PUSH
22303: LD_VAR 0 2
22307: DIFF
22308: ST_TO_ADDR
// continue ;
22309: GO 22279
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22311: LD_VAR 0 2
22315: PPUSH
22316: LD_INT 3
22318: PUSH
22319: LD_INT 22
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PPUSH
22333: CALL_OW 69
22337: PPUSH
22338: LD_VAR 0 2
22342: PPUSH
22343: CALL_OW 74
22347: PPUSH
22348: CALL_OW 115
// end ;
22352: GO 22279
22354: POP
22355: POP
// until not tmp ;
22356: LD_VAR 0 3
22360: NOT
22361: IFFALSE 22262
// end ;
22363: PPOPN 3
22365: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22366: LD_EXP 48
22370: PUSH
22371: LD_EXP 73
22375: AND
22376: IFFALSE 22430
22378: GO 22380
22380: DISABLE
// begin ToLua ( displayTroll(); ) ;
22381: LD_STRING displayTroll();
22383: PPUSH
22384: CALL_OW 559
// wait ( 3 3$00 ) ;
22388: LD_INT 6300
22390: PPUSH
22391: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22395: LD_STRING hideTroll();
22397: PPUSH
22398: CALL_OW 559
// wait ( 1 1$00 ) ;
22402: LD_INT 2100
22404: PPUSH
22405: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22409: LD_STRING displayTroll();
22411: PPUSH
22412: CALL_OW 559
// wait ( 1 1$00 ) ;
22416: LD_INT 2100
22418: PPUSH
22419: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22423: LD_STRING hideTroll();
22425: PPUSH
22426: CALL_OW 559
// end ;
22430: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22431: LD_EXP 48
22435: PUSH
22436: LD_EXP 74
22440: AND
22441: IFFALSE 22504
22443: GO 22445
22445: DISABLE
22446: LD_INT 0
22448: PPUSH
// begin p := 0 ;
22449: LD_ADDR_VAR 0 1
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// repeat game_speed := 1 ;
22457: LD_ADDR_OWVAR 65
22461: PUSH
22462: LD_INT 1
22464: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22465: LD_INT 35
22467: PPUSH
22468: CALL_OW 67
// p := p + 1 ;
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_VAR 0 1
22481: PUSH
22482: LD_INT 1
22484: PLUS
22485: ST_TO_ADDR
// until p >= 60 ;
22486: LD_VAR 0 1
22490: PUSH
22491: LD_INT 60
22493: GREATEREQUAL
22494: IFFALSE 22457
// game_speed := 4 ;
22496: LD_ADDR_OWVAR 65
22500: PUSH
22501: LD_INT 4
22503: ST_TO_ADDR
// end ;
22504: PPOPN 1
22506: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22507: LD_EXP 48
22511: PUSH
22512: LD_EXP 75
22516: AND
22517: IFFALSE 22663
22519: GO 22521
22521: DISABLE
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22526: LD_ADDR_VAR 0 1
22530: PUSH
22531: LD_INT 22
22533: PUSH
22534: LD_OWVAR 2
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 30
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 30
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: ST_TO_ADDR
// if not depot then
22580: LD_VAR 0 1
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 22663
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_VAR 0 1
22598: PUSH
22599: LD_INT 1
22601: PPUSH
22602: LD_VAR 0 1
22606: PPUSH
22607: CALL_OW 12
22611: ARRAY
22612: PPUSH
22613: CALL_OW 274
22617: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22618: LD_VAR 0 2
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_INT 0
22628: PPUSH
22629: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_INT 2
22640: PPUSH
22641: LD_INT 0
22643: PPUSH
22644: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22648: LD_VAR 0 2
22652: PPUSH
22653: LD_INT 3
22655: PPUSH
22656: LD_INT 0
22658: PPUSH
22659: CALL_OW 277
// end ;
22663: PPOPN 2
22665: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22666: LD_EXP 48
22670: PUSH
22671: LD_EXP 76
22675: AND
22676: IFFALSE 22773
22678: GO 22680
22680: DISABLE
22681: LD_INT 0
22683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22684: LD_ADDR_VAR 0 1
22688: PUSH
22689: LD_INT 22
22691: PUSH
22692: LD_OWVAR 2
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 21
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 3
22713: PUSH
22714: LD_INT 23
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: PPUSH
22733: CALL_OW 69
22737: ST_TO_ADDR
// if not tmp then
22738: LD_VAR 0 1
22742: NOT
22743: IFFALSE 22747
// exit ;
22745: GO 22773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22747: LD_VAR 0 1
22751: PUSH
22752: LD_INT 1
22754: PPUSH
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 12
22764: ARRAY
22765: PPUSH
22766: LD_INT 200
22768: PPUSH
22769: CALL_OW 234
// end ;
22773: PPOPN 1
22775: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22776: LD_EXP 48
22780: PUSH
22781: LD_EXP 77
22785: AND
22786: IFFALSE 22865
22788: GO 22790
22790: DISABLE
22791: LD_INT 0
22793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22794: LD_ADDR_VAR 0 1
22798: PUSH
22799: LD_INT 22
22801: PUSH
22802: LD_OWVAR 2
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PPUSH
22825: CALL_OW 69
22829: ST_TO_ADDR
// if not tmp then
22830: LD_VAR 0 1
22834: NOT
22835: IFFALSE 22839
// exit ;
22837: GO 22865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22839: LD_VAR 0 1
22843: PUSH
22844: LD_INT 1
22846: PPUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 12
22856: ARRAY
22857: PPUSH
22858: LD_INT 60
22860: PPUSH
22861: CALL_OW 234
// end ;
22865: PPOPN 1
22867: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22868: LD_EXP 48
22872: PUSH
22873: LD_EXP 78
22877: AND
22878: IFFALSE 22977
22880: GO 22882
22882: DISABLE
22883: LD_INT 0
22885: PPUSH
22886: PPUSH
// begin enable ;
22887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22888: LD_ADDR_VAR 0 1
22892: PUSH
22893: LD_INT 22
22895: PUSH
22896: LD_OWVAR 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 61
22907: PUSH
22908: EMPTY
22909: LIST
22910: PUSH
22911: LD_INT 33
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 69
22930: ST_TO_ADDR
// if not tmp then
22931: LD_VAR 0 1
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 22977
// for i in tmp do
22940: LD_ADDR_VAR 0 2
22944: PUSH
22945: LD_VAR 0 1
22949: PUSH
22950: FOR_IN
22951: IFFALSE 22975
// if IsControledBy ( i ) then
22953: LD_VAR 0 2
22957: PPUSH
22958: CALL_OW 312
22962: IFFALSE 22973
// ComUnlink ( i ) ;
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 136
22973: GO 22950
22975: POP
22976: POP
// end ;
22977: PPOPN 2
22979: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22980: LD_EXP 48
22984: PUSH
22985: LD_EXP 79
22989: AND
22990: IFFALSE 23130
22992: GO 22994
22994: DISABLE
22995: LD_INT 0
22997: PPUSH
22998: PPUSH
// begin ToLua ( displayPowell(); ) ;
22999: LD_STRING displayPowell();
23001: PPUSH
23002: CALL_OW 559
// uc_side := 0 ;
23006: LD_ADDR_OWVAR 20
23010: PUSH
23011: LD_INT 0
23013: ST_TO_ADDR
// uc_nation := 2 ;
23014: LD_ADDR_OWVAR 21
23018: PUSH
23019: LD_INT 2
23021: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23022: LD_ADDR_OWVAR 37
23026: PUSH
23027: LD_INT 14
23029: ST_TO_ADDR
// vc_engine := engine_siberite ;
23030: LD_ADDR_OWVAR 39
23034: PUSH
23035: LD_INT 3
23037: ST_TO_ADDR
// vc_control := control_apeman ;
23038: LD_ADDR_OWVAR 38
23042: PUSH
23043: LD_INT 5
23045: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23046: LD_ADDR_OWVAR 40
23050: PUSH
23051: LD_INT 29
23053: ST_TO_ADDR
// un := CreateVehicle ;
23054: LD_ADDR_VAR 0 2
23058: PUSH
23059: CALL_OW 45
23063: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23064: LD_VAR 0 2
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23076: LD_INT 35
23078: PPUSH
23079: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23083: LD_VAR 0 2
23087: PPUSH
23088: LD_INT 22
23090: PUSH
23091: LD_OWVAR 2
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: PPUSH
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 74
23114: PPUSH
23115: CALL_OW 115
// until IsDead ( un ) ;
23119: LD_VAR 0 2
23123: PPUSH
23124: CALL_OW 301
23128: IFFALSE 23076
// end ;
23130: PPOPN 2
23132: END
// every 0 0$1 trigger StreamModeActive and sStu do
23133: LD_EXP 48
23137: PUSH
23138: LD_EXP 87
23142: AND
23143: IFFALSE 23159
23145: GO 23147
23147: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23148: LD_STRING displayStucuk();
23150: PPUSH
23151: CALL_OW 559
// ResetFog ;
23155: CALL_OW 335
// end ;
23159: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23160: LD_EXP 48
23164: PUSH
23165: LD_EXP 80
23169: AND
23170: IFFALSE 23311
23172: GO 23174
23174: DISABLE
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 22
23186: PUSH
23187: LD_OWVAR 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 21
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 69
23214: ST_TO_ADDR
// if not tmp then
23215: LD_VAR 0 2
23219: NOT
23220: IFFALSE 23224
// exit ;
23222: GO 23311
// un := tmp [ rand ( 1 , tmp ) ] ;
23224: LD_ADDR_VAR 0 1
23228: PUSH
23229: LD_VAR 0 2
23233: PUSH
23234: LD_INT 1
23236: PPUSH
23237: LD_VAR 0 2
23241: PPUSH
23242: CALL_OW 12
23246: ARRAY
23247: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23248: LD_VAR 0 1
23252: PPUSH
23253: LD_INT 0
23255: PPUSH
23256: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23260: LD_VAR 0 1
23264: PPUSH
23265: LD_OWVAR 3
23269: PUSH
23270: LD_VAR 0 1
23274: DIFF
23275: PPUSH
23276: LD_VAR 0 1
23280: PPUSH
23281: CALL_OW 74
23285: PPUSH
23286: CALL_OW 115
// wait ( 0 0$20 ) ;
23290: LD_INT 700
23292: PPUSH
23293: CALL_OW 67
// SetSide ( un , your_side ) ;
23297: LD_VAR 0 1
23301: PPUSH
23302: LD_OWVAR 2
23306: PPUSH
23307: CALL_OW 235
// end ;
23311: PPOPN 2
23313: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23314: LD_EXP 48
23318: PUSH
23319: LD_EXP 81
23323: AND
23324: IFFALSE 23430
23326: GO 23328
23328: DISABLE
23329: LD_INT 0
23331: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23332: LD_ADDR_VAR 0 1
23336: PUSH
23337: LD_INT 22
23339: PUSH
23340: LD_OWVAR 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 30
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 30
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PPUSH
23381: CALL_OW 69
23385: ST_TO_ADDR
// if not depot then
23386: LD_VAR 0 1
23390: NOT
23391: IFFALSE 23395
// exit ;
23393: GO 23430
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23395: LD_VAR 0 1
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PPUSH
23404: CALL_OW 250
23408: PPUSH
23409: LD_VAR 0 1
23413: PUSH
23414: LD_INT 1
23416: ARRAY
23417: PPUSH
23418: CALL_OW 251
23422: PPUSH
23423: LD_INT 70
23425: PPUSH
23426: CALL_OW 495
// end ;
23430: PPOPN 1
23432: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23433: LD_EXP 48
23437: PUSH
23438: LD_EXP 82
23442: AND
23443: IFFALSE 23654
23445: GO 23447
23447: DISABLE
23448: LD_INT 0
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_OWVAR 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 21
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 5
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23654
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 5
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23652
// begin d := rand ( 0 , 5 ) ;
23513: LD_ADDR_VAR 0 4
23517: PUSH
23518: LD_INT 0
23520: PPUSH
23521: LD_INT 5
23523: PPUSH
23524: CALL_OW 12
23528: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 250
23543: PPUSH
23544: LD_VAR 0 4
23548: PPUSH
23549: LD_INT 3
23551: PPUSH
23552: LD_INT 12
23554: PPUSH
23555: CALL_OW 12
23559: PPUSH
23560: CALL_OW 272
23564: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 251
23579: PPUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_INT 3
23587: PPUSH
23588: LD_INT 12
23590: PPUSH
23591: CALL_OW 12
23595: PPUSH
23596: CALL_OW 273
23600: ST_TO_ADDR
// if ValidHex ( x , y ) then
23601: LD_VAR 0 2
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: CALL_OW 488
23615: IFFALSE 23650
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_VAR 0 2
23626: PPUSH
23627: LD_VAR 0 3
23631: PPUSH
23632: LD_INT 3
23634: PPUSH
23635: LD_INT 6
23637: PPUSH
23638: CALL_OW 12
23642: PPUSH
23643: LD_INT 1
23645: PPUSH
23646: CALL_OW 483
// end ;
23650: GO 23510
23652: POP
23653: POP
// end ;
23654: PPOPN 5
23656: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23657: LD_EXP 48
23661: PUSH
23662: LD_EXP 83
23666: AND
23667: IFFALSE 23761
23669: GO 23671
23671: DISABLE
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23676: LD_ADDR_VAR 0 2
23680: PUSH
23681: LD_INT 22
23683: PUSH
23684: LD_OWVAR 2
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 32
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 21
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: ST_TO_ADDR
// if not tmp then
23723: LD_VAR 0 2
23727: NOT
23728: IFFALSE 23732
// exit ;
23730: GO 23761
// for i in tmp do
23732: LD_ADDR_VAR 0 1
23736: PUSH
23737: LD_VAR 0 2
23741: PUSH
23742: FOR_IN
23743: IFFALSE 23759
// SetFuel ( i , 0 ) ;
23745: LD_VAR 0 1
23749: PPUSH
23750: LD_INT 0
23752: PPUSH
23753: CALL_OW 240
23757: GO 23742
23759: POP
23760: POP
// end ;
23761: PPOPN 2
23763: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23764: LD_EXP 48
23768: PUSH
23769: LD_EXP 84
23773: AND
23774: IFFALSE 23840
23776: GO 23778
23778: DISABLE
23779: LD_INT 0
23781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23782: LD_ADDR_VAR 0 1
23786: PUSH
23787: LD_INT 22
23789: PUSH
23790: LD_OWVAR 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 30
23801: PUSH
23802: LD_INT 29
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// if not tmp then
23818: LD_VAR 0 1
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23840
// DestroyUnit ( tmp [ 1 ] ) ;
23827: LD_VAR 0 1
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PPUSH
23836: CALL_OW 65
// end ;
23840: PPOPN 1
23842: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23843: LD_EXP 48
23847: PUSH
23848: LD_EXP 86
23852: AND
23853: IFFALSE 23982
23855: GO 23857
23857: DISABLE
23858: LD_INT 0
23860: PPUSH
// begin uc_side := 0 ;
23861: LD_ADDR_OWVAR 20
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
// uc_nation := nation_arabian ;
23869: LD_ADDR_OWVAR 21
23873: PUSH
23874: LD_INT 2
23876: ST_TO_ADDR
// hc_gallery :=  ;
23877: LD_ADDR_OWVAR 33
23881: PUSH
23882: LD_STRING 
23884: ST_TO_ADDR
// hc_name :=  ;
23885: LD_ADDR_OWVAR 26
23889: PUSH
23890: LD_STRING 
23892: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23893: LD_INT 1
23895: PPUSH
23896: LD_INT 11
23898: PPUSH
23899: LD_INT 10
23901: PPUSH
23902: CALL_OW 380
// un := CreateHuman ;
23906: LD_ADDR_VAR 0 1
23910: PUSH
23911: CALL_OW 44
23915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_INT 1
23923: PPUSH
23924: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23928: LD_INT 35
23930: PPUSH
23931: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 22
23942: PUSH
23943: LD_OWVAR 2
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PPUSH
23952: CALL_OW 69
23956: PPUSH
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 74
23966: PPUSH
23967: CALL_OW 115
// until IsDead ( un ) ;
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 301
23980: IFFALSE 23928
// end ;
23982: PPOPN 1
23984: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23985: LD_EXP 48
23989: PUSH
23990: LD_EXP 88
23994: AND
23995: IFFALSE 24007
23997: GO 23999
23999: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24000: LD_STRING earthquake(getX(game), 0, 32)
24002: PPUSH
24003: CALL_OW 559
24007: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24008: LD_EXP 48
24012: PUSH
24013: LD_EXP 89
24017: AND
24018: IFFALSE 24109
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
// begin enable ;
24026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24027: LD_ADDR_VAR 0 1
24031: PUSH
24032: LD_INT 22
24034: PUSH
24035: LD_OWVAR 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 21
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 33
24056: PUSH
24057: LD_INT 3
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: ST_TO_ADDR
// if not tmp then
24074: LD_VAR 0 1
24078: NOT
24079: IFFALSE 24083
// exit ;
24081: GO 24109
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24083: LD_VAR 0 1
24087: PUSH
24088: LD_INT 1
24090: PPUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 12
24100: ARRAY
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL_OW 234
// end ;
24109: PPOPN 1
24111: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24112: LD_EXP 48
24116: PUSH
24117: LD_EXP 90
24121: AND
24122: IFFALSE 24263
24124: GO 24126
24126: DISABLE
24127: LD_INT 0
24129: PPUSH
24130: PPUSH
24131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_OWVAR 2
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 25
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ST_TO_ADDR
// if not tmp then
24168: LD_VAR 0 3
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24263
// un := tmp [ rand ( 1 , tmp ) ] ;
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: LD_VAR 0 3
24186: PUSH
24187: LD_INT 1
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: CALL_OW 12
24199: ARRAY
24200: ST_TO_ADDR
// if Crawls ( un ) then
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 318
24210: IFFALSE 24221
// ComWalk ( un ) ;
24212: LD_VAR 0 2
24216: PPUSH
24217: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24221: LD_VAR 0 2
24225: PPUSH
24226: LD_INT 9
24228: PPUSH
24229: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24233: LD_INT 28
24235: PPUSH
24236: LD_OWVAR 2
24240: PPUSH
24241: LD_INT 2
24243: PPUSH
24244: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24248: LD_INT 29
24250: PPUSH
24251: LD_OWVAR 2
24255: PPUSH
24256: LD_INT 2
24258: PPUSH
24259: CALL_OW 322
// end ;
24263: PPOPN 3
24265: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24266: LD_EXP 48
24270: PUSH
24271: LD_EXP 91
24275: AND
24276: IFFALSE 24387
24278: GO 24280
24280: DISABLE
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
24285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: LD_OWVAR 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 25
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PPUSH
24317: CALL_OW 69
24321: ST_TO_ADDR
// if not tmp then
24322: LD_VAR 0 3
24326: NOT
24327: IFFALSE 24331
// exit ;
24329: GO 24387
// un := tmp [ rand ( 1 , tmp ) ] ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_VAR 0 3
24340: PUSH
24341: LD_INT 1
24343: PPUSH
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 12
24353: ARRAY
24354: ST_TO_ADDR
// if Crawls ( un ) then
24355: LD_VAR 0 2
24359: PPUSH
24360: CALL_OW 318
24364: IFFALSE 24375
// ComWalk ( un ) ;
24366: LD_VAR 0 2
24370: PPUSH
24371: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_INT 8
24382: PPUSH
24383: CALL_OW 336
// end ;
24387: PPOPN 3
24389: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24390: LD_EXP 48
24394: PUSH
24395: LD_EXP 92
24399: AND
24400: IFFALSE 24544
24402: GO 24404
24404: DISABLE
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24409: LD_ADDR_VAR 0 2
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_OWVAR 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 34
24441: PUSH
24442: LD_INT 12
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 34
24451: PUSH
24452: LD_INT 51
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 34
24461: PUSH
24462: LD_INT 32
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: LIST
24479: PPUSH
24480: CALL_OW 69
24484: ST_TO_ADDR
// if not tmp then
24485: LD_VAR 0 2
24489: NOT
24490: IFFALSE 24494
// exit ;
24492: GO 24544
// for i in tmp do
24494: LD_ADDR_VAR 0 1
24498: PUSH
24499: LD_VAR 0 2
24503: PUSH
24504: FOR_IN
24505: IFFALSE 24542
// if GetCargo ( i , mat_artifact ) = 0 then
24507: LD_VAR 0 1
24511: PPUSH
24512: LD_INT 4
24514: PPUSH
24515: CALL_OW 289
24519: PUSH
24520: LD_INT 0
24522: EQUAL
24523: IFFALSE 24540
// SetCargo ( i , mat_siberit , 100 ) ;
24525: LD_VAR 0 1
24529: PPUSH
24530: LD_INT 3
24532: PPUSH
24533: LD_INT 100
24535: PPUSH
24536: CALL_OW 290
24540: GO 24504
24542: POP
24543: POP
// end ;
24544: PPOPN 2
24546: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24547: LD_EXP 48
24551: PUSH
24552: LD_EXP 93
24556: AND
24557: IFFALSE 24740
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: LD_INT 22
24573: PUSH
24574: LD_OWVAR 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: ST_TO_ADDR
// if not tmp then
24588: LD_VAR 0 2
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 24740
// for i := 1 to 2 do
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: DOUBLE
24603: LD_INT 1
24605: DEC
24606: ST_TO_ADDR
24607: LD_INT 2
24609: PUSH
24610: FOR_TO
24611: IFFALSE 24738
// begin uc_side := your_side ;
24613: LD_ADDR_OWVAR 20
24617: PUSH
24618: LD_OWVAR 2
24622: ST_TO_ADDR
// uc_nation := nation_american ;
24623: LD_ADDR_OWVAR 21
24627: PUSH
24628: LD_INT 1
24630: ST_TO_ADDR
// vc_chassis := us_morphling ;
24631: LD_ADDR_OWVAR 37
24635: PUSH
24636: LD_INT 5
24638: ST_TO_ADDR
// vc_engine := engine_siberite ;
24639: LD_ADDR_OWVAR 39
24643: PUSH
24644: LD_INT 3
24646: ST_TO_ADDR
// vc_control := control_computer ;
24647: LD_ADDR_OWVAR 38
24651: PUSH
24652: LD_INT 3
24654: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24655: LD_ADDR_OWVAR 40
24659: PUSH
24660: LD_INT 10
24662: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24663: LD_VAR 0 2
24667: PUSH
24668: LD_INT 1
24670: ARRAY
24671: PPUSH
24672: CALL_OW 310
24676: NOT
24677: IFFALSE 24724
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24679: CALL_OW 45
24683: PPUSH
24684: LD_VAR 0 2
24688: PUSH
24689: LD_INT 1
24691: ARRAY
24692: PPUSH
24693: CALL_OW 250
24697: PPUSH
24698: LD_VAR 0 2
24702: PUSH
24703: LD_INT 1
24705: ARRAY
24706: PPUSH
24707: CALL_OW 251
24711: PPUSH
24712: LD_INT 12
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: CALL_OW 50
24722: GO 24736
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24724: CALL_OW 45
24728: PPUSH
24729: LD_INT 1
24731: PPUSH
24732: CALL_OW 51
// end ;
24736: GO 24610
24738: POP
24739: POP
// end ;
24740: PPOPN 2
24742: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24743: LD_EXP 48
24747: PUSH
24748: LD_EXP 94
24752: AND
24753: IFFALSE 24975
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24766: LD_ADDR_VAR 0 6
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_OWVAR 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 21
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 23
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: PPUSH
24815: CALL_OW 69
24819: ST_TO_ADDR
// if not tmp then
24820: LD_VAR 0 6
24824: NOT
24825: IFFALSE 24829
// exit ;
24827: GO 24975
// s1 := rand ( 1 , 4 ) ;
24829: LD_ADDR_VAR 0 2
24833: PUSH
24834: LD_INT 1
24836: PPUSH
24837: LD_INT 4
24839: PPUSH
24840: CALL_OW 12
24844: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24845: LD_ADDR_VAR 0 4
24849: PUSH
24850: LD_VAR 0 6
24854: PUSH
24855: LD_INT 1
24857: ARRAY
24858: PPUSH
24859: LD_VAR 0 2
24863: PPUSH
24864: CALL_OW 259
24868: ST_TO_ADDR
// if s1 = 1 then
24869: LD_VAR 0 2
24873: PUSH
24874: LD_INT 1
24876: EQUAL
24877: IFFALSE 24897
// s2 := rand ( 2 , 4 ) else
24879: LD_ADDR_VAR 0 3
24883: PUSH
24884: LD_INT 2
24886: PPUSH
24887: LD_INT 4
24889: PPUSH
24890: CALL_OW 12
24894: ST_TO_ADDR
24895: GO 24905
// s2 := 1 ;
24897: LD_ADDR_VAR 0 3
24901: PUSH
24902: LD_INT 1
24904: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24905: LD_ADDR_VAR 0 5
24909: PUSH
24910: LD_VAR 0 6
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: PPUSH
24919: LD_VAR 0 3
24923: PPUSH
24924: CALL_OW 259
24928: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24929: LD_VAR 0 6
24933: PUSH
24934: LD_INT 1
24936: ARRAY
24937: PPUSH
24938: LD_VAR 0 2
24942: PPUSH
24943: LD_VAR 0 5
24947: PPUSH
24948: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24952: LD_VAR 0 6
24956: PUSH
24957: LD_INT 1
24959: ARRAY
24960: PPUSH
24961: LD_VAR 0 3
24965: PPUSH
24966: LD_VAR 0 4
24970: PPUSH
24971: CALL_OW 237
// end ;
24975: PPOPN 6
24977: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24978: LD_EXP 48
24982: PUSH
24983: LD_EXP 95
24987: AND
24988: IFFALSE 25067
24990: GO 24992
24992: DISABLE
24993: LD_INT 0
24995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24996: LD_ADDR_VAR 0 1
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_OWVAR 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 30
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if not tmp then
25032: LD_VAR 0 1
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25041: LD_VAR 0 1
25045: PUSH
25046: LD_INT 1
25048: PPUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 12
25058: ARRAY
25059: PPUSH
25060: LD_INT 1
25062: PPUSH
25063: CALL_OW 234
// end ;
25067: PPOPN 1
25069: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25070: LD_EXP 48
25074: PUSH
25075: LD_EXP 96
25079: AND
25080: IFFALSE 25192
25082: GO 25084
25084: DISABLE
25085: LD_INT 0
25087: PPUSH
25088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_INT 22
25096: PUSH
25097: LD_OWVAR 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 30
25111: PUSH
25112: LD_INT 27
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 30
25121: PUSH
25122: LD_INT 26
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 30
25131: PUSH
25132: LD_INT 28
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PPUSH
25149: CALL_OW 69
25153: ST_TO_ADDR
// if not tmp then
25154: LD_VAR 0 2
25158: NOT
25159: IFFALSE 25163
// exit ;
25161: GO 25192
// for i in tmp do
25163: LD_ADDR_VAR 0 1
25167: PUSH
25168: LD_VAR 0 2
25172: PUSH
25173: FOR_IN
25174: IFFALSE 25190
// SetLives ( i , 1 ) ;
25176: LD_VAR 0 1
25180: PPUSH
25181: LD_INT 1
25183: PPUSH
25184: CALL_OW 234
25188: GO 25173
25190: POP
25191: POP
// end ;
25192: PPOPN 2
25194: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25195: LD_EXP 48
25199: PUSH
25200: LD_EXP 97
25204: AND
25205: IFFALSE 25479
25207: GO 25209
25209: DISABLE
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
// begin i := rand ( 1 , 7 ) ;
25215: LD_ADDR_VAR 0 1
25219: PUSH
25220: LD_INT 1
25222: PPUSH
25223: LD_INT 7
25225: PPUSH
25226: CALL_OW 12
25230: ST_TO_ADDR
// case i of 1 :
25231: LD_VAR 0 1
25235: PUSH
25236: LD_INT 1
25238: DOUBLE
25239: EQUAL
25240: IFTRUE 25244
25242: GO 25254
25244: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25245: LD_STRING earthquake(getX(game), 0, 32)
25247: PPUSH
25248: CALL_OW 559
25252: GO 25479
25254: LD_INT 2
25256: DOUBLE
25257: EQUAL
25258: IFTRUE 25262
25260: GO 25276
25262: POP
// begin ToLua ( displayStucuk(); ) ;
25263: LD_STRING displayStucuk();
25265: PPUSH
25266: CALL_OW 559
// ResetFog ;
25270: CALL_OW 335
// end ; 3 :
25274: GO 25479
25276: LD_INT 3
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25388
25284: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25285: LD_ADDR_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_OWVAR 2
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 25
25304: PUSH
25305: LD_INT 1
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PPUSH
25316: CALL_OW 69
25320: ST_TO_ADDR
// if not tmp then
25321: LD_VAR 0 2
25325: NOT
25326: IFFALSE 25330
// exit ;
25328: GO 25479
// un := tmp [ rand ( 1 , tmp ) ] ;
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_VAR 0 2
25339: PUSH
25340: LD_INT 1
25342: PPUSH
25343: LD_VAR 0 2
25347: PPUSH
25348: CALL_OW 12
25352: ARRAY
25353: ST_TO_ADDR
// if Crawls ( un ) then
25354: LD_VAR 0 3
25358: PPUSH
25359: CALL_OW 318
25363: IFFALSE 25374
// ComWalk ( un ) ;
25365: LD_VAR 0 3
25369: PPUSH
25370: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25374: LD_VAR 0 3
25378: PPUSH
25379: LD_INT 8
25381: PPUSH
25382: CALL_OW 336
// end ; 4 :
25386: GO 25479
25388: LD_INT 4
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25457
25396: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25397: LD_ADDR_VAR 0 2
25401: PUSH
25402: LD_INT 22
25404: PUSH
25405: LD_OWVAR 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: LD_INT 29
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 69
25432: ST_TO_ADDR
// if not tmp then
25433: LD_VAR 0 2
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25479
// DestroyUnit ( tmp [ 1 ] ) ;
25442: LD_VAR 0 2
25446: PUSH
25447: LD_INT 1
25449: ARRAY
25450: PPUSH
25451: CALL_OW 65
// end ; 5 .. 7 :
25455: GO 25479
25457: LD_INT 5
25459: DOUBLE
25460: GREATEREQUAL
25461: IFFALSE 25469
25463: LD_INT 7
25465: DOUBLE
25466: LESSEQUAL
25467: IFTRUE 25471
25469: GO 25478
25471: POP
// StreamSibBomb ; end ;
25472: CALL 21729 0 0
25476: GO 25479
25478: POP
// end ;
25479: PPOPN 3
25481: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25482: LD_EXP 48
25486: PUSH
25487: LD_EXP 98
25491: AND
25492: IFFALSE 25648
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
25500: PPUSH
25501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25502: LD_ADDR_VAR 0 2
25506: PUSH
25507: LD_INT 81
25509: PUSH
25510: LD_OWVAR 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 21
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 21
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PPUSH
25551: CALL_OW 69
25555: ST_TO_ADDR
// if not tmp then
25556: LD_VAR 0 2
25560: NOT
25561: IFFALSE 25565
// exit ;
25563: GO 25648
// p := 0 ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_INT 0
25572: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25573: LD_INT 35
25575: PPUSH
25576: CALL_OW 67
// p := p + 1 ;
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_INT 1
25592: PLUS
25593: ST_TO_ADDR
// for i in tmp do
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: LD_VAR 0 2
25603: PUSH
25604: FOR_IN
25605: IFFALSE 25636
// if GetLives ( i ) < 1000 then
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL_OW 256
25616: PUSH
25617: LD_INT 1000
25619: LESS
25620: IFFALSE 25634
// SetLives ( i , 1000 ) ;
25622: LD_VAR 0 1
25626: PPUSH
25627: LD_INT 1000
25629: PPUSH
25630: CALL_OW 234
25634: GO 25604
25636: POP
25637: POP
// until p > 20 ;
25638: LD_VAR 0 3
25642: PUSH
25643: LD_INT 20
25645: GREATER
25646: IFFALSE 25573
// end ;
25648: PPOPN 3
25650: END
// every 0 0$1 trigger StreamModeActive and sTime do
25651: LD_EXP 48
25655: PUSH
25656: LD_EXP 99
25660: AND
25661: IFFALSE 25696
25663: GO 25665
25665: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25666: LD_INT 28
25668: PPUSH
25669: LD_OWVAR 2
25673: PPUSH
25674: LD_INT 2
25676: PPUSH
25677: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25681: LD_INT 30
25683: PPUSH
25684: LD_OWVAR 2
25688: PPUSH
25689: LD_INT 2
25691: PPUSH
25692: CALL_OW 322
// end ;
25696: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25697: LD_EXP 48
25701: PUSH
25702: LD_EXP 100
25706: AND
25707: IFFALSE 25828
25709: GO 25711
25711: DISABLE
25712: LD_INT 0
25714: PPUSH
25715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25716: LD_ADDR_VAR 0 2
25720: PUSH
25721: LD_INT 22
25723: PUSH
25724: LD_OWVAR 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 21
25735: PUSH
25736: LD_INT 1
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: LD_INT 23
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 69
25769: ST_TO_ADDR
// if not tmp then
25770: LD_VAR 0 2
25774: NOT
25775: IFFALSE 25779
// exit ;
25777: GO 25828
// for i in tmp do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25826
// begin if Crawls ( i ) then
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 318
25801: IFFALSE 25812
// ComWalk ( i ) ;
25803: LD_VAR 0 1
25807: PPUSH
25808: CALL_OW 138
// SetClass ( i , 2 ) ;
25812: LD_VAR 0 1
25816: PPUSH
25817: LD_INT 2
25819: PPUSH
25820: CALL_OW 336
// end ;
25824: GO 25789
25826: POP
25827: POP
// end ;
25828: PPOPN 2
25830: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25831: LD_EXP 48
25835: PUSH
25836: LD_EXP 101
25840: AND
25841: IFFALSE 26122
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
25850: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25851: LD_OWVAR 2
25855: PPUSH
25856: LD_INT 9
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25869: LD_INT 9
25871: PPUSH
25872: LD_OWVAR 2
25876: PPUSH
25877: CALL_OW 343
// uc_side := 9 ;
25881: LD_ADDR_OWVAR 20
25885: PUSH
25886: LD_INT 9
25888: ST_TO_ADDR
// uc_nation := 2 ;
25889: LD_ADDR_OWVAR 21
25893: PUSH
25894: LD_INT 2
25896: ST_TO_ADDR
// hc_name := Dark Warrior ;
25897: LD_ADDR_OWVAR 26
25901: PUSH
25902: LD_STRING Dark Warrior
25904: ST_TO_ADDR
// hc_gallery :=  ;
25905: LD_ADDR_OWVAR 33
25909: PUSH
25910: LD_STRING 
25912: ST_TO_ADDR
// hc_noskilllimit := true ;
25913: LD_ADDR_OWVAR 76
25917: PUSH
25918: LD_INT 1
25920: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25921: LD_ADDR_OWVAR 31
25925: PUSH
25926: LD_INT 30
25928: PUSH
25929: LD_INT 30
25931: PUSH
25932: LD_INT 30
25934: PUSH
25935: LD_INT 30
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
// un := CreateHuman ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: CALL_OW 44
25953: ST_TO_ADDR
// hc_noskilllimit := false ;
25954: LD_ADDR_OWVAR 76
25958: PUSH
25959: LD_INT 0
25961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25962: LD_VAR 0 3
25966: PPUSH
25967: LD_INT 1
25969: PPUSH
25970: CALL_OW 51
// p := 0 ;
25974: LD_ADDR_VAR 0 2
25978: PUSH
25979: LD_INT 0
25981: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25982: LD_INT 35
25984: PPUSH
25985: CALL_OW 67
// p := p + 1 ;
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: LD_VAR 0 2
25998: PUSH
25999: LD_INT 1
26001: PLUS
26002: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26003: LD_VAR 0 3
26007: PPUSH
26008: CALL_OW 256
26012: PUSH
26013: LD_INT 1000
26015: LESS
26016: IFFALSE 26030
// SetLives ( un , 1000 ) ;
26018: LD_VAR 0 3
26022: PPUSH
26023: LD_INT 1000
26025: PPUSH
26026: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26030: LD_VAR 0 3
26034: PPUSH
26035: LD_INT 81
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 91
26049: PUSH
26050: LD_VAR 0 3
26054: PUSH
26055: LD_INT 30
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PPUSH
26067: CALL_OW 69
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 74
26081: PPUSH
26082: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26086: LD_VAR 0 2
26090: PUSH
26091: LD_INT 60
26093: GREATER
26094: PUSH
26095: LD_VAR 0 3
26099: PPUSH
26100: CALL_OW 301
26104: OR
26105: IFFALSE 25982
// if un then
26107: LD_VAR 0 3
26111: IFFALSE 26122
// RemoveUnit ( un ) ;
26113: LD_VAR 0 3
26117: PPUSH
26118: CALL_OW 64
// end ;
26122: PPOPN 3
26124: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26125: LD_INT 0
26127: PPUSH
// case cmd of 301 :
26128: LD_VAR 0 1
26132: PUSH
26133: LD_INT 301
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26173
26141: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26142: LD_VAR 0 6
26146: PPUSH
26147: LD_VAR 0 7
26151: PPUSH
26152: LD_VAR 0 8
26156: PPUSH
26157: LD_VAR 0 4
26161: PPUSH
26162: LD_VAR 0 5
26166: PPUSH
26167: CALL 27374 0 5
26171: GO 26294
26173: LD_INT 302
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26218
26181: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26182: LD_VAR 0 6
26186: PPUSH
26187: LD_VAR 0 7
26191: PPUSH
26192: LD_VAR 0 8
26196: PPUSH
26197: LD_VAR 0 9
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: LD_VAR 0 5
26211: PPUSH
26212: CALL 27465 0 6
26216: GO 26294
26218: LD_INT 303
26220: DOUBLE
26221: EQUAL
26222: IFTRUE 26226
26224: GO 26263
26226: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26227: LD_VAR 0 6
26231: PPUSH
26232: LD_VAR 0 7
26236: PPUSH
26237: LD_VAR 0 8
26241: PPUSH
26242: LD_VAR 0 9
26246: PPUSH
26247: LD_VAR 0 4
26251: PPUSH
26252: LD_VAR 0 5
26256: PPUSH
26257: CALL 26299 0 6
26261: GO 26294
26263: LD_INT 304
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26271
26269: GO 26293
26271: POP
// hHackTeleport ( unit , x , y ) ; end ;
26272: LD_VAR 0 2
26276: PPUSH
26277: LD_VAR 0 4
26281: PPUSH
26282: LD_VAR 0 5
26286: PPUSH
26287: CALL 28058 0 3
26291: GO 26294
26293: POP
// end ;
26294: LD_VAR 0 12
26298: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26299: LD_INT 0
26301: PPUSH
26302: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 1
26310: LESS
26311: PUSH
26312: LD_VAR 0 1
26316: PUSH
26317: LD_INT 3
26319: GREATER
26320: OR
26321: PUSH
26322: LD_VAR 0 5
26326: PPUSH
26327: LD_VAR 0 6
26331: PPUSH
26332: CALL_OW 428
26336: OR
26337: IFFALSE 26341
// exit ;
26339: GO 27061
// uc_side := your_side ;
26341: LD_ADDR_OWVAR 20
26345: PUSH
26346: LD_OWVAR 2
26350: ST_TO_ADDR
// uc_nation := nation ;
26351: LD_ADDR_OWVAR 21
26355: PUSH
26356: LD_VAR 0 1
26360: ST_TO_ADDR
// bc_level = 1 ;
26361: LD_ADDR_OWVAR 43
26365: PUSH
26366: LD_INT 1
26368: ST_TO_ADDR
// case btype of 1 :
26369: LD_VAR 0 2
26373: PUSH
26374: LD_INT 1
26376: DOUBLE
26377: EQUAL
26378: IFTRUE 26382
26380: GO 26393
26382: POP
// bc_type := b_depot ; 2 :
26383: LD_ADDR_OWVAR 42
26387: PUSH
26388: LD_INT 0
26390: ST_TO_ADDR
26391: GO 27005
26393: LD_INT 2
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26412
26401: POP
// bc_type := b_warehouse ; 3 :
26402: LD_ADDR_OWVAR 42
26406: PUSH
26407: LD_INT 1
26409: ST_TO_ADDR
26410: GO 27005
26412: LD_INT 3
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26431
26420: POP
// bc_type := b_lab ; 4 .. 9 :
26421: LD_ADDR_OWVAR 42
26425: PUSH
26426: LD_INT 6
26428: ST_TO_ADDR
26429: GO 27005
26431: LD_INT 4
26433: DOUBLE
26434: GREATEREQUAL
26435: IFFALSE 26443
26437: LD_INT 9
26439: DOUBLE
26440: LESSEQUAL
26441: IFTRUE 26445
26443: GO 26497
26445: POP
// begin bc_type := b_lab_half ;
26446: LD_ADDR_OWVAR 42
26450: PUSH
26451: LD_INT 7
26453: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26454: LD_ADDR_OWVAR 44
26458: PUSH
26459: LD_INT 10
26461: PUSH
26462: LD_INT 11
26464: PUSH
26465: LD_INT 12
26467: PUSH
26468: LD_INT 15
26470: PUSH
26471: LD_INT 14
26473: PUSH
26474: LD_INT 13
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: PUSH
26485: LD_VAR 0 2
26489: PUSH
26490: LD_INT 3
26492: MINUS
26493: ARRAY
26494: ST_TO_ADDR
// end ; 10 .. 13 :
26495: GO 27005
26497: LD_INT 10
26499: DOUBLE
26500: GREATEREQUAL
26501: IFFALSE 26509
26503: LD_INT 13
26505: DOUBLE
26506: LESSEQUAL
26507: IFTRUE 26511
26509: GO 26588
26511: POP
// begin bc_type := b_lab_full ;
26512: LD_ADDR_OWVAR 42
26516: PUSH
26517: LD_INT 8
26519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26520: LD_ADDR_OWVAR 44
26524: PUSH
26525: LD_INT 10
26527: PUSH
26528: LD_INT 12
26530: PUSH
26531: LD_INT 14
26533: PUSH
26534: LD_INT 13
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: LD_VAR 0 2
26547: PUSH
26548: LD_INT 9
26550: MINUS
26551: ARRAY
26552: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26553: LD_ADDR_OWVAR 45
26557: PUSH
26558: LD_INT 11
26560: PUSH
26561: LD_INT 15
26563: PUSH
26564: LD_INT 12
26566: PUSH
26567: LD_INT 15
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: LD_VAR 0 2
26580: PUSH
26581: LD_INT 9
26583: MINUS
26584: ARRAY
26585: ST_TO_ADDR
// end ; 14 :
26586: GO 27005
26588: LD_INT 14
26590: DOUBLE
26591: EQUAL
26592: IFTRUE 26596
26594: GO 26607
26596: POP
// bc_type := b_workshop ; 15 :
26597: LD_ADDR_OWVAR 42
26601: PUSH
26602: LD_INT 2
26604: ST_TO_ADDR
26605: GO 27005
26607: LD_INT 15
26609: DOUBLE
26610: EQUAL
26611: IFTRUE 26615
26613: GO 26626
26615: POP
// bc_type := b_factory ; 16 :
26616: LD_ADDR_OWVAR 42
26620: PUSH
26621: LD_INT 3
26623: ST_TO_ADDR
26624: GO 27005
26626: LD_INT 16
26628: DOUBLE
26629: EQUAL
26630: IFTRUE 26634
26632: GO 26645
26634: POP
// bc_type := b_ext_gun ; 17 :
26635: LD_ADDR_OWVAR 42
26639: PUSH
26640: LD_INT 17
26642: ST_TO_ADDR
26643: GO 27005
26645: LD_INT 17
26647: DOUBLE
26648: EQUAL
26649: IFTRUE 26653
26651: GO 26681
26653: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26654: LD_ADDR_OWVAR 42
26658: PUSH
26659: LD_INT 19
26661: PUSH
26662: LD_INT 23
26664: PUSH
26665: LD_INT 19
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: LD_VAR 0 1
26677: ARRAY
26678: ST_TO_ADDR
26679: GO 27005
26681: LD_INT 18
26683: DOUBLE
26684: EQUAL
26685: IFTRUE 26689
26687: GO 26700
26689: POP
// bc_type := b_ext_radar ; 19 :
26690: LD_ADDR_OWVAR 42
26694: PUSH
26695: LD_INT 20
26697: ST_TO_ADDR
26698: GO 27005
26700: LD_INT 19
26702: DOUBLE
26703: EQUAL
26704: IFTRUE 26708
26706: GO 26719
26708: POP
// bc_type := b_ext_radio ; 20 :
26709: LD_ADDR_OWVAR 42
26713: PUSH
26714: LD_INT 22
26716: ST_TO_ADDR
26717: GO 27005
26719: LD_INT 20
26721: DOUBLE
26722: EQUAL
26723: IFTRUE 26727
26725: GO 26738
26727: POP
// bc_type := b_ext_siberium ; 21 :
26728: LD_ADDR_OWVAR 42
26732: PUSH
26733: LD_INT 21
26735: ST_TO_ADDR
26736: GO 27005
26738: LD_INT 21
26740: DOUBLE
26741: EQUAL
26742: IFTRUE 26746
26744: GO 26757
26746: POP
// bc_type := b_ext_computer ; 22 :
26747: LD_ADDR_OWVAR 42
26751: PUSH
26752: LD_INT 24
26754: ST_TO_ADDR
26755: GO 27005
26757: LD_INT 22
26759: DOUBLE
26760: EQUAL
26761: IFTRUE 26765
26763: GO 26776
26765: POP
// bc_type := b_ext_track ; 23 :
26766: LD_ADDR_OWVAR 42
26770: PUSH
26771: LD_INT 16
26773: ST_TO_ADDR
26774: GO 27005
26776: LD_INT 23
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26795
26784: POP
// bc_type := b_ext_laser ; 24 :
26785: LD_ADDR_OWVAR 42
26789: PUSH
26790: LD_INT 25
26792: ST_TO_ADDR
26793: GO 27005
26795: LD_INT 24
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26814
26803: POP
// bc_type := b_control_tower ; 25 :
26804: LD_ADDR_OWVAR 42
26808: PUSH
26809: LD_INT 36
26811: ST_TO_ADDR
26812: GO 27005
26814: LD_INT 25
26816: DOUBLE
26817: EQUAL
26818: IFTRUE 26822
26820: GO 26833
26822: POP
// bc_type := b_breastwork ; 26 :
26823: LD_ADDR_OWVAR 42
26827: PUSH
26828: LD_INT 31
26830: ST_TO_ADDR
26831: GO 27005
26833: LD_INT 26
26835: DOUBLE
26836: EQUAL
26837: IFTRUE 26841
26839: GO 26852
26841: POP
// bc_type := b_bunker ; 27 :
26842: LD_ADDR_OWVAR 42
26846: PUSH
26847: LD_INT 32
26849: ST_TO_ADDR
26850: GO 27005
26852: LD_INT 27
26854: DOUBLE
26855: EQUAL
26856: IFTRUE 26860
26858: GO 26871
26860: POP
// bc_type := b_turret ; 28 :
26861: LD_ADDR_OWVAR 42
26865: PUSH
26866: LD_INT 33
26868: ST_TO_ADDR
26869: GO 27005
26871: LD_INT 28
26873: DOUBLE
26874: EQUAL
26875: IFTRUE 26879
26877: GO 26890
26879: POP
// bc_type := b_armoury ; 29 :
26880: LD_ADDR_OWVAR 42
26884: PUSH
26885: LD_INT 4
26887: ST_TO_ADDR
26888: GO 27005
26890: LD_INT 29
26892: DOUBLE
26893: EQUAL
26894: IFTRUE 26898
26896: GO 26909
26898: POP
// bc_type := b_barracks ; 30 :
26899: LD_ADDR_OWVAR 42
26903: PUSH
26904: LD_INT 5
26906: ST_TO_ADDR
26907: GO 27005
26909: LD_INT 30
26911: DOUBLE
26912: EQUAL
26913: IFTRUE 26917
26915: GO 26928
26917: POP
// bc_type := b_solar_power ; 31 :
26918: LD_ADDR_OWVAR 42
26922: PUSH
26923: LD_INT 27
26925: ST_TO_ADDR
26926: GO 27005
26928: LD_INT 31
26930: DOUBLE
26931: EQUAL
26932: IFTRUE 26936
26934: GO 26947
26936: POP
// bc_type := b_oil_power ; 32 :
26937: LD_ADDR_OWVAR 42
26941: PUSH
26942: LD_INT 26
26944: ST_TO_ADDR
26945: GO 27005
26947: LD_INT 32
26949: DOUBLE
26950: EQUAL
26951: IFTRUE 26955
26953: GO 26966
26955: POP
// bc_type := b_siberite_power ; 33 :
26956: LD_ADDR_OWVAR 42
26960: PUSH
26961: LD_INT 28
26963: ST_TO_ADDR
26964: GO 27005
26966: LD_INT 33
26968: DOUBLE
26969: EQUAL
26970: IFTRUE 26974
26972: GO 26985
26974: POP
// bc_type := b_oil_mine ; 34 :
26975: LD_ADDR_OWVAR 42
26979: PUSH
26980: LD_INT 29
26982: ST_TO_ADDR
26983: GO 27005
26985: LD_INT 34
26987: DOUBLE
26988: EQUAL
26989: IFTRUE 26993
26991: GO 27004
26993: POP
// bc_type := b_siberite_mine ; end ;
26994: LD_ADDR_OWVAR 42
26998: PUSH
26999: LD_INT 30
27001: ST_TO_ADDR
27002: GO 27005
27004: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27005: LD_ADDR_VAR 0 8
27009: PUSH
27010: LD_VAR 0 5
27014: PPUSH
27015: LD_VAR 0 6
27019: PPUSH
27020: LD_VAR 0 3
27024: PPUSH
27025: CALL_OW 47
27029: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27030: LD_OWVAR 42
27034: PUSH
27035: LD_INT 32
27037: PUSH
27038: LD_INT 33
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: IN
27045: IFFALSE 27061
// PlaceWeaponTurret ( b , weapon ) ;
27047: LD_VAR 0 8
27051: PPUSH
27052: LD_VAR 0 4
27056: PPUSH
27057: CALL_OW 431
// end ;
27061: LD_VAR 0 7
27065: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27066: LD_INT 0
27068: PPUSH
27069: PPUSH
27070: PPUSH
27071: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27072: LD_ADDR_VAR 0 4
27076: PUSH
27077: LD_INT 22
27079: PUSH
27080: LD_OWVAR 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 30
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 30
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: ST_TO_ADDR
// if not tmp then
27126: LD_VAR 0 4
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27194
// for i in tmp do
27135: LD_ADDR_VAR 0 2
27139: PUSH
27140: LD_VAR 0 4
27144: PUSH
27145: FOR_IN
27146: IFFALSE 27192
// for j = 1 to 3 do
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: DOUBLE
27154: LD_INT 1
27156: DEC
27157: ST_TO_ADDR
27158: LD_INT 3
27160: PUSH
27161: FOR_TO
27162: IFFALSE 27188
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27164: LD_VAR 0 2
27168: PPUSH
27169: CALL_OW 274
27173: PPUSH
27174: LD_VAR 0 3
27178: PPUSH
27179: LD_INT 99999
27181: PPUSH
27182: CALL_OW 277
27186: GO 27161
27188: POP
27189: POP
27190: GO 27145
27192: POP
27193: POP
// end ;
27194: LD_VAR 0 1
27198: RET
// export function hHackSetLevel10 ; var i , j ; begin
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27204: LD_ADDR_VAR 0 2
27208: PUSH
27209: LD_INT 21
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PPUSH
27219: CALL_OW 69
27223: PUSH
27224: FOR_IN
27225: IFFALSE 27277
// if IsSelected ( i ) then
27227: LD_VAR 0 2
27231: PPUSH
27232: CALL_OW 306
27236: IFFALSE 27275
// begin for j := 1 to 4 do
27238: LD_ADDR_VAR 0 3
27242: PUSH
27243: DOUBLE
27244: LD_INT 1
27246: DEC
27247: ST_TO_ADDR
27248: LD_INT 4
27250: PUSH
27251: FOR_TO
27252: IFFALSE 27273
// SetSkill ( i , j , 10 ) ;
27254: LD_VAR 0 2
27258: PPUSH
27259: LD_VAR 0 3
27263: PPUSH
27264: LD_INT 10
27266: PPUSH
27267: CALL_OW 237
27271: GO 27251
27273: POP
27274: POP
// end ;
27275: GO 27224
27277: POP
27278: POP
// end ;
27279: LD_VAR 0 1
27283: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27284: LD_INT 0
27286: PPUSH
27287: PPUSH
27288: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27289: LD_ADDR_VAR 0 2
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_OWVAR 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 21
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: PUSH
27325: FOR_IN
27326: IFFALSE 27367
// begin for j := 1 to 4 do
27328: LD_ADDR_VAR 0 3
27332: PUSH
27333: DOUBLE
27334: LD_INT 1
27336: DEC
27337: ST_TO_ADDR
27338: LD_INT 4
27340: PUSH
27341: FOR_TO
27342: IFFALSE 27363
// SetSkill ( i , j , 10 ) ;
27344: LD_VAR 0 2
27348: PPUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: LD_INT 10
27356: PPUSH
27357: CALL_OW 237
27361: GO 27341
27363: POP
27364: POP
// end ;
27365: GO 27325
27367: POP
27368: POP
// end ;
27369: LD_VAR 0 1
27373: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27374: LD_INT 0
27376: PPUSH
// uc_side := your_side ;
27377: LD_ADDR_OWVAR 20
27381: PUSH
27382: LD_OWVAR 2
27386: ST_TO_ADDR
// uc_nation := nation ;
27387: LD_ADDR_OWVAR 21
27391: PUSH
27392: LD_VAR 0 1
27396: ST_TO_ADDR
// InitHc ;
27397: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27401: LD_INT 0
27403: PPUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: LD_VAR 0 3
27413: PPUSH
27414: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27418: LD_VAR 0 4
27422: PPUSH
27423: LD_VAR 0 5
27427: PPUSH
27428: CALL_OW 428
27432: PUSH
27433: LD_INT 0
27435: EQUAL
27436: IFFALSE 27460
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27438: CALL_OW 44
27442: PPUSH
27443: LD_VAR 0 4
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: LD_INT 1
27455: PPUSH
27456: CALL_OW 48
// end ;
27460: LD_VAR 0 6
27464: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27465: LD_INT 0
27467: PPUSH
27468: PPUSH
// uc_side := your_side ;
27469: LD_ADDR_OWVAR 20
27473: PUSH
27474: LD_OWVAR 2
27478: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27479: LD_VAR 0 1
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 3
27492: PUSH
27493: LD_INT 4
27495: PUSH
27496: LD_INT 5
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: IN
27506: IFFALSE 27518
// uc_nation := nation_american else
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 1
27515: ST_TO_ADDR
27516: GO 27561
// if chassis in [ 11 , 12 , 13 , 14 ] then
27518: LD_VAR 0 1
27522: PUSH
27523: LD_INT 11
27525: PUSH
27526: LD_INT 12
27528: PUSH
27529: LD_INT 13
27531: PUSH
27532: LD_INT 14
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: IN
27541: IFFALSE 27553
// uc_nation := nation_arabian else
27543: LD_ADDR_OWVAR 21
27547: PUSH
27548: LD_INT 2
27550: ST_TO_ADDR
27551: GO 27561
// uc_nation := nation_russian ;
27553: LD_ADDR_OWVAR 21
27557: PUSH
27558: LD_INT 3
27560: ST_TO_ADDR
// vc_chassis := chassis ;
27561: LD_ADDR_OWVAR 37
27565: PUSH
27566: LD_VAR 0 1
27570: ST_TO_ADDR
// vc_engine := engine ;
27571: LD_ADDR_OWVAR 39
27575: PUSH
27576: LD_VAR 0 2
27580: ST_TO_ADDR
// vc_control := control ;
27581: LD_ADDR_OWVAR 38
27585: PUSH
27586: LD_VAR 0 3
27590: ST_TO_ADDR
// vc_weapon := weapon ;
27591: LD_ADDR_OWVAR 40
27595: PUSH
27596: LD_VAR 0 4
27600: ST_TO_ADDR
// un := CreateVehicle ;
27601: LD_ADDR_VAR 0 8
27605: PUSH
27606: CALL_OW 45
27610: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27611: LD_VAR 0 8
27615: PPUSH
27616: LD_INT 0
27618: PPUSH
27619: LD_INT 5
27621: PPUSH
27622: CALL_OW 12
27626: PPUSH
27627: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27631: LD_VAR 0 8
27635: PPUSH
27636: LD_VAR 0 5
27640: PPUSH
27641: LD_VAR 0 6
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL_OW 48
// end ;
27653: LD_VAR 0 7
27657: RET
// export hInvincible ; every 1 do
27658: GO 27660
27660: DISABLE
// hInvincible := [ ] ;
27661: LD_ADDR_EXP 102
27665: PUSH
27666: EMPTY
27667: ST_TO_ADDR
27668: END
// every 10 do var i ;
27669: GO 27671
27671: DISABLE
27672: LD_INT 0
27674: PPUSH
// begin enable ;
27675: ENABLE
// if not hInvincible then
27676: LD_EXP 102
27680: NOT
27681: IFFALSE 27685
// exit ;
27683: GO 27729
// for i in hInvincible do
27685: LD_ADDR_VAR 0 1
27689: PUSH
27690: LD_EXP 102
27694: PUSH
27695: FOR_IN
27696: IFFALSE 27727
// if GetLives ( i ) < 1000 then
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 256
27707: PUSH
27708: LD_INT 1000
27710: LESS
27711: IFFALSE 27725
// SetLives ( i , 1000 ) ;
27713: LD_VAR 0 1
27717: PPUSH
27718: LD_INT 1000
27720: PPUSH
27721: CALL_OW 234
27725: GO 27695
27727: POP
27728: POP
// end ;
27729: PPOPN 1
27731: END
// export function hHackInvincible ; var i ; begin
27732: LD_INT 0
27734: PPUSH
27735: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27736: LD_ADDR_VAR 0 2
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 21
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: PUSH
27774: FOR_IN
27775: IFFALSE 27836
// if IsSelected ( i ) then
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 306
27786: IFFALSE 27834
// begin if i in hInvincible then
27788: LD_VAR 0 2
27792: PUSH
27793: LD_EXP 102
27797: IN
27798: IFFALSE 27818
// hInvincible := hInvincible diff i else
27800: LD_ADDR_EXP 102
27804: PUSH
27805: LD_EXP 102
27809: PUSH
27810: LD_VAR 0 2
27814: DIFF
27815: ST_TO_ADDR
27816: GO 27834
// hInvincible := hInvincible union i ;
27818: LD_ADDR_EXP 102
27822: PUSH
27823: LD_EXP 102
27827: PUSH
27828: LD_VAR 0 2
27832: UNION
27833: ST_TO_ADDR
// end ;
27834: GO 27774
27836: POP
27837: POP
// end ;
27838: LD_VAR 0 1
27842: RET
// export function hHackInvisible ; var i , j ; begin
27843: LD_INT 0
27845: PPUSH
27846: PPUSH
27847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: LD_INT 21
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PPUSH
27863: CALL_OW 69
27867: PUSH
27868: FOR_IN
27869: IFFALSE 27893
// if IsSelected ( i ) then
27871: LD_VAR 0 2
27875: PPUSH
27876: CALL_OW 306
27880: IFFALSE 27891
// ComForceInvisible ( i ) ;
27882: LD_VAR 0 2
27886: PPUSH
27887: CALL_OW 496
27891: GO 27868
27893: POP
27894: POP
// end ;
27895: LD_VAR 0 1
27899: RET
// export function hHackChangeYourSide ; begin
27900: LD_INT 0
27902: PPUSH
// if your_side = 8 then
27903: LD_OWVAR 2
27907: PUSH
27908: LD_INT 8
27910: EQUAL
27911: IFFALSE 27923
// your_side := 0 else
27913: LD_ADDR_OWVAR 2
27917: PUSH
27918: LD_INT 0
27920: ST_TO_ADDR
27921: GO 27937
// your_side := your_side + 1 ;
27923: LD_ADDR_OWVAR 2
27927: PUSH
27928: LD_OWVAR 2
27932: PUSH
27933: LD_INT 1
27935: PLUS
27936: ST_TO_ADDR
// end ;
27937: LD_VAR 0 1
27941: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27942: LD_INT 0
27944: PPUSH
27945: PPUSH
27946: PPUSH
// for i in all_units do
27947: LD_ADDR_VAR 0 2
27951: PUSH
27952: LD_OWVAR 3
27956: PUSH
27957: FOR_IN
27958: IFFALSE 28036
// if IsSelected ( i ) then
27960: LD_VAR 0 2
27964: PPUSH
27965: CALL_OW 306
27969: IFFALSE 28034
// begin j := GetSide ( i ) ;
27971: LD_ADDR_VAR 0 3
27975: PUSH
27976: LD_VAR 0 2
27980: PPUSH
27981: CALL_OW 255
27985: ST_TO_ADDR
// if j = 8 then
27986: LD_VAR 0 3
27990: PUSH
27991: LD_INT 8
27993: EQUAL
27994: IFFALSE 28006
// j := 0 else
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_INT 0
28003: ST_TO_ADDR
28004: GO 28020
// j := j + 1 ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_VAR 0 3
28015: PUSH
28016: LD_INT 1
28018: PLUS
28019: ST_TO_ADDR
// SetSide ( i , j ) ;
28020: LD_VAR 0 2
28024: PPUSH
28025: LD_VAR 0 3
28029: PPUSH
28030: CALL_OW 235
// end ;
28034: GO 27957
28036: POP
28037: POP
// end ;
28038: LD_VAR 0 1
28042: RET
// export function hHackFog ; begin
28043: LD_INT 0
28045: PPUSH
// FogOff ( true ) ;
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 344
// end ;
28053: LD_VAR 0 1
28057: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28058: LD_INT 0
28060: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28061: LD_VAR 0 1
28065: PPUSH
28066: LD_VAR 0 2
28070: PPUSH
28071: LD_VAR 0 3
28075: PPUSH
28076: LD_INT 1
28078: PPUSH
28079: LD_INT 1
28081: PPUSH
28082: CALL_OW 483
// CenterOnXY ( x , y ) ;
28086: LD_VAR 0 2
28090: PPUSH
28091: LD_VAR 0 3
28095: PPUSH
28096: CALL_OW 84
// end ; end_of_file end_of_file
28100: LD_VAR 0 4
28104: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
28105: LD_INT 0
28107: PPUSH
// ar_miner := 81 ;
28108: LD_ADDR_EXP 110
28112: PUSH
28113: LD_INT 81
28115: ST_TO_ADDR
// ar_crane := 88 ;
28116: LD_ADDR_EXP 109
28120: PUSH
28121: LD_INT 88
28123: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28124: LD_ADDR_EXP 104
28128: PUSH
28129: LD_INT 89
28131: ST_TO_ADDR
// us_hack := 99 ;
28132: LD_ADDR_EXP 105
28136: PUSH
28137: LD_INT 99
28139: ST_TO_ADDR
// us_artillery := 97 ;
28140: LD_ADDR_EXP 106
28144: PUSH
28145: LD_INT 97
28147: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28148: LD_ADDR_EXP 107
28152: PUSH
28153: LD_INT 91
28155: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28156: LD_ADDR_EXP 108
28160: PUSH
28161: LD_INT 92
28163: ST_TO_ADDR
// ru_radar := 98 ;
28164: LD_ADDR_EXP 103
28168: PUSH
28169: LD_INT 98
28171: ST_TO_ADDR
// tech_Artillery := 80 ;
28172: LD_ADDR_EXP 111
28176: PUSH
28177: LD_INT 80
28179: ST_TO_ADDR
// tech_RadMat := 81 ;
28180: LD_ADDR_EXP 112
28184: PUSH
28185: LD_INT 81
28187: ST_TO_ADDR
// tech_BasicTools := 82 ;
28188: LD_ADDR_EXP 113
28192: PUSH
28193: LD_INT 82
28195: ST_TO_ADDR
// tech_Cargo := 83 ;
28196: LD_ADDR_EXP 114
28200: PUSH
28201: LD_INT 83
28203: ST_TO_ADDR
// tech_Track := 84 ;
28204: LD_ADDR_EXP 115
28208: PUSH
28209: LD_INT 84
28211: ST_TO_ADDR
// tech_Crane := 85 ;
28212: LD_ADDR_EXP 116
28216: PUSH
28217: LD_INT 85
28219: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28220: LD_ADDR_EXP 117
28224: PUSH
28225: LD_INT 86
28227: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28228: LD_ADDR_EXP 118
28232: PUSH
28233: LD_INT 87
28235: ST_TO_ADDR
// class_mastodont := 31 ;
28236: LD_ADDR_EXP 119
28240: PUSH
28241: LD_INT 31
28243: ST_TO_ADDR
// class_horse := 21 ;
28244: LD_ADDR_EXP 120
28248: PUSH
28249: LD_INT 21
28251: ST_TO_ADDR
// end ;
28252: LD_VAR 0 1
28256: RET
// every 1 do
28257: GO 28259
28259: DISABLE
// InitGlobalVariables ; end_of_file
28260: CALL 28105 0 0
28264: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28265: LD_INT 0
28267: PPUSH
28268: PPUSH
// if exist_mode then
28269: LD_VAR 0 2
28273: IFFALSE 28298
// unit := CreateCharacter ( prefix & ident ) else
28275: LD_ADDR_VAR 0 5
28279: PUSH
28280: LD_VAR 0 3
28284: PUSH
28285: LD_VAR 0 1
28289: STR
28290: PPUSH
28291: CALL_OW 34
28295: ST_TO_ADDR
28296: GO 28313
// unit := NewCharacter ( ident ) ;
28298: LD_ADDR_VAR 0 5
28302: PUSH
28303: LD_VAR 0 1
28307: PPUSH
28308: CALL_OW 25
28312: ST_TO_ADDR
// result := unit ;
28313: LD_ADDR_VAR 0 4
28317: PUSH
28318: LD_VAR 0 5
28322: ST_TO_ADDR
// end ;
28323: LD_VAR 0 4
28327: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28328: LD_INT 0
28330: PPUSH
28331: PPUSH
// if not side or not nation then
28332: LD_VAR 0 1
28336: NOT
28337: PUSH
28338: LD_VAR 0 2
28342: NOT
28343: OR
28344: IFFALSE 28348
// exit ;
28346: GO 29112
// case nation of nation_american :
28348: LD_VAR 0 2
28352: PUSH
28353: LD_INT 1
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28575
28361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28362: LD_ADDR_VAR 0 4
28366: PUSH
28367: LD_INT 35
28369: PUSH
28370: LD_INT 45
28372: PUSH
28373: LD_INT 46
28375: PUSH
28376: LD_INT 47
28378: PUSH
28379: LD_INT 82
28381: PUSH
28382: LD_INT 83
28384: PUSH
28385: LD_INT 84
28387: PUSH
28388: LD_INT 85
28390: PUSH
28391: LD_INT 86
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 6
28402: PUSH
28403: LD_INT 15
28405: PUSH
28406: LD_INT 16
28408: PUSH
28409: LD_INT 7
28411: PUSH
28412: LD_INT 12
28414: PUSH
28415: LD_INT 13
28417: PUSH
28418: LD_INT 10
28420: PUSH
28421: LD_INT 14
28423: PUSH
28424: LD_INT 20
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 22
28432: PUSH
28433: LD_INT 25
28435: PUSH
28436: LD_INT 32
28438: PUSH
28439: LD_INT 27
28441: PUSH
28442: LD_INT 36
28444: PUSH
28445: LD_INT 69
28447: PUSH
28448: LD_INT 39
28450: PUSH
28451: LD_INT 34
28453: PUSH
28454: LD_INT 40
28456: PUSH
28457: LD_INT 48
28459: PUSH
28460: LD_INT 49
28462: PUSH
28463: LD_INT 50
28465: PUSH
28466: LD_INT 51
28468: PUSH
28469: LD_INT 52
28471: PUSH
28472: LD_INT 53
28474: PUSH
28475: LD_INT 54
28477: PUSH
28478: LD_INT 55
28480: PUSH
28481: LD_INT 56
28483: PUSH
28484: LD_INT 57
28486: PUSH
28487: LD_INT 58
28489: PUSH
28490: LD_INT 59
28492: PUSH
28493: LD_INT 60
28495: PUSH
28496: LD_INT 61
28498: PUSH
28499: LD_INT 62
28501: PUSH
28502: LD_INT 80
28504: PUSH
28505: LD_INT 82
28507: PUSH
28508: LD_INT 83
28510: PUSH
28511: LD_INT 84
28513: PUSH
28514: LD_INT 85
28516: PUSH
28517: LD_INT 86
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 29036
28575: LD_INT 2
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28805
28583: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28584: LD_ADDR_VAR 0 4
28588: PUSH
28589: LD_INT 35
28591: PUSH
28592: LD_INT 45
28594: PUSH
28595: LD_INT 46
28597: PUSH
28598: LD_INT 47
28600: PUSH
28601: LD_INT 82
28603: PUSH
28604: LD_INT 83
28606: PUSH
28607: LD_INT 84
28609: PUSH
28610: LD_INT 85
28612: PUSH
28613: LD_INT 87
28615: PUSH
28616: LD_INT 70
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 11
28624: PUSH
28625: LD_INT 3
28627: PUSH
28628: LD_INT 4
28630: PUSH
28631: LD_INT 5
28633: PUSH
28634: LD_INT 6
28636: PUSH
28637: LD_INT 15
28639: PUSH
28640: LD_INT 18
28642: PUSH
28643: LD_INT 7
28645: PUSH
28646: LD_INT 17
28648: PUSH
28649: LD_INT 8
28651: PUSH
28652: LD_INT 20
28654: PUSH
28655: LD_INT 21
28657: PUSH
28658: LD_INT 22
28660: PUSH
28661: LD_INT 72
28663: PUSH
28664: LD_INT 26
28666: PUSH
28667: LD_INT 69
28669: PUSH
28670: LD_INT 39
28672: PUSH
28673: LD_INT 40
28675: PUSH
28676: LD_INT 41
28678: PUSH
28679: LD_INT 42
28681: PUSH
28682: LD_INT 43
28684: PUSH
28685: LD_INT 48
28687: PUSH
28688: LD_INT 49
28690: PUSH
28691: LD_INT 50
28693: PUSH
28694: LD_INT 51
28696: PUSH
28697: LD_INT 52
28699: PUSH
28700: LD_INT 53
28702: PUSH
28703: LD_INT 54
28705: PUSH
28706: LD_INT 55
28708: PUSH
28709: LD_INT 56
28711: PUSH
28712: LD_INT 60
28714: PUSH
28715: LD_INT 61
28717: PUSH
28718: LD_INT 62
28720: PUSH
28721: LD_INT 66
28723: PUSH
28724: LD_INT 67
28726: PUSH
28727: LD_INT 68
28729: PUSH
28730: LD_INT 81
28732: PUSH
28733: LD_INT 82
28735: PUSH
28736: LD_INT 83
28738: PUSH
28739: LD_INT 84
28741: PUSH
28742: LD_INT 85
28744: PUSH
28745: LD_INT 87
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: ST_TO_ADDR
28803: GO 29036
28805: LD_INT 3
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 29035
28813: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28814: LD_ADDR_VAR 0 4
28818: PUSH
28819: LD_INT 46
28821: PUSH
28822: LD_INT 47
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 82
28833: PUSH
28834: LD_INT 83
28836: PUSH
28837: LD_INT 84
28839: PUSH
28840: LD_INT 85
28842: PUSH
28843: LD_INT 86
28845: PUSH
28846: LD_INT 11
28848: PUSH
28849: LD_INT 9
28851: PUSH
28852: LD_INT 20
28854: PUSH
28855: LD_INT 19
28857: PUSH
28858: LD_INT 21
28860: PUSH
28861: LD_INT 24
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_INT 25
28869: PUSH
28870: LD_INT 28
28872: PUSH
28873: LD_INT 29
28875: PUSH
28876: LD_INT 30
28878: PUSH
28879: LD_INT 31
28881: PUSH
28882: LD_INT 37
28884: PUSH
28885: LD_INT 38
28887: PUSH
28888: LD_INT 32
28890: PUSH
28891: LD_INT 27
28893: PUSH
28894: LD_INT 33
28896: PUSH
28897: LD_INT 69
28899: PUSH
28900: LD_INT 39
28902: PUSH
28903: LD_INT 34
28905: PUSH
28906: LD_INT 40
28908: PUSH
28909: LD_INT 71
28911: PUSH
28912: LD_INT 23
28914: PUSH
28915: LD_INT 44
28917: PUSH
28918: LD_INT 48
28920: PUSH
28921: LD_INT 49
28923: PUSH
28924: LD_INT 50
28926: PUSH
28927: LD_INT 51
28929: PUSH
28930: LD_INT 52
28932: PUSH
28933: LD_INT 53
28935: PUSH
28936: LD_INT 54
28938: PUSH
28939: LD_INT 55
28941: PUSH
28942: LD_INT 56
28944: PUSH
28945: LD_INT 57
28947: PUSH
28948: LD_INT 58
28950: PUSH
28951: LD_INT 59
28953: PUSH
28954: LD_INT 63
28956: PUSH
28957: LD_INT 64
28959: PUSH
28960: LD_INT 65
28962: PUSH
28963: LD_INT 82
28965: PUSH
28966: LD_INT 83
28968: PUSH
28969: LD_INT 84
28971: PUSH
28972: LD_INT 85
28974: PUSH
28975: LD_INT 86
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29036
29035: POP
// if state > - 1 and state < 3 then
29036: LD_VAR 0 3
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: GREATER
29045: PUSH
29046: LD_VAR 0 3
29050: PUSH
29051: LD_INT 3
29053: LESS
29054: AND
29055: IFFALSE 29112
// for i in result do
29057: LD_ADDR_VAR 0 5
29061: PUSH
29062: LD_VAR 0 4
29066: PUSH
29067: FOR_IN
29068: IFFALSE 29110
// if GetTech ( i , side ) <> state then
29070: LD_VAR 0 5
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 321
29084: PUSH
29085: LD_VAR 0 3
29089: NONEQUAL
29090: IFFALSE 29108
// result := result diff i ;
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: LD_VAR 0 4
29101: PUSH
29102: LD_VAR 0 5
29106: DIFF
29107: ST_TO_ADDR
29108: GO 29067
29110: POP
29111: POP
// end ;
29112: LD_VAR 0 4
29116: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29117: LD_INT 0
29119: PPUSH
29120: PPUSH
29121: PPUSH
// result := true ;
29122: LD_ADDR_VAR 0 3
29126: PUSH
29127: LD_INT 1
29129: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 480
29144: ST_TO_ADDR
// if not tmp then
29145: LD_VAR 0 5
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29203
// for i in tmp do
29154: LD_ADDR_VAR 0 4
29158: PUSH
29159: LD_VAR 0 5
29163: PUSH
29164: FOR_IN
29165: IFFALSE 29201
// if GetTech ( i , side ) <> state_researched then
29167: LD_VAR 0 4
29171: PPUSH
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL_OW 321
29181: PUSH
29182: LD_INT 2
29184: NONEQUAL
29185: IFFALSE 29199
// begin result := false ;
29187: LD_ADDR_VAR 0 3
29191: PUSH
29192: LD_INT 0
29194: ST_TO_ADDR
// exit ;
29195: POP
29196: POP
29197: GO 29203
// end ;
29199: GO 29164
29201: POP
29202: POP
// end ;
29203: LD_VAR 0 3
29207: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29223: LD_VAR 0 1
29227: NOT
29228: PUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 257
29238: PUSH
29239: LD_INT 9
29241: NONEQUAL
29242: OR
29243: IFFALSE 29247
// exit ;
29245: GO 29820
// side := GetSide ( unit ) ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 255
29261: ST_TO_ADDR
// tech_space := tech_spacanom ;
29262: LD_ADDR_VAR 0 12
29266: PUSH
29267: LD_INT 29
29269: ST_TO_ADDR
// tech_time := tech_taurad ;
29270: LD_ADDR_VAR 0 13
29274: PUSH
29275: LD_INT 28
29277: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29278: LD_ADDR_VAR 0 11
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 310
29292: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29293: LD_VAR 0 11
29297: PPUSH
29298: CALL_OW 247
29302: PUSH
29303: LD_INT 2
29305: EQUAL
29306: IFFALSE 29310
// exit ;
29308: GO 29820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29310: LD_ADDR_VAR 0 8
29314: PUSH
29315: LD_INT 81
29317: PUSH
29318: LD_VAR 0 9
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: LD_INT 21
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: ST_TO_ADDR
// if not tmp then
29353: LD_VAR 0 8
29357: NOT
29358: IFFALSE 29362
// exit ;
29360: GO 29820
// if in_unit then
29362: LD_VAR 0 11
29366: IFFALSE 29390
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29368: LD_ADDR_VAR 0 10
29372: PUSH
29373: LD_VAR 0 8
29377: PPUSH
29378: LD_VAR 0 11
29382: PPUSH
29383: CALL_OW 74
29387: ST_TO_ADDR
29388: GO 29410
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29390: LD_ADDR_VAR 0 10
29394: PUSH
29395: LD_VAR 0 8
29399: PPUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 74
29409: ST_TO_ADDR
// if not enemy then
29410: LD_VAR 0 10
29414: NOT
29415: IFFALSE 29419
// exit ;
29417: GO 29820
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29419: LD_VAR 0 11
29423: PUSH
29424: LD_VAR 0 11
29428: PPUSH
29429: LD_VAR 0 10
29433: PPUSH
29434: CALL_OW 296
29438: PUSH
29439: LD_INT 13
29441: GREATER
29442: AND
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: LD_VAR 0 10
29453: PPUSH
29454: CALL_OW 296
29458: PUSH
29459: LD_INT 12
29461: GREATER
29462: OR
29463: IFFALSE 29467
// exit ;
29465: GO 29820
// missile := [ 1 ] ;
29467: LD_ADDR_VAR 0 14
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29478: LD_VAR 0 9
29482: PPUSH
29483: LD_VAR 0 12
29487: PPUSH
29488: CALL_OW 325
29492: IFFALSE 29521
// missile := Insert ( missile , missile + 1 , 2 ) ;
29494: LD_ADDR_VAR 0 14
29498: PUSH
29499: LD_VAR 0 14
29503: PPUSH
29504: LD_VAR 0 14
29508: PUSH
29509: LD_INT 1
29511: PLUS
29512: PPUSH
29513: LD_INT 2
29515: PPUSH
29516: CALL_OW 2
29520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29521: LD_VAR 0 9
29525: PPUSH
29526: LD_VAR 0 13
29530: PPUSH
29531: CALL_OW 325
29535: PUSH
29536: LD_VAR 0 10
29540: PPUSH
29541: CALL_OW 255
29545: PPUSH
29546: LD_VAR 0 13
29550: PPUSH
29551: CALL_OW 325
29555: NOT
29556: AND
29557: IFFALSE 29586
// missile := Insert ( missile , missile + 1 , 3 ) ;
29559: LD_ADDR_VAR 0 14
29563: PUSH
29564: LD_VAR 0 14
29568: PPUSH
29569: LD_VAR 0 14
29573: PUSH
29574: LD_INT 1
29576: PLUS
29577: PPUSH
29578: LD_INT 3
29580: PPUSH
29581: CALL_OW 2
29585: ST_TO_ADDR
// if missile < 2 then
29586: LD_VAR 0 14
29590: PUSH
29591: LD_INT 2
29593: LESS
29594: IFFALSE 29598
// exit ;
29596: GO 29820
// x := GetX ( enemy ) ;
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: LD_VAR 0 10
29607: PPUSH
29608: CALL_OW 250
29612: ST_TO_ADDR
// y := GetY ( enemy ) ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 10
29622: PPUSH
29623: CALL_OW 251
29627: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29628: LD_ADDR_VAR 0 6
29632: PUSH
29633: LD_VAR 0 4
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PPUSH
29642: LD_INT 1
29644: PPUSH
29645: CALL_OW 12
29649: PLUS
29650: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29651: LD_ADDR_VAR 0 7
29655: PUSH
29656: LD_VAR 0 5
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: CALL_OW 12
29672: PLUS
29673: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29674: LD_VAR 0 6
29678: PPUSH
29679: LD_VAR 0 7
29683: PPUSH
29684: CALL_OW 488
29688: NOT
29689: IFFALSE 29711
// begin _x := x ;
29691: LD_ADDR_VAR 0 6
29695: PUSH
29696: LD_VAR 0 4
29700: ST_TO_ADDR
// _y := y ;
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: LD_VAR 0 5
29710: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_VAR 0 14
29723: PPUSH
29724: CALL_OW 12
29728: ST_TO_ADDR
// case i of 1 :
29729: LD_VAR 0 3
29733: PUSH
29734: LD_INT 1
29736: DOUBLE
29737: EQUAL
29738: IFTRUE 29742
29740: GO 29759
29742: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29743: LD_VAR 0 1
29747: PPUSH
29748: LD_VAR 0 10
29752: PPUSH
29753: CALL_OW 115
29757: GO 29820
29759: LD_INT 2
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29789
29767: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29768: LD_VAR 0 1
29772: PPUSH
29773: LD_VAR 0 6
29777: PPUSH
29778: LD_VAR 0 7
29782: PPUSH
29783: CALL_OW 153
29787: GO 29820
29789: LD_INT 3
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29819
29797: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_VAR 0 6
29807: PPUSH
29808: LD_VAR 0 7
29812: PPUSH
29813: CALL_OW 154
29817: GO 29820
29819: POP
// end ;
29820: LD_VAR 0 2
29824: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
// if not unit or not building then
29833: LD_VAR 0 1
29837: NOT
29838: PUSH
29839: LD_VAR 0 2
29843: NOT
29844: OR
29845: IFFALSE 29849
// exit ;
29847: GO 30007
// x := GetX ( building ) ;
29849: LD_ADDR_VAR 0 5
29853: PUSH
29854: LD_VAR 0 2
29858: PPUSH
29859: CALL_OW 250
29863: ST_TO_ADDR
// y := GetY ( building ) ;
29864: LD_ADDR_VAR 0 6
29868: PUSH
29869: LD_VAR 0 2
29873: PPUSH
29874: CALL_OW 251
29878: ST_TO_ADDR
// for i = 0 to 5 do
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: DOUBLE
29885: LD_INT 0
29887: DEC
29888: ST_TO_ADDR
29889: LD_INT 5
29891: PUSH
29892: FOR_TO
29893: IFFALSE 30005
// begin _x := ShiftX ( x , i , 3 ) ;
29895: LD_ADDR_VAR 0 7
29899: PUSH
29900: LD_VAR 0 5
29904: PPUSH
29905: LD_VAR 0 4
29909: PPUSH
29910: LD_INT 3
29912: PPUSH
29913: CALL_OW 272
29917: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29918: LD_ADDR_VAR 0 8
29922: PUSH
29923: LD_VAR 0 6
29927: PPUSH
29928: LD_VAR 0 4
29932: PPUSH
29933: LD_INT 3
29935: PPUSH
29936: CALL_OW 273
29940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29941: LD_VAR 0 7
29945: PPUSH
29946: LD_VAR 0 8
29950: PPUSH
29951: CALL_OW 488
29955: NOT
29956: IFFALSE 29960
// continue ;
29958: GO 29892
// if HexInfo ( _x , _y ) = 0 then
29960: LD_VAR 0 7
29964: PPUSH
29965: LD_VAR 0 8
29969: PPUSH
29970: CALL_OW 428
29974: PUSH
29975: LD_INT 0
29977: EQUAL
29978: IFFALSE 30003
// begin ComMoveXY ( unit , _x , _y ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 8
29994: PPUSH
29995: CALL_OW 111
// exit ;
29999: POP
30000: POP
30001: GO 30007
// end ; end ;
30003: GO 29892
30005: POP
30006: POP
// end ;
30007: LD_VAR 0 3
30011: RET
// export function ScanBase ( side , base_area ) ; begin
30012: LD_INT 0
30014: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_INT 81
30027: PUSH
30028: LD_VAR 0 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PPUSH
30037: CALL_OW 70
30041: ST_TO_ADDR
// end ;
30042: LD_VAR 0 3
30046: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30047: LD_INT 0
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
// result := false ;
30053: LD_ADDR_VAR 0 2
30057: PUSH
30058: LD_INT 0
30060: ST_TO_ADDR
// side := GetSide ( unit ) ;
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 255
30075: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30076: LD_ADDR_VAR 0 4
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 248
30090: ST_TO_ADDR
// case nat of 1 :
30091: LD_VAR 0 4
30095: PUSH
30096: LD_INT 1
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30115
30104: POP
// tech := tech_lassight ; 2 :
30105: LD_ADDR_VAR 0 5
30109: PUSH
30110: LD_INT 12
30112: ST_TO_ADDR
30113: GO 30154
30115: LD_INT 2
30117: DOUBLE
30118: EQUAL
30119: IFTRUE 30123
30121: GO 30134
30123: POP
// tech := tech_mortar ; 3 :
30124: LD_ADDR_VAR 0 5
30128: PUSH
30129: LD_INT 41
30131: ST_TO_ADDR
30132: GO 30154
30134: LD_INT 3
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30153
30142: POP
// tech := tech_bazooka ; end ;
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_INT 44
30150: ST_TO_ADDR
30151: GO 30154
30153: POP
// if Researched ( side , tech ) then
30154: LD_VAR 0 3
30158: PPUSH
30159: LD_VAR 0 5
30163: PPUSH
30164: CALL_OW 325
30168: IFFALSE 30195
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30170: LD_ADDR_VAR 0 2
30174: PUSH
30175: LD_INT 5
30177: PUSH
30178: LD_INT 8
30180: PUSH
30181: LD_INT 9
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: PUSH
30189: LD_VAR 0 4
30193: ARRAY
30194: ST_TO_ADDR
// end ;
30195: LD_VAR 0 2
30199: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30200: LD_INT 0
30202: PPUSH
30203: PPUSH
30204: PPUSH
// if not mines then
30205: LD_VAR 0 2
30209: NOT
30210: IFFALSE 30214
// exit ;
30212: GO 30358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30214: LD_ADDR_VAR 0 5
30218: PUSH
30219: LD_INT 81
30221: PUSH
30222: LD_VAR 0 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: LD_INT 21
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PPUSH
30252: CALL_OW 69
30256: ST_TO_ADDR
// for i in mines do
30257: LD_ADDR_VAR 0 4
30261: PUSH
30262: LD_VAR 0 2
30266: PUSH
30267: FOR_IN
30268: IFFALSE 30356
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30270: LD_VAR 0 4
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: LD_VAR 0 4
30283: PUSH
30284: LD_INT 2
30286: ARRAY
30287: PPUSH
30288: CALL_OW 458
30292: NOT
30293: IFFALSE 30297
// continue ;
30295: GO 30267
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30297: LD_VAR 0 4
30301: PUSH
30302: LD_INT 1
30304: ARRAY
30305: PPUSH
30306: LD_VAR 0 4
30310: PUSH
30311: LD_INT 2
30313: ARRAY
30314: PPUSH
30315: CALL_OW 428
30319: PUSH
30320: LD_VAR 0 5
30324: IN
30325: IFFALSE 30354
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30327: LD_VAR 0 4
30331: PUSH
30332: LD_INT 1
30334: ARRAY
30335: PPUSH
30336: LD_VAR 0 4
30340: PUSH
30341: LD_INT 2
30343: ARRAY
30344: PPUSH
30345: LD_VAR 0 1
30349: PPUSH
30350: CALL_OW 456
// end ;
30354: GO 30267
30356: POP
30357: POP
// end ;
30358: LD_VAR 0 3
30362: RET
// export function Count ( array ) ; var i ; begin
30363: LD_INT 0
30365: PPUSH
30366: PPUSH
// result := 0 ;
30367: LD_ADDR_VAR 0 2
30371: PUSH
30372: LD_INT 0
30374: ST_TO_ADDR
// for i in array do
30375: LD_ADDR_VAR 0 3
30379: PUSH
30380: LD_VAR 0 1
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30410
// if i then
30388: LD_VAR 0 3
30392: IFFALSE 30408
// result := result + 1 ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: ST_TO_ADDR
30408: GO 30385
30410: POP
30411: POP
// end ;
30412: LD_VAR 0 2
30416: RET
// export function IsEmpty ( building ) ; begin
30417: LD_INT 0
30419: PPUSH
// if not building then
30420: LD_VAR 0 1
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30472
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30429: LD_ADDR_VAR 0 2
30433: PUSH
30434: LD_VAR 0 1
30438: PUSH
30439: LD_INT 22
30441: PUSH
30442: LD_VAR 0 1
30446: PPUSH
30447: CALL_OW 255
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 58
30458: PUSH
30459: EMPTY
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PPUSH
30466: CALL_OW 69
30470: IN
30471: ST_TO_ADDR
// end ;
30472: LD_VAR 0 2
30476: RET
// export function IsNotFull ( building ) ; begin
30477: LD_INT 0
30479: PPUSH
// if not building then
30480: LD_VAR 0 1
30484: NOT
30485: IFFALSE 30489
// exit ;
30487: GO 30508
// result := UnitsInside ( building ) < 6 ;
30489: LD_ADDR_VAR 0 2
30493: PUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 313
30503: PUSH
30504: LD_INT 6
30506: LESS
30507: ST_TO_ADDR
// end ;
30508: LD_VAR 0 2
30512: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30513: LD_INT 0
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
// tmp := [ ] ;
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: EMPTY
30525: ST_TO_ADDR
// list := [ ] ;
30526: LD_ADDR_VAR 0 5
30530: PUSH
30531: EMPTY
30532: ST_TO_ADDR
// for i = 16 to 25 do
30533: LD_ADDR_VAR 0 4
30537: PUSH
30538: DOUBLE
30539: LD_INT 16
30541: DEC
30542: ST_TO_ADDR
30543: LD_INT 25
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30620
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_VAR 0 3
30558: PUSH
30559: LD_INT 22
30561: PUSH
30562: LD_VAR 0 1
30566: PPUSH
30567: CALL_OW 255
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 91
30578: PUSH
30579: LD_VAR 0 1
30583: PUSH
30584: LD_INT 6
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 30
30594: PUSH
30595: LD_VAR 0 4
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: PPUSH
30612: CALL_OW 69
30616: ADD
30617: ST_TO_ADDR
30618: GO 30546
30620: POP
30621: POP
// for i = 1 to tmp do
30622: LD_ADDR_VAR 0 4
30626: PUSH
30627: DOUBLE
30628: LD_INT 1
30630: DEC
30631: ST_TO_ADDR
30632: LD_VAR 0 3
30636: PUSH
30637: FOR_TO
30638: IFFALSE 30726
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30640: LD_ADDR_VAR 0 5
30644: PUSH
30645: LD_VAR 0 5
30649: PUSH
30650: LD_VAR 0 3
30654: PUSH
30655: LD_VAR 0 4
30659: ARRAY
30660: PPUSH
30661: CALL_OW 266
30665: PUSH
30666: LD_VAR 0 3
30670: PUSH
30671: LD_VAR 0 4
30675: ARRAY
30676: PPUSH
30677: CALL_OW 250
30681: PUSH
30682: LD_VAR 0 3
30686: PUSH
30687: LD_VAR 0 4
30691: ARRAY
30692: PPUSH
30693: CALL_OW 251
30697: PUSH
30698: LD_VAR 0 3
30702: PUSH
30703: LD_VAR 0 4
30707: ARRAY
30708: PPUSH
30709: CALL_OW 254
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: ADD
30723: ST_TO_ADDR
30724: GO 30637
30726: POP
30727: POP
// result := list ;
30728: LD_ADDR_VAR 0 2
30732: PUSH
30733: LD_VAR 0 5
30737: ST_TO_ADDR
// end ;
30738: LD_VAR 0 2
30742: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
// if not factory then
30752: LD_VAR 0 1
30756: NOT
30757: IFFALSE 30761
// exit ;
30759: GO 31354
// if control = control_apeman then
30761: LD_VAR 0 4
30765: PUSH
30766: LD_INT 5
30768: EQUAL
30769: IFFALSE 30878
// begin tmp := UnitsInside ( factory ) ;
30771: LD_ADDR_VAR 0 8
30775: PUSH
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL_OW 313
30785: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30786: LD_VAR 0 8
30790: PPUSH
30791: LD_INT 25
30793: PUSH
30794: LD_INT 12
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PPUSH
30801: CALL_OW 72
30805: NOT
30806: IFFALSE 30816
// control := control_manual ;
30808: LD_ADDR_VAR 0 4
30812: PUSH
30813: LD_INT 1
30815: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30816: LD_ADDR_VAR 0 8
30820: PUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL 30513 0 1
30830: ST_TO_ADDR
// if tmp then
30831: LD_VAR 0 8
30835: IFFALSE 30878
// begin for i in tmp do
30837: LD_ADDR_VAR 0 7
30841: PUSH
30842: LD_VAR 0 8
30846: PUSH
30847: FOR_IN
30848: IFFALSE 30876
// if i [ 1 ] = b_ext_radio then
30850: LD_VAR 0 7
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PUSH
30859: LD_INT 22
30861: EQUAL
30862: IFFALSE 30874
// begin control := control_remote ;
30864: LD_ADDR_VAR 0 4
30868: PUSH
30869: LD_INT 2
30871: ST_TO_ADDR
// break ;
30872: GO 30876
// end ;
30874: GO 30847
30876: POP
30877: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30878: LD_VAR 0 1
30882: PPUSH
30883: LD_VAR 0 2
30887: PPUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_VAR 0 4
30897: PPUSH
30898: LD_VAR 0 5
30902: PPUSH
30903: CALL_OW 448
30907: IFFALSE 30942
// begin result := [ chassis , engine , control , weapon ] ;
30909: LD_ADDR_VAR 0 6
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: LD_VAR 0 3
30923: PUSH
30924: LD_VAR 0 4
30928: PUSH
30929: LD_VAR 0 5
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: ST_TO_ADDR
// exit ;
30940: GO 31354
// end ; _chassis := AvailableChassisList ( factory ) ;
30942: LD_ADDR_VAR 0 9
30946: PUSH
30947: LD_VAR 0 1
30951: PPUSH
30952: CALL_OW 475
30956: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30957: LD_ADDR_VAR 0 11
30961: PUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 476
30971: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30972: LD_ADDR_VAR 0 12
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 477
30986: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30987: LD_ADDR_VAR 0 10
30991: PUSH
30992: LD_VAR 0 1
30996: PPUSH
30997: CALL_OW 478
31001: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31002: LD_VAR 0 9
31006: NOT
31007: PUSH
31008: LD_VAR 0 11
31012: NOT
31013: OR
31014: PUSH
31015: LD_VAR 0 12
31019: NOT
31020: OR
31021: PUSH
31022: LD_VAR 0 10
31026: NOT
31027: OR
31028: IFFALSE 31063
// begin result := [ chassis , engine , control , weapon ] ;
31030: LD_ADDR_VAR 0 6
31034: PUSH
31035: LD_VAR 0 2
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: LD_VAR 0 5
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// exit ;
31061: GO 31354
// end ; if not chassis in _chassis then
31063: LD_VAR 0 2
31067: PUSH
31068: LD_VAR 0 9
31072: IN
31073: NOT
31074: IFFALSE 31100
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_VAR 0 9
31085: PUSH
31086: LD_INT 1
31088: PPUSH
31089: LD_VAR 0 9
31093: PPUSH
31094: CALL_OW 12
31098: ARRAY
31099: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: CALL 31359 0 2
31114: NOT
31115: IFFALSE 31174
// repeat engine := _engine [ 1 ] ;
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_VAR 0 11
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31131: LD_ADDR_VAR 0 11
31135: PUSH
31136: LD_VAR 0 11
31140: PPUSH
31141: LD_INT 1
31143: PPUSH
31144: CALL_OW 3
31148: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31149: LD_VAR 0 2
31153: PPUSH
31154: LD_VAR 0 3
31158: PPUSH
31159: CALL 31359 0 2
31163: PUSH
31164: LD_VAR 0 11
31168: PUSH
31169: EMPTY
31170: EQUAL
31171: OR
31172: IFFALSE 31117
// if not control in _control then
31174: LD_VAR 0 4
31178: PUSH
31179: LD_VAR 0 12
31183: IN
31184: NOT
31185: IFFALSE 31211
// control := _control [ rand ( 1 , _control ) ] ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: LD_VAR 0 12
31196: PUSH
31197: LD_INT 1
31199: PPUSH
31200: LD_VAR 0 12
31204: PPUSH
31205: CALL_OW 12
31209: ARRAY
31210: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31211: LD_VAR 0 2
31215: PPUSH
31216: LD_VAR 0 5
31220: PPUSH
31221: CALL 31579 0 2
31225: NOT
31226: IFFALSE 31285
// repeat weapon := _weapon [ 1 ] ;
31228: LD_ADDR_VAR 0 5
31232: PUSH
31233: LD_VAR 0 10
31237: PUSH
31238: LD_INT 1
31240: ARRAY
31241: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31242: LD_ADDR_VAR 0 10
31246: PUSH
31247: LD_VAR 0 10
31251: PPUSH
31252: LD_INT 1
31254: PPUSH
31255: CALL_OW 3
31259: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31260: LD_VAR 0 2
31264: PPUSH
31265: LD_VAR 0 5
31269: PPUSH
31270: CALL 31579 0 2
31274: PUSH
31275: LD_VAR 0 10
31279: PUSH
31280: EMPTY
31281: EQUAL
31282: OR
31283: IFFALSE 31228
// result := [ ] ;
31285: LD_ADDR_VAR 0 6
31289: PUSH
31290: EMPTY
31291: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31292: LD_VAR 0 1
31296: PPUSH
31297: LD_VAR 0 2
31301: PPUSH
31302: LD_VAR 0 3
31306: PPUSH
31307: LD_VAR 0 4
31311: PPUSH
31312: LD_VAR 0 5
31316: PPUSH
31317: CALL_OW 448
31321: IFFALSE 31354
// result := [ chassis , engine , control , weapon ] ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_VAR 0 2
31332: PUSH
31333: LD_VAR 0 3
31337: PUSH
31338: LD_VAR 0 4
31342: PUSH
31343: LD_VAR 0 5
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: ST_TO_ADDR
// end ;
31354: LD_VAR 0 6
31358: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31359: LD_INT 0
31361: PPUSH
// if not chassis or not engine then
31362: LD_VAR 0 1
31366: NOT
31367: PUSH
31368: LD_VAR 0 2
31372: NOT
31373: OR
31374: IFFALSE 31378
// exit ;
31376: GO 31574
// case engine of engine_solar :
31378: LD_VAR 0 2
31382: PUSH
31383: LD_INT 2
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31429
31391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31392: LD_ADDR_VAR 0 3
31396: PUSH
31397: LD_INT 11
31399: PUSH
31400: LD_INT 12
31402: PUSH
31403: LD_INT 13
31405: PUSH
31406: LD_INT 14
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 3
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
31427: GO 31558
31429: LD_INT 1
31431: DOUBLE
31432: EQUAL
31433: IFTRUE 31437
31435: GO 31499
31437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31438: LD_ADDR_VAR 0 3
31442: PUSH
31443: LD_INT 11
31445: PUSH
31446: LD_INT 12
31448: PUSH
31449: LD_INT 13
31451: PUSH
31452: LD_INT 14
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 4
31466: PUSH
31467: LD_INT 5
31469: PUSH
31470: LD_INT 21
31472: PUSH
31473: LD_INT 23
31475: PUSH
31476: LD_INT 22
31478: PUSH
31479: LD_INT 24
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
31497: GO 31558
31499: LD_INT 3
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31557
31507: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_INT 13
31515: PUSH
31516: LD_INT 14
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: LD_INT 4
31527: PUSH
31528: LD_INT 5
31530: PUSH
31531: LD_INT 21
31533: PUSH
31534: LD_INT 22
31536: PUSH
31537: LD_INT 23
31539: PUSH
31540: LD_INT 24
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: ST_TO_ADDR
31555: GO 31558
31557: POP
// result := ( chassis in result ) ;
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_VAR 0 1
31567: PUSH
31568: LD_VAR 0 3
31572: IN
31573: ST_TO_ADDR
// end ;
31574: LD_VAR 0 3
31578: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31579: LD_INT 0
31581: PPUSH
// if not chassis or not weapon then
31582: LD_VAR 0 1
31586: NOT
31587: PUSH
31588: LD_VAR 0 2
31592: NOT
31593: OR
31594: IFFALSE 31598
// exit ;
31596: GO 32624
// case weapon of us_machine_gun :
31598: LD_VAR 0 2
31602: PUSH
31603: LD_INT 2
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31641
31611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31612: LD_ADDR_VAR 0 3
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 4
31628: PUSH
31629: LD_INT 5
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: ST_TO_ADDR
31639: GO 32608
31641: LD_INT 3
31643: DOUBLE
31644: EQUAL
31645: IFTRUE 31649
31647: GO 31679
31649: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: LD_INT 5
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
31677: GO 32608
31679: LD_INT 11
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31717
31687: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31688: LD_ADDR_VAR 0 3
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 4
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
31715: GO 32608
31717: LD_INT 4
31719: DOUBLE
31720: EQUAL
31721: IFTRUE 31725
31723: GO 31751
31725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: LD_INT 4
31739: PUSH
31740: LD_INT 5
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
31749: GO 32608
31751: LD_INT 5
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31759
31757: GO 31785
31759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31760: LD_ADDR_VAR 0 3
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: LD_INT 4
31773: PUSH
31774: LD_INT 5
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
31783: GO 32608
31785: LD_INT 9
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31819
31793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: LD_INT 5
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: ST_TO_ADDR
31817: GO 32608
31819: LD_INT 7
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31853
31827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: LD_INT 5
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
31851: GO 32608
31853: LD_INT 12
31855: DOUBLE
31856: EQUAL
31857: IFTRUE 31861
31859: GO 31887
31861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31862: LD_ADDR_VAR 0 3
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 3
31872: PUSH
31873: LD_INT 4
31875: PUSH
31876: LD_INT 5
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: ST_TO_ADDR
31885: GO 32608
31887: LD_INT 13
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31921
31895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 3
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 5
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: ST_TO_ADDR
31919: GO 32608
31921: LD_INT 14
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31947
31929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: ST_TO_ADDR
31945: GO 32608
31947: LD_INT 6
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31973
31955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31956: LD_ADDR_VAR 0 3
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32608
31973: LD_INT 10
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 31999
31981: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: ST_TO_ADDR
31997: GO 32608
31999: LD_INT 22
32001: DOUBLE
32002: EQUAL
32003: IFTRUE 32007
32005: GO 32033
32007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32008: LD_ADDR_VAR 0 3
32012: PUSH
32013: LD_INT 11
32015: PUSH
32016: LD_INT 12
32018: PUSH
32019: LD_INT 13
32021: PUSH
32022: LD_INT 14
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
32031: GO 32608
32033: LD_INT 23
32035: DOUBLE
32036: EQUAL
32037: IFTRUE 32041
32039: GO 32067
32041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32042: LD_ADDR_VAR 0 3
32046: PUSH
32047: LD_INT 11
32049: PUSH
32050: LD_INT 12
32052: PUSH
32053: LD_INT 13
32055: PUSH
32056: LD_INT 14
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
32065: GO 32608
32067: LD_INT 24
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32101
32075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_INT 11
32083: PUSH
32084: LD_INT 12
32086: PUSH
32087: LD_INT 13
32089: PUSH
32090: LD_INT 14
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: ST_TO_ADDR
32099: GO 32608
32101: LD_INT 30
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32135
32109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_INT 11
32117: PUSH
32118: LD_INT 12
32120: PUSH
32121: LD_INT 13
32123: PUSH
32124: LD_INT 14
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: ST_TO_ADDR
32133: GO 32608
32135: LD_INT 25
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32161
32143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 13
32151: PUSH
32152: LD_INT 14
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: ST_TO_ADDR
32159: GO 32608
32161: LD_INT 27
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32187
32169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32170: LD_ADDR_VAR 0 3
32174: PUSH
32175: LD_INT 13
32177: PUSH
32178: LD_INT 14
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 32608
32187: LD_INT 28
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32213
32195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: LD_INT 13
32203: PUSH
32204: LD_INT 14
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 32608
32213: LD_INT 29
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32239
32221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 13
32229: PUSH
32230: LD_INT 14
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: ST_TO_ADDR
32237: GO 32608
32239: LD_INT 31
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32265
32247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_INT 13
32255: PUSH
32256: LD_INT 14
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 32608
32265: LD_INT 26
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32291
32273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 13
32281: PUSH
32282: LD_INT 14
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: ST_TO_ADDR
32289: GO 32608
32291: LD_INT 42
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32325
32299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_INT 21
32307: PUSH
32308: LD_INT 22
32310: PUSH
32311: LD_INT 23
32313: PUSH
32314: LD_INT 24
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
32323: GO 32608
32325: LD_INT 43
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32359
32333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_INT 21
32341: PUSH
32342: LD_INT 22
32344: PUSH
32345: LD_INT 23
32347: PUSH
32348: LD_INT 24
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: ST_TO_ADDR
32357: GO 32608
32359: LD_INT 44
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32393
32367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32368: LD_ADDR_VAR 0 3
32372: PUSH
32373: LD_INT 21
32375: PUSH
32376: LD_INT 22
32378: PUSH
32379: LD_INT 23
32381: PUSH
32382: LD_INT 24
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 32608
32393: LD_INT 45
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32427
32401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 21
32409: PUSH
32410: LD_INT 22
32412: PUSH
32413: LD_INT 23
32415: PUSH
32416: LD_INT 24
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 32608
32427: LD_INT 49
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32461
32435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 21
32443: PUSH
32444: LD_INT 22
32446: PUSH
32447: LD_INT 23
32449: PUSH
32450: LD_INT 24
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
32459: GO 32608
32461: LD_INT 51
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32495
32469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_INT 21
32477: PUSH
32478: LD_INT 22
32480: PUSH
32481: LD_INT 23
32483: PUSH
32484: LD_INT 24
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
32493: GO 32608
32495: LD_INT 52
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32529
32503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32504: LD_ADDR_VAR 0 3
32508: PUSH
32509: LD_INT 21
32511: PUSH
32512: LD_INT 22
32514: PUSH
32515: LD_INT 23
32517: PUSH
32518: LD_INT 24
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
32527: GO 32608
32529: LD_INT 53
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32555
32537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32538: LD_ADDR_VAR 0 3
32542: PUSH
32543: LD_INT 23
32545: PUSH
32546: LD_INT 24
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 32608
32555: LD_INT 46
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32581
32563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 23
32571: PUSH
32572: LD_INT 24
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 32608
32581: LD_INT 47
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32607
32589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_INT 23
32597: PUSH
32598: LD_INT 24
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: ST_TO_ADDR
32605: GO 32608
32607: POP
// result := ( chassis in result ) ;
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_VAR 0 1
32617: PUSH
32618: LD_VAR 0 3
32622: IN
32623: ST_TO_ADDR
// end ;
32624: LD_VAR 0 3
32628: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32629: LD_INT 0
32631: PPUSH
32632: PPUSH
32633: PPUSH
32634: PPUSH
32635: PPUSH
32636: PPUSH
32637: PPUSH
// result := array ;
32638: LD_ADDR_VAR 0 5
32642: PUSH
32643: LD_VAR 0 1
32647: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32648: LD_VAR 0 1
32652: NOT
32653: PUSH
32654: LD_VAR 0 2
32658: NOT
32659: OR
32660: PUSH
32661: LD_VAR 0 3
32665: NOT
32666: OR
32667: PUSH
32668: LD_VAR 0 2
32672: PUSH
32673: LD_VAR 0 1
32677: GREATER
32678: OR
32679: PUSH
32680: LD_VAR 0 3
32684: PUSH
32685: LD_VAR 0 1
32689: GREATER
32690: OR
32691: IFFALSE 32695
// exit ;
32693: GO 32991
// if direction then
32695: LD_VAR 0 4
32699: IFFALSE 32763
// begin d := 1 ;
32701: LD_ADDR_VAR 0 9
32705: PUSH
32706: LD_INT 1
32708: ST_TO_ADDR
// if i_from > i_to then
32709: LD_VAR 0 2
32713: PUSH
32714: LD_VAR 0 3
32718: GREATER
32719: IFFALSE 32745
// length := ( array - i_from ) + i_to else
32721: LD_ADDR_VAR 0 11
32725: PUSH
32726: LD_VAR 0 1
32730: PUSH
32731: LD_VAR 0 2
32735: MINUS
32736: PUSH
32737: LD_VAR 0 3
32741: PLUS
32742: ST_TO_ADDR
32743: GO 32761
// length := i_to - i_from ;
32745: LD_ADDR_VAR 0 11
32749: PUSH
32750: LD_VAR 0 3
32754: PUSH
32755: LD_VAR 0 2
32759: MINUS
32760: ST_TO_ADDR
// end else
32761: GO 32824
// begin d := - 1 ;
32763: LD_ADDR_VAR 0 9
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: ST_TO_ADDR
// if i_from > i_to then
32772: LD_VAR 0 2
32776: PUSH
32777: LD_VAR 0 3
32781: GREATER
32782: IFFALSE 32802
// length := i_from - i_to else
32784: LD_ADDR_VAR 0 11
32788: PUSH
32789: LD_VAR 0 2
32793: PUSH
32794: LD_VAR 0 3
32798: MINUS
32799: ST_TO_ADDR
32800: GO 32824
// length := ( array - i_to ) + i_from ;
32802: LD_ADDR_VAR 0 11
32806: PUSH
32807: LD_VAR 0 1
32811: PUSH
32812: LD_VAR 0 3
32816: MINUS
32817: PUSH
32818: LD_VAR 0 2
32822: PLUS
32823: ST_TO_ADDR
// end ; if not length then
32824: LD_VAR 0 11
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32991
// tmp := array ;
32833: LD_ADDR_VAR 0 10
32837: PUSH
32838: LD_VAR 0 1
32842: ST_TO_ADDR
// for i = 1 to length do
32843: LD_ADDR_VAR 0 6
32847: PUSH
32848: DOUBLE
32849: LD_INT 1
32851: DEC
32852: ST_TO_ADDR
32853: LD_VAR 0 11
32857: PUSH
32858: FOR_TO
32859: IFFALSE 32979
// begin for j = 1 to array do
32861: LD_ADDR_VAR 0 7
32865: PUSH
32866: DOUBLE
32867: LD_INT 1
32869: DEC
32870: ST_TO_ADDR
32871: LD_VAR 0 1
32875: PUSH
32876: FOR_TO
32877: IFFALSE 32965
// begin k := j + d ;
32879: LD_ADDR_VAR 0 8
32883: PUSH
32884: LD_VAR 0 7
32888: PUSH
32889: LD_VAR 0 9
32893: PLUS
32894: ST_TO_ADDR
// if k > array then
32895: LD_VAR 0 8
32899: PUSH
32900: LD_VAR 0 1
32904: GREATER
32905: IFFALSE 32915
// k := 1 ;
32907: LD_ADDR_VAR 0 8
32911: PUSH
32912: LD_INT 1
32914: ST_TO_ADDR
// if not k then
32915: LD_VAR 0 8
32919: NOT
32920: IFFALSE 32932
// k := array ;
32922: LD_ADDR_VAR 0 8
32926: PUSH
32927: LD_VAR 0 1
32931: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32932: LD_ADDR_VAR 0 10
32936: PUSH
32937: LD_VAR 0 10
32941: PPUSH
32942: LD_VAR 0 8
32946: PPUSH
32947: LD_VAR 0 1
32951: PUSH
32952: LD_VAR 0 7
32956: ARRAY
32957: PPUSH
32958: CALL_OW 1
32962: ST_TO_ADDR
// end ;
32963: GO 32876
32965: POP
32966: POP
// array := tmp ;
32967: LD_ADDR_VAR 0 1
32971: PUSH
32972: LD_VAR 0 10
32976: ST_TO_ADDR
// end ;
32977: GO 32858
32979: POP
32980: POP
// result := array ;
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_VAR 0 1
32990: ST_TO_ADDR
// end ;
32991: LD_VAR 0 5
32995: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32996: LD_INT 0
32998: PPUSH
32999: PPUSH
// result := 0 ;
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_INT 0
33007: ST_TO_ADDR
// if not array or not value in array then
33008: LD_VAR 0 1
33012: NOT
33013: PUSH
33014: LD_VAR 0 2
33018: PUSH
33019: LD_VAR 0 1
33023: IN
33024: NOT
33025: OR
33026: IFFALSE 33030
// exit ;
33028: GO 33084
// for i = 1 to array do
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: DOUBLE
33036: LD_INT 1
33038: DEC
33039: ST_TO_ADDR
33040: LD_VAR 0 1
33044: PUSH
33045: FOR_TO
33046: IFFALSE 33082
// if value = array [ i ] then
33048: LD_VAR 0 2
33052: PUSH
33053: LD_VAR 0 1
33057: PUSH
33058: LD_VAR 0 4
33062: ARRAY
33063: EQUAL
33064: IFFALSE 33080
// begin result := i ;
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_VAR 0 4
33075: ST_TO_ADDR
// exit ;
33076: POP
33077: POP
33078: GO 33084
// end ;
33080: GO 33045
33082: POP
33083: POP
// end ;
33084: LD_VAR 0 3
33088: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33089: LD_INT 0
33091: PPUSH
// vc_chassis := chassis ;
33092: LD_ADDR_OWVAR 37
33096: PUSH
33097: LD_VAR 0 1
33101: ST_TO_ADDR
// vc_engine := engine ;
33102: LD_ADDR_OWVAR 39
33106: PUSH
33107: LD_VAR 0 2
33111: ST_TO_ADDR
// vc_control := control ;
33112: LD_ADDR_OWVAR 38
33116: PUSH
33117: LD_VAR 0 3
33121: ST_TO_ADDR
// vc_weapon := weapon ;
33122: LD_ADDR_OWVAR 40
33126: PUSH
33127: LD_VAR 0 4
33131: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33132: LD_ADDR_OWVAR 41
33136: PUSH
33137: LD_VAR 0 5
33141: ST_TO_ADDR
// end ;
33142: LD_VAR 0 6
33146: RET
// export function WantPlant ( unit ) ; var task ; begin
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
// result := false ;
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_INT 0
33158: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_VAR 0 1
33168: PPUSH
33169: CALL_OW 437
33173: ST_TO_ADDR
// if task then
33174: LD_VAR 0 3
33178: IFFALSE 33206
// if task [ 1 ] [ 1 ] = p then
33180: LD_VAR 0 3
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: PUSH
33189: LD_INT 1
33191: ARRAY
33192: PUSH
33193: LD_STRING p
33195: EQUAL
33196: IFFALSE 33206
// result := true ;
33198: LD_ADDR_VAR 0 2
33202: PUSH
33203: LD_INT 1
33205: ST_TO_ADDR
// end ;
33206: LD_VAR 0 2
33210: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
// if pos < 1 then
33217: LD_VAR 0 2
33221: PUSH
33222: LD_INT 1
33224: LESS
33225: IFFALSE 33229
// exit ;
33227: GO 33532
// if pos = 1 then
33229: LD_VAR 0 2
33233: PUSH
33234: LD_INT 1
33236: EQUAL
33237: IFFALSE 33270
// result := Replace ( arr , pos [ 1 ] , value ) else
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_VAR 0 1
33248: PPUSH
33249: LD_VAR 0 2
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: CALL_OW 1
33267: ST_TO_ADDR
33268: GO 33532
// begin tmp := arr ;
33270: LD_ADDR_VAR 0 6
33274: PUSH
33275: LD_VAR 0 1
33279: ST_TO_ADDR
// s_arr := [ tmp ] ;
33280: LD_ADDR_VAR 0 7
33284: PUSH
33285: LD_VAR 0 6
33289: PUSH
33290: EMPTY
33291: LIST
33292: ST_TO_ADDR
// for i = 1 to pos - 1 do
33293: LD_ADDR_VAR 0 5
33297: PUSH
33298: DOUBLE
33299: LD_INT 1
33301: DEC
33302: ST_TO_ADDR
33303: LD_VAR 0 2
33307: PUSH
33308: LD_INT 1
33310: MINUS
33311: PUSH
33312: FOR_TO
33313: IFFALSE 33358
// begin tmp := tmp [ pos [ i ] ] ;
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 6
33324: PUSH
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 5
33334: ARRAY
33335: ARRAY
33336: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33337: LD_ADDR_VAR 0 7
33341: PUSH
33342: LD_VAR 0 7
33346: PUSH
33347: LD_VAR 0 6
33351: PUSH
33352: EMPTY
33353: LIST
33354: ADD
33355: ST_TO_ADDR
// end ;
33356: GO 33312
33358: POP
33359: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33360: LD_ADDR_VAR 0 6
33364: PUSH
33365: LD_VAR 0 6
33369: PPUSH
33370: LD_VAR 0 2
33374: PUSH
33375: LD_VAR 0 2
33379: ARRAY
33380: PPUSH
33381: LD_VAR 0 3
33385: PPUSH
33386: CALL_OW 1
33390: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33391: LD_ADDR_VAR 0 7
33395: PUSH
33396: LD_VAR 0 7
33400: PPUSH
33401: LD_VAR 0 7
33405: PPUSH
33406: LD_VAR 0 6
33410: PPUSH
33411: CALL_OW 1
33415: ST_TO_ADDR
// for i = s_arr downto 2 do
33416: LD_ADDR_VAR 0 5
33420: PUSH
33421: DOUBLE
33422: LD_VAR 0 7
33426: INC
33427: ST_TO_ADDR
33428: LD_INT 2
33430: PUSH
33431: FOR_DOWNTO
33432: IFFALSE 33516
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33434: LD_ADDR_VAR 0 6
33438: PUSH
33439: LD_VAR 0 7
33443: PUSH
33444: LD_VAR 0 5
33448: PUSH
33449: LD_INT 1
33451: MINUS
33452: ARRAY
33453: PPUSH
33454: LD_VAR 0 2
33458: PUSH
33459: LD_VAR 0 5
33463: PUSH
33464: LD_INT 1
33466: MINUS
33467: ARRAY
33468: PPUSH
33469: LD_VAR 0 7
33473: PUSH
33474: LD_VAR 0 5
33478: ARRAY
33479: PPUSH
33480: CALL_OW 1
33484: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33485: LD_ADDR_VAR 0 7
33489: PUSH
33490: LD_VAR 0 7
33494: PPUSH
33495: LD_VAR 0 5
33499: PUSH
33500: LD_INT 1
33502: MINUS
33503: PPUSH
33504: LD_VAR 0 6
33508: PPUSH
33509: CALL_OW 1
33513: ST_TO_ADDR
// end ;
33514: GO 33431
33516: POP
33517: POP
// result := s_arr [ 1 ] ;
33518: LD_ADDR_VAR 0 4
33522: PUSH
33523: LD_VAR 0 7
33527: PUSH
33528: LD_INT 1
33530: ARRAY
33531: ST_TO_ADDR
// end ; end ;
33532: LD_VAR 0 4
33536: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33537: LD_INT 0
33539: PPUSH
33540: PPUSH
// if not list then
33541: LD_VAR 0 1
33545: NOT
33546: IFFALSE 33550
// exit ;
33548: GO 33641
// i := list [ pos1 ] ;
33550: LD_ADDR_VAR 0 5
33554: PUSH
33555: LD_VAR 0 1
33559: PUSH
33560: LD_VAR 0 2
33564: ARRAY
33565: ST_TO_ADDR
// if not i then
33566: LD_VAR 0 5
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 33641
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33575: LD_ADDR_VAR 0 1
33579: PUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: LD_VAR 0 2
33589: PPUSH
33590: LD_VAR 0 1
33594: PUSH
33595: LD_VAR 0 3
33599: ARRAY
33600: PPUSH
33601: CALL_OW 1
33605: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33606: LD_ADDR_VAR 0 1
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: LD_VAR 0 3
33620: PPUSH
33621: LD_VAR 0 5
33625: PPUSH
33626: CALL_OW 1
33630: ST_TO_ADDR
// result := list ;
33631: LD_ADDR_VAR 0 4
33635: PUSH
33636: LD_VAR 0 1
33640: ST_TO_ADDR
// end ;
33641: LD_VAR 0 4
33645: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33646: LD_INT 0
33648: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33649: LD_ADDR_VAR 0 5
33653: PUSH
33654: LD_VAR 0 1
33658: PPUSH
33659: CALL_OW 250
33663: PPUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 251
33673: PPUSH
33674: LD_VAR 0 2
33678: PPUSH
33679: LD_VAR 0 3
33683: PPUSH
33684: LD_VAR 0 4
33688: PPUSH
33689: CALL 33699 0 5
33693: ST_TO_ADDR
// end ;
33694: LD_VAR 0 5
33698: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
// if not list then
33705: LD_VAR 0 3
33709: NOT
33710: IFFALSE 33714
// exit ;
33712: GO 34102
// result := [ ] ;
33714: LD_ADDR_VAR 0 6
33718: PUSH
33719: EMPTY
33720: ST_TO_ADDR
// for i in list do
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 3
33730: PUSH
33731: FOR_IN
33732: IFFALSE 33934
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33734: LD_ADDR_VAR 0 9
33738: PUSH
33739: LD_VAR 0 7
33743: PPUSH
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: CALL_OW 297
33758: ST_TO_ADDR
// if not result then
33759: LD_VAR 0 6
33763: NOT
33764: IFFALSE 33790
// result := [ [ i , tmp ] ] else
33766: LD_ADDR_VAR 0 6
33770: PUSH
33771: LD_VAR 0 7
33775: PUSH
33776: LD_VAR 0 9
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: ST_TO_ADDR
33788: GO 33932
// begin if result [ result ] [ 2 ] < tmp then
33790: LD_VAR 0 6
33794: PUSH
33795: LD_VAR 0 6
33799: ARRAY
33800: PUSH
33801: LD_INT 2
33803: ARRAY
33804: PUSH
33805: LD_VAR 0 9
33809: LESS
33810: IFFALSE 33852
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33812: LD_ADDR_VAR 0 6
33816: PUSH
33817: LD_VAR 0 6
33821: PPUSH
33822: LD_VAR 0 6
33826: PUSH
33827: LD_INT 1
33829: PLUS
33830: PPUSH
33831: LD_VAR 0 7
33835: PUSH
33836: LD_VAR 0 9
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PPUSH
33845: CALL_OW 2
33849: ST_TO_ADDR
33850: GO 33932
// for j = 1 to result do
33852: LD_ADDR_VAR 0 8
33856: PUSH
33857: DOUBLE
33858: LD_INT 1
33860: DEC
33861: ST_TO_ADDR
33862: LD_VAR 0 6
33866: PUSH
33867: FOR_TO
33868: IFFALSE 33930
// begin if tmp < result [ j ] [ 2 ] then
33870: LD_VAR 0 9
33874: PUSH
33875: LD_VAR 0 6
33879: PUSH
33880: LD_VAR 0 8
33884: ARRAY
33885: PUSH
33886: LD_INT 2
33888: ARRAY
33889: LESS
33890: IFFALSE 33928
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33892: LD_ADDR_VAR 0 6
33896: PUSH
33897: LD_VAR 0 6
33901: PPUSH
33902: LD_VAR 0 8
33906: PPUSH
33907: LD_VAR 0 7
33911: PUSH
33912: LD_VAR 0 9
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PPUSH
33921: CALL_OW 2
33925: ST_TO_ADDR
// break ;
33926: GO 33930
// end ; end ;
33928: GO 33867
33930: POP
33931: POP
// end ; end ;
33932: GO 33731
33934: POP
33935: POP
// if result and not asc then
33936: LD_VAR 0 6
33940: PUSH
33941: LD_VAR 0 4
33945: NOT
33946: AND
33947: IFFALSE 34022
// begin tmp := result ;
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_VAR 0 6
33958: ST_TO_ADDR
// for i = tmp downto 1 do
33959: LD_ADDR_VAR 0 7
33963: PUSH
33964: DOUBLE
33965: LD_VAR 0 9
33969: INC
33970: ST_TO_ADDR
33971: LD_INT 1
33973: PUSH
33974: FOR_DOWNTO
33975: IFFALSE 34020
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33977: LD_ADDR_VAR 0 6
33981: PUSH
33982: LD_VAR 0 6
33986: PPUSH
33987: LD_VAR 0 9
33991: PUSH
33992: LD_VAR 0 7
33996: MINUS
33997: PUSH
33998: LD_INT 1
34000: PLUS
34001: PPUSH
34002: LD_VAR 0 9
34006: PUSH
34007: LD_VAR 0 7
34011: ARRAY
34012: PPUSH
34013: CALL_OW 1
34017: ST_TO_ADDR
34018: GO 33974
34020: POP
34021: POP
// end ; tmp := [ ] ;
34022: LD_ADDR_VAR 0 9
34026: PUSH
34027: EMPTY
34028: ST_TO_ADDR
// if mode then
34029: LD_VAR 0 5
34033: IFFALSE 34102
// begin for i = 1 to result do
34035: LD_ADDR_VAR 0 7
34039: PUSH
34040: DOUBLE
34041: LD_INT 1
34043: DEC
34044: ST_TO_ADDR
34045: LD_VAR 0 6
34049: PUSH
34050: FOR_TO
34051: IFFALSE 34090
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: LD_VAR 0 9
34062: PPUSH
34063: LD_VAR 0 7
34067: PPUSH
34068: LD_VAR 0 6
34072: PUSH
34073: LD_VAR 0 7
34077: ARRAY
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: PPUSH
34083: CALL_OW 1
34087: ST_TO_ADDR
34088: GO 34050
34090: POP
34091: POP
// result := tmp ;
34092: LD_ADDR_VAR 0 6
34096: PUSH
34097: LD_VAR 0 9
34101: ST_TO_ADDR
// end ; end ;
34102: LD_VAR 0 6
34106: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34115: LD_ADDR_VAR 0 5
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: ST_TO_ADDR
// if not x or not y then
34137: LD_VAR 0 2
34141: NOT
34142: PUSH
34143: LD_VAR 0 3
34147: NOT
34148: OR
34149: IFFALSE 34153
// exit ;
34151: GO 35799
// if not range then
34153: LD_VAR 0 4
34157: NOT
34158: IFFALSE 34168
// range := 10 ;
34160: LD_ADDR_VAR 0 4
34164: PUSH
34165: LD_INT 10
34167: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34168: LD_ADDR_VAR 0 8
34172: PUSH
34173: LD_INT 81
34175: PUSH
34176: LD_VAR 0 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 92
34187: PUSH
34188: LD_VAR 0 2
34192: PUSH
34193: LD_VAR 0 3
34197: PUSH
34198: LD_VAR 0 4
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: LD_INT 21
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: PPUSH
34231: CALL_OW 69
34235: ST_TO_ADDR
// if not tmp then
34236: LD_VAR 0 8
34240: NOT
34241: IFFALSE 34245
// exit ;
34243: GO 35799
// for i in tmp do
34245: LD_ADDR_VAR 0 6
34249: PUSH
34250: LD_VAR 0 8
34254: PUSH
34255: FOR_IN
34256: IFFALSE 35774
// begin points := [ 0 , 0 , 0 ] ;
34258: LD_ADDR_VAR 0 9
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
// bpoints := 1 ;
34277: LD_ADDR_VAR 0 10
34281: PUSH
34282: LD_INT 1
34284: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34285: LD_VAR 0 6
34289: PPUSH
34290: CALL_OW 247
34294: PUSH
34295: LD_INT 1
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34303
34301: GO 34881
34303: POP
// begin if GetClass ( i ) = 1 then
34304: LD_VAR 0 6
34308: PPUSH
34309: CALL_OW 257
34313: PUSH
34314: LD_INT 1
34316: EQUAL
34317: IFFALSE 34338
// points := [ 10 , 5 , 3 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 10
34326: PUSH
34327: LD_INT 5
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 257
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 4
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: IN
34362: IFFALSE 34383
// points := [ 3 , 2 , 1 ] ;
34364: LD_ADDR_VAR 0 9
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34383: LD_VAR 0 6
34387: PPUSH
34388: CALL_OW 257
34392: PUSH
34393: LD_INT 5
34395: EQUAL
34396: IFFALSE 34417
// points := [ 130 , 5 , 2 ] ;
34398: LD_ADDR_VAR 0 9
34402: PUSH
34403: LD_INT 130
34405: PUSH
34406: LD_INT 5
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34417: LD_VAR 0 6
34421: PPUSH
34422: CALL_OW 257
34426: PUSH
34427: LD_INT 8
34429: EQUAL
34430: IFFALSE 34451
// points := [ 35 , 35 , 30 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 35
34439: PUSH
34440: LD_INT 35
34442: PUSH
34443: LD_INT 30
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 257
34460: PUSH
34461: LD_INT 9
34463: EQUAL
34464: IFFALSE 34485
// points := [ 20 , 55 , 40 ] ;
34466: LD_ADDR_VAR 0 9
34470: PUSH
34471: LD_INT 20
34473: PUSH
34474: LD_INT 55
34476: PUSH
34477: LD_INT 40
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34485: LD_VAR 0 6
34489: PPUSH
34490: CALL_OW 257
34494: PUSH
34495: LD_INT 12
34497: PUSH
34498: LD_INT 16
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: IN
34505: IFFALSE 34526
// points := [ 5 , 3 , 2 ] ;
34507: LD_ADDR_VAR 0 9
34511: PUSH
34512: LD_INT 5
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34526: LD_VAR 0 6
34530: PPUSH
34531: CALL_OW 257
34535: PUSH
34536: LD_INT 17
34538: EQUAL
34539: IFFALSE 34560
// points := [ 100 , 50 , 75 ] ;
34541: LD_ADDR_VAR 0 9
34545: PUSH
34546: LD_INT 100
34548: PUSH
34549: LD_INT 50
34551: PUSH
34552: LD_INT 75
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34560: LD_VAR 0 6
34564: PPUSH
34565: CALL_OW 257
34569: PUSH
34570: LD_INT 15
34572: EQUAL
34573: IFFALSE 34594
// points := [ 10 , 5 , 3 ] ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_INT 10
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 257
34603: PUSH
34604: LD_INT 14
34606: EQUAL
34607: IFFALSE 34628
// points := [ 10 , 0 , 0 ] ;
34609: LD_ADDR_VAR 0 9
34613: PUSH
34614: LD_INT 10
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34628: LD_VAR 0 6
34632: PPUSH
34633: CALL_OW 257
34637: PUSH
34638: LD_INT 11
34640: EQUAL
34641: IFFALSE 34662
// points := [ 30 , 10 , 5 ] ;
34643: LD_ADDR_VAR 0 9
34647: PUSH
34648: LD_INT 30
34650: PUSH
34651: LD_INT 10
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34662: LD_VAR 0 1
34666: PPUSH
34667: LD_INT 5
34669: PPUSH
34670: CALL_OW 321
34674: PUSH
34675: LD_INT 2
34677: EQUAL
34678: IFFALSE 34695
// bpoints := bpoints * 1.8 ;
34680: LD_ADDR_VAR 0 10
34684: PUSH
34685: LD_VAR 0 10
34689: PUSH
34690: LD_REAL  1.80000000000000E+0000
34693: MUL
34694: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34695: LD_VAR 0 6
34699: PPUSH
34700: CALL_OW 257
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 3
34713: PUSH
34714: LD_INT 4
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: IN
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: LD_INT 51
34731: PPUSH
34732: CALL_OW 321
34736: PUSH
34737: LD_INT 2
34739: EQUAL
34740: AND
34741: IFFALSE 34758
// bpoints := bpoints * 1.2 ;
34743: LD_ADDR_VAR 0 10
34747: PUSH
34748: LD_VAR 0 10
34752: PUSH
34753: LD_REAL  1.20000000000000E+0000
34756: MUL
34757: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34758: LD_VAR 0 6
34762: PPUSH
34763: CALL_OW 257
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: LD_INT 7
34773: PUSH
34774: LD_INT 9
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: IN
34782: PUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_INT 52
34790: PPUSH
34791: CALL_OW 321
34795: PUSH
34796: LD_INT 2
34798: EQUAL
34799: AND
34800: IFFALSE 34817
// bpoints := bpoints * 1.5 ;
34802: LD_ADDR_VAR 0 10
34806: PUSH
34807: LD_VAR 0 10
34811: PUSH
34812: LD_REAL  1.50000000000000E+0000
34815: MUL
34816: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34817: LD_VAR 0 1
34821: PPUSH
34822: LD_INT 66
34824: PPUSH
34825: CALL_OW 321
34829: PUSH
34830: LD_INT 2
34832: EQUAL
34833: IFFALSE 34850
// bpoints := bpoints * 1.1 ;
34835: LD_ADDR_VAR 0 10
34839: PUSH
34840: LD_VAR 0 10
34844: PUSH
34845: LD_REAL  1.10000000000000E+0000
34848: MUL
34849: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34850: LD_ADDR_VAR 0 10
34854: PUSH
34855: LD_VAR 0 10
34859: PUSH
34860: LD_VAR 0 6
34864: PPUSH
34865: LD_INT 1
34867: PPUSH
34868: CALL_OW 259
34872: PUSH
34873: LD_REAL  1.15000000000000E+0000
34876: MUL
34877: MUL
34878: ST_TO_ADDR
// end ; unit_vehicle :
34879: GO 35703
34881: LD_INT 2
34883: DOUBLE
34884: EQUAL
34885: IFTRUE 34889
34887: GO 35691
34889: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34890: LD_VAR 0 6
34894: PPUSH
34895: CALL_OW 264
34899: PUSH
34900: LD_INT 2
34902: PUSH
34903: LD_INT 42
34905: PUSH
34906: LD_INT 24
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: IN
34914: IFFALSE 34935
// points := [ 25 , 5 , 3 ] ;
34916: LD_ADDR_VAR 0 9
34920: PUSH
34921: LD_INT 25
34923: PUSH
34924: LD_INT 5
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34935: LD_VAR 0 6
34939: PPUSH
34940: CALL_OW 264
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 43
34950: PUSH
34951: LD_INT 25
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: IN
34959: IFFALSE 34980
// points := [ 40 , 15 , 5 ] ;
34961: LD_ADDR_VAR 0 9
34965: PUSH
34966: LD_INT 40
34968: PUSH
34969: LD_INT 15
34971: PUSH
34972: LD_INT 5
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34980: LD_VAR 0 6
34984: PPUSH
34985: CALL_OW 264
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 23
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: IN
35000: IFFALSE 35021
// points := [ 7 , 25 , 8 ] ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_INT 7
35009: PUSH
35010: LD_INT 25
35012: PUSH
35013: LD_INT 8
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 264
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: LD_INT 27
35036: PUSH
35037: LD_INT 44
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: IN
35045: IFFALSE 35066
// points := [ 14 , 50 , 16 ] ;
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: LD_INT 50
35057: PUSH
35058: LD_INT 16
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35066: LD_VAR 0 6
35070: PPUSH
35071: CALL_OW 264
35075: PUSH
35076: LD_INT 6
35078: PUSH
35079: LD_INT 46
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: IN
35086: IFFALSE 35107
// points := [ 32 , 120 , 70 ] ;
35088: LD_ADDR_VAR 0 9
35092: PUSH
35093: LD_INT 32
35095: PUSH
35096: LD_INT 120
35098: PUSH
35099: LD_INT 70
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35107: LD_VAR 0 6
35111: PPUSH
35112: CALL_OW 264
35116: PUSH
35117: LD_INT 7
35119: PUSH
35120: LD_INT 28
35122: PUSH
35123: LD_INT 45
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: IN
35131: IFFALSE 35152
// points := [ 35 , 20 , 45 ] ;
35133: LD_ADDR_VAR 0 9
35137: PUSH
35138: LD_INT 35
35140: PUSH
35141: LD_INT 20
35143: PUSH
35144: LD_INT 45
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35152: LD_VAR 0 6
35156: PPUSH
35157: CALL_OW 264
35161: PUSH
35162: LD_INT 47
35164: PUSH
35165: EMPTY
35166: LIST
35167: IN
35168: IFFALSE 35189
// points := [ 67 , 45 , 75 ] ;
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_INT 67
35177: PUSH
35178: LD_INT 45
35180: PUSH
35181: LD_INT 75
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35189: LD_VAR 0 6
35193: PPUSH
35194: CALL_OW 264
35198: PUSH
35199: LD_INT 26
35201: PUSH
35202: EMPTY
35203: LIST
35204: IN
35205: IFFALSE 35226
// points := [ 120 , 30 , 80 ] ;
35207: LD_ADDR_VAR 0 9
35211: PUSH
35212: LD_INT 120
35214: PUSH
35215: LD_INT 30
35217: PUSH
35218: LD_INT 80
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35226: LD_VAR 0 6
35230: PPUSH
35231: CALL_OW 264
35235: PUSH
35236: LD_INT 22
35238: PUSH
35239: EMPTY
35240: LIST
35241: IN
35242: IFFALSE 35263
// points := [ 40 , 1 , 1 ] ;
35244: LD_ADDR_VAR 0 9
35248: PUSH
35249: LD_INT 40
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35263: LD_VAR 0 6
35267: PPUSH
35268: CALL_OW 264
35272: PUSH
35273: LD_INT 29
35275: PUSH
35276: EMPTY
35277: LIST
35278: IN
35279: IFFALSE 35300
// points := [ 70 , 200 , 400 ] ;
35281: LD_ADDR_VAR 0 9
35285: PUSH
35286: LD_INT 70
35288: PUSH
35289: LD_INT 200
35291: PUSH
35292: LD_INT 400
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35300: LD_VAR 0 6
35304: PPUSH
35305: CALL_OW 264
35309: PUSH
35310: LD_INT 14
35312: PUSH
35313: LD_INT 53
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: IN
35320: IFFALSE 35341
// points := [ 40 , 10 , 20 ] ;
35322: LD_ADDR_VAR 0 9
35326: PUSH
35327: LD_INT 40
35329: PUSH
35330: LD_INT 10
35332: PUSH
35333: LD_INT 20
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35341: LD_VAR 0 6
35345: PPUSH
35346: CALL_OW 264
35350: PUSH
35351: LD_INT 9
35353: PUSH
35354: EMPTY
35355: LIST
35356: IN
35357: IFFALSE 35378
// points := [ 5 , 70 , 20 ] ;
35359: LD_ADDR_VAR 0 9
35363: PUSH
35364: LD_INT 5
35366: PUSH
35367: LD_INT 70
35369: PUSH
35370: LD_INT 20
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35378: LD_VAR 0 6
35382: PPUSH
35383: CALL_OW 264
35387: PUSH
35388: LD_INT 10
35390: PUSH
35391: EMPTY
35392: LIST
35393: IN
35394: IFFALSE 35415
// points := [ 35 , 110 , 70 ] ;
35396: LD_ADDR_VAR 0 9
35400: PUSH
35401: LD_INT 35
35403: PUSH
35404: LD_INT 110
35406: PUSH
35407: LD_INT 70
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35415: LD_VAR 0 6
35419: PPUSH
35420: CALL_OW 265
35424: PUSH
35425: LD_INT 25
35427: EQUAL
35428: IFFALSE 35449
// points := [ 80 , 65 , 100 ] ;
35430: LD_ADDR_VAR 0 9
35434: PUSH
35435: LD_INT 80
35437: PUSH
35438: LD_INT 65
35440: PUSH
35441: LD_INT 100
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35449: LD_VAR 0 6
35453: PPUSH
35454: CALL_OW 263
35458: PUSH
35459: LD_INT 1
35461: EQUAL
35462: IFFALSE 35497
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35464: LD_ADDR_VAR 0 10
35468: PUSH
35469: LD_VAR 0 10
35473: PUSH
35474: LD_VAR 0 6
35478: PPUSH
35479: CALL_OW 311
35483: PPUSH
35484: LD_INT 3
35486: PPUSH
35487: CALL_OW 259
35491: PUSH
35492: LD_INT 4
35494: MUL
35495: MUL
35496: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35497: LD_VAR 0 6
35501: PPUSH
35502: CALL_OW 263
35506: PUSH
35507: LD_INT 2
35509: EQUAL
35510: IFFALSE 35561
// begin j := IsControledBy ( i ) ;
35512: LD_ADDR_VAR 0 7
35516: PUSH
35517: LD_VAR 0 6
35521: PPUSH
35522: CALL_OW 312
35526: ST_TO_ADDR
// if j then
35527: LD_VAR 0 7
35531: IFFALSE 35561
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35533: LD_ADDR_VAR 0 10
35537: PUSH
35538: LD_VAR 0 10
35542: PUSH
35543: LD_VAR 0 7
35547: PPUSH
35548: LD_INT 3
35550: PPUSH
35551: CALL_OW 259
35555: PUSH
35556: LD_INT 3
35558: MUL
35559: MUL
35560: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35561: LD_VAR 0 6
35565: PPUSH
35566: CALL_OW 264
35570: PUSH
35571: LD_INT 5
35573: PUSH
35574: LD_INT 6
35576: PUSH
35577: LD_INT 46
35579: PUSH
35580: LD_INT 44
35582: PUSH
35583: LD_INT 47
35585: PUSH
35586: LD_INT 45
35588: PUSH
35589: LD_INT 28
35591: PUSH
35592: LD_INT 7
35594: PUSH
35595: LD_INT 27
35597: PUSH
35598: LD_INT 29
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: IN
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_INT 52
35621: PPUSH
35622: CALL_OW 321
35626: PUSH
35627: LD_INT 2
35629: EQUAL
35630: AND
35631: IFFALSE 35648
// bpoints := bpoints * 1.2 ;
35633: LD_ADDR_VAR 0 10
35637: PUSH
35638: LD_VAR 0 10
35642: PUSH
35643: LD_REAL  1.20000000000000E+0000
35646: MUL
35647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35648: LD_VAR 0 6
35652: PPUSH
35653: CALL_OW 264
35657: PUSH
35658: LD_INT 6
35660: PUSH
35661: LD_INT 46
35663: PUSH
35664: LD_INT 47
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: IN
35672: IFFALSE 35689
// bpoints := bpoints * 1.2 ;
35674: LD_ADDR_VAR 0 10
35678: PUSH
35679: LD_VAR 0 10
35683: PUSH
35684: LD_REAL  1.20000000000000E+0000
35687: MUL
35688: ST_TO_ADDR
// end ; unit_building :
35689: GO 35703
35691: LD_INT 3
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 35702
35699: POP
// ; end ;
35700: GO 35703
35702: POP
// for j = 1 to 3 do
35703: LD_ADDR_VAR 0 7
35707: PUSH
35708: DOUBLE
35709: LD_INT 1
35711: DEC
35712: ST_TO_ADDR
35713: LD_INT 3
35715: PUSH
35716: FOR_TO
35717: IFFALSE 35770
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35719: LD_ADDR_VAR 0 5
35723: PUSH
35724: LD_VAR 0 5
35728: PPUSH
35729: LD_VAR 0 7
35733: PPUSH
35734: LD_VAR 0 5
35738: PUSH
35739: LD_VAR 0 7
35743: ARRAY
35744: PUSH
35745: LD_VAR 0 9
35749: PUSH
35750: LD_VAR 0 7
35754: ARRAY
35755: PUSH
35756: LD_VAR 0 10
35760: MUL
35761: PLUS
35762: PPUSH
35763: CALL_OW 1
35767: ST_TO_ADDR
35768: GO 35716
35770: POP
35771: POP
// end ;
35772: GO 34255
35774: POP
35775: POP
// result := Replace ( result , 4 , tmp ) ;
35776: LD_ADDR_VAR 0 5
35780: PUSH
35781: LD_VAR 0 5
35785: PPUSH
35786: LD_INT 4
35788: PPUSH
35789: LD_VAR 0 8
35793: PPUSH
35794: CALL_OW 1
35798: ST_TO_ADDR
// end ;
35799: LD_VAR 0 5
35803: RET
// export function DangerAtRange ( unit , range ) ; begin
35804: LD_INT 0
35806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35807: LD_ADDR_VAR 0 3
35811: PUSH
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL_OW 255
35821: PPUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL_OW 250
35831: PPUSH
35832: LD_VAR 0 1
35836: PPUSH
35837: CALL_OW 251
35841: PPUSH
35842: LD_VAR 0 2
35846: PPUSH
35847: CALL 34107 0 4
35851: ST_TO_ADDR
// end ;
35852: LD_VAR 0 3
35856: RET
// export function DangerInArea ( side , area ) ; begin
35857: LD_INT 0
35859: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35860: LD_ADDR_VAR 0 3
35864: PUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_INT 81
35872: PUSH
35873: LD_VAR 0 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PPUSH
35882: CALL_OW 70
35886: ST_TO_ADDR
// end ;
35887: LD_VAR 0 3
35891: RET
// export function IsExtension ( b ) ; begin
35892: LD_INT 0
35894: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35895: LD_ADDR_VAR 0 2
35899: PUSH
35900: LD_VAR 0 1
35904: PUSH
35905: LD_INT 23
35907: PUSH
35908: LD_INT 20
35910: PUSH
35911: LD_INT 22
35913: PUSH
35914: LD_INT 17
35916: PUSH
35917: LD_INT 24
35919: PUSH
35920: LD_INT 21
35922: PUSH
35923: LD_INT 19
35925: PUSH
35926: LD_INT 16
35928: PUSH
35929: LD_INT 25
35931: PUSH
35932: LD_INT 18
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: IN
35947: ST_TO_ADDR
// end ;
35948: LD_VAR 0 2
35952: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35953: LD_INT 0
35955: PPUSH
35956: PPUSH
35957: PPUSH
// result := [ ] ;
35958: LD_ADDR_VAR 0 4
35962: PUSH
35963: EMPTY
35964: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35965: LD_ADDR_VAR 0 5
35969: PUSH
35970: LD_VAR 0 2
35974: PPUSH
35975: LD_INT 21
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PPUSH
35985: CALL_OW 70
35989: ST_TO_ADDR
// if not tmp then
35990: LD_VAR 0 5
35994: NOT
35995: IFFALSE 35999
// exit ;
35997: GO 36063
// if checkLink then
35999: LD_VAR 0 3
36003: IFFALSE 36053
// begin for i in tmp do
36005: LD_ADDR_VAR 0 6
36009: PUSH
36010: LD_VAR 0 5
36014: PUSH
36015: FOR_IN
36016: IFFALSE 36051
// if GetBase ( i ) <> base then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 274
36027: PUSH
36028: LD_VAR 0 1
36032: NONEQUAL
36033: IFFALSE 36049
// ComLinkToBase ( base , i ) ;
36035: LD_VAR 0 1
36039: PPUSH
36040: LD_VAR 0 6
36044: PPUSH
36045: CALL_OW 169
36049: GO 36015
36051: POP
36052: POP
// end ; result := tmp ;
36053: LD_ADDR_VAR 0 4
36057: PUSH
36058: LD_VAR 0 5
36062: ST_TO_ADDR
// end ;
36063: LD_VAR 0 4
36067: RET
// export function ComComplete ( units , b ) ; var i ; begin
36068: LD_INT 0
36070: PPUSH
36071: PPUSH
// if not units then
36072: LD_VAR 0 1
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 36171
// for i in units do
36081: LD_ADDR_VAR 0 4
36085: PUSH
36086: LD_VAR 0 1
36090: PUSH
36091: FOR_IN
36092: IFFALSE 36169
// if BuildingStatus ( b ) = bs_build then
36094: LD_VAR 0 2
36098: PPUSH
36099: CALL_OW 461
36103: PUSH
36104: LD_INT 1
36106: EQUAL
36107: IFFALSE 36167
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36109: LD_VAR 0 4
36113: PPUSH
36114: LD_STRING h
36116: PUSH
36117: LD_VAR 0 2
36121: PPUSH
36122: CALL_OW 250
36126: PUSH
36127: LD_VAR 0 2
36131: PPUSH
36132: CALL_OW 251
36136: PUSH
36137: LD_VAR 0 2
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: PPUSH
36163: CALL_OW 446
36167: GO 36091
36169: POP
36170: POP
// end ;
36171: LD_VAR 0 3
36175: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36176: LD_INT 0
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36184: LD_VAR 0 1
36188: NOT
36189: PUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 263
36199: PUSH
36200: LD_INT 2
36202: EQUAL
36203: NOT
36204: OR
36205: IFFALSE 36209
// exit ;
36207: GO 36525
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36209: LD_ADDR_VAR 0 6
36213: PUSH
36214: LD_INT 22
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 255
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 30
36236: PUSH
36237: LD_INT 36
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 34
36246: PUSH
36247: LD_INT 31
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PPUSH
36263: CALL_OW 69
36267: ST_TO_ADDR
// if not tmp then
36268: LD_VAR 0 6
36272: NOT
36273: IFFALSE 36277
// exit ;
36275: GO 36525
// result := [ ] ;
36277: LD_ADDR_VAR 0 2
36281: PUSH
36282: EMPTY
36283: ST_TO_ADDR
// for i in tmp do
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_VAR 0 6
36293: PUSH
36294: FOR_IN
36295: IFFALSE 36366
// begin t := UnitsInside ( i ) ;
36297: LD_ADDR_VAR 0 4
36301: PUSH
36302: LD_VAR 0 3
36306: PPUSH
36307: CALL_OW 313
36311: ST_TO_ADDR
// if t then
36312: LD_VAR 0 4
36316: IFFALSE 36364
// for j in t do
36318: LD_ADDR_VAR 0 7
36322: PUSH
36323: LD_VAR 0 4
36327: PUSH
36328: FOR_IN
36329: IFFALSE 36362
// result := Insert ( result , result + 1 , j ) ;
36331: LD_ADDR_VAR 0 2
36335: PUSH
36336: LD_VAR 0 2
36340: PPUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_INT 1
36348: PLUS
36349: PPUSH
36350: LD_VAR 0 7
36354: PPUSH
36355: CALL_OW 2
36359: ST_TO_ADDR
36360: GO 36328
36362: POP
36363: POP
// end ;
36364: GO 36294
36366: POP
36367: POP
// if not result then
36368: LD_VAR 0 2
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 36525
// mech := result [ 1 ] ;
36377: LD_ADDR_VAR 0 5
36381: PUSH
36382: LD_VAR 0 2
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: ST_TO_ADDR
// if result > 1 then
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 1
36398: GREATER
36399: IFFALSE 36511
// for i = 2 to result do
36401: LD_ADDR_VAR 0 3
36405: PUSH
36406: DOUBLE
36407: LD_INT 2
36409: DEC
36410: ST_TO_ADDR
36411: LD_VAR 0 2
36415: PUSH
36416: FOR_TO
36417: IFFALSE 36509
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36419: LD_ADDR_VAR 0 4
36423: PUSH
36424: LD_VAR 0 2
36428: PUSH
36429: LD_VAR 0 3
36433: ARRAY
36434: PPUSH
36435: LD_INT 3
36437: PPUSH
36438: CALL_OW 259
36442: PUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_VAR 0 3
36452: ARRAY
36453: PPUSH
36454: CALL_OW 432
36458: MINUS
36459: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36460: LD_VAR 0 4
36464: PUSH
36465: LD_VAR 0 5
36469: PPUSH
36470: LD_INT 3
36472: PPUSH
36473: CALL_OW 259
36477: PUSH
36478: LD_VAR 0 5
36482: PPUSH
36483: CALL_OW 432
36487: MINUS
36488: GREATEREQUAL
36489: IFFALSE 36507
// mech := result [ i ] ;
36491: LD_ADDR_VAR 0 5
36495: PUSH
36496: LD_VAR 0 2
36500: PUSH
36501: LD_VAR 0 3
36505: ARRAY
36506: ST_TO_ADDR
// end ;
36507: GO 36416
36509: POP
36510: POP
// ComLinkTo ( vehicle , mech ) ;
36511: LD_VAR 0 1
36515: PPUSH
36516: LD_VAR 0 5
36520: PPUSH
36521: CALL_OW 135
// end ;
36525: LD_VAR 0 2
36529: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36530: LD_INT 0
36532: PPUSH
36533: PPUSH
36534: PPUSH
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
// result := [ ] ;
36545: LD_ADDR_VAR 0 7
36549: PUSH
36550: EMPTY
36551: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36552: LD_VAR 0 1
36556: PPUSH
36557: CALL_OW 266
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: IN
36572: NOT
36573: IFFALSE 36577
// exit ;
36575: GO 38211
// if name then
36577: LD_VAR 0 3
36581: IFFALSE 36597
// SetBName ( base_dep , name ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: LD_VAR 0 3
36592: PPUSH
36593: CALL_OW 500
// base := GetBase ( base_dep ) ;
36597: LD_ADDR_VAR 0 15
36601: PUSH
36602: LD_VAR 0 1
36606: PPUSH
36607: CALL_OW 274
36611: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36612: LD_ADDR_VAR 0 16
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: CALL_OW 255
36626: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36627: LD_ADDR_VAR 0 17
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 248
36641: ST_TO_ADDR
// if sources then
36642: LD_VAR 0 5
36646: IFFALSE 36693
// for i = 1 to 3 do
36648: LD_ADDR_VAR 0 8
36652: PUSH
36653: DOUBLE
36654: LD_INT 1
36656: DEC
36657: ST_TO_ADDR
36658: LD_INT 3
36660: PUSH
36661: FOR_TO
36662: IFFALSE 36691
// AddResourceType ( base , i , sources [ i ] ) ;
36664: LD_VAR 0 15
36668: PPUSH
36669: LD_VAR 0 8
36673: PPUSH
36674: LD_VAR 0 5
36678: PUSH
36679: LD_VAR 0 8
36683: ARRAY
36684: PPUSH
36685: CALL_OW 276
36689: GO 36661
36691: POP
36692: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36693: LD_ADDR_VAR 0 18
36697: PUSH
36698: LD_VAR 0 15
36702: PPUSH
36703: LD_VAR 0 2
36707: PPUSH
36708: LD_INT 1
36710: PPUSH
36711: CALL 35953 0 3
36715: ST_TO_ADDR
// InitHc ;
36716: CALL_OW 19
// InitUc ;
36720: CALL_OW 18
// uc_side := side ;
36724: LD_ADDR_OWVAR 20
36728: PUSH
36729: LD_VAR 0 16
36733: ST_TO_ADDR
// uc_nation := nation ;
36734: LD_ADDR_OWVAR 21
36738: PUSH
36739: LD_VAR 0 17
36743: ST_TO_ADDR
// if buildings then
36744: LD_VAR 0 18
36748: IFFALSE 38070
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36750: LD_ADDR_VAR 0 19
36754: PUSH
36755: LD_VAR 0 18
36759: PPUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 30
36765: PUSH
36766: LD_INT 29
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 30
36775: PUSH
36776: LD_INT 30
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: PPUSH
36788: CALL_OW 72
36792: ST_TO_ADDR
// if tmp then
36793: LD_VAR 0 19
36797: IFFALSE 36845
// for i in tmp do
36799: LD_ADDR_VAR 0 8
36803: PUSH
36804: LD_VAR 0 19
36808: PUSH
36809: FOR_IN
36810: IFFALSE 36843
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36812: LD_VAR 0 8
36816: PPUSH
36817: CALL_OW 250
36821: PPUSH
36822: LD_VAR 0 8
36826: PPUSH
36827: CALL_OW 251
36831: PPUSH
36832: LD_VAR 0 16
36836: PPUSH
36837: CALL_OW 441
36841: GO 36809
36843: POP
36844: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36845: LD_VAR 0 18
36849: PPUSH
36850: LD_INT 2
36852: PUSH
36853: LD_INT 30
36855: PUSH
36856: LD_INT 32
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 30
36865: PUSH
36866: LD_INT 33
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: PPUSH
36878: CALL_OW 72
36882: IFFALSE 36970
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36884: LD_ADDR_VAR 0 8
36888: PUSH
36889: LD_VAR 0 18
36893: PPUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 30
36899: PUSH
36900: LD_INT 32
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 30
36909: PUSH
36910: LD_INT 33
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: PPUSH
36922: CALL_OW 72
36926: PUSH
36927: FOR_IN
36928: IFFALSE 36968
// begin if not GetBWeapon ( i ) then
36930: LD_VAR 0 8
36934: PPUSH
36935: CALL_OW 269
36939: NOT
36940: IFFALSE 36966
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36942: LD_VAR 0 8
36946: PPUSH
36947: LD_VAR 0 8
36951: PPUSH
36952: LD_VAR 0 2
36956: PPUSH
36957: CALL 38216 0 2
36961: PPUSH
36962: CALL_OW 431
// end ;
36966: GO 36927
36968: POP
36969: POP
// end ; for i = 1 to personel do
36970: LD_ADDR_VAR 0 8
36974: PUSH
36975: DOUBLE
36976: LD_INT 1
36978: DEC
36979: ST_TO_ADDR
36980: LD_VAR 0 6
36984: PUSH
36985: FOR_TO
36986: IFFALSE 38050
// begin if i > 4 then
36988: LD_VAR 0 8
36992: PUSH
36993: LD_INT 4
36995: GREATER
36996: IFFALSE 37000
// break ;
36998: GO 38050
// case i of 1 :
37000: LD_VAR 0 8
37004: PUSH
37005: LD_INT 1
37007: DOUBLE
37008: EQUAL
37009: IFTRUE 37013
37011: GO 37093
37013: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37014: LD_ADDR_VAR 0 12
37018: PUSH
37019: LD_VAR 0 18
37023: PPUSH
37024: LD_INT 22
37026: PUSH
37027: LD_VAR 0 16
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 58
37038: PUSH
37039: EMPTY
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: LD_INT 32
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 30
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 30
37067: PUSH
37068: LD_INT 5
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: PPUSH
37086: CALL_OW 72
37090: ST_TO_ADDR
37091: GO 37315
37093: LD_INT 2
37095: DOUBLE
37096: EQUAL
37097: IFTRUE 37101
37099: GO 37163
37101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37102: LD_ADDR_VAR 0 12
37106: PUSH
37107: LD_VAR 0 18
37111: PPUSH
37112: LD_INT 22
37114: PUSH
37115: LD_VAR 0 16
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 30
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 30
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 72
37160: ST_TO_ADDR
37161: GO 37315
37163: LD_INT 3
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37233
37171: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37172: LD_ADDR_VAR 0 12
37176: PUSH
37177: LD_VAR 0 18
37181: PPUSH
37182: LD_INT 22
37184: PUSH
37185: LD_VAR 0 16
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 30
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 30
37209: PUSH
37210: LD_INT 3
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PPUSH
37226: CALL_OW 72
37230: ST_TO_ADDR
37231: GO 37315
37233: LD_INT 4
37235: DOUBLE
37236: EQUAL
37237: IFTRUE 37241
37239: GO 37314
37241: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37242: LD_ADDR_VAR 0 12
37246: PUSH
37247: LD_VAR 0 18
37251: PPUSH
37252: LD_INT 22
37254: PUSH
37255: LD_VAR 0 16
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 30
37269: PUSH
37270: LD_INT 6
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 30
37279: PUSH
37280: LD_INT 7
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 30
37289: PUSH
37290: LD_INT 8
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PPUSH
37307: CALL_OW 72
37311: ST_TO_ADDR
37312: GO 37315
37314: POP
// if i = 1 then
37315: LD_VAR 0 8
37319: PUSH
37320: LD_INT 1
37322: EQUAL
37323: IFFALSE 37434
// begin tmp := [ ] ;
37325: LD_ADDR_VAR 0 19
37329: PUSH
37330: EMPTY
37331: ST_TO_ADDR
// for j in f do
37332: LD_ADDR_VAR 0 9
37336: PUSH
37337: LD_VAR 0 12
37341: PUSH
37342: FOR_IN
37343: IFFALSE 37416
// if GetBType ( j ) = b_bunker then
37345: LD_VAR 0 9
37349: PPUSH
37350: CALL_OW 266
37354: PUSH
37355: LD_INT 32
37357: EQUAL
37358: IFFALSE 37385
// tmp := Insert ( tmp , 1 , j ) else
37360: LD_ADDR_VAR 0 19
37364: PUSH
37365: LD_VAR 0 19
37369: PPUSH
37370: LD_INT 1
37372: PPUSH
37373: LD_VAR 0 9
37377: PPUSH
37378: CALL_OW 2
37382: ST_TO_ADDR
37383: GO 37414
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37385: LD_ADDR_VAR 0 19
37389: PUSH
37390: LD_VAR 0 19
37394: PPUSH
37395: LD_VAR 0 19
37399: PUSH
37400: LD_INT 1
37402: PLUS
37403: PPUSH
37404: LD_VAR 0 9
37408: PPUSH
37409: CALL_OW 2
37413: ST_TO_ADDR
37414: GO 37342
37416: POP
37417: POP
// if tmp then
37418: LD_VAR 0 19
37422: IFFALSE 37434
// f := tmp ;
37424: LD_ADDR_VAR 0 12
37428: PUSH
37429: LD_VAR 0 19
37433: ST_TO_ADDR
// end ; x := personel [ i ] ;
37434: LD_ADDR_VAR 0 13
37438: PUSH
37439: LD_VAR 0 6
37443: PUSH
37444: LD_VAR 0 8
37448: ARRAY
37449: ST_TO_ADDR
// if x = - 1 then
37450: LD_VAR 0 13
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: EQUAL
37459: IFFALSE 37668
// begin for j in f do
37461: LD_ADDR_VAR 0 9
37465: PUSH
37466: LD_VAR 0 12
37470: PUSH
37471: FOR_IN
37472: IFFALSE 37664
// repeat InitHc ;
37474: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37478: LD_VAR 0 9
37482: PPUSH
37483: CALL_OW 266
37487: PUSH
37488: LD_INT 5
37490: EQUAL
37491: IFFALSE 37561
// begin if UnitsInside ( j ) < 3 then
37493: LD_VAR 0 9
37497: PPUSH
37498: CALL_OW 313
37502: PUSH
37503: LD_INT 3
37505: LESS
37506: IFFALSE 37542
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37508: LD_INT 0
37510: PPUSH
37511: LD_INT 5
37513: PUSH
37514: LD_INT 8
37516: PUSH
37517: LD_INT 9
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: PUSH
37525: LD_VAR 0 17
37529: ARRAY
37530: PPUSH
37531: LD_VAR 0 4
37535: PPUSH
37536: CALL_OW 380
37540: GO 37559
// PrepareHuman ( false , i , skill ) ;
37542: LD_INT 0
37544: PPUSH
37545: LD_VAR 0 8
37549: PPUSH
37550: LD_VAR 0 4
37554: PPUSH
37555: CALL_OW 380
// end else
37559: GO 37578
// PrepareHuman ( false , i , skill ) ;
37561: LD_INT 0
37563: PPUSH
37564: LD_VAR 0 8
37568: PPUSH
37569: LD_VAR 0 4
37573: PPUSH
37574: CALL_OW 380
// un := CreateHuman ;
37578: LD_ADDR_VAR 0 14
37582: PUSH
37583: CALL_OW 44
37587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37588: LD_ADDR_VAR 0 7
37592: PUSH
37593: LD_VAR 0 7
37597: PPUSH
37598: LD_INT 1
37600: PPUSH
37601: LD_VAR 0 14
37605: PPUSH
37606: CALL_OW 2
37610: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37611: LD_VAR 0 14
37615: PPUSH
37616: LD_VAR 0 9
37620: PPUSH
37621: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37625: LD_VAR 0 9
37629: PPUSH
37630: CALL_OW 313
37634: PUSH
37635: LD_INT 6
37637: EQUAL
37638: PUSH
37639: LD_VAR 0 9
37643: PPUSH
37644: CALL_OW 266
37648: PUSH
37649: LD_INT 32
37651: PUSH
37652: LD_INT 31
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: IN
37659: OR
37660: IFFALSE 37474
37662: GO 37471
37664: POP
37665: POP
// end else
37666: GO 38048
// for j = 1 to x do
37668: LD_ADDR_VAR 0 9
37672: PUSH
37673: DOUBLE
37674: LD_INT 1
37676: DEC
37677: ST_TO_ADDR
37678: LD_VAR 0 13
37682: PUSH
37683: FOR_TO
37684: IFFALSE 38046
// begin InitHc ;
37686: CALL_OW 19
// if not f then
37690: LD_VAR 0 12
37694: NOT
37695: IFFALSE 37784
// begin PrepareHuman ( false , i , skill ) ;
37697: LD_INT 0
37699: PPUSH
37700: LD_VAR 0 8
37704: PPUSH
37705: LD_VAR 0 4
37709: PPUSH
37710: CALL_OW 380
// un := CreateHuman ;
37714: LD_ADDR_VAR 0 14
37718: PUSH
37719: CALL_OW 44
37723: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37724: LD_ADDR_VAR 0 7
37728: PUSH
37729: LD_VAR 0 7
37733: PPUSH
37734: LD_INT 1
37736: PPUSH
37737: LD_VAR 0 14
37741: PPUSH
37742: CALL_OW 2
37746: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37747: LD_VAR 0 14
37751: PPUSH
37752: LD_VAR 0 1
37756: PPUSH
37757: CALL_OW 250
37761: PPUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL_OW 251
37771: PPUSH
37772: LD_INT 10
37774: PPUSH
37775: LD_INT 0
37777: PPUSH
37778: CALL_OW 50
// continue ;
37782: GO 37683
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37784: LD_VAR 0 12
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: CALL_OW 313
37797: PUSH
37798: LD_VAR 0 12
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PPUSH
37807: CALL_OW 266
37811: PUSH
37812: LD_INT 32
37814: PUSH
37815: LD_INT 31
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: IN
37822: AND
37823: PUSH
37824: LD_VAR 0 12
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PPUSH
37833: CALL_OW 313
37837: PUSH
37838: LD_INT 6
37840: EQUAL
37841: OR
37842: IFFALSE 37862
// f := Delete ( f , 1 ) ;
37844: LD_ADDR_VAR 0 12
37848: PUSH
37849: LD_VAR 0 12
37853: PPUSH
37854: LD_INT 1
37856: PPUSH
37857: CALL_OW 3
37861: ST_TO_ADDR
// if not f then
37862: LD_VAR 0 12
37866: NOT
37867: IFFALSE 37885
// begin x := x + 2 ;
37869: LD_ADDR_VAR 0 13
37873: PUSH
37874: LD_VAR 0 13
37878: PUSH
37879: LD_INT 2
37881: PLUS
37882: ST_TO_ADDR
// continue ;
37883: GO 37683
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37885: LD_VAR 0 12
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: CALL_OW 266
37898: PUSH
37899: LD_INT 5
37901: EQUAL
37902: IFFALSE 37976
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37904: LD_VAR 0 12
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PPUSH
37913: CALL_OW 313
37917: PUSH
37918: LD_INT 3
37920: LESS
37921: IFFALSE 37957
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37923: LD_INT 0
37925: PPUSH
37926: LD_INT 5
37928: PUSH
37929: LD_INT 8
37931: PUSH
37932: LD_INT 9
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: PUSH
37940: LD_VAR 0 17
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 4
37950: PPUSH
37951: CALL_OW 380
37955: GO 37974
// PrepareHuman ( false , i , skill ) ;
37957: LD_INT 0
37959: PPUSH
37960: LD_VAR 0 8
37964: PPUSH
37965: LD_VAR 0 4
37969: PPUSH
37970: CALL_OW 380
// end else
37974: GO 37993
// PrepareHuman ( false , i , skill ) ;
37976: LD_INT 0
37978: PPUSH
37979: LD_VAR 0 8
37983: PPUSH
37984: LD_VAR 0 4
37988: PPUSH
37989: CALL_OW 380
// un := CreateHuman ;
37993: LD_ADDR_VAR 0 14
37997: PUSH
37998: CALL_OW 44
38002: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38003: LD_ADDR_VAR 0 7
38007: PUSH
38008: LD_VAR 0 7
38012: PPUSH
38013: LD_INT 1
38015: PPUSH
38016: LD_VAR 0 14
38020: PPUSH
38021: CALL_OW 2
38025: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38026: LD_VAR 0 14
38030: PPUSH
38031: LD_VAR 0 12
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: PPUSH
38040: CALL_OW 52
// end ;
38044: GO 37683
38046: POP
38047: POP
// end ;
38048: GO 36985
38050: POP
38051: POP
// result := result ^ buildings ;
38052: LD_ADDR_VAR 0 7
38056: PUSH
38057: LD_VAR 0 7
38061: PUSH
38062: LD_VAR 0 18
38066: ADD
38067: ST_TO_ADDR
// end else
38068: GO 38211
// begin for i = 1 to personel do
38070: LD_ADDR_VAR 0 8
38074: PUSH
38075: DOUBLE
38076: LD_INT 1
38078: DEC
38079: ST_TO_ADDR
38080: LD_VAR 0 6
38084: PUSH
38085: FOR_TO
38086: IFFALSE 38209
// begin if i > 4 then
38088: LD_VAR 0 8
38092: PUSH
38093: LD_INT 4
38095: GREATER
38096: IFFALSE 38100
// break ;
38098: GO 38209
// x := personel [ i ] ;
38100: LD_ADDR_VAR 0 13
38104: PUSH
38105: LD_VAR 0 6
38109: PUSH
38110: LD_VAR 0 8
38114: ARRAY
38115: ST_TO_ADDR
// if x = - 1 then
38116: LD_VAR 0 13
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: EQUAL
38125: IFFALSE 38129
// continue ;
38127: GO 38085
// PrepareHuman ( false , i , skill ) ;
38129: LD_INT 0
38131: PPUSH
38132: LD_VAR 0 8
38136: PPUSH
38137: LD_VAR 0 4
38141: PPUSH
38142: CALL_OW 380
// un := CreateHuman ;
38146: LD_ADDR_VAR 0 14
38150: PUSH
38151: CALL_OW 44
38155: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38156: LD_VAR 0 14
38160: PPUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 250
38170: PPUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 251
38180: PPUSH
38181: LD_INT 10
38183: PPUSH
38184: LD_INT 0
38186: PPUSH
38187: CALL_OW 50
// result := result ^ un ;
38191: LD_ADDR_VAR 0 7
38195: PUSH
38196: LD_VAR 0 7
38200: PUSH
38201: LD_VAR 0 14
38205: ADD
38206: ST_TO_ADDR
// end ;
38207: GO 38085
38209: POP
38210: POP
// end ; end ;
38211: LD_VAR 0 7
38215: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
// result := false ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_INT 0
38241: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38242: LD_VAR 0 1
38246: NOT
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 266
38257: PUSH
38258: LD_INT 32
38260: PUSH
38261: LD_INT 33
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: IN
38268: NOT
38269: OR
38270: IFFALSE 38274
// exit ;
38272: GO 39413
// nat := GetNation ( tower ) ;
38274: LD_ADDR_VAR 0 12
38278: PUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 248
38288: ST_TO_ADDR
// side := GetSide ( tower ) ;
38289: LD_ADDR_VAR 0 16
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 255
38303: ST_TO_ADDR
// x := GetX ( tower ) ;
38304: LD_ADDR_VAR 0 10
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 250
38318: ST_TO_ADDR
// y := GetY ( tower ) ;
38319: LD_ADDR_VAR 0 11
38323: PUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 251
38333: ST_TO_ADDR
// if not x or not y then
38334: LD_VAR 0 10
38338: NOT
38339: PUSH
38340: LD_VAR 0 11
38344: NOT
38345: OR
38346: IFFALSE 38350
// exit ;
38348: GO 39413
// weapon := 0 ;
38350: LD_ADDR_VAR 0 18
38354: PUSH
38355: LD_INT 0
38357: ST_TO_ADDR
// fac_list := [ ] ;
38358: LD_ADDR_VAR 0 17
38362: PUSH
38363: EMPTY
38364: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38365: LD_ADDR_VAR 0 6
38369: PUSH
38370: LD_VAR 0 1
38374: PPUSH
38375: CALL_OW 274
38379: PPUSH
38380: LD_VAR 0 2
38384: PPUSH
38385: LD_INT 0
38387: PPUSH
38388: CALL 35953 0 3
38392: PPUSH
38393: LD_INT 30
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PPUSH
38403: CALL_OW 72
38407: ST_TO_ADDR
// if not factories then
38408: LD_VAR 0 6
38412: NOT
38413: IFFALSE 38417
// exit ;
38415: GO 39413
// for i in factories do
38417: LD_ADDR_VAR 0 8
38421: PUSH
38422: LD_VAR 0 6
38426: PUSH
38427: FOR_IN
38428: IFFALSE 38453
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38430: LD_ADDR_VAR 0 17
38434: PUSH
38435: LD_VAR 0 17
38439: PUSH
38440: LD_VAR 0 8
38444: PPUSH
38445: CALL_OW 478
38449: UNION
38450: ST_TO_ADDR
38451: GO 38427
38453: POP
38454: POP
// if not fac_list then
38455: LD_VAR 0 17
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 39413
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38464: LD_ADDR_VAR 0 5
38468: PUSH
38469: LD_INT 4
38471: PUSH
38472: LD_INT 5
38474: PUSH
38475: LD_INT 9
38477: PUSH
38478: LD_INT 10
38480: PUSH
38481: LD_INT 6
38483: PUSH
38484: LD_INT 7
38486: PUSH
38487: LD_INT 11
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 27
38501: PUSH
38502: LD_INT 28
38504: PUSH
38505: LD_INT 26
38507: PUSH
38508: LD_INT 30
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 43
38519: PUSH
38520: LD_INT 44
38522: PUSH
38523: LD_INT 46
38525: PUSH
38526: LD_INT 45
38528: PUSH
38529: LD_INT 47
38531: PUSH
38532: LD_INT 49
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: LD_VAR 0 12
38552: ARRAY
38553: ST_TO_ADDR
// for i in list do
38554: LD_ADDR_VAR 0 8
38558: PUSH
38559: LD_VAR 0 5
38563: PUSH
38564: FOR_IN
38565: IFFALSE 38598
// if not i in fac_list then
38567: LD_VAR 0 8
38571: PUSH
38572: LD_VAR 0 17
38576: IN
38577: NOT
38578: IFFALSE 38596
// list := list diff i ;
38580: LD_ADDR_VAR 0 5
38584: PUSH
38585: LD_VAR 0 5
38589: PUSH
38590: LD_VAR 0 8
38594: DIFF
38595: ST_TO_ADDR
38596: GO 38564
38598: POP
38599: POP
// if not list then
38600: LD_VAR 0 5
38604: NOT
38605: IFFALSE 38609
// exit ;
38607: GO 39413
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38609: LD_VAR 0 12
38613: PUSH
38614: LD_INT 3
38616: EQUAL
38617: PUSH
38618: LD_INT 49
38620: PUSH
38621: LD_VAR 0 5
38625: IN
38626: AND
38627: PUSH
38628: LD_INT 31
38630: PPUSH
38631: LD_VAR 0 16
38635: PPUSH
38636: CALL_OW 321
38640: PUSH
38641: LD_INT 2
38643: EQUAL
38644: AND
38645: IFFALSE 38705
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38647: LD_INT 22
38649: PUSH
38650: LD_VAR 0 16
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 35
38661: PUSH
38662: LD_INT 49
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 91
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_INT 10
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 69
38694: NOT
38695: IFFALSE 38705
// weapon := ru_time_lapser ;
38697: LD_ADDR_VAR 0 18
38701: PUSH
38702: LD_INT 49
38704: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38705: LD_VAR 0 12
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: IN
38720: PUSH
38721: LD_INT 11
38723: PUSH
38724: LD_VAR 0 5
38728: IN
38729: PUSH
38730: LD_INT 30
38732: PUSH
38733: LD_VAR 0 5
38737: IN
38738: OR
38739: AND
38740: PUSH
38741: LD_INT 6
38743: PPUSH
38744: LD_VAR 0 16
38748: PPUSH
38749: CALL_OW 321
38753: PUSH
38754: LD_INT 2
38756: EQUAL
38757: AND
38758: IFFALSE 38923
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38760: LD_INT 22
38762: PUSH
38763: LD_VAR 0 16
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 35
38777: PUSH
38778: LD_INT 11
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 35
38787: PUSH
38788: LD_INT 30
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 91
38802: PUSH
38803: LD_VAR 0 1
38807: PUSH
38808: LD_INT 18
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: PPUSH
38821: CALL_OW 69
38825: NOT
38826: PUSH
38827: LD_INT 22
38829: PUSH
38830: LD_VAR 0 16
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 30
38844: PUSH
38845: LD_INT 32
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 33
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 91
38869: PUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_INT 12
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: PPUSH
38891: CALL_OW 69
38895: PUSH
38896: LD_INT 2
38898: GREATER
38899: AND
38900: IFFALSE 38923
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38902: LD_ADDR_VAR 0 18
38906: PUSH
38907: LD_INT 11
38909: PUSH
38910: LD_INT 30
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_VAR 0 12
38921: ARRAY
38922: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38923: LD_VAR 0 18
38927: NOT
38928: PUSH
38929: LD_INT 40
38931: PPUSH
38932: LD_VAR 0 16
38936: PPUSH
38937: CALL_OW 321
38941: PUSH
38942: LD_INT 2
38944: EQUAL
38945: AND
38946: PUSH
38947: LD_INT 7
38949: PUSH
38950: LD_VAR 0 5
38954: IN
38955: PUSH
38956: LD_INT 28
38958: PUSH
38959: LD_VAR 0 5
38963: IN
38964: OR
38965: PUSH
38966: LD_INT 45
38968: PUSH
38969: LD_VAR 0 5
38973: IN
38974: OR
38975: AND
38976: IFFALSE 39230
// begin hex := GetHexInfo ( x , y ) ;
38978: LD_ADDR_VAR 0 4
38982: PUSH
38983: LD_VAR 0 10
38987: PPUSH
38988: LD_VAR 0 11
38992: PPUSH
38993: CALL_OW 546
38997: ST_TO_ADDR
// if hex [ 1 ] then
38998: LD_VAR 0 4
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: IFFALSE 39010
// exit ;
39008: GO 39413
// height := hex [ 2 ] ;
39010: LD_ADDR_VAR 0 15
39014: PUSH
39015: LD_VAR 0 4
39019: PUSH
39020: LD_INT 2
39022: ARRAY
39023: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39024: LD_ADDR_VAR 0 14
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 5
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: ST_TO_ADDR
// for i in tmp do
39047: LD_ADDR_VAR 0 8
39051: PUSH
39052: LD_VAR 0 14
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39228
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39060: LD_ADDR_VAR 0 9
39064: PUSH
39065: LD_VAR 0 10
39069: PPUSH
39070: LD_VAR 0 8
39074: PPUSH
39075: LD_INT 5
39077: PPUSH
39078: CALL_OW 272
39082: PUSH
39083: LD_VAR 0 11
39087: PPUSH
39088: LD_VAR 0 8
39092: PPUSH
39093: LD_INT 5
39095: PPUSH
39096: CALL_OW 273
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39105: LD_VAR 0 9
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: PPUSH
39114: LD_VAR 0 9
39118: PUSH
39119: LD_INT 2
39121: ARRAY
39122: PPUSH
39123: CALL_OW 488
39127: IFFALSE 39226
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39129: LD_ADDR_VAR 0 4
39133: PUSH
39134: LD_VAR 0 9
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: PPUSH
39143: LD_VAR 0 9
39147: PUSH
39148: LD_INT 2
39150: ARRAY
39151: PPUSH
39152: CALL_OW 546
39156: ST_TO_ADDR
// if hex [ 1 ] then
39157: LD_VAR 0 4
39161: PUSH
39162: LD_INT 1
39164: ARRAY
39165: IFFALSE 39169
// continue ;
39167: GO 39057
// h := hex [ 2 ] ;
39169: LD_ADDR_VAR 0 13
39173: PUSH
39174: LD_VAR 0 4
39178: PUSH
39179: LD_INT 2
39181: ARRAY
39182: ST_TO_ADDR
// if h + 7 < height then
39183: LD_VAR 0 13
39187: PUSH
39188: LD_INT 7
39190: PLUS
39191: PUSH
39192: LD_VAR 0 15
39196: LESS
39197: IFFALSE 39226
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39199: LD_ADDR_VAR 0 18
39203: PUSH
39204: LD_INT 7
39206: PUSH
39207: LD_INT 28
39209: PUSH
39210: LD_INT 45
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: PUSH
39218: LD_VAR 0 12
39222: ARRAY
39223: ST_TO_ADDR
// break ;
39224: GO 39228
// end ; end ; end ;
39226: GO 39057
39228: POP
39229: POP
// end ; if not weapon then
39230: LD_VAR 0 18
39234: NOT
39235: IFFALSE 39295
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39237: LD_ADDR_VAR 0 5
39241: PUSH
39242: LD_VAR 0 5
39246: PUSH
39247: LD_INT 11
39249: PUSH
39250: LD_INT 30
39252: PUSH
39253: LD_INT 49
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: DIFF
39261: ST_TO_ADDR
// if not list then
39262: LD_VAR 0 5
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39413
// weapon := list [ rand ( 1 , list ) ] ;
39271: LD_ADDR_VAR 0 18
39275: PUSH
39276: LD_VAR 0 5
39280: PUSH
39281: LD_INT 1
39283: PPUSH
39284: LD_VAR 0 5
39288: PPUSH
39289: CALL_OW 12
39293: ARRAY
39294: ST_TO_ADDR
// end ; if weapon then
39295: LD_VAR 0 18
39299: IFFALSE 39413
// begin tmp := CostOfWeapon ( weapon ) ;
39301: LD_ADDR_VAR 0 14
39305: PUSH
39306: LD_VAR 0 18
39310: PPUSH
39311: CALL_OW 451
39315: ST_TO_ADDR
// j := GetBase ( tower ) ;
39316: LD_ADDR_VAR 0 9
39320: PUSH
39321: LD_VAR 0 1
39325: PPUSH
39326: CALL_OW 274
39330: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39331: LD_VAR 0 9
39335: PPUSH
39336: LD_INT 1
39338: PPUSH
39339: CALL_OW 275
39343: PUSH
39344: LD_VAR 0 14
39348: PUSH
39349: LD_INT 1
39351: ARRAY
39352: GREATEREQUAL
39353: PUSH
39354: LD_VAR 0 9
39358: PPUSH
39359: LD_INT 2
39361: PPUSH
39362: CALL_OW 275
39366: PUSH
39367: LD_VAR 0 14
39371: PUSH
39372: LD_INT 2
39374: ARRAY
39375: GREATEREQUAL
39376: AND
39377: PUSH
39378: LD_VAR 0 9
39382: PPUSH
39383: LD_INT 3
39385: PPUSH
39386: CALL_OW 275
39390: PUSH
39391: LD_VAR 0 14
39395: PUSH
39396: LD_INT 3
39398: ARRAY
39399: GREATEREQUAL
39400: AND
39401: IFFALSE 39413
// result := weapon ;
39403: LD_ADDR_VAR 0 3
39407: PUSH
39408: LD_VAR 0 18
39412: ST_TO_ADDR
// end ; end ;
39413: LD_VAR 0 3
39417: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39418: LD_INT 0
39420: PPUSH
39421: PPUSH
// result := true ;
39422: LD_ADDR_VAR 0 3
39426: PUSH
39427: LD_INT 1
39429: ST_TO_ADDR
// if array1 = array2 then
39430: LD_VAR 0 1
39434: PUSH
39435: LD_VAR 0 2
39439: EQUAL
39440: IFFALSE 39500
// begin for i = 1 to array1 do
39442: LD_ADDR_VAR 0 4
39446: PUSH
39447: DOUBLE
39448: LD_INT 1
39450: DEC
39451: ST_TO_ADDR
39452: LD_VAR 0 1
39456: PUSH
39457: FOR_TO
39458: IFFALSE 39496
// if array1 [ i ] <> array2 [ i ] then
39460: LD_VAR 0 1
39464: PUSH
39465: LD_VAR 0 4
39469: ARRAY
39470: PUSH
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 4
39480: ARRAY
39481: NONEQUAL
39482: IFFALSE 39494
// begin result := false ;
39484: LD_ADDR_VAR 0 3
39488: PUSH
39489: LD_INT 0
39491: ST_TO_ADDR
// break ;
39492: GO 39496
// end ;
39494: GO 39457
39496: POP
39497: POP
// end else
39498: GO 39508
// result := false ;
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_INT 0
39507: ST_TO_ADDR
// end ;
39508: LD_VAR 0 3
39512: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// if not array1 or not array2 then
39517: LD_VAR 0 1
39521: NOT
39522: PUSH
39523: LD_VAR 0 2
39527: NOT
39528: OR
39529: IFFALSE 39533
// exit ;
39531: GO 39597
// result := true ;
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_INT 1
39540: ST_TO_ADDR
// for i = 1 to array1 do
39541: LD_ADDR_VAR 0 4
39545: PUSH
39546: DOUBLE
39547: LD_INT 1
39549: DEC
39550: ST_TO_ADDR
39551: LD_VAR 0 1
39555: PUSH
39556: FOR_TO
39557: IFFALSE 39595
// if array1 [ i ] <> array2 [ i ] then
39559: LD_VAR 0 1
39563: PUSH
39564: LD_VAR 0 4
39568: ARRAY
39569: PUSH
39570: LD_VAR 0 2
39574: PUSH
39575: LD_VAR 0 4
39579: ARRAY
39580: NONEQUAL
39581: IFFALSE 39593
// begin result := false ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_INT 0
39590: ST_TO_ADDR
// break ;
39591: GO 39595
// end ;
39593: GO 39556
39595: POP
39596: POP
// end ;
39597: LD_VAR 0 3
39601: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39602: LD_INT 0
39604: PPUSH
39605: PPUSH
39606: PPUSH
// pom := GetBase ( fac ) ;
39607: LD_ADDR_VAR 0 5
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 274
39621: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39622: LD_ADDR_VAR 0 4
39626: PUSH
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 1
39634: ARRAY
39635: PPUSH
39636: LD_VAR 0 2
39640: PUSH
39641: LD_INT 2
39643: ARRAY
39644: PPUSH
39645: LD_VAR 0 2
39649: PUSH
39650: LD_INT 3
39652: ARRAY
39653: PPUSH
39654: LD_VAR 0 2
39658: PUSH
39659: LD_INT 4
39661: ARRAY
39662: PPUSH
39663: CALL_OW 449
39667: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: LD_INT 1
39680: PPUSH
39681: CALL_OW 275
39685: PUSH
39686: LD_VAR 0 4
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: GREATEREQUAL
39695: PUSH
39696: LD_VAR 0 5
39700: PPUSH
39701: LD_INT 2
39703: PPUSH
39704: CALL_OW 275
39708: PUSH
39709: LD_VAR 0 4
39713: PUSH
39714: LD_INT 2
39716: ARRAY
39717: GREATEREQUAL
39718: AND
39719: PUSH
39720: LD_VAR 0 5
39724: PPUSH
39725: LD_INT 3
39727: PPUSH
39728: CALL_OW 275
39732: PUSH
39733: LD_VAR 0 4
39737: PUSH
39738: LD_INT 3
39740: ARRAY
39741: GREATEREQUAL
39742: AND
39743: ST_TO_ADDR
// end ;
39744: LD_VAR 0 3
39748: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39749: LD_INT 0
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
// pom := GetBase ( building ) ;
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 274
39769: ST_TO_ADDR
// if not pom then
39770: LD_VAR 0 3
39774: NOT
39775: IFFALSE 39779
// exit ;
39777: GO 39949
// btype := GetBType ( building ) ;
39779: LD_ADDR_VAR 0 5
39783: PUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 266
39793: ST_TO_ADDR
// if btype = b_armoury then
39794: LD_VAR 0 5
39798: PUSH
39799: LD_INT 4
39801: EQUAL
39802: IFFALSE 39812
// btype := b_barracks ;
39804: LD_ADDR_VAR 0 5
39808: PUSH
39809: LD_INT 5
39811: ST_TO_ADDR
// if btype = b_depot then
39812: LD_VAR 0 5
39816: PUSH
39817: LD_INT 0
39819: EQUAL
39820: IFFALSE 39830
// btype := b_warehouse ;
39822: LD_ADDR_VAR 0 5
39826: PUSH
39827: LD_INT 1
39829: ST_TO_ADDR
// if btype = b_workshop then
39830: LD_VAR 0 5
39834: PUSH
39835: LD_INT 2
39837: EQUAL
39838: IFFALSE 39848
// btype := b_factory ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_INT 3
39847: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39848: LD_ADDR_VAR 0 4
39852: PUSH
39853: LD_VAR 0 5
39857: PPUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 248
39867: PPUSH
39868: CALL_OW 450
39872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39873: LD_ADDR_VAR 0 2
39877: PUSH
39878: LD_VAR 0 3
39882: PPUSH
39883: LD_INT 1
39885: PPUSH
39886: CALL_OW 275
39890: PUSH
39891: LD_VAR 0 4
39895: PUSH
39896: LD_INT 1
39898: ARRAY
39899: GREATEREQUAL
39900: PUSH
39901: LD_VAR 0 3
39905: PPUSH
39906: LD_INT 2
39908: PPUSH
39909: CALL_OW 275
39913: PUSH
39914: LD_VAR 0 4
39918: PUSH
39919: LD_INT 2
39921: ARRAY
39922: GREATEREQUAL
39923: AND
39924: PUSH
39925: LD_VAR 0 3
39929: PPUSH
39930: LD_INT 3
39932: PPUSH
39933: CALL_OW 275
39937: PUSH
39938: LD_VAR 0 4
39942: PUSH
39943: LD_INT 3
39945: ARRAY
39946: GREATEREQUAL
39947: AND
39948: ST_TO_ADDR
// end ;
39949: LD_VAR 0 2
39953: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39954: LD_INT 0
39956: PPUSH
39957: PPUSH
39958: PPUSH
// pom := GetBase ( building ) ;
39959: LD_ADDR_VAR 0 4
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 274
39973: ST_TO_ADDR
// if not pom then
39974: LD_VAR 0 4
39978: NOT
39979: IFFALSE 39983
// exit ;
39981: GO 40084
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39983: LD_ADDR_VAR 0 5
39987: PUSH
39988: LD_VAR 0 2
39992: PPUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 248
40002: PPUSH
40003: CALL_OW 450
40007: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40008: LD_ADDR_VAR 0 3
40012: PUSH
40013: LD_VAR 0 4
40017: PPUSH
40018: LD_INT 1
40020: PPUSH
40021: CALL_OW 275
40025: PUSH
40026: LD_VAR 0 5
40030: PUSH
40031: LD_INT 1
40033: ARRAY
40034: GREATEREQUAL
40035: PUSH
40036: LD_VAR 0 4
40040: PPUSH
40041: LD_INT 2
40043: PPUSH
40044: CALL_OW 275
40048: PUSH
40049: LD_VAR 0 5
40053: PUSH
40054: LD_INT 2
40056: ARRAY
40057: GREATEREQUAL
40058: AND
40059: PUSH
40060: LD_VAR 0 4
40064: PPUSH
40065: LD_INT 3
40067: PPUSH
40068: CALL_OW 275
40072: PUSH
40073: LD_VAR 0 5
40077: PUSH
40078: LD_INT 3
40080: ARRAY
40081: GREATEREQUAL
40082: AND
40083: ST_TO_ADDR
// end ;
40084: LD_VAR 0 3
40088: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40089: LD_INT 0
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
40101: PPUSH
// result := false ;
40102: LD_ADDR_VAR 0 8
40106: PUSH
40107: LD_INT 0
40109: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40110: LD_VAR 0 5
40114: NOT
40115: PUSH
40116: LD_VAR 0 1
40120: NOT
40121: OR
40122: PUSH
40123: LD_VAR 0 2
40127: NOT
40128: OR
40129: PUSH
40130: LD_VAR 0 3
40134: NOT
40135: OR
40136: IFFALSE 40140
// exit ;
40138: GO 40954
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40140: LD_ADDR_VAR 0 14
40144: PUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: LD_VAR 0 2
40154: PPUSH
40155: LD_VAR 0 3
40159: PPUSH
40160: LD_VAR 0 4
40164: PPUSH
40165: LD_VAR 0 5
40169: PUSH
40170: LD_INT 1
40172: ARRAY
40173: PPUSH
40174: CALL_OW 248
40178: PPUSH
40179: LD_INT 0
40181: PPUSH
40182: CALL 41791 0 6
40186: ST_TO_ADDR
// if not hexes then
40187: LD_VAR 0 14
40191: NOT
40192: IFFALSE 40196
// exit ;
40194: GO 40954
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40196: LD_ADDR_VAR 0 17
40200: PUSH
40201: LD_VAR 0 5
40205: PPUSH
40206: LD_INT 22
40208: PUSH
40209: LD_VAR 0 13
40213: PPUSH
40214: CALL_OW 255
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 30
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 30
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PPUSH
40255: CALL_OW 72
40259: ST_TO_ADDR
// for i = 1 to hexes do
40260: LD_ADDR_VAR 0 9
40264: PUSH
40265: DOUBLE
40266: LD_INT 1
40268: DEC
40269: ST_TO_ADDR
40270: LD_VAR 0 14
40274: PUSH
40275: FOR_TO
40276: IFFALSE 40952
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40278: LD_ADDR_VAR 0 13
40282: PUSH
40283: LD_VAR 0 14
40287: PUSH
40288: LD_VAR 0 9
40292: ARRAY
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: PPUSH
40298: LD_VAR 0 14
40302: PUSH
40303: LD_VAR 0 9
40307: ARRAY
40308: PUSH
40309: LD_INT 2
40311: ARRAY
40312: PPUSH
40313: CALL_OW 428
40317: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40318: LD_VAR 0 14
40322: PUSH
40323: LD_VAR 0 9
40327: ARRAY
40328: PUSH
40329: LD_INT 1
40331: ARRAY
40332: PPUSH
40333: LD_VAR 0 14
40337: PUSH
40338: LD_VAR 0 9
40342: ARRAY
40343: PUSH
40344: LD_INT 2
40346: ARRAY
40347: PPUSH
40348: CALL_OW 351
40352: PUSH
40353: LD_VAR 0 14
40357: PUSH
40358: LD_VAR 0 9
40362: ARRAY
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PPUSH
40368: LD_VAR 0 14
40372: PUSH
40373: LD_VAR 0 9
40377: ARRAY
40378: PUSH
40379: LD_INT 2
40381: ARRAY
40382: PPUSH
40383: CALL_OW 488
40387: NOT
40388: OR
40389: PUSH
40390: LD_VAR 0 13
40394: PPUSH
40395: CALL_OW 247
40399: PUSH
40400: LD_INT 3
40402: EQUAL
40403: OR
40404: IFFALSE 40410
// exit ;
40406: POP
40407: POP
40408: GO 40954
// if not tmp then
40410: LD_VAR 0 13
40414: NOT
40415: IFFALSE 40419
// continue ;
40417: GO 40275
// result := true ;
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: LD_INT 1
40426: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40427: LD_VAR 0 6
40431: PUSH
40432: LD_VAR 0 13
40436: PPUSH
40437: CALL_OW 247
40441: PUSH
40442: LD_INT 2
40444: EQUAL
40445: AND
40446: PUSH
40447: LD_VAR 0 13
40451: PPUSH
40452: CALL_OW 263
40456: PUSH
40457: LD_INT 1
40459: EQUAL
40460: AND
40461: IFFALSE 40625
// begin if IsDrivenBy ( tmp ) then
40463: LD_VAR 0 13
40467: PPUSH
40468: CALL_OW 311
40472: IFFALSE 40476
// continue ;
40474: GO 40275
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40476: LD_VAR 0 6
40480: PPUSH
40481: LD_INT 3
40483: PUSH
40484: LD_INT 60
40486: PUSH
40487: EMPTY
40488: LIST
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 55
40499: PUSH
40500: EMPTY
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PPUSH
40511: CALL_OW 72
40515: IFFALSE 40623
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40517: LD_ADDR_VAR 0 18
40521: PUSH
40522: LD_VAR 0 6
40526: PPUSH
40527: LD_INT 3
40529: PUSH
40530: LD_INT 60
40532: PUSH
40533: EMPTY
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 3
40542: PUSH
40543: LD_INT 55
40545: PUSH
40546: EMPTY
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PPUSH
40557: CALL_OW 72
40561: PUSH
40562: LD_INT 1
40564: ARRAY
40565: ST_TO_ADDR
// if IsInUnit ( driver ) then
40566: LD_VAR 0 18
40570: PPUSH
40571: CALL_OW 310
40575: IFFALSE 40586
// ComExit ( driver ) ;
40577: LD_VAR 0 18
40581: PPUSH
40582: CALL 64975 0 1
// AddComEnterUnit ( driver , tmp ) ;
40586: LD_VAR 0 18
40590: PPUSH
40591: LD_VAR 0 13
40595: PPUSH
40596: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40600: LD_VAR 0 18
40604: PPUSH
40605: LD_VAR 0 7
40609: PPUSH
40610: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40614: LD_VAR 0 18
40618: PPUSH
40619: CALL_OW 181
// end ; continue ;
40623: GO 40275
// end ; if not cleaners or not tmp in cleaners then
40625: LD_VAR 0 6
40629: NOT
40630: PUSH
40631: LD_VAR 0 13
40635: PUSH
40636: LD_VAR 0 6
40640: IN
40641: NOT
40642: OR
40643: IFFALSE 40950
// begin if dep then
40645: LD_VAR 0 17
40649: IFFALSE 40785
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40651: LD_ADDR_VAR 0 16
40655: PUSH
40656: LD_VAR 0 17
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: PPUSH
40665: CALL_OW 250
40669: PPUSH
40670: LD_VAR 0 17
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: CALL_OW 254
40683: PPUSH
40684: LD_INT 5
40686: PPUSH
40687: CALL_OW 272
40691: PUSH
40692: LD_VAR 0 17
40696: PUSH
40697: LD_INT 1
40699: ARRAY
40700: PPUSH
40701: CALL_OW 251
40705: PPUSH
40706: LD_VAR 0 17
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PPUSH
40715: CALL_OW 254
40719: PPUSH
40720: LD_INT 5
40722: PPUSH
40723: CALL_OW 273
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40732: LD_VAR 0 16
40736: PUSH
40737: LD_INT 1
40739: ARRAY
40740: PPUSH
40741: LD_VAR 0 16
40745: PUSH
40746: LD_INT 2
40748: ARRAY
40749: PPUSH
40750: CALL_OW 488
40754: IFFALSE 40785
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40756: LD_VAR 0 13
40760: PPUSH
40761: LD_VAR 0 16
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 16
40774: PUSH
40775: LD_INT 2
40777: ARRAY
40778: PPUSH
40779: CALL_OW 111
// continue ;
40783: GO 40275
// end ; end ; r := GetDir ( tmp ) ;
40785: LD_ADDR_VAR 0 15
40789: PUSH
40790: LD_VAR 0 13
40794: PPUSH
40795: CALL_OW 254
40799: ST_TO_ADDR
// if r = 5 then
40800: LD_VAR 0 15
40804: PUSH
40805: LD_INT 5
40807: EQUAL
40808: IFFALSE 40818
// r := 0 ;
40810: LD_ADDR_VAR 0 15
40814: PUSH
40815: LD_INT 0
40817: ST_TO_ADDR
// for j = r to 5 do
40818: LD_ADDR_VAR 0 10
40822: PUSH
40823: DOUBLE
40824: LD_VAR 0 15
40828: DEC
40829: ST_TO_ADDR
40830: LD_INT 5
40832: PUSH
40833: FOR_TO
40834: IFFALSE 40948
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40836: LD_ADDR_VAR 0 11
40840: PUSH
40841: LD_VAR 0 13
40845: PPUSH
40846: CALL_OW 250
40850: PPUSH
40851: LD_VAR 0 10
40855: PPUSH
40856: LD_INT 2
40858: PPUSH
40859: CALL_OW 272
40863: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40864: LD_ADDR_VAR 0 12
40868: PUSH
40869: LD_VAR 0 13
40873: PPUSH
40874: CALL_OW 251
40878: PPUSH
40879: LD_VAR 0 10
40883: PPUSH
40884: LD_INT 2
40886: PPUSH
40887: CALL_OW 273
40891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40892: LD_VAR 0 11
40896: PPUSH
40897: LD_VAR 0 12
40901: PPUSH
40902: CALL_OW 488
40906: PUSH
40907: LD_VAR 0 11
40911: PPUSH
40912: LD_VAR 0 12
40916: PPUSH
40917: CALL_OW 428
40921: NOT
40922: AND
40923: IFFALSE 40946
// begin ComMoveXY ( tmp , _x , _y ) ;
40925: LD_VAR 0 13
40929: PPUSH
40930: LD_VAR 0 11
40934: PPUSH
40935: LD_VAR 0 12
40939: PPUSH
40940: CALL_OW 111
// break ;
40944: GO 40948
// end ; end ;
40946: GO 40833
40948: POP
40949: POP
// end ; end ;
40950: GO 40275
40952: POP
40953: POP
// end ;
40954: LD_VAR 0 8
40958: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40959: LD_INT 0
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
// result := false ;
40971: LD_ADDR_VAR 0 6
40975: PUSH
40976: LD_INT 0
40978: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40979: LD_VAR 0 1
40983: NOT
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 266
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: IN
41005: NOT
41006: OR
41007: PUSH
41008: LD_VAR 0 2
41012: NOT
41013: OR
41014: PUSH
41015: LD_VAR 0 5
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: LD_INT 4
41034: PUSH
41035: LD_INT 5
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: IN
41046: NOT
41047: OR
41048: PUSH
41049: LD_VAR 0 3
41053: PPUSH
41054: LD_VAR 0 4
41058: PPUSH
41059: CALL_OW 488
41063: NOT
41064: OR
41065: IFFALSE 41069
// exit ;
41067: GO 41786
// pom := GetBase ( depot ) ;
41069: LD_ADDR_VAR 0 10
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 274
41083: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41084: LD_ADDR_VAR 0 11
41088: PUSH
41089: LD_VAR 0 2
41093: PPUSH
41094: LD_VAR 0 1
41098: PPUSH
41099: CALL_OW 248
41103: PPUSH
41104: CALL_OW 450
41108: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41109: LD_VAR 0 10
41113: PPUSH
41114: LD_INT 1
41116: PPUSH
41117: CALL_OW 275
41121: PUSH
41122: LD_VAR 0 11
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: GREATEREQUAL
41131: PUSH
41132: LD_VAR 0 10
41136: PPUSH
41137: LD_INT 2
41139: PPUSH
41140: CALL_OW 275
41144: PUSH
41145: LD_VAR 0 11
41149: PUSH
41150: LD_INT 2
41152: ARRAY
41153: GREATEREQUAL
41154: AND
41155: PUSH
41156: LD_VAR 0 10
41160: PPUSH
41161: LD_INT 3
41163: PPUSH
41164: CALL_OW 275
41168: PUSH
41169: LD_VAR 0 11
41173: PUSH
41174: LD_INT 3
41176: ARRAY
41177: GREATEREQUAL
41178: AND
41179: NOT
41180: IFFALSE 41184
// exit ;
41182: GO 41786
// if GetBType ( depot ) = b_depot then
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 266
41193: PUSH
41194: LD_INT 0
41196: EQUAL
41197: IFFALSE 41209
// dist := 28 else
41199: LD_ADDR_VAR 0 14
41203: PUSH
41204: LD_INT 28
41206: ST_TO_ADDR
41207: GO 41217
// dist := 36 ;
41209: LD_ADDR_VAR 0 14
41213: PUSH
41214: LD_INT 36
41216: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41217: LD_VAR 0 1
41221: PPUSH
41222: LD_VAR 0 3
41226: PPUSH
41227: LD_VAR 0 4
41231: PPUSH
41232: CALL_OW 297
41236: PUSH
41237: LD_VAR 0 14
41241: GREATER
41242: IFFALSE 41246
// exit ;
41244: GO 41786
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41246: LD_ADDR_VAR 0 12
41250: PUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: LD_VAR 0 3
41260: PPUSH
41261: LD_VAR 0 4
41265: PPUSH
41266: LD_VAR 0 5
41270: PPUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: CALL_OW 248
41280: PPUSH
41281: LD_INT 0
41283: PPUSH
41284: CALL 41791 0 6
41288: ST_TO_ADDR
// if not hexes then
41289: LD_VAR 0 12
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41786
// hex := GetHexInfo ( x , y ) ;
41298: LD_ADDR_VAR 0 15
41302: PUSH
41303: LD_VAR 0 3
41307: PPUSH
41308: LD_VAR 0 4
41312: PPUSH
41313: CALL_OW 546
41317: ST_TO_ADDR
// if hex [ 1 ] then
41318: LD_VAR 0 15
41322: PUSH
41323: LD_INT 1
41325: ARRAY
41326: IFFALSE 41330
// exit ;
41328: GO 41786
// height := hex [ 2 ] ;
41330: LD_ADDR_VAR 0 13
41334: PUSH
41335: LD_VAR 0 15
41339: PUSH
41340: LD_INT 2
41342: ARRAY
41343: ST_TO_ADDR
// for i = 1 to hexes do
41344: LD_ADDR_VAR 0 7
41348: PUSH
41349: DOUBLE
41350: LD_INT 1
41352: DEC
41353: ST_TO_ADDR
41354: LD_VAR 0 12
41358: PUSH
41359: FOR_TO
41360: IFFALSE 41690
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41362: LD_VAR 0 12
41366: PUSH
41367: LD_VAR 0 7
41371: ARRAY
41372: PUSH
41373: LD_INT 1
41375: ARRAY
41376: PPUSH
41377: LD_VAR 0 12
41381: PUSH
41382: LD_VAR 0 7
41386: ARRAY
41387: PUSH
41388: LD_INT 2
41390: ARRAY
41391: PPUSH
41392: CALL_OW 488
41396: NOT
41397: PUSH
41398: LD_VAR 0 12
41402: PUSH
41403: LD_VAR 0 7
41407: ARRAY
41408: PUSH
41409: LD_INT 1
41411: ARRAY
41412: PPUSH
41413: LD_VAR 0 12
41417: PUSH
41418: LD_VAR 0 7
41422: ARRAY
41423: PUSH
41424: LD_INT 2
41426: ARRAY
41427: PPUSH
41428: CALL_OW 428
41432: PUSH
41433: LD_INT 0
41435: GREATER
41436: OR
41437: PUSH
41438: LD_VAR 0 12
41442: PUSH
41443: LD_VAR 0 7
41447: ARRAY
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: PPUSH
41453: LD_VAR 0 12
41457: PUSH
41458: LD_VAR 0 7
41462: ARRAY
41463: PUSH
41464: LD_INT 2
41466: ARRAY
41467: PPUSH
41468: CALL_OW 351
41472: OR
41473: IFFALSE 41479
// exit ;
41475: POP
41476: POP
41477: GO 41786
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41479: LD_ADDR_VAR 0 8
41483: PUSH
41484: LD_VAR 0 12
41488: PUSH
41489: LD_VAR 0 7
41493: ARRAY
41494: PUSH
41495: LD_INT 1
41497: ARRAY
41498: PPUSH
41499: LD_VAR 0 12
41503: PUSH
41504: LD_VAR 0 7
41508: ARRAY
41509: PUSH
41510: LD_INT 2
41512: ARRAY
41513: PPUSH
41514: CALL_OW 546
41518: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41519: LD_VAR 0 8
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: PUSH
41528: LD_VAR 0 8
41532: PUSH
41533: LD_INT 2
41535: ARRAY
41536: PUSH
41537: LD_VAR 0 13
41541: PUSH
41542: LD_INT 2
41544: PLUS
41545: GREATER
41546: OR
41547: PUSH
41548: LD_VAR 0 8
41552: PUSH
41553: LD_INT 2
41555: ARRAY
41556: PUSH
41557: LD_VAR 0 13
41561: PUSH
41562: LD_INT 2
41564: MINUS
41565: LESS
41566: OR
41567: PUSH
41568: LD_VAR 0 8
41572: PUSH
41573: LD_INT 3
41575: ARRAY
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 8
41582: PUSH
41583: LD_INT 9
41585: PUSH
41586: LD_INT 10
41588: PUSH
41589: LD_INT 11
41591: PUSH
41592: LD_INT 12
41594: PUSH
41595: LD_INT 13
41597: PUSH
41598: LD_INT 16
41600: PUSH
41601: LD_INT 17
41603: PUSH
41604: LD_INT 18
41606: PUSH
41607: LD_INT 19
41609: PUSH
41610: LD_INT 20
41612: PUSH
41613: LD_INT 21
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: IN
41631: NOT
41632: OR
41633: PUSH
41634: LD_VAR 0 8
41638: PUSH
41639: LD_INT 5
41641: ARRAY
41642: NOT
41643: OR
41644: PUSH
41645: LD_VAR 0 8
41649: PUSH
41650: LD_INT 6
41652: ARRAY
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 7
41662: PUSH
41663: LD_INT 9
41665: PUSH
41666: LD_INT 10
41668: PUSH
41669: LD_INT 11
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: IN
41680: NOT
41681: OR
41682: IFFALSE 41688
// exit ;
41684: POP
41685: POP
41686: GO 41786
// end ;
41688: GO 41359
41690: POP
41691: POP
// side := GetSide ( depot ) ;
41692: LD_ADDR_VAR 0 9
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 255
41706: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41707: LD_VAR 0 9
41711: PPUSH
41712: LD_VAR 0 3
41716: PPUSH
41717: LD_VAR 0 4
41721: PPUSH
41722: LD_INT 20
41724: PPUSH
41725: CALL 34107 0 4
41729: PUSH
41730: LD_INT 4
41732: ARRAY
41733: IFFALSE 41737
// exit ;
41735: GO 41786
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41737: LD_VAR 0 2
41741: PUSH
41742: LD_INT 29
41744: PUSH
41745: LD_INT 30
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: IN
41752: PUSH
41753: LD_VAR 0 3
41757: PPUSH
41758: LD_VAR 0 4
41762: PPUSH
41763: LD_VAR 0 9
41767: PPUSH
41768: CALL_OW 440
41772: NOT
41773: AND
41774: IFFALSE 41778
// exit ;
41776: GO 41786
// result := true ;
41778: LD_ADDR_VAR 0 6
41782: PUSH
41783: LD_INT 1
41785: ST_TO_ADDR
// end ;
41786: LD_VAR 0 6
41790: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41791: LD_INT 0
41793: PPUSH
41794: PPUSH
41795: PPUSH
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
41813: PPUSH
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
// result = [ ] ;
41851: LD_ADDR_VAR 0 7
41855: PUSH
41856: EMPTY
41857: ST_TO_ADDR
// temp_list = [ ] ;
41858: LD_ADDR_VAR 0 9
41862: PUSH
41863: EMPTY
41864: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41865: LD_VAR 0 4
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 4
41884: PUSH
41885: LD_INT 5
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: IN
41896: NOT
41897: PUSH
41898: LD_VAR 0 1
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: IN
41913: PUSH
41914: LD_VAR 0 5
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: IN
41933: NOT
41934: AND
41935: OR
41936: IFFALSE 41940
// exit ;
41938: GO 60331
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41940: LD_VAR 0 1
41944: PUSH
41945: LD_INT 6
41947: PUSH
41948: LD_INT 7
41950: PUSH
41951: LD_INT 8
41953: PUSH
41954: LD_INT 13
41956: PUSH
41957: LD_INT 12
41959: PUSH
41960: LD_INT 15
41962: PUSH
41963: LD_INT 11
41965: PUSH
41966: LD_INT 14
41968: PUSH
41969: LD_INT 10
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: IN
41983: IFFALSE 41993
// btype = b_lab ;
41985: LD_ADDR_VAR 0 1
41989: PUSH
41990: LD_INT 6
41992: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41993: LD_VAR 0 6
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: IN
42012: NOT
42013: PUSH
42014: LD_VAR 0 1
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: LD_INT 6
42033: PUSH
42034: LD_INT 36
42036: PUSH
42037: LD_INT 4
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: LD_INT 31
42045: PUSH
42046: LD_INT 32
42048: PUSH
42049: LD_INT 33
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: IN
42065: NOT
42066: PUSH
42067: LD_VAR 0 6
42071: PUSH
42072: LD_INT 1
42074: EQUAL
42075: AND
42076: OR
42077: PUSH
42078: LD_VAR 0 1
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: IN
42093: NOT
42094: PUSH
42095: LD_VAR 0 6
42099: PUSH
42100: LD_INT 2
42102: EQUAL
42103: AND
42104: OR
42105: IFFALSE 42115
// mode = 0 ;
42107: LD_ADDR_VAR 0 6
42111: PUSH
42112: LD_INT 0
42114: ST_TO_ADDR
// case mode of 0 :
42115: LD_VAR 0 6
42119: PUSH
42120: LD_INT 0
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42128
42126: GO 53581
42128: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42129: LD_ADDR_VAR 0 11
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42322: LD_ADDR_VAR 0 12
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 3
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42518: LD_ADDR_VAR 0 13
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 3
42677: NEG
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42717: LD_ADDR_VAR 0 14
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42913: LD_ADDR_VAR 0 15
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43106: LD_ADDR_VAR 0 16
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43299: LD_ADDR_VAR 0 17
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43529: LD_ADDR_VAR 0 18
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43759: LD_ADDR_VAR 0 19
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43989: LD_ADDR_VAR 0 20
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44219: LD_ADDR_VAR 0 21
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44449: LD_ADDR_VAR 0 22
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44679: LD_ADDR_VAR 0 23
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44959: LD_ADDR_VAR 0 24
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45235: LD_ADDR_VAR 0 25
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45509: LD_ADDR_VAR 0 26
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45785: LD_ADDR_VAR 0 27
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46065: LD_ADDR_VAR 0 28
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46347: LD_ADDR_VAR 0 29
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46626: LD_ADDR_VAR 0 30
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46904: LD_ADDR_VAR 0 31
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47182: LD_ADDR_VAR 0 32
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47460: LD_ADDR_VAR 0 33
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47739: LD_ADDR_VAR 0 34
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48019: LD_ADDR_VAR 0 35
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48131: LD_ADDR_VAR 0 36
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48243: LD_ADDR_VAR 0 37
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48355: LD_ADDR_VAR 0 38
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48467: LD_ADDR_VAR 0 39
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48579: LD_ADDR_VAR 0 40
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48691: LD_ADDR_VAR 0 41
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49041: LD_ADDR_VAR 0 42
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: NEG
49351: PUSH
49352: LD_INT 3
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49391: LD_ADDR_VAR 0 43
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49739: LD_ADDR_VAR 0 44
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50089: LD_ADDR_VAR 0 45
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50439: LD_ADDR_VAR 0 46
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50787: LD_ADDR_VAR 0 47
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50938: LD_ADDR_VAR 0 48
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51085: LD_ADDR_VAR 0 49
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51229: LD_ADDR_VAR 0 50
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51373: LD_ADDR_VAR 0 51
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51520: LD_ADDR_VAR 0 52
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51671: LD_ADDR_VAR 0 53
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51901: LD_ADDR_VAR 0 54
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52131: LD_ADDR_VAR 0 55
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52361: LD_ADDR_VAR 0 56
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52591: LD_ADDR_VAR 0 57
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52821: LD_ADDR_VAR 0 58
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53051: LD_ADDR_VAR 0 59
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53139: LD_ADDR_VAR 0 60
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53227: LD_ADDR_VAR 0 61
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53315: LD_ADDR_VAR 0 62
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53403: LD_ADDR_VAR 0 63
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53491: LD_ADDR_VAR 0 64
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// end ; 1 :
53579: GO 59476
53581: LD_INT 1
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53589
53587: GO 56212
53589: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53590: LD_ADDR_VAR 0 11
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53634: LD_ADDR_VAR 0 12
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53675: LD_ADDR_VAR 0 13
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53715: LD_ADDR_VAR 0 14
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53756: LD_ADDR_VAR 0 15
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53800: LD_ADDR_VAR 0 16
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53846: LD_ADDR_VAR 0 17
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53890: LD_ADDR_VAR 0 18
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53931: LD_ADDR_VAR 0 19
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53971: LD_ADDR_VAR 0 20
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54012: LD_ADDR_VAR 0 21
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54056: LD_ADDR_VAR 0 22
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 3
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54102: LD_ADDR_VAR 0 23
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 3
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54146: LD_ADDR_VAR 0 24
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54187: LD_ADDR_VAR 0 25
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: LD_INT 3
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54227: LD_ADDR_VAR 0 26
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54268: LD_ADDR_VAR 0 27
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 4
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54312: LD_ADDR_VAR 0 28
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54358: LD_ADDR_VAR 0 29
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 4
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 5
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 5
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 6
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 6
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 5
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54513: LD_ADDR_VAR 0 30
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 4
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 5
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 5
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 5
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 6
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 6
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54656: LD_ADDR_VAR 0 31
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 4
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 4
54703: PUSH
54704: LD_INT 4
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: PUSH
54714: LD_INT 4
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 5
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 4
54743: PUSH
54744: LD_INT 5
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 6
54753: PUSH
54754: LD_INT 5
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 6
54763: PUSH
54764: LD_INT 6
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 5
54773: PUSH
54774: LD_INT 6
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54795: LD_ADDR_VAR 0 32
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 4
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 5
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 5
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 4
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 6
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 6
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 5
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54938: LD_ADDR_VAR 0 33
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 4
54990: NEG
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 4
55001: NEG
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 5
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 5
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 5
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 6
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 6
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55093: LD_ADDR_VAR 0 34
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: LD_INT 4
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: NEG
55161: PUSH
55162: LD_INT 4
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: LD_INT 5
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 5
55184: NEG
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: NEG
55197: PUSH
55198: LD_INT 5
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 5
55208: NEG
55209: PUSH
55210: LD_INT 6
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 6
55220: NEG
55221: PUSH
55222: LD_INT 5
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 6
55232: NEG
55233: PUSH
55234: LD_INT 6
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55256: LD_ADDR_VAR 0 41
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55300: LD_ADDR_VAR 0 42
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55341: LD_ADDR_VAR 0 43
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55381: LD_ADDR_VAR 0 44
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55422: LD_ADDR_VAR 0 45
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55466: LD_ADDR_VAR 0 46
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55512: LD_ADDR_VAR 0 47
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55545: LD_ADDR_VAR 0 48
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55576: LD_ADDR_VAR 0 49
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55605: LD_ADDR_VAR 0 50
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55634: LD_ADDR_VAR 0 51
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55665: LD_ADDR_VAR 0 52
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55698: LD_ADDR_VAR 0 53
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55742: LD_ADDR_VAR 0 54
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55783: LD_ADDR_VAR 0 55
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55823: LD_ADDR_VAR 0 56
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55864: LD_ADDR_VAR 0 57
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55908: LD_ADDR_VAR 0 58
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: NEG
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55954: LD_ADDR_VAR 0 59
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55998: LD_ADDR_VAR 0 60
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56039: LD_ADDR_VAR 0 61
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56079: LD_ADDR_VAR 0 62
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56120: LD_ADDR_VAR 0 63
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56164: LD_ADDR_VAR 0 64
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// end ; 2 :
56210: GO 59476
56212: LD_INT 2
56214: DOUBLE
56215: EQUAL
56216: IFTRUE 56220
56218: GO 59475
56220: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56221: LD_ADDR_VAR 0 29
56225: PUSH
56226: LD_INT 4
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 4
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 4
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: LD_INT 4
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 4
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 4
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 5
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 5
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 4
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 5
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 4
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: LD_INT 4
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: LD_INT 5
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: NEG
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 5
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: NEG
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 5
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 5
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56759: LD_ADDR_VAR 0 30
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: LD_INT 4
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 5
56786: PUSH
56787: LD_INT 4
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 5
56796: PUSH
56797: LD_INT 5
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: LD_INT 5
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 5
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: LD_INT 5
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 4
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 4
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 5
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 5
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 5
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 4
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 4
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 4
57123: NEG
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 4
57147: NEG
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 5
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 4
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 5
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57306: LD_ADDR_VAR 0 31
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 5
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 5
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 4
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: LD_INT 5
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 4
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: LD_INT 4
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: LD_INT 5
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 4
57556: NEG
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 5
57568: NEG
57569: PUSH
57570: LD_INT 4
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 5
57580: NEG
57581: PUSH
57582: LD_INT 5
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: LD_INT 5
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 4
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 4
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 4
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 5
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57856: LD_ADDR_VAR 0 32
57860: PUSH
57861: LD_INT 4
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 4
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 5
57919: NEG
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 5
57930: NEG
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 5
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 3
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 4
58025: NEG
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: LD_INT 4
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 4
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 5
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 4
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 4
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 4
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 4
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 4
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: PUSH
58289: LD_INT 4
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 5
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 5
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58403: LD_ADDR_VAR 0 33
58407: PUSH
58408: LD_INT 4
58410: NEG
58411: PUSH
58412: LD_INT 4
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: LD_INT 5
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 4
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: LD_INT 3
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 5
58470: NEG
58471: PUSH
58472: LD_INT 4
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: LD_INT 5
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: LD_INT 5
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 5
58506: NEG
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 4
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 5
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: LD_INT 4
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 4
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 5
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_INT 5
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 5
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58941: LD_ADDR_VAR 0 34
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 4
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 5
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 4
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 4
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 5
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 3
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 4
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 4
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 4
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 5
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: LD_INT 5
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 4
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 4
59326: NEG
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: NEG
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 5
59382: NEG
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 5
59393: NEG
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: NEG
59406: PUSH
59407: LD_INT 2
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// end ; end ;
59473: GO 59476
59475: POP
// case btype of b_depot , b_warehouse :
59476: LD_VAR 0 1
59480: PUSH
59481: LD_INT 0
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59495
59487: LD_INT 1
59489: DOUBLE
59490: EQUAL
59491: IFTRUE 59495
59493: GO 59696
59495: POP
// case nation of nation_american :
59496: LD_VAR 0 5
59500: PUSH
59501: LD_INT 1
59503: DOUBLE
59504: EQUAL
59505: IFTRUE 59509
59507: GO 59565
59509: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59510: LD_ADDR_VAR 0 9
59514: PUSH
59515: LD_VAR 0 11
59519: PUSH
59520: LD_VAR 0 12
59524: PUSH
59525: LD_VAR 0 13
59529: PUSH
59530: LD_VAR 0 14
59534: PUSH
59535: LD_VAR 0 15
59539: PUSH
59540: LD_VAR 0 16
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: PUSH
59553: LD_VAR 0 4
59557: PUSH
59558: LD_INT 1
59560: PLUS
59561: ARRAY
59562: ST_TO_ADDR
59563: GO 59694
59565: LD_INT 2
59567: DOUBLE
59568: EQUAL
59569: IFTRUE 59573
59571: GO 59629
59573: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59574: LD_ADDR_VAR 0 9
59578: PUSH
59579: LD_VAR 0 17
59583: PUSH
59584: LD_VAR 0 18
59588: PUSH
59589: LD_VAR 0 19
59593: PUSH
59594: LD_VAR 0 20
59598: PUSH
59599: LD_VAR 0 21
59603: PUSH
59604: LD_VAR 0 22
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: PUSH
59617: LD_VAR 0 4
59621: PUSH
59622: LD_INT 1
59624: PLUS
59625: ARRAY
59626: ST_TO_ADDR
59627: GO 59694
59629: LD_INT 3
59631: DOUBLE
59632: EQUAL
59633: IFTRUE 59637
59635: GO 59693
59637: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59638: LD_ADDR_VAR 0 9
59642: PUSH
59643: LD_VAR 0 23
59647: PUSH
59648: LD_VAR 0 24
59652: PUSH
59653: LD_VAR 0 25
59657: PUSH
59658: LD_VAR 0 26
59662: PUSH
59663: LD_VAR 0 27
59667: PUSH
59668: LD_VAR 0 28
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: PUSH
59681: LD_VAR 0 4
59685: PUSH
59686: LD_INT 1
59688: PLUS
59689: ARRAY
59690: ST_TO_ADDR
59691: GO 59694
59693: POP
59694: GO 60249
59696: LD_INT 2
59698: DOUBLE
59699: EQUAL
59700: IFTRUE 59710
59702: LD_INT 3
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59710
59708: GO 59766
59710: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59711: LD_ADDR_VAR 0 9
59715: PUSH
59716: LD_VAR 0 29
59720: PUSH
59721: LD_VAR 0 30
59725: PUSH
59726: LD_VAR 0 31
59730: PUSH
59731: LD_VAR 0 32
59735: PUSH
59736: LD_VAR 0 33
59740: PUSH
59741: LD_VAR 0 34
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: PUSH
59754: LD_VAR 0 4
59758: PUSH
59759: LD_INT 1
59761: PLUS
59762: ARRAY
59763: ST_TO_ADDR
59764: GO 60249
59766: LD_INT 16
59768: DOUBLE
59769: EQUAL
59770: IFTRUE 59828
59772: LD_INT 17
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59828
59778: LD_INT 18
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59828
59784: LD_INT 19
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59828
59790: LD_INT 22
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59828
59796: LD_INT 20
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59828
59802: LD_INT 21
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59828
59808: LD_INT 23
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59828
59814: LD_INT 24
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59828
59820: LD_INT 25
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59828
59826: GO 59884
59828: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59829: LD_ADDR_VAR 0 9
59833: PUSH
59834: LD_VAR 0 35
59838: PUSH
59839: LD_VAR 0 36
59843: PUSH
59844: LD_VAR 0 37
59848: PUSH
59849: LD_VAR 0 38
59853: PUSH
59854: LD_VAR 0 39
59858: PUSH
59859: LD_VAR 0 40
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 4
59876: PUSH
59877: LD_INT 1
59879: PLUS
59880: ARRAY
59881: ST_TO_ADDR
59882: GO 60249
59884: LD_INT 6
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59940
59890: LD_INT 7
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59940
59896: LD_INT 8
59898: DOUBLE
59899: EQUAL
59900: IFTRUE 59940
59902: LD_INT 13
59904: DOUBLE
59905: EQUAL
59906: IFTRUE 59940
59908: LD_INT 12
59910: DOUBLE
59911: EQUAL
59912: IFTRUE 59940
59914: LD_INT 15
59916: DOUBLE
59917: EQUAL
59918: IFTRUE 59940
59920: LD_INT 11
59922: DOUBLE
59923: EQUAL
59924: IFTRUE 59940
59926: LD_INT 14
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59940
59932: LD_INT 10
59934: DOUBLE
59935: EQUAL
59936: IFTRUE 59940
59938: GO 59996
59940: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59941: LD_ADDR_VAR 0 9
59945: PUSH
59946: LD_VAR 0 41
59950: PUSH
59951: LD_VAR 0 42
59955: PUSH
59956: LD_VAR 0 43
59960: PUSH
59961: LD_VAR 0 44
59965: PUSH
59966: LD_VAR 0 45
59970: PUSH
59971: LD_VAR 0 46
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: PUSH
59984: LD_VAR 0 4
59988: PUSH
59989: LD_INT 1
59991: PLUS
59992: ARRAY
59993: ST_TO_ADDR
59994: GO 60249
59996: LD_INT 36
59998: DOUBLE
59999: EQUAL
60000: IFTRUE 60004
60002: GO 60060
60004: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60005: LD_ADDR_VAR 0 9
60009: PUSH
60010: LD_VAR 0 47
60014: PUSH
60015: LD_VAR 0 48
60019: PUSH
60020: LD_VAR 0 49
60024: PUSH
60025: LD_VAR 0 50
60029: PUSH
60030: LD_VAR 0 51
60034: PUSH
60035: LD_VAR 0 52
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: PUSH
60048: LD_VAR 0 4
60052: PUSH
60053: LD_INT 1
60055: PLUS
60056: ARRAY
60057: ST_TO_ADDR
60058: GO 60249
60060: LD_INT 4
60062: DOUBLE
60063: EQUAL
60064: IFTRUE 60086
60066: LD_INT 5
60068: DOUBLE
60069: EQUAL
60070: IFTRUE 60086
60072: LD_INT 34
60074: DOUBLE
60075: EQUAL
60076: IFTRUE 60086
60078: LD_INT 37
60080: DOUBLE
60081: EQUAL
60082: IFTRUE 60086
60084: GO 60142
60086: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60087: LD_ADDR_VAR 0 9
60091: PUSH
60092: LD_VAR 0 53
60096: PUSH
60097: LD_VAR 0 54
60101: PUSH
60102: LD_VAR 0 55
60106: PUSH
60107: LD_VAR 0 56
60111: PUSH
60112: LD_VAR 0 57
60116: PUSH
60117: LD_VAR 0 58
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: LD_VAR 0 4
60134: PUSH
60135: LD_INT 1
60137: PLUS
60138: ARRAY
60139: ST_TO_ADDR
60140: GO 60249
60142: LD_INT 31
60144: DOUBLE
60145: EQUAL
60146: IFTRUE 60192
60148: LD_INT 32
60150: DOUBLE
60151: EQUAL
60152: IFTRUE 60192
60154: LD_INT 33
60156: DOUBLE
60157: EQUAL
60158: IFTRUE 60192
60160: LD_INT 27
60162: DOUBLE
60163: EQUAL
60164: IFTRUE 60192
60166: LD_INT 26
60168: DOUBLE
60169: EQUAL
60170: IFTRUE 60192
60172: LD_INT 28
60174: DOUBLE
60175: EQUAL
60176: IFTRUE 60192
60178: LD_INT 29
60180: DOUBLE
60181: EQUAL
60182: IFTRUE 60192
60184: LD_INT 30
60186: DOUBLE
60187: EQUAL
60188: IFTRUE 60192
60190: GO 60248
60192: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60193: LD_ADDR_VAR 0 9
60197: PUSH
60198: LD_VAR 0 59
60202: PUSH
60203: LD_VAR 0 60
60207: PUSH
60208: LD_VAR 0 61
60212: PUSH
60213: LD_VAR 0 62
60217: PUSH
60218: LD_VAR 0 63
60222: PUSH
60223: LD_VAR 0 64
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: PUSH
60236: LD_VAR 0 4
60240: PUSH
60241: LD_INT 1
60243: PLUS
60244: ARRAY
60245: ST_TO_ADDR
60246: GO 60249
60248: POP
// temp_list2 = [ ] ;
60249: LD_ADDR_VAR 0 10
60253: PUSH
60254: EMPTY
60255: ST_TO_ADDR
// for i in temp_list do
60256: LD_ADDR_VAR 0 8
60260: PUSH
60261: LD_VAR 0 9
60265: PUSH
60266: FOR_IN
60267: IFFALSE 60319
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60269: LD_ADDR_VAR 0 10
60273: PUSH
60274: LD_VAR 0 10
60278: PUSH
60279: LD_VAR 0 8
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: PUSH
60288: LD_VAR 0 2
60292: PLUS
60293: PUSH
60294: LD_VAR 0 8
60298: PUSH
60299: LD_INT 2
60301: ARRAY
60302: PUSH
60303: LD_VAR 0 3
60307: PLUS
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: ADD
60316: ST_TO_ADDR
60317: GO 60266
60319: POP
60320: POP
// result = temp_list2 ;
60321: LD_ADDR_VAR 0 7
60325: PUSH
60326: LD_VAR 0 10
60330: ST_TO_ADDR
// end ;
60331: LD_VAR 0 7
60335: RET
// export function EnemyInRange ( unit , dist ) ; begin
60336: LD_INT 0
60338: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60339: LD_ADDR_VAR 0 3
60343: PUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: CALL_OW 255
60353: PPUSH
60354: LD_VAR 0 1
60358: PPUSH
60359: CALL_OW 250
60363: PPUSH
60364: LD_VAR 0 1
60368: PPUSH
60369: CALL_OW 251
60373: PPUSH
60374: LD_VAR 0 2
60378: PPUSH
60379: CALL 34107 0 4
60383: PUSH
60384: LD_INT 4
60386: ARRAY
60387: ST_TO_ADDR
// end ;
60388: LD_VAR 0 3
60392: RET
// export function PlayerSeeMe ( unit ) ; begin
60393: LD_INT 0
60395: PPUSH
// result := See ( your_side , unit ) ;
60396: LD_ADDR_VAR 0 2
60400: PUSH
60401: LD_OWVAR 2
60405: PPUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 292
60415: ST_TO_ADDR
// end ;
60416: LD_VAR 0 2
60420: RET
// export function ReverseDir ( unit ) ; begin
60421: LD_INT 0
60423: PPUSH
// if not unit then
60424: LD_VAR 0 1
60428: NOT
60429: IFFALSE 60433
// exit ;
60431: GO 60456
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60433: LD_ADDR_VAR 0 2
60437: PUSH
60438: LD_VAR 0 1
60442: PPUSH
60443: CALL_OW 254
60447: PUSH
60448: LD_INT 3
60450: PLUS
60451: PUSH
60452: LD_INT 6
60454: MOD
60455: ST_TO_ADDR
// end ;
60456: LD_VAR 0 2
60460: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60461: LD_INT 0
60463: PPUSH
60464: PPUSH
60465: PPUSH
60466: PPUSH
60467: PPUSH
// if not hexes then
60468: LD_VAR 0 2
60472: NOT
60473: IFFALSE 60477
// exit ;
60475: GO 60625
// dist := 9999 ;
60477: LD_ADDR_VAR 0 5
60481: PUSH
60482: LD_INT 9999
60484: ST_TO_ADDR
// for i = 1 to hexes do
60485: LD_ADDR_VAR 0 4
60489: PUSH
60490: DOUBLE
60491: LD_INT 1
60493: DEC
60494: ST_TO_ADDR
60495: LD_VAR 0 2
60499: PUSH
60500: FOR_TO
60501: IFFALSE 60613
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60503: LD_VAR 0 1
60507: PPUSH
60508: LD_VAR 0 2
60512: PUSH
60513: LD_VAR 0 4
60517: ARRAY
60518: PUSH
60519: LD_INT 1
60521: ARRAY
60522: PPUSH
60523: LD_VAR 0 2
60527: PUSH
60528: LD_VAR 0 4
60532: ARRAY
60533: PUSH
60534: LD_INT 2
60536: ARRAY
60537: PPUSH
60538: CALL_OW 297
60542: PUSH
60543: LD_VAR 0 5
60547: LESS
60548: IFFALSE 60611
// begin hex := hexes [ i ] ;
60550: LD_ADDR_VAR 0 7
60554: PUSH
60555: LD_VAR 0 2
60559: PUSH
60560: LD_VAR 0 4
60564: ARRAY
60565: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: LD_VAR 0 1
60575: PPUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_VAR 0 4
60585: ARRAY
60586: PUSH
60587: LD_INT 1
60589: ARRAY
60590: PPUSH
60591: LD_VAR 0 2
60595: PUSH
60596: LD_VAR 0 4
60600: ARRAY
60601: PUSH
60602: LD_INT 2
60604: ARRAY
60605: PPUSH
60606: CALL_OW 297
60610: ST_TO_ADDR
// end ; end ;
60611: GO 60500
60613: POP
60614: POP
// result := hex ;
60615: LD_ADDR_VAR 0 3
60619: PUSH
60620: LD_VAR 0 7
60624: ST_TO_ADDR
// end ;
60625: LD_VAR 0 3
60629: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60630: LD_INT 0
60632: PPUSH
60633: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60634: LD_VAR 0 1
60638: NOT
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_INT 21
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 23
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PPUSH
60669: CALL_OW 69
60673: IN
60674: NOT
60675: OR
60676: IFFALSE 60680
// exit ;
60678: GO 60727
// for i = 1 to 3 do
60680: LD_ADDR_VAR 0 3
60684: PUSH
60685: DOUBLE
60686: LD_INT 1
60688: DEC
60689: ST_TO_ADDR
60690: LD_INT 3
60692: PUSH
60693: FOR_TO
60694: IFFALSE 60725
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 250
60705: PPUSH
60706: LD_VAR 0 1
60710: PPUSH
60711: CALL_OW 251
60715: PPUSH
60716: LD_INT 1
60718: PPUSH
60719: CALL_OW 453
60723: GO 60693
60725: POP
60726: POP
// end ;
60727: LD_VAR 0 2
60731: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60732: LD_INT 0
60734: PPUSH
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60740: LD_VAR 0 1
60744: NOT
60745: PUSH
60746: LD_VAR 0 2
60750: NOT
60751: OR
60752: PUSH
60753: LD_VAR 0 1
60757: PPUSH
60758: CALL_OW 314
60762: OR
60763: IFFALSE 60767
// exit ;
60765: GO 61208
// x := GetX ( enemy_unit ) ;
60767: LD_ADDR_VAR 0 7
60771: PUSH
60772: LD_VAR 0 2
60776: PPUSH
60777: CALL_OW 250
60781: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60782: LD_ADDR_VAR 0 8
60786: PUSH
60787: LD_VAR 0 2
60791: PPUSH
60792: CALL_OW 251
60796: ST_TO_ADDR
// if not x or not y then
60797: LD_VAR 0 7
60801: NOT
60802: PUSH
60803: LD_VAR 0 8
60807: NOT
60808: OR
60809: IFFALSE 60813
// exit ;
60811: GO 61208
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60813: LD_ADDR_VAR 0 6
60817: PUSH
60818: LD_VAR 0 7
60822: PPUSH
60823: LD_INT 0
60825: PPUSH
60826: LD_INT 4
60828: PPUSH
60829: CALL_OW 272
60833: PUSH
60834: LD_VAR 0 8
60838: PPUSH
60839: LD_INT 0
60841: PPUSH
60842: LD_INT 4
60844: PPUSH
60845: CALL_OW 273
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_VAR 0 7
60858: PPUSH
60859: LD_INT 1
60861: PPUSH
60862: LD_INT 4
60864: PPUSH
60865: CALL_OW 272
60869: PUSH
60870: LD_VAR 0 8
60874: PPUSH
60875: LD_INT 1
60877: PPUSH
60878: LD_INT 4
60880: PPUSH
60881: CALL_OW 273
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_VAR 0 7
60894: PPUSH
60895: LD_INT 2
60897: PPUSH
60898: LD_INT 4
60900: PPUSH
60901: CALL_OW 272
60905: PUSH
60906: LD_VAR 0 8
60910: PPUSH
60911: LD_INT 2
60913: PPUSH
60914: LD_INT 4
60916: PPUSH
60917: CALL_OW 273
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_VAR 0 7
60930: PPUSH
60931: LD_INT 3
60933: PPUSH
60934: LD_INT 4
60936: PPUSH
60937: CALL_OW 272
60941: PUSH
60942: LD_VAR 0 8
60946: PPUSH
60947: LD_INT 3
60949: PPUSH
60950: LD_INT 4
60952: PPUSH
60953: CALL_OW 273
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 7
60966: PPUSH
60967: LD_INT 4
60969: PPUSH
60970: LD_INT 4
60972: PPUSH
60973: CALL_OW 272
60977: PUSH
60978: LD_VAR 0 8
60982: PPUSH
60983: LD_INT 4
60985: PPUSH
60986: LD_INT 4
60988: PPUSH
60989: CALL_OW 273
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_VAR 0 7
61002: PPUSH
61003: LD_INT 5
61005: PPUSH
61006: LD_INT 4
61008: PPUSH
61009: CALL_OW 272
61013: PUSH
61014: LD_VAR 0 8
61018: PPUSH
61019: LD_INT 5
61021: PPUSH
61022: LD_INT 4
61024: PPUSH
61025: CALL_OW 273
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// for i = tmp downto 1 do
61042: LD_ADDR_VAR 0 4
61046: PUSH
61047: DOUBLE
61048: LD_VAR 0 6
61052: INC
61053: ST_TO_ADDR
61054: LD_INT 1
61056: PUSH
61057: FOR_DOWNTO
61058: IFFALSE 61159
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61060: LD_VAR 0 6
61064: PUSH
61065: LD_VAR 0 4
61069: ARRAY
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: PPUSH
61075: LD_VAR 0 6
61079: PUSH
61080: LD_VAR 0 4
61084: ARRAY
61085: PUSH
61086: LD_INT 2
61088: ARRAY
61089: PPUSH
61090: CALL_OW 488
61094: NOT
61095: PUSH
61096: LD_VAR 0 6
61100: PUSH
61101: LD_VAR 0 4
61105: ARRAY
61106: PUSH
61107: LD_INT 1
61109: ARRAY
61110: PPUSH
61111: LD_VAR 0 6
61115: PUSH
61116: LD_VAR 0 4
61120: ARRAY
61121: PUSH
61122: LD_INT 2
61124: ARRAY
61125: PPUSH
61126: CALL_OW 428
61130: PUSH
61131: LD_INT 0
61133: NONEQUAL
61134: OR
61135: IFFALSE 61157
// tmp := Delete ( tmp , i ) ;
61137: LD_ADDR_VAR 0 6
61141: PUSH
61142: LD_VAR 0 6
61146: PPUSH
61147: LD_VAR 0 4
61151: PPUSH
61152: CALL_OW 3
61156: ST_TO_ADDR
61157: GO 61057
61159: POP
61160: POP
// j := GetClosestHex ( unit , tmp ) ;
61161: LD_ADDR_VAR 0 5
61165: PUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: LD_VAR 0 6
61175: PPUSH
61176: CALL 60461 0 2
61180: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61181: LD_VAR 0 1
61185: PPUSH
61186: LD_VAR 0 5
61190: PUSH
61191: LD_INT 1
61193: ARRAY
61194: PPUSH
61195: LD_VAR 0 5
61199: PUSH
61200: LD_INT 2
61202: ARRAY
61203: PPUSH
61204: CALL_OW 111
// end ;
61208: LD_VAR 0 3
61212: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61213: LD_INT 0
61215: PPUSH
61216: PPUSH
61217: PPUSH
// uc_side = 0 ;
61218: LD_ADDR_OWVAR 20
61222: PUSH
61223: LD_INT 0
61225: ST_TO_ADDR
// uc_nation = 0 ;
61226: LD_ADDR_OWVAR 21
61230: PUSH
61231: LD_INT 0
61233: ST_TO_ADDR
// InitHc_All ( ) ;
61234: CALL_OW 584
// InitVc ;
61238: CALL_OW 20
// if mastodonts then
61242: LD_VAR 0 6
61246: IFFALSE 61313
// for i = 1 to mastodonts do
61248: LD_ADDR_VAR 0 11
61252: PUSH
61253: DOUBLE
61254: LD_INT 1
61256: DEC
61257: ST_TO_ADDR
61258: LD_VAR 0 6
61262: PUSH
61263: FOR_TO
61264: IFFALSE 61311
// begin vc_chassis := 31 ;
61266: LD_ADDR_OWVAR 37
61270: PUSH
61271: LD_INT 31
61273: ST_TO_ADDR
// vc_control := control_rider ;
61274: LD_ADDR_OWVAR 38
61278: PUSH
61279: LD_INT 4
61281: ST_TO_ADDR
// animal := CreateVehicle ;
61282: LD_ADDR_VAR 0 12
61286: PUSH
61287: CALL_OW 45
61291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61292: LD_VAR 0 12
61296: PPUSH
61297: LD_VAR 0 8
61301: PPUSH
61302: LD_INT 0
61304: PPUSH
61305: CALL 63501 0 3
// end ;
61309: GO 61263
61311: POP
61312: POP
// if horses then
61313: LD_VAR 0 5
61317: IFFALSE 61384
// for i = 1 to horses do
61319: LD_ADDR_VAR 0 11
61323: PUSH
61324: DOUBLE
61325: LD_INT 1
61327: DEC
61328: ST_TO_ADDR
61329: LD_VAR 0 5
61333: PUSH
61334: FOR_TO
61335: IFFALSE 61382
// begin hc_class := 21 ;
61337: LD_ADDR_OWVAR 28
61341: PUSH
61342: LD_INT 21
61344: ST_TO_ADDR
// hc_gallery :=  ;
61345: LD_ADDR_OWVAR 33
61349: PUSH
61350: LD_STRING 
61352: ST_TO_ADDR
// animal := CreateHuman ;
61353: LD_ADDR_VAR 0 12
61357: PUSH
61358: CALL_OW 44
61362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61363: LD_VAR 0 12
61367: PPUSH
61368: LD_VAR 0 8
61372: PPUSH
61373: LD_INT 0
61375: PPUSH
61376: CALL 63501 0 3
// end ;
61380: GO 61334
61382: POP
61383: POP
// if birds then
61384: LD_VAR 0 1
61388: IFFALSE 61455
// for i = 1 to birds do
61390: LD_ADDR_VAR 0 11
61394: PUSH
61395: DOUBLE
61396: LD_INT 1
61398: DEC
61399: ST_TO_ADDR
61400: LD_VAR 0 1
61404: PUSH
61405: FOR_TO
61406: IFFALSE 61453
// begin hc_class = 18 ;
61408: LD_ADDR_OWVAR 28
61412: PUSH
61413: LD_INT 18
61415: ST_TO_ADDR
// hc_gallery =  ;
61416: LD_ADDR_OWVAR 33
61420: PUSH
61421: LD_STRING 
61423: ST_TO_ADDR
// animal := CreateHuman ;
61424: LD_ADDR_VAR 0 12
61428: PUSH
61429: CALL_OW 44
61433: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61434: LD_VAR 0 12
61438: PPUSH
61439: LD_VAR 0 8
61443: PPUSH
61444: LD_INT 0
61446: PPUSH
61447: CALL 63501 0 3
// end ;
61451: GO 61405
61453: POP
61454: POP
// if tigers then
61455: LD_VAR 0 2
61459: IFFALSE 61543
// for i = 1 to tigers do
61461: LD_ADDR_VAR 0 11
61465: PUSH
61466: DOUBLE
61467: LD_INT 1
61469: DEC
61470: ST_TO_ADDR
61471: LD_VAR 0 2
61475: PUSH
61476: FOR_TO
61477: IFFALSE 61541
// begin hc_class = class_tiger ;
61479: LD_ADDR_OWVAR 28
61483: PUSH
61484: LD_INT 14
61486: ST_TO_ADDR
// hc_gallery =  ;
61487: LD_ADDR_OWVAR 33
61491: PUSH
61492: LD_STRING 
61494: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61495: LD_ADDR_OWVAR 35
61499: PUSH
61500: LD_INT 7
61502: NEG
61503: PPUSH
61504: LD_INT 7
61506: PPUSH
61507: CALL_OW 12
61511: ST_TO_ADDR
// animal := CreateHuman ;
61512: LD_ADDR_VAR 0 12
61516: PUSH
61517: CALL_OW 44
61521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61522: LD_VAR 0 12
61526: PPUSH
61527: LD_VAR 0 8
61531: PPUSH
61532: LD_INT 0
61534: PPUSH
61535: CALL 63501 0 3
// end ;
61539: GO 61476
61541: POP
61542: POP
// if apemans then
61543: LD_VAR 0 3
61547: IFFALSE 61670
// for i = 1 to apemans do
61549: LD_ADDR_VAR 0 11
61553: PUSH
61554: DOUBLE
61555: LD_INT 1
61557: DEC
61558: ST_TO_ADDR
61559: LD_VAR 0 3
61563: PUSH
61564: FOR_TO
61565: IFFALSE 61668
// begin hc_class = class_apeman ;
61567: LD_ADDR_OWVAR 28
61571: PUSH
61572: LD_INT 12
61574: ST_TO_ADDR
// hc_gallery =  ;
61575: LD_ADDR_OWVAR 33
61579: PUSH
61580: LD_STRING 
61582: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61583: LD_ADDR_OWVAR 35
61587: PUSH
61588: LD_INT 5
61590: NEG
61591: PPUSH
61592: LD_INT 5
61594: PPUSH
61595: CALL_OW 12
61599: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61600: LD_ADDR_OWVAR 31
61604: PUSH
61605: LD_INT 1
61607: PPUSH
61608: LD_INT 3
61610: PPUSH
61611: CALL_OW 12
61615: PUSH
61616: LD_INT 1
61618: PPUSH
61619: LD_INT 3
61621: PPUSH
61622: CALL_OW 12
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: ST_TO_ADDR
// animal := CreateHuman ;
61639: LD_ADDR_VAR 0 12
61643: PUSH
61644: CALL_OW 44
61648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61649: LD_VAR 0 12
61653: PPUSH
61654: LD_VAR 0 8
61658: PPUSH
61659: LD_INT 0
61661: PPUSH
61662: CALL 63501 0 3
// end ;
61666: GO 61564
61668: POP
61669: POP
// if enchidnas then
61670: LD_VAR 0 4
61674: IFFALSE 61741
// for i = 1 to enchidnas do
61676: LD_ADDR_VAR 0 11
61680: PUSH
61681: DOUBLE
61682: LD_INT 1
61684: DEC
61685: ST_TO_ADDR
61686: LD_VAR 0 4
61690: PUSH
61691: FOR_TO
61692: IFFALSE 61739
// begin hc_class = 13 ;
61694: LD_ADDR_OWVAR 28
61698: PUSH
61699: LD_INT 13
61701: ST_TO_ADDR
// hc_gallery =  ;
61702: LD_ADDR_OWVAR 33
61706: PUSH
61707: LD_STRING 
61709: ST_TO_ADDR
// animal := CreateHuman ;
61710: LD_ADDR_VAR 0 12
61714: PUSH
61715: CALL_OW 44
61719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61720: LD_VAR 0 12
61724: PPUSH
61725: LD_VAR 0 8
61729: PPUSH
61730: LD_INT 0
61732: PPUSH
61733: CALL 63501 0 3
// end ;
61737: GO 61691
61739: POP
61740: POP
// if fishes then
61741: LD_VAR 0 7
61745: IFFALSE 61812
// for i = 1 to fishes do
61747: LD_ADDR_VAR 0 11
61751: PUSH
61752: DOUBLE
61753: LD_INT 1
61755: DEC
61756: ST_TO_ADDR
61757: LD_VAR 0 7
61761: PUSH
61762: FOR_TO
61763: IFFALSE 61810
// begin hc_class = 20 ;
61765: LD_ADDR_OWVAR 28
61769: PUSH
61770: LD_INT 20
61772: ST_TO_ADDR
// hc_gallery =  ;
61773: LD_ADDR_OWVAR 33
61777: PUSH
61778: LD_STRING 
61780: ST_TO_ADDR
// animal := CreateHuman ;
61781: LD_ADDR_VAR 0 12
61785: PUSH
61786: CALL_OW 44
61790: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61791: LD_VAR 0 12
61795: PPUSH
61796: LD_VAR 0 9
61800: PPUSH
61801: LD_INT 0
61803: PPUSH
61804: CALL 63501 0 3
// end ;
61808: GO 61762
61810: POP
61811: POP
// end ;
61812: LD_VAR 0 10
61816: RET
// export function WantHeal ( sci , unit ) ; begin
61817: LD_INT 0
61819: PPUSH
// if GetTaskList ( sci ) > 0 then
61820: LD_VAR 0 1
61824: PPUSH
61825: CALL_OW 437
61829: PUSH
61830: LD_INT 0
61832: GREATER
61833: IFFALSE 61903
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61835: LD_VAR 0 1
61839: PPUSH
61840: CALL_OW 437
61844: PUSH
61845: LD_INT 1
61847: ARRAY
61848: PUSH
61849: LD_INT 1
61851: ARRAY
61852: PUSH
61853: LD_STRING l
61855: EQUAL
61856: PUSH
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 437
61866: PUSH
61867: LD_INT 1
61869: ARRAY
61870: PUSH
61871: LD_INT 4
61873: ARRAY
61874: PUSH
61875: LD_VAR 0 2
61879: EQUAL
61880: AND
61881: IFFALSE 61893
// result := true else
61883: LD_ADDR_VAR 0 3
61887: PUSH
61888: LD_INT 1
61890: ST_TO_ADDR
61891: GO 61901
// result := false ;
61893: LD_ADDR_VAR 0 3
61897: PUSH
61898: LD_INT 0
61900: ST_TO_ADDR
// end else
61901: GO 61911
// result := false ;
61903: LD_ADDR_VAR 0 3
61907: PUSH
61908: LD_INT 0
61910: ST_TO_ADDR
// end ;
61911: LD_VAR 0 3
61915: RET
// export function HealTarget ( sci ) ; begin
61916: LD_INT 0
61918: PPUSH
// if not sci then
61919: LD_VAR 0 1
61923: NOT
61924: IFFALSE 61928
// exit ;
61926: GO 61993
// result := 0 ;
61928: LD_ADDR_VAR 0 2
61932: PUSH
61933: LD_INT 0
61935: ST_TO_ADDR
// if GetTaskList ( sci ) then
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 437
61945: IFFALSE 61993
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61947: LD_VAR 0 1
61951: PPUSH
61952: CALL_OW 437
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PUSH
61961: LD_INT 1
61963: ARRAY
61964: PUSH
61965: LD_STRING l
61967: EQUAL
61968: IFFALSE 61993
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61970: LD_ADDR_VAR 0 2
61974: PUSH
61975: LD_VAR 0 1
61979: PPUSH
61980: CALL_OW 437
61984: PUSH
61985: LD_INT 1
61987: ARRAY
61988: PUSH
61989: LD_INT 4
61991: ARRAY
61992: ST_TO_ADDR
// end ;
61993: LD_VAR 0 2
61997: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61998: LD_INT 0
62000: PPUSH
62001: PPUSH
62002: PPUSH
62003: PPUSH
// if not base_units then
62004: LD_VAR 0 1
62008: NOT
62009: IFFALSE 62013
// exit ;
62011: GO 62100
// result := false ;
62013: LD_ADDR_VAR 0 2
62017: PUSH
62018: LD_INT 0
62020: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62021: LD_ADDR_VAR 0 5
62025: PUSH
62026: LD_VAR 0 1
62030: PPUSH
62031: LD_INT 21
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PPUSH
62041: CALL_OW 72
62045: ST_TO_ADDR
// if not tmp then
62046: LD_VAR 0 5
62050: NOT
62051: IFFALSE 62055
// exit ;
62053: GO 62100
// for i in tmp do
62055: LD_ADDR_VAR 0 3
62059: PUSH
62060: LD_VAR 0 5
62064: PUSH
62065: FOR_IN
62066: IFFALSE 62098
// begin result := EnemyInRange ( i , 22 ) ;
62068: LD_ADDR_VAR 0 2
62072: PUSH
62073: LD_VAR 0 3
62077: PPUSH
62078: LD_INT 22
62080: PPUSH
62081: CALL 60336 0 2
62085: ST_TO_ADDR
// if result then
62086: LD_VAR 0 2
62090: IFFALSE 62096
// exit ;
62092: POP
62093: POP
62094: GO 62100
// end ;
62096: GO 62065
62098: POP
62099: POP
// end ;
62100: LD_VAR 0 2
62104: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62105: LD_INT 0
62107: PPUSH
62108: PPUSH
// if not units then
62109: LD_VAR 0 1
62113: NOT
62114: IFFALSE 62118
// exit ;
62116: GO 62188
// result := [ ] ;
62118: LD_ADDR_VAR 0 3
62122: PUSH
62123: EMPTY
62124: ST_TO_ADDR
// for i in units do
62125: LD_ADDR_VAR 0 4
62129: PUSH
62130: LD_VAR 0 1
62134: PUSH
62135: FOR_IN
62136: IFFALSE 62186
// if GetTag ( i ) = tag then
62138: LD_VAR 0 4
62142: PPUSH
62143: CALL_OW 110
62147: PUSH
62148: LD_VAR 0 2
62152: EQUAL
62153: IFFALSE 62184
// result := Insert ( result , result + 1 , i ) ;
62155: LD_ADDR_VAR 0 3
62159: PUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: LD_VAR 0 3
62169: PUSH
62170: LD_INT 1
62172: PLUS
62173: PPUSH
62174: LD_VAR 0 4
62178: PPUSH
62179: CALL_OW 2
62183: ST_TO_ADDR
62184: GO 62135
62186: POP
62187: POP
// end ;
62188: LD_VAR 0 3
62192: RET
// export function IsDriver ( un ) ; begin
62193: LD_INT 0
62195: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62196: LD_ADDR_VAR 0 2
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_INT 55
62208: PUSH
62209: EMPTY
62210: LIST
62211: PPUSH
62212: CALL_OW 69
62216: IN
62217: ST_TO_ADDR
// end ;
62218: LD_VAR 0 2
62222: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
// list := [ ] ;
62227: LD_ADDR_VAR 0 5
62231: PUSH
62232: EMPTY
62233: ST_TO_ADDR
// case d of 0 :
62234: LD_VAR 0 3
62238: PUSH
62239: LD_INT 0
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62380
62247: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62248: LD_ADDR_VAR 0 5
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_INT 4
62260: MINUS
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_INT 4
62269: MINUS
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 3
62286: MINUS
62287: PUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: PUSH
62301: LD_VAR 0 1
62305: PUSH
62306: LD_INT 4
62308: PLUS
62309: PUSH
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 4
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: PUSH
62323: LD_VAR 0 1
62327: PUSH
62328: LD_INT 3
62330: PLUS
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: LD_INT 3
62339: PLUS
62340: PUSH
62341: LD_INT 5
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: LIST
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_VAR 0 2
62358: PUSH
62359: LD_INT 4
62361: PLUS
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// end ; 1 :
62378: GO 63078
62380: LD_INT 1
62382: DOUBLE
62383: EQUAL
62384: IFTRUE 62388
62386: GO 62521
62388: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62389: LD_ADDR_VAR 0 5
62393: PUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 4
62406: MINUS
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: PUSH
62416: LD_VAR 0 1
62420: PUSH
62421: LD_INT 3
62423: MINUS
62424: PUSH
62425: LD_VAR 0 2
62429: PUSH
62430: LD_INT 3
62432: MINUS
62433: PUSH
62434: LD_INT 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: LD_VAR 0 1
62446: PUSH
62447: LD_INT 4
62449: MINUS
62450: PUSH
62451: LD_VAR 0 2
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: PUSH
62464: LD_VAR 0 1
62468: PUSH
62469: LD_VAR 0 2
62473: PUSH
62474: LD_INT 3
62476: PLUS
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: LIST
62485: PUSH
62486: LD_VAR 0 1
62490: PUSH
62491: LD_INT 4
62493: PLUS
62494: PUSH
62495: LD_VAR 0 2
62499: PUSH
62500: LD_INT 4
62502: PLUS
62503: PUSH
62504: LD_INT 5
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// end ; 2 :
62519: GO 63078
62521: LD_INT 2
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62529
62527: GO 62658
62529: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62530: LD_ADDR_VAR 0 5
62534: PUSH
62535: LD_VAR 0 1
62539: PUSH
62540: LD_VAR 0 2
62544: PUSH
62545: LD_INT 3
62547: MINUS
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 1
62561: PUSH
62562: LD_INT 4
62564: PLUS
62565: PUSH
62566: LD_VAR 0 2
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: LD_VAR 0 1
62583: PUSH
62584: LD_VAR 0 2
62588: PUSH
62589: LD_INT 4
62591: PLUS
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: PUSH
62601: LD_VAR 0 1
62605: PUSH
62606: LD_INT 3
62608: MINUS
62609: PUSH
62610: LD_VAR 0 2
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: LD_VAR 0 1
62627: PUSH
62628: LD_INT 4
62630: MINUS
62631: PUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 4
62639: MINUS
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// end ; 3 :
62656: GO 63078
62658: LD_INT 3
62660: DOUBLE
62661: EQUAL
62662: IFTRUE 62666
62664: GO 62799
62666: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 3
62679: PLUS
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: PUSH
62694: LD_VAR 0 1
62698: PUSH
62699: LD_INT 4
62701: PLUS
62702: PUSH
62703: LD_VAR 0 2
62707: PUSH
62708: LD_INT 4
62710: PLUS
62711: PUSH
62712: LD_INT 5
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: PUSH
62720: LD_VAR 0 1
62724: PUSH
62725: LD_INT 4
62727: MINUS
62728: PUSH
62729: LD_VAR 0 2
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_VAR 0 2
62751: PUSH
62752: LD_INT 4
62754: MINUS
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_INT 3
62771: MINUS
62772: PUSH
62773: LD_VAR 0 2
62777: PUSH
62778: LD_INT 3
62780: MINUS
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// end ; 4 :
62797: GO 63078
62799: LD_INT 4
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 62940
62807: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62808: LD_ADDR_VAR 0 5
62812: PUSH
62813: LD_VAR 0 1
62817: PUSH
62818: LD_VAR 0 2
62822: PUSH
62823: LD_INT 4
62825: PLUS
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: PUSH
62835: LD_VAR 0 1
62839: PUSH
62840: LD_INT 3
62842: PLUS
62843: PUSH
62844: LD_VAR 0 2
62848: PUSH
62849: LD_INT 3
62851: PLUS
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: PUSH
62861: LD_VAR 0 1
62865: PUSH
62866: LD_INT 4
62868: PLUS
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 4
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: LD_VAR 0 2
62892: PUSH
62893: LD_INT 3
62895: MINUS
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: LD_VAR 0 1
62909: PUSH
62910: LD_INT 4
62912: MINUS
62913: PUSH
62914: LD_VAR 0 2
62918: PUSH
62919: LD_INT 4
62921: MINUS
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// end ; 5 :
62938: GO 63078
62940: LD_INT 5
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62948
62946: GO 63077
62948: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62949: LD_ADDR_VAR 0 5
62953: PUSH
62954: LD_VAR 0 1
62958: PUSH
62959: LD_INT 4
62961: MINUS
62962: PUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: PUSH
62976: LD_VAR 0 1
62980: PUSH
62981: LD_VAR 0 2
62985: PUSH
62986: LD_INT 4
62988: MINUS
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: LD_INT 4
63005: PLUS
63006: PUSH
63007: LD_VAR 0 2
63011: PUSH
63012: LD_INT 4
63014: PLUS
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 1
63028: PUSH
63029: LD_INT 3
63031: PLUS
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: PUSH
63046: LD_VAR 0 1
63050: PUSH
63051: LD_VAR 0 2
63055: PUSH
63056: LD_INT 3
63058: PLUS
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// end ; end ;
63075: GO 63078
63077: POP
// result := list ;
63078: LD_ADDR_VAR 0 4
63082: PUSH
63083: LD_VAR 0 5
63087: ST_TO_ADDR
// end ;
63088: LD_VAR 0 4
63092: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
63097: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63098: LD_VAR 0 1
63102: NOT
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: LD_INT 4
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: IN
63127: NOT
63128: OR
63129: IFFALSE 63133
// exit ;
63131: GO 63225
// tmp := [ ] ;
63133: LD_ADDR_VAR 0 5
63137: PUSH
63138: EMPTY
63139: ST_TO_ADDR
// for i in units do
63140: LD_ADDR_VAR 0 4
63144: PUSH
63145: LD_VAR 0 1
63149: PUSH
63150: FOR_IN
63151: IFFALSE 63194
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63153: LD_ADDR_VAR 0 5
63157: PUSH
63158: LD_VAR 0 5
63162: PPUSH
63163: LD_VAR 0 5
63167: PUSH
63168: LD_INT 1
63170: PLUS
63171: PPUSH
63172: LD_VAR 0 4
63176: PPUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: CALL_OW 259
63186: PPUSH
63187: CALL_OW 2
63191: ST_TO_ADDR
63192: GO 63150
63194: POP
63195: POP
// if not tmp then
63196: LD_VAR 0 5
63200: NOT
63201: IFFALSE 63205
// exit ;
63203: GO 63225
// result := SortListByListDesc ( units , tmp ) ;
63205: LD_ADDR_VAR 0 3
63209: PUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: LD_VAR 0 5
63219: PPUSH
63220: CALL_OW 77
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 3
63229: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
63234: PPUSH
// result := false ;
63235: LD_ADDR_VAR 0 3
63239: PUSH
63240: LD_INT 0
63242: ST_TO_ADDR
// x := GetX ( building ) ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: CALL_OW 250
63257: ST_TO_ADDR
// y := GetY ( building ) ;
63258: LD_ADDR_VAR 0 5
63262: PUSH
63263: LD_VAR 0 2
63267: PPUSH
63268: CALL_OW 251
63272: ST_TO_ADDR
// if not building or not x or not y then
63273: LD_VAR 0 2
63277: NOT
63278: PUSH
63279: LD_VAR 0 4
63283: NOT
63284: OR
63285: PUSH
63286: LD_VAR 0 5
63290: NOT
63291: OR
63292: IFFALSE 63296
// exit ;
63294: GO 63388
// if GetTaskList ( unit ) then
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 437
63305: IFFALSE 63388
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63307: LD_STRING e
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: CALL_OW 437
63319: PUSH
63320: LD_INT 1
63322: ARRAY
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: EQUAL
63328: PUSH
63329: LD_VAR 0 4
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 437
63343: PUSH
63344: LD_INT 1
63346: ARRAY
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: EQUAL
63352: AND
63353: PUSH
63354: LD_VAR 0 5
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 437
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PUSH
63373: LD_INT 3
63375: ARRAY
63376: EQUAL
63377: AND
63378: IFFALSE 63388
// result := true end ;
63380: LD_ADDR_VAR 0 3
63384: PUSH
63385: LD_INT 1
63387: ST_TO_ADDR
// end ;
63388: LD_VAR 0 3
63392: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63393: LD_INT 0
63395: PPUSH
// result := false ;
63396: LD_ADDR_VAR 0 4
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
// if GetTaskList ( unit ) then
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 437
63413: IFFALSE 63496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63415: LD_STRING M
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 437
63427: PUSH
63428: LD_INT 1
63430: ARRAY
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: EQUAL
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 437
63451: PUSH
63452: LD_INT 1
63454: ARRAY
63455: PUSH
63456: LD_INT 2
63458: ARRAY
63459: EQUAL
63460: AND
63461: PUSH
63462: LD_VAR 0 3
63466: PUSH
63467: LD_VAR 0 1
63471: PPUSH
63472: CALL_OW 437
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: LD_INT 3
63483: ARRAY
63484: EQUAL
63485: AND
63486: IFFALSE 63496
// result := true ;
63488: LD_ADDR_VAR 0 4
63492: PUSH
63493: LD_INT 1
63495: ST_TO_ADDR
// end ; end ;
63496: LD_VAR 0 4
63500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63501: LD_INT 0
63503: PPUSH
63504: PPUSH
63505: PPUSH
63506: PPUSH
// if not unit or not area then
63507: LD_VAR 0 1
63511: NOT
63512: PUSH
63513: LD_VAR 0 2
63517: NOT
63518: OR
63519: IFFALSE 63523
// exit ;
63521: GO 63687
// tmp := AreaToList ( area , i ) ;
63523: LD_ADDR_VAR 0 6
63527: PUSH
63528: LD_VAR 0 2
63532: PPUSH
63533: LD_VAR 0 5
63537: PPUSH
63538: CALL_OW 517
63542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63543: LD_ADDR_VAR 0 5
63547: PUSH
63548: DOUBLE
63549: LD_INT 1
63551: DEC
63552: ST_TO_ADDR
63553: LD_VAR 0 6
63557: PUSH
63558: LD_INT 1
63560: ARRAY
63561: PUSH
63562: FOR_TO
63563: IFFALSE 63685
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63565: LD_ADDR_VAR 0 7
63569: PUSH
63570: LD_VAR 0 6
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_VAR 0 5
63583: ARRAY
63584: PUSH
63585: LD_VAR 0 6
63589: PUSH
63590: LD_INT 2
63592: ARRAY
63593: PUSH
63594: LD_VAR 0 5
63598: ARRAY
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63604: LD_VAR 0 7
63608: PUSH
63609: LD_INT 1
63611: ARRAY
63612: PPUSH
63613: LD_VAR 0 7
63617: PUSH
63618: LD_INT 2
63620: ARRAY
63621: PPUSH
63622: CALL_OW 428
63626: PUSH
63627: LD_INT 0
63629: EQUAL
63630: IFFALSE 63683
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63632: LD_VAR 0 1
63636: PPUSH
63637: LD_VAR 0 7
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: PPUSH
63646: LD_VAR 0 7
63650: PUSH
63651: LD_INT 2
63653: ARRAY
63654: PPUSH
63655: LD_VAR 0 3
63659: PPUSH
63660: CALL_OW 48
// result := IsPlaced ( unit ) ;
63664: LD_ADDR_VAR 0 4
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 305
63678: ST_TO_ADDR
// exit ;
63679: POP
63680: POP
63681: GO 63687
// end ; end ;
63683: GO 63562
63685: POP
63686: POP
// end ;
63687: LD_VAR 0 4
63691: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
63696: PPUSH
// if not side or side > 8 then
63697: LD_VAR 0 1
63701: NOT
63702: PUSH
63703: LD_VAR 0 1
63707: PUSH
63708: LD_INT 8
63710: GREATER
63711: OR
63712: IFFALSE 63716
// exit ;
63714: GO 63903
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_INT 22
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 21
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PPUSH
63747: CALL_OW 69
63751: ST_TO_ADDR
// if not tmp then
63752: LD_VAR 0 4
63756: NOT
63757: IFFALSE 63761
// exit ;
63759: GO 63903
// enable_addtolog := true ;
63761: LD_ADDR_OWVAR 81
63765: PUSH
63766: LD_INT 1
63768: ST_TO_ADDR
// AddToLog ( [ ) ;
63769: LD_STRING [
63771: PPUSH
63772: CALL_OW 561
// for i in tmp do
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: LD_VAR 0 4
63785: PUSH
63786: FOR_IN
63787: IFFALSE 63894
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63789: LD_STRING [
63791: PUSH
63792: LD_VAR 0 3
63796: PPUSH
63797: CALL_OW 266
63801: STR
63802: PUSH
63803: LD_STRING , 
63805: STR
63806: PUSH
63807: LD_VAR 0 3
63811: PPUSH
63812: CALL_OW 250
63816: STR
63817: PUSH
63818: LD_STRING , 
63820: STR
63821: PUSH
63822: LD_VAR 0 3
63826: PPUSH
63827: CALL_OW 251
63831: STR
63832: PUSH
63833: LD_STRING , 
63835: STR
63836: PUSH
63837: LD_VAR 0 3
63841: PPUSH
63842: CALL_OW 254
63846: STR
63847: PUSH
63848: LD_STRING , 
63850: STR
63851: PUSH
63852: LD_VAR 0 3
63856: PPUSH
63857: LD_INT 1
63859: PPUSH
63860: CALL_OW 268
63864: STR
63865: PUSH
63866: LD_STRING , 
63868: STR
63869: PUSH
63870: LD_VAR 0 3
63874: PPUSH
63875: LD_INT 2
63877: PPUSH
63878: CALL_OW 268
63882: STR
63883: PUSH
63884: LD_STRING ],
63886: STR
63887: PPUSH
63888: CALL_OW 561
// end ;
63892: GO 63786
63894: POP
63895: POP
// AddToLog ( ]; ) ;
63896: LD_STRING ];
63898: PPUSH
63899: CALL_OW 561
// end ;
63903: LD_VAR 0 2
63907: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63908: LD_INT 0
63910: PPUSH
63911: PPUSH
63912: PPUSH
63913: PPUSH
63914: PPUSH
// if not area or not rate or not max then
63915: LD_VAR 0 1
63919: NOT
63920: PUSH
63921: LD_VAR 0 2
63925: NOT
63926: OR
63927: PUSH
63928: LD_VAR 0 4
63932: NOT
63933: OR
63934: IFFALSE 63938
// exit ;
63936: GO 64130
// while 1 do
63938: LD_INT 1
63940: IFFALSE 64130
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63942: LD_ADDR_VAR 0 9
63946: PUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: LD_INT 1
63954: PPUSH
63955: CALL_OW 287
63959: PUSH
63960: LD_INT 10
63962: MUL
63963: ST_TO_ADDR
// r := rate / 10 ;
63964: LD_ADDR_VAR 0 7
63968: PUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_INT 10
63976: DIVREAL
63977: ST_TO_ADDR
// time := 1 1$00 ;
63978: LD_ADDR_VAR 0 8
63982: PUSH
63983: LD_INT 2100
63985: ST_TO_ADDR
// if amount < min then
63986: LD_VAR 0 9
63990: PUSH
63991: LD_VAR 0 3
63995: LESS
63996: IFFALSE 64014
// r := r * 2 else
63998: LD_ADDR_VAR 0 7
64002: PUSH
64003: LD_VAR 0 7
64007: PUSH
64008: LD_INT 2
64010: MUL
64011: ST_TO_ADDR
64012: GO 64040
// if amount > max then
64014: LD_VAR 0 9
64018: PUSH
64019: LD_VAR 0 4
64023: GREATER
64024: IFFALSE 64040
// r := r / 2 ;
64026: LD_ADDR_VAR 0 7
64030: PUSH
64031: LD_VAR 0 7
64035: PUSH
64036: LD_INT 2
64038: DIVREAL
64039: ST_TO_ADDR
// time := time / r ;
64040: LD_ADDR_VAR 0 8
64044: PUSH
64045: LD_VAR 0 8
64049: PUSH
64050: LD_VAR 0 7
64054: DIVREAL
64055: ST_TO_ADDR
// if time < 0 then
64056: LD_VAR 0 8
64060: PUSH
64061: LD_INT 0
64063: LESS
64064: IFFALSE 64081
// time := time * - 1 ;
64066: LD_ADDR_VAR 0 8
64070: PUSH
64071: LD_VAR 0 8
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: MUL
64080: ST_TO_ADDR
// wait ( time ) ;
64081: LD_VAR 0 8
64085: PPUSH
64086: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64090: LD_INT 35
64092: PPUSH
64093: LD_INT 875
64095: PPUSH
64096: CALL_OW 12
64100: PPUSH
64101: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64105: LD_INT 1
64107: PPUSH
64108: LD_INT 5
64110: PPUSH
64111: CALL_OW 12
64115: PPUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: LD_INT 1
64123: PPUSH
64124: CALL_OW 55
// end ;
64128: GO 63938
// end ;
64130: LD_VAR 0 5
64134: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64135: LD_INT 0
64137: PPUSH
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
64142: PPUSH
64143: PPUSH
64144: PPUSH
// if not turrets or not factories then
64145: LD_VAR 0 1
64149: NOT
64150: PUSH
64151: LD_VAR 0 2
64155: NOT
64156: OR
64157: IFFALSE 64161
// exit ;
64159: GO 64468
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64161: LD_ADDR_VAR 0 10
64165: PUSH
64166: LD_INT 5
64168: PUSH
64169: LD_INT 6
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 4
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 3
64188: PUSH
64189: LD_INT 5
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 24
64203: PUSH
64204: LD_INT 25
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 23
64213: PUSH
64214: LD_INT 27
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 42
64227: PUSH
64228: LD_INT 43
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 44
64237: PUSH
64238: LD_INT 46
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 45
64247: PUSH
64248: LD_INT 47
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// result := [ ] ;
64265: LD_ADDR_VAR 0 3
64269: PUSH
64270: EMPTY
64271: ST_TO_ADDR
// for i in turrets do
64272: LD_ADDR_VAR 0 4
64276: PUSH
64277: LD_VAR 0 1
64281: PUSH
64282: FOR_IN
64283: IFFALSE 64466
// begin nat := GetNation ( i ) ;
64285: LD_ADDR_VAR 0 7
64289: PUSH
64290: LD_VAR 0 4
64294: PPUSH
64295: CALL_OW 248
64299: ST_TO_ADDR
// weapon := 0 ;
64300: LD_ADDR_VAR 0 8
64304: PUSH
64305: LD_INT 0
64307: ST_TO_ADDR
// if not nat then
64308: LD_VAR 0 7
64312: NOT
64313: IFFALSE 64317
// continue ;
64315: GO 64282
// for j in list [ nat ] do
64317: LD_ADDR_VAR 0 5
64321: PUSH
64322: LD_VAR 0 10
64326: PUSH
64327: LD_VAR 0 7
64331: ARRAY
64332: PUSH
64333: FOR_IN
64334: IFFALSE 64375
// if GetBWeapon ( i ) = j [ 1 ] then
64336: LD_VAR 0 4
64340: PPUSH
64341: CALL_OW 269
64345: PUSH
64346: LD_VAR 0 5
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: EQUAL
64355: IFFALSE 64373
// begin weapon := j [ 2 ] ;
64357: LD_ADDR_VAR 0 8
64361: PUSH
64362: LD_VAR 0 5
64366: PUSH
64367: LD_INT 2
64369: ARRAY
64370: ST_TO_ADDR
// break ;
64371: GO 64375
// end ;
64373: GO 64333
64375: POP
64376: POP
// if not weapon then
64377: LD_VAR 0 8
64381: NOT
64382: IFFALSE 64386
// continue ;
64384: GO 64282
// for k in factories do
64386: LD_ADDR_VAR 0 6
64390: PUSH
64391: LD_VAR 0 2
64395: PUSH
64396: FOR_IN
64397: IFFALSE 64462
// begin weapons := AvailableWeaponList ( k ) ;
64399: LD_ADDR_VAR 0 9
64403: PUSH
64404: LD_VAR 0 6
64408: PPUSH
64409: CALL_OW 478
64413: ST_TO_ADDR
// if not weapons then
64414: LD_VAR 0 9
64418: NOT
64419: IFFALSE 64423
// continue ;
64421: GO 64396
// if weapon in weapons then
64423: LD_VAR 0 8
64427: PUSH
64428: LD_VAR 0 9
64432: IN
64433: IFFALSE 64460
// begin result := [ i , weapon ] ;
64435: LD_ADDR_VAR 0 3
64439: PUSH
64440: LD_VAR 0 4
64444: PUSH
64445: LD_VAR 0 8
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: ST_TO_ADDR
// exit ;
64454: POP
64455: POP
64456: POP
64457: POP
64458: GO 64468
// end ; end ;
64460: GO 64396
64462: POP
64463: POP
// end ;
64464: GO 64282
64466: POP
64467: POP
// end ;
64468: LD_VAR 0 3
64472: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64473: LD_INT 0
64475: PPUSH
// if not side or side > 8 then
64476: LD_VAR 0 3
64480: NOT
64481: PUSH
64482: LD_VAR 0 3
64486: PUSH
64487: LD_INT 8
64489: GREATER
64490: OR
64491: IFFALSE 64495
// exit ;
64493: GO 64554
// if not range then
64495: LD_VAR 0 4
64499: NOT
64500: IFFALSE 64511
// range := - 12 ;
64502: LD_ADDR_VAR 0 4
64506: PUSH
64507: LD_INT 12
64509: NEG
64510: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64511: LD_VAR 0 1
64515: PPUSH
64516: LD_VAR 0 2
64520: PPUSH
64521: LD_VAR 0 3
64525: PPUSH
64526: LD_VAR 0 4
64530: PPUSH
64531: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64535: LD_VAR 0 1
64539: PPUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: CALL_OW 331
// end ;
64554: LD_VAR 0 5
64558: RET
// export function Video ( mode ) ; begin
64559: LD_INT 0
64561: PPUSH
// ingame_video = mode ;
64562: LD_ADDR_OWVAR 52
64566: PUSH
64567: LD_VAR 0 1
64571: ST_TO_ADDR
// interface_hidden = mode ;
64572: LD_ADDR_OWVAR 54
64576: PUSH
64577: LD_VAR 0 1
64581: ST_TO_ADDR
// end ;
64582: LD_VAR 0 2
64586: RET
// export function Join ( array , element ) ; begin
64587: LD_INT 0
64589: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64590: LD_ADDR_VAR 0 3
64594: PUSH
64595: LD_VAR 0 1
64599: PPUSH
64600: LD_VAR 0 1
64604: PUSH
64605: LD_INT 1
64607: PLUS
64608: PPUSH
64609: LD_VAR 0 2
64613: PPUSH
64614: CALL_OW 1
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 3
64623: RET
// export function JoinUnion ( array , element ) ; begin
64624: LD_INT 0
64626: PPUSH
// result := array union element ;
64627: LD_ADDR_VAR 0 3
64631: PUSH
64632: LD_VAR 0 1
64636: PUSH
64637: LD_VAR 0 2
64641: UNION
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 3
64647: RET
// export function GetBehemoths ( side ) ; begin
64648: LD_INT 0
64650: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64651: LD_ADDR_VAR 0 2
64655: PUSH
64656: LD_INT 22
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 31
64670: PUSH
64671: LD_INT 25
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PPUSH
64682: CALL_OW 69
64686: ST_TO_ADDR
// end ;
64687: LD_VAR 0 2
64691: RET
// export function Shuffle ( array ) ; var i , index ; begin
64692: LD_INT 0
64694: PPUSH
64695: PPUSH
64696: PPUSH
// result := [ ] ;
64697: LD_ADDR_VAR 0 2
64701: PUSH
64702: EMPTY
64703: ST_TO_ADDR
// if not array then
64704: LD_VAR 0 1
64708: NOT
64709: IFFALSE 64713
// exit ;
64711: GO 64812
// Randomize ;
64713: CALL_OW 10
// for i = array downto 1 do
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: DOUBLE
64723: LD_VAR 0 1
64727: INC
64728: ST_TO_ADDR
64729: LD_INT 1
64731: PUSH
64732: FOR_DOWNTO
64733: IFFALSE 64810
// begin index := rand ( 1 , array ) ;
64735: LD_ADDR_VAR 0 4
64739: PUSH
64740: LD_INT 1
64742: PPUSH
64743: LD_VAR 0 1
64747: PPUSH
64748: CALL_OW 12
64752: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64753: LD_ADDR_VAR 0 2
64757: PUSH
64758: LD_VAR 0 2
64762: PPUSH
64763: LD_VAR 0 2
64767: PUSH
64768: LD_INT 1
64770: PLUS
64771: PPUSH
64772: LD_VAR 0 1
64776: PUSH
64777: LD_VAR 0 4
64781: ARRAY
64782: PPUSH
64783: CALL_OW 2
64787: ST_TO_ADDR
// array := Delete ( array , index ) ;
64788: LD_ADDR_VAR 0 1
64792: PUSH
64793: LD_VAR 0 1
64797: PPUSH
64798: LD_VAR 0 4
64802: PPUSH
64803: CALL_OW 3
64807: ST_TO_ADDR
// end ;
64808: GO 64732
64810: POP
64811: POP
// end ;
64812: LD_VAR 0 2
64816: RET
// export function GetBaseMaterials ( base ) ; begin
64817: LD_INT 0
64819: PPUSH
// result := [ 0 , 0 , 0 ] ;
64820: LD_ADDR_VAR 0 2
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: ST_TO_ADDR
// if not base then
64839: LD_VAR 0 1
64843: NOT
64844: IFFALSE 64848
// exit ;
64846: GO 64897
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64848: LD_ADDR_VAR 0 2
64852: PUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: LD_INT 1
64860: PPUSH
64861: CALL_OW 275
64865: PUSH
64866: LD_VAR 0 1
64870: PPUSH
64871: LD_INT 2
64873: PPUSH
64874: CALL_OW 275
64878: PUSH
64879: LD_VAR 0 1
64883: PPUSH
64884: LD_INT 3
64886: PPUSH
64887: CALL_OW 275
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// end ;
64897: LD_VAR 0 2
64901: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64902: LD_INT 0
64904: PPUSH
64905: PPUSH
// result := array ;
64906: LD_ADDR_VAR 0 3
64910: PUSH
64911: LD_VAR 0 1
64915: ST_TO_ADDR
// if size > 0 then
64916: LD_VAR 0 2
64920: PUSH
64921: LD_INT 0
64923: GREATER
64924: IFFALSE 64970
// for i := array downto size do
64926: LD_ADDR_VAR 0 4
64930: PUSH
64931: DOUBLE
64932: LD_VAR 0 1
64936: INC
64937: ST_TO_ADDR
64938: LD_VAR 0 2
64942: PUSH
64943: FOR_DOWNTO
64944: IFFALSE 64968
// result := Delete ( result , result ) ;
64946: LD_ADDR_VAR 0 3
64950: PUSH
64951: LD_VAR 0 3
64955: PPUSH
64956: LD_VAR 0 3
64960: PPUSH
64961: CALL_OW 3
64965: ST_TO_ADDR
64966: GO 64943
64968: POP
64969: POP
// end ;
64970: LD_VAR 0 3
64974: RET
// export function ComExit ( unit ) ; var tmp ; begin
64975: LD_INT 0
64977: PPUSH
64978: PPUSH
// if not IsInUnit ( unit ) then
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 310
64988: NOT
64989: IFFALSE 64993
// exit ;
64991: GO 65053
// tmp := IsInUnit ( unit ) ;
64993: LD_ADDR_VAR 0 3
64997: PUSH
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 310
65007: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65008: LD_VAR 0 3
65012: PPUSH
65013: CALL_OW 247
65017: PUSH
65018: LD_INT 2
65020: EQUAL
65021: IFFALSE 65034
// ComExitVehicle ( unit ) else
65023: LD_VAR 0 1
65027: PPUSH
65028: CALL_OW 121
65032: GO 65043
// ComExitBuilding ( unit ) ;
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 122
// result := tmp ;
65043: LD_ADDR_VAR 0 2
65047: PUSH
65048: LD_VAR 0 3
65052: ST_TO_ADDR
// end ;
65053: LD_VAR 0 2
65057: RET
// export function ComExitAll ( units ) ; var i ; begin
65058: LD_INT 0
65060: PPUSH
65061: PPUSH
// if not units then
65062: LD_VAR 0 1
65066: NOT
65067: IFFALSE 65071
// exit ;
65069: GO 65097
// for i in units do
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_VAR 0 1
65080: PUSH
65081: FOR_IN
65082: IFFALSE 65095
// ComExit ( i ) ;
65084: LD_VAR 0 3
65088: PPUSH
65089: CALL 64975 0 1
65093: GO 65081
65095: POP
65096: POP
// end ;
65097: LD_VAR 0 2
65101: RET
// export function ResetHc ; begin
65102: LD_INT 0
65104: PPUSH
// InitHc ;
65105: CALL_OW 19
// hc_importance := 0 ;
65109: LD_ADDR_OWVAR 32
65113: PUSH
65114: LD_INT 0
65116: ST_TO_ADDR
// end ;
65117: LD_VAR 0 1
65121: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65122: LD_INT 0
65124: PPUSH
65125: PPUSH
65126: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65127: LD_ADDR_VAR 0 6
65131: PUSH
65132: LD_VAR 0 1
65136: PUSH
65137: LD_VAR 0 3
65141: PLUS
65142: PUSH
65143: LD_INT 2
65145: DIV
65146: ST_TO_ADDR
// if _x < 0 then
65147: LD_VAR 0 6
65151: PUSH
65152: LD_INT 0
65154: LESS
65155: IFFALSE 65172
// _x := _x * - 1 ;
65157: LD_ADDR_VAR 0 6
65161: PUSH
65162: LD_VAR 0 6
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: MUL
65171: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65172: LD_ADDR_VAR 0 7
65176: PUSH
65177: LD_VAR 0 2
65181: PUSH
65182: LD_VAR 0 4
65186: PLUS
65187: PUSH
65188: LD_INT 2
65190: DIV
65191: ST_TO_ADDR
// if _y < 0 then
65192: LD_VAR 0 7
65196: PUSH
65197: LD_INT 0
65199: LESS
65200: IFFALSE 65217
// _y := _y * - 1 ;
65202: LD_ADDR_VAR 0 7
65206: PUSH
65207: LD_VAR 0 7
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: MUL
65216: ST_TO_ADDR
// result := [ _x , _y ] ;
65217: LD_ADDR_VAR 0 5
65221: PUSH
65222: LD_VAR 0 6
65226: PUSH
65227: LD_VAR 0 7
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: ST_TO_ADDR
// end ;
65236: LD_VAR 0 5
65240: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65241: LD_INT 0
65243: PPUSH
65244: PPUSH
65245: PPUSH
65246: PPUSH
// task := GetTaskList ( unit ) ;
65247: LD_ADDR_VAR 0 7
65251: PUSH
65252: LD_VAR 0 1
65256: PPUSH
65257: CALL_OW 437
65261: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65262: LD_VAR 0 7
65266: NOT
65267: PUSH
65268: LD_VAR 0 1
65272: PPUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: CALL_OW 308
65282: NOT
65283: AND
65284: IFFALSE 65288
// exit ;
65286: GO 65406
// if IsInArea ( unit , area ) then
65288: LD_VAR 0 1
65292: PPUSH
65293: LD_VAR 0 2
65297: PPUSH
65298: CALL_OW 308
65302: IFFALSE 65320
// begin ComMoveToArea ( unit , goAway ) ;
65304: LD_VAR 0 1
65308: PPUSH
65309: LD_VAR 0 3
65313: PPUSH
65314: CALL_OW 113
// exit ;
65318: GO 65406
// end ; if task [ 1 ] [ 1 ] <> M then
65320: LD_VAR 0 7
65324: PUSH
65325: LD_INT 1
65327: ARRAY
65328: PUSH
65329: LD_INT 1
65331: ARRAY
65332: PUSH
65333: LD_STRING M
65335: NONEQUAL
65336: IFFALSE 65340
// exit ;
65338: GO 65406
// x := task [ 1 ] [ 2 ] ;
65340: LD_ADDR_VAR 0 5
65344: PUSH
65345: LD_VAR 0 7
65349: PUSH
65350: LD_INT 1
65352: ARRAY
65353: PUSH
65354: LD_INT 2
65356: ARRAY
65357: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65358: LD_ADDR_VAR 0 6
65362: PUSH
65363: LD_VAR 0 7
65367: PUSH
65368: LD_INT 1
65370: ARRAY
65371: PUSH
65372: LD_INT 3
65374: ARRAY
65375: ST_TO_ADDR
// if InArea ( x , y , area ) then
65376: LD_VAR 0 5
65380: PPUSH
65381: LD_VAR 0 6
65385: PPUSH
65386: LD_VAR 0 2
65390: PPUSH
65391: CALL_OW 309
65395: IFFALSE 65406
// ComStop ( unit ) ;
65397: LD_VAR 0 1
65401: PPUSH
65402: CALL_OW 141
// end ;
65406: LD_VAR 0 4
65410: RET
// export function Abs ( value ) ; begin
65411: LD_INT 0
65413: PPUSH
// result := value ;
65414: LD_ADDR_VAR 0 2
65418: PUSH
65419: LD_VAR 0 1
65423: ST_TO_ADDR
// if value < 0 then
65424: LD_VAR 0 1
65428: PUSH
65429: LD_INT 0
65431: LESS
65432: IFFALSE 65449
// result := value * - 1 ;
65434: LD_ADDR_VAR 0 2
65438: PUSH
65439: LD_VAR 0 1
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: MUL
65448: ST_TO_ADDR
// end ;
65449: LD_VAR 0 2
65453: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65454: LD_INT 0
65456: PPUSH
65457: PPUSH
65458: PPUSH
65459: PPUSH
65460: PPUSH
65461: PPUSH
65462: PPUSH
65463: PPUSH
// if not unit or not building then
65464: LD_VAR 0 1
65468: NOT
65469: PUSH
65470: LD_VAR 0 2
65474: NOT
65475: OR
65476: IFFALSE 65480
// exit ;
65478: GO 65706
// x := GetX ( building ) ;
65480: LD_ADDR_VAR 0 4
65484: PUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: CALL_OW 250
65494: ST_TO_ADDR
// y := GetY ( building ) ;
65495: LD_ADDR_VAR 0 6
65499: PUSH
65500: LD_VAR 0 2
65504: PPUSH
65505: CALL_OW 251
65509: ST_TO_ADDR
// d := GetDir ( building ) ;
65510: LD_ADDR_VAR 0 8
65514: PUSH
65515: LD_VAR 0 2
65519: PPUSH
65520: CALL_OW 254
65524: ST_TO_ADDR
// r := 4 ;
65525: LD_ADDR_VAR 0 9
65529: PUSH
65530: LD_INT 4
65532: ST_TO_ADDR
// for i := 1 to 5 do
65533: LD_ADDR_VAR 0 10
65537: PUSH
65538: DOUBLE
65539: LD_INT 1
65541: DEC
65542: ST_TO_ADDR
65543: LD_INT 5
65545: PUSH
65546: FOR_TO
65547: IFFALSE 65704
// begin _x := ShiftX ( x , d , r + i ) ;
65549: LD_ADDR_VAR 0 5
65553: PUSH
65554: LD_VAR 0 4
65558: PPUSH
65559: LD_VAR 0 8
65563: PPUSH
65564: LD_VAR 0 9
65568: PUSH
65569: LD_VAR 0 10
65573: PLUS
65574: PPUSH
65575: CALL_OW 272
65579: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65580: LD_ADDR_VAR 0 7
65584: PUSH
65585: LD_VAR 0 6
65589: PPUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: LD_VAR 0 9
65599: PUSH
65600: LD_VAR 0 10
65604: PLUS
65605: PPUSH
65606: CALL_OW 273
65610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65611: LD_VAR 0 5
65615: PPUSH
65616: LD_VAR 0 7
65620: PPUSH
65621: CALL_OW 488
65625: PUSH
65626: LD_VAR 0 5
65630: PPUSH
65631: LD_VAR 0 7
65635: PPUSH
65636: CALL_OW 428
65640: PPUSH
65641: CALL_OW 247
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: IN
65656: NOT
65657: AND
65658: IFFALSE 65702
// begin ComMoveXY ( unit , _x , _y ) ;
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 5
65669: PPUSH
65670: LD_VAR 0 7
65674: PPUSH
65675: CALL_OW 111
// result := [ _x , _y ] ;
65679: LD_ADDR_VAR 0 3
65683: PUSH
65684: LD_VAR 0 5
65688: PUSH
65689: LD_VAR 0 7
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// exit ;
65698: POP
65699: POP
65700: GO 65706
// end ; end ;
65702: GO 65546
65704: POP
65705: POP
// end ;
65706: LD_VAR 0 3
65710: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65711: LD_INT 0
65713: PPUSH
65714: PPUSH
65715: PPUSH
// result := 0 ;
65716: LD_ADDR_VAR 0 3
65720: PUSH
65721: LD_INT 0
65723: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65724: LD_VAR 0 1
65728: PUSH
65729: LD_INT 0
65731: LESS
65732: PUSH
65733: LD_VAR 0 1
65737: PUSH
65738: LD_INT 8
65740: GREATER
65741: OR
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 0
65750: LESS
65751: OR
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: LD_INT 8
65760: GREATER
65761: OR
65762: IFFALSE 65766
// exit ;
65764: GO 65841
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65766: LD_ADDR_VAR 0 4
65770: PUSH
65771: LD_INT 22
65773: PUSH
65774: LD_VAR 0 2
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PPUSH
65783: CALL_OW 69
65787: PUSH
65788: FOR_IN
65789: IFFALSE 65839
// begin un := UnitShoot ( i ) ;
65791: LD_ADDR_VAR 0 5
65795: PUSH
65796: LD_VAR 0 4
65800: PPUSH
65801: CALL_OW 504
65805: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65806: LD_VAR 0 5
65810: PPUSH
65811: CALL_OW 255
65815: PUSH
65816: LD_VAR 0 1
65820: EQUAL
65821: IFFALSE 65837
// begin result := un ;
65823: LD_ADDR_VAR 0 3
65827: PUSH
65828: LD_VAR 0 5
65832: ST_TO_ADDR
// exit ;
65833: POP
65834: POP
65835: GO 65841
// end ; end ;
65837: GO 65788
65839: POP
65840: POP
// end ;
65841: LD_VAR 0 3
65845: RET
// export function GetCargoBay ( units ) ; begin
65846: LD_INT 0
65848: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65849: LD_ADDR_VAR 0 2
65853: PUSH
65854: LD_VAR 0 1
65858: PPUSH
65859: LD_INT 2
65861: PUSH
65862: LD_INT 34
65864: PUSH
65865: LD_INT 12
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 34
65874: PUSH
65875: LD_INT 51
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 34
65884: PUSH
65885: LD_INT 32
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 34
65894: PUSH
65895: LD_EXP 104
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: PPUSH
65911: CALL_OW 72
65915: ST_TO_ADDR
// end ; end_of_file
65916: LD_VAR 0 2
65920: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65921: LD_VAR 0 1
65925: PUSH
65926: LD_INT 200
65928: DOUBLE
65929: GREATEREQUAL
65930: IFFALSE 65938
65932: LD_INT 299
65934: DOUBLE
65935: LESSEQUAL
65936: IFTRUE 65940
65938: GO 65972
65940: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65941: LD_VAR 0 1
65945: PPUSH
65946: LD_VAR 0 2
65950: PPUSH
65951: LD_VAR 0 3
65955: PPUSH
65956: LD_VAR 0 4
65960: PPUSH
65961: LD_VAR 0 5
65965: PPUSH
65966: CALL 11050 0 5
65970: GO 66049
65972: LD_INT 300
65974: DOUBLE
65975: GREATEREQUAL
65976: IFFALSE 65984
65978: LD_INT 399
65980: DOUBLE
65981: LESSEQUAL
65982: IFTRUE 65986
65984: GO 66048
65986: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65987: LD_VAR 0 1
65991: PPUSH
65992: LD_VAR 0 2
65996: PPUSH
65997: LD_VAR 0 3
66001: PPUSH
66002: LD_VAR 0 4
66006: PPUSH
66007: LD_VAR 0 5
66011: PPUSH
66012: LD_VAR 0 6
66016: PPUSH
66017: LD_VAR 0 7
66021: PPUSH
66022: LD_VAR 0 8
66026: PPUSH
66027: LD_VAR 0 9
66031: PPUSH
66032: LD_VAR 0 10
66036: PPUSH
66037: LD_VAR 0 11
66041: PPUSH
66042: CALL 26125 0 11
66046: GO 66049
66048: POP
// end ;
66049: PPOPN 11
66051: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66052: LD_VAR 0 1
66056: PPUSH
66057: LD_VAR 0 2
66061: PPUSH
66062: LD_VAR 0 3
66066: PPUSH
66067: LD_VAR 0 4
66071: PPUSH
66072: LD_VAR 0 5
66076: PPUSH
66077: CALL 11032 0 5
// end ; end_of_file
66081: PPOPN 5
66083: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66084: LD_VAR 0 1
66088: PPUSH
66089: LD_VAR 0 2
66093: PPUSH
66094: LD_VAR 0 3
66098: PPUSH
66099: LD_VAR 0 4
66103: PPUSH
66104: LD_VAR 0 5
66108: PPUSH
66109: LD_VAR 0 6
66113: PPUSH
66114: CALL 14933 0 6
// end ;
66118: PPOPN 6
66120: END
