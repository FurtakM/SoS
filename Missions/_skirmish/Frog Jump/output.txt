// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7868 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 7315 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1942 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9980 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 6131 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 471: LD_ADDR_OWVAR 26
 475: PUSH
 476: LD_STRING Matthew Bagins
 478: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 479: LD_ADDR_OWVAR 31
 483: PUSH
 484: LD_INT 10
 486: PUSH
 487: LD_INT 5
 489: PUSH
 490: LD_INT 8
 492: PUSH
 493: LD_INT 5
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 502: LD_ADDR_OWVAR 29
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: LD_INT 12
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: ST_TO_ADDR
// Bagins := CreateHuman ;
 517: LD_ADDR_EXP 1
 521: PUSH
 522: CALL_OW 44
 526: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 527: LD_EXP 1
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: CALL_OW 52
// hc_gallery :=  ;
 539: LD_ADDR_OWVAR 33
 543: PUSH
 544: LD_STRING 
 546: ST_TO_ADDR
// hc_name :=  ;
 547: LD_ADDR_OWVAR 26
 551: PUSH
 552: LD_STRING 
 554: ST_TO_ADDR
// for i = 1 to 6 do
 555: LD_ADDR_VAR 0 2
 559: PUSH
 560: DOUBLE
 561: LD_INT 1
 563: DEC
 564: ST_TO_ADDR
 565: LD_INT 6
 567: PUSH
 568: FOR_TO
 569: IFFALSE 630
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 3
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 1
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: CALL_OW 12
 596: ARRAY
 597: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 2
 603: PPUSH
 604: LD_VAR 0 4
 608: PPUSH
 609: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 613: CALL_OW 44
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 568
 630: POP
 631: POP
// for i = 1 to 6 do
 632: LD_ADDR_VAR 0 2
 636: PUSH
 637: DOUBLE
 638: LD_INT 1
 640: DEC
 641: ST_TO_ADDR
 642: LD_INT 6
 644: PUSH
 645: FOR_TO
 646: IFFALSE 704
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 648: LD_ADDR_OWVAR 21
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: LD_INT 2
 668: PPUSH
 669: CALL_OW 12
 673: ARRAY
 674: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 675: LD_INT 0
 677: PPUSH
 678: LD_INT 3
 680: PPUSH
 681: LD_VAR 0 4
 685: PPUSH
 686: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 690: CALL_OW 44
 694: PPUSH
 695: LD_INT 6
 697: PPUSH
 698: CALL_OW 52
// end ;
 702: GO 645
 704: POP
 705: POP
// for i = 1 to 6 do
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: DOUBLE
 712: LD_INT 1
 714: DEC
 715: ST_TO_ADDR
 716: LD_INT 6
 718: PUSH
 719: FOR_TO
 720: IFFALSE 778
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 722: LD_ADDR_OWVAR 21
 726: PUSH
 727: LD_INT 1
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 1
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: CALL_OW 12
 747: ARRAY
 748: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 749: LD_INT 0
 751: PPUSH
 752: LD_INT 3
 754: PPUSH
 755: LD_VAR 0 4
 759: PPUSH
 760: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 764: CALL_OW 44
 768: PPUSH
 769: LD_INT 11
 771: PPUSH
 772: CALL_OW 52
// end ;
 776: GO 719
 778: POP
 779: POP
// for i = 1 to 6 do
 780: LD_ADDR_VAR 0 2
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 6
 792: PUSH
 793: FOR_TO
 794: IFFALSE 871
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 796: LD_ADDR_OWVAR 21
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 1
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: CALL_OW 12
 821: ARRAY
 822: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_VAR 0 4
 833: PPUSH
 834: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 838: CALL_OW 44
 842: PPUSH
 843: LD_INT 2
 845: PUSH
 846: LD_INT 5
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_INT 2
 858: PPUSH
 859: CALL_OW 12
 863: ARRAY
 864: PPUSH
 865: CALL_OW 52
// end ;
 869: GO 793
 871: POP
 872: POP
// for i = 1 to 6 do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: DOUBLE
 879: LD_INT 1
 881: DEC
 882: ST_TO_ADDR
 883: LD_INT 6
 885: PUSH
 886: FOR_TO
 887: IFFALSE 994
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 889: LD_ADDR_OWVAR 21
 893: PUSH
 894: LD_INT 1
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: CALL_OW 12
 914: ARRAY
 915: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 916: LD_INT 0
 918: PPUSH
 919: LD_INT 5
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 2
 934: PPUSH
 935: CALL_OW 12
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 4
 945: PPUSH
 946: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 950: CALL_OW 44
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 7
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 30
 967: PUSH
 968: LD_INT 5
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: PUSH
 984: LD_INT 1
 986: ARRAY
 987: PPUSH
 988: CALL_OW 52
// end ;
 992: GO 886
 994: POP
 995: POP
// uc_nation := 3 ;
 996: LD_ADDR_OWVAR 21
1000: PUSH
1001: LD_INT 3
1003: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 5
1009: PPUSH
1010: LD_VAR 0 4
1014: PPUSH
1015: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1019: CALL_OW 44
1023: PPUSH
1024: LD_INT 50
1026: PPUSH
1027: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1031: LD_ADDR_VAR 0 2
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 7
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 30
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 69
1064: PUSH
1065: FOR_IN
1066: IFFALSE 1130
// if GetNation ( i ) = 1 then
1068: LD_VAR 0 2
1072: PPUSH
1073: CALL_OW 248
1077: PUSH
1078: LD_INT 1
1080: EQUAL
1081: IFFALSE 1097
// AddComPlaceWeapon ( i , us_double_laser ) else
1083: LD_VAR 0 2
1087: PPUSH
1088: LD_INT 10
1090: PPUSH
1091: CALL_OW 208
1095: GO 1128
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 47
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: CALL_OW 12
1122: ARRAY
1123: PPUSH
1124: CALL_OW 208
1128: GO 1065
1130: POP
1131: POP
// end ;
1132: LD_VAR 0 1
1136: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1137: LD_INT 0
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
// if nation = 2 then
1147: LD_VAR 0 1
1151: PUSH
1152: LD_INT 2
1154: EQUAL
1155: IFFALSE 1159
// exit ;
1157: GO 1378
// if nation = 1 then
1159: LD_VAR 0 1
1163: PUSH
1164: LD_INT 1
1166: EQUAL
1167: IFFALSE 1185
// if al_fac_us then
1169: LD_INT 11
1171: IFFALSE 1183
// fac := al_fac_us else
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 11
1180: ST_TO_ADDR
1181: GO 1185
// exit ;
1183: GO 1378
// if nation = 3 then
1185: LD_VAR 0 1
1189: PUSH
1190: LD_INT 3
1192: EQUAL
1193: IFFALSE 1211
// if al_fac_ru then
1195: LD_INT 6
1197: IFFALSE 1209
// fac := al_fac_ru else
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 6
1206: ST_TO_ADDR
1207: GO 1211
// exit ;
1209: GO 1378
// if nation = 1 then
1211: LD_VAR 0 1
1215: PUSH
1216: LD_INT 1
1218: EQUAL
1219: IFFALSE 1231
// chassis := us_morphling else
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 5
1228: ST_TO_ADDR
1229: GO 1239
// chassis := ru_heavy_tracked ;
1231: LD_ADDR_VAR 0 6
1235: PUSH
1236: LD_INT 24
1238: ST_TO_ADDR
// if nation = 1 then
1239: LD_VAR 0 1
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1259
// engine := engine_combustion else
1249: LD_ADDR_VAR 0 7
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
1257: GO 1267
// engine := engine_siberite ;
1259: LD_ADDR_VAR 0 7
1263: PUSH
1264: LD_INT 3
1266: ST_TO_ADDR
// control := control_computer ;
1267: LD_ADDR_VAR 0 8
1271: PUSH
1272: LD_INT 3
1274: ST_TO_ADDR
// if nation = 3 then
1275: LD_VAR 0 1
1279: PUSH
1280: LD_INT 3
1282: EQUAL
1283: IFFALSE 1306
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1285: LD_ADDR_VAR 0 9
1289: PUSH
1290: LD_INT 47
1292: PUSH
1293: LD_INT 45
1295: PUSH
1296: LD_INT 43
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: ST_TO_ADDR
1304: GO 1325
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: LD_INT 9
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_VAR 0 9
1334: PUSH
1335: LD_INT 1
1337: PPUSH
1338: LD_VAR 0 9
1342: PPUSH
1343: CALL_OW 12
1347: ARRAY
1348: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1349: LD_VAR 0 5
1353: PPUSH
1354: LD_VAR 0 6
1358: PPUSH
1359: LD_VAR 0 7
1363: PPUSH
1364: LD_VAR 0 8
1368: PPUSH
1369: LD_VAR 0 9
1373: PPUSH
1374: CALL_OW 185
// end ;
1378: LD_VAR 0 2
1382: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 7
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 21
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 70
1421: IFFALSE 1565
1423: GO 1425
1425: DISABLE
1426: LD_INT 0
1428: PPUSH
1429: PPUSH
1430: PPUSH
// begin enable ;
1431: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1432: LD_ADDR_VAR 0 1
1436: PUSH
1437: LD_INT 4
1439: PPUSH
1440: LD_INT 22
1442: PUSH
1443: LD_INT 7
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 3
1452: PUSH
1453: LD_INT 21
1455: PUSH
1456: LD_INT 3
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_INT 225
1483: PUSH
1484: LD_INT 16
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: ST_TO_ADDR
// if Prob ( 50 ) then
1491: LD_INT 50
1493: PPUSH
1494: CALL_OW 13
1498: IFFALSE 1515
// xy := [ 170 , 13 ] ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: LD_INT 170
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i in tmp do
1515: LD_ADDR_VAR 0 2
1519: PUSH
1520: LD_VAR 0 1
1524: PUSH
1525: FOR_IN
1526: IFFALSE 1563
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 2
1549: ARRAY
1550: PPUSH
1551: LD_INT 12
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL_OW 483
1561: GO 1525
1563: POP
1564: POP
// end ;
1565: PPOPN 3
1567: END
// every 12 12$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1568: LD_INT 22
1570: PUSH
1571: LD_INT 7
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_EXP 9
1587: AND
1588: IFFALSE 1735
1590: GO 1592
1592: DISABLE
1593: LD_INT 0
1595: PPUSH
// begin enable ;
1596: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1597: LD_ADDR_EXP 31
1601: PUSH
1602: LD_EXP 31
1606: PUSH
1607: LD_INT 1
1609: PLUS
1610: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1611: LD_ADDR_VAR 0 1
1615: PUSH
1616: DOUBLE
1617: LD_INT 1
1619: DEC
1620: ST_TO_ADDR
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_EXP 31
1645: PLUS
1646: PUSH
1647: FOR_TO
1648: IFFALSE 1678
// begin ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: CALL 1137 0 1
// end ;
1676: GO 1647
1678: POP
1679: POP
// repeat wait ( 0 0$01 ) ;
1680: LD_INT 35
1682: PPUSH
1683: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1687: LD_EXP 32
1691: PUSH
1692: LD_INT 4
1694: PUSH
1695: LD_INT 5
1697: PUSH
1698: LD_INT 5
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_OWVAR 67
1710: ARRAY
1711: PUSH
1712: LD_EXP 31
1716: PLUS
1717: GREATEREQUAL
1718: IFFALSE 1680
// AddComMoveXY ( al_force , 143 , 178 ) ;
1720: LD_EXP 32
1724: PPUSH
1725: LD_INT 143
1727: PPUSH
1728: LD_INT 178
1730: PPUSH
1731: CALL_OW 171
// end ;
1735: PPOPN 1
1737: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1738: LD_INT 6
1740: PPUSH
1741: LD_INT 22
1743: PUSH
1744: LD_INT 7
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 70
1755: IFFALSE 1835
1757: GO 1759
1759: DISABLE
1760: LD_INT 0
1762: PPUSH
// begin enable ;
1763: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1764: LD_ADDR_VAR 0 1
1768: PUSH
1769: LD_INT 6
1771: PPUSH
1772: LD_INT 22
1774: PUSH
1775: LD_INT 7
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PPUSH
1782: CALL_OW 70
1786: PUSH
1787: FOR_IN
1788: IFFALSE 1833
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_INT 81
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 255
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: PPUSH
1817: LD_VAR 0 1
1821: PPUSH
1822: CALL_OW 74
1826: PPUSH
1827: CALL_OW 115
1831: GO 1787
1833: POP
1834: POP
// end ;
1835: PPOPN 1
1837: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1838: LD_EXP 9
1842: IFFALSE 1939
1844: GO 1846
1846: DISABLE
1847: LD_INT 0
1849: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1850: LD_ADDR_VAR 0 1
1854: PUSH
1855: LD_INT 18900
1857: PUSH
1858: LD_INT 18200
1860: PUSH
1861: LD_INT 16450
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_OWVAR 67
1873: ARRAY
1874: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1875: CALL 9355 0 0
// wait ( reload_time / 2 ) ;
1879: LD_VAR 0 1
1883: PUSH
1884: LD_INT 2
1886: DIVREAL
1887: PPUSH
1888: CALL_OW 67
// ActiveArtifact2 ( ) ;
1892: CALL 9800 0 0
// wait ( reload_time / 2 ) ;
1896: LD_VAR 0 1
1900: PUSH
1901: LD_INT 2
1903: DIVREAL
1904: PPUSH
1905: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1909: LD_INT 22
1911: PUSH
1912: LD_INT 7
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 30
1921: PUSH
1922: LD_INT 8
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: IFFALSE 1875
// end ; end_of_file
1939: PPOPN 1
1941: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1942: LD_INT 0
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// uc_side := 8 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 8
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1966: LD_ADDR_VAR 0 4
1970: PUSH
1971: LD_INT 7
1973: PUSH
1974: LD_INT 8
1976: PUSH
1977: LD_INT 9
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_OWVAR 67
1989: ARRAY
1990: ST_TO_ADDR
// dep := ar_base ;
1991: LD_ADDR_VAR 0 5
1995: PUSH
1996: LD_INT 57
1998: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1999: LD_ADDR_VAR 0 6
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 8
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PPUSH
2028: CALL_OW 69
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2037: LD_VAR 0 5
2041: PPUSH
2042: CALL_OW 274
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_INT 999999
2052: PPUSH
2053: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 274
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 10000
2072: PPUSH
2073: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2077: LD_VAR 0 5
2081: PPUSH
2082: CALL_OW 274
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 10000
2092: PPUSH
2093: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2097: LD_INT 68
2099: PPUSH
2100: LD_INT 224
2102: PPUSH
2103: LD_INT 5
2105: PPUSH
2106: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 6
2118: PPUSH
2119: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2123: LD_ADDR_OWVAR 26
2127: PUSH
2128: LD_STRING Nicolas Vervecken
2130: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2131: LD_ADDR_OWVAR 33
2135: PUSH
2136: LD_STRING SecondCharsGal
2138: ST_TO_ADDR
// hc_face_number := 3 ;
2139: LD_ADDR_OWVAR 34
2143: PUSH
2144: LD_INT 3
2146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2147: LD_ADDR_OWVAR 29
2151: PUSH
2152: LD_INT 11
2154: PUSH
2155: LD_INT 10
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
// Vervecken := CreateHuman ;
2162: LD_ADDR_EXP 3
2166: PUSH
2167: CALL_OW 44
2171: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2172: LD_EXP 3
2176: PPUSH
2177: LD_VAR 0 5
2181: PPUSH
2182: CALL_OW 52
// InitHc ;
2186: CALL_OW 19
// for i = 1 to 4 do
2190: LD_ADDR_VAR 0 2
2194: PUSH
2195: DOUBLE
2196: LD_INT 1
2198: DEC
2199: ST_TO_ADDR
2200: LD_INT 4
2202: PUSH
2203: FOR_TO
2204: IFFALSE 2265
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2206: LD_INT 0
2208: PPUSH
2209: LD_INT 9
2211: PPUSH
2212: LD_VAR 0 4
2216: PPUSH
2217: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2221: CALL_OW 44
2225: PPUSH
2226: LD_INT 22
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 5
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL_OW 69
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: CALL_OW 52
// end ;
2263: GO 2203
2265: POP
2266: POP
// for i = 1 to 2 do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_INT 2
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2342
// begin PrepareHuman ( false , 4 , skill ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: LD_VAR 0 4
2293: PPUSH
2294: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2298: CALL_OW 44
2302: PPUSH
2303: LD_INT 22
2305: PUSH
2306: LD_INT 8
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// end ;
2340: GO 2280
2342: POP
2343: POP
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2395
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2360: LD_INT 0
2362: PPUSH
2363: LD_INT 3
2365: PPUSH
2366: LD_VAR 0 4
2370: PUSH
2371: LD_INT 1
2373: PLUS
2374: PPUSH
2375: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2379: CALL_OW 44
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
// end ;
2393: GO 2357
2395: POP
2396: POP
// uc_nation := 0 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 0
2404: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 22
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 32
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2477
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 15
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2461: CALL_OW 44
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: CALL_OW 52
// end ;
2475: GO 2439
2477: POP
2478: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 5
2484: PPUSH
2485: LD_INT 10
2487: PPUSH
2488: CALL_OW 380
// un := CreateHuman ;
2492: LD_ADDR_VAR 0 3
2496: PUSH
2497: CALL_OW 44
2501: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2502: LD_VAR 0 3
2506: PPUSH
2507: LD_INT 175
2509: PPUSH
2510: LD_INT 128
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 115
2527: PPUSH
2528: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2532: LD_INT 0
2534: PPUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 380
// un := CreateHuman ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 44
2554: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 240
2562: PPUSH
2563: LD_INT 128
2565: PPUSH
2566: CALL_OW 428
2570: PPUSH
2571: CALL_OW 52
// un := CreateHuman ;
2575: LD_ADDR_VAR 0 3
2579: PUSH
2580: CALL_OW 44
2584: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2585: LD_VAR 0 3
2589: PPUSH
2590: LD_INT 1
2592: PPUSH
2593: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 260
2604: PPUSH
2605: LD_INT 147
2607: PPUSH
2608: CALL_OW 428
2612: PPUSH
2613: CALL_OW 52
// for i = 1 to 2 do
2617: LD_ADDR_VAR 0 2
2621: PUSH
2622: DOUBLE
2623: LD_INT 1
2625: DEC
2626: ST_TO_ADDR
2627: LD_INT 2
2629: PUSH
2630: FOR_TO
2631: IFFALSE 2656
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2633: LD_VAR 0 6
2637: PPUSH
2638: LD_INT 14
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_INT 31
2649: PPUSH
2650: CALL_OW 185
2654: GO 2630
2656: POP
2657: POP
// end ;
2658: LD_VAR 0 1
2662: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
// for i = 1 to num do
2667: LD_ADDR_VAR 0 3
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_VAR 0 1
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2755
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2685: LD_INT 22
2687: PUSH
2688: LD_INT 8
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 3
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 69
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_INT 11
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 23
2729: PUSH
2730: LD_INT 24
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 2
2742: PPUSH
2743: CALL_OW 12
2747: ARRAY
2748: PPUSH
2749: CALL_OW 185
2753: GO 2682
2755: POP
2756: POP
// end ;
2757: LD_VAR 0 2
2761: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2762: LD_INT 0
2764: PPUSH
2765: PPUSH
2766: PPUSH
// uc_side := 8 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 8
2774: ST_TO_ADDR
// uc_nation := 0 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// hc_class := 17 ;
2783: LD_ADDR_OWVAR 28
2787: PUSH
2788: LD_INT 17
2790: ST_TO_ADDR
// hc_gallery :=  ;
2791: LD_ADDR_OWVAR 33
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// hc_name :=  ;
2799: LD_ADDR_OWVAR 26
2803: PUSH
2804: LD_STRING 
2806: ST_TO_ADDR
// hc_importance := 0 ;
2807: LD_ADDR_OWVAR 32
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2815: LD_ADDR_OWVAR 31
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 10
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: ST_TO_ADDR
// if ar_base then
2838: LD_INT 57
2840: IFFALSE 2885
// begin un := CreateHuman ;
2842: LD_ADDR_VAR 0 3
2846: PUSH
2847: CALL_OW 44
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_INT 57
2859: PPUSH
2860: CALL_OW 52
// ComExitBuilding ( un ) ;
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2873: LD_VAR 0 3
2877: PPUSH
2878: LD_INT 68
2880: PPUSH
2881: CALL_OW 180
// end ; end ;
2885: LD_VAR 0 1
2889: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
// legion_force := [ ] ;
2894: LD_ADDR_EXP 33
2898: PUSH
2899: EMPTY
2900: ST_TO_ADDR
// l_allow_attack := false ;
2901: LD_ADDR_EXP 34
2905: PUSH
2906: LD_INT 0
2908: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 2663 0 1
// repeat wait ( 0 0$01 ) ;
2918: LD_INT 35
2920: PPUSH
2921: CALL_OW 67
// until legion_force >= n1 ;
2925: LD_EXP 33
2929: PUSH
2930: LD_VAR 0 1
2934: GREATEREQUAL
2935: IFFALSE 2918
// l_allow_attack := true ;
2937: LD_ADDR_EXP 34
2941: PUSH
2942: LD_INT 1
2944: ST_TO_ADDR
// for i = 1 to n2 do
2945: LD_ADDR_VAR 0 4
2949: PUSH
2950: DOUBLE
2951: LD_INT 1
2953: DEC
2954: ST_TO_ADDR
2955: LD_VAR 0 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 2969
// begin AddKamikaze ( ) ;
2963: CALL 2762 0 0
// end ;
2967: GO 2960
2969: POP
2970: POP
// end ;
2971: LD_VAR 0 3
2975: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2976: LD_INT 22
2978: PUSH
2979: LD_INT 8
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 50
2988: PUSH
2989: EMPTY
2990: LIST
2991: PUSH
2992: LD_INT 33
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 61
3007: PUSH
3008: EMPTY
3009: LIST
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: IFFALSE 3105
3027: GO 3029
3029: DISABLE
3030: LD_INT 0
3032: PPUSH
// begin enable ;
3033: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3034: LD_ADDR_VAR 0 1
3038: PUSH
3039: LD_INT 22
3041: PUSH
3042: LD_INT 8
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 50
3051: PUSH
3052: EMPTY
3053: LIST
3054: PUSH
3055: LD_INT 33
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 61
3070: PUSH
3071: EMPTY
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3103
// Connect ( i ) ;
3092: LD_VAR 0 1
3096: PPUSH
3097: CALL 38420 0 1
3101: GO 3089
3103: POP
3104: POP
// end ;
3105: PPOPN 1
3107: END
// every 5 5$00 trigger legion_attacks_active do
3108: LD_EXP 7
3112: IFFALSE 3164
3114: GO 3116
3116: DISABLE
// begin enable ;
3117: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3118: LD_INT 5250
3120: PUSH
3121: LD_INT 2100
3123: PUSH
3124: LD_INT 1050
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PUSH
3132: LD_OWVAR 67
3136: ARRAY
3137: PPUSH
3138: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3142: LD_EXP 8
3146: PUSH
3147: LD_INT 2
3149: MINUS
3150: PUSH
3151: LD_OWVAR 67
3155: PLUS
3156: PPUSH
3157: LD_INT 2
3159: PPUSH
3160: CALL 2890 0 2
// end ;
3164: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3165: LD_EXP 34
3169: PUSH
3170: LD_EXP 33
3174: PPUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 61
3190: PUSH
3191: EMPTY
3192: LIST
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: AND
3210: IFFALSE 3341
3212: GO 3214
3214: DISABLE
3215: LD_INT 0
3217: PPUSH
3218: PPUSH
// begin enable ;
3219: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 33
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 60
3235: PUSH
3236: EMPTY
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: EMPTY
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: PPUSH
3260: CALL_OW 72
3264: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3265: LD_ADDR_VAR 0 1
3269: PUSH
3270: LD_INT 150
3272: PUSH
3273: LD_INT 93
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 232
3282: PUSH
3283: LD_INT 88
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 209
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 208
3302: PUSH
3303: LD_INT 29
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 191
3312: PUSH
3313: LD_INT 17
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL 70386 0 2
// end ;
3341: PPOPN 2
3343: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3344: LD_INT 6
3346: PPUSH
3347: LD_INT 22
3349: PUSH
3350: LD_INT 8
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 25
3359: PUSH
3360: LD_INT 17
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 70
3375: IFFALSE 3462
3377: GO 3379
3379: DISABLE
3380: LD_INT 0
3382: PPUSH
// begin enable ;
3383: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: LD_INT 6
3391: PPUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 8
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 17
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 70
3420: PUSH
3421: FOR_IN
3422: IFFALSE 3460
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3424: LD_VAR 0 1
3428: PPUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PPUSH
3439: CALL_OW 69
3443: PPUSH
3444: LD_VAR 0 1
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
3458: GO 3421
3460: POP
3461: POP
// end ;
3462: PPOPN 1
3464: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3465: LD_INT 68
3467: IFFALSE 3698
3469: GO 3471
3471: DISABLE
3472: LD_INT 0
3474: PPUSH
3475: PPUSH
3476: PPUSH
// begin enable ;
3477: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: LD_INT 224
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 160
3495: PUSH
3496: LD_INT 4
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 228
3505: PUSH
3506: LD_INT 56
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 271
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: ST_TO_ADDR
// for i = 1 to 3 do
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: DOUBLE
3535: LD_INT 1
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 3
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3559
// EraseResourceArea ( telArea , i ) ;
3545: LD_INT 7
3547: PPUSH
3548: LD_VAR 0 3
3552: PPUSH
3553: CALL_OW 286
3557: GO 3542
3559: POP
3560: POP
// for i = xy downto 1 do
3561: LD_ADDR_VAR 0 3
3565: PUSH
3566: DOUBLE
3567: LD_VAR 0 2
3571: INC
3572: ST_TO_ADDR
3573: LD_INT 1
3575: PUSH
3576: FOR_DOWNTO
3577: IFFALSE 3659
// begin k := rand ( 1 , xy ) ;
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 2
3591: PPUSH
3592: CALL_OW 12
3596: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3597: LD_VAR 0 2
3601: PUSH
3602: LD_VAR 0 1
3606: ARRAY
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: CALL_OW 428
3631: IFFALSE 3655
// xy := Delete ( xy , k ) else
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_VAR 0 1
3647: PPUSH
3648: CALL_OW 3
3652: ST_TO_ADDR
3653: GO 3657
// break ;
3655: GO 3659
// end ;
3657: GO 3576
3659: POP
3660: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3661: LD_INT 68
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_VAR 0 1
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: PPUSH
3679: LD_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: ARRAY
3689: PUSH
3690: LD_INT 2
3692: ARRAY
3693: PPUSH
3694: CALL_OW 243
// end ; end_of_file
3698: PPOPN 3
3700: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3701: LD_INT 0
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
// uc_side := 6 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 6
3717: ST_TO_ADDR
// uc_nation := nation_russian ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 3
3725: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3726: LD_INT 6
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3736: LD_ADDR_VAR 0 6
3740: PUSH
3741: LD_INT 9
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 8
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_OWVAR 67
3780: ARRAY
3781: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3782: LD_ADDR_VAR 0 3
3786: PUSH
3787: LD_INT 9
3789: PUSH
3790: LD_INT 8
3792: PUSH
3793: LD_INT 7
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_OWVAR 67
3805: ARRAY
3806: ST_TO_ADDR
// tmp := [ ] ;
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3814: LD_ADDR_EXP 2
3818: PUSH
3819: LD_STRING Davidov
3821: PPUSH
3822: CALL_OW 25
3826: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3827: LD_EXP 2
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 7
3837: PPUSH
3838: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3842: LD_EXP 2
3846: PPUSH
3847: LD_INT 2
3849: PPUSH
3850: LD_INT 8
3852: PPUSH
3853: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3857: LD_EXP 2
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 6
3867: PPUSH
3868: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3872: LD_EXP 2
3876: PPUSH
3877: LD_INT 4
3879: PPUSH
3880: LD_INT 10
3882: PPUSH
3883: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3887: LD_EXP 2
3891: PPUSH
3892: LD_INT 4
3894: PPUSH
3895: CALL_OW 336
// hc_importance := 0 ;
3899: LD_ADDR_OWVAR 32
3903: PUSH
3904: LD_INT 0
3906: ST_TO_ADDR
// while amount [ 1 ] do
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: IFFALSE 4248
// begin Wait ( 1 ) ;
3917: LD_INT 1
3919: PPUSH
3920: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3924: LD_ADDR_VAR 0 7
3928: PUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 4
3934: PPUSH
3935: CALL_OW 12
3939: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3940: LD_VAR 0 6
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PUSH
3949: LD_VAR 0 5
3953: AND
3954: IFFALSE 4109
// begin if k in [ 1 , 2 ] then
3956: LD_VAR 0 7
3960: PUSH
3961: LD_INT 1
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: IN
3971: IFFALSE 3981
// k := 3 ;
3973: LD_ADDR_VAR 0 7
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3981: LD_ADDR_OWVAR 37
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 24
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 12
4006: ARRAY
4007: ST_TO_ADDR
// vc_engine := engine_siberite ;
4008: LD_ADDR_OWVAR 39
4012: PUSH
4013: LD_INT 3
4015: ST_TO_ADDR
// vc_control := control_manual ;
4016: LD_ADDR_OWVAR 38
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4024: LD_ADDR_OWVAR 40
4028: PUSH
4029: LD_INT 44
4031: PUSH
4032: LD_INT 45
4034: PUSH
4035: LD_INT 43
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 1
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: CALL_OW 12
4053: ARRAY
4054: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 45
4072: PPUSH
4073: CALL_OW 2
4077: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_INT 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PUSH
4096: LD_INT 2
4098: ARRAY
4099: PUSH
4100: LD_INT 1
4102: MINUS
4103: PPUSH
4104: CALL_OW 1
4108: ST_TO_ADDR
// end ; if not tmp then
4109: LD_VAR 0 5
4113: NOT
4114: IFFALSE 4124
// k := 2 ;
4116: LD_ADDR_VAR 0 7
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4124: LD_VAR 0 6
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 7
4141: PUSH
4142: LD_INT 3
4144: EQUAL
4145: AND
4146: IFFALSE 4175
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4148: LD_ADDR_VAR 0 7
4152: PUSH
4153: LD_INT 9
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 2
4168: PPUSH
4169: CALL_OW 12
4173: ARRAY
4174: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4192: LD_ADDR_VAR 0 5
4196: PUSH
4197: LD_VAR 0 5
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: CALL_OW 44
4209: PPUSH
4210: CALL_OW 2
4214: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4215: LD_ADDR_VAR 0 6
4219: PUSH
4220: LD_VAR 0 6
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_VAR 0 6
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PUSH
4237: LD_INT 1
4239: MINUS
4240: PPUSH
4241: CALL_OW 1
4245: ST_TO_ADDR
// end ;
4246: GO 3907
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PLUS
4266: PPUSH
4267: LD_EXP 2
4271: PPUSH
4272: CALL_OW 2
4276: ST_TO_ADDR
// for i = tmp downto 1 do
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: DOUBLE
4283: LD_VAR 0 5
4287: INC
4288: ST_TO_ADDR
4289: LD_INT 1
4291: PUSH
4292: FOR_DOWNTO
4293: IFFALSE 4455
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4295: LD_VAR 0 5
4299: PUSH
4300: LD_VAR 0 2
4304: ARRAY
4305: PPUSH
4306: CALL_OW 247
4310: PUSH
4311: LD_INT 2
4313: EQUAL
4314: IFFALSE 4404
// begin SetDir ( tmp [ i ] , 3 ) ;
4316: LD_VAR 0 5
4320: PUSH
4321: LD_VAR 0 2
4325: ARRAY
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4334: LD_VAR 0 5
4338: PUSH
4339: LD_VAR 0 2
4343: ARRAY
4344: PPUSH
4345: LD_INT 193
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 2
4367: PUSH
4368: LD_INT 1
4370: MINUS
4371: ARRAY
4372: PPUSH
4373: LD_VAR 0 5
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PPUSH
4384: CALL_OW 52
// i := i - 1 ;
4388: LD_ADDR_VAR 0 2
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 1
4400: MINUS
4401: ST_TO_ADDR
// end else
4402: GO 4425
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4404: LD_VAR 0 5
4408: PUSH
4409: LD_VAR 0 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4425: LD_VAR 0 5
4429: PUSH
4430: LD_VAR 0 2
4434: ARRAY
4435: PPUSH
4436: LD_INT 197
4438: PPUSH
4439: LD_INT 22
4441: PPUSH
4442: CALL_OW 111
// Wait ( 0 0$02 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4292
4455: POP
4456: POP
// Wait ( 0 0$02 ) ;
4457: LD_INT 70
4459: PPUSH
4460: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4464: LD_ADDR_OWVAR 37
4468: PUSH
4469: LD_INT 22
4471: ST_TO_ADDR
// vc_engine := engine_siberite ;
4472: LD_ADDR_OWVAR 39
4476: PUSH
4477: LD_INT 3
4479: ST_TO_ADDR
// vc_control := control_computer ;
4480: LD_ADDR_OWVAR 38
4484: PUSH
4485: LD_INT 3
4487: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4488: LD_ADDR_OWVAR 40
4492: PUSH
4493: LD_INT 51
4495: ST_TO_ADDR
// tmp := CreateVehicle ;
4496: LD_ADDR_VAR 0 5
4500: PUSH
4501: CALL_OW 45
4505: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4506: LD_VAR 0 5
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4518: LD_VAR 0 5
4522: PPUSH
4523: LD_INT 193
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 0
4531: PPUSH
4532: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4536: LD_VAR 0 5
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 60
4546: PPUSH
4547: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 197
4558: PPUSH
4559: LD_INT 22
4561: PPUSH
4562: CALL_OW 111
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4571: LD_INT 0
4573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4574: LD_VAR 0 1
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 10346 0 2
// side := GetSide ( fac ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// case side of 7 :
4603: LD_VAR 0 3
4607: PUSH
4608: LD_INT 7
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4663
4616: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4617: LD_ADDR_EXP 32
4621: PUSH
4622: LD_EXP 32
4626: PPUSH
4627: LD_EXP 32
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 1
4645: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 112
4653: PPUSH
4654: LD_INT 175
4656: PPUSH
4657: CALL_OW 171
// end ; 8 :
4661: GO 4749
4663: LD_INT 8
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4671
4669: GO 4748
4671: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 264
4681: PUSH
4682: LD_INT 31
4684: EQUAL
4685: IFFALSE 4702
// ComMoveXY ( veh , 145 , 66 ) ;
4687: LD_VAR 0 1
4691: PPUSH
4692: LD_INT 145
4694: PPUSH
4695: LD_INT 66
4697: PPUSH
4698: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 265
4711: PUSH
4712: LD_INT 11
4714: EQUAL
4715: IFFALSE 4746
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4717: LD_ADDR_EXP 33
4721: PUSH
4722: LD_EXP 33
4726: PPUSH
4727: LD_EXP 33
4731: PUSH
4732: LD_INT 1
4734: PLUS
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 1
4745: ST_TO_ADDR
// end ; end ;
4746: GO 4749
4748: POP
// end ;
4749: PPOPN 3
4751: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL 10226 0 1
// if un in legion_force then
4761: LD_VAR 0 1
4765: PUSH
4766: LD_EXP 33
4770: IN
4771: IFFALSE 4789
// legion_force := legion_force diff un ;
4773: LD_ADDR_EXP 33
4777: PUSH
4778: LD_EXP 33
4782: PUSH
4783: LD_VAR 0 1
4787: DIFF
4788: ST_TO_ADDR
// if un in al_force then
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 32
4798: IN
4799: IFFALSE 4817
// al_force := al_force diff un ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_EXP 32
4810: PUSH
4811: LD_VAR 0 1
4815: DIFF
4816: ST_TO_ADDR
// end ;
4817: PPOPN 1
4819: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 68
4827: EQUAL
4828: PUSH
4829: LD_VAR 0 2
4833: PPUSH
4834: CALL_OW 257
4838: PUSH
4839: LD_INT 17
4841: EQUAL
4842: AND
4843: IFFALSE 4886
// begin Wait ( 0 0$01 ) ;
4845: LD_INT 35
4847: PPUSH
4848: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 69
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 74
4881: PPUSH
4882: CALL_OW 115
// end ; end ;
4886: PPOPN 2
4888: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , apes , n ;
4889: LD_INT 0
4891: PPUSH
4892: PPUSH
4893: PPUSH
// begin if InArea ( x , y , cratesArea ) and FilterUnitsInArea ( islandArea , [ f_enemy , 6 ] ) = 0 then
4894: LD_VAR 0 2
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 3
4906: PPUSH
4907: CALL_OW 309
4911: PUSH
4912: LD_INT 6
4914: PPUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 6
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 70
4929: PUSH
4930: LD_INT 0
4932: EQUAL
4933: AND
4934: IFFALSE 5097
// begin apes := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 16 ] ] ) ;
4936: LD_ADDR_VAR 0 7
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 6
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 16
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: ST_TO_ADDR
// if apes = 0 or FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 then
4970: LD_VAR 0 7
4974: PUSH
4975: LD_INT 0
4977: EQUAL
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 6
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 0
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 30
5004: PUSH
5005: LD_INT 1
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PUSH
5026: LD_INT 0
5028: EQUAL
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 5097
// if UnitFilter ( apes , [ f_inside ] ) then
5034: LD_VAR 0 7
5038: PPUSH
5039: LD_INT 54
5041: PUSH
5042: EMPTY
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: IFFALSE 5078
// begin ComExitBuilding ( UnitFilter ( apes , [ f_inside ] ) ) ;
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 54
5058: PUSH
5059: EMPTY
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: PPUSH
5067: CALL_OW 122
// wait ( 3 ) ;
5071: LD_INT 3
5073: PPUSH
5074: CALL_OW 67
// end ; AddComCollect ( apes , x , y ) ;
5078: LD_VAR 0 7
5082: PPUSH
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: CALL_OW 177
// end ; end ;
5097: PPOPN 8
5099: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
5100: LD_VAR 0 1
5104: PUSH
5105: LD_EXP 32
5109: IN
5110: IFFALSE 5128
// al_force := al_force diff un ;
5112: LD_ADDR_EXP 32
5116: PUSH
5117: LD_EXP 32
5121: PUSH
5122: LD_VAR 0 1
5126: DIFF
5127: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 263
5137: PUSH
5138: LD_INT 2
5140: EQUAL
5141: IFFALSE 5152
// ComUnlink ( un ) ;
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
5152: LD_VAR 0 1
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 8
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: IN
5186: IFFALSE 5204
// begin wait ( 0 0$2 ) ;
5188: LD_INT 70
5190: PPUSH
5191: CALL_OW 67
// ComAutodestruct ( un ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 63295 0 1
// end ; end ;
5204: PPOPN 1
5206: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
5207: LD_VAR 0 1
5211: PUSH
5212: LD_INT 25
5214: EQUAL
5215: IFFALSE 5225
// player_start_res_sib_bomb := true ;
5217: LD_ADDR_EXP 4
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if tech = tech_artifact then
5225: LD_VAR 0 1
5229: PUSH
5230: LD_INT 24
5232: EQUAL
5233: IFFALSE 5243
// player_start_res_artifact := true ;
5235: LD_ADDR_EXP 5
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ;
5243: PPOPN 2
5245: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5246: LD_VAR 0 2
5250: PUSH
5251: LD_INT 6
5253: EQUAL
5254: IFFALSE 5264
// player_artifact_loaded := false ;
5256: LD_ADDR_EXP 18
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// end ;
5264: PPOPN 2
5266: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// player_artifact_loaded := true ;
5277: LD_ADDR_EXP 18
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ;
5285: PPOPN 2
5287: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5288: LD_INT 0
5290: PPUSH
// begin player_used_sib_bomb := true ;
5291: LD_ADDR_EXP 12
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// for i = 1 to 3 do
5299: LD_ADDR_VAR 0 4
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_INT 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5386
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_EXP 15
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: CALL_OW 298
5359: PUSH
5360: LD_EXP 17
5364: LESSEQUAL
5365: IFFALSE 5384
// begin wait ( 0 0$5 ) ;
5367: LD_INT 175
5369: PPUSH
5370: CALL_OW 67
// artifact_destroyed := true ;
5374: LD_ADDR_EXP 16
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// break ;
5382: GO 5386
// end ; end ;
5384: GO 5312
5386: POP
5387: POP
// end ;
5388: PPOPN 4
5390: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_VAR 0 3
5405: PPUSH
5406: CALL 10322 0 3
// end ;
5410: PPOPN 3
5412: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL 10330 0 1
// end ; end_of_file
5422: PPOPN 1
5424: END
// export function CreateArtifact ( type , x , y ) ; begin
5425: LD_INT 0
5427: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5428: LD_INT 4
5430: PPUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 58
// end ;
5453: LD_VAR 0 4
5457: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
// if not GetControl ( veh ) = control_manual then
5463: LD_VAR 0 1
5467: PPUSH
5468: CALL_OW 263
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: NOT
5477: IFFALSE 5489
// result := false else
5479: LD_ADDR_VAR 0 2
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
5487: GO 5634
// if veh in FilterAllUnits ( [ f_empty ] ) then
5489: LD_VAR 0 1
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: IN
5505: IFFALSE 5517
// result := false else
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
5515: GO 5634
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5517: LD_ADDR_VAR 0 4
5521: PUSH
5522: LD_INT 22
5524: PUSH
5525: LD_VAR 0 1
5529: PPUSH
5530: CALL_OW 255
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 55
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 69
5553: ST_TO_ADDR
// if not filter then
5554: LD_VAR 0 4
5558: NOT
5559: IFFALSE 5571
// result := false else
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
5569: GO 5634
// for i = 1 to filter do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 1
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 4
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5632
// if IsDriver ( filter [ i ] ) = veh then
5589: LD_VAR 0 4
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: CALL 65398 0 1
5604: PUSH
5605: LD_VAR 0 1
5609: EQUAL
5610: IFFALSE 5630
// begin result := filter [ i ] ;
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_VAR 0 4
5621: PUSH
5622: LD_VAR 0 3
5626: ARRAY
5627: ST_TO_ADDR
// break ;
5628: GO 5632
// end ;
5630: GO 5586
5632: POP
5633: POP
// end ; end ;
5634: LD_VAR 0 2
5638: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5639: LD_INT 0
5641: PPUSH
5642: PPUSH
5643: PPUSH
// result := 0 ;
5644: LD_ADDR_VAR 0 2
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5652: LD_ADDR_VAR 0 4
5656: PUSH
5657: LD_INT 22
5659: PUSH
5660: LD_VAR 0 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 30
5674: PUSH
5675: LD_INT 0
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 30
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PPUSH
5701: CALL_OW 69
5705: ST_TO_ADDR
// if deps then
5706: LD_VAR 0 4
5710: IFFALSE 5758
// for i in deps do
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_VAR 0 4
5721: PUSH
5722: FOR_IN
5723: IFFALSE 5756
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 2
5734: PUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 274
5744: PPUSH
5745: LD_INT 3
5747: PPUSH
5748: CALL_OW 275
5752: PLUS
5753: ST_TO_ADDR
5754: GO 5722
5756: POP
5757: POP
// end ;
5758: LD_VAR 0 2
5762: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5763: LD_INT 0
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// if val <= 0 then
5769: LD_VAR 0 2
5773: PUSH
5774: LD_INT 0
5776: LESSEQUAL
5777: IFFALSE 5781
// exit ;
5779: GO 5973
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_INT 22
5788: PUSH
5789: LD_VAR 0 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if deps then
5835: LD_VAR 0 5
5839: IFFALSE 5973
// for i in deps do
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: FOR_IN
5852: IFFALSE 5971
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5854: LD_ADDR_VAR 0 6
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: ST_TO_ADDR
// if val < s then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_VAR 0 6
5886: LESS
5887: IFFALSE 5933
// begin s := s - val ;
5889: LD_ADDR_VAR 0 6
5893: PUSH
5894: LD_VAR 0 6
5898: PUSH
5899: LD_VAR 0 2
5903: MINUS
5904: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 274
5914: PPUSH
5915: LD_INT 3
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: CALL_OW 277
// exit ;
5927: POP
5928: POP
5929: GO 5973
// end else
5931: GO 5969
// begin val := val - s ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_VAR 0 2
5942: PUSH
5943: LD_VAR 0 6
5947: MINUS
5948: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5949: LD_VAR 0 4
5953: PPUSH
5954: CALL_OW 274
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: LD_INT 0
5964: PPUSH
5965: CALL_OW 277
// end ; end ;
5969: GO 5851
5971: POP
5972: POP
// end ;
5973: LD_VAR 0 3
5977: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5978: LD_VAR 0 1
5982: PUSH
5983: LD_EXP 35
5987: IN
5988: NOT
5989: IFFALSE 6020
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5991: LD_ADDR_EXP 35
5995: PUSH
5996: LD_EXP 35
6000: PPUSH
6001: LD_EXP 35
6005: PUSH
6006: LD_INT 1
6008: PLUS
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 1
6019: ST_TO_ADDR
// end ;
6020: PPOPN 1
6022: END
// export function DestinationReachable ( unit , x , y ) ; begin
6023: LD_INT 0
6025: PPUSH
// if ValidHex ( x , y ) then
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 488
6040: IFFALSE 6066
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 428
6061: PPUSH
6062: CALL_OW 115
// wait ( 0 0$1 ) ;
6066: LD_INT 35
6068: PPUSH
6069: CALL_OW 67
// if unit in unreachableList then
6073: LD_VAR 0 1
6077: PUSH
6078: LD_EXP 35
6082: IN
6083: IFFALSE 6095
// result := false else
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
6093: GO 6103
// result := true ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
// if not result then
6103: LD_VAR 0 4
6107: NOT
6108: IFFALSE 6126
// unreachableList := unreachableList diff unit ;
6110: LD_ADDR_EXP 35
6114: PUSH
6115: LD_EXP 35
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: ST_TO_ADDR
// end ; end_of_file
6126: LD_VAR 0 4
6130: RET
// export function Action ; var dial ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
6135: LD_INT 192
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 86
// InGameOn ;
6145: CALL_OW 8
// PrepareRussian ;
6149: CALL 3701 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6153: LD_ADDR_VAR 0 2
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 6
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 69
6226: PUSH
6227: LD_EXP 2
6231: DIFF
6232: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_INT 202
6244: PPUSH
6245: LD_INT 40
6247: PPUSH
6248: CALL_OW 111
// Wait ( 0 0$03 ) ;
6252: LD_INT 105
6254: PPUSH
6255: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
6259: LD_EXP 2
6263: PPUSH
6264: LD_STRING DDav-1
6266: PPUSH
6267: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PPUSH
6280: LD_EXP 2
6284: PPUSH
6285: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
6289: LD_EXP 2
6293: PPUSH
6294: LD_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
6307: LD_INT 202
6309: PPUSH
6310: LD_INT 40
6312: PPUSH
6313: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
6317: LD_VAR 0 2
6321: PUSH
6322: LD_INT 1
6324: ARRAY
6325: PPUSH
6326: LD_STRING DRus-1
6328: PPUSH
6329: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_STRING DDav-2
6340: PPUSH
6341: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
6345: LD_VAR 0 2
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PPUSH
6354: LD_STRING DRus-2
6356: PPUSH
6357: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
6361: LD_EXP 2
6365: PPUSH
6366: LD_STRING DDav-3
6368: PPUSH
6369: CALL_OW 88
// InGameOff ;
6373: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
6377: LD_INT 10
6379: PPUSH
6380: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
6384: LD_STRING C1
6386: PPUSH
6387: CALL_OW 337
// SaveForQuickRestart ;
6391: CALL_OW 22
// end ;
6395: LD_VAR 0 1
6399: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6400: LD_INT 22
6402: PUSH
6403: LD_INT 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 30
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 30
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 8
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 69
6457: IFFALSE 6557
6459: GO 6461
6461: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6462: LD_EXP 2
6466: PPUSH
6467: LD_STRING DDav-4
6469: PPUSH
6470: CALL_OW 88
// Wait ( 0 0$40 ) ;
6474: LD_INT 1400
6476: PPUSH
6477: CALL_OW 67
// DialogueOn ;
6481: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6485: LD_EXP 3
6489: PPUSH
6490: LD_STRING Dver-Meet-1
6492: PPUSH
6493: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6497: LD_EXP 2
6501: PPUSH
6502: LD_STRING DDav-Meet-1
6504: PPUSH
6505: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6509: LD_EXP 3
6513: PPUSH
6514: LD_STRING Dver-Meet-2
6516: PPUSH
6517: CALL_OW 94
// DialogueOff ;
6521: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6525: LD_INT 19600
6527: PUSH
6528: LD_INT 15400
6530: PUSH
6531: LD_INT 13300
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_OWVAR 67
6543: ARRAY
6544: PPUSH
6545: CALL_OW 67
// legion_attacks_active := true ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// end ;
6557: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6558: LD_INT 22
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 30
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_OWVAR 1
6591: PUSH
6592: LD_INT 21000
6594: GREATER
6595: OR
6596: IFFALSE 6830
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6604: LD_ADDR_VAR 0 1
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 25
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 3
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 4
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: PUSH
6678: LD_EXP 2
6682: DIFF
6683: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6684: LD_VAR 0 1
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_STRING DRus-3
6695: PPUSH
6696: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6700: LD_EXP 2
6704: PPUSH
6705: LD_STRING DDav-5
6707: PPUSH
6708: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PPUSH
6721: LD_STRING DRus-4
6723: PPUSH
6724: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6728: LD_EXP 2
6732: PPUSH
6733: LD_STRING DDav-6
6735: PPUSH
6736: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6740: LD_STRING C2
6742: PPUSH
6743: CALL_OW 337
// Wait ( 5 5$00 ) ;
6747: LD_INT 10500
6749: PPUSH
6750: CALL_OW 67
// DialogueOn ;
6754: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6758: LD_EXP 1
6762: PPUSH
6763: LD_STRING DBag-1
6765: PPUSH
6766: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6770: LD_EXP 2
6774: PPUSH
6775: LD_STRING DDavB-1
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6782: LD_EXP 1
6786: PPUSH
6787: LD_STRING DBag-2
6789: PPUSH
6790: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6794: LD_EXP 2
6798: PPUSH
6799: LD_STRING DDavB-2
6801: PPUSH
6802: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6806: LD_EXP 1
6810: PPUSH
6811: LD_STRING DBag-3
6813: PPUSH
6814: CALL_OW 94
// DialogueOff ;
6818: CALL_OW 7
// alliance_attack_active := true ;
6822: LD_ADDR_EXP 9
6826: PUSH
6827: LD_INT 1
6829: ST_TO_ADDR
// end ;
6830: PPOPN 1
6832: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6833: LD_EXP 10
6837: IFFALSE 6884
6839: GO 6841
6841: DISABLE
// begin DialogueOn ;
6842: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 1
6853: ARRAY
6854: PPUSH
6855: LD_EXP 10
6859: PUSH
6860: LD_INT 2
6862: ARRAY
6863: PPUSH
6864: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6868: LD_EXP 2
6872: PPUSH
6873: LD_STRING DDav-Artifact1-1
6875: PPUSH
6876: CALL_OW 88
// DialogueOff ;
6880: CALL_OW 7
// end ;
6884: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6885: LD_EXP 11
6889: IFFALSE 6936
6891: GO 6893
6893: DISABLE
// begin DialogueOn ;
6894: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6898: LD_EXP 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_EXP 11
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6920: LD_EXP 2
6924: PPUSH
6925: LD_STRING DDav-Artifact2-1
6927: PPUSH
6928: CALL_OW 88
// DialogueOff ;
6932: CALL_OW 7
// end ;
6936: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6937: LD_EXP 16
6941: PUSH
6942: LD_INT 6
6944: PPUSH
6945: CALL_OW 469
6949: NOT
6950: PUSH
6951: LD_EXP 18
6955: NOT
6956: AND
6957: OR
6958: IFFALSE 6970
6960: GO 6962
6962: DISABLE
// YouLost ( artifact_destroyed ) ;
6963: LD_STRING artifact_destroyed
6965: PPUSH
6966: CALL_OW 104
6970: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6971: LD_EXP 2
6975: PPUSH
6976: CALL_OW 301
6980: IFFALSE 6992
6982: GO 6984
6984: DISABLE
// YouLost ( dead ) ;
6985: LD_STRING dead
6987: PPUSH
6988: CALL_OW 104
6992: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6993: LD_INT 22
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: PUSH
7022: LD_INT 0
7024: EQUAL
7025: IFFALSE 7159
7027: GO 7029
7029: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
7030: LD_OWVAR 1
7034: PUSH
7035: LD_INT 252000
7037: PUSH
7038: LD_INT 210000
7040: PUSH
7041: LD_INT 189000
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: LESS
7055: IFFALSE 7069
// AddMedal ( med1 , 1 ) else
7057: LD_STRING med1
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 101
7067: GO 7080
// AddMedal ( med1 , - 1 ) ;
7069: LD_STRING med1
7071: PPUSH
7072: LD_INT 1
7074: NEG
7075: PPUSH
7076: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: IFFALSE 7109
// AddMedal ( med2 , - 1 ) else
7096: LD_STRING med2
7098: PPUSH
7099: LD_INT 1
7101: NEG
7102: PPUSH
7103: CALL_OW 101
7107: GO 7119
// AddMedal ( med2 , 1 ) ;
7109: LD_STRING med2
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 101
// if player_used_sib_bomb then
7119: LD_EXP 12
7123: IFFALSE 7138
// AddMedal ( med3 , - 1 ) else
7125: LD_STRING med3
7127: PPUSH
7128: LD_INT 1
7130: NEG
7131: PPUSH
7132: CALL_OW 101
7136: GO 7148
// AddMedal ( med3 , 1 ) ;
7138: LD_STRING med3
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 101
// GiveMedals ( MAIN ) ;
7148: LD_STRING MAIN
7150: PPUSH
7151: CALL_OW 102
// YouWin ;
7155: CALL_OW 103
// end ; end_of_file
7159: END
// every 0 0$22 + 0 0$2 do
7160: GO 7162
7162: DISABLE
// begin enable ;
7163: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
7164: LD_INT 4
7166: PPUSH
7167: LD_INT 5
7169: PPUSH
7170: CALL_OW 12
7174: PPUSH
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 1
7180: PPUSH
7181: CALL_OW 55
// if tick >= 4 4$00 then
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 8400
7192: GREATEREQUAL
7193: IFFALSE 7200
// begin disable ;
7195: DISABLE
// CratesSpawn ( ) ;
7196: CALL 7201 0 0
// end ; end ;
7200: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
7201: LD_INT 0
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 30000
7214: PUSH
7215: LD_INT 20000
7217: PUSH
7218: LD_INT 10000
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_OWVAR 67
7230: ARRAY
7231: ST_TO_ADDR
// while amount > 0 do
7232: LD_VAR 0 3
7236: PUSH
7237: LD_INT 0
7239: GREATER
7240: IFFALSE 7310
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
7242: LD_INT 1050
7244: PPUSH
7245: LD_INT 3150
7247: PPUSH
7248: CALL_OW 12
7252: PPUSH
7253: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7257: LD_ADDR_VAR 0 4
7261: PUSH
7262: LD_INT 1
7264: PPUSH
7265: LD_INT 5
7267: PPUSH
7268: CALL_OW 12
7272: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_INT 10
7290: MUL
7291: MINUS
7292: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_INT 3
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 55
// end ;
7308: GO 7232
// end ; end_of_file
7310: LD_VAR 0 1
7314: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird , horse ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
// uc_nation = nation_nature ;
7323: LD_ADDR_OWVAR 21
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// uc_side = 0 ;
7331: LD_ADDR_OWVAR 20
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// l = 0 ;
7339: LD_ADDR_VAR 0 6
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
7347: LD_ADDR_OWVAR 24
7351: PUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 5
7357: PPUSH
7358: CALL_OW 12
7362: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
7363: LD_ADDR_OWVAR 35
7367: PUSH
7368: LD_INT 5
7370: NEG
7371: PPUSH
7372: LD_INT 5
7374: PPUSH
7375: CALL_OW 12
7379: ST_TO_ADDR
// hc_gallery =  ;
7380: LD_ADDR_OWVAR 33
7384: PUSH
7385: LD_STRING 
7387: ST_TO_ADDR
// hc_class = class_apeman ;
7388: LD_ADDR_OWVAR 28
7392: PUSH
7393: LD_INT 12
7395: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7396: LD_ADDR_OWVAR 29
7400: PUSH
7401: LD_INT 11
7403: PPUSH
7404: LD_INT 13
7406: PPUSH
7407: CALL_OW 12
7411: PUSH
7412: LD_INT 10
7414: PPUSH
7415: LD_INT 11
7417: PPUSH
7418: CALL_OW 12
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
// hc_sex = sex_male ;
7427: LD_ADDR_OWVAR 27
7431: PUSH
7432: LD_INT 1
7434: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7435: LD_ADDR_OWVAR 31
7439: PUSH
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 12
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// apeman = CreateHuman ;
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
7476: LD_VAR 0 7
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: LD_INT 0
7488: PPUSH
7489: CALL_OW 49
// l = l + 1 ;
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: LD_VAR 0 6
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: ST_TO_ADDR
// end until l = num1 ;
7507: LD_VAR 0 6
7511: PUSH
7512: LD_VAR 0 1
7516: EQUAL
7517: IFFALSE 7347
// l = 0 ;
7519: LD_ADDR_VAR 0 6
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
7527: LD_ADDR_OWVAR 35
7531: PUSH
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 25
7537: PPUSH
7538: CALL_OW 12
7542: ST_TO_ADDR
// hc_class = class_tiger ;
7543: LD_ADDR_OWVAR 28
7547: PUSH
7548: LD_INT 14
7550: ST_TO_ADDR
// hc_sex = sex_male ;
7551: LD_ADDR_OWVAR 27
7555: PUSH
7556: LD_INT 1
7558: ST_TO_ADDR
// hc_gallery = sandnature ;
7559: LD_ADDR_OWVAR 33
7563: PUSH
7564: LD_STRING sandnature
7566: ST_TO_ADDR
// hc_face_number = 3 ;
7567: LD_ADDR_OWVAR 34
7571: PUSH
7572: LD_INT 3
7574: ST_TO_ADDR
// tiger = CreateHuman ;
7575: LD_ADDR_VAR 0 8
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 4
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// l = l + 1 ;
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 6
7611: PUSH
7612: LD_INT 1
7614: PLUS
7615: ST_TO_ADDR
// end until l = num2 ;
7616: LD_VAR 0 6
7620: PUSH
7621: LD_VAR 0 2
7625: EQUAL
7626: IFFALSE 7527
// l = 0 ;
7628: LD_ADDR_VAR 0 6
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
7636: LD_ADDR_OWVAR 28
7640: PUSH
7641: LD_INT 18
7643: ST_TO_ADDR
// hc_gallery = sandnature ;
7644: LD_ADDR_OWVAR 33
7648: PUSH
7649: LD_STRING sandnature
7651: ST_TO_ADDR
// hc_face_number = 1 ;
7652: LD_ADDR_OWVAR 34
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// bird = CreateHuman ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
7670: LD_VAR 0 9
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL_OW 51
// l = l + 1 ;
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 6
7691: PUSH
7692: LD_INT 1
7694: PLUS
7695: ST_TO_ADDR
// end until l = num3 ;
7696: LD_VAR 0 6
7700: PUSH
7701: LD_VAR 0 3
7705: EQUAL
7706: IFFALSE 7636
// for l = 1 to 2 do
7708: LD_ADDR_VAR 0 6
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_INT 2
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7780
// begin hc_class = 21 ;
7724: LD_ADDR_OWVAR 28
7728: PUSH
7729: LD_INT 21
7731: ST_TO_ADDR
// hc_gallery =  ;
7732: LD_ADDR_OWVAR 33
7736: PUSH
7737: LD_STRING 
7739: ST_TO_ADDR
// hc_agressivity = 0 ;
7740: LD_ADDR_OWVAR 35
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// hc_face_number = 5 ;
7748: LD_ADDR_OWVAR 34
7752: PUSH
7753: LD_INT 5
7755: ST_TO_ADDR
// horse := CreateHuman ;
7756: LD_ADDR_VAR 0 10
7760: PUSH
7761: CALL_OW 44
7765: ST_TO_ADDR
// PlaceUnitAnywhere ( horse , false ) ;
7766: LD_VAR 0 10
7770: PPUSH
7771: LD_INT 0
7773: PPUSH
7774: CALL_OW 51
// end ;
7778: GO 7721
7780: POP
7781: POP
// hc_gallery :=  ;
7782: LD_ADDR_OWVAR 33
7786: PUSH
7787: LD_STRING 
7789: ST_TO_ADDR
// hc_name :=  ;
7790: LD_ADDR_OWVAR 26
7794: PUSH
7795: LD_STRING 
7797: ST_TO_ADDR
// end ; end_of_file
7798: LD_VAR 0 5
7802: RET
// export function DebugArtifact ; begin
7803: LD_INT 0
7805: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7806: LD_STRING Artifact is loaded: 
7808: PUSH
7809: LD_EXP 18
7813: STR
7814: PPUSH
7815: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7819: LD_STRING Artifact is active: 
7821: PUSH
7822: LD_EXP 29
7826: STR
7827: PPUSH
7828: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7832: LD_STRING Artifact is researched: 
7834: PUSH
7835: LD_EXP 22
7839: STR
7840: PPUSH
7841: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7845: LD_STRING Artifact coords 
7847: PUSH
7848: LD_EXP 19
7852: PPUSH
7853: CALL_OW 469
7857: STR
7858: PPUSH
7859: CALL_OW 561
// end ;
7863: LD_VAR 0 1
7867: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7868: LD_INT 0
7870: PPUSH
7871: PPUSH
7872: PPUSH
7873: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7874: LD_ADDR_VAR 0 4
7878: PUSH
7879: LD_INT 100
7881: PUSH
7882: LD_INT 185
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 99
7891: PUSH
7892: LD_INT 175
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 117
7901: PUSH
7902: LD_INT 191
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: ST_TO_ADDR
// for i = 1 to artifacts_type do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 14
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8032
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 4
7941: PUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 4
7949: PPUSH
7950: CALL_OW 12
7954: ARRAY
7955: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 4
7965: PUSH
7966: LD_VAR 0 3
7970: DIFF
7971: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7972: LD_ADDR_EXP 15
7976: PUSH
7977: LD_EXP 15
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 2
7996: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_VAR 0 2
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 2
8024: ARRAY
8025: PPUSH
8026: CALL 5425 0 3
// end ;
8030: GO 7929
8032: POP
8033: POP
// end ;
8034: LD_VAR 0 1
8038: RET
// export function GetUseCost ( dist ) ; begin
8039: LD_INT 0
8041: PPUSH
// if dist < 30 then
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 30
8049: LESS
8050: IFFALSE 8060
// result := 10 ;
8052: LD_ADDR_VAR 0 2
8056: PUSH
8057: LD_INT 10
8059: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
8060: LD_VAR 0 1
8064: PUSH
8065: LD_INT 30
8067: GREATEREQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_INT 50
8076: LESS
8077: AND
8078: IFFALSE 8088
// result := 35 ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 35
8087: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
8088: LD_VAR 0 1
8092: PUSH
8093: LD_INT 50
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 80
8104: LESS
8105: AND
8106: IFFALSE 8116
// result := 70 ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 70
8115: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
8116: LD_VAR 0 1
8120: PUSH
8121: LD_INT 80
8123: GREATEREQUAL
8124: PUSH
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 120
8132: LESS
8133: AND
8134: IFFALSE 8144
// result := 100 ;
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// if dist >= 120 then
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 120
8151: GREATEREQUAL
8152: IFFALSE 8162
// result := 150 ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 150
8161: ST_TO_ADDR
// end ;
8162: LD_VAR 0 2
8166: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 255
8176: PUSH
8177: LD_OWVAR 2
8181: EQUAL
8182: IFFALSE 8192
// player_artifact_researched := true ;
8184: LD_ADDR_EXP 22
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// end ;
8192: PPOPN 1
8194: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
8195: LD_INT 22
8197: PUSH
8198: LD_OWVAR 2
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: LD_INT 30
8212: PUSH
8213: LD_INT 8
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PPUSH
8239: CALL_OW 69
8243: PUSH
8244: LD_EXP 22
8248: AND
8249: PUSH
8250: LD_EXP 18
8254: NOT
8255: AND
8256: IFFALSE 8710
8258: GO 8260
8260: DISABLE
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
// begin enable ;
8265: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_EXP 19
8275: PPUSH
8276: CALL_OW 469
8280: ST_TO_ADDR
// if not coords then
8281: LD_VAR 0 2
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8710
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: LD_INT 30
8312: PUSH
8313: LD_INT 8
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 11
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PPUSH
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 2
8360: ARRAY
8361: PPUSH
8362: CALL_OW 73
8366: ST_TO_ADDR
// if not lab then
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8389
// begin if debug then
8374: LD_EXP 6
8378: IFFALSE 8387
// AddToLog ( Cannot find lab for artifact! ) ;
8380: LD_STRING Cannot find lab for artifact!
8382: PPUSH
8383: CALL_OW 561
// exit ;
8387: GO 8710
// end ; if not player_artifact_ready then
8389: LD_EXP 29
8393: NOT
8394: IFFALSE 8518
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PPUSH
8410: LD_VAR 0 2
8414: PUSH
8415: LD_INT 2
8417: ARRAY
8418: PPUSH
8419: CALL_OW 297
8423: PUSH
8424: LD_EXP 23
8428: LESS
8429: IFFALSE 8494
// begin if BuildingStatus ( lab ) = bs_idle then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 461
8440: PUSH
8441: LD_INT 2
8443: EQUAL
8444: IFFALSE 8470
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
8446: LD_OWVAR 2
8450: PPUSH
8451: LD_EXP 25
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 468
8468: GO 8492
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8470: LD_OWVAR 2
8474: PPUSH
8475: LD_EXP 25
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 468
// end else
8492: GO 8516
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
8494: LD_OWVAR 2
8498: PPUSH
8499: LD_EXP 25
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 468
// end else
8516: GO 8710
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_VAR 0 2
8536: PUSH
8537: LD_INT 2
8539: ARRAY
8540: PPUSH
8541: CALL_OW 297
8545: PUSH
8546: LD_EXP 23
8550: LESS
8551: IFFALSE 8666
// begin if BuildingStatus ( lab ) = bs_idle then
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 461
8562: PUSH
8563: LD_INT 2
8565: EQUAL
8566: IFFALSE 8620
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
8568: LD_OWVAR 2
8572: PPUSH
8573: LD_EXP 20
8577: PPUSH
8578: LD_INT 4
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 468
// if player_artifact_selected_unit then
8590: LD_EXP 30
8594: IFFALSE 8618
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
8596: LD_OWVAR 2
8600: PPUSH
8601: LD_EXP 21
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 468
// end else
8618: GO 8664
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8620: LD_OWVAR 2
8624: PPUSH
8625: LD_EXP 20
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8642: LD_OWVAR 2
8646: PPUSH
8647: LD_EXP 21
8651: PPUSH
8652: LD_INT 1
8654: PPUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 468
// end ; end else
8664: GO 8710
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_EXP 20
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
8688: LD_OWVAR 2
8692: PPUSH
8693: LD_EXP 21
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 468
// end ; end ;
8710: PPOPN 2
8712: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_EXP 19
8730: PPUSH
8731: CALL_OW 469
8735: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8736: LD_ADDR_VAR 0 7
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_OWVAR 2
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 8
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: PPUSH
8790: LD_VAR 0 5
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: LD_VAR 0 5
8803: PUSH
8804: LD_INT 2
8806: ARRAY
8807: PPUSH
8808: CALL_OW 73
8812: ST_TO_ADDR
// if not lab then
8813: LD_VAR 0 7
8817: NOT
8818: IFFALSE 8835
// begin if debug then
8820: LD_EXP 6
8824: IFFALSE 8833
// AddToLog ( Cannot find lab! ) ;
8826: LD_STRING Cannot find lab!
8828: PPUSH
8829: CALL_OW 561
// exit ;
8833: GO 9270
// end ; if icon = player_artifact_icon_res then
8835: LD_VAR 0 2
8839: PUSH
8840: LD_EXP 25
8844: EQUAL
8845: IFFALSE 8886
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8847: LD_VAR 0 7
8851: PPUSH
8852: LD_EXP 27
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8864: LD_OWVAR 2
8868: PPUSH
8869: LD_EXP 25
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 468
// end ; if icon = player_artifact_icon then
8886: LD_VAR 0 2
8890: PUSH
8891: LD_EXP 20
8895: EQUAL
8896: IFFALSE 8935
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8898: LD_VAR 0 3
8902: PPUSH
8903: CALL_OW 247
8907: PUSH
8908: LD_INT 1
8910: EQUAL
8911: PUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: CALL_OW 310
8921: NOT
8922: AND
8923: IFFALSE 8935
// player_artifact_selected_unit := cr1 ;
8925: LD_ADDR_EXP 30
8929: PUSH
8930: LD_VAR 0 3
8934: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8935: LD_VAR 0 2
8939: PUSH
8940: LD_EXP 21
8944: EQUAL
8945: IFFALSE 9260
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8947: LD_VAR 0 3
8951: PPUSH
8952: LD_VAR 0 4
8956: PPUSH
8957: CALL_OW 428
8961: PUSH
8962: LD_INT 0
8964: NONEQUAL
8965: PUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: LD_VAR 0 4
8975: PPUSH
8976: CALL_OW 546
8980: PUSH
8981: LD_INT 6
8983: ARRAY
8984: PUSH
8985: LD_INT 3
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: LD_INT 5
8993: PUSH
8994: LD_INT 6
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: IN
9003: OR
9004: IFFALSE 9008
// exit ;
9006: GO 9270
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
9008: LD_ADDR_VAR 0 9
9012: PUSH
9013: LD_EXP 30
9017: PPUSH
9018: CALL_OW 250
9022: PPUSH
9023: LD_EXP 30
9027: PPUSH
9028: CALL_OW 251
9032: PPUSH
9033: LD_VAR 0 3
9037: PPUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 298
9047: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
9048: LD_ADDR_VAR 0 10
9052: PUSH
9053: LD_VAR 0 9
9057: PPUSH
9058: CALL 8039 0 1
9062: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
9063: LD_VAR 0 10
9067: PUSH
9068: LD_OWVAR 2
9072: PPUSH
9073: CALL 5639 0 1
9077: GREATER
9078: IFFALSE 9092
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
9080: LD_STRING ArtFrogJumpCost
9082: PPUSH
9083: LD_INT 2
9085: PPUSH
9086: CALL_OW 338
// exit ;
9090: GO 9270
// end ; SetSibResources ( your_side , cost ) ;
9092: LD_OWVAR 2
9096: PPUSH
9097: LD_VAR 0 10
9101: PPUSH
9102: CALL 5763 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_VAR 0 4
9115: PPUSH
9116: LD_INT 6
9118: PPUSH
9119: LD_INT 5
9121: NEG
9122: PPUSH
9123: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
9127: LD_VAR 0 3
9131: PPUSH
9132: LD_VAR 0 4
9136: PPUSH
9137: LD_INT 6
9139: PPUSH
9140: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
9144: LD_EXP 30
9148: PPUSH
9149: LD_VAR 0 3
9153: PPUSH
9154: LD_VAR 0 4
9158: PPUSH
9159: LD_INT 0
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
9169: LD_VAR 0 3
9173: PPUSH
9174: LD_VAR 0 4
9178: PPUSH
9179: CALL_OW 84
// player_artifact_selected_unit := 0 ;
9183: LD_ADDR_EXP 30
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// player_artifact_researched := false ;
9191: LD_ADDR_EXP 22
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
9199: LD_OWVAR 2
9203: PPUSH
9204: LD_EXP 20
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 7
9216: PPUSH
9217: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
9221: LD_OWVAR 2
9225: PPUSH
9226: LD_EXP 21
9230: PPUSH
9231: LD_INT 0
9233: PPUSH
9234: LD_VAR 0 7
9238: PPUSH
9239: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
9243: LD_EXP 26
9247: PPUSH
9248: CALL_OW 67
// player_artifact_researched := true ;
9252: LD_ADDR_EXP 22
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// end ; if debug then
9260: LD_EXP 6
9264: IFFALSE 9270
// DebugArtifact ;
9266: CALL 7803 0 0
// end ;
9270: PPOPN 10
9272: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 255
9282: PUSH
9283: LD_OWVAR 2
9287: EQUAL
9288: IFFALSE 9327
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
9290: LD_OWVAR 2
9294: PPUSH
9295: LD_EXP 25
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 468
// player_artifact_ready := true ;
9312: LD_ADDR_EXP 29
9316: PUSH
9317: LD_INT 1
9319: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
9320: LD_STRING ArtFrogJump
9322: PPUSH
9323: CALL_OW 339
// end ; end ;
9327: PPOPN 1
9329: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
9330: LD_OWVAR 2
9334: PPUSH
9335: LD_EXP 25
9339: PPUSH
9340: LD_INT 2
9342: PPUSH
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 468
// end ;
9352: PPOPN 2
9354: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
9355: LD_INT 0
9357: PPUSH
9358: PPUSH
9359: PPUSH
9360: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , 25 ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_INT 81
9368: PUSH
9369: LD_INT 7
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 34
9378: PUSH
9379: LD_INT 48
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 69
9394: PUSH
9395: LD_INT 81
9397: PUSH
9398: LD_INT 7
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 30
9407: PUSH
9408: LD_INT 28
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 69
9423: ADD
9424: PUSH
9425: LD_INT 81
9427: PUSH
9428: LD_INT 7
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 30
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: ADD
9454: PUSH
9455: LD_INT 81
9457: PUSH
9458: LD_INT 7
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 21
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 69
9483: ADD
9484: PUSH
9485: LD_INT 81
9487: PUSH
9488: LD_INT 7
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 30
9497: PUSH
9498: LD_INT 34
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 69
9513: ADD
9514: PUSH
9515: LD_INT 81
9517: PUSH
9518: LD_INT 7
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 35
9527: PUSH
9528: LD_INT 49
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: ADD
9544: PUSH
9545: LD_INT 81
9547: PUSH
9548: LD_INT 7
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 35
9557: PUSH
9558: LD_INT 47
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 69
9573: ADD
9574: PUSH
9575: LD_INT 81
9577: PUSH
9578: LD_INT 7
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 34
9587: PUSH
9588: LD_INT 47
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 69
9603: ADD
9604: PUSH
9605: LD_INT 81
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 31
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: ADD
9634: PUSH
9635: LD_INT 81
9637: PUSH
9638: LD_INT 7
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: LD_INT 3
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: ADD
9664: ST_TO_ADDR
// if not tmp then
9665: LD_VAR 0 3
9669: NOT
9670: IFFALSE 9674
// exit ;
9672: GO 9795
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
9674: LD_VAR 0 3
9678: PPUSH
9679: LD_INT 34
9681: PUSH
9682: LD_INT 48
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PPUSH
9689: CALL_OW 72
9693: IFFALSE 9726
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_INT 34
9707: PUSH
9708: LD_INT 48
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PPUSH
9715: CALL_OW 72
9719: PUSH
9720: LD_INT 1
9722: ARRAY
9723: ST_TO_ADDR
9724: GO 9750
// un := tmp [ rand ( 1 , tmp ) ] ;
9726: LD_ADDR_VAR 0 4
9730: PUSH
9731: LD_VAR 0 3
9735: PUSH
9736: LD_INT 1
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: CALL_OW 12
9748: ARRAY
9749: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9750: LD_EXP 10
9754: NOT
9755: IFFALSE 9786
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9757: LD_ADDR_EXP 10
9761: PUSH
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 250
9771: PUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 251
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: ST_TO_ADDR
// KillUnit ( un ) ;
9786: LD_VAR 0 4
9790: PPUSH
9791: CALL_OW 66
// end ;
9795: LD_VAR 0 1
9799: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9806: LD_ADDR_VAR 0 4
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 33
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// if not tmp then
9840: LD_VAR 0 4
9844: NOT
9845: IFFALSE 9849
// exit ;
9847: GO 9975
// un := tmp [ rand ( 1 , tmp ) ] ;
9849: LD_ADDR_VAR 0 3
9853: PUSH
9854: LD_VAR 0 4
9858: PUSH
9859: LD_INT 1
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 12
9871: ARRAY
9872: ST_TO_ADDR
// if GetWeapon ( un ) = ru_siberium_rocket then
9873: LD_VAR 0 3
9877: PPUSH
9878: CALL_OW 264
9882: PUSH
9883: LD_INT 48
9885: EQUAL
9886: IFFALSE 9905
// ComAttackPlace ( un , 194 , 19 ) else
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 194
9895: PPUSH
9896: LD_INT 19
9898: PPUSH
9899: CALL_OW 116
9903: GO 9939
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 81
9912: PUSH
9913: LD_INT 7
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: CALL_OW 74
9934: PPUSH
9935: CALL_OW 115
// if not alliance_used_artifact_2 then
9939: LD_EXP 11
9943: NOT
9944: IFFALSE 9975
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9946: LD_ADDR_EXP 11
9950: PUSH
9951: LD_VAR 0 3
9955: PPUSH
9956: CALL_OW 250
9960: PUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: CALL_OW 251
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: ST_TO_ADDR
// end ; end_of_file
9975: LD_VAR 0 1
9979: RET
// export function DebugMode ; var i , j , b ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
9984: PPUSH
9985: PPUSH
// enable_addtolog = true ;
9986: LD_ADDR_OWVAR 81
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// FogOff ( 6 ) ;
9994: LD_INT 6
9996: PPUSH
9997: CALL_OW 344
// uc_side = 6 ;
10001: LD_ADDR_OWVAR 20
10005: PUSH
10006: LD_INT 6
10008: ST_TO_ADDR
// uc_nation = 3 ;
10009: LD_ADDR_OWVAR 21
10013: PUSH
10014: LD_INT 3
10016: ST_TO_ADDR
// bc_level = 10 ;
10017: LD_ADDR_OWVAR 43
10021: PUSH
10022: LD_INT 10
10024: ST_TO_ADDR
// bc_type := b_lab_full ;
10025: LD_ADDR_OWVAR 42
10029: PUSH
10030: LD_INT 8
10032: ST_TO_ADDR
// bc_kind1 := 11 ;
10033: LD_ADDR_OWVAR 44
10037: PUSH
10038: LD_INT 11
10040: ST_TO_ADDR
// bc_kind2 := 12 ;
10041: LD_ADDR_OWVAR 45
10045: PUSH
10046: LD_INT 12
10048: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
10049: LD_INT 189
10051: PPUSH
10052: LD_INT 20
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 47
// bc_type := b_warehouse ;
10062: LD_ADDR_OWVAR 42
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_INT 201
10077: PPUSH
10078: LD_INT 22
10080: PPUSH
10081: LD_INT 4
10083: PPUSH
10084: CALL_OW 47
10088: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
10089: LD_VAR 0 4
10093: PPUSH
10094: CALL_OW 274
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_INT 10000
10104: PPUSH
10105: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
10109: LD_VAR 0 4
10113: PPUSH
10114: CALL_OW 274
10118: PPUSH
10119: LD_INT 2
10121: PPUSH
10122: LD_INT 10000
10124: PPUSH
10125: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
10129: LD_VAR 0 4
10133: PPUSH
10134: CALL_OW 274
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: LD_INT 10000
10144: PPUSH
10145: CALL_OW 277
// bc_type := b_siberite_power ;
10149: LD_ADDR_OWVAR 42
10153: PUSH
10154: LD_INT 28
10156: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: LD_INT 216
10164: PPUSH
10165: LD_INT 16
10167: PPUSH
10168: LD_INT 4
10170: PPUSH
10171: CALL_OW 47
10175: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
10176: LD_ADDR_VAR 0 4
10180: PUSH
10181: LD_INT 219
10183: PPUSH
10184: LD_INT 16
10186: PPUSH
10187: LD_INT 4
10189: PPUSH
10190: CALL_OW 47
10194: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
10195: LD_INT 55
10197: PPUSH
10198: LD_INT 6
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
10208: LD_INT 56
10210: PPUSH
10211: LD_INT 6
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 322
// end ; end_of_file
10221: LD_VAR 0 1
10225: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 264
10241: PUSH
10242: LD_INT 91
10244: EQUAL
10245: IFFALSE 10317
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10247: LD_INT 68
10249: PPUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 255
10259: PPUSH
10260: CALL_OW 321
10264: PUSH
10265: LD_INT 2
10267: EQUAL
10268: IFFALSE 10280
// eff := 70 else
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 70
10277: ST_TO_ADDR
10278: GO 10288
// eff := 30 ;
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: LD_INT 30
10287: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 250
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 251
10307: PPUSH
10308: LD_VAR 0 4
10312: PPUSH
10313: CALL_OW 495
// end ; end ;
10317: LD_VAR 0 2
10321: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10322: LD_INT 0
10324: PPUSH
// end ;
10325: LD_VAR 0 4
10329: RET
// export function SOS_Command ( cmd ) ; begin
10330: LD_INT 0
10332: PPUSH
// end ;
10333: LD_VAR 0 2
10337: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10338: LD_INT 0
10340: PPUSH
// end ;
10341: LD_VAR 0 6
10345: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
// if not vehicle or not factory then
10350: LD_VAR 0 1
10354: NOT
10355: PUSH
10356: LD_VAR 0 2
10360: NOT
10361: OR
10362: IFFALSE 10366
// exit ;
10364: GO 10597
// if factoryWaypoints >= factory then
10366: LD_EXP 105
10370: PUSH
10371: LD_VAR 0 2
10375: GREATEREQUAL
10376: IFFALSE 10597
// if factoryWaypoints [ factory ] then
10378: LD_EXP 105
10382: PUSH
10383: LD_VAR 0 2
10387: ARRAY
10388: IFFALSE 10597
// begin if GetControl ( vehicle ) = control_manual then
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 263
10399: PUSH
10400: LD_INT 1
10402: EQUAL
10403: IFFALSE 10484
// begin driver := IsDrivenBy ( vehicle ) ;
10405: LD_ADDR_VAR 0 4
10409: PUSH
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 311
10419: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10420: LD_VAR 0 4
10424: PPUSH
10425: LD_EXP 105
10429: PUSH
10430: LD_VAR 0 2
10434: ARRAY
10435: PUSH
10436: LD_INT 3
10438: ARRAY
10439: PPUSH
10440: LD_EXP 105
10444: PUSH
10445: LD_VAR 0 2
10449: ARRAY
10450: PUSH
10451: LD_INT 4
10453: ARRAY
10454: PPUSH
10455: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10468: LD_VAR 0 4
10472: PPUSH
10473: LD_VAR 0 2
10477: PPUSH
10478: CALL_OW 180
// end else
10482: GO 10597
// if GetControl ( vehicle ) = control_remote then
10484: LD_VAR 0 1
10488: PPUSH
10489: CALL_OW 263
10493: PUSH
10494: LD_INT 2
10496: EQUAL
10497: IFFALSE 10558
// begin wait ( 0 0$2 ) ;
10499: LD_INT 70
10501: PPUSH
10502: CALL_OW 67
// if Connect ( vehicle ) then
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL 38420 0 1
10515: IFFALSE 10556
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10517: LD_VAR 0 1
10521: PPUSH
10522: LD_EXP 105
10526: PUSH
10527: LD_VAR 0 2
10531: ARRAY
10532: PUSH
10533: LD_INT 3
10535: ARRAY
10536: PPUSH
10537: LD_EXP 105
10541: PUSH
10542: LD_VAR 0 2
10546: ARRAY
10547: PUSH
10548: LD_INT 4
10550: ARRAY
10551: PPUSH
10552: CALL_OW 171
// end else
10556: GO 10597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10558: LD_VAR 0 1
10562: PPUSH
10563: LD_EXP 105
10567: PUSH
10568: LD_VAR 0 2
10572: ARRAY
10573: PUSH
10574: LD_INT 3
10576: ARRAY
10577: PPUSH
10578: LD_EXP 105
10582: PUSH
10583: LD_VAR 0 2
10587: ARRAY
10588: PUSH
10589: LD_INT 4
10591: ARRAY
10592: PPUSH
10593: CALL_OW 171
// end ; end ;
10597: LD_VAR 0 3
10601: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10602: LD_INT 0
10604: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10605: LD_VAR 0 1
10609: PUSH
10610: LD_INT 250
10612: EQUAL
10613: PUSH
10614: LD_VAR 0 2
10618: PPUSH
10619: CALL_OW 264
10623: PUSH
10624: LD_INT 81
10626: EQUAL
10627: AND
10628: IFFALSE 10649
// MinerPlaceMine ( unit , x , y ) ;
10630: LD_VAR 0 2
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: LD_VAR 0 5
10644: PPUSH
10645: CALL 13034 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 251
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PPUSH
10663: CALL_OW 264
10667: PUSH
10668: LD_INT 81
10670: EQUAL
10671: AND
10672: IFFALSE 10693
// MinerDetonateMine ( unit , x , y ) ;
10674: LD_VAR 0 2
10678: PPUSH
10679: LD_VAR 0 4
10683: PPUSH
10684: LD_VAR 0 5
10688: PPUSH
10689: CALL 13309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 252
10700: EQUAL
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 264
10711: PUSH
10712: LD_INT 81
10714: EQUAL
10715: AND
10716: IFFALSE 10737
// MinerCreateMinefield ( unit , x , y ) ;
10718: LD_VAR 0 2
10722: PPUSH
10723: LD_VAR 0 4
10727: PPUSH
10728: LD_VAR 0 5
10732: PPUSH
10733: CALL 13726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10737: LD_VAR 0 1
10741: PUSH
10742: LD_INT 253
10744: EQUAL
10745: PUSH
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 257
10755: PUSH
10756: LD_INT 5
10758: EQUAL
10759: AND
10760: IFFALSE 10781
// ComBinocular ( unit , x , y ) ;
10762: LD_VAR 0 2
10766: PPUSH
10767: LD_VAR 0 4
10771: PPUSH
10772: LD_VAR 0 5
10776: PPUSH
10777: CALL 14095 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10781: LD_VAR 0 1
10785: PUSH
10786: LD_INT 254
10788: EQUAL
10789: PUSH
10790: LD_VAR 0 2
10794: PPUSH
10795: CALL_OW 264
10799: PUSH
10800: LD_INT 99
10802: EQUAL
10803: AND
10804: PUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: CALL_OW 263
10814: PUSH
10815: LD_INT 3
10817: EQUAL
10818: AND
10819: IFFALSE 10835
// HackDestroyVehicle ( unit , selectedUnit ) ;
10821: LD_VAR 0 2
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: CALL 12398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10835: LD_VAR 0 1
10839: PUSH
10840: LD_INT 255
10842: EQUAL
10843: PUSH
10844: LD_VAR 0 2
10848: PPUSH
10849: CALL_OW 264
10853: PUSH
10854: LD_INT 14
10856: PUSH
10857: LD_INT 53
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: IN
10864: AND
10865: PUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_VAR 0 5
10875: PPUSH
10876: CALL_OW 488
10880: AND
10881: IFFALSE 10905
// CutTreeXYR ( unit , x , y , 12 ) ;
10883: LD_VAR 0 2
10887: PPUSH
10888: LD_VAR 0 4
10892: PPUSH
10893: LD_VAR 0 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL 10968 0 4
// if cmd = 256 then
10905: LD_VAR 0 1
10909: PUSH
10910: LD_INT 256
10912: EQUAL
10913: IFFALSE 10934
// SetFactoryWaypoint ( unit , x , y ) ;
10915: LD_VAR 0 2
10919: PPUSH
10920: LD_VAR 0 4
10924: PPUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: CALL 29003 0 3
// if cmd = 257 then
10934: LD_VAR 0 1
10938: PUSH
10939: LD_INT 257
10941: EQUAL
10942: IFFALSE 10963
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: LD_VAR 0 5
10958: PPUSH
10959: CALL 29365 0 3
// end ;
10963: LD_VAR 0 6
10967: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10979: LD_VAR 0 1
10983: NOT
10984: PUSH
10985: LD_VAR 0 2
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: CALL_OW 488
10999: NOT
11000: OR
11001: PUSH
11002: LD_VAR 0 4
11006: NOT
11007: OR
11008: IFFALSE 11012
// exit ;
11010: GO 11352
// list := [ ] ;
11012: LD_ADDR_VAR 0 13
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// if x - r < 0 then
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 4
11028: MINUS
11029: PUSH
11030: LD_INT 0
11032: LESS
11033: IFFALSE 11045
// min_x := 0 else
11035: LD_ADDR_VAR 0 7
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
11043: GO 11061
// min_x := x - r ;
11045: LD_ADDR_VAR 0 7
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_VAR 0 4
11059: MINUS
11060: ST_TO_ADDR
// if y - r < 0 then
11061: LD_VAR 0 3
11065: PUSH
11066: LD_VAR 0 4
11070: MINUS
11071: PUSH
11072: LD_INT 0
11074: LESS
11075: IFFALSE 11087
// min_y := 0 else
11077: LD_ADDR_VAR 0 8
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
11085: GO 11103
// min_y := y - r ;
11087: LD_ADDR_VAR 0 8
11091: PUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 4
11101: MINUS
11102: ST_TO_ADDR
// max_x := x + r ;
11103: LD_ADDR_VAR 0 9
11107: PUSH
11108: LD_VAR 0 2
11112: PUSH
11113: LD_VAR 0 4
11117: PLUS
11118: ST_TO_ADDR
// max_y := y + r ;
11119: LD_ADDR_VAR 0 10
11123: PUSH
11124: LD_VAR 0 3
11128: PUSH
11129: LD_VAR 0 4
11133: PLUS
11134: ST_TO_ADDR
// for _x = min_x to max_x do
11135: LD_ADDR_VAR 0 11
11139: PUSH
11140: DOUBLE
11141: LD_VAR 0 7
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 9
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11270
// for _y = min_y to max_y do
11155: LD_ADDR_VAR 0 12
11159: PUSH
11160: DOUBLE
11161: LD_VAR 0 8
11165: DEC
11166: ST_TO_ADDR
11167: LD_VAR 0 10
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11266
// begin if not ValidHex ( _x , _y ) then
11175: LD_VAR 0 11
11179: PPUSH
11180: LD_VAR 0 12
11184: PPUSH
11185: CALL_OW 488
11189: NOT
11190: IFFALSE 11194
// continue ;
11192: GO 11172
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11194: LD_VAR 0 11
11198: PPUSH
11199: LD_VAR 0 12
11203: PPUSH
11204: CALL_OW 351
11208: PUSH
11209: LD_VAR 0 11
11213: PPUSH
11214: LD_VAR 0 12
11218: PPUSH
11219: CALL_OW 554
11223: AND
11224: IFFALSE 11264
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11226: LD_ADDR_VAR 0 13
11230: PUSH
11231: LD_VAR 0 13
11235: PPUSH
11236: LD_VAR 0 13
11240: PUSH
11241: LD_INT 1
11243: PLUS
11244: PPUSH
11245: LD_VAR 0 11
11249: PUSH
11250: LD_VAR 0 12
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 2
11263: ST_TO_ADDR
// end ;
11264: GO 11172
11266: POP
11267: POP
11268: GO 11152
11270: POP
11271: POP
// if not list then
11272: LD_VAR 0 13
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11352
// for i in list do
11281: LD_ADDR_VAR 0 6
11285: PUSH
11286: LD_VAR 0 13
11290: PUSH
11291: FOR_IN
11292: IFFALSE 11350
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11294: LD_VAR 0 1
11298: PPUSH
11299: LD_STRING M
11301: PUSH
11302: LD_VAR 0 6
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_VAR 0 6
11315: PUSH
11316: LD_INT 2
11318: ARRAY
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: LD_INT 0
11325: PUSH
11326: LD_INT 0
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: PPUSH
11344: CALL_OW 447
11348: GO 11291
11350: POP
11351: POP
// end ;
11352: LD_VAR 0 5
11356: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11357: LD_EXP 36
11361: NOT
11362: IFFALSE 11412
11364: GO 11366
11366: DISABLE
// begin initHack := true ;
11367: LD_ADDR_EXP 36
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// hackTanks := [ ] ;
11375: LD_ADDR_EXP 37
11379: PUSH
11380: EMPTY
11381: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11382: LD_ADDR_EXP 38
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// hackLimit := 3 ;
11389: LD_ADDR_EXP 39
11393: PUSH
11394: LD_INT 3
11396: ST_TO_ADDR
// hackDist := 12 ;
11397: LD_ADDR_EXP 40
11401: PUSH
11402: LD_INT 12
11404: ST_TO_ADDR
// hackCounter := [ ] ;
11405: LD_ADDR_EXP 41
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// end ;
11412: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11413: LD_EXP 36
11417: PUSH
11418: LD_INT 34
11420: PUSH
11421: LD_INT 99
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: AND
11433: IFFALSE 11686
11435: GO 11437
11437: DISABLE
11438: LD_INT 0
11440: PPUSH
11441: PPUSH
// begin enable ;
11442: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_INT 34
11450: PUSH
11451: LD_INT 99
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11684
// begin if not i in hackTanks then
11466: LD_VAR 0 1
11470: PUSH
11471: LD_EXP 37
11475: IN
11476: NOT
11477: IFFALSE 11560
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11479: LD_ADDR_EXP 37
11483: PUSH
11484: LD_EXP 37
11488: PPUSH
11489: LD_EXP 37
11493: PUSH
11494: LD_INT 1
11496: PLUS
11497: PPUSH
11498: LD_VAR 0 1
11502: PPUSH
11503: CALL_OW 1
11507: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11508: LD_ADDR_EXP 38
11512: PUSH
11513: LD_EXP 38
11517: PPUSH
11518: LD_EXP 38
11522: PUSH
11523: LD_INT 1
11525: PLUS
11526: PPUSH
11527: EMPTY
11528: PPUSH
11529: CALL_OW 1
11533: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11534: LD_ADDR_EXP 41
11538: PUSH
11539: LD_EXP 41
11543: PPUSH
11544: LD_EXP 41
11548: PUSH
11549: LD_INT 1
11551: PLUS
11552: PPUSH
11553: EMPTY
11554: PPUSH
11555: CALL_OW 1
11559: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 302
11569: NOT
11570: IFFALSE 11583
// begin HackUnlinkAll ( i ) ;
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 11689 0 1
// continue ;
11581: GO 11463
// end ; HackCheckCapturedStatus ( i ) ;
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL 12132 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11592: LD_ADDR_VAR 0 2
11596: PUSH
11597: LD_INT 81
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 255
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 33
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 91
11626: PUSH
11627: LD_VAR 0 1
11631: PUSH
11632: LD_EXP 40
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 50
11644: PUSH
11645: EMPTY
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// continue ;
11666: GO 11463
// HackLink ( i , tmp ) ;
11668: LD_VAR 0 1
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL 11825 0 2
// end ;
11682: GO 11463
11684: POP
11685: POP
// end ;
11686: PPOPN 2
11688: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if not hack in hackTanks then
11694: LD_VAR 0 1
11698: PUSH
11699: LD_EXP 37
11703: IN
11704: NOT
11705: IFFALSE 11709
// exit ;
11707: GO 11820
// index := GetElementIndex ( hackTanks , hack ) ;
11709: LD_ADDR_VAR 0 4
11713: PUSH
11714: LD_EXP 37
11718: PPUSH
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL 35236 0 2
11728: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11729: LD_EXP 38
11733: PUSH
11734: LD_VAR 0 4
11738: ARRAY
11739: IFFALSE 11820
// begin for i in hackTanksCaptured [ index ] do
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_EXP 38
11750: PUSH
11751: LD_VAR 0 4
11755: ARRAY
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11784
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 1
11767: ARRAY
11768: PPUSH
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: PPUSH
11778: CALL_OW 235
11782: GO 11757
11784: POP
11785: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11786: LD_ADDR_EXP 38
11790: PUSH
11791: LD_EXP 38
11795: PPUSH
11796: LD_VAR 0 4
11800: PPUSH
11801: EMPTY
11802: PPUSH
11803: CALL_OW 1
11807: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_INT 0
11815: PPUSH
11816: CALL_OW 505
// end ; end ;
11820: LD_VAR 0 2
11824: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11825: LD_INT 0
11827: PPUSH
11828: PPUSH
11829: PPUSH
// if not hack in hackTanks or not vehicles then
11830: LD_VAR 0 1
11834: PUSH
11835: LD_EXP 37
11839: IN
11840: NOT
11841: PUSH
11842: LD_VAR 0 2
11846: NOT
11847: OR
11848: IFFALSE 11852
// exit ;
11850: GO 12127
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL 35886 0 4
11877: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11878: LD_ADDR_VAR 0 5
11882: PUSH
11883: LD_EXP 37
11887: PPUSH
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL 35236 0 2
11897: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11898: LD_EXP 38
11902: PUSH
11903: LD_VAR 0 5
11907: ARRAY
11908: PUSH
11909: LD_EXP 39
11913: LESS
11914: IFFALSE 12103
// begin for i := 1 to vehicles do
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_VAR 0 2
11930: PUSH
11931: FOR_TO
11932: IFFALSE 12101
// begin if hackTanksCaptured [ index ] = hackLimit then
11934: LD_EXP 38
11938: PUSH
11939: LD_VAR 0 5
11943: ARRAY
11944: PUSH
11945: LD_EXP 39
11949: EQUAL
11950: IFFALSE 11954
// break ;
11952: GO 12101
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11954: LD_ADDR_EXP 41
11958: PUSH
11959: LD_EXP 41
11963: PPUSH
11964: LD_VAR 0 5
11968: PPUSH
11969: LD_EXP 41
11973: PUSH
11974: LD_VAR 0 5
11978: ARRAY
11979: PUSH
11980: LD_INT 1
11982: PLUS
11983: PPUSH
11984: CALL_OW 1
11988: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11989: LD_ADDR_EXP 38
11993: PUSH
11994: LD_EXP 38
11998: PPUSH
11999: LD_VAR 0 5
12003: PUSH
12004: LD_EXP 38
12008: PUSH
12009: LD_VAR 0 5
12013: ARRAY
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: LD_VAR 0 2
12027: PUSH
12028: LD_VAR 0 4
12032: ARRAY
12033: PUSH
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: PPUSH
12045: CALL_OW 255
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL 35451 0 3
12058: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12059: LD_VAR 0 2
12063: PUSH
12064: LD_VAR 0 4
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 255
12079: PPUSH
12080: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12084: LD_VAR 0 2
12088: PUSH
12089: LD_VAR 0 4
12093: ARRAY
12094: PPUSH
12095: CALL_OW 141
// end ;
12099: GO 11931
12101: POP
12102: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_EXP 38
12112: PUSH
12113: LD_VAR 0 5
12117: ARRAY
12118: PUSH
12119: LD_INT 0
12121: PLUS
12122: PPUSH
12123: CALL_OW 505
// end ;
12127: LD_VAR 0 3
12131: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
// if not hack in hackTanks then
12138: LD_VAR 0 1
12142: PUSH
12143: LD_EXP 37
12147: IN
12148: NOT
12149: IFFALSE 12153
// exit ;
12151: GO 12393
// index := GetElementIndex ( hackTanks , hack ) ;
12153: LD_ADDR_VAR 0 4
12157: PUSH
12158: LD_EXP 37
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL 35236 0 2
12172: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12173: LD_ADDR_VAR 0 3
12177: PUSH
12178: DOUBLE
12179: LD_EXP 38
12183: PUSH
12184: LD_VAR 0 4
12188: ARRAY
12189: INC
12190: ST_TO_ADDR
12191: LD_INT 1
12193: PUSH
12194: FOR_DOWNTO
12195: IFFALSE 12367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12197: LD_ADDR_VAR 0 5
12201: PUSH
12202: LD_EXP 38
12206: PUSH
12207: LD_VAR 0 4
12211: ARRAY
12212: PUSH
12213: LD_VAR 0 3
12217: ARRAY
12218: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12219: LD_VAR 0 5
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: CALL_OW 302
12232: NOT
12233: PUSH
12234: LD_VAR 0 5
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PPUSH
12243: CALL_OW 255
12247: PUSH
12248: LD_VAR 0 1
12252: PPUSH
12253: CALL_OW 255
12257: NONEQUAL
12258: OR
12259: IFFALSE 12365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12261: LD_VAR 0 5
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PPUSH
12270: CALL_OW 305
12274: PUSH
12275: LD_VAR 0 5
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PPUSH
12284: CALL_OW 255
12288: PUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 255
12298: EQUAL
12299: AND
12300: IFFALSE 12324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12302: LD_VAR 0 5
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 5
12315: PUSH
12316: LD_INT 2
12318: ARRAY
12319: PPUSH
12320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12324: LD_ADDR_EXP 38
12328: PUSH
12329: LD_EXP 38
12333: PPUSH
12334: LD_VAR 0 4
12338: PPUSH
12339: LD_EXP 38
12343: PUSH
12344: LD_VAR 0 4
12348: ARRAY
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: CALL_OW 3
12359: PPUSH
12360: CALL_OW 1
12364: ST_TO_ADDR
// end ; end ;
12365: GO 12194
12367: POP
12368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_EXP 38
12378: PUSH
12379: LD_VAR 0 4
12383: ARRAY
12384: PUSH
12385: LD_INT 0
12387: PLUS
12388: PPUSH
12389: CALL_OW 505
// end ;
12393: LD_VAR 0 2
12397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12398: LD_INT 0
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
// if not hack in hackTanks then
12404: LD_VAR 0 1
12408: PUSH
12409: LD_EXP 37
12413: IN
12414: NOT
12415: IFFALSE 12419
// exit ;
12417: GO 12504
// index := GetElementIndex ( hackTanks , hack ) ;
12419: LD_ADDR_VAR 0 5
12423: PUSH
12424: LD_EXP 37
12428: PPUSH
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL 35236 0 2
12438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: DOUBLE
12445: LD_INT 1
12447: DEC
12448: ST_TO_ADDR
12449: LD_EXP 38
12453: PUSH
12454: LD_VAR 0 5
12458: ARRAY
12459: PUSH
12460: FOR_TO
12461: IFFALSE 12502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12463: LD_EXP 38
12467: PUSH
12468: LD_VAR 0 5
12472: ARRAY
12473: PUSH
12474: LD_VAR 0 4
12478: ARRAY
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PUSH
12484: LD_VAR 0 2
12488: EQUAL
12489: IFFALSE 12500
// KillUnit ( vehicle ) ;
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 66
12500: GO 12460
12502: POP
12503: POP
// end ;
12504: LD_VAR 0 3
12508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12509: LD_EXP 42
12513: NOT
12514: IFFALSE 12549
12516: GO 12518
12518: DISABLE
// begin initMiner := true ;
12519: LD_ADDR_EXP 42
12523: PUSH
12524: LD_INT 1
12526: ST_TO_ADDR
// minersList := [ ] ;
12527: LD_ADDR_EXP 43
12531: PUSH
12532: EMPTY
12533: ST_TO_ADDR
// minerMinesList := [ ] ;
12534: LD_ADDR_EXP 44
12538: PUSH
12539: EMPTY
12540: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12541: LD_ADDR_EXP 45
12545: PUSH
12546: LD_INT 5
12548: ST_TO_ADDR
// end ;
12549: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12550: LD_EXP 42
12554: PUSH
12555: LD_INT 34
12557: PUSH
12558: LD_INT 81
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: AND
12570: IFFALSE 13031
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
// begin enable ;
12581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12582: LD_ADDR_VAR 0 1
12586: PUSH
12587: LD_INT 34
12589: PUSH
12590: LD_INT 81
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12675
// begin if not i in minersList then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_EXP 43
12614: IN
12615: NOT
12616: IFFALSE 12673
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12618: LD_ADDR_EXP 43
12622: PUSH
12623: LD_EXP 43
12627: PPUSH
12628: LD_EXP 43
12632: PUSH
12633: LD_INT 1
12635: PLUS
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 1
12646: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12647: LD_ADDR_EXP 44
12651: PUSH
12652: LD_EXP 44
12656: PPUSH
12657: LD_EXP 44
12661: PUSH
12662: LD_INT 1
12664: PLUS
12665: PPUSH
12666: EMPTY
12667: PPUSH
12668: CALL_OW 1
12672: ST_TO_ADDR
// end end ;
12673: GO 12602
12675: POP
12676: POP
// for i := minerMinesList downto 1 do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: DOUBLE
12683: LD_EXP 44
12687: INC
12688: ST_TO_ADDR
12689: LD_INT 1
12691: PUSH
12692: FOR_DOWNTO
12693: IFFALSE 13029
// begin if IsLive ( minersList [ i ] ) then
12695: LD_EXP 43
12699: PUSH
12700: LD_VAR 0 1
12704: ARRAY
12705: PPUSH
12706: CALL_OW 300
12710: IFFALSE 12738
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12712: LD_EXP 43
12716: PUSH
12717: LD_VAR 0 1
12721: ARRAY
12722: PPUSH
12723: LD_EXP 44
12727: PUSH
12728: LD_VAR 0 1
12732: ARRAY
12733: PPUSH
12734: CALL_OW 505
// if not minerMinesList [ i ] then
12738: LD_EXP 44
12742: PUSH
12743: LD_VAR 0 1
12747: ARRAY
12748: NOT
12749: IFFALSE 12753
// continue ;
12751: GO 12692
// for j := minerMinesList [ i ] downto 1 do
12753: LD_ADDR_VAR 0 2
12757: PUSH
12758: DOUBLE
12759: LD_EXP 44
12763: PUSH
12764: LD_VAR 0 1
12768: ARRAY
12769: INC
12770: ST_TO_ADDR
12771: LD_INT 1
12773: PUSH
12774: FOR_DOWNTO
12775: IFFALSE 13025
// begin side := GetSide ( minersList [ i ] ) ;
12777: LD_ADDR_VAR 0 3
12781: PUSH
12782: LD_EXP 43
12786: PUSH
12787: LD_VAR 0 1
12791: ARRAY
12792: PPUSH
12793: CALL_OW 255
12797: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_EXP 44
12807: PUSH
12808: LD_VAR 0 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 2
12818: ARRAY
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: LD_EXP 44
12828: PUSH
12829: LD_VAR 0 1
12833: ARRAY
12834: PUSH
12835: LD_VAR 0 2
12839: ARRAY
12840: PUSH
12841: LD_INT 2
12843: ARRAY
12844: PPUSH
12845: CALL_OW 428
12849: ST_TO_ADDR
// if not tmp then
12850: LD_VAR 0 4
12854: NOT
12855: IFFALSE 12859
// continue ;
12857: GO 12774
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12859: LD_VAR 0 4
12863: PUSH
12864: LD_INT 81
12866: PUSH
12867: LD_VAR 0 3
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PPUSH
12876: CALL_OW 69
12880: IN
12881: PUSH
12882: LD_EXP 44
12886: PUSH
12887: LD_VAR 0 1
12891: ARRAY
12892: PUSH
12893: LD_VAR 0 2
12897: ARRAY
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_EXP 44
12907: PUSH
12908: LD_VAR 0 1
12912: ARRAY
12913: PUSH
12914: LD_VAR 0 2
12918: ARRAY
12919: PUSH
12920: LD_INT 2
12922: ARRAY
12923: PPUSH
12924: CALL_OW 458
12928: AND
12929: IFFALSE 13023
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12931: LD_EXP 44
12935: PUSH
12936: LD_VAR 0 1
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 2
12946: ARRAY
12947: PUSH
12948: LD_INT 1
12950: ARRAY
12951: PPUSH
12952: LD_EXP 44
12956: PUSH
12957: LD_VAR 0 1
12961: ARRAY
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PUSH
12969: LD_INT 2
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12982: LD_ADDR_EXP 44
12986: PUSH
12987: LD_EXP 44
12991: PPUSH
12992: LD_VAR 0 1
12996: PPUSH
12997: LD_EXP 44
13001: PUSH
13002: LD_VAR 0 1
13006: ARRAY
13007: PPUSH
13008: LD_VAR 0 2
13012: PPUSH
13013: CALL_OW 3
13017: PPUSH
13018: CALL_OW 1
13022: ST_TO_ADDR
// end ; end ;
13023: GO 12774
13025: POP
13026: POP
// end ;
13027: GO 12692
13029: POP
13030: POP
// end ;
13031: PPOPN 4
13033: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
// result := false ;
13038: LD_ADDR_VAR 0 4
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 264
13055: PUSH
13056: LD_INT 81
13058: EQUAL
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13304
// index := GetElementIndex ( minersList , unit ) ;
13064: LD_ADDR_VAR 0 5
13068: PUSH
13069: LD_EXP 43
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL 35236 0 2
13083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13084: LD_EXP 44
13088: PUSH
13089: LD_VAR 0 5
13093: ARRAY
13094: PUSH
13095: LD_EXP 45
13099: GREATEREQUAL
13100: IFFALSE 13104
// exit ;
13102: GO 13304
// ComMoveXY ( unit , x , y ) ;
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: LD_VAR 0 3
13118: PPUSH
13119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13123: LD_INT 35
13125: PPUSH
13126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: CALL 66591 0 3
13149: NOT
13150: PUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 314
13160: AND
13161: IFFALSE 13165
// exit ;
13163: GO 13304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13165: LD_VAR 0 2
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: CALL_OW 428
13179: PUSH
13180: LD_VAR 0 1
13184: EQUAL
13185: PUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 314
13195: NOT
13196: AND
13197: IFFALSE 13123
// PlaySoundXY ( x , y , PlantMine ) ;
13199: LD_VAR 0 2
13203: PPUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_STRING PlantMine
13211: PPUSH
13212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 255
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13243: LD_ADDR_EXP 44
13247: PUSH
13248: LD_EXP 44
13252: PPUSH
13253: LD_VAR 0 5
13257: PUSH
13258: LD_EXP 44
13262: PUSH
13263: LD_VAR 0 5
13267: ARRAY
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL 35451 0 3
13295: ST_TO_ADDR
// result := true ;
13296: LD_ADDR_VAR 0 4
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// end ;
13304: LD_VAR 0 4
13308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// if not unit in minersList then
13314: LD_VAR 0 1
13318: PUSH
13319: LD_EXP 43
13323: IN
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 13721
// index := GetElementIndex ( minersList , unit ) ;
13329: LD_ADDR_VAR 0 6
13333: PUSH
13334: LD_EXP 43
13338: PPUSH
13339: LD_VAR 0 1
13343: PPUSH
13344: CALL 35236 0 2
13348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13349: LD_ADDR_VAR 0 5
13353: PUSH
13354: DOUBLE
13355: LD_EXP 44
13359: PUSH
13360: LD_VAR 0 6
13364: ARRAY
13365: INC
13366: ST_TO_ADDR
13367: LD_INT 1
13369: PUSH
13370: FOR_DOWNTO
13371: IFFALSE 13532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13373: LD_EXP 44
13377: PUSH
13378: LD_VAR 0 6
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 5
13388: ARRAY
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PUSH
13394: LD_VAR 0 2
13398: EQUAL
13399: PUSH
13400: LD_EXP 44
13404: PUSH
13405: LD_VAR 0 6
13409: ARRAY
13410: PUSH
13411: LD_VAR 0 5
13415: ARRAY
13416: PUSH
13417: LD_INT 2
13419: ARRAY
13420: PUSH
13421: LD_VAR 0 3
13425: EQUAL
13426: AND
13427: IFFALSE 13530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13429: LD_EXP 44
13433: PUSH
13434: LD_VAR 0 6
13438: ARRAY
13439: PUSH
13440: LD_VAR 0 5
13444: ARRAY
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: LD_EXP 44
13454: PUSH
13455: LD_VAR 0 6
13459: ARRAY
13460: PUSH
13461: LD_VAR 0 5
13465: ARRAY
13466: PUSH
13467: LD_INT 2
13469: ARRAY
13470: PPUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 255
13480: PPUSH
13481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13485: LD_ADDR_EXP 44
13489: PUSH
13490: LD_EXP 44
13494: PPUSH
13495: LD_VAR 0 6
13499: PPUSH
13500: LD_EXP 44
13504: PUSH
13505: LD_VAR 0 6
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 5
13515: PPUSH
13516: CALL_OW 3
13520: PPUSH
13521: CALL_OW 1
13525: ST_TO_ADDR
// exit ;
13526: POP
13527: POP
13528: GO 13721
// end ; end ;
13530: GO 13370
13532: POP
13533: POP
// for i := minerMinesList [ index ] downto 1 do
13534: LD_ADDR_VAR 0 5
13538: PUSH
13539: DOUBLE
13540: LD_EXP 44
13544: PUSH
13545: LD_VAR 0 6
13549: ARRAY
13550: INC
13551: ST_TO_ADDR
13552: LD_INT 1
13554: PUSH
13555: FOR_DOWNTO
13556: IFFALSE 13719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13558: LD_EXP 44
13562: PUSH
13563: LD_VAR 0 6
13567: ARRAY
13568: PUSH
13569: LD_VAR 0 5
13573: ARRAY
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: PPUSH
13579: LD_EXP 44
13583: PUSH
13584: LD_VAR 0 6
13588: ARRAY
13589: PUSH
13590: LD_VAR 0 5
13594: ARRAY
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: PPUSH
13600: LD_VAR 0 2
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: CALL_OW 298
13614: PUSH
13615: LD_INT 6
13617: LESS
13618: IFFALSE 13717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13620: LD_EXP 44
13624: PUSH
13625: LD_VAR 0 6
13629: ARRAY
13630: PUSH
13631: LD_VAR 0 5
13635: ARRAY
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_EXP 44
13645: PUSH
13646: LD_VAR 0 6
13650: ARRAY
13651: PUSH
13652: LD_VAR 0 5
13656: ARRAY
13657: PUSH
13658: LD_INT 2
13660: ARRAY
13661: PPUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: CALL_OW 255
13671: PPUSH
13672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13676: LD_ADDR_EXP 44
13680: PUSH
13681: LD_EXP 44
13685: PPUSH
13686: LD_VAR 0 6
13690: PPUSH
13691: LD_EXP 44
13695: PUSH
13696: LD_VAR 0 6
13700: ARRAY
13701: PPUSH
13702: LD_VAR 0 5
13706: PPUSH
13707: CALL_OW 3
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// end ; end ;
13717: GO 13555
13719: POP
13720: POP
// end ;
13721: LD_VAR 0 4
13725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 81
13749: EQUAL
13750: NOT
13751: PUSH
13752: LD_VAR 0 1
13756: PUSH
13757: LD_EXP 43
13761: IN
13762: NOT
13763: OR
13764: IFFALSE 13768
// exit ;
13766: GO 14090
// index := GetElementIndex ( minersList , unit ) ;
13768: LD_ADDR_VAR 0 6
13772: PUSH
13773: LD_EXP 43
13777: PPUSH
13778: LD_VAR 0 1
13782: PPUSH
13783: CALL 35236 0 2
13787: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13788: LD_ADDR_VAR 0 8
13792: PUSH
13793: LD_EXP 45
13797: PUSH
13798: LD_EXP 44
13802: PUSH
13803: LD_VAR 0 6
13807: ARRAY
13808: MINUS
13809: ST_TO_ADDR
// if not minesFreeAmount then
13810: LD_VAR 0 8
13814: NOT
13815: IFFALSE 13819
// exit ;
13817: GO 14090
// tmp := [ ] ;
13819: LD_ADDR_VAR 0 7
13823: PUSH
13824: EMPTY
13825: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13826: LD_ADDR_VAR 0 5
13830: PUSH
13831: DOUBLE
13832: LD_INT 1
13834: DEC
13835: ST_TO_ADDR
13836: LD_VAR 0 8
13840: PUSH
13841: FOR_TO
13842: IFFALSE 14037
// begin _d := rand ( 0 , 5 ) ;
13844: LD_ADDR_VAR 0 11
13848: PUSH
13849: LD_INT 0
13851: PPUSH
13852: LD_INT 5
13854: PPUSH
13855: CALL_OW 12
13859: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13860: LD_ADDR_VAR 0 12
13864: PUSH
13865: LD_INT 2
13867: PPUSH
13868: LD_INT 6
13870: PPUSH
13871: CALL_OW 12
13875: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13876: LD_ADDR_VAR 0 9
13880: PUSH
13881: LD_VAR 0 2
13885: PPUSH
13886: LD_VAR 0 11
13890: PPUSH
13891: LD_VAR 0 12
13895: PPUSH
13896: CALL_OW 272
13900: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13901: LD_ADDR_VAR 0 10
13905: PUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: LD_VAR 0 11
13915: PPUSH
13916: LD_VAR 0 12
13920: PPUSH
13921: CALL_OW 273
13925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13926: LD_VAR 0 9
13930: PPUSH
13931: LD_VAR 0 10
13935: PPUSH
13936: CALL_OW 488
13940: PUSH
13941: LD_VAR 0 9
13945: PUSH
13946: LD_VAR 0 10
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_VAR 0 7
13959: IN
13960: NOT
13961: AND
13962: PUSH
13963: LD_VAR 0 9
13967: PPUSH
13968: LD_VAR 0 10
13972: PPUSH
13973: CALL_OW 458
13977: NOT
13978: AND
13979: IFFALSE 14021
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13981: LD_ADDR_VAR 0 7
13985: PUSH
13986: LD_VAR 0 7
13990: PPUSH
13991: LD_VAR 0 7
13995: PUSH
13996: LD_INT 1
13998: PLUS
13999: PPUSH
14000: LD_VAR 0 9
14004: PUSH
14005: LD_VAR 0 10
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 1
14018: ST_TO_ADDR
14019: GO 14035
// i := i - 1 ;
14021: LD_ADDR_VAR 0 5
14025: PUSH
14026: LD_VAR 0 5
14030: PUSH
14031: LD_INT 1
14033: MINUS
14034: ST_TO_ADDR
// end ;
14035: GO 13841
14037: POP
14038: POP
// for i in tmp do
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: LD_VAR 0 7
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14088
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_VAR 0 5
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: LD_VAR 0 5
14070: PUSH
14071: LD_INT 2
14073: ARRAY
14074: PPUSH
14075: CALL 13034 0 3
14079: NOT
14080: IFFALSE 14086
// exit ;
14082: POP
14083: POP
14084: GO 14090
14086: GO 14049
14088: POP
14089: POP
// end ;
14090: LD_VAR 0 4
14094: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14095: LD_INT 0
14097: PPUSH
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// if not GetClass ( unit ) = class_sniper then
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 257
14113: PUSH
14114: LD_INT 5
14116: EQUAL
14117: NOT
14118: IFFALSE 14122
// exit ;
14120: GO 14510
// dist := 8 ;
14122: LD_ADDR_VAR 0 5
14126: PUSH
14127: LD_INT 8
14129: ST_TO_ADDR
// viewRange := 12 ;
14130: LD_ADDR_VAR 0 7
14134: PUSH
14135: LD_INT 12
14137: ST_TO_ADDR
// side := GetSide ( unit ) ;
14138: LD_ADDR_VAR 0 6
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 255
14152: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14153: LD_INT 61
14155: PPUSH
14156: LD_VAR 0 6
14160: PPUSH
14161: CALL_OW 321
14165: PUSH
14166: LD_INT 2
14168: EQUAL
14169: IFFALSE 14179
// viewRange := 16 ;
14171: LD_ADDR_VAR 0 7
14175: PUSH
14176: LD_INT 16
14178: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14179: LD_VAR 0 1
14183: PPUSH
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: CALL_OW 297
14198: PUSH
14199: LD_VAR 0 5
14203: GREATER
14204: IFFALSE 14283
// begin ComMoveXY ( unit , x , y ) ;
14206: LD_VAR 0 1
14210: PPUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14225: LD_INT 35
14227: PPUSH
14228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_VAR 0 2
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: CALL 66591 0 3
14251: NOT
14252: IFFALSE 14256
// exit ;
14254: GO 14510
// until GetDistUnitXY ( unit , x , y ) < dist ;
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 297
14275: PUSH
14276: LD_VAR 0 5
14280: LESS
14281: IFFALSE 14225
// end ; ComTurnXY ( unit , x , y ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_VAR 0 2
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 118
// wait ( 5 ) ;
14302: LD_INT 5
14304: PPUSH
14305: CALL_OW 67
// _d := GetDir ( unit ) ;
14309: LD_ADDR_VAR 0 10
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 254
14323: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14324: LD_ADDR_VAR 0 8
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 250
14338: PPUSH
14339: LD_VAR 0 10
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: CALL_OW 272
14353: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14354: LD_ADDR_VAR 0 9
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 251
14368: PPUSH
14369: LD_VAR 0 10
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL_OW 273
14383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14384: LD_VAR 0 8
14388: PPUSH
14389: LD_VAR 0 9
14393: PPUSH
14394: CALL_OW 488
14398: NOT
14399: IFFALSE 14403
// exit ;
14401: GO 14510
// ComAnimCustom ( unit , 1 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14415: LD_VAR 0 8
14419: PPUSH
14420: LD_VAR 0 9
14424: PPUSH
14425: LD_VAR 0 6
14429: PPUSH
14430: LD_VAR 0 7
14434: PPUSH
14435: CALL_OW 330
// repeat wait ( 1 ) ;
14439: LD_INT 1
14441: PPUSH
14442: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 316
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 314
14465: OR
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 302
14476: NOT
14477: OR
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 301
14488: OR
14489: IFFALSE 14439
// RemoveSeeing ( _x , _y , side ) ;
14491: LD_VAR 0 8
14495: PPUSH
14496: LD_VAR 0 9
14500: PPUSH
14501: LD_VAR 0 6
14505: PPUSH
14506: CALL_OW 331
// end ; end_of_file
14510: LD_VAR 0 4
14514: RET
// every 0 0$1 do
14515: GO 14517
14517: DISABLE
// begin enable ;
14518: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14519: LD_STRING updateTimer(
14521: PUSH
14522: LD_OWVAR 1
14526: STR
14527: PUSH
14528: LD_STRING );
14530: STR
14531: PPUSH
14532: CALL_OW 559
// end ;
14536: END
// export function SOS_MapStart ( ) ; begin
14537: LD_INT 0
14539: PPUSH
// if streamModeActive then
14540: LD_EXP 47
14544: IFFALSE 14553
// DefineStreamItems ( true ) ;
14546: LD_INT 1
14548: PPUSH
14549: CALL 16357 0 1
// UpdateLuaVariables ( ) ;
14553: CALL 14570 0 0
// UpdateFactoryWaypoints ( ) ;
14557: CALL 29218 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14561: CALL 29475 0 0
// end ;
14565: LD_VAR 0 1
14569: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
14570: LD_INT 0
14572: PPUSH
// if not globalGameSaveCounter then
14573: LD_EXP 46
14577: NOT
14578: IFFALSE 14589
// ToLua ( setGameSaveCounter(0) ) else
14580: LD_STRING setGameSaveCounter(0)
14582: PPUSH
14583: CALL_OW 559
14587: GO 14621
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14589: LD_ADDR_EXP 46
14593: PUSH
14594: LD_EXP 46
14598: PPUSH
14599: CALL 69143 0 1
14603: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14604: LD_STRING setGameSaveCounter(
14606: PUSH
14607: LD_EXP 46
14611: STR
14612: PUSH
14613: LD_STRING )
14615: STR
14616: PPUSH
14617: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14621: LD_STRING setGameDifficulty(
14623: PUSH
14624: LD_OWVAR 67
14628: STR
14629: PUSH
14630: LD_STRING )
14632: STR
14633: PPUSH
14634: CALL_OW 559
// end ;
14638: LD_VAR 0 1
14642: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14643: LD_INT 0
14645: PPUSH
// if p2 = stream_mode then
14646: LD_VAR 0 2
14650: PUSH
14651: LD_INT 100
14653: EQUAL
14654: IFFALSE 15657
// begin if not StreamModeActive then
14656: LD_EXP 47
14660: NOT
14661: IFFALSE 14671
// StreamModeActive := true ;
14663: LD_ADDR_EXP 47
14667: PUSH
14668: LD_INT 1
14670: ST_TO_ADDR
// if p3 = 0 then
14671: LD_VAR 0 3
14675: PUSH
14676: LD_INT 0
14678: EQUAL
14679: IFFALSE 14685
// InitStreamMode ;
14681: CALL 15893 0 0
// if p3 = 1 then
14685: LD_VAR 0 3
14689: PUSH
14690: LD_INT 1
14692: EQUAL
14693: IFFALSE 14703
// sRocket := true ;
14695: LD_ADDR_EXP 52
14699: PUSH
14700: LD_INT 1
14702: ST_TO_ADDR
// if p3 = 2 then
14703: LD_VAR 0 3
14707: PUSH
14708: LD_INT 2
14710: EQUAL
14711: IFFALSE 14721
// sSpeed := true ;
14713: LD_ADDR_EXP 51
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// if p3 = 3 then
14721: LD_VAR 0 3
14725: PUSH
14726: LD_INT 3
14728: EQUAL
14729: IFFALSE 14739
// sEngine := true ;
14731: LD_ADDR_EXP 53
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// if p3 = 4 then
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 4
14746: EQUAL
14747: IFFALSE 14757
// sSpec := true ;
14749: LD_ADDR_EXP 50
14753: PUSH
14754: LD_INT 1
14756: ST_TO_ADDR
// if p3 = 5 then
14757: LD_VAR 0 3
14761: PUSH
14762: LD_INT 5
14764: EQUAL
14765: IFFALSE 14775
// sLevel := true ;
14767: LD_ADDR_EXP 54
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if p3 = 6 then
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 6
14782: EQUAL
14783: IFFALSE 14793
// sArmoury := true ;
14785: LD_ADDR_EXP 55
14789: PUSH
14790: LD_INT 1
14792: ST_TO_ADDR
// if p3 = 7 then
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 7
14800: EQUAL
14801: IFFALSE 14811
// sRadar := true ;
14803: LD_ADDR_EXP 56
14807: PUSH
14808: LD_INT 1
14810: ST_TO_ADDR
// if p3 = 8 then
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 8
14818: EQUAL
14819: IFFALSE 14829
// sBunker := true ;
14821: LD_ADDR_EXP 57
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// if p3 = 9 then
14829: LD_VAR 0 3
14833: PUSH
14834: LD_INT 9
14836: EQUAL
14837: IFFALSE 14847
// sHack := true ;
14839: LD_ADDR_EXP 58
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// if p3 = 10 then
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 10
14854: EQUAL
14855: IFFALSE 14865
// sFire := true ;
14857: LD_ADDR_EXP 59
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// if p3 = 11 then
14865: LD_VAR 0 3
14869: PUSH
14870: LD_INT 11
14872: EQUAL
14873: IFFALSE 14883
// sRefresh := true ;
14875: LD_ADDR_EXP 60
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// if p3 = 12 then
14883: LD_VAR 0 3
14887: PUSH
14888: LD_INT 12
14890: EQUAL
14891: IFFALSE 14901
// sExp := true ;
14893: LD_ADDR_EXP 61
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// if p3 = 13 then
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 13
14908: EQUAL
14909: IFFALSE 14919
// sDepot := true ;
14911: LD_ADDR_EXP 62
14915: PUSH
14916: LD_INT 1
14918: ST_TO_ADDR
// if p3 = 14 then
14919: LD_VAR 0 3
14923: PUSH
14924: LD_INT 14
14926: EQUAL
14927: IFFALSE 14937
// sFlag := true ;
14929: LD_ADDR_EXP 63
14933: PUSH
14934: LD_INT 1
14936: ST_TO_ADDR
// if p3 = 15 then
14937: LD_VAR 0 3
14941: PUSH
14942: LD_INT 15
14944: EQUAL
14945: IFFALSE 14955
// sKamikadze := true ;
14947: LD_ADDR_EXP 71
14951: PUSH
14952: LD_INT 1
14954: ST_TO_ADDR
// if p3 = 16 then
14955: LD_VAR 0 3
14959: PUSH
14960: LD_INT 16
14962: EQUAL
14963: IFFALSE 14973
// sTroll := true ;
14965: LD_ADDR_EXP 72
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// if p3 = 17 then
14973: LD_VAR 0 3
14977: PUSH
14978: LD_INT 17
14980: EQUAL
14981: IFFALSE 14991
// sSlow := true ;
14983: LD_ADDR_EXP 73
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if p3 = 18 then
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 18
14998: EQUAL
14999: IFFALSE 15009
// sLack := true ;
15001: LD_ADDR_EXP 74
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// if p3 = 19 then
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 19
15016: EQUAL
15017: IFFALSE 15027
// sTank := true ;
15019: LD_ADDR_EXP 76
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// if p3 = 20 then
15027: LD_VAR 0 3
15031: PUSH
15032: LD_INT 20
15034: EQUAL
15035: IFFALSE 15045
// sRemote := true ;
15037: LD_ADDR_EXP 77
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// if p3 = 21 then
15045: LD_VAR 0 3
15049: PUSH
15050: LD_INT 21
15052: EQUAL
15053: IFFALSE 15063
// sPowell := true ;
15055: LD_ADDR_EXP 78
15059: PUSH
15060: LD_INT 1
15062: ST_TO_ADDR
// if p3 = 22 then
15063: LD_VAR 0 3
15067: PUSH
15068: LD_INT 22
15070: EQUAL
15071: IFFALSE 15081
// sTeleport := true ;
15073: LD_ADDR_EXP 81
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
// if p3 = 23 then
15081: LD_VAR 0 3
15085: PUSH
15086: LD_INT 23
15088: EQUAL
15089: IFFALSE 15099
// sOilTower := true ;
15091: LD_ADDR_EXP 83
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// if p3 = 24 then
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 24
15106: EQUAL
15107: IFFALSE 15117
// sShovel := true ;
15109: LD_ADDR_EXP 84
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// if p3 = 25 then
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 25
15124: EQUAL
15125: IFFALSE 15135
// sSheik := true ;
15127: LD_ADDR_EXP 85
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// if p3 = 26 then
15135: LD_VAR 0 3
15139: PUSH
15140: LD_INT 26
15142: EQUAL
15143: IFFALSE 15153
// sEarthquake := true ;
15145: LD_ADDR_EXP 87
15149: PUSH
15150: LD_INT 1
15152: ST_TO_ADDR
// if p3 = 27 then
15153: LD_VAR 0 3
15157: PUSH
15158: LD_INT 27
15160: EQUAL
15161: IFFALSE 15171
// sAI := true ;
15163: LD_ADDR_EXP 88
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// if p3 = 28 then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 28
15178: EQUAL
15179: IFFALSE 15189
// sCargo := true ;
15181: LD_ADDR_EXP 91
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// if p3 = 29 then
15189: LD_VAR 0 3
15193: PUSH
15194: LD_INT 29
15196: EQUAL
15197: IFFALSE 15207
// sDLaser := true ;
15199: LD_ADDR_EXP 92
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 30 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 30
15214: EQUAL
15215: IFFALSE 15225
// sExchange := true ;
15217: LD_ADDR_EXP 93
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// if p3 = 31 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 31
15232: EQUAL
15233: IFFALSE 15243
// sFac := true ;
15235: LD_ADDR_EXP 94
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// if p3 = 32 then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 32
15250: EQUAL
15251: IFFALSE 15261
// sPower := true ;
15253: LD_ADDR_EXP 95
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// if p3 = 33 then
15261: LD_VAR 0 3
15265: PUSH
15266: LD_INT 33
15268: EQUAL
15269: IFFALSE 15279
// sRandom := true ;
15271: LD_ADDR_EXP 96
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if p3 = 34 then
15279: LD_VAR 0 3
15283: PUSH
15284: LD_INT 34
15286: EQUAL
15287: IFFALSE 15297
// sShield := true ;
15289: LD_ADDR_EXP 97
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// if p3 = 35 then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 35
15304: EQUAL
15305: IFFALSE 15315
// sTime := true ;
15307: LD_ADDR_EXP 98
15311: PUSH
15312: LD_INT 1
15314: ST_TO_ADDR
// if p3 = 36 then
15315: LD_VAR 0 3
15319: PUSH
15320: LD_INT 36
15322: EQUAL
15323: IFFALSE 15333
// sTools := true ;
15325: LD_ADDR_EXP 99
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if p3 = 101 then
15333: LD_VAR 0 3
15337: PUSH
15338: LD_INT 101
15340: EQUAL
15341: IFFALSE 15351
// sSold := true ;
15343: LD_ADDR_EXP 64
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// if p3 = 102 then
15351: LD_VAR 0 3
15355: PUSH
15356: LD_INT 102
15358: EQUAL
15359: IFFALSE 15369
// sDiff := true ;
15361: LD_ADDR_EXP 65
15365: PUSH
15366: LD_INT 1
15368: ST_TO_ADDR
// if p3 = 103 then
15369: LD_VAR 0 3
15373: PUSH
15374: LD_INT 103
15376: EQUAL
15377: IFFALSE 15387
// sFog := true ;
15379: LD_ADDR_EXP 68
15383: PUSH
15384: LD_INT 1
15386: ST_TO_ADDR
// if p3 = 104 then
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 104
15394: EQUAL
15395: IFFALSE 15405
// sReset := true ;
15397: LD_ADDR_EXP 69
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// if p3 = 105 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 105
15412: EQUAL
15413: IFFALSE 15423
// sSun := true ;
15415: LD_ADDR_EXP 70
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 106 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 106
15430: EQUAL
15431: IFFALSE 15441
// sTiger := true ;
15433: LD_ADDR_EXP 66
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// if p3 = 107 then
15441: LD_VAR 0 3
15445: PUSH
15446: LD_INT 107
15448: EQUAL
15449: IFFALSE 15459
// sBomb := true ;
15451: LD_ADDR_EXP 67
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// if p3 = 108 then
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 108
15466: EQUAL
15467: IFFALSE 15477
// sWound := true ;
15469: LD_ADDR_EXP 75
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// if p3 = 109 then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 109
15484: EQUAL
15485: IFFALSE 15495
// sBetray := true ;
15487: LD_ADDR_EXP 79
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// if p3 = 110 then
15495: LD_VAR 0 3
15499: PUSH
15500: LD_INT 110
15502: EQUAL
15503: IFFALSE 15513
// sContamin := true ;
15505: LD_ADDR_EXP 80
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// if p3 = 111 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 111
15520: EQUAL
15521: IFFALSE 15531
// sOil := true ;
15523: LD_ADDR_EXP 82
15527: PUSH
15528: LD_INT 1
15530: ST_TO_ADDR
// if p3 = 112 then
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 112
15538: EQUAL
15539: IFFALSE 15549
// sStu := true ;
15541: LD_ADDR_EXP 86
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// if p3 = 113 then
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 113
15556: EQUAL
15557: IFFALSE 15567
// sBazooka := true ;
15559: LD_ADDR_EXP 89
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// if p3 = 114 then
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 114
15574: EQUAL
15575: IFFALSE 15585
// sMortar := true ;
15577: LD_ADDR_EXP 90
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// if p3 = 115 then
15585: LD_VAR 0 3
15589: PUSH
15590: LD_INT 115
15592: EQUAL
15593: IFFALSE 15603
// sRanger := true ;
15595: LD_ADDR_EXP 100
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if p3 = 116 then
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 116
15610: EQUAL
15611: IFFALSE 15621
// sComputer := true ;
15613: LD_ADDR_EXP 101
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// if p3 = 117 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_INT 117
15628: EQUAL
15629: IFFALSE 15639
// s30 := true ;
15631: LD_ADDR_EXP 102
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// if p3 = 118 then
15639: LD_VAR 0 3
15643: PUSH
15644: LD_INT 118
15646: EQUAL
15647: IFFALSE 15657
// s60 := true ;
15649: LD_ADDR_EXP 103
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// end ; if p2 = hack_mode then
15657: LD_VAR 0 2
15661: PUSH
15662: LD_INT 101
15664: EQUAL
15665: IFFALSE 15793
// begin case p3 of 1 :
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 1
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15687
15680: POP
// hHackUnlimitedResources ; 2 :
15681: CALL 27964 0 0
15685: GO 15793
15687: LD_INT 2
15689: DOUBLE
15690: EQUAL
15691: IFTRUE 15695
15693: GO 15702
15695: POP
// hHackSetLevel10 ; 3 :
15696: CALL 28097 0 0
15700: GO 15793
15702: LD_INT 3
15704: DOUBLE
15705: EQUAL
15706: IFTRUE 15710
15708: GO 15717
15710: POP
// hHackSetLevel10YourUnits ; 4 :
15711: CALL 28182 0 0
15715: GO 15793
15717: LD_INT 4
15719: DOUBLE
15720: EQUAL
15721: IFTRUE 15725
15723: GO 15732
15725: POP
// hHackInvincible ; 5 :
15726: CALL 28630 0 0
15730: GO 15793
15732: LD_INT 5
15734: DOUBLE
15735: EQUAL
15736: IFTRUE 15740
15738: GO 15747
15740: POP
// hHackInvisible ; 6 :
15741: CALL 28741 0 0
15745: GO 15793
15747: LD_INT 6
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15755
15753: GO 15762
15755: POP
// hHackChangeYourSide ; 7 :
15756: CALL 28798 0 0
15760: GO 15793
15762: LD_INT 7
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15777
15770: POP
// hHackChangeUnitSide ; 8 :
15771: CALL 28840 0 0
15775: GO 15793
15777: LD_INT 8
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 15792
15785: POP
// hHackFog ; end ;
15786: CALL 28941 0 0
15790: GO 15793
15792: POP
// end ; if p2 = game_save_mode then
15793: LD_VAR 0 2
15797: PUSH
15798: LD_INT 102
15800: EQUAL
15801: IFFALSE 15866
// begin if p3 = 1 then
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 1
15810: EQUAL
15811: IFFALSE 15823
// globalGameSaveCounter := p4 ;
15813: LD_ADDR_EXP 46
15817: PUSH
15818: LD_VAR 0 4
15822: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15823: LD_VAR 0 3
15827: PUSH
15828: LD_INT 2
15830: EQUAL
15831: PUSH
15832: LD_EXP 46
15836: AND
15837: IFFALSE 15856
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15839: LD_STRING setGameSaveCounter(
15841: PUSH
15842: LD_EXP 46
15846: STR
15847: PUSH
15848: LD_STRING )
15850: STR
15851: PPUSH
15852: CALL_OW 559
// display_strings := globalGameSaveCounter ;
15856: LD_ADDR_OWVAR 47
15860: PUSH
15861: LD_EXP 46
15865: ST_TO_ADDR
// end ; end ;
15866: LD_VAR 0 7
15870: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15871: GO 15873
15873: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15874: LD_STRING initStreamRollete();
15876: PPUSH
15877: CALL_OW 559
// InitStreamMode ;
15881: CALL 15893 0 0
// DefineStreamItems ( false ) ;
15885: LD_INT 0
15887: PPUSH
15888: CALL 16357 0 1
// end ;
15892: END
// function InitStreamMode ; begin
15893: LD_INT 0
15895: PPUSH
// streamModeActive := false ;
15896: LD_ADDR_EXP 47
15900: PUSH
15901: LD_INT 0
15903: ST_TO_ADDR
// normalCounter := 36 ;
15904: LD_ADDR_EXP 48
15908: PUSH
15909: LD_INT 36
15911: ST_TO_ADDR
// hardcoreCounter := 18 ;
15912: LD_ADDR_EXP 49
15916: PUSH
15917: LD_INT 18
15919: ST_TO_ADDR
// sRocket := false ;
15920: LD_ADDR_EXP 52
15924: PUSH
15925: LD_INT 0
15927: ST_TO_ADDR
// sSpeed := false ;
15928: LD_ADDR_EXP 51
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// sEngine := false ;
15936: LD_ADDR_EXP 53
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// sSpec := false ;
15944: LD_ADDR_EXP 50
15948: PUSH
15949: LD_INT 0
15951: ST_TO_ADDR
// sLevel := false ;
15952: LD_ADDR_EXP 54
15956: PUSH
15957: LD_INT 0
15959: ST_TO_ADDR
// sArmoury := false ;
15960: LD_ADDR_EXP 55
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// sRadar := false ;
15968: LD_ADDR_EXP 56
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// sBunker := false ;
15976: LD_ADDR_EXP 57
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// sHack := false ;
15984: LD_ADDR_EXP 58
15988: PUSH
15989: LD_INT 0
15991: ST_TO_ADDR
// sFire := false ;
15992: LD_ADDR_EXP 59
15996: PUSH
15997: LD_INT 0
15999: ST_TO_ADDR
// sRefresh := false ;
16000: LD_ADDR_EXP 60
16004: PUSH
16005: LD_INT 0
16007: ST_TO_ADDR
// sExp := false ;
16008: LD_ADDR_EXP 61
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// sDepot := false ;
16016: LD_ADDR_EXP 62
16020: PUSH
16021: LD_INT 0
16023: ST_TO_ADDR
// sFlag := false ;
16024: LD_ADDR_EXP 63
16028: PUSH
16029: LD_INT 0
16031: ST_TO_ADDR
// sKamikadze := false ;
16032: LD_ADDR_EXP 71
16036: PUSH
16037: LD_INT 0
16039: ST_TO_ADDR
// sTroll := false ;
16040: LD_ADDR_EXP 72
16044: PUSH
16045: LD_INT 0
16047: ST_TO_ADDR
// sSlow := false ;
16048: LD_ADDR_EXP 73
16052: PUSH
16053: LD_INT 0
16055: ST_TO_ADDR
// sLack := false ;
16056: LD_ADDR_EXP 74
16060: PUSH
16061: LD_INT 0
16063: ST_TO_ADDR
// sTank := false ;
16064: LD_ADDR_EXP 76
16068: PUSH
16069: LD_INT 0
16071: ST_TO_ADDR
// sRemote := false ;
16072: LD_ADDR_EXP 77
16076: PUSH
16077: LD_INT 0
16079: ST_TO_ADDR
// sPowell := false ;
16080: LD_ADDR_EXP 78
16084: PUSH
16085: LD_INT 0
16087: ST_TO_ADDR
// sTeleport := false ;
16088: LD_ADDR_EXP 81
16092: PUSH
16093: LD_INT 0
16095: ST_TO_ADDR
// sOilTower := false ;
16096: LD_ADDR_EXP 83
16100: PUSH
16101: LD_INT 0
16103: ST_TO_ADDR
// sShovel := false ;
16104: LD_ADDR_EXP 84
16108: PUSH
16109: LD_INT 0
16111: ST_TO_ADDR
// sSheik := false ;
16112: LD_ADDR_EXP 85
16116: PUSH
16117: LD_INT 0
16119: ST_TO_ADDR
// sEarthquake := false ;
16120: LD_ADDR_EXP 87
16124: PUSH
16125: LD_INT 0
16127: ST_TO_ADDR
// sAI := false ;
16128: LD_ADDR_EXP 88
16132: PUSH
16133: LD_INT 0
16135: ST_TO_ADDR
// sCargo := false ;
16136: LD_ADDR_EXP 91
16140: PUSH
16141: LD_INT 0
16143: ST_TO_ADDR
// sDLaser := false ;
16144: LD_ADDR_EXP 92
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// sExchange := false ;
16152: LD_ADDR_EXP 93
16156: PUSH
16157: LD_INT 0
16159: ST_TO_ADDR
// sFac := false ;
16160: LD_ADDR_EXP 94
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// sPower := false ;
16168: LD_ADDR_EXP 95
16172: PUSH
16173: LD_INT 0
16175: ST_TO_ADDR
// sRandom := false ;
16176: LD_ADDR_EXP 96
16180: PUSH
16181: LD_INT 0
16183: ST_TO_ADDR
// sShield := false ;
16184: LD_ADDR_EXP 97
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// sTime := false ;
16192: LD_ADDR_EXP 98
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
// sTools := false ;
16200: LD_ADDR_EXP 99
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// sSold := false ;
16208: LD_ADDR_EXP 64
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// sDiff := false ;
16216: LD_ADDR_EXP 65
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// sFog := false ;
16224: LD_ADDR_EXP 68
16228: PUSH
16229: LD_INT 0
16231: ST_TO_ADDR
// sReset := false ;
16232: LD_ADDR_EXP 69
16236: PUSH
16237: LD_INT 0
16239: ST_TO_ADDR
// sSun := false ;
16240: LD_ADDR_EXP 70
16244: PUSH
16245: LD_INT 0
16247: ST_TO_ADDR
// sTiger := false ;
16248: LD_ADDR_EXP 66
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// sBomb := false ;
16256: LD_ADDR_EXP 67
16260: PUSH
16261: LD_INT 0
16263: ST_TO_ADDR
// sWound := false ;
16264: LD_ADDR_EXP 75
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// sBetray := false ;
16272: LD_ADDR_EXP 79
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// sContamin := false ;
16280: LD_ADDR_EXP 80
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// sOil := false ;
16288: LD_ADDR_EXP 82
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// sStu := false ;
16296: LD_ADDR_EXP 86
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// sBazooka := false ;
16304: LD_ADDR_EXP 89
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sMortar := false ;
16312: LD_ADDR_EXP 90
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sRanger := false ;
16320: LD_ADDR_EXP 100
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sComputer := false ;
16328: LD_ADDR_EXP 101
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// s30 := false ;
16336: LD_ADDR_EXP 102
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// s60 := false ;
16344: LD_ADDR_EXP 103
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// end ;
16352: LD_VAR 0 1
16356: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16357: LD_INT 0
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
// result := [ ] ;
16366: LD_ADDR_VAR 0 2
16370: PUSH
16371: EMPTY
16372: ST_TO_ADDR
// if campaign_id = 1 then
16373: LD_OWVAR 69
16377: PUSH
16378: LD_INT 1
16380: EQUAL
16381: IFFALSE 19547
// begin case mission_number of 1 :
16383: LD_OWVAR 70
16387: PUSH
16388: LD_INT 1
16390: DOUBLE
16391: EQUAL
16392: IFTRUE 16396
16394: GO 16472
16396: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16397: LD_ADDR_VAR 0 2
16401: PUSH
16402: LD_INT 2
16404: PUSH
16405: LD_INT 4
16407: PUSH
16408: LD_INT 11
16410: PUSH
16411: LD_INT 12
16413: PUSH
16414: LD_INT 15
16416: PUSH
16417: LD_INT 16
16419: PUSH
16420: LD_INT 22
16422: PUSH
16423: LD_INT 23
16425: PUSH
16426: LD_INT 26
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 101
16442: PUSH
16443: LD_INT 102
16445: PUSH
16446: LD_INT 106
16448: PUSH
16449: LD_INT 116
16451: PUSH
16452: LD_INT 117
16454: PUSH
16455: LD_INT 118
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: ST_TO_ADDR
16470: GO 19545
16472: LD_INT 2
16474: DOUBLE
16475: EQUAL
16476: IFTRUE 16480
16478: GO 16564
16480: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 4
16491: PUSH
16492: LD_INT 11
16494: PUSH
16495: LD_INT 12
16497: PUSH
16498: LD_INT 15
16500: PUSH
16501: LD_INT 16
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_INT 23
16509: PUSH
16510: LD_INT 26
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 101
16526: PUSH
16527: LD_INT 102
16529: PUSH
16530: LD_INT 105
16532: PUSH
16533: LD_INT 106
16535: PUSH
16536: LD_INT 108
16538: PUSH
16539: LD_INT 116
16541: PUSH
16542: LD_INT 117
16544: PUSH
16545: LD_INT 118
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: ST_TO_ADDR
16562: GO 19545
16564: LD_INT 3
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16572
16570: GO 16660
16572: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 4
16583: PUSH
16584: LD_INT 5
16586: PUSH
16587: LD_INT 11
16589: PUSH
16590: LD_INT 12
16592: PUSH
16593: LD_INT 15
16595: PUSH
16596: LD_INT 16
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_INT 26
16604: PUSH
16605: LD_INT 36
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 101
16622: PUSH
16623: LD_INT 102
16625: PUSH
16626: LD_INT 105
16628: PUSH
16629: LD_INT 106
16631: PUSH
16632: LD_INT 108
16634: PUSH
16635: LD_INT 116
16637: PUSH
16638: LD_INT 117
16640: PUSH
16641: LD_INT 118
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: ST_TO_ADDR
16658: GO 19545
16660: LD_INT 4
16662: DOUBLE
16663: EQUAL
16664: IFTRUE 16668
16666: GO 16764
16668: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 4
16679: PUSH
16680: LD_INT 5
16682: PUSH
16683: LD_INT 8
16685: PUSH
16686: LD_INT 11
16688: PUSH
16689: LD_INT 12
16691: PUSH
16692: LD_INT 15
16694: PUSH
16695: LD_INT 16
16697: PUSH
16698: LD_INT 22
16700: PUSH
16701: LD_INT 23
16703: PUSH
16704: LD_INT 26
16706: PUSH
16707: LD_INT 36
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 101
16726: PUSH
16727: LD_INT 102
16729: PUSH
16730: LD_INT 105
16732: PUSH
16733: LD_INT 106
16735: PUSH
16736: LD_INT 108
16738: PUSH
16739: LD_INT 116
16741: PUSH
16742: LD_INT 117
16744: PUSH
16745: LD_INT 118
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: ST_TO_ADDR
16762: GO 19545
16764: LD_INT 5
16766: DOUBLE
16767: EQUAL
16768: IFTRUE 16772
16770: GO 16884
16772: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16773: LD_ADDR_VAR 0 2
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 4
16783: PUSH
16784: LD_INT 5
16786: PUSH
16787: LD_INT 6
16789: PUSH
16790: LD_INT 8
16792: PUSH
16793: LD_INT 11
16795: PUSH
16796: LD_INT 12
16798: PUSH
16799: LD_INT 15
16801: PUSH
16802: LD_INT 16
16804: PUSH
16805: LD_INT 22
16807: PUSH
16808: LD_INT 23
16810: PUSH
16811: LD_INT 25
16813: PUSH
16814: LD_INT 26
16816: PUSH
16817: LD_INT 36
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 101
16838: PUSH
16839: LD_INT 102
16841: PUSH
16842: LD_INT 105
16844: PUSH
16845: LD_INT 106
16847: PUSH
16848: LD_INT 108
16850: PUSH
16851: LD_INT 109
16853: PUSH
16854: LD_INT 112
16856: PUSH
16857: LD_INT 116
16859: PUSH
16860: LD_INT 117
16862: PUSH
16863: LD_INT 118
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: ST_TO_ADDR
16882: GO 19545
16884: LD_INT 6
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 17024
16892: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16893: LD_ADDR_VAR 0 2
16897: PUSH
16898: LD_INT 2
16900: PUSH
16901: LD_INT 4
16903: PUSH
16904: LD_INT 5
16906: PUSH
16907: LD_INT 6
16909: PUSH
16910: LD_INT 8
16912: PUSH
16913: LD_INT 11
16915: PUSH
16916: LD_INT 12
16918: PUSH
16919: LD_INT 15
16921: PUSH
16922: LD_INT 16
16924: PUSH
16925: LD_INT 20
16927: PUSH
16928: LD_INT 21
16930: PUSH
16931: LD_INT 22
16933: PUSH
16934: LD_INT 23
16936: PUSH
16937: LD_INT 25
16939: PUSH
16940: LD_INT 26
16942: PUSH
16943: LD_INT 30
16945: PUSH
16946: LD_INT 31
16948: PUSH
16949: LD_INT 32
16951: PUSH
16952: LD_INT 36
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 101
16978: PUSH
16979: LD_INT 102
16981: PUSH
16982: LD_INT 105
16984: PUSH
16985: LD_INT 106
16987: PUSH
16988: LD_INT 108
16990: PUSH
16991: LD_INT 109
16993: PUSH
16994: LD_INT 112
16996: PUSH
16997: LD_INT 116
16999: PUSH
17000: LD_INT 117
17002: PUSH
17003: LD_INT 118
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: ST_TO_ADDR
17022: GO 19545
17024: LD_INT 7
17026: DOUBLE
17027: EQUAL
17028: IFTRUE 17032
17030: GO 17144
17032: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17033: LD_ADDR_VAR 0 2
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 4
17043: PUSH
17044: LD_INT 5
17046: PUSH
17047: LD_INT 7
17049: PUSH
17050: LD_INT 11
17052: PUSH
17053: LD_INT 12
17055: PUSH
17056: LD_INT 15
17058: PUSH
17059: LD_INT 16
17061: PUSH
17062: LD_INT 20
17064: PUSH
17065: LD_INT 21
17067: PUSH
17068: LD_INT 22
17070: PUSH
17071: LD_INT 23
17073: PUSH
17074: LD_INT 25
17076: PUSH
17077: LD_INT 26
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 101
17098: PUSH
17099: LD_INT 102
17101: PUSH
17102: LD_INT 103
17104: PUSH
17105: LD_INT 105
17107: PUSH
17108: LD_INT 106
17110: PUSH
17111: LD_INT 108
17113: PUSH
17114: LD_INT 112
17116: PUSH
17117: LD_INT 116
17119: PUSH
17120: LD_INT 117
17122: PUSH
17123: LD_INT 118
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: ST_TO_ADDR
17142: GO 19545
17144: LD_INT 8
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17292
17152: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17153: LD_ADDR_VAR 0 2
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: LD_INT 4
17163: PUSH
17164: LD_INT 5
17166: PUSH
17167: LD_INT 6
17169: PUSH
17170: LD_INT 7
17172: PUSH
17173: LD_INT 8
17175: PUSH
17176: LD_INT 11
17178: PUSH
17179: LD_INT 12
17181: PUSH
17182: LD_INT 15
17184: PUSH
17185: LD_INT 16
17187: PUSH
17188: LD_INT 20
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_INT 23
17199: PUSH
17200: LD_INT 25
17202: PUSH
17203: LD_INT 26
17205: PUSH
17206: LD_INT 30
17208: PUSH
17209: LD_INT 31
17211: PUSH
17212: LD_INT 32
17214: PUSH
17215: LD_INT 36
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 101
17242: PUSH
17243: LD_INT 102
17245: PUSH
17246: LD_INT 103
17248: PUSH
17249: LD_INT 105
17251: PUSH
17252: LD_INT 106
17254: PUSH
17255: LD_INT 108
17257: PUSH
17258: LD_INT 109
17260: PUSH
17261: LD_INT 112
17263: PUSH
17264: LD_INT 116
17266: PUSH
17267: LD_INT 117
17269: PUSH
17270: LD_INT 118
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: ST_TO_ADDR
17290: GO 19545
17292: LD_INT 9
17294: DOUBLE
17295: EQUAL
17296: IFTRUE 17300
17298: GO 17448
17300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17301: LD_ADDR_VAR 0 2
17305: PUSH
17306: LD_INT 2
17308: PUSH
17309: LD_INT 4
17311: PUSH
17312: LD_INT 5
17314: PUSH
17315: LD_INT 6
17317: PUSH
17318: LD_INT 7
17320: PUSH
17321: LD_INT 8
17323: PUSH
17324: LD_INT 11
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: LD_INT 15
17332: PUSH
17333: LD_INT 16
17335: PUSH
17336: LD_INT 20
17338: PUSH
17339: LD_INT 21
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 23
17347: PUSH
17348: LD_INT 25
17350: PUSH
17351: LD_INT 26
17353: PUSH
17354: LD_INT 28
17356: PUSH
17357: LD_INT 30
17359: PUSH
17360: LD_INT 31
17362: PUSH
17363: LD_INT 32
17365: PUSH
17366: LD_INT 36
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 101
17394: PUSH
17395: LD_INT 102
17397: PUSH
17398: LD_INT 103
17400: PUSH
17401: LD_INT 105
17403: PUSH
17404: LD_INT 106
17406: PUSH
17407: LD_INT 108
17409: PUSH
17410: LD_INT 109
17412: PUSH
17413: LD_INT 112
17415: PUSH
17416: LD_INT 114
17418: PUSH
17419: LD_INT 116
17421: PUSH
17422: LD_INT 117
17424: PUSH
17425: LD_INT 118
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: ST_TO_ADDR
17446: GO 19545
17448: LD_INT 10
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17652
17456: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17457: LD_ADDR_VAR 0 2
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 4
17467: PUSH
17468: LD_INT 5
17470: PUSH
17471: LD_INT 6
17473: PUSH
17474: LD_INT 7
17476: PUSH
17477: LD_INT 8
17479: PUSH
17480: LD_INT 9
17482: PUSH
17483: LD_INT 10
17485: PUSH
17486: LD_INT 11
17488: PUSH
17489: LD_INT 12
17491: PUSH
17492: LD_INT 13
17494: PUSH
17495: LD_INT 14
17497: PUSH
17498: LD_INT 15
17500: PUSH
17501: LD_INT 16
17503: PUSH
17504: LD_INT 17
17506: PUSH
17507: LD_INT 18
17509: PUSH
17510: LD_INT 19
17512: PUSH
17513: LD_INT 20
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_INT 23
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 25
17530: PUSH
17531: LD_INT 26
17533: PUSH
17534: LD_INT 28
17536: PUSH
17537: LD_INT 30
17539: PUSH
17540: LD_INT 31
17542: PUSH
17543: LD_INT 32
17545: PUSH
17546: LD_INT 36
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 101
17582: PUSH
17583: LD_INT 102
17585: PUSH
17586: LD_INT 103
17588: PUSH
17589: LD_INT 104
17591: PUSH
17592: LD_INT 105
17594: PUSH
17595: LD_INT 106
17597: PUSH
17598: LD_INT 107
17600: PUSH
17601: LD_INT 108
17603: PUSH
17604: LD_INT 109
17606: PUSH
17607: LD_INT 110
17609: PUSH
17610: LD_INT 111
17612: PUSH
17613: LD_INT 112
17615: PUSH
17616: LD_INT 114
17618: PUSH
17619: LD_INT 116
17621: PUSH
17622: LD_INT 117
17624: PUSH
17625: LD_INT 118
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: ST_TO_ADDR
17650: GO 19545
17652: LD_INT 11
17654: DOUBLE
17655: EQUAL
17656: IFTRUE 17660
17658: GO 17864
17660: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17661: LD_ADDR_VAR 0 2
17665: PUSH
17666: LD_INT 2
17668: PUSH
17669: LD_INT 3
17671: PUSH
17672: LD_INT 4
17674: PUSH
17675: LD_INT 5
17677: PUSH
17678: LD_INT 6
17680: PUSH
17681: LD_INT 7
17683: PUSH
17684: LD_INT 8
17686: PUSH
17687: LD_INT 9
17689: PUSH
17690: LD_INT 10
17692: PUSH
17693: LD_INT 11
17695: PUSH
17696: LD_INT 12
17698: PUSH
17699: LD_INT 13
17701: PUSH
17702: LD_INT 14
17704: PUSH
17705: LD_INT 15
17707: PUSH
17708: LD_INT 16
17710: PUSH
17711: LD_INT 17
17713: PUSH
17714: LD_INT 18
17716: PUSH
17717: LD_INT 19
17719: PUSH
17720: LD_INT 20
17722: PUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_INT 23
17731: PUSH
17732: LD_INT 24
17734: PUSH
17735: LD_INT 25
17737: PUSH
17738: LD_INT 26
17740: PUSH
17741: LD_INT 28
17743: PUSH
17744: LD_INT 30
17746: PUSH
17747: LD_INT 31
17749: PUSH
17750: LD_INT 32
17752: PUSH
17753: LD_INT 34
17755: PUSH
17756: LD_INT 36
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 101
17794: PUSH
17795: LD_INT 102
17797: PUSH
17798: LD_INT 103
17800: PUSH
17801: LD_INT 104
17803: PUSH
17804: LD_INT 105
17806: PUSH
17807: LD_INT 106
17809: PUSH
17810: LD_INT 107
17812: PUSH
17813: LD_INT 108
17815: PUSH
17816: LD_INT 109
17818: PUSH
17819: LD_INT 110
17821: PUSH
17822: LD_INT 111
17824: PUSH
17825: LD_INT 112
17827: PUSH
17828: LD_INT 114
17830: PUSH
17831: LD_INT 116
17833: PUSH
17834: LD_INT 117
17836: PUSH
17837: LD_INT 118
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: ST_TO_ADDR
17862: GO 19545
17864: LD_INT 12
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 18092
17872: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: LD_INT 2
17883: PUSH
17884: LD_INT 3
17886: PUSH
17887: LD_INT 4
17889: PUSH
17890: LD_INT 5
17892: PUSH
17893: LD_INT 6
17895: PUSH
17896: LD_INT 7
17898: PUSH
17899: LD_INT 8
17901: PUSH
17902: LD_INT 9
17904: PUSH
17905: LD_INT 10
17907: PUSH
17908: LD_INT 11
17910: PUSH
17911: LD_INT 12
17913: PUSH
17914: LD_INT 13
17916: PUSH
17917: LD_INT 14
17919: PUSH
17920: LD_INT 15
17922: PUSH
17923: LD_INT 16
17925: PUSH
17926: LD_INT 17
17928: PUSH
17929: LD_INT 18
17931: PUSH
17932: LD_INT 19
17934: PUSH
17935: LD_INT 20
17937: PUSH
17938: LD_INT 21
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_INT 23
17946: PUSH
17947: LD_INT 24
17949: PUSH
17950: LD_INT 25
17952: PUSH
17953: LD_INT 26
17955: PUSH
17956: LD_INT 27
17958: PUSH
17959: LD_INT 28
17961: PUSH
17962: LD_INT 30
17964: PUSH
17965: LD_INT 31
17967: PUSH
17968: LD_INT 32
17970: PUSH
17971: LD_INT 33
17973: PUSH
17974: LD_INT 34
17976: PUSH
17977: LD_INT 36
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 101
18018: PUSH
18019: LD_INT 102
18021: PUSH
18022: LD_INT 103
18024: PUSH
18025: LD_INT 104
18027: PUSH
18028: LD_INT 105
18030: PUSH
18031: LD_INT 106
18033: PUSH
18034: LD_INT 107
18036: PUSH
18037: LD_INT 108
18039: PUSH
18040: LD_INT 109
18042: PUSH
18043: LD_INT 110
18045: PUSH
18046: LD_INT 111
18048: PUSH
18049: LD_INT 112
18051: PUSH
18052: LD_INT 113
18054: PUSH
18055: LD_INT 114
18057: PUSH
18058: LD_INT 116
18060: PUSH
18061: LD_INT 117
18063: PUSH
18064: LD_INT 118
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: ST_TO_ADDR
18090: GO 19545
18092: LD_INT 13
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18308
18100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18101: LD_ADDR_VAR 0 2
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: LD_INT 4
18117: PUSH
18118: LD_INT 5
18120: PUSH
18121: LD_INT 8
18123: PUSH
18124: LD_INT 9
18126: PUSH
18127: LD_INT 10
18129: PUSH
18130: LD_INT 11
18132: PUSH
18133: LD_INT 12
18135: PUSH
18136: LD_INT 14
18138: PUSH
18139: LD_INT 15
18141: PUSH
18142: LD_INT 16
18144: PUSH
18145: LD_INT 17
18147: PUSH
18148: LD_INT 18
18150: PUSH
18151: LD_INT 19
18153: PUSH
18154: LD_INT 20
18156: PUSH
18157: LD_INT 21
18159: PUSH
18160: LD_INT 22
18162: PUSH
18163: LD_INT 23
18165: PUSH
18166: LD_INT 24
18168: PUSH
18169: LD_INT 25
18171: PUSH
18172: LD_INT 26
18174: PUSH
18175: LD_INT 27
18177: PUSH
18178: LD_INT 28
18180: PUSH
18181: LD_INT 30
18183: PUSH
18184: LD_INT 31
18186: PUSH
18187: LD_INT 32
18189: PUSH
18190: LD_INT 33
18192: PUSH
18193: LD_INT 34
18195: PUSH
18196: LD_INT 36
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 101
18234: PUSH
18235: LD_INT 102
18237: PUSH
18238: LD_INT 103
18240: PUSH
18241: LD_INT 104
18243: PUSH
18244: LD_INT 105
18246: PUSH
18247: LD_INT 106
18249: PUSH
18250: LD_INT 107
18252: PUSH
18253: LD_INT 108
18255: PUSH
18256: LD_INT 109
18258: PUSH
18259: LD_INT 110
18261: PUSH
18262: LD_INT 111
18264: PUSH
18265: LD_INT 112
18267: PUSH
18268: LD_INT 113
18270: PUSH
18271: LD_INT 114
18273: PUSH
18274: LD_INT 116
18276: PUSH
18277: LD_INT 117
18279: PUSH
18280: LD_INT 118
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: ST_TO_ADDR
18306: GO 19545
18308: LD_INT 14
18310: DOUBLE
18311: EQUAL
18312: IFTRUE 18316
18314: GO 18540
18316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18317: LD_ADDR_VAR 0 2
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: LD_INT 5
18336: PUSH
18337: LD_INT 6
18339: PUSH
18340: LD_INT 7
18342: PUSH
18343: LD_INT 8
18345: PUSH
18346: LD_INT 9
18348: PUSH
18349: LD_INT 10
18351: PUSH
18352: LD_INT 11
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: LD_INT 13
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 15
18366: PUSH
18367: LD_INT 16
18369: PUSH
18370: LD_INT 17
18372: PUSH
18373: LD_INT 18
18375: PUSH
18376: LD_INT 19
18378: PUSH
18379: LD_INT 20
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 23
18390: PUSH
18391: LD_INT 24
18393: PUSH
18394: LD_INT 25
18396: PUSH
18397: LD_INT 26
18399: PUSH
18400: LD_INT 27
18402: PUSH
18403: LD_INT 28
18405: PUSH
18406: LD_INT 29
18408: PUSH
18409: LD_INT 30
18411: PUSH
18412: LD_INT 31
18414: PUSH
18415: LD_INT 32
18417: PUSH
18418: LD_INT 33
18420: PUSH
18421: LD_INT 34
18423: PUSH
18424: LD_INT 36
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 101
18466: PUSH
18467: LD_INT 102
18469: PUSH
18470: LD_INT 103
18472: PUSH
18473: LD_INT 104
18475: PUSH
18476: LD_INT 105
18478: PUSH
18479: LD_INT 106
18481: PUSH
18482: LD_INT 107
18484: PUSH
18485: LD_INT 108
18487: PUSH
18488: LD_INT 109
18490: PUSH
18491: LD_INT 110
18493: PUSH
18494: LD_INT 111
18496: PUSH
18497: LD_INT 112
18499: PUSH
18500: LD_INT 113
18502: PUSH
18503: LD_INT 114
18505: PUSH
18506: LD_INT 116
18508: PUSH
18509: LD_INT 117
18511: PUSH
18512: LD_INT 118
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: ST_TO_ADDR
18538: GO 19545
18540: LD_INT 15
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18772
18548: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18549: LD_ADDR_VAR 0 2
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: LD_INT 4
18565: PUSH
18566: LD_INT 5
18568: PUSH
18569: LD_INT 6
18571: PUSH
18572: LD_INT 7
18574: PUSH
18575: LD_INT 8
18577: PUSH
18578: LD_INT 9
18580: PUSH
18581: LD_INT 10
18583: PUSH
18584: LD_INT 11
18586: PUSH
18587: LD_INT 12
18589: PUSH
18590: LD_INT 13
18592: PUSH
18593: LD_INT 14
18595: PUSH
18596: LD_INT 15
18598: PUSH
18599: LD_INT 16
18601: PUSH
18602: LD_INT 17
18604: PUSH
18605: LD_INT 18
18607: PUSH
18608: LD_INT 19
18610: PUSH
18611: LD_INT 20
18613: PUSH
18614: LD_INT 21
18616: PUSH
18617: LD_INT 22
18619: PUSH
18620: LD_INT 23
18622: PUSH
18623: LD_INT 24
18625: PUSH
18626: LD_INT 25
18628: PUSH
18629: LD_INT 26
18631: PUSH
18632: LD_INT 27
18634: PUSH
18635: LD_INT 28
18637: PUSH
18638: LD_INT 29
18640: PUSH
18641: LD_INT 30
18643: PUSH
18644: LD_INT 31
18646: PUSH
18647: LD_INT 32
18649: PUSH
18650: LD_INT 33
18652: PUSH
18653: LD_INT 34
18655: PUSH
18656: LD_INT 36
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 101
18698: PUSH
18699: LD_INT 102
18701: PUSH
18702: LD_INT 103
18704: PUSH
18705: LD_INT 104
18707: PUSH
18708: LD_INT 105
18710: PUSH
18711: LD_INT 106
18713: PUSH
18714: LD_INT 107
18716: PUSH
18717: LD_INT 108
18719: PUSH
18720: LD_INT 109
18722: PUSH
18723: LD_INT 110
18725: PUSH
18726: LD_INT 111
18728: PUSH
18729: LD_INT 112
18731: PUSH
18732: LD_INT 113
18734: PUSH
18735: LD_INT 114
18737: PUSH
18738: LD_INT 116
18740: PUSH
18741: LD_INT 117
18743: PUSH
18744: LD_INT 118
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: ST_TO_ADDR
18770: GO 19545
18772: LD_INT 16
18774: DOUBLE
18775: EQUAL
18776: IFTRUE 18780
18778: GO 18916
18780: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18781: LD_ADDR_VAR 0 2
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 4
18791: PUSH
18792: LD_INT 5
18794: PUSH
18795: LD_INT 7
18797: PUSH
18798: LD_INT 11
18800: PUSH
18801: LD_INT 12
18803: PUSH
18804: LD_INT 15
18806: PUSH
18807: LD_INT 16
18809: PUSH
18810: LD_INT 20
18812: PUSH
18813: LD_INT 21
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_INT 23
18821: PUSH
18822: LD_INT 25
18824: PUSH
18825: LD_INT 26
18827: PUSH
18828: LD_INT 30
18830: PUSH
18831: LD_INT 31
18833: PUSH
18834: LD_INT 32
18836: PUSH
18837: LD_INT 33
18839: PUSH
18840: LD_INT 34
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 101
18866: PUSH
18867: LD_INT 102
18869: PUSH
18870: LD_INT 103
18872: PUSH
18873: LD_INT 106
18875: PUSH
18876: LD_INT 108
18878: PUSH
18879: LD_INT 112
18881: PUSH
18882: LD_INT 113
18884: PUSH
18885: LD_INT 114
18887: PUSH
18888: LD_INT 116
18890: PUSH
18891: LD_INT 117
18893: PUSH
18894: LD_INT 118
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: ST_TO_ADDR
18914: GO 19545
18916: LD_INT 17
18918: DOUBLE
18919: EQUAL
18920: IFTRUE 18924
18922: GO 19148
18924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18925: LD_ADDR_VAR 0 2
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 3
18938: PUSH
18939: LD_INT 4
18941: PUSH
18942: LD_INT 5
18944: PUSH
18945: LD_INT 6
18947: PUSH
18948: LD_INT 7
18950: PUSH
18951: LD_INT 8
18953: PUSH
18954: LD_INT 9
18956: PUSH
18957: LD_INT 10
18959: PUSH
18960: LD_INT 11
18962: PUSH
18963: LD_INT 12
18965: PUSH
18966: LD_INT 13
18968: PUSH
18969: LD_INT 14
18971: PUSH
18972: LD_INT 15
18974: PUSH
18975: LD_INT 16
18977: PUSH
18978: LD_INT 17
18980: PUSH
18981: LD_INT 18
18983: PUSH
18984: LD_INT 19
18986: PUSH
18987: LD_INT 20
18989: PUSH
18990: LD_INT 21
18992: PUSH
18993: LD_INT 22
18995: PUSH
18996: LD_INT 23
18998: PUSH
18999: LD_INT 24
19001: PUSH
19002: LD_INT 25
19004: PUSH
19005: LD_INT 26
19007: PUSH
19008: LD_INT 27
19010: PUSH
19011: LD_INT 28
19013: PUSH
19014: LD_INT 29
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: LD_INT 31
19022: PUSH
19023: LD_INT 32
19025: PUSH
19026: LD_INT 33
19028: PUSH
19029: LD_INT 34
19031: PUSH
19032: LD_INT 36
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 101
19074: PUSH
19075: LD_INT 102
19077: PUSH
19078: LD_INT 103
19080: PUSH
19081: LD_INT 104
19083: PUSH
19084: LD_INT 105
19086: PUSH
19087: LD_INT 106
19089: PUSH
19090: LD_INT 107
19092: PUSH
19093: LD_INT 108
19095: PUSH
19096: LD_INT 109
19098: PUSH
19099: LD_INT 110
19101: PUSH
19102: LD_INT 111
19104: PUSH
19105: LD_INT 112
19107: PUSH
19108: LD_INT 113
19110: PUSH
19111: LD_INT 114
19113: PUSH
19114: LD_INT 116
19116: PUSH
19117: LD_INT 117
19119: PUSH
19120: LD_INT 118
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: ST_TO_ADDR
19146: GO 19545
19148: LD_INT 18
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19304
19156: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 4
19167: PUSH
19168: LD_INT 5
19170: PUSH
19171: LD_INT 7
19173: PUSH
19174: LD_INT 11
19176: PUSH
19177: LD_INT 12
19179: PUSH
19180: LD_INT 15
19182: PUSH
19183: LD_INT 16
19185: PUSH
19186: LD_INT 20
19188: PUSH
19189: LD_INT 21
19191: PUSH
19192: LD_INT 22
19194: PUSH
19195: LD_INT 23
19197: PUSH
19198: LD_INT 25
19200: PUSH
19201: LD_INT 26
19203: PUSH
19204: LD_INT 30
19206: PUSH
19207: LD_INT 31
19209: PUSH
19210: LD_INT 32
19212: PUSH
19213: LD_INT 33
19215: PUSH
19216: LD_INT 34
19218: PUSH
19219: LD_INT 35
19221: PUSH
19222: LD_INT 36
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 101
19250: PUSH
19251: LD_INT 102
19253: PUSH
19254: LD_INT 103
19256: PUSH
19257: LD_INT 106
19259: PUSH
19260: LD_INT 108
19262: PUSH
19263: LD_INT 112
19265: PUSH
19266: LD_INT 113
19268: PUSH
19269: LD_INT 114
19271: PUSH
19272: LD_INT 115
19274: PUSH
19275: LD_INT 116
19277: PUSH
19278: LD_INT 117
19280: PUSH
19281: LD_INT 118
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: ST_TO_ADDR
19302: GO 19545
19304: LD_INT 19
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19544
19312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 3
19326: PUSH
19327: LD_INT 4
19329: PUSH
19330: LD_INT 5
19332: PUSH
19333: LD_INT 6
19335: PUSH
19336: LD_INT 7
19338: PUSH
19339: LD_INT 8
19341: PUSH
19342: LD_INT 9
19344: PUSH
19345: LD_INT 10
19347: PUSH
19348: LD_INT 11
19350: PUSH
19351: LD_INT 12
19353: PUSH
19354: LD_INT 13
19356: PUSH
19357: LD_INT 14
19359: PUSH
19360: LD_INT 15
19362: PUSH
19363: LD_INT 16
19365: PUSH
19366: LD_INT 17
19368: PUSH
19369: LD_INT 18
19371: PUSH
19372: LD_INT 19
19374: PUSH
19375: LD_INT 20
19377: PUSH
19378: LD_INT 21
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_INT 23
19386: PUSH
19387: LD_INT 24
19389: PUSH
19390: LD_INT 25
19392: PUSH
19393: LD_INT 26
19395: PUSH
19396: LD_INT 27
19398: PUSH
19399: LD_INT 28
19401: PUSH
19402: LD_INT 29
19404: PUSH
19405: LD_INT 30
19407: PUSH
19408: LD_INT 31
19410: PUSH
19411: LD_INT 32
19413: PUSH
19414: LD_INT 33
19416: PUSH
19417: LD_INT 34
19419: PUSH
19420: LD_INT 35
19422: PUSH
19423: LD_INT 36
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 101
19466: PUSH
19467: LD_INT 102
19469: PUSH
19470: LD_INT 103
19472: PUSH
19473: LD_INT 104
19475: PUSH
19476: LD_INT 105
19478: PUSH
19479: LD_INT 106
19481: PUSH
19482: LD_INT 107
19484: PUSH
19485: LD_INT 108
19487: PUSH
19488: LD_INT 109
19490: PUSH
19491: LD_INT 110
19493: PUSH
19494: LD_INT 111
19496: PUSH
19497: LD_INT 112
19499: PUSH
19500: LD_INT 113
19502: PUSH
19503: LD_INT 114
19505: PUSH
19506: LD_INT 115
19508: PUSH
19509: LD_INT 116
19511: PUSH
19512: LD_INT 117
19514: PUSH
19515: LD_INT 118
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: ST_TO_ADDR
19542: GO 19545
19544: POP
// end else
19545: GO 19776
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 3
19560: PUSH
19561: LD_INT 4
19563: PUSH
19564: LD_INT 5
19566: PUSH
19567: LD_INT 6
19569: PUSH
19570: LD_INT 7
19572: PUSH
19573: LD_INT 8
19575: PUSH
19576: LD_INT 9
19578: PUSH
19579: LD_INT 10
19581: PUSH
19582: LD_INT 11
19584: PUSH
19585: LD_INT 12
19587: PUSH
19588: LD_INT 13
19590: PUSH
19591: LD_INT 14
19593: PUSH
19594: LD_INT 15
19596: PUSH
19597: LD_INT 16
19599: PUSH
19600: LD_INT 17
19602: PUSH
19603: LD_INT 18
19605: PUSH
19606: LD_INT 19
19608: PUSH
19609: LD_INT 20
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_INT 23
19620: PUSH
19621: LD_INT 24
19623: PUSH
19624: LD_INT 25
19626: PUSH
19627: LD_INT 26
19629: PUSH
19630: LD_INT 27
19632: PUSH
19633: LD_INT 28
19635: PUSH
19636: LD_INT 29
19638: PUSH
19639: LD_INT 30
19641: PUSH
19642: LD_INT 31
19644: PUSH
19645: LD_INT 32
19647: PUSH
19648: LD_INT 33
19650: PUSH
19651: LD_INT 34
19653: PUSH
19654: LD_INT 35
19656: PUSH
19657: LD_INT 36
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 101
19700: PUSH
19701: LD_INT 102
19703: PUSH
19704: LD_INT 103
19706: PUSH
19707: LD_INT 104
19709: PUSH
19710: LD_INT 105
19712: PUSH
19713: LD_INT 106
19715: PUSH
19716: LD_INT 107
19718: PUSH
19719: LD_INT 108
19721: PUSH
19722: LD_INT 109
19724: PUSH
19725: LD_INT 110
19727: PUSH
19728: LD_INT 111
19730: PUSH
19731: LD_INT 112
19733: PUSH
19734: LD_INT 113
19736: PUSH
19737: LD_INT 114
19739: PUSH
19740: LD_INT 115
19742: PUSH
19743: LD_INT 116
19745: PUSH
19746: LD_INT 117
19748: PUSH
19749: LD_INT 118
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: ST_TO_ADDR
// if result then
19776: LD_VAR 0 2
19780: IFFALSE 20566
// begin normal :=  ;
19782: LD_ADDR_VAR 0 5
19786: PUSH
19787: LD_STRING 
19789: ST_TO_ADDR
// hardcore :=  ;
19790: LD_ADDR_VAR 0 6
19794: PUSH
19795: LD_STRING 
19797: ST_TO_ADDR
// active :=  ;
19798: LD_ADDR_VAR 0 7
19802: PUSH
19803: LD_STRING 
19805: ST_TO_ADDR
// for i = 1 to normalCounter do
19806: LD_ADDR_VAR 0 8
19810: PUSH
19811: DOUBLE
19812: LD_INT 1
19814: DEC
19815: ST_TO_ADDR
19816: LD_EXP 48
19820: PUSH
19821: FOR_TO
19822: IFFALSE 19923
// begin tmp := 0 ;
19824: LD_ADDR_VAR 0 3
19828: PUSH
19829: LD_STRING 0
19831: ST_TO_ADDR
// if result [ 1 ] then
19832: LD_VAR 0 2
19836: PUSH
19837: LD_INT 1
19839: ARRAY
19840: IFFALSE 19905
// if result [ 1 ] [ 1 ] = i then
19842: LD_VAR 0 2
19846: PUSH
19847: LD_INT 1
19849: ARRAY
19850: PUSH
19851: LD_INT 1
19853: ARRAY
19854: PUSH
19855: LD_VAR 0 8
19859: EQUAL
19860: IFFALSE 19905
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19862: LD_ADDR_VAR 0 2
19866: PUSH
19867: LD_VAR 0 2
19871: PPUSH
19872: LD_INT 1
19874: PPUSH
19875: LD_VAR 0 2
19879: PUSH
19880: LD_INT 1
19882: ARRAY
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 3
19891: PPUSH
19892: CALL_OW 1
19896: ST_TO_ADDR
// tmp := 1 ;
19897: LD_ADDR_VAR 0 3
19901: PUSH
19902: LD_STRING 1
19904: ST_TO_ADDR
// end ; normal := normal & tmp ;
19905: LD_ADDR_VAR 0 5
19909: PUSH
19910: LD_VAR 0 5
19914: PUSH
19915: LD_VAR 0 3
19919: STR
19920: ST_TO_ADDR
// end ;
19921: GO 19821
19923: POP
19924: POP
// for i = 1 to hardcoreCounter do
19925: LD_ADDR_VAR 0 8
19929: PUSH
19930: DOUBLE
19931: LD_INT 1
19933: DEC
19934: ST_TO_ADDR
19935: LD_EXP 49
19939: PUSH
19940: FOR_TO
19941: IFFALSE 20046
// begin tmp := 0 ;
19943: LD_ADDR_VAR 0 3
19947: PUSH
19948: LD_STRING 0
19950: ST_TO_ADDR
// if result [ 2 ] then
19951: LD_VAR 0 2
19955: PUSH
19956: LD_INT 2
19958: ARRAY
19959: IFFALSE 20028
// if result [ 2 ] [ 1 ] = 100 + i then
19961: LD_VAR 0 2
19965: PUSH
19966: LD_INT 2
19968: ARRAY
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PUSH
19974: LD_INT 100
19976: PUSH
19977: LD_VAR 0 8
19981: PLUS
19982: EQUAL
19983: IFFALSE 20028
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_VAR 0 2
19994: PPUSH
19995: LD_INT 2
19997: PPUSH
19998: LD_VAR 0 2
20002: PUSH
20003: LD_INT 2
20005: ARRAY
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 3
20014: PPUSH
20015: CALL_OW 1
20019: ST_TO_ADDR
// tmp := 1 ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_STRING 1
20027: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20028: LD_ADDR_VAR 0 6
20032: PUSH
20033: LD_VAR 0 6
20037: PUSH
20038: LD_VAR 0 3
20042: STR
20043: ST_TO_ADDR
// end ;
20044: GO 19940
20046: POP
20047: POP
// if isGameLoad then
20048: LD_VAR 0 1
20052: IFFALSE 20527
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20054: LD_ADDR_VAR 0 4
20058: PUSH
20059: LD_EXP 52
20063: PUSH
20064: LD_EXP 51
20068: PUSH
20069: LD_EXP 53
20073: PUSH
20074: LD_EXP 50
20078: PUSH
20079: LD_EXP 54
20083: PUSH
20084: LD_EXP 55
20088: PUSH
20089: LD_EXP 56
20093: PUSH
20094: LD_EXP 57
20098: PUSH
20099: LD_EXP 58
20103: PUSH
20104: LD_EXP 59
20108: PUSH
20109: LD_EXP 60
20113: PUSH
20114: LD_EXP 61
20118: PUSH
20119: LD_EXP 62
20123: PUSH
20124: LD_EXP 63
20128: PUSH
20129: LD_EXP 71
20133: PUSH
20134: LD_EXP 72
20138: PUSH
20139: LD_EXP 73
20143: PUSH
20144: LD_EXP 74
20148: PUSH
20149: LD_EXP 76
20153: PUSH
20154: LD_EXP 77
20158: PUSH
20159: LD_EXP 78
20163: PUSH
20164: LD_EXP 81
20168: PUSH
20169: LD_EXP 83
20173: PUSH
20174: LD_EXP 84
20178: PUSH
20179: LD_EXP 85
20183: PUSH
20184: LD_EXP 87
20188: PUSH
20189: LD_EXP 88
20193: PUSH
20194: LD_EXP 91
20198: PUSH
20199: LD_EXP 92
20203: PUSH
20204: LD_EXP 93
20208: PUSH
20209: LD_EXP 94
20213: PUSH
20214: LD_EXP 95
20218: PUSH
20219: LD_EXP 96
20223: PUSH
20224: LD_EXP 97
20228: PUSH
20229: LD_EXP 98
20233: PUSH
20234: LD_EXP 99
20238: PUSH
20239: LD_EXP 64
20243: PUSH
20244: LD_EXP 65
20248: PUSH
20249: LD_EXP 68
20253: PUSH
20254: LD_EXP 69
20258: PUSH
20259: LD_EXP 70
20263: PUSH
20264: LD_EXP 66
20268: PUSH
20269: LD_EXP 67
20273: PUSH
20274: LD_EXP 75
20278: PUSH
20279: LD_EXP 79
20283: PUSH
20284: LD_EXP 80
20288: PUSH
20289: LD_EXP 82
20293: PUSH
20294: LD_EXP 86
20298: PUSH
20299: LD_EXP 89
20303: PUSH
20304: LD_EXP 90
20308: PUSH
20309: LD_EXP 100
20313: PUSH
20314: LD_EXP 101
20318: PUSH
20319: LD_EXP 102
20323: PUSH
20324: LD_EXP 103
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: ST_TO_ADDR
// tmp :=  ;
20385: LD_ADDR_VAR 0 3
20389: PUSH
20390: LD_STRING 
20392: ST_TO_ADDR
// for i = 1 to normalCounter do
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: DOUBLE
20399: LD_INT 1
20401: DEC
20402: ST_TO_ADDR
20403: LD_EXP 48
20407: PUSH
20408: FOR_TO
20409: IFFALSE 20445
// begin if flags [ i ] then
20411: LD_VAR 0 4
20415: PUSH
20416: LD_VAR 0 8
20420: ARRAY
20421: IFFALSE 20443
// tmp := tmp & i & ; ;
20423: LD_ADDR_VAR 0 3
20427: PUSH
20428: LD_VAR 0 3
20432: PUSH
20433: LD_VAR 0 8
20437: STR
20438: PUSH
20439: LD_STRING ;
20441: STR
20442: ST_TO_ADDR
// end ;
20443: GO 20408
20445: POP
20446: POP
// for i = 1 to hardcoreCounter do
20447: LD_ADDR_VAR 0 8
20451: PUSH
20452: DOUBLE
20453: LD_INT 1
20455: DEC
20456: ST_TO_ADDR
20457: LD_EXP 49
20461: PUSH
20462: FOR_TO
20463: IFFALSE 20509
// begin if flags [ normalCounter + i ] then
20465: LD_VAR 0 4
20469: PUSH
20470: LD_EXP 48
20474: PUSH
20475: LD_VAR 0 8
20479: PLUS
20480: ARRAY
20481: IFFALSE 20507
// tmp := tmp & ( 100 + i ) & ; ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 100
20495: PUSH
20496: LD_VAR 0 8
20500: PLUS
20501: STR
20502: PUSH
20503: LD_STRING ;
20505: STR
20506: ST_TO_ADDR
// end ;
20507: GO 20462
20509: POP
20510: POP
// if tmp then
20511: LD_VAR 0 3
20515: IFFALSE 20527
// active := tmp ;
20517: LD_ADDR_VAR 0 7
20521: PUSH
20522: LD_VAR 0 3
20526: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20527: LD_STRING getStreamItemsFromMission("
20529: PUSH
20530: LD_VAR 0 5
20534: STR
20535: PUSH
20536: LD_STRING ","
20538: STR
20539: PUSH
20540: LD_VAR 0 6
20544: STR
20545: PUSH
20546: LD_STRING ","
20548: STR
20549: PUSH
20550: LD_VAR 0 7
20554: STR
20555: PUSH
20556: LD_STRING ")
20558: STR
20559: PPUSH
20560: CALL_OW 559
// end else
20564: GO 20573
// ToLua ( getStreamItemsFromMission("","","") ) ;
20566: LD_STRING getStreamItemsFromMission("","","")
20568: PPUSH
20569: CALL_OW 559
// end ;
20573: LD_VAR 0 2
20577: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20578: LD_EXP 47
20582: PUSH
20583: LD_EXP 52
20587: AND
20588: IFFALSE 20712
20590: GO 20592
20592: DISABLE
20593: LD_INT 0
20595: PPUSH
20596: PPUSH
// begin enable ;
20597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20598: LD_ADDR_VAR 0 2
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_OWVAR 2
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 34
20620: PUSH
20621: LD_INT 7
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 34
20630: PUSH
20631: LD_INT 45
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 34
20640: PUSH
20641: LD_INT 28
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 34
20650: PUSH
20651: LD_INT 47
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 69
20673: ST_TO_ADDR
// if not tmp then
20674: LD_VAR 0 2
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20712
// for i in tmp do
20683: LD_ADDR_VAR 0 1
20687: PUSH
20688: LD_VAR 0 2
20692: PUSH
20693: FOR_IN
20694: IFFALSE 20710
// begin SetLives ( i , 0 ) ;
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_INT 0
20703: PPUSH
20704: CALL_OW 234
// end ;
20708: GO 20693
20710: POP
20711: POP
// end ;
20712: PPOPN 2
20714: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20715: LD_EXP 47
20719: PUSH
20720: LD_EXP 53
20724: AND
20725: IFFALSE 20809
20727: GO 20729
20729: DISABLE
20730: LD_INT 0
20732: PPUSH
20733: PPUSH
// begin enable ;
20734: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20735: LD_ADDR_VAR 0 2
20739: PUSH
20740: LD_INT 22
20742: PUSH
20743: LD_OWVAR 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 32
20754: PUSH
20755: LD_INT 3
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PPUSH
20766: CALL_OW 69
20770: ST_TO_ADDR
// if not tmp then
20771: LD_VAR 0 2
20775: NOT
20776: IFFALSE 20780
// exit ;
20778: GO 20809
// for i in tmp do
20780: LD_ADDR_VAR 0 1
20784: PUSH
20785: LD_VAR 0 2
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20807
// begin SetLives ( i , 0 ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: LD_INT 0
20800: PPUSH
20801: CALL_OW 234
// end ;
20805: GO 20790
20807: POP
20808: POP
// end ;
20809: PPOPN 2
20811: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20812: LD_EXP 47
20816: PUSH
20817: LD_EXP 50
20821: AND
20822: IFFALSE 20915
20824: GO 20826
20826: DISABLE
20827: LD_INT 0
20829: PPUSH
// begin enable ;
20830: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20831: LD_ADDR_VAR 0 1
20835: PUSH
20836: LD_INT 22
20838: PUSH
20839: LD_OWVAR 2
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 2
20850: PUSH
20851: LD_INT 25
20853: PUSH
20854: LD_INT 5
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 25
20863: PUSH
20864: LD_INT 9
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 25
20873: PUSH
20874: LD_INT 8
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: PUSH
20896: FOR_IN
20897: IFFALSE 20913
// begin SetClass ( i , 1 ) ;
20899: LD_VAR 0 1
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 336
// end ;
20911: GO 20896
20913: POP
20914: POP
// end ;
20915: PPOPN 1
20917: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20918: LD_EXP 47
20922: PUSH
20923: LD_EXP 51
20927: AND
20928: PUSH
20929: LD_OWVAR 65
20933: PUSH
20934: LD_INT 7
20936: LESS
20937: AND
20938: IFFALSE 20952
20940: GO 20942
20942: DISABLE
// begin enable ;
20943: ENABLE
// game_speed := 7 ;
20944: LD_ADDR_OWVAR 65
20948: PUSH
20949: LD_INT 7
20951: ST_TO_ADDR
// end ;
20952: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20953: LD_EXP 47
20957: PUSH
20958: LD_EXP 54
20962: AND
20963: IFFALSE 21165
20965: GO 20967
20967: DISABLE
20968: LD_INT 0
20970: PPUSH
20971: PPUSH
20972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: LD_INT 81
20980: PUSH
20981: LD_OWVAR 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 21
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: ST_TO_ADDR
// if not tmp then
21009: LD_VAR 0 3
21013: NOT
21014: IFFALSE 21018
// exit ;
21016: GO 21165
// if tmp > 5 then
21018: LD_VAR 0 3
21022: PUSH
21023: LD_INT 5
21025: GREATER
21026: IFFALSE 21038
// k := 5 else
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_INT 5
21035: ST_TO_ADDR
21036: GO 21048
// k := tmp ;
21038: LD_ADDR_VAR 0 2
21042: PUSH
21043: LD_VAR 0 3
21047: ST_TO_ADDR
// for i := 1 to k do
21048: LD_ADDR_VAR 0 1
21052: PUSH
21053: DOUBLE
21054: LD_INT 1
21056: DEC
21057: ST_TO_ADDR
21058: LD_VAR 0 2
21062: PUSH
21063: FOR_TO
21064: IFFALSE 21163
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21066: LD_VAR 0 3
21070: PUSH
21071: LD_VAR 0 1
21075: ARRAY
21076: PPUSH
21077: LD_VAR 0 1
21081: PUSH
21082: LD_INT 4
21084: MOD
21085: PUSH
21086: LD_INT 1
21088: PLUS
21089: PPUSH
21090: CALL_OW 259
21094: PUSH
21095: LD_INT 10
21097: LESS
21098: IFFALSE 21161
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21100: LD_VAR 0 3
21104: PUSH
21105: LD_VAR 0 1
21109: ARRAY
21110: PPUSH
21111: LD_VAR 0 1
21115: PUSH
21116: LD_INT 4
21118: MOD
21119: PUSH
21120: LD_INT 1
21122: PLUS
21123: PPUSH
21124: LD_VAR 0 3
21128: PUSH
21129: LD_VAR 0 1
21133: ARRAY
21134: PPUSH
21135: LD_VAR 0 1
21139: PUSH
21140: LD_INT 4
21142: MOD
21143: PUSH
21144: LD_INT 1
21146: PLUS
21147: PPUSH
21148: CALL_OW 259
21152: PUSH
21153: LD_INT 1
21155: PLUS
21156: PPUSH
21157: CALL_OW 237
21161: GO 21063
21163: POP
21164: POP
// end ;
21165: PPOPN 3
21167: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21168: LD_EXP 47
21172: PUSH
21173: LD_EXP 55
21177: AND
21178: IFFALSE 21198
21180: GO 21182
21182: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21183: LD_INT 4
21185: PPUSH
21186: LD_OWVAR 2
21190: PPUSH
21191: LD_INT 0
21193: PPUSH
21194: CALL_OW 324
21198: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21199: LD_EXP 47
21203: PUSH
21204: LD_EXP 84
21208: AND
21209: IFFALSE 21229
21211: GO 21213
21213: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21214: LD_INT 19
21216: PPUSH
21217: LD_OWVAR 2
21221: PPUSH
21222: LD_INT 0
21224: PPUSH
21225: CALL_OW 324
21229: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21230: LD_EXP 47
21234: PUSH
21235: LD_EXP 56
21239: AND
21240: IFFALSE 21342
21242: GO 21244
21244: DISABLE
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
// begin enable ;
21249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21250: LD_ADDR_VAR 0 2
21254: PUSH
21255: LD_INT 22
21257: PUSH
21258: LD_OWVAR 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 34
21272: PUSH
21273: LD_INT 11
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 34
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PPUSH
21299: CALL_OW 69
21303: ST_TO_ADDR
// if not tmp then
21304: LD_VAR 0 2
21308: NOT
21309: IFFALSE 21313
// exit ;
21311: GO 21342
// for i in tmp do
21313: LD_ADDR_VAR 0 1
21317: PUSH
21318: LD_VAR 0 2
21322: PUSH
21323: FOR_IN
21324: IFFALSE 21340
// begin SetLives ( i , 0 ) ;
21326: LD_VAR 0 1
21330: PPUSH
21331: LD_INT 0
21333: PPUSH
21334: CALL_OW 234
// end ;
21338: GO 21323
21340: POP
21341: POP
// end ;
21342: PPOPN 2
21344: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21345: LD_EXP 47
21349: PUSH
21350: LD_EXP 57
21354: AND
21355: IFFALSE 21375
21357: GO 21359
21359: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21360: LD_INT 32
21362: PPUSH
21363: LD_OWVAR 2
21367: PPUSH
21368: LD_INT 0
21370: PPUSH
21371: CALL_OW 324
21375: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21376: LD_EXP 47
21380: PUSH
21381: LD_EXP 58
21385: AND
21386: IFFALSE 21567
21388: GO 21390
21390: DISABLE
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
21395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21396: LD_ADDR_VAR 0 2
21400: PUSH
21401: LD_INT 22
21403: PUSH
21404: LD_OWVAR 2
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 33
21415: PUSH
21416: LD_INT 3
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: ST_TO_ADDR
// if not tmp then
21432: LD_VAR 0 2
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21567
// side := 0 ;
21441: LD_ADDR_VAR 0 3
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// for i := 1 to 8 do
21449: LD_ADDR_VAR 0 1
21453: PUSH
21454: DOUBLE
21455: LD_INT 1
21457: DEC
21458: ST_TO_ADDR
21459: LD_INT 8
21461: PUSH
21462: FOR_TO
21463: IFFALSE 21511
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21465: LD_OWVAR 2
21469: PUSH
21470: LD_VAR 0 1
21474: NONEQUAL
21475: PUSH
21476: LD_OWVAR 2
21480: PPUSH
21481: LD_VAR 0 1
21485: PPUSH
21486: CALL_OW 81
21490: PUSH
21491: LD_INT 2
21493: EQUAL
21494: AND
21495: IFFALSE 21509
// begin side := i ;
21497: LD_ADDR_VAR 0 3
21501: PUSH
21502: LD_VAR 0 1
21506: ST_TO_ADDR
// break ;
21507: GO 21511
// end ;
21509: GO 21462
21511: POP
21512: POP
// if not side then
21513: LD_VAR 0 3
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21567
// for i := 1 to tmp do
21522: LD_ADDR_VAR 0 1
21526: PUSH
21527: DOUBLE
21528: LD_INT 1
21530: DEC
21531: ST_TO_ADDR
21532: LD_VAR 0 2
21536: PUSH
21537: FOR_TO
21538: IFFALSE 21565
// if Prob ( 60 ) then
21540: LD_INT 60
21542: PPUSH
21543: CALL_OW 13
21547: IFFALSE 21563
// SetSide ( i , side ) ;
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_VAR 0 3
21558: PPUSH
21559: CALL_OW 235
21563: GO 21537
21565: POP
21566: POP
// end ;
21567: PPOPN 3
21569: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21570: LD_EXP 47
21574: PUSH
21575: LD_EXP 60
21579: AND
21580: IFFALSE 21699
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21588: LD_ADDR_VAR 0 1
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_OWVAR 2
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 21
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21697
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 257
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: LD_INT 3
21663: PUSH
21664: LD_INT 4
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: IN
21673: IFFALSE 21695
// SetClass ( un , rand ( 1 , 4 ) ) ;
21675: LD_VAR 0 1
21679: PPUSH
21680: LD_INT 1
21682: PPUSH
21683: LD_INT 4
21685: PPUSH
21686: CALL_OW 12
21690: PPUSH
21691: CALL_OW 336
21695: GO 21642
21697: POP
21698: POP
// end ;
21699: PPOPN 1
21701: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21702: LD_EXP 47
21706: PUSH
21707: LD_EXP 59
21711: AND
21712: IFFALSE 21791
21714: GO 21716
21716: DISABLE
21717: LD_INT 0
21719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21720: LD_ADDR_VAR 0 1
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: LD_OWVAR 2
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 21
21739: PUSH
21740: LD_INT 3
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PPUSH
21751: CALL_OW 69
21755: ST_TO_ADDR
// if not tmp then
21756: LD_VAR 0 1
21760: NOT
21761: IFFALSE 21765
// exit ;
21763: GO 21791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21765: LD_VAR 0 1
21769: PUSH
21770: LD_INT 1
21772: PPUSH
21773: LD_VAR 0 1
21777: PPUSH
21778: CALL_OW 12
21782: ARRAY
21783: PPUSH
21784: LD_INT 100
21786: PPUSH
21787: CALL_OW 234
// end ;
21791: PPOPN 1
21793: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21794: LD_EXP 47
21798: PUSH
21799: LD_EXP 61
21803: AND
21804: IFFALSE 21902
21806: GO 21808
21808: DISABLE
21809: LD_INT 0
21811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21812: LD_ADDR_VAR 0 1
21816: PUSH
21817: LD_INT 22
21819: PUSH
21820: LD_OWVAR 2
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 21
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: ST_TO_ADDR
// if not tmp then
21848: LD_VAR 0 1
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21902
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21857: LD_VAR 0 1
21861: PUSH
21862: LD_INT 1
21864: PPUSH
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 12
21874: ARRAY
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: LD_INT 4
21881: PPUSH
21882: CALL_OW 12
21886: PPUSH
21887: LD_INT 3000
21889: PPUSH
21890: LD_INT 9000
21892: PPUSH
21893: CALL_OW 12
21897: PPUSH
21898: CALL_OW 492
// end ;
21902: PPOPN 1
21904: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21905: LD_EXP 47
21909: PUSH
21910: LD_EXP 62
21914: AND
21915: IFFALSE 21935
21917: GO 21919
21919: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21920: LD_INT 1
21922: PPUSH
21923: LD_OWVAR 2
21927: PPUSH
21928: LD_INT 0
21930: PPUSH
21931: CALL_OW 324
21935: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21936: LD_EXP 47
21940: PUSH
21941: LD_EXP 63
21945: AND
21946: IFFALSE 22029
21948: GO 21950
21950: DISABLE
21951: LD_INT 0
21953: PPUSH
21954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_OWVAR 2
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 21
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PPUSH
21986: CALL_OW 69
21990: ST_TO_ADDR
// if not tmp then
21991: LD_VAR 0 2
21995: NOT
21996: IFFALSE 22000
// exit ;
21998: GO 22029
// for i in tmp do
22000: LD_ADDR_VAR 0 1
22004: PUSH
22005: LD_VAR 0 2
22009: PUSH
22010: FOR_IN
22011: IFFALSE 22027
// SetBLevel ( i , 10 ) ;
22013: LD_VAR 0 1
22017: PPUSH
22018: LD_INT 10
22020: PPUSH
22021: CALL_OW 241
22025: GO 22010
22027: POP
22028: POP
// end ;
22029: PPOPN 2
22031: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22032: LD_EXP 47
22036: PUSH
22037: LD_EXP 64
22041: AND
22042: IFFALSE 22153
22044: GO 22046
22046: DISABLE
22047: LD_INT 0
22049: PPUSH
22050: PPUSH
22051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22052: LD_ADDR_VAR 0 3
22056: PUSH
22057: LD_INT 22
22059: PUSH
22060: LD_OWVAR 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 25
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PPUSH
22083: CALL_OW 69
22087: ST_TO_ADDR
// if not tmp then
22088: LD_VAR 0 3
22092: NOT
22093: IFFALSE 22097
// exit ;
22095: GO 22153
// un := tmp [ rand ( 1 , tmp ) ] ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_VAR 0 3
22106: PUSH
22107: LD_INT 1
22109: PPUSH
22110: LD_VAR 0 3
22114: PPUSH
22115: CALL_OW 12
22119: ARRAY
22120: ST_TO_ADDR
// if Crawls ( un ) then
22121: LD_VAR 0 2
22125: PPUSH
22126: CALL_OW 318
22130: IFFALSE 22141
// ComWalk ( un ) ;
22132: LD_VAR 0 2
22136: PPUSH
22137: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22141: LD_VAR 0 2
22145: PPUSH
22146: LD_INT 5
22148: PPUSH
22149: CALL_OW 336
// end ;
22153: PPOPN 3
22155: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22156: LD_EXP 47
22160: PUSH
22161: LD_EXP 65
22165: AND
22166: PUSH
22167: LD_OWVAR 67
22171: PUSH
22172: LD_INT 4
22174: LESS
22175: AND
22176: IFFALSE 22195
22178: GO 22180
22180: DISABLE
// begin Difficulty := Difficulty + 1 ;
22181: LD_ADDR_OWVAR 67
22185: PUSH
22186: LD_OWVAR 67
22190: PUSH
22191: LD_INT 1
22193: PLUS
22194: ST_TO_ADDR
// end ;
22195: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22196: LD_EXP 47
22200: PUSH
22201: LD_EXP 66
22205: AND
22206: IFFALSE 22309
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
// begin for i := 1 to 5 do
22214: LD_ADDR_VAR 0 1
22218: PUSH
22219: DOUBLE
22220: LD_INT 1
22222: DEC
22223: ST_TO_ADDR
22224: LD_INT 5
22226: PUSH
22227: FOR_TO
22228: IFFALSE 22307
// begin uc_nation := nation_nature ;
22230: LD_ADDR_OWVAR 21
22234: PUSH
22235: LD_INT 0
22237: ST_TO_ADDR
// uc_side := 0 ;
22238: LD_ADDR_OWVAR 20
22242: PUSH
22243: LD_INT 0
22245: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22246: LD_ADDR_OWVAR 29
22250: PUSH
22251: LD_INT 12
22253: PUSH
22254: LD_INT 12
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: ST_TO_ADDR
// hc_agressivity := 20 ;
22261: LD_ADDR_OWVAR 35
22265: PUSH
22266: LD_INT 20
22268: ST_TO_ADDR
// hc_class := class_tiger ;
22269: LD_ADDR_OWVAR 28
22273: PUSH
22274: LD_INT 14
22276: ST_TO_ADDR
// hc_gallery :=  ;
22277: LD_ADDR_OWVAR 33
22281: PUSH
22282: LD_STRING 
22284: ST_TO_ADDR
// hc_name :=  ;
22285: LD_ADDR_OWVAR 26
22289: PUSH
22290: LD_STRING 
22292: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22293: CALL_OW 44
22297: PPUSH
22298: LD_INT 0
22300: PPUSH
22301: CALL_OW 51
// end ;
22305: GO 22227
22307: POP
22308: POP
// end ;
22309: PPOPN 1
22311: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22312: LD_EXP 47
22316: PUSH
22317: LD_EXP 67
22321: AND
22322: IFFALSE 22331
22324: GO 22326
22326: DISABLE
// StreamSibBomb ;
22327: CALL 22332 0 0
22331: END
// export function StreamSibBomb ; var i , x , y ; begin
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
22337: PPUSH
// result := false ;
22338: LD_ADDR_VAR 0 1
22342: PUSH
22343: LD_INT 0
22345: ST_TO_ADDR
// for i := 1 to 16 do
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: DOUBLE
22352: LD_INT 1
22354: DEC
22355: ST_TO_ADDR
22356: LD_INT 16
22358: PUSH
22359: FOR_TO
22360: IFFALSE 22559
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22362: LD_ADDR_VAR 0 3
22366: PUSH
22367: LD_INT 10
22369: PUSH
22370: LD_INT 20
22372: PUSH
22373: LD_INT 30
22375: PUSH
22376: LD_INT 40
22378: PUSH
22379: LD_INT 50
22381: PUSH
22382: LD_INT 60
22384: PUSH
22385: LD_INT 70
22387: PUSH
22388: LD_INT 80
22390: PUSH
22391: LD_INT 90
22393: PUSH
22394: LD_INT 100
22396: PUSH
22397: LD_INT 110
22399: PUSH
22400: LD_INT 120
22402: PUSH
22403: LD_INT 130
22405: PUSH
22406: LD_INT 140
22408: PUSH
22409: LD_INT 150
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 1
22431: PPUSH
22432: LD_INT 15
22434: PPUSH
22435: CALL_OW 12
22439: ARRAY
22440: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22441: LD_ADDR_VAR 0 4
22445: PUSH
22446: LD_INT 10
22448: PUSH
22449: LD_INT 20
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 40
22457: PUSH
22458: LD_INT 50
22460: PUSH
22461: LD_INT 60
22463: PUSH
22464: LD_INT 70
22466: PUSH
22467: LD_INT 80
22469: PUSH
22470: LD_INT 90
22472: PUSH
22473: LD_INT 100
22475: PUSH
22476: LD_INT 110
22478: PUSH
22479: LD_INT 120
22481: PUSH
22482: LD_INT 130
22484: PUSH
22485: LD_INT 140
22487: PUSH
22488: LD_INT 150
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: PPUSH
22511: LD_INT 15
22513: PPUSH
22514: CALL_OW 12
22518: ARRAY
22519: ST_TO_ADDR
// if ValidHex ( x , y ) then
22520: LD_VAR 0 3
22524: PPUSH
22525: LD_VAR 0 4
22529: PPUSH
22530: CALL_OW 488
22534: IFFALSE 22557
// begin result := [ x , y ] ;
22536: LD_ADDR_VAR 0 1
22540: PUSH
22541: LD_VAR 0 3
22545: PUSH
22546: LD_VAR 0 4
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: ST_TO_ADDR
// break ;
22555: GO 22559
// end ; end ;
22557: GO 22359
22559: POP
22560: POP
// if result then
22561: LD_VAR 0 1
22565: IFFALSE 22625
// begin ToLua ( playSibBomb() ) ;
22567: LD_STRING playSibBomb()
22569: PPUSH
22570: CALL_OW 559
// wait ( 0 0$14 ) ;
22574: LD_INT 490
22576: PPUSH
22577: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22581: LD_VAR 0 1
22585: PUSH
22586: LD_INT 1
22588: ARRAY
22589: PPUSH
22590: LD_VAR 0 1
22594: PUSH
22595: LD_INT 2
22597: ARRAY
22598: PPUSH
22599: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22603: LD_VAR 0 1
22607: PUSH
22608: LD_INT 1
22610: ARRAY
22611: PPUSH
22612: LD_VAR 0 1
22616: PUSH
22617: LD_INT 2
22619: ARRAY
22620: PPUSH
22621: CALL_OW 429
// end ; end ;
22625: LD_VAR 0 1
22629: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22630: LD_EXP 47
22634: PUSH
22635: LD_EXP 69
22639: AND
22640: IFFALSE 22652
22642: GO 22644
22644: DISABLE
// YouLost (  ) ;
22645: LD_STRING 
22647: PPUSH
22648: CALL_OW 104
22652: END
// every 0 0$1 trigger StreamModeActive and sFog do
22653: LD_EXP 47
22657: PUSH
22658: LD_EXP 68
22662: AND
22663: IFFALSE 22677
22665: GO 22667
22667: DISABLE
// FogOff ( your_side ) ;
22668: LD_OWVAR 2
22672: PPUSH
22673: CALL_OW 344
22677: END
// every 0 0$1 trigger StreamModeActive and sSun do
22678: LD_EXP 47
22682: PUSH
22683: LD_EXP 70
22687: AND
22688: IFFALSE 22716
22690: GO 22692
22692: DISABLE
// begin solar_recharge_percent := 0 ;
22693: LD_ADDR_OWVAR 79
22697: PUSH
22698: LD_INT 0
22700: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22701: LD_INT 10500
22703: PPUSH
22704: CALL_OW 67
// solar_recharge_percent := 100 ;
22708: LD_ADDR_OWVAR 79
22712: PUSH
22713: LD_INT 100
22715: ST_TO_ADDR
// end ;
22716: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22717: LD_EXP 47
22721: PUSH
22722: LD_EXP 71
22726: AND
22727: IFFALSE 22966
22729: GO 22731
22731: DISABLE
22732: LD_INT 0
22734: PPUSH
22735: PPUSH
22736: PPUSH
// begin tmp := [ ] ;
22737: LD_ADDR_VAR 0 3
22741: PUSH
22742: EMPTY
22743: ST_TO_ADDR
// for i := 1 to 6 do
22744: LD_ADDR_VAR 0 1
22748: PUSH
22749: DOUBLE
22750: LD_INT 1
22752: DEC
22753: ST_TO_ADDR
22754: LD_INT 6
22756: PUSH
22757: FOR_TO
22758: IFFALSE 22863
// begin uc_nation := nation_nature ;
22760: LD_ADDR_OWVAR 21
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// uc_side := 0 ;
22768: LD_ADDR_OWVAR 20
22772: PUSH
22773: LD_INT 0
22775: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22776: LD_ADDR_OWVAR 29
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 12
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: ST_TO_ADDR
// hc_agressivity := 20 ;
22791: LD_ADDR_OWVAR 35
22795: PUSH
22796: LD_INT 20
22798: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22799: LD_ADDR_OWVAR 28
22803: PUSH
22804: LD_INT 17
22806: ST_TO_ADDR
// hc_gallery :=  ;
22807: LD_ADDR_OWVAR 33
22811: PUSH
22812: LD_STRING 
22814: ST_TO_ADDR
// hc_name :=  ;
22815: LD_ADDR_OWVAR 26
22819: PUSH
22820: LD_STRING 
22822: ST_TO_ADDR
// un := CreateHuman ;
22823: LD_ADDR_VAR 0 2
22827: PUSH
22828: CALL_OW 44
22832: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22833: LD_VAR 0 2
22837: PPUSH
22838: LD_INT 1
22840: PPUSH
22841: CALL_OW 51
// tmp := tmp ^ un ;
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_VAR 0 3
22854: PUSH
22855: LD_VAR 0 2
22859: ADD
22860: ST_TO_ADDR
// end ;
22861: GO 22757
22863: POP
22864: POP
// repeat wait ( 0 0$1 ) ;
22865: LD_INT 35
22867: PPUSH
22868: CALL_OW 67
// for un in tmp do
22872: LD_ADDR_VAR 0 2
22876: PUSH
22877: LD_VAR 0 3
22881: PUSH
22882: FOR_IN
22883: IFFALSE 22957
// begin if IsDead ( un ) then
22885: LD_VAR 0 2
22889: PPUSH
22890: CALL_OW 301
22894: IFFALSE 22914
// begin tmp := tmp diff un ;
22896: LD_ADDR_VAR 0 3
22900: PUSH
22901: LD_VAR 0 3
22905: PUSH
22906: LD_VAR 0 2
22910: DIFF
22911: ST_TO_ADDR
// continue ;
22912: GO 22882
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22914: LD_VAR 0 2
22918: PPUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 22
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PPUSH
22936: CALL_OW 69
22940: PPUSH
22941: LD_VAR 0 2
22945: PPUSH
22946: CALL_OW 74
22950: PPUSH
22951: CALL_OW 115
// end ;
22955: GO 22882
22957: POP
22958: POP
// until not tmp ;
22959: LD_VAR 0 3
22963: NOT
22964: IFFALSE 22865
// end ;
22966: PPOPN 3
22968: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22969: LD_EXP 47
22973: PUSH
22974: LD_EXP 72
22978: AND
22979: IFFALSE 23033
22981: GO 22983
22983: DISABLE
// begin ToLua ( displayTroll(); ) ;
22984: LD_STRING displayTroll();
22986: PPUSH
22987: CALL_OW 559
// wait ( 3 3$00 ) ;
22991: LD_INT 6300
22993: PPUSH
22994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22998: LD_STRING hideTroll();
23000: PPUSH
23001: CALL_OW 559
// wait ( 1 1$00 ) ;
23005: LD_INT 2100
23007: PPUSH
23008: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23012: LD_STRING displayTroll();
23014: PPUSH
23015: CALL_OW 559
// wait ( 1 1$00 ) ;
23019: LD_INT 2100
23021: PPUSH
23022: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23026: LD_STRING hideTroll();
23028: PPUSH
23029: CALL_OW 559
// end ;
23033: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23034: LD_EXP 47
23038: PUSH
23039: LD_EXP 73
23043: AND
23044: IFFALSE 23107
23046: GO 23048
23048: DISABLE
23049: LD_INT 0
23051: PPUSH
// begin p := 0 ;
23052: LD_ADDR_VAR 0 1
23056: PUSH
23057: LD_INT 0
23059: ST_TO_ADDR
// repeat game_speed := 1 ;
23060: LD_ADDR_OWVAR 65
23064: PUSH
23065: LD_INT 1
23067: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23068: LD_INT 35
23070: PPUSH
23071: CALL_OW 67
// p := p + 1 ;
23075: LD_ADDR_VAR 0 1
23079: PUSH
23080: LD_VAR 0 1
23084: PUSH
23085: LD_INT 1
23087: PLUS
23088: ST_TO_ADDR
// until p >= 60 ;
23089: LD_VAR 0 1
23093: PUSH
23094: LD_INT 60
23096: GREATEREQUAL
23097: IFFALSE 23060
// game_speed := 4 ;
23099: LD_ADDR_OWVAR 65
23103: PUSH
23104: LD_INT 4
23106: ST_TO_ADDR
// end ;
23107: PPOPN 1
23109: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23110: LD_EXP 47
23114: PUSH
23115: LD_EXP 74
23119: AND
23120: IFFALSE 23266
23122: GO 23124
23124: DISABLE
23125: LD_INT 0
23127: PPUSH
23128: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23129: LD_ADDR_VAR 0 1
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_OWVAR 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: LD_INT 30
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PPUSH
23178: CALL_OW 69
23182: ST_TO_ADDR
// if not depot then
23183: LD_VAR 0 1
23187: NOT
23188: IFFALSE 23192
// exit ;
23190: GO 23266
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_VAR 0 1
23201: PUSH
23202: LD_INT 1
23204: PPUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL_OW 12
23214: ARRAY
23215: PPUSH
23216: CALL_OW 274
23220: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23221: LD_VAR 0 2
23225: PPUSH
23226: LD_INT 1
23228: PPUSH
23229: LD_INT 0
23231: PPUSH
23232: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23236: LD_VAR 0 2
23240: PPUSH
23241: LD_INT 2
23243: PPUSH
23244: LD_INT 0
23246: PPUSH
23247: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23251: LD_VAR 0 2
23255: PPUSH
23256: LD_INT 3
23258: PPUSH
23259: LD_INT 0
23261: PPUSH
23262: CALL_OW 277
// end ;
23266: PPOPN 2
23268: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23269: LD_EXP 47
23273: PUSH
23274: LD_EXP 75
23278: AND
23279: IFFALSE 23376
23281: GO 23283
23283: DISABLE
23284: LD_INT 0
23286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23287: LD_ADDR_VAR 0 1
23291: PUSH
23292: LD_INT 22
23294: PUSH
23295: LD_OWVAR 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 21
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: LD_INT 23
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 69
23340: ST_TO_ADDR
// if not tmp then
23341: LD_VAR 0 1
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23376
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23350: LD_VAR 0 1
23354: PUSH
23355: LD_INT 1
23357: PPUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 12
23367: ARRAY
23368: PPUSH
23369: LD_INT 200
23371: PPUSH
23372: CALL_OW 234
// end ;
23376: PPOPN 1
23378: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23379: LD_EXP 47
23383: PUSH
23384: LD_EXP 76
23388: AND
23389: IFFALSE 23468
23391: GO 23393
23393: DISABLE
23394: LD_INT 0
23396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_OWVAR 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PPUSH
23428: CALL_OW 69
23432: ST_TO_ADDR
// if not tmp then
23433: LD_VAR 0 1
23437: NOT
23438: IFFALSE 23442
// exit ;
23440: GO 23468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23442: LD_VAR 0 1
23446: PUSH
23447: LD_INT 1
23449: PPUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 12
23459: ARRAY
23460: PPUSH
23461: LD_INT 60
23463: PPUSH
23464: CALL_OW 234
// end ;
23468: PPOPN 1
23470: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23471: LD_EXP 47
23475: PUSH
23476: LD_EXP 77
23480: AND
23481: IFFALSE 23580
23483: GO 23485
23485: DISABLE
23486: LD_INT 0
23488: PPUSH
23489: PPUSH
// begin enable ;
23490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23491: LD_ADDR_VAR 0 1
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_OWVAR 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 61
23510: PUSH
23511: EMPTY
23512: LIST
23513: PUSH
23514: LD_INT 33
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 69
23533: ST_TO_ADDR
// if not tmp then
23534: LD_VAR 0 1
23538: NOT
23539: IFFALSE 23543
// exit ;
23541: GO 23580
// for i in tmp do
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: LD_VAR 0 1
23552: PUSH
23553: FOR_IN
23554: IFFALSE 23578
// if IsControledBy ( i ) then
23556: LD_VAR 0 2
23560: PPUSH
23561: CALL_OW 312
23565: IFFALSE 23576
// ComUnlink ( i ) ;
23567: LD_VAR 0 2
23571: PPUSH
23572: CALL_OW 136
23576: GO 23553
23578: POP
23579: POP
// end ;
23580: PPOPN 2
23582: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23583: LD_EXP 47
23587: PUSH
23588: LD_EXP 78
23592: AND
23593: IFFALSE 23733
23595: GO 23597
23597: DISABLE
23598: LD_INT 0
23600: PPUSH
23601: PPUSH
// begin ToLua ( displayPowell(); ) ;
23602: LD_STRING displayPowell();
23604: PPUSH
23605: CALL_OW 559
// uc_side := 0 ;
23609: LD_ADDR_OWVAR 20
23613: PUSH
23614: LD_INT 0
23616: ST_TO_ADDR
// uc_nation := 2 ;
23617: LD_ADDR_OWVAR 21
23621: PUSH
23622: LD_INT 2
23624: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23625: LD_ADDR_OWVAR 37
23629: PUSH
23630: LD_INT 14
23632: ST_TO_ADDR
// vc_engine := engine_siberite ;
23633: LD_ADDR_OWVAR 39
23637: PUSH
23638: LD_INT 3
23640: ST_TO_ADDR
// vc_control := control_apeman ;
23641: LD_ADDR_OWVAR 38
23645: PUSH
23646: LD_INT 5
23648: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23649: LD_ADDR_OWVAR 40
23653: PUSH
23654: LD_INT 29
23656: ST_TO_ADDR
// un := CreateVehicle ;
23657: LD_ADDR_VAR 0 2
23661: PUSH
23662: CALL_OW 45
23666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_INT 1
23674: PPUSH
23675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23679: LD_INT 35
23681: PPUSH
23682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23686: LD_VAR 0 2
23690: PPUSH
23691: LD_INT 22
23693: PUSH
23694: LD_OWVAR 2
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PPUSH
23703: CALL_OW 69
23707: PPUSH
23708: LD_VAR 0 2
23712: PPUSH
23713: CALL_OW 74
23717: PPUSH
23718: CALL_OW 115
// until IsDead ( un ) ;
23722: LD_VAR 0 2
23726: PPUSH
23727: CALL_OW 301
23731: IFFALSE 23679
// end ;
23733: PPOPN 2
23735: END
// every 0 0$1 trigger StreamModeActive and sStu do
23736: LD_EXP 47
23740: PUSH
23741: LD_EXP 86
23745: AND
23746: IFFALSE 23762
23748: GO 23750
23750: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23751: LD_STRING displayStucuk();
23753: PPUSH
23754: CALL_OW 559
// ResetFog ;
23758: CALL_OW 335
// end ;
23762: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23763: LD_EXP 47
23767: PUSH
23768: LD_EXP 79
23772: AND
23773: IFFALSE 23914
23775: GO 23777
23777: DISABLE
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23782: LD_ADDR_VAR 0 2
23786: PUSH
23787: LD_INT 22
23789: PUSH
23790: LD_OWVAR 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 21
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// if not tmp then
23818: LD_VAR 0 2
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23914
// un := tmp [ rand ( 1 , tmp ) ] ;
23827: LD_ADDR_VAR 0 1
23831: PUSH
23832: LD_VAR 0 2
23836: PUSH
23837: LD_INT 1
23839: PPUSH
23840: LD_VAR 0 2
23844: PPUSH
23845: CALL_OW 12
23849: ARRAY
23850: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23851: LD_VAR 0 1
23855: PPUSH
23856: LD_INT 0
23858: PPUSH
23859: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_OWVAR 3
23872: PUSH
23873: LD_VAR 0 1
23877: DIFF
23878: PPUSH
23879: LD_VAR 0 1
23883: PPUSH
23884: CALL_OW 74
23888: PPUSH
23889: CALL_OW 115
// wait ( 0 0$20 ) ;
23893: LD_INT 700
23895: PPUSH
23896: CALL_OW 67
// SetSide ( un , your_side ) ;
23900: LD_VAR 0 1
23904: PPUSH
23905: LD_OWVAR 2
23909: PPUSH
23910: CALL_OW 235
// end ;
23914: PPOPN 2
23916: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23917: LD_EXP 47
23921: PUSH
23922: LD_EXP 80
23926: AND
23927: IFFALSE 24033
23929: GO 23931
23931: DISABLE
23932: LD_INT 0
23934: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23935: LD_ADDR_VAR 0 1
23939: PUSH
23940: LD_INT 22
23942: PUSH
23943: LD_OWVAR 2
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: LD_INT 30
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 30
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: ST_TO_ADDR
// if not depot then
23989: LD_VAR 0 1
23993: NOT
23994: IFFALSE 23998
// exit ;
23996: GO 24033
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PPUSH
24007: CALL_OW 250
24011: PPUSH
24012: LD_VAR 0 1
24016: PUSH
24017: LD_INT 1
24019: ARRAY
24020: PPUSH
24021: CALL_OW 251
24025: PPUSH
24026: LD_INT 70
24028: PPUSH
24029: CALL_OW 495
// end ;
24033: PPOPN 1
24035: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24036: LD_EXP 47
24040: PUSH
24041: LD_EXP 81
24045: AND
24046: IFFALSE 24257
24048: GO 24050
24050: DISABLE
24051: LD_INT 0
24053: PPUSH
24054: PPUSH
24055: PPUSH
24056: PPUSH
24057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24058: LD_ADDR_VAR 0 5
24062: PUSH
24063: LD_INT 22
24065: PUSH
24066: LD_OWVAR 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 21
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: ST_TO_ADDR
// if not tmp then
24094: LD_VAR 0 5
24098: NOT
24099: IFFALSE 24103
// exit ;
24101: GO 24257
// for i in tmp do
24103: LD_ADDR_VAR 0 1
24107: PUSH
24108: LD_VAR 0 5
24112: PUSH
24113: FOR_IN
24114: IFFALSE 24255
// begin d := rand ( 0 , 5 ) ;
24116: LD_ADDR_VAR 0 4
24120: PUSH
24121: LD_INT 0
24123: PPUSH
24124: LD_INT 5
24126: PPUSH
24127: CALL_OW 12
24131: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24132: LD_ADDR_VAR 0 2
24136: PUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 250
24146: PPUSH
24147: LD_VAR 0 4
24151: PPUSH
24152: LD_INT 3
24154: PPUSH
24155: LD_INT 12
24157: PPUSH
24158: CALL_OW 12
24162: PPUSH
24163: CALL_OW 272
24167: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 251
24182: PPUSH
24183: LD_VAR 0 4
24187: PPUSH
24188: LD_INT 3
24190: PPUSH
24191: LD_INT 12
24193: PPUSH
24194: CALL_OW 12
24198: PPUSH
24199: CALL_OW 273
24203: ST_TO_ADDR
// if ValidHex ( x , y ) then
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_VAR 0 3
24213: PPUSH
24214: CALL_OW 488
24218: IFFALSE 24253
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24220: LD_VAR 0 1
24224: PPUSH
24225: LD_VAR 0 2
24229: PPUSH
24230: LD_VAR 0 3
24234: PPUSH
24235: LD_INT 3
24237: PPUSH
24238: LD_INT 6
24240: PPUSH
24241: CALL_OW 12
24245: PPUSH
24246: LD_INT 1
24248: PPUSH
24249: CALL_OW 483
// end ;
24253: GO 24113
24255: POP
24256: POP
// end ;
24257: PPOPN 5
24259: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24260: LD_EXP 47
24264: PUSH
24265: LD_EXP 82
24269: AND
24270: IFFALSE 24364
24272: GO 24274
24274: DISABLE
24275: LD_INT 0
24277: PPUSH
24278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_OWVAR 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 32
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 21
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: PPUSH
24321: CALL_OW 69
24325: ST_TO_ADDR
// if not tmp then
24326: LD_VAR 0 2
24330: NOT
24331: IFFALSE 24335
// exit ;
24333: GO 24364
// for i in tmp do
24335: LD_ADDR_VAR 0 1
24339: PUSH
24340: LD_VAR 0 2
24344: PUSH
24345: FOR_IN
24346: IFFALSE 24362
// SetFuel ( i , 0 ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_INT 0
24355: PPUSH
24356: CALL_OW 240
24360: GO 24345
24362: POP
24363: POP
// end ;
24364: PPOPN 2
24366: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24367: LD_EXP 47
24371: PUSH
24372: LD_EXP 83
24376: AND
24377: IFFALSE 24443
24379: GO 24381
24381: DISABLE
24382: LD_INT 0
24384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24385: LD_ADDR_VAR 0 1
24389: PUSH
24390: LD_INT 22
24392: PUSH
24393: LD_OWVAR 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 30
24404: PUSH
24405: LD_INT 29
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PPUSH
24416: CALL_OW 69
24420: ST_TO_ADDR
// if not tmp then
24421: LD_VAR 0 1
24425: NOT
24426: IFFALSE 24430
// exit ;
24428: GO 24443
// DestroyUnit ( tmp [ 1 ] ) ;
24430: LD_VAR 0 1
24434: PUSH
24435: LD_INT 1
24437: ARRAY
24438: PPUSH
24439: CALL_OW 65
// end ;
24443: PPOPN 1
24445: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24446: LD_EXP 47
24450: PUSH
24451: LD_EXP 85
24455: AND
24456: IFFALSE 24585
24458: GO 24460
24460: DISABLE
24461: LD_INT 0
24463: PPUSH
// begin uc_side := 0 ;
24464: LD_ADDR_OWVAR 20
24468: PUSH
24469: LD_INT 0
24471: ST_TO_ADDR
// uc_nation := nation_arabian ;
24472: LD_ADDR_OWVAR 21
24476: PUSH
24477: LD_INT 2
24479: ST_TO_ADDR
// hc_gallery :=  ;
24480: LD_ADDR_OWVAR 33
24484: PUSH
24485: LD_STRING 
24487: ST_TO_ADDR
// hc_name :=  ;
24488: LD_ADDR_OWVAR 26
24492: PUSH
24493: LD_STRING 
24495: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24496: LD_INT 1
24498: PPUSH
24499: LD_INT 11
24501: PPUSH
24502: LD_INT 10
24504: PPUSH
24505: CALL_OW 380
// un := CreateHuman ;
24509: LD_ADDR_VAR 0 1
24513: PUSH
24514: CALL_OW 44
24518: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24519: LD_VAR 0 1
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24531: LD_INT 35
24533: PPUSH
24534: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24538: LD_VAR 0 1
24542: PPUSH
24543: LD_INT 22
24545: PUSH
24546: LD_OWVAR 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 69
24559: PPUSH
24560: LD_VAR 0 1
24564: PPUSH
24565: CALL_OW 74
24569: PPUSH
24570: CALL_OW 115
// until IsDead ( un ) ;
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 301
24583: IFFALSE 24531
// end ;
24585: PPOPN 1
24587: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24588: LD_EXP 47
24592: PUSH
24593: LD_EXP 87
24597: AND
24598: IFFALSE 24610
24600: GO 24602
24602: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24603: LD_STRING earthquake(getX(game), 0, 32)
24605: PPUSH
24606: CALL_OW 559
24610: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24611: LD_EXP 47
24615: PUSH
24616: LD_EXP 88
24620: AND
24621: IFFALSE 24712
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin enable ;
24629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24630: LD_ADDR_VAR 0 1
24634: PUSH
24635: LD_INT 22
24637: PUSH
24638: LD_OWVAR 2
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 21
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 33
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 69
24676: ST_TO_ADDR
// if not tmp then
24677: LD_VAR 0 1
24681: NOT
24682: IFFALSE 24686
// exit ;
24684: GO 24712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24686: LD_VAR 0 1
24690: PUSH
24691: LD_INT 1
24693: PPUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL_OW 12
24703: ARRAY
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 234
// end ;
24712: PPOPN 1
24714: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24715: LD_EXP 47
24719: PUSH
24720: LD_EXP 89
24724: AND
24725: IFFALSE 24866
24727: GO 24729
24729: DISABLE
24730: LD_INT 0
24732: PPUSH
24733: PPUSH
24734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 22
24742: PUSH
24743: LD_OWVAR 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PPUSH
24766: CALL_OW 69
24770: ST_TO_ADDR
// if not tmp then
24771: LD_VAR 0 3
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 24866
// un := tmp [ rand ( 1 , tmp ) ] ;
24780: LD_ADDR_VAR 0 2
24784: PUSH
24785: LD_VAR 0 3
24789: PUSH
24790: LD_INT 1
24792: PPUSH
24793: LD_VAR 0 3
24797: PPUSH
24798: CALL_OW 12
24802: ARRAY
24803: ST_TO_ADDR
// if Crawls ( un ) then
24804: LD_VAR 0 2
24808: PPUSH
24809: CALL_OW 318
24813: IFFALSE 24824
// ComWalk ( un ) ;
24815: LD_VAR 0 2
24819: PPUSH
24820: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24824: LD_VAR 0 2
24828: PPUSH
24829: LD_INT 9
24831: PPUSH
24832: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24836: LD_INT 28
24838: PPUSH
24839: LD_OWVAR 2
24843: PPUSH
24844: LD_INT 2
24846: PPUSH
24847: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24851: LD_INT 29
24853: PPUSH
24854: LD_OWVAR 2
24858: PPUSH
24859: LD_INT 2
24861: PPUSH
24862: CALL_OW 322
// end ;
24866: PPOPN 3
24868: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24869: LD_EXP 47
24873: PUSH
24874: LD_EXP 90
24878: AND
24879: IFFALSE 24990
24881: GO 24883
24883: DISABLE
24884: LD_INT 0
24886: PPUSH
24887: PPUSH
24888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24889: LD_ADDR_VAR 0 3
24893: PUSH
24894: LD_INT 22
24896: PUSH
24897: LD_OWVAR 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 25
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: ST_TO_ADDR
// if not tmp then
24925: LD_VAR 0 3
24929: NOT
24930: IFFALSE 24934
// exit ;
24932: GO 24990
// un := tmp [ rand ( 1 , tmp ) ] ;
24934: LD_ADDR_VAR 0 2
24938: PUSH
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 1
24946: PPUSH
24947: LD_VAR 0 3
24951: PPUSH
24952: CALL_OW 12
24956: ARRAY
24957: ST_TO_ADDR
// if Crawls ( un ) then
24958: LD_VAR 0 2
24962: PPUSH
24963: CALL_OW 318
24967: IFFALSE 24978
// ComWalk ( un ) ;
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24978: LD_VAR 0 2
24982: PPUSH
24983: LD_INT 8
24985: PPUSH
24986: CALL_OW 336
// end ;
24990: PPOPN 3
24992: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24993: LD_EXP 47
24997: PUSH
24998: LD_EXP 91
25002: AND
25003: IFFALSE 25147
25005: GO 25007
25007: DISABLE
25008: LD_INT 0
25010: PPUSH
25011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_INT 22
25019: PUSH
25020: LD_OWVAR 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 34
25044: PUSH
25045: LD_INT 12
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 34
25054: PUSH
25055: LD_INT 51
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 34
25064: PUSH
25065: LD_INT 32
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: PPUSH
25083: CALL_OW 69
25087: ST_TO_ADDR
// if not tmp then
25088: LD_VAR 0 2
25092: NOT
25093: IFFALSE 25097
// exit ;
25095: GO 25147
// for i in tmp do
25097: LD_ADDR_VAR 0 1
25101: PUSH
25102: LD_VAR 0 2
25106: PUSH
25107: FOR_IN
25108: IFFALSE 25145
// if GetCargo ( i , mat_artifact ) = 0 then
25110: LD_VAR 0 1
25114: PPUSH
25115: LD_INT 4
25117: PPUSH
25118: CALL_OW 289
25122: PUSH
25123: LD_INT 0
25125: EQUAL
25126: IFFALSE 25143
// SetCargo ( i , mat_siberit , 100 ) ;
25128: LD_VAR 0 1
25132: PPUSH
25133: LD_INT 3
25135: PPUSH
25136: LD_INT 100
25138: PPUSH
25139: CALL_OW 290
25143: GO 25107
25145: POP
25146: POP
// end ;
25147: PPOPN 2
25149: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25150: LD_EXP 47
25154: PUSH
25155: LD_EXP 92
25159: AND
25160: IFFALSE 25343
25162: GO 25164
25164: DISABLE
25165: LD_INT 0
25167: PPUSH
25168: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25169: LD_ADDR_VAR 0 2
25173: PUSH
25174: LD_INT 22
25176: PUSH
25177: LD_OWVAR 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PPUSH
25186: CALL_OW 69
25190: ST_TO_ADDR
// if not tmp then
25191: LD_VAR 0 2
25195: NOT
25196: IFFALSE 25200
// exit ;
25198: GO 25343
// for i := 1 to 2 do
25200: LD_ADDR_VAR 0 1
25204: PUSH
25205: DOUBLE
25206: LD_INT 1
25208: DEC
25209: ST_TO_ADDR
25210: LD_INT 2
25212: PUSH
25213: FOR_TO
25214: IFFALSE 25341
// begin uc_side := your_side ;
25216: LD_ADDR_OWVAR 20
25220: PUSH
25221: LD_OWVAR 2
25225: ST_TO_ADDR
// uc_nation := nation_american ;
25226: LD_ADDR_OWVAR 21
25230: PUSH
25231: LD_INT 1
25233: ST_TO_ADDR
// vc_chassis := us_morphling ;
25234: LD_ADDR_OWVAR 37
25238: PUSH
25239: LD_INT 5
25241: ST_TO_ADDR
// vc_engine := engine_siberite ;
25242: LD_ADDR_OWVAR 39
25246: PUSH
25247: LD_INT 3
25249: ST_TO_ADDR
// vc_control := control_computer ;
25250: LD_ADDR_OWVAR 38
25254: PUSH
25255: LD_INT 3
25257: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25258: LD_ADDR_OWVAR 40
25262: PUSH
25263: LD_INT 10
25265: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25266: LD_VAR 0 2
25270: PUSH
25271: LD_INT 1
25273: ARRAY
25274: PPUSH
25275: CALL_OW 310
25279: NOT
25280: IFFALSE 25327
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25282: CALL_OW 45
25286: PPUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_INT 1
25294: ARRAY
25295: PPUSH
25296: CALL_OW 250
25300: PPUSH
25301: LD_VAR 0 2
25305: PUSH
25306: LD_INT 1
25308: ARRAY
25309: PPUSH
25310: CALL_OW 251
25314: PPUSH
25315: LD_INT 12
25317: PPUSH
25318: LD_INT 1
25320: PPUSH
25321: CALL_OW 50
25325: GO 25339
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25327: CALL_OW 45
25331: PPUSH
25332: LD_INT 1
25334: PPUSH
25335: CALL_OW 51
// end ;
25339: GO 25213
25341: POP
25342: POP
// end ;
25343: PPOPN 2
25345: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25346: LD_EXP 47
25350: PUSH
25351: LD_EXP 93
25355: AND
25356: IFFALSE 25578
25358: GO 25360
25360: DISABLE
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25369: LD_ADDR_VAR 0 6
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 21
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 3
25398: PUSH
25399: LD_INT 23
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: PPUSH
25418: CALL_OW 69
25422: ST_TO_ADDR
// if not tmp then
25423: LD_VAR 0 6
25427: NOT
25428: IFFALSE 25432
// exit ;
25430: GO 25578
// s1 := rand ( 1 , 4 ) ;
25432: LD_ADDR_VAR 0 2
25436: PUSH
25437: LD_INT 1
25439: PPUSH
25440: LD_INT 4
25442: PPUSH
25443: CALL_OW 12
25447: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25448: LD_ADDR_VAR 0 4
25452: PUSH
25453: LD_VAR 0 6
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: PPUSH
25462: LD_VAR 0 2
25466: PPUSH
25467: CALL_OW 259
25471: ST_TO_ADDR
// if s1 = 1 then
25472: LD_VAR 0 2
25476: PUSH
25477: LD_INT 1
25479: EQUAL
25480: IFFALSE 25500
// s2 := rand ( 2 , 4 ) else
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 2
25489: PPUSH
25490: LD_INT 4
25492: PPUSH
25493: CALL_OW 12
25497: ST_TO_ADDR
25498: GO 25508
// s2 := 1 ;
25500: LD_ADDR_VAR 0 3
25504: PUSH
25505: LD_INT 1
25507: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25508: LD_ADDR_VAR 0 5
25512: PUSH
25513: LD_VAR 0 6
25517: PUSH
25518: LD_INT 1
25520: ARRAY
25521: PPUSH
25522: LD_VAR 0 3
25526: PPUSH
25527: CALL_OW 259
25531: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25532: LD_VAR 0 6
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: LD_VAR 0 2
25545: PPUSH
25546: LD_VAR 0 5
25550: PPUSH
25551: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25555: LD_VAR 0 6
25559: PUSH
25560: LD_INT 1
25562: ARRAY
25563: PPUSH
25564: LD_VAR 0 3
25568: PPUSH
25569: LD_VAR 0 4
25573: PPUSH
25574: CALL_OW 237
// end ;
25578: PPOPN 6
25580: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25581: LD_EXP 47
25585: PUSH
25586: LD_EXP 94
25590: AND
25591: IFFALSE 25670
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25599: LD_ADDR_VAR 0 1
25603: PUSH
25604: LD_INT 22
25606: PUSH
25607: LD_OWVAR 2
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 30
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PPUSH
25630: CALL_OW 69
25634: ST_TO_ADDR
// if not tmp then
25635: LD_VAR 0 1
25639: NOT
25640: IFFALSE 25644
// exit ;
25642: GO 25670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 1
25651: PPUSH
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL_OW 12
25661: ARRAY
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 234
// end ;
25670: PPOPN 1
25672: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25673: LD_EXP 47
25677: PUSH
25678: LD_EXP 95
25682: AND
25683: IFFALSE 25795
25685: GO 25687
25687: DISABLE
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_OWVAR 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 30
25714: PUSH
25715: LD_INT 27
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 30
25724: PUSH
25725: LD_INT 26
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 30
25734: PUSH
25735: LD_INT 28
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PPUSH
25752: CALL_OW 69
25756: ST_TO_ADDR
// if not tmp then
25757: LD_VAR 0 2
25761: NOT
25762: IFFALSE 25766
// exit ;
25764: GO 25795
// for i in tmp do
25766: LD_ADDR_VAR 0 1
25770: PUSH
25771: LD_VAR 0 2
25775: PUSH
25776: FOR_IN
25777: IFFALSE 25793
// SetLives ( i , 1 ) ;
25779: LD_VAR 0 1
25783: PPUSH
25784: LD_INT 1
25786: PPUSH
25787: CALL_OW 234
25791: GO 25776
25793: POP
25794: POP
// end ;
25795: PPOPN 2
25797: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25798: LD_EXP 47
25802: PUSH
25803: LD_EXP 96
25807: AND
25808: IFFALSE 26095
25810: GO 25812
25812: DISABLE
25813: LD_INT 0
25815: PPUSH
25816: PPUSH
25817: PPUSH
// begin i := rand ( 1 , 7 ) ;
25818: LD_ADDR_VAR 0 1
25822: PUSH
25823: LD_INT 1
25825: PPUSH
25826: LD_INT 7
25828: PPUSH
25829: CALL_OW 12
25833: ST_TO_ADDR
// case i of 1 :
25834: LD_VAR 0 1
25838: PUSH
25839: LD_INT 1
25841: DOUBLE
25842: EQUAL
25843: IFTRUE 25847
25845: GO 25857
25847: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25848: LD_STRING earthquake(getX(game), 0, 32)
25850: PPUSH
25851: CALL_OW 559
25855: GO 26095
25857: LD_INT 2
25859: DOUBLE
25860: EQUAL
25861: IFTRUE 25865
25863: GO 25879
25865: POP
// begin ToLua ( displayStucuk(); ) ;
25866: LD_STRING displayStucuk();
25868: PPUSH
25869: CALL_OW 559
// ResetFog ;
25873: CALL_OW 335
// end ; 3 :
25877: GO 26095
25879: LD_INT 3
25881: DOUBLE
25882: EQUAL
25883: IFTRUE 25887
25885: GO 25991
25887: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25888: LD_ADDR_VAR 0 2
25892: PUSH
25893: LD_INT 22
25895: PUSH
25896: LD_OWVAR 2
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 25
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PPUSH
25919: CALL_OW 69
25923: ST_TO_ADDR
// if not tmp then
25924: LD_VAR 0 2
25928: NOT
25929: IFFALSE 25933
// exit ;
25931: GO 26095
// un := tmp [ rand ( 1 , tmp ) ] ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_VAR 0 2
25942: PUSH
25943: LD_INT 1
25945: PPUSH
25946: LD_VAR 0 2
25950: PPUSH
25951: CALL_OW 12
25955: ARRAY
25956: ST_TO_ADDR
// if Crawls ( un ) then
25957: LD_VAR 0 3
25961: PPUSH
25962: CALL_OW 318
25966: IFFALSE 25977
// ComWalk ( un ) ;
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25977: LD_VAR 0 3
25981: PPUSH
25982: LD_INT 8
25984: PPUSH
25985: CALL_OW 336
// end ; 4 :
25989: GO 26095
25991: LD_INT 4
25993: DOUBLE
25994: EQUAL
25995: IFTRUE 25999
25997: GO 26073
25999: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26000: LD_ADDR_VAR 0 2
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 30
26019: PUSH
26020: LD_INT 29
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: ST_TO_ADDR
// if not tmp then
26036: LD_VAR 0 2
26040: NOT
26041: IFFALSE 26045
// exit ;
26043: GO 26095
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26045: LD_VAR 0 2
26049: PUSH
26050: LD_INT 1
26052: ARRAY
26053: PPUSH
26054: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26058: LD_VAR 0 2
26062: PUSH
26063: LD_INT 1
26065: ARRAY
26066: PPUSH
26067: CALL_OW 65
// end ; 5 .. 7 :
26071: GO 26095
26073: LD_INT 5
26075: DOUBLE
26076: GREATEREQUAL
26077: IFFALSE 26085
26079: LD_INT 7
26081: DOUBLE
26082: LESSEQUAL
26083: IFTRUE 26087
26085: GO 26094
26087: POP
// StreamSibBomb ; end ;
26088: CALL 22332 0 0
26092: GO 26095
26094: POP
// end ;
26095: PPOPN 3
26097: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26098: LD_EXP 47
26102: PUSH
26103: LD_EXP 97
26107: AND
26108: IFFALSE 26264
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
26116: PPUSH
26117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: LD_INT 81
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 21
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 21
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: ST_TO_ADDR
// if not tmp then
26172: LD_VAR 0 2
26176: NOT
26177: IFFALSE 26181
// exit ;
26179: GO 26264
// p := 0 ;
26181: LD_ADDR_VAR 0 3
26185: PUSH
26186: LD_INT 0
26188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26189: LD_INT 35
26191: PPUSH
26192: CALL_OW 67
// p := p + 1 ;
26196: LD_ADDR_VAR 0 3
26200: PUSH
26201: LD_VAR 0 3
26205: PUSH
26206: LD_INT 1
26208: PLUS
26209: ST_TO_ADDR
// for i in tmp do
26210: LD_ADDR_VAR 0 1
26214: PUSH
26215: LD_VAR 0 2
26219: PUSH
26220: FOR_IN
26221: IFFALSE 26252
// if GetLives ( i ) < 1000 then
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 256
26232: PUSH
26233: LD_INT 1000
26235: LESS
26236: IFFALSE 26250
// SetLives ( i , 1000 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 1000
26245: PPUSH
26246: CALL_OW 234
26250: GO 26220
26252: POP
26253: POP
// until p > 20 ;
26254: LD_VAR 0 3
26258: PUSH
26259: LD_INT 20
26261: GREATER
26262: IFFALSE 26189
// end ;
26264: PPOPN 3
26266: END
// every 0 0$1 trigger StreamModeActive and sTime do
26267: LD_EXP 47
26271: PUSH
26272: LD_EXP 98
26276: AND
26277: IFFALSE 26312
26279: GO 26281
26281: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26282: LD_INT 28
26284: PPUSH
26285: LD_OWVAR 2
26289: PPUSH
26290: LD_INT 2
26292: PPUSH
26293: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26297: LD_INT 30
26299: PPUSH
26300: LD_OWVAR 2
26304: PPUSH
26305: LD_INT 2
26307: PPUSH
26308: CALL_OW 322
// end ;
26312: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26313: LD_EXP 47
26317: PUSH
26318: LD_EXP 99
26322: AND
26323: IFFALSE 26444
26325: GO 26327
26327: DISABLE
26328: LD_INT 0
26330: PPUSH
26331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 21
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 23
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: ST_TO_ADDR
// if not tmp then
26386: LD_VAR 0 2
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26444
// for i in tmp do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: LD_VAR 0 2
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26442
// begin if Crawls ( i ) then
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 318
26417: IFFALSE 26428
// ComWalk ( i ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 138
// SetClass ( i , 2 ) ;
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_INT 2
26435: PPUSH
26436: CALL_OW 336
// end ;
26440: GO 26405
26442: POP
26443: POP
// end ;
26444: PPOPN 2
26446: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26447: LD_EXP 47
26451: PUSH
26452: LD_EXP 100
26456: AND
26457: IFFALSE 26745
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
26465: PPUSH
26466: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26467: LD_OWVAR 2
26471: PPUSH
26472: LD_INT 9
26474: PPUSH
26475: LD_INT 1
26477: PPUSH
26478: LD_INT 1
26480: PPUSH
26481: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26485: LD_INT 9
26487: PPUSH
26488: LD_OWVAR 2
26492: PPUSH
26493: CALL_OW 343
// uc_side := 9 ;
26497: LD_ADDR_OWVAR 20
26501: PUSH
26502: LD_INT 9
26504: ST_TO_ADDR
// uc_nation := 2 ;
26505: LD_ADDR_OWVAR 21
26509: PUSH
26510: LD_INT 2
26512: ST_TO_ADDR
// hc_name := Dark Warrior ;
26513: LD_ADDR_OWVAR 26
26517: PUSH
26518: LD_STRING Dark Warrior
26520: ST_TO_ADDR
// hc_gallery :=  ;
26521: LD_ADDR_OWVAR 33
26525: PUSH
26526: LD_STRING 
26528: ST_TO_ADDR
// hc_noskilllimit := true ;
26529: LD_ADDR_OWVAR 76
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26537: LD_ADDR_OWVAR 31
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 30
26547: PUSH
26548: LD_INT 30
26550: PUSH
26551: LD_INT 30
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: ST_TO_ADDR
// un := CreateHuman ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: CALL_OW 44
26569: ST_TO_ADDR
// hc_noskilllimit := false ;
26570: LD_ADDR_OWVAR 76
26574: PUSH
26575: LD_INT 0
26577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26578: LD_VAR 0 3
26582: PPUSH
26583: LD_INT 1
26585: PPUSH
26586: CALL_OW 51
// ToLua ( playRanger() ) ;
26590: LD_STRING playRanger()
26592: PPUSH
26593: CALL_OW 559
// p := 0 ;
26597: LD_ADDR_VAR 0 2
26601: PUSH
26602: LD_INT 0
26604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26605: LD_INT 35
26607: PPUSH
26608: CALL_OW 67
// p := p + 1 ;
26612: LD_ADDR_VAR 0 2
26616: PUSH
26617: LD_VAR 0 2
26621: PUSH
26622: LD_INT 1
26624: PLUS
26625: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26626: LD_VAR 0 3
26630: PPUSH
26631: CALL_OW 256
26635: PUSH
26636: LD_INT 1000
26638: LESS
26639: IFFALSE 26653
// SetLives ( un , 1000 ) ;
26641: LD_VAR 0 3
26645: PPUSH
26646: LD_INT 1000
26648: PPUSH
26649: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26653: LD_VAR 0 3
26657: PPUSH
26658: LD_INT 81
26660: PUSH
26661: LD_OWVAR 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 91
26672: PUSH
26673: LD_VAR 0 3
26677: PUSH
26678: LD_INT 30
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PPUSH
26690: CALL_OW 69
26694: PPUSH
26695: LD_VAR 0 3
26699: PPUSH
26700: CALL_OW 74
26704: PPUSH
26705: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26709: LD_VAR 0 2
26713: PUSH
26714: LD_INT 80
26716: GREATER
26717: PUSH
26718: LD_VAR 0 3
26722: PPUSH
26723: CALL_OW 301
26727: OR
26728: IFFALSE 26605
// if un then
26730: LD_VAR 0 3
26734: IFFALSE 26745
// RemoveUnit ( un ) ;
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 64
// end ;
26745: PPOPN 3
26747: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26748: LD_EXP 101
26752: IFFALSE 26868
26754: GO 26756
26756: DISABLE
26757: LD_INT 0
26759: PPUSH
26760: PPUSH
26761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26762: LD_ADDR_VAR 0 2
26766: PUSH
26767: LD_INT 81
26769: PUSH
26770: LD_OWVAR 2
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 21
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PPUSH
26793: CALL_OW 69
26797: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26798: LD_STRING playComputer()
26800: PPUSH
26801: CALL_OW 559
// if not tmp then
26805: LD_VAR 0 2
26809: NOT
26810: IFFALSE 26814
// exit ;
26812: GO 26868
// for i in tmp do
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_VAR 0 2
26823: PUSH
26824: FOR_IN
26825: IFFALSE 26866
// for j := 1 to 4 do
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: DOUBLE
26833: LD_INT 1
26835: DEC
26836: ST_TO_ADDR
26837: LD_INT 4
26839: PUSH
26840: FOR_TO
26841: IFFALSE 26862
// SetSkill ( i , j , 10 ) ;
26843: LD_VAR 0 1
26847: PPUSH
26848: LD_VAR 0 3
26852: PPUSH
26853: LD_INT 10
26855: PPUSH
26856: CALL_OW 237
26860: GO 26840
26862: POP
26863: POP
26864: GO 26824
26866: POP
26867: POP
// end ;
26868: PPOPN 3
26870: END
// every 0 0$1 trigger s30 do var i , tmp ;
26871: LD_EXP 102
26875: IFFALSE 26944
26877: GO 26879
26879: DISABLE
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26884: LD_ADDR_VAR 0 2
26888: PUSH
26889: LD_INT 22
26891: PUSH
26892: LD_OWVAR 2
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PPUSH
26901: CALL_OW 69
26905: ST_TO_ADDR
// if not tmp then
26906: LD_VAR 0 2
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 26944
// for i in tmp do
26915: LD_ADDR_VAR 0 1
26919: PUSH
26920: LD_VAR 0 2
26924: PUSH
26925: FOR_IN
26926: IFFALSE 26942
// SetLives ( i , 300 ) ;
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_INT 300
26935: PPUSH
26936: CALL_OW 234
26940: GO 26925
26942: POP
26943: POP
// end ;
26944: PPOPN 2
26946: END
// every 0 0$1 trigger s60 do var i , tmp ;
26947: LD_EXP 103
26951: IFFALSE 27020
26953: GO 26955
26955: DISABLE
26956: LD_INT 0
26958: PPUSH
26959: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26960: LD_ADDR_VAR 0 2
26964: PUSH
26965: LD_INT 22
26967: PUSH
26968: LD_OWVAR 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PPUSH
26977: CALL_OW 69
26981: ST_TO_ADDR
// if not tmp then
26982: LD_VAR 0 2
26986: NOT
26987: IFFALSE 26991
// exit ;
26989: GO 27020
// for i in tmp do
26991: LD_ADDR_VAR 0 1
26995: PUSH
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27018
// SetLives ( i , 600 ) ;
27004: LD_VAR 0 1
27008: PPUSH
27009: LD_INT 600
27011: PPUSH
27012: CALL_OW 234
27016: GO 27001
27018: POP
27019: POP
// end ;
27020: PPOPN 2
27022: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27023: LD_INT 0
27025: PPUSH
// case cmd of 301 :
27026: LD_VAR 0 1
27030: PUSH
27031: LD_INT 301
27033: DOUBLE
27034: EQUAL
27035: IFTRUE 27039
27037: GO 27071
27039: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27040: LD_VAR 0 6
27044: PPUSH
27045: LD_VAR 0 7
27049: PPUSH
27050: LD_VAR 0 8
27054: PPUSH
27055: LD_VAR 0 4
27059: PPUSH
27060: LD_VAR 0 5
27064: PPUSH
27065: CALL 28272 0 5
27069: GO 27192
27071: LD_INT 302
27073: DOUBLE
27074: EQUAL
27075: IFTRUE 27079
27077: GO 27116
27079: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27080: LD_VAR 0 6
27084: PPUSH
27085: LD_VAR 0 7
27089: PPUSH
27090: LD_VAR 0 8
27094: PPUSH
27095: LD_VAR 0 9
27099: PPUSH
27100: LD_VAR 0 4
27104: PPUSH
27105: LD_VAR 0 5
27109: PPUSH
27110: CALL 28363 0 6
27114: GO 27192
27116: LD_INT 303
27118: DOUBLE
27119: EQUAL
27120: IFTRUE 27124
27122: GO 27161
27124: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27125: LD_VAR 0 6
27129: PPUSH
27130: LD_VAR 0 7
27134: PPUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: LD_VAR 0 9
27144: PPUSH
27145: LD_VAR 0 4
27149: PPUSH
27150: LD_VAR 0 5
27154: PPUSH
27155: CALL 27197 0 6
27159: GO 27192
27161: LD_INT 304
27163: DOUBLE
27164: EQUAL
27165: IFTRUE 27169
27167: GO 27191
27169: POP
// hHackTeleport ( unit , x , y ) ; end ;
27170: LD_VAR 0 2
27174: PPUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: LD_VAR 0 5
27184: PPUSH
27185: CALL 28956 0 3
27189: GO 27192
27191: POP
// end ;
27192: LD_VAR 0 12
27196: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27197: LD_INT 0
27199: PPUSH
27200: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27201: LD_VAR 0 1
27205: PUSH
27206: LD_INT 1
27208: LESS
27209: PUSH
27210: LD_VAR 0 1
27214: PUSH
27215: LD_INT 3
27217: GREATER
27218: OR
27219: PUSH
27220: LD_VAR 0 5
27224: PPUSH
27225: LD_VAR 0 6
27229: PPUSH
27230: CALL_OW 428
27234: OR
27235: IFFALSE 27239
// exit ;
27237: GO 27959
// uc_side := your_side ;
27239: LD_ADDR_OWVAR 20
27243: PUSH
27244: LD_OWVAR 2
27248: ST_TO_ADDR
// uc_nation := nation ;
27249: LD_ADDR_OWVAR 21
27253: PUSH
27254: LD_VAR 0 1
27258: ST_TO_ADDR
// bc_level = 1 ;
27259: LD_ADDR_OWVAR 43
27263: PUSH
27264: LD_INT 1
27266: ST_TO_ADDR
// case btype of 1 :
27267: LD_VAR 0 2
27271: PUSH
27272: LD_INT 1
27274: DOUBLE
27275: EQUAL
27276: IFTRUE 27280
27278: GO 27291
27280: POP
// bc_type := b_depot ; 2 :
27281: LD_ADDR_OWVAR 42
27285: PUSH
27286: LD_INT 0
27288: ST_TO_ADDR
27289: GO 27903
27291: LD_INT 2
27293: DOUBLE
27294: EQUAL
27295: IFTRUE 27299
27297: GO 27310
27299: POP
// bc_type := b_warehouse ; 3 :
27300: LD_ADDR_OWVAR 42
27304: PUSH
27305: LD_INT 1
27307: ST_TO_ADDR
27308: GO 27903
27310: LD_INT 3
27312: DOUBLE
27313: EQUAL
27314: IFTRUE 27318
27316: GO 27329
27318: POP
// bc_type := b_lab ; 4 .. 9 :
27319: LD_ADDR_OWVAR 42
27323: PUSH
27324: LD_INT 6
27326: ST_TO_ADDR
27327: GO 27903
27329: LD_INT 4
27331: DOUBLE
27332: GREATEREQUAL
27333: IFFALSE 27341
27335: LD_INT 9
27337: DOUBLE
27338: LESSEQUAL
27339: IFTRUE 27343
27341: GO 27395
27343: POP
// begin bc_type := b_lab_half ;
27344: LD_ADDR_OWVAR 42
27348: PUSH
27349: LD_INT 7
27351: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27352: LD_ADDR_OWVAR 44
27356: PUSH
27357: LD_INT 10
27359: PUSH
27360: LD_INT 11
27362: PUSH
27363: LD_INT 12
27365: PUSH
27366: LD_INT 15
27368: PUSH
27369: LD_INT 14
27371: PUSH
27372: LD_INT 13
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: PUSH
27383: LD_VAR 0 2
27387: PUSH
27388: LD_INT 3
27390: MINUS
27391: ARRAY
27392: ST_TO_ADDR
// end ; 10 .. 13 :
27393: GO 27903
27395: LD_INT 10
27397: DOUBLE
27398: GREATEREQUAL
27399: IFFALSE 27407
27401: LD_INT 13
27403: DOUBLE
27404: LESSEQUAL
27405: IFTRUE 27409
27407: GO 27486
27409: POP
// begin bc_type := b_lab_full ;
27410: LD_ADDR_OWVAR 42
27414: PUSH
27415: LD_INT 8
27417: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27418: LD_ADDR_OWVAR 44
27422: PUSH
27423: LD_INT 10
27425: PUSH
27426: LD_INT 12
27428: PUSH
27429: LD_INT 14
27431: PUSH
27432: LD_INT 13
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: PUSH
27441: LD_VAR 0 2
27445: PUSH
27446: LD_INT 9
27448: MINUS
27449: ARRAY
27450: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27451: LD_ADDR_OWVAR 45
27455: PUSH
27456: LD_INT 11
27458: PUSH
27459: LD_INT 15
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 15
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: PUSH
27474: LD_VAR 0 2
27478: PUSH
27479: LD_INT 9
27481: MINUS
27482: ARRAY
27483: ST_TO_ADDR
// end ; 14 :
27484: GO 27903
27486: LD_INT 14
27488: DOUBLE
27489: EQUAL
27490: IFTRUE 27494
27492: GO 27505
27494: POP
// bc_type := b_workshop ; 15 :
27495: LD_ADDR_OWVAR 42
27499: PUSH
27500: LD_INT 2
27502: ST_TO_ADDR
27503: GO 27903
27505: LD_INT 15
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27513
27511: GO 27524
27513: POP
// bc_type := b_factory ; 16 :
27514: LD_ADDR_OWVAR 42
27518: PUSH
27519: LD_INT 3
27521: ST_TO_ADDR
27522: GO 27903
27524: LD_INT 16
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27532
27530: GO 27543
27532: POP
// bc_type := b_ext_gun ; 17 :
27533: LD_ADDR_OWVAR 42
27537: PUSH
27538: LD_INT 17
27540: ST_TO_ADDR
27541: GO 27903
27543: LD_INT 17
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27579
27551: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27552: LD_ADDR_OWVAR 42
27556: PUSH
27557: LD_INT 19
27559: PUSH
27560: LD_INT 23
27562: PUSH
27563: LD_INT 19
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: PUSH
27571: LD_VAR 0 1
27575: ARRAY
27576: ST_TO_ADDR
27577: GO 27903
27579: LD_INT 18
27581: DOUBLE
27582: EQUAL
27583: IFTRUE 27587
27585: GO 27598
27587: POP
// bc_type := b_ext_radar ; 19 :
27588: LD_ADDR_OWVAR 42
27592: PUSH
27593: LD_INT 20
27595: ST_TO_ADDR
27596: GO 27903
27598: LD_INT 19
27600: DOUBLE
27601: EQUAL
27602: IFTRUE 27606
27604: GO 27617
27606: POP
// bc_type := b_ext_radio ; 20 :
27607: LD_ADDR_OWVAR 42
27611: PUSH
27612: LD_INT 22
27614: ST_TO_ADDR
27615: GO 27903
27617: LD_INT 20
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27636
27625: POP
// bc_type := b_ext_siberium ; 21 :
27626: LD_ADDR_OWVAR 42
27630: PUSH
27631: LD_INT 21
27633: ST_TO_ADDR
27634: GO 27903
27636: LD_INT 21
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27655
27644: POP
// bc_type := b_ext_computer ; 22 :
27645: LD_ADDR_OWVAR 42
27649: PUSH
27650: LD_INT 24
27652: ST_TO_ADDR
27653: GO 27903
27655: LD_INT 22
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27663
27661: GO 27674
27663: POP
// bc_type := b_ext_track ; 23 :
27664: LD_ADDR_OWVAR 42
27668: PUSH
27669: LD_INT 16
27671: ST_TO_ADDR
27672: GO 27903
27674: LD_INT 23
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 27693
27682: POP
// bc_type := b_ext_laser ; 24 :
27683: LD_ADDR_OWVAR 42
27687: PUSH
27688: LD_INT 25
27690: ST_TO_ADDR
27691: GO 27903
27693: LD_INT 24
27695: DOUBLE
27696: EQUAL
27697: IFTRUE 27701
27699: GO 27712
27701: POP
// bc_type := b_control_tower ; 25 :
27702: LD_ADDR_OWVAR 42
27706: PUSH
27707: LD_INT 36
27709: ST_TO_ADDR
27710: GO 27903
27712: LD_INT 25
27714: DOUBLE
27715: EQUAL
27716: IFTRUE 27720
27718: GO 27731
27720: POP
// bc_type := b_breastwork ; 26 :
27721: LD_ADDR_OWVAR 42
27725: PUSH
27726: LD_INT 31
27728: ST_TO_ADDR
27729: GO 27903
27731: LD_INT 26
27733: DOUBLE
27734: EQUAL
27735: IFTRUE 27739
27737: GO 27750
27739: POP
// bc_type := b_bunker ; 27 :
27740: LD_ADDR_OWVAR 42
27744: PUSH
27745: LD_INT 32
27747: ST_TO_ADDR
27748: GO 27903
27750: LD_INT 27
27752: DOUBLE
27753: EQUAL
27754: IFTRUE 27758
27756: GO 27769
27758: POP
// bc_type := b_turret ; 28 :
27759: LD_ADDR_OWVAR 42
27763: PUSH
27764: LD_INT 33
27766: ST_TO_ADDR
27767: GO 27903
27769: LD_INT 28
27771: DOUBLE
27772: EQUAL
27773: IFTRUE 27777
27775: GO 27788
27777: POP
// bc_type := b_armoury ; 29 :
27778: LD_ADDR_OWVAR 42
27782: PUSH
27783: LD_INT 4
27785: ST_TO_ADDR
27786: GO 27903
27788: LD_INT 29
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 27807
27796: POP
// bc_type := b_barracks ; 30 :
27797: LD_ADDR_OWVAR 42
27801: PUSH
27802: LD_INT 5
27804: ST_TO_ADDR
27805: GO 27903
27807: LD_INT 30
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27826
27815: POP
// bc_type := b_solar_power ; 31 :
27816: LD_ADDR_OWVAR 42
27820: PUSH
27821: LD_INT 27
27823: ST_TO_ADDR
27824: GO 27903
27826: LD_INT 31
27828: DOUBLE
27829: EQUAL
27830: IFTRUE 27834
27832: GO 27845
27834: POP
// bc_type := b_oil_power ; 32 :
27835: LD_ADDR_OWVAR 42
27839: PUSH
27840: LD_INT 26
27842: ST_TO_ADDR
27843: GO 27903
27845: LD_INT 32
27847: DOUBLE
27848: EQUAL
27849: IFTRUE 27853
27851: GO 27864
27853: POP
// bc_type := b_siberite_power ; 33 :
27854: LD_ADDR_OWVAR 42
27858: PUSH
27859: LD_INT 28
27861: ST_TO_ADDR
27862: GO 27903
27864: LD_INT 33
27866: DOUBLE
27867: EQUAL
27868: IFTRUE 27872
27870: GO 27883
27872: POP
// bc_type := b_oil_mine ; 34 :
27873: LD_ADDR_OWVAR 42
27877: PUSH
27878: LD_INT 29
27880: ST_TO_ADDR
27881: GO 27903
27883: LD_INT 34
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27902
27891: POP
// bc_type := b_siberite_mine ; end ;
27892: LD_ADDR_OWVAR 42
27896: PUSH
27897: LD_INT 30
27899: ST_TO_ADDR
27900: GO 27903
27902: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27903: LD_ADDR_VAR 0 8
27907: PUSH
27908: LD_VAR 0 5
27912: PPUSH
27913: LD_VAR 0 6
27917: PPUSH
27918: LD_VAR 0 3
27922: PPUSH
27923: CALL_OW 47
27927: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27928: LD_OWVAR 42
27932: PUSH
27933: LD_INT 32
27935: PUSH
27936: LD_INT 33
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: IN
27943: IFFALSE 27959
// PlaceWeaponTurret ( b , weapon ) ;
27945: LD_VAR 0 8
27949: PPUSH
27950: LD_VAR 0 4
27954: PPUSH
27955: CALL_OW 431
// end ;
27959: LD_VAR 0 7
27963: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27964: LD_INT 0
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27970: LD_ADDR_VAR 0 4
27974: PUSH
27975: LD_INT 22
27977: PUSH
27978: LD_OWVAR 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 2
27989: PUSH
27990: LD_INT 30
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PPUSH
28019: CALL_OW 69
28023: ST_TO_ADDR
// if not tmp then
28024: LD_VAR 0 4
28028: NOT
28029: IFFALSE 28033
// exit ;
28031: GO 28092
// for i in tmp do
28033: LD_ADDR_VAR 0 2
28037: PUSH
28038: LD_VAR 0 4
28042: PUSH
28043: FOR_IN
28044: IFFALSE 28090
// for j = 1 to 3 do
28046: LD_ADDR_VAR 0 3
28050: PUSH
28051: DOUBLE
28052: LD_INT 1
28054: DEC
28055: ST_TO_ADDR
28056: LD_INT 3
28058: PUSH
28059: FOR_TO
28060: IFFALSE 28086
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28062: LD_VAR 0 2
28066: PPUSH
28067: CALL_OW 274
28071: PPUSH
28072: LD_VAR 0 3
28076: PPUSH
28077: LD_INT 99999
28079: PPUSH
28080: CALL_OW 277
28084: GO 28059
28086: POP
28087: POP
28088: GO 28043
28090: POP
28091: POP
// end ;
28092: LD_VAR 0 1
28096: RET
// export function hHackSetLevel10 ; var i , j ; begin
28097: LD_INT 0
28099: PPUSH
28100: PPUSH
28101: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28102: LD_ADDR_VAR 0 2
28106: PUSH
28107: LD_INT 21
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: PUSH
28122: FOR_IN
28123: IFFALSE 28175
// if IsSelected ( i ) then
28125: LD_VAR 0 2
28129: PPUSH
28130: CALL_OW 306
28134: IFFALSE 28173
// begin for j := 1 to 4 do
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: DOUBLE
28142: LD_INT 1
28144: DEC
28145: ST_TO_ADDR
28146: LD_INT 4
28148: PUSH
28149: FOR_TO
28150: IFFALSE 28171
// SetSkill ( i , j , 10 ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_VAR 0 3
28161: PPUSH
28162: LD_INT 10
28164: PPUSH
28165: CALL_OW 237
28169: GO 28149
28171: POP
28172: POP
// end ;
28173: GO 28122
28175: POP
28176: POP
// end ;
28177: LD_VAR 0 1
28181: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28187: LD_ADDR_VAR 0 2
28191: PUSH
28192: LD_INT 22
28194: PUSH
28195: LD_OWVAR 2
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 21
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PPUSH
28218: CALL_OW 69
28222: PUSH
28223: FOR_IN
28224: IFFALSE 28265
// begin for j := 1 to 4 do
28226: LD_ADDR_VAR 0 3
28230: PUSH
28231: DOUBLE
28232: LD_INT 1
28234: DEC
28235: ST_TO_ADDR
28236: LD_INT 4
28238: PUSH
28239: FOR_TO
28240: IFFALSE 28261
// SetSkill ( i , j , 10 ) ;
28242: LD_VAR 0 2
28246: PPUSH
28247: LD_VAR 0 3
28251: PPUSH
28252: LD_INT 10
28254: PPUSH
28255: CALL_OW 237
28259: GO 28239
28261: POP
28262: POP
// end ;
28263: GO 28223
28265: POP
28266: POP
// end ;
28267: LD_VAR 0 1
28271: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28272: LD_INT 0
28274: PPUSH
// uc_side := your_side ;
28275: LD_ADDR_OWVAR 20
28279: PUSH
28280: LD_OWVAR 2
28284: ST_TO_ADDR
// uc_nation := nation ;
28285: LD_ADDR_OWVAR 21
28289: PUSH
28290: LD_VAR 0 1
28294: ST_TO_ADDR
// InitHc ;
28295: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28299: LD_INT 0
28301: PPUSH
28302: LD_VAR 0 2
28306: PPUSH
28307: LD_VAR 0 3
28311: PPUSH
28312: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28316: LD_VAR 0 4
28320: PPUSH
28321: LD_VAR 0 5
28325: PPUSH
28326: CALL_OW 428
28330: PUSH
28331: LD_INT 0
28333: EQUAL
28334: IFFALSE 28358
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28336: CALL_OW 44
28340: PPUSH
28341: LD_VAR 0 4
28345: PPUSH
28346: LD_VAR 0 5
28350: PPUSH
28351: LD_INT 1
28353: PPUSH
28354: CALL_OW 48
// end ;
28358: LD_VAR 0 6
28362: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
// uc_side := your_side ;
28367: LD_ADDR_OWVAR 20
28371: PUSH
28372: LD_OWVAR 2
28376: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28377: LD_VAR 0 1
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: LD_INT 4
28393: PUSH
28394: LD_INT 5
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: IN
28404: IFFALSE 28416
// uc_nation := nation_american else
28406: LD_ADDR_OWVAR 21
28410: PUSH
28411: LD_INT 1
28413: ST_TO_ADDR
28414: GO 28459
// if chassis in [ 11 , 12 , 13 , 14 ] then
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 11
28423: PUSH
28424: LD_INT 12
28426: PUSH
28427: LD_INT 13
28429: PUSH
28430: LD_INT 14
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: IN
28439: IFFALSE 28451
// uc_nation := nation_arabian else
28441: LD_ADDR_OWVAR 21
28445: PUSH
28446: LD_INT 2
28448: ST_TO_ADDR
28449: GO 28459
// uc_nation := nation_russian ;
28451: LD_ADDR_OWVAR 21
28455: PUSH
28456: LD_INT 3
28458: ST_TO_ADDR
// vc_chassis := chassis ;
28459: LD_ADDR_OWVAR 37
28463: PUSH
28464: LD_VAR 0 1
28468: ST_TO_ADDR
// vc_engine := engine ;
28469: LD_ADDR_OWVAR 39
28473: PUSH
28474: LD_VAR 0 2
28478: ST_TO_ADDR
// vc_control := control ;
28479: LD_ADDR_OWVAR 38
28483: PUSH
28484: LD_VAR 0 3
28488: ST_TO_ADDR
// vc_weapon := weapon ;
28489: LD_ADDR_OWVAR 40
28493: PUSH
28494: LD_VAR 0 4
28498: ST_TO_ADDR
// un := CreateVehicle ;
28499: LD_ADDR_VAR 0 8
28503: PUSH
28504: CALL_OW 45
28508: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28509: LD_VAR 0 8
28513: PPUSH
28514: LD_INT 0
28516: PPUSH
28517: LD_INT 5
28519: PPUSH
28520: CALL_OW 12
28524: PPUSH
28525: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28529: LD_VAR 0 8
28533: PPUSH
28534: LD_VAR 0 5
28538: PPUSH
28539: LD_VAR 0 6
28543: PPUSH
28544: LD_INT 1
28546: PPUSH
28547: CALL_OW 48
// end ;
28551: LD_VAR 0 7
28555: RET
// export hInvincible ; every 1 do
28556: GO 28558
28558: DISABLE
// hInvincible := [ ] ;
28559: LD_ADDR_EXP 104
28563: PUSH
28564: EMPTY
28565: ST_TO_ADDR
28566: END
// every 10 do var i ;
28567: GO 28569
28569: DISABLE
28570: LD_INT 0
28572: PPUSH
// begin enable ;
28573: ENABLE
// if not hInvincible then
28574: LD_EXP 104
28578: NOT
28579: IFFALSE 28583
// exit ;
28581: GO 28627
// for i in hInvincible do
28583: LD_ADDR_VAR 0 1
28587: PUSH
28588: LD_EXP 104
28592: PUSH
28593: FOR_IN
28594: IFFALSE 28625
// if GetLives ( i ) < 1000 then
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 256
28605: PUSH
28606: LD_INT 1000
28608: LESS
28609: IFFALSE 28623
// SetLives ( i , 1000 ) ;
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_INT 1000
28618: PPUSH
28619: CALL_OW 234
28623: GO 28593
28625: POP
28626: POP
// end ;
28627: PPOPN 1
28629: END
// export function hHackInvincible ; var i ; begin
28630: LD_INT 0
28632: PPUSH
28633: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28634: LD_ADDR_VAR 0 2
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 21
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 21
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: PPUSH
28667: CALL_OW 69
28671: PUSH
28672: FOR_IN
28673: IFFALSE 28734
// if IsSelected ( i ) then
28675: LD_VAR 0 2
28679: PPUSH
28680: CALL_OW 306
28684: IFFALSE 28732
// begin if i in hInvincible then
28686: LD_VAR 0 2
28690: PUSH
28691: LD_EXP 104
28695: IN
28696: IFFALSE 28716
// hInvincible := hInvincible diff i else
28698: LD_ADDR_EXP 104
28702: PUSH
28703: LD_EXP 104
28707: PUSH
28708: LD_VAR 0 2
28712: DIFF
28713: ST_TO_ADDR
28714: GO 28732
// hInvincible := hInvincible union i ;
28716: LD_ADDR_EXP 104
28720: PUSH
28721: LD_EXP 104
28725: PUSH
28726: LD_VAR 0 2
28730: UNION
28731: ST_TO_ADDR
// end ;
28732: GO 28672
28734: POP
28735: POP
// end ;
28736: LD_VAR 0 1
28740: RET
// export function hHackInvisible ; var i , j ; begin
28741: LD_INT 0
28743: PPUSH
28744: PPUSH
28745: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28746: LD_ADDR_VAR 0 2
28750: PUSH
28751: LD_INT 21
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PPUSH
28761: CALL_OW 69
28765: PUSH
28766: FOR_IN
28767: IFFALSE 28791
// if IsSelected ( i ) then
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 306
28778: IFFALSE 28789
// ComForceInvisible ( i ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: CALL_OW 496
28789: GO 28766
28791: POP
28792: POP
// end ;
28793: LD_VAR 0 1
28797: RET
// export function hHackChangeYourSide ; begin
28798: LD_INT 0
28800: PPUSH
// if your_side = 8 then
28801: LD_OWVAR 2
28805: PUSH
28806: LD_INT 8
28808: EQUAL
28809: IFFALSE 28821
// your_side := 0 else
28811: LD_ADDR_OWVAR 2
28815: PUSH
28816: LD_INT 0
28818: ST_TO_ADDR
28819: GO 28835
// your_side := your_side + 1 ;
28821: LD_ADDR_OWVAR 2
28825: PUSH
28826: LD_OWVAR 2
28830: PUSH
28831: LD_INT 1
28833: PLUS
28834: ST_TO_ADDR
// end ;
28835: LD_VAR 0 1
28839: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28840: LD_INT 0
28842: PPUSH
28843: PPUSH
28844: PPUSH
// for i in all_units do
28845: LD_ADDR_VAR 0 2
28849: PUSH
28850: LD_OWVAR 3
28854: PUSH
28855: FOR_IN
28856: IFFALSE 28934
// if IsSelected ( i ) then
28858: LD_VAR 0 2
28862: PPUSH
28863: CALL_OW 306
28867: IFFALSE 28932
// begin j := GetSide ( i ) ;
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: LD_VAR 0 2
28878: PPUSH
28879: CALL_OW 255
28883: ST_TO_ADDR
// if j = 8 then
28884: LD_VAR 0 3
28888: PUSH
28889: LD_INT 8
28891: EQUAL
28892: IFFALSE 28904
// j := 0 else
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
28902: GO 28918
// j := j + 1 ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_VAR 0 3
28913: PUSH
28914: LD_INT 1
28916: PLUS
28917: ST_TO_ADDR
// SetSide ( i , j ) ;
28918: LD_VAR 0 2
28922: PPUSH
28923: LD_VAR 0 3
28927: PPUSH
28928: CALL_OW 235
// end ;
28932: GO 28855
28934: POP
28935: POP
// end ;
28936: LD_VAR 0 1
28940: RET
// export function hHackFog ; begin
28941: LD_INT 0
28943: PPUSH
// FogOff ( true ) ;
28944: LD_INT 1
28946: PPUSH
28947: CALL_OW 344
// end ;
28951: LD_VAR 0 1
28955: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28956: LD_INT 0
28958: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28959: LD_VAR 0 1
28963: PPUSH
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_VAR 0 3
28973: PPUSH
28974: LD_INT 1
28976: PPUSH
28977: LD_INT 1
28979: PPUSH
28980: CALL_OW 483
// CenterOnXY ( x , y ) ;
28984: LD_VAR 0 2
28988: PPUSH
28989: LD_VAR 0 3
28993: PPUSH
28994: CALL_OW 84
// end ;
28998: LD_VAR 0 4
29002: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29003: LD_INT 0
29005: PPUSH
29006: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29007: LD_VAR 0 1
29011: NOT
29012: PUSH
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 488
29027: NOT
29028: OR
29029: PUSH
29030: LD_VAR 0 1
29034: PPUSH
29035: CALL_OW 266
29039: PUSH
29040: LD_INT 3
29042: NONEQUAL
29043: PUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 247
29053: PUSH
29054: LD_INT 1
29056: EQUAL
29057: NOT
29058: AND
29059: OR
29060: IFFALSE 29064
// exit ;
29062: GO 29213
// if GetType ( factory ) = unit_human then
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 247
29073: PUSH
29074: LD_INT 1
29076: EQUAL
29077: IFFALSE 29094
// factory := IsInUnit ( factory ) ;
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 310
29093: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 266
29103: PUSH
29104: LD_INT 3
29106: NONEQUAL
29107: IFFALSE 29111
// exit ;
29109: GO 29213
// if HexInfo ( x , y ) = factory then
29111: LD_VAR 0 2
29115: PPUSH
29116: LD_VAR 0 3
29120: PPUSH
29121: CALL_OW 428
29125: PUSH
29126: LD_VAR 0 1
29130: EQUAL
29131: IFFALSE 29158
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29133: LD_ADDR_EXP 105
29137: PUSH
29138: LD_EXP 105
29142: PPUSH
29143: LD_VAR 0 1
29147: PPUSH
29148: LD_INT 0
29150: PPUSH
29151: CALL_OW 1
29155: ST_TO_ADDR
29156: GO 29209
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29158: LD_ADDR_EXP 105
29162: PUSH
29163: LD_EXP 105
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 255
29182: PUSH
29183: LD_VAR 0 1
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: LD_VAR 0 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 1
29208: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29209: CALL 29218 0 0
// end ;
29213: LD_VAR 0 4
29217: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29218: LD_INT 0
29220: PPUSH
29221: PPUSH
29222: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29223: LD_STRING resetFactoryWaypoint();
29225: PPUSH
29226: CALL_OW 559
// if factoryWaypoints then
29230: LD_EXP 105
29234: IFFALSE 29360
// begin list := PrepareArray ( factoryWaypoints ) ;
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: LD_EXP 105
29245: PPUSH
29246: CALL 71540 0 1
29250: ST_TO_ADDR
// for i := 1 to list do
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: DOUBLE
29257: LD_INT 1
29259: DEC
29260: ST_TO_ADDR
29261: LD_VAR 0 3
29265: PUSH
29266: FOR_TO
29267: IFFALSE 29358
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29269: LD_STRING setFactoryWaypointXY(
29271: PUSH
29272: LD_VAR 0 3
29276: PUSH
29277: LD_VAR 0 2
29281: ARRAY
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: STR
29287: PUSH
29288: LD_STRING ,
29290: STR
29291: PUSH
29292: LD_VAR 0 3
29296: PUSH
29297: LD_VAR 0 2
29301: ARRAY
29302: PUSH
29303: LD_INT 2
29305: ARRAY
29306: STR
29307: PUSH
29308: LD_STRING ,
29310: STR
29311: PUSH
29312: LD_VAR 0 3
29316: PUSH
29317: LD_VAR 0 2
29321: ARRAY
29322: PUSH
29323: LD_INT 3
29325: ARRAY
29326: STR
29327: PUSH
29328: LD_STRING ,
29330: STR
29331: PUSH
29332: LD_VAR 0 3
29336: PUSH
29337: LD_VAR 0 2
29341: ARRAY
29342: PUSH
29343: LD_INT 4
29345: ARRAY
29346: STR
29347: PUSH
29348: LD_STRING )
29350: STR
29351: PPUSH
29352: CALL_OW 559
29356: GO 29266
29358: POP
29359: POP
// end ; end ;
29360: LD_VAR 0 1
29364: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29365: LD_INT 0
29367: PPUSH
// if HexInfo ( x , y ) = warehouse then
29368: LD_VAR 0 2
29372: PPUSH
29373: LD_VAR 0 3
29377: PPUSH
29378: CALL_OW 428
29382: PUSH
29383: LD_VAR 0 1
29387: EQUAL
29388: IFFALSE 29415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29390: LD_ADDR_EXP 106
29394: PUSH
29395: LD_EXP 106
29399: PPUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: LD_INT 0
29407: PPUSH
29408: CALL_OW 1
29412: ST_TO_ADDR
29413: GO 29466
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29415: LD_ADDR_EXP 106
29419: PUSH
29420: LD_EXP 106
29424: PPUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 255
29439: PUSH
29440: LD_VAR 0 1
29444: PUSH
29445: LD_VAR 0 2
29449: PUSH
29450: LD_VAR 0 3
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: PPUSH
29461: CALL_OW 1
29465: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29466: CALL 29475 0 0
// end ;
29470: LD_VAR 0 4
29474: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29475: LD_INT 0
29477: PPUSH
29478: PPUSH
29479: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29480: LD_STRING resetWarehouseGatheringPoints();
29482: PPUSH
29483: CALL_OW 559
// if warehouseGatheringPoints then
29487: LD_EXP 106
29491: IFFALSE 29617
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_EXP 106
29502: PPUSH
29503: CALL 71540 0 1
29507: ST_TO_ADDR
// for i := 1 to list do
29508: LD_ADDR_VAR 0 2
29512: PUSH
29513: DOUBLE
29514: LD_INT 1
29516: DEC
29517: ST_TO_ADDR
29518: LD_VAR 0 3
29522: PUSH
29523: FOR_TO
29524: IFFALSE 29615
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29526: LD_STRING setWarehouseGatheringPointXY(
29528: PUSH
29529: LD_VAR 0 3
29533: PUSH
29534: LD_VAR 0 2
29538: ARRAY
29539: PUSH
29540: LD_INT 1
29542: ARRAY
29543: STR
29544: PUSH
29545: LD_STRING ,
29547: STR
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_VAR 0 2
29558: ARRAY
29559: PUSH
29560: LD_INT 2
29562: ARRAY
29563: STR
29564: PUSH
29565: LD_STRING ,
29567: STR
29568: PUSH
29569: LD_VAR 0 3
29573: PUSH
29574: LD_VAR 0 2
29578: ARRAY
29579: PUSH
29580: LD_INT 3
29582: ARRAY
29583: STR
29584: PUSH
29585: LD_STRING ,
29587: STR
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_VAR 0 2
29598: ARRAY
29599: PUSH
29600: LD_INT 4
29602: ARRAY
29603: STR
29604: PUSH
29605: LD_STRING )
29607: STR
29608: PPUSH
29609: CALL_OW 559
29613: GO 29523
29615: POP
29616: POP
// end ; end ;
29617: LD_VAR 0 1
29621: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29622: LD_EXP 106
29626: IFFALSE 30311
29628: GO 29630
29630: DISABLE
29631: LD_INT 0
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
// begin enable ;
29642: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_EXP 106
29652: PPUSH
29653: CALL 71540 0 1
29657: ST_TO_ADDR
// if not list then
29658: LD_VAR 0 3
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 30311
// for i := 1 to list do
29667: LD_ADDR_VAR 0 1
29671: PUSH
29672: DOUBLE
29673: LD_INT 1
29675: DEC
29676: ST_TO_ADDR
29677: LD_VAR 0 3
29681: PUSH
29682: FOR_TO
29683: IFFALSE 30309
// begin depot := list [ i ] [ 2 ] ;
29685: LD_ADDR_VAR 0 8
29689: PUSH
29690: LD_VAR 0 3
29694: PUSH
29695: LD_VAR 0 1
29699: ARRAY
29700: PUSH
29701: LD_INT 2
29703: ARRAY
29704: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29705: LD_ADDR_VAR 0 5
29709: PUSH
29710: LD_VAR 0 3
29714: PUSH
29715: LD_VAR 0 1
29719: ARRAY
29720: PUSH
29721: LD_INT 1
29723: ARRAY
29724: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29725: LD_VAR 0 8
29729: PPUSH
29730: CALL_OW 301
29734: PUSH
29735: LD_VAR 0 5
29739: PUSH
29740: LD_VAR 0 8
29744: PPUSH
29745: CALL_OW 255
29749: NONEQUAL
29750: OR
29751: IFFALSE 29780
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29753: LD_ADDR_EXP 106
29757: PUSH
29758: LD_EXP 106
29762: PPUSH
29763: LD_VAR 0 8
29767: PPUSH
29768: LD_INT 0
29770: PPUSH
29771: CALL_OW 1
29775: ST_TO_ADDR
// exit ;
29776: POP
29777: POP
29778: GO 30311
// end ; x := list [ i ] [ 3 ] ;
29780: LD_ADDR_VAR 0 6
29784: PUSH
29785: LD_VAR 0 3
29789: PUSH
29790: LD_VAR 0 1
29794: ARRAY
29795: PUSH
29796: LD_INT 3
29798: ARRAY
29799: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29800: LD_ADDR_VAR 0 7
29804: PUSH
29805: LD_VAR 0 3
29809: PUSH
29810: LD_VAR 0 1
29814: ARRAY
29815: PUSH
29816: LD_INT 4
29818: ARRAY
29819: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29820: LD_ADDR_VAR 0 9
29824: PUSH
29825: LD_VAR 0 6
29829: PPUSH
29830: LD_VAR 0 7
29834: PPUSH
29835: LD_INT 16
29837: PPUSH
29838: CALL 70128 0 3
29842: ST_TO_ADDR
// if not cratesNearbyPoint then
29843: LD_VAR 0 9
29847: NOT
29848: IFFALSE 29854
// exit ;
29850: POP
29851: POP
29852: GO 30311
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29854: LD_ADDR_VAR 0 4
29858: PUSH
29859: LD_INT 22
29861: PUSH
29862: LD_VAR 0 5
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 3
29873: PUSH
29874: LD_INT 60
29876: PUSH
29877: EMPTY
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 91
29886: PUSH
29887: LD_VAR 0 8
29891: PUSH
29892: LD_INT 6
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 25
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 25
29915: PUSH
29916: LD_INT 16
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: PUSH
29939: LD_VAR 0 8
29943: PPUSH
29944: CALL_OW 313
29948: PPUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 60
29954: PUSH
29955: EMPTY
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 25
29977: PUSH
29978: LD_INT 16
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 72
29998: UNION
29999: ST_TO_ADDR
// if tmp then
30000: LD_VAR 0 4
30004: IFFALSE 30084
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30006: LD_ADDR_VAR 0 4
30010: PUSH
30011: LD_VAR 0 4
30015: PPUSH
30016: LD_INT 3
30018: PPUSH
30019: CALL 68097 0 2
30023: ST_TO_ADDR
// for j in tmp do
30024: LD_ADDR_VAR 0 2
30028: PUSH
30029: LD_VAR 0 4
30033: PUSH
30034: FOR_IN
30035: IFFALSE 30078
// begin if IsInUnit ( j ) then
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL_OW 310
30046: IFFALSE 30057
// ComExit ( j ) ;
30048: LD_VAR 0 2
30052: PPUSH
30053: CALL 68180 0 1
// AddComCollect ( j , x , y ) ;
30057: LD_VAR 0 2
30061: PPUSH
30062: LD_VAR 0 6
30066: PPUSH
30067: LD_VAR 0 7
30071: PPUSH
30072: CALL_OW 177
// end ;
30076: GO 30034
30078: POP
30079: POP
// exit ;
30080: POP
30081: POP
30082: GO 30311
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: LD_INT 22
30091: PUSH
30092: LD_VAR 0 5
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 91
30103: PUSH
30104: LD_VAR 0 8
30108: PUSH
30109: LD_INT 8
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 34
30122: PUSH
30123: LD_INT 12
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 34
30132: PUSH
30133: LD_INT 51
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 34
30142: PUSH
30143: LD_INT 32
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 34
30152: PUSH
30153: LD_INT 89
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: PPUSH
30172: CALL_OW 69
30176: ST_TO_ADDR
// if tmp then
30177: LD_VAR 0 4
30181: IFFALSE 30307
// begin for j in tmp do
30183: LD_ADDR_VAR 0 2
30187: PUSH
30188: LD_VAR 0 4
30192: PUSH
30193: FOR_IN
30194: IFFALSE 30305
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30196: LD_VAR 0 2
30200: PPUSH
30201: CALL_OW 262
30205: PUSH
30206: LD_INT 3
30208: EQUAL
30209: PUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: CALL_OW 261
30219: PUSH
30220: LD_INT 20
30222: GREATER
30223: OR
30224: PUSH
30225: LD_VAR 0 2
30229: PPUSH
30230: CALL_OW 314
30234: NOT
30235: AND
30236: PUSH
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 263
30246: PUSH
30247: LD_INT 1
30249: NONEQUAL
30250: PUSH
30251: LD_VAR 0 2
30255: PPUSH
30256: CALL_OW 311
30260: OR
30261: AND
30262: IFFALSE 30303
// begin ComCollect ( j , x , y ) ;
30264: LD_VAR 0 2
30268: PPUSH
30269: LD_VAR 0 6
30273: PPUSH
30274: LD_VAR 0 7
30278: PPUSH
30279: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30283: LD_VAR 0 2
30287: PPUSH
30288: LD_VAR 0 8
30292: PPUSH
30293: CALL_OW 172
// exit ;
30297: POP
30298: POP
30299: POP
30300: POP
30301: GO 30311
// end ;
30303: GO 30193
30305: POP
30306: POP
// end ; end ;
30307: GO 29682
30309: POP
30310: POP
// end ; end_of_file end_of_file
30311: PPOPN 9
30313: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
// if exist_mode then
30318: LD_VAR 0 2
30322: IFFALSE 30347
// unit := CreateCharacter ( prefix & ident ) else
30324: LD_ADDR_VAR 0 5
30328: PUSH
30329: LD_VAR 0 3
30333: PUSH
30334: LD_VAR 0 1
30338: STR
30339: PPUSH
30340: CALL_OW 34
30344: ST_TO_ADDR
30345: GO 30362
// unit := NewCharacter ( ident ) ;
30347: LD_ADDR_VAR 0 5
30351: PUSH
30352: LD_VAR 0 1
30356: PPUSH
30357: CALL_OW 25
30361: ST_TO_ADDR
// result := unit ;
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: LD_VAR 0 5
30371: ST_TO_ADDR
// end ;
30372: LD_VAR 0 4
30376: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30377: LD_INT 0
30379: PPUSH
30380: PPUSH
// if not side or not nation then
30381: LD_VAR 0 1
30385: NOT
30386: PUSH
30387: LD_VAR 0 2
30391: NOT
30392: OR
30393: IFFALSE 30397
// exit ;
30395: GO 31165
// case nation of nation_american :
30397: LD_VAR 0 2
30401: PUSH
30402: LD_INT 1
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30624
30410: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30411: LD_ADDR_VAR 0 4
30415: PUSH
30416: LD_INT 35
30418: PUSH
30419: LD_INT 45
30421: PUSH
30422: LD_INT 46
30424: PUSH
30425: LD_INT 47
30427: PUSH
30428: LD_INT 82
30430: PUSH
30431: LD_INT 83
30433: PUSH
30434: LD_INT 84
30436: PUSH
30437: LD_INT 85
30439: PUSH
30440: LD_INT 86
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 6
30451: PUSH
30452: LD_INT 15
30454: PUSH
30455: LD_INT 16
30457: PUSH
30458: LD_INT 7
30460: PUSH
30461: LD_INT 12
30463: PUSH
30464: LD_INT 13
30466: PUSH
30467: LD_INT 10
30469: PUSH
30470: LD_INT 14
30472: PUSH
30473: LD_INT 20
30475: PUSH
30476: LD_INT 21
30478: PUSH
30479: LD_INT 22
30481: PUSH
30482: LD_INT 25
30484: PUSH
30485: LD_INT 32
30487: PUSH
30488: LD_INT 27
30490: PUSH
30491: LD_INT 36
30493: PUSH
30494: LD_INT 69
30496: PUSH
30497: LD_INT 39
30499: PUSH
30500: LD_INT 34
30502: PUSH
30503: LD_INT 40
30505: PUSH
30506: LD_INT 48
30508: PUSH
30509: LD_INT 49
30511: PUSH
30512: LD_INT 50
30514: PUSH
30515: LD_INT 51
30517: PUSH
30518: LD_INT 52
30520: PUSH
30521: LD_INT 53
30523: PUSH
30524: LD_INT 54
30526: PUSH
30527: LD_INT 55
30529: PUSH
30530: LD_INT 56
30532: PUSH
30533: LD_INT 57
30535: PUSH
30536: LD_INT 58
30538: PUSH
30539: LD_INT 59
30541: PUSH
30542: LD_INT 60
30544: PUSH
30545: LD_INT 61
30547: PUSH
30548: LD_INT 62
30550: PUSH
30551: LD_INT 80
30553: PUSH
30554: LD_INT 82
30556: PUSH
30557: LD_INT 83
30559: PUSH
30560: LD_INT 84
30562: PUSH
30563: LD_INT 85
30565: PUSH
30566: LD_INT 86
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
30622: GO 31089
30624: LD_INT 2
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30858
30632: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30633: LD_ADDR_VAR 0 4
30637: PUSH
30638: LD_INT 35
30640: PUSH
30641: LD_INT 45
30643: PUSH
30644: LD_INT 46
30646: PUSH
30647: LD_INT 47
30649: PUSH
30650: LD_INT 82
30652: PUSH
30653: LD_INT 83
30655: PUSH
30656: LD_INT 84
30658: PUSH
30659: LD_INT 85
30661: PUSH
30662: LD_INT 87
30664: PUSH
30665: LD_INT 70
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 11
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 4
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: LD_INT 6
30685: PUSH
30686: LD_INT 15
30688: PUSH
30689: LD_INT 18
30691: PUSH
30692: LD_INT 7
30694: PUSH
30695: LD_INT 17
30697: PUSH
30698: LD_INT 8
30700: PUSH
30701: LD_INT 20
30703: PUSH
30704: LD_INT 21
30706: PUSH
30707: LD_INT 22
30709: PUSH
30710: LD_INT 72
30712: PUSH
30713: LD_INT 26
30715: PUSH
30716: LD_INT 69
30718: PUSH
30719: LD_INT 39
30721: PUSH
30722: LD_INT 40
30724: PUSH
30725: LD_INT 41
30727: PUSH
30728: LD_INT 42
30730: PUSH
30731: LD_INT 43
30733: PUSH
30734: LD_INT 48
30736: PUSH
30737: LD_INT 49
30739: PUSH
30740: LD_INT 50
30742: PUSH
30743: LD_INT 51
30745: PUSH
30746: LD_INT 52
30748: PUSH
30749: LD_INT 53
30751: PUSH
30752: LD_INT 54
30754: PUSH
30755: LD_INT 55
30757: PUSH
30758: LD_INT 56
30760: PUSH
30761: LD_INT 60
30763: PUSH
30764: LD_INT 61
30766: PUSH
30767: LD_INT 62
30769: PUSH
30770: LD_INT 66
30772: PUSH
30773: LD_INT 67
30775: PUSH
30776: LD_INT 68
30778: PUSH
30779: LD_INT 81
30781: PUSH
30782: LD_INT 82
30784: PUSH
30785: LD_INT 83
30787: PUSH
30788: LD_INT 84
30790: PUSH
30791: LD_INT 85
30793: PUSH
30794: LD_INT 87
30796: PUSH
30797: LD_INT 88
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31089
30858: LD_INT 3
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 31088
30866: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30867: LD_ADDR_VAR 0 4
30871: PUSH
30872: LD_INT 46
30874: PUSH
30875: LD_INT 47
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: LD_INT 82
30886: PUSH
30887: LD_INT 83
30889: PUSH
30890: LD_INT 84
30892: PUSH
30893: LD_INT 85
30895: PUSH
30896: LD_INT 86
30898: PUSH
30899: LD_INT 11
30901: PUSH
30902: LD_INT 9
30904: PUSH
30905: LD_INT 20
30907: PUSH
30908: LD_INT 19
30910: PUSH
30911: LD_INT 21
30913: PUSH
30914: LD_INT 24
30916: PUSH
30917: LD_INT 22
30919: PUSH
30920: LD_INT 25
30922: PUSH
30923: LD_INT 28
30925: PUSH
30926: LD_INT 29
30928: PUSH
30929: LD_INT 30
30931: PUSH
30932: LD_INT 31
30934: PUSH
30935: LD_INT 37
30937: PUSH
30938: LD_INT 38
30940: PUSH
30941: LD_INT 32
30943: PUSH
30944: LD_INT 27
30946: PUSH
30947: LD_INT 33
30949: PUSH
30950: LD_INT 69
30952: PUSH
30953: LD_INT 39
30955: PUSH
30956: LD_INT 34
30958: PUSH
30959: LD_INT 40
30961: PUSH
30962: LD_INT 71
30964: PUSH
30965: LD_INT 23
30967: PUSH
30968: LD_INT 44
30970: PUSH
30971: LD_INT 48
30973: PUSH
30974: LD_INT 49
30976: PUSH
30977: LD_INT 50
30979: PUSH
30980: LD_INT 51
30982: PUSH
30983: LD_INT 52
30985: PUSH
30986: LD_INT 53
30988: PUSH
30989: LD_INT 54
30991: PUSH
30992: LD_INT 55
30994: PUSH
30995: LD_INT 56
30997: PUSH
30998: LD_INT 57
31000: PUSH
31001: LD_INT 58
31003: PUSH
31004: LD_INT 59
31006: PUSH
31007: LD_INT 63
31009: PUSH
31010: LD_INT 64
31012: PUSH
31013: LD_INT 65
31015: PUSH
31016: LD_INT 82
31018: PUSH
31019: LD_INT 83
31021: PUSH
31022: LD_INT 84
31024: PUSH
31025: LD_INT 85
31027: PUSH
31028: LD_INT 86
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
31086: GO 31089
31088: POP
// if state > - 1 and state < 3 then
31089: LD_VAR 0 3
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: GREATER
31098: PUSH
31099: LD_VAR 0 3
31103: PUSH
31104: LD_INT 3
31106: LESS
31107: AND
31108: IFFALSE 31165
// for i in result do
31110: LD_ADDR_VAR 0 5
31114: PUSH
31115: LD_VAR 0 4
31119: PUSH
31120: FOR_IN
31121: IFFALSE 31163
// if GetTech ( i , side ) <> state then
31123: LD_VAR 0 5
31127: PPUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 321
31137: PUSH
31138: LD_VAR 0 3
31142: NONEQUAL
31143: IFFALSE 31161
// result := result diff i ;
31145: LD_ADDR_VAR 0 4
31149: PUSH
31150: LD_VAR 0 4
31154: PUSH
31155: LD_VAR 0 5
31159: DIFF
31160: ST_TO_ADDR
31161: GO 31120
31163: POP
31164: POP
// end ;
31165: LD_VAR 0 4
31169: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31170: LD_INT 0
31172: PPUSH
31173: PPUSH
31174: PPUSH
// result := true ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 1
31182: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31183: LD_ADDR_VAR 0 5
31187: PUSH
31188: LD_VAR 0 2
31192: PPUSH
31193: CALL_OW 480
31197: ST_TO_ADDR
// if not tmp then
31198: LD_VAR 0 5
31202: NOT
31203: IFFALSE 31207
// exit ;
31205: GO 31256
// for i in tmp do
31207: LD_ADDR_VAR 0 4
31211: PUSH
31212: LD_VAR 0 5
31216: PUSH
31217: FOR_IN
31218: IFFALSE 31254
// if GetTech ( i , side ) <> state_researched then
31220: LD_VAR 0 4
31224: PPUSH
31225: LD_VAR 0 1
31229: PPUSH
31230: CALL_OW 321
31234: PUSH
31235: LD_INT 2
31237: NONEQUAL
31238: IFFALSE 31252
// begin result := false ;
31240: LD_ADDR_VAR 0 3
31244: PUSH
31245: LD_INT 0
31247: ST_TO_ADDR
// exit ;
31248: POP
31249: POP
31250: GO 31256
// end ;
31252: GO 31217
31254: POP
31255: POP
// end ;
31256: LD_VAR 0 3
31260: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31261: LD_INT 0
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31276: LD_VAR 0 1
31280: NOT
31281: PUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 257
31291: PUSH
31292: LD_INT 9
31294: NONEQUAL
31295: OR
31296: IFFALSE 31300
// exit ;
31298: GO 31873
// side := GetSide ( unit ) ;
31300: LD_ADDR_VAR 0 9
31304: PUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: CALL_OW 255
31314: ST_TO_ADDR
// tech_space := tech_spacanom ;
31315: LD_ADDR_VAR 0 12
31319: PUSH
31320: LD_INT 29
31322: ST_TO_ADDR
// tech_time := tech_taurad ;
31323: LD_ADDR_VAR 0 13
31327: PUSH
31328: LD_INT 28
31330: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31331: LD_ADDR_VAR 0 11
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 310
31345: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31346: LD_VAR 0 11
31350: PPUSH
31351: CALL_OW 247
31355: PUSH
31356: LD_INT 2
31358: EQUAL
31359: IFFALSE 31363
// exit ;
31361: GO 31873
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31363: LD_ADDR_VAR 0 8
31367: PUSH
31368: LD_INT 81
31370: PUSH
31371: LD_VAR 0 9
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 69
31405: ST_TO_ADDR
// if not tmp then
31406: LD_VAR 0 8
31410: NOT
31411: IFFALSE 31415
// exit ;
31413: GO 31873
// if in_unit then
31415: LD_VAR 0 11
31419: IFFALSE 31443
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31421: LD_ADDR_VAR 0 10
31425: PUSH
31426: LD_VAR 0 8
31430: PPUSH
31431: LD_VAR 0 11
31435: PPUSH
31436: CALL_OW 74
31440: ST_TO_ADDR
31441: GO 31463
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31443: LD_ADDR_VAR 0 10
31447: PUSH
31448: LD_VAR 0 8
31452: PPUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 74
31462: ST_TO_ADDR
// if not enemy then
31463: LD_VAR 0 10
31467: NOT
31468: IFFALSE 31472
// exit ;
31470: GO 31873
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31472: LD_VAR 0 11
31476: PUSH
31477: LD_VAR 0 11
31481: PPUSH
31482: LD_VAR 0 10
31486: PPUSH
31487: CALL_OW 296
31491: PUSH
31492: LD_INT 13
31494: GREATER
31495: AND
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: LD_VAR 0 10
31506: PPUSH
31507: CALL_OW 296
31511: PUSH
31512: LD_INT 12
31514: GREATER
31515: OR
31516: IFFALSE 31520
// exit ;
31518: GO 31873
// missile := [ 1 ] ;
31520: LD_ADDR_VAR 0 14
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31531: LD_VAR 0 9
31535: PPUSH
31536: LD_VAR 0 12
31540: PPUSH
31541: CALL_OW 325
31545: IFFALSE 31574
// missile := Replace ( missile , missile + 1 , 2 ) ;
31547: LD_ADDR_VAR 0 14
31551: PUSH
31552: LD_VAR 0 14
31556: PPUSH
31557: LD_VAR 0 14
31561: PUSH
31562: LD_INT 1
31564: PLUS
31565: PPUSH
31566: LD_INT 2
31568: PPUSH
31569: CALL_OW 1
31573: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31574: LD_VAR 0 9
31578: PPUSH
31579: LD_VAR 0 13
31583: PPUSH
31584: CALL_OW 325
31588: PUSH
31589: LD_VAR 0 10
31593: PPUSH
31594: CALL_OW 255
31598: PPUSH
31599: LD_VAR 0 13
31603: PPUSH
31604: CALL_OW 325
31608: NOT
31609: AND
31610: IFFALSE 31639
// missile := Replace ( missile , missile + 1 , 3 ) ;
31612: LD_ADDR_VAR 0 14
31616: PUSH
31617: LD_VAR 0 14
31621: PPUSH
31622: LD_VAR 0 14
31626: PUSH
31627: LD_INT 1
31629: PLUS
31630: PPUSH
31631: LD_INT 3
31633: PPUSH
31634: CALL_OW 1
31638: ST_TO_ADDR
// if missile < 2 then
31639: LD_VAR 0 14
31643: PUSH
31644: LD_INT 2
31646: LESS
31647: IFFALSE 31651
// exit ;
31649: GO 31873
// x := GetX ( enemy ) ;
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: LD_VAR 0 10
31660: PPUSH
31661: CALL_OW 250
31665: ST_TO_ADDR
// y := GetY ( enemy ) ;
31666: LD_ADDR_VAR 0 5
31670: PUSH
31671: LD_VAR 0 10
31675: PPUSH
31676: CALL_OW 251
31680: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31681: LD_ADDR_VAR 0 6
31685: PUSH
31686: LD_VAR 0 4
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PPUSH
31695: LD_INT 1
31697: PPUSH
31698: CALL_OW 12
31702: PLUS
31703: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: LD_VAR 0 5
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PPUSH
31718: LD_INT 1
31720: PPUSH
31721: CALL_OW 12
31725: PLUS
31726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31727: LD_VAR 0 6
31731: PPUSH
31732: LD_VAR 0 7
31736: PPUSH
31737: CALL_OW 488
31741: NOT
31742: IFFALSE 31764
// begin _x := x ;
31744: LD_ADDR_VAR 0 6
31748: PUSH
31749: LD_VAR 0 4
31753: ST_TO_ADDR
// _y := y ;
31754: LD_ADDR_VAR 0 7
31758: PUSH
31759: LD_VAR 0 5
31763: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: PPUSH
31772: LD_VAR 0 14
31776: PPUSH
31777: CALL_OW 12
31781: ST_TO_ADDR
// case i of 1 :
31782: LD_VAR 0 3
31786: PUSH
31787: LD_INT 1
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31812
31795: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31796: LD_VAR 0 1
31800: PPUSH
31801: LD_VAR 0 10
31805: PPUSH
31806: CALL_OW 115
31810: GO 31873
31812: LD_INT 2
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31820
31818: GO 31842
31820: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31821: LD_VAR 0 1
31825: PPUSH
31826: LD_VAR 0 6
31830: PPUSH
31831: LD_VAR 0 7
31835: PPUSH
31836: CALL_OW 153
31840: GO 31873
31842: LD_INT 3
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31872
31850: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31851: LD_VAR 0 1
31855: PPUSH
31856: LD_VAR 0 6
31860: PPUSH
31861: LD_VAR 0 7
31865: PPUSH
31866: CALL_OW 154
31870: GO 31873
31872: POP
// end ;
31873: LD_VAR 0 2
31877: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31878: LD_INT 0
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
// if not unit or not building then
31886: LD_VAR 0 1
31890: NOT
31891: PUSH
31892: LD_VAR 0 2
31896: NOT
31897: OR
31898: IFFALSE 31902
// exit ;
31900: GO 32060
// x := GetX ( building ) ;
31902: LD_ADDR_VAR 0 5
31906: PUSH
31907: LD_VAR 0 2
31911: PPUSH
31912: CALL_OW 250
31916: ST_TO_ADDR
// y := GetY ( building ) ;
31917: LD_ADDR_VAR 0 6
31921: PUSH
31922: LD_VAR 0 2
31926: PPUSH
31927: CALL_OW 251
31931: ST_TO_ADDR
// for i = 0 to 5 do
31932: LD_ADDR_VAR 0 4
31936: PUSH
31937: DOUBLE
31938: LD_INT 0
31940: DEC
31941: ST_TO_ADDR
31942: LD_INT 5
31944: PUSH
31945: FOR_TO
31946: IFFALSE 32058
// begin _x := ShiftX ( x , i , 3 ) ;
31948: LD_ADDR_VAR 0 7
31952: PUSH
31953: LD_VAR 0 5
31957: PPUSH
31958: LD_VAR 0 4
31962: PPUSH
31963: LD_INT 3
31965: PPUSH
31966: CALL_OW 272
31970: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31971: LD_ADDR_VAR 0 8
31975: PUSH
31976: LD_VAR 0 6
31980: PPUSH
31981: LD_VAR 0 4
31985: PPUSH
31986: LD_INT 3
31988: PPUSH
31989: CALL_OW 273
31993: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31994: LD_VAR 0 7
31998: PPUSH
31999: LD_VAR 0 8
32003: PPUSH
32004: CALL_OW 488
32008: NOT
32009: IFFALSE 32013
// continue ;
32011: GO 31945
// if HexInfo ( _x , _y ) = 0 then
32013: LD_VAR 0 7
32017: PPUSH
32018: LD_VAR 0 8
32022: PPUSH
32023: CALL_OW 428
32027: PUSH
32028: LD_INT 0
32030: EQUAL
32031: IFFALSE 32056
// begin ComMoveXY ( unit , _x , _y ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: LD_VAR 0 7
32042: PPUSH
32043: LD_VAR 0 8
32047: PPUSH
32048: CALL_OW 111
// exit ;
32052: POP
32053: POP
32054: GO 32060
// end ; end ;
32056: GO 31945
32058: POP
32059: POP
// end ;
32060: LD_VAR 0 3
32064: RET
// export function ScanBase ( side , base_area ) ; begin
32065: LD_INT 0
32067: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32068: LD_ADDR_VAR 0 3
32072: PUSH
32073: LD_VAR 0 2
32077: PPUSH
32078: LD_INT 81
32080: PUSH
32081: LD_VAR 0 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PPUSH
32090: CALL_OW 70
32094: ST_TO_ADDR
// end ;
32095: LD_VAR 0 3
32099: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32100: LD_INT 0
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
// result := false ;
32106: LD_ADDR_VAR 0 2
32110: PUSH
32111: LD_INT 0
32113: ST_TO_ADDR
// side := GetSide ( unit ) ;
32114: LD_ADDR_VAR 0 3
32118: PUSH
32119: LD_VAR 0 1
32123: PPUSH
32124: CALL_OW 255
32128: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32129: LD_ADDR_VAR 0 4
32133: PUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL_OW 248
32143: ST_TO_ADDR
// case nat of 1 :
32144: LD_VAR 0 4
32148: PUSH
32149: LD_INT 1
32151: DOUBLE
32152: EQUAL
32153: IFTRUE 32157
32155: GO 32168
32157: POP
// tech := tech_lassight ; 2 :
32158: LD_ADDR_VAR 0 5
32162: PUSH
32163: LD_INT 12
32165: ST_TO_ADDR
32166: GO 32207
32168: LD_INT 2
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32187
32176: POP
// tech := tech_mortar ; 3 :
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_INT 41
32184: ST_TO_ADDR
32185: GO 32207
32187: LD_INT 3
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32206
32195: POP
// tech := tech_bazooka ; end ;
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_INT 44
32203: ST_TO_ADDR
32204: GO 32207
32206: POP
// if Researched ( side , tech ) then
32207: LD_VAR 0 3
32211: PPUSH
32212: LD_VAR 0 5
32216: PPUSH
32217: CALL_OW 325
32221: IFFALSE 32248
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_INT 5
32230: PUSH
32231: LD_INT 8
32233: PUSH
32234: LD_INT 9
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: PUSH
32242: LD_VAR 0 4
32246: ARRAY
32247: ST_TO_ADDR
// end ;
32248: LD_VAR 0 2
32252: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
32257: PPUSH
// if not mines then
32258: LD_VAR 0 2
32262: NOT
32263: IFFALSE 32267
// exit ;
32265: GO 32411
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32267: LD_ADDR_VAR 0 5
32271: PUSH
32272: LD_INT 81
32274: PUSH
32275: LD_VAR 0 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 3
32286: PUSH
32287: LD_INT 21
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 69
32309: ST_TO_ADDR
// for i in mines do
32310: LD_ADDR_VAR 0 4
32314: PUSH
32315: LD_VAR 0 2
32319: PUSH
32320: FOR_IN
32321: IFFALSE 32409
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32323: LD_VAR 0 4
32327: PUSH
32328: LD_INT 1
32330: ARRAY
32331: PPUSH
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 2
32339: ARRAY
32340: PPUSH
32341: CALL_OW 458
32345: NOT
32346: IFFALSE 32350
// continue ;
32348: GO 32320
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32350: LD_VAR 0 4
32354: PUSH
32355: LD_INT 1
32357: ARRAY
32358: PPUSH
32359: LD_VAR 0 4
32363: PUSH
32364: LD_INT 2
32366: ARRAY
32367: PPUSH
32368: CALL_OW 428
32372: PUSH
32373: LD_VAR 0 5
32377: IN
32378: IFFALSE 32407
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32380: LD_VAR 0 4
32384: PUSH
32385: LD_INT 1
32387: ARRAY
32388: PPUSH
32389: LD_VAR 0 4
32393: PUSH
32394: LD_INT 2
32396: ARRAY
32397: PPUSH
32398: LD_VAR 0 1
32402: PPUSH
32403: CALL_OW 456
// end ;
32407: GO 32320
32409: POP
32410: POP
// end ;
32411: LD_VAR 0 3
32415: RET
// export function Count ( array ) ; var i ; begin
32416: LD_INT 0
32418: PPUSH
32419: PPUSH
// result := 0 ;
32420: LD_ADDR_VAR 0 2
32424: PUSH
32425: LD_INT 0
32427: ST_TO_ADDR
// for i in array do
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_VAR 0 1
32437: PUSH
32438: FOR_IN
32439: IFFALSE 32463
// if i then
32441: LD_VAR 0 3
32445: IFFALSE 32461
// result := result + 1 ;
32447: LD_ADDR_VAR 0 2
32451: PUSH
32452: LD_VAR 0 2
32456: PUSH
32457: LD_INT 1
32459: PLUS
32460: ST_TO_ADDR
32461: GO 32438
32463: POP
32464: POP
// end ;
32465: LD_VAR 0 2
32469: RET
// export function IsEmpty ( building ) ; begin
32470: LD_INT 0
32472: PPUSH
// if not building then
32473: LD_VAR 0 1
32477: NOT
32478: IFFALSE 32482
// exit ;
32480: GO 32525
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32482: LD_ADDR_VAR 0 2
32486: PUSH
32487: LD_VAR 0 1
32491: PUSH
32492: LD_INT 22
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 255
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 58
32511: PUSH
32512: EMPTY
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PPUSH
32519: CALL_OW 69
32523: IN
32524: ST_TO_ADDR
// end ;
32525: LD_VAR 0 2
32529: RET
// export function IsNotFull ( building ) ; var places ; begin
32530: LD_INT 0
32532: PPUSH
32533: PPUSH
// if not building then
32534: LD_VAR 0 1
32538: NOT
32539: IFFALSE 32543
// exit ;
32541: GO 32714
// result := false ;
32543: LD_ADDR_VAR 0 2
32547: PUSH
32548: LD_INT 0
32550: ST_TO_ADDR
// places := 0 ;
32551: LD_ADDR_VAR 0 3
32555: PUSH
32556: LD_INT 0
32558: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 266
32568: PUSH
32569: LD_INT 0
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32631
32575: LD_INT 1
32577: DOUBLE
32578: EQUAL
32579: IFTRUE 32631
32581: LD_INT 6
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32631
32587: LD_INT 7
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32631
32593: LD_INT 8
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32631
32599: LD_INT 4
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32631
32605: LD_INT 5
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32631
32611: LD_INT 2
32613: DOUBLE
32614: EQUAL
32615: IFTRUE 32631
32617: LD_INT 3
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32631
32623: LD_INT 35
32625: DOUBLE
32626: EQUAL
32627: IFTRUE 32631
32629: GO 32642
32631: POP
// places := 6 ; b_bunker , b_breastwork :
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_INT 6
32639: ST_TO_ADDR
32640: GO 32687
32642: LD_INT 32
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32656
32648: LD_INT 31
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32667
32656: POP
// places := 1 ; b_control_tower :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 1
32664: ST_TO_ADDR
32665: GO 32687
32667: LD_INT 36
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32686
32675: POP
// places := 3 ; end ;
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 3
32683: ST_TO_ADDR
32684: GO 32687
32686: POP
// if places then
32687: LD_VAR 0 3
32691: IFFALSE 32714
// result := UnitsInside ( building ) < places ;
32693: LD_ADDR_VAR 0 2
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 313
32707: PUSH
32708: LD_VAR 0 3
32712: LESS
32713: ST_TO_ADDR
// end ;
32714: LD_VAR 0 2
32718: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
// tmp := [ ] ;
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: EMPTY
32731: ST_TO_ADDR
// list := [ ] ;
32732: LD_ADDR_VAR 0 5
32736: PUSH
32737: EMPTY
32738: ST_TO_ADDR
// for i = 16 to 25 do
32739: LD_ADDR_VAR 0 4
32743: PUSH
32744: DOUBLE
32745: LD_INT 16
32747: DEC
32748: ST_TO_ADDR
32749: LD_INT 25
32751: PUSH
32752: FOR_TO
32753: IFFALSE 32826
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_VAR 0 3
32764: PUSH
32765: LD_INT 22
32767: PUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: CALL_OW 255
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 91
32784: PUSH
32785: LD_VAR 0 1
32789: PUSH
32790: LD_INT 6
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 30
32800: PUSH
32801: LD_VAR 0 4
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: PPUSH
32818: CALL_OW 69
32822: ADD
32823: ST_TO_ADDR
32824: GO 32752
32826: POP
32827: POP
// for i = 1 to tmp do
32828: LD_ADDR_VAR 0 4
32832: PUSH
32833: DOUBLE
32834: LD_INT 1
32836: DEC
32837: ST_TO_ADDR
32838: LD_VAR 0 3
32842: PUSH
32843: FOR_TO
32844: IFFALSE 32932
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32846: LD_ADDR_VAR 0 5
32850: PUSH
32851: LD_VAR 0 5
32855: PUSH
32856: LD_VAR 0 3
32860: PUSH
32861: LD_VAR 0 4
32865: ARRAY
32866: PPUSH
32867: CALL_OW 266
32871: PUSH
32872: LD_VAR 0 3
32876: PUSH
32877: LD_VAR 0 4
32881: ARRAY
32882: PPUSH
32883: CALL_OW 250
32887: PUSH
32888: LD_VAR 0 3
32892: PUSH
32893: LD_VAR 0 4
32897: ARRAY
32898: PPUSH
32899: CALL_OW 251
32903: PUSH
32904: LD_VAR 0 3
32908: PUSH
32909: LD_VAR 0 4
32913: ARRAY
32914: PPUSH
32915: CALL_OW 254
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: PUSH
32926: EMPTY
32927: LIST
32928: ADD
32929: ST_TO_ADDR
32930: GO 32843
32932: POP
32933: POP
// result := list ;
32934: LD_ADDR_VAR 0 2
32938: PUSH
32939: LD_VAR 0 5
32943: ST_TO_ADDR
// end ;
32944: LD_VAR 0 2
32948: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32949: LD_INT 0
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
// if not factory then
32958: LD_VAR 0 1
32962: NOT
32963: IFFALSE 32967
// exit ;
32965: GO 33560
// if control = control_apeman then
32967: LD_VAR 0 4
32971: PUSH
32972: LD_INT 5
32974: EQUAL
32975: IFFALSE 33084
// begin tmp := UnitsInside ( factory ) ;
32977: LD_ADDR_VAR 0 8
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: CALL_OW 313
32991: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32992: LD_VAR 0 8
32996: PPUSH
32997: LD_INT 25
32999: PUSH
33000: LD_INT 12
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PPUSH
33007: CALL_OW 72
33011: NOT
33012: IFFALSE 33022
// control := control_manual ;
33014: LD_ADDR_VAR 0 4
33018: PUSH
33019: LD_INT 1
33021: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33022: LD_ADDR_VAR 0 8
33026: PUSH
33027: LD_VAR 0 1
33031: PPUSH
33032: CALL 32719 0 1
33036: ST_TO_ADDR
// if tmp then
33037: LD_VAR 0 8
33041: IFFALSE 33084
// begin for i in tmp do
33043: LD_ADDR_VAR 0 7
33047: PUSH
33048: LD_VAR 0 8
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33082
// if i [ 1 ] = b_ext_radio then
33056: LD_VAR 0 7
33060: PUSH
33061: LD_INT 1
33063: ARRAY
33064: PUSH
33065: LD_INT 22
33067: EQUAL
33068: IFFALSE 33080
// begin control := control_remote ;
33070: LD_ADDR_VAR 0 4
33074: PUSH
33075: LD_INT 2
33077: ST_TO_ADDR
// break ;
33078: GO 33082
// end ;
33080: GO 33053
33082: POP
33083: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33084: LD_VAR 0 1
33088: PPUSH
33089: LD_VAR 0 2
33093: PPUSH
33094: LD_VAR 0 3
33098: PPUSH
33099: LD_VAR 0 4
33103: PPUSH
33104: LD_VAR 0 5
33108: PPUSH
33109: CALL_OW 448
33113: IFFALSE 33148
// begin result := [ chassis , engine , control , weapon ] ;
33115: LD_ADDR_VAR 0 6
33119: PUSH
33120: LD_VAR 0 2
33124: PUSH
33125: LD_VAR 0 3
33129: PUSH
33130: LD_VAR 0 4
33134: PUSH
33135: LD_VAR 0 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// exit ;
33146: GO 33560
// end ; _chassis := AvailableChassisList ( factory ) ;
33148: LD_ADDR_VAR 0 9
33152: PUSH
33153: LD_VAR 0 1
33157: PPUSH
33158: CALL_OW 475
33162: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33163: LD_ADDR_VAR 0 11
33167: PUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 476
33177: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33178: LD_ADDR_VAR 0 12
33182: PUSH
33183: LD_VAR 0 1
33187: PPUSH
33188: CALL_OW 477
33192: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33193: LD_ADDR_VAR 0 10
33197: PUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL_OW 478
33207: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33208: LD_VAR 0 9
33212: NOT
33213: PUSH
33214: LD_VAR 0 11
33218: NOT
33219: OR
33220: PUSH
33221: LD_VAR 0 12
33225: NOT
33226: OR
33227: PUSH
33228: LD_VAR 0 10
33232: NOT
33233: OR
33234: IFFALSE 33269
// begin result := [ chassis , engine , control , weapon ] ;
33236: LD_ADDR_VAR 0 6
33240: PUSH
33241: LD_VAR 0 2
33245: PUSH
33246: LD_VAR 0 3
33250: PUSH
33251: LD_VAR 0 4
33255: PUSH
33256: LD_VAR 0 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: ST_TO_ADDR
// exit ;
33267: GO 33560
// end ; if not chassis in _chassis then
33269: LD_VAR 0 2
33273: PUSH
33274: LD_VAR 0 9
33278: IN
33279: NOT
33280: IFFALSE 33306
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33282: LD_ADDR_VAR 0 2
33286: PUSH
33287: LD_VAR 0 9
33291: PUSH
33292: LD_INT 1
33294: PPUSH
33295: LD_VAR 0 9
33299: PPUSH
33300: CALL_OW 12
33304: ARRAY
33305: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33306: LD_VAR 0 2
33310: PPUSH
33311: LD_VAR 0 3
33315: PPUSH
33316: CALL 33565 0 2
33320: NOT
33321: IFFALSE 33380
// repeat engine := _engine [ 1 ] ;
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_VAR 0 11
33332: PUSH
33333: LD_INT 1
33335: ARRAY
33336: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33337: LD_ADDR_VAR 0 11
33341: PUSH
33342: LD_VAR 0 11
33346: PPUSH
33347: LD_INT 1
33349: PPUSH
33350: CALL_OW 3
33354: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33355: LD_VAR 0 2
33359: PPUSH
33360: LD_VAR 0 3
33364: PPUSH
33365: CALL 33565 0 2
33369: PUSH
33370: LD_VAR 0 11
33374: PUSH
33375: EMPTY
33376: EQUAL
33377: OR
33378: IFFALSE 33323
// if not control in _control then
33380: LD_VAR 0 4
33384: PUSH
33385: LD_VAR 0 12
33389: IN
33390: NOT
33391: IFFALSE 33417
// control := _control [ rand ( 1 , _control ) ] ;
33393: LD_ADDR_VAR 0 4
33397: PUSH
33398: LD_VAR 0 12
33402: PUSH
33403: LD_INT 1
33405: PPUSH
33406: LD_VAR 0 12
33410: PPUSH
33411: CALL_OW 12
33415: ARRAY
33416: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33417: LD_VAR 0 2
33421: PPUSH
33422: LD_VAR 0 5
33426: PPUSH
33427: CALL 33785 0 2
33431: NOT
33432: IFFALSE 33491
// repeat weapon := _weapon [ 1 ] ;
33434: LD_ADDR_VAR 0 5
33438: PUSH
33439: LD_VAR 0 10
33443: PUSH
33444: LD_INT 1
33446: ARRAY
33447: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33448: LD_ADDR_VAR 0 10
33452: PUSH
33453: LD_VAR 0 10
33457: PPUSH
33458: LD_INT 1
33460: PPUSH
33461: CALL_OW 3
33465: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33466: LD_VAR 0 2
33470: PPUSH
33471: LD_VAR 0 5
33475: PPUSH
33476: CALL 33785 0 2
33480: PUSH
33481: LD_VAR 0 10
33485: PUSH
33486: EMPTY
33487: EQUAL
33488: OR
33489: IFFALSE 33434
// result := [ ] ;
33491: LD_ADDR_VAR 0 6
33495: PUSH
33496: EMPTY
33497: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33498: LD_VAR 0 1
33502: PPUSH
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: LD_VAR 0 4
33517: PPUSH
33518: LD_VAR 0 5
33522: PPUSH
33523: CALL_OW 448
33527: IFFALSE 33560
// result := [ chassis , engine , control , weapon ] ;
33529: LD_ADDR_VAR 0 6
33533: PUSH
33534: LD_VAR 0 2
33538: PUSH
33539: LD_VAR 0 3
33543: PUSH
33544: LD_VAR 0 4
33548: PUSH
33549: LD_VAR 0 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
// end ;
33560: LD_VAR 0 6
33564: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33565: LD_INT 0
33567: PPUSH
// if not chassis or not engine then
33568: LD_VAR 0 1
33572: NOT
33573: PUSH
33574: LD_VAR 0 2
33578: NOT
33579: OR
33580: IFFALSE 33584
// exit ;
33582: GO 33780
// case engine of engine_solar :
33584: LD_VAR 0 2
33588: PUSH
33589: LD_INT 2
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33635
33597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: LD_INT 11
33605: PUSH
33606: LD_INT 12
33608: PUSH
33609: LD_INT 13
33611: PUSH
33612: LD_INT 14
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 33764
33635: LD_INT 1
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33705
33643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 11
33651: PUSH
33652: LD_INT 12
33654: PUSH
33655: LD_INT 13
33657: PUSH
33658: LD_INT 14
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: LD_INT 2
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: LD_INT 4
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: LD_INT 21
33678: PUSH
33679: LD_INT 23
33681: PUSH
33682: LD_INT 22
33684: PUSH
33685: LD_INT 24
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 33764
33705: LD_INT 3
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33763
33713: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 13
33721: PUSH
33722: LD_INT 14
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: LD_INT 5
33736: PUSH
33737: LD_INT 21
33739: PUSH
33740: LD_INT 22
33742: PUSH
33743: LD_INT 23
33745: PUSH
33746: LD_INT 24
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 33764
33763: POP
// result := ( chassis in result ) ;
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_VAR 0 1
33773: PUSH
33774: LD_VAR 0 3
33778: IN
33779: ST_TO_ADDR
// end ;
33780: LD_VAR 0 3
33784: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33785: LD_INT 0
33787: PPUSH
// if not chassis or not weapon then
33788: LD_VAR 0 1
33792: NOT
33793: PUSH
33794: LD_VAR 0 2
33798: NOT
33799: OR
33800: IFFALSE 33804
// exit ;
33802: GO 34864
// case weapon of us_machine_gun :
33804: LD_VAR 0 2
33808: PUSH
33809: LD_INT 2
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 33847
33817: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33818: LD_ADDR_VAR 0 3
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 34848
33847: LD_INT 3
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33885
33855: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 4
33872: PUSH
33873: LD_INT 5
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: ST_TO_ADDR
33883: GO 34848
33885: LD_INT 11
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33893
33891: GO 33923
33893: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33894: LD_ADDR_VAR 0 3
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 3
33907: PUSH
33908: LD_INT 4
33910: PUSH
33911: LD_INT 5
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: ST_TO_ADDR
33921: GO 34848
33923: LD_INT 4
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33957
33931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 5
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
33955: GO 34848
33957: LD_INT 5
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 33965
33963: GO 33991
33965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: LD_INT 5
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
33989: GO 34848
33991: LD_INT 9
33993: DOUBLE
33994: EQUAL
33995: IFTRUE 33999
33997: GO 34025
33999: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 4
34013: PUSH
34014: LD_INT 5
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
34023: GO 34848
34025: LD_INT 7
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34033
34031: GO 34059
34033: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 4
34047: PUSH
34048: LD_INT 5
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34848
34059: LD_INT 12
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34093
34067: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: LD_INT 4
34081: PUSH
34082: LD_INT 5
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
34091: GO 34848
34093: LD_INT 13
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34127
34101: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: LD_INT 5
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: ST_TO_ADDR
34125: GO 34848
34127: LD_INT 14
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34135
34133: GO 34153
34135: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34136: LD_ADDR_VAR 0 3
34140: PUSH
34141: LD_INT 4
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: ST_TO_ADDR
34151: GO 34848
34153: LD_INT 6
34155: DOUBLE
34156: EQUAL
34157: IFTRUE 34161
34159: GO 34179
34161: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34162: LD_ADDR_VAR 0 3
34166: PUSH
34167: LD_INT 4
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: ST_TO_ADDR
34177: GO 34848
34179: LD_INT 10
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34205
34187: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: LD_INT 5
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: ST_TO_ADDR
34203: GO 34848
34205: LD_INT 22
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34239
34213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_INT 11
34221: PUSH
34222: LD_INT 12
34224: PUSH
34225: LD_INT 13
34227: PUSH
34228: LD_INT 14
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
34237: GO 34848
34239: LD_INT 23
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34247
34245: GO 34273
34247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_INT 11
34255: PUSH
34256: LD_INT 12
34258: PUSH
34259: LD_INT 13
34261: PUSH
34262: LD_INT 14
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: ST_TO_ADDR
34271: GO 34848
34273: LD_INT 24
34275: DOUBLE
34276: EQUAL
34277: IFTRUE 34281
34279: GO 34307
34281: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34282: LD_ADDR_VAR 0 3
34286: PUSH
34287: LD_INT 11
34289: PUSH
34290: LD_INT 12
34292: PUSH
34293: LD_INT 13
34295: PUSH
34296: LD_INT 14
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
34305: GO 34848
34307: LD_INT 30
34309: DOUBLE
34310: EQUAL
34311: IFTRUE 34315
34313: GO 34341
34315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34316: LD_ADDR_VAR 0 3
34320: PUSH
34321: LD_INT 11
34323: PUSH
34324: LD_INT 12
34326: PUSH
34327: LD_INT 13
34329: PUSH
34330: LD_INT 14
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: ST_TO_ADDR
34339: GO 34848
34341: LD_INT 25
34343: DOUBLE
34344: EQUAL
34345: IFTRUE 34349
34347: GO 34367
34349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34350: LD_ADDR_VAR 0 3
34354: PUSH
34355: LD_INT 13
34357: PUSH
34358: LD_INT 14
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: ST_TO_ADDR
34365: GO 34848
34367: LD_INT 27
34369: DOUBLE
34370: EQUAL
34371: IFTRUE 34375
34373: GO 34393
34375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: LD_INT 13
34383: PUSH
34384: LD_INT 14
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: ST_TO_ADDR
34391: GO 34848
34393: LD_INT 92
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34427
34401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_INT 11
34409: PUSH
34410: LD_INT 12
34412: PUSH
34413: LD_INT 13
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
34425: GO 34848
34427: LD_INT 28
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34435
34433: GO 34453
34435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_INT 13
34443: PUSH
34444: LD_INT 14
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: ST_TO_ADDR
34451: GO 34848
34453: LD_INT 29
34455: DOUBLE
34456: EQUAL
34457: IFTRUE 34461
34459: GO 34479
34461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34462: LD_ADDR_VAR 0 3
34466: PUSH
34467: LD_INT 13
34469: PUSH
34470: LD_INT 14
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: ST_TO_ADDR
34477: GO 34848
34479: LD_INT 31
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34487
34485: GO 34505
34487: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_INT 13
34495: PUSH
34496: LD_INT 14
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: ST_TO_ADDR
34503: GO 34848
34505: LD_INT 26
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34531
34513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 13
34521: PUSH
34522: LD_INT 14
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: ST_TO_ADDR
34529: GO 34848
34531: LD_INT 42
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34565
34539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_INT 21
34547: PUSH
34548: LD_INT 22
34550: PUSH
34551: LD_INT 23
34553: PUSH
34554: LD_INT 24
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
34563: GO 34848
34565: LD_INT 43
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34573
34571: GO 34599
34573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_INT 21
34581: PUSH
34582: LD_INT 22
34584: PUSH
34585: LD_INT 23
34587: PUSH
34588: LD_INT 24
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
34597: GO 34848
34599: LD_INT 44
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34607
34605: GO 34633
34607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34608: LD_ADDR_VAR 0 3
34612: PUSH
34613: LD_INT 21
34615: PUSH
34616: LD_INT 22
34618: PUSH
34619: LD_INT 23
34621: PUSH
34622: LD_INT 24
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
34631: GO 34848
34633: LD_INT 45
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34667
34641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_INT 21
34649: PUSH
34650: LD_INT 22
34652: PUSH
34653: LD_INT 23
34655: PUSH
34656: LD_INT 24
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
34665: GO 34848
34667: LD_INT 49
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34701
34675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_INT 21
34683: PUSH
34684: LD_INT 22
34686: PUSH
34687: LD_INT 23
34689: PUSH
34690: LD_INT 24
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
34699: GO 34848
34701: LD_INT 51
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34709
34707: GO 34735
34709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 21
34717: PUSH
34718: LD_INT 22
34720: PUSH
34721: LD_INT 23
34723: PUSH
34724: LD_INT 24
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
34733: GO 34848
34735: LD_INT 52
34737: DOUBLE
34738: EQUAL
34739: IFTRUE 34743
34741: GO 34769
34743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: LD_INT 21
34751: PUSH
34752: LD_INT 22
34754: PUSH
34755: LD_INT 23
34757: PUSH
34758: LD_INT 24
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: ST_TO_ADDR
34767: GO 34848
34769: LD_INT 53
34771: DOUBLE
34772: EQUAL
34773: IFTRUE 34777
34775: GO 34795
34777: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_INT 23
34785: PUSH
34786: LD_INT 24
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: ST_TO_ADDR
34793: GO 34848
34795: LD_INT 46
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34821
34803: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 23
34811: PUSH
34812: LD_INT 24
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 34848
34821: LD_INT 47
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34847
34829: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 23
34837: PUSH
34838: LD_INT 24
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: ST_TO_ADDR
34845: GO 34848
34847: POP
// result := ( chassis in result ) ;
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_VAR 0 1
34857: PUSH
34858: LD_VAR 0 3
34862: IN
34863: ST_TO_ADDR
// end ;
34864: LD_VAR 0 3
34868: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
// result := array ;
34878: LD_ADDR_VAR 0 5
34882: PUSH
34883: LD_VAR 0 1
34887: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34888: LD_VAR 0 1
34892: NOT
34893: PUSH
34894: LD_VAR 0 2
34898: NOT
34899: OR
34900: PUSH
34901: LD_VAR 0 3
34905: NOT
34906: OR
34907: PUSH
34908: LD_VAR 0 2
34912: PUSH
34913: LD_VAR 0 1
34917: GREATER
34918: OR
34919: PUSH
34920: LD_VAR 0 3
34924: PUSH
34925: LD_VAR 0 1
34929: GREATER
34930: OR
34931: IFFALSE 34935
// exit ;
34933: GO 35231
// if direction then
34935: LD_VAR 0 4
34939: IFFALSE 35003
// begin d := 1 ;
34941: LD_ADDR_VAR 0 9
34945: PUSH
34946: LD_INT 1
34948: ST_TO_ADDR
// if i_from > i_to then
34949: LD_VAR 0 2
34953: PUSH
34954: LD_VAR 0 3
34958: GREATER
34959: IFFALSE 34985
// length := ( array - i_from ) + i_to else
34961: LD_ADDR_VAR 0 11
34965: PUSH
34966: LD_VAR 0 1
34970: PUSH
34971: LD_VAR 0 2
34975: MINUS
34976: PUSH
34977: LD_VAR 0 3
34981: PLUS
34982: ST_TO_ADDR
34983: GO 35001
// length := i_to - i_from ;
34985: LD_ADDR_VAR 0 11
34989: PUSH
34990: LD_VAR 0 3
34994: PUSH
34995: LD_VAR 0 2
34999: MINUS
35000: ST_TO_ADDR
// end else
35001: GO 35064
// begin d := - 1 ;
35003: LD_ADDR_VAR 0 9
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: ST_TO_ADDR
// if i_from > i_to then
35012: LD_VAR 0 2
35016: PUSH
35017: LD_VAR 0 3
35021: GREATER
35022: IFFALSE 35042
// length := i_from - i_to else
35024: LD_ADDR_VAR 0 11
35028: PUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_VAR 0 3
35038: MINUS
35039: ST_TO_ADDR
35040: GO 35064
// length := ( array - i_to ) + i_from ;
35042: LD_ADDR_VAR 0 11
35046: PUSH
35047: LD_VAR 0 1
35051: PUSH
35052: LD_VAR 0 3
35056: MINUS
35057: PUSH
35058: LD_VAR 0 2
35062: PLUS
35063: ST_TO_ADDR
// end ; if not length then
35064: LD_VAR 0 11
35068: NOT
35069: IFFALSE 35073
// exit ;
35071: GO 35231
// tmp := array ;
35073: LD_ADDR_VAR 0 10
35077: PUSH
35078: LD_VAR 0 1
35082: ST_TO_ADDR
// for i = 1 to length do
35083: LD_ADDR_VAR 0 6
35087: PUSH
35088: DOUBLE
35089: LD_INT 1
35091: DEC
35092: ST_TO_ADDR
35093: LD_VAR 0 11
35097: PUSH
35098: FOR_TO
35099: IFFALSE 35219
// begin for j = 1 to array do
35101: LD_ADDR_VAR 0 7
35105: PUSH
35106: DOUBLE
35107: LD_INT 1
35109: DEC
35110: ST_TO_ADDR
35111: LD_VAR 0 1
35115: PUSH
35116: FOR_TO
35117: IFFALSE 35205
// begin k := j + d ;
35119: LD_ADDR_VAR 0 8
35123: PUSH
35124: LD_VAR 0 7
35128: PUSH
35129: LD_VAR 0 9
35133: PLUS
35134: ST_TO_ADDR
// if k > array then
35135: LD_VAR 0 8
35139: PUSH
35140: LD_VAR 0 1
35144: GREATER
35145: IFFALSE 35155
// k := 1 ;
35147: LD_ADDR_VAR 0 8
35151: PUSH
35152: LD_INT 1
35154: ST_TO_ADDR
// if not k then
35155: LD_VAR 0 8
35159: NOT
35160: IFFALSE 35172
// k := array ;
35162: LD_ADDR_VAR 0 8
35166: PUSH
35167: LD_VAR 0 1
35171: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35172: LD_ADDR_VAR 0 10
35176: PUSH
35177: LD_VAR 0 10
35181: PPUSH
35182: LD_VAR 0 8
35186: PPUSH
35187: LD_VAR 0 1
35191: PUSH
35192: LD_VAR 0 7
35196: ARRAY
35197: PPUSH
35198: CALL_OW 1
35202: ST_TO_ADDR
// end ;
35203: GO 35116
35205: POP
35206: POP
// array := tmp ;
35207: LD_ADDR_VAR 0 1
35211: PUSH
35212: LD_VAR 0 10
35216: ST_TO_ADDR
// end ;
35217: GO 35098
35219: POP
35220: POP
// result := array ;
35221: LD_ADDR_VAR 0 5
35225: PUSH
35226: LD_VAR 0 1
35230: ST_TO_ADDR
// end ;
35231: LD_VAR 0 5
35235: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35236: LD_INT 0
35238: PPUSH
35239: PPUSH
// result := 0 ;
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_INT 0
35247: ST_TO_ADDR
// if not array or not value in array then
35248: LD_VAR 0 1
35252: NOT
35253: PUSH
35254: LD_VAR 0 2
35258: PUSH
35259: LD_VAR 0 1
35263: IN
35264: NOT
35265: OR
35266: IFFALSE 35270
// exit ;
35268: GO 35324
// for i = 1 to array do
35270: LD_ADDR_VAR 0 4
35274: PUSH
35275: DOUBLE
35276: LD_INT 1
35278: DEC
35279: ST_TO_ADDR
35280: LD_VAR 0 1
35284: PUSH
35285: FOR_TO
35286: IFFALSE 35322
// if value = array [ i ] then
35288: LD_VAR 0 2
35292: PUSH
35293: LD_VAR 0 1
35297: PUSH
35298: LD_VAR 0 4
35302: ARRAY
35303: EQUAL
35304: IFFALSE 35320
// begin result := i ;
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: LD_VAR 0 4
35315: ST_TO_ADDR
// exit ;
35316: POP
35317: POP
35318: GO 35324
// end ;
35320: GO 35285
35322: POP
35323: POP
// end ;
35324: LD_VAR 0 3
35328: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35329: LD_INT 0
35331: PPUSH
// vc_chassis := chassis ;
35332: LD_ADDR_OWVAR 37
35336: PUSH
35337: LD_VAR 0 1
35341: ST_TO_ADDR
// vc_engine := engine ;
35342: LD_ADDR_OWVAR 39
35346: PUSH
35347: LD_VAR 0 2
35351: ST_TO_ADDR
// vc_control := control ;
35352: LD_ADDR_OWVAR 38
35356: PUSH
35357: LD_VAR 0 3
35361: ST_TO_ADDR
// vc_weapon := weapon ;
35362: LD_ADDR_OWVAR 40
35366: PUSH
35367: LD_VAR 0 4
35371: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35372: LD_ADDR_OWVAR 41
35376: PUSH
35377: LD_VAR 0 5
35381: ST_TO_ADDR
// end ;
35382: LD_VAR 0 6
35386: RET
// export function WantPlant ( unit ) ; var task ; begin
35387: LD_INT 0
35389: PPUSH
35390: PPUSH
// result := false ;
35391: LD_ADDR_VAR 0 2
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35399: LD_ADDR_VAR 0 3
35403: PUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: CALL_OW 437
35413: ST_TO_ADDR
// if task then
35414: LD_VAR 0 3
35418: IFFALSE 35446
// if task [ 1 ] [ 1 ] = p then
35420: LD_VAR 0 3
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: PUSH
35433: LD_STRING p
35435: EQUAL
35436: IFFALSE 35446
// result := true ;
35438: LD_ADDR_VAR 0 2
35442: PUSH
35443: LD_INT 1
35445: ST_TO_ADDR
// end ;
35446: LD_VAR 0 2
35450: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35451: LD_INT 0
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
// if pos < 1 then
35457: LD_VAR 0 2
35461: PUSH
35462: LD_INT 1
35464: LESS
35465: IFFALSE 35469
// exit ;
35467: GO 35772
// if pos = 1 then
35469: LD_VAR 0 2
35473: PUSH
35474: LD_INT 1
35476: EQUAL
35477: IFFALSE 35510
// result := Replace ( arr , pos [ 1 ] , value ) else
35479: LD_ADDR_VAR 0 4
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: LD_VAR 0 2
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: PPUSH
35498: LD_VAR 0 3
35502: PPUSH
35503: CALL_OW 1
35507: ST_TO_ADDR
35508: GO 35772
// begin tmp := arr ;
35510: LD_ADDR_VAR 0 6
35514: PUSH
35515: LD_VAR 0 1
35519: ST_TO_ADDR
// s_arr := [ tmp ] ;
35520: LD_ADDR_VAR 0 7
35524: PUSH
35525: LD_VAR 0 6
35529: PUSH
35530: EMPTY
35531: LIST
35532: ST_TO_ADDR
// for i = 1 to pos - 1 do
35533: LD_ADDR_VAR 0 5
35537: PUSH
35538: DOUBLE
35539: LD_INT 1
35541: DEC
35542: ST_TO_ADDR
35543: LD_VAR 0 2
35547: PUSH
35548: LD_INT 1
35550: MINUS
35551: PUSH
35552: FOR_TO
35553: IFFALSE 35598
// begin tmp := tmp [ pos [ i ] ] ;
35555: LD_ADDR_VAR 0 6
35559: PUSH
35560: LD_VAR 0 6
35564: PUSH
35565: LD_VAR 0 2
35569: PUSH
35570: LD_VAR 0 5
35574: ARRAY
35575: ARRAY
35576: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35577: LD_ADDR_VAR 0 7
35581: PUSH
35582: LD_VAR 0 7
35586: PUSH
35587: LD_VAR 0 6
35591: PUSH
35592: EMPTY
35593: LIST
35594: ADD
35595: ST_TO_ADDR
// end ;
35596: GO 35552
35598: POP
35599: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35600: LD_ADDR_VAR 0 6
35604: PUSH
35605: LD_VAR 0 6
35609: PPUSH
35610: LD_VAR 0 2
35614: PUSH
35615: LD_VAR 0 2
35619: ARRAY
35620: PPUSH
35621: LD_VAR 0 3
35625: PPUSH
35626: CALL_OW 1
35630: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35631: LD_ADDR_VAR 0 7
35635: PUSH
35636: LD_VAR 0 7
35640: PPUSH
35641: LD_VAR 0 7
35645: PPUSH
35646: LD_VAR 0 6
35650: PPUSH
35651: CALL_OW 1
35655: ST_TO_ADDR
// for i = s_arr downto 2 do
35656: LD_ADDR_VAR 0 5
35660: PUSH
35661: DOUBLE
35662: LD_VAR 0 7
35666: INC
35667: ST_TO_ADDR
35668: LD_INT 2
35670: PUSH
35671: FOR_DOWNTO
35672: IFFALSE 35756
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35674: LD_ADDR_VAR 0 6
35678: PUSH
35679: LD_VAR 0 7
35683: PUSH
35684: LD_VAR 0 5
35688: PUSH
35689: LD_INT 1
35691: MINUS
35692: ARRAY
35693: PPUSH
35694: LD_VAR 0 2
35698: PUSH
35699: LD_VAR 0 5
35703: PUSH
35704: LD_INT 1
35706: MINUS
35707: ARRAY
35708: PPUSH
35709: LD_VAR 0 7
35713: PUSH
35714: LD_VAR 0 5
35718: ARRAY
35719: PPUSH
35720: CALL_OW 1
35724: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35725: LD_ADDR_VAR 0 7
35729: PUSH
35730: LD_VAR 0 7
35734: PPUSH
35735: LD_VAR 0 5
35739: PUSH
35740: LD_INT 1
35742: MINUS
35743: PPUSH
35744: LD_VAR 0 6
35748: PPUSH
35749: CALL_OW 1
35753: ST_TO_ADDR
// end ;
35754: GO 35671
35756: POP
35757: POP
// result := s_arr [ 1 ] ;
35758: LD_ADDR_VAR 0 4
35762: PUSH
35763: LD_VAR 0 7
35767: PUSH
35768: LD_INT 1
35770: ARRAY
35771: ST_TO_ADDR
// end ; end ;
35772: LD_VAR 0 4
35776: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35777: LD_INT 0
35779: PPUSH
35780: PPUSH
// if not list then
35781: LD_VAR 0 1
35785: NOT
35786: IFFALSE 35790
// exit ;
35788: GO 35881
// i := list [ pos1 ] ;
35790: LD_ADDR_VAR 0 5
35794: PUSH
35795: LD_VAR 0 1
35799: PUSH
35800: LD_VAR 0 2
35804: ARRAY
35805: ST_TO_ADDR
// if not i then
35806: LD_VAR 0 5
35810: NOT
35811: IFFALSE 35815
// exit ;
35813: GO 35881
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35815: LD_ADDR_VAR 0 1
35819: PUSH
35820: LD_VAR 0 1
35824: PPUSH
35825: LD_VAR 0 2
35829: PPUSH
35830: LD_VAR 0 1
35834: PUSH
35835: LD_VAR 0 3
35839: ARRAY
35840: PPUSH
35841: CALL_OW 1
35845: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35846: LD_ADDR_VAR 0 1
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: LD_VAR 0 3
35860: PPUSH
35861: LD_VAR 0 5
35865: PPUSH
35866: CALL_OW 1
35870: ST_TO_ADDR
// result := list ;
35871: LD_ADDR_VAR 0 4
35875: PUSH
35876: LD_VAR 0 1
35880: ST_TO_ADDR
// end ;
35881: LD_VAR 0 4
35885: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35886: LD_INT 0
35888: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35889: LD_ADDR_VAR 0 5
35893: PUSH
35894: LD_VAR 0 1
35898: PPUSH
35899: CALL_OW 250
35903: PPUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 251
35913: PPUSH
35914: LD_VAR 0 2
35918: PPUSH
35919: LD_VAR 0 3
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: CALL 35939 0 5
35933: ST_TO_ADDR
// end ;
35934: LD_VAR 0 5
35938: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35939: LD_INT 0
35941: PPUSH
35942: PPUSH
35943: PPUSH
35944: PPUSH
// if not list then
35945: LD_VAR 0 3
35949: NOT
35950: IFFALSE 35954
// exit ;
35952: GO 36342
// result := [ ] ;
35954: LD_ADDR_VAR 0 6
35958: PUSH
35959: EMPTY
35960: ST_TO_ADDR
// for i in list do
35961: LD_ADDR_VAR 0 7
35965: PUSH
35966: LD_VAR 0 3
35970: PUSH
35971: FOR_IN
35972: IFFALSE 36174
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35974: LD_ADDR_VAR 0 9
35978: PUSH
35979: LD_VAR 0 7
35983: PPUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: LD_VAR 0 2
35993: PPUSH
35994: CALL_OW 297
35998: ST_TO_ADDR
// if not result then
35999: LD_VAR 0 6
36003: NOT
36004: IFFALSE 36030
// result := [ [ i , tmp ] ] else
36006: LD_ADDR_VAR 0 6
36010: PUSH
36011: LD_VAR 0 7
36015: PUSH
36016: LD_VAR 0 9
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: ST_TO_ADDR
36028: GO 36172
// begin if result [ result ] [ 2 ] < tmp then
36030: LD_VAR 0 6
36034: PUSH
36035: LD_VAR 0 6
36039: ARRAY
36040: PUSH
36041: LD_INT 2
36043: ARRAY
36044: PUSH
36045: LD_VAR 0 9
36049: LESS
36050: IFFALSE 36092
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36052: LD_ADDR_VAR 0 6
36056: PUSH
36057: LD_VAR 0 6
36061: PPUSH
36062: LD_VAR 0 6
36066: PUSH
36067: LD_INT 1
36069: PLUS
36070: PPUSH
36071: LD_VAR 0 7
36075: PUSH
36076: LD_VAR 0 9
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PPUSH
36085: CALL_OW 2
36089: ST_TO_ADDR
36090: GO 36172
// for j = 1 to result do
36092: LD_ADDR_VAR 0 8
36096: PUSH
36097: DOUBLE
36098: LD_INT 1
36100: DEC
36101: ST_TO_ADDR
36102: LD_VAR 0 6
36106: PUSH
36107: FOR_TO
36108: IFFALSE 36170
// begin if tmp < result [ j ] [ 2 ] then
36110: LD_VAR 0 9
36114: PUSH
36115: LD_VAR 0 6
36119: PUSH
36120: LD_VAR 0 8
36124: ARRAY
36125: PUSH
36126: LD_INT 2
36128: ARRAY
36129: LESS
36130: IFFALSE 36168
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36132: LD_ADDR_VAR 0 6
36136: PUSH
36137: LD_VAR 0 6
36141: PPUSH
36142: LD_VAR 0 8
36146: PPUSH
36147: LD_VAR 0 7
36151: PUSH
36152: LD_VAR 0 9
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL_OW 2
36165: ST_TO_ADDR
// break ;
36166: GO 36170
// end ; end ;
36168: GO 36107
36170: POP
36171: POP
// end ; end ;
36172: GO 35971
36174: POP
36175: POP
// if result and not asc then
36176: LD_VAR 0 6
36180: PUSH
36181: LD_VAR 0 4
36185: NOT
36186: AND
36187: IFFALSE 36262
// begin tmp := result ;
36189: LD_ADDR_VAR 0 9
36193: PUSH
36194: LD_VAR 0 6
36198: ST_TO_ADDR
// for i = tmp downto 1 do
36199: LD_ADDR_VAR 0 7
36203: PUSH
36204: DOUBLE
36205: LD_VAR 0 9
36209: INC
36210: ST_TO_ADDR
36211: LD_INT 1
36213: PUSH
36214: FOR_DOWNTO
36215: IFFALSE 36260
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36217: LD_ADDR_VAR 0 6
36221: PUSH
36222: LD_VAR 0 6
36226: PPUSH
36227: LD_VAR 0 9
36231: PUSH
36232: LD_VAR 0 7
36236: MINUS
36237: PUSH
36238: LD_INT 1
36240: PLUS
36241: PPUSH
36242: LD_VAR 0 9
36246: PUSH
36247: LD_VAR 0 7
36251: ARRAY
36252: PPUSH
36253: CALL_OW 1
36257: ST_TO_ADDR
36258: GO 36214
36260: POP
36261: POP
// end ; tmp := [ ] ;
36262: LD_ADDR_VAR 0 9
36266: PUSH
36267: EMPTY
36268: ST_TO_ADDR
// if mode then
36269: LD_VAR 0 5
36273: IFFALSE 36342
// begin for i = 1 to result do
36275: LD_ADDR_VAR 0 7
36279: PUSH
36280: DOUBLE
36281: LD_INT 1
36283: DEC
36284: ST_TO_ADDR
36285: LD_VAR 0 6
36289: PUSH
36290: FOR_TO
36291: IFFALSE 36330
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36293: LD_ADDR_VAR 0 9
36297: PUSH
36298: LD_VAR 0 9
36302: PPUSH
36303: LD_VAR 0 7
36307: PPUSH
36308: LD_VAR 0 6
36312: PUSH
36313: LD_VAR 0 7
36317: ARRAY
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: CALL_OW 1
36327: ST_TO_ADDR
36328: GO 36290
36330: POP
36331: POP
// result := tmp ;
36332: LD_ADDR_VAR 0 6
36336: PUSH
36337: LD_VAR 0 9
36341: ST_TO_ADDR
// end ; end ;
36342: LD_VAR 0 6
36346: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36347: LD_INT 0
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36355: LD_ADDR_VAR 0 5
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// if not x or not y then
36377: LD_VAR 0 2
36381: NOT
36382: PUSH
36383: LD_VAR 0 3
36387: NOT
36388: OR
36389: IFFALSE 36393
// exit ;
36391: GO 38043
// if not range then
36393: LD_VAR 0 4
36397: NOT
36398: IFFALSE 36408
// range := 10 ;
36400: LD_ADDR_VAR 0 4
36404: PUSH
36405: LD_INT 10
36407: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36408: LD_ADDR_VAR 0 8
36412: PUSH
36413: LD_INT 81
36415: PUSH
36416: LD_VAR 0 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 92
36427: PUSH
36428: LD_VAR 0 2
36432: PUSH
36433: LD_VAR 0 3
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 21
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: PPUSH
36471: CALL_OW 69
36475: ST_TO_ADDR
// if not tmp then
36476: LD_VAR 0 8
36480: NOT
36481: IFFALSE 36485
// exit ;
36483: GO 38043
// for i in tmp do
36485: LD_ADDR_VAR 0 6
36489: PUSH
36490: LD_VAR 0 8
36494: PUSH
36495: FOR_IN
36496: IFFALSE 38018
// begin points := [ 0 , 0 , 0 ] ;
36498: LD_ADDR_VAR 0 9
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// bpoints := 1 ;
36517: LD_ADDR_VAR 0 10
36521: PUSH
36522: LD_INT 1
36524: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 247
36534: PUSH
36535: LD_INT 1
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36543
36541: GO 37121
36543: POP
// begin if GetClass ( i ) = 1 then
36544: LD_VAR 0 6
36548: PPUSH
36549: CALL_OW 257
36553: PUSH
36554: LD_INT 1
36556: EQUAL
36557: IFFALSE 36578
// points := [ 10 , 5 , 3 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 10
36566: PUSH
36567: LD_INT 5
36569: PUSH
36570: LD_INT 3
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 257
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 3
36593: PUSH
36594: LD_INT 4
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: IN
36602: IFFALSE 36623
// points := [ 3 , 2 , 1 ] ;
36604: LD_ADDR_VAR 0 9
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36623: LD_VAR 0 6
36627: PPUSH
36628: CALL_OW 257
36632: PUSH
36633: LD_INT 5
36635: EQUAL
36636: IFFALSE 36657
// points := [ 130 , 5 , 2 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 130
36645: PUSH
36646: LD_INT 5
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 257
36666: PUSH
36667: LD_INT 8
36669: EQUAL
36670: IFFALSE 36691
// points := [ 35 , 35 , 30 ] ;
36672: LD_ADDR_VAR 0 9
36676: PUSH
36677: LD_INT 35
36679: PUSH
36680: LD_INT 35
36682: PUSH
36683: LD_INT 30
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36691: LD_VAR 0 6
36695: PPUSH
36696: CALL_OW 257
36700: PUSH
36701: LD_INT 9
36703: EQUAL
36704: IFFALSE 36725
// points := [ 20 , 55 , 40 ] ;
36706: LD_ADDR_VAR 0 9
36710: PUSH
36711: LD_INT 20
36713: PUSH
36714: LD_INT 55
36716: PUSH
36717: LD_INT 40
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36725: LD_VAR 0 6
36729: PPUSH
36730: CALL_OW 257
36734: PUSH
36735: LD_INT 12
36737: PUSH
36738: LD_INT 16
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: IN
36745: IFFALSE 36766
// points := [ 5 , 3 , 2 ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 5
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 257
36775: PUSH
36776: LD_INT 17
36778: EQUAL
36779: IFFALSE 36800
// points := [ 100 , 50 , 75 ] ;
36781: LD_ADDR_VAR 0 9
36785: PUSH
36786: LD_INT 100
36788: PUSH
36789: LD_INT 50
36791: PUSH
36792: LD_INT 75
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36800: LD_VAR 0 6
36804: PPUSH
36805: CALL_OW 257
36809: PUSH
36810: LD_INT 15
36812: EQUAL
36813: IFFALSE 36834
// points := [ 10 , 5 , 3 ] ;
36815: LD_ADDR_VAR 0 9
36819: PUSH
36820: LD_INT 10
36822: PUSH
36823: LD_INT 5
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36834: LD_VAR 0 6
36838: PPUSH
36839: CALL_OW 257
36843: PUSH
36844: LD_INT 14
36846: EQUAL
36847: IFFALSE 36868
// points := [ 10 , 0 , 0 ] ;
36849: LD_ADDR_VAR 0 9
36853: PUSH
36854: LD_INT 10
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 257
36877: PUSH
36878: LD_INT 11
36880: EQUAL
36881: IFFALSE 36902
// points := [ 30 , 10 , 5 ] ;
36883: LD_ADDR_VAR 0 9
36887: PUSH
36888: LD_INT 30
36890: PUSH
36891: LD_INT 10
36893: PUSH
36894: LD_INT 5
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_INT 5
36909: PPUSH
36910: CALL_OW 321
36914: PUSH
36915: LD_INT 2
36917: EQUAL
36918: IFFALSE 36935
// bpoints := bpoints * 1.8 ;
36920: LD_ADDR_VAR 0 10
36924: PUSH
36925: LD_VAR 0 10
36929: PUSH
36930: LD_REAL  1.80000000000000E+0000
36933: MUL
36934: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36935: LD_VAR 0 6
36939: PPUSH
36940: CALL_OW 257
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 4
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: IN
36963: PUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: LD_INT 51
36971: PPUSH
36972: CALL_OW 321
36976: PUSH
36977: LD_INT 2
36979: EQUAL
36980: AND
36981: IFFALSE 36998
// bpoints := bpoints * 1.2 ;
36983: LD_ADDR_VAR 0 10
36987: PUSH
36988: LD_VAR 0 10
36992: PUSH
36993: LD_REAL  1.20000000000000E+0000
36996: MUL
36997: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36998: LD_VAR 0 6
37002: PPUSH
37003: CALL_OW 257
37007: PUSH
37008: LD_INT 5
37010: PUSH
37011: LD_INT 7
37013: PUSH
37014: LD_INT 9
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: IN
37022: PUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: LD_INT 52
37030: PPUSH
37031: CALL_OW 321
37035: PUSH
37036: LD_INT 2
37038: EQUAL
37039: AND
37040: IFFALSE 37057
// bpoints := bpoints * 1.5 ;
37042: LD_ADDR_VAR 0 10
37046: PUSH
37047: LD_VAR 0 10
37051: PUSH
37052: LD_REAL  1.50000000000000E+0000
37055: MUL
37056: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_INT 66
37064: PPUSH
37065: CALL_OW 321
37069: PUSH
37070: LD_INT 2
37072: EQUAL
37073: IFFALSE 37090
// bpoints := bpoints * 1.1 ;
37075: LD_ADDR_VAR 0 10
37079: PUSH
37080: LD_VAR 0 10
37084: PUSH
37085: LD_REAL  1.10000000000000E+0000
37088: MUL
37089: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37090: LD_ADDR_VAR 0 10
37094: PUSH
37095: LD_VAR 0 10
37099: PUSH
37100: LD_VAR 0 6
37104: PPUSH
37105: LD_INT 1
37107: PPUSH
37108: CALL_OW 259
37112: PUSH
37113: LD_REAL  1.15000000000000E+0000
37116: MUL
37117: MUL
37118: ST_TO_ADDR
// end ; unit_vehicle :
37119: GO 37947
37121: LD_INT 2
37123: DOUBLE
37124: EQUAL
37125: IFTRUE 37129
37127: GO 37935
37129: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37130: LD_VAR 0 6
37134: PPUSH
37135: CALL_OW 264
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 42
37145: PUSH
37146: LD_INT 24
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: IN
37154: IFFALSE 37175
// points := [ 25 , 5 , 3 ] ;
37156: LD_ADDR_VAR 0 9
37160: PUSH
37161: LD_INT 25
37163: PUSH
37164: LD_INT 5
37166: PUSH
37167: LD_INT 3
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37175: LD_VAR 0 6
37179: PPUSH
37180: CALL_OW 264
37184: PUSH
37185: LD_INT 4
37187: PUSH
37188: LD_INT 43
37190: PUSH
37191: LD_INT 25
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: IN
37199: IFFALSE 37220
// points := [ 40 , 15 , 5 ] ;
37201: LD_ADDR_VAR 0 9
37205: PUSH
37206: LD_INT 40
37208: PUSH
37209: LD_INT 15
37211: PUSH
37212: LD_INT 5
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37220: LD_VAR 0 6
37224: PPUSH
37225: CALL_OW 264
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: LD_INT 23
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: IN
37240: IFFALSE 37261
// points := [ 7 , 25 , 8 ] ;
37242: LD_ADDR_VAR 0 9
37246: PUSH
37247: LD_INT 7
37249: PUSH
37250: LD_INT 25
37252: PUSH
37253: LD_INT 8
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37261: LD_VAR 0 6
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 5
37273: PUSH
37274: LD_INT 27
37276: PUSH
37277: LD_INT 44
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: IN
37285: IFFALSE 37306
// points := [ 14 , 50 , 16 ] ;
37287: LD_ADDR_VAR 0 9
37291: PUSH
37292: LD_INT 14
37294: PUSH
37295: LD_INT 50
37297: PUSH
37298: LD_INT 16
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37306: LD_VAR 0 6
37310: PPUSH
37311: CALL_OW 264
37315: PUSH
37316: LD_INT 6
37318: PUSH
37319: LD_INT 46
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: IN
37326: IFFALSE 37347
// points := [ 32 , 120 , 70 ] ;
37328: LD_ADDR_VAR 0 9
37332: PUSH
37333: LD_INT 32
37335: PUSH
37336: LD_INT 120
37338: PUSH
37339: LD_INT 70
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37347: LD_VAR 0 6
37351: PPUSH
37352: CALL_OW 264
37356: PUSH
37357: LD_INT 7
37359: PUSH
37360: LD_INT 28
37362: PUSH
37363: LD_INT 45
37365: PUSH
37366: LD_INT 92
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: IN
37375: IFFALSE 37396
// points := [ 35 , 20 , 45 ] ;
37377: LD_ADDR_VAR 0 9
37381: PUSH
37382: LD_INT 35
37384: PUSH
37385: LD_INT 20
37387: PUSH
37388: LD_INT 45
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37396: LD_VAR 0 6
37400: PPUSH
37401: CALL_OW 264
37405: PUSH
37406: LD_INT 47
37408: PUSH
37409: EMPTY
37410: LIST
37411: IN
37412: IFFALSE 37433
// points := [ 67 , 45 , 75 ] ;
37414: LD_ADDR_VAR 0 9
37418: PUSH
37419: LD_INT 67
37421: PUSH
37422: LD_INT 45
37424: PUSH
37425: LD_INT 75
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37433: LD_VAR 0 6
37437: PPUSH
37438: CALL_OW 264
37442: PUSH
37443: LD_INT 26
37445: PUSH
37446: EMPTY
37447: LIST
37448: IN
37449: IFFALSE 37470
// points := [ 120 , 30 , 80 ] ;
37451: LD_ADDR_VAR 0 9
37455: PUSH
37456: LD_INT 120
37458: PUSH
37459: LD_INT 30
37461: PUSH
37462: LD_INT 80
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37470: LD_VAR 0 6
37474: PPUSH
37475: CALL_OW 264
37479: PUSH
37480: LD_INT 22
37482: PUSH
37483: EMPTY
37484: LIST
37485: IN
37486: IFFALSE 37507
// points := [ 40 , 1 , 1 ] ;
37488: LD_ADDR_VAR 0 9
37492: PUSH
37493: LD_INT 40
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37507: LD_VAR 0 6
37511: PPUSH
37512: CALL_OW 264
37516: PUSH
37517: LD_INT 29
37519: PUSH
37520: EMPTY
37521: LIST
37522: IN
37523: IFFALSE 37544
// points := [ 70 , 200 , 400 ] ;
37525: LD_ADDR_VAR 0 9
37529: PUSH
37530: LD_INT 70
37532: PUSH
37533: LD_INT 200
37535: PUSH
37536: LD_INT 400
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37544: LD_VAR 0 6
37548: PPUSH
37549: CALL_OW 264
37553: PUSH
37554: LD_INT 14
37556: PUSH
37557: LD_INT 53
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: IN
37564: IFFALSE 37585
// points := [ 40 , 10 , 20 ] ;
37566: LD_ADDR_VAR 0 9
37570: PUSH
37571: LD_INT 40
37573: PUSH
37574: LD_INT 10
37576: PUSH
37577: LD_INT 20
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37585: LD_VAR 0 6
37589: PPUSH
37590: CALL_OW 264
37594: PUSH
37595: LD_INT 9
37597: PUSH
37598: EMPTY
37599: LIST
37600: IN
37601: IFFALSE 37622
// points := [ 5 , 70 , 20 ] ;
37603: LD_ADDR_VAR 0 9
37607: PUSH
37608: LD_INT 5
37610: PUSH
37611: LD_INT 70
37613: PUSH
37614: LD_INT 20
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37622: LD_VAR 0 6
37626: PPUSH
37627: CALL_OW 264
37631: PUSH
37632: LD_INT 10
37634: PUSH
37635: EMPTY
37636: LIST
37637: IN
37638: IFFALSE 37659
// points := [ 35 , 110 , 70 ] ;
37640: LD_ADDR_VAR 0 9
37644: PUSH
37645: LD_INT 35
37647: PUSH
37648: LD_INT 110
37650: PUSH
37651: LD_INT 70
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37659: LD_VAR 0 6
37663: PPUSH
37664: CALL_OW 265
37668: PUSH
37669: LD_INT 25
37671: EQUAL
37672: IFFALSE 37693
// points := [ 80 , 65 , 100 ] ;
37674: LD_ADDR_VAR 0 9
37678: PUSH
37679: LD_INT 80
37681: PUSH
37682: LD_INT 65
37684: PUSH
37685: LD_INT 100
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37693: LD_VAR 0 6
37697: PPUSH
37698: CALL_OW 263
37702: PUSH
37703: LD_INT 1
37705: EQUAL
37706: IFFALSE 37741
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37708: LD_ADDR_VAR 0 10
37712: PUSH
37713: LD_VAR 0 10
37717: PUSH
37718: LD_VAR 0 6
37722: PPUSH
37723: CALL_OW 311
37727: PPUSH
37728: LD_INT 3
37730: PPUSH
37731: CALL_OW 259
37735: PUSH
37736: LD_INT 4
37738: MUL
37739: MUL
37740: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37741: LD_VAR 0 6
37745: PPUSH
37746: CALL_OW 263
37750: PUSH
37751: LD_INT 2
37753: EQUAL
37754: IFFALSE 37805
// begin j := IsControledBy ( i ) ;
37756: LD_ADDR_VAR 0 7
37760: PUSH
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 312
37770: ST_TO_ADDR
// if j then
37771: LD_VAR 0 7
37775: IFFALSE 37805
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37777: LD_ADDR_VAR 0 10
37781: PUSH
37782: LD_VAR 0 10
37786: PUSH
37787: LD_VAR 0 7
37791: PPUSH
37792: LD_INT 3
37794: PPUSH
37795: CALL_OW 259
37799: PUSH
37800: LD_INT 3
37802: MUL
37803: MUL
37804: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37805: LD_VAR 0 6
37809: PPUSH
37810: CALL_OW 264
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: LD_INT 6
37820: PUSH
37821: LD_INT 46
37823: PUSH
37824: LD_INT 44
37826: PUSH
37827: LD_INT 47
37829: PUSH
37830: LD_INT 45
37832: PUSH
37833: LD_INT 28
37835: PUSH
37836: LD_INT 7
37838: PUSH
37839: LD_INT 27
37841: PUSH
37842: LD_INT 29
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: IN
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: LD_INT 52
37865: PPUSH
37866: CALL_OW 321
37870: PUSH
37871: LD_INT 2
37873: EQUAL
37874: AND
37875: IFFALSE 37892
// bpoints := bpoints * 1.2 ;
37877: LD_ADDR_VAR 0 10
37881: PUSH
37882: LD_VAR 0 10
37886: PUSH
37887: LD_REAL  1.20000000000000E+0000
37890: MUL
37891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37892: LD_VAR 0 6
37896: PPUSH
37897: CALL_OW 264
37901: PUSH
37902: LD_INT 6
37904: PUSH
37905: LD_INT 46
37907: PUSH
37908: LD_INT 47
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: IN
37916: IFFALSE 37933
// bpoints := bpoints * 1.2 ;
37918: LD_ADDR_VAR 0 10
37922: PUSH
37923: LD_VAR 0 10
37927: PUSH
37928: LD_REAL  1.20000000000000E+0000
37931: MUL
37932: ST_TO_ADDR
// end ; unit_building :
37933: GO 37947
37935: LD_INT 3
37937: DOUBLE
37938: EQUAL
37939: IFTRUE 37943
37941: GO 37946
37943: POP
// ; end ;
37944: GO 37947
37946: POP
// for j = 1 to 3 do
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: DOUBLE
37953: LD_INT 1
37955: DEC
37956: ST_TO_ADDR
37957: LD_INT 3
37959: PUSH
37960: FOR_TO
37961: IFFALSE 38014
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37963: LD_ADDR_VAR 0 5
37967: PUSH
37968: LD_VAR 0 5
37972: PPUSH
37973: LD_VAR 0 7
37977: PPUSH
37978: LD_VAR 0 5
37982: PUSH
37983: LD_VAR 0 7
37987: ARRAY
37988: PUSH
37989: LD_VAR 0 9
37993: PUSH
37994: LD_VAR 0 7
37998: ARRAY
37999: PUSH
38000: LD_VAR 0 10
38004: MUL
38005: PLUS
38006: PPUSH
38007: CALL_OW 1
38011: ST_TO_ADDR
38012: GO 37960
38014: POP
38015: POP
// end ;
38016: GO 36495
38018: POP
38019: POP
// result := Replace ( result , 4 , tmp ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 5
38029: PPUSH
38030: LD_INT 4
38032: PPUSH
38033: LD_VAR 0 8
38037: PPUSH
38038: CALL_OW 1
38042: ST_TO_ADDR
// end ;
38043: LD_VAR 0 5
38047: RET
// export function DangerAtRange ( unit , range ) ; begin
38048: LD_INT 0
38050: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38051: LD_ADDR_VAR 0 3
38055: PUSH
38056: LD_VAR 0 1
38060: PPUSH
38061: CALL_OW 255
38065: PPUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 250
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 251
38085: PPUSH
38086: LD_VAR 0 2
38090: PPUSH
38091: CALL 36347 0 4
38095: ST_TO_ADDR
// end ;
38096: LD_VAR 0 3
38100: RET
// export function DangerInArea ( side , area ) ; begin
38101: LD_INT 0
38103: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38104: LD_ADDR_VAR 0 3
38108: PUSH
38109: LD_VAR 0 2
38113: PPUSH
38114: LD_INT 81
38116: PUSH
38117: LD_VAR 0 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PPUSH
38126: CALL_OW 70
38130: ST_TO_ADDR
// end ;
38131: LD_VAR 0 3
38135: RET
// export function IsExtension ( b ) ; begin
38136: LD_INT 0
38138: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38139: LD_ADDR_VAR 0 2
38143: PUSH
38144: LD_VAR 0 1
38148: PUSH
38149: LD_INT 23
38151: PUSH
38152: LD_INT 20
38154: PUSH
38155: LD_INT 22
38157: PUSH
38158: LD_INT 17
38160: PUSH
38161: LD_INT 24
38163: PUSH
38164: LD_INT 21
38166: PUSH
38167: LD_INT 19
38169: PUSH
38170: LD_INT 16
38172: PUSH
38173: LD_INT 25
38175: PUSH
38176: LD_INT 18
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: IN
38191: ST_TO_ADDR
// end ;
38192: LD_VAR 0 2
38196: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38197: LD_INT 0
38199: PPUSH
38200: PPUSH
38201: PPUSH
// result := [ ] ;
38202: LD_ADDR_VAR 0 4
38206: PUSH
38207: EMPTY
38208: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38209: LD_ADDR_VAR 0 5
38213: PUSH
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_INT 21
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PPUSH
38229: CALL_OW 70
38233: ST_TO_ADDR
// if not tmp then
38234: LD_VAR 0 5
38238: NOT
38239: IFFALSE 38243
// exit ;
38241: GO 38307
// if checkLink then
38243: LD_VAR 0 3
38247: IFFALSE 38297
// begin for i in tmp do
38249: LD_ADDR_VAR 0 6
38253: PUSH
38254: LD_VAR 0 5
38258: PUSH
38259: FOR_IN
38260: IFFALSE 38295
// if GetBase ( i ) <> base then
38262: LD_VAR 0 6
38266: PPUSH
38267: CALL_OW 274
38271: PUSH
38272: LD_VAR 0 1
38276: NONEQUAL
38277: IFFALSE 38293
// ComLinkToBase ( base , i ) ;
38279: LD_VAR 0 1
38283: PPUSH
38284: LD_VAR 0 6
38288: PPUSH
38289: CALL_OW 169
38293: GO 38259
38295: POP
38296: POP
// end ; result := tmp ;
38297: LD_ADDR_VAR 0 4
38301: PUSH
38302: LD_VAR 0 5
38306: ST_TO_ADDR
// end ;
38307: LD_VAR 0 4
38311: RET
// export function ComComplete ( units , b ) ; var i ; begin
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
// if not units then
38316: LD_VAR 0 1
38320: NOT
38321: IFFALSE 38325
// exit ;
38323: GO 38415
// for i in units do
38325: LD_ADDR_VAR 0 4
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: FOR_IN
38336: IFFALSE 38413
// if BuildingStatus ( b ) = bs_build then
38338: LD_VAR 0 2
38342: PPUSH
38343: CALL_OW 461
38347: PUSH
38348: LD_INT 1
38350: EQUAL
38351: IFFALSE 38411
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38353: LD_VAR 0 4
38357: PPUSH
38358: LD_STRING h
38360: PUSH
38361: LD_VAR 0 2
38365: PPUSH
38366: CALL_OW 250
38370: PUSH
38371: LD_VAR 0 2
38375: PPUSH
38376: CALL_OW 251
38380: PUSH
38381: LD_VAR 0 2
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: PPUSH
38407: CALL_OW 446
38411: GO 38335
38413: POP
38414: POP
// end ;
38415: LD_VAR 0 3
38419: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38420: LD_INT 0
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38428: LD_VAR 0 1
38432: NOT
38433: PUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 263
38443: PUSH
38444: LD_INT 2
38446: NONEQUAL
38447: OR
38448: IFFALSE 38452
// exit ;
38450: GO 38768
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38452: LD_ADDR_VAR 0 6
38456: PUSH
38457: LD_INT 22
38459: PUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 255
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 36
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 34
38489: PUSH
38490: LD_INT 31
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 69
38510: ST_TO_ADDR
// if not tmp then
38511: LD_VAR 0 6
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38768
// result := [ ] ;
38520: LD_ADDR_VAR 0 2
38524: PUSH
38525: EMPTY
38526: ST_TO_ADDR
// for i in tmp do
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_VAR 0 6
38536: PUSH
38537: FOR_IN
38538: IFFALSE 38609
// begin t := UnitsInside ( i ) ;
38540: LD_ADDR_VAR 0 4
38544: PUSH
38545: LD_VAR 0 3
38549: PPUSH
38550: CALL_OW 313
38554: ST_TO_ADDR
// if t then
38555: LD_VAR 0 4
38559: IFFALSE 38607
// for j in t do
38561: LD_ADDR_VAR 0 7
38565: PUSH
38566: LD_VAR 0 4
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38605
// result := Replace ( result , result + 1 , j ) ;
38574: LD_ADDR_VAR 0 2
38578: PUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_INT 1
38591: PLUS
38592: PPUSH
38593: LD_VAR 0 7
38597: PPUSH
38598: CALL_OW 1
38602: ST_TO_ADDR
38603: GO 38571
38605: POP
38606: POP
// end ;
38607: GO 38537
38609: POP
38610: POP
// if not result then
38611: LD_VAR 0 2
38615: NOT
38616: IFFALSE 38620
// exit ;
38618: GO 38768
// mech := result [ 1 ] ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_INT 1
38632: ARRAY
38633: ST_TO_ADDR
// if result > 1 then
38634: LD_VAR 0 2
38638: PUSH
38639: LD_INT 1
38641: GREATER
38642: IFFALSE 38754
// begin for i = 2 to result do
38644: LD_ADDR_VAR 0 3
38648: PUSH
38649: DOUBLE
38650: LD_INT 2
38652: DEC
38653: ST_TO_ADDR
38654: LD_VAR 0 2
38658: PUSH
38659: FOR_TO
38660: IFFALSE 38752
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38662: LD_ADDR_VAR 0 4
38666: PUSH
38667: LD_VAR 0 2
38671: PUSH
38672: LD_VAR 0 3
38676: ARRAY
38677: PPUSH
38678: LD_INT 3
38680: PPUSH
38681: CALL_OW 259
38685: PUSH
38686: LD_VAR 0 2
38690: PUSH
38691: LD_VAR 0 3
38695: ARRAY
38696: PPUSH
38697: CALL_OW 432
38701: MINUS
38702: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38703: LD_VAR 0 4
38707: PUSH
38708: LD_VAR 0 5
38712: PPUSH
38713: LD_INT 3
38715: PPUSH
38716: CALL_OW 259
38720: PUSH
38721: LD_VAR 0 5
38725: PPUSH
38726: CALL_OW 432
38730: MINUS
38731: GREATEREQUAL
38732: IFFALSE 38750
// mech := result [ i ] ;
38734: LD_ADDR_VAR 0 5
38738: PUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_VAR 0 3
38748: ARRAY
38749: ST_TO_ADDR
// end ;
38750: GO 38659
38752: POP
38753: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38754: LD_VAR 0 1
38758: PPUSH
38759: LD_VAR 0 5
38763: PPUSH
38764: CALL_OW 135
// end ;
38768: LD_VAR 0 2
38772: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38773: LD_INT 0
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
// result := [ ] ;
38788: LD_ADDR_VAR 0 7
38792: PUSH
38793: EMPTY
38794: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 266
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: IN
38815: NOT
38816: IFFALSE 38820
// exit ;
38818: GO 40454
// if name then
38820: LD_VAR 0 3
38824: IFFALSE 38840
// SetBName ( base_dep , name ) ;
38826: LD_VAR 0 1
38830: PPUSH
38831: LD_VAR 0 3
38835: PPUSH
38836: CALL_OW 500
// base := GetBase ( base_dep ) ;
38840: LD_ADDR_VAR 0 15
38844: PUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 274
38854: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38855: LD_ADDR_VAR 0 16
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 255
38869: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38870: LD_ADDR_VAR 0 17
38874: PUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 248
38884: ST_TO_ADDR
// if sources then
38885: LD_VAR 0 5
38889: IFFALSE 38936
// for i = 1 to 3 do
38891: LD_ADDR_VAR 0 8
38895: PUSH
38896: DOUBLE
38897: LD_INT 1
38899: DEC
38900: ST_TO_ADDR
38901: LD_INT 3
38903: PUSH
38904: FOR_TO
38905: IFFALSE 38934
// AddResourceType ( base , i , sources [ i ] ) ;
38907: LD_VAR 0 15
38911: PPUSH
38912: LD_VAR 0 8
38916: PPUSH
38917: LD_VAR 0 5
38921: PUSH
38922: LD_VAR 0 8
38926: ARRAY
38927: PPUSH
38928: CALL_OW 276
38932: GO 38904
38934: POP
38935: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38936: LD_ADDR_VAR 0 18
38940: PUSH
38941: LD_VAR 0 15
38945: PPUSH
38946: LD_VAR 0 2
38950: PPUSH
38951: LD_INT 1
38953: PPUSH
38954: CALL 38197 0 3
38958: ST_TO_ADDR
// InitHc ;
38959: CALL_OW 19
// InitUc ;
38963: CALL_OW 18
// uc_side := side ;
38967: LD_ADDR_OWVAR 20
38971: PUSH
38972: LD_VAR 0 16
38976: ST_TO_ADDR
// uc_nation := nation ;
38977: LD_ADDR_OWVAR 21
38981: PUSH
38982: LD_VAR 0 17
38986: ST_TO_ADDR
// if buildings then
38987: LD_VAR 0 18
38991: IFFALSE 40313
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38993: LD_ADDR_VAR 0 19
38997: PUSH
38998: LD_VAR 0 18
39002: PPUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 30
39008: PUSH
39009: LD_INT 29
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 30
39018: PUSH
39019: LD_INT 30
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 72
39035: ST_TO_ADDR
// if tmp then
39036: LD_VAR 0 19
39040: IFFALSE 39088
// for i in tmp do
39042: LD_ADDR_VAR 0 8
39046: PUSH
39047: LD_VAR 0 19
39051: PUSH
39052: FOR_IN
39053: IFFALSE 39086
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39055: LD_VAR 0 8
39059: PPUSH
39060: CALL_OW 250
39064: PPUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: CALL_OW 251
39074: PPUSH
39075: LD_VAR 0 16
39079: PPUSH
39080: CALL_OW 441
39084: GO 39052
39086: POP
39087: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39088: LD_VAR 0 18
39092: PPUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 30
39098: PUSH
39099: LD_INT 32
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: LD_INT 33
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: PPUSH
39121: CALL_OW 72
39125: IFFALSE 39213
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39127: LD_ADDR_VAR 0 8
39131: PUSH
39132: LD_VAR 0 18
39136: PPUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 30
39142: PUSH
39143: LD_INT 32
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 30
39152: PUSH
39153: LD_INT 33
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PPUSH
39165: CALL_OW 72
39169: PUSH
39170: FOR_IN
39171: IFFALSE 39211
// begin if not GetBWeapon ( i ) then
39173: LD_VAR 0 8
39177: PPUSH
39178: CALL_OW 269
39182: NOT
39183: IFFALSE 39209
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39185: LD_VAR 0 8
39189: PPUSH
39190: LD_VAR 0 8
39194: PPUSH
39195: LD_VAR 0 2
39199: PPUSH
39200: CALL 40459 0 2
39204: PPUSH
39205: CALL_OW 431
// end ;
39209: GO 39170
39211: POP
39212: POP
// end ; for i = 1 to personel do
39213: LD_ADDR_VAR 0 8
39217: PUSH
39218: DOUBLE
39219: LD_INT 1
39221: DEC
39222: ST_TO_ADDR
39223: LD_VAR 0 6
39227: PUSH
39228: FOR_TO
39229: IFFALSE 40293
// begin if i > 4 then
39231: LD_VAR 0 8
39235: PUSH
39236: LD_INT 4
39238: GREATER
39239: IFFALSE 39243
// break ;
39241: GO 40293
// case i of 1 :
39243: LD_VAR 0 8
39247: PUSH
39248: LD_INT 1
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39336
39256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39257: LD_ADDR_VAR 0 12
39261: PUSH
39262: LD_VAR 0 18
39266: PPUSH
39267: LD_INT 22
39269: PUSH
39270: LD_VAR 0 16
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 58
39281: PUSH
39282: EMPTY
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 30
39290: PUSH
39291: LD_INT 32
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 30
39310: PUSH
39311: LD_INT 5
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: PPUSH
39329: CALL_OW 72
39333: ST_TO_ADDR
39334: GO 39558
39336: LD_INT 2
39338: DOUBLE
39339: EQUAL
39340: IFTRUE 39344
39342: GO 39406
39344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39345: LD_ADDR_VAR 0 12
39349: PUSH
39350: LD_VAR 0 18
39354: PPUSH
39355: LD_INT 22
39357: PUSH
39358: LD_VAR 0 16
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 30
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 30
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PPUSH
39399: CALL_OW 72
39403: ST_TO_ADDR
39404: GO 39558
39406: LD_INT 3
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39414
39412: GO 39476
39414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39415: LD_ADDR_VAR 0 12
39419: PUSH
39420: LD_VAR 0 18
39424: PPUSH
39425: LD_INT 22
39427: PUSH
39428: LD_VAR 0 16
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PPUSH
39469: CALL_OW 72
39473: ST_TO_ADDR
39474: GO 39558
39476: LD_INT 4
39478: DOUBLE
39479: EQUAL
39480: IFTRUE 39484
39482: GO 39557
39484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39485: LD_ADDR_VAR 0 12
39489: PUSH
39490: LD_VAR 0 18
39494: PPUSH
39495: LD_INT 22
39497: PUSH
39498: LD_VAR 0 16
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 6
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 7
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 30
39532: PUSH
39533: LD_INT 8
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PPUSH
39550: CALL_OW 72
39554: ST_TO_ADDR
39555: GO 39558
39557: POP
// if i = 1 then
39558: LD_VAR 0 8
39562: PUSH
39563: LD_INT 1
39565: EQUAL
39566: IFFALSE 39677
// begin tmp := [ ] ;
39568: LD_ADDR_VAR 0 19
39572: PUSH
39573: EMPTY
39574: ST_TO_ADDR
// for j in f do
39575: LD_ADDR_VAR 0 9
39579: PUSH
39580: LD_VAR 0 12
39584: PUSH
39585: FOR_IN
39586: IFFALSE 39659
// if GetBType ( j ) = b_bunker then
39588: LD_VAR 0 9
39592: PPUSH
39593: CALL_OW 266
39597: PUSH
39598: LD_INT 32
39600: EQUAL
39601: IFFALSE 39628
// tmp := Insert ( tmp , 1 , j ) else
39603: LD_ADDR_VAR 0 19
39607: PUSH
39608: LD_VAR 0 19
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: LD_VAR 0 9
39620: PPUSH
39621: CALL_OW 2
39625: ST_TO_ADDR
39626: GO 39657
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39628: LD_ADDR_VAR 0 19
39632: PUSH
39633: LD_VAR 0 19
39637: PPUSH
39638: LD_VAR 0 19
39642: PUSH
39643: LD_INT 1
39645: PLUS
39646: PPUSH
39647: LD_VAR 0 9
39651: PPUSH
39652: CALL_OW 2
39656: ST_TO_ADDR
39657: GO 39585
39659: POP
39660: POP
// if tmp then
39661: LD_VAR 0 19
39665: IFFALSE 39677
// f := tmp ;
39667: LD_ADDR_VAR 0 12
39671: PUSH
39672: LD_VAR 0 19
39676: ST_TO_ADDR
// end ; x := personel [ i ] ;
39677: LD_ADDR_VAR 0 13
39681: PUSH
39682: LD_VAR 0 6
39686: PUSH
39687: LD_VAR 0 8
39691: ARRAY
39692: ST_TO_ADDR
// if x = - 1 then
39693: LD_VAR 0 13
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: EQUAL
39702: IFFALSE 39911
// begin for j in f do
39704: LD_ADDR_VAR 0 9
39708: PUSH
39709: LD_VAR 0 12
39713: PUSH
39714: FOR_IN
39715: IFFALSE 39907
// repeat InitHc ;
39717: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39721: LD_VAR 0 9
39725: PPUSH
39726: CALL_OW 266
39730: PUSH
39731: LD_INT 5
39733: EQUAL
39734: IFFALSE 39804
// begin if UnitsInside ( j ) < 3 then
39736: LD_VAR 0 9
39740: PPUSH
39741: CALL_OW 313
39745: PUSH
39746: LD_INT 3
39748: LESS
39749: IFFALSE 39785
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39751: LD_INT 0
39753: PPUSH
39754: LD_INT 5
39756: PUSH
39757: LD_INT 8
39759: PUSH
39760: LD_INT 9
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: PUSH
39768: LD_VAR 0 17
39772: ARRAY
39773: PPUSH
39774: LD_VAR 0 4
39778: PPUSH
39779: CALL_OW 380
39783: GO 39802
// PrepareHuman ( false , i , skill ) ;
39785: LD_INT 0
39787: PPUSH
39788: LD_VAR 0 8
39792: PPUSH
39793: LD_VAR 0 4
39797: PPUSH
39798: CALL_OW 380
// end else
39802: GO 39821
// PrepareHuman ( false , i , skill ) ;
39804: LD_INT 0
39806: PPUSH
39807: LD_VAR 0 8
39811: PPUSH
39812: LD_VAR 0 4
39816: PPUSH
39817: CALL_OW 380
// un := CreateHuman ;
39821: LD_ADDR_VAR 0 14
39825: PUSH
39826: CALL_OW 44
39830: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39831: LD_ADDR_VAR 0 7
39835: PUSH
39836: LD_VAR 0 7
39840: PPUSH
39841: LD_INT 1
39843: PPUSH
39844: LD_VAR 0 14
39848: PPUSH
39849: CALL_OW 2
39853: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39854: LD_VAR 0 14
39858: PPUSH
39859: LD_VAR 0 9
39863: PPUSH
39864: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39868: LD_VAR 0 9
39872: PPUSH
39873: CALL_OW 313
39877: PUSH
39878: LD_INT 6
39880: EQUAL
39881: PUSH
39882: LD_VAR 0 9
39886: PPUSH
39887: CALL_OW 266
39891: PUSH
39892: LD_INT 32
39894: PUSH
39895: LD_INT 31
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: IN
39902: OR
39903: IFFALSE 39717
39905: GO 39714
39907: POP
39908: POP
// end else
39909: GO 40291
// for j = 1 to x do
39911: LD_ADDR_VAR 0 9
39915: PUSH
39916: DOUBLE
39917: LD_INT 1
39919: DEC
39920: ST_TO_ADDR
39921: LD_VAR 0 13
39925: PUSH
39926: FOR_TO
39927: IFFALSE 40289
// begin InitHc ;
39929: CALL_OW 19
// if not f then
39933: LD_VAR 0 12
39937: NOT
39938: IFFALSE 40027
// begin PrepareHuman ( false , i , skill ) ;
39940: LD_INT 0
39942: PPUSH
39943: LD_VAR 0 8
39947: PPUSH
39948: LD_VAR 0 4
39952: PPUSH
39953: CALL_OW 380
// un := CreateHuman ;
39957: LD_ADDR_VAR 0 14
39961: PUSH
39962: CALL_OW 44
39966: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39967: LD_ADDR_VAR 0 7
39971: PUSH
39972: LD_VAR 0 7
39976: PPUSH
39977: LD_INT 1
39979: PPUSH
39980: LD_VAR 0 14
39984: PPUSH
39985: CALL_OW 2
39989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39990: LD_VAR 0 14
39994: PPUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 250
40004: PPUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 251
40014: PPUSH
40015: LD_INT 10
40017: PPUSH
40018: LD_INT 0
40020: PPUSH
40021: CALL_OW 50
// continue ;
40025: GO 39926
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40027: LD_VAR 0 12
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: CALL_OW 313
40040: PUSH
40041: LD_VAR 0 12
40045: PUSH
40046: LD_INT 1
40048: ARRAY
40049: PPUSH
40050: CALL_OW 266
40054: PUSH
40055: LD_INT 32
40057: PUSH
40058: LD_INT 31
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: IN
40065: AND
40066: PUSH
40067: LD_VAR 0 12
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: PPUSH
40076: CALL_OW 313
40080: PUSH
40081: LD_INT 6
40083: EQUAL
40084: OR
40085: IFFALSE 40105
// f := Delete ( f , 1 ) ;
40087: LD_ADDR_VAR 0 12
40091: PUSH
40092: LD_VAR 0 12
40096: PPUSH
40097: LD_INT 1
40099: PPUSH
40100: CALL_OW 3
40104: ST_TO_ADDR
// if not f then
40105: LD_VAR 0 12
40109: NOT
40110: IFFALSE 40128
// begin x := x + 2 ;
40112: LD_ADDR_VAR 0 13
40116: PUSH
40117: LD_VAR 0 13
40121: PUSH
40122: LD_INT 2
40124: PLUS
40125: ST_TO_ADDR
// continue ;
40126: GO 39926
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40128: LD_VAR 0 12
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PPUSH
40137: CALL_OW 266
40141: PUSH
40142: LD_INT 5
40144: EQUAL
40145: IFFALSE 40219
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40147: LD_VAR 0 12
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PPUSH
40156: CALL_OW 313
40160: PUSH
40161: LD_INT 3
40163: LESS
40164: IFFALSE 40200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40166: LD_INT 0
40168: PPUSH
40169: LD_INT 5
40171: PUSH
40172: LD_INT 8
40174: PUSH
40175: LD_INT 9
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: PUSH
40183: LD_VAR 0 17
40187: ARRAY
40188: PPUSH
40189: LD_VAR 0 4
40193: PPUSH
40194: CALL_OW 380
40198: GO 40217
// PrepareHuman ( false , i , skill ) ;
40200: LD_INT 0
40202: PPUSH
40203: LD_VAR 0 8
40207: PPUSH
40208: LD_VAR 0 4
40212: PPUSH
40213: CALL_OW 380
// end else
40217: GO 40236
// PrepareHuman ( false , i , skill ) ;
40219: LD_INT 0
40221: PPUSH
40222: LD_VAR 0 8
40226: PPUSH
40227: LD_VAR 0 4
40231: PPUSH
40232: CALL_OW 380
// un := CreateHuman ;
40236: LD_ADDR_VAR 0 14
40240: PUSH
40241: CALL_OW 44
40245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40246: LD_ADDR_VAR 0 7
40250: PUSH
40251: LD_VAR 0 7
40255: PPUSH
40256: LD_INT 1
40258: PPUSH
40259: LD_VAR 0 14
40263: PPUSH
40264: CALL_OW 2
40268: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40269: LD_VAR 0 14
40273: PPUSH
40274: LD_VAR 0 12
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: PPUSH
40283: CALL_OW 52
// end ;
40287: GO 39926
40289: POP
40290: POP
// end ;
40291: GO 39228
40293: POP
40294: POP
// result := result ^ buildings ;
40295: LD_ADDR_VAR 0 7
40299: PUSH
40300: LD_VAR 0 7
40304: PUSH
40305: LD_VAR 0 18
40309: ADD
40310: ST_TO_ADDR
// end else
40311: GO 40454
// begin for i = 1 to personel do
40313: LD_ADDR_VAR 0 8
40317: PUSH
40318: DOUBLE
40319: LD_INT 1
40321: DEC
40322: ST_TO_ADDR
40323: LD_VAR 0 6
40327: PUSH
40328: FOR_TO
40329: IFFALSE 40452
// begin if i > 4 then
40331: LD_VAR 0 8
40335: PUSH
40336: LD_INT 4
40338: GREATER
40339: IFFALSE 40343
// break ;
40341: GO 40452
// x := personel [ i ] ;
40343: LD_ADDR_VAR 0 13
40347: PUSH
40348: LD_VAR 0 6
40352: PUSH
40353: LD_VAR 0 8
40357: ARRAY
40358: ST_TO_ADDR
// if x = - 1 then
40359: LD_VAR 0 13
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: EQUAL
40368: IFFALSE 40372
// continue ;
40370: GO 40328
// PrepareHuman ( false , i , skill ) ;
40372: LD_INT 0
40374: PPUSH
40375: LD_VAR 0 8
40379: PPUSH
40380: LD_VAR 0 4
40384: PPUSH
40385: CALL_OW 380
// un := CreateHuman ;
40389: LD_ADDR_VAR 0 14
40393: PUSH
40394: CALL_OW 44
40398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40399: LD_VAR 0 14
40403: PPUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 250
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 251
40423: PPUSH
40424: LD_INT 10
40426: PPUSH
40427: LD_INT 0
40429: PPUSH
40430: CALL_OW 50
// result := result ^ un ;
40434: LD_ADDR_VAR 0 7
40438: PUSH
40439: LD_VAR 0 7
40443: PUSH
40444: LD_VAR 0 14
40448: ADD
40449: ST_TO_ADDR
// end ;
40450: GO 40328
40452: POP
40453: POP
// end ; end ;
40454: LD_VAR 0 7
40458: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40459: LD_INT 0
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
// result := false ;
40477: LD_ADDR_VAR 0 3
40481: PUSH
40482: LD_INT 0
40484: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40485: LD_VAR 0 1
40489: NOT
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 266
40500: PUSH
40501: LD_INT 32
40503: PUSH
40504: LD_INT 33
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: IN
40511: NOT
40512: OR
40513: IFFALSE 40517
// exit ;
40515: GO 41626
// nat := GetNation ( tower ) ;
40517: LD_ADDR_VAR 0 12
40521: PUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: CALL_OW 248
40531: ST_TO_ADDR
// side := GetSide ( tower ) ;
40532: LD_ADDR_VAR 0 16
40536: PUSH
40537: LD_VAR 0 1
40541: PPUSH
40542: CALL_OW 255
40546: ST_TO_ADDR
// x := GetX ( tower ) ;
40547: LD_ADDR_VAR 0 10
40551: PUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 250
40561: ST_TO_ADDR
// y := GetY ( tower ) ;
40562: LD_ADDR_VAR 0 11
40566: PUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 251
40576: ST_TO_ADDR
// if not x or not y then
40577: LD_VAR 0 10
40581: NOT
40582: PUSH
40583: LD_VAR 0 11
40587: NOT
40588: OR
40589: IFFALSE 40593
// exit ;
40591: GO 41626
// weapon := 0 ;
40593: LD_ADDR_VAR 0 18
40597: PUSH
40598: LD_INT 0
40600: ST_TO_ADDR
// fac_list := [ ] ;
40601: LD_ADDR_VAR 0 17
40605: PUSH
40606: EMPTY
40607: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40608: LD_ADDR_VAR 0 6
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 274
40622: PPUSH
40623: LD_VAR 0 2
40627: PPUSH
40628: LD_INT 0
40630: PPUSH
40631: CALL 38197 0 3
40635: PPUSH
40636: LD_INT 30
40638: PUSH
40639: LD_INT 3
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PPUSH
40646: CALL_OW 72
40650: ST_TO_ADDR
// if not factories then
40651: LD_VAR 0 6
40655: NOT
40656: IFFALSE 40660
// exit ;
40658: GO 41626
// for i in factories do
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 6
40669: PUSH
40670: FOR_IN
40671: IFFALSE 40696
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40673: LD_ADDR_VAR 0 17
40677: PUSH
40678: LD_VAR 0 17
40682: PUSH
40683: LD_VAR 0 8
40687: PPUSH
40688: CALL_OW 478
40692: UNION
40693: ST_TO_ADDR
40694: GO 40670
40696: POP
40697: POP
// if not fac_list then
40698: LD_VAR 0 17
40702: NOT
40703: IFFALSE 40707
// exit ;
40705: GO 41626
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40707: LD_ADDR_VAR 0 5
40711: PUSH
40712: LD_INT 4
40714: PUSH
40715: LD_INT 5
40717: PUSH
40718: LD_INT 9
40720: PUSH
40721: LD_INT 10
40723: PUSH
40724: LD_INT 6
40726: PUSH
40727: LD_INT 7
40729: PUSH
40730: LD_INT 11
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 27
40744: PUSH
40745: LD_INT 28
40747: PUSH
40748: LD_INT 26
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 43
40762: PUSH
40763: LD_INT 44
40765: PUSH
40766: LD_INT 46
40768: PUSH
40769: LD_INT 45
40771: PUSH
40772: LD_INT 47
40774: PUSH
40775: LD_INT 49
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: PUSH
40791: LD_VAR 0 12
40795: ARRAY
40796: ST_TO_ADDR
// list := list isect fac_list ;
40797: LD_ADDR_VAR 0 5
40801: PUSH
40802: LD_VAR 0 5
40806: PUSH
40807: LD_VAR 0 17
40811: ISECT
40812: ST_TO_ADDR
// if not list then
40813: LD_VAR 0 5
40817: NOT
40818: IFFALSE 40822
// exit ;
40820: GO 41626
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40822: LD_VAR 0 12
40826: PUSH
40827: LD_INT 3
40829: EQUAL
40830: PUSH
40831: LD_INT 49
40833: PUSH
40834: LD_VAR 0 5
40838: IN
40839: AND
40840: PUSH
40841: LD_INT 31
40843: PPUSH
40844: LD_VAR 0 16
40848: PPUSH
40849: CALL_OW 321
40853: PUSH
40854: LD_INT 2
40856: EQUAL
40857: AND
40858: IFFALSE 40918
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40860: LD_INT 22
40862: PUSH
40863: LD_VAR 0 16
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 35
40874: PUSH
40875: LD_INT 49
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 91
40884: PUSH
40885: LD_VAR 0 1
40889: PUSH
40890: LD_INT 10
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: PPUSH
40903: CALL_OW 69
40907: NOT
40908: IFFALSE 40918
// weapon := ru_time_lapser ;
40910: LD_ADDR_VAR 0 18
40914: PUSH
40915: LD_INT 49
40917: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40918: LD_VAR 0 12
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: IN
40933: PUSH
40934: LD_INT 11
40936: PUSH
40937: LD_VAR 0 5
40941: IN
40942: PUSH
40943: LD_INT 30
40945: PUSH
40946: LD_VAR 0 5
40950: IN
40951: OR
40952: AND
40953: PUSH
40954: LD_INT 6
40956: PPUSH
40957: LD_VAR 0 16
40961: PPUSH
40962: CALL_OW 321
40966: PUSH
40967: LD_INT 2
40969: EQUAL
40970: AND
40971: IFFALSE 41136
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40973: LD_INT 22
40975: PUSH
40976: LD_VAR 0 16
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 35
40990: PUSH
40991: LD_INT 11
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 35
41000: PUSH
41001: LD_INT 30
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 91
41015: PUSH
41016: LD_VAR 0 1
41020: PUSH
41021: LD_INT 18
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: PPUSH
41034: CALL_OW 69
41038: NOT
41039: PUSH
41040: LD_INT 22
41042: PUSH
41043: LD_VAR 0 16
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 30
41057: PUSH
41058: LD_INT 32
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 30
41067: PUSH
41068: LD_INT 33
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 91
41082: PUSH
41083: LD_VAR 0 1
41087: PUSH
41088: LD_INT 12
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: PPUSH
41104: CALL_OW 69
41108: PUSH
41109: LD_INT 2
41111: GREATER
41112: AND
41113: IFFALSE 41136
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41115: LD_ADDR_VAR 0 18
41119: PUSH
41120: LD_INT 11
41122: PUSH
41123: LD_INT 30
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_VAR 0 12
41134: ARRAY
41135: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41136: LD_VAR 0 18
41140: NOT
41141: PUSH
41142: LD_INT 40
41144: PPUSH
41145: LD_VAR 0 16
41149: PPUSH
41150: CALL_OW 321
41154: PUSH
41155: LD_INT 2
41157: EQUAL
41158: AND
41159: PUSH
41160: LD_INT 7
41162: PUSH
41163: LD_VAR 0 5
41167: IN
41168: PUSH
41169: LD_INT 28
41171: PUSH
41172: LD_VAR 0 5
41176: IN
41177: OR
41178: PUSH
41179: LD_INT 45
41181: PUSH
41182: LD_VAR 0 5
41186: IN
41187: OR
41188: AND
41189: IFFALSE 41443
// begin hex := GetHexInfo ( x , y ) ;
41191: LD_ADDR_VAR 0 4
41195: PUSH
41196: LD_VAR 0 10
41200: PPUSH
41201: LD_VAR 0 11
41205: PPUSH
41206: CALL_OW 546
41210: ST_TO_ADDR
// if hex [ 1 ] then
41211: LD_VAR 0 4
41215: PUSH
41216: LD_INT 1
41218: ARRAY
41219: IFFALSE 41223
// exit ;
41221: GO 41626
// height := hex [ 2 ] ;
41223: LD_ADDR_VAR 0 15
41227: PUSH
41228: LD_VAR 0 4
41232: PUSH
41233: LD_INT 2
41235: ARRAY
41236: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41237: LD_ADDR_VAR 0 14
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 5
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// for i in tmp do
41260: LD_ADDR_VAR 0 8
41264: PUSH
41265: LD_VAR 0 14
41269: PUSH
41270: FOR_IN
41271: IFFALSE 41441
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41273: LD_ADDR_VAR 0 9
41277: PUSH
41278: LD_VAR 0 10
41282: PPUSH
41283: LD_VAR 0 8
41287: PPUSH
41288: LD_INT 5
41290: PPUSH
41291: CALL_OW 272
41295: PUSH
41296: LD_VAR 0 11
41300: PPUSH
41301: LD_VAR 0 8
41305: PPUSH
41306: LD_INT 5
41308: PPUSH
41309: CALL_OW 273
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41318: LD_VAR 0 9
41322: PUSH
41323: LD_INT 1
41325: ARRAY
41326: PPUSH
41327: LD_VAR 0 9
41331: PUSH
41332: LD_INT 2
41334: ARRAY
41335: PPUSH
41336: CALL_OW 488
41340: IFFALSE 41439
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41342: LD_ADDR_VAR 0 4
41346: PUSH
41347: LD_VAR 0 9
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: LD_VAR 0 9
41360: PUSH
41361: LD_INT 2
41363: ARRAY
41364: PPUSH
41365: CALL_OW 546
41369: ST_TO_ADDR
// if hex [ 1 ] then
41370: LD_VAR 0 4
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: IFFALSE 41382
// continue ;
41380: GO 41270
// h := hex [ 2 ] ;
41382: LD_ADDR_VAR 0 13
41386: PUSH
41387: LD_VAR 0 4
41391: PUSH
41392: LD_INT 2
41394: ARRAY
41395: ST_TO_ADDR
// if h + 7 < height then
41396: LD_VAR 0 13
41400: PUSH
41401: LD_INT 7
41403: PLUS
41404: PUSH
41405: LD_VAR 0 15
41409: LESS
41410: IFFALSE 41439
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41412: LD_ADDR_VAR 0 18
41416: PUSH
41417: LD_INT 7
41419: PUSH
41420: LD_INT 28
41422: PUSH
41423: LD_INT 45
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: LD_VAR 0 12
41435: ARRAY
41436: ST_TO_ADDR
// break ;
41437: GO 41441
// end ; end ; end ;
41439: GO 41270
41441: POP
41442: POP
// end ; if not weapon then
41443: LD_VAR 0 18
41447: NOT
41448: IFFALSE 41508
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41450: LD_ADDR_VAR 0 5
41454: PUSH
41455: LD_VAR 0 5
41459: PUSH
41460: LD_INT 11
41462: PUSH
41463: LD_INT 30
41465: PUSH
41466: LD_INT 49
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: LIST
41473: DIFF
41474: ST_TO_ADDR
// if not list then
41475: LD_VAR 0 5
41479: NOT
41480: IFFALSE 41484
// exit ;
41482: GO 41626
// weapon := list [ rand ( 1 , list ) ] ;
41484: LD_ADDR_VAR 0 18
41488: PUSH
41489: LD_VAR 0 5
41493: PUSH
41494: LD_INT 1
41496: PPUSH
41497: LD_VAR 0 5
41501: PPUSH
41502: CALL_OW 12
41506: ARRAY
41507: ST_TO_ADDR
// end ; if weapon then
41508: LD_VAR 0 18
41512: IFFALSE 41626
// begin tmp := CostOfWeapon ( weapon ) ;
41514: LD_ADDR_VAR 0 14
41518: PUSH
41519: LD_VAR 0 18
41523: PPUSH
41524: CALL_OW 451
41528: ST_TO_ADDR
// j := GetBase ( tower ) ;
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: CALL_OW 274
41543: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41544: LD_VAR 0 9
41548: PPUSH
41549: LD_INT 1
41551: PPUSH
41552: CALL_OW 275
41556: PUSH
41557: LD_VAR 0 14
41561: PUSH
41562: LD_INT 1
41564: ARRAY
41565: GREATEREQUAL
41566: PUSH
41567: LD_VAR 0 9
41571: PPUSH
41572: LD_INT 2
41574: PPUSH
41575: CALL_OW 275
41579: PUSH
41580: LD_VAR 0 14
41584: PUSH
41585: LD_INT 2
41587: ARRAY
41588: GREATEREQUAL
41589: AND
41590: PUSH
41591: LD_VAR 0 9
41595: PPUSH
41596: LD_INT 3
41598: PPUSH
41599: CALL_OW 275
41603: PUSH
41604: LD_VAR 0 14
41608: PUSH
41609: LD_INT 3
41611: ARRAY
41612: GREATEREQUAL
41613: AND
41614: IFFALSE 41626
// result := weapon ;
41616: LD_ADDR_VAR 0 3
41620: PUSH
41621: LD_VAR 0 18
41625: ST_TO_ADDR
// end ; end ;
41626: LD_VAR 0 3
41630: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41631: LD_INT 0
41633: PPUSH
41634: PPUSH
// result := true ;
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_INT 1
41642: ST_TO_ADDR
// if array1 = array2 then
41643: LD_VAR 0 1
41647: PUSH
41648: LD_VAR 0 2
41652: EQUAL
41653: IFFALSE 41713
// begin for i = 1 to array1 do
41655: LD_ADDR_VAR 0 4
41659: PUSH
41660: DOUBLE
41661: LD_INT 1
41663: DEC
41664: ST_TO_ADDR
41665: LD_VAR 0 1
41669: PUSH
41670: FOR_TO
41671: IFFALSE 41709
// if array1 [ i ] <> array2 [ i ] then
41673: LD_VAR 0 1
41677: PUSH
41678: LD_VAR 0 4
41682: ARRAY
41683: PUSH
41684: LD_VAR 0 2
41688: PUSH
41689: LD_VAR 0 4
41693: ARRAY
41694: NONEQUAL
41695: IFFALSE 41707
// begin result := false ;
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_INT 0
41704: ST_TO_ADDR
// break ;
41705: GO 41709
// end ;
41707: GO 41670
41709: POP
41710: POP
// end else
41711: GO 41721
// result := false ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_INT 0
41720: ST_TO_ADDR
// end ;
41721: LD_VAR 0 3
41725: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41726: LD_INT 0
41728: PPUSH
41729: PPUSH
// if not array1 or not array2 then
41730: LD_VAR 0 1
41734: NOT
41735: PUSH
41736: LD_VAR 0 2
41740: NOT
41741: OR
41742: IFFALSE 41746
// exit ;
41744: GO 41810
// result := true ;
41746: LD_ADDR_VAR 0 3
41750: PUSH
41751: LD_INT 1
41753: ST_TO_ADDR
// for i = 1 to array1 do
41754: LD_ADDR_VAR 0 4
41758: PUSH
41759: DOUBLE
41760: LD_INT 1
41762: DEC
41763: ST_TO_ADDR
41764: LD_VAR 0 1
41768: PUSH
41769: FOR_TO
41770: IFFALSE 41808
// if array1 [ i ] <> array2 [ i ] then
41772: LD_VAR 0 1
41776: PUSH
41777: LD_VAR 0 4
41781: ARRAY
41782: PUSH
41783: LD_VAR 0 2
41787: PUSH
41788: LD_VAR 0 4
41792: ARRAY
41793: NONEQUAL
41794: IFFALSE 41806
// begin result := false ;
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 0
41803: ST_TO_ADDR
// break ;
41804: GO 41808
// end ;
41806: GO 41769
41808: POP
41809: POP
// end ;
41810: LD_VAR 0 3
41814: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41815: LD_INT 0
41817: PPUSH
41818: PPUSH
41819: PPUSH
// pom := GetBase ( fac ) ;
41820: LD_ADDR_VAR 0 5
41824: PUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 274
41834: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: LD_VAR 0 2
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PPUSH
41849: LD_VAR 0 2
41853: PUSH
41854: LD_INT 2
41856: ARRAY
41857: PPUSH
41858: LD_VAR 0 2
41862: PUSH
41863: LD_INT 3
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 2
41871: PUSH
41872: LD_INT 4
41874: ARRAY
41875: PPUSH
41876: CALL_OW 449
41880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41881: LD_ADDR_VAR 0 3
41885: PUSH
41886: LD_VAR 0 5
41890: PPUSH
41891: LD_INT 1
41893: PPUSH
41894: CALL_OW 275
41898: PUSH
41899: LD_VAR 0 4
41903: PUSH
41904: LD_INT 1
41906: ARRAY
41907: GREATEREQUAL
41908: PUSH
41909: LD_VAR 0 5
41913: PPUSH
41914: LD_INT 2
41916: PPUSH
41917: CALL_OW 275
41921: PUSH
41922: LD_VAR 0 4
41926: PUSH
41927: LD_INT 2
41929: ARRAY
41930: GREATEREQUAL
41931: AND
41932: PUSH
41933: LD_VAR 0 5
41937: PPUSH
41938: LD_INT 3
41940: PPUSH
41941: CALL_OW 275
41945: PUSH
41946: LD_VAR 0 4
41950: PUSH
41951: LD_INT 3
41953: ARRAY
41954: GREATEREQUAL
41955: AND
41956: ST_TO_ADDR
// end ;
41957: LD_VAR 0 3
41961: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41962: LD_INT 0
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
// pom := GetBase ( building ) ;
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_VAR 0 1
41977: PPUSH
41978: CALL_OW 274
41982: ST_TO_ADDR
// if not pom then
41983: LD_VAR 0 3
41987: NOT
41988: IFFALSE 41992
// exit ;
41990: GO 42162
// btype := GetBType ( building ) ;
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL_OW 266
42006: ST_TO_ADDR
// if btype = b_armoury then
42007: LD_VAR 0 5
42011: PUSH
42012: LD_INT 4
42014: EQUAL
42015: IFFALSE 42025
// btype := b_barracks ;
42017: LD_ADDR_VAR 0 5
42021: PUSH
42022: LD_INT 5
42024: ST_TO_ADDR
// if btype = b_depot then
42025: LD_VAR 0 5
42029: PUSH
42030: LD_INT 0
42032: EQUAL
42033: IFFALSE 42043
// btype := b_warehouse ;
42035: LD_ADDR_VAR 0 5
42039: PUSH
42040: LD_INT 1
42042: ST_TO_ADDR
// if btype = b_workshop then
42043: LD_VAR 0 5
42047: PUSH
42048: LD_INT 2
42050: EQUAL
42051: IFFALSE 42061
// btype := b_factory ;
42053: LD_ADDR_VAR 0 5
42057: PUSH
42058: LD_INT 3
42060: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42061: LD_ADDR_VAR 0 4
42065: PUSH
42066: LD_VAR 0 5
42070: PPUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 248
42080: PPUSH
42081: CALL_OW 450
42085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42086: LD_ADDR_VAR 0 2
42090: PUSH
42091: LD_VAR 0 3
42095: PPUSH
42096: LD_INT 1
42098: PPUSH
42099: CALL_OW 275
42103: PUSH
42104: LD_VAR 0 4
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: GREATEREQUAL
42113: PUSH
42114: LD_VAR 0 3
42118: PPUSH
42119: LD_INT 2
42121: PPUSH
42122: CALL_OW 275
42126: PUSH
42127: LD_VAR 0 4
42131: PUSH
42132: LD_INT 2
42134: ARRAY
42135: GREATEREQUAL
42136: AND
42137: PUSH
42138: LD_VAR 0 3
42142: PPUSH
42143: LD_INT 3
42145: PPUSH
42146: CALL_OW 275
42150: PUSH
42151: LD_VAR 0 4
42155: PUSH
42156: LD_INT 3
42158: ARRAY
42159: GREATEREQUAL
42160: AND
42161: ST_TO_ADDR
// end ;
42162: LD_VAR 0 2
42166: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42167: LD_INT 0
42169: PPUSH
42170: PPUSH
42171: PPUSH
// pom := GetBase ( building ) ;
42172: LD_ADDR_VAR 0 4
42176: PUSH
42177: LD_VAR 0 1
42181: PPUSH
42182: CALL_OW 274
42186: ST_TO_ADDR
// if not pom then
42187: LD_VAR 0 4
42191: NOT
42192: IFFALSE 42196
// exit ;
42194: GO 42297
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_VAR 0 2
42205: PPUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 248
42215: PPUSH
42216: CALL_OW 450
42220: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42221: LD_ADDR_VAR 0 3
42225: PUSH
42226: LD_VAR 0 4
42230: PPUSH
42231: LD_INT 1
42233: PPUSH
42234: CALL_OW 275
42238: PUSH
42239: LD_VAR 0 5
42243: PUSH
42244: LD_INT 1
42246: ARRAY
42247: GREATEREQUAL
42248: PUSH
42249: LD_VAR 0 4
42253: PPUSH
42254: LD_INT 2
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 5
42266: PUSH
42267: LD_INT 2
42269: ARRAY
42270: GREATEREQUAL
42271: AND
42272: PUSH
42273: LD_VAR 0 4
42277: PPUSH
42278: LD_INT 3
42280: PPUSH
42281: CALL_OW 275
42285: PUSH
42286: LD_VAR 0 5
42290: PUSH
42291: LD_INT 3
42293: ARRAY
42294: GREATEREQUAL
42295: AND
42296: ST_TO_ADDR
// end ;
42297: LD_VAR 0 3
42301: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42302: LD_INT 0
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
// result := false ;
42315: LD_ADDR_VAR 0 8
42319: PUSH
42320: LD_INT 0
42322: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42323: LD_VAR 0 5
42327: NOT
42328: PUSH
42329: LD_VAR 0 1
42333: NOT
42334: OR
42335: PUSH
42336: LD_VAR 0 2
42340: NOT
42341: OR
42342: PUSH
42343: LD_VAR 0 3
42347: NOT
42348: OR
42349: IFFALSE 42353
// exit ;
42351: GO 43167
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42353: LD_ADDR_VAR 0 14
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 2
42367: PPUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: LD_VAR 0 4
42377: PPUSH
42378: LD_VAR 0 5
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: PPUSH
42387: CALL_OW 248
42391: PPUSH
42392: LD_INT 0
42394: PPUSH
42395: CALL 44400 0 6
42399: ST_TO_ADDR
// if not hexes then
42400: LD_VAR 0 14
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 43167
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42409: LD_ADDR_VAR 0 17
42413: PUSH
42414: LD_VAR 0 5
42418: PPUSH
42419: LD_INT 22
42421: PUSH
42422: LD_VAR 0 13
42426: PPUSH
42427: CALL_OW 255
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 30
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 30
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PPUSH
42468: CALL_OW 72
42472: ST_TO_ADDR
// for i = 1 to hexes do
42473: LD_ADDR_VAR 0 9
42477: PUSH
42478: DOUBLE
42479: LD_INT 1
42481: DEC
42482: ST_TO_ADDR
42483: LD_VAR 0 14
42487: PUSH
42488: FOR_TO
42489: IFFALSE 43165
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42491: LD_ADDR_VAR 0 13
42495: PUSH
42496: LD_VAR 0 14
42500: PUSH
42501: LD_VAR 0 9
42505: ARRAY
42506: PUSH
42507: LD_INT 1
42509: ARRAY
42510: PPUSH
42511: LD_VAR 0 14
42515: PUSH
42516: LD_VAR 0 9
42520: ARRAY
42521: PUSH
42522: LD_INT 2
42524: ARRAY
42525: PPUSH
42526: CALL_OW 428
42530: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42531: LD_VAR 0 14
42535: PUSH
42536: LD_VAR 0 9
42540: ARRAY
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PPUSH
42546: LD_VAR 0 14
42550: PUSH
42551: LD_VAR 0 9
42555: ARRAY
42556: PUSH
42557: LD_INT 2
42559: ARRAY
42560: PPUSH
42561: CALL_OW 351
42565: PUSH
42566: LD_VAR 0 14
42570: PUSH
42571: LD_VAR 0 9
42575: ARRAY
42576: PUSH
42577: LD_INT 1
42579: ARRAY
42580: PPUSH
42581: LD_VAR 0 14
42585: PUSH
42586: LD_VAR 0 9
42590: ARRAY
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 488
42600: NOT
42601: OR
42602: PUSH
42603: LD_VAR 0 13
42607: PPUSH
42608: CALL_OW 247
42612: PUSH
42613: LD_INT 3
42615: EQUAL
42616: OR
42617: IFFALSE 42623
// exit ;
42619: POP
42620: POP
42621: GO 43167
// if not tmp then
42623: LD_VAR 0 13
42627: NOT
42628: IFFALSE 42632
// continue ;
42630: GO 42488
// result := true ;
42632: LD_ADDR_VAR 0 8
42636: PUSH
42637: LD_INT 1
42639: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42640: LD_VAR 0 6
42644: PUSH
42645: LD_VAR 0 13
42649: PPUSH
42650: CALL_OW 247
42654: PUSH
42655: LD_INT 2
42657: EQUAL
42658: AND
42659: PUSH
42660: LD_VAR 0 13
42664: PPUSH
42665: CALL_OW 263
42669: PUSH
42670: LD_INT 1
42672: EQUAL
42673: AND
42674: IFFALSE 42838
// begin if IsDrivenBy ( tmp ) then
42676: LD_VAR 0 13
42680: PPUSH
42681: CALL_OW 311
42685: IFFALSE 42689
// continue ;
42687: GO 42488
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42689: LD_VAR 0 6
42693: PPUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 60
42699: PUSH
42700: EMPTY
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 55
42712: PUSH
42713: EMPTY
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PPUSH
42724: CALL_OW 72
42728: IFFALSE 42836
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42730: LD_ADDR_VAR 0 18
42734: PUSH
42735: LD_VAR 0 6
42739: PPUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 60
42745: PUSH
42746: EMPTY
42747: LIST
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 55
42758: PUSH
42759: EMPTY
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 72
42774: PUSH
42775: LD_INT 1
42777: ARRAY
42778: ST_TO_ADDR
// if IsInUnit ( driver ) then
42779: LD_VAR 0 18
42783: PPUSH
42784: CALL_OW 310
42788: IFFALSE 42799
// ComExit ( driver ) ;
42790: LD_VAR 0 18
42794: PPUSH
42795: CALL 68180 0 1
// AddComEnterUnit ( driver , tmp ) ;
42799: LD_VAR 0 18
42803: PPUSH
42804: LD_VAR 0 13
42808: PPUSH
42809: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42813: LD_VAR 0 18
42817: PPUSH
42818: LD_VAR 0 7
42822: PPUSH
42823: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42827: LD_VAR 0 18
42831: PPUSH
42832: CALL_OW 181
// end ; continue ;
42836: GO 42488
// end ; if not cleaners or not tmp in cleaners then
42838: LD_VAR 0 6
42842: NOT
42843: PUSH
42844: LD_VAR 0 13
42848: PUSH
42849: LD_VAR 0 6
42853: IN
42854: NOT
42855: OR
42856: IFFALSE 43163
// begin if dep then
42858: LD_VAR 0 17
42862: IFFALSE 42998
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42864: LD_ADDR_VAR 0 16
42868: PUSH
42869: LD_VAR 0 17
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: PPUSH
42878: CALL_OW 250
42882: PPUSH
42883: LD_VAR 0 17
42887: PUSH
42888: LD_INT 1
42890: ARRAY
42891: PPUSH
42892: CALL_OW 254
42896: PPUSH
42897: LD_INT 5
42899: PPUSH
42900: CALL_OW 272
42904: PUSH
42905: LD_VAR 0 17
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: CALL_OW 251
42918: PPUSH
42919: LD_VAR 0 17
42923: PUSH
42924: LD_INT 1
42926: ARRAY
42927: PPUSH
42928: CALL_OW 254
42932: PPUSH
42933: LD_INT 5
42935: PPUSH
42936: CALL_OW 273
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42945: LD_VAR 0 16
42949: PUSH
42950: LD_INT 1
42952: ARRAY
42953: PPUSH
42954: LD_VAR 0 16
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: PPUSH
42963: CALL_OW 488
42967: IFFALSE 42998
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42969: LD_VAR 0 13
42973: PPUSH
42974: LD_VAR 0 16
42978: PUSH
42979: LD_INT 1
42981: ARRAY
42982: PPUSH
42983: LD_VAR 0 16
42987: PUSH
42988: LD_INT 2
42990: ARRAY
42991: PPUSH
42992: CALL_OW 111
// continue ;
42996: GO 42488
// end ; end ; r := GetDir ( tmp ) ;
42998: LD_ADDR_VAR 0 15
43002: PUSH
43003: LD_VAR 0 13
43007: PPUSH
43008: CALL_OW 254
43012: ST_TO_ADDR
// if r = 5 then
43013: LD_VAR 0 15
43017: PUSH
43018: LD_INT 5
43020: EQUAL
43021: IFFALSE 43031
// r := 0 ;
43023: LD_ADDR_VAR 0 15
43027: PUSH
43028: LD_INT 0
43030: ST_TO_ADDR
// for j = r to 5 do
43031: LD_ADDR_VAR 0 10
43035: PUSH
43036: DOUBLE
43037: LD_VAR 0 15
43041: DEC
43042: ST_TO_ADDR
43043: LD_INT 5
43045: PUSH
43046: FOR_TO
43047: IFFALSE 43161
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43049: LD_ADDR_VAR 0 11
43053: PUSH
43054: LD_VAR 0 13
43058: PPUSH
43059: CALL_OW 250
43063: PPUSH
43064: LD_VAR 0 10
43068: PPUSH
43069: LD_INT 2
43071: PPUSH
43072: CALL_OW 272
43076: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43077: LD_ADDR_VAR 0 12
43081: PUSH
43082: LD_VAR 0 13
43086: PPUSH
43087: CALL_OW 251
43091: PPUSH
43092: LD_VAR 0 10
43096: PPUSH
43097: LD_INT 2
43099: PPUSH
43100: CALL_OW 273
43104: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43105: LD_VAR 0 11
43109: PPUSH
43110: LD_VAR 0 12
43114: PPUSH
43115: CALL_OW 488
43119: PUSH
43120: LD_VAR 0 11
43124: PPUSH
43125: LD_VAR 0 12
43129: PPUSH
43130: CALL_OW 428
43134: NOT
43135: AND
43136: IFFALSE 43159
// begin ComMoveXY ( tmp , _x , _y ) ;
43138: LD_VAR 0 13
43142: PPUSH
43143: LD_VAR 0 11
43147: PPUSH
43148: LD_VAR 0 12
43152: PPUSH
43153: CALL_OW 111
// break ;
43157: GO 43161
// end ; end ;
43159: GO 43046
43161: POP
43162: POP
// end ; end ;
43163: GO 42488
43165: POP
43166: POP
// end ;
43167: LD_VAR 0 8
43171: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43172: LD_INT 0
43174: PPUSH
// result := true ;
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 1
43182: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43183: LD_VAR 0 2
43187: PUSH
43188: LD_INT 24
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43202
43194: LD_INT 33
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43227
43202: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_INT 32
43210: PPUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 321
43220: PUSH
43221: LD_INT 2
43223: EQUAL
43224: ST_TO_ADDR
43225: GO 43543
43227: LD_INT 20
43229: DOUBLE
43230: EQUAL
43231: IFTRUE 43235
43233: GO 43260
43235: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43236: LD_ADDR_VAR 0 3
43240: PUSH
43241: LD_INT 6
43243: PPUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: CALL_OW 321
43253: PUSH
43254: LD_INT 2
43256: EQUAL
43257: ST_TO_ADDR
43258: GO 43543
43260: LD_INT 22
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43274
43266: LD_INT 36
43268: DOUBLE
43269: EQUAL
43270: IFTRUE 43274
43272: GO 43299
43274: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43275: LD_ADDR_VAR 0 3
43279: PUSH
43280: LD_INT 15
43282: PPUSH
43283: LD_VAR 0 1
43287: PPUSH
43288: CALL_OW 321
43292: PUSH
43293: LD_INT 2
43295: EQUAL
43296: ST_TO_ADDR
43297: GO 43543
43299: LD_INT 30
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43307
43305: GO 43332
43307: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43308: LD_ADDR_VAR 0 3
43312: PUSH
43313: LD_INT 20
43315: PPUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL_OW 321
43325: PUSH
43326: LD_INT 2
43328: EQUAL
43329: ST_TO_ADDR
43330: GO 43543
43332: LD_INT 28
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43346
43338: LD_INT 21
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43371
43346: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 21
43354: PPUSH
43355: LD_VAR 0 1
43359: PPUSH
43360: CALL_OW 321
43364: PUSH
43365: LD_INT 2
43367: EQUAL
43368: ST_TO_ADDR
43369: GO 43543
43371: LD_INT 16
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43379
43377: GO 43404
43379: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43380: LD_ADDR_VAR 0 3
43384: PUSH
43385: LD_INT 84
43387: PPUSH
43388: LD_VAR 0 1
43392: PPUSH
43393: CALL_OW 321
43397: PUSH
43398: LD_INT 2
43400: EQUAL
43401: ST_TO_ADDR
43402: GO 43543
43404: LD_INT 19
43406: DOUBLE
43407: EQUAL
43408: IFTRUE 43418
43410: LD_INT 23
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43418
43416: GO 43443
43418: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_INT 83
43426: PPUSH
43427: LD_VAR 0 1
43431: PPUSH
43432: CALL_OW 321
43436: PUSH
43437: LD_INT 2
43439: EQUAL
43440: ST_TO_ADDR
43441: GO 43543
43443: LD_INT 17
43445: DOUBLE
43446: EQUAL
43447: IFTRUE 43451
43449: GO 43476
43451: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43452: LD_ADDR_VAR 0 3
43456: PUSH
43457: LD_INT 39
43459: PPUSH
43460: LD_VAR 0 1
43464: PPUSH
43465: CALL_OW 321
43469: PUSH
43470: LD_INT 2
43472: EQUAL
43473: ST_TO_ADDR
43474: GO 43543
43476: LD_INT 18
43478: DOUBLE
43479: EQUAL
43480: IFTRUE 43484
43482: GO 43509
43484: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43485: LD_ADDR_VAR 0 3
43489: PUSH
43490: LD_INT 40
43492: PPUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 321
43502: PUSH
43503: LD_INT 2
43505: EQUAL
43506: ST_TO_ADDR
43507: GO 43543
43509: LD_INT 27
43511: DOUBLE
43512: EQUAL
43513: IFTRUE 43517
43515: GO 43542
43517: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43518: LD_ADDR_VAR 0 3
43522: PUSH
43523: LD_INT 35
43525: PPUSH
43526: LD_VAR 0 1
43530: PPUSH
43531: CALL_OW 321
43535: PUSH
43536: LD_INT 2
43538: EQUAL
43539: ST_TO_ADDR
43540: GO 43543
43542: POP
// end ;
43543: LD_VAR 0 3
43547: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43548: LD_INT 0
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
// result := false ;
43561: LD_ADDR_VAR 0 6
43565: PUSH
43566: LD_INT 0
43568: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43569: LD_VAR 0 1
43573: NOT
43574: PUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 266
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: IN
43595: NOT
43596: OR
43597: PUSH
43598: LD_VAR 0 2
43602: NOT
43603: OR
43604: PUSH
43605: LD_VAR 0 5
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: LD_INT 5
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: IN
43636: NOT
43637: OR
43638: PUSH
43639: LD_VAR 0 3
43643: PPUSH
43644: LD_VAR 0 4
43648: PPUSH
43649: CALL_OW 488
43653: NOT
43654: OR
43655: IFFALSE 43659
// exit ;
43657: GO 44395
// side := GetSide ( depot ) ;
43659: LD_ADDR_VAR 0 9
43663: PUSH
43664: LD_VAR 0 1
43668: PPUSH
43669: CALL_OW 255
43673: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43674: LD_VAR 0 9
43678: PPUSH
43679: LD_VAR 0 2
43683: PPUSH
43684: CALL 43172 0 2
43688: NOT
43689: IFFALSE 43693
// exit ;
43691: GO 44395
// pom := GetBase ( depot ) ;
43693: LD_ADDR_VAR 0 10
43697: PUSH
43698: LD_VAR 0 1
43702: PPUSH
43703: CALL_OW 274
43707: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43708: LD_ADDR_VAR 0 11
43712: PUSH
43713: LD_VAR 0 2
43717: PPUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: CALL_OW 248
43727: PPUSH
43728: CALL_OW 450
43732: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43733: LD_VAR 0 10
43737: PPUSH
43738: LD_INT 1
43740: PPUSH
43741: CALL_OW 275
43745: PUSH
43746: LD_VAR 0 11
43750: PUSH
43751: LD_INT 1
43753: ARRAY
43754: GREATEREQUAL
43755: PUSH
43756: LD_VAR 0 10
43760: PPUSH
43761: LD_INT 2
43763: PPUSH
43764: CALL_OW 275
43768: PUSH
43769: LD_VAR 0 11
43773: PUSH
43774: LD_INT 2
43776: ARRAY
43777: GREATEREQUAL
43778: AND
43779: PUSH
43780: LD_VAR 0 10
43784: PPUSH
43785: LD_INT 3
43787: PPUSH
43788: CALL_OW 275
43792: PUSH
43793: LD_VAR 0 11
43797: PUSH
43798: LD_INT 3
43800: ARRAY
43801: GREATEREQUAL
43802: AND
43803: NOT
43804: IFFALSE 43808
// exit ;
43806: GO 44395
// if GetBType ( depot ) = b_depot then
43808: LD_VAR 0 1
43812: PPUSH
43813: CALL_OW 266
43817: PUSH
43818: LD_INT 0
43820: EQUAL
43821: IFFALSE 43833
// dist := 28 else
43823: LD_ADDR_VAR 0 14
43827: PUSH
43828: LD_INT 28
43830: ST_TO_ADDR
43831: GO 43841
// dist := 36 ;
43833: LD_ADDR_VAR 0 14
43837: PUSH
43838: LD_INT 36
43840: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43841: LD_VAR 0 1
43845: PPUSH
43846: LD_VAR 0 3
43850: PPUSH
43851: LD_VAR 0 4
43855: PPUSH
43856: CALL_OW 297
43860: PUSH
43861: LD_VAR 0 14
43865: GREATER
43866: IFFALSE 43870
// exit ;
43868: GO 44395
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43870: LD_ADDR_VAR 0 12
43874: PUSH
43875: LD_VAR 0 2
43879: PPUSH
43880: LD_VAR 0 3
43884: PPUSH
43885: LD_VAR 0 4
43889: PPUSH
43890: LD_VAR 0 5
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 248
43904: PPUSH
43905: LD_INT 0
43907: PPUSH
43908: CALL 44400 0 6
43912: ST_TO_ADDR
// if not hexes then
43913: LD_VAR 0 12
43917: NOT
43918: IFFALSE 43922
// exit ;
43920: GO 44395
// hex := GetHexInfo ( x , y ) ;
43922: LD_ADDR_VAR 0 15
43926: PUSH
43927: LD_VAR 0 3
43931: PPUSH
43932: LD_VAR 0 4
43936: PPUSH
43937: CALL_OW 546
43941: ST_TO_ADDR
// if hex [ 1 ] then
43942: LD_VAR 0 15
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: IFFALSE 43954
// exit ;
43952: GO 44395
// height := hex [ 2 ] ;
43954: LD_ADDR_VAR 0 13
43958: PUSH
43959: LD_VAR 0 15
43963: PUSH
43964: LD_INT 2
43966: ARRAY
43967: ST_TO_ADDR
// for i = 1 to hexes do
43968: LD_ADDR_VAR 0 7
43972: PUSH
43973: DOUBLE
43974: LD_INT 1
43976: DEC
43977: ST_TO_ADDR
43978: LD_VAR 0 12
43982: PUSH
43983: FOR_TO
43984: IFFALSE 44314
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43986: LD_VAR 0 12
43990: PUSH
43991: LD_VAR 0 7
43995: ARRAY
43996: PUSH
43997: LD_INT 1
43999: ARRAY
44000: PPUSH
44001: LD_VAR 0 12
44005: PUSH
44006: LD_VAR 0 7
44010: ARRAY
44011: PUSH
44012: LD_INT 2
44014: ARRAY
44015: PPUSH
44016: CALL_OW 488
44020: NOT
44021: PUSH
44022: LD_VAR 0 12
44026: PUSH
44027: LD_VAR 0 7
44031: ARRAY
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: LD_VAR 0 12
44041: PUSH
44042: LD_VAR 0 7
44046: ARRAY
44047: PUSH
44048: LD_INT 2
44050: ARRAY
44051: PPUSH
44052: CALL_OW 428
44056: PUSH
44057: LD_INT 0
44059: GREATER
44060: OR
44061: PUSH
44062: LD_VAR 0 12
44066: PUSH
44067: LD_VAR 0 7
44071: ARRAY
44072: PUSH
44073: LD_INT 1
44075: ARRAY
44076: PPUSH
44077: LD_VAR 0 12
44081: PUSH
44082: LD_VAR 0 7
44086: ARRAY
44087: PUSH
44088: LD_INT 2
44090: ARRAY
44091: PPUSH
44092: CALL_OW 351
44096: OR
44097: IFFALSE 44103
// exit ;
44099: POP
44100: POP
44101: GO 44395
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44103: LD_ADDR_VAR 0 8
44107: PUSH
44108: LD_VAR 0 12
44112: PUSH
44113: LD_VAR 0 7
44117: ARRAY
44118: PUSH
44119: LD_INT 1
44121: ARRAY
44122: PPUSH
44123: LD_VAR 0 12
44127: PUSH
44128: LD_VAR 0 7
44132: ARRAY
44133: PUSH
44134: LD_INT 2
44136: ARRAY
44137: PPUSH
44138: CALL_OW 546
44142: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44143: LD_VAR 0 8
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PUSH
44152: LD_VAR 0 8
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: PUSH
44161: LD_VAR 0 13
44165: PUSH
44166: LD_INT 2
44168: PLUS
44169: GREATER
44170: OR
44171: PUSH
44172: LD_VAR 0 8
44176: PUSH
44177: LD_INT 2
44179: ARRAY
44180: PUSH
44181: LD_VAR 0 13
44185: PUSH
44186: LD_INT 2
44188: MINUS
44189: LESS
44190: OR
44191: PUSH
44192: LD_VAR 0 8
44196: PUSH
44197: LD_INT 3
44199: ARRAY
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 8
44206: PUSH
44207: LD_INT 9
44209: PUSH
44210: LD_INT 10
44212: PUSH
44213: LD_INT 11
44215: PUSH
44216: LD_INT 12
44218: PUSH
44219: LD_INT 13
44221: PUSH
44222: LD_INT 16
44224: PUSH
44225: LD_INT 17
44227: PUSH
44228: LD_INT 18
44230: PUSH
44231: LD_INT 19
44233: PUSH
44234: LD_INT 20
44236: PUSH
44237: LD_INT 21
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: IN
44255: NOT
44256: OR
44257: PUSH
44258: LD_VAR 0 8
44262: PUSH
44263: LD_INT 5
44265: ARRAY
44266: NOT
44267: OR
44268: PUSH
44269: LD_VAR 0 8
44273: PUSH
44274: LD_INT 6
44276: ARRAY
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 7
44286: PUSH
44287: LD_INT 9
44289: PUSH
44290: LD_INT 10
44292: PUSH
44293: LD_INT 11
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: IN
44304: NOT
44305: OR
44306: IFFALSE 44312
// exit ;
44308: POP
44309: POP
44310: GO 44395
// end ;
44312: GO 43983
44314: POP
44315: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44316: LD_VAR 0 9
44320: PPUSH
44321: LD_VAR 0 3
44325: PPUSH
44326: LD_VAR 0 4
44330: PPUSH
44331: LD_INT 20
44333: PPUSH
44334: CALL 36347 0 4
44338: PUSH
44339: LD_INT 4
44341: ARRAY
44342: IFFALSE 44346
// exit ;
44344: GO 44395
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44346: LD_VAR 0 2
44350: PUSH
44351: LD_INT 29
44353: PUSH
44354: LD_INT 30
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: IN
44361: PUSH
44362: LD_VAR 0 3
44366: PPUSH
44367: LD_VAR 0 4
44371: PPUSH
44372: LD_VAR 0 9
44376: PPUSH
44377: CALL_OW 440
44381: NOT
44382: AND
44383: IFFALSE 44387
// exit ;
44385: GO 44395
// result := true ;
44387: LD_ADDR_VAR 0 6
44391: PUSH
44392: LD_INT 1
44394: ST_TO_ADDR
// end ;
44395: LD_VAR 0 6
44399: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44400: LD_INT 0
44402: PPUSH
44403: PPUSH
44404: PPUSH
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
44451: PPUSH
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
44459: PPUSH
// result = [ ] ;
44460: LD_ADDR_VAR 0 7
44464: PUSH
44465: EMPTY
44466: ST_TO_ADDR
// temp_list = [ ] ;
44467: LD_ADDR_VAR 0 9
44471: PUSH
44472: EMPTY
44473: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44474: LD_VAR 0 4
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 4
44493: PUSH
44494: LD_INT 5
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: IN
44505: NOT
44506: PUSH
44507: LD_VAR 0 1
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: IN
44522: PUSH
44523: LD_VAR 0 5
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: IN
44542: NOT
44543: AND
44544: OR
44545: IFFALSE 44549
// exit ;
44547: GO 62940
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44549: LD_VAR 0 1
44553: PUSH
44554: LD_INT 6
44556: PUSH
44557: LD_INT 7
44559: PUSH
44560: LD_INT 8
44562: PUSH
44563: LD_INT 13
44565: PUSH
44566: LD_INT 12
44568: PUSH
44569: LD_INT 15
44571: PUSH
44572: LD_INT 11
44574: PUSH
44575: LD_INT 14
44577: PUSH
44578: LD_INT 10
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: IN
44592: IFFALSE 44602
// btype = b_lab ;
44594: LD_ADDR_VAR 0 1
44598: PUSH
44599: LD_INT 6
44601: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44602: LD_VAR 0 6
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: IN
44621: NOT
44622: PUSH
44623: LD_VAR 0 1
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 3
44639: PUSH
44640: LD_INT 6
44642: PUSH
44643: LD_INT 36
44645: PUSH
44646: LD_INT 4
44648: PUSH
44649: LD_INT 5
44651: PUSH
44652: LD_INT 31
44654: PUSH
44655: LD_INT 32
44657: PUSH
44658: LD_INT 33
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: IN
44674: NOT
44675: PUSH
44676: LD_VAR 0 6
44680: PUSH
44681: LD_INT 1
44683: EQUAL
44684: AND
44685: OR
44686: PUSH
44687: LD_VAR 0 1
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: IN
44702: NOT
44703: PUSH
44704: LD_VAR 0 6
44708: PUSH
44709: LD_INT 2
44711: EQUAL
44712: AND
44713: OR
44714: IFFALSE 44724
// mode = 0 ;
44716: LD_ADDR_VAR 0 6
44720: PUSH
44721: LD_INT 0
44723: ST_TO_ADDR
// case mode of 0 :
44724: LD_VAR 0 6
44728: PUSH
44729: LD_INT 0
44731: DOUBLE
44732: EQUAL
44733: IFTRUE 44737
44735: GO 56190
44737: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44738: LD_ADDR_VAR 0 11
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 3
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44931: LD_ADDR_VAR 0 12
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45127: LD_ADDR_VAR 0 13
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45326: LD_ADDR_VAR 0 14
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45522: LD_ADDR_VAR 0 15
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45715: LD_ADDR_VAR 0 16
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45908: LD_ADDR_VAR 0 17
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46138: LD_ADDR_VAR 0 18
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46368: LD_ADDR_VAR 0 19
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46598: LD_ADDR_VAR 0 20
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46828: LD_ADDR_VAR 0 21
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47058: LD_ADDR_VAR 0 22
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47288: LD_ADDR_VAR 0 23
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47568: LD_ADDR_VAR 0 24
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47844: LD_ADDR_VAR 0 25
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 3
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48118: LD_ADDR_VAR 0 26
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48394: LD_ADDR_VAR 0 27
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48674: LD_ADDR_VAR 0 28
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48956: LD_ADDR_VAR 0 29
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49235: LD_ADDR_VAR 0 30
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49513: LD_ADDR_VAR 0 31
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 3
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49791: LD_ADDR_VAR 0 32
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 3
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50069: LD_ADDR_VAR 0 33
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50348: LD_ADDR_VAR 0 34
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50628: LD_ADDR_VAR 0 35
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50740: LD_ADDR_VAR 0 36
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50852: LD_ADDR_VAR 0 37
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50964: LD_ADDR_VAR 0 38
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51076: LD_ADDR_VAR 0 39
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51188: LD_ADDR_VAR 0 40
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51300: LD_ADDR_VAR 0 41
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 3
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51650: LD_ADDR_VAR 0 42
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: LD_INT 3
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52000: LD_ADDR_VAR 0 43
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52348: LD_ADDR_VAR 0 44
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52698: LD_ADDR_VAR 0 45
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 3
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: LD_INT 3
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53048: LD_ADDR_VAR 0 46
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53396: LD_ADDR_VAR 0 47
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53547: LD_ADDR_VAR 0 48
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53694: LD_ADDR_VAR 0 49
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53838: LD_ADDR_VAR 0 50
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53982: LD_ADDR_VAR 0 51
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54129: LD_ADDR_VAR 0 52
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54280: LD_ADDR_VAR 0 53
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54510: LD_ADDR_VAR 0 54
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54740: LD_ADDR_VAR 0 55
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54970: LD_ADDR_VAR 0 56
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55200: LD_ADDR_VAR 0 57
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55430: LD_ADDR_VAR 0 58
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55660: LD_ADDR_VAR 0 59
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55748: LD_ADDR_VAR 0 60
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55836: LD_ADDR_VAR 0 61
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55924: LD_ADDR_VAR 0 62
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56012: LD_ADDR_VAR 0 63
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56100: LD_ADDR_VAR 0 64
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// end ; 1 :
56188: GO 62085
56190: LD_INT 1
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56198
56196: GO 58821
56198: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56199: LD_ADDR_VAR 0 11
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 3
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56243: LD_ADDR_VAR 0 12
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56284: LD_ADDR_VAR 0 13
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56324: LD_ADDR_VAR 0 14
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56365: LD_ADDR_VAR 0 15
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56409: LD_ADDR_VAR 0 16
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 3
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56455: LD_ADDR_VAR 0 17
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56499: LD_ADDR_VAR 0 18
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56540: LD_ADDR_VAR 0 19
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56580: LD_ADDR_VAR 0 20
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56621: LD_ADDR_VAR 0 21
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56665: LD_ADDR_VAR 0 22
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56711: LD_ADDR_VAR 0 23
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: LD_INT 4
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56755: LD_ADDR_VAR 0 24
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56796: LD_ADDR_VAR 0 25
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 4
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56836: LD_ADDR_VAR 0 26
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56877: LD_ADDR_VAR 0 27
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 4
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56921: LD_ADDR_VAR 0 28
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56967: LD_ADDR_VAR 0 29
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 5
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 5
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 6
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 6
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 5
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57122: LD_ADDR_VAR 0 30
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 3
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 3
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 4
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 5
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 5
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 6
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 6
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57265: LD_ADDR_VAR 0 31
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 5
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: LD_INT 5
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: LD_INT 5
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 6
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 6
57372: PUSH
57373: LD_INT 6
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 5
57382: PUSH
57383: LD_INT 6
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57404: LD_ADDR_VAR 0 32
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 4
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: LD_INT 5
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: LD_INT 5
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 4
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 6
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 6
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 5
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57547: LD_ADDR_VAR 0 33
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: NEG
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 5
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 5
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 6
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 6
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57702: LD_ADDR_VAR 0 34
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: NEG
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: LD_INT 4
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 4
57757: NEG
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: NEG
57770: PUSH
57771: LD_INT 4
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 4
57781: NEG
57782: PUSH
57783: LD_INT 5
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 5
57793: NEG
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 5
57805: NEG
57806: PUSH
57807: LD_INT 5
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: NEG
57818: PUSH
57819: LD_INT 6
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 6
57829: NEG
57830: PUSH
57831: LD_INT 5
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 6
57841: NEG
57842: PUSH
57843: LD_INT 6
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57865: LD_ADDR_VAR 0 41
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57909: LD_ADDR_VAR 0 42
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57950: LD_ADDR_VAR 0 43
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57990: LD_ADDR_VAR 0 44
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58031: LD_ADDR_VAR 0 45
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58075: LD_ADDR_VAR 0 46
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58121: LD_ADDR_VAR 0 47
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 3
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58154: LD_ADDR_VAR 0 48
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58185: LD_ADDR_VAR 0 49
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58214: LD_ADDR_VAR 0 50
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58243: LD_ADDR_VAR 0 51
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58274: LD_ADDR_VAR 0 52
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58307: LD_ADDR_VAR 0 53
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 3
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58351: LD_ADDR_VAR 0 54
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58392: LD_ADDR_VAR 0 55
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58432: LD_ADDR_VAR 0 56
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58473: LD_ADDR_VAR 0 57
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58517: LD_ADDR_VAR 0 58
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58563: LD_ADDR_VAR 0 59
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58607: LD_ADDR_VAR 0 60
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58648: LD_ADDR_VAR 0 61
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58688: LD_ADDR_VAR 0 62
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58729: LD_ADDR_VAR 0 63
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58773: LD_ADDR_VAR 0 64
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
// end ; 2 :
58819: GO 62085
58821: LD_INT 2
58823: DOUBLE
58824: EQUAL
58825: IFTRUE 58829
58827: GO 62084
58829: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58830: LD_ADDR_VAR 0 29
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 5
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 5
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 4
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 5
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 4
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 5
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 5
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 4
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 4
59169: NEG
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 4
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 4
59215: NEG
59216: PUSH
59217: LD_INT 4
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: LD_INT 5
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 5
59275: NEG
59276: PUSH
59277: LD_INT 4
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: LD_INT 5
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 5
59311: NEG
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59368: LD_ADDR_VAR 0 30
59372: PUSH
59373: LD_INT 4
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 5
59395: PUSH
59396: LD_INT 4
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: LD_INT 5
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 4
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: LD_INT 3
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 4
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 4
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 5
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 5
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 3
59660: NEG
59661: PUSH
59662: LD_INT 3
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: LD_INT 4
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: LD_INT 4
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 4
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 5
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 4
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 5
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 5
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59915: LD_ADDR_VAR 0 31
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 4
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 5
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 4
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 5
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 4
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 4
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: NEG
60118: PUSH
60119: LD_INT 4
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: NEG
60130: PUSH
60131: LD_INT 5
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 4
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 5
60177: NEG
60178: PUSH
60179: LD_INT 4
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 5
60189: NEG
60190: PUSH
60191: LD_INT 5
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 5
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 5
60213: NEG
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 4
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 4
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 5
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 5
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 5
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60465: LD_ADDR_VAR 0 32
60469: PUSH
60470: LD_INT 4
60472: NEG
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 5
60528: NEG
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 5
60539: NEG
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 5
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: LD_INT 4
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 3
60622: NEG
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: LD_INT 4
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 4
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 4
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 4
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 5
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 5
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 5
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: LD_INT 4
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: LD_INT 4
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: PUSH
60908: LD_INT 5
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61012: LD_ADDR_VAR 0 33
61016: PUSH
61017: LD_INT 4
61019: NEG
61020: PUSH
61021: LD_INT 4
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 4
61031: NEG
61032: PUSH
61033: LD_INT 5
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 4
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 5
61079: NEG
61080: PUSH
61081: LD_INT 4
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: NEG
61092: PUSH
61093: LD_INT 5
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: LD_INT 5
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 5
61115: NEG
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 4
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 4
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 5
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 5
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: LD_INT 4
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 5
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 5
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 4
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 5
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61550: LD_ADDR_VAR 0 34
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 5
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 4
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 5
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 3
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 5
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 4
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 2
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 4
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 4
61752: PUSH
61753: LD_INT 4
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 4
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 5
61772: PUSH
61773: LD_INT 4
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 5
61782: PUSH
61783: LD_INT 5
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 4
61792: PUSH
61793: LD_INT 5
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 5
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 4
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: NEG
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 4
61946: NEG
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 4
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 5
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 5
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 5
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: ST_TO_ADDR
// end ; end ;
62082: GO 62085
62084: POP
// case btype of b_depot , b_warehouse :
62085: LD_VAR 0 1
62089: PUSH
62090: LD_INT 0
62092: DOUBLE
62093: EQUAL
62094: IFTRUE 62104
62096: LD_INT 1
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62104
62102: GO 62305
62104: POP
// case nation of nation_american :
62105: LD_VAR 0 5
62109: PUSH
62110: LD_INT 1
62112: DOUBLE
62113: EQUAL
62114: IFTRUE 62118
62116: GO 62174
62118: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62119: LD_ADDR_VAR 0 9
62123: PUSH
62124: LD_VAR 0 11
62128: PUSH
62129: LD_VAR 0 12
62133: PUSH
62134: LD_VAR 0 13
62138: PUSH
62139: LD_VAR 0 14
62143: PUSH
62144: LD_VAR 0 15
62148: PUSH
62149: LD_VAR 0 16
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: PUSH
62162: LD_VAR 0 4
62166: PUSH
62167: LD_INT 1
62169: PLUS
62170: ARRAY
62171: ST_TO_ADDR
62172: GO 62303
62174: LD_INT 2
62176: DOUBLE
62177: EQUAL
62178: IFTRUE 62182
62180: GO 62238
62182: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62183: LD_ADDR_VAR 0 9
62187: PUSH
62188: LD_VAR 0 17
62192: PUSH
62193: LD_VAR 0 18
62197: PUSH
62198: LD_VAR 0 19
62202: PUSH
62203: LD_VAR 0 20
62207: PUSH
62208: LD_VAR 0 21
62212: PUSH
62213: LD_VAR 0 22
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: PUSH
62226: LD_VAR 0 4
62230: PUSH
62231: LD_INT 1
62233: PLUS
62234: ARRAY
62235: ST_TO_ADDR
62236: GO 62303
62238: LD_INT 3
62240: DOUBLE
62241: EQUAL
62242: IFTRUE 62246
62244: GO 62302
62246: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62247: LD_ADDR_VAR 0 9
62251: PUSH
62252: LD_VAR 0 23
62256: PUSH
62257: LD_VAR 0 24
62261: PUSH
62262: LD_VAR 0 25
62266: PUSH
62267: LD_VAR 0 26
62271: PUSH
62272: LD_VAR 0 27
62276: PUSH
62277: LD_VAR 0 28
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: LD_VAR 0 4
62294: PUSH
62295: LD_INT 1
62297: PLUS
62298: ARRAY
62299: ST_TO_ADDR
62300: GO 62303
62302: POP
62303: GO 62858
62305: LD_INT 2
62307: DOUBLE
62308: EQUAL
62309: IFTRUE 62319
62311: LD_INT 3
62313: DOUBLE
62314: EQUAL
62315: IFTRUE 62319
62317: GO 62375
62319: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62320: LD_ADDR_VAR 0 9
62324: PUSH
62325: LD_VAR 0 29
62329: PUSH
62330: LD_VAR 0 30
62334: PUSH
62335: LD_VAR 0 31
62339: PUSH
62340: LD_VAR 0 32
62344: PUSH
62345: LD_VAR 0 33
62349: PUSH
62350: LD_VAR 0 34
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: PUSH
62363: LD_VAR 0 4
62367: PUSH
62368: LD_INT 1
62370: PLUS
62371: ARRAY
62372: ST_TO_ADDR
62373: GO 62858
62375: LD_INT 16
62377: DOUBLE
62378: EQUAL
62379: IFTRUE 62437
62381: LD_INT 17
62383: DOUBLE
62384: EQUAL
62385: IFTRUE 62437
62387: LD_INT 18
62389: DOUBLE
62390: EQUAL
62391: IFTRUE 62437
62393: LD_INT 19
62395: DOUBLE
62396: EQUAL
62397: IFTRUE 62437
62399: LD_INT 22
62401: DOUBLE
62402: EQUAL
62403: IFTRUE 62437
62405: LD_INT 20
62407: DOUBLE
62408: EQUAL
62409: IFTRUE 62437
62411: LD_INT 21
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62437
62417: LD_INT 23
62419: DOUBLE
62420: EQUAL
62421: IFTRUE 62437
62423: LD_INT 24
62425: DOUBLE
62426: EQUAL
62427: IFTRUE 62437
62429: LD_INT 25
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62437
62435: GO 62493
62437: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62438: LD_ADDR_VAR 0 9
62442: PUSH
62443: LD_VAR 0 35
62447: PUSH
62448: LD_VAR 0 36
62452: PUSH
62453: LD_VAR 0 37
62457: PUSH
62458: LD_VAR 0 38
62462: PUSH
62463: LD_VAR 0 39
62467: PUSH
62468: LD_VAR 0 40
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_VAR 0 4
62485: PUSH
62486: LD_INT 1
62488: PLUS
62489: ARRAY
62490: ST_TO_ADDR
62491: GO 62858
62493: LD_INT 6
62495: DOUBLE
62496: EQUAL
62497: IFTRUE 62549
62499: LD_INT 7
62501: DOUBLE
62502: EQUAL
62503: IFTRUE 62549
62505: LD_INT 8
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62549
62511: LD_INT 13
62513: DOUBLE
62514: EQUAL
62515: IFTRUE 62549
62517: LD_INT 12
62519: DOUBLE
62520: EQUAL
62521: IFTRUE 62549
62523: LD_INT 15
62525: DOUBLE
62526: EQUAL
62527: IFTRUE 62549
62529: LD_INT 11
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62549
62535: LD_INT 14
62537: DOUBLE
62538: EQUAL
62539: IFTRUE 62549
62541: LD_INT 10
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62549
62547: GO 62605
62549: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62550: LD_ADDR_VAR 0 9
62554: PUSH
62555: LD_VAR 0 41
62559: PUSH
62560: LD_VAR 0 42
62564: PUSH
62565: LD_VAR 0 43
62569: PUSH
62570: LD_VAR 0 44
62574: PUSH
62575: LD_VAR 0 45
62579: PUSH
62580: LD_VAR 0 46
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 4
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: ARRAY
62602: ST_TO_ADDR
62603: GO 62858
62605: LD_INT 36
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62669
62613: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62614: LD_ADDR_VAR 0 9
62618: PUSH
62619: LD_VAR 0 47
62623: PUSH
62624: LD_VAR 0 48
62628: PUSH
62629: LD_VAR 0 49
62633: PUSH
62634: LD_VAR 0 50
62638: PUSH
62639: LD_VAR 0 51
62643: PUSH
62644: LD_VAR 0 52
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: PUSH
62657: LD_VAR 0 4
62661: PUSH
62662: LD_INT 1
62664: PLUS
62665: ARRAY
62666: ST_TO_ADDR
62667: GO 62858
62669: LD_INT 4
62671: DOUBLE
62672: EQUAL
62673: IFTRUE 62695
62675: LD_INT 5
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62695
62681: LD_INT 34
62683: DOUBLE
62684: EQUAL
62685: IFTRUE 62695
62687: LD_INT 37
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62695
62693: GO 62751
62695: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62696: LD_ADDR_VAR 0 9
62700: PUSH
62701: LD_VAR 0 53
62705: PUSH
62706: LD_VAR 0 54
62710: PUSH
62711: LD_VAR 0 55
62715: PUSH
62716: LD_VAR 0 56
62720: PUSH
62721: LD_VAR 0 57
62725: PUSH
62726: LD_VAR 0 58
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: PUSH
62739: LD_VAR 0 4
62743: PUSH
62744: LD_INT 1
62746: PLUS
62747: ARRAY
62748: ST_TO_ADDR
62749: GO 62858
62751: LD_INT 31
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62801
62757: LD_INT 32
62759: DOUBLE
62760: EQUAL
62761: IFTRUE 62801
62763: LD_INT 33
62765: DOUBLE
62766: EQUAL
62767: IFTRUE 62801
62769: LD_INT 27
62771: DOUBLE
62772: EQUAL
62773: IFTRUE 62801
62775: LD_INT 26
62777: DOUBLE
62778: EQUAL
62779: IFTRUE 62801
62781: LD_INT 28
62783: DOUBLE
62784: EQUAL
62785: IFTRUE 62801
62787: LD_INT 29
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62801
62793: LD_INT 30
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62801
62799: GO 62857
62801: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62802: LD_ADDR_VAR 0 9
62806: PUSH
62807: LD_VAR 0 59
62811: PUSH
62812: LD_VAR 0 60
62816: PUSH
62817: LD_VAR 0 61
62821: PUSH
62822: LD_VAR 0 62
62826: PUSH
62827: LD_VAR 0 63
62831: PUSH
62832: LD_VAR 0 64
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: PUSH
62845: LD_VAR 0 4
62849: PUSH
62850: LD_INT 1
62852: PLUS
62853: ARRAY
62854: ST_TO_ADDR
62855: GO 62858
62857: POP
// temp_list2 = [ ] ;
62858: LD_ADDR_VAR 0 10
62862: PUSH
62863: EMPTY
62864: ST_TO_ADDR
// for i in temp_list do
62865: LD_ADDR_VAR 0 8
62869: PUSH
62870: LD_VAR 0 9
62874: PUSH
62875: FOR_IN
62876: IFFALSE 62928
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62878: LD_ADDR_VAR 0 10
62882: PUSH
62883: LD_VAR 0 10
62887: PUSH
62888: LD_VAR 0 8
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: LD_VAR 0 2
62901: PLUS
62902: PUSH
62903: LD_VAR 0 8
62907: PUSH
62908: LD_INT 2
62910: ARRAY
62911: PUSH
62912: LD_VAR 0 3
62916: PLUS
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: ADD
62925: ST_TO_ADDR
62926: GO 62875
62928: POP
62929: POP
// result = temp_list2 ;
62930: LD_ADDR_VAR 0 7
62934: PUSH
62935: LD_VAR 0 10
62939: ST_TO_ADDR
// end ;
62940: LD_VAR 0 7
62944: RET
// export function EnemyInRange ( unit , dist ) ; begin
62945: LD_INT 0
62947: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62948: LD_ADDR_VAR 0 3
62952: PUSH
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 255
62962: PPUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: CALL_OW 250
62972: PPUSH
62973: LD_VAR 0 1
62977: PPUSH
62978: CALL_OW 251
62982: PPUSH
62983: LD_VAR 0 2
62987: PPUSH
62988: CALL 36347 0 4
62992: PUSH
62993: LD_INT 4
62995: ARRAY
62996: ST_TO_ADDR
// end ;
62997: LD_VAR 0 3
63001: RET
// export function PlayerSeeMe ( unit ) ; begin
63002: LD_INT 0
63004: PPUSH
// result := See ( your_side , unit ) ;
63005: LD_ADDR_VAR 0 2
63009: PUSH
63010: LD_OWVAR 2
63014: PPUSH
63015: LD_VAR 0 1
63019: PPUSH
63020: CALL_OW 292
63024: ST_TO_ADDR
// end ;
63025: LD_VAR 0 2
63029: RET
// export function ReverseDir ( unit ) ; begin
63030: LD_INT 0
63032: PPUSH
// if not unit then
63033: LD_VAR 0 1
63037: NOT
63038: IFFALSE 63042
// exit ;
63040: GO 63065
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_VAR 0 1
63051: PPUSH
63052: CALL_OW 254
63056: PUSH
63057: LD_INT 3
63059: PLUS
63060: PUSH
63061: LD_INT 6
63063: MOD
63064: ST_TO_ADDR
// end ;
63065: LD_VAR 0 2
63069: RET
// export function ReverseArray ( array ) ; var i ; begin
63070: LD_INT 0
63072: PPUSH
63073: PPUSH
// if not array then
63074: LD_VAR 0 1
63078: NOT
63079: IFFALSE 63083
// exit ;
63081: GO 63138
// result := [ ] ;
63083: LD_ADDR_VAR 0 2
63087: PUSH
63088: EMPTY
63089: ST_TO_ADDR
// for i := array downto 1 do
63090: LD_ADDR_VAR 0 3
63094: PUSH
63095: DOUBLE
63096: LD_VAR 0 1
63100: INC
63101: ST_TO_ADDR
63102: LD_INT 1
63104: PUSH
63105: FOR_DOWNTO
63106: IFFALSE 63136
// result := Join ( result , array [ i ] ) ;
63108: LD_ADDR_VAR 0 2
63112: PUSH
63113: LD_VAR 0 2
63117: PPUSH
63118: LD_VAR 0 1
63122: PUSH
63123: LD_VAR 0 3
63127: ARRAY
63128: PPUSH
63129: CALL 67782 0 2
63133: ST_TO_ADDR
63134: GO 63105
63136: POP
63137: POP
// end ;
63138: LD_VAR 0 2
63142: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63143: LD_INT 0
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
63149: PPUSH
63150: PPUSH
// if not unit or not hexes then
63151: LD_VAR 0 1
63155: NOT
63156: PUSH
63157: LD_VAR 0 2
63161: NOT
63162: OR
63163: IFFALSE 63167
// exit ;
63165: GO 63290
// dist := 9999 ;
63167: LD_ADDR_VAR 0 5
63171: PUSH
63172: LD_INT 9999
63174: ST_TO_ADDR
// for i = 1 to hexes do
63175: LD_ADDR_VAR 0 4
63179: PUSH
63180: DOUBLE
63181: LD_INT 1
63183: DEC
63184: ST_TO_ADDR
63185: LD_VAR 0 2
63189: PUSH
63190: FOR_TO
63191: IFFALSE 63278
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63193: LD_ADDR_VAR 0 6
63197: PUSH
63198: LD_VAR 0 1
63202: PPUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_VAR 0 4
63212: ARRAY
63213: PUSH
63214: LD_INT 1
63216: ARRAY
63217: PPUSH
63218: LD_VAR 0 2
63222: PUSH
63223: LD_VAR 0 4
63227: ARRAY
63228: PUSH
63229: LD_INT 2
63231: ARRAY
63232: PPUSH
63233: CALL_OW 297
63237: ST_TO_ADDR
// if tdist < dist then
63238: LD_VAR 0 6
63242: PUSH
63243: LD_VAR 0 5
63247: LESS
63248: IFFALSE 63276
// begin hex := hexes [ i ] ;
63250: LD_ADDR_VAR 0 8
63254: PUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_VAR 0 4
63264: ARRAY
63265: ST_TO_ADDR
// dist := tdist ;
63266: LD_ADDR_VAR 0 5
63270: PUSH
63271: LD_VAR 0 6
63275: ST_TO_ADDR
// end ; end ;
63276: GO 63190
63278: POP
63279: POP
// result := hex ;
63280: LD_ADDR_VAR 0 3
63284: PUSH
63285: LD_VAR 0 8
63289: ST_TO_ADDR
// end ;
63290: LD_VAR 0 3
63294: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63295: LD_INT 0
63297: PPUSH
63298: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63299: LD_VAR 0 1
63303: NOT
63304: PUSH
63305: LD_VAR 0 1
63309: PUSH
63310: LD_INT 21
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 23
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PPUSH
63334: CALL_OW 69
63338: IN
63339: NOT
63340: OR
63341: IFFALSE 63345
// exit ;
63343: GO 63392
// for i = 1 to 3 do
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: DOUBLE
63351: LD_INT 1
63353: DEC
63354: ST_TO_ADDR
63355: LD_INT 3
63357: PUSH
63358: FOR_TO
63359: IFFALSE 63390
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 250
63370: PPUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 251
63380: PPUSH
63381: LD_INT 1
63383: PPUSH
63384: CALL_OW 453
63388: GO 63358
63390: POP
63391: POP
// end ;
63392: LD_VAR 0 2
63396: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
63403: PPUSH
63404: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63405: LD_VAR 0 1
63409: NOT
63410: PUSH
63411: LD_VAR 0 2
63415: NOT
63416: OR
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 314
63427: OR
63428: IFFALSE 63432
// exit ;
63430: GO 63899
// if GetLives ( i ) < 250 then
63432: LD_VAR 0 4
63436: PPUSH
63437: CALL_OW 256
63441: PUSH
63442: LD_INT 250
63444: LESS
63445: IFFALSE 63458
// begin ComAutodestruct ( i ) ;
63447: LD_VAR 0 4
63451: PPUSH
63452: CALL 63295 0 1
// exit ;
63456: GO 63899
// end ; x := GetX ( enemy_unit ) ;
63458: LD_ADDR_VAR 0 7
63462: PUSH
63463: LD_VAR 0 2
63467: PPUSH
63468: CALL_OW 250
63472: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63473: LD_ADDR_VAR 0 8
63477: PUSH
63478: LD_VAR 0 2
63482: PPUSH
63483: CALL_OW 251
63487: ST_TO_ADDR
// if not x or not y then
63488: LD_VAR 0 7
63492: NOT
63493: PUSH
63494: LD_VAR 0 8
63498: NOT
63499: OR
63500: IFFALSE 63504
// exit ;
63502: GO 63899
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63504: LD_ADDR_VAR 0 6
63508: PUSH
63509: LD_VAR 0 7
63513: PPUSH
63514: LD_INT 0
63516: PPUSH
63517: LD_INT 4
63519: PPUSH
63520: CALL_OW 272
63524: PUSH
63525: LD_VAR 0 8
63529: PPUSH
63530: LD_INT 0
63532: PPUSH
63533: LD_INT 4
63535: PPUSH
63536: CALL_OW 273
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_VAR 0 7
63549: PPUSH
63550: LD_INT 1
63552: PPUSH
63553: LD_INT 4
63555: PPUSH
63556: CALL_OW 272
63560: PUSH
63561: LD_VAR 0 8
63565: PPUSH
63566: LD_INT 1
63568: PPUSH
63569: LD_INT 4
63571: PPUSH
63572: CALL_OW 273
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_VAR 0 7
63585: PPUSH
63586: LD_INT 2
63588: PPUSH
63589: LD_INT 4
63591: PPUSH
63592: CALL_OW 272
63596: PUSH
63597: LD_VAR 0 8
63601: PPUSH
63602: LD_INT 2
63604: PPUSH
63605: LD_INT 4
63607: PPUSH
63608: CALL_OW 273
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_VAR 0 7
63621: PPUSH
63622: LD_INT 3
63624: PPUSH
63625: LD_INT 4
63627: PPUSH
63628: CALL_OW 272
63632: PUSH
63633: LD_VAR 0 8
63637: PPUSH
63638: LD_INT 3
63640: PPUSH
63641: LD_INT 4
63643: PPUSH
63644: CALL_OW 273
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_VAR 0 7
63657: PPUSH
63658: LD_INT 4
63660: PPUSH
63661: LD_INT 4
63663: PPUSH
63664: CALL_OW 272
63668: PUSH
63669: LD_VAR 0 8
63673: PPUSH
63674: LD_INT 4
63676: PPUSH
63677: LD_INT 4
63679: PPUSH
63680: CALL_OW 273
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_VAR 0 7
63693: PPUSH
63694: LD_INT 5
63696: PPUSH
63697: LD_INT 4
63699: PPUSH
63700: CALL_OW 272
63704: PUSH
63705: LD_VAR 0 8
63709: PPUSH
63710: LD_INT 5
63712: PPUSH
63713: LD_INT 4
63715: PPUSH
63716: CALL_OW 273
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: ST_TO_ADDR
// for i = tmp downto 1 do
63733: LD_ADDR_VAR 0 4
63737: PUSH
63738: DOUBLE
63739: LD_VAR 0 6
63743: INC
63744: ST_TO_ADDR
63745: LD_INT 1
63747: PUSH
63748: FOR_DOWNTO
63749: IFFALSE 63850
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63751: LD_VAR 0 6
63755: PUSH
63756: LD_VAR 0 4
63760: ARRAY
63761: PUSH
63762: LD_INT 1
63764: ARRAY
63765: PPUSH
63766: LD_VAR 0 6
63770: PUSH
63771: LD_VAR 0 4
63775: ARRAY
63776: PUSH
63777: LD_INT 2
63779: ARRAY
63780: PPUSH
63781: CALL_OW 488
63785: NOT
63786: PUSH
63787: LD_VAR 0 6
63791: PUSH
63792: LD_VAR 0 4
63796: ARRAY
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PPUSH
63802: LD_VAR 0 6
63806: PUSH
63807: LD_VAR 0 4
63811: ARRAY
63812: PUSH
63813: LD_INT 2
63815: ARRAY
63816: PPUSH
63817: CALL_OW 428
63821: PUSH
63822: LD_INT 0
63824: NONEQUAL
63825: OR
63826: IFFALSE 63848
// tmp := Delete ( tmp , i ) ;
63828: LD_ADDR_VAR 0 6
63832: PUSH
63833: LD_VAR 0 6
63837: PPUSH
63838: LD_VAR 0 4
63842: PPUSH
63843: CALL_OW 3
63847: ST_TO_ADDR
63848: GO 63748
63850: POP
63851: POP
// j := GetClosestHex ( unit , tmp ) ;
63852: LD_ADDR_VAR 0 5
63856: PUSH
63857: LD_VAR 0 1
63861: PPUSH
63862: LD_VAR 0 6
63866: PPUSH
63867: CALL 63143 0 2
63871: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_VAR 0 5
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: PPUSH
63886: LD_VAR 0 5
63890: PUSH
63891: LD_INT 2
63893: ARRAY
63894: PPUSH
63895: CALL_OW 111
// end ;
63899: LD_VAR 0 3
63903: RET
// export function PrepareApemanSoldier ( ) ; begin
63904: LD_INT 0
63906: PPUSH
// uc_nation := 0 ;
63907: LD_ADDR_OWVAR 21
63911: PUSH
63912: LD_INT 0
63914: ST_TO_ADDR
// hc_sex := sex_male ;
63915: LD_ADDR_OWVAR 27
63919: PUSH
63920: LD_INT 1
63922: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63923: LD_ADDR_OWVAR 28
63927: PUSH
63928: LD_INT 15
63930: ST_TO_ADDR
// hc_gallery :=  ;
63931: LD_ADDR_OWVAR 33
63935: PUSH
63936: LD_STRING 
63938: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63939: LD_ADDR_OWVAR 31
63943: PUSH
63944: LD_INT 0
63946: PPUSH
63947: LD_INT 3
63949: PPUSH
63950: CALL_OW 12
63954: PUSH
63955: LD_INT 0
63957: PPUSH
63958: LD_INT 3
63960: PPUSH
63961: CALL_OW 12
63965: PUSH
63966: LD_INT 0
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: ST_TO_ADDR
// end ;
63978: LD_VAR 0 1
63982: RET
// export function PrepareApemanEngineer ( ) ; begin
63983: LD_INT 0
63985: PPUSH
// uc_nation := 0 ;
63986: LD_ADDR_OWVAR 21
63990: PUSH
63991: LD_INT 0
63993: ST_TO_ADDR
// hc_sex := sex_male ;
63994: LD_ADDR_OWVAR 27
63998: PUSH
63999: LD_INT 1
64001: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64002: LD_ADDR_OWVAR 28
64006: PUSH
64007: LD_INT 16
64009: ST_TO_ADDR
// hc_gallery :=  ;
64010: LD_ADDR_OWVAR 33
64014: PUSH
64015: LD_STRING 
64017: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64018: LD_ADDR_OWVAR 31
64022: PUSH
64023: LD_INT 0
64025: PPUSH
64026: LD_INT 3
64028: PPUSH
64029: CALL_OW 12
64033: PUSH
64034: LD_INT 0
64036: PPUSH
64037: LD_INT 3
64039: PPUSH
64040: CALL_OW 12
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// end ;
64057: LD_VAR 0 1
64061: RET
// export function PrepareApeman ( agressivity ) ; begin
64062: LD_INT 0
64064: PPUSH
// uc_side := 0 ;
64065: LD_ADDR_OWVAR 20
64069: PUSH
64070: LD_INT 0
64072: ST_TO_ADDR
// uc_nation := 0 ;
64073: LD_ADDR_OWVAR 21
64077: PUSH
64078: LD_INT 0
64080: ST_TO_ADDR
// hc_sex := sex_male ;
64081: LD_ADDR_OWVAR 27
64085: PUSH
64086: LD_INT 1
64088: ST_TO_ADDR
// hc_class := class_apeman ;
64089: LD_ADDR_OWVAR 28
64093: PUSH
64094: LD_INT 12
64096: ST_TO_ADDR
// hc_gallery :=  ;
64097: LD_ADDR_OWVAR 33
64101: PUSH
64102: LD_STRING 
64104: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64105: LD_ADDR_OWVAR 35
64109: PUSH
64110: LD_VAR 0 1
64114: NEG
64115: PPUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: CALL_OW 12
64125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64126: LD_ADDR_OWVAR 31
64130: PUSH
64131: LD_INT 0
64133: PPUSH
64134: LD_INT 3
64136: PPUSH
64137: CALL_OW 12
64141: PUSH
64142: LD_INT 0
64144: PPUSH
64145: LD_INT 3
64147: PPUSH
64148: CALL_OW 12
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// end ;
64165: LD_VAR 0 2
64169: RET
// export function PrepareTiger ( agressivity ) ; begin
64170: LD_INT 0
64172: PPUSH
// uc_side := 0 ;
64173: LD_ADDR_OWVAR 20
64177: PUSH
64178: LD_INT 0
64180: ST_TO_ADDR
// uc_nation := 0 ;
64181: LD_ADDR_OWVAR 21
64185: PUSH
64186: LD_INT 0
64188: ST_TO_ADDR
// hc_class := class_tiger ;
64189: LD_ADDR_OWVAR 28
64193: PUSH
64194: LD_INT 14
64196: ST_TO_ADDR
// hc_gallery :=  ;
64197: LD_ADDR_OWVAR 33
64201: PUSH
64202: LD_STRING 
64204: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64205: LD_ADDR_OWVAR 35
64209: PUSH
64210: LD_VAR 0 1
64214: NEG
64215: PPUSH
64216: LD_VAR 0 1
64220: PPUSH
64221: CALL_OW 12
64225: ST_TO_ADDR
// end ;
64226: LD_VAR 0 2
64230: RET
// export function PrepareEnchidna ( ) ; begin
64231: LD_INT 0
64233: PPUSH
// uc_side := 0 ;
64234: LD_ADDR_OWVAR 20
64238: PUSH
64239: LD_INT 0
64241: ST_TO_ADDR
// uc_nation := 0 ;
64242: LD_ADDR_OWVAR 21
64246: PUSH
64247: LD_INT 0
64249: ST_TO_ADDR
// hc_class := class_baggie ;
64250: LD_ADDR_OWVAR 28
64254: PUSH
64255: LD_INT 13
64257: ST_TO_ADDR
// hc_gallery :=  ;
64258: LD_ADDR_OWVAR 33
64262: PUSH
64263: LD_STRING 
64265: ST_TO_ADDR
// end ;
64266: LD_VAR 0 1
64270: RET
// export function PrepareFrog ( ) ; begin
64271: LD_INT 0
64273: PPUSH
// uc_side := 0 ;
64274: LD_ADDR_OWVAR 20
64278: PUSH
64279: LD_INT 0
64281: ST_TO_ADDR
// uc_nation := 0 ;
64282: LD_ADDR_OWVAR 21
64286: PUSH
64287: LD_INT 0
64289: ST_TO_ADDR
// hc_class := class_frog ;
64290: LD_ADDR_OWVAR 28
64294: PUSH
64295: LD_INT 19
64297: ST_TO_ADDR
// hc_gallery :=  ;
64298: LD_ADDR_OWVAR 33
64302: PUSH
64303: LD_STRING 
64305: ST_TO_ADDR
// end ;
64306: LD_VAR 0 1
64310: RET
// export function PrepareFish ( ) ; begin
64311: LD_INT 0
64313: PPUSH
// uc_side := 0 ;
64314: LD_ADDR_OWVAR 20
64318: PUSH
64319: LD_INT 0
64321: ST_TO_ADDR
// uc_nation := 0 ;
64322: LD_ADDR_OWVAR 21
64326: PUSH
64327: LD_INT 0
64329: ST_TO_ADDR
// hc_class := class_fish ;
64330: LD_ADDR_OWVAR 28
64334: PUSH
64335: LD_INT 20
64337: ST_TO_ADDR
// hc_gallery :=  ;
64338: LD_ADDR_OWVAR 33
64342: PUSH
64343: LD_STRING 
64345: ST_TO_ADDR
// end ;
64346: LD_VAR 0 1
64350: RET
// export function PrepareBird ( ) ; begin
64351: LD_INT 0
64353: PPUSH
// uc_side := 0 ;
64354: LD_ADDR_OWVAR 20
64358: PUSH
64359: LD_INT 0
64361: ST_TO_ADDR
// uc_nation := 0 ;
64362: LD_ADDR_OWVAR 21
64366: PUSH
64367: LD_INT 0
64369: ST_TO_ADDR
// hc_class := class_phororhacos ;
64370: LD_ADDR_OWVAR 28
64374: PUSH
64375: LD_INT 18
64377: ST_TO_ADDR
// hc_gallery :=  ;
64378: LD_ADDR_OWVAR 33
64382: PUSH
64383: LD_STRING 
64385: ST_TO_ADDR
// end ;
64386: LD_VAR 0 1
64390: RET
// export function PrepareHorse ( ) ; begin
64391: LD_INT 0
64393: PPUSH
// uc_side := 0 ;
64394: LD_ADDR_OWVAR 20
64398: PUSH
64399: LD_INT 0
64401: ST_TO_ADDR
// uc_nation := 0 ;
64402: LD_ADDR_OWVAR 21
64406: PUSH
64407: LD_INT 0
64409: ST_TO_ADDR
// hc_class := class_horse ;
64410: LD_ADDR_OWVAR 28
64414: PUSH
64415: LD_INT 21
64417: ST_TO_ADDR
// hc_gallery :=  ;
64418: LD_ADDR_OWVAR 33
64422: PUSH
64423: LD_STRING 
64425: ST_TO_ADDR
// end ;
64426: LD_VAR 0 1
64430: RET
// export function PrepareMastodont ( ) ; begin
64431: LD_INT 0
64433: PPUSH
// uc_side := 0 ;
64434: LD_ADDR_OWVAR 20
64438: PUSH
64439: LD_INT 0
64441: ST_TO_ADDR
// uc_nation := 0 ;
64442: LD_ADDR_OWVAR 21
64446: PUSH
64447: LD_INT 0
64449: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64450: LD_ADDR_OWVAR 37
64454: PUSH
64455: LD_INT 31
64457: ST_TO_ADDR
// vc_control := control_rider ;
64458: LD_ADDR_OWVAR 38
64462: PUSH
64463: LD_INT 4
64465: ST_TO_ADDR
// end ;
64466: LD_VAR 0 1
64470: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64471: LD_INT 0
64473: PPUSH
64474: PPUSH
64475: PPUSH
// uc_side = 0 ;
64476: LD_ADDR_OWVAR 20
64480: PUSH
64481: LD_INT 0
64483: ST_TO_ADDR
// uc_nation = 0 ;
64484: LD_ADDR_OWVAR 21
64488: PUSH
64489: LD_INT 0
64491: ST_TO_ADDR
// InitHc_All ( ) ;
64492: CALL_OW 584
// InitVc ;
64496: CALL_OW 20
// if mastodonts then
64500: LD_VAR 0 6
64504: IFFALSE 64571
// for i = 1 to mastodonts do
64506: LD_ADDR_VAR 0 11
64510: PUSH
64511: DOUBLE
64512: LD_INT 1
64514: DEC
64515: ST_TO_ADDR
64516: LD_VAR 0 6
64520: PUSH
64521: FOR_TO
64522: IFFALSE 64569
// begin vc_chassis := 31 ;
64524: LD_ADDR_OWVAR 37
64528: PUSH
64529: LD_INT 31
64531: ST_TO_ADDR
// vc_control := control_rider ;
64532: LD_ADDR_OWVAR 38
64536: PUSH
64537: LD_INT 4
64539: ST_TO_ADDR
// animal := CreateVehicle ;
64540: LD_ADDR_VAR 0 12
64544: PUSH
64545: CALL_OW 45
64549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64550: LD_VAR 0 12
64554: PPUSH
64555: LD_VAR 0 8
64559: PPUSH
64560: LD_INT 0
64562: PPUSH
64563: CALL 66699 0 3
// end ;
64567: GO 64521
64569: POP
64570: POP
// if horses then
64571: LD_VAR 0 5
64575: IFFALSE 64642
// for i = 1 to horses do
64577: LD_ADDR_VAR 0 11
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_VAR 0 5
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64640
// begin hc_class := 21 ;
64595: LD_ADDR_OWVAR 28
64599: PUSH
64600: LD_INT 21
64602: ST_TO_ADDR
// hc_gallery :=  ;
64603: LD_ADDR_OWVAR 33
64607: PUSH
64608: LD_STRING 
64610: ST_TO_ADDR
// animal := CreateHuman ;
64611: LD_ADDR_VAR 0 12
64615: PUSH
64616: CALL_OW 44
64620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64621: LD_VAR 0 12
64625: PPUSH
64626: LD_VAR 0 8
64630: PPUSH
64631: LD_INT 0
64633: PPUSH
64634: CALL 66699 0 3
// end ;
64638: GO 64592
64640: POP
64641: POP
// if birds then
64642: LD_VAR 0 1
64646: IFFALSE 64713
// for i = 1 to birds do
64648: LD_ADDR_VAR 0 11
64652: PUSH
64653: DOUBLE
64654: LD_INT 1
64656: DEC
64657: ST_TO_ADDR
64658: LD_VAR 0 1
64662: PUSH
64663: FOR_TO
64664: IFFALSE 64711
// begin hc_class = 18 ;
64666: LD_ADDR_OWVAR 28
64670: PUSH
64671: LD_INT 18
64673: ST_TO_ADDR
// hc_gallery =  ;
64674: LD_ADDR_OWVAR 33
64678: PUSH
64679: LD_STRING 
64681: ST_TO_ADDR
// animal := CreateHuman ;
64682: LD_ADDR_VAR 0 12
64686: PUSH
64687: CALL_OW 44
64691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64692: LD_VAR 0 12
64696: PPUSH
64697: LD_VAR 0 8
64701: PPUSH
64702: LD_INT 0
64704: PPUSH
64705: CALL 66699 0 3
// end ;
64709: GO 64663
64711: POP
64712: POP
// if tigers then
64713: LD_VAR 0 2
64717: IFFALSE 64801
// for i = 1 to tigers do
64719: LD_ADDR_VAR 0 11
64723: PUSH
64724: DOUBLE
64725: LD_INT 1
64727: DEC
64728: ST_TO_ADDR
64729: LD_VAR 0 2
64733: PUSH
64734: FOR_TO
64735: IFFALSE 64799
// begin hc_class = class_tiger ;
64737: LD_ADDR_OWVAR 28
64741: PUSH
64742: LD_INT 14
64744: ST_TO_ADDR
// hc_gallery =  ;
64745: LD_ADDR_OWVAR 33
64749: PUSH
64750: LD_STRING 
64752: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64753: LD_ADDR_OWVAR 35
64757: PUSH
64758: LD_INT 7
64760: NEG
64761: PPUSH
64762: LD_INT 7
64764: PPUSH
64765: CALL_OW 12
64769: ST_TO_ADDR
// animal := CreateHuman ;
64770: LD_ADDR_VAR 0 12
64774: PUSH
64775: CALL_OW 44
64779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64780: LD_VAR 0 12
64784: PPUSH
64785: LD_VAR 0 8
64789: PPUSH
64790: LD_INT 0
64792: PPUSH
64793: CALL 66699 0 3
// end ;
64797: GO 64734
64799: POP
64800: POP
// if apemans then
64801: LD_VAR 0 3
64805: IFFALSE 64928
// for i = 1 to apemans do
64807: LD_ADDR_VAR 0 11
64811: PUSH
64812: DOUBLE
64813: LD_INT 1
64815: DEC
64816: ST_TO_ADDR
64817: LD_VAR 0 3
64821: PUSH
64822: FOR_TO
64823: IFFALSE 64926
// begin hc_class = class_apeman ;
64825: LD_ADDR_OWVAR 28
64829: PUSH
64830: LD_INT 12
64832: ST_TO_ADDR
// hc_gallery =  ;
64833: LD_ADDR_OWVAR 33
64837: PUSH
64838: LD_STRING 
64840: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64841: LD_ADDR_OWVAR 35
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PPUSH
64850: LD_INT 2
64852: PPUSH
64853: CALL_OW 12
64857: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64858: LD_ADDR_OWVAR 31
64862: PUSH
64863: LD_INT 1
64865: PPUSH
64866: LD_INT 3
64868: PPUSH
64869: CALL_OW 12
64873: PUSH
64874: LD_INT 1
64876: PPUSH
64877: LD_INT 3
64879: PPUSH
64880: CALL_OW 12
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// animal := CreateHuman ;
64897: LD_ADDR_VAR 0 12
64901: PUSH
64902: CALL_OW 44
64906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64907: LD_VAR 0 12
64911: PPUSH
64912: LD_VAR 0 8
64916: PPUSH
64917: LD_INT 0
64919: PPUSH
64920: CALL 66699 0 3
// end ;
64924: GO 64822
64926: POP
64927: POP
// if enchidnas then
64928: LD_VAR 0 4
64932: IFFALSE 64999
// for i = 1 to enchidnas do
64934: LD_ADDR_VAR 0 11
64938: PUSH
64939: DOUBLE
64940: LD_INT 1
64942: DEC
64943: ST_TO_ADDR
64944: LD_VAR 0 4
64948: PUSH
64949: FOR_TO
64950: IFFALSE 64997
// begin hc_class = 13 ;
64952: LD_ADDR_OWVAR 28
64956: PUSH
64957: LD_INT 13
64959: ST_TO_ADDR
// hc_gallery =  ;
64960: LD_ADDR_OWVAR 33
64964: PUSH
64965: LD_STRING 
64967: ST_TO_ADDR
// animal := CreateHuman ;
64968: LD_ADDR_VAR 0 12
64972: PUSH
64973: CALL_OW 44
64977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64978: LD_VAR 0 12
64982: PPUSH
64983: LD_VAR 0 8
64987: PPUSH
64988: LD_INT 0
64990: PPUSH
64991: CALL 66699 0 3
// end ;
64995: GO 64949
64997: POP
64998: POP
// if fishes then
64999: LD_VAR 0 7
65003: IFFALSE 65070
// for i = 1 to fishes do
65005: LD_ADDR_VAR 0 11
65009: PUSH
65010: DOUBLE
65011: LD_INT 1
65013: DEC
65014: ST_TO_ADDR
65015: LD_VAR 0 7
65019: PUSH
65020: FOR_TO
65021: IFFALSE 65068
// begin hc_class = 20 ;
65023: LD_ADDR_OWVAR 28
65027: PUSH
65028: LD_INT 20
65030: ST_TO_ADDR
// hc_gallery =  ;
65031: LD_ADDR_OWVAR 33
65035: PUSH
65036: LD_STRING 
65038: ST_TO_ADDR
// animal := CreateHuman ;
65039: LD_ADDR_VAR 0 12
65043: PUSH
65044: CALL_OW 44
65048: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65049: LD_VAR 0 12
65053: PPUSH
65054: LD_VAR 0 9
65058: PPUSH
65059: LD_INT 0
65061: PPUSH
65062: CALL 66699 0 3
// end ;
65066: GO 65020
65068: POP
65069: POP
// end ;
65070: LD_VAR 0 10
65074: RET
// export function WantHeal ( sci , unit ) ; begin
65075: LD_INT 0
65077: PPUSH
// if GetTaskList ( sci ) > 0 then
65078: LD_VAR 0 1
65082: PPUSH
65083: CALL_OW 437
65087: PUSH
65088: LD_INT 0
65090: GREATER
65091: IFFALSE 65161
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65093: LD_VAR 0 1
65097: PPUSH
65098: CALL_OW 437
65102: PUSH
65103: LD_INT 1
65105: ARRAY
65106: PUSH
65107: LD_INT 1
65109: ARRAY
65110: PUSH
65111: LD_STRING l
65113: EQUAL
65114: PUSH
65115: LD_VAR 0 1
65119: PPUSH
65120: CALL_OW 437
65124: PUSH
65125: LD_INT 1
65127: ARRAY
65128: PUSH
65129: LD_INT 4
65131: ARRAY
65132: PUSH
65133: LD_VAR 0 2
65137: EQUAL
65138: AND
65139: IFFALSE 65151
// result := true else
65141: LD_ADDR_VAR 0 3
65145: PUSH
65146: LD_INT 1
65148: ST_TO_ADDR
65149: GO 65159
// result := false ;
65151: LD_ADDR_VAR 0 3
65155: PUSH
65156: LD_INT 0
65158: ST_TO_ADDR
// end else
65159: GO 65169
// result := false ;
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: LD_INT 0
65168: ST_TO_ADDR
// end ;
65169: LD_VAR 0 3
65173: RET
// export function HealTarget ( sci ) ; begin
65174: LD_INT 0
65176: PPUSH
// if not sci then
65177: LD_VAR 0 1
65181: NOT
65182: IFFALSE 65186
// exit ;
65184: GO 65251
// result := 0 ;
65186: LD_ADDR_VAR 0 2
65190: PUSH
65191: LD_INT 0
65193: ST_TO_ADDR
// if GetTaskList ( sci ) then
65194: LD_VAR 0 1
65198: PPUSH
65199: CALL_OW 437
65203: IFFALSE 65251
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 437
65214: PUSH
65215: LD_INT 1
65217: ARRAY
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PUSH
65223: LD_STRING l
65225: EQUAL
65226: IFFALSE 65251
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65228: LD_ADDR_VAR 0 2
65232: PUSH
65233: LD_VAR 0 1
65237: PPUSH
65238: CALL_OW 437
65242: PUSH
65243: LD_INT 1
65245: ARRAY
65246: PUSH
65247: LD_INT 4
65249: ARRAY
65250: ST_TO_ADDR
// end ;
65251: LD_VAR 0 2
65255: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65256: LD_INT 0
65258: PPUSH
65259: PPUSH
65260: PPUSH
65261: PPUSH
// if not base_units then
65262: LD_VAR 0 1
65266: NOT
65267: IFFALSE 65271
// exit ;
65269: GO 65358
// result := false ;
65271: LD_ADDR_VAR 0 2
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65279: LD_ADDR_VAR 0 5
65283: PUSH
65284: LD_VAR 0 1
65288: PPUSH
65289: LD_INT 21
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PPUSH
65299: CALL_OW 72
65303: ST_TO_ADDR
// if not tmp then
65304: LD_VAR 0 5
65308: NOT
65309: IFFALSE 65313
// exit ;
65311: GO 65358
// for i in tmp do
65313: LD_ADDR_VAR 0 3
65317: PUSH
65318: LD_VAR 0 5
65322: PUSH
65323: FOR_IN
65324: IFFALSE 65356
// begin result := EnemyInRange ( i , 22 ) ;
65326: LD_ADDR_VAR 0 2
65330: PUSH
65331: LD_VAR 0 3
65335: PPUSH
65336: LD_INT 22
65338: PPUSH
65339: CALL 62945 0 2
65343: ST_TO_ADDR
// if result then
65344: LD_VAR 0 2
65348: IFFALSE 65354
// exit ;
65350: POP
65351: POP
65352: GO 65358
// end ;
65354: GO 65323
65356: POP
65357: POP
// end ;
65358: LD_VAR 0 2
65362: RET
// export function FilterByTag ( units , tag ) ; begin
65363: LD_INT 0
65365: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65366: LD_ADDR_VAR 0 3
65370: PUSH
65371: LD_VAR 0 1
65375: PPUSH
65376: LD_INT 120
65378: PUSH
65379: LD_VAR 0 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PPUSH
65388: CALL_OW 72
65392: ST_TO_ADDR
// end ;
65393: LD_VAR 0 3
65397: RET
// export function IsDriver ( un ) ; begin
65398: LD_INT 0
65400: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65401: LD_ADDR_VAR 0 2
65405: PUSH
65406: LD_VAR 0 1
65410: PUSH
65411: LD_INT 55
65413: PUSH
65414: EMPTY
65415: LIST
65416: PPUSH
65417: CALL_OW 69
65421: IN
65422: ST_TO_ADDR
// end ;
65423: LD_VAR 0 2
65427: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65428: LD_INT 0
65430: PPUSH
65431: PPUSH
// list := [ ] ;
65432: LD_ADDR_VAR 0 5
65436: PUSH
65437: EMPTY
65438: ST_TO_ADDR
// case d of 0 :
65439: LD_VAR 0 3
65443: PUSH
65444: LD_INT 0
65446: DOUBLE
65447: EQUAL
65448: IFTRUE 65452
65450: GO 65585
65452: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65453: LD_ADDR_VAR 0 5
65457: PUSH
65458: LD_VAR 0 1
65462: PUSH
65463: LD_INT 4
65465: MINUS
65466: PUSH
65467: LD_VAR 0 2
65471: PUSH
65472: LD_INT 4
65474: MINUS
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: PUSH
65484: LD_VAR 0 1
65488: PUSH
65489: LD_INT 3
65491: MINUS
65492: PUSH
65493: LD_VAR 0 2
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: PUSH
65506: LD_VAR 0 1
65510: PUSH
65511: LD_INT 4
65513: PLUS
65514: PUSH
65515: LD_VAR 0 2
65519: PUSH
65520: LD_INT 4
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: PUSH
65528: LD_VAR 0 1
65532: PUSH
65533: LD_INT 3
65535: PLUS
65536: PUSH
65537: LD_VAR 0 2
65541: PUSH
65542: LD_INT 3
65544: PLUS
65545: PUSH
65546: LD_INT 5
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: PUSH
65554: LD_VAR 0 1
65558: PUSH
65559: LD_VAR 0 2
65563: PUSH
65564: LD_INT 4
65566: PLUS
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: ST_TO_ADDR
// end ; 1 :
65583: GO 66283
65585: LD_INT 1
65587: DOUBLE
65588: EQUAL
65589: IFTRUE 65593
65591: GO 65726
65593: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65594: LD_ADDR_VAR 0 5
65598: PUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_INT 4
65611: MINUS
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: PUSH
65621: LD_VAR 0 1
65625: PUSH
65626: LD_INT 3
65628: MINUS
65629: PUSH
65630: LD_VAR 0 2
65634: PUSH
65635: LD_INT 3
65637: MINUS
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: PUSH
65647: LD_VAR 0 1
65651: PUSH
65652: LD_INT 4
65654: MINUS
65655: PUSH
65656: LD_VAR 0 2
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: PUSH
65669: LD_VAR 0 1
65673: PUSH
65674: LD_VAR 0 2
65678: PUSH
65679: LD_INT 3
65681: PLUS
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: LD_VAR 0 1
65695: PUSH
65696: LD_INT 4
65698: PLUS
65699: PUSH
65700: LD_VAR 0 2
65704: PUSH
65705: LD_INT 4
65707: PLUS
65708: PUSH
65709: LD_INT 5
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// end ; 2 :
65724: GO 66283
65726: LD_INT 2
65728: DOUBLE
65729: EQUAL
65730: IFTRUE 65734
65732: GO 65863
65734: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65735: LD_ADDR_VAR 0 5
65739: PUSH
65740: LD_VAR 0 1
65744: PUSH
65745: LD_VAR 0 2
65749: PUSH
65750: LD_INT 3
65752: MINUS
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: PUSH
65762: LD_VAR 0 1
65766: PUSH
65767: LD_INT 4
65769: PLUS
65770: PUSH
65771: LD_VAR 0 2
65775: PUSH
65776: LD_INT 4
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: PUSH
65784: LD_VAR 0 1
65788: PUSH
65789: LD_VAR 0 2
65793: PUSH
65794: LD_INT 4
65796: PLUS
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_INT 3
65813: MINUS
65814: PUSH
65815: LD_VAR 0 2
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: PUSH
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 4
65835: MINUS
65836: PUSH
65837: LD_VAR 0 2
65841: PUSH
65842: LD_INT 4
65844: MINUS
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: ST_TO_ADDR
// end ; 3 :
65861: GO 66283
65863: LD_INT 3
65865: DOUBLE
65866: EQUAL
65867: IFTRUE 65871
65869: GO 66004
65871: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65872: LD_ADDR_VAR 0 5
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 3
65884: PLUS
65885: PUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: LD_VAR 0 1
65903: PUSH
65904: LD_INT 4
65906: PLUS
65907: PUSH
65908: LD_VAR 0 2
65912: PUSH
65913: LD_INT 4
65915: PLUS
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: LD_VAR 0 1
65929: PUSH
65930: LD_INT 4
65932: MINUS
65933: PUSH
65934: LD_VAR 0 2
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: LD_VAR 0 1
65951: PUSH
65952: LD_VAR 0 2
65956: PUSH
65957: LD_INT 4
65959: MINUS
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: LD_VAR 0 1
65973: PUSH
65974: LD_INT 3
65976: MINUS
65977: PUSH
65978: LD_VAR 0 2
65982: PUSH
65983: LD_INT 3
65985: MINUS
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: ST_TO_ADDR
// end ; 4 :
66002: GO 66283
66004: LD_INT 4
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66012
66010: GO 66145
66012: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66013: LD_ADDR_VAR 0 5
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_VAR 0 2
66027: PUSH
66028: LD_INT 4
66030: PLUS
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_INT 3
66047: PLUS
66048: PUSH
66049: LD_VAR 0 2
66053: PUSH
66054: LD_INT 3
66056: PLUS
66057: PUSH
66058: LD_INT 5
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: LIST
66065: PUSH
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 4
66073: PLUS
66074: PUSH
66075: LD_VAR 0 2
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_VAR 0 2
66097: PUSH
66098: LD_INT 3
66100: MINUS
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: LD_VAR 0 1
66114: PUSH
66115: LD_INT 4
66117: MINUS
66118: PUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_INT 4
66126: MINUS
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// end ; 5 :
66143: GO 66283
66145: LD_INT 5
66147: DOUBLE
66148: EQUAL
66149: IFTRUE 66153
66151: GO 66282
66153: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66154: LD_ADDR_VAR 0 5
66158: PUSH
66159: LD_VAR 0 1
66163: PUSH
66164: LD_INT 4
66166: MINUS
66167: PUSH
66168: LD_VAR 0 2
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: PUSH
66181: LD_VAR 0 1
66185: PUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_INT 4
66193: MINUS
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: LIST
66202: PUSH
66203: LD_VAR 0 1
66207: PUSH
66208: LD_INT 4
66210: PLUS
66211: PUSH
66212: LD_VAR 0 2
66216: PUSH
66217: LD_INT 4
66219: PLUS
66220: PUSH
66221: LD_INT 5
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: PUSH
66229: LD_VAR 0 1
66233: PUSH
66234: LD_INT 3
66236: PLUS
66237: PUSH
66238: LD_VAR 0 2
66242: PUSH
66243: LD_INT 4
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: PUSH
66251: LD_VAR 0 1
66255: PUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_INT 3
66263: PLUS
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: ST_TO_ADDR
// end ; end ;
66280: GO 66283
66282: POP
// result := list ;
66283: LD_ADDR_VAR 0 4
66287: PUSH
66288: LD_VAR 0 5
66292: ST_TO_ADDR
// end ;
66293: LD_VAR 0 4
66297: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66298: LD_INT 0
66300: PPUSH
66301: PPUSH
66302: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66303: LD_VAR 0 1
66307: NOT
66308: PUSH
66309: LD_VAR 0 2
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: LD_INT 4
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: IN
66332: NOT
66333: OR
66334: IFFALSE 66338
// exit ;
66336: GO 66421
// tmp := [ ] ;
66338: LD_ADDR_VAR 0 5
66342: PUSH
66343: EMPTY
66344: ST_TO_ADDR
// for i in units do
66345: LD_ADDR_VAR 0 4
66349: PUSH
66350: LD_VAR 0 1
66354: PUSH
66355: FOR_IN
66356: IFFALSE 66390
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66358: LD_ADDR_VAR 0 5
66362: PUSH
66363: LD_VAR 0 5
66367: PPUSH
66368: LD_VAR 0 4
66372: PPUSH
66373: LD_VAR 0 2
66377: PPUSH
66378: CALL_OW 259
66382: PPUSH
66383: CALL 67782 0 2
66387: ST_TO_ADDR
66388: GO 66355
66390: POP
66391: POP
// if not tmp then
66392: LD_VAR 0 5
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 66421
// result := SortListByListDesc ( units , tmp ) ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_VAR 0 5
66415: PPUSH
66416: CALL_OW 77
66420: ST_TO_ADDR
// end ;
66421: LD_VAR 0 3
66425: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
66430: PPUSH
// result := false ;
66431: LD_ADDR_VAR 0 3
66435: PUSH
66436: LD_INT 0
66438: ST_TO_ADDR
// if not building then
66439: LD_VAR 0 2
66443: NOT
66444: IFFALSE 66448
// exit ;
66446: GO 66586
// x := GetX ( building ) ;
66448: LD_ADDR_VAR 0 4
66452: PUSH
66453: LD_VAR 0 2
66457: PPUSH
66458: CALL_OW 250
66462: ST_TO_ADDR
// y := GetY ( building ) ;
66463: LD_ADDR_VAR 0 5
66467: PUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: CALL_OW 251
66477: ST_TO_ADDR
// if not x or not y then
66478: LD_VAR 0 4
66482: NOT
66483: PUSH
66484: LD_VAR 0 5
66488: NOT
66489: OR
66490: IFFALSE 66494
// exit ;
66492: GO 66586
// if GetTaskList ( unit ) then
66494: LD_VAR 0 1
66498: PPUSH
66499: CALL_OW 437
66503: IFFALSE 66586
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66505: LD_STRING e
66507: PUSH
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL_OW 437
66517: PUSH
66518: LD_INT 1
66520: ARRAY
66521: PUSH
66522: LD_INT 1
66524: ARRAY
66525: EQUAL
66526: PUSH
66527: LD_VAR 0 4
66531: PUSH
66532: LD_VAR 0 1
66536: PPUSH
66537: CALL_OW 437
66541: PUSH
66542: LD_INT 1
66544: ARRAY
66545: PUSH
66546: LD_INT 2
66548: ARRAY
66549: EQUAL
66550: AND
66551: PUSH
66552: LD_VAR 0 5
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 437
66566: PUSH
66567: LD_INT 1
66569: ARRAY
66570: PUSH
66571: LD_INT 3
66573: ARRAY
66574: EQUAL
66575: AND
66576: IFFALSE 66586
// result := true end ;
66578: LD_ADDR_VAR 0 3
66582: PUSH
66583: LD_INT 1
66585: ST_TO_ADDR
// end ;
66586: LD_VAR 0 3
66590: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66591: LD_INT 0
66593: PPUSH
// result := false ;
66594: LD_ADDR_VAR 0 4
66598: PUSH
66599: LD_INT 0
66601: ST_TO_ADDR
// if GetTaskList ( unit ) then
66602: LD_VAR 0 1
66606: PPUSH
66607: CALL_OW 437
66611: IFFALSE 66694
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66613: LD_STRING M
66615: PUSH
66616: LD_VAR 0 1
66620: PPUSH
66621: CALL_OW 437
66625: PUSH
66626: LD_INT 1
66628: ARRAY
66629: PUSH
66630: LD_INT 1
66632: ARRAY
66633: EQUAL
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 437
66649: PUSH
66650: LD_INT 1
66652: ARRAY
66653: PUSH
66654: LD_INT 2
66656: ARRAY
66657: EQUAL
66658: AND
66659: PUSH
66660: LD_VAR 0 3
66664: PUSH
66665: LD_VAR 0 1
66669: PPUSH
66670: CALL_OW 437
66674: PUSH
66675: LD_INT 1
66677: ARRAY
66678: PUSH
66679: LD_INT 3
66681: ARRAY
66682: EQUAL
66683: AND
66684: IFFALSE 66694
// result := true ;
66686: LD_ADDR_VAR 0 4
66690: PUSH
66691: LD_INT 1
66693: ST_TO_ADDR
// end ; end ;
66694: LD_VAR 0 4
66698: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66699: LD_INT 0
66701: PPUSH
66702: PPUSH
66703: PPUSH
66704: PPUSH
// if not unit or not area then
66705: LD_VAR 0 1
66709: NOT
66710: PUSH
66711: LD_VAR 0 2
66715: NOT
66716: OR
66717: IFFALSE 66721
// exit ;
66719: GO 66885
// tmp := AreaToList ( area , i ) ;
66721: LD_ADDR_VAR 0 6
66725: PUSH
66726: LD_VAR 0 2
66730: PPUSH
66731: LD_VAR 0 5
66735: PPUSH
66736: CALL_OW 517
66740: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66741: LD_ADDR_VAR 0 5
66745: PUSH
66746: DOUBLE
66747: LD_INT 1
66749: DEC
66750: ST_TO_ADDR
66751: LD_VAR 0 6
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PUSH
66760: FOR_TO
66761: IFFALSE 66883
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66763: LD_ADDR_VAR 0 7
66767: PUSH
66768: LD_VAR 0 6
66772: PUSH
66773: LD_INT 1
66775: ARRAY
66776: PUSH
66777: LD_VAR 0 5
66781: ARRAY
66782: PUSH
66783: LD_VAR 0 6
66787: PUSH
66788: LD_INT 2
66790: ARRAY
66791: PUSH
66792: LD_VAR 0 5
66796: ARRAY
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66802: LD_VAR 0 7
66806: PUSH
66807: LD_INT 1
66809: ARRAY
66810: PPUSH
66811: LD_VAR 0 7
66815: PUSH
66816: LD_INT 2
66818: ARRAY
66819: PPUSH
66820: CALL_OW 428
66824: PUSH
66825: LD_INT 0
66827: EQUAL
66828: IFFALSE 66881
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66830: LD_VAR 0 1
66834: PPUSH
66835: LD_VAR 0 7
66839: PUSH
66840: LD_INT 1
66842: ARRAY
66843: PPUSH
66844: LD_VAR 0 7
66848: PUSH
66849: LD_INT 2
66851: ARRAY
66852: PPUSH
66853: LD_VAR 0 3
66857: PPUSH
66858: CALL_OW 48
// result := IsPlaced ( unit ) ;
66862: LD_ADDR_VAR 0 4
66866: PUSH
66867: LD_VAR 0 1
66871: PPUSH
66872: CALL_OW 305
66876: ST_TO_ADDR
// exit ;
66877: POP
66878: POP
66879: GO 66885
// end ; end ;
66881: GO 66760
66883: POP
66884: POP
// end ;
66885: LD_VAR 0 4
66889: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66890: LD_INT 0
66892: PPUSH
66893: PPUSH
66894: PPUSH
// if not side or side > 8 then
66895: LD_VAR 0 1
66899: NOT
66900: PUSH
66901: LD_VAR 0 1
66905: PUSH
66906: LD_INT 8
66908: GREATER
66909: OR
66910: IFFALSE 66914
// exit ;
66912: GO 67101
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_INT 22
66921: PUSH
66922: LD_VAR 0 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 21
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PPUSH
66945: CALL_OW 69
66949: ST_TO_ADDR
// if not tmp then
66950: LD_VAR 0 4
66954: NOT
66955: IFFALSE 66959
// exit ;
66957: GO 67101
// enable_addtolog := true ;
66959: LD_ADDR_OWVAR 81
66963: PUSH
66964: LD_INT 1
66966: ST_TO_ADDR
// AddToLog ( [ ) ;
66967: LD_STRING [
66969: PPUSH
66970: CALL_OW 561
// for i in tmp do
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: LD_VAR 0 4
66983: PUSH
66984: FOR_IN
66985: IFFALSE 67092
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66987: LD_STRING [
66989: PUSH
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 266
66999: STR
67000: PUSH
67001: LD_STRING , 
67003: STR
67004: PUSH
67005: LD_VAR 0 3
67009: PPUSH
67010: CALL_OW 250
67014: STR
67015: PUSH
67016: LD_STRING , 
67018: STR
67019: PUSH
67020: LD_VAR 0 3
67024: PPUSH
67025: CALL_OW 251
67029: STR
67030: PUSH
67031: LD_STRING , 
67033: STR
67034: PUSH
67035: LD_VAR 0 3
67039: PPUSH
67040: CALL_OW 254
67044: STR
67045: PUSH
67046: LD_STRING , 
67048: STR
67049: PUSH
67050: LD_VAR 0 3
67054: PPUSH
67055: LD_INT 1
67057: PPUSH
67058: CALL_OW 268
67062: STR
67063: PUSH
67064: LD_STRING , 
67066: STR
67067: PUSH
67068: LD_VAR 0 3
67072: PPUSH
67073: LD_INT 2
67075: PPUSH
67076: CALL_OW 268
67080: STR
67081: PUSH
67082: LD_STRING ],
67084: STR
67085: PPUSH
67086: CALL_OW 561
// end ;
67090: GO 66984
67092: POP
67093: POP
// AddToLog ( ]; ) ;
67094: LD_STRING ];
67096: PPUSH
67097: CALL_OW 561
// end ;
67101: LD_VAR 0 2
67105: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67106: LD_INT 0
67108: PPUSH
67109: PPUSH
67110: PPUSH
67111: PPUSH
67112: PPUSH
// if not area or not rate or not max then
67113: LD_VAR 0 1
67117: NOT
67118: PUSH
67119: LD_VAR 0 2
67123: NOT
67124: OR
67125: PUSH
67126: LD_VAR 0 4
67130: NOT
67131: OR
67132: IFFALSE 67136
// exit ;
67134: GO 67325
// while 1 do
67136: LD_INT 1
67138: IFFALSE 67325
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67140: LD_ADDR_VAR 0 9
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: LD_INT 1
67152: PPUSH
67153: CALL_OW 287
67157: PUSH
67158: LD_INT 10
67160: MUL
67161: ST_TO_ADDR
// r := rate / 10 ;
67162: LD_ADDR_VAR 0 7
67166: PUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_INT 10
67174: DIVREAL
67175: ST_TO_ADDR
// time := 1 1$00 ;
67176: LD_ADDR_VAR 0 8
67180: PUSH
67181: LD_INT 2100
67183: ST_TO_ADDR
// if amount < min then
67184: LD_VAR 0 9
67188: PUSH
67189: LD_VAR 0 3
67193: LESS
67194: IFFALSE 67212
// r := r * 2 else
67196: LD_ADDR_VAR 0 7
67200: PUSH
67201: LD_VAR 0 7
67205: PUSH
67206: LD_INT 2
67208: MUL
67209: ST_TO_ADDR
67210: GO 67238
// if amount > max then
67212: LD_VAR 0 9
67216: PUSH
67217: LD_VAR 0 4
67221: GREATER
67222: IFFALSE 67238
// r := r / 2 ;
67224: LD_ADDR_VAR 0 7
67228: PUSH
67229: LD_VAR 0 7
67233: PUSH
67234: LD_INT 2
67236: DIVREAL
67237: ST_TO_ADDR
// time := time / r ;
67238: LD_ADDR_VAR 0 8
67242: PUSH
67243: LD_VAR 0 8
67247: PUSH
67248: LD_VAR 0 7
67252: DIVREAL
67253: ST_TO_ADDR
// if time < 0 then
67254: LD_VAR 0 8
67258: PUSH
67259: LD_INT 0
67261: LESS
67262: IFFALSE 67279
// time := time * - 1 ;
67264: LD_ADDR_VAR 0 8
67268: PUSH
67269: LD_VAR 0 8
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: MUL
67278: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67279: LD_VAR 0 8
67283: PUSH
67284: LD_INT 35
67286: PPUSH
67287: LD_INT 875
67289: PPUSH
67290: CALL_OW 12
67294: PLUS
67295: PPUSH
67296: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67300: LD_INT 1
67302: PPUSH
67303: LD_INT 5
67305: PPUSH
67306: CALL_OW 12
67310: PPUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: LD_INT 1
67318: PPUSH
67319: CALL_OW 55
// end ;
67323: GO 67136
// end ;
67325: LD_VAR 0 5
67329: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67330: LD_INT 0
67332: PPUSH
67333: PPUSH
67334: PPUSH
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
67339: PPUSH
// if not turrets or not factories then
67340: LD_VAR 0 1
67344: NOT
67345: PUSH
67346: LD_VAR 0 2
67350: NOT
67351: OR
67352: IFFALSE 67356
// exit ;
67354: GO 67663
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67356: LD_ADDR_VAR 0 10
67360: PUSH
67361: LD_INT 5
67363: PUSH
67364: LD_INT 6
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 4
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: LD_INT 5
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 24
67398: PUSH
67399: LD_INT 25
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 23
67408: PUSH
67409: LD_INT 27
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 42
67422: PUSH
67423: LD_INT 43
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 44
67432: PUSH
67433: LD_INT 46
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 45
67442: PUSH
67443: LD_INT 47
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: ST_TO_ADDR
// result := [ ] ;
67460: LD_ADDR_VAR 0 3
67464: PUSH
67465: EMPTY
67466: ST_TO_ADDR
// for i in turrets do
67467: LD_ADDR_VAR 0 4
67471: PUSH
67472: LD_VAR 0 1
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67661
// begin nat := GetNation ( i ) ;
67480: LD_ADDR_VAR 0 7
67484: PUSH
67485: LD_VAR 0 4
67489: PPUSH
67490: CALL_OW 248
67494: ST_TO_ADDR
// weapon := 0 ;
67495: LD_ADDR_VAR 0 8
67499: PUSH
67500: LD_INT 0
67502: ST_TO_ADDR
// if not nat then
67503: LD_VAR 0 7
67507: NOT
67508: IFFALSE 67512
// continue ;
67510: GO 67477
// for j in list [ nat ] do
67512: LD_ADDR_VAR 0 5
67516: PUSH
67517: LD_VAR 0 10
67521: PUSH
67522: LD_VAR 0 7
67526: ARRAY
67527: PUSH
67528: FOR_IN
67529: IFFALSE 67570
// if GetBWeapon ( i ) = j [ 1 ] then
67531: LD_VAR 0 4
67535: PPUSH
67536: CALL_OW 269
67540: PUSH
67541: LD_VAR 0 5
67545: PUSH
67546: LD_INT 1
67548: ARRAY
67549: EQUAL
67550: IFFALSE 67568
// begin weapon := j [ 2 ] ;
67552: LD_ADDR_VAR 0 8
67556: PUSH
67557: LD_VAR 0 5
67561: PUSH
67562: LD_INT 2
67564: ARRAY
67565: ST_TO_ADDR
// break ;
67566: GO 67570
// end ;
67568: GO 67528
67570: POP
67571: POP
// if not weapon then
67572: LD_VAR 0 8
67576: NOT
67577: IFFALSE 67581
// continue ;
67579: GO 67477
// for k in factories do
67581: LD_ADDR_VAR 0 6
67585: PUSH
67586: LD_VAR 0 2
67590: PUSH
67591: FOR_IN
67592: IFFALSE 67657
// begin weapons := AvailableWeaponList ( k ) ;
67594: LD_ADDR_VAR 0 9
67598: PUSH
67599: LD_VAR 0 6
67603: PPUSH
67604: CALL_OW 478
67608: ST_TO_ADDR
// if not weapons then
67609: LD_VAR 0 9
67613: NOT
67614: IFFALSE 67618
// continue ;
67616: GO 67591
// if weapon in weapons then
67618: LD_VAR 0 8
67622: PUSH
67623: LD_VAR 0 9
67627: IN
67628: IFFALSE 67655
// begin result := [ i , weapon ] ;
67630: LD_ADDR_VAR 0 3
67634: PUSH
67635: LD_VAR 0 4
67639: PUSH
67640: LD_VAR 0 8
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: ST_TO_ADDR
// exit ;
67649: POP
67650: POP
67651: POP
67652: POP
67653: GO 67663
// end ; end ;
67655: GO 67591
67657: POP
67658: POP
// end ;
67659: GO 67477
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 3
67667: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67668: LD_INT 0
67670: PPUSH
// if not side or side > 8 then
67671: LD_VAR 0 3
67675: NOT
67676: PUSH
67677: LD_VAR 0 3
67681: PUSH
67682: LD_INT 8
67684: GREATER
67685: OR
67686: IFFALSE 67690
// exit ;
67688: GO 67749
// if not range then
67690: LD_VAR 0 4
67694: NOT
67695: IFFALSE 67706
// range := - 12 ;
67697: LD_ADDR_VAR 0 4
67701: PUSH
67702: LD_INT 12
67704: NEG
67705: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67706: LD_VAR 0 1
67710: PPUSH
67711: LD_VAR 0 2
67715: PPUSH
67716: LD_VAR 0 3
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67730: LD_VAR 0 1
67734: PPUSH
67735: LD_VAR 0 2
67739: PPUSH
67740: LD_VAR 0 3
67744: PPUSH
67745: CALL_OW 331
// end ;
67749: LD_VAR 0 5
67753: RET
// export function Video ( mode ) ; begin
67754: LD_INT 0
67756: PPUSH
// ingame_video = mode ;
67757: LD_ADDR_OWVAR 52
67761: PUSH
67762: LD_VAR 0 1
67766: ST_TO_ADDR
// interface_hidden = mode ;
67767: LD_ADDR_OWVAR 54
67771: PUSH
67772: LD_VAR 0 1
67776: ST_TO_ADDR
// end ;
67777: LD_VAR 0 2
67781: RET
// export function Join ( array , element ) ; begin
67782: LD_INT 0
67784: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67785: LD_ADDR_VAR 0 3
67789: PUSH
67790: LD_VAR 0 1
67794: PPUSH
67795: LD_VAR 0 1
67799: PUSH
67800: LD_INT 1
67802: PLUS
67803: PPUSH
67804: LD_VAR 0 2
67808: PPUSH
67809: CALL_OW 1
67813: ST_TO_ADDR
// end ;
67814: LD_VAR 0 3
67818: RET
// export function JoinUnion ( array , element ) ; begin
67819: LD_INT 0
67821: PPUSH
// result := array union element ;
67822: LD_ADDR_VAR 0 3
67826: PUSH
67827: LD_VAR 0 1
67831: PUSH
67832: LD_VAR 0 2
67836: UNION
67837: ST_TO_ADDR
// end ;
67838: LD_VAR 0 3
67842: RET
// export function GetBehemoths ( side ) ; begin
67843: LD_INT 0
67845: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67846: LD_ADDR_VAR 0 2
67850: PUSH
67851: LD_INT 22
67853: PUSH
67854: LD_VAR 0 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 31
67865: PUSH
67866: LD_INT 25
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PPUSH
67877: CALL_OW 69
67881: ST_TO_ADDR
// end ;
67882: LD_VAR 0 2
67886: RET
// export function Shuffle ( array ) ; var i , index ; begin
67887: LD_INT 0
67889: PPUSH
67890: PPUSH
67891: PPUSH
// result := [ ] ;
67892: LD_ADDR_VAR 0 2
67896: PUSH
67897: EMPTY
67898: ST_TO_ADDR
// if not array then
67899: LD_VAR 0 1
67903: NOT
67904: IFFALSE 67908
// exit ;
67906: GO 68007
// Randomize ;
67908: CALL_OW 10
// for i = array downto 1 do
67912: LD_ADDR_VAR 0 3
67916: PUSH
67917: DOUBLE
67918: LD_VAR 0 1
67922: INC
67923: ST_TO_ADDR
67924: LD_INT 1
67926: PUSH
67927: FOR_DOWNTO
67928: IFFALSE 68005
// begin index := rand ( 1 , array ) ;
67930: LD_ADDR_VAR 0 4
67934: PUSH
67935: LD_INT 1
67937: PPUSH
67938: LD_VAR 0 1
67942: PPUSH
67943: CALL_OW 12
67947: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67948: LD_ADDR_VAR 0 2
67952: PUSH
67953: LD_VAR 0 2
67957: PPUSH
67958: LD_VAR 0 2
67962: PUSH
67963: LD_INT 1
67965: PLUS
67966: PPUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_VAR 0 4
67976: ARRAY
67977: PPUSH
67978: CALL_OW 2
67982: ST_TO_ADDR
// array := Delete ( array , index ) ;
67983: LD_ADDR_VAR 0 1
67987: PUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: LD_VAR 0 4
67997: PPUSH
67998: CALL_OW 3
68002: ST_TO_ADDR
// end ;
68003: GO 67927
68005: POP
68006: POP
// end ;
68007: LD_VAR 0 2
68011: RET
// export function GetBaseMaterials ( base ) ; begin
68012: LD_INT 0
68014: PPUSH
// result := [ 0 , 0 , 0 ] ;
68015: LD_ADDR_VAR 0 2
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: LD_INT 0
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: ST_TO_ADDR
// if not base then
68034: LD_VAR 0 1
68038: NOT
68039: IFFALSE 68043
// exit ;
68041: GO 68092
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68043: LD_ADDR_VAR 0 2
68047: PUSH
68048: LD_VAR 0 1
68052: PPUSH
68053: LD_INT 1
68055: PPUSH
68056: CALL_OW 275
68060: PUSH
68061: LD_VAR 0 1
68065: PPUSH
68066: LD_INT 2
68068: PPUSH
68069: CALL_OW 275
68073: PUSH
68074: LD_VAR 0 1
68078: PPUSH
68079: LD_INT 3
68081: PPUSH
68082: CALL_OW 275
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: ST_TO_ADDR
// end ;
68092: LD_VAR 0 2
68096: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68097: LD_INT 0
68099: PPUSH
68100: PPUSH
// result := array ;
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_VAR 0 1
68110: ST_TO_ADDR
// if size >= result then
68111: LD_VAR 0 2
68115: PUSH
68116: LD_VAR 0 3
68120: GREATEREQUAL
68121: IFFALSE 68125
// exit ;
68123: GO 68175
// if size then
68125: LD_VAR 0 2
68129: IFFALSE 68175
// for i := array downto size do
68131: LD_ADDR_VAR 0 4
68135: PUSH
68136: DOUBLE
68137: LD_VAR 0 1
68141: INC
68142: ST_TO_ADDR
68143: LD_VAR 0 2
68147: PUSH
68148: FOR_DOWNTO
68149: IFFALSE 68173
// result := Delete ( result , result ) ;
68151: LD_ADDR_VAR 0 3
68155: PUSH
68156: LD_VAR 0 3
68160: PPUSH
68161: LD_VAR 0 3
68165: PPUSH
68166: CALL_OW 3
68170: ST_TO_ADDR
68171: GO 68148
68173: POP
68174: POP
// end ;
68175: LD_VAR 0 3
68179: RET
// export function ComExit ( unit ) ; var tmp ; begin
68180: LD_INT 0
68182: PPUSH
68183: PPUSH
// if not IsInUnit ( unit ) then
68184: LD_VAR 0 1
68188: PPUSH
68189: CALL_OW 310
68193: NOT
68194: IFFALSE 68198
// exit ;
68196: GO 68258
// tmp := IsInUnit ( unit ) ;
68198: LD_ADDR_VAR 0 3
68202: PUSH
68203: LD_VAR 0 1
68207: PPUSH
68208: CALL_OW 310
68212: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68213: LD_VAR 0 3
68217: PPUSH
68218: CALL_OW 247
68222: PUSH
68223: LD_INT 2
68225: EQUAL
68226: IFFALSE 68239
// ComExitVehicle ( unit ) else
68228: LD_VAR 0 1
68232: PPUSH
68233: CALL_OW 121
68237: GO 68248
// ComExitBuilding ( unit ) ;
68239: LD_VAR 0 1
68243: PPUSH
68244: CALL_OW 122
// result := tmp ;
68248: LD_ADDR_VAR 0 2
68252: PUSH
68253: LD_VAR 0 3
68257: ST_TO_ADDR
// end ;
68258: LD_VAR 0 2
68262: RET
// export function ComExitAll ( units ) ; var i ; begin
68263: LD_INT 0
68265: PPUSH
68266: PPUSH
// if not units then
68267: LD_VAR 0 1
68271: NOT
68272: IFFALSE 68276
// exit ;
68274: GO 68302
// for i in units do
68276: LD_ADDR_VAR 0 3
68280: PUSH
68281: LD_VAR 0 1
68285: PUSH
68286: FOR_IN
68287: IFFALSE 68300
// ComExit ( i ) ;
68289: LD_VAR 0 3
68293: PPUSH
68294: CALL 68180 0 1
68298: GO 68286
68300: POP
68301: POP
// end ;
68302: LD_VAR 0 2
68306: RET
// export function ResetHc ; begin
68307: LD_INT 0
68309: PPUSH
// InitHc ;
68310: CALL_OW 19
// hc_importance := 0 ;
68314: LD_ADDR_OWVAR 32
68318: PUSH
68319: LD_INT 0
68321: ST_TO_ADDR
// end ;
68322: LD_VAR 0 1
68326: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68327: LD_INT 0
68329: PPUSH
68330: PPUSH
68331: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68332: LD_ADDR_VAR 0 6
68336: PUSH
68337: LD_VAR 0 1
68341: PUSH
68342: LD_VAR 0 3
68346: PLUS
68347: PUSH
68348: LD_INT 2
68350: DIV
68351: ST_TO_ADDR
// if _x < 0 then
68352: LD_VAR 0 6
68356: PUSH
68357: LD_INT 0
68359: LESS
68360: IFFALSE 68377
// _x := _x * - 1 ;
68362: LD_ADDR_VAR 0 6
68366: PUSH
68367: LD_VAR 0 6
68371: PUSH
68372: LD_INT 1
68374: NEG
68375: MUL
68376: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68377: LD_ADDR_VAR 0 7
68381: PUSH
68382: LD_VAR 0 2
68386: PUSH
68387: LD_VAR 0 4
68391: PLUS
68392: PUSH
68393: LD_INT 2
68395: DIV
68396: ST_TO_ADDR
// if _y < 0 then
68397: LD_VAR 0 7
68401: PUSH
68402: LD_INT 0
68404: LESS
68405: IFFALSE 68422
// _y := _y * - 1 ;
68407: LD_ADDR_VAR 0 7
68411: PUSH
68412: LD_VAR 0 7
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: MUL
68421: ST_TO_ADDR
// result := [ _x , _y ] ;
68422: LD_ADDR_VAR 0 5
68426: PUSH
68427: LD_VAR 0 6
68431: PUSH
68432: LD_VAR 0 7
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: ST_TO_ADDR
// end ;
68441: LD_VAR 0 5
68445: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68446: LD_INT 0
68448: PPUSH
68449: PPUSH
68450: PPUSH
68451: PPUSH
// task := GetTaskList ( unit ) ;
68452: LD_ADDR_VAR 0 7
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: CALL_OW 437
68466: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68467: LD_VAR 0 7
68471: NOT
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: LD_VAR 0 2
68482: PPUSH
68483: CALL_OW 308
68487: NOT
68488: AND
68489: IFFALSE 68493
// exit ;
68491: GO 68611
// if IsInArea ( unit , area ) then
68493: LD_VAR 0 1
68497: PPUSH
68498: LD_VAR 0 2
68502: PPUSH
68503: CALL_OW 308
68507: IFFALSE 68525
// begin ComMoveToArea ( unit , goAway ) ;
68509: LD_VAR 0 1
68513: PPUSH
68514: LD_VAR 0 3
68518: PPUSH
68519: CALL_OW 113
// exit ;
68523: GO 68611
// end ; if task [ 1 ] [ 1 ] <> M then
68525: LD_VAR 0 7
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PUSH
68538: LD_STRING M
68540: NONEQUAL
68541: IFFALSE 68545
// exit ;
68543: GO 68611
// x := task [ 1 ] [ 2 ] ;
68545: LD_ADDR_VAR 0 5
68549: PUSH
68550: LD_VAR 0 7
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PUSH
68559: LD_INT 2
68561: ARRAY
68562: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68563: LD_ADDR_VAR 0 6
68567: PUSH
68568: LD_VAR 0 7
68572: PUSH
68573: LD_INT 1
68575: ARRAY
68576: PUSH
68577: LD_INT 3
68579: ARRAY
68580: ST_TO_ADDR
// if InArea ( x , y , area ) then
68581: LD_VAR 0 5
68585: PPUSH
68586: LD_VAR 0 6
68590: PPUSH
68591: LD_VAR 0 2
68595: PPUSH
68596: CALL_OW 309
68600: IFFALSE 68611
// ComStop ( unit ) ;
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 141
// end ;
68611: LD_VAR 0 4
68615: RET
// export function Abs ( value ) ; begin
68616: LD_INT 0
68618: PPUSH
// result := value ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: LD_VAR 0 1
68628: ST_TO_ADDR
// if value < 0 then
68629: LD_VAR 0 1
68633: PUSH
68634: LD_INT 0
68636: LESS
68637: IFFALSE 68654
// result := value * - 1 ;
68639: LD_ADDR_VAR 0 2
68643: PUSH
68644: LD_VAR 0 1
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: MUL
68653: ST_TO_ADDR
// end ;
68654: LD_VAR 0 2
68658: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68659: LD_INT 0
68661: PPUSH
68662: PPUSH
68663: PPUSH
68664: PPUSH
68665: PPUSH
68666: PPUSH
68667: PPUSH
68668: PPUSH
// if not unit or not building then
68669: LD_VAR 0 1
68673: NOT
68674: PUSH
68675: LD_VAR 0 2
68679: NOT
68680: OR
68681: IFFALSE 68685
// exit ;
68683: GO 68911
// x := GetX ( building ) ;
68685: LD_ADDR_VAR 0 4
68689: PUSH
68690: LD_VAR 0 2
68694: PPUSH
68695: CALL_OW 250
68699: ST_TO_ADDR
// y := GetY ( building ) ;
68700: LD_ADDR_VAR 0 6
68704: PUSH
68705: LD_VAR 0 2
68709: PPUSH
68710: CALL_OW 251
68714: ST_TO_ADDR
// d := GetDir ( building ) ;
68715: LD_ADDR_VAR 0 8
68719: PUSH
68720: LD_VAR 0 2
68724: PPUSH
68725: CALL_OW 254
68729: ST_TO_ADDR
// r := 4 ;
68730: LD_ADDR_VAR 0 9
68734: PUSH
68735: LD_INT 4
68737: ST_TO_ADDR
// for i := 1 to 5 do
68738: LD_ADDR_VAR 0 10
68742: PUSH
68743: DOUBLE
68744: LD_INT 1
68746: DEC
68747: ST_TO_ADDR
68748: LD_INT 5
68750: PUSH
68751: FOR_TO
68752: IFFALSE 68909
// begin _x := ShiftX ( x , d , r + i ) ;
68754: LD_ADDR_VAR 0 5
68758: PUSH
68759: LD_VAR 0 4
68763: PPUSH
68764: LD_VAR 0 8
68768: PPUSH
68769: LD_VAR 0 9
68773: PUSH
68774: LD_VAR 0 10
68778: PLUS
68779: PPUSH
68780: CALL_OW 272
68784: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68785: LD_ADDR_VAR 0 7
68789: PUSH
68790: LD_VAR 0 6
68794: PPUSH
68795: LD_VAR 0 8
68799: PPUSH
68800: LD_VAR 0 9
68804: PUSH
68805: LD_VAR 0 10
68809: PLUS
68810: PPUSH
68811: CALL_OW 273
68815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68816: LD_VAR 0 5
68820: PPUSH
68821: LD_VAR 0 7
68825: PPUSH
68826: CALL_OW 488
68830: PUSH
68831: LD_VAR 0 5
68835: PPUSH
68836: LD_VAR 0 7
68840: PPUSH
68841: CALL_OW 428
68845: PPUSH
68846: CALL_OW 247
68850: PUSH
68851: LD_INT 3
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: IN
68861: NOT
68862: AND
68863: IFFALSE 68907
// begin ComMoveXY ( unit , _x , _y ) ;
68865: LD_VAR 0 1
68869: PPUSH
68870: LD_VAR 0 5
68874: PPUSH
68875: LD_VAR 0 7
68879: PPUSH
68880: CALL_OW 111
// result := [ _x , _y ] ;
68884: LD_ADDR_VAR 0 3
68888: PUSH
68889: LD_VAR 0 5
68893: PUSH
68894: LD_VAR 0 7
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: ST_TO_ADDR
// exit ;
68903: POP
68904: POP
68905: GO 68911
// end ; end ;
68907: GO 68751
68909: POP
68910: POP
// end ;
68911: LD_VAR 0 3
68915: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68916: LD_INT 0
68918: PPUSH
68919: PPUSH
68920: PPUSH
// result := 0 ;
68921: LD_ADDR_VAR 0 3
68925: PUSH
68926: LD_INT 0
68928: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68929: LD_VAR 0 1
68933: PUSH
68934: LD_INT 0
68936: LESS
68937: PUSH
68938: LD_VAR 0 1
68942: PUSH
68943: LD_INT 8
68945: GREATER
68946: OR
68947: PUSH
68948: LD_VAR 0 2
68952: PUSH
68953: LD_INT 0
68955: LESS
68956: OR
68957: PUSH
68958: LD_VAR 0 2
68962: PUSH
68963: LD_INT 8
68965: GREATER
68966: OR
68967: IFFALSE 68971
// exit ;
68969: GO 69046
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68971: LD_ADDR_VAR 0 4
68975: PUSH
68976: LD_INT 22
68978: PUSH
68979: LD_VAR 0 2
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PPUSH
68988: CALL_OW 69
68992: PUSH
68993: FOR_IN
68994: IFFALSE 69044
// begin un := UnitShoot ( i ) ;
68996: LD_ADDR_VAR 0 5
69000: PUSH
69001: LD_VAR 0 4
69005: PPUSH
69006: CALL_OW 504
69010: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69011: LD_VAR 0 5
69015: PPUSH
69016: CALL_OW 255
69020: PUSH
69021: LD_VAR 0 1
69025: EQUAL
69026: IFFALSE 69042
// begin result := un ;
69028: LD_ADDR_VAR 0 3
69032: PUSH
69033: LD_VAR 0 5
69037: ST_TO_ADDR
// exit ;
69038: POP
69039: POP
69040: GO 69046
// end ; end ;
69042: GO 68993
69044: POP
69045: POP
// end ;
69046: LD_VAR 0 3
69050: RET
// export function GetCargoBay ( units ) ; begin
69051: LD_INT 0
69053: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69054: LD_ADDR_VAR 0 2
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_INT 2
69066: PUSH
69067: LD_INT 34
69069: PUSH
69070: LD_INT 12
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 34
69079: PUSH
69080: LD_INT 51
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 34
69089: PUSH
69090: LD_INT 32
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 34
69099: PUSH
69100: LD_INT 89
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: PPUSH
69114: CALL_OW 72
69118: ST_TO_ADDR
// end ;
69119: LD_VAR 0 2
69123: RET
// export function Negate ( value ) ; begin
69124: LD_INT 0
69126: PPUSH
// result := not value ;
69127: LD_ADDR_VAR 0 2
69131: PUSH
69132: LD_VAR 0 1
69136: NOT
69137: ST_TO_ADDR
// end ;
69138: LD_VAR 0 2
69142: RET
// export function Inc ( value ) ; begin
69143: LD_INT 0
69145: PPUSH
// result := value + 1 ;
69146: LD_ADDR_VAR 0 2
69150: PUSH
69151: LD_VAR 0 1
69155: PUSH
69156: LD_INT 1
69158: PLUS
69159: ST_TO_ADDR
// end ;
69160: LD_VAR 0 2
69164: RET
// export function Dec ( value ) ; begin
69165: LD_INT 0
69167: PPUSH
// result := value - 1 ;
69168: LD_ADDR_VAR 0 2
69172: PUSH
69173: LD_VAR 0 1
69177: PUSH
69178: LD_INT 1
69180: MINUS
69181: ST_TO_ADDR
// end ;
69182: LD_VAR 0 2
69186: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69187: LD_INT 0
69189: PPUSH
69190: PPUSH
69191: PPUSH
69192: PPUSH
69193: PPUSH
69194: PPUSH
69195: PPUSH
69196: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69197: LD_VAR 0 1
69201: PPUSH
69202: LD_VAR 0 2
69206: PPUSH
69207: CALL_OW 488
69211: NOT
69212: PUSH
69213: LD_VAR 0 3
69217: PPUSH
69218: LD_VAR 0 4
69222: PPUSH
69223: CALL_OW 488
69227: NOT
69228: OR
69229: IFFALSE 69242
// begin result := - 1 ;
69231: LD_ADDR_VAR 0 5
69235: PUSH
69236: LD_INT 1
69238: NEG
69239: ST_TO_ADDR
// exit ;
69240: GO 69477
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69242: LD_ADDR_VAR 0 12
69246: PUSH
69247: LD_VAR 0 1
69251: PPUSH
69252: LD_VAR 0 2
69256: PPUSH
69257: LD_VAR 0 3
69261: PPUSH
69262: LD_VAR 0 4
69266: PPUSH
69267: CALL 68327 0 4
69271: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69272: LD_ADDR_VAR 0 11
69276: PUSH
69277: LD_VAR 0 1
69281: PPUSH
69282: LD_VAR 0 2
69286: PPUSH
69287: LD_VAR 0 12
69291: PUSH
69292: LD_INT 1
69294: ARRAY
69295: PPUSH
69296: LD_VAR 0 12
69300: PUSH
69301: LD_INT 2
69303: ARRAY
69304: PPUSH
69305: CALL_OW 298
69309: ST_TO_ADDR
// distance := 9999 ;
69310: LD_ADDR_VAR 0 10
69314: PUSH
69315: LD_INT 9999
69317: ST_TO_ADDR
// for i := 0 to 5 do
69318: LD_ADDR_VAR 0 6
69322: PUSH
69323: DOUBLE
69324: LD_INT 0
69326: DEC
69327: ST_TO_ADDR
69328: LD_INT 5
69330: PUSH
69331: FOR_TO
69332: IFFALSE 69475
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69334: LD_ADDR_VAR 0 7
69338: PUSH
69339: LD_VAR 0 1
69343: PPUSH
69344: LD_VAR 0 6
69348: PPUSH
69349: LD_VAR 0 11
69353: PPUSH
69354: CALL_OW 272
69358: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69359: LD_ADDR_VAR 0 8
69363: PUSH
69364: LD_VAR 0 2
69368: PPUSH
69369: LD_VAR 0 6
69373: PPUSH
69374: LD_VAR 0 11
69378: PPUSH
69379: CALL_OW 273
69383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69384: LD_VAR 0 7
69388: PPUSH
69389: LD_VAR 0 8
69393: PPUSH
69394: CALL_OW 488
69398: NOT
69399: IFFALSE 69403
// continue ;
69401: GO 69331
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69403: LD_ADDR_VAR 0 9
69407: PUSH
69408: LD_VAR 0 12
69412: PUSH
69413: LD_INT 1
69415: ARRAY
69416: PPUSH
69417: LD_VAR 0 12
69421: PUSH
69422: LD_INT 2
69424: ARRAY
69425: PPUSH
69426: LD_VAR 0 7
69430: PPUSH
69431: LD_VAR 0 8
69435: PPUSH
69436: CALL_OW 298
69440: ST_TO_ADDR
// if tmp < distance then
69441: LD_VAR 0 9
69445: PUSH
69446: LD_VAR 0 10
69450: LESS
69451: IFFALSE 69473
// begin result := i ;
69453: LD_ADDR_VAR 0 5
69457: PUSH
69458: LD_VAR 0 6
69462: ST_TO_ADDR
// distance := tmp ;
69463: LD_ADDR_VAR 0 10
69467: PUSH
69468: LD_VAR 0 9
69472: ST_TO_ADDR
// end ; end ;
69473: GO 69331
69475: POP
69476: POP
// end ;
69477: LD_VAR 0 5
69481: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69482: LD_INT 0
69484: PPUSH
69485: PPUSH
// if not driver or not IsInUnit ( driver ) then
69486: LD_VAR 0 1
69490: NOT
69491: PUSH
69492: LD_VAR 0 1
69496: PPUSH
69497: CALL_OW 310
69501: NOT
69502: OR
69503: IFFALSE 69507
// exit ;
69505: GO 69597
// vehicle := IsInUnit ( driver ) ;
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: CALL_OW 310
69521: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69522: LD_VAR 0 1
69526: PPUSH
69527: LD_STRING \
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: PUSH
69557: LD_STRING E
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: LD_VAR 0 3
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PPUSH
69593: CALL_OW 446
// end ;
69597: LD_VAR 0 2
69601: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69602: LD_INT 0
69604: PPUSH
69605: PPUSH
// if not driver or not IsInUnit ( driver ) then
69606: LD_VAR 0 1
69610: NOT
69611: PUSH
69612: LD_VAR 0 1
69616: PPUSH
69617: CALL_OW 310
69621: NOT
69622: OR
69623: IFFALSE 69627
// exit ;
69625: GO 69717
// vehicle := IsInUnit ( driver ) ;
69627: LD_ADDR_VAR 0 3
69631: PUSH
69632: LD_VAR 0 1
69636: PPUSH
69637: CALL_OW 310
69641: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69642: LD_VAR 0 1
69646: PPUSH
69647: LD_STRING \
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 0
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: PUSH
69677: LD_STRING E
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_VAR 0 3
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PPUSH
69713: CALL_OW 447
// end ;
69717: LD_VAR 0 2
69721: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69722: LD_INT 0
69724: PPUSH
69725: PPUSH
69726: PPUSH
// tmp := [ ] ;
69727: LD_ADDR_VAR 0 5
69731: PUSH
69732: EMPTY
69733: ST_TO_ADDR
// for i in units do
69734: LD_ADDR_VAR 0 4
69738: PUSH
69739: LD_VAR 0 1
69743: PUSH
69744: FOR_IN
69745: IFFALSE 69783
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69747: LD_ADDR_VAR 0 5
69751: PUSH
69752: LD_VAR 0 5
69756: PPUSH
69757: LD_VAR 0 5
69761: PUSH
69762: LD_INT 1
69764: PLUS
69765: PPUSH
69766: LD_VAR 0 4
69770: PPUSH
69771: CALL_OW 256
69775: PPUSH
69776: CALL_OW 2
69780: ST_TO_ADDR
69781: GO 69744
69783: POP
69784: POP
// if not tmp then
69785: LD_VAR 0 5
69789: NOT
69790: IFFALSE 69794
// exit ;
69792: GO 69842
// if asc then
69794: LD_VAR 0 2
69798: IFFALSE 69822
// result := SortListByListAsc ( units , tmp ) else
69800: LD_ADDR_VAR 0 3
69804: PUSH
69805: LD_VAR 0 1
69809: PPUSH
69810: LD_VAR 0 5
69814: PPUSH
69815: CALL_OW 76
69819: ST_TO_ADDR
69820: GO 69842
// result := SortListByListDesc ( units , tmp ) ;
69822: LD_ADDR_VAR 0 3
69826: PUSH
69827: LD_VAR 0 1
69831: PPUSH
69832: LD_VAR 0 5
69836: PPUSH
69837: CALL_OW 77
69841: ST_TO_ADDR
// end ;
69842: LD_VAR 0 3
69846: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69847: LD_INT 0
69849: PPUSH
69850: PPUSH
// task := GetTaskList ( mech ) ;
69851: LD_ADDR_VAR 0 4
69855: PUSH
69856: LD_VAR 0 1
69860: PPUSH
69861: CALL_OW 437
69865: ST_TO_ADDR
// if not task then
69866: LD_VAR 0 4
69870: NOT
69871: IFFALSE 69875
// exit ;
69873: GO 69917
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69875: LD_ADDR_VAR 0 3
69879: PUSH
69880: LD_VAR 0 4
69884: PUSH
69885: LD_INT 1
69887: ARRAY
69888: PUSH
69889: LD_INT 1
69891: ARRAY
69892: PUSH
69893: LD_STRING r
69895: EQUAL
69896: PUSH
69897: LD_VAR 0 4
69901: PUSH
69902: LD_INT 1
69904: ARRAY
69905: PUSH
69906: LD_INT 4
69908: ARRAY
69909: PUSH
69910: LD_VAR 0 2
69914: EQUAL
69915: AND
69916: ST_TO_ADDR
// end ;
69917: LD_VAR 0 3
69921: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69922: LD_INT 0
69924: PPUSH
// SetDir ( unit , d ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69939: LD_VAR 0 1
69943: PPUSH
69944: LD_VAR 0 2
69948: PPUSH
69949: LD_VAR 0 3
69953: PPUSH
69954: LD_VAR 0 5
69958: PPUSH
69959: CALL_OW 48
// end ;
69963: LD_VAR 0 6
69967: RET
// export function ToNaturalNumber ( number ) ; begin
69968: LD_INT 0
69970: PPUSH
// result := number div 1 ;
69971: LD_ADDR_VAR 0 2
69975: PUSH
69976: LD_VAR 0 1
69980: PUSH
69981: LD_INT 1
69983: DIV
69984: ST_TO_ADDR
// if number < 0 then
69985: LD_VAR 0 1
69989: PUSH
69990: LD_INT 0
69992: LESS
69993: IFFALSE 70003
// result := 0 ;
69995: LD_ADDR_VAR 0 2
69999: PUSH
70000: LD_INT 0
70002: ST_TO_ADDR
// end ;
70003: LD_VAR 0 2
70007: RET
// export function SortByClass ( units , class ) ; var un ; begin
70008: LD_INT 0
70010: PPUSH
70011: PPUSH
// if not units or not class then
70012: LD_VAR 0 1
70016: NOT
70017: PUSH
70018: LD_VAR 0 2
70022: NOT
70023: OR
70024: IFFALSE 70028
// exit ;
70026: GO 70123
// result := [ ] ;
70028: LD_ADDR_VAR 0 3
70032: PUSH
70033: EMPTY
70034: ST_TO_ADDR
// for un in units do
70035: LD_ADDR_VAR 0 4
70039: PUSH
70040: LD_VAR 0 1
70044: PUSH
70045: FOR_IN
70046: IFFALSE 70121
// if GetClass ( un ) = class then
70048: LD_VAR 0 4
70052: PPUSH
70053: CALL_OW 257
70057: PUSH
70058: LD_VAR 0 2
70062: EQUAL
70063: IFFALSE 70090
// result := Insert ( result , 1 , un ) else
70065: LD_ADDR_VAR 0 3
70069: PUSH
70070: LD_VAR 0 3
70074: PPUSH
70075: LD_INT 1
70077: PPUSH
70078: LD_VAR 0 4
70082: PPUSH
70083: CALL_OW 2
70087: ST_TO_ADDR
70088: GO 70119
// result := Replace ( result , result + 1 , un ) ;
70090: LD_ADDR_VAR 0 3
70094: PUSH
70095: LD_VAR 0 3
70099: PPUSH
70100: LD_VAR 0 3
70104: PUSH
70105: LD_INT 1
70107: PLUS
70108: PPUSH
70109: LD_VAR 0 4
70113: PPUSH
70114: CALL_OW 1
70118: ST_TO_ADDR
70119: GO 70045
70121: POP
70122: POP
// end ;
70123: LD_VAR 0 3
70127: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70128: LD_INT 0
70130: PPUSH
70131: PPUSH
70132: PPUSH
70133: PPUSH
70134: PPUSH
70135: PPUSH
70136: PPUSH
// result := [ ] ;
70137: LD_ADDR_VAR 0 4
70141: PUSH
70142: EMPTY
70143: ST_TO_ADDR
// if x - r < 0 then
70144: LD_VAR 0 1
70148: PUSH
70149: LD_VAR 0 3
70153: MINUS
70154: PUSH
70155: LD_INT 0
70157: LESS
70158: IFFALSE 70170
// min_x := 0 else
70160: LD_ADDR_VAR 0 8
70164: PUSH
70165: LD_INT 0
70167: ST_TO_ADDR
70168: GO 70186
// min_x := x - r ;
70170: LD_ADDR_VAR 0 8
70174: PUSH
70175: LD_VAR 0 1
70179: PUSH
70180: LD_VAR 0 3
70184: MINUS
70185: ST_TO_ADDR
// if y - r < 0 then
70186: LD_VAR 0 2
70190: PUSH
70191: LD_VAR 0 3
70195: MINUS
70196: PUSH
70197: LD_INT 0
70199: LESS
70200: IFFALSE 70212
// min_y := 0 else
70202: LD_ADDR_VAR 0 7
70206: PUSH
70207: LD_INT 0
70209: ST_TO_ADDR
70210: GO 70228
// min_y := y - r ;
70212: LD_ADDR_VAR 0 7
70216: PUSH
70217: LD_VAR 0 2
70221: PUSH
70222: LD_VAR 0 3
70226: MINUS
70227: ST_TO_ADDR
// max_x := x + r ;
70228: LD_ADDR_VAR 0 9
70232: PUSH
70233: LD_VAR 0 1
70237: PUSH
70238: LD_VAR 0 3
70242: PLUS
70243: ST_TO_ADDR
// max_y := y + r ;
70244: LD_ADDR_VAR 0 10
70248: PUSH
70249: LD_VAR 0 2
70253: PUSH
70254: LD_VAR 0 3
70258: PLUS
70259: ST_TO_ADDR
// for _x = min_x to max_x do
70260: LD_ADDR_VAR 0 5
70264: PUSH
70265: DOUBLE
70266: LD_VAR 0 8
70270: DEC
70271: ST_TO_ADDR
70272: LD_VAR 0 9
70276: PUSH
70277: FOR_TO
70278: IFFALSE 70379
// for _y = min_y to max_y do
70280: LD_ADDR_VAR 0 6
70284: PUSH
70285: DOUBLE
70286: LD_VAR 0 7
70290: DEC
70291: ST_TO_ADDR
70292: LD_VAR 0 10
70296: PUSH
70297: FOR_TO
70298: IFFALSE 70375
// begin if not ValidHex ( _x , _y ) then
70300: LD_VAR 0 5
70304: PPUSH
70305: LD_VAR 0 6
70309: PPUSH
70310: CALL_OW 488
70314: NOT
70315: IFFALSE 70319
// continue ;
70317: GO 70297
// if GetResourceTypeXY ( _x , _y ) then
70319: LD_VAR 0 5
70323: PPUSH
70324: LD_VAR 0 6
70328: PPUSH
70329: CALL_OW 283
70333: IFFALSE 70373
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70335: LD_ADDR_VAR 0 4
70339: PUSH
70340: LD_VAR 0 4
70344: PPUSH
70345: LD_VAR 0 4
70349: PUSH
70350: LD_INT 1
70352: PLUS
70353: PPUSH
70354: LD_VAR 0 5
70358: PUSH
70359: LD_VAR 0 6
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PPUSH
70368: CALL_OW 1
70372: ST_TO_ADDR
// end ;
70373: GO 70297
70375: POP
70376: POP
70377: GO 70277
70379: POP
70380: POP
// end ;
70381: LD_VAR 0 4
70385: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70386: LD_INT 0
70388: PPUSH
70389: PPUSH
70390: PPUSH
70391: PPUSH
70392: PPUSH
70393: PPUSH
70394: PPUSH
70395: PPUSH
// if not units then
70396: LD_VAR 0 1
70400: NOT
70401: IFFALSE 70405
// exit ;
70403: GO 70929
// result := UnitFilter ( units , [ f_ok ] ) ;
70405: LD_ADDR_VAR 0 3
70409: PUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_INT 50
70417: PUSH
70418: EMPTY
70419: LIST
70420: PPUSH
70421: CALL_OW 72
70425: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70426: LD_ADDR_VAR 0 8
70430: PUSH
70431: LD_VAR 0 1
70435: PUSH
70436: LD_INT 1
70438: ARRAY
70439: PPUSH
70440: CALL_OW 255
70444: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70445: LD_ADDR_VAR 0 10
70449: PUSH
70450: LD_INT 29
70452: PUSH
70453: LD_INT 91
70455: PUSH
70456: LD_INT 49
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: LIST
70463: ST_TO_ADDR
// if not result then
70464: LD_VAR 0 3
70468: NOT
70469: IFFALSE 70473
// exit ;
70471: GO 70929
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70473: LD_ADDR_VAR 0 5
70477: PUSH
70478: LD_INT 81
70480: PUSH
70481: LD_VAR 0 8
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PPUSH
70490: CALL_OW 69
70494: ST_TO_ADDR
// for i in result do
70495: LD_ADDR_VAR 0 4
70499: PUSH
70500: LD_VAR 0 3
70504: PUSH
70505: FOR_IN
70506: IFFALSE 70927
// begin tag := GetTag ( i ) + 1 ;
70508: LD_ADDR_VAR 0 9
70512: PUSH
70513: LD_VAR 0 4
70517: PPUSH
70518: CALL_OW 110
70522: PUSH
70523: LD_INT 1
70525: PLUS
70526: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70527: LD_ADDR_VAR 0 7
70531: PUSH
70532: LD_VAR 0 4
70536: PPUSH
70537: CALL_OW 250
70541: PPUSH
70542: LD_VAR 0 4
70546: PPUSH
70547: CALL_OW 251
70551: PPUSH
70552: LD_INT 6
70554: PPUSH
70555: CALL 70128 0 3
70559: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70560: LD_VAR 0 4
70564: PPUSH
70565: CALL_OW 247
70569: PUSH
70570: LD_INT 2
70572: EQUAL
70573: PUSH
70574: LD_VAR 0 7
70578: AND
70579: PUSH
70580: LD_VAR 0 4
70584: PPUSH
70585: CALL_OW 264
70589: PUSH
70590: LD_VAR 0 10
70594: IN
70595: NOT
70596: AND
70597: IFFALSE 70636
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70599: LD_VAR 0 4
70603: PPUSH
70604: LD_VAR 0 7
70608: PUSH
70609: LD_INT 1
70611: ARRAY
70612: PUSH
70613: LD_INT 1
70615: ARRAY
70616: PPUSH
70617: LD_VAR 0 7
70621: PUSH
70622: LD_INT 1
70624: ARRAY
70625: PUSH
70626: LD_INT 2
70628: ARRAY
70629: PPUSH
70630: CALL_OW 116
70634: GO 70925
// if path > tag then
70636: LD_VAR 0 2
70640: PUSH
70641: LD_VAR 0 9
70645: GREATER
70646: IFFALSE 70854
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70648: LD_ADDR_VAR 0 6
70652: PUSH
70653: LD_VAR 0 5
70657: PPUSH
70658: LD_INT 91
70660: PUSH
70661: LD_VAR 0 4
70665: PUSH
70666: LD_INT 8
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: LIST
70673: PPUSH
70674: CALL_OW 72
70678: ST_TO_ADDR
// if nearEnemy then
70679: LD_VAR 0 6
70683: IFFALSE 70752
// begin if GetWeapon ( i ) = ru_time_lapser then
70685: LD_VAR 0 4
70689: PPUSH
70690: CALL_OW 264
70694: PUSH
70695: LD_INT 49
70697: EQUAL
70698: IFFALSE 70726
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70700: LD_VAR 0 4
70704: PPUSH
70705: LD_VAR 0 6
70709: PPUSH
70710: LD_VAR 0 4
70714: PPUSH
70715: CALL_OW 74
70719: PPUSH
70720: CALL_OW 112
70724: GO 70750
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70726: LD_VAR 0 4
70730: PPUSH
70731: LD_VAR 0 6
70735: PPUSH
70736: LD_VAR 0 4
70740: PPUSH
70741: CALL_OW 74
70745: PPUSH
70746: CALL_OW 115
// end else
70750: GO 70852
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70752: LD_VAR 0 4
70756: PPUSH
70757: LD_VAR 0 2
70761: PUSH
70762: LD_VAR 0 9
70766: ARRAY
70767: PUSH
70768: LD_INT 1
70770: ARRAY
70771: PPUSH
70772: LD_VAR 0 2
70776: PUSH
70777: LD_VAR 0 9
70781: ARRAY
70782: PUSH
70783: LD_INT 2
70785: ARRAY
70786: PPUSH
70787: CALL_OW 297
70791: PUSH
70792: LD_INT 6
70794: GREATER
70795: IFFALSE 70838
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70797: LD_VAR 0 4
70801: PPUSH
70802: LD_VAR 0 2
70806: PUSH
70807: LD_VAR 0 9
70811: ARRAY
70812: PUSH
70813: LD_INT 1
70815: ARRAY
70816: PPUSH
70817: LD_VAR 0 2
70821: PUSH
70822: LD_VAR 0 9
70826: ARRAY
70827: PUSH
70828: LD_INT 2
70830: ARRAY
70831: PPUSH
70832: CALL_OW 114
70836: GO 70852
// SetTag ( i , tag ) ;
70838: LD_VAR 0 4
70842: PPUSH
70843: LD_VAR 0 9
70847: PPUSH
70848: CALL_OW 109
// end else
70852: GO 70925
// if enemy then
70854: LD_VAR 0 5
70858: IFFALSE 70925
// begin if GetWeapon ( i ) = ru_time_lapser then
70860: LD_VAR 0 4
70864: PPUSH
70865: CALL_OW 264
70869: PUSH
70870: LD_INT 49
70872: EQUAL
70873: IFFALSE 70901
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70875: LD_VAR 0 4
70879: PPUSH
70880: LD_VAR 0 5
70884: PPUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: CALL_OW 74
70894: PPUSH
70895: CALL_OW 112
70899: GO 70925
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70901: LD_VAR 0 4
70905: PPUSH
70906: LD_VAR 0 5
70910: PPUSH
70911: LD_VAR 0 4
70915: PPUSH
70916: CALL_OW 74
70920: PPUSH
70921: CALL_OW 115
// end ; end ;
70925: GO 70505
70927: POP
70928: POP
// end ;
70929: LD_VAR 0 3
70933: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70934: LD_INT 0
70936: PPUSH
70937: PPUSH
70938: PPUSH
// if not unit or IsInUnit ( unit ) then
70939: LD_VAR 0 1
70943: NOT
70944: PUSH
70945: LD_VAR 0 1
70949: PPUSH
70950: CALL_OW 310
70954: OR
70955: IFFALSE 70959
// exit ;
70957: GO 71050
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70959: LD_ADDR_VAR 0 4
70963: PUSH
70964: LD_VAR 0 1
70968: PPUSH
70969: CALL_OW 250
70973: PPUSH
70974: LD_VAR 0 2
70978: PPUSH
70979: LD_INT 1
70981: PPUSH
70982: CALL_OW 272
70986: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: LD_VAR 0 1
70996: PPUSH
70997: CALL_OW 251
71001: PPUSH
71002: LD_VAR 0 2
71006: PPUSH
71007: LD_INT 1
71009: PPUSH
71010: CALL_OW 273
71014: ST_TO_ADDR
// if ValidHex ( x , y ) then
71015: LD_VAR 0 4
71019: PPUSH
71020: LD_VAR 0 5
71024: PPUSH
71025: CALL_OW 488
71029: IFFALSE 71050
// ComTurnXY ( unit , x , y ) ;
71031: LD_VAR 0 1
71035: PPUSH
71036: LD_VAR 0 4
71040: PPUSH
71041: LD_VAR 0 5
71045: PPUSH
71046: CALL_OW 118
// end ;
71050: LD_VAR 0 3
71054: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71055: LD_INT 0
71057: PPUSH
71058: PPUSH
// result := false ;
71059: LD_ADDR_VAR 0 3
71063: PUSH
71064: LD_INT 0
71066: ST_TO_ADDR
// if not units then
71067: LD_VAR 0 2
71071: NOT
71072: IFFALSE 71076
// exit ;
71074: GO 71121
// for i in units do
71076: LD_ADDR_VAR 0 4
71080: PUSH
71081: LD_VAR 0 2
71085: PUSH
71086: FOR_IN
71087: IFFALSE 71119
// if See ( side , i ) then
71089: LD_VAR 0 1
71093: PPUSH
71094: LD_VAR 0 4
71098: PPUSH
71099: CALL_OW 292
71103: IFFALSE 71117
// begin result := true ;
71105: LD_ADDR_VAR 0 3
71109: PUSH
71110: LD_INT 1
71112: ST_TO_ADDR
// exit ;
71113: POP
71114: POP
71115: GO 71121
// end ;
71117: GO 71086
71119: POP
71120: POP
// end ;
71121: LD_VAR 0 3
71125: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71126: LD_INT 0
71128: PPUSH
71129: PPUSH
71130: PPUSH
71131: PPUSH
// if not unit or not points then
71132: LD_VAR 0 1
71136: NOT
71137: PUSH
71138: LD_VAR 0 2
71142: NOT
71143: OR
71144: IFFALSE 71148
// exit ;
71146: GO 71238
// dist := 99999 ;
71148: LD_ADDR_VAR 0 5
71152: PUSH
71153: LD_INT 99999
71155: ST_TO_ADDR
// for i in points do
71156: LD_ADDR_VAR 0 4
71160: PUSH
71161: LD_VAR 0 2
71165: PUSH
71166: FOR_IN
71167: IFFALSE 71236
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71169: LD_ADDR_VAR 0 6
71173: PUSH
71174: LD_VAR 0 1
71178: PPUSH
71179: LD_VAR 0 4
71183: PUSH
71184: LD_INT 1
71186: ARRAY
71187: PPUSH
71188: LD_VAR 0 4
71192: PUSH
71193: LD_INT 2
71195: ARRAY
71196: PPUSH
71197: CALL_OW 297
71201: ST_TO_ADDR
// if tmpDist < dist then
71202: LD_VAR 0 6
71206: PUSH
71207: LD_VAR 0 5
71211: LESS
71212: IFFALSE 71234
// begin result := i ;
71214: LD_ADDR_VAR 0 3
71218: PUSH
71219: LD_VAR 0 4
71223: ST_TO_ADDR
// dist := tmpDist ;
71224: LD_ADDR_VAR 0 5
71228: PUSH
71229: LD_VAR 0 6
71233: ST_TO_ADDR
// end ; end ;
71234: GO 71166
71236: POP
71237: POP
// end ;
71238: LD_VAR 0 3
71242: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71243: LD_INT 0
71245: PPUSH
// uc_side := side ;
71246: LD_ADDR_OWVAR 20
71250: PUSH
71251: LD_VAR 0 1
71255: ST_TO_ADDR
// uc_nation := 3 ;
71256: LD_ADDR_OWVAR 21
71260: PUSH
71261: LD_INT 3
71263: ST_TO_ADDR
// vc_chassis := 25 ;
71264: LD_ADDR_OWVAR 37
71268: PUSH
71269: LD_INT 25
71271: ST_TO_ADDR
// vc_engine := engine_siberite ;
71272: LD_ADDR_OWVAR 39
71276: PUSH
71277: LD_INT 3
71279: ST_TO_ADDR
// vc_control := control_computer ;
71280: LD_ADDR_OWVAR 38
71284: PUSH
71285: LD_INT 3
71287: ST_TO_ADDR
// vc_weapon := 59 ;
71288: LD_ADDR_OWVAR 40
71292: PUSH
71293: LD_INT 59
71295: ST_TO_ADDR
// result := CreateVehicle ;
71296: LD_ADDR_VAR 0 5
71300: PUSH
71301: CALL_OW 45
71305: ST_TO_ADDR
// SetDir ( result , d ) ;
71306: LD_VAR 0 5
71310: PPUSH
71311: LD_VAR 0 4
71315: PPUSH
71316: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71320: LD_VAR 0 5
71324: PPUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: LD_VAR 0 3
71334: PPUSH
71335: LD_INT 0
71337: PPUSH
71338: CALL_OW 48
// end ;
71342: LD_VAR 0 5
71346: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71347: LD_INT 0
71349: PPUSH
71350: PPUSH
71351: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71352: LD_ADDR_VAR 0 2
71356: PUSH
71357: LD_INT 0
71359: PUSH
71360: LD_INT 0
71362: PUSH
71363: LD_INT 0
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71375: LD_VAR 0 1
71379: NOT
71380: PUSH
71381: LD_VAR 0 1
71385: PPUSH
71386: CALL_OW 264
71390: PUSH
71391: LD_INT 12
71393: PUSH
71394: LD_INT 51
71396: PUSH
71397: LD_INT 32
71399: PUSH
71400: LD_INT 89
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: IN
71409: NOT
71410: OR
71411: IFFALSE 71415
// exit ;
71413: GO 71513
// for i := 1 to 3 do
71415: LD_ADDR_VAR 0 3
71419: PUSH
71420: DOUBLE
71421: LD_INT 1
71423: DEC
71424: ST_TO_ADDR
71425: LD_INT 3
71427: PUSH
71428: FOR_TO
71429: IFFALSE 71511
// begin tmp := GetCargo ( cargo , i ) ;
71431: LD_ADDR_VAR 0 4
71435: PUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: LD_VAR 0 3
71445: PPUSH
71446: CALL_OW 289
71450: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71451: LD_ADDR_VAR 0 2
71455: PUSH
71456: LD_VAR 0 2
71460: PPUSH
71461: LD_VAR 0 3
71465: PPUSH
71466: LD_VAR 0 4
71470: PPUSH
71471: CALL_OW 1
71475: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: LD_VAR 0 2
71485: PPUSH
71486: LD_INT 4
71488: PPUSH
71489: LD_VAR 0 2
71493: PUSH
71494: LD_INT 4
71496: ARRAY
71497: PUSH
71498: LD_VAR 0 4
71502: PLUS
71503: PPUSH
71504: CALL_OW 1
71508: ST_TO_ADDR
// end ;
71509: GO 71428
71511: POP
71512: POP
// end ;
71513: LD_VAR 0 2
71517: RET
// export function Length ( array ) ; begin
71518: LD_INT 0
71520: PPUSH
// result := array + 0 ;
71521: LD_ADDR_VAR 0 2
71525: PUSH
71526: LD_VAR 0 1
71530: PUSH
71531: LD_INT 0
71533: PLUS
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 2
71539: RET
// export function PrepareArray ( array ) ; begin
71540: LD_INT 0
71542: PPUSH
// result := array diff 0 ;
71543: LD_ADDR_VAR 0 2
71547: PUSH
71548: LD_VAR 0 1
71552: PUSH
71553: LD_INT 0
71555: DIFF
71556: ST_TO_ADDR
// if not result [ 1 ] then
71557: LD_VAR 0 2
71561: PUSH
71562: LD_INT 1
71564: ARRAY
71565: NOT
71566: IFFALSE 71586
// result := Delete ( result , 1 ) ;
71568: LD_ADDR_VAR 0 2
71572: PUSH
71573: LD_VAR 0 2
71577: PPUSH
71578: LD_INT 1
71580: PPUSH
71581: CALL_OW 3
71585: ST_TO_ADDR
// end ;
71586: LD_VAR 0 2
71590: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71591: LD_INT 0
71593: PPUSH
71594: PPUSH
71595: PPUSH
71596: PPUSH
// sibRocketRange := 25 ;
71597: LD_ADDR_VAR 0 6
71601: PUSH
71602: LD_INT 25
71604: ST_TO_ADDR
// result := false ;
71605: LD_ADDR_VAR 0 4
71609: PUSH
71610: LD_INT 0
71612: ST_TO_ADDR
// for i := 0 to 5 do
71613: LD_ADDR_VAR 0 5
71617: PUSH
71618: DOUBLE
71619: LD_INT 0
71621: DEC
71622: ST_TO_ADDR
71623: LD_INT 5
71625: PUSH
71626: FOR_TO
71627: IFFALSE 71694
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71629: LD_VAR 0 1
71633: PPUSH
71634: LD_VAR 0 5
71638: PPUSH
71639: LD_VAR 0 6
71643: PPUSH
71644: CALL_OW 272
71648: PPUSH
71649: LD_VAR 0 2
71653: PPUSH
71654: LD_VAR 0 5
71658: PPUSH
71659: LD_VAR 0 6
71663: PPUSH
71664: CALL_OW 273
71668: PPUSH
71669: LD_VAR 0 3
71673: PPUSH
71674: CALL_OW 309
71678: IFFALSE 71692
// begin result := true ;
71680: LD_ADDR_VAR 0 4
71684: PUSH
71685: LD_INT 1
71687: ST_TO_ADDR
// exit ;
71688: POP
71689: POP
71690: GO 71696
// end ;
71692: GO 71626
71694: POP
71695: POP
// end ;
71696: LD_VAR 0 4
71700: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71701: LD_INT 0
71703: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71704: LD_VAR 0 1
71708: PPUSH
71709: LD_VAR 0 2
71713: PPUSH
71714: LD_INT 0
71716: PPUSH
71717: LD_INT 0
71719: PPUSH
71720: LD_INT 1
71722: PPUSH
71723: LD_INT 0
71725: PPUSH
71726: CALL_OW 587
// end ; end_of_file
71730: LD_VAR 0 3
71734: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71735: LD_VAR 0 1
71739: PUSH
71740: LD_INT 200
71742: DOUBLE
71743: GREATEREQUAL
71744: IFFALSE 71752
71746: LD_INT 299
71748: DOUBLE
71749: LESSEQUAL
71750: IFTRUE 71754
71752: GO 71786
71754: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71755: LD_VAR 0 1
71759: PPUSH
71760: LD_VAR 0 2
71764: PPUSH
71765: LD_VAR 0 3
71769: PPUSH
71770: LD_VAR 0 4
71774: PPUSH
71775: LD_VAR 0 5
71779: PPUSH
71780: CALL 10602 0 5
71784: GO 71863
71786: LD_INT 300
71788: DOUBLE
71789: GREATEREQUAL
71790: IFFALSE 71798
71792: LD_INT 399
71794: DOUBLE
71795: LESSEQUAL
71796: IFTRUE 71800
71798: GO 71862
71800: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71801: LD_VAR 0 1
71805: PPUSH
71806: LD_VAR 0 2
71810: PPUSH
71811: LD_VAR 0 3
71815: PPUSH
71816: LD_VAR 0 4
71820: PPUSH
71821: LD_VAR 0 5
71825: PPUSH
71826: LD_VAR 0 6
71830: PPUSH
71831: LD_VAR 0 7
71835: PPUSH
71836: LD_VAR 0 8
71840: PPUSH
71841: LD_VAR 0 9
71845: PPUSH
71846: LD_VAR 0 10
71850: PPUSH
71851: LD_VAR 0 11
71855: PPUSH
71856: CALL 27023 0 11
71860: GO 71863
71862: POP
// end ;
71863: PPOPN 11
71865: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71866: LD_VAR 0 1
71870: PPUSH
71871: LD_VAR 0 2
71875: PPUSH
71876: LD_VAR 0 3
71880: PPUSH
71881: LD_VAR 0 4
71885: PPUSH
71886: LD_VAR 0 5
71890: PPUSH
71891: CALL 10338 0 5
// end ; end_of_file
71895: PPOPN 5
71897: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: LD_VAR 0 3
71912: PPUSH
71913: LD_VAR 0 4
71917: PPUSH
71918: LD_VAR 0 5
71922: PPUSH
71923: LD_VAR 0 6
71927: PPUSH
71928: CALL 14643 0 6
// end ;
71932: PPOPN 6
71934: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71935: LD_INT 0
71937: PPUSH
// begin if not units then
71938: LD_VAR 0 1
71942: NOT
71943: IFFALSE 71947
// exit ;
71945: GO 71947
// end ;
71947: PPOPN 7
71949: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71950: CALL 14537 0 0
// end ;
71954: PPOPN 1
71956: END
