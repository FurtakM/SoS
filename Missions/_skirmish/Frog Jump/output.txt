// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7129 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6916 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1939 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9253 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5732 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: PUSH
1579: LD_EXP 9
1583: AND
1584: IFFALSE 1731
1586: GO 1588
1588: DISABLE
1589: LD_INT 0
1591: PPUSH
// begin enable ;
1592: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1593: LD_ADDR_EXP 31
1597: PUSH
1598: LD_EXP 31
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1607: LD_ADDR_VAR 0 1
1611: PUSH
1612: DOUBLE
1613: LD_INT 1
1615: DEC
1616: ST_TO_ADDR
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_OWVAR 67
1635: ARRAY
1636: PUSH
1637: LD_EXP 31
1641: PLUS
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1674
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1646: LD_INT 1
1648: PUSH
1649: LD_INT 3
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 2
1661: PPUSH
1662: CALL_OW 12
1666: ARRAY
1667: PPUSH
1668: CALL 1133 0 1
1672: GO 1643
1674: POP
1675: POP
// repeat wait ( 0 0$01 ) ;
1676: LD_INT 35
1678: PPUSH
1679: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1683: LD_EXP 32
1687: PUSH
1688: LD_INT 4
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_OWVAR 67
1706: ARRAY
1707: PUSH
1708: LD_EXP 31
1712: PLUS
1713: GREATEREQUAL
1714: IFFALSE 1676
// AddComMoveXY ( al_force , 143 , 178 ) ;
1716: LD_EXP 32
1720: PPUSH
1721: LD_INT 143
1723: PPUSH
1724: LD_INT 178
1726: PPUSH
1727: CALL_OW 171
// end ;
1731: PPOPN 1
1733: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1734: LD_INT 6
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: IFFALSE 1831
1753: GO 1755
1755: DISABLE
1756: LD_INT 0
1758: PPUSH
// begin enable ;
1759: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1760: LD_ADDR_VAR 0 1
1764: PUSH
1765: LD_INT 6
1767: PPUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 7
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 70
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1829
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_INT 81
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 255
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PPUSH
1808: CALL_OW 69
1812: PPUSH
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 74
1822: PPUSH
1823: CALL_OW 115
1827: GO 1783
1829: POP
1830: POP
// end ;
1831: PPOPN 1
1833: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1834: LD_EXP 9
1838: IFFALSE 1936
1840: GO 1842
1842: DISABLE
1843: LD_INT 0
1845: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1846: LD_ADDR_VAR 0 1
1850: PUSH
1851: LD_INT 18900
1853: PUSH
1854: LD_INT 18200
1856: PUSH
1857: LD_INT 16450
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_OWVAR 67
1869: ARRAY
1870: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1871: CALL 8616 0 0
// wait ( reload_time / 2 ) ;
1875: LD_VAR 0 1
1879: PUSH
1880: LD_INT 2
1882: DIVREAL
1883: PPUSH
1884: CALL_OW 67
// ActiveArtifact2 ( ) ;
1888: CALL 9061 0 0
// wait ( reload_time / 2 ) ;
1892: LD_VAR 0 1
1896: PUSH
1897: LD_INT 2
1899: DIVREAL
1900: PPUSH
1901: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1905: LD_INT 22
1907: PUSH
1908: LD_INT 7
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 8
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: NOT
1934: IFFALSE 1871
// end ; end_of_file
1936: PPOPN 1
1938: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// uc_side := 8 ;
1947: LD_ADDR_OWVAR 20
1951: PUSH
1952: LD_INT 8
1954: ST_TO_ADDR
// uc_nation := 2 ;
1955: LD_ADDR_OWVAR 21
1959: PUSH
1960: LD_INT 2
1962: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: LD_INT 7
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 9
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_OWVAR 67
1986: ARRAY
1987: ST_TO_ADDR
// dep := ar_base ;
1988: LD_ADDR_VAR 0 5
1992: PUSH
1993: LD_INT 57
1995: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1996: LD_ADDR_VAR 0 6
2000: PUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 8
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 30
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 69
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2034: LD_VAR 0 5
2038: PPUSH
2039: CALL_OW 274
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 999999
2049: PPUSH
2050: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2054: LD_VAR 0 5
2058: PPUSH
2059: CALL_OW 274
2063: PPUSH
2064: LD_INT 2
2066: PPUSH
2067: LD_INT 10000
2069: PPUSH
2070: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2074: LD_VAR 0 5
2078: PPUSH
2079: CALL_OW 274
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 10000
2089: PPUSH
2090: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2094: LD_INT 68
2096: PPUSH
2097: LD_INT 224
2099: PPUSH
2100: LD_INT 5
2102: PPUSH
2103: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 6
2115: PPUSH
2116: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2120: LD_ADDR_OWVAR 26
2124: PUSH
2125: LD_STRING Nicolas Vervecken
2127: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2128: LD_ADDR_OWVAR 33
2132: PUSH
2133: LD_STRING SecondCharsGal
2135: ST_TO_ADDR
// hc_face_number := 3 ;
2136: LD_ADDR_OWVAR 34
2140: PUSH
2141: LD_INT 3
2143: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2144: LD_ADDR_OWVAR 29
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: LD_INT 10
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: ST_TO_ADDR
// Vervecken := CreateHuman ;
2159: LD_ADDR_EXP 3
2163: PUSH
2164: CALL_OW 44
2168: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2169: LD_EXP 3
2173: PPUSH
2174: LD_VAR 0 5
2178: PPUSH
2179: CALL_OW 52
// InitHc_All ( ) ;
2183: CALL_OW 584
// for i = 1 to 4 do
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: DOUBLE
2193: LD_INT 1
2195: DEC
2196: ST_TO_ADDR
2197: LD_INT 4
2199: PUSH
2200: FOR_TO
2201: IFFALSE 2262
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2203: LD_INT 0
2205: PPUSH
2206: LD_INT 9
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2218: CALL_OW 44
2222: PPUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 30
2235: PUSH
2236: LD_INT 5
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: PUSH
2252: LD_INT 1
2254: ARRAY
2255: PPUSH
2256: CALL_OW 52
// end ;
2260: GO 2200
2262: POP
2263: POP
// for i = 1 to 2 do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 2
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2339
// begin PrepareHuman ( false , 4 , skill ) ;
2280: LD_INT 0
2282: PPUSH
2283: LD_INT 4
2285: PPUSH
2286: LD_VAR 0 4
2290: PPUSH
2291: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2295: CALL_OW 44
2299: PPUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 30
2312: PUSH
2313: LD_INT 8
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: CALL_OW 52
// end ;
2337: GO 2277
2339: POP
2340: POP
// for i = 1 to 6 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 6
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2392
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2357: LD_INT 0
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_VAR 0 4
2367: PUSH
2368: LD_INT 1
2370: PLUS
2371: PPUSH
2372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2376: CALL_OW 44
2380: PPUSH
2381: LD_VAR 0 6
2385: PPUSH
2386: CALL_OW 52
// end ;
2390: GO 2354
2392: POP
2393: POP
// uc_nation := 0 ;
2394: LD_ADDR_OWVAR 21
2398: PUSH
2399: LD_INT 0
2401: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2402: LD_ADDR_VAR 0 2
2406: PUSH
2407: LD_INT 22
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 30
2419: PUSH
2420: LD_INT 32
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL_OW 69
2435: PUSH
2436: FOR_IN
2437: IFFALSE 2474
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2439: LD_INT 0
2441: PPUSH
2442: LD_INT 15
2444: PPUSH
2445: LD_VAR 0 4
2449: PUSH
2450: LD_INT 1
2452: PLUS
2453: PPUSH
2454: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2458: CALL_OW 44
2462: PPUSH
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL_OW 52
// end ;
2472: GO 2436
2474: POP
2475: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 5
2481: PPUSH
2482: LD_INT 10
2484: PPUSH
2485: CALL_OW 380
// un := CreateHuman ;
2489: LD_ADDR_VAR 0 3
2493: PUSH
2494: CALL_OW 44
2498: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 175
2506: PPUSH
2507: LD_INT 128
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 115
2524: PPUSH
2525: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2529: LD_INT 0
2531: PPUSH
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 380
// un := CreateHuman ;
2542: LD_ADDR_VAR 0 3
2546: PUSH
2547: CALL_OW 44
2551: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2552: LD_VAR 0 3
2556: PPUSH
2557: LD_INT 240
2559: PPUSH
2560: LD_INT 128
2562: PPUSH
2563: CALL_OW 428
2567: PPUSH
2568: CALL_OW 52
// un := CreateHuman ;
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: CALL_OW 44
2581: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 260
2601: PPUSH
2602: LD_INT 147
2604: PPUSH
2605: CALL_OW 428
2609: PPUSH
2610: CALL_OW 52
// for i = 1 to 2 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 2
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2653
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2630: LD_VAR 0 6
2634: PPUSH
2635: LD_INT 14
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: LD_INT 31
2646: PPUSH
2647: CALL_OW 185
2651: GO 2627
2653: POP
2654: POP
// end ;
2655: LD_VAR 0 1
2659: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2660: LD_INT 0
2662: PPUSH
2663: PPUSH
// for i = 1 to num do
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: DOUBLE
2670: LD_INT 1
2672: DEC
2673: ST_TO_ADDR
2674: LD_VAR 0 1
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2752
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 30
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: PPUSH
2715: LD_INT 11
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 2
2723: PPUSH
2724: LD_INT 23
2726: PUSH
2727: LD_INT 24
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 12
2744: ARRAY
2745: PPUSH
2746: CALL_OW 185
2750: GO 2679
2752: POP
2753: POP
// end ;
2754: LD_VAR 0 2
2758: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
// uc_side := 8 ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_INT 8
2771: ST_TO_ADDR
// uc_nation := 0 ;
2772: LD_ADDR_OWVAR 21
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// hc_class := 17 ;
2780: LD_ADDR_OWVAR 28
2784: PUSH
2785: LD_INT 17
2787: ST_TO_ADDR
// hc_gallery :=  ;
2788: LD_ADDR_OWVAR 33
2792: PUSH
2793: LD_STRING 
2795: ST_TO_ADDR
// hc_name :=  ;
2796: LD_ADDR_OWVAR 26
2800: PUSH
2801: LD_STRING 
2803: ST_TO_ADDR
// hc_importance := 0 ;
2804: LD_ADDR_OWVAR 32
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2812: LD_ADDR_OWVAR 31
2816: PUSH
2817: LD_INT 10
2819: PUSH
2820: LD_INT 10
2822: PUSH
2823: LD_INT 10
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: ST_TO_ADDR
// if ar_base then
2835: LD_INT 57
2837: IFFALSE 2882
// begin un := CreateHuman ;
2839: LD_ADDR_VAR 0 3
2843: PUSH
2844: CALL_OW 44
2848: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_INT 57
2856: PPUSH
2857: CALL_OW 52
// ComExitBuilding ( un ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 68
2877: PPUSH
2878: CALL_OW 180
// end ; end ;
2882: LD_VAR 0 1
2886: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// legion_force := [ ] ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// l_allow_attack := false ;
2898: LD_ADDR_EXP 34
2902: PUSH
2903: LD_INT 0
2905: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2906: LD_VAR 0 1
2910: PPUSH
2911: CALL 2660 0 1
// repeat wait ( 0 0$01 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// until legion_force >= n1 ;
2922: LD_EXP 33
2926: PUSH
2927: LD_VAR 0 1
2931: GREATEREQUAL
2932: IFFALSE 2915
// l_allow_attack := true ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// for i = 1 to n2 do
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_VAR 0 2
2956: PUSH
2957: FOR_TO
2958: IFFALSE 2966
// begin AddKamikaze ( ) ;
2960: CALL 2759 0 0
// end ;
2964: GO 2957
2966: POP
2967: POP
// end ;
2968: LD_VAR 0 3
2972: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2973: LD_INT 22
2975: PUSH
2976: LD_INT 8
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: LD_INT 50
2985: PUSH
2986: EMPTY
2987: LIST
2988: PUSH
2989: LD_INT 33
2991: PUSH
2992: LD_INT 2
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: LD_INT 61
3004: PUSH
3005: EMPTY
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: IFFALSE 3102
3024: GO 3026
3026: DISABLE
3027: LD_INT 0
3029: PPUSH
// begin enable ;
3030: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3031: LD_ADDR_VAR 0 1
3035: PUSH
3036: LD_INT 22
3038: PUSH
3039: LD_INT 8
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 33
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 61
3067: PUSH
3068: EMPTY
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 69
3085: PUSH
3086: FOR_IN
3087: IFFALSE 3100
// Connect ( i ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 38520 0 1
3098: GO 3086
3100: POP
3101: POP
// end ;
3102: PPOPN 1
3104: END
// every 5 5$00 trigger legion_attacks_active do
3105: LD_EXP 7
3109: IFFALSE 3161
3111: GO 3113
3113: DISABLE
// begin enable ;
3114: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3115: LD_INT 5250
3117: PUSH
3118: LD_INT 2100
3120: PUSH
3121: LD_INT 1050
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PPUSH
3135: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3139: LD_EXP 8
3143: PUSH
3144: LD_INT 2
3146: MINUS
3147: PUSH
3148: LD_OWVAR 67
3152: PLUS
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL 2887 0 2
// end ;
3161: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3162: LD_EXP 34
3166: PUSH
3167: LD_EXP 33
3171: PPUSH
3172: LD_INT 3
3174: PUSH
3175: LD_INT 60
3177: PUSH
3178: EMPTY
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 61
3187: PUSH
3188: EMPTY
3189: LIST
3190: PUSH
3191: LD_INT 50
3193: PUSH
3194: EMPTY
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: PPUSH
3202: CALL_OW 72
3206: AND
3207: IFFALSE 3338
3209: GO 3211
3211: DISABLE
3212: LD_INT 0
3214: PPUSH
3215: PPUSH
// begin enable ;
3216: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 33
3226: PPUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 60
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 61
3242: PUSH
3243: EMPTY
3244: LIST
3245: PUSH
3246: LD_INT 50
3248: PUSH
3249: EMPTY
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 72
3261: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3262: LD_ADDR_VAR 0 1
3266: PUSH
3267: LD_INT 150
3269: PUSH
3270: LD_INT 93
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 232
3279: PUSH
3280: LD_INT 88
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 209
3289: PUSH
3290: LD_INT 50
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 208
3299: PUSH
3300: LD_INT 29
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 191
3309: PUSH
3310: LD_INT 17
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3324: LD_VAR 0 2
3328: PPUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 70507 0 2
// end ;
3338: PPOPN 2
3340: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3341: LD_INT 6
3343: PPUSH
3344: LD_INT 22
3346: PUSH
3347: LD_INT 8
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 25
3356: PUSH
3357: LD_INT 17
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 70
3372: IFFALSE 3459
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 6
3388: PPUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 25
3401: PUSH
3402: LD_INT 17
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PPUSH
3413: CALL_OW 70
3417: PUSH
3418: FOR_IN
3419: IFFALSE 3457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3421: LD_VAR 0 1
3425: PPUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 6
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 74
3450: PPUSH
3451: CALL_OW 115
3455: GO 3418
3457: POP
3458: POP
// end ;
3459: PPOPN 1
3461: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3462: LD_INT 68
3464: IFFALSE 3695
3466: GO 3468
3468: DISABLE
3469: LD_INT 0
3471: PPUSH
3472: PPUSH
3473: PPUSH
// begin enable ;
3474: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 224
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 160
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 228
3502: PUSH
3503: LD_INT 56
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 271
3512: PUSH
3513: LD_INT 87
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: ST_TO_ADDR
// for i = 1 to 3 do
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 3
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3556
// EraseResourceArea ( telArea , i ) ;
3542: LD_INT 7
3544: PPUSH
3545: LD_VAR 0 3
3549: PPUSH
3550: CALL_OW 286
3554: GO 3539
3556: POP
3557: POP
// for i = xy downto 1 do
3558: LD_ADDR_VAR 0 3
3562: PUSH
3563: DOUBLE
3564: LD_VAR 0 2
3568: INC
3569: ST_TO_ADDR
3570: LD_INT 1
3572: PUSH
3573: FOR_DOWNTO
3574: IFFALSE 3656
// begin k := rand ( 1 , xy ) ;
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3594: LD_VAR 0 2
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: PPUSH
3609: LD_VAR 0 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PUSH
3620: LD_INT 2
3622: ARRAY
3623: PPUSH
3624: CALL_OW 428
3628: IFFALSE 3652
// xy := Delete ( xy , k ) else
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 3
3649: ST_TO_ADDR
3650: GO 3654
// break ;
3652: GO 3656
// end ;
3654: GO 3573
3656: POP
3657: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3658: LD_INT 68
3660: PPUSH
3661: LD_VAR 0 2
3665: PUSH
3666: LD_VAR 0 1
3670: ARRAY
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: LD_VAR 0 2
3680: PUSH
3681: LD_VAR 0 1
3685: ARRAY
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 243
// end ; end_of_file
3695: PPOPN 3
3697: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3698: LD_INT 0
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
// uc_side := 6 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 6
3714: ST_TO_ADDR
// uc_nation := nation_russian ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 3
3722: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3723: LD_INT 6
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3733: LD_ADDR_VAR 0 6
3737: PUSH
3738: LD_INT 9
3740: PUSH
3741: LD_INT 4
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 8
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 8
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_INT 9
3786: PUSH
3787: LD_INT 8
3789: PUSH
3790: LD_INT 7
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: ST_TO_ADDR
// tmp := [ ] ;
3804: LD_ADDR_VAR 0 5
3808: PUSH
3809: EMPTY
3810: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3811: LD_ADDR_EXP 2
3815: PUSH
3816: LD_STRING Davidov
3818: PPUSH
3819: CALL_OW 25
3823: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3824: LD_EXP 2
3828: PPUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 7
3834: PPUSH
3835: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3839: LD_EXP 2
3843: PPUSH
3844: LD_INT 2
3846: PPUSH
3847: LD_INT 8
3849: PPUSH
3850: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3854: LD_EXP 2
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: LD_INT 6
3864: PPUSH
3865: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3869: LD_EXP 2
3873: PPUSH
3874: LD_INT 4
3876: PPUSH
3877: LD_INT 10
3879: PPUSH
3880: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3884: LD_EXP 2
3888: PPUSH
3889: LD_INT 4
3891: PPUSH
3892: CALL_OW 336
// InitHc_All ( ) ;
3896: CALL_OW 584
// while amount [ 1 ] do
3900: LD_VAR 0 6
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: IFFALSE 4241
// begin Wait ( 1 ) ;
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3917: LD_ADDR_VAR 0 7
3921: PUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 4
3927: PPUSH
3928: CALL_OW 12
3932: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3933: LD_VAR 0 6
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PUSH
3942: LD_VAR 0 5
3946: AND
3947: IFFALSE 4102
// begin if k in [ 1 , 2 ] then
3949: LD_VAR 0 7
3953: PUSH
3954: LD_INT 1
3956: PUSH
3957: LD_INT 2
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: IN
3964: IFFALSE 3974
// k := 3 ;
3966: LD_ADDR_VAR 0 7
3970: PUSH
3971: LD_INT 3
3973: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: LD_INT 24
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 12
3999: ARRAY
4000: ST_TO_ADDR
// vc_engine := engine_siberite ;
4001: LD_ADDR_OWVAR 39
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// vc_control := control_manual ;
4009: LD_ADDR_OWVAR 38
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4017: LD_ADDR_OWVAR 40
4021: PUSH
4022: LD_INT 44
4024: PUSH
4025: LD_INT 45
4027: PUSH
4028: LD_INT 43
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 3
4041: PPUSH
4042: CALL_OW 12
4046: ARRAY
4047: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4048: LD_ADDR_VAR 0 5
4052: PUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: LD_INT 1
4060: PPUSH
4061: CALL_OW 45
4065: PPUSH
4066: CALL_OW 2
4070: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 6
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: PUSH
4093: LD_INT 1
4095: MINUS
4096: PPUSH
4097: CALL_OW 1
4101: ST_TO_ADDR
// end ; if not tmp then
4102: LD_VAR 0 5
4106: NOT
4107: IFFALSE 4117
// k := 2 ;
4109: LD_ADDR_VAR 0 7
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4117: LD_VAR 0 6
4121: PUSH
4122: LD_INT 2
4124: ARRAY
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: PUSH
4130: LD_VAR 0 7
4134: PUSH
4135: LD_INT 3
4137: EQUAL
4138: AND
4139: IFFALSE 4168
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4141: LD_ADDR_VAR 0 7
4145: PUSH
4146: LD_INT 9
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: CALL_OW 12
4166: ARRAY
4167: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4168: LD_INT 0
4170: PPUSH
4171: LD_VAR 0 7
4175: PPUSH
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4185: LD_ADDR_VAR 0 5
4189: PUSH
4190: LD_VAR 0 5
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 44
4202: PPUSH
4203: CALL_OW 2
4207: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4208: LD_ADDR_VAR 0 6
4212: PUSH
4213: LD_VAR 0 6
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: LD_VAR 0 6
4225: PUSH
4226: LD_INT 1
4228: ARRAY
4229: PUSH
4230: LD_INT 1
4232: MINUS
4233: PPUSH
4234: CALL_OW 1
4238: ST_TO_ADDR
// end ;
4239: GO 3900
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4241: LD_ADDR_VAR 0 5
4245: PUSH
4246: LD_VAR 0 5
4250: PPUSH
4251: LD_VAR 0 5
4255: PUSH
4256: LD_INT 1
4258: PLUS
4259: PPUSH
4260: LD_EXP 2
4264: PPUSH
4265: CALL_OW 2
4269: ST_TO_ADDR
// for i = tmp downto 1 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_VAR 0 5
4280: INC
4281: ST_TO_ADDR
4282: LD_INT 1
4284: PUSH
4285: FOR_DOWNTO
4286: IFFALSE 4448
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4288: LD_VAR 0 5
4292: PUSH
4293: LD_VAR 0 2
4297: ARRAY
4298: PPUSH
4299: CALL_OW 247
4303: PUSH
4304: LD_INT 2
4306: EQUAL
4307: IFFALSE 4397
// begin SetDir ( tmp [ i ] , 3 ) ;
4309: LD_VAR 0 5
4313: PUSH
4314: LD_VAR 0 2
4318: ARRAY
4319: PPUSH
4320: LD_INT 3
4322: PPUSH
4323: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4327: LD_VAR 0 5
4331: PUSH
4332: LD_VAR 0 2
4336: ARRAY
4337: PPUSH
4338: LD_INT 193
4340: PPUSH
4341: LD_INT 3
4343: PPUSH
4344: LD_INT 0
4346: PPUSH
4347: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4351: LD_VAR 0 5
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_INT 1
4363: MINUS
4364: ARRAY
4365: PPUSH
4366: LD_VAR 0 5
4370: PUSH
4371: LD_VAR 0 2
4375: ARRAY
4376: PPUSH
4377: CALL_OW 52
// i := i - 1 ;
4381: LD_ADDR_VAR 0 2
4385: PUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 1
4393: MINUS
4394: ST_TO_ADDR
// end else
4395: GO 4418
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4397: LD_VAR 0 5
4401: PUSH
4402: LD_VAR 0 2
4406: ARRAY
4407: PPUSH
4408: LD_INT 2
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4418: LD_VAR 0 5
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: PPUSH
4429: LD_INT 197
4431: PPUSH
4432: LD_INT 22
4434: PPUSH
4435: CALL_OW 111
// Wait ( 0 0$02 ) ;
4439: LD_INT 70
4441: PPUSH
4442: CALL_OW 67
// end ;
4446: GO 4285
4448: POP
4449: POP
// Wait ( 0 0$02 ) ;
4450: LD_INT 70
4452: PPUSH
4453: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4457: LD_ADDR_OWVAR 37
4461: PUSH
4462: LD_INT 22
4464: ST_TO_ADDR
// vc_engine := engine_siberite ;
4465: LD_ADDR_OWVAR 39
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// vc_control := control_computer ;
4473: LD_ADDR_OWVAR 38
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4481: LD_ADDR_OWVAR 40
4485: PUSH
4486: LD_INT 51
4488: ST_TO_ADDR
// tmp := CreateVehicle ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: CALL_OW 45
4498: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4499: LD_VAR 0 5
4503: PPUSH
4504: LD_INT 3
4506: PPUSH
4507: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4511: LD_VAR 0 5
4515: PPUSH
4516: LD_INT 193
4518: PPUSH
4519: LD_INT 3
4521: PPUSH
4522: LD_INT 0
4524: PPUSH
4525: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 60
4539: PPUSH
4540: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4544: LD_VAR 0 5
4548: PPUSH
4549: LD_INT 197
4551: PPUSH
4552: LD_INT 22
4554: PPUSH
4555: CALL_OW 111
// end ; end_of_file
4559: LD_VAR 0 1
4563: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4564: LD_INT 0
4566: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4567: LD_VAR 0 1
4571: PPUSH
4572: LD_VAR 0 2
4576: PPUSH
4577: CALL 9619 0 2
// side := GetSide ( fac ) ;
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: CALL_OW 255
4595: ST_TO_ADDR
// case side of 7 :
4596: LD_VAR 0 3
4600: PUSH
4601: LD_INT 7
4603: DOUBLE
4604: EQUAL
4605: IFTRUE 4609
4607: GO 4656
4609: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4610: LD_ADDR_EXP 32
4614: PUSH
4615: LD_EXP 32
4619: PPUSH
4620: LD_EXP 32
4624: PUSH
4625: LD_INT 1
4627: PLUS
4628: PPUSH
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL_OW 1
4638: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4639: LD_VAR 0 1
4643: PPUSH
4644: LD_INT 112
4646: PPUSH
4647: LD_INT 175
4649: PPUSH
4650: CALL_OW 171
// end ; 8 :
4654: GO 4742
4656: LD_INT 8
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4741
4664: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4665: LD_VAR 0 1
4669: PPUSH
4670: CALL_OW 264
4674: PUSH
4675: LD_INT 31
4677: EQUAL
4678: IFFALSE 4695
// ComMoveXY ( veh , 145 , 66 ) ;
4680: LD_VAR 0 1
4684: PPUSH
4685: LD_INT 145
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 265
4704: PUSH
4705: LD_INT 11
4707: EQUAL
4708: IFFALSE 4739
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4710: LD_ADDR_EXP 33
4714: PUSH
4715: LD_EXP 33
4719: PPUSH
4720: LD_EXP 33
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: PPUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 1
4738: ST_TO_ADDR
// end ; end ;
4739: GO 4742
4741: POP
// end ;
4742: PPOPN 3
4744: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL 9499 0 1
// if un in legion_force then
4754: LD_VAR 0 1
4758: PUSH
4759: LD_EXP 33
4763: IN
4764: IFFALSE 4782
// legion_force := legion_force diff un ;
4766: LD_ADDR_EXP 33
4770: PUSH
4771: LD_EXP 33
4775: PUSH
4776: LD_VAR 0 1
4780: DIFF
4781: ST_TO_ADDR
// if un in al_force then
4782: LD_VAR 0 1
4786: PUSH
4787: LD_EXP 32
4791: IN
4792: IFFALSE 4810
// al_force := al_force diff un ;
4794: LD_ADDR_EXP 32
4798: PUSH
4799: LD_EXP 32
4803: PUSH
4804: LD_VAR 0 1
4808: DIFF
4809: ST_TO_ADDR
// end ;
4810: PPOPN 1
4812: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4813: LD_VAR 0 1
4817: PUSH
4818: LD_INT 68
4820: EQUAL
4821: PUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: CALL_OW 257
4831: PUSH
4832: LD_INT 17
4834: EQUAL
4835: AND
4836: IFFALSE 4879
// begin Wait ( 0 0$01 ) ;
4838: LD_INT 35
4840: PPUSH
4841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 6
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 69
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 74
4874: PPUSH
4875: CALL_OW 115
// end ; end ;
4879: PPOPN 2
4881: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4882: LD_VAR 0 1
4886: PUSH
4887: LD_EXP 32
4891: IN
4892: IFFALSE 4910
// al_force := al_force diff un ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_VAR 0 1
4908: DIFF
4909: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 263
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4934
// ComUnlink ( un ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 8
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 21
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: IN
4968: IFFALSE 4986
// begin wait ( 0 0$2 ) ;
4970: LD_INT 70
4972: PPUSH
4973: CALL_OW 67
// ComAutodestruct ( un ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL 63415 0 1
// end ; end ;
4986: PPOPN 1
4988: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 25
4996: EQUAL
4997: IFFALSE 5007
// player_start_res_sib_bomb := true ;
4999: LD_ADDR_EXP 4
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// if tech = tech_artifact then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 24
5014: EQUAL
5015: IFFALSE 5025
// player_start_res_artifact := true ;
5017: LD_ADDR_EXP 5
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// end ;
5025: PPOPN 2
5027: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 6
5035: EQUAL
5036: IFFALSE 5046
// player_artifact_loaded := false ;
5038: LD_ADDR_EXP 18
5042: PUSH
5043: LD_INT 0
5045: ST_TO_ADDR
// end ;
5046: PPOPN 2
5048: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 6
5056: EQUAL
5057: IFFALSE 5067
// player_artifact_loaded := true ;
5059: LD_ADDR_EXP 18
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// end ;
5067: PPOPN 2
5069: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5070: LD_INT 0
5072: PPUSH
// begin player_used_sib_bomb := true ;
5073: LD_ADDR_EXP 12
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// for i = 1 to 3 do
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5168
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_EXP 15
5111: PUSH
5112: LD_VAR 0 4
5116: ARRAY
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: LD_EXP 15
5126: PUSH
5127: LD_VAR 0 4
5131: ARRAY
5132: PUSH
5133: LD_INT 2
5135: ARRAY
5136: PPUSH
5137: CALL_OW 298
5141: PUSH
5142: LD_EXP 17
5146: LESSEQUAL
5147: IFFALSE 5166
// begin wait ( 0 0$5 ) ;
5149: LD_INT 175
5151: PPUSH
5152: CALL_OW 67
// artifact_destroyed := true ;
5156: LD_ADDR_EXP 16
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// break ;
5164: GO 5168
// end ; end ;
5166: GO 5094
5168: POP
5169: POP
// end ;
5170: PPOPN 4
5172: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5173: LD_VAR 0 1
5177: PPUSH
5178: LD_VAR 0 2
5182: PPUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: CALL 9595 0 3
// end ;
5192: PPOPN 3
5194: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: CALL 9603 0 1
// end ; end_of_file
5204: PPOPN 1
5206: END
// export function CreateArtifact ( type , x , y ) ; begin
5207: LD_INT 0
5209: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5210: LD_INT 4
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 58
// end ;
5235: LD_VAR 0 4
5239: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5240: LD_INT 0
5242: PPUSH
5243: PPUSH
5244: PPUSH
// result := 0 ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5253: LD_ADDR_VAR 0 4
5257: PUSH
5258: LD_INT 22
5260: PUSH
5261: LD_VAR 0 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 2
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 69
5306: ST_TO_ADDR
// if deps then
5307: LD_VAR 0 4
5311: IFFALSE 5359
// for i in deps do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_VAR 0 4
5322: PUSH
5323: FOR_IN
5324: IFFALSE 5357
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5326: LD_ADDR_VAR 0 2
5330: PUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 3
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 3
5348: PPUSH
5349: CALL_OW 275
5353: PLUS
5354: ST_TO_ADDR
5355: GO 5323
5357: POP
5358: POP
// end ;
5359: LD_VAR 0 2
5363: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5364: LD_INT 0
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
// if val <= 0 then
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 0
5377: LESSEQUAL
5378: IFFALSE 5382
// exit ;
5380: GO 5574
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 22
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 30
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 1
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 69
5435: ST_TO_ADDR
// if deps then
5436: LD_VAR 0 5
5440: IFFALSE 5574
// for i in deps do
5442: LD_ADDR_VAR 0 4
5446: PUSH
5447: LD_VAR 0 5
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5572
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5455: LD_ADDR_VAR 0 6
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 274
5469: PPUSH
5470: LD_INT 3
5472: PPUSH
5473: CALL_OW 275
5477: ST_TO_ADDR
// if val < s then
5478: LD_VAR 0 2
5482: PUSH
5483: LD_VAR 0 6
5487: LESS
5488: IFFALSE 5534
// begin s := s - val ;
5490: LD_ADDR_VAR 0 6
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: LD_VAR 0 2
5504: MINUS
5505: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5506: LD_VAR 0 4
5510: PPUSH
5511: CALL_OW 274
5515: PPUSH
5516: LD_INT 3
5518: PPUSH
5519: LD_VAR 0 6
5523: PPUSH
5524: CALL_OW 277
// exit ;
5528: POP
5529: POP
5530: GO 5574
// end else
5532: GO 5570
// begin val := val - s ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 6
5548: MINUS
5549: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5550: LD_VAR 0 4
5554: PPUSH
5555: CALL_OW 274
5559: PPUSH
5560: LD_INT 3
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 277
// end ; end ;
5570: GO 5452
5572: POP
5573: POP
// end ;
5574: LD_VAR 0 3
5578: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5579: LD_VAR 0 1
5583: PUSH
5584: LD_EXP 35
5588: IN
5589: NOT
5590: IFFALSE 5621
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5592: LD_ADDR_EXP 35
5596: PUSH
5597: LD_EXP 35
5601: PPUSH
5602: LD_EXP 35
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: PPUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// end ;
5621: PPOPN 1
5623: END
// export function DestinationReachable ( unit , x , y ) ; begin
5624: LD_INT 0
5626: PPUSH
// if ValidHex ( x , y ) then
5627: LD_VAR 0 2
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 488
5641: IFFALSE 5667
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 428
5662: PPUSH
5663: CALL_OW 115
// wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// if unit in unreachableList then
5674: LD_VAR 0 1
5678: PUSH
5679: LD_EXP 35
5683: IN
5684: IFFALSE 5696
// result := false else
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
5694: GO 5704
// result := true ;
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if not result then
5704: LD_VAR 0 4
5708: NOT
5709: IFFALSE 5727
// unreachableList := unreachableList diff unit ;
5711: LD_ADDR_EXP 35
5715: PUSH
5716: LD_EXP 35
5720: PUSH
5721: LD_VAR 0 1
5725: DIFF
5726: ST_TO_ADDR
// end ; end_of_file
5727: LD_VAR 0 4
5731: RET
// export function Action ; var dial ; begin
5732: LD_INT 0
5734: PPUSH
5735: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5736: LD_INT 192
5738: PPUSH
5739: LD_INT 1
5741: PPUSH
5742: CALL_OW 86
// InGameOn ;
5746: CALL_OW 8
// PrepareRussian ;
5750: CALL 3698 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 6
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 25
5774: PUSH
5775: LD_INT 1
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 4
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: PUSH
5828: LD_EXP 2
5832: DIFF
5833: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5834: LD_VAR 0 2
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: PPUSH
5843: LD_INT 202
5845: PPUSH
5846: LD_INT 40
5848: PPUSH
5849: CALL_OW 111
// Wait ( 0 0$03 ) ;
5853: LD_INT 105
5855: PPUSH
5856: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5860: LD_EXP 2
5864: PPUSH
5865: LD_STRING DDav-1
5867: PPUSH
5868: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5872: LD_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_EXP 2
5885: PPUSH
5886: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5890: LD_EXP 2
5894: PPUSH
5895: LD_VAR 0 2
5899: PUSH
5900: LD_INT 1
5902: ARRAY
5903: PPUSH
5904: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5908: LD_INT 202
5910: PPUSH
5911: LD_INT 40
5913: PPUSH
5914: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5918: LD_VAR 0 2
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_STRING DRus-1
5929: PPUSH
5930: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5934: LD_EXP 2
5938: PPUSH
5939: LD_STRING DDav-2
5941: PPUSH
5942: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5946: LD_VAR 0 2
5950: PUSH
5951: LD_INT 1
5953: ARRAY
5954: PPUSH
5955: LD_STRING DRus-2
5957: PPUSH
5958: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5962: LD_EXP 2
5966: PPUSH
5967: LD_STRING DDav-3
5969: PPUSH
5970: CALL_OW 88
// InGameOff ;
5974: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5978: LD_INT 10
5980: PPUSH
5981: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5985: LD_STRING C1
5987: PPUSH
5988: CALL_OW 337
// SaveForQuickRestart ;
5992: CALL_OW 22
// end ;
5996: LD_VAR 0 1
6000: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6001: LD_INT 22
6003: PUSH
6004: LD_INT 6
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 6
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 7
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 8
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: IFFALSE 6158
6060: GO 6062
6062: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6063: LD_EXP 2
6067: PPUSH
6068: LD_STRING DDav-4
6070: PPUSH
6071: CALL_OW 88
// Wait ( 0 0$40 ) ;
6075: LD_INT 1400
6077: PPUSH
6078: CALL_OW 67
// DialogueOn ;
6082: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6086: LD_EXP 3
6090: PPUSH
6091: LD_STRING Dver-Meet-1
6093: PPUSH
6094: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6098: LD_EXP 2
6102: PPUSH
6103: LD_STRING DDav-Meet-1
6105: PPUSH
6106: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6110: LD_EXP 3
6114: PPUSH
6115: LD_STRING Dver-Meet-2
6117: PPUSH
6118: CALL_OW 94
// DialogueOff ;
6122: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6126: LD_INT 19600
6128: PUSH
6129: LD_INT 15400
6131: PUSH
6132: LD_INT 13300
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_OWVAR 67
6144: ARRAY
6145: PPUSH
6146: CALL_OW 67
// legion_attacks_active := true ;
6150: LD_ADDR_EXP 7
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// end ;
6158: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 6
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 30
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_OWVAR 1
6192: PUSH
6193: LD_INT 21000
6195: GREATER
6196: OR
6197: IFFALSE 6431
6199: GO 6201
6201: DISABLE
6202: LD_INT 0
6204: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6205: LD_ADDR_VAR 0 1
6209: PUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 6
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PPUSH
6274: CALL_OW 69
6278: PUSH
6279: LD_EXP 2
6283: DIFF
6284: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6285: LD_VAR 0 1
6289: PUSH
6290: LD_INT 1
6292: ARRAY
6293: PPUSH
6294: LD_STRING DRus-3
6296: PPUSH
6297: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6301: LD_EXP 2
6305: PPUSH
6306: LD_STRING DDav-5
6308: PPUSH
6309: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6313: LD_VAR 0 1
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_STRING DRus-4
6324: PPUSH
6325: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6329: LD_EXP 2
6333: PPUSH
6334: LD_STRING DDav-6
6336: PPUSH
6337: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6341: LD_STRING C2
6343: PPUSH
6344: CALL_OW 337
// Wait ( 5 5$00 ) ;
6348: LD_INT 10500
6350: PPUSH
6351: CALL_OW 67
// DialogueOn ;
6355: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6359: LD_EXP 1
6363: PPUSH
6364: LD_STRING DBag-1
6366: PPUSH
6367: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6371: LD_EXP 2
6375: PPUSH
6376: LD_STRING DDavB-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING DBag-2
6390: PPUSH
6391: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6395: LD_EXP 2
6399: PPUSH
6400: LD_STRING DDavB-2
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6407: LD_EXP 1
6411: PPUSH
6412: LD_STRING DBag-3
6414: PPUSH
6415: CALL_OW 94
// DialogueOff ;
6419: CALL_OW 7
// alliance_attack_active := true ;
6423: LD_ADDR_EXP 9
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// end ;
6431: PPOPN 1
6433: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6434: LD_EXP 10
6438: IFFALSE 6485
6440: GO 6442
6442: DISABLE
// begin DialogueOn ;
6443: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6447: LD_EXP 10
6451: PUSH
6452: LD_INT 1
6454: ARRAY
6455: PPUSH
6456: LD_EXP 10
6460: PUSH
6461: LD_INT 2
6463: ARRAY
6464: PPUSH
6465: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6469: LD_EXP 2
6473: PPUSH
6474: LD_STRING DDav-Artifact1-1
6476: PPUSH
6477: CALL_OW 88
// DialogueOff ;
6481: CALL_OW 7
// end ;
6485: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6486: LD_EXP 11
6490: IFFALSE 6537
6492: GO 6494
6494: DISABLE
// begin DialogueOn ;
6495: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6499: LD_EXP 11
6503: PUSH
6504: LD_INT 1
6506: ARRAY
6507: PPUSH
6508: LD_EXP 11
6512: PUSH
6513: LD_INT 2
6515: ARRAY
6516: PPUSH
6517: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6521: LD_EXP 2
6525: PPUSH
6526: LD_STRING DDav-Artifact2-1
6528: PPUSH
6529: CALL_OW 88
// DialogueOff ;
6533: CALL_OW 7
// end ;
6537: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6538: LD_EXP 16
6542: PUSH
6543: LD_INT 6
6545: PPUSH
6546: CALL_OW 469
6550: NOT
6551: PUSH
6552: LD_EXP 18
6556: NOT
6557: AND
6558: OR
6559: IFFALSE 6571
6561: GO 6563
6563: DISABLE
// YouLost ( artifact_destroyed ) ;
6564: LD_STRING artifact_destroyed
6566: PPUSH
6567: CALL_OW 104
6571: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6572: LD_EXP 2
6576: PPUSH
6577: CALL_OW 301
6581: IFFALSE 6593
6583: GO 6585
6585: DISABLE
// YouLost ( dead ) ;
6586: LD_STRING dead
6588: PPUSH
6589: CALL_OW 104
6593: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6594: LD_INT 22
6596: PUSH
6597: LD_INT 7
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6760
6628: GO 6630
6630: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6631: LD_OWVAR 1
6635: PUSH
6636: LD_INT 252000
6638: PUSH
6639: LD_INT 210000
6641: PUSH
6642: LD_INT 189000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_OWVAR 67
6654: ARRAY
6655: LESS
6656: IFFALSE 6670
// AddMedal ( med1 , 1 ) else
6658: LD_STRING med1
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: CALL_OW 101
6668: GO 6681
// AddMedal ( med1 , - 1 ) ;
6670: LD_STRING med1
6672: PPUSH
6673: LD_INT 1
6675: NEG
6676: PPUSH
6677: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: IFFALSE 6710
// AddMedal ( med2 , - 1 ) else
6697: LD_STRING med2
6699: PPUSH
6700: LD_INT 1
6702: NEG
6703: PPUSH
6704: CALL_OW 101
6708: GO 6720
// AddMedal ( med2 , 1 ) ;
6710: LD_STRING med2
6712: PPUSH
6713: LD_INT 1
6715: PPUSH
6716: CALL_OW 101
// if player_used_sib_bomb then
6720: LD_EXP 12
6724: IFFALSE 6739
// AddMedal ( med3 , - 1 ) else
6726: LD_STRING med3
6728: PPUSH
6729: LD_INT 1
6731: NEG
6732: PPUSH
6733: CALL_OW 101
6737: GO 6749
// AddMedal ( med3 , 1 ) ;
6739: LD_STRING med3
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 101
// GiveMedals ( MAIN ) ;
6749: LD_STRING MAIN
6751: PPUSH
6752: CALL_OW 102
// YouWin ;
6756: CALL_OW 103
// end ; end_of_file
6760: END
// every 0 0$22 + 0 0$2 do
6761: GO 6763
6763: DISABLE
// begin enable ;
6764: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6765: LD_INT 4
6767: PPUSH
6768: LD_INT 5
6770: PPUSH
6771: CALL_OW 12
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: LD_INT 1
6781: PPUSH
6782: CALL_OW 55
// if tick >= 4 4$00 then
6786: LD_OWVAR 1
6790: PUSH
6791: LD_INT 8400
6793: GREATEREQUAL
6794: IFFALSE 6801
// begin disable ;
6796: DISABLE
// CratesSpawn ( ) ;
6797: CALL 6802 0 0
// end ; end ;
6801: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6802: LD_INT 0
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 30000
6815: PUSH
6816: LD_INT 20000
6818: PUSH
6819: LD_INT 10000
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_OWVAR 67
6831: ARRAY
6832: ST_TO_ADDR
// while amount > 0 do
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6911
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6843: LD_INT 1050
6845: PPUSH
6846: LD_INT 3150
6848: PPUSH
6849: CALL_OW 12
6853: PPUSH
6854: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6858: LD_ADDR_VAR 0 4
6862: PUSH
6863: LD_INT 1
6865: PPUSH
6866: LD_INT 5
6868: PPUSH
6869: CALL_OW 12
6873: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: LD_VAR 0 3
6883: PUSH
6884: LD_VAR 0 4
6888: PUSH
6889: LD_INT 10
6891: MUL
6892: MINUS
6893: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6894: LD_VAR 0 4
6898: PPUSH
6899: LD_INT 3
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 55
// end ;
6909: GO 6833
// end ; end_of_file
6911: LD_VAR 0 1
6915: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
// InitHc_All ( ) ;
6920: CALL_OW 584
// for i := 1 to num1 do
6924: LD_ADDR_VAR 0 6
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 1
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6968
// begin PrepareApeman ( 5 ) ;
6942: LD_INT 5
6944: PPUSH
6945: CALL 64171 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6949: CALL_OW 44
6953: PPUSH
6954: LD_VAR 0 4
6958: PPUSH
6959: LD_INT 0
6961: PPUSH
6962: CALL_OW 49
// end ;
6966: GO 6939
6968: POP
6969: POP
// for i := 1 to num2 do
6970: LD_ADDR_VAR 0 6
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_VAR 0 2
6984: PUSH
6985: FOR_TO
6986: IFFALSE 7014
// begin PrepareTiger ( 5 ) ;
6988: LD_INT 5
6990: PPUSH
6991: CALL 64279 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6995: CALL_OW 44
6999: PPUSH
7000: LD_VAR 0 4
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: CALL_OW 49
// end ;
7012: GO 6985
7014: POP
7015: POP
// for i := 1 to num3 do
7016: LD_ADDR_VAR 0 6
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 3
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7057
// begin PrepareBird ( ) ;
7034: CALL 64460 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7038: CALL_OW 44
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// end ;
7055: GO 7031
7057: POP
7058: POP
// end ; end_of_file
7059: LD_VAR 0 5
7063: RET
// export function DebugArtifact ; begin
7064: LD_INT 0
7066: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7067: LD_STRING Artifact is loaded: 
7069: PUSH
7070: LD_EXP 18
7074: STR
7075: PPUSH
7076: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7080: LD_STRING Artifact is active: 
7082: PUSH
7083: LD_EXP 29
7087: STR
7088: PPUSH
7089: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7093: LD_STRING Artifact is researched: 
7095: PUSH
7096: LD_EXP 22
7100: STR
7101: PPUSH
7102: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7106: LD_STRING Artifact coords 
7108: PUSH
7109: LD_EXP 19
7113: PPUSH
7114: CALL_OW 469
7118: STR
7119: PPUSH
7120: CALL_OW 561
// end ;
7124: LD_VAR 0 1
7128: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7135: LD_ADDR_VAR 0 4
7139: PUSH
7140: LD_INT 100
7142: PUSH
7143: LD_INT 185
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 99
7152: PUSH
7153: LD_INT 175
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 191
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: ST_TO_ADDR
// for i = 1 to artifacts_type do
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_EXP 14
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7293
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7193: LD_ADDR_VAR 0 3
7197: PUSH
7198: LD_VAR 0 4
7202: PUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_VAR 0 4
7210: PPUSH
7211: CALL_OW 12
7215: ARRAY
7216: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7217: LD_ADDR_VAR 0 4
7221: PUSH
7222: LD_VAR 0 4
7226: PUSH
7227: LD_VAR 0 3
7231: DIFF
7232: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7233: LD_ADDR_EXP 15
7237: PUSH
7238: LD_EXP 15
7242: PPUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: LD_VAR 0 3
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7258: LD_EXP 14
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 3
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 3
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL 5207 0 3
// end ;
7291: GO 7190
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 1
7299: RET
// export function GetUseCost ( dist ) ; begin
7300: LD_INT 0
7302: PPUSH
// if dist < 30 then
7303: LD_VAR 0 1
7307: PUSH
7308: LD_INT 30
7310: LESS
7311: IFFALSE 7321
// result := 10 ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 10
7320: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7321: LD_VAR 0 1
7325: PUSH
7326: LD_INT 30
7328: GREATEREQUAL
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: LD_INT 50
7337: LESS
7338: AND
7339: IFFALSE 7349
// result := 35 ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 35
7348: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7349: LD_VAR 0 1
7353: PUSH
7354: LD_INT 50
7356: GREATEREQUAL
7357: PUSH
7358: LD_VAR 0 1
7362: PUSH
7363: LD_INT 80
7365: LESS
7366: AND
7367: IFFALSE 7377
// result := 70 ;
7369: LD_ADDR_VAR 0 2
7373: PUSH
7374: LD_INT 70
7376: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7377: LD_VAR 0 1
7381: PUSH
7382: LD_INT 80
7384: GREATEREQUAL
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: LD_INT 120
7393: LESS
7394: AND
7395: IFFALSE 7405
// result := 100 ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 100
7404: ST_TO_ADDR
// if dist >= 120 then
7405: LD_VAR 0 1
7409: PUSH
7410: LD_INT 120
7412: GREATEREQUAL
7413: IFFALSE 7423
// result := 150 ;
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_INT 150
7422: ST_TO_ADDR
// end ;
7423: LD_VAR 0 2
7427: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 255
7437: PUSH
7438: LD_OWVAR 2
7442: EQUAL
7443: IFFALSE 7453
// player_artifact_researched := true ;
7445: LD_ADDR_EXP 22
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// end ;
7453: PPOPN 1
7455: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7456: LD_INT 22
7458: PUSH
7459: LD_OWVAR 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 30
7473: PUSH
7474: LD_INT 8
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 69
7504: PUSH
7505: LD_EXP 22
7509: AND
7510: PUSH
7511: LD_EXP 18
7515: NOT
7516: AND
7517: IFFALSE 7971
7519: GO 7521
7521: DISABLE
7522: LD_INT 0
7524: PPUSH
7525: PPUSH
// begin enable ;
7526: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_EXP 19
7536: PPUSH
7537: CALL_OW 469
7541: ST_TO_ADDR
// if not coords then
7542: LD_VAR 0 2
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7971
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7551: LD_ADDR_VAR 0 1
7555: PUSH
7556: LD_INT 22
7558: PUSH
7559: LD_OWVAR 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 30
7583: PUSH
7584: LD_INT 11
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PPUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 2
7618: PUSH
7619: LD_INT 2
7621: ARRAY
7622: PPUSH
7623: CALL_OW 73
7627: ST_TO_ADDR
// if not lab then
7628: LD_VAR 0 1
7632: NOT
7633: IFFALSE 7650
// begin if debug then
7635: LD_EXP 6
7639: IFFALSE 7648
// AddToLog ( Cannot find lab for artifact! ) ;
7641: LD_STRING Cannot find lab for artifact!
7643: PPUSH
7644: CALL_OW 561
// exit ;
7648: GO 7971
// end ; if not player_artifact_ready then
7650: LD_EXP 29
7654: NOT
7655: IFFALSE 7779
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 2
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: PPUSH
7680: CALL_OW 297
7684: PUSH
7685: LD_EXP 23
7689: LESS
7690: IFFALSE 7755
// begin if BuildingStatus ( lab ) = bs_idle then
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 461
7701: PUSH
7702: LD_INT 2
7704: EQUAL
7705: IFFALSE 7731
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7707: LD_OWVAR 2
7711: PPUSH
7712: LD_EXP 25
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 468
7729: GO 7753
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7731: LD_OWVAR 2
7735: PPUSH
7736: LD_EXP 25
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 468
// end else
7753: GO 7777
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7755: LD_OWVAR 2
7759: PPUSH
7760: LD_EXP 25
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 468
// end else
7777: GO 7971
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_VAR 0 2
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: CALL_OW 297
7806: PUSH
7807: LD_EXP 23
7811: LESS
7812: IFFALSE 7927
// begin if BuildingStatus ( lab ) = bs_idle then
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 461
7823: PUSH
7824: LD_INT 2
7826: EQUAL
7827: IFFALSE 7881
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7829: LD_OWVAR 2
7833: PPUSH
7834: LD_EXP 20
7838: PPUSH
7839: LD_INT 4
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 468
// if player_artifact_selected_unit then
7851: LD_EXP 30
7855: IFFALSE 7879
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7857: LD_OWVAR 2
7861: PPUSH
7862: LD_EXP 21
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 468
// end else
7879: GO 7925
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7881: LD_OWVAR 2
7885: PPUSH
7886: LD_EXP 20
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7903: LD_OWVAR 2
7907: PPUSH
7908: LD_EXP 21
7912: PPUSH
7913: LD_INT 1
7915: PPUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 468
// end ; end else
7925: GO 7971
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7927: LD_OWVAR 2
7931: PPUSH
7932: LD_EXP 20
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7949: LD_OWVAR 2
7953: PPUSH
7954: LD_EXP 21
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 468
// end ; end ;
7971: PPOPN 2
7973: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
7974: LD_INT 0
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: LD_EXP 19
7991: PPUSH
7992: CALL_OW 469
7996: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_OWVAR 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 30
8019: PUSH
8020: LD_INT 8
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 11
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: PPUSH
8051: LD_VAR 0 5
8055: PUSH
8056: LD_INT 1
8058: ARRAY
8059: PPUSH
8060: LD_VAR 0 5
8064: PUSH
8065: LD_INT 2
8067: ARRAY
8068: PPUSH
8069: CALL_OW 73
8073: ST_TO_ADDR
// if not lab then
8074: LD_VAR 0 7
8078: NOT
8079: IFFALSE 8096
// begin if debug then
8081: LD_EXP 6
8085: IFFALSE 8094
// AddToLog ( Cannot find lab! ) ;
8087: LD_STRING Cannot find lab!
8089: PPUSH
8090: CALL_OW 561
// exit ;
8094: GO 8531
// end ; if icon = player_artifact_icon_res then
8096: LD_VAR 0 2
8100: PUSH
8101: LD_EXP 25
8105: EQUAL
8106: IFFALSE 8147
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8125: LD_OWVAR 2
8129: PPUSH
8130: LD_EXP 25
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: LD_VAR 0 7
8142: PPUSH
8143: CALL_OW 468
// end ; if icon = player_artifact_icon then
8147: LD_VAR 0 2
8151: PUSH
8152: LD_EXP 20
8156: EQUAL
8157: IFFALSE 8196
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8159: LD_VAR 0 3
8163: PPUSH
8164: CALL_OW 247
8168: PUSH
8169: LD_INT 1
8171: EQUAL
8172: PUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 310
8182: NOT
8183: AND
8184: IFFALSE 8196
// player_artifact_selected_unit := cr1 ;
8186: LD_ADDR_EXP 30
8190: PUSH
8191: LD_VAR 0 3
8195: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8196: LD_VAR 0 2
8200: PUSH
8201: LD_EXP 21
8205: EQUAL
8206: IFFALSE 8521
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 428
8222: PUSH
8223: LD_INT 0
8225: NONEQUAL
8226: PUSH
8227: LD_VAR 0 3
8231: PPUSH
8232: LD_VAR 0 4
8236: PPUSH
8237: CALL_OW 546
8241: PUSH
8242: LD_INT 6
8244: ARRAY
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: LD_INT 4
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 6
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: IN
8264: OR
8265: IFFALSE 8269
// exit ;
8267: GO 8531
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_EXP 30
8278: PPUSH
8279: CALL_OW 250
8283: PPUSH
8284: LD_EXP 30
8288: PPUSH
8289: CALL_OW 251
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: LD_VAR 0 4
8303: PPUSH
8304: CALL_OW 298
8308: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8309: LD_ADDR_VAR 0 10
8313: PUSH
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL 7300 0 1
8323: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8324: LD_VAR 0 10
8328: PUSH
8329: LD_OWVAR 2
8333: PPUSH
8334: CALL 5240 0 1
8338: GREATER
8339: IFFALSE 8353
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8341: LD_STRING ArtFrogJumpCost
8343: PPUSH
8344: LD_INT 2
8346: PPUSH
8347: CALL_OW 338
// exit ;
8351: GO 8531
// end ; SetSibResources ( your_side , cost ) ;
8353: LD_OWVAR 2
8357: PPUSH
8358: LD_VAR 0 10
8362: PPUSH
8363: CALL 5364 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 6
8379: PPUSH
8380: LD_INT 5
8382: NEG
8383: PPUSH
8384: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 6
8400: PPUSH
8401: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8405: LD_EXP 30
8409: PPUSH
8410: LD_VAR 0 3
8414: PPUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: LD_INT 1
8425: PPUSH
8426: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8430: LD_VAR 0 3
8434: PPUSH
8435: LD_VAR 0 4
8439: PPUSH
8440: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8444: LD_ADDR_EXP 30
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// player_artifact_researched := false ;
8452: LD_ADDR_EXP 22
8456: PUSH
8457: LD_INT 0
8459: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8460: LD_OWVAR 2
8464: PPUSH
8465: LD_EXP 20
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 7
8477: PPUSH
8478: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_EXP 21
8491: PPUSH
8492: LD_INT 0
8494: PPUSH
8495: LD_VAR 0 7
8499: PPUSH
8500: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8504: LD_EXP 26
8508: PPUSH
8509: CALL_OW 67
// player_artifact_researched := true ;
8513: LD_ADDR_EXP 22
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// end ; if debug then
8521: LD_EXP 6
8525: IFFALSE 8531
// DebugArtifact ;
8527: CALL 7064 0 0
// end ;
8531: PPOPN 10
8533: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 255
8543: PUSH
8544: LD_OWVAR 2
8548: EQUAL
8549: IFFALSE 8588
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8551: LD_OWVAR 2
8555: PPUSH
8556: LD_EXP 25
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 468
// player_artifact_ready := true ;
8573: LD_ADDR_EXP 29
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8581: LD_STRING ArtFrogJump
8583: PPUSH
8584: CALL_OW 339
// end ; end ;
8588: PPOPN 1
8590: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8591: LD_OWVAR 2
8595: PPUSH
8596: LD_EXP 25
8600: PPUSH
8601: LD_INT 2
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 468
// end ;
8613: PPOPN 2
8615: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8616: LD_INT 0
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: LD_INT 81
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 34
8639: PUSH
8640: LD_INT 48
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 81
8658: PUSH
8659: LD_INT 7
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: ADD
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 30
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 34
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: LD_INT 49
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 47
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 34
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 31
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: ST_TO_ADDR
// if not tmp then
8926: LD_VAR 0 3
8930: NOT
8931: IFFALSE 8935
// exit ;
8933: GO 9056
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 34
8942: PUSH
8943: LD_INT 48
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 72
8954: IFFALSE 8987
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8956: LD_ADDR_VAR 0 4
8960: PUSH
8961: LD_VAR 0 3
8965: PPUSH
8966: LD_INT 34
8968: PUSH
8969: LD_INT 48
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: ST_TO_ADDR
8985: GO 9011
// un := tmp [ rand ( 1 , tmp ) ] ;
8987: LD_ADDR_VAR 0 4
8991: PUSH
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: CALL_OW 12
9009: ARRAY
9010: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9011: LD_EXP 10
9015: NOT
9016: IFFALSE 9047
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9018: LD_ADDR_EXP 10
9022: PUSH
9023: LD_VAR 0 4
9027: PPUSH
9028: CALL_OW 250
9032: PUSH
9033: LD_VAR 0 4
9037: PPUSH
9038: CALL_OW 251
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: ST_TO_ADDR
// KillUnit ( un ) ;
9047: LD_VAR 0 4
9051: PPUSH
9052: CALL_OW 66
// end ;
9056: LD_VAR 0 1
9060: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_computer ] ] ) ;
9067: LD_ADDR_VAR 0 4
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 6
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 33
9084: PUSH
9085: LD_INT 3
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: ST_TO_ADDR
// if not tmp then
9101: LD_VAR 0 4
9105: NOT
9106: IFFALSE 9110
// exit ;
9108: GO 9248
// un := tmp [ rand ( 1 , tmp ) ] ;
9110: LD_ADDR_VAR 0 3
9114: PUSH
9115: LD_VAR 0 4
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 12
9132: ARRAY
9133: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 7
9141: PPUSH
9142: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 264
9155: PUSH
9156: LD_INT 48
9158: EQUAL
9159: IFFALSE 9178
// ComAttackPlace ( un , 194 , 19 ) else
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 194
9168: PPUSH
9169: LD_INT 19
9171: PPUSH
9172: CALL_OW 116
9176: GO 9212
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_INT 81
9185: PUSH
9186: LD_INT 7
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: CALL_OW 74
9207: PPUSH
9208: CALL_OW 115
// if not alliance_used_artifact_2 then
9212: LD_EXP 11
9216: NOT
9217: IFFALSE 9248
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9219: LD_ADDR_EXP 11
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 250
9233: PUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 251
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: ST_TO_ADDR
// end ; end_of_file
9248: LD_VAR 0 1
9252: RET
// export function DebugMode ; var i , j , b ; begin
9253: LD_INT 0
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
// enable_addtolog = true ;
9259: LD_ADDR_OWVAR 81
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// FogOff ( 6 ) ;
9267: LD_INT 6
9269: PPUSH
9270: CALL_OW 344
// uc_side = 6 ;
9274: LD_ADDR_OWVAR 20
9278: PUSH
9279: LD_INT 6
9281: ST_TO_ADDR
// uc_nation = 3 ;
9282: LD_ADDR_OWVAR 21
9286: PUSH
9287: LD_INT 3
9289: ST_TO_ADDR
// bc_level = 10 ;
9290: LD_ADDR_OWVAR 43
9294: PUSH
9295: LD_INT 10
9297: ST_TO_ADDR
// bc_type := b_lab_full ;
9298: LD_ADDR_OWVAR 42
9302: PUSH
9303: LD_INT 8
9305: ST_TO_ADDR
// bc_kind1 := 11 ;
9306: LD_ADDR_OWVAR 44
9310: PUSH
9311: LD_INT 11
9313: ST_TO_ADDR
// bc_kind2 := 12 ;
9314: LD_ADDR_OWVAR 45
9318: PUSH
9319: LD_INT 12
9321: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9322: LD_INT 189
9324: PPUSH
9325: LD_INT 20
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 47
// bc_type := b_warehouse ;
9335: LD_ADDR_OWVAR 42
9339: PUSH
9340: LD_INT 1
9342: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: LD_INT 201
9350: PPUSH
9351: LD_INT 22
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 47
9361: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 274
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 10000
9377: PPUSH
9378: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9382: LD_VAR 0 4
9386: PPUSH
9387: CALL_OW 274
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: LD_INT 10000
9397: PPUSH
9398: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9402: LD_VAR 0 4
9406: PPUSH
9407: CALL_OW 274
9411: PPUSH
9412: LD_INT 3
9414: PPUSH
9415: LD_INT 10000
9417: PPUSH
9418: CALL_OW 277
// bc_type := b_siberite_power ;
9422: LD_ADDR_OWVAR 42
9426: PUSH
9427: LD_INT 28
9429: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9430: LD_ADDR_VAR 0 4
9434: PUSH
9435: LD_INT 216
9437: PPUSH
9438: LD_INT 16
9440: PPUSH
9441: LD_INT 4
9443: PPUSH
9444: CALL_OW 47
9448: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9449: LD_ADDR_VAR 0 4
9453: PUSH
9454: LD_INT 219
9456: PPUSH
9457: LD_INT 16
9459: PPUSH
9460: LD_INT 4
9462: PPUSH
9463: CALL_OW 47
9467: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9468: LD_INT 55
9470: PPUSH
9471: LD_INT 6
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9481: LD_INT 56
9483: PPUSH
9484: LD_INT 6
9486: PPUSH
9487: LD_INT 2
9489: PPUSH
9490: CALL_OW 322
// end ; end_of_file
9494: LD_VAR 0 1
9498: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
9499: LD_INT 0
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 264
9514: PUSH
9515: LD_INT 91
9517: EQUAL
9518: IFFALSE 9590
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
9520: LD_INT 68
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 255
9532: PPUSH
9533: CALL_OW 321
9537: PUSH
9538: LD_INT 2
9540: EQUAL
9541: IFFALSE 9553
// eff := 70 else
9543: LD_ADDR_VAR 0 4
9547: PUSH
9548: LD_INT 70
9550: ST_TO_ADDR
9551: GO 9561
// eff := 30 ;
9553: LD_ADDR_VAR 0 4
9557: PUSH
9558: LD_INT 30
9560: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: CALL_OW 250
9570: PPUSH
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 251
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: CALL_OW 495
// end ; end ;
9590: LD_VAR 0 2
9594: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9595: LD_INT 0
9597: PPUSH
// end ;
9598: LD_VAR 0 4
9602: RET
// export function SOS_Command ( cmd ) ; begin
9603: LD_INT 0
9605: PPUSH
// end ;
9606: LD_VAR 0 2
9610: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9611: LD_INT 0
9613: PPUSH
// end ;
9614: LD_VAR 0 6
9618: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
9619: LD_INT 0
9621: PPUSH
9622: PPUSH
// if not vehicle or not factory then
9623: LD_VAR 0 1
9627: NOT
9628: PUSH
9629: LD_VAR 0 2
9633: NOT
9634: OR
9635: IFFALSE 9639
// exit ;
9637: GO 9870
// if factoryWaypoints >= factory then
9639: LD_EXP 105
9643: PUSH
9644: LD_VAR 0 2
9648: GREATEREQUAL
9649: IFFALSE 9870
// if factoryWaypoints [ factory ] then
9651: LD_EXP 105
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: IFFALSE 9870
// begin if GetControl ( vehicle ) = control_manual then
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9757
// begin driver := IsDrivenBy ( vehicle ) ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 311
9692: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9693: LD_VAR 0 4
9697: PPUSH
9698: LD_EXP 105
9702: PUSH
9703: LD_VAR 0 2
9707: ARRAY
9708: PUSH
9709: LD_INT 3
9711: ARRAY
9712: PPUSH
9713: LD_EXP 105
9717: PUSH
9718: LD_VAR 0 2
9722: ARRAY
9723: PUSH
9724: LD_INT 4
9726: ARRAY
9727: PPUSH
9728: CALL_OW 171
// AddComExitVehicle ( driver ) ;
9732: LD_VAR 0 4
9736: PPUSH
9737: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
9741: LD_VAR 0 4
9745: PPUSH
9746: LD_VAR 0 2
9750: PPUSH
9751: CALL_OW 180
// end else
9755: GO 9870
// if GetControl ( vehicle ) = control_remote then
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 263
9766: PUSH
9767: LD_INT 2
9769: EQUAL
9770: IFFALSE 9831
// begin wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// if Connect ( vehicle ) then
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL 38520 0 1
9788: IFFALSE 9829
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_EXP 105
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: PUSH
9806: LD_INT 3
9808: ARRAY
9809: PPUSH
9810: LD_EXP 105
9814: PUSH
9815: LD_VAR 0 2
9819: ARRAY
9820: PUSH
9821: LD_INT 4
9823: ARRAY
9824: PPUSH
9825: CALL_OW 171
// end else
9829: GO 9870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_EXP 105
9840: PUSH
9841: LD_VAR 0 2
9845: ARRAY
9846: PUSH
9847: LD_INT 3
9849: ARRAY
9850: PPUSH
9851: LD_EXP 105
9855: PUSH
9856: LD_VAR 0 2
9860: ARRAY
9861: PUSH
9862: LD_INT 4
9864: ARRAY
9865: PPUSH
9866: CALL_OW 171
// end ; end ;
9870: LD_VAR 0 3
9874: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
9875: LD_INT 0
9877: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
9878: LD_VAR 0 1
9882: PUSH
9883: LD_INT 250
9885: EQUAL
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 81
9899: EQUAL
9900: AND
9901: IFFALSE 9922
// MinerPlaceMine ( unit , x , y ) ;
9903: LD_VAR 0 2
9907: PPUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: LD_VAR 0 5
9917: PPUSH
9918: CALL 12912 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
9922: LD_VAR 0 1
9926: PUSH
9927: LD_INT 251
9929: EQUAL
9930: PUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: CALL_OW 264
9940: PUSH
9941: LD_INT 81
9943: EQUAL
9944: AND
9945: IFFALSE 9966
// MinerDetonateMine ( unit , x , y ) ;
9947: LD_VAR 0 2
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 13187 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
9966: LD_VAR 0 1
9970: PUSH
9971: LD_INT 252
9973: EQUAL
9974: PUSH
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 264
9984: PUSH
9985: LD_INT 81
9987: EQUAL
9988: AND
9989: IFFALSE 10010
// MinerCreateMinefield ( unit , x , y ) ;
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 4
10000: PPUSH
10001: LD_VAR 0 5
10005: PPUSH
10006: CALL 13604 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10010: LD_VAR 0 1
10014: PUSH
10015: LD_INT 253
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 257
10028: PUSH
10029: LD_INT 5
10031: EQUAL
10032: AND
10033: IFFALSE 10054
// ComBinocular ( unit , x , y ) ;
10035: LD_VAR 0 2
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_VAR 0 5
10049: PPUSH
10050: CALL 13973 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10054: LD_VAR 0 1
10058: PUSH
10059: LD_INT 254
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 264
10072: PUSH
10073: LD_INT 99
10075: EQUAL
10076: AND
10077: PUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: CALL_OW 263
10087: PUSH
10088: LD_INT 3
10090: EQUAL
10091: AND
10092: IFFALSE 10108
// HackDestroyVehicle ( unit , selectedUnit ) ;
10094: LD_VAR 0 2
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: CALL 12276 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10108: LD_VAR 0 1
10112: PUSH
10113: LD_INT 255
10115: EQUAL
10116: PUSH
10117: LD_VAR 0 2
10121: PPUSH
10122: CALL_OW 264
10126: PUSH
10127: LD_INT 14
10129: PUSH
10130: LD_INT 53
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: IN
10137: AND
10138: PUSH
10139: LD_VAR 0 4
10143: PPUSH
10144: LD_VAR 0 5
10148: PPUSH
10149: CALL_OW 488
10153: AND
10154: IFFALSE 10178
// CutTreeXYR ( unit , x , y , 12 ) ;
10156: LD_VAR 0 2
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: LD_VAR 0 5
10170: PPUSH
10171: LD_INT 12
10173: PPUSH
10174: CALL 10273 0 4
// if cmd = 256 then
10178: LD_VAR 0 1
10182: PUSH
10183: LD_INT 256
10185: EQUAL
10186: IFFALSE 10207
// SetFactoryWaypoint ( unit , x , y ) ;
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_VAR 0 4
10197: PPUSH
10198: LD_VAR 0 5
10202: PPUSH
10203: CALL 28901 0 3
// if cmd = 257 then
10207: LD_VAR 0 1
10211: PUSH
10212: LD_INT 257
10214: EQUAL
10215: IFFALSE 10236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: LD_VAR 0 5
10231: PPUSH
10232: CALL 29263 0 3
// if cmd = 258 then
10236: LD_VAR 0 1
10240: PUSH
10241: LD_INT 258
10243: EQUAL
10244: IFFALSE 10268
// BurnTreeXYR ( unit , x , y , 8 ) ;
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 4
10255: PPUSH
10256: LD_VAR 0 5
10260: PPUSH
10261: LD_INT 8
10263: PPUSH
10264: CALL 10667 0 4
// end ;
10268: LD_VAR 0 6
10272: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10273: LD_INT 0
10275: PPUSH
10276: PPUSH
10277: PPUSH
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10284: LD_VAR 0 1
10288: PPUSH
10289: CALL_OW 302
10293: NOT
10294: PUSH
10295: LD_VAR 0 2
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: CALL_OW 488
10309: NOT
10310: OR
10311: PUSH
10312: LD_VAR 0 4
10316: NOT
10317: OR
10318: IFFALSE 10322
// exit ;
10320: GO 10662
// list := [ ] ;
10322: LD_ADDR_VAR 0 13
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// if x - r < 0 then
10329: LD_VAR 0 2
10333: PUSH
10334: LD_VAR 0 4
10338: MINUS
10339: PUSH
10340: LD_INT 0
10342: LESS
10343: IFFALSE 10355
// min_x := 0 else
10345: LD_ADDR_VAR 0 7
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
10353: GO 10371
// min_x := x - r ;
10355: LD_ADDR_VAR 0 7
10359: PUSH
10360: LD_VAR 0 2
10364: PUSH
10365: LD_VAR 0 4
10369: MINUS
10370: ST_TO_ADDR
// if y - r < 0 then
10371: LD_VAR 0 3
10375: PUSH
10376: LD_VAR 0 4
10380: MINUS
10381: PUSH
10382: LD_INT 0
10384: LESS
10385: IFFALSE 10397
// min_y := 0 else
10387: LD_ADDR_VAR 0 8
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
10395: GO 10413
// min_y := y - r ;
10397: LD_ADDR_VAR 0 8
10401: PUSH
10402: LD_VAR 0 3
10406: PUSH
10407: LD_VAR 0 4
10411: MINUS
10412: ST_TO_ADDR
// max_x := x + r ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_VAR 0 2
10422: PUSH
10423: LD_VAR 0 4
10427: PLUS
10428: ST_TO_ADDR
// max_y := y + r ;
10429: LD_ADDR_VAR 0 10
10433: PUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_VAR 0 4
10443: PLUS
10444: ST_TO_ADDR
// for _x = min_x to max_x do
10445: LD_ADDR_VAR 0 11
10449: PUSH
10450: DOUBLE
10451: LD_VAR 0 7
10455: DEC
10456: ST_TO_ADDR
10457: LD_VAR 0 9
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10580
// for _y = min_y to max_y do
10465: LD_ADDR_VAR 0 12
10469: PUSH
10470: DOUBLE
10471: LD_VAR 0 8
10475: DEC
10476: ST_TO_ADDR
10477: LD_VAR 0 10
10481: PUSH
10482: FOR_TO
10483: IFFALSE 10576
// begin if not ValidHex ( _x , _y ) then
10485: LD_VAR 0 11
10489: PPUSH
10490: LD_VAR 0 12
10494: PPUSH
10495: CALL_OW 488
10499: NOT
10500: IFFALSE 10504
// continue ;
10502: GO 10482
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10504: LD_VAR 0 11
10508: PPUSH
10509: LD_VAR 0 12
10513: PPUSH
10514: CALL_OW 351
10518: PUSH
10519: LD_VAR 0 11
10523: PPUSH
10524: LD_VAR 0 12
10528: PPUSH
10529: CALL_OW 554
10533: AND
10534: IFFALSE 10574
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10536: LD_ADDR_VAR 0 13
10540: PUSH
10541: LD_VAR 0 13
10545: PPUSH
10546: LD_VAR 0 13
10550: PUSH
10551: LD_INT 1
10553: PLUS
10554: PPUSH
10555: LD_VAR 0 11
10559: PUSH
10560: LD_VAR 0 12
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PPUSH
10569: CALL_OW 2
10573: ST_TO_ADDR
// end ;
10574: GO 10482
10576: POP
10577: POP
10578: GO 10462
10580: POP
10581: POP
// if not list then
10582: LD_VAR 0 13
10586: NOT
10587: IFFALSE 10591
// exit ;
10589: GO 10662
// for i in list do
10591: LD_ADDR_VAR 0 6
10595: PUSH
10596: LD_VAR 0 13
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10660
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_STRING M
10611: PUSH
10612: LD_VAR 0 6
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PUSH
10621: LD_VAR 0 6
10625: PUSH
10626: LD_INT 2
10628: ARRAY
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: LD_INT 0
10635: PUSH
10636: LD_INT 0
10638: PUSH
10639: LD_INT 0
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: PPUSH
10654: CALL_OW 447
10658: GO 10601
10660: POP
10661: POP
// end ;
10662: LD_VAR 0 5
10666: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
10671: PPUSH
10672: PPUSH
10673: PPUSH
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
10678: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 302
10688: NOT
10689: PUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: CALL_OW 488
10704: NOT
10705: OR
10706: PUSH
10707: LD_VAR 0 4
10711: NOT
10712: OR
10713: IFFALSE 10717
// exit ;
10715: GO 11230
// list := [ ] ;
10717: LD_ADDR_VAR 0 13
10721: PUSH
10722: EMPTY
10723: ST_TO_ADDR
// if x - r < 0 then
10724: LD_VAR 0 2
10728: PUSH
10729: LD_VAR 0 4
10733: MINUS
10734: PUSH
10735: LD_INT 0
10737: LESS
10738: IFFALSE 10750
// min_x := 0 else
10740: LD_ADDR_VAR 0 7
10744: PUSH
10745: LD_INT 0
10747: ST_TO_ADDR
10748: GO 10766
// min_x := x - r ;
10750: LD_ADDR_VAR 0 7
10754: PUSH
10755: LD_VAR 0 2
10759: PUSH
10760: LD_VAR 0 4
10764: MINUS
10765: ST_TO_ADDR
// if y - r < 0 then
10766: LD_VAR 0 3
10770: PUSH
10771: LD_VAR 0 4
10775: MINUS
10776: PUSH
10777: LD_INT 0
10779: LESS
10780: IFFALSE 10792
// min_y := 0 else
10782: LD_ADDR_VAR 0 8
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
10790: GO 10808
// min_y := y - r ;
10792: LD_ADDR_VAR 0 8
10796: PUSH
10797: LD_VAR 0 3
10801: PUSH
10802: LD_VAR 0 4
10806: MINUS
10807: ST_TO_ADDR
// max_x := x + r ;
10808: LD_ADDR_VAR 0 9
10812: PUSH
10813: LD_VAR 0 2
10817: PUSH
10818: LD_VAR 0 4
10822: PLUS
10823: ST_TO_ADDR
// max_y := y + r ;
10824: LD_ADDR_VAR 0 10
10828: PUSH
10829: LD_VAR 0 3
10833: PUSH
10834: LD_VAR 0 4
10838: PLUS
10839: ST_TO_ADDR
// for _x = min_x to max_x do
10840: LD_ADDR_VAR 0 11
10844: PUSH
10845: DOUBLE
10846: LD_VAR 0 7
10850: DEC
10851: ST_TO_ADDR
10852: LD_VAR 0 9
10856: PUSH
10857: FOR_TO
10858: IFFALSE 10975
// for _y = min_y to max_y do
10860: LD_ADDR_VAR 0 12
10864: PUSH
10865: DOUBLE
10866: LD_VAR 0 8
10870: DEC
10871: ST_TO_ADDR
10872: LD_VAR 0 10
10876: PUSH
10877: FOR_TO
10878: IFFALSE 10971
// begin if not ValidHex ( _x , _y ) then
10880: LD_VAR 0 11
10884: PPUSH
10885: LD_VAR 0 12
10889: PPUSH
10890: CALL_OW 488
10894: NOT
10895: IFFALSE 10899
// continue ;
10897: GO 10877
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10899: LD_VAR 0 11
10903: PPUSH
10904: LD_VAR 0 12
10908: PPUSH
10909: CALL_OW 351
10913: PUSH
10914: LD_VAR 0 11
10918: PPUSH
10919: LD_VAR 0 12
10923: PPUSH
10924: CALL_OW 554
10928: AND
10929: IFFALSE 10969
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10931: LD_ADDR_VAR 0 13
10935: PUSH
10936: LD_VAR 0 13
10940: PPUSH
10941: LD_VAR 0 13
10945: PUSH
10946: LD_INT 1
10948: PLUS
10949: PPUSH
10950: LD_VAR 0 11
10954: PUSH
10955: LD_VAR 0 12
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 2
10968: ST_TO_ADDR
// end ;
10969: GO 10877
10971: POP
10972: POP
10973: GO 10857
10975: POP
10976: POP
// if not list then
10977: LD_VAR 0 13
10981: NOT
10982: IFFALSE 10986
// exit ;
10984: GO 11230
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
10986: LD_ADDR_VAR 0 13
10990: PUSH
10991: LD_VAR 0 1
10995: PPUSH
10996: LD_VAR 0 13
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL 35662 0 4
11011: ST_TO_ADDR
// ComStop ( flame ) ;
11012: LD_VAR 0 1
11016: PPUSH
11017: CALL_OW 141
// for i in list do
11021: LD_ADDR_VAR 0 6
11025: PUSH
11026: LD_VAR 0 13
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11063
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11034: LD_VAR 0 1
11038: PPUSH
11039: LD_VAR 0 6
11043: PUSH
11044: LD_INT 1
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 6
11052: PUSH
11053: LD_INT 2
11055: ARRAY
11056: PPUSH
11057: CALL_OW 176
11061: GO 11031
11063: POP
11064: POP
// repeat wait ( 0 0$1 ) ;
11065: LD_INT 35
11067: PPUSH
11068: CALL_OW 67
// task := GetTaskList ( flame ) ;
11072: LD_ADDR_VAR 0 14
11076: PUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 437
11086: ST_TO_ADDR
// if not task then
11087: LD_VAR 0 14
11091: NOT
11092: IFFALSE 11096
// exit ;
11094: GO 11230
// if task [ 1 ] [ 1 ] <> | then
11096: LD_VAR 0 14
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PUSH
11109: LD_STRING |
11111: NONEQUAL
11112: IFFALSE 11116
// exit ;
11114: GO 11230
// _x := task [ 1 ] [ 2 ] ;
11116: LD_ADDR_VAR 0 11
11120: PUSH
11121: LD_VAR 0 14
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PUSH
11130: LD_INT 2
11132: ARRAY
11133: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
11134: LD_ADDR_VAR 0 12
11138: PUSH
11139: LD_VAR 0 14
11143: PUSH
11144: LD_INT 1
11146: ARRAY
11147: PUSH
11148: LD_INT 3
11150: ARRAY
11151: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
11152: LD_VAR 0 11
11156: PPUSH
11157: LD_VAR 0 12
11161: PPUSH
11162: CALL_OW 351
11166: NOT
11167: PUSH
11168: LD_VAR 0 11
11172: PPUSH
11173: LD_VAR 0 12
11177: PPUSH
11178: CALL_OW 554
11182: NOT
11183: OR
11184: IFFALSE 11218
// begin task := Delete ( task , 1 ) ;
11186: LD_ADDR_VAR 0 14
11190: PUSH
11191: LD_VAR 0 14
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 3
11203: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: LD_VAR 0 14
11213: PPUSH
11214: CALL_OW 446
// end ; until not HasTask ( flame ) ;
11218: LD_VAR 0 1
11222: PPUSH
11223: CALL_OW 314
11227: NOT
11228: IFFALSE 11065
// end ;
11230: LD_VAR 0 5
11234: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11235: LD_EXP 36
11239: NOT
11240: IFFALSE 11290
11242: GO 11244
11244: DISABLE
// begin initHack := true ;
11245: LD_ADDR_EXP 36
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// hackTanks := [ ] ;
11253: LD_ADDR_EXP 37
11257: PUSH
11258: EMPTY
11259: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11260: LD_ADDR_EXP 38
11264: PUSH
11265: EMPTY
11266: ST_TO_ADDR
// hackLimit := 3 ;
11267: LD_ADDR_EXP 39
11271: PUSH
11272: LD_INT 3
11274: ST_TO_ADDR
// hackDist := 12 ;
11275: LD_ADDR_EXP 40
11279: PUSH
11280: LD_INT 12
11282: ST_TO_ADDR
// hackCounter := [ ] ;
11283: LD_ADDR_EXP 41
11287: PUSH
11288: EMPTY
11289: ST_TO_ADDR
// end ;
11290: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11291: LD_EXP 36
11295: PUSH
11296: LD_INT 34
11298: PUSH
11299: LD_INT 99
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: AND
11311: IFFALSE 11564
11313: GO 11315
11315: DISABLE
11316: LD_INT 0
11318: PPUSH
11319: PPUSH
// begin enable ;
11320: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 34
11328: PUSH
11329: LD_INT 99
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: PUSH
11341: FOR_IN
11342: IFFALSE 11562
// begin if not i in hackTanks then
11344: LD_VAR 0 1
11348: PUSH
11349: LD_EXP 37
11353: IN
11354: NOT
11355: IFFALSE 11438
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11357: LD_ADDR_EXP 37
11361: PUSH
11362: LD_EXP 37
11366: PPUSH
11367: LD_EXP 37
11371: PUSH
11372: LD_INT 1
11374: PLUS
11375: PPUSH
11376: LD_VAR 0 1
11380: PPUSH
11381: CALL_OW 1
11385: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11386: LD_ADDR_EXP 38
11390: PUSH
11391: LD_EXP 38
11395: PPUSH
11396: LD_EXP 38
11400: PUSH
11401: LD_INT 1
11403: PLUS
11404: PPUSH
11405: EMPTY
11406: PPUSH
11407: CALL_OW 1
11411: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11412: LD_ADDR_EXP 41
11416: PUSH
11417: LD_EXP 41
11421: PPUSH
11422: LD_EXP 41
11426: PUSH
11427: LD_INT 1
11429: PLUS
11430: PPUSH
11431: EMPTY
11432: PPUSH
11433: CALL_OW 1
11437: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 302
11447: NOT
11448: IFFALSE 11461
// begin HackUnlinkAll ( i ) ;
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL 11567 0 1
// continue ;
11459: GO 11341
// end ; HackCheckCapturedStatus ( i ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL 12010 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11470: LD_ADDR_VAR 0 2
11474: PUSH
11475: LD_INT 81
11477: PUSH
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 255
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 33
11494: PUSH
11495: LD_INT 3
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 91
11504: PUSH
11505: LD_VAR 0 1
11509: PUSH
11510: LD_EXP 40
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 50
11522: PUSH
11523: EMPTY
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 69
11536: ST_TO_ADDR
// if not tmp then
11537: LD_VAR 0 2
11541: NOT
11542: IFFALSE 11546
// continue ;
11544: GO 11341
// HackLink ( i , tmp ) ;
11546: LD_VAR 0 1
11550: PPUSH
11551: LD_VAR 0 2
11555: PPUSH
11556: CALL 11703 0 2
// end ;
11560: GO 11341
11562: POP
11563: POP
// end ;
11564: PPOPN 2
11566: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
11571: PPUSH
// if not hack in hackTanks then
11572: LD_VAR 0 1
11576: PUSH
11577: LD_EXP 37
11581: IN
11582: NOT
11583: IFFALSE 11587
// exit ;
11585: GO 11698
// index := GetElementIndex ( hackTanks , hack ) ;
11587: LD_ADDR_VAR 0 4
11591: PUSH
11592: LD_EXP 37
11596: PPUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL 34959 0 2
11606: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11607: LD_EXP 38
11611: PUSH
11612: LD_VAR 0 4
11616: ARRAY
11617: IFFALSE 11698
// begin for i in hackTanksCaptured [ index ] do
11619: LD_ADDR_VAR 0 3
11623: PUSH
11624: LD_EXP 38
11628: PUSH
11629: LD_VAR 0 4
11633: ARRAY
11634: PUSH
11635: FOR_IN
11636: IFFALSE 11662
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11638: LD_VAR 0 3
11642: PUSH
11643: LD_INT 1
11645: ARRAY
11646: PPUSH
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 2
11654: ARRAY
11655: PPUSH
11656: CALL_OW 235
11660: GO 11635
11662: POP
11663: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11664: LD_ADDR_EXP 38
11668: PUSH
11669: LD_EXP 38
11673: PPUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: EMPTY
11680: PPUSH
11681: CALL_OW 1
11685: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11686: LD_VAR 0 1
11690: PPUSH
11691: LD_INT 0
11693: PPUSH
11694: CALL_OW 505
// end ; end ;
11698: LD_VAR 0 2
11702: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11703: LD_INT 0
11705: PPUSH
11706: PPUSH
11707: PPUSH
// if not hack in hackTanks or not vehicles then
11708: LD_VAR 0 1
11712: PUSH
11713: LD_EXP 37
11717: IN
11718: NOT
11719: PUSH
11720: LD_VAR 0 2
11724: NOT
11725: OR
11726: IFFALSE 11730
// exit ;
11728: GO 12005
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11730: LD_ADDR_VAR 0 2
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL 35609 0 4
11755: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11756: LD_ADDR_VAR 0 5
11760: PUSH
11761: LD_EXP 37
11765: PPUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: CALL 34959 0 2
11775: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11776: LD_EXP 38
11780: PUSH
11781: LD_VAR 0 5
11785: ARRAY
11786: PUSH
11787: LD_EXP 39
11791: LESS
11792: IFFALSE 11981
// begin for i := 1 to vehicles do
11794: LD_ADDR_VAR 0 4
11798: PUSH
11799: DOUBLE
11800: LD_INT 1
11802: DEC
11803: ST_TO_ADDR
11804: LD_VAR 0 2
11808: PUSH
11809: FOR_TO
11810: IFFALSE 11979
// begin if hackTanksCaptured [ index ] = hackLimit then
11812: LD_EXP 38
11816: PUSH
11817: LD_VAR 0 5
11821: ARRAY
11822: PUSH
11823: LD_EXP 39
11827: EQUAL
11828: IFFALSE 11832
// break ;
11830: GO 11979
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11832: LD_ADDR_EXP 41
11836: PUSH
11837: LD_EXP 41
11841: PPUSH
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_EXP 41
11851: PUSH
11852: LD_VAR 0 5
11856: ARRAY
11857: PUSH
11858: LD_INT 1
11860: PLUS
11861: PPUSH
11862: CALL_OW 1
11866: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11867: LD_ADDR_EXP 38
11871: PUSH
11872: LD_EXP 38
11876: PPUSH
11877: LD_VAR 0 5
11881: PUSH
11882: LD_EXP 38
11886: PUSH
11887: LD_VAR 0 5
11891: ARRAY
11892: PUSH
11893: LD_INT 1
11895: PLUS
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: LD_VAR 0 2
11905: PUSH
11906: LD_VAR 0 4
11910: ARRAY
11911: PUSH
11912: LD_VAR 0 2
11916: PUSH
11917: LD_VAR 0 4
11921: ARRAY
11922: PPUSH
11923: CALL_OW 255
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL 35174 0 3
11936: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11937: LD_VAR 0 2
11941: PUSH
11942: LD_VAR 0 4
11946: ARRAY
11947: PPUSH
11948: LD_VAR 0 1
11952: PPUSH
11953: CALL_OW 255
11957: PPUSH
11958: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
11962: LD_VAR 0 2
11966: PUSH
11967: LD_VAR 0 4
11971: ARRAY
11972: PPUSH
11973: CALL_OW 141
// end ;
11977: GO 11809
11979: POP
11980: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_EXP 38
11990: PUSH
11991: LD_VAR 0 5
11995: ARRAY
11996: PUSH
11997: LD_INT 0
11999: PLUS
12000: PPUSH
12001: CALL_OW 505
// end ;
12005: LD_VAR 0 3
12009: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
// if not hack in hackTanks then
12016: LD_VAR 0 1
12020: PUSH
12021: LD_EXP 37
12025: IN
12026: NOT
12027: IFFALSE 12031
// exit ;
12029: GO 12271
// index := GetElementIndex ( hackTanks , hack ) ;
12031: LD_ADDR_VAR 0 4
12035: PUSH
12036: LD_EXP 37
12040: PPUSH
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL 34959 0 2
12050: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: DOUBLE
12057: LD_EXP 38
12061: PUSH
12062: LD_VAR 0 4
12066: ARRAY
12067: INC
12068: ST_TO_ADDR
12069: LD_INT 1
12071: PUSH
12072: FOR_DOWNTO
12073: IFFALSE 12245
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12075: LD_ADDR_VAR 0 5
12079: PUSH
12080: LD_EXP 38
12084: PUSH
12085: LD_VAR 0 4
12089: ARRAY
12090: PUSH
12091: LD_VAR 0 3
12095: ARRAY
12096: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12097: LD_VAR 0 5
12101: PUSH
12102: LD_INT 1
12104: ARRAY
12105: PPUSH
12106: CALL_OW 302
12110: NOT
12111: PUSH
12112: LD_VAR 0 5
12116: PUSH
12117: LD_INT 1
12119: ARRAY
12120: PPUSH
12121: CALL_OW 255
12125: PUSH
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 255
12135: NONEQUAL
12136: OR
12137: IFFALSE 12243
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12139: LD_VAR 0 5
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: CALL_OW 305
12152: PUSH
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PPUSH
12162: CALL_OW 255
12166: PUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 255
12176: EQUAL
12177: AND
12178: IFFALSE 12202
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12180: LD_VAR 0 5
12184: PUSH
12185: LD_INT 1
12187: ARRAY
12188: PPUSH
12189: LD_VAR 0 5
12193: PUSH
12194: LD_INT 2
12196: ARRAY
12197: PPUSH
12198: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12202: LD_ADDR_EXP 38
12206: PUSH
12207: LD_EXP 38
12211: PPUSH
12212: LD_VAR 0 4
12216: PPUSH
12217: LD_EXP 38
12221: PUSH
12222: LD_VAR 0 4
12226: ARRAY
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: CALL_OW 3
12237: PPUSH
12238: CALL_OW 1
12242: ST_TO_ADDR
// end ; end ;
12243: GO 12072
12245: POP
12246: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12247: LD_VAR 0 1
12251: PPUSH
12252: LD_EXP 38
12256: PUSH
12257: LD_VAR 0 4
12261: ARRAY
12262: PUSH
12263: LD_INT 0
12265: PLUS
12266: PPUSH
12267: CALL_OW 505
// end ;
12271: LD_VAR 0 2
12275: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12276: LD_INT 0
12278: PPUSH
12279: PPUSH
12280: PPUSH
12281: PPUSH
// if not hack in hackTanks then
12282: LD_VAR 0 1
12286: PUSH
12287: LD_EXP 37
12291: IN
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 12382
// index := GetElementIndex ( hackTanks , hack ) ;
12297: LD_ADDR_VAR 0 5
12301: PUSH
12302: LD_EXP 37
12306: PPUSH
12307: LD_VAR 0 1
12311: PPUSH
12312: CALL 34959 0 2
12316: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12317: LD_ADDR_VAR 0 4
12321: PUSH
12322: DOUBLE
12323: LD_INT 1
12325: DEC
12326: ST_TO_ADDR
12327: LD_EXP 38
12331: PUSH
12332: LD_VAR 0 5
12336: ARRAY
12337: PUSH
12338: FOR_TO
12339: IFFALSE 12380
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12341: LD_EXP 38
12345: PUSH
12346: LD_VAR 0 5
12350: ARRAY
12351: PUSH
12352: LD_VAR 0 4
12356: ARRAY
12357: PUSH
12358: LD_INT 1
12360: ARRAY
12361: PUSH
12362: LD_VAR 0 2
12366: EQUAL
12367: IFFALSE 12378
// KillUnit ( vehicle ) ;
12369: LD_VAR 0 2
12373: PPUSH
12374: CALL_OW 66
12378: GO 12338
12380: POP
12381: POP
// end ;
12382: LD_VAR 0 3
12386: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12387: LD_EXP 42
12391: NOT
12392: IFFALSE 12427
12394: GO 12396
12396: DISABLE
// begin initMiner := true ;
12397: LD_ADDR_EXP 42
12401: PUSH
12402: LD_INT 1
12404: ST_TO_ADDR
// minersList := [ ] ;
12405: LD_ADDR_EXP 43
12409: PUSH
12410: EMPTY
12411: ST_TO_ADDR
// minerMinesList := [ ] ;
12412: LD_ADDR_EXP 44
12416: PUSH
12417: EMPTY
12418: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12419: LD_ADDR_EXP 45
12423: PUSH
12424: LD_INT 5
12426: ST_TO_ADDR
// end ;
12427: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12428: LD_EXP 42
12432: PUSH
12433: LD_INT 34
12435: PUSH
12436: LD_INT 81
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PPUSH
12443: CALL_OW 69
12447: AND
12448: IFFALSE 12909
12450: GO 12452
12452: DISABLE
12453: LD_INT 0
12455: PPUSH
12456: PPUSH
12457: PPUSH
12458: PPUSH
// begin enable ;
12459: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 34
12467: PUSH
12468: LD_INT 81
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PPUSH
12475: CALL_OW 69
12479: PUSH
12480: FOR_IN
12481: IFFALSE 12553
// begin if not i in minersList then
12483: LD_VAR 0 1
12487: PUSH
12488: LD_EXP 43
12492: IN
12493: NOT
12494: IFFALSE 12551
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12496: LD_ADDR_EXP 43
12500: PUSH
12501: LD_EXP 43
12505: PPUSH
12506: LD_EXP 43
12510: PUSH
12511: LD_INT 1
12513: PLUS
12514: PPUSH
12515: LD_VAR 0 1
12519: PPUSH
12520: CALL_OW 1
12524: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12525: LD_ADDR_EXP 44
12529: PUSH
12530: LD_EXP 44
12534: PPUSH
12535: LD_EXP 44
12539: PUSH
12540: LD_INT 1
12542: PLUS
12543: PPUSH
12544: EMPTY
12545: PPUSH
12546: CALL_OW 1
12550: ST_TO_ADDR
// end end ;
12551: GO 12480
12553: POP
12554: POP
// for i := minerMinesList downto 1 do
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: DOUBLE
12561: LD_EXP 44
12565: INC
12566: ST_TO_ADDR
12567: LD_INT 1
12569: PUSH
12570: FOR_DOWNTO
12571: IFFALSE 12907
// begin if IsLive ( minersList [ i ] ) then
12573: LD_EXP 43
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: CALL_OW 300
12588: IFFALSE 12616
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12590: LD_EXP 43
12594: PUSH
12595: LD_VAR 0 1
12599: ARRAY
12600: PPUSH
12601: LD_EXP 44
12605: PUSH
12606: LD_VAR 0 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 505
// if not minerMinesList [ i ] then
12616: LD_EXP 44
12620: PUSH
12621: LD_VAR 0 1
12625: ARRAY
12626: NOT
12627: IFFALSE 12631
// continue ;
12629: GO 12570
// for j := minerMinesList [ i ] downto 1 do
12631: LD_ADDR_VAR 0 2
12635: PUSH
12636: DOUBLE
12637: LD_EXP 44
12641: PUSH
12642: LD_VAR 0 1
12646: ARRAY
12647: INC
12648: ST_TO_ADDR
12649: LD_INT 1
12651: PUSH
12652: FOR_DOWNTO
12653: IFFALSE 12903
// begin side := GetSide ( minersList [ i ] ) ;
12655: LD_ADDR_VAR 0 3
12659: PUSH
12660: LD_EXP 43
12664: PUSH
12665: LD_VAR 0 1
12669: ARRAY
12670: PPUSH
12671: CALL_OW 255
12675: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: LD_EXP 44
12685: PUSH
12686: LD_VAR 0 1
12690: ARRAY
12691: PUSH
12692: LD_VAR 0 2
12696: ARRAY
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: LD_EXP 44
12706: PUSH
12707: LD_VAR 0 1
12711: ARRAY
12712: PUSH
12713: LD_VAR 0 2
12717: ARRAY
12718: PUSH
12719: LD_INT 2
12721: ARRAY
12722: PPUSH
12723: CALL_OW 428
12727: ST_TO_ADDR
// if not tmp then
12728: LD_VAR 0 4
12732: NOT
12733: IFFALSE 12737
// continue ;
12735: GO 12652
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12737: LD_VAR 0 4
12741: PUSH
12742: LD_INT 81
12744: PUSH
12745: LD_VAR 0 3
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: IN
12759: PUSH
12760: LD_EXP 44
12764: PUSH
12765: LD_VAR 0 1
12769: ARRAY
12770: PUSH
12771: LD_VAR 0 2
12775: ARRAY
12776: PUSH
12777: LD_INT 1
12779: ARRAY
12780: PPUSH
12781: LD_EXP 44
12785: PUSH
12786: LD_VAR 0 1
12790: ARRAY
12791: PUSH
12792: LD_VAR 0 2
12796: ARRAY
12797: PUSH
12798: LD_INT 2
12800: ARRAY
12801: PPUSH
12802: CALL_OW 458
12806: AND
12807: IFFALSE 12901
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12809: LD_EXP 44
12813: PUSH
12814: LD_VAR 0 1
12818: ARRAY
12819: PUSH
12820: LD_VAR 0 2
12824: ARRAY
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PPUSH
12830: LD_EXP 44
12834: PUSH
12835: LD_VAR 0 1
12839: ARRAY
12840: PUSH
12841: LD_VAR 0 2
12845: ARRAY
12846: PUSH
12847: LD_INT 2
12849: ARRAY
12850: PPUSH
12851: LD_VAR 0 3
12855: PPUSH
12856: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12860: LD_ADDR_EXP 44
12864: PUSH
12865: LD_EXP 44
12869: PPUSH
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_EXP 44
12879: PUSH
12880: LD_VAR 0 1
12884: ARRAY
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: CALL_OW 3
12895: PPUSH
12896: CALL_OW 1
12900: ST_TO_ADDR
// end ; end ;
12901: GO 12652
12903: POP
12904: POP
// end ;
12905: GO 12570
12907: POP
12908: POP
// end ;
12909: PPOPN 4
12911: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12912: LD_INT 0
12914: PPUSH
12915: PPUSH
// result := false ;
12916: LD_ADDR_VAR 0 4
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL_OW 264
12933: PUSH
12934: LD_INT 81
12936: EQUAL
12937: NOT
12938: IFFALSE 12942
// exit ;
12940: GO 13182
// index := GetElementIndex ( minersList , unit ) ;
12942: LD_ADDR_VAR 0 5
12946: PUSH
12947: LD_EXP 43
12951: PPUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL 34959 0 2
12961: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
12962: LD_EXP 44
12966: PUSH
12967: LD_VAR 0 5
12971: ARRAY
12972: PUSH
12973: LD_EXP 45
12977: GREATEREQUAL
12978: IFFALSE 12982
// exit ;
12980: GO 13182
// ComMoveXY ( unit , x , y ) ;
12982: LD_VAR 0 1
12986: PPUSH
12987: LD_VAR 0 2
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13001: LD_INT 35
13003: PPUSH
13004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13008: LD_VAR 0 1
13012: PPUSH
13013: LD_VAR 0 2
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: CALL 66700 0 3
13027: NOT
13028: PUSH
13029: LD_VAR 0 1
13033: PPUSH
13034: CALL_OW 314
13038: AND
13039: IFFALSE 13043
// exit ;
13041: GO 13182
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13043: LD_VAR 0 2
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: CALL_OW 428
13057: PUSH
13058: LD_VAR 0 1
13062: EQUAL
13063: PUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 314
13073: NOT
13074: AND
13075: IFFALSE 13001
// PlaySoundXY ( x , y , PlantMine ) ;
13077: LD_VAR 0 2
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_STRING PlantMine
13089: PPUSH
13090: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 255
13113: PPUSH
13114: LD_INT 0
13116: PPUSH
13117: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13121: LD_ADDR_EXP 44
13125: PUSH
13126: LD_EXP 44
13130: PPUSH
13131: LD_VAR 0 5
13135: PUSH
13136: LD_EXP 44
13140: PUSH
13141: LD_VAR 0 5
13145: ARRAY
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PPUSH
13155: LD_VAR 0 2
13159: PUSH
13160: LD_VAR 0 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL 35174 0 3
13173: ST_TO_ADDR
// result := true ;
13174: LD_ADDR_VAR 0 4
13178: PUSH
13179: LD_INT 1
13181: ST_TO_ADDR
// end ;
13182: LD_VAR 0 4
13186: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13187: LD_INT 0
13189: PPUSH
13190: PPUSH
13191: PPUSH
// if not unit in minersList then
13192: LD_VAR 0 1
13196: PUSH
13197: LD_EXP 43
13201: IN
13202: NOT
13203: IFFALSE 13207
// exit ;
13205: GO 13599
// index := GetElementIndex ( minersList , unit ) ;
13207: LD_ADDR_VAR 0 6
13211: PUSH
13212: LD_EXP 43
13216: PPUSH
13217: LD_VAR 0 1
13221: PPUSH
13222: CALL 34959 0 2
13226: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13227: LD_ADDR_VAR 0 5
13231: PUSH
13232: DOUBLE
13233: LD_EXP 44
13237: PUSH
13238: LD_VAR 0 6
13242: ARRAY
13243: INC
13244: ST_TO_ADDR
13245: LD_INT 1
13247: PUSH
13248: FOR_DOWNTO
13249: IFFALSE 13410
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13251: LD_EXP 44
13255: PUSH
13256: LD_VAR 0 6
13260: ARRAY
13261: PUSH
13262: LD_VAR 0 5
13266: ARRAY
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PUSH
13272: LD_VAR 0 2
13276: EQUAL
13277: PUSH
13278: LD_EXP 44
13282: PUSH
13283: LD_VAR 0 6
13287: ARRAY
13288: PUSH
13289: LD_VAR 0 5
13293: ARRAY
13294: PUSH
13295: LD_INT 2
13297: ARRAY
13298: PUSH
13299: LD_VAR 0 3
13303: EQUAL
13304: AND
13305: IFFALSE 13408
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13307: LD_EXP 44
13311: PUSH
13312: LD_VAR 0 6
13316: ARRAY
13317: PUSH
13318: LD_VAR 0 5
13322: ARRAY
13323: PUSH
13324: LD_INT 1
13326: ARRAY
13327: PPUSH
13328: LD_EXP 44
13332: PUSH
13333: LD_VAR 0 6
13337: ARRAY
13338: PUSH
13339: LD_VAR 0 5
13343: ARRAY
13344: PUSH
13345: LD_INT 2
13347: ARRAY
13348: PPUSH
13349: LD_VAR 0 1
13353: PPUSH
13354: CALL_OW 255
13358: PPUSH
13359: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13363: LD_ADDR_EXP 44
13367: PUSH
13368: LD_EXP 44
13372: PPUSH
13373: LD_VAR 0 6
13377: PPUSH
13378: LD_EXP 44
13382: PUSH
13383: LD_VAR 0 6
13387: ARRAY
13388: PPUSH
13389: LD_VAR 0 5
13393: PPUSH
13394: CALL_OW 3
13398: PPUSH
13399: CALL_OW 1
13403: ST_TO_ADDR
// exit ;
13404: POP
13405: POP
13406: GO 13599
// end ; end ;
13408: GO 13248
13410: POP
13411: POP
// for i := minerMinesList [ index ] downto 1 do
13412: LD_ADDR_VAR 0 5
13416: PUSH
13417: DOUBLE
13418: LD_EXP 44
13422: PUSH
13423: LD_VAR 0 6
13427: ARRAY
13428: INC
13429: ST_TO_ADDR
13430: LD_INT 1
13432: PUSH
13433: FOR_DOWNTO
13434: IFFALSE 13597
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13436: LD_EXP 44
13440: PUSH
13441: LD_VAR 0 6
13445: ARRAY
13446: PUSH
13447: LD_VAR 0 5
13451: ARRAY
13452: PUSH
13453: LD_INT 1
13455: ARRAY
13456: PPUSH
13457: LD_EXP 44
13461: PUSH
13462: LD_VAR 0 6
13466: ARRAY
13467: PUSH
13468: LD_VAR 0 5
13472: ARRAY
13473: PUSH
13474: LD_INT 2
13476: ARRAY
13477: PPUSH
13478: LD_VAR 0 2
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: CALL_OW 298
13492: PUSH
13493: LD_INT 6
13495: LESS
13496: IFFALSE 13595
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13498: LD_EXP 44
13502: PUSH
13503: LD_VAR 0 6
13507: ARRAY
13508: PUSH
13509: LD_VAR 0 5
13513: ARRAY
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: LD_EXP 44
13523: PUSH
13524: LD_VAR 0 6
13528: ARRAY
13529: PUSH
13530: LD_VAR 0 5
13534: ARRAY
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: PPUSH
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL_OW 255
13549: PPUSH
13550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13554: LD_ADDR_EXP 44
13558: PUSH
13559: LD_EXP 44
13563: PPUSH
13564: LD_VAR 0 6
13568: PPUSH
13569: LD_EXP 44
13573: PUSH
13574: LD_VAR 0 6
13578: ARRAY
13579: PPUSH
13580: LD_VAR 0 5
13584: PPUSH
13585: CALL_OW 3
13589: PPUSH
13590: CALL_OW 1
13594: ST_TO_ADDR
// end ; end ;
13595: GO 13433
13597: POP
13598: POP
// end ;
13599: LD_VAR 0 4
13603: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
13608: PPUSH
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 264
13624: PUSH
13625: LD_INT 81
13627: EQUAL
13628: NOT
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: LD_EXP 43
13639: IN
13640: NOT
13641: OR
13642: IFFALSE 13646
// exit ;
13644: GO 13968
// index := GetElementIndex ( minersList , unit ) ;
13646: LD_ADDR_VAR 0 6
13650: PUSH
13651: LD_EXP 43
13655: PPUSH
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL 34959 0 2
13665: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13666: LD_ADDR_VAR 0 8
13670: PUSH
13671: LD_EXP 45
13675: PUSH
13676: LD_EXP 44
13680: PUSH
13681: LD_VAR 0 6
13685: ARRAY
13686: MINUS
13687: ST_TO_ADDR
// if not minesFreeAmount then
13688: LD_VAR 0 8
13692: NOT
13693: IFFALSE 13697
// exit ;
13695: GO 13968
// tmp := [ ] ;
13697: LD_ADDR_VAR 0 7
13701: PUSH
13702: EMPTY
13703: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13704: LD_ADDR_VAR 0 5
13708: PUSH
13709: DOUBLE
13710: LD_INT 1
13712: DEC
13713: ST_TO_ADDR
13714: LD_VAR 0 8
13718: PUSH
13719: FOR_TO
13720: IFFALSE 13915
// begin _d := rand ( 0 , 5 ) ;
13722: LD_ADDR_VAR 0 11
13726: PUSH
13727: LD_INT 0
13729: PPUSH
13730: LD_INT 5
13732: PPUSH
13733: CALL_OW 12
13737: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13738: LD_ADDR_VAR 0 12
13742: PUSH
13743: LD_INT 2
13745: PPUSH
13746: LD_INT 6
13748: PPUSH
13749: CALL_OW 12
13753: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13754: LD_ADDR_VAR 0 9
13758: PUSH
13759: LD_VAR 0 2
13763: PPUSH
13764: LD_VAR 0 11
13768: PPUSH
13769: LD_VAR 0 12
13773: PPUSH
13774: CALL_OW 272
13778: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13779: LD_ADDR_VAR 0 10
13783: PUSH
13784: LD_VAR 0 3
13788: PPUSH
13789: LD_VAR 0 11
13793: PPUSH
13794: LD_VAR 0 12
13798: PPUSH
13799: CALL_OW 273
13803: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13804: LD_VAR 0 9
13808: PPUSH
13809: LD_VAR 0 10
13813: PPUSH
13814: CALL_OW 488
13818: PUSH
13819: LD_VAR 0 9
13823: PUSH
13824: LD_VAR 0 10
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_VAR 0 7
13837: IN
13838: NOT
13839: AND
13840: PUSH
13841: LD_VAR 0 9
13845: PPUSH
13846: LD_VAR 0 10
13850: PPUSH
13851: CALL_OW 458
13855: NOT
13856: AND
13857: IFFALSE 13899
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13859: LD_ADDR_VAR 0 7
13863: PUSH
13864: LD_VAR 0 7
13868: PPUSH
13869: LD_VAR 0 7
13873: PUSH
13874: LD_INT 1
13876: PLUS
13877: PPUSH
13878: LD_VAR 0 9
13882: PUSH
13883: LD_VAR 0 10
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 1
13896: ST_TO_ADDR
13897: GO 13913
// i := i - 1 ;
13899: LD_ADDR_VAR 0 5
13903: PUSH
13904: LD_VAR 0 5
13908: PUSH
13909: LD_INT 1
13911: MINUS
13912: ST_TO_ADDR
// end ;
13913: GO 13719
13915: POP
13916: POP
// for i in tmp do
13917: LD_ADDR_VAR 0 5
13921: PUSH
13922: LD_VAR 0 7
13926: PUSH
13927: FOR_IN
13928: IFFALSE 13966
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13930: LD_VAR 0 1
13934: PPUSH
13935: LD_VAR 0 5
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: PPUSH
13944: LD_VAR 0 5
13948: PUSH
13949: LD_INT 2
13951: ARRAY
13952: PPUSH
13953: CALL 12912 0 3
13957: NOT
13958: IFFALSE 13964
// exit ;
13960: POP
13961: POP
13962: GO 13968
13964: GO 13927
13966: POP
13967: POP
// end ;
13968: LD_VAR 0 4
13972: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
13973: LD_INT 0
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
// if not GetClass ( unit ) = class_sniper then
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 257
13991: PUSH
13992: LD_INT 5
13994: EQUAL
13995: NOT
13996: IFFALSE 14000
// exit ;
13998: GO 14388
// dist := 8 ;
14000: LD_ADDR_VAR 0 5
14004: PUSH
14005: LD_INT 8
14007: ST_TO_ADDR
// viewRange := 12 ;
14008: LD_ADDR_VAR 0 7
14012: PUSH
14013: LD_INT 12
14015: ST_TO_ADDR
// side := GetSide ( unit ) ;
14016: LD_ADDR_VAR 0 6
14020: PUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 255
14030: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14031: LD_INT 61
14033: PPUSH
14034: LD_VAR 0 6
14038: PPUSH
14039: CALL_OW 321
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: IFFALSE 14057
// viewRange := 16 ;
14049: LD_ADDR_VAR 0 7
14053: PUSH
14054: LD_INT 16
14056: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14057: LD_VAR 0 1
14061: PPUSH
14062: LD_VAR 0 2
14066: PPUSH
14067: LD_VAR 0 3
14071: PPUSH
14072: CALL_OW 297
14076: PUSH
14077: LD_VAR 0 5
14081: GREATER
14082: IFFALSE 14161
// begin ComMoveXY ( unit , x , y ) ;
14084: LD_VAR 0 1
14088: PPUSH
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14103: LD_INT 35
14105: PPUSH
14106: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_VAR 0 2
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: CALL 66700 0 3
14129: NOT
14130: IFFALSE 14134
// exit ;
14132: GO 14388
// until GetDistUnitXY ( unit , x , y ) < dist ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_VAR 0 2
14143: PPUSH
14144: LD_VAR 0 3
14148: PPUSH
14149: CALL_OW 297
14153: PUSH
14154: LD_VAR 0 5
14158: LESS
14159: IFFALSE 14103
// end ; ComTurnXY ( unit , x , y ) ;
14161: LD_VAR 0 1
14165: PPUSH
14166: LD_VAR 0 2
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 118
// wait ( 5 ) ;
14180: LD_INT 5
14182: PPUSH
14183: CALL_OW 67
// _d := GetDir ( unit ) ;
14187: LD_ADDR_VAR 0 10
14191: PUSH
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 254
14201: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 250
14216: PPUSH
14217: LD_VAR 0 10
14221: PPUSH
14222: LD_VAR 0 5
14226: PPUSH
14227: CALL_OW 272
14231: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14232: LD_ADDR_VAR 0 9
14236: PUSH
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 251
14246: PPUSH
14247: LD_VAR 0 10
14251: PPUSH
14252: LD_VAR 0 5
14256: PPUSH
14257: CALL_OW 273
14261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14262: LD_VAR 0 8
14266: PPUSH
14267: LD_VAR 0 9
14271: PPUSH
14272: CALL_OW 488
14276: NOT
14277: IFFALSE 14281
// exit ;
14279: GO 14388
// ComAnimCustom ( unit , 1 ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14293: LD_VAR 0 8
14297: PPUSH
14298: LD_VAR 0 9
14302: PPUSH
14303: LD_VAR 0 6
14307: PPUSH
14308: LD_VAR 0 7
14312: PPUSH
14313: CALL_OW 330
// repeat wait ( 1 ) ;
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 316
14333: PUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 314
14343: OR
14344: PUSH
14345: LD_VAR 0 1
14349: PPUSH
14350: CALL_OW 302
14354: NOT
14355: OR
14356: PUSH
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 301
14366: OR
14367: IFFALSE 14317
// RemoveSeeing ( _x , _y , side ) ;
14369: LD_VAR 0 8
14373: PPUSH
14374: LD_VAR 0 9
14378: PPUSH
14379: LD_VAR 0 6
14383: PPUSH
14384: CALL_OW 331
// end ; end_of_file
14388: LD_VAR 0 4
14392: RET
// export globalGameSaveCounter ; every 0 0$1 do
14393: GO 14395
14395: DISABLE
// begin enable ;
14396: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14397: LD_STRING updateTimer(
14399: PUSH
14400: LD_OWVAR 1
14404: STR
14405: PUSH
14406: LD_STRING );
14408: STR
14409: PPUSH
14410: CALL_OW 559
// end ;
14414: END
// every 0 0$1 do
14415: GO 14417
14417: DISABLE
// begin globalGameSaveCounter := 0 ;
14418: LD_ADDR_EXP 46
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14426: LD_STRING setGameSaveCounter(0)
14428: PPUSH
14429: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14433: LD_STRING initStreamRollete();
14435: PPUSH
14436: CALL_OW 559
// InitStreamMode ;
14440: CALL 15783 0 0
// DefineStreamItems ( false ) ;
14444: LD_INT 0
14446: PPUSH
14447: CALL 16247 0 1
// end ;
14451: END
// export function SOS_MapStart ( ) ; begin
14452: LD_INT 0
14454: PPUSH
// if streamModeActive then
14455: LD_EXP 47
14459: IFFALSE 14468
// DefineStreamItems ( true ) ;
14461: LD_INT 1
14463: PPUSH
14464: CALL 16247 0 1
// UpdateLuaVariables ( ) ;
14468: CALL 14485 0 0
// UpdateFactoryWaypoints ( ) ;
14472: CALL 29116 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14476: CALL 29373 0 0
// end ;
14480: LD_VAR 0 1
14484: RET
// function UpdateLuaVariables ( ) ; begin
14485: LD_INT 0
14487: PPUSH
// if globalGameSaveCounter then
14488: LD_EXP 46
14492: IFFALSE 14526
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14494: LD_ADDR_EXP 46
14498: PUSH
14499: LD_EXP 46
14503: PPUSH
14504: CALL 69264 0 1
14508: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14509: LD_STRING setGameSaveCounter(
14511: PUSH
14512: LD_EXP 46
14516: STR
14517: PUSH
14518: LD_STRING )
14520: STR
14521: PPUSH
14522: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14526: LD_STRING setGameDifficulty(
14528: PUSH
14529: LD_OWVAR 67
14533: STR
14534: PUSH
14535: LD_STRING )
14537: STR
14538: PPUSH
14539: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
14543: LD_STRING displayDifficulty(
14545: PUSH
14546: LD_OWVAR 67
14550: STR
14551: PUSH
14552: LD_STRING )
14554: STR
14555: PPUSH
14556: CALL_OW 559
// end ;
14560: LD_VAR 0 1
14564: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14565: LD_INT 0
14567: PPUSH
// if p2 = stream_mode then
14568: LD_VAR 0 2
14572: PUSH
14573: LD_INT 100
14575: EQUAL
14576: IFFALSE 15579
// begin if not StreamModeActive then
14578: LD_EXP 47
14582: NOT
14583: IFFALSE 14593
// StreamModeActive := true ;
14585: LD_ADDR_EXP 47
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// if p3 = 0 then
14593: LD_VAR 0 3
14597: PUSH
14598: LD_INT 0
14600: EQUAL
14601: IFFALSE 14607
// InitStreamMode ;
14603: CALL 15783 0 0
// if p3 = 1 then
14607: LD_VAR 0 3
14611: PUSH
14612: LD_INT 1
14614: EQUAL
14615: IFFALSE 14625
// sRocket := true ;
14617: LD_ADDR_EXP 52
14621: PUSH
14622: LD_INT 1
14624: ST_TO_ADDR
// if p3 = 2 then
14625: LD_VAR 0 3
14629: PUSH
14630: LD_INT 2
14632: EQUAL
14633: IFFALSE 14643
// sSpeed := true ;
14635: LD_ADDR_EXP 51
14639: PUSH
14640: LD_INT 1
14642: ST_TO_ADDR
// if p3 = 3 then
14643: LD_VAR 0 3
14647: PUSH
14648: LD_INT 3
14650: EQUAL
14651: IFFALSE 14661
// sEngine := true ;
14653: LD_ADDR_EXP 53
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
// if p3 = 4 then
14661: LD_VAR 0 3
14665: PUSH
14666: LD_INT 4
14668: EQUAL
14669: IFFALSE 14679
// sSpec := true ;
14671: LD_ADDR_EXP 50
14675: PUSH
14676: LD_INT 1
14678: ST_TO_ADDR
// if p3 = 5 then
14679: LD_VAR 0 3
14683: PUSH
14684: LD_INT 5
14686: EQUAL
14687: IFFALSE 14697
// sLevel := true ;
14689: LD_ADDR_EXP 54
14693: PUSH
14694: LD_INT 1
14696: ST_TO_ADDR
// if p3 = 6 then
14697: LD_VAR 0 3
14701: PUSH
14702: LD_INT 6
14704: EQUAL
14705: IFFALSE 14715
// sArmoury := true ;
14707: LD_ADDR_EXP 55
14711: PUSH
14712: LD_INT 1
14714: ST_TO_ADDR
// if p3 = 7 then
14715: LD_VAR 0 3
14719: PUSH
14720: LD_INT 7
14722: EQUAL
14723: IFFALSE 14733
// sRadar := true ;
14725: LD_ADDR_EXP 56
14729: PUSH
14730: LD_INT 1
14732: ST_TO_ADDR
// if p3 = 8 then
14733: LD_VAR 0 3
14737: PUSH
14738: LD_INT 8
14740: EQUAL
14741: IFFALSE 14751
// sBunker := true ;
14743: LD_ADDR_EXP 57
14747: PUSH
14748: LD_INT 1
14750: ST_TO_ADDR
// if p3 = 9 then
14751: LD_VAR 0 3
14755: PUSH
14756: LD_INT 9
14758: EQUAL
14759: IFFALSE 14769
// sHack := true ;
14761: LD_ADDR_EXP 58
14765: PUSH
14766: LD_INT 1
14768: ST_TO_ADDR
// if p3 = 10 then
14769: LD_VAR 0 3
14773: PUSH
14774: LD_INT 10
14776: EQUAL
14777: IFFALSE 14787
// sFire := true ;
14779: LD_ADDR_EXP 59
14783: PUSH
14784: LD_INT 1
14786: ST_TO_ADDR
// if p3 = 11 then
14787: LD_VAR 0 3
14791: PUSH
14792: LD_INT 11
14794: EQUAL
14795: IFFALSE 14805
// sRefresh := true ;
14797: LD_ADDR_EXP 60
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// if p3 = 12 then
14805: LD_VAR 0 3
14809: PUSH
14810: LD_INT 12
14812: EQUAL
14813: IFFALSE 14823
// sExp := true ;
14815: LD_ADDR_EXP 61
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// if p3 = 13 then
14823: LD_VAR 0 3
14827: PUSH
14828: LD_INT 13
14830: EQUAL
14831: IFFALSE 14841
// sDepot := true ;
14833: LD_ADDR_EXP 62
14837: PUSH
14838: LD_INT 1
14840: ST_TO_ADDR
// if p3 = 14 then
14841: LD_VAR 0 3
14845: PUSH
14846: LD_INT 14
14848: EQUAL
14849: IFFALSE 14859
// sFlag := true ;
14851: LD_ADDR_EXP 63
14855: PUSH
14856: LD_INT 1
14858: ST_TO_ADDR
// if p3 = 15 then
14859: LD_VAR 0 3
14863: PUSH
14864: LD_INT 15
14866: EQUAL
14867: IFFALSE 14877
// sKamikadze := true ;
14869: LD_ADDR_EXP 71
14873: PUSH
14874: LD_INT 1
14876: ST_TO_ADDR
// if p3 = 16 then
14877: LD_VAR 0 3
14881: PUSH
14882: LD_INT 16
14884: EQUAL
14885: IFFALSE 14895
// sTroll := true ;
14887: LD_ADDR_EXP 72
14891: PUSH
14892: LD_INT 1
14894: ST_TO_ADDR
// if p3 = 17 then
14895: LD_VAR 0 3
14899: PUSH
14900: LD_INT 17
14902: EQUAL
14903: IFFALSE 14913
// sSlow := true ;
14905: LD_ADDR_EXP 73
14909: PUSH
14910: LD_INT 1
14912: ST_TO_ADDR
// if p3 = 18 then
14913: LD_VAR 0 3
14917: PUSH
14918: LD_INT 18
14920: EQUAL
14921: IFFALSE 14931
// sLack := true ;
14923: LD_ADDR_EXP 74
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if p3 = 19 then
14931: LD_VAR 0 3
14935: PUSH
14936: LD_INT 19
14938: EQUAL
14939: IFFALSE 14949
// sTank := true ;
14941: LD_ADDR_EXP 76
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// if p3 = 20 then
14949: LD_VAR 0 3
14953: PUSH
14954: LD_INT 20
14956: EQUAL
14957: IFFALSE 14967
// sRemote := true ;
14959: LD_ADDR_EXP 77
14963: PUSH
14964: LD_INT 1
14966: ST_TO_ADDR
// if p3 = 21 then
14967: LD_VAR 0 3
14971: PUSH
14972: LD_INT 21
14974: EQUAL
14975: IFFALSE 14985
// sPowell := true ;
14977: LD_ADDR_EXP 78
14981: PUSH
14982: LD_INT 1
14984: ST_TO_ADDR
// if p3 = 22 then
14985: LD_VAR 0 3
14989: PUSH
14990: LD_INT 22
14992: EQUAL
14993: IFFALSE 15003
// sTeleport := true ;
14995: LD_ADDR_EXP 81
14999: PUSH
15000: LD_INT 1
15002: ST_TO_ADDR
// if p3 = 23 then
15003: LD_VAR 0 3
15007: PUSH
15008: LD_INT 23
15010: EQUAL
15011: IFFALSE 15021
// sOilTower := true ;
15013: LD_ADDR_EXP 83
15017: PUSH
15018: LD_INT 1
15020: ST_TO_ADDR
// if p3 = 24 then
15021: LD_VAR 0 3
15025: PUSH
15026: LD_INT 24
15028: EQUAL
15029: IFFALSE 15039
// sShovel := true ;
15031: LD_ADDR_EXP 84
15035: PUSH
15036: LD_INT 1
15038: ST_TO_ADDR
// if p3 = 25 then
15039: LD_VAR 0 3
15043: PUSH
15044: LD_INT 25
15046: EQUAL
15047: IFFALSE 15057
// sSheik := true ;
15049: LD_ADDR_EXP 85
15053: PUSH
15054: LD_INT 1
15056: ST_TO_ADDR
// if p3 = 26 then
15057: LD_VAR 0 3
15061: PUSH
15062: LD_INT 26
15064: EQUAL
15065: IFFALSE 15075
// sEarthquake := true ;
15067: LD_ADDR_EXP 87
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// if p3 = 27 then
15075: LD_VAR 0 3
15079: PUSH
15080: LD_INT 27
15082: EQUAL
15083: IFFALSE 15093
// sAI := true ;
15085: LD_ADDR_EXP 88
15089: PUSH
15090: LD_INT 1
15092: ST_TO_ADDR
// if p3 = 28 then
15093: LD_VAR 0 3
15097: PUSH
15098: LD_INT 28
15100: EQUAL
15101: IFFALSE 15111
// sCargo := true ;
15103: LD_ADDR_EXP 91
15107: PUSH
15108: LD_INT 1
15110: ST_TO_ADDR
// if p3 = 29 then
15111: LD_VAR 0 3
15115: PUSH
15116: LD_INT 29
15118: EQUAL
15119: IFFALSE 15129
// sDLaser := true ;
15121: LD_ADDR_EXP 92
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// if p3 = 30 then
15129: LD_VAR 0 3
15133: PUSH
15134: LD_INT 30
15136: EQUAL
15137: IFFALSE 15147
// sExchange := true ;
15139: LD_ADDR_EXP 93
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// if p3 = 31 then
15147: LD_VAR 0 3
15151: PUSH
15152: LD_INT 31
15154: EQUAL
15155: IFFALSE 15165
// sFac := true ;
15157: LD_ADDR_EXP 94
15161: PUSH
15162: LD_INT 1
15164: ST_TO_ADDR
// if p3 = 32 then
15165: LD_VAR 0 3
15169: PUSH
15170: LD_INT 32
15172: EQUAL
15173: IFFALSE 15183
// sPower := true ;
15175: LD_ADDR_EXP 95
15179: PUSH
15180: LD_INT 1
15182: ST_TO_ADDR
// if p3 = 33 then
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 33
15190: EQUAL
15191: IFFALSE 15201
// sRandom := true ;
15193: LD_ADDR_EXP 96
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// if p3 = 34 then
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 34
15208: EQUAL
15209: IFFALSE 15219
// sShield := true ;
15211: LD_ADDR_EXP 97
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// if p3 = 35 then
15219: LD_VAR 0 3
15223: PUSH
15224: LD_INT 35
15226: EQUAL
15227: IFFALSE 15237
// sTime := true ;
15229: LD_ADDR_EXP 98
15233: PUSH
15234: LD_INT 1
15236: ST_TO_ADDR
// if p3 = 36 then
15237: LD_VAR 0 3
15241: PUSH
15242: LD_INT 36
15244: EQUAL
15245: IFFALSE 15255
// sTools := true ;
15247: LD_ADDR_EXP 99
15251: PUSH
15252: LD_INT 1
15254: ST_TO_ADDR
// if p3 = 101 then
15255: LD_VAR 0 3
15259: PUSH
15260: LD_INT 101
15262: EQUAL
15263: IFFALSE 15273
// sSold := true ;
15265: LD_ADDR_EXP 64
15269: PUSH
15270: LD_INT 1
15272: ST_TO_ADDR
// if p3 = 102 then
15273: LD_VAR 0 3
15277: PUSH
15278: LD_INT 102
15280: EQUAL
15281: IFFALSE 15291
// sDiff := true ;
15283: LD_ADDR_EXP 65
15287: PUSH
15288: LD_INT 1
15290: ST_TO_ADDR
// if p3 = 103 then
15291: LD_VAR 0 3
15295: PUSH
15296: LD_INT 103
15298: EQUAL
15299: IFFALSE 15309
// sFog := true ;
15301: LD_ADDR_EXP 68
15305: PUSH
15306: LD_INT 1
15308: ST_TO_ADDR
// if p3 = 104 then
15309: LD_VAR 0 3
15313: PUSH
15314: LD_INT 104
15316: EQUAL
15317: IFFALSE 15327
// sReset := true ;
15319: LD_ADDR_EXP 69
15323: PUSH
15324: LD_INT 1
15326: ST_TO_ADDR
// if p3 = 105 then
15327: LD_VAR 0 3
15331: PUSH
15332: LD_INT 105
15334: EQUAL
15335: IFFALSE 15345
// sSun := true ;
15337: LD_ADDR_EXP 70
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// if p3 = 106 then
15345: LD_VAR 0 3
15349: PUSH
15350: LD_INT 106
15352: EQUAL
15353: IFFALSE 15363
// sTiger := true ;
15355: LD_ADDR_EXP 66
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if p3 = 107 then
15363: LD_VAR 0 3
15367: PUSH
15368: LD_INT 107
15370: EQUAL
15371: IFFALSE 15381
// sBomb := true ;
15373: LD_ADDR_EXP 67
15377: PUSH
15378: LD_INT 1
15380: ST_TO_ADDR
// if p3 = 108 then
15381: LD_VAR 0 3
15385: PUSH
15386: LD_INT 108
15388: EQUAL
15389: IFFALSE 15399
// sWound := true ;
15391: LD_ADDR_EXP 75
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// if p3 = 109 then
15399: LD_VAR 0 3
15403: PUSH
15404: LD_INT 109
15406: EQUAL
15407: IFFALSE 15417
// sBetray := true ;
15409: LD_ADDR_EXP 79
15413: PUSH
15414: LD_INT 1
15416: ST_TO_ADDR
// if p3 = 110 then
15417: LD_VAR 0 3
15421: PUSH
15422: LD_INT 110
15424: EQUAL
15425: IFFALSE 15435
// sContamin := true ;
15427: LD_ADDR_EXP 80
15431: PUSH
15432: LD_INT 1
15434: ST_TO_ADDR
// if p3 = 111 then
15435: LD_VAR 0 3
15439: PUSH
15440: LD_INT 111
15442: EQUAL
15443: IFFALSE 15453
// sOil := true ;
15445: LD_ADDR_EXP 82
15449: PUSH
15450: LD_INT 1
15452: ST_TO_ADDR
// if p3 = 112 then
15453: LD_VAR 0 3
15457: PUSH
15458: LD_INT 112
15460: EQUAL
15461: IFFALSE 15471
// sStu := true ;
15463: LD_ADDR_EXP 86
15467: PUSH
15468: LD_INT 1
15470: ST_TO_ADDR
// if p3 = 113 then
15471: LD_VAR 0 3
15475: PUSH
15476: LD_INT 113
15478: EQUAL
15479: IFFALSE 15489
// sBazooka := true ;
15481: LD_ADDR_EXP 89
15485: PUSH
15486: LD_INT 1
15488: ST_TO_ADDR
// if p3 = 114 then
15489: LD_VAR 0 3
15493: PUSH
15494: LD_INT 114
15496: EQUAL
15497: IFFALSE 15507
// sMortar := true ;
15499: LD_ADDR_EXP 90
15503: PUSH
15504: LD_INT 1
15506: ST_TO_ADDR
// if p3 = 115 then
15507: LD_VAR 0 3
15511: PUSH
15512: LD_INT 115
15514: EQUAL
15515: IFFALSE 15525
// sRanger := true ;
15517: LD_ADDR_EXP 100
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// if p3 = 116 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_INT 116
15532: EQUAL
15533: IFFALSE 15543
// sComputer := true ;
15535: LD_ADDR_EXP 101
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// if p3 = 117 then
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 117
15550: EQUAL
15551: IFFALSE 15561
// s30 := true ;
15553: LD_ADDR_EXP 102
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// if p3 = 118 then
15561: LD_VAR 0 3
15565: PUSH
15566: LD_INT 118
15568: EQUAL
15569: IFFALSE 15579
// s60 := true ;
15571: LD_ADDR_EXP 103
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// end ; if p2 = hack_mode then
15579: LD_VAR 0 2
15583: PUSH
15584: LD_INT 101
15586: EQUAL
15587: IFFALSE 15715
// begin case p3 of 1 :
15589: LD_VAR 0 3
15593: PUSH
15594: LD_INT 1
15596: DOUBLE
15597: EQUAL
15598: IFTRUE 15602
15600: GO 15609
15602: POP
// hHackUnlimitedResources ; 2 :
15603: CALL 27862 0 0
15607: GO 15715
15609: LD_INT 2
15611: DOUBLE
15612: EQUAL
15613: IFTRUE 15617
15615: GO 15624
15617: POP
// hHackSetLevel10 ; 3 :
15618: CALL 27995 0 0
15622: GO 15715
15624: LD_INT 3
15626: DOUBLE
15627: EQUAL
15628: IFTRUE 15632
15630: GO 15639
15632: POP
// hHackSetLevel10YourUnits ; 4 :
15633: CALL 28080 0 0
15637: GO 15715
15639: LD_INT 4
15641: DOUBLE
15642: EQUAL
15643: IFTRUE 15647
15645: GO 15654
15647: POP
// hHackInvincible ; 5 :
15648: CALL 28528 0 0
15652: GO 15715
15654: LD_INT 5
15656: DOUBLE
15657: EQUAL
15658: IFTRUE 15662
15660: GO 15669
15662: POP
// hHackInvisible ; 6 :
15663: CALL 28639 0 0
15667: GO 15715
15669: LD_INT 6
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15684
15677: POP
// hHackChangeYourSide ; 7 :
15678: CALL 28696 0 0
15682: GO 15715
15684: LD_INT 7
15686: DOUBLE
15687: EQUAL
15688: IFTRUE 15692
15690: GO 15699
15692: POP
// hHackChangeUnitSide ; 8 :
15693: CALL 28738 0 0
15697: GO 15715
15699: LD_INT 8
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 15714
15707: POP
// hHackFog ; end ;
15708: CALL 28839 0 0
15712: GO 15715
15714: POP
// end ; if p2 = game_save_mode then
15715: LD_VAR 0 2
15719: PUSH
15720: LD_INT 102
15722: EQUAL
15723: IFFALSE 15778
// begin if p3 = 1 then
15725: LD_VAR 0 3
15729: PUSH
15730: LD_INT 1
15732: EQUAL
15733: IFFALSE 15745
// globalGameSaveCounter := p4 ;
15735: LD_ADDR_EXP 46
15739: PUSH
15740: LD_VAR 0 4
15744: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 2
15752: EQUAL
15753: PUSH
15754: LD_EXP 46
15758: AND
15759: IFFALSE 15778
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15761: LD_STRING setGameSaveCounter(
15763: PUSH
15764: LD_EXP 46
15768: STR
15769: PUSH
15770: LD_STRING )
15772: STR
15773: PPUSH
15774: CALL_OW 559
// end ; end ;
15778: LD_VAR 0 7
15782: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
15783: LD_INT 0
15785: PPUSH
// streamModeActive := false ;
15786: LD_ADDR_EXP 47
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// normalCounter := 36 ;
15794: LD_ADDR_EXP 48
15798: PUSH
15799: LD_INT 36
15801: ST_TO_ADDR
// hardcoreCounter := 18 ;
15802: LD_ADDR_EXP 49
15806: PUSH
15807: LD_INT 18
15809: ST_TO_ADDR
// sRocket := false ;
15810: LD_ADDR_EXP 52
15814: PUSH
15815: LD_INT 0
15817: ST_TO_ADDR
// sSpeed := false ;
15818: LD_ADDR_EXP 51
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// sEngine := false ;
15826: LD_ADDR_EXP 53
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// sSpec := false ;
15834: LD_ADDR_EXP 50
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// sLevel := false ;
15842: LD_ADDR_EXP 54
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// sArmoury := false ;
15850: LD_ADDR_EXP 55
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// sRadar := false ;
15858: LD_ADDR_EXP 56
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// sBunker := false ;
15866: LD_ADDR_EXP 57
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// sHack := false ;
15874: LD_ADDR_EXP 58
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// sFire := false ;
15882: LD_ADDR_EXP 59
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// sRefresh := false ;
15890: LD_ADDR_EXP 60
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// sExp := false ;
15898: LD_ADDR_EXP 61
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sDepot := false ;
15906: LD_ADDR_EXP 62
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sFlag := false ;
15914: LD_ADDR_EXP 63
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sKamikadze := false ;
15922: LD_ADDR_EXP 71
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sTroll := false ;
15930: LD_ADDR_EXP 72
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sSlow := false ;
15938: LD_ADDR_EXP 73
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sLack := false ;
15946: LD_ADDR_EXP 74
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sTank := false ;
15954: LD_ADDR_EXP 76
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sRemote := false ;
15962: LD_ADDR_EXP 77
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// sPowell := false ;
15970: LD_ADDR_EXP 78
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// sTeleport := false ;
15978: LD_ADDR_EXP 81
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// sOilTower := false ;
15986: LD_ADDR_EXP 83
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// sShovel := false ;
15994: LD_ADDR_EXP 84
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// sSheik := false ;
16002: LD_ADDR_EXP 85
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// sEarthquake := false ;
16010: LD_ADDR_EXP 87
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// sAI := false ;
16018: LD_ADDR_EXP 88
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// sCargo := false ;
16026: LD_ADDR_EXP 91
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// sDLaser := false ;
16034: LD_ADDR_EXP 92
16038: PUSH
16039: LD_INT 0
16041: ST_TO_ADDR
// sExchange := false ;
16042: LD_ADDR_EXP 93
16046: PUSH
16047: LD_INT 0
16049: ST_TO_ADDR
// sFac := false ;
16050: LD_ADDR_EXP 94
16054: PUSH
16055: LD_INT 0
16057: ST_TO_ADDR
// sPower := false ;
16058: LD_ADDR_EXP 95
16062: PUSH
16063: LD_INT 0
16065: ST_TO_ADDR
// sRandom := false ;
16066: LD_ADDR_EXP 96
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// sShield := false ;
16074: LD_ADDR_EXP 97
16078: PUSH
16079: LD_INT 0
16081: ST_TO_ADDR
// sTime := false ;
16082: LD_ADDR_EXP 98
16086: PUSH
16087: LD_INT 0
16089: ST_TO_ADDR
// sTools := false ;
16090: LD_ADDR_EXP 99
16094: PUSH
16095: LD_INT 0
16097: ST_TO_ADDR
// sSold := false ;
16098: LD_ADDR_EXP 64
16102: PUSH
16103: LD_INT 0
16105: ST_TO_ADDR
// sDiff := false ;
16106: LD_ADDR_EXP 65
16110: PUSH
16111: LD_INT 0
16113: ST_TO_ADDR
// sFog := false ;
16114: LD_ADDR_EXP 68
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// sReset := false ;
16122: LD_ADDR_EXP 69
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
// sSun := false ;
16130: LD_ADDR_EXP 70
16134: PUSH
16135: LD_INT 0
16137: ST_TO_ADDR
// sTiger := false ;
16138: LD_ADDR_EXP 66
16142: PUSH
16143: LD_INT 0
16145: ST_TO_ADDR
// sBomb := false ;
16146: LD_ADDR_EXP 67
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
// sWound := false ;
16154: LD_ADDR_EXP 75
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// sBetray := false ;
16162: LD_ADDR_EXP 79
16166: PUSH
16167: LD_INT 0
16169: ST_TO_ADDR
// sContamin := false ;
16170: LD_ADDR_EXP 80
16174: PUSH
16175: LD_INT 0
16177: ST_TO_ADDR
// sOil := false ;
16178: LD_ADDR_EXP 82
16182: PUSH
16183: LD_INT 0
16185: ST_TO_ADDR
// sStu := false ;
16186: LD_ADDR_EXP 86
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// sBazooka := false ;
16194: LD_ADDR_EXP 89
16198: PUSH
16199: LD_INT 0
16201: ST_TO_ADDR
// sMortar := false ;
16202: LD_ADDR_EXP 90
16206: PUSH
16207: LD_INT 0
16209: ST_TO_ADDR
// sRanger := false ;
16210: LD_ADDR_EXP 100
16214: PUSH
16215: LD_INT 0
16217: ST_TO_ADDR
// sComputer := false ;
16218: LD_ADDR_EXP 101
16222: PUSH
16223: LD_INT 0
16225: ST_TO_ADDR
// s30 := false ;
16226: LD_ADDR_EXP 102
16230: PUSH
16231: LD_INT 0
16233: ST_TO_ADDR
// s60 := false ;
16234: LD_ADDR_EXP 103
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
// end ;
16242: LD_VAR 0 1
16246: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
// result := [ ] ;
16256: LD_ADDR_VAR 0 2
16260: PUSH
16261: EMPTY
16262: ST_TO_ADDR
// if campaign_id = 1 then
16263: LD_OWVAR 69
16267: PUSH
16268: LD_INT 1
16270: EQUAL
16271: IFFALSE 19437
// begin case mission_number of 1 :
16273: LD_OWVAR 70
16277: PUSH
16278: LD_INT 1
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16362
16286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: LD_INT 4
16297: PUSH
16298: LD_INT 11
16300: PUSH
16301: LD_INT 12
16303: PUSH
16304: LD_INT 15
16306: PUSH
16307: LD_INT 16
16309: PUSH
16310: LD_INT 22
16312: PUSH
16313: LD_INT 23
16315: PUSH
16316: LD_INT 26
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 101
16332: PUSH
16333: LD_INT 102
16335: PUSH
16336: LD_INT 106
16338: PUSH
16339: LD_INT 116
16341: PUSH
16342: LD_INT 117
16344: PUSH
16345: LD_INT 118
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: ST_TO_ADDR
16360: GO 19435
16362: LD_INT 2
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16454
16370: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16371: LD_ADDR_VAR 0 2
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: LD_INT 11
16384: PUSH
16385: LD_INT 12
16387: PUSH
16388: LD_INT 15
16390: PUSH
16391: LD_INT 16
16393: PUSH
16394: LD_INT 22
16396: PUSH
16397: LD_INT 23
16399: PUSH
16400: LD_INT 26
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 101
16416: PUSH
16417: LD_INT 102
16419: PUSH
16420: LD_INT 105
16422: PUSH
16423: LD_INT 106
16425: PUSH
16426: LD_INT 108
16428: PUSH
16429: LD_INT 116
16431: PUSH
16432: LD_INT 117
16434: PUSH
16435: LD_INT 118
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: ST_TO_ADDR
16452: GO 19435
16454: LD_INT 3
16456: DOUBLE
16457: EQUAL
16458: IFTRUE 16462
16460: GO 16550
16462: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: LD_INT 4
16473: PUSH
16474: LD_INT 5
16476: PUSH
16477: LD_INT 11
16479: PUSH
16480: LD_INT 12
16482: PUSH
16483: LD_INT 15
16485: PUSH
16486: LD_INT 16
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_INT 26
16494: PUSH
16495: LD_INT 36
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 101
16512: PUSH
16513: LD_INT 102
16515: PUSH
16516: LD_INT 105
16518: PUSH
16519: LD_INT 106
16521: PUSH
16522: LD_INT 108
16524: PUSH
16525: LD_INT 116
16527: PUSH
16528: LD_INT 117
16530: PUSH
16531: LD_INT 118
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: ST_TO_ADDR
16548: GO 19435
16550: LD_INT 4
16552: DOUBLE
16553: EQUAL
16554: IFTRUE 16558
16556: GO 16654
16558: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: LD_INT 4
16569: PUSH
16570: LD_INT 5
16572: PUSH
16573: LD_INT 8
16575: PUSH
16576: LD_INT 11
16578: PUSH
16579: LD_INT 12
16581: PUSH
16582: LD_INT 15
16584: PUSH
16585: LD_INT 16
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_INT 23
16593: PUSH
16594: LD_INT 26
16596: PUSH
16597: LD_INT 36
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 101
16616: PUSH
16617: LD_INT 102
16619: PUSH
16620: LD_INT 105
16622: PUSH
16623: LD_INT 106
16625: PUSH
16626: LD_INT 108
16628: PUSH
16629: LD_INT 116
16631: PUSH
16632: LD_INT 117
16634: PUSH
16635: LD_INT 118
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: ST_TO_ADDR
16652: GO 19435
16654: LD_INT 5
16656: DOUBLE
16657: EQUAL
16658: IFTRUE 16662
16660: GO 16774
16662: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16663: LD_ADDR_VAR 0 2
16667: PUSH
16668: LD_INT 2
16670: PUSH
16671: LD_INT 4
16673: PUSH
16674: LD_INT 5
16676: PUSH
16677: LD_INT 6
16679: PUSH
16680: LD_INT 8
16682: PUSH
16683: LD_INT 11
16685: PUSH
16686: LD_INT 12
16688: PUSH
16689: LD_INT 15
16691: PUSH
16692: LD_INT 16
16694: PUSH
16695: LD_INT 22
16697: PUSH
16698: LD_INT 23
16700: PUSH
16701: LD_INT 25
16703: PUSH
16704: LD_INT 26
16706: PUSH
16707: LD_INT 36
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 101
16728: PUSH
16729: LD_INT 102
16731: PUSH
16732: LD_INT 105
16734: PUSH
16735: LD_INT 106
16737: PUSH
16738: LD_INT 108
16740: PUSH
16741: LD_INT 109
16743: PUSH
16744: LD_INT 112
16746: PUSH
16747: LD_INT 116
16749: PUSH
16750: LD_INT 117
16752: PUSH
16753: LD_INT 118
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: ST_TO_ADDR
16772: GO 19435
16774: LD_INT 6
16776: DOUBLE
16777: EQUAL
16778: IFTRUE 16782
16780: GO 16914
16782: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 4
16793: PUSH
16794: LD_INT 5
16796: PUSH
16797: LD_INT 6
16799: PUSH
16800: LD_INT 8
16802: PUSH
16803: LD_INT 11
16805: PUSH
16806: LD_INT 12
16808: PUSH
16809: LD_INT 15
16811: PUSH
16812: LD_INT 16
16814: PUSH
16815: LD_INT 20
16817: PUSH
16818: LD_INT 21
16820: PUSH
16821: LD_INT 22
16823: PUSH
16824: LD_INT 23
16826: PUSH
16827: LD_INT 25
16829: PUSH
16830: LD_INT 26
16832: PUSH
16833: LD_INT 30
16835: PUSH
16836: LD_INT 31
16838: PUSH
16839: LD_INT 32
16841: PUSH
16842: LD_INT 36
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 101
16868: PUSH
16869: LD_INT 102
16871: PUSH
16872: LD_INT 105
16874: PUSH
16875: LD_INT 106
16877: PUSH
16878: LD_INT 108
16880: PUSH
16881: LD_INT 109
16883: PUSH
16884: LD_INT 112
16886: PUSH
16887: LD_INT 116
16889: PUSH
16890: LD_INT 117
16892: PUSH
16893: LD_INT 118
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: ST_TO_ADDR
16912: GO 19435
16914: LD_INT 7
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 17034
16922: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 4
16933: PUSH
16934: LD_INT 5
16936: PUSH
16937: LD_INT 7
16939: PUSH
16940: LD_INT 11
16942: PUSH
16943: LD_INT 12
16945: PUSH
16946: LD_INT 15
16948: PUSH
16949: LD_INT 16
16951: PUSH
16952: LD_INT 20
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_INT 23
16963: PUSH
16964: LD_INT 25
16966: PUSH
16967: LD_INT 26
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 101
16988: PUSH
16989: LD_INT 102
16991: PUSH
16992: LD_INT 103
16994: PUSH
16995: LD_INT 105
16997: PUSH
16998: LD_INT 106
17000: PUSH
17001: LD_INT 108
17003: PUSH
17004: LD_INT 112
17006: PUSH
17007: LD_INT 116
17009: PUSH
17010: LD_INT 117
17012: PUSH
17013: LD_INT 118
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: ST_TO_ADDR
17032: GO 19435
17034: LD_INT 8
17036: DOUBLE
17037: EQUAL
17038: IFTRUE 17042
17040: GO 17182
17042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 4
17053: PUSH
17054: LD_INT 5
17056: PUSH
17057: LD_INT 6
17059: PUSH
17060: LD_INT 7
17062: PUSH
17063: LD_INT 8
17065: PUSH
17066: LD_INT 11
17068: PUSH
17069: LD_INT 12
17071: PUSH
17072: LD_INT 15
17074: PUSH
17075: LD_INT 16
17077: PUSH
17078: LD_INT 20
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 23
17089: PUSH
17090: LD_INT 25
17092: PUSH
17093: LD_INT 26
17095: PUSH
17096: LD_INT 30
17098: PUSH
17099: LD_INT 31
17101: PUSH
17102: LD_INT 32
17104: PUSH
17105: LD_INT 36
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 101
17132: PUSH
17133: LD_INT 102
17135: PUSH
17136: LD_INT 103
17138: PUSH
17139: LD_INT 105
17141: PUSH
17142: LD_INT 106
17144: PUSH
17145: LD_INT 108
17147: PUSH
17148: LD_INT 109
17150: PUSH
17151: LD_INT 112
17153: PUSH
17154: LD_INT 116
17156: PUSH
17157: LD_INT 117
17159: PUSH
17160: LD_INT 118
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: ST_TO_ADDR
17180: GO 19435
17182: LD_INT 9
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17338
17190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 4
17201: PUSH
17202: LD_INT 5
17204: PUSH
17205: LD_INT 6
17207: PUSH
17208: LD_INT 7
17210: PUSH
17211: LD_INT 8
17213: PUSH
17214: LD_INT 11
17216: PUSH
17217: LD_INT 12
17219: PUSH
17220: LD_INT 15
17222: PUSH
17223: LD_INT 16
17225: PUSH
17226: LD_INT 20
17228: PUSH
17229: LD_INT 21
17231: PUSH
17232: LD_INT 22
17234: PUSH
17235: LD_INT 23
17237: PUSH
17238: LD_INT 25
17240: PUSH
17241: LD_INT 26
17243: PUSH
17244: LD_INT 28
17246: PUSH
17247: LD_INT 30
17249: PUSH
17250: LD_INT 31
17252: PUSH
17253: LD_INT 32
17255: PUSH
17256: LD_INT 36
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 101
17284: PUSH
17285: LD_INT 102
17287: PUSH
17288: LD_INT 103
17290: PUSH
17291: LD_INT 105
17293: PUSH
17294: LD_INT 106
17296: PUSH
17297: LD_INT 108
17299: PUSH
17300: LD_INT 109
17302: PUSH
17303: LD_INT 112
17305: PUSH
17306: LD_INT 114
17308: PUSH
17309: LD_INT 116
17311: PUSH
17312: LD_INT 117
17314: PUSH
17315: LD_INT 118
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: ST_TO_ADDR
17336: GO 19435
17338: LD_INT 10
17340: DOUBLE
17341: EQUAL
17342: IFTRUE 17346
17344: GO 17542
17346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: LD_INT 4
17357: PUSH
17358: LD_INT 5
17360: PUSH
17361: LD_INT 6
17363: PUSH
17364: LD_INT 7
17366: PUSH
17367: LD_INT 8
17369: PUSH
17370: LD_INT 9
17372: PUSH
17373: LD_INT 10
17375: PUSH
17376: LD_INT 11
17378: PUSH
17379: LD_INT 12
17381: PUSH
17382: LD_INT 13
17384: PUSH
17385: LD_INT 14
17387: PUSH
17388: LD_INT 15
17390: PUSH
17391: LD_INT 16
17393: PUSH
17394: LD_INT 17
17396: PUSH
17397: LD_INT 18
17399: PUSH
17400: LD_INT 19
17402: PUSH
17403: LD_INT 20
17405: PUSH
17406: LD_INT 21
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_INT 23
17414: PUSH
17415: LD_INT 24
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 26
17423: PUSH
17424: LD_INT 28
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 31
17432: PUSH
17433: LD_INT 32
17435: PUSH
17436: LD_INT 36
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 101
17472: PUSH
17473: LD_INT 102
17475: PUSH
17476: LD_INT 103
17478: PUSH
17479: LD_INT 104
17481: PUSH
17482: LD_INT 105
17484: PUSH
17485: LD_INT 106
17487: PUSH
17488: LD_INT 107
17490: PUSH
17491: LD_INT 108
17493: PUSH
17494: LD_INT 109
17496: PUSH
17497: LD_INT 110
17499: PUSH
17500: LD_INT 111
17502: PUSH
17503: LD_INT 112
17505: PUSH
17506: LD_INT 114
17508: PUSH
17509: LD_INT 116
17511: PUSH
17512: LD_INT 117
17514: PUSH
17515: LD_INT 118
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: ST_TO_ADDR
17540: GO 19435
17542: LD_INT 11
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 17754
17550: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 4
17564: PUSH
17565: LD_INT 5
17567: PUSH
17568: LD_INT 6
17570: PUSH
17571: LD_INT 7
17573: PUSH
17574: LD_INT 8
17576: PUSH
17577: LD_INT 9
17579: PUSH
17580: LD_INT 10
17582: PUSH
17583: LD_INT 11
17585: PUSH
17586: LD_INT 12
17588: PUSH
17589: LD_INT 13
17591: PUSH
17592: LD_INT 14
17594: PUSH
17595: LD_INT 15
17597: PUSH
17598: LD_INT 16
17600: PUSH
17601: LD_INT 17
17603: PUSH
17604: LD_INT 18
17606: PUSH
17607: LD_INT 19
17609: PUSH
17610: LD_INT 20
17612: PUSH
17613: LD_INT 21
17615: PUSH
17616: LD_INT 22
17618: PUSH
17619: LD_INT 23
17621: PUSH
17622: LD_INT 24
17624: PUSH
17625: LD_INT 25
17627: PUSH
17628: LD_INT 26
17630: PUSH
17631: LD_INT 28
17633: PUSH
17634: LD_INT 30
17636: PUSH
17637: LD_INT 31
17639: PUSH
17640: LD_INT 32
17642: PUSH
17643: LD_INT 34
17645: PUSH
17646: LD_INT 36
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 101
17684: PUSH
17685: LD_INT 102
17687: PUSH
17688: LD_INT 103
17690: PUSH
17691: LD_INT 104
17693: PUSH
17694: LD_INT 105
17696: PUSH
17697: LD_INT 106
17699: PUSH
17700: LD_INT 107
17702: PUSH
17703: LD_INT 108
17705: PUSH
17706: LD_INT 109
17708: PUSH
17709: LD_INT 110
17711: PUSH
17712: LD_INT 111
17714: PUSH
17715: LD_INT 112
17717: PUSH
17718: LD_INT 114
17720: PUSH
17721: LD_INT 116
17723: PUSH
17724: LD_INT 117
17726: PUSH
17727: LD_INT 118
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: ST_TO_ADDR
17752: GO 19435
17754: LD_INT 12
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17982
17762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17763: LD_ADDR_VAR 0 2
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 3
17776: PUSH
17777: LD_INT 4
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: LD_INT 6
17785: PUSH
17786: LD_INT 7
17788: PUSH
17789: LD_INT 8
17791: PUSH
17792: LD_INT 9
17794: PUSH
17795: LD_INT 10
17797: PUSH
17798: LD_INT 11
17800: PUSH
17801: LD_INT 12
17803: PUSH
17804: LD_INT 13
17806: PUSH
17807: LD_INT 14
17809: PUSH
17810: LD_INT 15
17812: PUSH
17813: LD_INT 16
17815: PUSH
17816: LD_INT 17
17818: PUSH
17819: LD_INT 18
17821: PUSH
17822: LD_INT 19
17824: PUSH
17825: LD_INT 20
17827: PUSH
17828: LD_INT 21
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_INT 23
17836: PUSH
17837: LD_INT 24
17839: PUSH
17840: LD_INT 25
17842: PUSH
17843: LD_INT 26
17845: PUSH
17846: LD_INT 27
17848: PUSH
17849: LD_INT 28
17851: PUSH
17852: LD_INT 30
17854: PUSH
17855: LD_INT 31
17857: PUSH
17858: LD_INT 32
17860: PUSH
17861: LD_INT 33
17863: PUSH
17864: LD_INT 34
17866: PUSH
17867: LD_INT 36
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 101
17908: PUSH
17909: LD_INT 102
17911: PUSH
17912: LD_INT 103
17914: PUSH
17915: LD_INT 104
17917: PUSH
17918: LD_INT 105
17920: PUSH
17921: LD_INT 106
17923: PUSH
17924: LD_INT 107
17926: PUSH
17927: LD_INT 108
17929: PUSH
17930: LD_INT 109
17932: PUSH
17933: LD_INT 110
17935: PUSH
17936: LD_INT 111
17938: PUSH
17939: LD_INT 112
17941: PUSH
17942: LD_INT 113
17944: PUSH
17945: LD_INT 114
17947: PUSH
17948: LD_INT 116
17950: PUSH
17951: LD_INT 117
17953: PUSH
17954: LD_INT 118
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: ST_TO_ADDR
17980: GO 19435
17982: LD_INT 13
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 18198
17990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17991: LD_ADDR_VAR 0 2
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: LD_INT 3
18004: PUSH
18005: LD_INT 4
18007: PUSH
18008: LD_INT 5
18010: PUSH
18011: LD_INT 8
18013: PUSH
18014: LD_INT 9
18016: PUSH
18017: LD_INT 10
18019: PUSH
18020: LD_INT 11
18022: PUSH
18023: LD_INT 12
18025: PUSH
18026: LD_INT 14
18028: PUSH
18029: LD_INT 15
18031: PUSH
18032: LD_INT 16
18034: PUSH
18035: LD_INT 17
18037: PUSH
18038: LD_INT 18
18040: PUSH
18041: LD_INT 19
18043: PUSH
18044: LD_INT 20
18046: PUSH
18047: LD_INT 21
18049: PUSH
18050: LD_INT 22
18052: PUSH
18053: LD_INT 23
18055: PUSH
18056: LD_INT 24
18058: PUSH
18059: LD_INT 25
18061: PUSH
18062: LD_INT 26
18064: PUSH
18065: LD_INT 27
18067: PUSH
18068: LD_INT 28
18070: PUSH
18071: LD_INT 30
18073: PUSH
18074: LD_INT 31
18076: PUSH
18077: LD_INT 32
18079: PUSH
18080: LD_INT 33
18082: PUSH
18083: LD_INT 34
18085: PUSH
18086: LD_INT 36
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 101
18124: PUSH
18125: LD_INT 102
18127: PUSH
18128: LD_INT 103
18130: PUSH
18131: LD_INT 104
18133: PUSH
18134: LD_INT 105
18136: PUSH
18137: LD_INT 106
18139: PUSH
18140: LD_INT 107
18142: PUSH
18143: LD_INT 108
18145: PUSH
18146: LD_INT 109
18148: PUSH
18149: LD_INT 110
18151: PUSH
18152: LD_INT 111
18154: PUSH
18155: LD_INT 112
18157: PUSH
18158: LD_INT 113
18160: PUSH
18161: LD_INT 114
18163: PUSH
18164: LD_INT 116
18166: PUSH
18167: LD_INT 117
18169: PUSH
18170: LD_INT 118
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: ST_TO_ADDR
18196: GO 19435
18198: LD_INT 14
18200: DOUBLE
18201: EQUAL
18202: IFTRUE 18206
18204: GO 18430
18206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18207: LD_ADDR_VAR 0 2
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: LD_INT 3
18220: PUSH
18221: LD_INT 4
18223: PUSH
18224: LD_INT 5
18226: PUSH
18227: LD_INT 6
18229: PUSH
18230: LD_INT 7
18232: PUSH
18233: LD_INT 8
18235: PUSH
18236: LD_INT 9
18238: PUSH
18239: LD_INT 10
18241: PUSH
18242: LD_INT 11
18244: PUSH
18245: LD_INT 12
18247: PUSH
18248: LD_INT 13
18250: PUSH
18251: LD_INT 14
18253: PUSH
18254: LD_INT 15
18256: PUSH
18257: LD_INT 16
18259: PUSH
18260: LD_INT 17
18262: PUSH
18263: LD_INT 18
18265: PUSH
18266: LD_INT 19
18268: PUSH
18269: LD_INT 20
18271: PUSH
18272: LD_INT 21
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_INT 23
18280: PUSH
18281: LD_INT 24
18283: PUSH
18284: LD_INT 25
18286: PUSH
18287: LD_INT 26
18289: PUSH
18290: LD_INT 27
18292: PUSH
18293: LD_INT 28
18295: PUSH
18296: LD_INT 29
18298: PUSH
18299: LD_INT 30
18301: PUSH
18302: LD_INT 31
18304: PUSH
18305: LD_INT 32
18307: PUSH
18308: LD_INT 33
18310: PUSH
18311: LD_INT 34
18313: PUSH
18314: LD_INT 36
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 101
18356: PUSH
18357: LD_INT 102
18359: PUSH
18360: LD_INT 103
18362: PUSH
18363: LD_INT 104
18365: PUSH
18366: LD_INT 105
18368: PUSH
18369: LD_INT 106
18371: PUSH
18372: LD_INT 107
18374: PUSH
18375: LD_INT 108
18377: PUSH
18378: LD_INT 109
18380: PUSH
18381: LD_INT 110
18383: PUSH
18384: LD_INT 111
18386: PUSH
18387: LD_INT 112
18389: PUSH
18390: LD_INT 113
18392: PUSH
18393: LD_INT 114
18395: PUSH
18396: LD_INT 116
18398: PUSH
18399: LD_INT 117
18401: PUSH
18402: LD_INT 118
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: ST_TO_ADDR
18428: GO 19435
18430: LD_INT 15
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18662
18438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18439: LD_ADDR_VAR 0 2
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: LD_INT 4
18455: PUSH
18456: LD_INT 5
18458: PUSH
18459: LD_INT 6
18461: PUSH
18462: LD_INT 7
18464: PUSH
18465: LD_INT 8
18467: PUSH
18468: LD_INT 9
18470: PUSH
18471: LD_INT 10
18473: PUSH
18474: LD_INT 11
18476: PUSH
18477: LD_INT 12
18479: PUSH
18480: LD_INT 13
18482: PUSH
18483: LD_INT 14
18485: PUSH
18486: LD_INT 15
18488: PUSH
18489: LD_INT 16
18491: PUSH
18492: LD_INT 17
18494: PUSH
18495: LD_INT 18
18497: PUSH
18498: LD_INT 19
18500: PUSH
18501: LD_INT 20
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_INT 23
18512: PUSH
18513: LD_INT 24
18515: PUSH
18516: LD_INT 25
18518: PUSH
18519: LD_INT 26
18521: PUSH
18522: LD_INT 27
18524: PUSH
18525: LD_INT 28
18527: PUSH
18528: LD_INT 29
18530: PUSH
18531: LD_INT 30
18533: PUSH
18534: LD_INT 31
18536: PUSH
18537: LD_INT 32
18539: PUSH
18540: LD_INT 33
18542: PUSH
18543: LD_INT 34
18545: PUSH
18546: LD_INT 36
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 101
18588: PUSH
18589: LD_INT 102
18591: PUSH
18592: LD_INT 103
18594: PUSH
18595: LD_INT 104
18597: PUSH
18598: LD_INT 105
18600: PUSH
18601: LD_INT 106
18603: PUSH
18604: LD_INT 107
18606: PUSH
18607: LD_INT 108
18609: PUSH
18610: LD_INT 109
18612: PUSH
18613: LD_INT 110
18615: PUSH
18616: LD_INT 111
18618: PUSH
18619: LD_INT 112
18621: PUSH
18622: LD_INT 113
18624: PUSH
18625: LD_INT 114
18627: PUSH
18628: LD_INT 116
18630: PUSH
18631: LD_INT 117
18633: PUSH
18634: LD_INT 118
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: ST_TO_ADDR
18660: GO 19435
18662: LD_INT 16
18664: DOUBLE
18665: EQUAL
18666: IFTRUE 18670
18668: GO 18806
18670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18671: LD_ADDR_VAR 0 2
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 4
18681: PUSH
18682: LD_INT 5
18684: PUSH
18685: LD_INT 7
18687: PUSH
18688: LD_INT 11
18690: PUSH
18691: LD_INT 12
18693: PUSH
18694: LD_INT 15
18696: PUSH
18697: LD_INT 16
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 23
18711: PUSH
18712: LD_INT 25
18714: PUSH
18715: LD_INT 26
18717: PUSH
18718: LD_INT 30
18720: PUSH
18721: LD_INT 31
18723: PUSH
18724: LD_INT 32
18726: PUSH
18727: LD_INT 33
18729: PUSH
18730: LD_INT 34
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 101
18756: PUSH
18757: LD_INT 102
18759: PUSH
18760: LD_INT 103
18762: PUSH
18763: LD_INT 106
18765: PUSH
18766: LD_INT 108
18768: PUSH
18769: LD_INT 112
18771: PUSH
18772: LD_INT 113
18774: PUSH
18775: LD_INT 114
18777: PUSH
18778: LD_INT 116
18780: PUSH
18781: LD_INT 117
18783: PUSH
18784: LD_INT 118
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: ST_TO_ADDR
18804: GO 19435
18806: LD_INT 17
18808: DOUBLE
18809: EQUAL
18810: IFTRUE 18814
18812: GO 19038
18814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: LD_INT 5
18834: PUSH
18835: LD_INT 6
18837: PUSH
18838: LD_INT 7
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 9
18846: PUSH
18847: LD_INT 10
18849: PUSH
18850: LD_INT 11
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: LD_INT 13
18858: PUSH
18859: LD_INT 14
18861: PUSH
18862: LD_INT 15
18864: PUSH
18865: LD_INT 16
18867: PUSH
18868: LD_INT 17
18870: PUSH
18871: LD_INT 18
18873: PUSH
18874: LD_INT 19
18876: PUSH
18877: LD_INT 20
18879: PUSH
18880: LD_INT 21
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_INT 23
18888: PUSH
18889: LD_INT 24
18891: PUSH
18892: LD_INT 25
18894: PUSH
18895: LD_INT 26
18897: PUSH
18898: LD_INT 27
18900: PUSH
18901: LD_INT 28
18903: PUSH
18904: LD_INT 29
18906: PUSH
18907: LD_INT 30
18909: PUSH
18910: LD_INT 31
18912: PUSH
18913: LD_INT 32
18915: PUSH
18916: LD_INT 33
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 36
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 101
18964: PUSH
18965: LD_INT 102
18967: PUSH
18968: LD_INT 103
18970: PUSH
18971: LD_INT 104
18973: PUSH
18974: LD_INT 105
18976: PUSH
18977: LD_INT 106
18979: PUSH
18980: LD_INT 107
18982: PUSH
18983: LD_INT 108
18985: PUSH
18986: LD_INT 109
18988: PUSH
18989: LD_INT 110
18991: PUSH
18992: LD_INT 111
18994: PUSH
18995: LD_INT 112
18997: PUSH
18998: LD_INT 113
19000: PUSH
19001: LD_INT 114
19003: PUSH
19004: LD_INT 116
19006: PUSH
19007: LD_INT 117
19009: PUSH
19010: LD_INT 118
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: ST_TO_ADDR
19036: GO 19435
19038: LD_INT 18
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19194
19046: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19047: LD_ADDR_VAR 0 2
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 4
19057: PUSH
19058: LD_INT 5
19060: PUSH
19061: LD_INT 7
19063: PUSH
19064: LD_INT 11
19066: PUSH
19067: LD_INT 12
19069: PUSH
19070: LD_INT 15
19072: PUSH
19073: LD_INT 16
19075: PUSH
19076: LD_INT 20
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_INT 23
19087: PUSH
19088: LD_INT 25
19090: PUSH
19091: LD_INT 26
19093: PUSH
19094: LD_INT 30
19096: PUSH
19097: LD_INT 31
19099: PUSH
19100: LD_INT 32
19102: PUSH
19103: LD_INT 33
19105: PUSH
19106: LD_INT 34
19108: PUSH
19109: LD_INT 35
19111: PUSH
19112: LD_INT 36
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 101
19140: PUSH
19141: LD_INT 102
19143: PUSH
19144: LD_INT 103
19146: PUSH
19147: LD_INT 106
19149: PUSH
19150: LD_INT 108
19152: PUSH
19153: LD_INT 112
19155: PUSH
19156: LD_INT 113
19158: PUSH
19159: LD_INT 114
19161: PUSH
19162: LD_INT 115
19164: PUSH
19165: LD_INT 116
19167: PUSH
19168: LD_INT 117
19170: PUSH
19171: LD_INT 118
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: ST_TO_ADDR
19192: GO 19435
19194: LD_INT 19
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19434
19202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 3
19216: PUSH
19217: LD_INT 4
19219: PUSH
19220: LD_INT 5
19222: PUSH
19223: LD_INT 6
19225: PUSH
19226: LD_INT 7
19228: PUSH
19229: LD_INT 8
19231: PUSH
19232: LD_INT 9
19234: PUSH
19235: LD_INT 10
19237: PUSH
19238: LD_INT 11
19240: PUSH
19241: LD_INT 12
19243: PUSH
19244: LD_INT 13
19246: PUSH
19247: LD_INT 14
19249: PUSH
19250: LD_INT 15
19252: PUSH
19253: LD_INT 16
19255: PUSH
19256: LD_INT 17
19258: PUSH
19259: LD_INT 18
19261: PUSH
19262: LD_INT 19
19264: PUSH
19265: LD_INT 20
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 22
19273: PUSH
19274: LD_INT 23
19276: PUSH
19277: LD_INT 24
19279: PUSH
19280: LD_INT 25
19282: PUSH
19283: LD_INT 26
19285: PUSH
19286: LD_INT 27
19288: PUSH
19289: LD_INT 28
19291: PUSH
19292: LD_INT 29
19294: PUSH
19295: LD_INT 30
19297: PUSH
19298: LD_INT 31
19300: PUSH
19301: LD_INT 32
19303: PUSH
19304: LD_INT 33
19306: PUSH
19307: LD_INT 34
19309: PUSH
19310: LD_INT 35
19312: PUSH
19313: LD_INT 36
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 101
19356: PUSH
19357: LD_INT 102
19359: PUSH
19360: LD_INT 103
19362: PUSH
19363: LD_INT 104
19365: PUSH
19366: LD_INT 105
19368: PUSH
19369: LD_INT 106
19371: PUSH
19372: LD_INT 107
19374: PUSH
19375: LD_INT 108
19377: PUSH
19378: LD_INT 109
19380: PUSH
19381: LD_INT 110
19383: PUSH
19384: LD_INT 111
19386: PUSH
19387: LD_INT 112
19389: PUSH
19390: LD_INT 113
19392: PUSH
19393: LD_INT 114
19395: PUSH
19396: LD_INT 115
19398: PUSH
19399: LD_INT 116
19401: PUSH
19402: LD_INT 117
19404: PUSH
19405: LD_INT 118
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 19435
19434: POP
// end else
19435: GO 19666
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19437: LD_ADDR_VAR 0 2
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 3
19450: PUSH
19451: LD_INT 4
19453: PUSH
19454: LD_INT 5
19456: PUSH
19457: LD_INT 6
19459: PUSH
19460: LD_INT 7
19462: PUSH
19463: LD_INT 8
19465: PUSH
19466: LD_INT 9
19468: PUSH
19469: LD_INT 10
19471: PUSH
19472: LD_INT 11
19474: PUSH
19475: LD_INT 12
19477: PUSH
19478: LD_INT 13
19480: PUSH
19481: LD_INT 14
19483: PUSH
19484: LD_INT 15
19486: PUSH
19487: LD_INT 16
19489: PUSH
19490: LD_INT 17
19492: PUSH
19493: LD_INT 18
19495: PUSH
19496: LD_INT 19
19498: PUSH
19499: LD_INT 20
19501: PUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_INT 23
19510: PUSH
19511: LD_INT 24
19513: PUSH
19514: LD_INT 25
19516: PUSH
19517: LD_INT 26
19519: PUSH
19520: LD_INT 27
19522: PUSH
19523: LD_INT 28
19525: PUSH
19526: LD_INT 29
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: LD_INT 31
19534: PUSH
19535: LD_INT 32
19537: PUSH
19538: LD_INT 33
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 35
19546: PUSH
19547: LD_INT 36
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 103
19596: PUSH
19597: LD_INT 104
19599: PUSH
19600: LD_INT 105
19602: PUSH
19603: LD_INT 106
19605: PUSH
19606: LD_INT 107
19608: PUSH
19609: LD_INT 108
19611: PUSH
19612: LD_INT 109
19614: PUSH
19615: LD_INT 110
19617: PUSH
19618: LD_INT 111
19620: PUSH
19621: LD_INT 112
19623: PUSH
19624: LD_INT 113
19626: PUSH
19627: LD_INT 114
19629: PUSH
19630: LD_INT 115
19632: PUSH
19633: LD_INT 116
19635: PUSH
19636: LD_INT 117
19638: PUSH
19639: LD_INT 118
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: ST_TO_ADDR
// if result then
19666: LD_VAR 0 2
19670: IFFALSE 20456
// begin normal :=  ;
19672: LD_ADDR_VAR 0 5
19676: PUSH
19677: LD_STRING 
19679: ST_TO_ADDR
// hardcore :=  ;
19680: LD_ADDR_VAR 0 6
19684: PUSH
19685: LD_STRING 
19687: ST_TO_ADDR
// active :=  ;
19688: LD_ADDR_VAR 0 7
19692: PUSH
19693: LD_STRING 
19695: ST_TO_ADDR
// for i = 1 to normalCounter do
19696: LD_ADDR_VAR 0 8
19700: PUSH
19701: DOUBLE
19702: LD_INT 1
19704: DEC
19705: ST_TO_ADDR
19706: LD_EXP 48
19710: PUSH
19711: FOR_TO
19712: IFFALSE 19813
// begin tmp := 0 ;
19714: LD_ADDR_VAR 0 3
19718: PUSH
19719: LD_STRING 0
19721: ST_TO_ADDR
// if result [ 1 ] then
19722: LD_VAR 0 2
19726: PUSH
19727: LD_INT 1
19729: ARRAY
19730: IFFALSE 19795
// if result [ 1 ] [ 1 ] = i then
19732: LD_VAR 0 2
19736: PUSH
19737: LD_INT 1
19739: ARRAY
19740: PUSH
19741: LD_INT 1
19743: ARRAY
19744: PUSH
19745: LD_VAR 0 8
19749: EQUAL
19750: IFFALSE 19795
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19752: LD_ADDR_VAR 0 2
19756: PUSH
19757: LD_VAR 0 2
19761: PPUSH
19762: LD_INT 1
19764: PPUSH
19765: LD_VAR 0 2
19769: PUSH
19770: LD_INT 1
19772: ARRAY
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: CALL_OW 3
19781: PPUSH
19782: CALL_OW 1
19786: ST_TO_ADDR
// tmp := 1 ;
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: LD_STRING 1
19794: ST_TO_ADDR
// end ; normal := normal & tmp ;
19795: LD_ADDR_VAR 0 5
19799: PUSH
19800: LD_VAR 0 5
19804: PUSH
19805: LD_VAR 0 3
19809: STR
19810: ST_TO_ADDR
// end ;
19811: GO 19711
19813: POP
19814: POP
// for i = 1 to hardcoreCounter do
19815: LD_ADDR_VAR 0 8
19819: PUSH
19820: DOUBLE
19821: LD_INT 1
19823: DEC
19824: ST_TO_ADDR
19825: LD_EXP 49
19829: PUSH
19830: FOR_TO
19831: IFFALSE 19936
// begin tmp := 0 ;
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_STRING 0
19840: ST_TO_ADDR
// if result [ 2 ] then
19841: LD_VAR 0 2
19845: PUSH
19846: LD_INT 2
19848: ARRAY
19849: IFFALSE 19918
// if result [ 2 ] [ 1 ] = 100 + i then
19851: LD_VAR 0 2
19855: PUSH
19856: LD_INT 2
19858: ARRAY
19859: PUSH
19860: LD_INT 1
19862: ARRAY
19863: PUSH
19864: LD_INT 100
19866: PUSH
19867: LD_VAR 0 8
19871: PLUS
19872: EQUAL
19873: IFFALSE 19918
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19875: LD_ADDR_VAR 0 2
19879: PUSH
19880: LD_VAR 0 2
19884: PPUSH
19885: LD_INT 2
19887: PPUSH
19888: LD_VAR 0 2
19892: PUSH
19893: LD_INT 2
19895: ARRAY
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: CALL_OW 3
19904: PPUSH
19905: CALL_OW 1
19909: ST_TO_ADDR
// tmp := 1 ;
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_STRING 1
19917: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19918: LD_ADDR_VAR 0 6
19922: PUSH
19923: LD_VAR 0 6
19927: PUSH
19928: LD_VAR 0 3
19932: STR
19933: ST_TO_ADDR
// end ;
19934: GO 19830
19936: POP
19937: POP
// if isGameLoad then
19938: LD_VAR 0 1
19942: IFFALSE 20417
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
19944: LD_ADDR_VAR 0 4
19948: PUSH
19949: LD_EXP 52
19953: PUSH
19954: LD_EXP 51
19958: PUSH
19959: LD_EXP 53
19963: PUSH
19964: LD_EXP 50
19968: PUSH
19969: LD_EXP 54
19973: PUSH
19974: LD_EXP 55
19978: PUSH
19979: LD_EXP 56
19983: PUSH
19984: LD_EXP 57
19988: PUSH
19989: LD_EXP 58
19993: PUSH
19994: LD_EXP 59
19998: PUSH
19999: LD_EXP 60
20003: PUSH
20004: LD_EXP 61
20008: PUSH
20009: LD_EXP 62
20013: PUSH
20014: LD_EXP 63
20018: PUSH
20019: LD_EXP 71
20023: PUSH
20024: LD_EXP 72
20028: PUSH
20029: LD_EXP 73
20033: PUSH
20034: LD_EXP 74
20038: PUSH
20039: LD_EXP 76
20043: PUSH
20044: LD_EXP 77
20048: PUSH
20049: LD_EXP 78
20053: PUSH
20054: LD_EXP 81
20058: PUSH
20059: LD_EXP 83
20063: PUSH
20064: LD_EXP 84
20068: PUSH
20069: LD_EXP 85
20073: PUSH
20074: LD_EXP 87
20078: PUSH
20079: LD_EXP 88
20083: PUSH
20084: LD_EXP 91
20088: PUSH
20089: LD_EXP 92
20093: PUSH
20094: LD_EXP 93
20098: PUSH
20099: LD_EXP 94
20103: PUSH
20104: LD_EXP 95
20108: PUSH
20109: LD_EXP 96
20113: PUSH
20114: LD_EXP 97
20118: PUSH
20119: LD_EXP 98
20123: PUSH
20124: LD_EXP 99
20128: PUSH
20129: LD_EXP 64
20133: PUSH
20134: LD_EXP 65
20138: PUSH
20139: LD_EXP 68
20143: PUSH
20144: LD_EXP 69
20148: PUSH
20149: LD_EXP 70
20153: PUSH
20154: LD_EXP 66
20158: PUSH
20159: LD_EXP 67
20163: PUSH
20164: LD_EXP 75
20168: PUSH
20169: LD_EXP 79
20173: PUSH
20174: LD_EXP 80
20178: PUSH
20179: LD_EXP 82
20183: PUSH
20184: LD_EXP 86
20188: PUSH
20189: LD_EXP 89
20193: PUSH
20194: LD_EXP 90
20198: PUSH
20199: LD_EXP 100
20203: PUSH
20204: LD_EXP 101
20208: PUSH
20209: LD_EXP 102
20213: PUSH
20214: LD_EXP 103
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: ST_TO_ADDR
// tmp :=  ;
20275: LD_ADDR_VAR 0 3
20279: PUSH
20280: LD_STRING 
20282: ST_TO_ADDR
// for i = 1 to normalCounter do
20283: LD_ADDR_VAR 0 8
20287: PUSH
20288: DOUBLE
20289: LD_INT 1
20291: DEC
20292: ST_TO_ADDR
20293: LD_EXP 48
20297: PUSH
20298: FOR_TO
20299: IFFALSE 20335
// begin if flags [ i ] then
20301: LD_VAR 0 4
20305: PUSH
20306: LD_VAR 0 8
20310: ARRAY
20311: IFFALSE 20333
// tmp := tmp & i & ; ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_VAR 0 3
20322: PUSH
20323: LD_VAR 0 8
20327: STR
20328: PUSH
20329: LD_STRING ;
20331: STR
20332: ST_TO_ADDR
// end ;
20333: GO 20298
20335: POP
20336: POP
// for i = 1 to hardcoreCounter do
20337: LD_ADDR_VAR 0 8
20341: PUSH
20342: DOUBLE
20343: LD_INT 1
20345: DEC
20346: ST_TO_ADDR
20347: LD_EXP 49
20351: PUSH
20352: FOR_TO
20353: IFFALSE 20399
// begin if flags [ normalCounter + i ] then
20355: LD_VAR 0 4
20359: PUSH
20360: LD_EXP 48
20364: PUSH
20365: LD_VAR 0 8
20369: PLUS
20370: ARRAY
20371: IFFALSE 20397
// tmp := tmp & ( 100 + i ) & ; ;
20373: LD_ADDR_VAR 0 3
20377: PUSH
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 100
20385: PUSH
20386: LD_VAR 0 8
20390: PLUS
20391: STR
20392: PUSH
20393: LD_STRING ;
20395: STR
20396: ST_TO_ADDR
// end ;
20397: GO 20352
20399: POP
20400: POP
// if tmp then
20401: LD_VAR 0 3
20405: IFFALSE 20417
// active := tmp ;
20407: LD_ADDR_VAR 0 7
20411: PUSH
20412: LD_VAR 0 3
20416: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20417: LD_STRING getStreamItemsFromMission("
20419: PUSH
20420: LD_VAR 0 5
20424: STR
20425: PUSH
20426: LD_STRING ","
20428: STR
20429: PUSH
20430: LD_VAR 0 6
20434: STR
20435: PUSH
20436: LD_STRING ","
20438: STR
20439: PUSH
20440: LD_VAR 0 7
20444: STR
20445: PUSH
20446: LD_STRING ")
20448: STR
20449: PPUSH
20450: CALL_OW 559
// end else
20454: GO 20463
// ToLua ( getStreamItemsFromMission("","","") ) ;
20456: LD_STRING getStreamItemsFromMission("","","")
20458: PPUSH
20459: CALL_OW 559
// end ;
20463: LD_VAR 0 2
20467: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20468: LD_EXP 47
20472: PUSH
20473: LD_EXP 52
20477: AND
20478: IFFALSE 20602
20480: GO 20482
20482: DISABLE
20483: LD_INT 0
20485: PPUSH
20486: PPUSH
// begin enable ;
20487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20488: LD_ADDR_VAR 0 2
20492: PUSH
20493: LD_INT 22
20495: PUSH
20496: LD_OWVAR 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 34
20510: PUSH
20511: LD_INT 7
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 34
20520: PUSH
20521: LD_INT 45
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 34
20530: PUSH
20531: LD_INT 28
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 34
20540: PUSH
20541: LD_INT 47
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: ST_TO_ADDR
// if not tmp then
20564: LD_VAR 0 2
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20602
// for i in tmp do
20573: LD_ADDR_VAR 0 1
20577: PUSH
20578: LD_VAR 0 2
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20600
// begin SetLives ( i , 0 ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_INT 0
20593: PPUSH
20594: CALL_OW 234
// end ;
20598: GO 20583
20600: POP
20601: POP
// end ;
20602: PPOPN 2
20604: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20605: LD_EXP 47
20609: PUSH
20610: LD_EXP 53
20614: AND
20615: IFFALSE 20699
20617: GO 20619
20619: DISABLE
20620: LD_INT 0
20622: PPUSH
20623: PPUSH
// begin enable ;
20624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20625: LD_ADDR_VAR 0 2
20629: PUSH
20630: LD_INT 22
20632: PUSH
20633: LD_OWVAR 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 32
20644: PUSH
20645: LD_INT 3
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PPUSH
20656: CALL_OW 69
20660: ST_TO_ADDR
// if not tmp then
20661: LD_VAR 0 2
20665: NOT
20666: IFFALSE 20670
// exit ;
20668: GO 20699
// for i in tmp do
20670: LD_ADDR_VAR 0 1
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: FOR_IN
20681: IFFALSE 20697
// begin SetLives ( i , 0 ) ;
20683: LD_VAR 0 1
20687: PPUSH
20688: LD_INT 0
20690: PPUSH
20691: CALL_OW 234
// end ;
20695: GO 20680
20697: POP
20698: POP
// end ;
20699: PPOPN 2
20701: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20702: LD_EXP 47
20706: PUSH
20707: LD_EXP 50
20711: AND
20712: IFFALSE 20805
20714: GO 20716
20716: DISABLE
20717: LD_INT 0
20719: PPUSH
// begin enable ;
20720: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20721: LD_ADDR_VAR 0 1
20725: PUSH
20726: LD_INT 22
20728: PUSH
20729: LD_OWVAR 2
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 25
20743: PUSH
20744: LD_INT 5
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 25
20753: PUSH
20754: LD_INT 9
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 25
20763: PUSH
20764: LD_INT 8
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: PUSH
20786: FOR_IN
20787: IFFALSE 20803
// begin SetClass ( i , 1 ) ;
20789: LD_VAR 0 1
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 336
// end ;
20801: GO 20786
20803: POP
20804: POP
// end ;
20805: PPOPN 1
20807: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20808: LD_EXP 47
20812: PUSH
20813: LD_EXP 51
20817: AND
20818: PUSH
20819: LD_OWVAR 65
20823: PUSH
20824: LD_INT 7
20826: LESS
20827: AND
20828: IFFALSE 20842
20830: GO 20832
20832: DISABLE
// begin enable ;
20833: ENABLE
// game_speed := 7 ;
20834: LD_ADDR_OWVAR 65
20838: PUSH
20839: LD_INT 7
20841: ST_TO_ADDR
// end ;
20842: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20843: LD_EXP 47
20847: PUSH
20848: LD_EXP 54
20852: AND
20853: IFFALSE 21055
20855: GO 20857
20857: DISABLE
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
20862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20863: LD_ADDR_VAR 0 3
20867: PUSH
20868: LD_INT 81
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: ST_TO_ADDR
// if not tmp then
20899: LD_VAR 0 3
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 21055
// if tmp > 5 then
20908: LD_VAR 0 3
20912: PUSH
20913: LD_INT 5
20915: GREATER
20916: IFFALSE 20928
// k := 5 else
20918: LD_ADDR_VAR 0 2
20922: PUSH
20923: LD_INT 5
20925: ST_TO_ADDR
20926: GO 20938
// k := tmp ;
20928: LD_ADDR_VAR 0 2
20932: PUSH
20933: LD_VAR 0 3
20937: ST_TO_ADDR
// for i := 1 to k do
20938: LD_ADDR_VAR 0 1
20942: PUSH
20943: DOUBLE
20944: LD_INT 1
20946: DEC
20947: ST_TO_ADDR
20948: LD_VAR 0 2
20952: PUSH
20953: FOR_TO
20954: IFFALSE 21053
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_VAR 0 1
20965: ARRAY
20966: PPUSH
20967: LD_VAR 0 1
20971: PUSH
20972: LD_INT 4
20974: MOD
20975: PUSH
20976: LD_INT 1
20978: PLUS
20979: PPUSH
20980: CALL_OW 259
20984: PUSH
20985: LD_INT 10
20987: LESS
20988: IFFALSE 21051
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20990: LD_VAR 0 3
20994: PUSH
20995: LD_VAR 0 1
20999: ARRAY
21000: PPUSH
21001: LD_VAR 0 1
21005: PUSH
21006: LD_INT 4
21008: MOD
21009: PUSH
21010: LD_INT 1
21012: PLUS
21013: PPUSH
21014: LD_VAR 0 3
21018: PUSH
21019: LD_VAR 0 1
21023: ARRAY
21024: PPUSH
21025: LD_VAR 0 1
21029: PUSH
21030: LD_INT 4
21032: MOD
21033: PUSH
21034: LD_INT 1
21036: PLUS
21037: PPUSH
21038: CALL_OW 259
21042: PUSH
21043: LD_INT 1
21045: PLUS
21046: PPUSH
21047: CALL_OW 237
21051: GO 20953
21053: POP
21054: POP
// end ;
21055: PPOPN 3
21057: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21058: LD_EXP 47
21062: PUSH
21063: LD_EXP 55
21067: AND
21068: IFFALSE 21088
21070: GO 21072
21072: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21073: LD_INT 4
21075: PPUSH
21076: LD_OWVAR 2
21080: PPUSH
21081: LD_INT 0
21083: PPUSH
21084: CALL_OW 324
21088: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21089: LD_EXP 47
21093: PUSH
21094: LD_EXP 84
21098: AND
21099: IFFALSE 21119
21101: GO 21103
21103: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21104: LD_INT 19
21106: PPUSH
21107: LD_OWVAR 2
21111: PPUSH
21112: LD_INT 0
21114: PPUSH
21115: CALL_OW 324
21119: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21120: LD_EXP 47
21124: PUSH
21125: LD_EXP 56
21129: AND
21130: IFFALSE 21232
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
// begin enable ;
21139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_INT 22
21147: PUSH
21148: LD_OWVAR 2
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 2
21159: PUSH
21160: LD_INT 34
21162: PUSH
21163: LD_INT 11
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 34
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PPUSH
21189: CALL_OW 69
21193: ST_TO_ADDR
// if not tmp then
21194: LD_VAR 0 2
21198: NOT
21199: IFFALSE 21203
// exit ;
21201: GO 21232
// for i in tmp do
21203: LD_ADDR_VAR 0 1
21207: PUSH
21208: LD_VAR 0 2
21212: PUSH
21213: FOR_IN
21214: IFFALSE 21230
// begin SetLives ( i , 0 ) ;
21216: LD_VAR 0 1
21220: PPUSH
21221: LD_INT 0
21223: PPUSH
21224: CALL_OW 234
// end ;
21228: GO 21213
21230: POP
21231: POP
// end ;
21232: PPOPN 2
21234: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21235: LD_EXP 47
21239: PUSH
21240: LD_EXP 57
21244: AND
21245: IFFALSE 21265
21247: GO 21249
21249: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21250: LD_INT 32
21252: PPUSH
21253: LD_OWVAR 2
21257: PPUSH
21258: LD_INT 0
21260: PPUSH
21261: CALL_OW 324
21265: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21266: LD_EXP 47
21270: PUSH
21271: LD_EXP 58
21275: AND
21276: IFFALSE 21457
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
21285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_OWVAR 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 33
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PPUSH
21317: CALL_OW 69
21321: ST_TO_ADDR
// if not tmp then
21322: LD_VAR 0 2
21326: NOT
21327: IFFALSE 21331
// exit ;
21329: GO 21457
// side := 0 ;
21331: LD_ADDR_VAR 0 3
21335: PUSH
21336: LD_INT 0
21338: ST_TO_ADDR
// for i := 1 to 8 do
21339: LD_ADDR_VAR 0 1
21343: PUSH
21344: DOUBLE
21345: LD_INT 1
21347: DEC
21348: ST_TO_ADDR
21349: LD_INT 8
21351: PUSH
21352: FOR_TO
21353: IFFALSE 21401
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21355: LD_OWVAR 2
21359: PUSH
21360: LD_VAR 0 1
21364: NONEQUAL
21365: PUSH
21366: LD_OWVAR 2
21370: PPUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: CALL_OW 81
21380: PUSH
21381: LD_INT 2
21383: EQUAL
21384: AND
21385: IFFALSE 21399
// begin side := i ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_VAR 0 1
21396: ST_TO_ADDR
// break ;
21397: GO 21401
// end ;
21399: GO 21352
21401: POP
21402: POP
// if not side then
21403: LD_VAR 0 3
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21457
// for i := 1 to tmp do
21412: LD_ADDR_VAR 0 1
21416: PUSH
21417: DOUBLE
21418: LD_INT 1
21420: DEC
21421: ST_TO_ADDR
21422: LD_VAR 0 2
21426: PUSH
21427: FOR_TO
21428: IFFALSE 21455
// if Prob ( 60 ) then
21430: LD_INT 60
21432: PPUSH
21433: CALL_OW 13
21437: IFFALSE 21453
// SetSide ( i , side ) ;
21439: LD_VAR 0 1
21443: PPUSH
21444: LD_VAR 0 3
21448: PPUSH
21449: CALL_OW 235
21453: GO 21427
21455: POP
21456: POP
// end ;
21457: PPOPN 3
21459: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21460: LD_EXP 47
21464: PUSH
21465: LD_EXP 60
21469: AND
21470: IFFALSE 21589
21472: GO 21474
21474: DISABLE
21475: LD_INT 0
21477: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_INT 22
21485: PUSH
21486: LD_OWVAR 2
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 21
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 3
21507: PUSH
21508: LD_INT 23
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: PPUSH
21527: CALL_OW 69
21531: PUSH
21532: FOR_IN
21533: IFFALSE 21587
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21535: LD_VAR 0 1
21539: PPUSH
21540: CALL_OW 257
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 3
21553: PUSH
21554: LD_INT 4
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: IN
21563: IFFALSE 21585
// SetClass ( un , rand ( 1 , 4 ) ) ;
21565: LD_VAR 0 1
21569: PPUSH
21570: LD_INT 1
21572: PPUSH
21573: LD_INT 4
21575: PPUSH
21576: CALL_OW 12
21580: PPUSH
21581: CALL_OW 336
21585: GO 21532
21587: POP
21588: POP
// end ;
21589: PPOPN 1
21591: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21592: LD_EXP 47
21596: PUSH
21597: LD_EXP 59
21601: AND
21602: IFFALSE 21681
21604: GO 21606
21606: DISABLE
21607: LD_INT 0
21609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21610: LD_ADDR_VAR 0 1
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_OWVAR 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 21
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: ST_TO_ADDR
// if not tmp then
21646: LD_VAR 0 1
21650: NOT
21651: IFFALSE 21655
// exit ;
21653: GO 21681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21655: LD_VAR 0 1
21659: PUSH
21660: LD_INT 1
21662: PPUSH
21663: LD_VAR 0 1
21667: PPUSH
21668: CALL_OW 12
21672: ARRAY
21673: PPUSH
21674: LD_INT 100
21676: PPUSH
21677: CALL_OW 234
// end ;
21681: PPOPN 1
21683: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21684: LD_EXP 47
21688: PUSH
21689: LD_EXP 61
21693: AND
21694: IFFALSE 21792
21696: GO 21698
21698: DISABLE
21699: LD_INT 0
21701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21702: LD_ADDR_VAR 0 1
21706: PUSH
21707: LD_INT 22
21709: PUSH
21710: LD_OWVAR 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 21
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PPUSH
21733: CALL_OW 69
21737: ST_TO_ADDR
// if not tmp then
21738: LD_VAR 0 1
21742: NOT
21743: IFFALSE 21747
// exit ;
21745: GO 21792
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21747: LD_VAR 0 1
21751: PUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 12
21764: ARRAY
21765: PPUSH
21766: LD_INT 1
21768: PPUSH
21769: LD_INT 4
21771: PPUSH
21772: CALL_OW 12
21776: PPUSH
21777: LD_INT 3000
21779: PPUSH
21780: LD_INT 9000
21782: PPUSH
21783: CALL_OW 12
21787: PPUSH
21788: CALL_OW 492
// end ;
21792: PPOPN 1
21794: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21795: LD_EXP 47
21799: PUSH
21800: LD_EXP 62
21804: AND
21805: IFFALSE 21825
21807: GO 21809
21809: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21810: LD_INT 1
21812: PPUSH
21813: LD_OWVAR 2
21817: PPUSH
21818: LD_INT 0
21820: PPUSH
21821: CALL_OW 324
21825: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21826: LD_EXP 47
21830: PUSH
21831: LD_EXP 63
21835: AND
21836: IFFALSE 21919
21838: GO 21840
21840: DISABLE
21841: LD_INT 0
21843: PPUSH
21844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_OWVAR 2
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 21
21864: PUSH
21865: LD_INT 3
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 69
21880: ST_TO_ADDR
// if not tmp then
21881: LD_VAR 0 2
21885: NOT
21886: IFFALSE 21890
// exit ;
21888: GO 21919
// for i in tmp do
21890: LD_ADDR_VAR 0 1
21894: PUSH
21895: LD_VAR 0 2
21899: PUSH
21900: FOR_IN
21901: IFFALSE 21917
// SetBLevel ( i , 10 ) ;
21903: LD_VAR 0 1
21907: PPUSH
21908: LD_INT 10
21910: PPUSH
21911: CALL_OW 241
21915: GO 21900
21917: POP
21918: POP
// end ;
21919: PPOPN 2
21921: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21922: LD_EXP 47
21926: PUSH
21927: LD_EXP 64
21931: AND
21932: IFFALSE 22043
21934: GO 21936
21936: DISABLE
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21942: LD_ADDR_VAR 0 3
21946: PUSH
21947: LD_INT 22
21949: PUSH
21950: LD_OWVAR 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 25
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PPUSH
21973: CALL_OW 69
21977: ST_TO_ADDR
// if not tmp then
21978: LD_VAR 0 3
21982: NOT
21983: IFFALSE 21987
// exit ;
21985: GO 22043
// un := tmp [ rand ( 1 , tmp ) ] ;
21987: LD_ADDR_VAR 0 2
21991: PUSH
21992: LD_VAR 0 3
21996: PUSH
21997: LD_INT 1
21999: PPUSH
22000: LD_VAR 0 3
22004: PPUSH
22005: CALL_OW 12
22009: ARRAY
22010: ST_TO_ADDR
// if Crawls ( un ) then
22011: LD_VAR 0 2
22015: PPUSH
22016: CALL_OW 318
22020: IFFALSE 22031
// ComWalk ( un ) ;
22022: LD_VAR 0 2
22026: PPUSH
22027: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22031: LD_VAR 0 2
22035: PPUSH
22036: LD_INT 5
22038: PPUSH
22039: CALL_OW 336
// end ;
22043: PPOPN 3
22045: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22046: LD_EXP 47
22050: PUSH
22051: LD_EXP 65
22055: AND
22056: PUSH
22057: LD_OWVAR 67
22061: PUSH
22062: LD_INT 4
22064: LESS
22065: AND
22066: IFFALSE 22085
22068: GO 22070
22070: DISABLE
// begin Difficulty := Difficulty + 1 ;
22071: LD_ADDR_OWVAR 67
22075: PUSH
22076: LD_OWVAR 67
22080: PUSH
22081: LD_INT 1
22083: PLUS
22084: ST_TO_ADDR
// end ;
22085: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22086: LD_EXP 47
22090: PUSH
22091: LD_EXP 66
22095: AND
22096: IFFALSE 22199
22098: GO 22100
22100: DISABLE
22101: LD_INT 0
22103: PPUSH
// begin for i := 1 to 5 do
22104: LD_ADDR_VAR 0 1
22108: PUSH
22109: DOUBLE
22110: LD_INT 1
22112: DEC
22113: ST_TO_ADDR
22114: LD_INT 5
22116: PUSH
22117: FOR_TO
22118: IFFALSE 22197
// begin uc_nation := nation_nature ;
22120: LD_ADDR_OWVAR 21
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// uc_side := 0 ;
22128: LD_ADDR_OWVAR 20
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22136: LD_ADDR_OWVAR 29
22140: PUSH
22141: LD_INT 12
22143: PUSH
22144: LD_INT 12
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// hc_agressivity := 20 ;
22151: LD_ADDR_OWVAR 35
22155: PUSH
22156: LD_INT 20
22158: ST_TO_ADDR
// hc_class := class_tiger ;
22159: LD_ADDR_OWVAR 28
22163: PUSH
22164: LD_INT 14
22166: ST_TO_ADDR
// hc_gallery :=  ;
22167: LD_ADDR_OWVAR 33
22171: PUSH
22172: LD_STRING 
22174: ST_TO_ADDR
// hc_name :=  ;
22175: LD_ADDR_OWVAR 26
22179: PUSH
22180: LD_STRING 
22182: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22183: CALL_OW 44
22187: PPUSH
22188: LD_INT 0
22190: PPUSH
22191: CALL_OW 51
// end ;
22195: GO 22117
22197: POP
22198: POP
// end ;
22199: PPOPN 1
22201: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22202: LD_EXP 47
22206: PUSH
22207: LD_EXP 67
22211: AND
22212: IFFALSE 22221
22214: GO 22216
22216: DISABLE
// StreamSibBomb ;
22217: CALL 22222 0 0
22221: END
// export function StreamSibBomb ; var i , x , y ; begin
22222: LD_INT 0
22224: PPUSH
22225: PPUSH
22226: PPUSH
22227: PPUSH
// result := false ;
22228: LD_ADDR_VAR 0 1
22232: PUSH
22233: LD_INT 0
22235: ST_TO_ADDR
// for i := 1 to 16 do
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: DOUBLE
22242: LD_INT 1
22244: DEC
22245: ST_TO_ADDR
22246: LD_INT 16
22248: PUSH
22249: FOR_TO
22250: IFFALSE 22449
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22252: LD_ADDR_VAR 0 3
22256: PUSH
22257: LD_INT 10
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 30
22265: PUSH
22266: LD_INT 40
22268: PUSH
22269: LD_INT 50
22271: PUSH
22272: LD_INT 60
22274: PUSH
22275: LD_INT 70
22277: PUSH
22278: LD_INT 80
22280: PUSH
22281: LD_INT 90
22283: PUSH
22284: LD_INT 100
22286: PUSH
22287: LD_INT 110
22289: PUSH
22290: LD_INT 120
22292: PUSH
22293: LD_INT 130
22295: PUSH
22296: LD_INT 140
22298: PUSH
22299: LD_INT 150
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: PPUSH
22322: LD_INT 15
22324: PPUSH
22325: CALL_OW 12
22329: ARRAY
22330: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22331: LD_ADDR_VAR 0 4
22335: PUSH
22336: LD_INT 10
22338: PUSH
22339: LD_INT 20
22341: PUSH
22342: LD_INT 30
22344: PUSH
22345: LD_INT 40
22347: PUSH
22348: LD_INT 50
22350: PUSH
22351: LD_INT 60
22353: PUSH
22354: LD_INT 70
22356: PUSH
22357: LD_INT 80
22359: PUSH
22360: LD_INT 90
22362: PUSH
22363: LD_INT 100
22365: PUSH
22366: LD_INT 110
22368: PUSH
22369: LD_INT 120
22371: PUSH
22372: LD_INT 130
22374: PUSH
22375: LD_INT 140
22377: PUSH
22378: LD_INT 150
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: PPUSH
22401: LD_INT 15
22403: PPUSH
22404: CALL_OW 12
22408: ARRAY
22409: ST_TO_ADDR
// if ValidHex ( x , y ) then
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_VAR 0 4
22419: PPUSH
22420: CALL_OW 488
22424: IFFALSE 22447
// begin result := [ x , y ] ;
22426: LD_ADDR_VAR 0 1
22430: PUSH
22431: LD_VAR 0 3
22435: PUSH
22436: LD_VAR 0 4
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: ST_TO_ADDR
// break ;
22445: GO 22449
// end ; end ;
22447: GO 22249
22449: POP
22450: POP
// if result then
22451: LD_VAR 0 1
22455: IFFALSE 22515
// begin ToLua ( playSibBomb() ) ;
22457: LD_STRING playSibBomb()
22459: PPUSH
22460: CALL_OW 559
// wait ( 0 0$14 ) ;
22464: LD_INT 490
22466: PPUSH
22467: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22471: LD_VAR 0 1
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 2
22487: ARRAY
22488: PPUSH
22489: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22493: LD_VAR 0 1
22497: PUSH
22498: LD_INT 1
22500: ARRAY
22501: PPUSH
22502: LD_VAR 0 1
22506: PUSH
22507: LD_INT 2
22509: ARRAY
22510: PPUSH
22511: CALL_OW 429
// end ; end ;
22515: LD_VAR 0 1
22519: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22520: LD_EXP 47
22524: PUSH
22525: LD_EXP 69
22529: AND
22530: IFFALSE 22542
22532: GO 22534
22534: DISABLE
// YouLost (  ) ;
22535: LD_STRING 
22537: PPUSH
22538: CALL_OW 104
22542: END
// every 0 0$1 trigger StreamModeActive and sFog do
22543: LD_EXP 47
22547: PUSH
22548: LD_EXP 68
22552: AND
22553: IFFALSE 22567
22555: GO 22557
22557: DISABLE
// FogOff ( your_side ) ;
22558: LD_OWVAR 2
22562: PPUSH
22563: CALL_OW 344
22567: END
// every 0 0$1 trigger StreamModeActive and sSun do
22568: LD_EXP 47
22572: PUSH
22573: LD_EXP 70
22577: AND
22578: IFFALSE 22606
22580: GO 22582
22582: DISABLE
// begin solar_recharge_percent := 0 ;
22583: LD_ADDR_OWVAR 79
22587: PUSH
22588: LD_INT 0
22590: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22591: LD_INT 10500
22593: PPUSH
22594: CALL_OW 67
// solar_recharge_percent := 100 ;
22598: LD_ADDR_OWVAR 79
22602: PUSH
22603: LD_INT 100
22605: ST_TO_ADDR
// end ;
22606: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22607: LD_EXP 47
22611: PUSH
22612: LD_EXP 71
22616: AND
22617: IFFALSE 22856
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
22626: PPUSH
// begin tmp := [ ] ;
22627: LD_ADDR_VAR 0 3
22631: PUSH
22632: EMPTY
22633: ST_TO_ADDR
// for i := 1 to 6 do
22634: LD_ADDR_VAR 0 1
22638: PUSH
22639: DOUBLE
22640: LD_INT 1
22642: DEC
22643: ST_TO_ADDR
22644: LD_INT 6
22646: PUSH
22647: FOR_TO
22648: IFFALSE 22753
// begin uc_nation := nation_nature ;
22650: LD_ADDR_OWVAR 21
22654: PUSH
22655: LD_INT 0
22657: ST_TO_ADDR
// uc_side := 0 ;
22658: LD_ADDR_OWVAR 20
22662: PUSH
22663: LD_INT 0
22665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22666: LD_ADDR_OWVAR 29
22670: PUSH
22671: LD_INT 12
22673: PUSH
22674: LD_INT 12
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: ST_TO_ADDR
// hc_agressivity := 20 ;
22681: LD_ADDR_OWVAR 35
22685: PUSH
22686: LD_INT 20
22688: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22689: LD_ADDR_OWVAR 28
22693: PUSH
22694: LD_INT 17
22696: ST_TO_ADDR
// hc_gallery :=  ;
22697: LD_ADDR_OWVAR 33
22701: PUSH
22702: LD_STRING 
22704: ST_TO_ADDR
// hc_name :=  ;
22705: LD_ADDR_OWVAR 26
22709: PUSH
22710: LD_STRING 
22712: ST_TO_ADDR
// un := CreateHuman ;
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: CALL_OW 44
22722: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22723: LD_VAR 0 2
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 51
// tmp := tmp ^ un ;
22735: LD_ADDR_VAR 0 3
22739: PUSH
22740: LD_VAR 0 3
22744: PUSH
22745: LD_VAR 0 2
22749: ADD
22750: ST_TO_ADDR
// end ;
22751: GO 22647
22753: POP
22754: POP
// repeat wait ( 0 0$1 ) ;
22755: LD_INT 35
22757: PPUSH
22758: CALL_OW 67
// for un in tmp do
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_VAR 0 3
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22847
// begin if IsDead ( un ) then
22775: LD_VAR 0 2
22779: PPUSH
22780: CALL_OW 301
22784: IFFALSE 22804
// begin tmp := tmp diff un ;
22786: LD_ADDR_VAR 0 3
22790: PUSH
22791: LD_VAR 0 3
22795: PUSH
22796: LD_VAR 0 2
22800: DIFF
22801: ST_TO_ADDR
// continue ;
22802: GO 22772
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22804: LD_VAR 0 2
22808: PPUSH
22809: LD_INT 3
22811: PUSH
22812: LD_INT 22
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 69
22830: PPUSH
22831: LD_VAR 0 2
22835: PPUSH
22836: CALL_OW 74
22840: PPUSH
22841: CALL_OW 115
// end ;
22845: GO 22772
22847: POP
22848: POP
// until not tmp ;
22849: LD_VAR 0 3
22853: NOT
22854: IFFALSE 22755
// end ;
22856: PPOPN 3
22858: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22859: LD_EXP 47
22863: PUSH
22864: LD_EXP 72
22868: AND
22869: IFFALSE 22923
22871: GO 22873
22873: DISABLE
// begin ToLua ( displayTroll(); ) ;
22874: LD_STRING displayTroll();
22876: PPUSH
22877: CALL_OW 559
// wait ( 3 3$00 ) ;
22881: LD_INT 6300
22883: PPUSH
22884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22888: LD_STRING hideTroll();
22890: PPUSH
22891: CALL_OW 559
// wait ( 1 1$00 ) ;
22895: LD_INT 2100
22897: PPUSH
22898: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22902: LD_STRING displayTroll();
22904: PPUSH
22905: CALL_OW 559
// wait ( 1 1$00 ) ;
22909: LD_INT 2100
22911: PPUSH
22912: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22916: LD_STRING hideTroll();
22918: PPUSH
22919: CALL_OW 559
// end ;
22923: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22924: LD_EXP 47
22928: PUSH
22929: LD_EXP 73
22933: AND
22934: IFFALSE 22997
22936: GO 22938
22938: DISABLE
22939: LD_INT 0
22941: PPUSH
// begin p := 0 ;
22942: LD_ADDR_VAR 0 1
22946: PUSH
22947: LD_INT 0
22949: ST_TO_ADDR
// repeat game_speed := 1 ;
22950: LD_ADDR_OWVAR 65
22954: PUSH
22955: LD_INT 1
22957: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22958: LD_INT 35
22960: PPUSH
22961: CALL_OW 67
// p := p + 1 ;
22965: LD_ADDR_VAR 0 1
22969: PUSH
22970: LD_VAR 0 1
22974: PUSH
22975: LD_INT 1
22977: PLUS
22978: ST_TO_ADDR
// until p >= 60 ;
22979: LD_VAR 0 1
22983: PUSH
22984: LD_INT 60
22986: GREATEREQUAL
22987: IFFALSE 22950
// game_speed := 4 ;
22989: LD_ADDR_OWVAR 65
22993: PUSH
22994: LD_INT 4
22996: ST_TO_ADDR
// end ;
22997: PPOPN 1
22999: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23000: LD_EXP 47
23004: PUSH
23005: LD_EXP 74
23009: AND
23010: IFFALSE 23156
23012: GO 23014
23014: DISABLE
23015: LD_INT 0
23017: PPUSH
23018: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23019: LD_ADDR_VAR 0 1
23023: PUSH
23024: LD_INT 22
23026: PUSH
23027: LD_OWVAR 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 30
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PPUSH
23068: CALL_OW 69
23072: ST_TO_ADDR
// if not depot then
23073: LD_VAR 0 1
23077: NOT
23078: IFFALSE 23082
// exit ;
23080: GO 23156
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_VAR 0 1
23091: PUSH
23092: LD_INT 1
23094: PPUSH
23095: LD_VAR 0 1
23099: PPUSH
23100: CALL_OW 12
23104: ARRAY
23105: PPUSH
23106: CALL_OW 274
23110: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23111: LD_VAR 0 2
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: LD_INT 0
23121: PPUSH
23122: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23126: LD_VAR 0 2
23130: PPUSH
23131: LD_INT 2
23133: PPUSH
23134: LD_INT 0
23136: PPUSH
23137: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23141: LD_VAR 0 2
23145: PPUSH
23146: LD_INT 3
23148: PPUSH
23149: LD_INT 0
23151: PPUSH
23152: CALL_OW 277
// end ;
23156: PPOPN 2
23158: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23159: LD_EXP 47
23163: PUSH
23164: LD_EXP 75
23168: AND
23169: IFFALSE 23266
23171: GO 23173
23173: DISABLE
23174: LD_INT 0
23176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23177: LD_ADDR_VAR 0 1
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_OWVAR 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 21
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: LD_INT 23
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: PPUSH
23226: CALL_OW 69
23230: ST_TO_ADDR
// if not tmp then
23231: LD_VAR 0 1
23235: NOT
23236: IFFALSE 23240
// exit ;
23238: GO 23266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23240: LD_VAR 0 1
23244: PUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL_OW 12
23257: ARRAY
23258: PPUSH
23259: LD_INT 200
23261: PPUSH
23262: CALL_OW 234
// end ;
23266: PPOPN 1
23268: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23269: LD_EXP 47
23273: PUSH
23274: LD_EXP 76
23278: AND
23279: IFFALSE 23358
23281: GO 23283
23283: DISABLE
23284: LD_INT 0
23286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23287: LD_ADDR_VAR 0 1
23291: PUSH
23292: LD_INT 22
23294: PUSH
23295: LD_OWVAR 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 21
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: ST_TO_ADDR
// if not tmp then
23323: LD_VAR 0 1
23327: NOT
23328: IFFALSE 23332
// exit ;
23330: GO 23358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23332: LD_VAR 0 1
23336: PUSH
23337: LD_INT 1
23339: PPUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 12
23349: ARRAY
23350: PPUSH
23351: LD_INT 60
23353: PPUSH
23354: CALL_OW 234
// end ;
23358: PPOPN 1
23360: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23361: LD_EXP 47
23365: PUSH
23366: LD_EXP 77
23370: AND
23371: IFFALSE 23470
23373: GO 23375
23375: DISABLE
23376: LD_INT 0
23378: PPUSH
23379: PPUSH
// begin enable ;
23380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23381: LD_ADDR_VAR 0 1
23385: PUSH
23386: LD_INT 22
23388: PUSH
23389: LD_OWVAR 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 61
23400: PUSH
23401: EMPTY
23402: LIST
23403: PUSH
23404: LD_INT 33
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: PPUSH
23419: CALL_OW 69
23423: ST_TO_ADDR
// if not tmp then
23424: LD_VAR 0 1
23428: NOT
23429: IFFALSE 23433
// exit ;
23431: GO 23470
// for i in tmp do
23433: LD_ADDR_VAR 0 2
23437: PUSH
23438: LD_VAR 0 1
23442: PUSH
23443: FOR_IN
23444: IFFALSE 23468
// if IsControledBy ( i ) then
23446: LD_VAR 0 2
23450: PPUSH
23451: CALL_OW 312
23455: IFFALSE 23466
// ComUnlink ( i ) ;
23457: LD_VAR 0 2
23461: PPUSH
23462: CALL_OW 136
23466: GO 23443
23468: POP
23469: POP
// end ;
23470: PPOPN 2
23472: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23473: LD_EXP 47
23477: PUSH
23478: LD_EXP 78
23482: AND
23483: IFFALSE 23623
23485: GO 23487
23487: DISABLE
23488: LD_INT 0
23490: PPUSH
23491: PPUSH
// begin ToLua ( displayPowell(); ) ;
23492: LD_STRING displayPowell();
23494: PPUSH
23495: CALL_OW 559
// uc_side := 0 ;
23499: LD_ADDR_OWVAR 20
23503: PUSH
23504: LD_INT 0
23506: ST_TO_ADDR
// uc_nation := 2 ;
23507: LD_ADDR_OWVAR 21
23511: PUSH
23512: LD_INT 2
23514: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23515: LD_ADDR_OWVAR 37
23519: PUSH
23520: LD_INT 14
23522: ST_TO_ADDR
// vc_engine := engine_siberite ;
23523: LD_ADDR_OWVAR 39
23527: PUSH
23528: LD_INT 3
23530: ST_TO_ADDR
// vc_control := control_apeman ;
23531: LD_ADDR_OWVAR 38
23535: PUSH
23536: LD_INT 5
23538: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23539: LD_ADDR_OWVAR 40
23543: PUSH
23544: LD_INT 29
23546: ST_TO_ADDR
// un := CreateVehicle ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: CALL_OW 45
23556: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23557: LD_VAR 0 2
23561: PPUSH
23562: LD_INT 1
23564: PPUSH
23565: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23569: LD_INT 35
23571: PPUSH
23572: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_INT 22
23583: PUSH
23584: LD_OWVAR 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PPUSH
23593: CALL_OW 69
23597: PPUSH
23598: LD_VAR 0 2
23602: PPUSH
23603: CALL_OW 74
23607: PPUSH
23608: CALL_OW 115
// until IsDead ( un ) ;
23612: LD_VAR 0 2
23616: PPUSH
23617: CALL_OW 301
23621: IFFALSE 23569
// end ;
23623: PPOPN 2
23625: END
// every 0 0$1 trigger StreamModeActive and sStu do
23626: LD_EXP 47
23630: PUSH
23631: LD_EXP 86
23635: AND
23636: IFFALSE 23652
23638: GO 23640
23640: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23641: LD_STRING displayStucuk();
23643: PPUSH
23644: CALL_OW 559
// ResetFog ;
23648: CALL_OW 335
// end ;
23652: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23653: LD_EXP 47
23657: PUSH
23658: LD_EXP 79
23662: AND
23663: IFFALSE 23804
23665: GO 23667
23667: DISABLE
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23672: LD_ADDR_VAR 0 2
23676: PUSH
23677: LD_INT 22
23679: PUSH
23680: LD_OWVAR 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 21
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PPUSH
23703: CALL_OW 69
23707: ST_TO_ADDR
// if not tmp then
23708: LD_VAR 0 2
23712: NOT
23713: IFFALSE 23717
// exit ;
23715: GO 23804
// un := tmp [ rand ( 1 , tmp ) ] ;
23717: LD_ADDR_VAR 0 1
23721: PUSH
23722: LD_VAR 0 2
23726: PUSH
23727: LD_INT 1
23729: PPUSH
23730: LD_VAR 0 2
23734: PPUSH
23735: CALL_OW 12
23739: ARRAY
23740: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23741: LD_VAR 0 1
23745: PPUSH
23746: LD_INT 0
23748: PPUSH
23749: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23753: LD_VAR 0 1
23757: PPUSH
23758: LD_OWVAR 3
23762: PUSH
23763: LD_VAR 0 1
23767: DIFF
23768: PPUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 74
23778: PPUSH
23779: CALL_OW 115
// wait ( 0 0$20 ) ;
23783: LD_INT 700
23785: PPUSH
23786: CALL_OW 67
// SetSide ( un , your_side ) ;
23790: LD_VAR 0 1
23794: PPUSH
23795: LD_OWVAR 2
23799: PPUSH
23800: CALL_OW 235
// end ;
23804: PPOPN 2
23806: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23807: LD_EXP 47
23811: PUSH
23812: LD_EXP 80
23816: AND
23817: IFFALSE 23923
23819: GO 23821
23821: DISABLE
23822: LD_INT 0
23824: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23825: LD_ADDR_VAR 0 1
23829: PUSH
23830: LD_INT 22
23832: PUSH
23833: LD_OWVAR 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PPUSH
23874: CALL_OW 69
23878: ST_TO_ADDR
// if not depot then
23879: LD_VAR 0 1
23883: NOT
23884: IFFALSE 23888
// exit ;
23886: GO 23923
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23888: LD_VAR 0 1
23892: PUSH
23893: LD_INT 1
23895: ARRAY
23896: PPUSH
23897: CALL_OW 250
23901: PPUSH
23902: LD_VAR 0 1
23906: PUSH
23907: LD_INT 1
23909: ARRAY
23910: PPUSH
23911: CALL_OW 251
23915: PPUSH
23916: LD_INT 70
23918: PPUSH
23919: CALL_OW 495
// end ;
23923: PPOPN 1
23925: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23926: LD_EXP 47
23930: PUSH
23931: LD_EXP 81
23935: AND
23936: IFFALSE 24147
23938: GO 23940
23940: DISABLE
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
23947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23948: LD_ADDR_VAR 0 5
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_OWVAR 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 21
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PPUSH
23979: CALL_OW 69
23983: ST_TO_ADDR
// if not tmp then
23984: LD_VAR 0 5
23988: NOT
23989: IFFALSE 23993
// exit ;
23991: GO 24147
// for i in tmp do
23993: LD_ADDR_VAR 0 1
23997: PUSH
23998: LD_VAR 0 5
24002: PUSH
24003: FOR_IN
24004: IFFALSE 24145
// begin d := rand ( 0 , 5 ) ;
24006: LD_ADDR_VAR 0 4
24010: PUSH
24011: LD_INT 0
24013: PPUSH
24014: LD_INT 5
24016: PPUSH
24017: CALL_OW 12
24021: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24022: LD_ADDR_VAR 0 2
24026: PUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: CALL_OW 250
24036: PPUSH
24037: LD_VAR 0 4
24041: PPUSH
24042: LD_INT 3
24044: PPUSH
24045: LD_INT 12
24047: PPUSH
24048: CALL_OW 12
24052: PPUSH
24053: CALL_OW 272
24057: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24058: LD_ADDR_VAR 0 3
24062: PUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 251
24072: PPUSH
24073: LD_VAR 0 4
24077: PPUSH
24078: LD_INT 3
24080: PPUSH
24081: LD_INT 12
24083: PPUSH
24084: CALL_OW 12
24088: PPUSH
24089: CALL_OW 273
24093: ST_TO_ADDR
// if ValidHex ( x , y ) then
24094: LD_VAR 0 2
24098: PPUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: CALL_OW 488
24108: IFFALSE 24143
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: LD_VAR 0 2
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 3
24127: PPUSH
24128: LD_INT 6
24130: PPUSH
24131: CALL_OW 12
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 483
// end ;
24143: GO 24003
24145: POP
24146: POP
// end ;
24147: PPOPN 5
24149: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24150: LD_EXP 47
24154: PUSH
24155: LD_EXP 82
24159: AND
24160: IFFALSE 24254
24162: GO 24164
24164: DISABLE
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: LD_INT 22
24176: PUSH
24177: LD_OWVAR 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 32
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 21
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 2
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24254
// for i in tmp do
24225: LD_ADDR_VAR 0 1
24229: PUSH
24230: LD_VAR 0 2
24234: PUSH
24235: FOR_IN
24236: IFFALSE 24252
// SetFuel ( i , 0 ) ;
24238: LD_VAR 0 1
24242: PPUSH
24243: LD_INT 0
24245: PPUSH
24246: CALL_OW 240
24250: GO 24235
24252: POP
24253: POP
// end ;
24254: PPOPN 2
24256: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24257: LD_EXP 47
24261: PUSH
24262: LD_EXP 83
24266: AND
24267: IFFALSE 24333
24269: GO 24271
24271: DISABLE
24272: LD_INT 0
24274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24275: LD_ADDR_VAR 0 1
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_OWVAR 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 30
24294: PUSH
24295: LD_INT 29
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: ST_TO_ADDR
// if not tmp then
24311: LD_VAR 0 1
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 24333
// DestroyUnit ( tmp [ 1 ] ) ;
24320: LD_VAR 0 1
24324: PUSH
24325: LD_INT 1
24327: ARRAY
24328: PPUSH
24329: CALL_OW 65
// end ;
24333: PPOPN 1
24335: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24336: LD_EXP 47
24340: PUSH
24341: LD_EXP 85
24345: AND
24346: IFFALSE 24475
24348: GO 24350
24350: DISABLE
24351: LD_INT 0
24353: PPUSH
// begin uc_side := 0 ;
24354: LD_ADDR_OWVAR 20
24358: PUSH
24359: LD_INT 0
24361: ST_TO_ADDR
// uc_nation := nation_arabian ;
24362: LD_ADDR_OWVAR 21
24366: PUSH
24367: LD_INT 2
24369: ST_TO_ADDR
// hc_gallery :=  ;
24370: LD_ADDR_OWVAR 33
24374: PUSH
24375: LD_STRING 
24377: ST_TO_ADDR
// hc_name :=  ;
24378: LD_ADDR_OWVAR 26
24382: PUSH
24383: LD_STRING 
24385: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24386: LD_INT 1
24388: PPUSH
24389: LD_INT 11
24391: PPUSH
24392: LD_INT 10
24394: PPUSH
24395: CALL_OW 380
// un := CreateHuman ;
24399: LD_ADDR_VAR 0 1
24403: PUSH
24404: CALL_OW 44
24408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_INT 1
24416: PPUSH
24417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24421: LD_INT 35
24423: PPUSH
24424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24428: LD_VAR 0 1
24432: PPUSH
24433: LD_INT 22
24435: PUSH
24436: LD_OWVAR 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PPUSH
24445: CALL_OW 69
24449: PPUSH
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL_OW 74
24459: PPUSH
24460: CALL_OW 115
// until IsDead ( un ) ;
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 301
24473: IFFALSE 24421
// end ;
24475: PPOPN 1
24477: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24478: LD_EXP 47
24482: PUSH
24483: LD_EXP 87
24487: AND
24488: IFFALSE 24500
24490: GO 24492
24492: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24493: LD_STRING earthquake(getX(game), 0, 32)
24495: PPUSH
24496: CALL_OW 559
24500: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24501: LD_EXP 47
24505: PUSH
24506: LD_EXP 88
24510: AND
24511: IFFALSE 24602
24513: GO 24515
24515: DISABLE
24516: LD_INT 0
24518: PPUSH
// begin enable ;
24519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24520: LD_ADDR_VAR 0 1
24524: PUSH
24525: LD_INT 22
24527: PUSH
24528: LD_OWVAR 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 21
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 33
24549: PUSH
24550: LD_INT 3
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: LIST
24561: PPUSH
24562: CALL_OW 69
24566: ST_TO_ADDR
// if not tmp then
24567: LD_VAR 0 1
24571: NOT
24572: IFFALSE 24576
// exit ;
24574: GO 24602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24576: LD_VAR 0 1
24580: PUSH
24581: LD_INT 1
24583: PPUSH
24584: LD_VAR 0 1
24588: PPUSH
24589: CALL_OW 12
24593: ARRAY
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 234
// end ;
24602: PPOPN 1
24604: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24605: LD_EXP 47
24609: PUSH
24610: LD_EXP 89
24614: AND
24615: IFFALSE 24756
24617: GO 24619
24619: DISABLE
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
24624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_OWVAR 2
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 25
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PPUSH
24656: CALL_OW 69
24660: ST_TO_ADDR
// if not tmp then
24661: LD_VAR 0 3
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24756
// un := tmp [ rand ( 1 , tmp ) ] ;
24670: LD_ADDR_VAR 0 2
24674: PUSH
24675: LD_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: CALL_OW 12
24692: ARRAY
24693: ST_TO_ADDR
// if Crawls ( un ) then
24694: LD_VAR 0 2
24698: PPUSH
24699: CALL_OW 318
24703: IFFALSE 24714
// ComWalk ( un ) ;
24705: LD_VAR 0 2
24709: PPUSH
24710: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_INT 9
24721: PPUSH
24722: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24726: LD_INT 28
24728: PPUSH
24729: LD_OWVAR 2
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24741: LD_INT 29
24743: PPUSH
24744: LD_OWVAR 2
24748: PPUSH
24749: LD_INT 2
24751: PPUSH
24752: CALL_OW 322
// end ;
24756: PPOPN 3
24758: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24759: LD_EXP 47
24763: PUSH
24764: LD_EXP 90
24768: AND
24769: IFFALSE 24880
24771: GO 24773
24773: DISABLE
24774: LD_INT 0
24776: PPUSH
24777: PPUSH
24778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_OWVAR 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 25
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: ST_TO_ADDR
// if not tmp then
24815: LD_VAR 0 3
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24880
// un := tmp [ rand ( 1 , tmp ) ] ;
24824: LD_ADDR_VAR 0 2
24828: PUSH
24829: LD_VAR 0 3
24833: PUSH
24834: LD_INT 1
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: CALL_OW 12
24846: ARRAY
24847: ST_TO_ADDR
// if Crawls ( un ) then
24848: LD_VAR 0 2
24852: PPUSH
24853: CALL_OW 318
24857: IFFALSE 24868
// ComWalk ( un ) ;
24859: LD_VAR 0 2
24863: PPUSH
24864: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24868: LD_VAR 0 2
24872: PPUSH
24873: LD_INT 8
24875: PPUSH
24876: CALL_OW 336
// end ;
24880: PPOPN 3
24882: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24883: LD_EXP 47
24887: PUSH
24888: LD_EXP 91
24892: AND
24893: IFFALSE 25037
24895: GO 24897
24897: DISABLE
24898: LD_INT 0
24900: PPUSH
24901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24902: LD_ADDR_VAR 0 2
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_OWVAR 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 21
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 34
24934: PUSH
24935: LD_INT 12
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 34
24944: PUSH
24945: LD_INT 51
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 34
24954: PUSH
24955: LD_INT 32
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: LIST
24972: PPUSH
24973: CALL_OW 69
24977: ST_TO_ADDR
// if not tmp then
24978: LD_VAR 0 2
24982: NOT
24983: IFFALSE 24987
// exit ;
24985: GO 25037
// for i in tmp do
24987: LD_ADDR_VAR 0 1
24991: PUSH
24992: LD_VAR 0 2
24996: PUSH
24997: FOR_IN
24998: IFFALSE 25035
// if GetCargo ( i , mat_artifact ) = 0 then
25000: LD_VAR 0 1
25004: PPUSH
25005: LD_INT 4
25007: PPUSH
25008: CALL_OW 289
25012: PUSH
25013: LD_INT 0
25015: EQUAL
25016: IFFALSE 25033
// SetCargo ( i , mat_siberit , 100 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 3
25025: PPUSH
25026: LD_INT 100
25028: PPUSH
25029: CALL_OW 290
25033: GO 24997
25035: POP
25036: POP
// end ;
25037: PPOPN 2
25039: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25040: LD_EXP 47
25044: PUSH
25045: LD_EXP 92
25049: AND
25050: IFFALSE 25233
25052: GO 25054
25054: DISABLE
25055: LD_INT 0
25057: PPUSH
25058: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25059: LD_ADDR_VAR 0 2
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: LD_OWVAR 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PPUSH
25076: CALL_OW 69
25080: ST_TO_ADDR
// if not tmp then
25081: LD_VAR 0 2
25085: NOT
25086: IFFALSE 25090
// exit ;
25088: GO 25233
// for i := 1 to 2 do
25090: LD_ADDR_VAR 0 1
25094: PUSH
25095: DOUBLE
25096: LD_INT 1
25098: DEC
25099: ST_TO_ADDR
25100: LD_INT 2
25102: PUSH
25103: FOR_TO
25104: IFFALSE 25231
// begin uc_side := your_side ;
25106: LD_ADDR_OWVAR 20
25110: PUSH
25111: LD_OWVAR 2
25115: ST_TO_ADDR
// uc_nation := nation_american ;
25116: LD_ADDR_OWVAR 21
25120: PUSH
25121: LD_INT 1
25123: ST_TO_ADDR
// vc_chassis := us_morphling ;
25124: LD_ADDR_OWVAR 37
25128: PUSH
25129: LD_INT 5
25131: ST_TO_ADDR
// vc_engine := engine_siberite ;
25132: LD_ADDR_OWVAR 39
25136: PUSH
25137: LD_INT 3
25139: ST_TO_ADDR
// vc_control := control_computer ;
25140: LD_ADDR_OWVAR 38
25144: PUSH
25145: LD_INT 3
25147: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25148: LD_ADDR_OWVAR 40
25152: PUSH
25153: LD_INT 10
25155: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25156: LD_VAR 0 2
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: PPUSH
25165: CALL_OW 310
25169: NOT
25170: IFFALSE 25217
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25172: CALL_OW 45
25176: PPUSH
25177: LD_VAR 0 2
25181: PUSH
25182: LD_INT 1
25184: ARRAY
25185: PPUSH
25186: CALL_OW 250
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 1
25198: ARRAY
25199: PPUSH
25200: CALL_OW 251
25204: PPUSH
25205: LD_INT 12
25207: PPUSH
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 50
25215: GO 25229
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25217: CALL_OW 45
25221: PPUSH
25222: LD_INT 1
25224: PPUSH
25225: CALL_OW 51
// end ;
25229: GO 25103
25231: POP
25232: POP
// end ;
25233: PPOPN 2
25235: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25236: LD_EXP 47
25240: PUSH
25241: LD_EXP 93
25245: AND
25246: IFFALSE 25468
25248: GO 25250
25250: DISABLE
25251: LD_INT 0
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25259: LD_ADDR_VAR 0 6
25263: PUSH
25264: LD_INT 22
25266: PUSH
25267: LD_OWVAR 2
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 21
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: LD_INT 23
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: LIST
25307: PPUSH
25308: CALL_OW 69
25312: ST_TO_ADDR
// if not tmp then
25313: LD_VAR 0 6
25317: NOT
25318: IFFALSE 25322
// exit ;
25320: GO 25468
// s1 := rand ( 1 , 4 ) ;
25322: LD_ADDR_VAR 0 2
25326: PUSH
25327: LD_INT 1
25329: PPUSH
25330: LD_INT 4
25332: PPUSH
25333: CALL_OW 12
25337: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25338: LD_ADDR_VAR 0 4
25342: PUSH
25343: LD_VAR 0 6
25347: PUSH
25348: LD_INT 1
25350: ARRAY
25351: PPUSH
25352: LD_VAR 0 2
25356: PPUSH
25357: CALL_OW 259
25361: ST_TO_ADDR
// if s1 = 1 then
25362: LD_VAR 0 2
25366: PUSH
25367: LD_INT 1
25369: EQUAL
25370: IFFALSE 25390
// s2 := rand ( 2 , 4 ) else
25372: LD_ADDR_VAR 0 3
25376: PUSH
25377: LD_INT 2
25379: PPUSH
25380: LD_INT 4
25382: PPUSH
25383: CALL_OW 12
25387: ST_TO_ADDR
25388: GO 25398
// s2 := 1 ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_INT 1
25397: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25398: LD_ADDR_VAR 0 5
25402: PUSH
25403: LD_VAR 0 6
25407: PUSH
25408: LD_INT 1
25410: ARRAY
25411: PPUSH
25412: LD_VAR 0 3
25416: PPUSH
25417: CALL_OW 259
25421: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25422: LD_VAR 0 6
25426: PUSH
25427: LD_INT 1
25429: ARRAY
25430: PPUSH
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 5
25440: PPUSH
25441: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25445: LD_VAR 0 6
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: PPUSH
25454: LD_VAR 0 3
25458: PPUSH
25459: LD_VAR 0 4
25463: PPUSH
25464: CALL_OW 237
// end ;
25468: PPOPN 6
25470: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25471: LD_EXP 47
25475: PUSH
25476: LD_EXP 94
25480: AND
25481: IFFALSE 25560
25483: GO 25485
25485: DISABLE
25486: LD_INT 0
25488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25489: LD_ADDR_VAR 0 1
25493: PUSH
25494: LD_INT 22
25496: PUSH
25497: LD_OWVAR 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 30
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: ST_TO_ADDR
// if not tmp then
25525: LD_VAR 0 1
25529: NOT
25530: IFFALSE 25534
// exit ;
25532: GO 25560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25534: LD_VAR 0 1
25538: PUSH
25539: LD_INT 1
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 12
25551: ARRAY
25552: PPUSH
25553: LD_INT 1
25555: PPUSH
25556: CALL_OW 234
// end ;
25560: PPOPN 1
25562: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25563: LD_EXP 47
25567: PUSH
25568: LD_EXP 95
25572: AND
25573: IFFALSE 25685
25575: GO 25577
25577: DISABLE
25578: LD_INT 0
25580: PPUSH
25581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25582: LD_ADDR_VAR 0 2
25586: PUSH
25587: LD_INT 22
25589: PUSH
25590: LD_OWVAR 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 27
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 30
25614: PUSH
25615: LD_INT 26
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 30
25624: PUSH
25625: LD_INT 28
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PPUSH
25642: CALL_OW 69
25646: ST_TO_ADDR
// if not tmp then
25647: LD_VAR 0 2
25651: NOT
25652: IFFALSE 25656
// exit ;
25654: GO 25685
// for i in tmp do
25656: LD_ADDR_VAR 0 1
25660: PUSH
25661: LD_VAR 0 2
25665: PUSH
25666: FOR_IN
25667: IFFALSE 25683
// SetLives ( i , 1 ) ;
25669: LD_VAR 0 1
25673: PPUSH
25674: LD_INT 1
25676: PPUSH
25677: CALL_OW 234
25681: GO 25666
25683: POP
25684: POP
// end ;
25685: PPOPN 2
25687: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25688: LD_EXP 47
25692: PUSH
25693: LD_EXP 96
25697: AND
25698: IFFALSE 25985
25700: GO 25702
25702: DISABLE
25703: LD_INT 0
25705: PPUSH
25706: PPUSH
25707: PPUSH
// begin i := rand ( 1 , 7 ) ;
25708: LD_ADDR_VAR 0 1
25712: PUSH
25713: LD_INT 1
25715: PPUSH
25716: LD_INT 7
25718: PPUSH
25719: CALL_OW 12
25723: ST_TO_ADDR
// case i of 1 :
25724: LD_VAR 0 1
25728: PUSH
25729: LD_INT 1
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25737
25735: GO 25747
25737: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25738: LD_STRING earthquake(getX(game), 0, 32)
25740: PPUSH
25741: CALL_OW 559
25745: GO 25985
25747: LD_INT 2
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25769
25755: POP
// begin ToLua ( displayStucuk(); ) ;
25756: LD_STRING displayStucuk();
25758: PPUSH
25759: CALL_OW 559
// ResetFog ;
25763: CALL_OW 335
// end ; 3 :
25767: GO 25985
25769: LD_INT 3
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25777
25775: GO 25881
25777: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25778: LD_ADDR_VAR 0 2
25782: PUSH
25783: LD_INT 22
25785: PUSH
25786: LD_OWVAR 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 25
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PPUSH
25809: CALL_OW 69
25813: ST_TO_ADDR
// if not tmp then
25814: LD_VAR 0 2
25818: NOT
25819: IFFALSE 25823
// exit ;
25821: GO 25985
// un := tmp [ rand ( 1 , tmp ) ] ;
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_VAR 0 2
25832: PUSH
25833: LD_INT 1
25835: PPUSH
25836: LD_VAR 0 2
25840: PPUSH
25841: CALL_OW 12
25845: ARRAY
25846: ST_TO_ADDR
// if Crawls ( un ) then
25847: LD_VAR 0 3
25851: PPUSH
25852: CALL_OW 318
25856: IFFALSE 25867
// ComWalk ( un ) ;
25858: LD_VAR 0 3
25862: PPUSH
25863: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25867: LD_VAR 0 3
25871: PPUSH
25872: LD_INT 8
25874: PPUSH
25875: CALL_OW 336
// end ; 4 :
25879: GO 25985
25881: LD_INT 4
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25963
25889: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25890: LD_ADDR_VAR 0 2
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_OWVAR 2
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 30
25909: PUSH
25910: LD_INT 29
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: ST_TO_ADDR
// if not tmp then
25926: LD_VAR 0 2
25930: NOT
25931: IFFALSE 25935
// exit ;
25933: GO 25985
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25935: LD_VAR 0 2
25939: PUSH
25940: LD_INT 1
25942: ARRAY
25943: PPUSH
25944: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25948: LD_VAR 0 2
25952: PUSH
25953: LD_INT 1
25955: ARRAY
25956: PPUSH
25957: CALL_OW 65
// end ; 5 .. 7 :
25961: GO 25985
25963: LD_INT 5
25965: DOUBLE
25966: GREATEREQUAL
25967: IFFALSE 25975
25969: LD_INT 7
25971: DOUBLE
25972: LESSEQUAL
25973: IFTRUE 25977
25975: GO 25984
25977: POP
// StreamSibBomb ; end ;
25978: CALL 22222 0 0
25982: GO 25985
25984: POP
// end ;
25985: PPOPN 3
25987: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25988: LD_EXP 47
25992: PUSH
25993: LD_EXP 97
25997: AND
25998: IFFALSE 26154
26000: GO 26002
26002: DISABLE
26003: LD_INT 0
26005: PPUSH
26006: PPUSH
26007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26008: LD_ADDR_VAR 0 2
26012: PUSH
26013: LD_INT 81
26015: PUSH
26016: LD_OWVAR 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 21
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PPUSH
26057: CALL_OW 69
26061: ST_TO_ADDR
// if not tmp then
26062: LD_VAR 0 2
26066: NOT
26067: IFFALSE 26071
// exit ;
26069: GO 26154
// p := 0 ;
26071: LD_ADDR_VAR 0 3
26075: PUSH
26076: LD_INT 0
26078: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26079: LD_INT 35
26081: PPUSH
26082: CALL_OW 67
// p := p + 1 ;
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_INT 1
26098: PLUS
26099: ST_TO_ADDR
// for i in tmp do
26100: LD_ADDR_VAR 0 1
26104: PUSH
26105: LD_VAR 0 2
26109: PUSH
26110: FOR_IN
26111: IFFALSE 26142
// if GetLives ( i ) < 1000 then
26113: LD_VAR 0 1
26117: PPUSH
26118: CALL_OW 256
26122: PUSH
26123: LD_INT 1000
26125: LESS
26126: IFFALSE 26140
// SetLives ( i , 1000 ) ;
26128: LD_VAR 0 1
26132: PPUSH
26133: LD_INT 1000
26135: PPUSH
26136: CALL_OW 234
26140: GO 26110
26142: POP
26143: POP
// until p > 20 ;
26144: LD_VAR 0 3
26148: PUSH
26149: LD_INT 20
26151: GREATER
26152: IFFALSE 26079
// end ;
26154: PPOPN 3
26156: END
// every 0 0$1 trigger StreamModeActive and sTime do
26157: LD_EXP 47
26161: PUSH
26162: LD_EXP 98
26166: AND
26167: IFFALSE 26202
26169: GO 26171
26171: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26172: LD_INT 28
26174: PPUSH
26175: LD_OWVAR 2
26179: PPUSH
26180: LD_INT 2
26182: PPUSH
26183: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26187: LD_INT 30
26189: PPUSH
26190: LD_OWVAR 2
26194: PPUSH
26195: LD_INT 2
26197: PPUSH
26198: CALL_OW 322
// end ;
26202: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26203: LD_EXP 47
26207: PUSH
26208: LD_EXP 99
26212: AND
26213: IFFALSE 26334
26215: GO 26217
26217: DISABLE
26218: LD_INT 0
26220: PPUSH
26221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_INT 22
26229: PUSH
26230: LD_OWVAR 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: LD_INT 23
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: PPUSH
26271: CALL_OW 69
26275: ST_TO_ADDR
// if not tmp then
26276: LD_VAR 0 2
26280: NOT
26281: IFFALSE 26285
// exit ;
26283: GO 26334
// for i in tmp do
26285: LD_ADDR_VAR 0 1
26289: PUSH
26290: LD_VAR 0 2
26294: PUSH
26295: FOR_IN
26296: IFFALSE 26332
// begin if Crawls ( i ) then
26298: LD_VAR 0 1
26302: PPUSH
26303: CALL_OW 318
26307: IFFALSE 26318
// ComWalk ( i ) ;
26309: LD_VAR 0 1
26313: PPUSH
26314: CALL_OW 138
// SetClass ( i , 2 ) ;
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_INT 2
26325: PPUSH
26326: CALL_OW 336
// end ;
26330: GO 26295
26332: POP
26333: POP
// end ;
26334: PPOPN 2
26336: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26337: LD_EXP 47
26341: PUSH
26342: LD_EXP 100
26346: AND
26347: IFFALSE 26635
26349: GO 26351
26351: DISABLE
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
26356: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26357: LD_OWVAR 2
26361: PPUSH
26362: LD_INT 9
26364: PPUSH
26365: LD_INT 1
26367: PPUSH
26368: LD_INT 1
26370: PPUSH
26371: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26375: LD_INT 9
26377: PPUSH
26378: LD_OWVAR 2
26382: PPUSH
26383: CALL_OW 343
// uc_side := 9 ;
26387: LD_ADDR_OWVAR 20
26391: PUSH
26392: LD_INT 9
26394: ST_TO_ADDR
// uc_nation := 2 ;
26395: LD_ADDR_OWVAR 21
26399: PUSH
26400: LD_INT 2
26402: ST_TO_ADDR
// hc_name := Dark Warrior ;
26403: LD_ADDR_OWVAR 26
26407: PUSH
26408: LD_STRING Dark Warrior
26410: ST_TO_ADDR
// hc_gallery :=  ;
26411: LD_ADDR_OWVAR 33
26415: PUSH
26416: LD_STRING 
26418: ST_TO_ADDR
// hc_noskilllimit := true ;
26419: LD_ADDR_OWVAR 76
26423: PUSH
26424: LD_INT 1
26426: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26427: LD_ADDR_OWVAR 31
26431: PUSH
26432: LD_INT 30
26434: PUSH
26435: LD_INT 30
26437: PUSH
26438: LD_INT 30
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
// un := CreateHuman ;
26450: LD_ADDR_VAR 0 3
26454: PUSH
26455: CALL_OW 44
26459: ST_TO_ADDR
// hc_noskilllimit := false ;
26460: LD_ADDR_OWVAR 76
26464: PUSH
26465: LD_INT 0
26467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26468: LD_VAR 0 3
26472: PPUSH
26473: LD_INT 1
26475: PPUSH
26476: CALL_OW 51
// ToLua ( playRanger() ) ;
26480: LD_STRING playRanger()
26482: PPUSH
26483: CALL_OW 559
// p := 0 ;
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_INT 0
26494: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26495: LD_INT 35
26497: PPUSH
26498: CALL_OW 67
// p := p + 1 ;
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_VAR 0 2
26511: PUSH
26512: LD_INT 1
26514: PLUS
26515: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26516: LD_VAR 0 3
26520: PPUSH
26521: CALL_OW 256
26525: PUSH
26526: LD_INT 1000
26528: LESS
26529: IFFALSE 26543
// SetLives ( un , 1000 ) ;
26531: LD_VAR 0 3
26535: PPUSH
26536: LD_INT 1000
26538: PPUSH
26539: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26543: LD_VAR 0 3
26547: PPUSH
26548: LD_INT 81
26550: PUSH
26551: LD_OWVAR 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 91
26562: PUSH
26563: LD_VAR 0 3
26567: PUSH
26568: LD_INT 30
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: CALL_OW 74
26594: PPUSH
26595: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26599: LD_VAR 0 2
26603: PUSH
26604: LD_INT 80
26606: GREATER
26607: PUSH
26608: LD_VAR 0 3
26612: PPUSH
26613: CALL_OW 301
26617: OR
26618: IFFALSE 26495
// if un then
26620: LD_VAR 0 3
26624: IFFALSE 26635
// RemoveUnit ( un ) ;
26626: LD_VAR 0 3
26630: PPUSH
26631: CALL_OW 64
// end ;
26635: PPOPN 3
26637: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26638: LD_EXP 101
26642: IFFALSE 26758
26644: GO 26646
26646: DISABLE
26647: LD_INT 0
26649: PPUSH
26650: PPUSH
26651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_INT 81
26659: PUSH
26660: LD_OWVAR 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 21
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PPUSH
26683: CALL_OW 69
26687: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26688: LD_STRING playComputer()
26690: PPUSH
26691: CALL_OW 559
// if not tmp then
26695: LD_VAR 0 2
26699: NOT
26700: IFFALSE 26704
// exit ;
26702: GO 26758
// for i in tmp do
26704: LD_ADDR_VAR 0 1
26708: PUSH
26709: LD_VAR 0 2
26713: PUSH
26714: FOR_IN
26715: IFFALSE 26756
// for j := 1 to 4 do
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: DOUBLE
26723: LD_INT 1
26725: DEC
26726: ST_TO_ADDR
26727: LD_INT 4
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26752
// SetSkill ( i , j , 10 ) ;
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_VAR 0 3
26742: PPUSH
26743: LD_INT 10
26745: PPUSH
26746: CALL_OW 237
26750: GO 26730
26752: POP
26753: POP
26754: GO 26714
26756: POP
26757: POP
// end ;
26758: PPOPN 3
26760: END
// every 0 0$1 trigger s30 do var i , tmp ;
26761: LD_EXP 102
26765: IFFALSE 26834
26767: GO 26769
26769: DISABLE
26770: LD_INT 0
26772: PPUSH
26773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26774: LD_ADDR_VAR 0 2
26778: PUSH
26779: LD_INT 22
26781: PUSH
26782: LD_OWVAR 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 69
26795: ST_TO_ADDR
// if not tmp then
26796: LD_VAR 0 2
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26834
// for i in tmp do
26805: LD_ADDR_VAR 0 1
26809: PUSH
26810: LD_VAR 0 2
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26832
// SetLives ( i , 300 ) ;
26818: LD_VAR 0 1
26822: PPUSH
26823: LD_INT 300
26825: PPUSH
26826: CALL_OW 234
26830: GO 26815
26832: POP
26833: POP
// end ;
26834: PPOPN 2
26836: END
// every 0 0$1 trigger s60 do var i , tmp ;
26837: LD_EXP 103
26841: IFFALSE 26910
26843: GO 26845
26845: DISABLE
26846: LD_INT 0
26848: PPUSH
26849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26850: LD_ADDR_VAR 0 2
26854: PUSH
26855: LD_INT 22
26857: PUSH
26858: LD_OWVAR 2
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PPUSH
26867: CALL_OW 69
26871: ST_TO_ADDR
// if not tmp then
26872: LD_VAR 0 2
26876: NOT
26877: IFFALSE 26881
// exit ;
26879: GO 26910
// for i in tmp do
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: LD_VAR 0 2
26890: PUSH
26891: FOR_IN
26892: IFFALSE 26908
// SetLives ( i , 600 ) ;
26894: LD_VAR 0 1
26898: PPUSH
26899: LD_INT 600
26901: PPUSH
26902: CALL_OW 234
26906: GO 26891
26908: POP
26909: POP
// end ;
26910: PPOPN 2
26912: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26913: LD_INT 0
26915: PPUSH
// case cmd of 301 :
26916: LD_VAR 0 1
26920: PUSH
26921: LD_INT 301
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26961
26929: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26930: LD_VAR 0 6
26934: PPUSH
26935: LD_VAR 0 7
26939: PPUSH
26940: LD_VAR 0 8
26944: PPUSH
26945: LD_VAR 0 4
26949: PPUSH
26950: LD_VAR 0 5
26954: PPUSH
26955: CALL 28170 0 5
26959: GO 27082
26961: LD_INT 302
26963: DOUBLE
26964: EQUAL
26965: IFTRUE 26969
26967: GO 27006
26969: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26970: LD_VAR 0 6
26974: PPUSH
26975: LD_VAR 0 7
26979: PPUSH
26980: LD_VAR 0 8
26984: PPUSH
26985: LD_VAR 0 9
26989: PPUSH
26990: LD_VAR 0 4
26994: PPUSH
26995: LD_VAR 0 5
26999: PPUSH
27000: CALL 28261 0 6
27004: GO 27082
27006: LD_INT 303
27008: DOUBLE
27009: EQUAL
27010: IFTRUE 27014
27012: GO 27051
27014: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27015: LD_VAR 0 6
27019: PPUSH
27020: LD_VAR 0 7
27024: PPUSH
27025: LD_VAR 0 8
27029: PPUSH
27030: LD_VAR 0 9
27034: PPUSH
27035: LD_VAR 0 4
27039: PPUSH
27040: LD_VAR 0 5
27044: PPUSH
27045: CALL 27087 0 6
27049: GO 27082
27051: LD_INT 304
27053: DOUBLE
27054: EQUAL
27055: IFTRUE 27059
27057: GO 27081
27059: POP
// hHackTeleport ( unit , x , y ) ; end ;
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_VAR 0 4
27069: PPUSH
27070: LD_VAR 0 5
27074: PPUSH
27075: CALL 28854 0 3
27079: GO 27082
27081: POP
// end ;
27082: LD_VAR 0 12
27086: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27087: LD_INT 0
27089: PPUSH
27090: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27091: LD_VAR 0 1
27095: PUSH
27096: LD_INT 1
27098: LESS
27099: PUSH
27100: LD_VAR 0 1
27104: PUSH
27105: LD_INT 3
27107: GREATER
27108: OR
27109: PUSH
27110: LD_VAR 0 5
27114: PPUSH
27115: LD_VAR 0 6
27119: PPUSH
27120: CALL_OW 428
27124: OR
27125: IFFALSE 27129
// exit ;
27127: GO 27857
// uc_side := your_side ;
27129: LD_ADDR_OWVAR 20
27133: PUSH
27134: LD_OWVAR 2
27138: ST_TO_ADDR
// uc_nation := nation ;
27139: LD_ADDR_OWVAR 21
27143: PUSH
27144: LD_VAR 0 1
27148: ST_TO_ADDR
// bc_level = 1 ;
27149: LD_ADDR_OWVAR 43
27153: PUSH
27154: LD_INT 1
27156: ST_TO_ADDR
// case btype of 1 :
27157: LD_VAR 0 2
27161: PUSH
27162: LD_INT 1
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27181
27170: POP
// bc_type := b_depot ; 2 :
27171: LD_ADDR_OWVAR 42
27175: PUSH
27176: LD_INT 0
27178: ST_TO_ADDR
27179: GO 27801
27181: LD_INT 2
27183: DOUBLE
27184: EQUAL
27185: IFTRUE 27189
27187: GO 27200
27189: POP
// bc_type := b_warehouse ; 3 :
27190: LD_ADDR_OWVAR 42
27194: PUSH
27195: LD_INT 1
27197: ST_TO_ADDR
27198: GO 27801
27200: LD_INT 3
27202: DOUBLE
27203: EQUAL
27204: IFTRUE 27208
27206: GO 27219
27208: POP
// bc_type := b_lab ; 4 .. 9 :
27209: LD_ADDR_OWVAR 42
27213: PUSH
27214: LD_INT 6
27216: ST_TO_ADDR
27217: GO 27801
27219: LD_INT 4
27221: DOUBLE
27222: GREATEREQUAL
27223: IFFALSE 27231
27225: LD_INT 9
27227: DOUBLE
27228: LESSEQUAL
27229: IFTRUE 27233
27231: GO 27293
27233: POP
// begin bc_type := b_lab_half ;
27234: LD_ADDR_OWVAR 42
27238: PUSH
27239: LD_INT 7
27241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27242: LD_ADDR_OWVAR 44
27246: PUSH
27247: LD_INT 10
27249: PUSH
27250: LD_INT 11
27252: PUSH
27253: LD_INT 12
27255: PUSH
27256: LD_INT 15
27258: PUSH
27259: LD_INT 14
27261: PUSH
27262: LD_INT 13
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: PUSH
27273: LD_VAR 0 2
27277: PUSH
27278: LD_INT 3
27280: MINUS
27281: ARRAY
27282: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
27283: LD_ADDR_OWVAR 45
27287: PUSH
27288: LD_INT 9
27290: ST_TO_ADDR
// end ; 10 .. 13 :
27291: GO 27801
27293: LD_INT 10
27295: DOUBLE
27296: GREATEREQUAL
27297: IFFALSE 27305
27299: LD_INT 13
27301: DOUBLE
27302: LESSEQUAL
27303: IFTRUE 27307
27305: GO 27384
27307: POP
// begin bc_type := b_lab_full ;
27308: LD_ADDR_OWVAR 42
27312: PUSH
27313: LD_INT 8
27315: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27316: LD_ADDR_OWVAR 44
27320: PUSH
27321: LD_INT 10
27323: PUSH
27324: LD_INT 12
27326: PUSH
27327: LD_INT 14
27329: PUSH
27330: LD_INT 13
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: PUSH
27339: LD_VAR 0 2
27343: PUSH
27344: LD_INT 9
27346: MINUS
27347: ARRAY
27348: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27349: LD_ADDR_OWVAR 45
27353: PUSH
27354: LD_INT 11
27356: PUSH
27357: LD_INT 15
27359: PUSH
27360: LD_INT 12
27362: PUSH
27363: LD_INT 15
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: PUSH
27372: LD_VAR 0 2
27376: PUSH
27377: LD_INT 9
27379: MINUS
27380: ARRAY
27381: ST_TO_ADDR
// end ; 14 :
27382: GO 27801
27384: LD_INT 14
27386: DOUBLE
27387: EQUAL
27388: IFTRUE 27392
27390: GO 27403
27392: POP
// bc_type := b_workshop ; 15 :
27393: LD_ADDR_OWVAR 42
27397: PUSH
27398: LD_INT 2
27400: ST_TO_ADDR
27401: GO 27801
27403: LD_INT 15
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27422
27411: POP
// bc_type := b_factory ; 16 :
27412: LD_ADDR_OWVAR 42
27416: PUSH
27417: LD_INT 3
27419: ST_TO_ADDR
27420: GO 27801
27422: LD_INT 16
27424: DOUBLE
27425: EQUAL
27426: IFTRUE 27430
27428: GO 27441
27430: POP
// bc_type := b_ext_gun ; 17 :
27431: LD_ADDR_OWVAR 42
27435: PUSH
27436: LD_INT 17
27438: ST_TO_ADDR
27439: GO 27801
27441: LD_INT 17
27443: DOUBLE
27444: EQUAL
27445: IFTRUE 27449
27447: GO 27477
27449: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27450: LD_ADDR_OWVAR 42
27454: PUSH
27455: LD_INT 19
27457: PUSH
27458: LD_INT 23
27460: PUSH
27461: LD_INT 19
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PUSH
27469: LD_VAR 0 1
27473: ARRAY
27474: ST_TO_ADDR
27475: GO 27801
27477: LD_INT 18
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27496
27485: POP
// bc_type := b_ext_radar ; 19 :
27486: LD_ADDR_OWVAR 42
27490: PUSH
27491: LD_INT 20
27493: ST_TO_ADDR
27494: GO 27801
27496: LD_INT 19
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27515
27504: POP
// bc_type := b_ext_radio ; 20 :
27505: LD_ADDR_OWVAR 42
27509: PUSH
27510: LD_INT 22
27512: ST_TO_ADDR
27513: GO 27801
27515: LD_INT 20
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27534
27523: POP
// bc_type := b_ext_siberium ; 21 :
27524: LD_ADDR_OWVAR 42
27528: PUSH
27529: LD_INT 21
27531: ST_TO_ADDR
27532: GO 27801
27534: LD_INT 21
27536: DOUBLE
27537: EQUAL
27538: IFTRUE 27542
27540: GO 27553
27542: POP
// bc_type := b_ext_computer ; 22 :
27543: LD_ADDR_OWVAR 42
27547: PUSH
27548: LD_INT 24
27550: ST_TO_ADDR
27551: GO 27801
27553: LD_INT 22
27555: DOUBLE
27556: EQUAL
27557: IFTRUE 27561
27559: GO 27572
27561: POP
// bc_type := b_ext_track ; 23 :
27562: LD_ADDR_OWVAR 42
27566: PUSH
27567: LD_INT 16
27569: ST_TO_ADDR
27570: GO 27801
27572: LD_INT 23
27574: DOUBLE
27575: EQUAL
27576: IFTRUE 27580
27578: GO 27591
27580: POP
// bc_type := b_ext_laser ; 24 :
27581: LD_ADDR_OWVAR 42
27585: PUSH
27586: LD_INT 25
27588: ST_TO_ADDR
27589: GO 27801
27591: LD_INT 24
27593: DOUBLE
27594: EQUAL
27595: IFTRUE 27599
27597: GO 27610
27599: POP
// bc_type := b_control_tower ; 25 :
27600: LD_ADDR_OWVAR 42
27604: PUSH
27605: LD_INT 36
27607: ST_TO_ADDR
27608: GO 27801
27610: LD_INT 25
27612: DOUBLE
27613: EQUAL
27614: IFTRUE 27618
27616: GO 27629
27618: POP
// bc_type := b_breastwork ; 26 :
27619: LD_ADDR_OWVAR 42
27623: PUSH
27624: LD_INT 31
27626: ST_TO_ADDR
27627: GO 27801
27629: LD_INT 26
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27648
27637: POP
// bc_type := b_bunker ; 27 :
27638: LD_ADDR_OWVAR 42
27642: PUSH
27643: LD_INT 32
27645: ST_TO_ADDR
27646: GO 27801
27648: LD_INT 27
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27656
27654: GO 27667
27656: POP
// bc_type := b_turret ; 28 :
27657: LD_ADDR_OWVAR 42
27661: PUSH
27662: LD_INT 33
27664: ST_TO_ADDR
27665: GO 27801
27667: LD_INT 28
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 27686
27675: POP
// bc_type := b_armoury ; 29 :
27676: LD_ADDR_OWVAR 42
27680: PUSH
27681: LD_INT 4
27683: ST_TO_ADDR
27684: GO 27801
27686: LD_INT 29
27688: DOUBLE
27689: EQUAL
27690: IFTRUE 27694
27692: GO 27705
27694: POP
// bc_type := b_barracks ; 30 :
27695: LD_ADDR_OWVAR 42
27699: PUSH
27700: LD_INT 5
27702: ST_TO_ADDR
27703: GO 27801
27705: LD_INT 30
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27724
27713: POP
// bc_type := b_solar_power ; 31 :
27714: LD_ADDR_OWVAR 42
27718: PUSH
27719: LD_INT 27
27721: ST_TO_ADDR
27722: GO 27801
27724: LD_INT 31
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27743
27732: POP
// bc_type := b_oil_power ; 32 :
27733: LD_ADDR_OWVAR 42
27737: PUSH
27738: LD_INT 26
27740: ST_TO_ADDR
27741: GO 27801
27743: LD_INT 32
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27762
27751: POP
// bc_type := b_siberite_power ; 33 :
27752: LD_ADDR_OWVAR 42
27756: PUSH
27757: LD_INT 28
27759: ST_TO_ADDR
27760: GO 27801
27762: LD_INT 33
27764: DOUBLE
27765: EQUAL
27766: IFTRUE 27770
27768: GO 27781
27770: POP
// bc_type := b_oil_mine ; 34 :
27771: LD_ADDR_OWVAR 42
27775: PUSH
27776: LD_INT 29
27778: ST_TO_ADDR
27779: GO 27801
27781: LD_INT 34
27783: DOUBLE
27784: EQUAL
27785: IFTRUE 27789
27787: GO 27800
27789: POP
// bc_type := b_siberite_mine ; end ;
27790: LD_ADDR_OWVAR 42
27794: PUSH
27795: LD_INT 30
27797: ST_TO_ADDR
27798: GO 27801
27800: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27801: LD_ADDR_VAR 0 8
27805: PUSH
27806: LD_VAR 0 5
27810: PPUSH
27811: LD_VAR 0 6
27815: PPUSH
27816: LD_VAR 0 3
27820: PPUSH
27821: CALL_OW 47
27825: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27826: LD_OWVAR 42
27830: PUSH
27831: LD_INT 32
27833: PUSH
27834: LD_INT 33
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: IN
27841: IFFALSE 27857
// PlaceWeaponTurret ( b , weapon ) ;
27843: LD_VAR 0 8
27847: PPUSH
27848: LD_VAR 0 4
27852: PPUSH
27853: CALL_OW 431
// end ;
27857: LD_VAR 0 7
27861: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27862: LD_INT 0
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27868: LD_ADDR_VAR 0 4
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_OWVAR 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 30
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 69
27921: ST_TO_ADDR
// if not tmp then
27922: LD_VAR 0 4
27926: NOT
27927: IFFALSE 27931
// exit ;
27929: GO 27990
// for i in tmp do
27931: LD_ADDR_VAR 0 2
27935: PUSH
27936: LD_VAR 0 4
27940: PUSH
27941: FOR_IN
27942: IFFALSE 27988
// for j = 1 to 3 do
27944: LD_ADDR_VAR 0 3
27948: PUSH
27949: DOUBLE
27950: LD_INT 1
27952: DEC
27953: ST_TO_ADDR
27954: LD_INT 3
27956: PUSH
27957: FOR_TO
27958: IFFALSE 27984
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27960: LD_VAR 0 2
27964: PPUSH
27965: CALL_OW 274
27969: PPUSH
27970: LD_VAR 0 3
27974: PPUSH
27975: LD_INT 99999
27977: PPUSH
27978: CALL_OW 277
27982: GO 27957
27984: POP
27985: POP
27986: GO 27941
27988: POP
27989: POP
// end ;
27990: LD_VAR 0 1
27994: RET
// export function hHackSetLevel10 ; var i , j ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28000: LD_ADDR_VAR 0 2
28004: PUSH
28005: LD_INT 21
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PPUSH
28015: CALL_OW 69
28019: PUSH
28020: FOR_IN
28021: IFFALSE 28073
// if IsSelected ( i ) then
28023: LD_VAR 0 2
28027: PPUSH
28028: CALL_OW 306
28032: IFFALSE 28071
// begin for j := 1 to 4 do
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: DOUBLE
28040: LD_INT 1
28042: DEC
28043: ST_TO_ADDR
28044: LD_INT 4
28046: PUSH
28047: FOR_TO
28048: IFFALSE 28069
// SetSkill ( i , j , 10 ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: LD_VAR 0 3
28059: PPUSH
28060: LD_INT 10
28062: PPUSH
28063: CALL_OW 237
28067: GO 28047
28069: POP
28070: POP
// end ;
28071: GO 28020
28073: POP
28074: POP
// end ;
28075: LD_VAR 0 1
28079: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
28084: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28085: LD_ADDR_VAR 0 2
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_OWVAR 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: PUSH
28121: FOR_IN
28122: IFFALSE 28163
// begin for j := 1 to 4 do
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: DOUBLE
28130: LD_INT 1
28132: DEC
28133: ST_TO_ADDR
28134: LD_INT 4
28136: PUSH
28137: FOR_TO
28138: IFFALSE 28159
// SetSkill ( i , j , 10 ) ;
28140: LD_VAR 0 2
28144: PPUSH
28145: LD_VAR 0 3
28149: PPUSH
28150: LD_INT 10
28152: PPUSH
28153: CALL_OW 237
28157: GO 28137
28159: POP
28160: POP
// end ;
28161: GO 28121
28163: POP
28164: POP
// end ;
28165: LD_VAR 0 1
28169: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28170: LD_INT 0
28172: PPUSH
// uc_side := your_side ;
28173: LD_ADDR_OWVAR 20
28177: PUSH
28178: LD_OWVAR 2
28182: ST_TO_ADDR
// uc_nation := nation ;
28183: LD_ADDR_OWVAR 21
28187: PUSH
28188: LD_VAR 0 1
28192: ST_TO_ADDR
// InitHc ;
28193: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28197: LD_INT 0
28199: PPUSH
28200: LD_VAR 0 2
28204: PPUSH
28205: LD_VAR 0 3
28209: PPUSH
28210: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28214: LD_VAR 0 4
28218: PPUSH
28219: LD_VAR 0 5
28223: PPUSH
28224: CALL_OW 428
28228: PUSH
28229: LD_INT 0
28231: EQUAL
28232: IFFALSE 28256
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28234: CALL_OW 44
28238: PPUSH
28239: LD_VAR 0 4
28243: PPUSH
28244: LD_VAR 0 5
28248: PPUSH
28249: LD_INT 1
28251: PPUSH
28252: CALL_OW 48
// end ;
28256: LD_VAR 0 6
28260: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28261: LD_INT 0
28263: PPUSH
28264: PPUSH
// uc_side := your_side ;
28265: LD_ADDR_OWVAR 20
28269: PUSH
28270: LD_OWVAR 2
28274: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: LD_INT 4
28291: PUSH
28292: LD_INT 5
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: IN
28302: IFFALSE 28314
// uc_nation := nation_american else
28304: LD_ADDR_OWVAR 21
28308: PUSH
28309: LD_INT 1
28311: ST_TO_ADDR
28312: GO 28357
// if chassis in [ 11 , 12 , 13 , 14 ] then
28314: LD_VAR 0 1
28318: PUSH
28319: LD_INT 11
28321: PUSH
28322: LD_INT 12
28324: PUSH
28325: LD_INT 13
28327: PUSH
28328: LD_INT 14
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: IN
28337: IFFALSE 28349
// uc_nation := nation_arabian else
28339: LD_ADDR_OWVAR 21
28343: PUSH
28344: LD_INT 2
28346: ST_TO_ADDR
28347: GO 28357
// uc_nation := nation_russian ;
28349: LD_ADDR_OWVAR 21
28353: PUSH
28354: LD_INT 3
28356: ST_TO_ADDR
// vc_chassis := chassis ;
28357: LD_ADDR_OWVAR 37
28361: PUSH
28362: LD_VAR 0 1
28366: ST_TO_ADDR
// vc_engine := engine ;
28367: LD_ADDR_OWVAR 39
28371: PUSH
28372: LD_VAR 0 2
28376: ST_TO_ADDR
// vc_control := control ;
28377: LD_ADDR_OWVAR 38
28381: PUSH
28382: LD_VAR 0 3
28386: ST_TO_ADDR
// vc_weapon := weapon ;
28387: LD_ADDR_OWVAR 40
28391: PUSH
28392: LD_VAR 0 4
28396: ST_TO_ADDR
// un := CreateVehicle ;
28397: LD_ADDR_VAR 0 8
28401: PUSH
28402: CALL_OW 45
28406: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28407: LD_VAR 0 8
28411: PPUSH
28412: LD_INT 0
28414: PPUSH
28415: LD_INT 5
28417: PPUSH
28418: CALL_OW 12
28422: PPUSH
28423: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28427: LD_VAR 0 8
28431: PPUSH
28432: LD_VAR 0 5
28436: PPUSH
28437: LD_VAR 0 6
28441: PPUSH
28442: LD_INT 1
28444: PPUSH
28445: CALL_OW 48
// end ;
28449: LD_VAR 0 7
28453: RET
// export hInvincible ; every 1 do
28454: GO 28456
28456: DISABLE
// hInvincible := [ ] ;
28457: LD_ADDR_EXP 104
28461: PUSH
28462: EMPTY
28463: ST_TO_ADDR
28464: END
// every 10 do var i ;
28465: GO 28467
28467: DISABLE
28468: LD_INT 0
28470: PPUSH
// begin enable ;
28471: ENABLE
// if not hInvincible then
28472: LD_EXP 104
28476: NOT
28477: IFFALSE 28481
// exit ;
28479: GO 28525
// for i in hInvincible do
28481: LD_ADDR_VAR 0 1
28485: PUSH
28486: LD_EXP 104
28490: PUSH
28491: FOR_IN
28492: IFFALSE 28523
// if GetLives ( i ) < 1000 then
28494: LD_VAR 0 1
28498: PPUSH
28499: CALL_OW 256
28503: PUSH
28504: LD_INT 1000
28506: LESS
28507: IFFALSE 28521
// SetLives ( i , 1000 ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_INT 1000
28516: PPUSH
28517: CALL_OW 234
28521: GO 28491
28523: POP
28524: POP
// end ;
28525: PPOPN 1
28527: END
// export function hHackInvincible ; var i ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28532: LD_ADDR_VAR 0 2
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: LD_INT 21
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 21
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 69
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28632
// if IsSelected ( i ) then
28573: LD_VAR 0 2
28577: PPUSH
28578: CALL_OW 306
28582: IFFALSE 28630
// begin if i in hInvincible then
28584: LD_VAR 0 2
28588: PUSH
28589: LD_EXP 104
28593: IN
28594: IFFALSE 28614
// hInvincible := hInvincible diff i else
28596: LD_ADDR_EXP 104
28600: PUSH
28601: LD_EXP 104
28605: PUSH
28606: LD_VAR 0 2
28610: DIFF
28611: ST_TO_ADDR
28612: GO 28630
// hInvincible := hInvincible union i ;
28614: LD_ADDR_EXP 104
28618: PUSH
28619: LD_EXP 104
28623: PUSH
28624: LD_VAR 0 2
28628: UNION
28629: ST_TO_ADDR
// end ;
28630: GO 28570
28632: POP
28633: POP
// end ;
28634: LD_VAR 0 1
28638: RET
// export function hHackInvisible ; var i , j ; begin
28639: LD_INT 0
28641: PPUSH
28642: PPUSH
28643: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28644: LD_ADDR_VAR 0 2
28648: PUSH
28649: LD_INT 21
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PPUSH
28659: CALL_OW 69
28663: PUSH
28664: FOR_IN
28665: IFFALSE 28689
// if IsSelected ( i ) then
28667: LD_VAR 0 2
28671: PPUSH
28672: CALL_OW 306
28676: IFFALSE 28687
// ComForceInvisible ( i ) ;
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL_OW 496
28687: GO 28664
28689: POP
28690: POP
// end ;
28691: LD_VAR 0 1
28695: RET
// export function hHackChangeYourSide ; begin
28696: LD_INT 0
28698: PPUSH
// if your_side = 8 then
28699: LD_OWVAR 2
28703: PUSH
28704: LD_INT 8
28706: EQUAL
28707: IFFALSE 28719
// your_side := 0 else
28709: LD_ADDR_OWVAR 2
28713: PUSH
28714: LD_INT 0
28716: ST_TO_ADDR
28717: GO 28733
// your_side := your_side + 1 ;
28719: LD_ADDR_OWVAR 2
28723: PUSH
28724: LD_OWVAR 2
28728: PUSH
28729: LD_INT 1
28731: PLUS
28732: ST_TO_ADDR
// end ;
28733: LD_VAR 0 1
28737: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28738: LD_INT 0
28740: PPUSH
28741: PPUSH
28742: PPUSH
// for i in all_units do
28743: LD_ADDR_VAR 0 2
28747: PUSH
28748: LD_OWVAR 3
28752: PUSH
28753: FOR_IN
28754: IFFALSE 28832
// if IsSelected ( i ) then
28756: LD_VAR 0 2
28760: PPUSH
28761: CALL_OW 306
28765: IFFALSE 28830
// begin j := GetSide ( i ) ;
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_VAR 0 2
28776: PPUSH
28777: CALL_OW 255
28781: ST_TO_ADDR
// if j = 8 then
28782: LD_VAR 0 3
28786: PUSH
28787: LD_INT 8
28789: EQUAL
28790: IFFALSE 28802
// j := 0 else
28792: LD_ADDR_VAR 0 3
28796: PUSH
28797: LD_INT 0
28799: ST_TO_ADDR
28800: GO 28816
// j := j + 1 ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_VAR 0 3
28811: PUSH
28812: LD_INT 1
28814: PLUS
28815: ST_TO_ADDR
// SetSide ( i , j ) ;
28816: LD_VAR 0 2
28820: PPUSH
28821: LD_VAR 0 3
28825: PPUSH
28826: CALL_OW 235
// end ;
28830: GO 28753
28832: POP
28833: POP
// end ;
28834: LD_VAR 0 1
28838: RET
// export function hHackFog ; begin
28839: LD_INT 0
28841: PPUSH
// FogOff ( true ) ;
28842: LD_INT 1
28844: PPUSH
28845: CALL_OW 344
// end ;
28849: LD_VAR 0 1
28853: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28854: LD_INT 0
28856: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28857: LD_VAR 0 1
28861: PPUSH
28862: LD_VAR 0 2
28866: PPUSH
28867: LD_VAR 0 3
28871: PPUSH
28872: LD_INT 1
28874: PPUSH
28875: LD_INT 1
28877: PPUSH
28878: CALL_OW 483
// CenterOnXY ( x , y ) ;
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_VAR 0 3
28891: PPUSH
28892: CALL_OW 84
// end ;
28896: LD_VAR 0 4
28900: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28901: LD_INT 0
28903: PPUSH
28904: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28905: LD_VAR 0 1
28909: NOT
28910: PUSH
28911: LD_VAR 0 2
28915: PPUSH
28916: LD_VAR 0 3
28920: PPUSH
28921: CALL_OW 488
28925: NOT
28926: OR
28927: PUSH
28928: LD_VAR 0 1
28932: PPUSH
28933: CALL_OW 266
28937: PUSH
28938: LD_INT 3
28940: NONEQUAL
28941: PUSH
28942: LD_VAR 0 1
28946: PPUSH
28947: CALL_OW 247
28951: PUSH
28952: LD_INT 1
28954: EQUAL
28955: NOT
28956: AND
28957: OR
28958: IFFALSE 28962
// exit ;
28960: GO 29111
// if GetType ( factory ) = unit_human then
28962: LD_VAR 0 1
28966: PPUSH
28967: CALL_OW 247
28971: PUSH
28972: LD_INT 1
28974: EQUAL
28975: IFFALSE 28992
// factory := IsInUnit ( factory ) ;
28977: LD_ADDR_VAR 0 1
28981: PUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: CALL_OW 310
28991: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL_OW 266
29001: PUSH
29002: LD_INT 3
29004: NONEQUAL
29005: IFFALSE 29009
// exit ;
29007: GO 29111
// if HexInfo ( x , y ) = factory then
29009: LD_VAR 0 2
29013: PPUSH
29014: LD_VAR 0 3
29018: PPUSH
29019: CALL_OW 428
29023: PUSH
29024: LD_VAR 0 1
29028: EQUAL
29029: IFFALSE 29056
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29031: LD_ADDR_EXP 105
29035: PUSH
29036: LD_EXP 105
29040: PPUSH
29041: LD_VAR 0 1
29045: PPUSH
29046: LD_INT 0
29048: PPUSH
29049: CALL_OW 1
29053: ST_TO_ADDR
29054: GO 29107
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29056: LD_ADDR_EXP 105
29060: PUSH
29061: LD_EXP 105
29065: PPUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 255
29080: PUSH
29081: LD_VAR 0 1
29085: PUSH
29086: LD_VAR 0 2
29090: PUSH
29091: LD_VAR 0 3
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: PPUSH
29102: CALL_OW 1
29106: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29107: CALL 29116 0 0
// end ;
29111: LD_VAR 0 4
29115: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
29120: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29121: LD_STRING resetFactoryWaypoint();
29123: PPUSH
29124: CALL_OW 559
// if factoryWaypoints then
29128: LD_EXP 105
29132: IFFALSE 29258
// begin list := PrepareArray ( factoryWaypoints ) ;
29134: LD_ADDR_VAR 0 3
29138: PUSH
29139: LD_EXP 105
29143: PPUSH
29144: CALL 71661 0 1
29148: ST_TO_ADDR
// for i := 1 to list do
29149: LD_ADDR_VAR 0 2
29153: PUSH
29154: DOUBLE
29155: LD_INT 1
29157: DEC
29158: ST_TO_ADDR
29159: LD_VAR 0 3
29163: PUSH
29164: FOR_TO
29165: IFFALSE 29256
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29167: LD_STRING setFactoryWaypointXY(
29169: PUSH
29170: LD_VAR 0 3
29174: PUSH
29175: LD_VAR 0 2
29179: ARRAY
29180: PUSH
29181: LD_INT 1
29183: ARRAY
29184: STR
29185: PUSH
29186: LD_STRING ,
29188: STR
29189: PUSH
29190: LD_VAR 0 3
29194: PUSH
29195: LD_VAR 0 2
29199: ARRAY
29200: PUSH
29201: LD_INT 2
29203: ARRAY
29204: STR
29205: PUSH
29206: LD_STRING ,
29208: STR
29209: PUSH
29210: LD_VAR 0 3
29214: PUSH
29215: LD_VAR 0 2
29219: ARRAY
29220: PUSH
29221: LD_INT 3
29223: ARRAY
29224: STR
29225: PUSH
29226: LD_STRING ,
29228: STR
29229: PUSH
29230: LD_VAR 0 3
29234: PUSH
29235: LD_VAR 0 2
29239: ARRAY
29240: PUSH
29241: LD_INT 4
29243: ARRAY
29244: STR
29245: PUSH
29246: LD_STRING )
29248: STR
29249: PPUSH
29250: CALL_OW 559
29254: GO 29164
29256: POP
29257: POP
// end ; end ;
29258: LD_VAR 0 1
29262: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29263: LD_INT 0
29265: PPUSH
// if HexInfo ( x , y ) = warehouse then
29266: LD_VAR 0 2
29270: PPUSH
29271: LD_VAR 0 3
29275: PPUSH
29276: CALL_OW 428
29280: PUSH
29281: LD_VAR 0 1
29285: EQUAL
29286: IFFALSE 29313
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29288: LD_ADDR_EXP 106
29292: PUSH
29293: LD_EXP 106
29297: PPUSH
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_INT 0
29305: PPUSH
29306: CALL_OW 1
29310: ST_TO_ADDR
29311: GO 29364
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29313: LD_ADDR_EXP 106
29317: PUSH
29318: LD_EXP 106
29322: PPUSH
29323: LD_VAR 0 1
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 255
29337: PUSH
29338: LD_VAR 0 1
29342: PUSH
29343: LD_VAR 0 2
29347: PUSH
29348: LD_VAR 0 3
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: PPUSH
29359: CALL_OW 1
29363: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29364: CALL 29373 0 0
// end ;
29368: LD_VAR 0 4
29372: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29373: LD_INT 0
29375: PPUSH
29376: PPUSH
29377: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29378: LD_STRING resetWarehouseGatheringPoints();
29380: PPUSH
29381: CALL_OW 559
// if warehouseGatheringPoints then
29385: LD_EXP 106
29389: IFFALSE 29515
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29391: LD_ADDR_VAR 0 3
29395: PUSH
29396: LD_EXP 106
29400: PPUSH
29401: CALL 71661 0 1
29405: ST_TO_ADDR
// for i := 1 to list do
29406: LD_ADDR_VAR 0 2
29410: PUSH
29411: DOUBLE
29412: LD_INT 1
29414: DEC
29415: ST_TO_ADDR
29416: LD_VAR 0 3
29420: PUSH
29421: FOR_TO
29422: IFFALSE 29513
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29424: LD_STRING setWarehouseGatheringPointXY(
29426: PUSH
29427: LD_VAR 0 3
29431: PUSH
29432: LD_VAR 0 2
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: STR
29442: PUSH
29443: LD_STRING ,
29445: STR
29446: PUSH
29447: LD_VAR 0 3
29451: PUSH
29452: LD_VAR 0 2
29456: ARRAY
29457: PUSH
29458: LD_INT 2
29460: ARRAY
29461: STR
29462: PUSH
29463: LD_STRING ,
29465: STR
29466: PUSH
29467: LD_VAR 0 3
29471: PUSH
29472: LD_VAR 0 2
29476: ARRAY
29477: PUSH
29478: LD_INT 3
29480: ARRAY
29481: STR
29482: PUSH
29483: LD_STRING ,
29485: STR
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_VAR 0 2
29496: ARRAY
29497: PUSH
29498: LD_INT 4
29500: ARRAY
29501: STR
29502: PUSH
29503: LD_STRING )
29505: STR
29506: PPUSH
29507: CALL_OW 559
29511: GO 29421
29513: POP
29514: POP
// end ; end ;
29515: LD_VAR 0 1
29519: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29520: LD_EXP 106
29524: IFFALSE 30209
29526: GO 29528
29528: DISABLE
29529: LD_INT 0
29531: PPUSH
29532: PPUSH
29533: PPUSH
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
29539: PPUSH
// begin enable ;
29540: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_EXP 106
29550: PPUSH
29551: CALL 71661 0 1
29555: ST_TO_ADDR
// if not list then
29556: LD_VAR 0 3
29560: NOT
29561: IFFALSE 29565
// exit ;
29563: GO 30209
// for i := 1 to list do
29565: LD_ADDR_VAR 0 1
29569: PUSH
29570: DOUBLE
29571: LD_INT 1
29573: DEC
29574: ST_TO_ADDR
29575: LD_VAR 0 3
29579: PUSH
29580: FOR_TO
29581: IFFALSE 30207
// begin depot := list [ i ] [ 2 ] ;
29583: LD_ADDR_VAR 0 8
29587: PUSH
29588: LD_VAR 0 3
29592: PUSH
29593: LD_VAR 0 1
29597: ARRAY
29598: PUSH
29599: LD_INT 2
29601: ARRAY
29602: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
29603: LD_ADDR_VAR 0 5
29607: PUSH
29608: LD_VAR 0 3
29612: PUSH
29613: LD_VAR 0 1
29617: ARRAY
29618: PUSH
29619: LD_INT 1
29621: ARRAY
29622: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
29623: LD_VAR 0 8
29627: PPUSH
29628: CALL_OW 301
29632: PUSH
29633: LD_VAR 0 5
29637: PUSH
29638: LD_VAR 0 8
29642: PPUSH
29643: CALL_OW 255
29647: NONEQUAL
29648: OR
29649: IFFALSE 29678
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
29651: LD_ADDR_EXP 106
29655: PUSH
29656: LD_EXP 106
29660: PPUSH
29661: LD_VAR 0 8
29665: PPUSH
29666: LD_INT 0
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
// exit ;
29674: POP
29675: POP
29676: GO 30209
// end ; x := list [ i ] [ 3 ] ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_VAR 0 3
29687: PUSH
29688: LD_VAR 0 1
29692: ARRAY
29693: PUSH
29694: LD_INT 3
29696: ARRAY
29697: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
29698: LD_ADDR_VAR 0 7
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: ARRAY
29713: PUSH
29714: LD_INT 4
29716: ARRAY
29717: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
29718: LD_ADDR_VAR 0 9
29722: PUSH
29723: LD_VAR 0 6
29727: PPUSH
29728: LD_VAR 0 7
29732: PPUSH
29733: LD_INT 16
29735: PPUSH
29736: CALL 70249 0 3
29740: ST_TO_ADDR
// if not cratesNearbyPoint then
29741: LD_VAR 0 9
29745: NOT
29746: IFFALSE 29752
// exit ;
29748: POP
29749: POP
29750: GO 30209
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29752: LD_ADDR_VAR 0 4
29756: PUSH
29757: LD_INT 22
29759: PUSH
29760: LD_VAR 0 5
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 3
29771: PUSH
29772: LD_INT 60
29774: PUSH
29775: EMPTY
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 91
29784: PUSH
29785: LD_VAR 0 8
29789: PUSH
29790: LD_INT 6
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 25
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 25
29813: PUSH
29814: LD_INT 16
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 69
29836: PUSH
29837: LD_VAR 0 8
29841: PPUSH
29842: CALL_OW 313
29846: PPUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 60
29852: PUSH
29853: EMPTY
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 25
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 25
29875: PUSH
29876: LD_INT 16
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PPUSH
29892: CALL_OW 72
29896: UNION
29897: ST_TO_ADDR
// if tmp then
29898: LD_VAR 0 4
29902: IFFALSE 29982
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29904: LD_ADDR_VAR 0 4
29908: PUSH
29909: LD_VAR 0 4
29913: PPUSH
29914: LD_INT 3
29916: PPUSH
29917: CALL 68218 0 2
29921: ST_TO_ADDR
// for j in tmp do
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_VAR 0 4
29931: PUSH
29932: FOR_IN
29933: IFFALSE 29976
// begin if IsInUnit ( j ) then
29935: LD_VAR 0 2
29939: PPUSH
29940: CALL_OW 310
29944: IFFALSE 29955
// ComExit ( j ) ;
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL 68301 0 1
// AddComCollect ( j , x , y ) ;
29955: LD_VAR 0 2
29959: PPUSH
29960: LD_VAR 0 6
29964: PPUSH
29965: LD_VAR 0 7
29969: PPUSH
29970: CALL_OW 177
// end ;
29974: GO 29932
29976: POP
29977: POP
// exit ;
29978: POP
29979: POP
29980: GO 30209
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29982: LD_ADDR_VAR 0 4
29986: PUSH
29987: LD_INT 22
29989: PUSH
29990: LD_VAR 0 5
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 91
30001: PUSH
30002: LD_VAR 0 8
30006: PUSH
30007: LD_INT 8
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: LD_INT 34
30020: PUSH
30021: LD_INT 12
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 34
30030: PUSH
30031: LD_INT 51
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 34
30040: PUSH
30041: LD_INT 32
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 34
30050: PUSH
30051: LD_INT 89
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: LIST
30069: PPUSH
30070: CALL_OW 69
30074: ST_TO_ADDR
// if tmp then
30075: LD_VAR 0 4
30079: IFFALSE 30205
// begin for j in tmp do
30081: LD_ADDR_VAR 0 2
30085: PUSH
30086: LD_VAR 0 4
30090: PUSH
30091: FOR_IN
30092: IFFALSE 30203
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30094: LD_VAR 0 2
30098: PPUSH
30099: CALL_OW 262
30103: PUSH
30104: LD_INT 3
30106: EQUAL
30107: PUSH
30108: LD_VAR 0 2
30112: PPUSH
30113: CALL_OW 261
30117: PUSH
30118: LD_INT 20
30120: GREATER
30121: OR
30122: PUSH
30123: LD_VAR 0 2
30127: PPUSH
30128: CALL_OW 314
30132: NOT
30133: AND
30134: PUSH
30135: LD_VAR 0 2
30139: PPUSH
30140: CALL_OW 263
30144: PUSH
30145: LD_INT 1
30147: NONEQUAL
30148: PUSH
30149: LD_VAR 0 2
30153: PPUSH
30154: CALL_OW 311
30158: OR
30159: AND
30160: IFFALSE 30201
// begin ComCollect ( j , x , y ) ;
30162: LD_VAR 0 2
30166: PPUSH
30167: LD_VAR 0 6
30171: PPUSH
30172: LD_VAR 0 7
30176: PPUSH
30177: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_VAR 0 8
30190: PPUSH
30191: CALL_OW 172
// exit ;
30195: POP
30196: POP
30197: POP
30198: POP
30199: GO 30209
// end ;
30201: GO 30091
30203: POP
30204: POP
// end ; end ;
30205: GO 29580
30207: POP
30208: POP
// end ; end_of_file end_of_file
30209: PPOPN 9
30211: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30212: LD_INT 0
30214: PPUSH
30215: PPUSH
// if exist_mode then
30216: LD_VAR 0 2
30220: IFFALSE 30245
// unit := CreateCharacter ( prefix & ident ) else
30222: LD_ADDR_VAR 0 5
30226: PUSH
30227: LD_VAR 0 3
30231: PUSH
30232: LD_VAR 0 1
30236: STR
30237: PPUSH
30238: CALL_OW 34
30242: ST_TO_ADDR
30243: GO 30260
// unit := NewCharacter ( ident ) ;
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL_OW 25
30259: ST_TO_ADDR
// result := unit ;
30260: LD_ADDR_VAR 0 4
30264: PUSH
30265: LD_VAR 0 5
30269: ST_TO_ADDR
// end ;
30270: LD_VAR 0 4
30274: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30275: LD_INT 0
30277: PPUSH
30278: PPUSH
// if not side or not nation then
30279: LD_VAR 0 1
30283: NOT
30284: PUSH
30285: LD_VAR 0 2
30289: NOT
30290: OR
30291: IFFALSE 30295
// exit ;
30293: GO 31063
// case nation of nation_american :
30295: LD_VAR 0 2
30299: PUSH
30300: LD_INT 1
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30522
30308: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_INT 35
30316: PUSH
30317: LD_INT 45
30319: PUSH
30320: LD_INT 46
30322: PUSH
30323: LD_INT 47
30325: PUSH
30326: LD_INT 82
30328: PUSH
30329: LD_INT 83
30331: PUSH
30332: LD_INT 84
30334: PUSH
30335: LD_INT 85
30337: PUSH
30338: LD_INT 86
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 6
30349: PUSH
30350: LD_INT 15
30352: PUSH
30353: LD_INT 16
30355: PUSH
30356: LD_INT 7
30358: PUSH
30359: LD_INT 12
30361: PUSH
30362: LD_INT 13
30364: PUSH
30365: LD_INT 10
30367: PUSH
30368: LD_INT 14
30370: PUSH
30371: LD_INT 20
30373: PUSH
30374: LD_INT 21
30376: PUSH
30377: LD_INT 22
30379: PUSH
30380: LD_INT 25
30382: PUSH
30383: LD_INT 32
30385: PUSH
30386: LD_INT 27
30388: PUSH
30389: LD_INT 36
30391: PUSH
30392: LD_INT 69
30394: PUSH
30395: LD_INT 39
30397: PUSH
30398: LD_INT 34
30400: PUSH
30401: LD_INT 40
30403: PUSH
30404: LD_INT 48
30406: PUSH
30407: LD_INT 49
30409: PUSH
30410: LD_INT 50
30412: PUSH
30413: LD_INT 51
30415: PUSH
30416: LD_INT 52
30418: PUSH
30419: LD_INT 53
30421: PUSH
30422: LD_INT 54
30424: PUSH
30425: LD_INT 55
30427: PUSH
30428: LD_INT 56
30430: PUSH
30431: LD_INT 57
30433: PUSH
30434: LD_INT 58
30436: PUSH
30437: LD_INT 59
30439: PUSH
30440: LD_INT 60
30442: PUSH
30443: LD_INT 61
30445: PUSH
30446: LD_INT 62
30448: PUSH
30449: LD_INT 80
30451: PUSH
30452: LD_INT 82
30454: PUSH
30455: LD_INT 83
30457: PUSH
30458: LD_INT 84
30460: PUSH
30461: LD_INT 85
30463: PUSH
30464: LD_INT 86
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 30987
30522: LD_INT 2
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30756
30530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30531: LD_ADDR_VAR 0 4
30535: PUSH
30536: LD_INT 35
30538: PUSH
30539: LD_INT 45
30541: PUSH
30542: LD_INT 46
30544: PUSH
30545: LD_INT 47
30547: PUSH
30548: LD_INT 82
30550: PUSH
30551: LD_INT 83
30553: PUSH
30554: LD_INT 84
30556: PUSH
30557: LD_INT 85
30559: PUSH
30560: LD_INT 87
30562: PUSH
30563: LD_INT 70
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 11
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: LD_INT 4
30577: PUSH
30578: LD_INT 5
30580: PUSH
30581: LD_INT 6
30583: PUSH
30584: LD_INT 15
30586: PUSH
30587: LD_INT 18
30589: PUSH
30590: LD_INT 7
30592: PUSH
30593: LD_INT 17
30595: PUSH
30596: LD_INT 8
30598: PUSH
30599: LD_INT 20
30601: PUSH
30602: LD_INT 21
30604: PUSH
30605: LD_INT 22
30607: PUSH
30608: LD_INT 72
30610: PUSH
30611: LD_INT 26
30613: PUSH
30614: LD_INT 69
30616: PUSH
30617: LD_INT 39
30619: PUSH
30620: LD_INT 40
30622: PUSH
30623: LD_INT 41
30625: PUSH
30626: LD_INT 42
30628: PUSH
30629: LD_INT 43
30631: PUSH
30632: LD_INT 48
30634: PUSH
30635: LD_INT 49
30637: PUSH
30638: LD_INT 50
30640: PUSH
30641: LD_INT 51
30643: PUSH
30644: LD_INT 52
30646: PUSH
30647: LD_INT 53
30649: PUSH
30650: LD_INT 54
30652: PUSH
30653: LD_INT 55
30655: PUSH
30656: LD_INT 56
30658: PUSH
30659: LD_INT 60
30661: PUSH
30662: LD_INT 61
30664: PUSH
30665: LD_INT 62
30667: PUSH
30668: LD_INT 66
30670: PUSH
30671: LD_INT 67
30673: PUSH
30674: LD_INT 68
30676: PUSH
30677: LD_INT 81
30679: PUSH
30680: LD_INT 82
30682: PUSH
30683: LD_INT 83
30685: PUSH
30686: LD_INT 84
30688: PUSH
30689: LD_INT 85
30691: PUSH
30692: LD_INT 87
30694: PUSH
30695: LD_INT 88
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
30754: GO 30987
30756: LD_INT 3
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30986
30764: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30765: LD_ADDR_VAR 0 4
30769: PUSH
30770: LD_INT 46
30772: PUSH
30773: LD_INT 47
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 82
30784: PUSH
30785: LD_INT 83
30787: PUSH
30788: LD_INT 84
30790: PUSH
30791: LD_INT 85
30793: PUSH
30794: LD_INT 86
30796: PUSH
30797: LD_INT 11
30799: PUSH
30800: LD_INT 9
30802: PUSH
30803: LD_INT 20
30805: PUSH
30806: LD_INT 19
30808: PUSH
30809: LD_INT 21
30811: PUSH
30812: LD_INT 24
30814: PUSH
30815: LD_INT 22
30817: PUSH
30818: LD_INT 25
30820: PUSH
30821: LD_INT 28
30823: PUSH
30824: LD_INT 29
30826: PUSH
30827: LD_INT 30
30829: PUSH
30830: LD_INT 31
30832: PUSH
30833: LD_INT 37
30835: PUSH
30836: LD_INT 38
30838: PUSH
30839: LD_INT 32
30841: PUSH
30842: LD_INT 27
30844: PUSH
30845: LD_INT 33
30847: PUSH
30848: LD_INT 69
30850: PUSH
30851: LD_INT 39
30853: PUSH
30854: LD_INT 34
30856: PUSH
30857: LD_INT 40
30859: PUSH
30860: LD_INT 71
30862: PUSH
30863: LD_INT 23
30865: PUSH
30866: LD_INT 44
30868: PUSH
30869: LD_INT 48
30871: PUSH
30872: LD_INT 49
30874: PUSH
30875: LD_INT 50
30877: PUSH
30878: LD_INT 51
30880: PUSH
30881: LD_INT 52
30883: PUSH
30884: LD_INT 53
30886: PUSH
30887: LD_INT 54
30889: PUSH
30890: LD_INT 55
30892: PUSH
30893: LD_INT 56
30895: PUSH
30896: LD_INT 57
30898: PUSH
30899: LD_INT 58
30901: PUSH
30902: LD_INT 59
30904: PUSH
30905: LD_INT 63
30907: PUSH
30908: LD_INT 64
30910: PUSH
30911: LD_INT 65
30913: PUSH
30914: LD_INT 82
30916: PUSH
30917: LD_INT 83
30919: PUSH
30920: LD_INT 84
30922: PUSH
30923: LD_INT 85
30925: PUSH
30926: LD_INT 86
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
30984: GO 30987
30986: POP
// if state > - 1 and state < 3 then
30987: LD_VAR 0 3
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: GREATER
30996: PUSH
30997: LD_VAR 0 3
31001: PUSH
31002: LD_INT 3
31004: LESS
31005: AND
31006: IFFALSE 31063
// for i in result do
31008: LD_ADDR_VAR 0 5
31012: PUSH
31013: LD_VAR 0 4
31017: PUSH
31018: FOR_IN
31019: IFFALSE 31061
// if GetTech ( i , side ) <> state then
31021: LD_VAR 0 5
31025: PPUSH
31026: LD_VAR 0 1
31030: PPUSH
31031: CALL_OW 321
31035: PUSH
31036: LD_VAR 0 3
31040: NONEQUAL
31041: IFFALSE 31059
// result := result diff i ;
31043: LD_ADDR_VAR 0 4
31047: PUSH
31048: LD_VAR 0 4
31052: PUSH
31053: LD_VAR 0 5
31057: DIFF
31058: ST_TO_ADDR
31059: GO 31018
31061: POP
31062: POP
// end ;
31063: LD_VAR 0 4
31067: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31068: LD_INT 0
31070: PPUSH
31071: PPUSH
31072: PPUSH
// result := true ;
31073: LD_ADDR_VAR 0 3
31077: PUSH
31078: LD_INT 1
31080: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_VAR 0 2
31090: PPUSH
31091: CALL_OW 480
31095: ST_TO_ADDR
// if not tmp then
31096: LD_VAR 0 5
31100: NOT
31101: IFFALSE 31105
// exit ;
31103: GO 31154
// for i in tmp do
31105: LD_ADDR_VAR 0 4
31109: PUSH
31110: LD_VAR 0 5
31114: PUSH
31115: FOR_IN
31116: IFFALSE 31152
// if GetTech ( i , side ) <> state_researched then
31118: LD_VAR 0 4
31122: PPUSH
31123: LD_VAR 0 1
31127: PPUSH
31128: CALL_OW 321
31132: PUSH
31133: LD_INT 2
31135: NONEQUAL
31136: IFFALSE 31150
// begin result := false ;
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 0
31145: ST_TO_ADDR
// exit ;
31146: POP
31147: POP
31148: GO 31154
// end ;
31150: GO 31115
31152: POP
31153: POP
// end ;
31154: LD_VAR 0 3
31158: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31174: LD_VAR 0 1
31178: NOT
31179: PUSH
31180: LD_VAR 0 1
31184: PPUSH
31185: CALL_OW 257
31189: PUSH
31190: LD_INT 9
31192: NONEQUAL
31193: OR
31194: IFFALSE 31198
// exit ;
31196: GO 31771
// side := GetSide ( unit ) ;
31198: LD_ADDR_VAR 0 9
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL_OW 255
31212: ST_TO_ADDR
// tech_space := tech_spacanom ;
31213: LD_ADDR_VAR 0 12
31217: PUSH
31218: LD_INT 29
31220: ST_TO_ADDR
// tech_time := tech_taurad ;
31221: LD_ADDR_VAR 0 13
31225: PUSH
31226: LD_INT 28
31228: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31229: LD_ADDR_VAR 0 11
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 310
31243: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31244: LD_VAR 0 11
31248: PPUSH
31249: CALL_OW 247
31253: PUSH
31254: LD_INT 2
31256: EQUAL
31257: IFFALSE 31261
// exit ;
31259: GO 31771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31261: LD_ADDR_VAR 0 8
31265: PUSH
31266: LD_INT 81
31268: PUSH
31269: LD_VAR 0 9
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 69
31303: ST_TO_ADDR
// if not tmp then
31304: LD_VAR 0 8
31308: NOT
31309: IFFALSE 31313
// exit ;
31311: GO 31771
// if in_unit then
31313: LD_VAR 0 11
31317: IFFALSE 31341
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31319: LD_ADDR_VAR 0 10
31323: PUSH
31324: LD_VAR 0 8
31328: PPUSH
31329: LD_VAR 0 11
31333: PPUSH
31334: CALL_OW 74
31338: ST_TO_ADDR
31339: GO 31361
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31341: LD_ADDR_VAR 0 10
31345: PUSH
31346: LD_VAR 0 8
31350: PPUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 74
31360: ST_TO_ADDR
// if not enemy then
31361: LD_VAR 0 10
31365: NOT
31366: IFFALSE 31370
// exit ;
31368: GO 31771
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31370: LD_VAR 0 11
31374: PUSH
31375: LD_VAR 0 11
31379: PPUSH
31380: LD_VAR 0 10
31384: PPUSH
31385: CALL_OW 296
31389: PUSH
31390: LD_INT 13
31392: GREATER
31393: AND
31394: PUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_VAR 0 10
31404: PPUSH
31405: CALL_OW 296
31409: PUSH
31410: LD_INT 12
31412: GREATER
31413: OR
31414: IFFALSE 31418
// exit ;
31416: GO 31771
// missile := [ 1 ] ;
31418: LD_ADDR_VAR 0 14
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31429: LD_VAR 0 9
31433: PPUSH
31434: LD_VAR 0 12
31438: PPUSH
31439: CALL_OW 325
31443: IFFALSE 31472
// missile := Replace ( missile , missile + 1 , 2 ) ;
31445: LD_ADDR_VAR 0 14
31449: PUSH
31450: LD_VAR 0 14
31454: PPUSH
31455: LD_VAR 0 14
31459: PUSH
31460: LD_INT 1
31462: PLUS
31463: PPUSH
31464: LD_INT 2
31466: PPUSH
31467: CALL_OW 1
31471: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31472: LD_VAR 0 9
31476: PPUSH
31477: LD_VAR 0 13
31481: PPUSH
31482: CALL_OW 325
31486: PUSH
31487: LD_VAR 0 10
31491: PPUSH
31492: CALL_OW 255
31496: PPUSH
31497: LD_VAR 0 13
31501: PPUSH
31502: CALL_OW 325
31506: NOT
31507: AND
31508: IFFALSE 31537
// missile := Replace ( missile , missile + 1 , 3 ) ;
31510: LD_ADDR_VAR 0 14
31514: PUSH
31515: LD_VAR 0 14
31519: PPUSH
31520: LD_VAR 0 14
31524: PUSH
31525: LD_INT 1
31527: PLUS
31528: PPUSH
31529: LD_INT 3
31531: PPUSH
31532: CALL_OW 1
31536: ST_TO_ADDR
// if missile < 2 then
31537: LD_VAR 0 14
31541: PUSH
31542: LD_INT 2
31544: LESS
31545: IFFALSE 31549
// exit ;
31547: GO 31771
// x := GetX ( enemy ) ;
31549: LD_ADDR_VAR 0 4
31553: PUSH
31554: LD_VAR 0 10
31558: PPUSH
31559: CALL_OW 250
31563: ST_TO_ADDR
// y := GetY ( enemy ) ;
31564: LD_ADDR_VAR 0 5
31568: PUSH
31569: LD_VAR 0 10
31573: PPUSH
31574: CALL_OW 251
31578: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31579: LD_ADDR_VAR 0 6
31583: PUSH
31584: LD_VAR 0 4
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PPUSH
31593: LD_INT 1
31595: PPUSH
31596: CALL_OW 12
31600: PLUS
31601: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31602: LD_ADDR_VAR 0 7
31606: PUSH
31607: LD_VAR 0 5
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: CALL_OW 12
31623: PLUS
31624: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31625: LD_VAR 0 6
31629: PPUSH
31630: LD_VAR 0 7
31634: PPUSH
31635: CALL_OW 488
31639: NOT
31640: IFFALSE 31662
// begin _x := x ;
31642: LD_ADDR_VAR 0 6
31646: PUSH
31647: LD_VAR 0 4
31651: ST_TO_ADDR
// _y := y ;
31652: LD_ADDR_VAR 0 7
31656: PUSH
31657: LD_VAR 0 5
31661: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: LD_INT 1
31669: PPUSH
31670: LD_VAR 0 14
31674: PPUSH
31675: CALL_OW 12
31679: ST_TO_ADDR
// case i of 1 :
31680: LD_VAR 0 3
31684: PUSH
31685: LD_INT 1
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31710
31693: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31694: LD_VAR 0 1
31698: PPUSH
31699: LD_VAR 0 10
31703: PPUSH
31704: CALL_OW 115
31708: GO 31771
31710: LD_INT 2
31712: DOUBLE
31713: EQUAL
31714: IFTRUE 31718
31716: GO 31740
31718: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31719: LD_VAR 0 1
31723: PPUSH
31724: LD_VAR 0 6
31728: PPUSH
31729: LD_VAR 0 7
31733: PPUSH
31734: CALL_OW 153
31738: GO 31771
31740: LD_INT 3
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31770
31748: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31749: LD_VAR 0 1
31753: PPUSH
31754: LD_VAR 0 6
31758: PPUSH
31759: LD_VAR 0 7
31763: PPUSH
31764: CALL_OW 154
31768: GO 31771
31770: POP
// end ;
31771: LD_VAR 0 2
31775: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
// if not unit or not building then
31784: LD_VAR 0 1
31788: NOT
31789: PUSH
31790: LD_VAR 0 2
31794: NOT
31795: OR
31796: IFFALSE 31800
// exit ;
31798: GO 31958
// x := GetX ( building ) ;
31800: LD_ADDR_VAR 0 5
31804: PUSH
31805: LD_VAR 0 2
31809: PPUSH
31810: CALL_OW 250
31814: ST_TO_ADDR
// y := GetY ( building ) ;
31815: LD_ADDR_VAR 0 6
31819: PUSH
31820: LD_VAR 0 2
31824: PPUSH
31825: CALL_OW 251
31829: ST_TO_ADDR
// for i = 0 to 5 do
31830: LD_ADDR_VAR 0 4
31834: PUSH
31835: DOUBLE
31836: LD_INT 0
31838: DEC
31839: ST_TO_ADDR
31840: LD_INT 5
31842: PUSH
31843: FOR_TO
31844: IFFALSE 31956
// begin _x := ShiftX ( x , i , 3 ) ;
31846: LD_ADDR_VAR 0 7
31850: PUSH
31851: LD_VAR 0 5
31855: PPUSH
31856: LD_VAR 0 4
31860: PPUSH
31861: LD_INT 3
31863: PPUSH
31864: CALL_OW 272
31868: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31869: LD_ADDR_VAR 0 8
31873: PUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_VAR 0 4
31883: PPUSH
31884: LD_INT 3
31886: PPUSH
31887: CALL_OW 273
31891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31892: LD_VAR 0 7
31896: PPUSH
31897: LD_VAR 0 8
31901: PPUSH
31902: CALL_OW 488
31906: NOT
31907: IFFALSE 31911
// continue ;
31909: GO 31843
// if HexInfo ( _x , _y ) = 0 then
31911: LD_VAR 0 7
31915: PPUSH
31916: LD_VAR 0 8
31920: PPUSH
31921: CALL_OW 428
31925: PUSH
31926: LD_INT 0
31928: EQUAL
31929: IFFALSE 31954
// begin ComMoveXY ( unit , _x , _y ) ;
31931: LD_VAR 0 1
31935: PPUSH
31936: LD_VAR 0 7
31940: PPUSH
31941: LD_VAR 0 8
31945: PPUSH
31946: CALL_OW 111
// exit ;
31950: POP
31951: POP
31952: GO 31958
// end ; end ;
31954: GO 31843
31956: POP
31957: POP
// end ;
31958: LD_VAR 0 3
31962: RET
// export function ScanBase ( side , base_area ) ; begin
31963: LD_INT 0
31965: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31966: LD_ADDR_VAR 0 3
31970: PUSH
31971: LD_VAR 0 2
31975: PPUSH
31976: LD_INT 81
31978: PUSH
31979: LD_VAR 0 1
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PPUSH
31988: CALL_OW 70
31992: ST_TO_ADDR
// end ;
31993: LD_VAR 0 3
31997: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31998: LD_INT 0
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
// result := false ;
32004: LD_ADDR_VAR 0 2
32008: PUSH
32009: LD_INT 0
32011: ST_TO_ADDR
// side := GetSide ( unit ) ;
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: CALL_OW 255
32026: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32027: LD_ADDR_VAR 0 4
32031: PUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL_OW 248
32041: ST_TO_ADDR
// case nat of 1 :
32042: LD_VAR 0 4
32046: PUSH
32047: LD_INT 1
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32066
32055: POP
// tech := tech_lassight ; 2 :
32056: LD_ADDR_VAR 0 5
32060: PUSH
32061: LD_INT 12
32063: ST_TO_ADDR
32064: GO 32105
32066: LD_INT 2
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32085
32074: POP
// tech := tech_mortar ; 3 :
32075: LD_ADDR_VAR 0 5
32079: PUSH
32080: LD_INT 41
32082: ST_TO_ADDR
32083: GO 32105
32085: LD_INT 3
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32104
32093: POP
// tech := tech_bazooka ; end ;
32094: LD_ADDR_VAR 0 5
32098: PUSH
32099: LD_INT 44
32101: ST_TO_ADDR
32102: GO 32105
32104: POP
// if Researched ( side , tech ) then
32105: LD_VAR 0 3
32109: PPUSH
32110: LD_VAR 0 5
32114: PPUSH
32115: CALL_OW 325
32119: IFFALSE 32146
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32121: LD_ADDR_VAR 0 2
32125: PUSH
32126: LD_INT 5
32128: PUSH
32129: LD_INT 8
32131: PUSH
32132: LD_INT 9
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: PUSH
32140: LD_VAR 0 4
32144: ARRAY
32145: ST_TO_ADDR
// end ;
32146: LD_VAR 0 2
32150: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
32155: PPUSH
// if not mines then
32156: LD_VAR 0 2
32160: NOT
32161: IFFALSE 32165
// exit ;
32163: GO 32309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32165: LD_ADDR_VAR 0 5
32169: PUSH
32170: LD_INT 81
32172: PUSH
32173: LD_VAR 0 1
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: LD_INT 21
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: ST_TO_ADDR
// for i in mines do
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_VAR 0 2
32217: PUSH
32218: FOR_IN
32219: IFFALSE 32307
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32221: LD_VAR 0 4
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: PPUSH
32230: LD_VAR 0 4
32234: PUSH
32235: LD_INT 2
32237: ARRAY
32238: PPUSH
32239: CALL_OW 458
32243: NOT
32244: IFFALSE 32248
// continue ;
32246: GO 32218
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32248: LD_VAR 0 4
32252: PUSH
32253: LD_INT 1
32255: ARRAY
32256: PPUSH
32257: LD_VAR 0 4
32261: PUSH
32262: LD_INT 2
32264: ARRAY
32265: PPUSH
32266: CALL_OW 428
32270: PUSH
32271: LD_VAR 0 5
32275: IN
32276: IFFALSE 32305
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32278: LD_VAR 0 4
32282: PUSH
32283: LD_INT 1
32285: ARRAY
32286: PPUSH
32287: LD_VAR 0 4
32291: PUSH
32292: LD_INT 2
32294: ARRAY
32295: PPUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 456
// end ;
32305: GO 32218
32307: POP
32308: POP
// end ;
32309: LD_VAR 0 3
32313: RET
// export function Count ( array ) ; begin
32314: LD_INT 0
32316: PPUSH
// result := array + 0 ;
32317: LD_ADDR_VAR 0 2
32321: PUSH
32322: LD_VAR 0 1
32326: PUSH
32327: LD_INT 0
32329: PLUS
32330: ST_TO_ADDR
// end ;
32331: LD_VAR 0 2
32335: RET
// export function IsEmpty ( building ) ; begin
32336: LD_INT 0
32338: PPUSH
// if not building then
32339: LD_VAR 0 1
32343: NOT
32344: IFFALSE 32348
// exit ;
32346: GO 32391
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32348: LD_ADDR_VAR 0 2
32352: PUSH
32353: LD_VAR 0 1
32357: PUSH
32358: LD_INT 22
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 255
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 58
32377: PUSH
32378: EMPTY
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PPUSH
32385: CALL_OW 69
32389: IN
32390: ST_TO_ADDR
// end ;
32391: LD_VAR 0 2
32395: RET
// export function IsNotFull ( building ) ; var places ; begin
32396: LD_INT 0
32398: PPUSH
32399: PPUSH
// if not building then
32400: LD_VAR 0 1
32404: NOT
32405: IFFALSE 32409
// exit ;
32407: GO 32437
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32409: LD_ADDR_VAR 0 2
32413: PUSH
32414: LD_VAR 0 1
32418: PPUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 62
32424: PUSH
32425: EMPTY
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PPUSH
32432: CALL_OW 72
32436: ST_TO_ADDR
// end ;
32437: LD_VAR 0 2
32441: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32442: LD_INT 0
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
// tmp := [ ] ;
32448: LD_ADDR_VAR 0 3
32452: PUSH
32453: EMPTY
32454: ST_TO_ADDR
// list := [ ] ;
32455: LD_ADDR_VAR 0 5
32459: PUSH
32460: EMPTY
32461: ST_TO_ADDR
// for i = 16 to 25 do
32462: LD_ADDR_VAR 0 4
32466: PUSH
32467: DOUBLE
32468: LD_INT 16
32470: DEC
32471: ST_TO_ADDR
32472: LD_INT 25
32474: PUSH
32475: FOR_TO
32476: IFFALSE 32549
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: LD_VAR 0 3
32487: PUSH
32488: LD_INT 22
32490: PUSH
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL_OW 255
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 91
32507: PUSH
32508: LD_VAR 0 1
32512: PUSH
32513: LD_INT 6
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_VAR 0 4
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: PPUSH
32541: CALL_OW 69
32545: ADD
32546: ST_TO_ADDR
32547: GO 32475
32549: POP
32550: POP
// for i = 1 to tmp do
32551: LD_ADDR_VAR 0 4
32555: PUSH
32556: DOUBLE
32557: LD_INT 1
32559: DEC
32560: ST_TO_ADDR
32561: LD_VAR 0 3
32565: PUSH
32566: FOR_TO
32567: IFFALSE 32655
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32569: LD_ADDR_VAR 0 5
32573: PUSH
32574: LD_VAR 0 5
32578: PUSH
32579: LD_VAR 0 3
32583: PUSH
32584: LD_VAR 0 4
32588: ARRAY
32589: PPUSH
32590: CALL_OW 266
32594: PUSH
32595: LD_VAR 0 3
32599: PUSH
32600: LD_VAR 0 4
32604: ARRAY
32605: PPUSH
32606: CALL_OW 250
32610: PUSH
32611: LD_VAR 0 3
32615: PUSH
32616: LD_VAR 0 4
32620: ARRAY
32621: PPUSH
32622: CALL_OW 251
32626: PUSH
32627: LD_VAR 0 3
32631: PUSH
32632: LD_VAR 0 4
32636: ARRAY
32637: PPUSH
32638: CALL_OW 254
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: ADD
32652: ST_TO_ADDR
32653: GO 32566
32655: POP
32656: POP
// result := list ;
32657: LD_ADDR_VAR 0 2
32661: PUSH
32662: LD_VAR 0 5
32666: ST_TO_ADDR
// end ;
32667: LD_VAR 0 2
32671: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32672: LD_INT 0
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
// if not factory then
32681: LD_VAR 0 1
32685: NOT
32686: IFFALSE 32690
// exit ;
32688: GO 33283
// if control = control_apeman then
32690: LD_VAR 0 4
32694: PUSH
32695: LD_INT 5
32697: EQUAL
32698: IFFALSE 32807
// begin tmp := UnitsInside ( factory ) ;
32700: LD_ADDR_VAR 0 8
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 313
32714: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32715: LD_VAR 0 8
32719: PPUSH
32720: LD_INT 25
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PPUSH
32730: CALL_OW 72
32734: NOT
32735: IFFALSE 32745
// control := control_manual ;
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_INT 1
32744: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32745: LD_ADDR_VAR 0 8
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL 32442 0 1
32759: ST_TO_ADDR
// if tmp then
32760: LD_VAR 0 8
32764: IFFALSE 32807
// begin for i in tmp do
32766: LD_ADDR_VAR 0 7
32770: PUSH
32771: LD_VAR 0 8
32775: PUSH
32776: FOR_IN
32777: IFFALSE 32805
// if i [ 1 ] = b_ext_radio then
32779: LD_VAR 0 7
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PUSH
32788: LD_INT 22
32790: EQUAL
32791: IFFALSE 32803
// begin control := control_remote ;
32793: LD_ADDR_VAR 0 4
32797: PUSH
32798: LD_INT 2
32800: ST_TO_ADDR
// break ;
32801: GO 32805
// end ;
32803: GO 32776
32805: POP
32806: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32807: LD_VAR 0 1
32811: PPUSH
32812: LD_VAR 0 2
32816: PPUSH
32817: LD_VAR 0 3
32821: PPUSH
32822: LD_VAR 0 4
32826: PPUSH
32827: LD_VAR 0 5
32831: PPUSH
32832: CALL_OW 448
32836: IFFALSE 32871
// begin result := [ chassis , engine , control , weapon ] ;
32838: LD_ADDR_VAR 0 6
32842: PUSH
32843: LD_VAR 0 2
32847: PUSH
32848: LD_VAR 0 3
32852: PUSH
32853: LD_VAR 0 4
32857: PUSH
32858: LD_VAR 0 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
// exit ;
32869: GO 33283
// end ; _chassis := AvailableChassisList ( factory ) ;
32871: LD_ADDR_VAR 0 9
32875: PUSH
32876: LD_VAR 0 1
32880: PPUSH
32881: CALL_OW 475
32885: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32886: LD_ADDR_VAR 0 11
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 476
32900: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32901: LD_ADDR_VAR 0 12
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 477
32915: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32916: LD_ADDR_VAR 0 10
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 478
32930: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32931: LD_VAR 0 9
32935: NOT
32936: PUSH
32937: LD_VAR 0 11
32941: NOT
32942: OR
32943: PUSH
32944: LD_VAR 0 12
32948: NOT
32949: OR
32950: PUSH
32951: LD_VAR 0 10
32955: NOT
32956: OR
32957: IFFALSE 32992
// begin result := [ chassis , engine , control , weapon ] ;
32959: LD_ADDR_VAR 0 6
32963: PUSH
32964: LD_VAR 0 2
32968: PUSH
32969: LD_VAR 0 3
32973: PUSH
32974: LD_VAR 0 4
32978: PUSH
32979: LD_VAR 0 5
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
// exit ;
32990: GO 33283
// end ; if not chassis in _chassis then
32992: LD_VAR 0 2
32996: PUSH
32997: LD_VAR 0 9
33001: IN
33002: NOT
33003: IFFALSE 33029
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33005: LD_ADDR_VAR 0 2
33009: PUSH
33010: LD_VAR 0 9
33014: PUSH
33015: LD_INT 1
33017: PPUSH
33018: LD_VAR 0 9
33022: PPUSH
33023: CALL_OW 12
33027: ARRAY
33028: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33029: LD_VAR 0 2
33033: PPUSH
33034: LD_VAR 0 3
33038: PPUSH
33039: CALL 33288 0 2
33043: NOT
33044: IFFALSE 33103
// repeat engine := _engine [ 1 ] ;
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_VAR 0 11
33055: PUSH
33056: LD_INT 1
33058: ARRAY
33059: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33060: LD_ADDR_VAR 0 11
33064: PUSH
33065: LD_VAR 0 11
33069: PPUSH
33070: LD_INT 1
33072: PPUSH
33073: CALL_OW 3
33077: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33078: LD_VAR 0 2
33082: PPUSH
33083: LD_VAR 0 3
33087: PPUSH
33088: CALL 33288 0 2
33092: PUSH
33093: LD_VAR 0 11
33097: PUSH
33098: EMPTY
33099: EQUAL
33100: OR
33101: IFFALSE 33046
// if not control in _control then
33103: LD_VAR 0 4
33107: PUSH
33108: LD_VAR 0 12
33112: IN
33113: NOT
33114: IFFALSE 33140
// control := _control [ rand ( 1 , _control ) ] ;
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: LD_VAR 0 12
33125: PUSH
33126: LD_INT 1
33128: PPUSH
33129: LD_VAR 0 12
33133: PPUSH
33134: CALL_OW 12
33138: ARRAY
33139: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 5
33149: PPUSH
33150: CALL 33508 0 2
33154: NOT
33155: IFFALSE 33214
// repeat weapon := _weapon [ 1 ] ;
33157: LD_ADDR_VAR 0 5
33161: PUSH
33162: LD_VAR 0 10
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33171: LD_ADDR_VAR 0 10
33175: PUSH
33176: LD_VAR 0 10
33180: PPUSH
33181: LD_INT 1
33183: PPUSH
33184: CALL_OW 3
33188: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33189: LD_VAR 0 2
33193: PPUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: CALL 33508 0 2
33203: PUSH
33204: LD_VAR 0 10
33208: PUSH
33209: EMPTY
33210: EQUAL
33211: OR
33212: IFFALSE 33157
// result := [ ] ;
33214: LD_ADDR_VAR 0 6
33218: PUSH
33219: EMPTY
33220: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33221: LD_VAR 0 1
33225: PPUSH
33226: LD_VAR 0 2
33230: PPUSH
33231: LD_VAR 0 3
33235: PPUSH
33236: LD_VAR 0 4
33240: PPUSH
33241: LD_VAR 0 5
33245: PPUSH
33246: CALL_OW 448
33250: IFFALSE 33283
// result := [ chassis , engine , control , weapon ] ;
33252: LD_ADDR_VAR 0 6
33256: PUSH
33257: LD_VAR 0 2
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 4
33271: PUSH
33272: LD_VAR 0 5
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: ST_TO_ADDR
// end ;
33283: LD_VAR 0 6
33287: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33288: LD_INT 0
33290: PPUSH
// if not chassis or not engine then
33291: LD_VAR 0 1
33295: NOT
33296: PUSH
33297: LD_VAR 0 2
33301: NOT
33302: OR
33303: IFFALSE 33307
// exit ;
33305: GO 33503
// case engine of engine_solar :
33307: LD_VAR 0 2
33311: PUSH
33312: LD_INT 2
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33358
33320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_INT 11
33328: PUSH
33329: LD_INT 12
33331: PUSH
33332: LD_INT 13
33334: PUSH
33335: LD_INT 14
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
33356: GO 33487
33358: LD_INT 1
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33428
33366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33367: LD_ADDR_VAR 0 3
33371: PUSH
33372: LD_INT 11
33374: PUSH
33375: LD_INT 12
33377: PUSH
33378: LD_INT 13
33380: PUSH
33381: LD_INT 14
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: LD_INT 4
33395: PUSH
33396: LD_INT 5
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 23
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: LD_INT 24
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 33487
33428: LD_INT 3
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33486
33436: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_INT 13
33444: PUSH
33445: LD_INT 14
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: LD_INT 4
33456: PUSH
33457: LD_INT 5
33459: PUSH
33460: LD_INT 21
33462: PUSH
33463: LD_INT 22
33465: PUSH
33466: LD_INT 23
33468: PUSH
33469: LD_INT 24
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33487
33486: POP
// result := ( chassis in result ) ;
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: LD_VAR 0 1
33496: PUSH
33497: LD_VAR 0 3
33501: IN
33502: ST_TO_ADDR
// end ;
33503: LD_VAR 0 3
33507: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33508: LD_INT 0
33510: PPUSH
// if not chassis or not weapon then
33511: LD_VAR 0 1
33515: NOT
33516: PUSH
33517: LD_VAR 0 2
33521: NOT
33522: OR
33523: IFFALSE 33527
// exit ;
33525: GO 34587
// case weapon of us_machine_gun :
33527: LD_VAR 0 2
33531: PUSH
33532: LD_INT 2
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33570
33540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33541: LD_ADDR_VAR 0 3
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 4
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
33568: GO 34571
33570: LD_INT 3
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33608
33578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 34571
33608: LD_INT 11
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33646
33616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
33644: GO 34571
33646: LD_INT 4
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 33680
33654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 4
33668: PUSH
33669: LD_INT 5
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
33678: GO 34571
33680: LD_INT 5
33682: DOUBLE
33683: EQUAL
33684: IFTRUE 33688
33686: GO 33714
33688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: ST_TO_ADDR
33712: GO 34571
33714: LD_INT 9
33716: DOUBLE
33717: EQUAL
33718: IFTRUE 33722
33720: GO 33748
33722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 4
33736: PUSH
33737: LD_INT 5
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
33746: GO 34571
33748: LD_INT 7
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33782
33756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 4
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
33780: GO 34571
33782: LD_INT 12
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33816
33790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: LD_INT 5
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
33814: GO 34571
33816: LD_INT 13
33818: DOUBLE
33819: EQUAL
33820: IFTRUE 33824
33822: GO 33850
33824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: LD_INT 4
33838: PUSH
33839: LD_INT 5
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: ST_TO_ADDR
33848: GO 34571
33850: LD_INT 14
33852: DOUBLE
33853: EQUAL
33854: IFTRUE 33858
33856: GO 33876
33858: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33859: LD_ADDR_VAR 0 3
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: ST_TO_ADDR
33874: GO 34571
33876: LD_INT 6
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33902
33884: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33885: LD_ADDR_VAR 0 3
33889: PUSH
33890: LD_INT 4
33892: PUSH
33893: LD_INT 5
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 34571
33902: LD_INT 10
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33928
33910: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 4
33918: PUSH
33919: LD_INT 5
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 34571
33928: LD_INT 22
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33962
33936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 11
33944: PUSH
33945: LD_INT 12
33947: PUSH
33948: LD_INT 13
33950: PUSH
33951: LD_INT 14
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
33960: GO 34571
33962: LD_INT 23
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33996
33970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 11
33978: PUSH
33979: LD_INT 12
33981: PUSH
33982: LD_INT 13
33984: PUSH
33985: LD_INT 14
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: ST_TO_ADDR
33994: GO 34571
33996: LD_INT 24
33998: DOUBLE
33999: EQUAL
34000: IFTRUE 34004
34002: GO 34030
34004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34005: LD_ADDR_VAR 0 3
34009: PUSH
34010: LD_INT 11
34012: PUSH
34013: LD_INT 12
34015: PUSH
34016: LD_INT 13
34018: PUSH
34019: LD_INT 14
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 34571
34030: LD_INT 30
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34064
34038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_INT 11
34046: PUSH
34047: LD_INT 12
34049: PUSH
34050: LD_INT 13
34052: PUSH
34053: LD_INT 14
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34571
34064: LD_INT 25
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34090
34072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 13
34080: PUSH
34081: LD_INT 14
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: ST_TO_ADDR
34088: GO 34571
34090: LD_INT 27
34092: DOUBLE
34093: EQUAL
34094: IFTRUE 34098
34096: GO 34116
34098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_INT 13
34106: PUSH
34107: LD_INT 14
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: ST_TO_ADDR
34114: GO 34571
34116: LD_INT 92
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34150
34124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_INT 11
34132: PUSH
34133: LD_INT 12
34135: PUSH
34136: LD_INT 13
34138: PUSH
34139: LD_INT 14
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
34148: GO 34571
34150: LD_INT 28
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34176
34158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 13
34166: PUSH
34167: LD_INT 14
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: ST_TO_ADDR
34174: GO 34571
34176: LD_INT 29
34178: DOUBLE
34179: EQUAL
34180: IFTRUE 34184
34182: GO 34202
34184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_INT 13
34192: PUSH
34193: LD_INT 14
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: ST_TO_ADDR
34200: GO 34571
34202: LD_INT 31
34204: DOUBLE
34205: EQUAL
34206: IFTRUE 34210
34208: GO 34228
34210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_INT 13
34218: PUSH
34219: LD_INT 14
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: ST_TO_ADDR
34226: GO 34571
34228: LD_INT 26
34230: DOUBLE
34231: EQUAL
34232: IFTRUE 34236
34234: GO 34254
34236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34237: LD_ADDR_VAR 0 3
34241: PUSH
34242: LD_INT 13
34244: PUSH
34245: LD_INT 14
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: ST_TO_ADDR
34252: GO 34571
34254: LD_INT 42
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34288
34262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34263: LD_ADDR_VAR 0 3
34267: PUSH
34268: LD_INT 21
34270: PUSH
34271: LD_INT 22
34273: PUSH
34274: LD_INT 23
34276: PUSH
34277: LD_INT 24
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
34286: GO 34571
34288: LD_INT 43
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34322
34296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34297: LD_ADDR_VAR 0 3
34301: PUSH
34302: LD_INT 21
34304: PUSH
34305: LD_INT 22
34307: PUSH
34308: LD_INT 23
34310: PUSH
34311: LD_INT 24
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: ST_TO_ADDR
34320: GO 34571
34322: LD_INT 44
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34330
34328: GO 34356
34330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34331: LD_ADDR_VAR 0 3
34335: PUSH
34336: LD_INT 21
34338: PUSH
34339: LD_INT 22
34341: PUSH
34342: LD_INT 23
34344: PUSH
34345: LD_INT 24
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
34354: GO 34571
34356: LD_INT 45
34358: DOUBLE
34359: EQUAL
34360: IFTRUE 34364
34362: GO 34390
34364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34365: LD_ADDR_VAR 0 3
34369: PUSH
34370: LD_INT 21
34372: PUSH
34373: LD_INT 22
34375: PUSH
34376: LD_INT 23
34378: PUSH
34379: LD_INT 24
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
34388: GO 34571
34390: LD_INT 49
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34398
34396: GO 34424
34398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_INT 21
34406: PUSH
34407: LD_INT 22
34409: PUSH
34410: LD_INT 23
34412: PUSH
34413: LD_INT 24
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
34422: GO 34571
34424: LD_INT 51
34426: DOUBLE
34427: EQUAL
34428: IFTRUE 34432
34430: GO 34458
34432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_INT 21
34440: PUSH
34441: LD_INT 22
34443: PUSH
34444: LD_INT 23
34446: PUSH
34447: LD_INT 24
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
34456: GO 34571
34458: LD_INT 52
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34466
34464: GO 34492
34466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34467: LD_ADDR_VAR 0 3
34471: PUSH
34472: LD_INT 21
34474: PUSH
34475: LD_INT 22
34477: PUSH
34478: LD_INT 23
34480: PUSH
34481: LD_INT 24
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
34490: GO 34571
34492: LD_INT 53
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34518
34500: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_INT 23
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: ST_TO_ADDR
34516: GO 34571
34518: LD_INT 46
34520: DOUBLE
34521: EQUAL
34522: IFTRUE 34526
34524: GO 34544
34526: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34527: LD_ADDR_VAR 0 3
34531: PUSH
34532: LD_INT 23
34534: PUSH
34535: LD_INT 24
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: ST_TO_ADDR
34542: GO 34571
34544: LD_INT 47
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34570
34552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 23
34560: PUSH
34561: LD_INT 24
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: ST_TO_ADDR
34568: GO 34571
34570: POP
// result := ( chassis in result ) ;
34571: LD_ADDR_VAR 0 3
34575: PUSH
34576: LD_VAR 0 1
34580: PUSH
34581: LD_VAR 0 3
34585: IN
34586: ST_TO_ADDR
// end ;
34587: LD_VAR 0 3
34591: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34592: LD_INT 0
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
// result := array ;
34601: LD_ADDR_VAR 0 5
34605: PUSH
34606: LD_VAR 0 1
34610: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34611: LD_VAR 0 1
34615: NOT
34616: PUSH
34617: LD_VAR 0 2
34621: NOT
34622: OR
34623: PUSH
34624: LD_VAR 0 3
34628: NOT
34629: OR
34630: PUSH
34631: LD_VAR 0 2
34635: PUSH
34636: LD_VAR 0 1
34640: GREATER
34641: OR
34642: PUSH
34643: LD_VAR 0 3
34647: PUSH
34648: LD_VAR 0 1
34652: GREATER
34653: OR
34654: IFFALSE 34658
// exit ;
34656: GO 34954
// if direction then
34658: LD_VAR 0 4
34662: IFFALSE 34726
// begin d := 1 ;
34664: LD_ADDR_VAR 0 9
34668: PUSH
34669: LD_INT 1
34671: ST_TO_ADDR
// if i_from > i_to then
34672: LD_VAR 0 2
34676: PUSH
34677: LD_VAR 0 3
34681: GREATER
34682: IFFALSE 34708
// length := ( array - i_from ) + i_to else
34684: LD_ADDR_VAR 0 11
34688: PUSH
34689: LD_VAR 0 1
34693: PUSH
34694: LD_VAR 0 2
34698: MINUS
34699: PUSH
34700: LD_VAR 0 3
34704: PLUS
34705: ST_TO_ADDR
34706: GO 34724
// length := i_to - i_from ;
34708: LD_ADDR_VAR 0 11
34712: PUSH
34713: LD_VAR 0 3
34717: PUSH
34718: LD_VAR 0 2
34722: MINUS
34723: ST_TO_ADDR
// end else
34724: GO 34787
// begin d := - 1 ;
34726: LD_ADDR_VAR 0 9
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: ST_TO_ADDR
// if i_from > i_to then
34735: LD_VAR 0 2
34739: PUSH
34740: LD_VAR 0 3
34744: GREATER
34745: IFFALSE 34765
// length := i_from - i_to else
34747: LD_ADDR_VAR 0 11
34751: PUSH
34752: LD_VAR 0 2
34756: PUSH
34757: LD_VAR 0 3
34761: MINUS
34762: ST_TO_ADDR
34763: GO 34787
// length := ( array - i_to ) + i_from ;
34765: LD_ADDR_VAR 0 11
34769: PUSH
34770: LD_VAR 0 1
34774: PUSH
34775: LD_VAR 0 3
34779: MINUS
34780: PUSH
34781: LD_VAR 0 2
34785: PLUS
34786: ST_TO_ADDR
// end ; if not length then
34787: LD_VAR 0 11
34791: NOT
34792: IFFALSE 34796
// exit ;
34794: GO 34954
// tmp := array ;
34796: LD_ADDR_VAR 0 10
34800: PUSH
34801: LD_VAR 0 1
34805: ST_TO_ADDR
// for i = 1 to length do
34806: LD_ADDR_VAR 0 6
34810: PUSH
34811: DOUBLE
34812: LD_INT 1
34814: DEC
34815: ST_TO_ADDR
34816: LD_VAR 0 11
34820: PUSH
34821: FOR_TO
34822: IFFALSE 34942
// begin for j = 1 to array do
34824: LD_ADDR_VAR 0 7
34828: PUSH
34829: DOUBLE
34830: LD_INT 1
34832: DEC
34833: ST_TO_ADDR
34834: LD_VAR 0 1
34838: PUSH
34839: FOR_TO
34840: IFFALSE 34928
// begin k := j + d ;
34842: LD_ADDR_VAR 0 8
34846: PUSH
34847: LD_VAR 0 7
34851: PUSH
34852: LD_VAR 0 9
34856: PLUS
34857: ST_TO_ADDR
// if k > array then
34858: LD_VAR 0 8
34862: PUSH
34863: LD_VAR 0 1
34867: GREATER
34868: IFFALSE 34878
// k := 1 ;
34870: LD_ADDR_VAR 0 8
34874: PUSH
34875: LD_INT 1
34877: ST_TO_ADDR
// if not k then
34878: LD_VAR 0 8
34882: NOT
34883: IFFALSE 34895
// k := array ;
34885: LD_ADDR_VAR 0 8
34889: PUSH
34890: LD_VAR 0 1
34894: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34895: LD_ADDR_VAR 0 10
34899: PUSH
34900: LD_VAR 0 10
34904: PPUSH
34905: LD_VAR 0 8
34909: PPUSH
34910: LD_VAR 0 1
34914: PUSH
34915: LD_VAR 0 7
34919: ARRAY
34920: PPUSH
34921: CALL_OW 1
34925: ST_TO_ADDR
// end ;
34926: GO 34839
34928: POP
34929: POP
// array := tmp ;
34930: LD_ADDR_VAR 0 1
34934: PUSH
34935: LD_VAR 0 10
34939: ST_TO_ADDR
// end ;
34940: GO 34821
34942: POP
34943: POP
// result := array ;
34944: LD_ADDR_VAR 0 5
34948: PUSH
34949: LD_VAR 0 1
34953: ST_TO_ADDR
// end ;
34954: LD_VAR 0 5
34958: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34959: LD_INT 0
34961: PPUSH
34962: PPUSH
// result := 0 ;
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_INT 0
34970: ST_TO_ADDR
// if not array or not value in array then
34971: LD_VAR 0 1
34975: NOT
34976: PUSH
34977: LD_VAR 0 2
34981: PUSH
34982: LD_VAR 0 1
34986: IN
34987: NOT
34988: OR
34989: IFFALSE 34993
// exit ;
34991: GO 35047
// for i = 1 to array do
34993: LD_ADDR_VAR 0 4
34997: PUSH
34998: DOUBLE
34999: LD_INT 1
35001: DEC
35002: ST_TO_ADDR
35003: LD_VAR 0 1
35007: PUSH
35008: FOR_TO
35009: IFFALSE 35045
// if value = array [ i ] then
35011: LD_VAR 0 2
35015: PUSH
35016: LD_VAR 0 1
35020: PUSH
35021: LD_VAR 0 4
35025: ARRAY
35026: EQUAL
35027: IFFALSE 35043
// begin result := i ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_VAR 0 4
35038: ST_TO_ADDR
// exit ;
35039: POP
35040: POP
35041: GO 35047
// end ;
35043: GO 35008
35045: POP
35046: POP
// end ;
35047: LD_VAR 0 3
35051: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35052: LD_INT 0
35054: PPUSH
// vc_chassis := chassis ;
35055: LD_ADDR_OWVAR 37
35059: PUSH
35060: LD_VAR 0 1
35064: ST_TO_ADDR
// vc_engine := engine ;
35065: LD_ADDR_OWVAR 39
35069: PUSH
35070: LD_VAR 0 2
35074: ST_TO_ADDR
// vc_control := control ;
35075: LD_ADDR_OWVAR 38
35079: PUSH
35080: LD_VAR 0 3
35084: ST_TO_ADDR
// vc_weapon := weapon ;
35085: LD_ADDR_OWVAR 40
35089: PUSH
35090: LD_VAR 0 4
35094: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35095: LD_ADDR_OWVAR 41
35099: PUSH
35100: LD_VAR 0 5
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 6
35109: RET
// export function WantPlant ( unit ) ; var task ; begin
35110: LD_INT 0
35112: PPUSH
35113: PPUSH
// result := false ;
35114: LD_ADDR_VAR 0 2
35118: PUSH
35119: LD_INT 0
35121: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 437
35136: ST_TO_ADDR
// if task then
35137: LD_VAR 0 3
35141: IFFALSE 35169
// if task [ 1 ] [ 1 ] = p then
35143: LD_VAR 0 3
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: PUSH
35156: LD_STRING p
35158: EQUAL
35159: IFFALSE 35169
// result := true ;
35161: LD_ADDR_VAR 0 2
35165: PUSH
35166: LD_INT 1
35168: ST_TO_ADDR
// end ;
35169: LD_VAR 0 2
35173: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
// if pos < 1 then
35180: LD_VAR 0 2
35184: PUSH
35185: LD_INT 1
35187: LESS
35188: IFFALSE 35192
// exit ;
35190: GO 35495
// if pos = 1 then
35192: LD_VAR 0 2
35196: PUSH
35197: LD_INT 1
35199: EQUAL
35200: IFFALSE 35233
// result := Replace ( arr , pos [ 1 ] , value ) else
35202: LD_ADDR_VAR 0 4
35206: PUSH
35207: LD_VAR 0 1
35211: PPUSH
35212: LD_VAR 0 2
35216: PUSH
35217: LD_INT 1
35219: ARRAY
35220: PPUSH
35221: LD_VAR 0 3
35225: PPUSH
35226: CALL_OW 1
35230: ST_TO_ADDR
35231: GO 35495
// begin tmp := arr ;
35233: LD_ADDR_VAR 0 6
35237: PUSH
35238: LD_VAR 0 1
35242: ST_TO_ADDR
// s_arr := [ tmp ] ;
35243: LD_ADDR_VAR 0 7
35247: PUSH
35248: LD_VAR 0 6
35252: PUSH
35253: EMPTY
35254: LIST
35255: ST_TO_ADDR
// for i = 1 to pos - 1 do
35256: LD_ADDR_VAR 0 5
35260: PUSH
35261: DOUBLE
35262: LD_INT 1
35264: DEC
35265: ST_TO_ADDR
35266: LD_VAR 0 2
35270: PUSH
35271: LD_INT 1
35273: MINUS
35274: PUSH
35275: FOR_TO
35276: IFFALSE 35321
// begin tmp := tmp [ pos [ i ] ] ;
35278: LD_ADDR_VAR 0 6
35282: PUSH
35283: LD_VAR 0 6
35287: PUSH
35288: LD_VAR 0 2
35292: PUSH
35293: LD_VAR 0 5
35297: ARRAY
35298: ARRAY
35299: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35300: LD_ADDR_VAR 0 7
35304: PUSH
35305: LD_VAR 0 7
35309: PUSH
35310: LD_VAR 0 6
35314: PUSH
35315: EMPTY
35316: LIST
35317: ADD
35318: ST_TO_ADDR
// end ;
35319: GO 35275
35321: POP
35322: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35323: LD_ADDR_VAR 0 6
35327: PUSH
35328: LD_VAR 0 6
35332: PPUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_VAR 0 2
35342: ARRAY
35343: PPUSH
35344: LD_VAR 0 3
35348: PPUSH
35349: CALL_OW 1
35353: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35354: LD_ADDR_VAR 0 7
35358: PUSH
35359: LD_VAR 0 7
35363: PPUSH
35364: LD_VAR 0 7
35368: PPUSH
35369: LD_VAR 0 6
35373: PPUSH
35374: CALL_OW 1
35378: ST_TO_ADDR
// for i = s_arr downto 2 do
35379: LD_ADDR_VAR 0 5
35383: PUSH
35384: DOUBLE
35385: LD_VAR 0 7
35389: INC
35390: ST_TO_ADDR
35391: LD_INT 2
35393: PUSH
35394: FOR_DOWNTO
35395: IFFALSE 35479
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35397: LD_ADDR_VAR 0 6
35401: PUSH
35402: LD_VAR 0 7
35406: PUSH
35407: LD_VAR 0 5
35411: PUSH
35412: LD_INT 1
35414: MINUS
35415: ARRAY
35416: PPUSH
35417: LD_VAR 0 2
35421: PUSH
35422: LD_VAR 0 5
35426: PUSH
35427: LD_INT 1
35429: MINUS
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 7
35436: PUSH
35437: LD_VAR 0 5
35441: ARRAY
35442: PPUSH
35443: CALL_OW 1
35447: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35448: LD_ADDR_VAR 0 7
35452: PUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: LD_VAR 0 5
35462: PUSH
35463: LD_INT 1
35465: MINUS
35466: PPUSH
35467: LD_VAR 0 6
35471: PPUSH
35472: CALL_OW 1
35476: ST_TO_ADDR
// end ;
35477: GO 35394
35479: POP
35480: POP
// result := s_arr [ 1 ] ;
35481: LD_ADDR_VAR 0 4
35485: PUSH
35486: LD_VAR 0 7
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: ST_TO_ADDR
// end ; end ;
35495: LD_VAR 0 4
35499: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35500: LD_INT 0
35502: PPUSH
35503: PPUSH
// if not list then
35504: LD_VAR 0 1
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 35604
// i := list [ pos1 ] ;
35513: LD_ADDR_VAR 0 5
35517: PUSH
35518: LD_VAR 0 1
35522: PUSH
35523: LD_VAR 0 2
35527: ARRAY
35528: ST_TO_ADDR
// if not i then
35529: LD_VAR 0 5
35533: NOT
35534: IFFALSE 35538
// exit ;
35536: GO 35604
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35538: LD_ADDR_VAR 0 1
35542: PUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: LD_VAR 0 2
35552: PPUSH
35553: LD_VAR 0 1
35557: PUSH
35558: LD_VAR 0 3
35562: ARRAY
35563: PPUSH
35564: CALL_OW 1
35568: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35569: LD_ADDR_VAR 0 1
35573: PUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: LD_VAR 0 3
35583: PPUSH
35584: LD_VAR 0 5
35588: PPUSH
35589: CALL_OW 1
35593: ST_TO_ADDR
// result := list ;
35594: LD_ADDR_VAR 0 4
35598: PUSH
35599: LD_VAR 0 1
35603: ST_TO_ADDR
// end ;
35604: LD_VAR 0 4
35608: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35609: LD_INT 0
35611: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35612: LD_ADDR_VAR 0 5
35616: PUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 250
35626: PPUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 251
35636: PPUSH
35637: LD_VAR 0 2
35641: PPUSH
35642: LD_VAR 0 3
35646: PPUSH
35647: LD_VAR 0 4
35651: PPUSH
35652: CALL 36030 0 5
35656: ST_TO_ADDR
// end ;
35657: LD_VAR 0 5
35661: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35662: LD_INT 0
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
// if not list or not unit then
35668: LD_VAR 0 2
35672: NOT
35673: PUSH
35674: LD_VAR 0 1
35678: NOT
35679: OR
35680: IFFALSE 35684
// exit ;
35682: GO 36025
// result := [ ] ;
35684: LD_ADDR_VAR 0 5
35688: PUSH
35689: EMPTY
35690: ST_TO_ADDR
// for i in list do
35691: LD_ADDR_VAR 0 6
35695: PUSH
35696: LD_VAR 0 2
35700: PUSH
35701: FOR_IN
35702: IFFALSE 35920
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35704: LD_ADDR_VAR 0 8
35708: PUSH
35709: LD_VAR 0 1
35713: PPUSH
35714: LD_VAR 0 6
35718: PUSH
35719: LD_INT 1
35721: ARRAY
35722: PPUSH
35723: LD_VAR 0 6
35727: PUSH
35728: LD_INT 2
35730: ARRAY
35731: PPUSH
35732: CALL_OW 297
35736: ST_TO_ADDR
// if not Count ( result ) then
35737: LD_VAR 0 5
35741: PPUSH
35742: CALL 32314 0 1
35746: NOT
35747: IFFALSE 35780
// begin result := Join ( result , [ i , tmp ] ) ;
35749: LD_ADDR_VAR 0 5
35753: PUSH
35754: LD_VAR 0 5
35758: PPUSH
35759: LD_VAR 0 6
35763: PUSH
35764: LD_VAR 0 8
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL 67903 0 2
35777: ST_TO_ADDR
// continue ;
35778: GO 35701
// end ; if result [ result ] [ 2 ] <= tmp then
35780: LD_VAR 0 5
35784: PUSH
35785: LD_VAR 0 5
35789: ARRAY
35790: PUSH
35791: LD_INT 2
35793: ARRAY
35794: PUSH
35795: LD_VAR 0 8
35799: LESSEQUAL
35800: IFFALSE 35833
// result := Join ( result , [ i , tmp ] ) else
35802: LD_ADDR_VAR 0 5
35806: PUSH
35807: LD_VAR 0 5
35811: PPUSH
35812: LD_VAR 0 6
35816: PUSH
35817: LD_VAR 0 8
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PPUSH
35826: CALL 67903 0 2
35830: ST_TO_ADDR
35831: GO 35918
// begin for j := 1 to Count ( result ) do
35833: LD_ADDR_VAR 0 7
35837: PUSH
35838: DOUBLE
35839: LD_INT 1
35841: DEC
35842: ST_TO_ADDR
35843: LD_VAR 0 5
35847: PPUSH
35848: CALL 32314 0 1
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35916
// begin if tmp < result [ j ] [ 2 ] then
35856: LD_VAR 0 8
35860: PUSH
35861: LD_VAR 0 5
35865: PUSH
35866: LD_VAR 0 7
35870: ARRAY
35871: PUSH
35872: LD_INT 2
35874: ARRAY
35875: LESS
35876: IFFALSE 35914
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35878: LD_ADDR_VAR 0 5
35882: PUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: LD_VAR 0 7
35892: PPUSH
35893: LD_VAR 0 6
35897: PUSH
35898: LD_VAR 0 8
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PPUSH
35907: CALL_OW 2
35911: ST_TO_ADDR
// break ;
35912: GO 35916
// end ; end ;
35914: GO 35853
35916: POP
35917: POP
// end ; end ;
35918: GO 35701
35920: POP
35921: POP
// if result and not asc then
35922: LD_VAR 0 5
35926: PUSH
35927: LD_VAR 0 3
35931: NOT
35932: AND
35933: IFFALSE 35950
// result := ReverseArray ( result ) ;
35935: LD_ADDR_VAR 0 5
35939: PUSH
35940: LD_VAR 0 5
35944: PPUSH
35945: CALL 63190 0 1
35949: ST_TO_ADDR
// tmp := [ ] ;
35950: LD_ADDR_VAR 0 8
35954: PUSH
35955: EMPTY
35956: ST_TO_ADDR
// if mode then
35957: LD_VAR 0 4
35961: IFFALSE 36025
// begin for i := 1 to result do
35963: LD_ADDR_VAR 0 6
35967: PUSH
35968: DOUBLE
35969: LD_INT 1
35971: DEC
35972: ST_TO_ADDR
35973: LD_VAR 0 5
35977: PUSH
35978: FOR_TO
35979: IFFALSE 36013
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35981: LD_ADDR_VAR 0 8
35985: PUSH
35986: LD_VAR 0 8
35990: PPUSH
35991: LD_VAR 0 5
35995: PUSH
35996: LD_VAR 0 6
36000: ARRAY
36001: PUSH
36002: LD_INT 1
36004: ARRAY
36005: PPUSH
36006: CALL 67903 0 2
36010: ST_TO_ADDR
36011: GO 35978
36013: POP
36014: POP
// result := tmp ;
36015: LD_ADDR_VAR 0 5
36019: PUSH
36020: LD_VAR 0 8
36024: ST_TO_ADDR
// end ; end ;
36025: LD_VAR 0 5
36029: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
// if not list then
36036: LD_VAR 0 3
36040: NOT
36041: IFFALSE 36045
// exit ;
36043: GO 36433
// result := [ ] ;
36045: LD_ADDR_VAR 0 6
36049: PUSH
36050: EMPTY
36051: ST_TO_ADDR
// for i in list do
36052: LD_ADDR_VAR 0 7
36056: PUSH
36057: LD_VAR 0 3
36061: PUSH
36062: FOR_IN
36063: IFFALSE 36265
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36065: LD_ADDR_VAR 0 9
36069: PUSH
36070: LD_VAR 0 7
36074: PPUSH
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_VAR 0 2
36084: PPUSH
36085: CALL_OW 297
36089: ST_TO_ADDR
// if not result then
36090: LD_VAR 0 6
36094: NOT
36095: IFFALSE 36121
// result := [ [ i , tmp ] ] else
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: LD_VAR 0 7
36106: PUSH
36107: LD_VAR 0 9
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: ST_TO_ADDR
36119: GO 36263
// begin if result [ result ] [ 2 ] < tmp then
36121: LD_VAR 0 6
36125: PUSH
36126: LD_VAR 0 6
36130: ARRAY
36131: PUSH
36132: LD_INT 2
36134: ARRAY
36135: PUSH
36136: LD_VAR 0 9
36140: LESS
36141: IFFALSE 36183
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36143: LD_ADDR_VAR 0 6
36147: PUSH
36148: LD_VAR 0 6
36152: PPUSH
36153: LD_VAR 0 6
36157: PUSH
36158: LD_INT 1
36160: PLUS
36161: PPUSH
36162: LD_VAR 0 7
36166: PUSH
36167: LD_VAR 0 9
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PPUSH
36176: CALL_OW 2
36180: ST_TO_ADDR
36181: GO 36263
// for j = 1 to result do
36183: LD_ADDR_VAR 0 8
36187: PUSH
36188: DOUBLE
36189: LD_INT 1
36191: DEC
36192: ST_TO_ADDR
36193: LD_VAR 0 6
36197: PUSH
36198: FOR_TO
36199: IFFALSE 36261
// begin if tmp < result [ j ] [ 2 ] then
36201: LD_VAR 0 9
36205: PUSH
36206: LD_VAR 0 6
36210: PUSH
36211: LD_VAR 0 8
36215: ARRAY
36216: PUSH
36217: LD_INT 2
36219: ARRAY
36220: LESS
36221: IFFALSE 36259
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36223: LD_ADDR_VAR 0 6
36227: PUSH
36228: LD_VAR 0 6
36232: PPUSH
36233: LD_VAR 0 8
36237: PPUSH
36238: LD_VAR 0 7
36242: PUSH
36243: LD_VAR 0 9
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PPUSH
36252: CALL_OW 2
36256: ST_TO_ADDR
// break ;
36257: GO 36261
// end ; end ;
36259: GO 36198
36261: POP
36262: POP
// end ; end ;
36263: GO 36062
36265: POP
36266: POP
// if result and not asc then
36267: LD_VAR 0 6
36271: PUSH
36272: LD_VAR 0 4
36276: NOT
36277: AND
36278: IFFALSE 36353
// begin tmp := result ;
36280: LD_ADDR_VAR 0 9
36284: PUSH
36285: LD_VAR 0 6
36289: ST_TO_ADDR
// for i = tmp downto 1 do
36290: LD_ADDR_VAR 0 7
36294: PUSH
36295: DOUBLE
36296: LD_VAR 0 9
36300: INC
36301: ST_TO_ADDR
36302: LD_INT 1
36304: PUSH
36305: FOR_DOWNTO
36306: IFFALSE 36351
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36308: LD_ADDR_VAR 0 6
36312: PUSH
36313: LD_VAR 0 6
36317: PPUSH
36318: LD_VAR 0 9
36322: PUSH
36323: LD_VAR 0 7
36327: MINUS
36328: PUSH
36329: LD_INT 1
36331: PLUS
36332: PPUSH
36333: LD_VAR 0 9
36337: PUSH
36338: LD_VAR 0 7
36342: ARRAY
36343: PPUSH
36344: CALL_OW 1
36348: ST_TO_ADDR
36349: GO 36305
36351: POP
36352: POP
// end ; tmp := [ ] ;
36353: LD_ADDR_VAR 0 9
36357: PUSH
36358: EMPTY
36359: ST_TO_ADDR
// if mode then
36360: LD_VAR 0 5
36364: IFFALSE 36433
// begin for i = 1 to result do
36366: LD_ADDR_VAR 0 7
36370: PUSH
36371: DOUBLE
36372: LD_INT 1
36374: DEC
36375: ST_TO_ADDR
36376: LD_VAR 0 6
36380: PUSH
36381: FOR_TO
36382: IFFALSE 36421
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36384: LD_ADDR_VAR 0 9
36388: PUSH
36389: LD_VAR 0 9
36393: PPUSH
36394: LD_VAR 0 7
36398: PPUSH
36399: LD_VAR 0 6
36403: PUSH
36404: LD_VAR 0 7
36408: ARRAY
36409: PUSH
36410: LD_INT 1
36412: ARRAY
36413: PPUSH
36414: CALL_OW 1
36418: ST_TO_ADDR
36419: GO 36381
36421: POP
36422: POP
// result := tmp ;
36423: LD_ADDR_VAR 0 6
36427: PUSH
36428: LD_VAR 0 9
36432: ST_TO_ADDR
// end ; end ;
36433: LD_VAR 0 6
36437: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36438: LD_INT 0
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36446: LD_ADDR_VAR 0 5
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// if not x or not y then
36468: LD_VAR 0 2
36472: NOT
36473: PUSH
36474: LD_VAR 0 3
36478: NOT
36479: OR
36480: IFFALSE 36484
// exit ;
36482: GO 38134
// if not range then
36484: LD_VAR 0 4
36488: NOT
36489: IFFALSE 36499
// range := 10 ;
36491: LD_ADDR_VAR 0 4
36495: PUSH
36496: LD_INT 10
36498: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36499: LD_ADDR_VAR 0 8
36503: PUSH
36504: LD_INT 81
36506: PUSH
36507: LD_VAR 0 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 92
36518: PUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_VAR 0 3
36528: PUSH
36529: LD_VAR 0 4
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 21
36545: PUSH
36546: LD_INT 3
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: PPUSH
36562: CALL_OW 69
36566: ST_TO_ADDR
// if not tmp then
36567: LD_VAR 0 8
36571: NOT
36572: IFFALSE 36576
// exit ;
36574: GO 38134
// for i in tmp do
36576: LD_ADDR_VAR 0 6
36580: PUSH
36581: LD_VAR 0 8
36585: PUSH
36586: FOR_IN
36587: IFFALSE 38109
// begin points := [ 0 , 0 , 0 ] ;
36589: LD_ADDR_VAR 0 9
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: ST_TO_ADDR
// bpoints := 1 ;
36608: LD_ADDR_VAR 0 10
36612: PUSH
36613: LD_INT 1
36615: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 247
36625: PUSH
36626: LD_INT 1
36628: DOUBLE
36629: EQUAL
36630: IFTRUE 36634
36632: GO 37212
36634: POP
// begin if GetClass ( i ) = 1 then
36635: LD_VAR 0 6
36639: PPUSH
36640: CALL_OW 257
36644: PUSH
36645: LD_INT 1
36647: EQUAL
36648: IFFALSE 36669
// points := [ 10 , 5 , 3 ] ;
36650: LD_ADDR_VAR 0 9
36654: PUSH
36655: LD_INT 10
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: LD_INT 3
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36669: LD_VAR 0 6
36673: PPUSH
36674: CALL_OW 257
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 4
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: IN
36693: IFFALSE 36714
// points := [ 3 , 2 , 1 ] ;
36695: LD_ADDR_VAR 0 9
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36714: LD_VAR 0 6
36718: PPUSH
36719: CALL_OW 257
36723: PUSH
36724: LD_INT 5
36726: EQUAL
36727: IFFALSE 36748
// points := [ 130 , 5 , 2 ] ;
36729: LD_ADDR_VAR 0 9
36733: PUSH
36734: LD_INT 130
36736: PUSH
36737: LD_INT 5
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36748: LD_VAR 0 6
36752: PPUSH
36753: CALL_OW 257
36757: PUSH
36758: LD_INT 8
36760: EQUAL
36761: IFFALSE 36782
// points := [ 35 , 35 , 30 ] ;
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: LD_INT 35
36770: PUSH
36771: LD_INT 35
36773: PUSH
36774: LD_INT 30
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36782: LD_VAR 0 6
36786: PPUSH
36787: CALL_OW 257
36791: PUSH
36792: LD_INT 9
36794: EQUAL
36795: IFFALSE 36816
// points := [ 20 , 55 , 40 ] ;
36797: LD_ADDR_VAR 0 9
36801: PUSH
36802: LD_INT 20
36804: PUSH
36805: LD_INT 55
36807: PUSH
36808: LD_INT 40
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36816: LD_VAR 0 6
36820: PPUSH
36821: CALL_OW 257
36825: PUSH
36826: LD_INT 12
36828: PUSH
36829: LD_INT 16
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: IN
36836: IFFALSE 36857
// points := [ 5 , 3 , 2 ] ;
36838: LD_ADDR_VAR 0 9
36842: PUSH
36843: LD_INT 5
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36857: LD_VAR 0 6
36861: PPUSH
36862: CALL_OW 257
36866: PUSH
36867: LD_INT 17
36869: EQUAL
36870: IFFALSE 36891
// points := [ 100 , 50 , 75 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 100
36879: PUSH
36880: LD_INT 50
36882: PUSH
36883: LD_INT 75
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 257
36900: PUSH
36901: LD_INT 15
36903: EQUAL
36904: IFFALSE 36925
// points := [ 10 , 5 , 3 ] ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_INT 10
36913: PUSH
36914: LD_INT 5
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36925: LD_VAR 0 6
36929: PPUSH
36930: CALL_OW 257
36934: PUSH
36935: LD_INT 14
36937: EQUAL
36938: IFFALSE 36959
// points := [ 10 , 0 , 0 ] ;
36940: LD_ADDR_VAR 0 9
36944: PUSH
36945: LD_INT 10
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36959: LD_VAR 0 6
36963: PPUSH
36964: CALL_OW 257
36968: PUSH
36969: LD_INT 11
36971: EQUAL
36972: IFFALSE 36993
// points := [ 30 , 10 , 5 ] ;
36974: LD_ADDR_VAR 0 9
36978: PUSH
36979: LD_INT 30
36981: PUSH
36982: LD_INT 10
36984: PUSH
36985: LD_INT 5
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36993: LD_VAR 0 1
36997: PPUSH
36998: LD_INT 5
37000: PPUSH
37001: CALL_OW 321
37005: PUSH
37006: LD_INT 2
37008: EQUAL
37009: IFFALSE 37026
// bpoints := bpoints * 1.8 ;
37011: LD_ADDR_VAR 0 10
37015: PUSH
37016: LD_VAR 0 10
37020: PUSH
37021: LD_REAL  1.80000000000000E+0000
37024: MUL
37025: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37026: LD_VAR 0 6
37030: PPUSH
37031: CALL_OW 257
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 3
37044: PUSH
37045: LD_INT 4
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: IN
37054: PUSH
37055: LD_VAR 0 1
37059: PPUSH
37060: LD_INT 51
37062: PPUSH
37063: CALL_OW 321
37067: PUSH
37068: LD_INT 2
37070: EQUAL
37071: AND
37072: IFFALSE 37089
// bpoints := bpoints * 1.2 ;
37074: LD_ADDR_VAR 0 10
37078: PUSH
37079: LD_VAR 0 10
37083: PUSH
37084: LD_REAL  1.20000000000000E+0000
37087: MUL
37088: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL_OW 257
37098: PUSH
37099: LD_INT 5
37101: PUSH
37102: LD_INT 7
37104: PUSH
37105: LD_INT 9
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: IN
37113: PUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: LD_INT 52
37121: PPUSH
37122: CALL_OW 321
37126: PUSH
37127: LD_INT 2
37129: EQUAL
37130: AND
37131: IFFALSE 37148
// bpoints := bpoints * 1.5 ;
37133: LD_ADDR_VAR 0 10
37137: PUSH
37138: LD_VAR 0 10
37142: PUSH
37143: LD_REAL  1.50000000000000E+0000
37146: MUL
37147: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37148: LD_VAR 0 1
37152: PPUSH
37153: LD_INT 66
37155: PPUSH
37156: CALL_OW 321
37160: PUSH
37161: LD_INT 2
37163: EQUAL
37164: IFFALSE 37181
// bpoints := bpoints * 1.1 ;
37166: LD_ADDR_VAR 0 10
37170: PUSH
37171: LD_VAR 0 10
37175: PUSH
37176: LD_REAL  1.10000000000000E+0000
37179: MUL
37180: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37181: LD_ADDR_VAR 0 10
37185: PUSH
37186: LD_VAR 0 10
37190: PUSH
37191: LD_VAR 0 6
37195: PPUSH
37196: LD_INT 1
37198: PPUSH
37199: CALL_OW 259
37203: PUSH
37204: LD_REAL  1.15000000000000E+0000
37207: MUL
37208: MUL
37209: ST_TO_ADDR
// end ; unit_vehicle :
37210: GO 38038
37212: LD_INT 2
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 38026
37220: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37221: LD_VAR 0 6
37225: PPUSH
37226: CALL_OW 264
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 42
37236: PUSH
37237: LD_INT 24
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: IN
37245: IFFALSE 37266
// points := [ 25 , 5 , 3 ] ;
37247: LD_ADDR_VAR 0 9
37251: PUSH
37252: LD_INT 25
37254: PUSH
37255: LD_INT 5
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37266: LD_VAR 0 6
37270: PPUSH
37271: CALL_OW 264
37275: PUSH
37276: LD_INT 4
37278: PUSH
37279: LD_INT 43
37281: PUSH
37282: LD_INT 25
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: IN
37290: IFFALSE 37311
// points := [ 40 , 15 , 5 ] ;
37292: LD_ADDR_VAR 0 9
37296: PUSH
37297: LD_INT 40
37299: PUSH
37300: LD_INT 15
37302: PUSH
37303: LD_INT 5
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37311: LD_VAR 0 6
37315: PPUSH
37316: CALL_OW 264
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: LD_INT 23
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: IN
37331: IFFALSE 37352
// points := [ 7 , 25 , 8 ] ;
37333: LD_ADDR_VAR 0 9
37337: PUSH
37338: LD_INT 7
37340: PUSH
37341: LD_INT 25
37343: PUSH
37344: LD_INT 8
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37352: LD_VAR 0 6
37356: PPUSH
37357: CALL_OW 264
37361: PUSH
37362: LD_INT 5
37364: PUSH
37365: LD_INT 27
37367: PUSH
37368: LD_INT 44
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: IN
37376: IFFALSE 37397
// points := [ 14 , 50 , 16 ] ;
37378: LD_ADDR_VAR 0 9
37382: PUSH
37383: LD_INT 14
37385: PUSH
37386: LD_INT 50
37388: PUSH
37389: LD_INT 16
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37397: LD_VAR 0 6
37401: PPUSH
37402: CALL_OW 264
37406: PUSH
37407: LD_INT 6
37409: PUSH
37410: LD_INT 46
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: IN
37417: IFFALSE 37438
// points := [ 32 , 120 , 70 ] ;
37419: LD_ADDR_VAR 0 9
37423: PUSH
37424: LD_INT 32
37426: PUSH
37427: LD_INT 120
37429: PUSH
37430: LD_INT 70
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37438: LD_VAR 0 6
37442: PPUSH
37443: CALL_OW 264
37447: PUSH
37448: LD_INT 7
37450: PUSH
37451: LD_INT 28
37453: PUSH
37454: LD_INT 45
37456: PUSH
37457: LD_INT 92
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: IN
37466: IFFALSE 37487
// points := [ 35 , 20 , 45 ] ;
37468: LD_ADDR_VAR 0 9
37472: PUSH
37473: LD_INT 35
37475: PUSH
37476: LD_INT 20
37478: PUSH
37479: LD_INT 45
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37487: LD_VAR 0 6
37491: PPUSH
37492: CALL_OW 264
37496: PUSH
37497: LD_INT 47
37499: PUSH
37500: EMPTY
37501: LIST
37502: IN
37503: IFFALSE 37524
// points := [ 67 , 45 , 75 ] ;
37505: LD_ADDR_VAR 0 9
37509: PUSH
37510: LD_INT 67
37512: PUSH
37513: LD_INT 45
37515: PUSH
37516: LD_INT 75
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37524: LD_VAR 0 6
37528: PPUSH
37529: CALL_OW 264
37533: PUSH
37534: LD_INT 26
37536: PUSH
37537: EMPTY
37538: LIST
37539: IN
37540: IFFALSE 37561
// points := [ 120 , 30 , 80 ] ;
37542: LD_ADDR_VAR 0 9
37546: PUSH
37547: LD_INT 120
37549: PUSH
37550: LD_INT 30
37552: PUSH
37553: LD_INT 80
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37561: LD_VAR 0 6
37565: PPUSH
37566: CALL_OW 264
37570: PUSH
37571: LD_INT 22
37573: PUSH
37574: EMPTY
37575: LIST
37576: IN
37577: IFFALSE 37598
// points := [ 40 , 1 , 1 ] ;
37579: LD_ADDR_VAR 0 9
37583: PUSH
37584: LD_INT 40
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37598: LD_VAR 0 6
37602: PPUSH
37603: CALL_OW 264
37607: PUSH
37608: LD_INT 29
37610: PUSH
37611: EMPTY
37612: LIST
37613: IN
37614: IFFALSE 37635
// points := [ 70 , 200 , 400 ] ;
37616: LD_ADDR_VAR 0 9
37620: PUSH
37621: LD_INT 70
37623: PUSH
37624: LD_INT 200
37626: PUSH
37627: LD_INT 400
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37635: LD_VAR 0 6
37639: PPUSH
37640: CALL_OW 264
37644: PUSH
37645: LD_INT 14
37647: PUSH
37648: LD_INT 53
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: IN
37655: IFFALSE 37676
// points := [ 40 , 10 , 20 ] ;
37657: LD_ADDR_VAR 0 9
37661: PUSH
37662: LD_INT 40
37664: PUSH
37665: LD_INT 10
37667: PUSH
37668: LD_INT 20
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37676: LD_VAR 0 6
37680: PPUSH
37681: CALL_OW 264
37685: PUSH
37686: LD_INT 9
37688: PUSH
37689: EMPTY
37690: LIST
37691: IN
37692: IFFALSE 37713
// points := [ 5 , 70 , 20 ] ;
37694: LD_ADDR_VAR 0 9
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: LD_INT 70
37704: PUSH
37705: LD_INT 20
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 264
37722: PUSH
37723: LD_INT 10
37725: PUSH
37726: EMPTY
37727: LIST
37728: IN
37729: IFFALSE 37750
// points := [ 35 , 110 , 70 ] ;
37731: LD_ADDR_VAR 0 9
37735: PUSH
37736: LD_INT 35
37738: PUSH
37739: LD_INT 110
37741: PUSH
37742: LD_INT 70
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37750: LD_VAR 0 6
37754: PPUSH
37755: CALL_OW 265
37759: PUSH
37760: LD_INT 25
37762: EQUAL
37763: IFFALSE 37784
// points := [ 80 , 65 , 100 ] ;
37765: LD_ADDR_VAR 0 9
37769: PUSH
37770: LD_INT 80
37772: PUSH
37773: LD_INT 65
37775: PUSH
37776: LD_INT 100
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37784: LD_VAR 0 6
37788: PPUSH
37789: CALL_OW 263
37793: PUSH
37794: LD_INT 1
37796: EQUAL
37797: IFFALSE 37832
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37799: LD_ADDR_VAR 0 10
37803: PUSH
37804: LD_VAR 0 10
37808: PUSH
37809: LD_VAR 0 6
37813: PPUSH
37814: CALL_OW 311
37818: PPUSH
37819: LD_INT 3
37821: PPUSH
37822: CALL_OW 259
37826: PUSH
37827: LD_INT 4
37829: MUL
37830: MUL
37831: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 263
37841: PUSH
37842: LD_INT 2
37844: EQUAL
37845: IFFALSE 37896
// begin j := IsControledBy ( i ) ;
37847: LD_ADDR_VAR 0 7
37851: PUSH
37852: LD_VAR 0 6
37856: PPUSH
37857: CALL_OW 312
37861: ST_TO_ADDR
// if j then
37862: LD_VAR 0 7
37866: IFFALSE 37896
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37868: LD_ADDR_VAR 0 10
37872: PUSH
37873: LD_VAR 0 10
37877: PUSH
37878: LD_VAR 0 7
37882: PPUSH
37883: LD_INT 3
37885: PPUSH
37886: CALL_OW 259
37890: PUSH
37891: LD_INT 3
37893: MUL
37894: MUL
37895: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37896: LD_VAR 0 6
37900: PPUSH
37901: CALL_OW 264
37905: PUSH
37906: LD_INT 5
37908: PUSH
37909: LD_INT 6
37911: PUSH
37912: LD_INT 46
37914: PUSH
37915: LD_INT 44
37917: PUSH
37918: LD_INT 47
37920: PUSH
37921: LD_INT 45
37923: PUSH
37924: LD_INT 28
37926: PUSH
37927: LD_INT 7
37929: PUSH
37930: LD_INT 27
37932: PUSH
37933: LD_INT 29
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: IN
37948: PUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: LD_INT 52
37956: PPUSH
37957: CALL_OW 321
37961: PUSH
37962: LD_INT 2
37964: EQUAL
37965: AND
37966: IFFALSE 37983
// bpoints := bpoints * 1.2 ;
37968: LD_ADDR_VAR 0 10
37972: PUSH
37973: LD_VAR 0 10
37977: PUSH
37978: LD_REAL  1.20000000000000E+0000
37981: MUL
37982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37983: LD_VAR 0 6
37987: PPUSH
37988: CALL_OW 264
37992: PUSH
37993: LD_INT 6
37995: PUSH
37996: LD_INT 46
37998: PUSH
37999: LD_INT 47
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: IN
38007: IFFALSE 38024
// bpoints := bpoints * 1.2 ;
38009: LD_ADDR_VAR 0 10
38013: PUSH
38014: LD_VAR 0 10
38018: PUSH
38019: LD_REAL  1.20000000000000E+0000
38022: MUL
38023: ST_TO_ADDR
// end ; unit_building :
38024: GO 38038
38026: LD_INT 3
38028: DOUBLE
38029: EQUAL
38030: IFTRUE 38034
38032: GO 38037
38034: POP
// ; end ;
38035: GO 38038
38037: POP
// for j = 1 to 3 do
38038: LD_ADDR_VAR 0 7
38042: PUSH
38043: DOUBLE
38044: LD_INT 1
38046: DEC
38047: ST_TO_ADDR
38048: LD_INT 3
38050: PUSH
38051: FOR_TO
38052: IFFALSE 38105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38054: LD_ADDR_VAR 0 5
38058: PUSH
38059: LD_VAR 0 5
38063: PPUSH
38064: LD_VAR 0 7
38068: PPUSH
38069: LD_VAR 0 5
38073: PUSH
38074: LD_VAR 0 7
38078: ARRAY
38079: PUSH
38080: LD_VAR 0 9
38084: PUSH
38085: LD_VAR 0 7
38089: ARRAY
38090: PUSH
38091: LD_VAR 0 10
38095: MUL
38096: PLUS
38097: PPUSH
38098: CALL_OW 1
38102: ST_TO_ADDR
38103: GO 38051
38105: POP
38106: POP
// end ;
38107: GO 36586
38109: POP
38110: POP
// result := Replace ( result , 4 , tmp ) ;
38111: LD_ADDR_VAR 0 5
38115: PUSH
38116: LD_VAR 0 5
38120: PPUSH
38121: LD_INT 4
38123: PPUSH
38124: LD_VAR 0 8
38128: PPUSH
38129: CALL_OW 1
38133: ST_TO_ADDR
// end ;
38134: LD_VAR 0 5
38138: RET
// export function DangerAtRange ( unit , range ) ; begin
38139: LD_INT 0
38141: PPUSH
// if not unit then
38142: LD_VAR 0 1
38146: NOT
38147: IFFALSE 38151
// exit ;
38149: GO 38196
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 255
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 250
38175: PPUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 251
38185: PPUSH
38186: LD_VAR 0 2
38190: PPUSH
38191: CALL 36438 0 4
38195: ST_TO_ADDR
// end ;
38196: LD_VAR 0 3
38200: RET
// export function DangerInArea ( side , area ) ; begin
38201: LD_INT 0
38203: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_VAR 0 2
38213: PPUSH
38214: LD_INT 81
38216: PUSH
38217: LD_VAR 0 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PPUSH
38226: CALL_OW 70
38230: ST_TO_ADDR
// end ;
38231: LD_VAR 0 3
38235: RET
// export function IsExtension ( b ) ; begin
38236: LD_INT 0
38238: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38239: LD_ADDR_VAR 0 2
38243: PUSH
38244: LD_VAR 0 1
38248: PUSH
38249: LD_INT 23
38251: PUSH
38252: LD_INT 20
38254: PUSH
38255: LD_INT 22
38257: PUSH
38258: LD_INT 17
38260: PUSH
38261: LD_INT 24
38263: PUSH
38264: LD_INT 21
38266: PUSH
38267: LD_INT 19
38269: PUSH
38270: LD_INT 16
38272: PUSH
38273: LD_INT 25
38275: PUSH
38276: LD_INT 18
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: IN
38291: ST_TO_ADDR
// end ;
38292: LD_VAR 0 2
38296: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38297: LD_INT 0
38299: PPUSH
38300: PPUSH
38301: PPUSH
// result := [ ] ;
38302: LD_ADDR_VAR 0 4
38306: PUSH
38307: EMPTY
38308: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38309: LD_ADDR_VAR 0 5
38313: PUSH
38314: LD_VAR 0 2
38318: PPUSH
38319: LD_INT 21
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 70
38333: ST_TO_ADDR
// if not tmp then
38334: LD_VAR 0 5
38338: NOT
38339: IFFALSE 38343
// exit ;
38341: GO 38407
// if checkLink then
38343: LD_VAR 0 3
38347: IFFALSE 38397
// begin for i in tmp do
38349: LD_ADDR_VAR 0 6
38353: PUSH
38354: LD_VAR 0 5
38358: PUSH
38359: FOR_IN
38360: IFFALSE 38395
// if GetBase ( i ) <> base then
38362: LD_VAR 0 6
38366: PPUSH
38367: CALL_OW 274
38371: PUSH
38372: LD_VAR 0 1
38376: NONEQUAL
38377: IFFALSE 38393
// ComLinkToBase ( base , i ) ;
38379: LD_VAR 0 1
38383: PPUSH
38384: LD_VAR 0 6
38388: PPUSH
38389: CALL_OW 169
38393: GO 38359
38395: POP
38396: POP
// end ; result := tmp ;
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: LD_VAR 0 5
38406: ST_TO_ADDR
// end ;
38407: LD_VAR 0 4
38411: RET
// export function ComComplete ( units , b ) ; var i ; begin
38412: LD_INT 0
38414: PPUSH
38415: PPUSH
// if not units then
38416: LD_VAR 0 1
38420: NOT
38421: IFFALSE 38425
// exit ;
38423: GO 38515
// for i in units do
38425: LD_ADDR_VAR 0 4
38429: PUSH
38430: LD_VAR 0 1
38434: PUSH
38435: FOR_IN
38436: IFFALSE 38513
// if BuildingStatus ( b ) = bs_build then
38438: LD_VAR 0 2
38442: PPUSH
38443: CALL_OW 461
38447: PUSH
38448: LD_INT 1
38450: EQUAL
38451: IFFALSE 38511
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38453: LD_VAR 0 4
38457: PPUSH
38458: LD_STRING h
38460: PUSH
38461: LD_VAR 0 2
38465: PPUSH
38466: CALL_OW 250
38470: PUSH
38471: LD_VAR 0 2
38475: PPUSH
38476: CALL_OW 251
38480: PUSH
38481: LD_VAR 0 2
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: PPUSH
38507: CALL_OW 446
38511: GO 38435
38513: POP
38514: POP
// end ;
38515: LD_VAR 0 3
38519: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38520: LD_INT 0
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38528: LD_VAR 0 1
38532: NOT
38533: PUSH
38534: LD_VAR 0 1
38538: PPUSH
38539: CALL_OW 263
38543: PUSH
38544: LD_INT 2
38546: NONEQUAL
38547: OR
38548: IFFALSE 38552
// exit ;
38550: GO 38868
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38552: LD_ADDR_VAR 0 6
38556: PUSH
38557: LD_INT 22
38559: PUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 255
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 30
38579: PUSH
38580: LD_INT 36
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 34
38589: PUSH
38590: LD_INT 31
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PPUSH
38606: CALL_OW 69
38610: ST_TO_ADDR
// if not tmp then
38611: LD_VAR 0 6
38615: NOT
38616: IFFALSE 38620
// exit ;
38618: GO 38868
// result := [ ] ;
38620: LD_ADDR_VAR 0 2
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// for i in tmp do
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_VAR 0 6
38636: PUSH
38637: FOR_IN
38638: IFFALSE 38709
// begin t := UnitsInside ( i ) ;
38640: LD_ADDR_VAR 0 4
38644: PUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: CALL_OW 313
38654: ST_TO_ADDR
// if t then
38655: LD_VAR 0 4
38659: IFFALSE 38707
// for j in t do
38661: LD_ADDR_VAR 0 7
38665: PUSH
38666: LD_VAR 0 4
38670: PUSH
38671: FOR_IN
38672: IFFALSE 38705
// result := Replace ( result , result + 1 , j ) ;
38674: LD_ADDR_VAR 0 2
38678: PUSH
38679: LD_VAR 0 2
38683: PPUSH
38684: LD_VAR 0 2
38688: PUSH
38689: LD_INT 1
38691: PLUS
38692: PPUSH
38693: LD_VAR 0 7
38697: PPUSH
38698: CALL_OW 1
38702: ST_TO_ADDR
38703: GO 38671
38705: POP
38706: POP
// end ;
38707: GO 38637
38709: POP
38710: POP
// if not result then
38711: LD_VAR 0 2
38715: NOT
38716: IFFALSE 38720
// exit ;
38718: GO 38868
// mech := result [ 1 ] ;
38720: LD_ADDR_VAR 0 5
38724: PUSH
38725: LD_VAR 0 2
38729: PUSH
38730: LD_INT 1
38732: ARRAY
38733: ST_TO_ADDR
// if result > 1 then
38734: LD_VAR 0 2
38738: PUSH
38739: LD_INT 1
38741: GREATER
38742: IFFALSE 38854
// begin for i = 2 to result do
38744: LD_ADDR_VAR 0 3
38748: PUSH
38749: DOUBLE
38750: LD_INT 2
38752: DEC
38753: ST_TO_ADDR
38754: LD_VAR 0 2
38758: PUSH
38759: FOR_TO
38760: IFFALSE 38852
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38762: LD_ADDR_VAR 0 4
38766: PUSH
38767: LD_VAR 0 2
38771: PUSH
38772: LD_VAR 0 3
38776: ARRAY
38777: PPUSH
38778: LD_INT 3
38780: PPUSH
38781: CALL_OW 259
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_VAR 0 3
38795: ARRAY
38796: PPUSH
38797: CALL_OW 432
38801: MINUS
38802: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38803: LD_VAR 0 4
38807: PUSH
38808: LD_VAR 0 5
38812: PPUSH
38813: LD_INT 3
38815: PPUSH
38816: CALL_OW 259
38820: PUSH
38821: LD_VAR 0 5
38825: PPUSH
38826: CALL_OW 432
38830: MINUS
38831: GREATEREQUAL
38832: IFFALSE 38850
// mech := result [ i ] ;
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 2
38843: PUSH
38844: LD_VAR 0 3
38848: ARRAY
38849: ST_TO_ADDR
// end ;
38850: GO 38759
38852: POP
38853: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38854: LD_VAR 0 1
38858: PPUSH
38859: LD_VAR 0 5
38863: PPUSH
38864: CALL_OW 135
// end ;
38868: LD_VAR 0 2
38872: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38873: LD_INT 0
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
// result := [ ] ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: EMPTY
38894: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 266
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: IN
38915: NOT
38916: IFFALSE 38920
// exit ;
38918: GO 40554
// if name then
38920: LD_VAR 0 3
38924: IFFALSE 38940
// SetBName ( base_dep , name ) ;
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_VAR 0 3
38935: PPUSH
38936: CALL_OW 500
// base := GetBase ( base_dep ) ;
38940: LD_ADDR_VAR 0 15
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 274
38954: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38955: LD_ADDR_VAR 0 16
38959: PUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 255
38969: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38970: LD_ADDR_VAR 0 17
38974: PUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 248
38984: ST_TO_ADDR
// if sources then
38985: LD_VAR 0 5
38989: IFFALSE 39036
// for i = 1 to 3 do
38991: LD_ADDR_VAR 0 8
38995: PUSH
38996: DOUBLE
38997: LD_INT 1
38999: DEC
39000: ST_TO_ADDR
39001: LD_INT 3
39003: PUSH
39004: FOR_TO
39005: IFFALSE 39034
// AddResourceType ( base , i , sources [ i ] ) ;
39007: LD_VAR 0 15
39011: PPUSH
39012: LD_VAR 0 8
39016: PPUSH
39017: LD_VAR 0 5
39021: PUSH
39022: LD_VAR 0 8
39026: ARRAY
39027: PPUSH
39028: CALL_OW 276
39032: GO 39004
39034: POP
39035: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39036: LD_ADDR_VAR 0 18
39040: PUSH
39041: LD_VAR 0 15
39045: PPUSH
39046: LD_VAR 0 2
39050: PPUSH
39051: LD_INT 1
39053: PPUSH
39054: CALL 38297 0 3
39058: ST_TO_ADDR
// InitHc ;
39059: CALL_OW 19
// InitUc ;
39063: CALL_OW 18
// uc_side := side ;
39067: LD_ADDR_OWVAR 20
39071: PUSH
39072: LD_VAR 0 16
39076: ST_TO_ADDR
// uc_nation := nation ;
39077: LD_ADDR_OWVAR 21
39081: PUSH
39082: LD_VAR 0 17
39086: ST_TO_ADDR
// if buildings then
39087: LD_VAR 0 18
39091: IFFALSE 40413
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39093: LD_ADDR_VAR 0 19
39097: PUSH
39098: LD_VAR 0 18
39102: PPUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: LD_INT 29
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 30
39118: PUSH
39119: LD_INT 30
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: PPUSH
39131: CALL_OW 72
39135: ST_TO_ADDR
// if tmp then
39136: LD_VAR 0 19
39140: IFFALSE 39188
// for i in tmp do
39142: LD_ADDR_VAR 0 8
39146: PUSH
39147: LD_VAR 0 19
39151: PUSH
39152: FOR_IN
39153: IFFALSE 39186
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39155: LD_VAR 0 8
39159: PPUSH
39160: CALL_OW 250
39164: PPUSH
39165: LD_VAR 0 8
39169: PPUSH
39170: CALL_OW 251
39174: PPUSH
39175: LD_VAR 0 16
39179: PPUSH
39180: CALL_OW 441
39184: GO 39152
39186: POP
39187: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39188: LD_VAR 0 18
39192: PPUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: LD_INT 32
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 30
39208: PUSH
39209: LD_INT 33
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: PPUSH
39221: CALL_OW 72
39225: IFFALSE 39313
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39227: LD_ADDR_VAR 0 8
39231: PUSH
39232: LD_VAR 0 18
39236: PPUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 30
39242: PUSH
39243: LD_INT 32
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 30
39252: PUSH
39253: LD_INT 33
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: PPUSH
39265: CALL_OW 72
39269: PUSH
39270: FOR_IN
39271: IFFALSE 39311
// begin if not GetBWeapon ( i ) then
39273: LD_VAR 0 8
39277: PPUSH
39278: CALL_OW 269
39282: NOT
39283: IFFALSE 39309
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39285: LD_VAR 0 8
39289: PPUSH
39290: LD_VAR 0 8
39294: PPUSH
39295: LD_VAR 0 2
39299: PPUSH
39300: CALL 40559 0 2
39304: PPUSH
39305: CALL_OW 431
// end ;
39309: GO 39270
39311: POP
39312: POP
// end ; for i = 1 to personel do
39313: LD_ADDR_VAR 0 8
39317: PUSH
39318: DOUBLE
39319: LD_INT 1
39321: DEC
39322: ST_TO_ADDR
39323: LD_VAR 0 6
39327: PUSH
39328: FOR_TO
39329: IFFALSE 40393
// begin if i > 4 then
39331: LD_VAR 0 8
39335: PUSH
39336: LD_INT 4
39338: GREATER
39339: IFFALSE 39343
// break ;
39341: GO 40393
// case i of 1 :
39343: LD_VAR 0 8
39347: PUSH
39348: LD_INT 1
39350: DOUBLE
39351: EQUAL
39352: IFTRUE 39356
39354: GO 39436
39356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39357: LD_ADDR_VAR 0 12
39361: PUSH
39362: LD_VAR 0 18
39366: PPUSH
39367: LD_INT 22
39369: PUSH
39370: LD_VAR 0 16
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 58
39381: PUSH
39382: EMPTY
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 30
39390: PUSH
39391: LD_INT 32
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 30
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 30
39410: PUSH
39411: LD_INT 5
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: PPUSH
39429: CALL_OW 72
39433: ST_TO_ADDR
39434: GO 39658
39436: LD_INT 2
39438: DOUBLE
39439: EQUAL
39440: IFTRUE 39444
39442: GO 39506
39444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39445: LD_ADDR_VAR 0 12
39449: PUSH
39450: LD_VAR 0 18
39454: PPUSH
39455: LD_INT 22
39457: PUSH
39458: LD_VAR 0 16
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 30
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 30
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PPUSH
39499: CALL_OW 72
39503: ST_TO_ADDR
39504: GO 39658
39506: LD_INT 3
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39514
39512: GO 39576
39514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39515: LD_ADDR_VAR 0 12
39519: PUSH
39520: LD_VAR 0 18
39524: PPUSH
39525: LD_INT 22
39527: PUSH
39528: LD_VAR 0 16
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 30
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 30
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PPUSH
39569: CALL_OW 72
39573: ST_TO_ADDR
39574: GO 39658
39576: LD_INT 4
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39657
39584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39585: LD_ADDR_VAR 0 12
39589: PUSH
39590: LD_VAR 0 18
39594: PPUSH
39595: LD_INT 22
39597: PUSH
39598: LD_VAR 0 16
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 30
39612: PUSH
39613: LD_INT 6
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: LD_INT 7
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 30
39632: PUSH
39633: LD_INT 8
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PPUSH
39650: CALL_OW 72
39654: ST_TO_ADDR
39655: GO 39658
39657: POP
// if i = 1 then
39658: LD_VAR 0 8
39662: PUSH
39663: LD_INT 1
39665: EQUAL
39666: IFFALSE 39777
// begin tmp := [ ] ;
39668: LD_ADDR_VAR 0 19
39672: PUSH
39673: EMPTY
39674: ST_TO_ADDR
// for j in f do
39675: LD_ADDR_VAR 0 9
39679: PUSH
39680: LD_VAR 0 12
39684: PUSH
39685: FOR_IN
39686: IFFALSE 39759
// if GetBType ( j ) = b_bunker then
39688: LD_VAR 0 9
39692: PPUSH
39693: CALL_OW 266
39697: PUSH
39698: LD_INT 32
39700: EQUAL
39701: IFFALSE 39728
// tmp := Insert ( tmp , 1 , j ) else
39703: LD_ADDR_VAR 0 19
39707: PUSH
39708: LD_VAR 0 19
39712: PPUSH
39713: LD_INT 1
39715: PPUSH
39716: LD_VAR 0 9
39720: PPUSH
39721: CALL_OW 2
39725: ST_TO_ADDR
39726: GO 39757
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39728: LD_ADDR_VAR 0 19
39732: PUSH
39733: LD_VAR 0 19
39737: PPUSH
39738: LD_VAR 0 19
39742: PUSH
39743: LD_INT 1
39745: PLUS
39746: PPUSH
39747: LD_VAR 0 9
39751: PPUSH
39752: CALL_OW 2
39756: ST_TO_ADDR
39757: GO 39685
39759: POP
39760: POP
// if tmp then
39761: LD_VAR 0 19
39765: IFFALSE 39777
// f := tmp ;
39767: LD_ADDR_VAR 0 12
39771: PUSH
39772: LD_VAR 0 19
39776: ST_TO_ADDR
// end ; x := personel [ i ] ;
39777: LD_ADDR_VAR 0 13
39781: PUSH
39782: LD_VAR 0 6
39786: PUSH
39787: LD_VAR 0 8
39791: ARRAY
39792: ST_TO_ADDR
// if x = - 1 then
39793: LD_VAR 0 13
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: EQUAL
39802: IFFALSE 40011
// begin for j in f do
39804: LD_ADDR_VAR 0 9
39808: PUSH
39809: LD_VAR 0 12
39813: PUSH
39814: FOR_IN
39815: IFFALSE 40007
// repeat InitHc ;
39817: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39821: LD_VAR 0 9
39825: PPUSH
39826: CALL_OW 266
39830: PUSH
39831: LD_INT 5
39833: EQUAL
39834: IFFALSE 39904
// begin if UnitsInside ( j ) < 3 then
39836: LD_VAR 0 9
39840: PPUSH
39841: CALL_OW 313
39845: PUSH
39846: LD_INT 3
39848: LESS
39849: IFFALSE 39885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39851: LD_INT 0
39853: PPUSH
39854: LD_INT 5
39856: PUSH
39857: LD_INT 8
39859: PUSH
39860: LD_INT 9
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: LD_VAR 0 17
39872: ARRAY
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: CALL_OW 380
39883: GO 39902
// PrepareHuman ( false , i , skill ) ;
39885: LD_INT 0
39887: PPUSH
39888: LD_VAR 0 8
39892: PPUSH
39893: LD_VAR 0 4
39897: PPUSH
39898: CALL_OW 380
// end else
39902: GO 39921
// PrepareHuman ( false , i , skill ) ;
39904: LD_INT 0
39906: PPUSH
39907: LD_VAR 0 8
39911: PPUSH
39912: LD_VAR 0 4
39916: PPUSH
39917: CALL_OW 380
// un := CreateHuman ;
39921: LD_ADDR_VAR 0 14
39925: PUSH
39926: CALL_OW 44
39930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39931: LD_ADDR_VAR 0 7
39935: PUSH
39936: LD_VAR 0 7
39940: PPUSH
39941: LD_INT 1
39943: PPUSH
39944: LD_VAR 0 14
39948: PPUSH
39949: CALL_OW 2
39953: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39954: LD_VAR 0 14
39958: PPUSH
39959: LD_VAR 0 9
39963: PPUSH
39964: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39968: LD_VAR 0 9
39972: PPUSH
39973: CALL_OW 313
39977: PUSH
39978: LD_INT 6
39980: EQUAL
39981: PUSH
39982: LD_VAR 0 9
39986: PPUSH
39987: CALL_OW 266
39991: PUSH
39992: LD_INT 32
39994: PUSH
39995: LD_INT 31
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: IN
40002: OR
40003: IFFALSE 39817
40005: GO 39814
40007: POP
40008: POP
// end else
40009: GO 40391
// for j = 1 to x do
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: DOUBLE
40017: LD_INT 1
40019: DEC
40020: ST_TO_ADDR
40021: LD_VAR 0 13
40025: PUSH
40026: FOR_TO
40027: IFFALSE 40389
// begin InitHc ;
40029: CALL_OW 19
// if not f then
40033: LD_VAR 0 12
40037: NOT
40038: IFFALSE 40127
// begin PrepareHuman ( false , i , skill ) ;
40040: LD_INT 0
40042: PPUSH
40043: LD_VAR 0 8
40047: PPUSH
40048: LD_VAR 0 4
40052: PPUSH
40053: CALL_OW 380
// un := CreateHuman ;
40057: LD_ADDR_VAR 0 14
40061: PUSH
40062: CALL_OW 44
40066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_VAR 0 7
40076: PPUSH
40077: LD_INT 1
40079: PPUSH
40080: LD_VAR 0 14
40084: PPUSH
40085: CALL_OW 2
40089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40090: LD_VAR 0 14
40094: PPUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 250
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 251
40114: PPUSH
40115: LD_INT 10
40117: PPUSH
40118: LD_INT 0
40120: PPUSH
40121: CALL_OW 50
// continue ;
40125: GO 40026
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40127: LD_VAR 0 12
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: PPUSH
40136: CALL_OW 313
40140: PUSH
40141: LD_VAR 0 12
40145: PUSH
40146: LD_INT 1
40148: ARRAY
40149: PPUSH
40150: CALL_OW 266
40154: PUSH
40155: LD_INT 32
40157: PUSH
40158: LD_INT 31
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: IN
40165: AND
40166: PUSH
40167: LD_VAR 0 12
40171: PUSH
40172: LD_INT 1
40174: ARRAY
40175: PPUSH
40176: CALL_OW 313
40180: PUSH
40181: LD_INT 6
40183: EQUAL
40184: OR
40185: IFFALSE 40205
// f := Delete ( f , 1 ) ;
40187: LD_ADDR_VAR 0 12
40191: PUSH
40192: LD_VAR 0 12
40196: PPUSH
40197: LD_INT 1
40199: PPUSH
40200: CALL_OW 3
40204: ST_TO_ADDR
// if not f then
40205: LD_VAR 0 12
40209: NOT
40210: IFFALSE 40228
// begin x := x + 2 ;
40212: LD_ADDR_VAR 0 13
40216: PUSH
40217: LD_VAR 0 13
40221: PUSH
40222: LD_INT 2
40224: PLUS
40225: ST_TO_ADDR
// continue ;
40226: GO 40026
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40228: LD_VAR 0 12
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PPUSH
40237: CALL_OW 266
40241: PUSH
40242: LD_INT 5
40244: EQUAL
40245: IFFALSE 40319
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40247: LD_VAR 0 12
40251: PUSH
40252: LD_INT 1
40254: ARRAY
40255: PPUSH
40256: CALL_OW 313
40260: PUSH
40261: LD_INT 3
40263: LESS
40264: IFFALSE 40300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40266: LD_INT 0
40268: PPUSH
40269: LD_INT 5
40271: PUSH
40272: LD_INT 8
40274: PUSH
40275: LD_INT 9
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PUSH
40283: LD_VAR 0 17
40287: ARRAY
40288: PPUSH
40289: LD_VAR 0 4
40293: PPUSH
40294: CALL_OW 380
40298: GO 40317
// PrepareHuman ( false , i , skill ) ;
40300: LD_INT 0
40302: PPUSH
40303: LD_VAR 0 8
40307: PPUSH
40308: LD_VAR 0 4
40312: PPUSH
40313: CALL_OW 380
// end else
40317: GO 40336
// PrepareHuman ( false , i , skill ) ;
40319: LD_INT 0
40321: PPUSH
40322: LD_VAR 0 8
40326: PPUSH
40327: LD_VAR 0 4
40331: PPUSH
40332: CALL_OW 380
// un := CreateHuman ;
40336: LD_ADDR_VAR 0 14
40340: PUSH
40341: CALL_OW 44
40345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40346: LD_ADDR_VAR 0 7
40350: PUSH
40351: LD_VAR 0 7
40355: PPUSH
40356: LD_INT 1
40358: PPUSH
40359: LD_VAR 0 14
40363: PPUSH
40364: CALL_OW 2
40368: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40369: LD_VAR 0 14
40373: PPUSH
40374: LD_VAR 0 12
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: CALL_OW 52
// end ;
40387: GO 40026
40389: POP
40390: POP
// end ;
40391: GO 39328
40393: POP
40394: POP
// result := result ^ buildings ;
40395: LD_ADDR_VAR 0 7
40399: PUSH
40400: LD_VAR 0 7
40404: PUSH
40405: LD_VAR 0 18
40409: ADD
40410: ST_TO_ADDR
// end else
40411: GO 40554
// begin for i = 1 to personel do
40413: LD_ADDR_VAR 0 8
40417: PUSH
40418: DOUBLE
40419: LD_INT 1
40421: DEC
40422: ST_TO_ADDR
40423: LD_VAR 0 6
40427: PUSH
40428: FOR_TO
40429: IFFALSE 40552
// begin if i > 4 then
40431: LD_VAR 0 8
40435: PUSH
40436: LD_INT 4
40438: GREATER
40439: IFFALSE 40443
// break ;
40441: GO 40552
// x := personel [ i ] ;
40443: LD_ADDR_VAR 0 13
40447: PUSH
40448: LD_VAR 0 6
40452: PUSH
40453: LD_VAR 0 8
40457: ARRAY
40458: ST_TO_ADDR
// if x = - 1 then
40459: LD_VAR 0 13
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: EQUAL
40468: IFFALSE 40472
// continue ;
40470: GO 40428
// PrepareHuman ( false , i , skill ) ;
40472: LD_INT 0
40474: PPUSH
40475: LD_VAR 0 8
40479: PPUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: CALL_OW 380
// un := CreateHuman ;
40489: LD_ADDR_VAR 0 14
40493: PUSH
40494: CALL_OW 44
40498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40499: LD_VAR 0 14
40503: PPUSH
40504: LD_VAR 0 1
40508: PPUSH
40509: CALL_OW 250
40513: PPUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: CALL_OW 251
40523: PPUSH
40524: LD_INT 10
40526: PPUSH
40527: LD_INT 0
40529: PPUSH
40530: CALL_OW 50
// result := result ^ un ;
40534: LD_ADDR_VAR 0 7
40538: PUSH
40539: LD_VAR 0 7
40543: PUSH
40544: LD_VAR 0 14
40548: ADD
40549: ST_TO_ADDR
// end ;
40550: GO 40428
40552: POP
40553: POP
// end ; end ;
40554: LD_VAR 0 7
40558: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40559: LD_INT 0
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
// result := false ;
40577: LD_ADDR_VAR 0 3
40581: PUSH
40582: LD_INT 0
40584: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40585: LD_VAR 0 1
40589: NOT
40590: PUSH
40591: LD_VAR 0 1
40595: PPUSH
40596: CALL_OW 266
40600: PUSH
40601: LD_INT 32
40603: PUSH
40604: LD_INT 33
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: IN
40611: NOT
40612: OR
40613: IFFALSE 40617
// exit ;
40615: GO 41726
// nat := GetNation ( tower ) ;
40617: LD_ADDR_VAR 0 12
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 248
40631: ST_TO_ADDR
// side := GetSide ( tower ) ;
40632: LD_ADDR_VAR 0 16
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 255
40646: ST_TO_ADDR
// x := GetX ( tower ) ;
40647: LD_ADDR_VAR 0 10
40651: PUSH
40652: LD_VAR 0 1
40656: PPUSH
40657: CALL_OW 250
40661: ST_TO_ADDR
// y := GetY ( tower ) ;
40662: LD_ADDR_VAR 0 11
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: CALL_OW 251
40676: ST_TO_ADDR
// if not x or not y then
40677: LD_VAR 0 10
40681: NOT
40682: PUSH
40683: LD_VAR 0 11
40687: NOT
40688: OR
40689: IFFALSE 40693
// exit ;
40691: GO 41726
// weapon := 0 ;
40693: LD_ADDR_VAR 0 18
40697: PUSH
40698: LD_INT 0
40700: ST_TO_ADDR
// fac_list := [ ] ;
40701: LD_ADDR_VAR 0 17
40705: PUSH
40706: EMPTY
40707: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40708: LD_ADDR_VAR 0 6
40712: PUSH
40713: LD_VAR 0 1
40717: PPUSH
40718: CALL_OW 274
40722: PPUSH
40723: LD_VAR 0 2
40727: PPUSH
40728: LD_INT 0
40730: PPUSH
40731: CALL 38297 0 3
40735: PPUSH
40736: LD_INT 30
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PPUSH
40746: CALL_OW 72
40750: ST_TO_ADDR
// if not factories then
40751: LD_VAR 0 6
40755: NOT
40756: IFFALSE 40760
// exit ;
40758: GO 41726
// for i in factories do
40760: LD_ADDR_VAR 0 8
40764: PUSH
40765: LD_VAR 0 6
40769: PUSH
40770: FOR_IN
40771: IFFALSE 40796
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40773: LD_ADDR_VAR 0 17
40777: PUSH
40778: LD_VAR 0 17
40782: PUSH
40783: LD_VAR 0 8
40787: PPUSH
40788: CALL_OW 478
40792: UNION
40793: ST_TO_ADDR
40794: GO 40770
40796: POP
40797: POP
// if not fac_list then
40798: LD_VAR 0 17
40802: NOT
40803: IFFALSE 40807
// exit ;
40805: GO 41726
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40807: LD_ADDR_VAR 0 5
40811: PUSH
40812: LD_INT 4
40814: PUSH
40815: LD_INT 5
40817: PUSH
40818: LD_INT 9
40820: PUSH
40821: LD_INT 10
40823: PUSH
40824: LD_INT 6
40826: PUSH
40827: LD_INT 7
40829: PUSH
40830: LD_INT 11
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 27
40844: PUSH
40845: LD_INT 28
40847: PUSH
40848: LD_INT 26
40850: PUSH
40851: LD_INT 30
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 43
40862: PUSH
40863: LD_INT 44
40865: PUSH
40866: LD_INT 46
40868: PUSH
40869: LD_INT 45
40871: PUSH
40872: LD_INT 47
40874: PUSH
40875: LD_INT 49
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: LD_VAR 0 12
40895: ARRAY
40896: ST_TO_ADDR
// list := list isect fac_list ;
40897: LD_ADDR_VAR 0 5
40901: PUSH
40902: LD_VAR 0 5
40906: PUSH
40907: LD_VAR 0 17
40911: ISECT
40912: ST_TO_ADDR
// if not list then
40913: LD_VAR 0 5
40917: NOT
40918: IFFALSE 40922
// exit ;
40920: GO 41726
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40922: LD_VAR 0 12
40926: PUSH
40927: LD_INT 3
40929: EQUAL
40930: PUSH
40931: LD_INT 49
40933: PUSH
40934: LD_VAR 0 5
40938: IN
40939: AND
40940: PUSH
40941: LD_INT 31
40943: PPUSH
40944: LD_VAR 0 16
40948: PPUSH
40949: CALL_OW 321
40953: PUSH
40954: LD_INT 2
40956: EQUAL
40957: AND
40958: IFFALSE 41018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40960: LD_INT 22
40962: PUSH
40963: LD_VAR 0 16
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 35
40974: PUSH
40975: LD_INT 49
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 91
40984: PUSH
40985: LD_VAR 0 1
40989: PUSH
40990: LD_INT 10
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: PPUSH
41003: CALL_OW 69
41007: NOT
41008: IFFALSE 41018
// weapon := ru_time_lapser ;
41010: LD_ADDR_VAR 0 18
41014: PUSH
41015: LD_INT 49
41017: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41018: LD_VAR 0 12
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: IN
41033: PUSH
41034: LD_INT 11
41036: PUSH
41037: LD_VAR 0 5
41041: IN
41042: PUSH
41043: LD_INT 30
41045: PUSH
41046: LD_VAR 0 5
41050: IN
41051: OR
41052: AND
41053: PUSH
41054: LD_INT 6
41056: PPUSH
41057: LD_VAR 0 16
41061: PPUSH
41062: CALL_OW 321
41066: PUSH
41067: LD_INT 2
41069: EQUAL
41070: AND
41071: IFFALSE 41236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41073: LD_INT 22
41075: PUSH
41076: LD_VAR 0 16
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 35
41090: PUSH
41091: LD_INT 11
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 35
41100: PUSH
41101: LD_INT 30
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 91
41115: PUSH
41116: LD_VAR 0 1
41120: PUSH
41121: LD_INT 18
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: PPUSH
41134: CALL_OW 69
41138: NOT
41139: PUSH
41140: LD_INT 22
41142: PUSH
41143: LD_VAR 0 16
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 30
41157: PUSH
41158: LD_INT 32
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 30
41167: PUSH
41168: LD_INT 33
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 91
41182: PUSH
41183: LD_VAR 0 1
41187: PUSH
41188: LD_INT 12
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: PPUSH
41204: CALL_OW 69
41208: PUSH
41209: LD_INT 2
41211: GREATER
41212: AND
41213: IFFALSE 41236
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41215: LD_ADDR_VAR 0 18
41219: PUSH
41220: LD_INT 11
41222: PUSH
41223: LD_INT 30
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_VAR 0 12
41234: ARRAY
41235: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41236: LD_VAR 0 18
41240: NOT
41241: PUSH
41242: LD_INT 40
41244: PPUSH
41245: LD_VAR 0 16
41249: PPUSH
41250: CALL_OW 321
41254: PUSH
41255: LD_INT 2
41257: EQUAL
41258: AND
41259: PUSH
41260: LD_INT 7
41262: PUSH
41263: LD_VAR 0 5
41267: IN
41268: PUSH
41269: LD_INT 28
41271: PUSH
41272: LD_VAR 0 5
41276: IN
41277: OR
41278: PUSH
41279: LD_INT 45
41281: PUSH
41282: LD_VAR 0 5
41286: IN
41287: OR
41288: AND
41289: IFFALSE 41543
// begin hex := GetHexInfo ( x , y ) ;
41291: LD_ADDR_VAR 0 4
41295: PUSH
41296: LD_VAR 0 10
41300: PPUSH
41301: LD_VAR 0 11
41305: PPUSH
41306: CALL_OW 546
41310: ST_TO_ADDR
// if hex [ 1 ] then
41311: LD_VAR 0 4
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: IFFALSE 41323
// exit ;
41321: GO 41726
// height := hex [ 2 ] ;
41323: LD_ADDR_VAR 0 15
41327: PUSH
41328: LD_VAR 0 4
41332: PUSH
41333: LD_INT 2
41335: ARRAY
41336: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41337: LD_ADDR_VAR 0 14
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 5
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// for i in tmp do
41360: LD_ADDR_VAR 0 8
41364: PUSH
41365: LD_VAR 0 14
41369: PUSH
41370: FOR_IN
41371: IFFALSE 41541
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41373: LD_ADDR_VAR 0 9
41377: PUSH
41378: LD_VAR 0 10
41382: PPUSH
41383: LD_VAR 0 8
41387: PPUSH
41388: LD_INT 5
41390: PPUSH
41391: CALL_OW 272
41395: PUSH
41396: LD_VAR 0 11
41400: PPUSH
41401: LD_VAR 0 8
41405: PPUSH
41406: LD_INT 5
41408: PPUSH
41409: CALL_OW 273
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41418: LD_VAR 0 9
41422: PUSH
41423: LD_INT 1
41425: ARRAY
41426: PPUSH
41427: LD_VAR 0 9
41431: PUSH
41432: LD_INT 2
41434: ARRAY
41435: PPUSH
41436: CALL_OW 488
41440: IFFALSE 41539
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41442: LD_ADDR_VAR 0 4
41446: PUSH
41447: LD_VAR 0 9
41451: PUSH
41452: LD_INT 1
41454: ARRAY
41455: PPUSH
41456: LD_VAR 0 9
41460: PUSH
41461: LD_INT 2
41463: ARRAY
41464: PPUSH
41465: CALL_OW 546
41469: ST_TO_ADDR
// if hex [ 1 ] then
41470: LD_VAR 0 4
41474: PUSH
41475: LD_INT 1
41477: ARRAY
41478: IFFALSE 41482
// continue ;
41480: GO 41370
// h := hex [ 2 ] ;
41482: LD_ADDR_VAR 0 13
41486: PUSH
41487: LD_VAR 0 4
41491: PUSH
41492: LD_INT 2
41494: ARRAY
41495: ST_TO_ADDR
// if h + 7 < height then
41496: LD_VAR 0 13
41500: PUSH
41501: LD_INT 7
41503: PLUS
41504: PUSH
41505: LD_VAR 0 15
41509: LESS
41510: IFFALSE 41539
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41512: LD_ADDR_VAR 0 18
41516: PUSH
41517: LD_INT 7
41519: PUSH
41520: LD_INT 28
41522: PUSH
41523: LD_INT 45
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: PUSH
41531: LD_VAR 0 12
41535: ARRAY
41536: ST_TO_ADDR
// break ;
41537: GO 41541
// end ; end ; end ;
41539: GO 41370
41541: POP
41542: POP
// end ; if not weapon then
41543: LD_VAR 0 18
41547: NOT
41548: IFFALSE 41608
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41550: LD_ADDR_VAR 0 5
41554: PUSH
41555: LD_VAR 0 5
41559: PUSH
41560: LD_INT 11
41562: PUSH
41563: LD_INT 30
41565: PUSH
41566: LD_INT 49
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: DIFF
41574: ST_TO_ADDR
// if not list then
41575: LD_VAR 0 5
41579: NOT
41580: IFFALSE 41584
// exit ;
41582: GO 41726
// weapon := list [ rand ( 1 , list ) ] ;
41584: LD_ADDR_VAR 0 18
41588: PUSH
41589: LD_VAR 0 5
41593: PUSH
41594: LD_INT 1
41596: PPUSH
41597: LD_VAR 0 5
41601: PPUSH
41602: CALL_OW 12
41606: ARRAY
41607: ST_TO_ADDR
// end ; if weapon then
41608: LD_VAR 0 18
41612: IFFALSE 41726
// begin tmp := CostOfWeapon ( weapon ) ;
41614: LD_ADDR_VAR 0 14
41618: PUSH
41619: LD_VAR 0 18
41623: PPUSH
41624: CALL_OW 451
41628: ST_TO_ADDR
// j := GetBase ( tower ) ;
41629: LD_ADDR_VAR 0 9
41633: PUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 274
41643: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41644: LD_VAR 0 9
41648: PPUSH
41649: LD_INT 1
41651: PPUSH
41652: CALL_OW 275
41656: PUSH
41657: LD_VAR 0 14
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: GREATEREQUAL
41666: PUSH
41667: LD_VAR 0 9
41671: PPUSH
41672: LD_INT 2
41674: PPUSH
41675: CALL_OW 275
41679: PUSH
41680: LD_VAR 0 14
41684: PUSH
41685: LD_INT 2
41687: ARRAY
41688: GREATEREQUAL
41689: AND
41690: PUSH
41691: LD_VAR 0 9
41695: PPUSH
41696: LD_INT 3
41698: PPUSH
41699: CALL_OW 275
41703: PUSH
41704: LD_VAR 0 14
41708: PUSH
41709: LD_INT 3
41711: ARRAY
41712: GREATEREQUAL
41713: AND
41714: IFFALSE 41726
// result := weapon ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_VAR 0 18
41725: ST_TO_ADDR
// end ; end ;
41726: LD_VAR 0 3
41730: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
// result := true ;
41735: LD_ADDR_VAR 0 3
41739: PUSH
41740: LD_INT 1
41742: ST_TO_ADDR
// if array1 = array2 then
41743: LD_VAR 0 1
41747: PUSH
41748: LD_VAR 0 2
41752: EQUAL
41753: IFFALSE 41813
// begin for i = 1 to array1 do
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: DOUBLE
41761: LD_INT 1
41763: DEC
41764: ST_TO_ADDR
41765: LD_VAR 0 1
41769: PUSH
41770: FOR_TO
41771: IFFALSE 41809
// if array1 [ i ] <> array2 [ i ] then
41773: LD_VAR 0 1
41777: PUSH
41778: LD_VAR 0 4
41782: ARRAY
41783: PUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_VAR 0 4
41793: ARRAY
41794: NONEQUAL
41795: IFFALSE 41807
// begin result := false ;
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_INT 0
41804: ST_TO_ADDR
// break ;
41805: GO 41809
// end ;
41807: GO 41770
41809: POP
41810: POP
// end else
41811: GO 41821
// result := false ;
41813: LD_ADDR_VAR 0 3
41817: PUSH
41818: LD_INT 0
41820: ST_TO_ADDR
// end ;
41821: LD_VAR 0 3
41825: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41826: LD_INT 0
41828: PPUSH
41829: PPUSH
// if not array1 or not array2 then
41830: LD_VAR 0 1
41834: NOT
41835: PUSH
41836: LD_VAR 0 2
41840: NOT
41841: OR
41842: IFFALSE 41846
// exit ;
41844: GO 41910
// result := true ;
41846: LD_ADDR_VAR 0 3
41850: PUSH
41851: LD_INT 1
41853: ST_TO_ADDR
// for i = 1 to array1 do
41854: LD_ADDR_VAR 0 4
41858: PUSH
41859: DOUBLE
41860: LD_INT 1
41862: DEC
41863: ST_TO_ADDR
41864: LD_VAR 0 1
41868: PUSH
41869: FOR_TO
41870: IFFALSE 41908
// if array1 [ i ] <> array2 [ i ] then
41872: LD_VAR 0 1
41876: PUSH
41877: LD_VAR 0 4
41881: ARRAY
41882: PUSH
41883: LD_VAR 0 2
41887: PUSH
41888: LD_VAR 0 4
41892: ARRAY
41893: NONEQUAL
41894: IFFALSE 41906
// begin result := false ;
41896: LD_ADDR_VAR 0 3
41900: PUSH
41901: LD_INT 0
41903: ST_TO_ADDR
// break ;
41904: GO 41908
// end ;
41906: GO 41869
41908: POP
41909: POP
// end ;
41910: LD_VAR 0 3
41914: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
// pom := GetBase ( fac ) ;
41920: LD_ADDR_VAR 0 5
41924: PUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 274
41934: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41935: LD_ADDR_VAR 0 4
41939: PUSH
41940: LD_VAR 0 2
41944: PUSH
41945: LD_INT 1
41947: ARRAY
41948: PPUSH
41949: LD_VAR 0 2
41953: PUSH
41954: LD_INT 2
41956: ARRAY
41957: PPUSH
41958: LD_VAR 0 2
41962: PUSH
41963: LD_INT 3
41965: ARRAY
41966: PPUSH
41967: LD_VAR 0 2
41971: PUSH
41972: LD_INT 4
41974: ARRAY
41975: PPUSH
41976: CALL_OW 449
41980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_VAR 0 5
41990: PPUSH
41991: LD_INT 1
41993: PPUSH
41994: CALL_OW 275
41998: PUSH
41999: LD_VAR 0 4
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: GREATEREQUAL
42008: PUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: LD_INT 2
42016: PPUSH
42017: CALL_OW 275
42021: PUSH
42022: LD_VAR 0 4
42026: PUSH
42027: LD_INT 2
42029: ARRAY
42030: GREATEREQUAL
42031: AND
42032: PUSH
42033: LD_VAR 0 5
42037: PPUSH
42038: LD_INT 3
42040: PPUSH
42041: CALL_OW 275
42045: PUSH
42046: LD_VAR 0 4
42050: PUSH
42051: LD_INT 3
42053: ARRAY
42054: GREATEREQUAL
42055: AND
42056: ST_TO_ADDR
// end ;
42057: LD_VAR 0 3
42061: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
// pom := GetBase ( building ) ;
42068: LD_ADDR_VAR 0 3
42072: PUSH
42073: LD_VAR 0 1
42077: PPUSH
42078: CALL_OW 274
42082: ST_TO_ADDR
// if not pom then
42083: LD_VAR 0 3
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42262
// btype := GetBType ( building ) ;
42092: LD_ADDR_VAR 0 5
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 266
42106: ST_TO_ADDR
// if btype = b_armoury then
42107: LD_VAR 0 5
42111: PUSH
42112: LD_INT 4
42114: EQUAL
42115: IFFALSE 42125
// btype := b_barracks ;
42117: LD_ADDR_VAR 0 5
42121: PUSH
42122: LD_INT 5
42124: ST_TO_ADDR
// if btype = b_depot then
42125: LD_VAR 0 5
42129: PUSH
42130: LD_INT 0
42132: EQUAL
42133: IFFALSE 42143
// btype := b_warehouse ;
42135: LD_ADDR_VAR 0 5
42139: PUSH
42140: LD_INT 1
42142: ST_TO_ADDR
// if btype = b_workshop then
42143: LD_VAR 0 5
42147: PUSH
42148: LD_INT 2
42150: EQUAL
42151: IFFALSE 42161
// btype := b_factory ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_INT 3
42160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: LD_VAR 0 5
42170: PPUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: CALL_OW 248
42180: PPUSH
42181: CALL_OW 450
42185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42186: LD_ADDR_VAR 0 2
42190: PUSH
42191: LD_VAR 0 3
42195: PPUSH
42196: LD_INT 1
42198: PPUSH
42199: CALL_OW 275
42203: PUSH
42204: LD_VAR 0 4
42208: PUSH
42209: LD_INT 1
42211: ARRAY
42212: GREATEREQUAL
42213: PUSH
42214: LD_VAR 0 3
42218: PPUSH
42219: LD_INT 2
42221: PPUSH
42222: CALL_OW 275
42226: PUSH
42227: LD_VAR 0 4
42231: PUSH
42232: LD_INT 2
42234: ARRAY
42235: GREATEREQUAL
42236: AND
42237: PUSH
42238: LD_VAR 0 3
42242: PPUSH
42243: LD_INT 3
42245: PPUSH
42246: CALL_OW 275
42250: PUSH
42251: LD_VAR 0 4
42255: PUSH
42256: LD_INT 3
42258: ARRAY
42259: GREATEREQUAL
42260: AND
42261: ST_TO_ADDR
// end ;
42262: LD_VAR 0 2
42266: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42267: LD_INT 0
42269: PPUSH
42270: PPUSH
42271: PPUSH
// pom := GetBase ( building ) ;
42272: LD_ADDR_VAR 0 4
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 274
42286: ST_TO_ADDR
// if not pom then
42287: LD_VAR 0 4
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 42397
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42296: LD_ADDR_VAR 0 5
42300: PUSH
42301: LD_VAR 0 2
42305: PPUSH
42306: LD_VAR 0 1
42310: PPUSH
42311: CALL_OW 248
42315: PPUSH
42316: CALL_OW 450
42320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_VAR 0 4
42330: PPUSH
42331: LD_INT 1
42333: PPUSH
42334: CALL_OW 275
42338: PUSH
42339: LD_VAR 0 5
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: GREATEREQUAL
42348: PUSH
42349: LD_VAR 0 4
42353: PPUSH
42354: LD_INT 2
42356: PPUSH
42357: CALL_OW 275
42361: PUSH
42362: LD_VAR 0 5
42366: PUSH
42367: LD_INT 2
42369: ARRAY
42370: GREATEREQUAL
42371: AND
42372: PUSH
42373: LD_VAR 0 4
42377: PPUSH
42378: LD_INT 3
42380: PPUSH
42381: CALL_OW 275
42385: PUSH
42386: LD_VAR 0 5
42390: PUSH
42391: LD_INT 3
42393: ARRAY
42394: GREATEREQUAL
42395: AND
42396: ST_TO_ADDR
// end ;
42397: LD_VAR 0 3
42401: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42402: LD_INT 0
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
// result := false ;
42415: LD_ADDR_VAR 0 8
42419: PUSH
42420: LD_INT 0
42422: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42423: LD_VAR 0 5
42427: NOT
42428: PUSH
42429: LD_VAR 0 1
42433: NOT
42434: OR
42435: PUSH
42436: LD_VAR 0 2
42440: NOT
42441: OR
42442: PUSH
42443: LD_VAR 0 3
42447: NOT
42448: OR
42449: IFFALSE 42453
// exit ;
42451: GO 43267
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42453: LD_ADDR_VAR 0 14
42457: PUSH
42458: LD_VAR 0 1
42462: PPUSH
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: LD_VAR 0 4
42477: PPUSH
42478: LD_VAR 0 5
42482: PUSH
42483: LD_INT 1
42485: ARRAY
42486: PPUSH
42487: CALL_OW 248
42491: PPUSH
42492: LD_INT 0
42494: PPUSH
42495: CALL 44520 0 6
42499: ST_TO_ADDR
// if not hexes then
42500: LD_VAR 0 14
42504: NOT
42505: IFFALSE 42509
// exit ;
42507: GO 43267
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42509: LD_ADDR_VAR 0 17
42513: PUSH
42514: LD_VAR 0 5
42518: PPUSH
42519: LD_INT 22
42521: PUSH
42522: LD_VAR 0 13
42526: PPUSH
42527: CALL_OW 255
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 72
42572: ST_TO_ADDR
// for i = 1 to hexes do
42573: LD_ADDR_VAR 0 9
42577: PUSH
42578: DOUBLE
42579: LD_INT 1
42581: DEC
42582: ST_TO_ADDR
42583: LD_VAR 0 14
42587: PUSH
42588: FOR_TO
42589: IFFALSE 43265
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42591: LD_ADDR_VAR 0 13
42595: PUSH
42596: LD_VAR 0 14
42600: PUSH
42601: LD_VAR 0 9
42605: ARRAY
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: PPUSH
42611: LD_VAR 0 14
42615: PUSH
42616: LD_VAR 0 9
42620: ARRAY
42621: PUSH
42622: LD_INT 2
42624: ARRAY
42625: PPUSH
42626: CALL_OW 428
42630: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42631: LD_VAR 0 14
42635: PUSH
42636: LD_VAR 0 9
42640: ARRAY
42641: PUSH
42642: LD_INT 1
42644: ARRAY
42645: PPUSH
42646: LD_VAR 0 14
42650: PUSH
42651: LD_VAR 0 9
42655: ARRAY
42656: PUSH
42657: LD_INT 2
42659: ARRAY
42660: PPUSH
42661: CALL_OW 351
42665: PUSH
42666: LD_VAR 0 14
42670: PUSH
42671: LD_VAR 0 9
42675: ARRAY
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: PPUSH
42681: LD_VAR 0 14
42685: PUSH
42686: LD_VAR 0 9
42690: ARRAY
42691: PUSH
42692: LD_INT 2
42694: ARRAY
42695: PPUSH
42696: CALL_OW 488
42700: NOT
42701: OR
42702: PUSH
42703: LD_VAR 0 13
42707: PPUSH
42708: CALL_OW 247
42712: PUSH
42713: LD_INT 3
42715: EQUAL
42716: OR
42717: IFFALSE 42723
// exit ;
42719: POP
42720: POP
42721: GO 43267
// if not tmp then
42723: LD_VAR 0 13
42727: NOT
42728: IFFALSE 42732
// continue ;
42730: GO 42588
// result := true ;
42732: LD_ADDR_VAR 0 8
42736: PUSH
42737: LD_INT 1
42739: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42740: LD_VAR 0 6
42744: PUSH
42745: LD_VAR 0 13
42749: PPUSH
42750: CALL_OW 247
42754: PUSH
42755: LD_INT 2
42757: EQUAL
42758: AND
42759: PUSH
42760: LD_VAR 0 13
42764: PPUSH
42765: CALL_OW 263
42769: PUSH
42770: LD_INT 1
42772: EQUAL
42773: AND
42774: IFFALSE 42938
// begin if IsDrivenBy ( tmp ) then
42776: LD_VAR 0 13
42780: PPUSH
42781: CALL_OW 311
42785: IFFALSE 42789
// continue ;
42787: GO 42588
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42789: LD_VAR 0 6
42793: PPUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 60
42799: PUSH
42800: EMPTY
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 55
42812: PUSH
42813: EMPTY
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PPUSH
42824: CALL_OW 72
42828: IFFALSE 42936
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42830: LD_ADDR_VAR 0 18
42834: PUSH
42835: LD_VAR 0 6
42839: PPUSH
42840: LD_INT 3
42842: PUSH
42843: LD_INT 60
42845: PUSH
42846: EMPTY
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 55
42858: PUSH
42859: EMPTY
42860: LIST
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PPUSH
42870: CALL_OW 72
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: ST_TO_ADDR
// if IsInUnit ( driver ) then
42879: LD_VAR 0 18
42883: PPUSH
42884: CALL_OW 310
42888: IFFALSE 42899
// ComExit ( driver ) ;
42890: LD_VAR 0 18
42894: PPUSH
42895: CALL 68301 0 1
// AddComEnterUnit ( driver , tmp ) ;
42899: LD_VAR 0 18
42903: PPUSH
42904: LD_VAR 0 13
42908: PPUSH
42909: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42913: LD_VAR 0 18
42917: PPUSH
42918: LD_VAR 0 7
42922: PPUSH
42923: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42927: LD_VAR 0 18
42931: PPUSH
42932: CALL_OW 181
// end ; continue ;
42936: GO 42588
// end ; if not cleaners or not tmp in cleaners then
42938: LD_VAR 0 6
42942: NOT
42943: PUSH
42944: LD_VAR 0 13
42948: PUSH
42949: LD_VAR 0 6
42953: IN
42954: NOT
42955: OR
42956: IFFALSE 43263
// begin if dep then
42958: LD_VAR 0 17
42962: IFFALSE 43098
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42964: LD_ADDR_VAR 0 16
42968: PUSH
42969: LD_VAR 0 17
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: CALL_OW 250
42982: PPUSH
42983: LD_VAR 0 17
42987: PUSH
42988: LD_INT 1
42990: ARRAY
42991: PPUSH
42992: CALL_OW 254
42996: PPUSH
42997: LD_INT 5
42999: PPUSH
43000: CALL_OW 272
43004: PUSH
43005: LD_VAR 0 17
43009: PUSH
43010: LD_INT 1
43012: ARRAY
43013: PPUSH
43014: CALL_OW 251
43018: PPUSH
43019: LD_VAR 0 17
43023: PUSH
43024: LD_INT 1
43026: ARRAY
43027: PPUSH
43028: CALL_OW 254
43032: PPUSH
43033: LD_INT 5
43035: PPUSH
43036: CALL_OW 273
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43045: LD_VAR 0 16
43049: PUSH
43050: LD_INT 1
43052: ARRAY
43053: PPUSH
43054: LD_VAR 0 16
43058: PUSH
43059: LD_INT 2
43061: ARRAY
43062: PPUSH
43063: CALL_OW 488
43067: IFFALSE 43098
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43069: LD_VAR 0 13
43073: PPUSH
43074: LD_VAR 0 16
43078: PUSH
43079: LD_INT 1
43081: ARRAY
43082: PPUSH
43083: LD_VAR 0 16
43087: PUSH
43088: LD_INT 2
43090: ARRAY
43091: PPUSH
43092: CALL_OW 111
// continue ;
43096: GO 42588
// end ; end ; r := GetDir ( tmp ) ;
43098: LD_ADDR_VAR 0 15
43102: PUSH
43103: LD_VAR 0 13
43107: PPUSH
43108: CALL_OW 254
43112: ST_TO_ADDR
// if r = 5 then
43113: LD_VAR 0 15
43117: PUSH
43118: LD_INT 5
43120: EQUAL
43121: IFFALSE 43131
// r := 0 ;
43123: LD_ADDR_VAR 0 15
43127: PUSH
43128: LD_INT 0
43130: ST_TO_ADDR
// for j = r to 5 do
43131: LD_ADDR_VAR 0 10
43135: PUSH
43136: DOUBLE
43137: LD_VAR 0 15
43141: DEC
43142: ST_TO_ADDR
43143: LD_INT 5
43145: PUSH
43146: FOR_TO
43147: IFFALSE 43261
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43149: LD_ADDR_VAR 0 11
43153: PUSH
43154: LD_VAR 0 13
43158: PPUSH
43159: CALL_OW 250
43163: PPUSH
43164: LD_VAR 0 10
43168: PPUSH
43169: LD_INT 2
43171: PPUSH
43172: CALL_OW 272
43176: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43177: LD_ADDR_VAR 0 12
43181: PUSH
43182: LD_VAR 0 13
43186: PPUSH
43187: CALL_OW 251
43191: PPUSH
43192: LD_VAR 0 10
43196: PPUSH
43197: LD_INT 2
43199: PPUSH
43200: CALL_OW 273
43204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43205: LD_VAR 0 11
43209: PPUSH
43210: LD_VAR 0 12
43214: PPUSH
43215: CALL_OW 488
43219: PUSH
43220: LD_VAR 0 11
43224: PPUSH
43225: LD_VAR 0 12
43229: PPUSH
43230: CALL_OW 428
43234: NOT
43235: AND
43236: IFFALSE 43259
// begin ComMoveXY ( tmp , _x , _y ) ;
43238: LD_VAR 0 13
43242: PPUSH
43243: LD_VAR 0 11
43247: PPUSH
43248: LD_VAR 0 12
43252: PPUSH
43253: CALL_OW 111
// break ;
43257: GO 43261
// end ; end ;
43259: GO 43146
43261: POP
43262: POP
// end ; end ;
43263: GO 42588
43265: POP
43266: POP
// end ;
43267: LD_VAR 0 8
43271: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43272: LD_INT 0
43274: PPUSH
// result := true ;
43275: LD_ADDR_VAR 0 3
43279: PUSH
43280: LD_INT 1
43282: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43283: LD_VAR 0 2
43287: PUSH
43288: LD_INT 24
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43302
43294: LD_INT 33
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43327
43302: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43303: LD_ADDR_VAR 0 3
43307: PUSH
43308: LD_INT 32
43310: PPUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: CALL_OW 321
43320: PUSH
43321: LD_INT 2
43323: EQUAL
43324: ST_TO_ADDR
43325: GO 43643
43327: LD_INT 20
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43335
43333: GO 43360
43335: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43336: LD_ADDR_VAR 0 3
43340: PUSH
43341: LD_INT 6
43343: PPUSH
43344: LD_VAR 0 1
43348: PPUSH
43349: CALL_OW 321
43353: PUSH
43354: LD_INT 2
43356: EQUAL
43357: ST_TO_ADDR
43358: GO 43643
43360: LD_INT 22
43362: DOUBLE
43363: EQUAL
43364: IFTRUE 43374
43366: LD_INT 36
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43399
43374: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 15
43382: PPUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 321
43392: PUSH
43393: LD_INT 2
43395: EQUAL
43396: ST_TO_ADDR
43397: GO 43643
43399: LD_INT 30
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43407
43405: GO 43432
43407: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43408: LD_ADDR_VAR 0 3
43412: PUSH
43413: LD_INT 20
43415: PPUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: CALL_OW 321
43425: PUSH
43426: LD_INT 2
43428: EQUAL
43429: ST_TO_ADDR
43430: GO 43643
43432: LD_INT 28
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43446
43438: LD_INT 21
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43471
43446: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_INT 21
43454: PPUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 321
43464: PUSH
43465: LD_INT 2
43467: EQUAL
43468: ST_TO_ADDR
43469: GO 43643
43471: LD_INT 16
43473: DOUBLE
43474: EQUAL
43475: IFTRUE 43479
43477: GO 43504
43479: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_INT 84
43487: PPUSH
43488: LD_VAR 0 1
43492: PPUSH
43493: CALL_OW 321
43497: PUSH
43498: LD_INT 2
43500: EQUAL
43501: ST_TO_ADDR
43502: GO 43643
43504: LD_INT 19
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43518
43510: LD_INT 23
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43543
43518: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 83
43526: PPUSH
43527: LD_VAR 0 1
43531: PPUSH
43532: CALL_OW 321
43536: PUSH
43537: LD_INT 2
43539: EQUAL
43540: ST_TO_ADDR
43541: GO 43643
43543: LD_INT 17
43545: DOUBLE
43546: EQUAL
43547: IFTRUE 43551
43549: GO 43576
43551: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_INT 39
43559: PPUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 321
43569: PUSH
43570: LD_INT 2
43572: EQUAL
43573: ST_TO_ADDR
43574: GO 43643
43576: LD_INT 18
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43609
43584: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 40
43592: PPUSH
43593: LD_VAR 0 1
43597: PPUSH
43598: CALL_OW 321
43602: PUSH
43603: LD_INT 2
43605: EQUAL
43606: ST_TO_ADDR
43607: GO 43643
43609: LD_INT 27
43611: DOUBLE
43612: EQUAL
43613: IFTRUE 43617
43615: GO 43642
43617: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 35
43625: PPUSH
43626: LD_VAR 0 1
43630: PPUSH
43631: CALL_OW 321
43635: PUSH
43636: LD_INT 2
43638: EQUAL
43639: ST_TO_ADDR
43640: GO 43643
43642: POP
// end ;
43643: LD_VAR 0 3
43647: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
// result := false ;
43661: LD_ADDR_VAR 0 6
43665: PUSH
43666: LD_INT 0
43668: ST_TO_ADDR
// if btype = b_depot then
43669: LD_VAR 0 2
43673: PUSH
43674: LD_INT 0
43676: EQUAL
43677: IFFALSE 43689
// begin result := true ;
43679: LD_ADDR_VAR 0 6
43683: PUSH
43684: LD_INT 1
43686: ST_TO_ADDR
// exit ;
43687: GO 44515
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43689: LD_VAR 0 1
43693: NOT
43694: PUSH
43695: LD_VAR 0 1
43699: PPUSH
43700: CALL_OW 266
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: IN
43715: NOT
43716: OR
43717: PUSH
43718: LD_VAR 0 2
43722: NOT
43723: OR
43724: PUSH
43725: LD_VAR 0 5
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: LD_INT 4
43744: PUSH
43745: LD_INT 5
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: IN
43756: NOT
43757: OR
43758: PUSH
43759: LD_VAR 0 3
43763: PPUSH
43764: LD_VAR 0 4
43768: PPUSH
43769: CALL_OW 488
43773: NOT
43774: OR
43775: IFFALSE 43779
// exit ;
43777: GO 44515
// side := GetSide ( depot ) ;
43779: LD_ADDR_VAR 0 9
43783: PUSH
43784: LD_VAR 0 1
43788: PPUSH
43789: CALL_OW 255
43793: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43794: LD_VAR 0 9
43798: PPUSH
43799: LD_VAR 0 2
43803: PPUSH
43804: CALL 43272 0 2
43808: NOT
43809: IFFALSE 43813
// exit ;
43811: GO 44515
// pom := GetBase ( depot ) ;
43813: LD_ADDR_VAR 0 10
43817: PUSH
43818: LD_VAR 0 1
43822: PPUSH
43823: CALL_OW 274
43827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43828: LD_ADDR_VAR 0 11
43832: PUSH
43833: LD_VAR 0 2
43837: PPUSH
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 248
43847: PPUSH
43848: CALL_OW 450
43852: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43853: LD_VAR 0 10
43857: PPUSH
43858: LD_INT 1
43860: PPUSH
43861: CALL_OW 275
43865: PUSH
43866: LD_VAR 0 11
43870: PUSH
43871: LD_INT 1
43873: ARRAY
43874: GREATEREQUAL
43875: PUSH
43876: LD_VAR 0 10
43880: PPUSH
43881: LD_INT 2
43883: PPUSH
43884: CALL_OW 275
43888: PUSH
43889: LD_VAR 0 11
43893: PUSH
43894: LD_INT 2
43896: ARRAY
43897: GREATEREQUAL
43898: AND
43899: PUSH
43900: LD_VAR 0 10
43904: PPUSH
43905: LD_INT 3
43907: PPUSH
43908: CALL_OW 275
43912: PUSH
43913: LD_VAR 0 11
43917: PUSH
43918: LD_INT 3
43920: ARRAY
43921: GREATEREQUAL
43922: AND
43923: NOT
43924: IFFALSE 43928
// exit ;
43926: GO 44515
// if GetBType ( depot ) = b_depot then
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 266
43937: PUSH
43938: LD_INT 0
43940: EQUAL
43941: IFFALSE 43953
// dist := 28 else
43943: LD_ADDR_VAR 0 14
43947: PUSH
43948: LD_INT 28
43950: ST_TO_ADDR
43951: GO 43961
// dist := 36 ;
43953: LD_ADDR_VAR 0 14
43957: PUSH
43958: LD_INT 36
43960: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43961: LD_VAR 0 1
43965: PPUSH
43966: LD_VAR 0 3
43970: PPUSH
43971: LD_VAR 0 4
43975: PPUSH
43976: CALL_OW 297
43980: PUSH
43981: LD_VAR 0 14
43985: GREATER
43986: IFFALSE 43990
// exit ;
43988: GO 44515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43990: LD_ADDR_VAR 0 12
43994: PUSH
43995: LD_VAR 0 2
43999: PPUSH
44000: LD_VAR 0 3
44004: PPUSH
44005: LD_VAR 0 4
44009: PPUSH
44010: LD_VAR 0 5
44014: PPUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 248
44024: PPUSH
44025: LD_INT 0
44027: PPUSH
44028: CALL 44520 0 6
44032: ST_TO_ADDR
// if not hexes then
44033: LD_VAR 0 12
44037: NOT
44038: IFFALSE 44042
// exit ;
44040: GO 44515
// hex := GetHexInfo ( x , y ) ;
44042: LD_ADDR_VAR 0 15
44046: PUSH
44047: LD_VAR 0 3
44051: PPUSH
44052: LD_VAR 0 4
44056: PPUSH
44057: CALL_OW 546
44061: ST_TO_ADDR
// if hex [ 1 ] then
44062: LD_VAR 0 15
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: IFFALSE 44074
// exit ;
44072: GO 44515
// height := hex [ 2 ] ;
44074: LD_ADDR_VAR 0 13
44078: PUSH
44079: LD_VAR 0 15
44083: PUSH
44084: LD_INT 2
44086: ARRAY
44087: ST_TO_ADDR
// for i = 1 to hexes do
44088: LD_ADDR_VAR 0 7
44092: PUSH
44093: DOUBLE
44094: LD_INT 1
44096: DEC
44097: ST_TO_ADDR
44098: LD_VAR 0 12
44102: PUSH
44103: FOR_TO
44104: IFFALSE 44434
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44106: LD_VAR 0 12
44110: PUSH
44111: LD_VAR 0 7
44115: ARRAY
44116: PUSH
44117: LD_INT 1
44119: ARRAY
44120: PPUSH
44121: LD_VAR 0 12
44125: PUSH
44126: LD_VAR 0 7
44130: ARRAY
44131: PUSH
44132: LD_INT 2
44134: ARRAY
44135: PPUSH
44136: CALL_OW 488
44140: NOT
44141: PUSH
44142: LD_VAR 0 12
44146: PUSH
44147: LD_VAR 0 7
44151: ARRAY
44152: PUSH
44153: LD_INT 1
44155: ARRAY
44156: PPUSH
44157: LD_VAR 0 12
44161: PUSH
44162: LD_VAR 0 7
44166: ARRAY
44167: PUSH
44168: LD_INT 2
44170: ARRAY
44171: PPUSH
44172: CALL_OW 428
44176: PUSH
44177: LD_INT 0
44179: GREATER
44180: OR
44181: PUSH
44182: LD_VAR 0 12
44186: PUSH
44187: LD_VAR 0 7
44191: ARRAY
44192: PUSH
44193: LD_INT 1
44195: ARRAY
44196: PPUSH
44197: LD_VAR 0 12
44201: PUSH
44202: LD_VAR 0 7
44206: ARRAY
44207: PUSH
44208: LD_INT 2
44210: ARRAY
44211: PPUSH
44212: CALL_OW 351
44216: OR
44217: IFFALSE 44223
// exit ;
44219: POP
44220: POP
44221: GO 44515
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44223: LD_ADDR_VAR 0 8
44227: PUSH
44228: LD_VAR 0 12
44232: PUSH
44233: LD_VAR 0 7
44237: ARRAY
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: LD_VAR 0 12
44247: PUSH
44248: LD_VAR 0 7
44252: ARRAY
44253: PUSH
44254: LD_INT 2
44256: ARRAY
44257: PPUSH
44258: CALL_OW 546
44262: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44263: LD_VAR 0 8
44267: PUSH
44268: LD_INT 1
44270: ARRAY
44271: PUSH
44272: LD_VAR 0 8
44276: PUSH
44277: LD_INT 2
44279: ARRAY
44280: PUSH
44281: LD_VAR 0 13
44285: PUSH
44286: LD_INT 2
44288: PLUS
44289: GREATER
44290: OR
44291: PUSH
44292: LD_VAR 0 8
44296: PUSH
44297: LD_INT 2
44299: ARRAY
44300: PUSH
44301: LD_VAR 0 13
44305: PUSH
44306: LD_INT 2
44308: MINUS
44309: LESS
44310: OR
44311: PUSH
44312: LD_VAR 0 8
44316: PUSH
44317: LD_INT 3
44319: ARRAY
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 8
44326: PUSH
44327: LD_INT 9
44329: PUSH
44330: LD_INT 10
44332: PUSH
44333: LD_INT 11
44335: PUSH
44336: LD_INT 12
44338: PUSH
44339: LD_INT 13
44341: PUSH
44342: LD_INT 16
44344: PUSH
44345: LD_INT 17
44347: PUSH
44348: LD_INT 18
44350: PUSH
44351: LD_INT 19
44353: PUSH
44354: LD_INT 20
44356: PUSH
44357: LD_INT 21
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: IN
44375: NOT
44376: OR
44377: PUSH
44378: LD_VAR 0 8
44382: PUSH
44383: LD_INT 5
44385: ARRAY
44386: NOT
44387: OR
44388: PUSH
44389: LD_VAR 0 8
44393: PUSH
44394: LD_INT 6
44396: ARRAY
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 7
44406: PUSH
44407: LD_INT 9
44409: PUSH
44410: LD_INT 10
44412: PUSH
44413: LD_INT 11
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: IN
44424: NOT
44425: OR
44426: IFFALSE 44432
// exit ;
44428: POP
44429: POP
44430: GO 44515
// end ;
44432: GO 44103
44434: POP
44435: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44436: LD_VAR 0 9
44440: PPUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: LD_VAR 0 4
44450: PPUSH
44451: LD_INT 20
44453: PPUSH
44454: CALL 36438 0 4
44458: PUSH
44459: LD_INT 4
44461: ARRAY
44462: IFFALSE 44466
// exit ;
44464: GO 44515
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44466: LD_VAR 0 2
44470: PUSH
44471: LD_INT 29
44473: PUSH
44474: LD_INT 30
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: IN
44481: PUSH
44482: LD_VAR 0 3
44486: PPUSH
44487: LD_VAR 0 4
44491: PPUSH
44492: LD_VAR 0 9
44496: PPUSH
44497: CALL_OW 440
44501: NOT
44502: AND
44503: IFFALSE 44507
// exit ;
44505: GO 44515
// result := true ;
44507: LD_ADDR_VAR 0 6
44511: PUSH
44512: LD_INT 1
44514: ST_TO_ADDR
// end ;
44515: LD_VAR 0 6
44519: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44520: LD_INT 0
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
44549: PPUSH
44550: PPUSH
44551: PPUSH
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
// result = [ ] ;
44580: LD_ADDR_VAR 0 7
44584: PUSH
44585: EMPTY
44586: ST_TO_ADDR
// temp_list = [ ] ;
44587: LD_ADDR_VAR 0 9
44591: PUSH
44592: EMPTY
44593: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44594: LD_VAR 0 4
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: LD_INT 4
44613: PUSH
44614: LD_INT 5
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: IN
44625: NOT
44626: PUSH
44627: LD_VAR 0 1
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: IN
44642: PUSH
44643: LD_VAR 0 5
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: IN
44662: NOT
44663: AND
44664: OR
44665: IFFALSE 44669
// exit ;
44667: GO 63060
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44669: LD_VAR 0 1
44673: PUSH
44674: LD_INT 6
44676: PUSH
44677: LD_INT 7
44679: PUSH
44680: LD_INT 8
44682: PUSH
44683: LD_INT 13
44685: PUSH
44686: LD_INT 12
44688: PUSH
44689: LD_INT 15
44691: PUSH
44692: LD_INT 11
44694: PUSH
44695: LD_INT 14
44697: PUSH
44698: LD_INT 10
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: IN
44712: IFFALSE 44722
// btype = b_lab ;
44714: LD_ADDR_VAR 0 1
44718: PUSH
44719: LD_INT 6
44721: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44722: LD_VAR 0 6
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: IN
44741: NOT
44742: PUSH
44743: LD_VAR 0 1
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 6
44762: PUSH
44763: LD_INT 36
44765: PUSH
44766: LD_INT 4
44768: PUSH
44769: LD_INT 5
44771: PUSH
44772: LD_INT 31
44774: PUSH
44775: LD_INT 32
44777: PUSH
44778: LD_INT 33
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: IN
44794: NOT
44795: PUSH
44796: LD_VAR 0 6
44800: PUSH
44801: LD_INT 1
44803: EQUAL
44804: AND
44805: OR
44806: PUSH
44807: LD_VAR 0 1
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: IN
44822: NOT
44823: PUSH
44824: LD_VAR 0 6
44828: PUSH
44829: LD_INT 2
44831: EQUAL
44832: AND
44833: OR
44834: IFFALSE 44844
// mode = 0 ;
44836: LD_ADDR_VAR 0 6
44840: PUSH
44841: LD_INT 0
44843: ST_TO_ADDR
// case mode of 0 :
44844: LD_VAR 0 6
44848: PUSH
44849: LD_INT 0
44851: DOUBLE
44852: EQUAL
44853: IFTRUE 44857
44855: GO 56310
44857: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44858: LD_ADDR_VAR 0 11
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45051: LD_ADDR_VAR 0 12
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45247: LD_ADDR_VAR 0 13
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45446: LD_ADDR_VAR 0 14
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45642: LD_ADDR_VAR 0 15
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45835: LD_ADDR_VAR 0 16
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46028: LD_ADDR_VAR 0 17
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46258: LD_ADDR_VAR 0 18
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46488: LD_ADDR_VAR 0 19
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46718: LD_ADDR_VAR 0 20
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46948: LD_ADDR_VAR 0 21
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47178: LD_ADDR_VAR 0 22
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47408: LD_ADDR_VAR 0 23
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47688: LD_ADDR_VAR 0 24
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47964: LD_ADDR_VAR 0 25
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48238: LD_ADDR_VAR 0 26
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48514: LD_ADDR_VAR 0 27
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48794: LD_ADDR_VAR 0 28
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49076: LD_ADDR_VAR 0 29
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49355: LD_ADDR_VAR 0 30
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 3
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49633: LD_ADDR_VAR 0 31
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49911: LD_ADDR_VAR 0 32
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50189: LD_ADDR_VAR 0 33
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50468: LD_ADDR_VAR 0 34
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50748: LD_ADDR_VAR 0 35
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50860: LD_ADDR_VAR 0 36
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50972: LD_ADDR_VAR 0 37
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51084: LD_ADDR_VAR 0 38
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51196: LD_ADDR_VAR 0 39
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51308: LD_ADDR_VAR 0 40
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51420: LD_ADDR_VAR 0 41
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: NEG
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51770: LD_ADDR_VAR 0 42
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 3
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52120: LD_ADDR_VAR 0 43
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52468: LD_ADDR_VAR 0 44
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: NEG
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52818: LD_ADDR_VAR 0 45
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53168: LD_ADDR_VAR 0 46
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53516: LD_ADDR_VAR 0 47
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53667: LD_ADDR_VAR 0 48
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53814: LD_ADDR_VAR 0 49
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53958: LD_ADDR_VAR 0 50
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54102: LD_ADDR_VAR 0 51
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54249: LD_ADDR_VAR 0 52
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54400: LD_ADDR_VAR 0 53
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54630: LD_ADDR_VAR 0 54
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54860: LD_ADDR_VAR 0 55
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55090: LD_ADDR_VAR 0 56
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55320: LD_ADDR_VAR 0 57
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55550: LD_ADDR_VAR 0 58
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55780: LD_ADDR_VAR 0 59
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 60
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55956: LD_ADDR_VAR 0 61
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56044: LD_ADDR_VAR 0 62
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56132: LD_ADDR_VAR 0 63
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56220: LD_ADDR_VAR 0 64
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// end ; 1 :
56308: GO 62205
56310: LD_INT 1
56312: DOUBLE
56313: EQUAL
56314: IFTRUE 56318
56316: GO 58941
56318: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56319: LD_ADDR_VAR 0 11
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56363: LD_ADDR_VAR 0 12
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56404: LD_ADDR_VAR 0 13
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56444: LD_ADDR_VAR 0 14
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56485: LD_ADDR_VAR 0 15
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56529: LD_ADDR_VAR 0 16
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: LD_INT 3
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56575: LD_ADDR_VAR 0 17
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56619: LD_ADDR_VAR 0 18
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: LIST
56659: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56660: LD_ADDR_VAR 0 19
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56700: LD_ADDR_VAR 0 20
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56741: LD_ADDR_VAR 0 21
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56785: LD_ADDR_VAR 0 22
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56831: LD_ADDR_VAR 0 23
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56875: LD_ADDR_VAR 0 24
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56916: LD_ADDR_VAR 0 25
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 4
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: LD_INT 4
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56956: LD_ADDR_VAR 0 26
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56997: LD_ADDR_VAR 0 27
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 4
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57041: LD_ADDR_VAR 0 28
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 4
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: LD_INT 3
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57087: LD_ADDR_VAR 0 29
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 4
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 4
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 3
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 5
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 5
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 4
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 6
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 6
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 5
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57242: LD_ADDR_VAR 0 30
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 4
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 4
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 4
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 5
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 5
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 6
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 6
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57385: LD_ADDR_VAR 0 31
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 4
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: LD_INT 4
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 5
57452: PUSH
57453: LD_INT 4
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 5
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: LD_INT 5
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 6
57482: PUSH
57483: LD_INT 5
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 6
57492: PUSH
57493: LD_INT 6
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 5
57502: PUSH
57503: LD_INT 6
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57524: LD_ADDR_VAR 0 32
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 4
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 4
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 5
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 5
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 4
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 6
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 6
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 5
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57667: LD_ADDR_VAR 0 33
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 4
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 5
57753: NEG
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 5
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 5
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 6
57787: NEG
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 6
57798: NEG
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57822: LD_ADDR_VAR 0 34
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: NEG
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: LD_INT 5
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 5
57913: NEG
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 5
57925: NEG
57926: PUSH
57927: LD_INT 5
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 5
57937: NEG
57938: PUSH
57939: LD_INT 6
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 6
57949: NEG
57950: PUSH
57951: LD_INT 5
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 6
57961: NEG
57962: PUSH
57963: LD_INT 6
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57985: LD_ADDR_VAR 0 41
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58029: LD_ADDR_VAR 0 42
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58070: LD_ADDR_VAR 0 43
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58110: LD_ADDR_VAR 0 44
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58151: LD_ADDR_VAR 0 45
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58195: LD_ADDR_VAR 0 46
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58241: LD_ADDR_VAR 0 47
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 3
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58274: LD_ADDR_VAR 0 48
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58305: LD_ADDR_VAR 0 49
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58334: LD_ADDR_VAR 0 50
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58363: LD_ADDR_VAR 0 51
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58394: LD_ADDR_VAR 0 52
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58427: LD_ADDR_VAR 0 53
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58471: LD_ADDR_VAR 0 54
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58512: LD_ADDR_VAR 0 55
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58552: LD_ADDR_VAR 0 56
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58593: LD_ADDR_VAR 0 57
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58637: LD_ADDR_VAR 0 58
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58683: LD_ADDR_VAR 0 59
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58727: LD_ADDR_VAR 0 60
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58768: LD_ADDR_VAR 0 61
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58808: LD_ADDR_VAR 0 62
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58849: LD_ADDR_VAR 0 63
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58893: LD_ADDR_VAR 0 64
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// end ; 2 :
58939: GO 62205
58941: LD_INT 2
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58949
58947: GO 62204
58949: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58950: LD_ADDR_VAR 0 29
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 5
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 5
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 4
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 4
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 4
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 4
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 5
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 4
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 5
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: NEG
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 4
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: LD_INT 4
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: LD_INT 5
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 3
59359: NEG
59360: PUSH
59361: LD_INT 4
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: LD_INT 3
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 5
59395: NEG
59396: PUSH
59397: LD_INT 4
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 5
59407: NEG
59408: PUSH
59409: LD_INT 5
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: LD_INT 5
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59488: LD_ADDR_VAR 0 30
59492: PUSH
59493: LD_INT 4
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 5
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 5
59525: PUSH
59526: LD_INT 5
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: LD_INT 5
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 5
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 4
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 3
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 4
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: NEG
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 4
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 4
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 5
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 5
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 5
59757: NEG
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: LD_INT 4
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 4
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 4
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 5
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 3
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 5
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 5
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60035: LD_ADDR_VAR 0 31
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 4
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 4
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 5
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 5
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 4
60214: NEG
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: LD_INT 5
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: NEG
60298: PUSH
60299: LD_INT 4
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 5
60309: NEG
60310: PUSH
60311: LD_INT 5
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: LD_INT 5
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 5
60333: NEG
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 4
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 4
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 4
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 5
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60585: LD_ADDR_VAR 0 32
60589: PUSH
60590: LD_INT 4
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 4
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 4
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 5
60648: NEG
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 5
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 5
60671: NEG
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: LD_INT 3
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 4
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 4
60766: NEG
60767: PUSH
60768: LD_INT 4
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 5
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 4
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 5
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 5
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 4
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 4
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 4
60997: PUSH
60998: LD_INT 4
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 5
61017: PUSH
61018: LD_INT 4
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 5
61027: PUSH
61028: LD_INT 5
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: PUSH
61038: LD_INT 5
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 5
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61132: LD_ADDR_VAR 0 33
61136: PUSH
61137: LD_INT 4
61139: NEG
61140: PUSH
61141: LD_INT 4
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: LD_INT 5
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 3
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 5
61199: NEG
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 5
61211: NEG
61212: PUSH
61213: LD_INT 5
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: NEG
61224: PUSH
61225: LD_INT 5
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 5
61235: NEG
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 4
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 4
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 4
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 4
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 5
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 5
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 4
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 5
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 3
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 5
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61670: LD_ADDR_VAR 0 34
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 4
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 5
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 4
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 5
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 5
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 4
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 4
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: PUSH
61873: LD_INT 4
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 5
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 5
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 4
61912: PUSH
61913: LD_INT 5
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 5
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 4
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 4
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 4
62055: NEG
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 3
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 4
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 5
62111: NEG
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 5
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 5
62134: NEG
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// end ; end ;
62202: GO 62205
62204: POP
// case btype of b_depot , b_warehouse :
62205: LD_VAR 0 1
62209: PUSH
62210: LD_INT 0
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62224
62216: LD_INT 1
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62224
62222: GO 62425
62224: POP
// case nation of nation_american :
62225: LD_VAR 0 5
62229: PUSH
62230: LD_INT 1
62232: DOUBLE
62233: EQUAL
62234: IFTRUE 62238
62236: GO 62294
62238: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62239: LD_ADDR_VAR 0 9
62243: PUSH
62244: LD_VAR 0 11
62248: PUSH
62249: LD_VAR 0 12
62253: PUSH
62254: LD_VAR 0 13
62258: PUSH
62259: LD_VAR 0 14
62263: PUSH
62264: LD_VAR 0 15
62268: PUSH
62269: LD_VAR 0 16
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: PUSH
62282: LD_VAR 0 4
62286: PUSH
62287: LD_INT 1
62289: PLUS
62290: ARRAY
62291: ST_TO_ADDR
62292: GO 62423
62294: LD_INT 2
62296: DOUBLE
62297: EQUAL
62298: IFTRUE 62302
62300: GO 62358
62302: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62303: LD_ADDR_VAR 0 9
62307: PUSH
62308: LD_VAR 0 17
62312: PUSH
62313: LD_VAR 0 18
62317: PUSH
62318: LD_VAR 0 19
62322: PUSH
62323: LD_VAR 0 20
62327: PUSH
62328: LD_VAR 0 21
62332: PUSH
62333: LD_VAR 0 22
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: PUSH
62346: LD_VAR 0 4
62350: PUSH
62351: LD_INT 1
62353: PLUS
62354: ARRAY
62355: ST_TO_ADDR
62356: GO 62423
62358: LD_INT 3
62360: DOUBLE
62361: EQUAL
62362: IFTRUE 62366
62364: GO 62422
62366: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62367: LD_ADDR_VAR 0 9
62371: PUSH
62372: LD_VAR 0 23
62376: PUSH
62377: LD_VAR 0 24
62381: PUSH
62382: LD_VAR 0 25
62386: PUSH
62387: LD_VAR 0 26
62391: PUSH
62392: LD_VAR 0 27
62396: PUSH
62397: LD_VAR 0 28
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: PUSH
62410: LD_VAR 0 4
62414: PUSH
62415: LD_INT 1
62417: PLUS
62418: ARRAY
62419: ST_TO_ADDR
62420: GO 62423
62422: POP
62423: GO 62978
62425: LD_INT 2
62427: DOUBLE
62428: EQUAL
62429: IFTRUE 62439
62431: LD_INT 3
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62439
62437: GO 62495
62439: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62440: LD_ADDR_VAR 0 9
62444: PUSH
62445: LD_VAR 0 29
62449: PUSH
62450: LD_VAR 0 30
62454: PUSH
62455: LD_VAR 0 31
62459: PUSH
62460: LD_VAR 0 32
62464: PUSH
62465: LD_VAR 0 33
62469: PUSH
62470: LD_VAR 0 34
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: PUSH
62483: LD_VAR 0 4
62487: PUSH
62488: LD_INT 1
62490: PLUS
62491: ARRAY
62492: ST_TO_ADDR
62493: GO 62978
62495: LD_INT 16
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62557
62501: LD_INT 17
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62557
62507: LD_INT 18
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62557
62513: LD_INT 19
62515: DOUBLE
62516: EQUAL
62517: IFTRUE 62557
62519: LD_INT 22
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62557
62525: LD_INT 20
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62557
62531: LD_INT 21
62533: DOUBLE
62534: EQUAL
62535: IFTRUE 62557
62537: LD_INT 23
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62557
62543: LD_INT 24
62545: DOUBLE
62546: EQUAL
62547: IFTRUE 62557
62549: LD_INT 25
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62557
62555: GO 62613
62557: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62558: LD_ADDR_VAR 0 9
62562: PUSH
62563: LD_VAR 0 35
62567: PUSH
62568: LD_VAR 0 36
62572: PUSH
62573: LD_VAR 0 37
62577: PUSH
62578: LD_VAR 0 38
62582: PUSH
62583: LD_VAR 0 39
62587: PUSH
62588: LD_VAR 0 40
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: PUSH
62601: LD_VAR 0 4
62605: PUSH
62606: LD_INT 1
62608: PLUS
62609: ARRAY
62610: ST_TO_ADDR
62611: GO 62978
62613: LD_INT 6
62615: DOUBLE
62616: EQUAL
62617: IFTRUE 62669
62619: LD_INT 7
62621: DOUBLE
62622: EQUAL
62623: IFTRUE 62669
62625: LD_INT 8
62627: DOUBLE
62628: EQUAL
62629: IFTRUE 62669
62631: LD_INT 13
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62669
62637: LD_INT 12
62639: DOUBLE
62640: EQUAL
62641: IFTRUE 62669
62643: LD_INT 15
62645: DOUBLE
62646: EQUAL
62647: IFTRUE 62669
62649: LD_INT 11
62651: DOUBLE
62652: EQUAL
62653: IFTRUE 62669
62655: LD_INT 14
62657: DOUBLE
62658: EQUAL
62659: IFTRUE 62669
62661: LD_INT 10
62663: DOUBLE
62664: EQUAL
62665: IFTRUE 62669
62667: GO 62725
62669: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62670: LD_ADDR_VAR 0 9
62674: PUSH
62675: LD_VAR 0 41
62679: PUSH
62680: LD_VAR 0 42
62684: PUSH
62685: LD_VAR 0 43
62689: PUSH
62690: LD_VAR 0 44
62694: PUSH
62695: LD_VAR 0 45
62699: PUSH
62700: LD_VAR 0 46
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: PUSH
62713: LD_VAR 0 4
62717: PUSH
62718: LD_INT 1
62720: PLUS
62721: ARRAY
62722: ST_TO_ADDR
62723: GO 62978
62725: LD_INT 36
62727: DOUBLE
62728: EQUAL
62729: IFTRUE 62733
62731: GO 62789
62733: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62734: LD_ADDR_VAR 0 9
62738: PUSH
62739: LD_VAR 0 47
62743: PUSH
62744: LD_VAR 0 48
62748: PUSH
62749: LD_VAR 0 49
62753: PUSH
62754: LD_VAR 0 50
62758: PUSH
62759: LD_VAR 0 51
62763: PUSH
62764: LD_VAR 0 52
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: PUSH
62777: LD_VAR 0 4
62781: PUSH
62782: LD_INT 1
62784: PLUS
62785: ARRAY
62786: ST_TO_ADDR
62787: GO 62978
62789: LD_INT 4
62791: DOUBLE
62792: EQUAL
62793: IFTRUE 62815
62795: LD_INT 5
62797: DOUBLE
62798: EQUAL
62799: IFTRUE 62815
62801: LD_INT 34
62803: DOUBLE
62804: EQUAL
62805: IFTRUE 62815
62807: LD_INT 37
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62815
62813: GO 62871
62815: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62816: LD_ADDR_VAR 0 9
62820: PUSH
62821: LD_VAR 0 53
62825: PUSH
62826: LD_VAR 0 54
62830: PUSH
62831: LD_VAR 0 55
62835: PUSH
62836: LD_VAR 0 56
62840: PUSH
62841: LD_VAR 0 57
62845: PUSH
62846: LD_VAR 0 58
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: PUSH
62859: LD_VAR 0 4
62863: PUSH
62864: LD_INT 1
62866: PLUS
62867: ARRAY
62868: ST_TO_ADDR
62869: GO 62978
62871: LD_INT 31
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62921
62877: LD_INT 32
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62921
62883: LD_INT 33
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62921
62889: LD_INT 27
62891: DOUBLE
62892: EQUAL
62893: IFTRUE 62921
62895: LD_INT 26
62897: DOUBLE
62898: EQUAL
62899: IFTRUE 62921
62901: LD_INT 28
62903: DOUBLE
62904: EQUAL
62905: IFTRUE 62921
62907: LD_INT 29
62909: DOUBLE
62910: EQUAL
62911: IFTRUE 62921
62913: LD_INT 30
62915: DOUBLE
62916: EQUAL
62917: IFTRUE 62921
62919: GO 62977
62921: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62922: LD_ADDR_VAR 0 9
62926: PUSH
62927: LD_VAR 0 59
62931: PUSH
62932: LD_VAR 0 60
62936: PUSH
62937: LD_VAR 0 61
62941: PUSH
62942: LD_VAR 0 62
62946: PUSH
62947: LD_VAR 0 63
62951: PUSH
62952: LD_VAR 0 64
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: PUSH
62965: LD_VAR 0 4
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: ARRAY
62974: ST_TO_ADDR
62975: GO 62978
62977: POP
// temp_list2 = [ ] ;
62978: LD_ADDR_VAR 0 10
62982: PUSH
62983: EMPTY
62984: ST_TO_ADDR
// for i in temp_list do
62985: LD_ADDR_VAR 0 8
62989: PUSH
62990: LD_VAR 0 9
62994: PUSH
62995: FOR_IN
62996: IFFALSE 63048
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62998: LD_ADDR_VAR 0 10
63002: PUSH
63003: LD_VAR 0 10
63007: PUSH
63008: LD_VAR 0 8
63012: PUSH
63013: LD_INT 1
63015: ARRAY
63016: PUSH
63017: LD_VAR 0 2
63021: PLUS
63022: PUSH
63023: LD_VAR 0 8
63027: PUSH
63028: LD_INT 2
63030: ARRAY
63031: PUSH
63032: LD_VAR 0 3
63036: PLUS
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: ADD
63045: ST_TO_ADDR
63046: GO 62995
63048: POP
63049: POP
// result = temp_list2 ;
63050: LD_ADDR_VAR 0 7
63054: PUSH
63055: LD_VAR 0 10
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 7
63064: RET
// export function EnemyInRange ( unit , dist ) ; begin
63065: LD_INT 0
63067: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63068: LD_ADDR_VAR 0 3
63072: PUSH
63073: LD_VAR 0 1
63077: PPUSH
63078: CALL_OW 255
63082: PPUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 250
63092: PPUSH
63093: LD_VAR 0 1
63097: PPUSH
63098: CALL_OW 251
63102: PPUSH
63103: LD_VAR 0 2
63107: PPUSH
63108: CALL 36438 0 4
63112: PUSH
63113: LD_INT 4
63115: ARRAY
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 3
63121: RET
// export function PlayerSeeMe ( unit ) ; begin
63122: LD_INT 0
63124: PPUSH
// result := See ( your_side , unit ) ;
63125: LD_ADDR_VAR 0 2
63129: PUSH
63130: LD_OWVAR 2
63134: PPUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 292
63144: ST_TO_ADDR
// end ;
63145: LD_VAR 0 2
63149: RET
// export function ReverseDir ( unit ) ; begin
63150: LD_INT 0
63152: PPUSH
// if not unit then
63153: LD_VAR 0 1
63157: NOT
63158: IFFALSE 63162
// exit ;
63160: GO 63185
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63162: LD_ADDR_VAR 0 2
63166: PUSH
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL_OW 254
63176: PUSH
63177: LD_INT 3
63179: PLUS
63180: PUSH
63181: LD_INT 6
63183: MOD
63184: ST_TO_ADDR
// end ;
63185: LD_VAR 0 2
63189: RET
// export function ReverseArray ( array ) ; var i ; begin
63190: LD_INT 0
63192: PPUSH
63193: PPUSH
// if not array then
63194: LD_VAR 0 1
63198: NOT
63199: IFFALSE 63203
// exit ;
63201: GO 63258
// result := [ ] ;
63203: LD_ADDR_VAR 0 2
63207: PUSH
63208: EMPTY
63209: ST_TO_ADDR
// for i := array downto 1 do
63210: LD_ADDR_VAR 0 3
63214: PUSH
63215: DOUBLE
63216: LD_VAR 0 1
63220: INC
63221: ST_TO_ADDR
63222: LD_INT 1
63224: PUSH
63225: FOR_DOWNTO
63226: IFFALSE 63256
// result := Join ( result , array [ i ] ) ;
63228: LD_ADDR_VAR 0 2
63232: PUSH
63233: LD_VAR 0 2
63237: PPUSH
63238: LD_VAR 0 1
63242: PUSH
63243: LD_VAR 0 3
63247: ARRAY
63248: PPUSH
63249: CALL 67903 0 2
63253: ST_TO_ADDR
63254: GO 63225
63256: POP
63257: POP
// end ;
63258: LD_VAR 0 2
63262: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63263: LD_INT 0
63265: PPUSH
63266: PPUSH
63267: PPUSH
63268: PPUSH
63269: PPUSH
63270: PPUSH
// if not unit or not hexes then
63271: LD_VAR 0 1
63275: NOT
63276: PUSH
63277: LD_VAR 0 2
63281: NOT
63282: OR
63283: IFFALSE 63287
// exit ;
63285: GO 63410
// dist := 9999 ;
63287: LD_ADDR_VAR 0 5
63291: PUSH
63292: LD_INT 9999
63294: ST_TO_ADDR
// for i = 1 to hexes do
63295: LD_ADDR_VAR 0 4
63299: PUSH
63300: DOUBLE
63301: LD_INT 1
63303: DEC
63304: ST_TO_ADDR
63305: LD_VAR 0 2
63309: PUSH
63310: FOR_TO
63311: IFFALSE 63398
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63313: LD_ADDR_VAR 0 6
63317: PUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: LD_VAR 0 2
63327: PUSH
63328: LD_VAR 0 4
63332: ARRAY
63333: PUSH
63334: LD_INT 1
63336: ARRAY
63337: PPUSH
63338: LD_VAR 0 2
63342: PUSH
63343: LD_VAR 0 4
63347: ARRAY
63348: PUSH
63349: LD_INT 2
63351: ARRAY
63352: PPUSH
63353: CALL_OW 297
63357: ST_TO_ADDR
// if tdist < dist then
63358: LD_VAR 0 6
63362: PUSH
63363: LD_VAR 0 5
63367: LESS
63368: IFFALSE 63396
// begin hex := hexes [ i ] ;
63370: LD_ADDR_VAR 0 8
63374: PUSH
63375: LD_VAR 0 2
63379: PUSH
63380: LD_VAR 0 4
63384: ARRAY
63385: ST_TO_ADDR
// dist := tdist ;
63386: LD_ADDR_VAR 0 5
63390: PUSH
63391: LD_VAR 0 6
63395: ST_TO_ADDR
// end ; end ;
63396: GO 63310
63398: POP
63399: POP
// result := hex ;
63400: LD_ADDR_VAR 0 3
63404: PUSH
63405: LD_VAR 0 8
63409: ST_TO_ADDR
// end ;
63410: LD_VAR 0 3
63414: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63415: LD_INT 0
63417: PPUSH
63418: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63419: LD_VAR 0 1
63423: NOT
63424: PUSH
63425: LD_VAR 0 1
63429: PUSH
63430: LD_INT 21
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 23
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PPUSH
63454: CALL_OW 69
63458: IN
63459: NOT
63460: OR
63461: IFFALSE 63465
// exit ;
63463: GO 63512
// for i = 1 to 3 do
63465: LD_ADDR_VAR 0 3
63469: PUSH
63470: DOUBLE
63471: LD_INT 1
63473: DEC
63474: ST_TO_ADDR
63475: LD_INT 3
63477: PUSH
63478: FOR_TO
63479: IFFALSE 63510
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 250
63490: PPUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL_OW 251
63500: PPUSH
63501: LD_INT 1
63503: PPUSH
63504: CALL_OW 453
63508: GO 63478
63510: POP
63511: POP
// end ;
63512: LD_VAR 0 2
63516: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63517: LD_INT 0
63519: PPUSH
63520: PPUSH
63521: PPUSH
63522: PPUSH
63523: PPUSH
63524: PPUSH
// if not unit or not enemy_unit then
63525: LD_VAR 0 1
63529: NOT
63530: PUSH
63531: LD_VAR 0 2
63535: NOT
63536: OR
63537: IFFALSE 63541
// exit ;
63539: GO 64008
// if GetLives ( i ) < 250 then
63541: LD_VAR 0 4
63545: PPUSH
63546: CALL_OW 256
63550: PUSH
63551: LD_INT 250
63553: LESS
63554: IFFALSE 63567
// begin ComAutodestruct ( i ) ;
63556: LD_VAR 0 4
63560: PPUSH
63561: CALL 63415 0 1
// exit ;
63565: GO 64008
// end ; x := GetX ( enemy_unit ) ;
63567: LD_ADDR_VAR 0 7
63571: PUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: CALL_OW 250
63581: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63582: LD_ADDR_VAR 0 8
63586: PUSH
63587: LD_VAR 0 2
63591: PPUSH
63592: CALL_OW 251
63596: ST_TO_ADDR
// if not x or not y then
63597: LD_VAR 0 7
63601: NOT
63602: PUSH
63603: LD_VAR 0 8
63607: NOT
63608: OR
63609: IFFALSE 63613
// exit ;
63611: GO 64008
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63613: LD_ADDR_VAR 0 6
63617: PUSH
63618: LD_VAR 0 7
63622: PPUSH
63623: LD_INT 0
63625: PPUSH
63626: LD_INT 4
63628: PPUSH
63629: CALL_OW 272
63633: PUSH
63634: LD_VAR 0 8
63638: PPUSH
63639: LD_INT 0
63641: PPUSH
63642: LD_INT 4
63644: PPUSH
63645: CALL_OW 273
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_VAR 0 7
63658: PPUSH
63659: LD_INT 1
63661: PPUSH
63662: LD_INT 4
63664: PPUSH
63665: CALL_OW 272
63669: PUSH
63670: LD_VAR 0 8
63674: PPUSH
63675: LD_INT 1
63677: PPUSH
63678: LD_INT 4
63680: PPUSH
63681: CALL_OW 273
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_VAR 0 7
63694: PPUSH
63695: LD_INT 2
63697: PPUSH
63698: LD_INT 4
63700: PPUSH
63701: CALL_OW 272
63705: PUSH
63706: LD_VAR 0 8
63710: PPUSH
63711: LD_INT 2
63713: PPUSH
63714: LD_INT 4
63716: PPUSH
63717: CALL_OW 273
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_VAR 0 7
63730: PPUSH
63731: LD_INT 3
63733: PPUSH
63734: LD_INT 4
63736: PPUSH
63737: CALL_OW 272
63741: PUSH
63742: LD_VAR 0 8
63746: PPUSH
63747: LD_INT 3
63749: PPUSH
63750: LD_INT 4
63752: PPUSH
63753: CALL_OW 273
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_VAR 0 7
63766: PPUSH
63767: LD_INT 4
63769: PPUSH
63770: LD_INT 4
63772: PPUSH
63773: CALL_OW 272
63777: PUSH
63778: LD_VAR 0 8
63782: PPUSH
63783: LD_INT 4
63785: PPUSH
63786: LD_INT 4
63788: PPUSH
63789: CALL_OW 273
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_VAR 0 7
63802: PPUSH
63803: LD_INT 5
63805: PPUSH
63806: LD_INT 4
63808: PPUSH
63809: CALL_OW 272
63813: PUSH
63814: LD_VAR 0 8
63818: PPUSH
63819: LD_INT 5
63821: PPUSH
63822: LD_INT 4
63824: PPUSH
63825: CALL_OW 273
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// for i = tmp downto 1 do
63842: LD_ADDR_VAR 0 4
63846: PUSH
63847: DOUBLE
63848: LD_VAR 0 6
63852: INC
63853: ST_TO_ADDR
63854: LD_INT 1
63856: PUSH
63857: FOR_DOWNTO
63858: IFFALSE 63959
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63860: LD_VAR 0 6
63864: PUSH
63865: LD_VAR 0 4
63869: ARRAY
63870: PUSH
63871: LD_INT 1
63873: ARRAY
63874: PPUSH
63875: LD_VAR 0 6
63879: PUSH
63880: LD_VAR 0 4
63884: ARRAY
63885: PUSH
63886: LD_INT 2
63888: ARRAY
63889: PPUSH
63890: CALL_OW 488
63894: NOT
63895: PUSH
63896: LD_VAR 0 6
63900: PUSH
63901: LD_VAR 0 4
63905: ARRAY
63906: PUSH
63907: LD_INT 1
63909: ARRAY
63910: PPUSH
63911: LD_VAR 0 6
63915: PUSH
63916: LD_VAR 0 4
63920: ARRAY
63921: PUSH
63922: LD_INT 2
63924: ARRAY
63925: PPUSH
63926: CALL_OW 428
63930: PUSH
63931: LD_INT 0
63933: NONEQUAL
63934: OR
63935: IFFALSE 63957
// tmp := Delete ( tmp , i ) ;
63937: LD_ADDR_VAR 0 6
63941: PUSH
63942: LD_VAR 0 6
63946: PPUSH
63947: LD_VAR 0 4
63951: PPUSH
63952: CALL_OW 3
63956: ST_TO_ADDR
63957: GO 63857
63959: POP
63960: POP
// j := GetClosestHex ( unit , tmp ) ;
63961: LD_ADDR_VAR 0 5
63965: PUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: LD_VAR 0 6
63975: PPUSH
63976: CALL 63263 0 2
63980: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63981: LD_VAR 0 1
63985: PPUSH
63986: LD_VAR 0 5
63990: PUSH
63991: LD_INT 1
63993: ARRAY
63994: PPUSH
63995: LD_VAR 0 5
63999: PUSH
64000: LD_INT 2
64002: ARRAY
64003: PPUSH
64004: CALL_OW 111
// end ;
64008: LD_VAR 0 3
64012: RET
// export function PrepareApemanSoldier ( ) ; begin
64013: LD_INT 0
64015: PPUSH
// uc_nation := 0 ;
64016: LD_ADDR_OWVAR 21
64020: PUSH
64021: LD_INT 0
64023: ST_TO_ADDR
// hc_sex := sex_male ;
64024: LD_ADDR_OWVAR 27
64028: PUSH
64029: LD_INT 1
64031: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64032: LD_ADDR_OWVAR 28
64036: PUSH
64037: LD_INT 15
64039: ST_TO_ADDR
// hc_gallery :=  ;
64040: LD_ADDR_OWVAR 33
64044: PUSH
64045: LD_STRING 
64047: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64048: LD_ADDR_OWVAR 31
64052: PUSH
64053: LD_INT 0
64055: PPUSH
64056: LD_INT 3
64058: PPUSH
64059: CALL_OW 12
64063: PUSH
64064: LD_INT 0
64066: PPUSH
64067: LD_INT 3
64069: PPUSH
64070: CALL_OW 12
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// end ;
64087: LD_VAR 0 1
64091: RET
// export function PrepareApemanEngineer ( ) ; begin
64092: LD_INT 0
64094: PPUSH
// uc_nation := 0 ;
64095: LD_ADDR_OWVAR 21
64099: PUSH
64100: LD_INT 0
64102: ST_TO_ADDR
// hc_sex := sex_male ;
64103: LD_ADDR_OWVAR 27
64107: PUSH
64108: LD_INT 1
64110: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64111: LD_ADDR_OWVAR 28
64115: PUSH
64116: LD_INT 16
64118: ST_TO_ADDR
// hc_gallery :=  ;
64119: LD_ADDR_OWVAR 33
64123: PUSH
64124: LD_STRING 
64126: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64127: LD_ADDR_OWVAR 31
64131: PUSH
64132: LD_INT 0
64134: PPUSH
64135: LD_INT 3
64137: PPUSH
64138: CALL_OW 12
64142: PUSH
64143: LD_INT 0
64145: PPUSH
64146: LD_INT 3
64148: PPUSH
64149: CALL_OW 12
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: ST_TO_ADDR
// end ;
64166: LD_VAR 0 1
64170: RET
// export function PrepareApeman ( agressivity ) ; begin
64171: LD_INT 0
64173: PPUSH
// uc_side := 0 ;
64174: LD_ADDR_OWVAR 20
64178: PUSH
64179: LD_INT 0
64181: ST_TO_ADDR
// uc_nation := 0 ;
64182: LD_ADDR_OWVAR 21
64186: PUSH
64187: LD_INT 0
64189: ST_TO_ADDR
// hc_sex := sex_male ;
64190: LD_ADDR_OWVAR 27
64194: PUSH
64195: LD_INT 1
64197: ST_TO_ADDR
// hc_class := class_apeman ;
64198: LD_ADDR_OWVAR 28
64202: PUSH
64203: LD_INT 12
64205: ST_TO_ADDR
// hc_gallery :=  ;
64206: LD_ADDR_OWVAR 33
64210: PUSH
64211: LD_STRING 
64213: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64214: LD_ADDR_OWVAR 35
64218: PUSH
64219: LD_VAR 0 1
64223: NEG
64224: PPUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: CALL_OW 12
64234: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64235: LD_ADDR_OWVAR 31
64239: PUSH
64240: LD_INT 0
64242: PPUSH
64243: LD_INT 3
64245: PPUSH
64246: CALL_OW 12
64250: PUSH
64251: LD_INT 0
64253: PPUSH
64254: LD_INT 3
64256: PPUSH
64257: CALL_OW 12
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: ST_TO_ADDR
// end ;
64274: LD_VAR 0 2
64278: RET
// export function PrepareTiger ( agressivity ) ; begin
64279: LD_INT 0
64281: PPUSH
// uc_side := 0 ;
64282: LD_ADDR_OWVAR 20
64286: PUSH
64287: LD_INT 0
64289: ST_TO_ADDR
// uc_nation := 0 ;
64290: LD_ADDR_OWVAR 21
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// hc_class := class_tiger ;
64298: LD_ADDR_OWVAR 28
64302: PUSH
64303: LD_INT 14
64305: ST_TO_ADDR
// hc_gallery :=  ;
64306: LD_ADDR_OWVAR 33
64310: PUSH
64311: LD_STRING 
64313: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64314: LD_ADDR_OWVAR 35
64318: PUSH
64319: LD_VAR 0 1
64323: NEG
64324: PPUSH
64325: LD_VAR 0 1
64329: PPUSH
64330: CALL_OW 12
64334: ST_TO_ADDR
// end ;
64335: LD_VAR 0 2
64339: RET
// export function PrepareEnchidna ( ) ; begin
64340: LD_INT 0
64342: PPUSH
// uc_side := 0 ;
64343: LD_ADDR_OWVAR 20
64347: PUSH
64348: LD_INT 0
64350: ST_TO_ADDR
// uc_nation := 0 ;
64351: LD_ADDR_OWVAR 21
64355: PUSH
64356: LD_INT 0
64358: ST_TO_ADDR
// hc_class := class_baggie ;
64359: LD_ADDR_OWVAR 28
64363: PUSH
64364: LD_INT 13
64366: ST_TO_ADDR
// hc_gallery :=  ;
64367: LD_ADDR_OWVAR 33
64371: PUSH
64372: LD_STRING 
64374: ST_TO_ADDR
// end ;
64375: LD_VAR 0 1
64379: RET
// export function PrepareFrog ( ) ; begin
64380: LD_INT 0
64382: PPUSH
// uc_side := 0 ;
64383: LD_ADDR_OWVAR 20
64387: PUSH
64388: LD_INT 0
64390: ST_TO_ADDR
// uc_nation := 0 ;
64391: LD_ADDR_OWVAR 21
64395: PUSH
64396: LD_INT 0
64398: ST_TO_ADDR
// hc_class := class_frog ;
64399: LD_ADDR_OWVAR 28
64403: PUSH
64404: LD_INT 19
64406: ST_TO_ADDR
// hc_gallery :=  ;
64407: LD_ADDR_OWVAR 33
64411: PUSH
64412: LD_STRING 
64414: ST_TO_ADDR
// end ;
64415: LD_VAR 0 1
64419: RET
// export function PrepareFish ( ) ; begin
64420: LD_INT 0
64422: PPUSH
// uc_side := 0 ;
64423: LD_ADDR_OWVAR 20
64427: PUSH
64428: LD_INT 0
64430: ST_TO_ADDR
// uc_nation := 0 ;
64431: LD_ADDR_OWVAR 21
64435: PUSH
64436: LD_INT 0
64438: ST_TO_ADDR
// hc_class := class_fish ;
64439: LD_ADDR_OWVAR 28
64443: PUSH
64444: LD_INT 20
64446: ST_TO_ADDR
// hc_gallery :=  ;
64447: LD_ADDR_OWVAR 33
64451: PUSH
64452: LD_STRING 
64454: ST_TO_ADDR
// end ;
64455: LD_VAR 0 1
64459: RET
// export function PrepareBird ( ) ; begin
64460: LD_INT 0
64462: PPUSH
// uc_side := 0 ;
64463: LD_ADDR_OWVAR 20
64467: PUSH
64468: LD_INT 0
64470: ST_TO_ADDR
// uc_nation := 0 ;
64471: LD_ADDR_OWVAR 21
64475: PUSH
64476: LD_INT 0
64478: ST_TO_ADDR
// hc_class := class_phororhacos ;
64479: LD_ADDR_OWVAR 28
64483: PUSH
64484: LD_INT 18
64486: ST_TO_ADDR
// hc_gallery :=  ;
64487: LD_ADDR_OWVAR 33
64491: PUSH
64492: LD_STRING 
64494: ST_TO_ADDR
// end ;
64495: LD_VAR 0 1
64499: RET
// export function PrepareHorse ( ) ; begin
64500: LD_INT 0
64502: PPUSH
// uc_side := 0 ;
64503: LD_ADDR_OWVAR 20
64507: PUSH
64508: LD_INT 0
64510: ST_TO_ADDR
// uc_nation := 0 ;
64511: LD_ADDR_OWVAR 21
64515: PUSH
64516: LD_INT 0
64518: ST_TO_ADDR
// hc_class := class_horse ;
64519: LD_ADDR_OWVAR 28
64523: PUSH
64524: LD_INT 21
64526: ST_TO_ADDR
// hc_gallery :=  ;
64527: LD_ADDR_OWVAR 33
64531: PUSH
64532: LD_STRING 
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 1
64539: RET
// export function PrepareMastodont ( ) ; begin
64540: LD_INT 0
64542: PPUSH
// uc_side := 0 ;
64543: LD_ADDR_OWVAR 20
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
// uc_nation := 0 ;
64551: LD_ADDR_OWVAR 21
64555: PUSH
64556: LD_INT 0
64558: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64559: LD_ADDR_OWVAR 37
64563: PUSH
64564: LD_INT 31
64566: ST_TO_ADDR
// vc_control := control_rider ;
64567: LD_ADDR_OWVAR 38
64571: PUSH
64572: LD_INT 4
64574: ST_TO_ADDR
// end ;
64575: LD_VAR 0 1
64579: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64580: LD_INT 0
64582: PPUSH
64583: PPUSH
64584: PPUSH
// uc_side = 0 ;
64585: LD_ADDR_OWVAR 20
64589: PUSH
64590: LD_INT 0
64592: ST_TO_ADDR
// uc_nation = 0 ;
64593: LD_ADDR_OWVAR 21
64597: PUSH
64598: LD_INT 0
64600: ST_TO_ADDR
// InitHc_All ( ) ;
64601: CALL_OW 584
// InitVc ;
64605: CALL_OW 20
// if mastodonts then
64609: LD_VAR 0 6
64613: IFFALSE 64680
// for i = 1 to mastodonts do
64615: LD_ADDR_VAR 0 11
64619: PUSH
64620: DOUBLE
64621: LD_INT 1
64623: DEC
64624: ST_TO_ADDR
64625: LD_VAR 0 6
64629: PUSH
64630: FOR_TO
64631: IFFALSE 64678
// begin vc_chassis := 31 ;
64633: LD_ADDR_OWVAR 37
64637: PUSH
64638: LD_INT 31
64640: ST_TO_ADDR
// vc_control := control_rider ;
64641: LD_ADDR_OWVAR 38
64645: PUSH
64646: LD_INT 4
64648: ST_TO_ADDR
// animal := CreateVehicle ;
64649: LD_ADDR_VAR 0 12
64653: PUSH
64654: CALL_OW 45
64658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64659: LD_VAR 0 12
64663: PPUSH
64664: LD_VAR 0 8
64668: PPUSH
64669: LD_INT 0
64671: PPUSH
64672: CALL 66808 0 3
// end ;
64676: GO 64630
64678: POP
64679: POP
// if horses then
64680: LD_VAR 0 5
64684: IFFALSE 64751
// for i = 1 to horses do
64686: LD_ADDR_VAR 0 11
64690: PUSH
64691: DOUBLE
64692: LD_INT 1
64694: DEC
64695: ST_TO_ADDR
64696: LD_VAR 0 5
64700: PUSH
64701: FOR_TO
64702: IFFALSE 64749
// begin hc_class := 21 ;
64704: LD_ADDR_OWVAR 28
64708: PUSH
64709: LD_INT 21
64711: ST_TO_ADDR
// hc_gallery :=  ;
64712: LD_ADDR_OWVAR 33
64716: PUSH
64717: LD_STRING 
64719: ST_TO_ADDR
// animal := CreateHuman ;
64720: LD_ADDR_VAR 0 12
64724: PUSH
64725: CALL_OW 44
64729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64730: LD_VAR 0 12
64734: PPUSH
64735: LD_VAR 0 8
64739: PPUSH
64740: LD_INT 0
64742: PPUSH
64743: CALL 66808 0 3
// end ;
64747: GO 64701
64749: POP
64750: POP
// if birds then
64751: LD_VAR 0 1
64755: IFFALSE 64822
// for i = 1 to birds do
64757: LD_ADDR_VAR 0 11
64761: PUSH
64762: DOUBLE
64763: LD_INT 1
64765: DEC
64766: ST_TO_ADDR
64767: LD_VAR 0 1
64771: PUSH
64772: FOR_TO
64773: IFFALSE 64820
// begin hc_class := 18 ;
64775: LD_ADDR_OWVAR 28
64779: PUSH
64780: LD_INT 18
64782: ST_TO_ADDR
// hc_gallery =  ;
64783: LD_ADDR_OWVAR 33
64787: PUSH
64788: LD_STRING 
64790: ST_TO_ADDR
// animal := CreateHuman ;
64791: LD_ADDR_VAR 0 12
64795: PUSH
64796: CALL_OW 44
64800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64801: LD_VAR 0 12
64805: PPUSH
64806: LD_VAR 0 8
64810: PPUSH
64811: LD_INT 0
64813: PPUSH
64814: CALL 66808 0 3
// end ;
64818: GO 64772
64820: POP
64821: POP
// if tigers then
64822: LD_VAR 0 2
64826: IFFALSE 64910
// for i = 1 to tigers do
64828: LD_ADDR_VAR 0 11
64832: PUSH
64833: DOUBLE
64834: LD_INT 1
64836: DEC
64837: ST_TO_ADDR
64838: LD_VAR 0 2
64842: PUSH
64843: FOR_TO
64844: IFFALSE 64908
// begin hc_class = class_tiger ;
64846: LD_ADDR_OWVAR 28
64850: PUSH
64851: LD_INT 14
64853: ST_TO_ADDR
// hc_gallery =  ;
64854: LD_ADDR_OWVAR 33
64858: PUSH
64859: LD_STRING 
64861: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64862: LD_ADDR_OWVAR 35
64866: PUSH
64867: LD_INT 7
64869: NEG
64870: PPUSH
64871: LD_INT 7
64873: PPUSH
64874: CALL_OW 12
64878: ST_TO_ADDR
// animal := CreateHuman ;
64879: LD_ADDR_VAR 0 12
64883: PUSH
64884: CALL_OW 44
64888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64889: LD_VAR 0 12
64893: PPUSH
64894: LD_VAR 0 8
64898: PPUSH
64899: LD_INT 0
64901: PPUSH
64902: CALL 66808 0 3
// end ;
64906: GO 64843
64908: POP
64909: POP
// if apemans then
64910: LD_VAR 0 3
64914: IFFALSE 65037
// for i = 1 to apemans do
64916: LD_ADDR_VAR 0 11
64920: PUSH
64921: DOUBLE
64922: LD_INT 1
64924: DEC
64925: ST_TO_ADDR
64926: LD_VAR 0 3
64930: PUSH
64931: FOR_TO
64932: IFFALSE 65035
// begin hc_class = class_apeman ;
64934: LD_ADDR_OWVAR 28
64938: PUSH
64939: LD_INT 12
64941: ST_TO_ADDR
// hc_gallery =  ;
64942: LD_ADDR_OWVAR 33
64946: PUSH
64947: LD_STRING 
64949: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64950: LD_ADDR_OWVAR 35
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PPUSH
64959: LD_INT 2
64961: PPUSH
64962: CALL_OW 12
64966: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64967: LD_ADDR_OWVAR 31
64971: PUSH
64972: LD_INT 1
64974: PPUSH
64975: LD_INT 3
64977: PPUSH
64978: CALL_OW 12
64982: PUSH
64983: LD_INT 1
64985: PPUSH
64986: LD_INT 3
64988: PPUSH
64989: CALL_OW 12
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: ST_TO_ADDR
// animal := CreateHuman ;
65006: LD_ADDR_VAR 0 12
65010: PUSH
65011: CALL_OW 44
65015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65016: LD_VAR 0 12
65020: PPUSH
65021: LD_VAR 0 8
65025: PPUSH
65026: LD_INT 0
65028: PPUSH
65029: CALL 66808 0 3
// end ;
65033: GO 64931
65035: POP
65036: POP
// if enchidnas then
65037: LD_VAR 0 4
65041: IFFALSE 65108
// for i = 1 to enchidnas do
65043: LD_ADDR_VAR 0 11
65047: PUSH
65048: DOUBLE
65049: LD_INT 1
65051: DEC
65052: ST_TO_ADDR
65053: LD_VAR 0 4
65057: PUSH
65058: FOR_TO
65059: IFFALSE 65106
// begin hc_class = 13 ;
65061: LD_ADDR_OWVAR 28
65065: PUSH
65066: LD_INT 13
65068: ST_TO_ADDR
// hc_gallery =  ;
65069: LD_ADDR_OWVAR 33
65073: PUSH
65074: LD_STRING 
65076: ST_TO_ADDR
// animal := CreateHuman ;
65077: LD_ADDR_VAR 0 12
65081: PUSH
65082: CALL_OW 44
65086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65087: LD_VAR 0 12
65091: PPUSH
65092: LD_VAR 0 8
65096: PPUSH
65097: LD_INT 0
65099: PPUSH
65100: CALL 66808 0 3
// end ;
65104: GO 65058
65106: POP
65107: POP
// if fishes then
65108: LD_VAR 0 7
65112: IFFALSE 65179
// for i = 1 to fishes do
65114: LD_ADDR_VAR 0 11
65118: PUSH
65119: DOUBLE
65120: LD_INT 1
65122: DEC
65123: ST_TO_ADDR
65124: LD_VAR 0 7
65128: PUSH
65129: FOR_TO
65130: IFFALSE 65177
// begin hc_class = 20 ;
65132: LD_ADDR_OWVAR 28
65136: PUSH
65137: LD_INT 20
65139: ST_TO_ADDR
// hc_gallery =  ;
65140: LD_ADDR_OWVAR 33
65144: PUSH
65145: LD_STRING 
65147: ST_TO_ADDR
// animal := CreateHuman ;
65148: LD_ADDR_VAR 0 12
65152: PUSH
65153: CALL_OW 44
65157: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65158: LD_VAR 0 12
65162: PPUSH
65163: LD_VAR 0 9
65167: PPUSH
65168: LD_INT 0
65170: PPUSH
65171: CALL 66808 0 3
// end ;
65175: GO 65129
65177: POP
65178: POP
// end ;
65179: LD_VAR 0 10
65183: RET
// export function WantHeal ( sci , unit ) ; begin
65184: LD_INT 0
65186: PPUSH
// if GetTaskList ( sci ) > 0 then
65187: LD_VAR 0 1
65191: PPUSH
65192: CALL_OW 437
65196: PUSH
65197: LD_INT 0
65199: GREATER
65200: IFFALSE 65270
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65202: LD_VAR 0 1
65206: PPUSH
65207: CALL_OW 437
65211: PUSH
65212: LD_INT 1
65214: ARRAY
65215: PUSH
65216: LD_INT 1
65218: ARRAY
65219: PUSH
65220: LD_STRING l
65222: EQUAL
65223: PUSH
65224: LD_VAR 0 1
65228: PPUSH
65229: CALL_OW 437
65233: PUSH
65234: LD_INT 1
65236: ARRAY
65237: PUSH
65238: LD_INT 4
65240: ARRAY
65241: PUSH
65242: LD_VAR 0 2
65246: EQUAL
65247: AND
65248: IFFALSE 65260
// result := true else
65250: LD_ADDR_VAR 0 3
65254: PUSH
65255: LD_INT 1
65257: ST_TO_ADDR
65258: GO 65268
// result := false ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: LD_INT 0
65267: ST_TO_ADDR
// end else
65268: GO 65278
// result := false ;
65270: LD_ADDR_VAR 0 3
65274: PUSH
65275: LD_INT 0
65277: ST_TO_ADDR
// end ;
65278: LD_VAR 0 3
65282: RET
// export function HealTarget ( sci ) ; begin
65283: LD_INT 0
65285: PPUSH
// if not sci then
65286: LD_VAR 0 1
65290: NOT
65291: IFFALSE 65295
// exit ;
65293: GO 65360
// result := 0 ;
65295: LD_ADDR_VAR 0 2
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// if GetTaskList ( sci ) then
65303: LD_VAR 0 1
65307: PPUSH
65308: CALL_OW 437
65312: IFFALSE 65360
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65314: LD_VAR 0 1
65318: PPUSH
65319: CALL_OW 437
65323: PUSH
65324: LD_INT 1
65326: ARRAY
65327: PUSH
65328: LD_INT 1
65330: ARRAY
65331: PUSH
65332: LD_STRING l
65334: EQUAL
65335: IFFALSE 65360
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65337: LD_ADDR_VAR 0 2
65341: PUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 437
65351: PUSH
65352: LD_INT 1
65354: ARRAY
65355: PUSH
65356: LD_INT 4
65358: ARRAY
65359: ST_TO_ADDR
// end ;
65360: LD_VAR 0 2
65364: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
65369: PPUSH
65370: PPUSH
// if not base_units then
65371: LD_VAR 0 1
65375: NOT
65376: IFFALSE 65380
// exit ;
65378: GO 65467
// result := false ;
65380: LD_ADDR_VAR 0 2
65384: PUSH
65385: LD_INT 0
65387: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65388: LD_ADDR_VAR 0 5
65392: PUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: LD_INT 21
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PPUSH
65408: CALL_OW 72
65412: ST_TO_ADDR
// if not tmp then
65413: LD_VAR 0 5
65417: NOT
65418: IFFALSE 65422
// exit ;
65420: GO 65467
// for i in tmp do
65422: LD_ADDR_VAR 0 3
65426: PUSH
65427: LD_VAR 0 5
65431: PUSH
65432: FOR_IN
65433: IFFALSE 65465
// begin result := EnemyInRange ( i , 22 ) ;
65435: LD_ADDR_VAR 0 2
65439: PUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: LD_INT 22
65447: PPUSH
65448: CALL 63065 0 2
65452: ST_TO_ADDR
// if result then
65453: LD_VAR 0 2
65457: IFFALSE 65463
// exit ;
65459: POP
65460: POP
65461: GO 65467
// end ;
65463: GO 65432
65465: POP
65466: POP
// end ;
65467: LD_VAR 0 2
65471: RET
// export function FilterByTag ( units , tag ) ; begin
65472: LD_INT 0
65474: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65475: LD_ADDR_VAR 0 3
65479: PUSH
65480: LD_VAR 0 1
65484: PPUSH
65485: LD_INT 120
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PPUSH
65497: CALL_OW 72
65501: ST_TO_ADDR
// end ;
65502: LD_VAR 0 3
65506: RET
// export function IsDriver ( un ) ; begin
65507: LD_INT 0
65509: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 55
65522: PUSH
65523: EMPTY
65524: LIST
65525: PPUSH
65526: CALL_OW 69
65530: IN
65531: ST_TO_ADDR
// end ;
65532: LD_VAR 0 2
65536: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65537: LD_INT 0
65539: PPUSH
65540: PPUSH
// list := [ ] ;
65541: LD_ADDR_VAR 0 5
65545: PUSH
65546: EMPTY
65547: ST_TO_ADDR
// case d of 0 :
65548: LD_VAR 0 3
65552: PUSH
65553: LD_INT 0
65555: DOUBLE
65556: EQUAL
65557: IFTRUE 65561
65559: GO 65694
65561: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65562: LD_ADDR_VAR 0 5
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_INT 4
65574: MINUS
65575: PUSH
65576: LD_VAR 0 2
65580: PUSH
65581: LD_INT 4
65583: MINUS
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 3
65600: MINUS
65601: PUSH
65602: LD_VAR 0 2
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: LD_VAR 0 1
65619: PUSH
65620: LD_INT 4
65622: PLUS
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: LD_INT 4
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: PUSH
65637: LD_VAR 0 1
65641: PUSH
65642: LD_INT 3
65644: PLUS
65645: PUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_INT 3
65653: PLUS
65654: PUSH
65655: LD_INT 5
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: PUSH
65663: LD_VAR 0 1
65667: PUSH
65668: LD_VAR 0 2
65672: PUSH
65673: LD_INT 4
65675: PLUS
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: ST_TO_ADDR
// end ; 1 :
65692: GO 66392
65694: LD_INT 1
65696: DOUBLE
65697: EQUAL
65698: IFTRUE 65702
65700: GO 65835
65702: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65703: LD_ADDR_VAR 0 5
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_INT 4
65720: MINUS
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 3
65737: MINUS
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: LD_INT 3
65746: MINUS
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: LD_VAR 0 1
65760: PUSH
65761: LD_INT 4
65763: MINUS
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: LD_VAR 0 1
65782: PUSH
65783: LD_VAR 0 2
65787: PUSH
65788: LD_INT 3
65790: PLUS
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_INT 4
65807: PLUS
65808: PUSH
65809: LD_VAR 0 2
65813: PUSH
65814: LD_INT 4
65816: PLUS
65817: PUSH
65818: LD_INT 5
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: ST_TO_ADDR
// end ; 2 :
65833: GO 66392
65835: LD_INT 2
65837: DOUBLE
65838: EQUAL
65839: IFTRUE 65843
65841: GO 65972
65843: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65844: LD_ADDR_VAR 0 5
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_VAR 0 2
65858: PUSH
65859: LD_INT 3
65861: MINUS
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 4
65878: PLUS
65879: PUSH
65880: LD_VAR 0 2
65884: PUSH
65885: LD_INT 4
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: LD_VAR 0 1
65897: PUSH
65898: LD_VAR 0 2
65902: PUSH
65903: LD_INT 4
65905: PLUS
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_VAR 0 1
65919: PUSH
65920: LD_INT 3
65922: MINUS
65923: PUSH
65924: LD_VAR 0 2
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: LIST
65936: PUSH
65937: LD_VAR 0 1
65941: PUSH
65942: LD_INT 4
65944: MINUS
65945: PUSH
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 4
65953: MINUS
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: ST_TO_ADDR
// end ; 3 :
65970: GO 66392
65972: LD_INT 3
65974: DOUBLE
65975: EQUAL
65976: IFTRUE 65980
65978: GO 66113
65980: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65981: LD_ADDR_VAR 0 5
65985: PUSH
65986: LD_VAR 0 1
65990: PUSH
65991: LD_INT 3
65993: PLUS
65994: PUSH
65995: LD_VAR 0 2
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: PUSH
66008: LD_VAR 0 1
66012: PUSH
66013: LD_INT 4
66015: PLUS
66016: PUSH
66017: LD_VAR 0 2
66021: PUSH
66022: LD_INT 4
66024: PLUS
66025: PUSH
66026: LD_INT 5
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: LD_VAR 0 1
66038: PUSH
66039: LD_INT 4
66041: MINUS
66042: PUSH
66043: LD_VAR 0 2
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: PUSH
66056: LD_VAR 0 1
66060: PUSH
66061: LD_VAR 0 2
66065: PUSH
66066: LD_INT 4
66068: MINUS
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: PUSH
66078: LD_VAR 0 1
66082: PUSH
66083: LD_INT 3
66085: MINUS
66086: PUSH
66087: LD_VAR 0 2
66091: PUSH
66092: LD_INT 3
66094: MINUS
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: LIST
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// end ; 4 :
66111: GO 66392
66113: LD_INT 4
66115: DOUBLE
66116: EQUAL
66117: IFTRUE 66121
66119: GO 66254
66121: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66122: LD_ADDR_VAR 0 5
66126: PUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_VAR 0 2
66136: PUSH
66137: LD_INT 4
66139: PLUS
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 3
66156: PLUS
66157: PUSH
66158: LD_VAR 0 2
66162: PUSH
66163: LD_INT 3
66165: PLUS
66166: PUSH
66167: LD_INT 5
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: PUSH
66175: LD_VAR 0 1
66179: PUSH
66180: LD_INT 4
66182: PLUS
66183: PUSH
66184: LD_VAR 0 2
66188: PUSH
66189: LD_INT 4
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: LIST
66196: PUSH
66197: LD_VAR 0 1
66201: PUSH
66202: LD_VAR 0 2
66206: PUSH
66207: LD_INT 3
66209: MINUS
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: PUSH
66219: LD_VAR 0 1
66223: PUSH
66224: LD_INT 4
66226: MINUS
66227: PUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_INT 4
66235: MINUS
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: ST_TO_ADDR
// end ; 5 :
66252: GO 66392
66254: LD_INT 5
66256: DOUBLE
66257: EQUAL
66258: IFTRUE 66262
66260: GO 66391
66262: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66263: LD_ADDR_VAR 0 5
66267: PUSH
66268: LD_VAR 0 1
66272: PUSH
66273: LD_INT 4
66275: MINUS
66276: PUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: PUSH
66290: LD_VAR 0 1
66294: PUSH
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 4
66302: MINUS
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: PUSH
66312: LD_VAR 0 1
66316: PUSH
66317: LD_INT 4
66319: PLUS
66320: PUSH
66321: LD_VAR 0 2
66325: PUSH
66326: LD_INT 4
66328: PLUS
66329: PUSH
66330: LD_INT 5
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: PUSH
66338: LD_VAR 0 1
66342: PUSH
66343: LD_INT 3
66345: PLUS
66346: PUSH
66347: LD_VAR 0 2
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: PUSH
66360: LD_VAR 0 1
66364: PUSH
66365: LD_VAR 0 2
66369: PUSH
66370: LD_INT 3
66372: PLUS
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// end ; end ;
66389: GO 66392
66391: POP
// result := list ;
66392: LD_ADDR_VAR 0 4
66396: PUSH
66397: LD_VAR 0 5
66401: ST_TO_ADDR
// end ;
66402: LD_VAR 0 4
66406: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66407: LD_INT 0
66409: PPUSH
66410: PPUSH
66411: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66412: LD_VAR 0 1
66416: NOT
66417: PUSH
66418: LD_VAR 0 2
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: IN
66441: NOT
66442: OR
66443: IFFALSE 66447
// exit ;
66445: GO 66530
// tmp := [ ] ;
66447: LD_ADDR_VAR 0 5
66451: PUSH
66452: EMPTY
66453: ST_TO_ADDR
// for i in units do
66454: LD_ADDR_VAR 0 4
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: FOR_IN
66465: IFFALSE 66499
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66467: LD_ADDR_VAR 0 5
66471: PUSH
66472: LD_VAR 0 5
66476: PPUSH
66477: LD_VAR 0 4
66481: PPUSH
66482: LD_VAR 0 2
66486: PPUSH
66487: CALL_OW 259
66491: PPUSH
66492: CALL 67903 0 2
66496: ST_TO_ADDR
66497: GO 66464
66499: POP
66500: POP
// if not tmp then
66501: LD_VAR 0 5
66505: NOT
66506: IFFALSE 66510
// exit ;
66508: GO 66530
// result := SortListByListDesc ( units , tmp ) ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_VAR 0 1
66519: PPUSH
66520: LD_VAR 0 5
66524: PPUSH
66525: CALL_OW 77
66529: ST_TO_ADDR
// end ;
66530: LD_VAR 0 3
66534: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66535: LD_INT 0
66537: PPUSH
66538: PPUSH
66539: PPUSH
// result := false ;
66540: LD_ADDR_VAR 0 3
66544: PUSH
66545: LD_INT 0
66547: ST_TO_ADDR
// if not building then
66548: LD_VAR 0 2
66552: NOT
66553: IFFALSE 66557
// exit ;
66555: GO 66695
// x := GetX ( building ) ;
66557: LD_ADDR_VAR 0 4
66561: PUSH
66562: LD_VAR 0 2
66566: PPUSH
66567: CALL_OW 250
66571: ST_TO_ADDR
// y := GetY ( building ) ;
66572: LD_ADDR_VAR 0 5
66576: PUSH
66577: LD_VAR 0 2
66581: PPUSH
66582: CALL_OW 251
66586: ST_TO_ADDR
// if not x or not y then
66587: LD_VAR 0 4
66591: NOT
66592: PUSH
66593: LD_VAR 0 5
66597: NOT
66598: OR
66599: IFFALSE 66603
// exit ;
66601: GO 66695
// if GetTaskList ( unit ) then
66603: LD_VAR 0 1
66607: PPUSH
66608: CALL_OW 437
66612: IFFALSE 66695
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66614: LD_STRING e
66616: PUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: CALL_OW 437
66626: PUSH
66627: LD_INT 1
66629: ARRAY
66630: PUSH
66631: LD_INT 1
66633: ARRAY
66634: EQUAL
66635: PUSH
66636: LD_VAR 0 4
66640: PUSH
66641: LD_VAR 0 1
66645: PPUSH
66646: CALL_OW 437
66650: PUSH
66651: LD_INT 1
66653: ARRAY
66654: PUSH
66655: LD_INT 2
66657: ARRAY
66658: EQUAL
66659: AND
66660: PUSH
66661: LD_VAR 0 5
66665: PUSH
66666: LD_VAR 0 1
66670: PPUSH
66671: CALL_OW 437
66675: PUSH
66676: LD_INT 1
66678: ARRAY
66679: PUSH
66680: LD_INT 3
66682: ARRAY
66683: EQUAL
66684: AND
66685: IFFALSE 66695
// result := true end ;
66687: LD_ADDR_VAR 0 3
66691: PUSH
66692: LD_INT 1
66694: ST_TO_ADDR
// end ;
66695: LD_VAR 0 3
66699: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66700: LD_INT 0
66702: PPUSH
// result := false ;
66703: LD_ADDR_VAR 0 4
66707: PUSH
66708: LD_INT 0
66710: ST_TO_ADDR
// if GetTaskList ( unit ) then
66711: LD_VAR 0 1
66715: PPUSH
66716: CALL_OW 437
66720: IFFALSE 66803
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66722: LD_STRING M
66724: PUSH
66725: LD_VAR 0 1
66729: PPUSH
66730: CALL_OW 437
66734: PUSH
66735: LD_INT 1
66737: ARRAY
66738: PUSH
66739: LD_INT 1
66741: ARRAY
66742: EQUAL
66743: PUSH
66744: LD_VAR 0 2
66748: PUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: CALL_OW 437
66758: PUSH
66759: LD_INT 1
66761: ARRAY
66762: PUSH
66763: LD_INT 2
66765: ARRAY
66766: EQUAL
66767: AND
66768: PUSH
66769: LD_VAR 0 3
66773: PUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 437
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: PUSH
66788: LD_INT 3
66790: ARRAY
66791: EQUAL
66792: AND
66793: IFFALSE 66803
// result := true ;
66795: LD_ADDR_VAR 0 4
66799: PUSH
66800: LD_INT 1
66802: ST_TO_ADDR
// end ; end ;
66803: LD_VAR 0 4
66807: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66808: LD_INT 0
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
// if not unit or not area then
66814: LD_VAR 0 1
66818: NOT
66819: PUSH
66820: LD_VAR 0 2
66824: NOT
66825: OR
66826: IFFALSE 66830
// exit ;
66828: GO 67006
// tmp := AreaToList ( area , i ) ;
66830: LD_ADDR_VAR 0 6
66834: PUSH
66835: LD_VAR 0 2
66839: PPUSH
66840: LD_VAR 0 5
66844: PPUSH
66845: CALL_OW 517
66849: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66850: LD_ADDR_VAR 0 5
66854: PUSH
66855: DOUBLE
66856: LD_INT 1
66858: DEC
66859: ST_TO_ADDR
66860: LD_VAR 0 6
66864: PUSH
66865: LD_INT 1
66867: ARRAY
66868: PUSH
66869: FOR_TO
66870: IFFALSE 67004
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66872: LD_ADDR_VAR 0 7
66876: PUSH
66877: LD_VAR 0 6
66881: PUSH
66882: LD_INT 1
66884: ARRAY
66885: PUSH
66886: LD_VAR 0 5
66890: ARRAY
66891: PUSH
66892: LD_VAR 0 6
66896: PUSH
66897: LD_INT 2
66899: ARRAY
66900: PUSH
66901: LD_VAR 0 5
66905: ARRAY
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66911: LD_INT 92
66913: PUSH
66914: LD_VAR 0 7
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PUSH
66923: LD_VAR 0 7
66927: PUSH
66928: LD_INT 2
66930: ARRAY
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: PPUSH
66941: CALL_OW 69
66945: PUSH
66946: LD_INT 0
66948: EQUAL
66949: IFFALSE 67002
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_VAR 0 7
66960: PUSH
66961: LD_INT 1
66963: ARRAY
66964: PPUSH
66965: LD_VAR 0 7
66969: PUSH
66970: LD_INT 2
66972: ARRAY
66973: PPUSH
66974: LD_VAR 0 3
66978: PPUSH
66979: CALL_OW 48
// result := IsPlaced ( unit ) ;
66983: LD_ADDR_VAR 0 4
66987: PUSH
66988: LD_VAR 0 1
66992: PPUSH
66993: CALL_OW 305
66997: ST_TO_ADDR
// exit ;
66998: POP
66999: POP
67000: GO 67006
// end ; end ;
67002: GO 66869
67004: POP
67005: POP
// end ;
67006: LD_VAR 0 4
67010: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67011: LD_INT 0
67013: PPUSH
67014: PPUSH
67015: PPUSH
// if not side or side > 8 then
67016: LD_VAR 0 1
67020: NOT
67021: PUSH
67022: LD_VAR 0 1
67026: PUSH
67027: LD_INT 8
67029: GREATER
67030: OR
67031: IFFALSE 67035
// exit ;
67033: GO 67222
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67035: LD_ADDR_VAR 0 4
67039: PUSH
67040: LD_INT 22
67042: PUSH
67043: LD_VAR 0 1
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 21
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PPUSH
67066: CALL_OW 69
67070: ST_TO_ADDR
// if not tmp then
67071: LD_VAR 0 4
67075: NOT
67076: IFFALSE 67080
// exit ;
67078: GO 67222
// enable_addtolog := true ;
67080: LD_ADDR_OWVAR 81
67084: PUSH
67085: LD_INT 1
67087: ST_TO_ADDR
// AddToLog ( [ ) ;
67088: LD_STRING [
67090: PPUSH
67091: CALL_OW 561
// for i in tmp do
67095: LD_ADDR_VAR 0 3
67099: PUSH
67100: LD_VAR 0 4
67104: PUSH
67105: FOR_IN
67106: IFFALSE 67213
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67108: LD_STRING [
67110: PUSH
67111: LD_VAR 0 3
67115: PPUSH
67116: CALL_OW 266
67120: STR
67121: PUSH
67122: LD_STRING , 
67124: STR
67125: PUSH
67126: LD_VAR 0 3
67130: PPUSH
67131: CALL_OW 250
67135: STR
67136: PUSH
67137: LD_STRING , 
67139: STR
67140: PUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: CALL_OW 251
67150: STR
67151: PUSH
67152: LD_STRING , 
67154: STR
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: CALL_OW 254
67165: STR
67166: PUSH
67167: LD_STRING , 
67169: STR
67170: PUSH
67171: LD_VAR 0 3
67175: PPUSH
67176: LD_INT 1
67178: PPUSH
67179: CALL_OW 268
67183: STR
67184: PUSH
67185: LD_STRING , 
67187: STR
67188: PUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: LD_INT 2
67196: PPUSH
67197: CALL_OW 268
67201: STR
67202: PUSH
67203: LD_STRING ],
67205: STR
67206: PPUSH
67207: CALL_OW 561
// end ;
67211: GO 67105
67213: POP
67214: POP
// AddToLog ( ]; ) ;
67215: LD_STRING ];
67217: PPUSH
67218: CALL_OW 561
// end ;
67222: LD_VAR 0 2
67226: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67227: LD_INT 0
67229: PPUSH
67230: PPUSH
67231: PPUSH
67232: PPUSH
67233: PPUSH
// if not area or not rate or not max then
67234: LD_VAR 0 1
67238: NOT
67239: PUSH
67240: LD_VAR 0 2
67244: NOT
67245: OR
67246: PUSH
67247: LD_VAR 0 4
67251: NOT
67252: OR
67253: IFFALSE 67257
// exit ;
67255: GO 67446
// while 1 do
67257: LD_INT 1
67259: IFFALSE 67446
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67261: LD_ADDR_VAR 0 9
67265: PUSH
67266: LD_VAR 0 1
67270: PPUSH
67271: LD_INT 1
67273: PPUSH
67274: CALL_OW 287
67278: PUSH
67279: LD_INT 10
67281: MUL
67282: ST_TO_ADDR
// r := rate / 10 ;
67283: LD_ADDR_VAR 0 7
67287: PUSH
67288: LD_VAR 0 2
67292: PUSH
67293: LD_INT 10
67295: DIVREAL
67296: ST_TO_ADDR
// time := 1 1$00 ;
67297: LD_ADDR_VAR 0 8
67301: PUSH
67302: LD_INT 2100
67304: ST_TO_ADDR
// if amount < min then
67305: LD_VAR 0 9
67309: PUSH
67310: LD_VAR 0 3
67314: LESS
67315: IFFALSE 67333
// r := r * 2 else
67317: LD_ADDR_VAR 0 7
67321: PUSH
67322: LD_VAR 0 7
67326: PUSH
67327: LD_INT 2
67329: MUL
67330: ST_TO_ADDR
67331: GO 67359
// if amount > max then
67333: LD_VAR 0 9
67337: PUSH
67338: LD_VAR 0 4
67342: GREATER
67343: IFFALSE 67359
// r := r / 2 ;
67345: LD_ADDR_VAR 0 7
67349: PUSH
67350: LD_VAR 0 7
67354: PUSH
67355: LD_INT 2
67357: DIVREAL
67358: ST_TO_ADDR
// time := time / r ;
67359: LD_ADDR_VAR 0 8
67363: PUSH
67364: LD_VAR 0 8
67368: PUSH
67369: LD_VAR 0 7
67373: DIVREAL
67374: ST_TO_ADDR
// if time < 0 then
67375: LD_VAR 0 8
67379: PUSH
67380: LD_INT 0
67382: LESS
67383: IFFALSE 67400
// time := time * - 1 ;
67385: LD_ADDR_VAR 0 8
67389: PUSH
67390: LD_VAR 0 8
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: MUL
67399: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67400: LD_VAR 0 8
67404: PUSH
67405: LD_INT 35
67407: PPUSH
67408: LD_INT 875
67410: PPUSH
67411: CALL_OW 12
67415: PLUS
67416: PPUSH
67417: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67421: LD_INT 1
67423: PPUSH
67424: LD_INT 5
67426: PPUSH
67427: CALL_OW 12
67431: PPUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: LD_INT 1
67439: PPUSH
67440: CALL_OW 55
// end ;
67444: GO 67257
// end ;
67446: LD_VAR 0 5
67450: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67451: LD_INT 0
67453: PPUSH
67454: PPUSH
67455: PPUSH
67456: PPUSH
67457: PPUSH
67458: PPUSH
67459: PPUSH
67460: PPUSH
// if not turrets or not factories then
67461: LD_VAR 0 1
67465: NOT
67466: PUSH
67467: LD_VAR 0 2
67471: NOT
67472: OR
67473: IFFALSE 67477
// exit ;
67475: GO 67784
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67477: LD_ADDR_VAR 0 10
67481: PUSH
67482: LD_INT 5
67484: PUSH
67485: LD_INT 6
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 3
67504: PUSH
67505: LD_INT 5
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 24
67519: PUSH
67520: LD_INT 25
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 23
67529: PUSH
67530: LD_INT 27
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 42
67543: PUSH
67544: LD_INT 43
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 44
67553: PUSH
67554: LD_INT 46
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 45
67563: PUSH
67564: LD_INT 47
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// result := [ ] ;
67581: LD_ADDR_VAR 0 3
67585: PUSH
67586: EMPTY
67587: ST_TO_ADDR
// for i in turrets do
67588: LD_ADDR_VAR 0 4
67592: PUSH
67593: LD_VAR 0 1
67597: PUSH
67598: FOR_IN
67599: IFFALSE 67782
// begin nat := GetNation ( i ) ;
67601: LD_ADDR_VAR 0 7
67605: PUSH
67606: LD_VAR 0 4
67610: PPUSH
67611: CALL_OW 248
67615: ST_TO_ADDR
// weapon := 0 ;
67616: LD_ADDR_VAR 0 8
67620: PUSH
67621: LD_INT 0
67623: ST_TO_ADDR
// if not nat then
67624: LD_VAR 0 7
67628: NOT
67629: IFFALSE 67633
// continue ;
67631: GO 67598
// for j in list [ nat ] do
67633: LD_ADDR_VAR 0 5
67637: PUSH
67638: LD_VAR 0 10
67642: PUSH
67643: LD_VAR 0 7
67647: ARRAY
67648: PUSH
67649: FOR_IN
67650: IFFALSE 67691
// if GetBWeapon ( i ) = j [ 1 ] then
67652: LD_VAR 0 4
67656: PPUSH
67657: CALL_OW 269
67661: PUSH
67662: LD_VAR 0 5
67666: PUSH
67667: LD_INT 1
67669: ARRAY
67670: EQUAL
67671: IFFALSE 67689
// begin weapon := j [ 2 ] ;
67673: LD_ADDR_VAR 0 8
67677: PUSH
67678: LD_VAR 0 5
67682: PUSH
67683: LD_INT 2
67685: ARRAY
67686: ST_TO_ADDR
// break ;
67687: GO 67691
// end ;
67689: GO 67649
67691: POP
67692: POP
// if not weapon then
67693: LD_VAR 0 8
67697: NOT
67698: IFFALSE 67702
// continue ;
67700: GO 67598
// for k in factories do
67702: LD_ADDR_VAR 0 6
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: FOR_IN
67713: IFFALSE 67778
// begin weapons := AvailableWeaponList ( k ) ;
67715: LD_ADDR_VAR 0 9
67719: PUSH
67720: LD_VAR 0 6
67724: PPUSH
67725: CALL_OW 478
67729: ST_TO_ADDR
// if not weapons then
67730: LD_VAR 0 9
67734: NOT
67735: IFFALSE 67739
// continue ;
67737: GO 67712
// if weapon in weapons then
67739: LD_VAR 0 8
67743: PUSH
67744: LD_VAR 0 9
67748: IN
67749: IFFALSE 67776
// begin result := [ i , weapon ] ;
67751: LD_ADDR_VAR 0 3
67755: PUSH
67756: LD_VAR 0 4
67760: PUSH
67761: LD_VAR 0 8
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: ST_TO_ADDR
// exit ;
67770: POP
67771: POP
67772: POP
67773: POP
67774: GO 67784
// end ; end ;
67776: GO 67712
67778: POP
67779: POP
// end ;
67780: GO 67598
67782: POP
67783: POP
// end ;
67784: LD_VAR 0 3
67788: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67789: LD_INT 0
67791: PPUSH
// if not side or side > 8 then
67792: LD_VAR 0 3
67796: NOT
67797: PUSH
67798: LD_VAR 0 3
67802: PUSH
67803: LD_INT 8
67805: GREATER
67806: OR
67807: IFFALSE 67811
// exit ;
67809: GO 67870
// if not range then
67811: LD_VAR 0 4
67815: NOT
67816: IFFALSE 67827
// range := - 12 ;
67818: LD_ADDR_VAR 0 4
67822: PUSH
67823: LD_INT 12
67825: NEG
67826: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67827: LD_VAR 0 1
67831: PPUSH
67832: LD_VAR 0 2
67836: PPUSH
67837: LD_VAR 0 3
67841: PPUSH
67842: LD_VAR 0 4
67846: PPUSH
67847: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67851: LD_VAR 0 1
67855: PPUSH
67856: LD_VAR 0 2
67860: PPUSH
67861: LD_VAR 0 3
67865: PPUSH
67866: CALL_OW 331
// end ;
67870: LD_VAR 0 5
67874: RET
// export function Video ( mode ) ; begin
67875: LD_INT 0
67877: PPUSH
// ingame_video = mode ;
67878: LD_ADDR_OWVAR 52
67882: PUSH
67883: LD_VAR 0 1
67887: ST_TO_ADDR
// interface_hidden = mode ;
67888: LD_ADDR_OWVAR 54
67892: PUSH
67893: LD_VAR 0 1
67897: ST_TO_ADDR
// end ;
67898: LD_VAR 0 2
67902: RET
// export function Join ( array , element ) ; begin
67903: LD_INT 0
67905: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67906: LD_ADDR_VAR 0 3
67910: PUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 1
67923: PLUS
67924: PPUSH
67925: LD_VAR 0 2
67929: PPUSH
67930: CALL_OW 1
67934: ST_TO_ADDR
// end ;
67935: LD_VAR 0 3
67939: RET
// export function JoinUnion ( array , element ) ; begin
67940: LD_INT 0
67942: PPUSH
// result := array union element ;
67943: LD_ADDR_VAR 0 3
67947: PUSH
67948: LD_VAR 0 1
67952: PUSH
67953: LD_VAR 0 2
67957: UNION
67958: ST_TO_ADDR
// end ;
67959: LD_VAR 0 3
67963: RET
// export function GetBehemoths ( side ) ; begin
67964: LD_INT 0
67966: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67967: LD_ADDR_VAR 0 2
67971: PUSH
67972: LD_INT 22
67974: PUSH
67975: LD_VAR 0 1
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 31
67986: PUSH
67987: LD_INT 25
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PPUSH
67998: CALL_OW 69
68002: ST_TO_ADDR
// end ;
68003: LD_VAR 0 2
68007: RET
// export function Shuffle ( array ) ; var i , index ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
// result := [ ] ;
68013: LD_ADDR_VAR 0 2
68017: PUSH
68018: EMPTY
68019: ST_TO_ADDR
// if not array then
68020: LD_VAR 0 1
68024: NOT
68025: IFFALSE 68029
// exit ;
68027: GO 68128
// Randomize ;
68029: CALL_OW 10
// for i = array downto 1 do
68033: LD_ADDR_VAR 0 3
68037: PUSH
68038: DOUBLE
68039: LD_VAR 0 1
68043: INC
68044: ST_TO_ADDR
68045: LD_INT 1
68047: PUSH
68048: FOR_DOWNTO
68049: IFFALSE 68126
// begin index := rand ( 1 , array ) ;
68051: LD_ADDR_VAR 0 4
68055: PUSH
68056: LD_INT 1
68058: PPUSH
68059: LD_VAR 0 1
68063: PPUSH
68064: CALL_OW 12
68068: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68069: LD_ADDR_VAR 0 2
68073: PUSH
68074: LD_VAR 0 2
68078: PPUSH
68079: LD_VAR 0 2
68083: PUSH
68084: LD_INT 1
68086: PLUS
68087: PPUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_VAR 0 4
68097: ARRAY
68098: PPUSH
68099: CALL_OW 2
68103: ST_TO_ADDR
// array := Delete ( array , index ) ;
68104: LD_ADDR_VAR 0 1
68108: PUSH
68109: LD_VAR 0 1
68113: PPUSH
68114: LD_VAR 0 4
68118: PPUSH
68119: CALL_OW 3
68123: ST_TO_ADDR
// end ;
68124: GO 68048
68126: POP
68127: POP
// end ;
68128: LD_VAR 0 2
68132: RET
// export function GetBaseMaterials ( base ) ; begin
68133: LD_INT 0
68135: PPUSH
// result := [ 0 , 0 , 0 ] ;
68136: LD_ADDR_VAR 0 2
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// if not base then
68155: LD_VAR 0 1
68159: NOT
68160: IFFALSE 68164
// exit ;
68162: GO 68213
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68164: LD_ADDR_VAR 0 2
68168: PUSH
68169: LD_VAR 0 1
68173: PPUSH
68174: LD_INT 1
68176: PPUSH
68177: CALL_OW 275
68181: PUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_INT 2
68189: PPUSH
68190: CALL_OW 275
68194: PUSH
68195: LD_VAR 0 1
68199: PPUSH
68200: LD_INT 3
68202: PPUSH
68203: CALL_OW 275
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: ST_TO_ADDR
// end ;
68213: LD_VAR 0 2
68217: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68218: LD_INT 0
68220: PPUSH
68221: PPUSH
// result := array ;
68222: LD_ADDR_VAR 0 3
68226: PUSH
68227: LD_VAR 0 1
68231: ST_TO_ADDR
// if size >= result then
68232: LD_VAR 0 2
68236: PUSH
68237: LD_VAR 0 3
68241: GREATEREQUAL
68242: IFFALSE 68246
// exit ;
68244: GO 68296
// if size then
68246: LD_VAR 0 2
68250: IFFALSE 68296
// for i := array downto size do
68252: LD_ADDR_VAR 0 4
68256: PUSH
68257: DOUBLE
68258: LD_VAR 0 1
68262: INC
68263: ST_TO_ADDR
68264: LD_VAR 0 2
68268: PUSH
68269: FOR_DOWNTO
68270: IFFALSE 68294
// result := Delete ( result , result ) ;
68272: LD_ADDR_VAR 0 3
68276: PUSH
68277: LD_VAR 0 3
68281: PPUSH
68282: LD_VAR 0 3
68286: PPUSH
68287: CALL_OW 3
68291: ST_TO_ADDR
68292: GO 68269
68294: POP
68295: POP
// end ;
68296: LD_VAR 0 3
68300: RET
// export function ComExit ( unit ) ; var tmp ; begin
68301: LD_INT 0
68303: PPUSH
68304: PPUSH
// if not IsInUnit ( unit ) then
68305: LD_VAR 0 1
68309: PPUSH
68310: CALL_OW 310
68314: NOT
68315: IFFALSE 68319
// exit ;
68317: GO 68379
// tmp := IsInUnit ( unit ) ;
68319: LD_ADDR_VAR 0 3
68323: PUSH
68324: LD_VAR 0 1
68328: PPUSH
68329: CALL_OW 310
68333: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68334: LD_VAR 0 3
68338: PPUSH
68339: CALL_OW 247
68343: PUSH
68344: LD_INT 2
68346: EQUAL
68347: IFFALSE 68360
// ComExitVehicle ( unit ) else
68349: LD_VAR 0 1
68353: PPUSH
68354: CALL_OW 121
68358: GO 68369
// ComExitBuilding ( unit ) ;
68360: LD_VAR 0 1
68364: PPUSH
68365: CALL_OW 122
// result := tmp ;
68369: LD_ADDR_VAR 0 2
68373: PUSH
68374: LD_VAR 0 3
68378: ST_TO_ADDR
// end ;
68379: LD_VAR 0 2
68383: RET
// export function ComExitAll ( units ) ; var i ; begin
68384: LD_INT 0
68386: PPUSH
68387: PPUSH
// if not units then
68388: LD_VAR 0 1
68392: NOT
68393: IFFALSE 68397
// exit ;
68395: GO 68423
// for i in units do
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: LD_VAR 0 1
68406: PUSH
68407: FOR_IN
68408: IFFALSE 68421
// ComExit ( i ) ;
68410: LD_VAR 0 3
68414: PPUSH
68415: CALL 68301 0 1
68419: GO 68407
68421: POP
68422: POP
// end ;
68423: LD_VAR 0 2
68427: RET
// export function ResetHc ; begin
68428: LD_INT 0
68430: PPUSH
// InitHc ;
68431: CALL_OW 19
// hc_importance := 0 ;
68435: LD_ADDR_OWVAR 32
68439: PUSH
68440: LD_INT 0
68442: ST_TO_ADDR
// end ;
68443: LD_VAR 0 1
68447: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68448: LD_INT 0
68450: PPUSH
68451: PPUSH
68452: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68453: LD_ADDR_VAR 0 6
68457: PUSH
68458: LD_VAR 0 1
68462: PUSH
68463: LD_VAR 0 3
68467: PLUS
68468: PUSH
68469: LD_INT 2
68471: DIV
68472: ST_TO_ADDR
// if _x < 0 then
68473: LD_VAR 0 6
68477: PUSH
68478: LD_INT 0
68480: LESS
68481: IFFALSE 68498
// _x := _x * - 1 ;
68483: LD_ADDR_VAR 0 6
68487: PUSH
68488: LD_VAR 0 6
68492: PUSH
68493: LD_INT 1
68495: NEG
68496: MUL
68497: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68498: LD_ADDR_VAR 0 7
68502: PUSH
68503: LD_VAR 0 2
68507: PUSH
68508: LD_VAR 0 4
68512: PLUS
68513: PUSH
68514: LD_INT 2
68516: DIV
68517: ST_TO_ADDR
// if _y < 0 then
68518: LD_VAR 0 7
68522: PUSH
68523: LD_INT 0
68525: LESS
68526: IFFALSE 68543
// _y := _y * - 1 ;
68528: LD_ADDR_VAR 0 7
68532: PUSH
68533: LD_VAR 0 7
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: MUL
68542: ST_TO_ADDR
// result := [ _x , _y ] ;
68543: LD_ADDR_VAR 0 5
68547: PUSH
68548: LD_VAR 0 6
68552: PUSH
68553: LD_VAR 0 7
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: ST_TO_ADDR
// end ;
68562: LD_VAR 0 5
68566: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68567: LD_INT 0
68569: PPUSH
68570: PPUSH
68571: PPUSH
68572: PPUSH
// task := GetTaskList ( unit ) ;
68573: LD_ADDR_VAR 0 7
68577: PUSH
68578: LD_VAR 0 1
68582: PPUSH
68583: CALL_OW 437
68587: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68588: LD_VAR 0 7
68592: NOT
68593: PUSH
68594: LD_VAR 0 1
68598: PPUSH
68599: LD_VAR 0 2
68603: PPUSH
68604: CALL_OW 308
68608: NOT
68609: AND
68610: IFFALSE 68614
// exit ;
68612: GO 68732
// if IsInArea ( unit , area ) then
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: CALL_OW 308
68628: IFFALSE 68646
// begin ComMoveToArea ( unit , goAway ) ;
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: CALL_OW 113
// exit ;
68644: GO 68732
// end ; if task [ 1 ] [ 1 ] <> M then
68646: LD_VAR 0 7
68650: PUSH
68651: LD_INT 1
68653: ARRAY
68654: PUSH
68655: LD_INT 1
68657: ARRAY
68658: PUSH
68659: LD_STRING M
68661: NONEQUAL
68662: IFFALSE 68666
// exit ;
68664: GO 68732
// x := task [ 1 ] [ 2 ] ;
68666: LD_ADDR_VAR 0 5
68670: PUSH
68671: LD_VAR 0 7
68675: PUSH
68676: LD_INT 1
68678: ARRAY
68679: PUSH
68680: LD_INT 2
68682: ARRAY
68683: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68684: LD_ADDR_VAR 0 6
68688: PUSH
68689: LD_VAR 0 7
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PUSH
68698: LD_INT 3
68700: ARRAY
68701: ST_TO_ADDR
// if InArea ( x , y , area ) then
68702: LD_VAR 0 5
68706: PPUSH
68707: LD_VAR 0 6
68711: PPUSH
68712: LD_VAR 0 2
68716: PPUSH
68717: CALL_OW 309
68721: IFFALSE 68732
// ComStop ( unit ) ;
68723: LD_VAR 0 1
68727: PPUSH
68728: CALL_OW 141
// end ;
68732: LD_VAR 0 4
68736: RET
// export function Abs ( value ) ; begin
68737: LD_INT 0
68739: PPUSH
// result := value ;
68740: LD_ADDR_VAR 0 2
68744: PUSH
68745: LD_VAR 0 1
68749: ST_TO_ADDR
// if value < 0 then
68750: LD_VAR 0 1
68754: PUSH
68755: LD_INT 0
68757: LESS
68758: IFFALSE 68775
// result := value * - 1 ;
68760: LD_ADDR_VAR 0 2
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: MUL
68774: ST_TO_ADDR
// end ;
68775: LD_VAR 0 2
68779: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68780: LD_INT 0
68782: PPUSH
68783: PPUSH
68784: PPUSH
68785: PPUSH
68786: PPUSH
68787: PPUSH
68788: PPUSH
68789: PPUSH
// if not unit or not building then
68790: LD_VAR 0 1
68794: NOT
68795: PUSH
68796: LD_VAR 0 2
68800: NOT
68801: OR
68802: IFFALSE 68806
// exit ;
68804: GO 69032
// x := GetX ( building ) ;
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_VAR 0 2
68815: PPUSH
68816: CALL_OW 250
68820: ST_TO_ADDR
// y := GetY ( building ) ;
68821: LD_ADDR_VAR 0 6
68825: PUSH
68826: LD_VAR 0 2
68830: PPUSH
68831: CALL_OW 251
68835: ST_TO_ADDR
// d := GetDir ( building ) ;
68836: LD_ADDR_VAR 0 8
68840: PUSH
68841: LD_VAR 0 2
68845: PPUSH
68846: CALL_OW 254
68850: ST_TO_ADDR
// r := 4 ;
68851: LD_ADDR_VAR 0 9
68855: PUSH
68856: LD_INT 4
68858: ST_TO_ADDR
// for i := 1 to 5 do
68859: LD_ADDR_VAR 0 10
68863: PUSH
68864: DOUBLE
68865: LD_INT 1
68867: DEC
68868: ST_TO_ADDR
68869: LD_INT 5
68871: PUSH
68872: FOR_TO
68873: IFFALSE 69030
// begin _x := ShiftX ( x , d , r + i ) ;
68875: LD_ADDR_VAR 0 5
68879: PUSH
68880: LD_VAR 0 4
68884: PPUSH
68885: LD_VAR 0 8
68889: PPUSH
68890: LD_VAR 0 9
68894: PUSH
68895: LD_VAR 0 10
68899: PLUS
68900: PPUSH
68901: CALL_OW 272
68905: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68906: LD_ADDR_VAR 0 7
68910: PUSH
68911: LD_VAR 0 6
68915: PPUSH
68916: LD_VAR 0 8
68920: PPUSH
68921: LD_VAR 0 9
68925: PUSH
68926: LD_VAR 0 10
68930: PLUS
68931: PPUSH
68932: CALL_OW 273
68936: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68937: LD_VAR 0 5
68941: PPUSH
68942: LD_VAR 0 7
68946: PPUSH
68947: CALL_OW 488
68951: PUSH
68952: LD_VAR 0 5
68956: PPUSH
68957: LD_VAR 0 7
68961: PPUSH
68962: CALL_OW 428
68966: PPUSH
68967: CALL_OW 247
68971: PUSH
68972: LD_INT 3
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: IN
68982: NOT
68983: AND
68984: IFFALSE 69028
// begin ComMoveXY ( unit , _x , _y ) ;
68986: LD_VAR 0 1
68990: PPUSH
68991: LD_VAR 0 5
68995: PPUSH
68996: LD_VAR 0 7
69000: PPUSH
69001: CALL_OW 111
// result := [ _x , _y ] ;
69005: LD_ADDR_VAR 0 3
69009: PUSH
69010: LD_VAR 0 5
69014: PUSH
69015: LD_VAR 0 7
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: ST_TO_ADDR
// exit ;
69024: POP
69025: POP
69026: GO 69032
// end ; end ;
69028: GO 68872
69030: POP
69031: POP
// end ;
69032: LD_VAR 0 3
69036: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69037: LD_INT 0
69039: PPUSH
69040: PPUSH
69041: PPUSH
// result := 0 ;
69042: LD_ADDR_VAR 0 3
69046: PUSH
69047: LD_INT 0
69049: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69050: LD_VAR 0 1
69054: PUSH
69055: LD_INT 0
69057: LESS
69058: PUSH
69059: LD_VAR 0 1
69063: PUSH
69064: LD_INT 8
69066: GREATER
69067: OR
69068: PUSH
69069: LD_VAR 0 2
69073: PUSH
69074: LD_INT 0
69076: LESS
69077: OR
69078: PUSH
69079: LD_VAR 0 2
69083: PUSH
69084: LD_INT 8
69086: GREATER
69087: OR
69088: IFFALSE 69092
// exit ;
69090: GO 69167
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69092: LD_ADDR_VAR 0 4
69096: PUSH
69097: LD_INT 22
69099: PUSH
69100: LD_VAR 0 2
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PPUSH
69109: CALL_OW 69
69113: PUSH
69114: FOR_IN
69115: IFFALSE 69165
// begin un := UnitShoot ( i ) ;
69117: LD_ADDR_VAR 0 5
69121: PUSH
69122: LD_VAR 0 4
69126: PPUSH
69127: CALL_OW 504
69131: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69132: LD_VAR 0 5
69136: PPUSH
69137: CALL_OW 255
69141: PUSH
69142: LD_VAR 0 1
69146: EQUAL
69147: IFFALSE 69163
// begin result := un ;
69149: LD_ADDR_VAR 0 3
69153: PUSH
69154: LD_VAR 0 5
69158: ST_TO_ADDR
// exit ;
69159: POP
69160: POP
69161: GO 69167
// end ; end ;
69163: GO 69114
69165: POP
69166: POP
// end ;
69167: LD_VAR 0 3
69171: RET
// export function GetCargoBay ( units ) ; begin
69172: LD_INT 0
69174: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: LD_VAR 0 1
69184: PPUSH
69185: LD_INT 2
69187: PUSH
69188: LD_INT 34
69190: PUSH
69191: LD_INT 12
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 34
69200: PUSH
69201: LD_INT 51
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 34
69210: PUSH
69211: LD_INT 32
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 34
69220: PUSH
69221: LD_INT 89
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: PPUSH
69235: CALL_OW 72
69239: ST_TO_ADDR
// end ;
69240: LD_VAR 0 2
69244: RET
// export function Negate ( value ) ; begin
69245: LD_INT 0
69247: PPUSH
// result := not value ;
69248: LD_ADDR_VAR 0 2
69252: PUSH
69253: LD_VAR 0 1
69257: NOT
69258: ST_TO_ADDR
// end ;
69259: LD_VAR 0 2
69263: RET
// export function Inc ( value ) ; begin
69264: LD_INT 0
69266: PPUSH
// result := value + 1 ;
69267: LD_ADDR_VAR 0 2
69271: PUSH
69272: LD_VAR 0 1
69276: PUSH
69277: LD_INT 1
69279: PLUS
69280: ST_TO_ADDR
// end ;
69281: LD_VAR 0 2
69285: RET
// export function Dec ( value ) ; begin
69286: LD_INT 0
69288: PPUSH
// result := value - 1 ;
69289: LD_ADDR_VAR 0 2
69293: PUSH
69294: LD_VAR 0 1
69298: PUSH
69299: LD_INT 1
69301: MINUS
69302: ST_TO_ADDR
// end ;
69303: LD_VAR 0 2
69307: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69308: LD_INT 0
69310: PPUSH
69311: PPUSH
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
69317: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69318: LD_VAR 0 1
69322: PPUSH
69323: LD_VAR 0 2
69327: PPUSH
69328: CALL_OW 488
69332: NOT
69333: PUSH
69334: LD_VAR 0 3
69338: PPUSH
69339: LD_VAR 0 4
69343: PPUSH
69344: CALL_OW 488
69348: NOT
69349: OR
69350: IFFALSE 69363
// begin result := - 1 ;
69352: LD_ADDR_VAR 0 5
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: ST_TO_ADDR
// exit ;
69361: GO 69598
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69363: LD_ADDR_VAR 0 12
69367: PUSH
69368: LD_VAR 0 1
69372: PPUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: LD_VAR 0 3
69382: PPUSH
69383: LD_VAR 0 4
69387: PPUSH
69388: CALL 68448 0 4
69392: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69393: LD_ADDR_VAR 0 11
69397: PUSH
69398: LD_VAR 0 1
69402: PPUSH
69403: LD_VAR 0 2
69407: PPUSH
69408: LD_VAR 0 12
69412: PUSH
69413: LD_INT 1
69415: ARRAY
69416: PPUSH
69417: LD_VAR 0 12
69421: PUSH
69422: LD_INT 2
69424: ARRAY
69425: PPUSH
69426: CALL_OW 298
69430: ST_TO_ADDR
// distance := 9999 ;
69431: LD_ADDR_VAR 0 10
69435: PUSH
69436: LD_INT 9999
69438: ST_TO_ADDR
// for i := 0 to 5 do
69439: LD_ADDR_VAR 0 6
69443: PUSH
69444: DOUBLE
69445: LD_INT 0
69447: DEC
69448: ST_TO_ADDR
69449: LD_INT 5
69451: PUSH
69452: FOR_TO
69453: IFFALSE 69596
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69455: LD_ADDR_VAR 0 7
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 6
69469: PPUSH
69470: LD_VAR 0 11
69474: PPUSH
69475: CALL_OW 272
69479: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69480: LD_ADDR_VAR 0 8
69484: PUSH
69485: LD_VAR 0 2
69489: PPUSH
69490: LD_VAR 0 6
69494: PPUSH
69495: LD_VAR 0 11
69499: PPUSH
69500: CALL_OW 273
69504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69505: LD_VAR 0 7
69509: PPUSH
69510: LD_VAR 0 8
69514: PPUSH
69515: CALL_OW 488
69519: NOT
69520: IFFALSE 69524
// continue ;
69522: GO 69452
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69524: LD_ADDR_VAR 0 9
69528: PUSH
69529: LD_VAR 0 12
69533: PUSH
69534: LD_INT 1
69536: ARRAY
69537: PPUSH
69538: LD_VAR 0 12
69542: PUSH
69543: LD_INT 2
69545: ARRAY
69546: PPUSH
69547: LD_VAR 0 7
69551: PPUSH
69552: LD_VAR 0 8
69556: PPUSH
69557: CALL_OW 298
69561: ST_TO_ADDR
// if tmp < distance then
69562: LD_VAR 0 9
69566: PUSH
69567: LD_VAR 0 10
69571: LESS
69572: IFFALSE 69594
// begin result := i ;
69574: LD_ADDR_VAR 0 5
69578: PUSH
69579: LD_VAR 0 6
69583: ST_TO_ADDR
// distance := tmp ;
69584: LD_ADDR_VAR 0 10
69588: PUSH
69589: LD_VAR 0 9
69593: ST_TO_ADDR
// end ; end ;
69594: GO 69452
69596: POP
69597: POP
// end ;
69598: LD_VAR 0 5
69602: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69603: LD_INT 0
69605: PPUSH
69606: PPUSH
// if not driver or not IsInUnit ( driver ) then
69607: LD_VAR 0 1
69611: NOT
69612: PUSH
69613: LD_VAR 0 1
69617: PPUSH
69618: CALL_OW 310
69622: NOT
69623: OR
69624: IFFALSE 69628
// exit ;
69626: GO 69718
// vehicle := IsInUnit ( driver ) ;
69628: LD_ADDR_VAR 0 3
69632: PUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: CALL_OW 310
69642: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69643: LD_VAR 0 1
69647: PPUSH
69648: LD_STRING \
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: LD_STRING E
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 0
69686: PUSH
69687: LD_VAR 0 3
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PPUSH
69714: CALL_OW 446
// end ;
69718: LD_VAR 0 2
69722: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69723: LD_INT 0
69725: PPUSH
69726: PPUSH
// if not driver or not IsInUnit ( driver ) then
69727: LD_VAR 0 1
69731: NOT
69732: PUSH
69733: LD_VAR 0 1
69737: PPUSH
69738: CALL_OW 310
69742: NOT
69743: OR
69744: IFFALSE 69748
// exit ;
69746: GO 69838
// vehicle := IsInUnit ( driver ) ;
69748: LD_ADDR_VAR 0 3
69752: PUSH
69753: LD_VAR 0 1
69757: PPUSH
69758: CALL_OW 310
69762: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69763: LD_VAR 0 1
69767: PPUSH
69768: LD_STRING \
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: LD_INT 0
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: PUSH
69798: LD_STRING E
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: LD_VAR 0 3
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PPUSH
69834: CALL_OW 447
// end ;
69838: LD_VAR 0 2
69842: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69843: LD_INT 0
69845: PPUSH
69846: PPUSH
69847: PPUSH
// tmp := [ ] ;
69848: LD_ADDR_VAR 0 5
69852: PUSH
69853: EMPTY
69854: ST_TO_ADDR
// for i in units do
69855: LD_ADDR_VAR 0 4
69859: PUSH
69860: LD_VAR 0 1
69864: PUSH
69865: FOR_IN
69866: IFFALSE 69904
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69868: LD_ADDR_VAR 0 5
69872: PUSH
69873: LD_VAR 0 5
69877: PPUSH
69878: LD_VAR 0 5
69882: PUSH
69883: LD_INT 1
69885: PLUS
69886: PPUSH
69887: LD_VAR 0 4
69891: PPUSH
69892: CALL_OW 256
69896: PPUSH
69897: CALL_OW 2
69901: ST_TO_ADDR
69902: GO 69865
69904: POP
69905: POP
// if not tmp then
69906: LD_VAR 0 5
69910: NOT
69911: IFFALSE 69915
// exit ;
69913: GO 69963
// if asc then
69915: LD_VAR 0 2
69919: IFFALSE 69943
// result := SortListByListAsc ( units , tmp ) else
69921: LD_ADDR_VAR 0 3
69925: PUSH
69926: LD_VAR 0 1
69930: PPUSH
69931: LD_VAR 0 5
69935: PPUSH
69936: CALL_OW 76
69940: ST_TO_ADDR
69941: GO 69963
// result := SortListByListDesc ( units , tmp ) ;
69943: LD_ADDR_VAR 0 3
69947: PUSH
69948: LD_VAR 0 1
69952: PPUSH
69953: LD_VAR 0 5
69957: PPUSH
69958: CALL_OW 77
69962: ST_TO_ADDR
// end ;
69963: LD_VAR 0 3
69967: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69968: LD_INT 0
69970: PPUSH
69971: PPUSH
// task := GetTaskList ( mech ) ;
69972: LD_ADDR_VAR 0 4
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL_OW 437
69986: ST_TO_ADDR
// if not task then
69987: LD_VAR 0 4
69991: NOT
69992: IFFALSE 69996
// exit ;
69994: GO 70038
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69996: LD_ADDR_VAR 0 3
70000: PUSH
70001: LD_VAR 0 4
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PUSH
70014: LD_STRING r
70016: EQUAL
70017: PUSH
70018: LD_VAR 0 4
70022: PUSH
70023: LD_INT 1
70025: ARRAY
70026: PUSH
70027: LD_INT 4
70029: ARRAY
70030: PUSH
70031: LD_VAR 0 2
70035: EQUAL
70036: AND
70037: ST_TO_ADDR
// end ;
70038: LD_VAR 0 3
70042: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70043: LD_INT 0
70045: PPUSH
// SetDir ( unit , d ) ;
70046: LD_VAR 0 1
70050: PPUSH
70051: LD_VAR 0 4
70055: PPUSH
70056: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70060: LD_VAR 0 1
70064: PPUSH
70065: LD_VAR 0 2
70069: PPUSH
70070: LD_VAR 0 3
70074: PPUSH
70075: LD_VAR 0 5
70079: PPUSH
70080: CALL_OW 48
// end ;
70084: LD_VAR 0 6
70088: RET
// export function ToNaturalNumber ( number ) ; begin
70089: LD_INT 0
70091: PPUSH
// result := number div 1 ;
70092: LD_ADDR_VAR 0 2
70096: PUSH
70097: LD_VAR 0 1
70101: PUSH
70102: LD_INT 1
70104: DIV
70105: ST_TO_ADDR
// if number < 0 then
70106: LD_VAR 0 1
70110: PUSH
70111: LD_INT 0
70113: LESS
70114: IFFALSE 70124
// result := 0 ;
70116: LD_ADDR_VAR 0 2
70120: PUSH
70121: LD_INT 0
70123: ST_TO_ADDR
// end ;
70124: LD_VAR 0 2
70128: RET
// export function SortByClass ( units , class ) ; var un ; begin
70129: LD_INT 0
70131: PPUSH
70132: PPUSH
// if not units or not class then
70133: LD_VAR 0 1
70137: NOT
70138: PUSH
70139: LD_VAR 0 2
70143: NOT
70144: OR
70145: IFFALSE 70149
// exit ;
70147: GO 70244
// result := [ ] ;
70149: LD_ADDR_VAR 0 3
70153: PUSH
70154: EMPTY
70155: ST_TO_ADDR
// for un in units do
70156: LD_ADDR_VAR 0 4
70160: PUSH
70161: LD_VAR 0 1
70165: PUSH
70166: FOR_IN
70167: IFFALSE 70242
// if GetClass ( un ) = class then
70169: LD_VAR 0 4
70173: PPUSH
70174: CALL_OW 257
70178: PUSH
70179: LD_VAR 0 2
70183: EQUAL
70184: IFFALSE 70211
// result := Insert ( result , 1 , un ) else
70186: LD_ADDR_VAR 0 3
70190: PUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: LD_INT 1
70198: PPUSH
70199: LD_VAR 0 4
70203: PPUSH
70204: CALL_OW 2
70208: ST_TO_ADDR
70209: GO 70240
// result := Replace ( result , result + 1 , un ) ;
70211: LD_ADDR_VAR 0 3
70215: PUSH
70216: LD_VAR 0 3
70220: PPUSH
70221: LD_VAR 0 3
70225: PUSH
70226: LD_INT 1
70228: PLUS
70229: PPUSH
70230: LD_VAR 0 4
70234: PPUSH
70235: CALL_OW 1
70239: ST_TO_ADDR
70240: GO 70166
70242: POP
70243: POP
// end ;
70244: LD_VAR 0 3
70248: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70249: LD_INT 0
70251: PPUSH
70252: PPUSH
70253: PPUSH
70254: PPUSH
70255: PPUSH
70256: PPUSH
70257: PPUSH
// result := [ ] ;
70258: LD_ADDR_VAR 0 4
70262: PUSH
70263: EMPTY
70264: ST_TO_ADDR
// if x - r < 0 then
70265: LD_VAR 0 1
70269: PUSH
70270: LD_VAR 0 3
70274: MINUS
70275: PUSH
70276: LD_INT 0
70278: LESS
70279: IFFALSE 70291
// min_x := 0 else
70281: LD_ADDR_VAR 0 8
70285: PUSH
70286: LD_INT 0
70288: ST_TO_ADDR
70289: GO 70307
// min_x := x - r ;
70291: LD_ADDR_VAR 0 8
70295: PUSH
70296: LD_VAR 0 1
70300: PUSH
70301: LD_VAR 0 3
70305: MINUS
70306: ST_TO_ADDR
// if y - r < 0 then
70307: LD_VAR 0 2
70311: PUSH
70312: LD_VAR 0 3
70316: MINUS
70317: PUSH
70318: LD_INT 0
70320: LESS
70321: IFFALSE 70333
// min_y := 0 else
70323: LD_ADDR_VAR 0 7
70327: PUSH
70328: LD_INT 0
70330: ST_TO_ADDR
70331: GO 70349
// min_y := y - r ;
70333: LD_ADDR_VAR 0 7
70337: PUSH
70338: LD_VAR 0 2
70342: PUSH
70343: LD_VAR 0 3
70347: MINUS
70348: ST_TO_ADDR
// max_x := x + r ;
70349: LD_ADDR_VAR 0 9
70353: PUSH
70354: LD_VAR 0 1
70358: PUSH
70359: LD_VAR 0 3
70363: PLUS
70364: ST_TO_ADDR
// max_y := y + r ;
70365: LD_ADDR_VAR 0 10
70369: PUSH
70370: LD_VAR 0 2
70374: PUSH
70375: LD_VAR 0 3
70379: PLUS
70380: ST_TO_ADDR
// for _x = min_x to max_x do
70381: LD_ADDR_VAR 0 5
70385: PUSH
70386: DOUBLE
70387: LD_VAR 0 8
70391: DEC
70392: ST_TO_ADDR
70393: LD_VAR 0 9
70397: PUSH
70398: FOR_TO
70399: IFFALSE 70500
// for _y = min_y to max_y do
70401: LD_ADDR_VAR 0 6
70405: PUSH
70406: DOUBLE
70407: LD_VAR 0 7
70411: DEC
70412: ST_TO_ADDR
70413: LD_VAR 0 10
70417: PUSH
70418: FOR_TO
70419: IFFALSE 70496
// begin if not ValidHex ( _x , _y ) then
70421: LD_VAR 0 5
70425: PPUSH
70426: LD_VAR 0 6
70430: PPUSH
70431: CALL_OW 488
70435: NOT
70436: IFFALSE 70440
// continue ;
70438: GO 70418
// if GetResourceTypeXY ( _x , _y ) then
70440: LD_VAR 0 5
70444: PPUSH
70445: LD_VAR 0 6
70449: PPUSH
70450: CALL_OW 283
70454: IFFALSE 70494
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70456: LD_ADDR_VAR 0 4
70460: PUSH
70461: LD_VAR 0 4
70465: PPUSH
70466: LD_VAR 0 4
70470: PUSH
70471: LD_INT 1
70473: PLUS
70474: PPUSH
70475: LD_VAR 0 5
70479: PUSH
70480: LD_VAR 0 6
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PPUSH
70489: CALL_OW 1
70493: ST_TO_ADDR
// end ;
70494: GO 70418
70496: POP
70497: POP
70498: GO 70398
70500: POP
70501: POP
// end ;
70502: LD_VAR 0 4
70506: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70507: LD_INT 0
70509: PPUSH
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
// if not units then
70517: LD_VAR 0 1
70521: NOT
70522: IFFALSE 70526
// exit ;
70524: GO 71050
// result := UnitFilter ( units , [ f_ok ] ) ;
70526: LD_ADDR_VAR 0 3
70530: PUSH
70531: LD_VAR 0 1
70535: PPUSH
70536: LD_INT 50
70538: PUSH
70539: EMPTY
70540: LIST
70541: PPUSH
70542: CALL_OW 72
70546: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70547: LD_ADDR_VAR 0 8
70551: PUSH
70552: LD_VAR 0 1
70556: PUSH
70557: LD_INT 1
70559: ARRAY
70560: PPUSH
70561: CALL_OW 255
70565: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70566: LD_ADDR_VAR 0 10
70570: PUSH
70571: LD_INT 29
70573: PUSH
70574: LD_INT 91
70576: PUSH
70577: LD_INT 49
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: ST_TO_ADDR
// if not result then
70585: LD_VAR 0 3
70589: NOT
70590: IFFALSE 70594
// exit ;
70592: GO 71050
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70594: LD_ADDR_VAR 0 5
70598: PUSH
70599: LD_INT 81
70601: PUSH
70602: LD_VAR 0 8
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PPUSH
70611: CALL_OW 69
70615: ST_TO_ADDR
// for i in result do
70616: LD_ADDR_VAR 0 4
70620: PUSH
70621: LD_VAR 0 3
70625: PUSH
70626: FOR_IN
70627: IFFALSE 71048
// begin tag := GetTag ( i ) + 1 ;
70629: LD_ADDR_VAR 0 9
70633: PUSH
70634: LD_VAR 0 4
70638: PPUSH
70639: CALL_OW 110
70643: PUSH
70644: LD_INT 1
70646: PLUS
70647: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70648: LD_ADDR_VAR 0 7
70652: PUSH
70653: LD_VAR 0 4
70657: PPUSH
70658: CALL_OW 250
70662: PPUSH
70663: LD_VAR 0 4
70667: PPUSH
70668: CALL_OW 251
70672: PPUSH
70673: LD_INT 6
70675: PPUSH
70676: CALL 70249 0 3
70680: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70681: LD_VAR 0 4
70685: PPUSH
70686: CALL_OW 247
70690: PUSH
70691: LD_INT 2
70693: EQUAL
70694: PUSH
70695: LD_VAR 0 7
70699: AND
70700: PUSH
70701: LD_VAR 0 4
70705: PPUSH
70706: CALL_OW 264
70710: PUSH
70711: LD_VAR 0 10
70715: IN
70716: NOT
70717: AND
70718: IFFALSE 70757
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70720: LD_VAR 0 4
70724: PPUSH
70725: LD_VAR 0 7
70729: PUSH
70730: LD_INT 1
70732: ARRAY
70733: PUSH
70734: LD_INT 1
70736: ARRAY
70737: PPUSH
70738: LD_VAR 0 7
70742: PUSH
70743: LD_INT 1
70745: ARRAY
70746: PUSH
70747: LD_INT 2
70749: ARRAY
70750: PPUSH
70751: CALL_OW 116
70755: GO 71046
// if path > tag then
70757: LD_VAR 0 2
70761: PUSH
70762: LD_VAR 0 9
70766: GREATER
70767: IFFALSE 70975
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70769: LD_ADDR_VAR 0 6
70773: PUSH
70774: LD_VAR 0 5
70778: PPUSH
70779: LD_INT 91
70781: PUSH
70782: LD_VAR 0 4
70786: PUSH
70787: LD_INT 8
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: PPUSH
70795: CALL_OW 72
70799: ST_TO_ADDR
// if nearEnemy then
70800: LD_VAR 0 6
70804: IFFALSE 70873
// begin if GetWeapon ( i ) = ru_time_lapser then
70806: LD_VAR 0 4
70810: PPUSH
70811: CALL_OW 264
70815: PUSH
70816: LD_INT 49
70818: EQUAL
70819: IFFALSE 70847
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70821: LD_VAR 0 4
70825: PPUSH
70826: LD_VAR 0 6
70830: PPUSH
70831: LD_VAR 0 4
70835: PPUSH
70836: CALL_OW 74
70840: PPUSH
70841: CALL_OW 112
70845: GO 70871
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70847: LD_VAR 0 4
70851: PPUSH
70852: LD_VAR 0 6
70856: PPUSH
70857: LD_VAR 0 4
70861: PPUSH
70862: CALL_OW 74
70866: PPUSH
70867: CALL 71975 0 2
// end else
70871: GO 70973
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70873: LD_VAR 0 4
70877: PPUSH
70878: LD_VAR 0 2
70882: PUSH
70883: LD_VAR 0 9
70887: ARRAY
70888: PUSH
70889: LD_INT 1
70891: ARRAY
70892: PPUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_VAR 0 9
70902: ARRAY
70903: PUSH
70904: LD_INT 2
70906: ARRAY
70907: PPUSH
70908: CALL_OW 297
70912: PUSH
70913: LD_INT 6
70915: GREATER
70916: IFFALSE 70959
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70918: LD_VAR 0 4
70922: PPUSH
70923: LD_VAR 0 2
70927: PUSH
70928: LD_VAR 0 9
70932: ARRAY
70933: PUSH
70934: LD_INT 1
70936: ARRAY
70937: PPUSH
70938: LD_VAR 0 2
70942: PUSH
70943: LD_VAR 0 9
70947: ARRAY
70948: PUSH
70949: LD_INT 2
70951: ARRAY
70952: PPUSH
70953: CALL_OW 114
70957: GO 70973
// SetTag ( i , tag ) ;
70959: LD_VAR 0 4
70963: PPUSH
70964: LD_VAR 0 9
70968: PPUSH
70969: CALL_OW 109
// end else
70973: GO 71046
// if enemy then
70975: LD_VAR 0 5
70979: IFFALSE 71046
// begin if GetWeapon ( i ) = ru_time_lapser then
70981: LD_VAR 0 4
70985: PPUSH
70986: CALL_OW 264
70990: PUSH
70991: LD_INT 49
70993: EQUAL
70994: IFFALSE 71022
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70996: LD_VAR 0 4
71000: PPUSH
71001: LD_VAR 0 5
71005: PPUSH
71006: LD_VAR 0 4
71010: PPUSH
71011: CALL_OW 74
71015: PPUSH
71016: CALL_OW 112
71020: GO 71046
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71022: LD_VAR 0 4
71026: PPUSH
71027: LD_VAR 0 5
71031: PPUSH
71032: LD_VAR 0 4
71036: PPUSH
71037: CALL_OW 74
71041: PPUSH
71042: CALL 71975 0 2
// end ; end ;
71046: GO 70626
71048: POP
71049: POP
// end ;
71050: LD_VAR 0 3
71054: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71055: LD_INT 0
71057: PPUSH
71058: PPUSH
71059: PPUSH
// if not unit or IsInUnit ( unit ) then
71060: LD_VAR 0 1
71064: NOT
71065: PUSH
71066: LD_VAR 0 1
71070: PPUSH
71071: CALL_OW 310
71075: OR
71076: IFFALSE 71080
// exit ;
71078: GO 71171
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71080: LD_ADDR_VAR 0 4
71084: PUSH
71085: LD_VAR 0 1
71089: PPUSH
71090: CALL_OW 250
71094: PPUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: LD_INT 1
71102: PPUSH
71103: CALL_OW 272
71107: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71108: LD_ADDR_VAR 0 5
71112: PUSH
71113: LD_VAR 0 1
71117: PPUSH
71118: CALL_OW 251
71122: PPUSH
71123: LD_VAR 0 2
71127: PPUSH
71128: LD_INT 1
71130: PPUSH
71131: CALL_OW 273
71135: ST_TO_ADDR
// if ValidHex ( x , y ) then
71136: LD_VAR 0 4
71140: PPUSH
71141: LD_VAR 0 5
71145: PPUSH
71146: CALL_OW 488
71150: IFFALSE 71171
// ComTurnXY ( unit , x , y ) ;
71152: LD_VAR 0 1
71156: PPUSH
71157: LD_VAR 0 4
71161: PPUSH
71162: LD_VAR 0 5
71166: PPUSH
71167: CALL_OW 118
// end ;
71171: LD_VAR 0 3
71175: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71176: LD_INT 0
71178: PPUSH
71179: PPUSH
// result := false ;
71180: LD_ADDR_VAR 0 3
71184: PUSH
71185: LD_INT 0
71187: ST_TO_ADDR
// if not units then
71188: LD_VAR 0 2
71192: NOT
71193: IFFALSE 71197
// exit ;
71195: GO 71242
// for i in units do
71197: LD_ADDR_VAR 0 4
71201: PUSH
71202: LD_VAR 0 2
71206: PUSH
71207: FOR_IN
71208: IFFALSE 71240
// if See ( side , i ) then
71210: LD_VAR 0 1
71214: PPUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: CALL_OW 292
71224: IFFALSE 71238
// begin result := true ;
71226: LD_ADDR_VAR 0 3
71230: PUSH
71231: LD_INT 1
71233: ST_TO_ADDR
// exit ;
71234: POP
71235: POP
71236: GO 71242
// end ;
71238: GO 71207
71240: POP
71241: POP
// end ;
71242: LD_VAR 0 3
71246: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71247: LD_INT 0
71249: PPUSH
71250: PPUSH
71251: PPUSH
71252: PPUSH
// if not unit or not points then
71253: LD_VAR 0 1
71257: NOT
71258: PUSH
71259: LD_VAR 0 2
71263: NOT
71264: OR
71265: IFFALSE 71269
// exit ;
71267: GO 71359
// dist := 99999 ;
71269: LD_ADDR_VAR 0 5
71273: PUSH
71274: LD_INT 99999
71276: ST_TO_ADDR
// for i in points do
71277: LD_ADDR_VAR 0 4
71281: PUSH
71282: LD_VAR 0 2
71286: PUSH
71287: FOR_IN
71288: IFFALSE 71357
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71290: LD_ADDR_VAR 0 6
71294: PUSH
71295: LD_VAR 0 1
71299: PPUSH
71300: LD_VAR 0 4
71304: PUSH
71305: LD_INT 1
71307: ARRAY
71308: PPUSH
71309: LD_VAR 0 4
71313: PUSH
71314: LD_INT 2
71316: ARRAY
71317: PPUSH
71318: CALL_OW 297
71322: ST_TO_ADDR
// if tmpDist < dist then
71323: LD_VAR 0 6
71327: PUSH
71328: LD_VAR 0 5
71332: LESS
71333: IFFALSE 71355
// begin result := i ;
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_VAR 0 4
71344: ST_TO_ADDR
// dist := tmpDist ;
71345: LD_ADDR_VAR 0 5
71349: PUSH
71350: LD_VAR 0 6
71354: ST_TO_ADDR
// end ; end ;
71355: GO 71287
71357: POP
71358: POP
// end ;
71359: LD_VAR 0 3
71363: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71364: LD_INT 0
71366: PPUSH
// uc_side := side ;
71367: LD_ADDR_OWVAR 20
71371: PUSH
71372: LD_VAR 0 1
71376: ST_TO_ADDR
// uc_nation := 3 ;
71377: LD_ADDR_OWVAR 21
71381: PUSH
71382: LD_INT 3
71384: ST_TO_ADDR
// vc_chassis := 25 ;
71385: LD_ADDR_OWVAR 37
71389: PUSH
71390: LD_INT 25
71392: ST_TO_ADDR
// vc_engine := engine_siberite ;
71393: LD_ADDR_OWVAR 39
71397: PUSH
71398: LD_INT 3
71400: ST_TO_ADDR
// vc_control := control_computer ;
71401: LD_ADDR_OWVAR 38
71405: PUSH
71406: LD_INT 3
71408: ST_TO_ADDR
// vc_weapon := 59 ;
71409: LD_ADDR_OWVAR 40
71413: PUSH
71414: LD_INT 59
71416: ST_TO_ADDR
// result := CreateVehicle ;
71417: LD_ADDR_VAR 0 5
71421: PUSH
71422: CALL_OW 45
71426: ST_TO_ADDR
// SetDir ( result , d ) ;
71427: LD_VAR 0 5
71431: PPUSH
71432: LD_VAR 0 4
71436: PPUSH
71437: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71441: LD_VAR 0 5
71445: PPUSH
71446: LD_VAR 0 2
71450: PPUSH
71451: LD_VAR 0 3
71455: PPUSH
71456: LD_INT 0
71458: PPUSH
71459: CALL_OW 48
// end ;
71463: LD_VAR 0 5
71467: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71468: LD_INT 0
71470: PPUSH
71471: PPUSH
71472: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71473: LD_ADDR_VAR 0 2
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: LD_INT 0
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71496: LD_VAR 0 1
71500: NOT
71501: PUSH
71502: LD_VAR 0 1
71506: PPUSH
71507: CALL_OW 264
71511: PUSH
71512: LD_INT 12
71514: PUSH
71515: LD_INT 51
71517: PUSH
71518: LD_INT 32
71520: PUSH
71521: LD_INT 89
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: IN
71530: NOT
71531: OR
71532: IFFALSE 71536
// exit ;
71534: GO 71634
// for i := 1 to 3 do
71536: LD_ADDR_VAR 0 3
71540: PUSH
71541: DOUBLE
71542: LD_INT 1
71544: DEC
71545: ST_TO_ADDR
71546: LD_INT 3
71548: PUSH
71549: FOR_TO
71550: IFFALSE 71632
// begin tmp := GetCargo ( cargo , i ) ;
71552: LD_ADDR_VAR 0 4
71556: PUSH
71557: LD_VAR 0 1
71561: PPUSH
71562: LD_VAR 0 3
71566: PPUSH
71567: CALL_OW 289
71571: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71572: LD_ADDR_VAR 0 2
71576: PUSH
71577: LD_VAR 0 2
71581: PPUSH
71582: LD_VAR 0 3
71586: PPUSH
71587: LD_VAR 0 4
71591: PPUSH
71592: CALL_OW 1
71596: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: LD_VAR 0 2
71606: PPUSH
71607: LD_INT 4
71609: PPUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 4
71617: ARRAY
71618: PUSH
71619: LD_VAR 0 4
71623: PLUS
71624: PPUSH
71625: CALL_OW 1
71629: ST_TO_ADDR
// end ;
71630: GO 71549
71632: POP
71633: POP
// end ;
71634: LD_VAR 0 2
71638: RET
// export function Length ( array ) ; begin
71639: LD_INT 0
71641: PPUSH
// result := array + 0 ;
71642: LD_ADDR_VAR 0 2
71646: PUSH
71647: LD_VAR 0 1
71651: PUSH
71652: LD_INT 0
71654: PLUS
71655: ST_TO_ADDR
// end ;
71656: LD_VAR 0 2
71660: RET
// export function PrepareArray ( array ) ; begin
71661: LD_INT 0
71663: PPUSH
// result := array diff 0 ;
71664: LD_ADDR_VAR 0 2
71668: PUSH
71669: LD_VAR 0 1
71673: PUSH
71674: LD_INT 0
71676: DIFF
71677: ST_TO_ADDR
// if not result [ 1 ] then
71678: LD_VAR 0 2
71682: PUSH
71683: LD_INT 1
71685: ARRAY
71686: NOT
71687: IFFALSE 71707
// result := Delete ( result , 1 ) ;
71689: LD_ADDR_VAR 0 2
71693: PUSH
71694: LD_VAR 0 2
71698: PPUSH
71699: LD_INT 1
71701: PPUSH
71702: CALL_OW 3
71706: ST_TO_ADDR
// end ;
71707: LD_VAR 0 2
71711: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71712: LD_INT 0
71714: PPUSH
71715: PPUSH
71716: PPUSH
71717: PPUSH
// sibRocketRange := 25 ;
71718: LD_ADDR_VAR 0 6
71722: PUSH
71723: LD_INT 25
71725: ST_TO_ADDR
// result := false ;
71726: LD_ADDR_VAR 0 4
71730: PUSH
71731: LD_INT 0
71733: ST_TO_ADDR
// for i := 0 to 5 do
71734: LD_ADDR_VAR 0 5
71738: PUSH
71739: DOUBLE
71740: LD_INT 0
71742: DEC
71743: ST_TO_ADDR
71744: LD_INT 5
71746: PUSH
71747: FOR_TO
71748: IFFALSE 71815
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_VAR 0 5
71759: PPUSH
71760: LD_VAR 0 6
71764: PPUSH
71765: CALL_OW 272
71769: PPUSH
71770: LD_VAR 0 2
71774: PPUSH
71775: LD_VAR 0 5
71779: PPUSH
71780: LD_VAR 0 6
71784: PPUSH
71785: CALL_OW 273
71789: PPUSH
71790: LD_VAR 0 3
71794: PPUSH
71795: CALL_OW 309
71799: IFFALSE 71813
// begin result := true ;
71801: LD_ADDR_VAR 0 4
71805: PUSH
71806: LD_INT 1
71808: ST_TO_ADDR
// exit ;
71809: POP
71810: POP
71811: GO 71817
// end ;
71813: GO 71747
71815: POP
71816: POP
// end ;
71817: LD_VAR 0 4
71821: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71822: LD_INT 0
71824: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71825: LD_VAR 0 1
71829: PPUSH
71830: LD_VAR 0 2
71834: PPUSH
71835: LD_INT 0
71837: PPUSH
71838: LD_INT 0
71840: PPUSH
71841: LD_INT 1
71843: PPUSH
71844: LD_INT 0
71846: PPUSH
71847: CALL_OW 587
// end ;
71851: LD_VAR 0 3
71855: RET
// export function CenterOnNow ( unit ) ; begin
71856: LD_INT 0
71858: PPUSH
// result := IsInUnit ( unit ) ;
71859: LD_ADDR_VAR 0 2
71863: PUSH
71864: LD_VAR 0 1
71868: PPUSH
71869: CALL_OW 310
71873: ST_TO_ADDR
// if not result then
71874: LD_VAR 0 2
71878: NOT
71879: IFFALSE 71891
// result := unit ;
71881: LD_ADDR_VAR 0 2
71885: PUSH
71886: LD_VAR 0 1
71890: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71891: LD_VAR 0 1
71895: PPUSH
71896: CALL_OW 87
// end ;
71900: LD_VAR 0 2
71904: RET
// export function ComMoveHex ( unit , hex ) ; begin
71905: LD_INT 0
71907: PPUSH
// if not hex then
71908: LD_VAR 0 2
71912: NOT
71913: IFFALSE 71917
// exit ;
71915: GO 71970
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71917: LD_VAR 0 2
71921: PUSH
71922: LD_INT 1
71924: ARRAY
71925: PPUSH
71926: LD_VAR 0 2
71930: PUSH
71931: LD_INT 2
71933: ARRAY
71934: PPUSH
71935: CALL_OW 428
71939: IFFALSE 71943
// exit ;
71941: GO 71970
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71943: LD_VAR 0 1
71947: PPUSH
71948: LD_VAR 0 2
71952: PUSH
71953: LD_INT 1
71955: ARRAY
71956: PPUSH
71957: LD_VAR 0 2
71961: PUSH
71962: LD_INT 2
71964: ARRAY
71965: PPUSH
71966: CALL_OW 111
// end ;
71970: LD_VAR 0 3
71974: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
71979: PPUSH
// if not unit or not enemy then
71980: LD_VAR 0 1
71984: NOT
71985: PUSH
71986: LD_VAR 0 2
71990: NOT
71991: OR
71992: IFFALSE 71996
// exit ;
71994: GO 72120
// x := GetX ( enemy ) ;
71996: LD_ADDR_VAR 0 4
72000: PUSH
72001: LD_VAR 0 2
72005: PPUSH
72006: CALL_OW 250
72010: ST_TO_ADDR
// y := GetY ( enemy ) ;
72011: LD_ADDR_VAR 0 5
72015: PUSH
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 251
72025: ST_TO_ADDR
// if ValidHex ( x , y ) then
72026: LD_VAR 0 4
72030: PPUSH
72031: LD_VAR 0 5
72035: PPUSH
72036: CALL_OW 488
72040: IFFALSE 72120
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72042: LD_VAR 0 2
72046: PPUSH
72047: CALL_OW 247
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: IN
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: CALL_OW 255
72072: PPUSH
72073: LD_VAR 0 2
72077: PPUSH
72078: CALL_OW 292
72082: OR
72083: IFFALSE 72101
// ComAttackUnit ( unit , enemy ) else
72085: LD_VAR 0 1
72089: PPUSH
72090: LD_VAR 0 2
72094: PPUSH
72095: CALL_OW 115
72099: GO 72120
// ComAgressiveMove ( unit , x , y ) ;
72101: LD_VAR 0 1
72105: PPUSH
72106: LD_VAR 0 4
72110: PPUSH
72111: LD_VAR 0 5
72115: PPUSH
72116: CALL_OW 114
// end ;
72120: LD_VAR 0 3
72124: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72125: LD_INT 0
72127: PPUSH
72128: PPUSH
72129: PPUSH
// list := AreaToList ( area , 0 ) ;
72130: LD_ADDR_VAR 0 5
72134: PUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: LD_INT 0
72142: PPUSH
72143: CALL_OW 517
72147: ST_TO_ADDR
// if not list then
72148: LD_VAR 0 5
72152: NOT
72153: IFFALSE 72157
// exit ;
72155: GO 72287
// if all then
72157: LD_VAR 0 2
72161: IFFALSE 72249
// begin for i := 1 to list [ 1 ] do
72163: LD_ADDR_VAR 0 4
72167: PUSH
72168: DOUBLE
72169: LD_INT 1
72171: DEC
72172: ST_TO_ADDR
72173: LD_VAR 0 5
72177: PUSH
72178: LD_INT 1
72180: ARRAY
72181: PUSH
72182: FOR_TO
72183: IFFALSE 72245
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72185: LD_ADDR_VAR 0 3
72189: PUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: LD_VAR 0 3
72199: PUSH
72200: LD_INT 1
72202: PLUS
72203: PPUSH
72204: LD_VAR 0 5
72208: PUSH
72209: LD_INT 1
72211: ARRAY
72212: PUSH
72213: LD_VAR 0 4
72217: ARRAY
72218: PUSH
72219: LD_VAR 0 5
72223: PUSH
72224: LD_INT 2
72226: ARRAY
72227: PUSH
72228: LD_VAR 0 4
72232: ARRAY
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PPUSH
72238: CALL_OW 1
72242: ST_TO_ADDR
72243: GO 72182
72245: POP
72246: POP
// exit ;
72247: GO 72287
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72249: LD_ADDR_VAR 0 3
72253: PUSH
72254: LD_VAR 0 5
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PUSH
72263: LD_INT 1
72265: ARRAY
72266: PUSH
72267: LD_VAR 0 5
72271: PUSH
72272: LD_INT 2
72274: ARRAY
72275: PUSH
72276: LD_INT 1
72278: ARRAY
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: EMPTY
72285: LIST
72286: ST_TO_ADDR
// end ;
72287: LD_VAR 0 3
72291: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72292: LD_INT 0
72294: PPUSH
72295: PPUSH
// list := AreaToList ( area , 0 ) ;
72296: LD_ADDR_VAR 0 4
72300: PUSH
72301: LD_VAR 0 1
72305: PPUSH
72306: LD_INT 0
72308: PPUSH
72309: CALL_OW 517
72313: ST_TO_ADDR
// if not list then
72314: LD_VAR 0 4
72318: NOT
72319: IFFALSE 72323
// exit ;
72321: GO 72364
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72323: LD_ADDR_VAR 0 3
72327: PUSH
72328: LD_VAR 0 4
72332: PUSH
72333: LD_INT 1
72335: ARRAY
72336: PUSH
72337: LD_INT 1
72339: ARRAY
72340: PUSH
72341: LD_VAR 0 4
72345: PUSH
72346: LD_INT 2
72348: ARRAY
72349: PUSH
72350: LD_INT 1
72352: ARRAY
72353: PUSH
72354: LD_VAR 0 2
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: LIST
72363: ST_TO_ADDR
// end ;
72364: LD_VAR 0 3
72368: RET
// export function First ( array ) ; begin
72369: LD_INT 0
72371: PPUSH
// if not array then
72372: LD_VAR 0 1
72376: NOT
72377: IFFALSE 72381
// exit ;
72379: GO 72395
// result := array [ 1 ] ;
72381: LD_ADDR_VAR 0 2
72385: PUSH
72386: LD_VAR 0 1
72390: PUSH
72391: LD_INT 1
72393: ARRAY
72394: ST_TO_ADDR
// end ;
72395: LD_VAR 0 2
72399: RET
// export function Last ( array ) ; begin
72400: LD_INT 0
72402: PPUSH
// if not array then
72403: LD_VAR 0 1
72407: NOT
72408: IFFALSE 72412
// exit ;
72410: GO 72428
// result := array [ array ] ;
72412: LD_ADDR_VAR 0 2
72416: PUSH
72417: LD_VAR 0 1
72421: PUSH
72422: LD_VAR 0 1
72426: ARRAY
72427: ST_TO_ADDR
// end ;
72428: LD_VAR 0 2
72432: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72433: LD_INT 0
72435: PPUSH
72436: PPUSH
// result := [ ] ;
72437: LD_ADDR_VAR 0 5
72441: PUSH
72442: EMPTY
72443: ST_TO_ADDR
// if not array then
72444: LD_VAR 0 1
72448: NOT
72449: IFFALSE 72453
// exit ;
72451: GO 72565
// for i := 1 to array do
72453: LD_ADDR_VAR 0 6
72457: PUSH
72458: DOUBLE
72459: LD_INT 1
72461: DEC
72462: ST_TO_ADDR
72463: LD_VAR 0 1
72467: PUSH
72468: FOR_TO
72469: IFFALSE 72563
// if array [ i ] [ index ] = value then
72471: LD_VAR 0 1
72475: PUSH
72476: LD_VAR 0 6
72480: ARRAY
72481: PUSH
72482: LD_VAR 0 2
72486: ARRAY
72487: PUSH
72488: LD_VAR 0 3
72492: EQUAL
72493: IFFALSE 72561
// begin if indexColumn then
72495: LD_VAR 0 4
72499: IFFALSE 72535
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72501: LD_ADDR_VAR 0 5
72505: PUSH
72506: LD_VAR 0 5
72510: PPUSH
72511: LD_VAR 0 1
72515: PUSH
72516: LD_VAR 0 6
72520: ARRAY
72521: PUSH
72522: LD_VAR 0 4
72526: ARRAY
72527: PPUSH
72528: CALL 67903 0 2
72532: ST_TO_ADDR
72533: GO 72561
// result := Join ( result , array [ i ] ) ;
72535: LD_ADDR_VAR 0 5
72539: PUSH
72540: LD_VAR 0 5
72544: PPUSH
72545: LD_VAR 0 1
72549: PUSH
72550: LD_VAR 0 6
72554: ARRAY
72555: PPUSH
72556: CALL 67903 0 2
72560: ST_TO_ADDR
// end ;
72561: GO 72468
72563: POP
72564: POP
// end ;
72565: LD_VAR 0 5
72569: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72570: LD_INT 0
72572: PPUSH
72573: PPUSH
72574: PPUSH
// if btype = b_depot then
72575: LD_VAR 0 2
72579: PUSH
72580: LD_INT 0
72582: EQUAL
72583: IFFALSE 72595
// begin result := true ;
72585: LD_ADDR_VAR 0 3
72589: PUSH
72590: LD_INT 1
72592: ST_TO_ADDR
// exit ;
72593: GO 72711
// end ; pom := GetBase ( depot ) ;
72595: LD_ADDR_VAR 0 4
72599: PUSH
72600: LD_VAR 0 1
72604: PPUSH
72605: CALL_OW 274
72609: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72610: LD_ADDR_VAR 0 5
72614: PUSH
72615: LD_VAR 0 2
72619: PPUSH
72620: LD_VAR 0 1
72624: PPUSH
72625: CALL_OW 248
72629: PPUSH
72630: CALL_OW 450
72634: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_VAR 0 4
72644: PPUSH
72645: LD_INT 1
72647: PPUSH
72648: CALL_OW 275
72652: PUSH
72653: LD_VAR 0 5
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: GREATEREQUAL
72662: PUSH
72663: LD_VAR 0 4
72667: PPUSH
72668: LD_INT 2
72670: PPUSH
72671: CALL_OW 275
72675: PUSH
72676: LD_VAR 0 5
72680: PUSH
72681: LD_INT 2
72683: ARRAY
72684: GREATEREQUAL
72685: AND
72686: PUSH
72687: LD_VAR 0 4
72691: PPUSH
72692: LD_INT 3
72694: PPUSH
72695: CALL_OW 275
72699: PUSH
72700: LD_VAR 0 5
72704: PUSH
72705: LD_INT 3
72707: ARRAY
72708: GREATEREQUAL
72709: AND
72710: ST_TO_ADDR
// end ;
72711: LD_VAR 0 3
72715: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72716: LD_INT 0
72718: PPUSH
// if not vehicles or not parkingPoint then
72719: LD_VAR 0 1
72723: NOT
72724: PUSH
72725: LD_VAR 0 2
72729: NOT
72730: OR
72731: IFFALSE 72735
// exit ;
72733: GO 72833
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72735: LD_ADDR_VAR 0 1
72739: PUSH
72740: LD_VAR 0 1
72744: PPUSH
72745: LD_INT 50
72747: PUSH
72748: EMPTY
72749: LIST
72750: PUSH
72751: LD_INT 3
72753: PUSH
72754: LD_INT 92
72756: PUSH
72757: LD_VAR 0 2
72761: PUSH
72762: LD_INT 1
72764: ARRAY
72765: PUSH
72766: LD_VAR 0 2
72770: PUSH
72771: LD_INT 2
72773: ARRAY
72774: PUSH
72775: LD_INT 8
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PPUSH
72792: CALL_OW 72
72796: ST_TO_ADDR
// if not vehicles then
72797: LD_VAR 0 1
72801: NOT
72802: IFFALSE 72806
// exit ;
72804: GO 72833
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72806: LD_VAR 0 1
72810: PPUSH
72811: LD_VAR 0 2
72815: PUSH
72816: LD_INT 1
72818: ARRAY
72819: PPUSH
72820: LD_VAR 0 2
72824: PUSH
72825: LD_INT 2
72827: ARRAY
72828: PPUSH
72829: CALL_OW 111
// end ;
72833: LD_VAR 0 3
72837: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72838: LD_INT 0
72840: PPUSH
72841: PPUSH
72842: PPUSH
// if not side or not area then
72843: LD_VAR 0 1
72847: NOT
72848: PUSH
72849: LD_VAR 0 2
72853: NOT
72854: OR
72855: IFFALSE 72859
// exit ;
72857: GO 72978
// tmp := AreaToList ( area , 0 ) ;
72859: LD_ADDR_VAR 0 5
72863: PUSH
72864: LD_VAR 0 2
72868: PPUSH
72869: LD_INT 0
72871: PPUSH
72872: CALL_OW 517
72876: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72877: LD_ADDR_VAR 0 4
72881: PUSH
72882: DOUBLE
72883: LD_INT 1
72885: DEC
72886: ST_TO_ADDR
72887: LD_VAR 0 5
72891: PUSH
72892: LD_INT 1
72894: ARRAY
72895: PUSH
72896: FOR_TO
72897: IFFALSE 72976
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72899: LD_VAR 0 5
72903: PUSH
72904: LD_INT 1
72906: ARRAY
72907: PUSH
72908: LD_VAR 0 4
72912: ARRAY
72913: PPUSH
72914: LD_VAR 0 5
72918: PUSH
72919: LD_INT 2
72921: ARRAY
72922: PUSH
72923: LD_VAR 0 4
72927: ARRAY
72928: PPUSH
72929: CALL_OW 351
72933: IFFALSE 72974
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72935: LD_VAR 0 5
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: LD_VAR 0 4
72948: ARRAY
72949: PPUSH
72950: LD_VAR 0 5
72954: PUSH
72955: LD_INT 2
72957: ARRAY
72958: PUSH
72959: LD_VAR 0 4
72963: ARRAY
72964: PPUSH
72965: LD_VAR 0 1
72969: PPUSH
72970: CALL_OW 244
// end ;
72974: GO 72896
72976: POP
72977: POP
// end ; end_of_file
72978: LD_VAR 0 3
72982: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72983: LD_VAR 0 1
72987: PUSH
72988: LD_INT 200
72990: DOUBLE
72991: GREATEREQUAL
72992: IFFALSE 73000
72994: LD_INT 299
72996: DOUBLE
72997: LESSEQUAL
72998: IFTRUE 73002
73000: GO 73034
73002: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73003: LD_VAR 0 1
73007: PPUSH
73008: LD_VAR 0 2
73012: PPUSH
73013: LD_VAR 0 3
73017: PPUSH
73018: LD_VAR 0 4
73022: PPUSH
73023: LD_VAR 0 5
73027: PPUSH
73028: CALL 9875 0 5
73032: GO 73111
73034: LD_INT 300
73036: DOUBLE
73037: GREATEREQUAL
73038: IFFALSE 73046
73040: LD_INT 399
73042: DOUBLE
73043: LESSEQUAL
73044: IFTRUE 73048
73046: GO 73110
73048: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73049: LD_VAR 0 1
73053: PPUSH
73054: LD_VAR 0 2
73058: PPUSH
73059: LD_VAR 0 3
73063: PPUSH
73064: LD_VAR 0 4
73068: PPUSH
73069: LD_VAR 0 5
73073: PPUSH
73074: LD_VAR 0 6
73078: PPUSH
73079: LD_VAR 0 7
73083: PPUSH
73084: LD_VAR 0 8
73088: PPUSH
73089: LD_VAR 0 9
73093: PPUSH
73094: LD_VAR 0 10
73098: PPUSH
73099: LD_VAR 0 11
73103: PPUSH
73104: CALL 26913 0 11
73108: GO 73111
73110: POP
// end ;
73111: PPOPN 11
73113: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73114: LD_VAR 0 1
73118: PPUSH
73119: LD_VAR 0 2
73123: PPUSH
73124: LD_VAR 0 3
73128: PPUSH
73129: LD_VAR 0 4
73133: PPUSH
73134: LD_VAR 0 5
73138: PPUSH
73139: CALL 9611 0 5
// end ; end_of_file
73143: PPOPN 5
73145: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73146: LD_VAR 0 1
73150: PPUSH
73151: LD_VAR 0 2
73155: PPUSH
73156: LD_VAR 0 3
73160: PPUSH
73161: LD_VAR 0 4
73165: PPUSH
73166: LD_VAR 0 5
73170: PPUSH
73171: LD_VAR 0 6
73175: PPUSH
73176: CALL 14565 0 6
// end ;
73180: PPOPN 6
73182: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73183: LD_INT 0
73185: PPUSH
// begin if not units then
73186: LD_VAR 0 1
73190: NOT
73191: IFFALSE 73195
// exit ;
73193: GO 73195
// end ;
73195: PPOPN 7
73197: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73198: CALL 14452 0 0
// end ;
73202: PPOPN 1
73204: END
