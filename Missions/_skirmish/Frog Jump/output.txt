// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// debug := false ;
   8: LD_ADDR_EXP 6
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// InitVariables ;
  16: CALL 94 0 0
// InitArtifactsPos ;
  20: CALL 7145 0 0
// PrepareAnimals ( 6 , 1 , 1 , cratesArea ) ;
  24: LD_INT 6
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 1
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: CALL 6932 0 4
// PrepareAlliance ;
  40: CALL 339 0 0
// PrepareLegion ;
  44: CALL 1941 0 0
// if debug then
  48: LD_EXP 6
  52: IFFALSE 76
// begin alliance_attack_active := true ;
  54: LD_ADDR_EXP 9
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// Difficulty := 2 ;
  62: LD_ADDR_OWVAR 67
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// DebugMode ;
  70: CALL 9311 0 0
// end else
  74: GO 89
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  76: LD_ADDR_OWVAR 67
  80: PUSH
  81: LD_INT 0
  83: PPUSH
  84: CALL_OW 426
  88: ST_TO_ADDR
// Action ;
  89: CALL 5742 0 0
// end ;
  93: END
// export Bagins , Davidov , Vervecken ; export player_start_res_sib_bomb , player_start_res_artifact , debug , legion_attacks_active , legion_attack_strenght , alliance_attack_active , alliance_used_artifact_1 , alliance_used_artifact_2 , player_used_sib_bomb , artifacts_mode , artifacts_type , artifacts_pos , artifact_destroyed , sib_rocket_range , player_artifact_loaded , player_artifact_number , player_artifact_icon , player_artifact_icon_2 , player_artifact_researched , player_artifact_active_distance , player_artifact_icon_type , player_artifact_icon_res , player_artifact_time_refresh , player_artifact_time_res , player_side , player_artifact_ready , player_artifact_selected_unit , alliance_attack_strength ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// player_start_res_sib_bomb := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// player_start_res_artifact := false ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// legion_attacks_active := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// legion_attack_strenght := 3 ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 3
 128: ST_TO_ADDR
// alliance_attack_strength := 0 ;
 129: LD_ADDR_EXP 31
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// alliance_attack_active := false ;
 137: LD_ADDR_EXP 9
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// alliance_used_artifact_1 := false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// alliance_used_artifact_2 := false ;
 153: LD_ADDR_EXP 11
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// artifacts_mode := [ 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: ST_TO_ADDR
// artifacts_type := [ 2 , 3 , 5 ] ;
 180: LD_ADDR_EXP 14
 184: PUSH
 185: LD_INT 2
 187: PUSH
 188: LD_INT 3
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: ST_TO_ADDR
// artifacts_pos := [ ] ;
 199: LD_ADDR_EXP 15
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// artifact_destroyed := false ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// sib_rocket_range := 25 ;
 214: LD_ADDR_EXP 17
 218: PUSH
 219: LD_INT 25
 221: ST_TO_ADDR
// player_used_sib_bomb := false ;
 222: LD_ADDR_EXP 12
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// player_artifact_loaded := true ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// player_artifact_number := 6 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
// player_artifact_icon := art_use_human ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 10
 253: ST_TO_ADDR
// player_artifact_icon_2 := art_use_teleport ;
 254: LD_ADDR_EXP 21
 258: PUSH
 259: LD_INT 6
 261: ST_TO_ADDR
// player_artifact_researched := false ;
 262: LD_ADDR_EXP 22
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// player_artifact_active_distance := 5 ;
 270: LD_ADDR_EXP 23
 274: PUSH
 275: LD_INT 5
 277: ST_TO_ADDR
// player_artifact_time_refresh := 8500 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 8500
 285: ST_TO_ADDR
// player_artifact_icon_type := art_place ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: ST_TO_ADDR
// player_artifact_icon_res := art_exp_left ;
 294: LD_ADDR_EXP 25
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// player_artifact_time_res := 300 ;
 302: LD_ADDR_EXP 27
 306: PUSH
 307: LD_INT 300
 309: ST_TO_ADDR
// player_artifact_ready := false ;
 310: LD_ADDR_EXP 29
 314: PUSH
 315: LD_INT 0
 317: ST_TO_ADDR
// player_artifact_selected_unit := 0 ;
 318: LD_ADDR_EXP 30
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// player_side := 6 ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: LD_INT 6
 333: ST_TO_ADDR
// end ; end_of_file
 334: LD_VAR 0 1
 338: RET
// export al_force ; export function PrepareAlliance ; var i , un , skill ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// uc_side := 7 ;
 345: LD_ADDR_OWVAR 20
 349: PUSH
 350: LD_INT 7
 352: ST_TO_ADDR
// uc_nation := nation_american ;
 353: LD_ADDR_OWVAR 21
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
 361: LD_ADDR_VAR 0 4
 365: PUSH
 366: LD_INT 7
 368: PUSH
 369: LD_INT 8
 371: PUSH
 372: LD_INT 9
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// al_force := [ ] ;
 386: LD_ADDR_EXP 32
 390: PUSH
 391: EMPTY
 392: ST_TO_ADDR
// SetResourceType ( GetBase ( al_dep ) , mat_cans , 999999 ) ;
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: LD_INT 999999
 406: PPUSH
 407: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_oil , 10000 ) ;
 411: LD_INT 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 10000
 424: PPUSH
 425: CALL_OW 277
// SetResourceType ( GetBase ( al_dep ) , mat_siberit , 10000 ) ;
 429: LD_INT 1
 431: PPUSH
 432: CALL_OW 274
 436: PPUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 10000
 442: PPUSH
 443: CALL_OW 277
// hc_gallery := sandal ;
 447: LD_ADDR_OWVAR 33
 451: PUSH
 452: LD_STRING sandal
 454: ST_TO_ADDR
// hc_face_number := 13 ;
 455: LD_ADDR_OWVAR 34
 459: PUSH
 460: LD_INT 13
 462: ST_TO_ADDR
// hc_class := 1 ;
 463: LD_ADDR_OWVAR 28
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_importance := 100 ;
 471: LD_ADDR_OWVAR 32
 475: PUSH
 476: LD_INT 100
 478: ST_TO_ADDR
// hc_name := Matthew Bagins ;
 479: LD_ADDR_OWVAR 26
 483: PUSH
 484: LD_STRING Matthew Bagins
 486: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 8 , 5 ] ;
 487: LD_ADDR_OWVAR 31
 491: PUSH
 492: LD_INT 10
 494: PUSH
 495: LD_INT 5
 497: PUSH
 498: LD_INT 8
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: ST_TO_ADDR
// hc_attr := [ 11 , 12 ] ;
 510: LD_ADDR_OWVAR 29
 514: PUSH
 515: LD_INT 11
 517: PUSH
 518: LD_INT 12
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// Bagins := CreateHuman ;
 525: LD_ADDR_EXP 1
 529: PUSH
 530: CALL_OW 44
 534: ST_TO_ADDR
// PlaceHumanInUnit ( Bagins , al_dep ) ;
 535: LD_EXP 1
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL_OW 52
// InitHc_All ( ) ;
 547: CALL_OW 584
// for i = 1 to 6 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 6
 563: PUSH
 564: FOR_TO
 565: IFFALSE 626
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 567: LD_ADDR_OWVAR 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: LD_INT 3
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 1
 584: PPUSH
 585: LD_INT 2
 587: PPUSH
 588: CALL_OW 12
 592: ARRAY
 593: ST_TO_ADDR
// PrepareHuman ( false , class_engineer , skill ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: LD_VAR 0 4
 604: PPUSH
 605: CALL_OW 380
// PlaceUnitArea ( CreateHuman , al_base , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 564
 626: POP
 627: POP
// for i = 1 to 6 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 6
 640: PUSH
 641: FOR_TO
 642: IFFALSE 700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 3
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 1
 661: PPUSH
 662: LD_INT 2
 664: PPUSH
 665: CALL_OW 12
 669: ARRAY
 670: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 671: LD_INT 0
 673: PPUSH
 674: LD_INT 3
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_ru ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_INT 6
 693: PPUSH
 694: CALL_OW 52
// end ;
 698: GO 641
 700: POP
 701: POP
// for i = 1 to 6 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 6
 714: PUSH
 715: FOR_TO
 716: IFFALSE 774
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 718: LD_ADDR_OWVAR 21
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 12
 743: ARRAY
 744: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
 745: LD_INT 0
 747: PPUSH
 748: LD_INT 3
 750: PPUSH
 751: LD_VAR 0 4
 755: PPUSH
 756: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_fac_us ) ;
 760: CALL_OW 44
 764: PPUSH
 765: LD_INT 11
 767: PPUSH
 768: CALL_OW 52
// end ;
 772: GO 715
 774: POP
 775: POP
// for i = 1 to 6 do
 776: LD_ADDR_VAR 0 2
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_INT 6
 788: PUSH
 789: FOR_TO
 790: IFFALSE 867
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 792: LD_ADDR_OWVAR 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 12
 817: ARRAY
 818: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , skill ) ;
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 4
 824: PPUSH
 825: LD_VAR 0 4
 829: PPUSH
 830: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , [ al_lab_us , al_lab_ru ] [ Rand ( 1 , 2 ) ] ) ;
 834: CALL_OW 44
 838: PPUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 5
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: CALL_OW 12
 859: ARRAY
 860: PPUSH
 861: CALL_OW 52
// end ;
 865: GO 789
 867: POP
 868: POP
// for i = 1 to 6 do
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 6
 881: PUSH
 882: FOR_TO
 883: IFFALSE 990
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
 885: LD_ADDR_OWVAR 21
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: CALL_OW 12
 910: ARRAY
 911: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker ] [ Rand ( 1 , 2 ) ] , skill ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 5
 917: PUSH
 918: LD_INT 9
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: CALL_OW 12
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 4
 941: PPUSH
 942: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
 946: CALL_OW 44
 950: PPUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 7
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 5
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: PUSH
 980: LD_INT 1
 982: ARRAY
 983: PPUSH
 984: CALL_OW 52
// end ;
 988: GO 882
 990: POP
 991: POP
// uc_nation := 3 ;
 992: LD_ADDR_OWVAR 21
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , skill ) ;
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 5
1005: PPUSH
1006: LD_VAR 0 4
1010: PPUSH
1011: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , al_bun ) ;
1015: CALL_OW 44
1019: PPUSH
1020: LD_INT 50
1022: PPUSH
1023: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) do
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 7
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 33
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1126
// if GetNation ( i ) = 1 then
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 248
1073: PUSH
1074: LD_INT 1
1076: EQUAL
1077: IFFALSE 1093
// AddComPlaceWeapon ( i , us_double_laser ) else
1079: LD_VAR 0 2
1083: PPUSH
1084: LD_INT 10
1086: PPUSH
1087: CALL_OW 208
1091: GO 1124
// AddComPlaceWeapon ( i , [ ru_rocket , ru_rocket_launcher ] [ Rand ( 1 , 2 ) ] ) ;
1093: LD_VAR 0 2
1097: PPUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 45
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 1
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 12
1118: ARRAY
1119: PPUSH
1120: CALL_OW 208
1124: GO 1061
1126: POP
1127: POP
// end ;
1128: LD_VAR 0 1
1132: RET
// export function ConstructAlVeh ( nation ) ; var i , un , fac , chassis , engine , control , weapon ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
// if nation = 2 then
1143: LD_VAR 0 1
1147: PUSH
1148: LD_INT 2
1150: EQUAL
1151: IFFALSE 1155
// exit ;
1153: GO 1374
// if nation = 1 then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_INT 1
1162: EQUAL
1163: IFFALSE 1181
// if al_fac_us then
1165: LD_INT 11
1167: IFFALSE 1179
// fac := al_fac_us else
1169: LD_ADDR_VAR 0 5
1173: PUSH
1174: LD_INT 11
1176: ST_TO_ADDR
1177: GO 1181
// exit ;
1179: GO 1374
// if nation = 3 then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_INT 3
1188: EQUAL
1189: IFFALSE 1207
// if al_fac_ru then
1191: LD_INT 6
1193: IFFALSE 1205
// fac := al_fac_ru else
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 6
1202: ST_TO_ADDR
1203: GO 1207
// exit ;
1205: GO 1374
// if nation = 1 then
1207: LD_VAR 0 1
1211: PUSH
1212: LD_INT 1
1214: EQUAL
1215: IFFALSE 1227
// chassis := us_morphling else
1217: LD_ADDR_VAR 0 6
1221: PUSH
1222: LD_INT 5
1224: ST_TO_ADDR
1225: GO 1235
// chassis := ru_heavy_tracked ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_INT 24
1234: ST_TO_ADDR
// if nation = 1 then
1235: LD_VAR 0 1
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1255
// engine := engine_combustion else
1245: LD_ADDR_VAR 0 7
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
1253: GO 1263
// engine := engine_siberite ;
1255: LD_ADDR_VAR 0 7
1259: PUSH
1260: LD_INT 3
1262: ST_TO_ADDR
// control := control_computer ;
1263: LD_ADDR_VAR 0 8
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// if nation = 3 then
1271: LD_VAR 0 1
1275: PUSH
1276: LD_INT 3
1278: EQUAL
1279: IFFALSE 1302
// weapon := [ ru_rocket , ru_rocket_launcher , ru_gatling_gun ] else
1281: LD_ADDR_VAR 0 9
1285: PUSH
1286: LD_INT 47
1288: PUSH
1289: LD_INT 45
1291: PUSH
1292: LD_INT 43
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
1300: GO 1321
// weapon := [ us_heavy_gun , us_laser , us_double_laser ] ;
1302: LD_ADDR_VAR 0 9
1306: PUSH
1307: LD_INT 6
1309: PUSH
1310: LD_INT 9
1312: PUSH
1313: LD_INT 10
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , weapon ) ] ;
1321: LD_ADDR_VAR 0 9
1325: PUSH
1326: LD_VAR 0 9
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 9
1338: PPUSH
1339: CALL_OW 12
1343: ARRAY
1344: ST_TO_ADDR
// AddComConstruct ( fac , chassis , engine , control , weapon ) ;
1345: LD_VAR 0 5
1349: PPUSH
1350: LD_VAR 0 6
1354: PPUSH
1355: LD_VAR 0 7
1359: PPUSH
1360: LD_VAR 0 8
1364: PPUSH
1365: LD_VAR 0 9
1369: PPUSH
1370: CALL_OW 185
// end ;
1374: LD_VAR 0 2
1378: RET
// every 0 0$01 trigger FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) do var tmp , i , xy ;
1379: LD_INT 4
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 7
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: LD_INT 21
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1561
1419: GO 1421
1421: DISABLE
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
// begin enable ;
1427: ENABLE
// tmp := FilterUnitsInArea ( al_teleport_enter , [ [ f_side , 7 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1428: LD_ADDR_VAR 0 1
1432: PUSH
1433: LD_INT 4
1435: PPUSH
1436: LD_INT 22
1438: PUSH
1439: LD_INT 7
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 3
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: PPUSH
1467: CALL_OW 70
1471: ST_TO_ADDR
// xy := [ 225 , 16 ] ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: LD_INT 225
1479: PUSH
1480: LD_INT 16
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// if Prob ( 50 ) then
1487: LD_INT 50
1489: PPUSH
1490: CALL_OW 13
1494: IFFALSE 1511
// xy := [ 170 , 13 ] ;
1496: LD_ADDR_VAR 0 3
1500: PUSH
1501: LD_INT 170
1503: PUSH
1504: LD_INT 13
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: ST_TO_ADDR
// for i in tmp do
1511: LD_ADDR_VAR 0 2
1515: PUSH
1516: LD_VAR 0 1
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1559
// TeleportUnit ( i , xy [ 1 ] , xy [ 2 ] , 12 , true ) ;
1524: LD_VAR 0 2
1528: PPUSH
1529: LD_VAR 0 3
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: LD_VAR 0 3
1542: PUSH
1543: LD_INT 2
1545: ARRAY
1546: PPUSH
1547: LD_INT 12
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: CALL_OW 483
1557: GO 1521
1559: POP
1560: POP
// end ;
1561: PPOPN 3
1563: END
// every 6 6$00 + 3 3$00 trigger FilterAllUnits ( [ f_side , 7 ] ) and alliance_attack_active do var i ;
1564: LD_INT 22
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: IFFALSE 1586
1580: PUSH
1581: LD_EXP 9
1585: AND
1586: IFFALSE 1733
1588: GO 1590
1590: DISABLE
1591: LD_INT 0
1593: PPUSH
// begin enable ;
1594: ENABLE
// alliance_attack_strength := alliance_attack_strength + 1 ;
1595: LD_ADDR_EXP 31
1599: PUSH
1600: LD_EXP 31
1604: PUSH
1605: LD_INT 1
1607: PLUS
1608: ST_TO_ADDR
// for i = 1 to ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength do
1609: LD_ADDR_VAR 0 1
1613: PUSH
1614: DOUBLE
1615: LD_INT 1
1617: DEC
1618: ST_TO_ADDR
1619: LD_INT 4
1621: PUSH
1622: LD_INT 5
1624: PUSH
1625: LD_INT 5
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_OWVAR 67
1637: ARRAY
1638: PUSH
1639: LD_EXP 31
1643: PLUS
1644: PUSH
1645: FOR_TO
1646: IFFALSE 1676
// ConstructAlVeh ( [ 1 , 3 ] [ rand ( 1 , 2 ) ] ) ;
1648: LD_INT 1
1650: PUSH
1651: LD_INT 3
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 1
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: ARRAY
1669: PPUSH
1670: CALL 1133 0 1
1674: GO 1645
1676: POP
1677: POP
// repeat wait ( 0 0$01 ) ;
1678: LD_INT 35
1680: PPUSH
1681: CALL_OW 67
// until al_force >= ( [ 4 , 5 , 5 ] [ Difficulty ] ) + alliance_attack_strength ;
1685: LD_EXP 32
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 5
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_OWVAR 67
1708: ARRAY
1709: PUSH
1710: LD_EXP 31
1714: PLUS
1715: GREATEREQUAL
1716: IFFALSE 1678
// AddComMoveXY ( al_force , 143 , 178 ) ;
1718: LD_EXP 32
1722: PPUSH
1723: LD_INT 143
1725: PPUSH
1726: LD_INT 178
1728: PPUSH
1729: CALL_OW 171
// end ;
1733: PPOPN 1
1735: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do var i ;
1736: LD_INT 6
1738: PPUSH
1739: LD_INT 22
1741: PUSH
1742: LD_INT 7
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PPUSH
1749: CALL_OW 70
1753: IFFALSE 1833
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
// begin enable ;
1761: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ f_side , 7 ] ) do
1762: LD_ADDR_VAR 0 1
1766: PUSH
1767: LD_INT 6
1769: PPUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 7
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PPUSH
1780: CALL_OW 70
1784: PUSH
1785: FOR_IN
1786: IFFALSE 1831
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: LD_INT 81
1795: PUSH
1796: LD_VAR 0 1
1800: PPUSH
1801: CALL_OW 255
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PPUSH
1810: CALL_OW 69
1814: PPUSH
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 74
1824: PPUSH
1825: CALL_OW 115
1829: GO 1785
1831: POP
1832: POP
// end ;
1833: PPOPN 1
1835: END
// every 7 7$30 trigger alliance_attack_active do var reload_time ;
1836: LD_EXP 9
1840: IFFALSE 1938
1842: GO 1844
1844: DISABLE
1845: LD_INT 0
1847: PPUSH
// begin reload_time := [ 9 9$00 , 8 8$40 , 7 7$50 ] [ Difficulty ] ;
1848: LD_ADDR_VAR 0 1
1852: PUSH
1853: LD_INT 18900
1855: PUSH
1856: LD_INT 18200
1858: PUSH
1859: LD_INT 16450
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: LD_OWVAR 67
1871: ARRAY
1872: ST_TO_ADDR
// repeat ActiveArtifact1 ( ) ;
1873: CALL 8646 0 0
// wait ( reload_time / 2 ) ;
1877: LD_VAR 0 1
1881: PUSH
1882: LD_INT 2
1884: DIVREAL
1885: PPUSH
1886: CALL_OW 67
// ActiveArtifact2 ( ) ;
1890: CALL 9091 0 0
// wait ( reload_time / 2 ) ;
1894: LD_VAR 0 1
1898: PUSH
1899: LD_INT 2
1901: DIVREAL
1902: PPUSH
1903: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) ;
1907: LD_INT 22
1909: PUSH
1910: LD_INT 7
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 8
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PPUSH
1931: CALL_OW 69
1935: NOT
1936: IFFALSE 1873
// end ; end_of_file
1938: PPOPN 1
1940: END
// export function PrepareLegion ; var i , un , skill , dep , fac ; begin
1941: LD_INT 0
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
// uc_side := 8 ;
1949: LD_ADDR_OWVAR 20
1953: PUSH
1954: LD_INT 8
1956: ST_TO_ADDR
// uc_nation := 2 ;
1957: LD_ADDR_OWVAR 21
1961: PUSH
1962: LD_INT 2
1964: ST_TO_ADDR
// skill := [ 7 , 8 , 9 ] [ Difficulty ] ;
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: LD_INT 7
1972: PUSH
1973: LD_INT 8
1975: PUSH
1976: LD_INT 9
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_OWVAR 67
1988: ARRAY
1989: ST_TO_ADDR
// dep := ar_base ;
1990: LD_ADDR_VAR 0 5
1994: PUSH
1995: LD_INT 57
1997: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
1998: LD_ADDR_VAR 0 6
2002: PUSH
2003: LD_INT 22
2005: PUSH
2006: LD_INT 8
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 30
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PPUSH
2027: CALL_OW 69
2031: PUSH
2032: LD_INT 1
2034: ARRAY
2035: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 999999 ) ;
2036: LD_VAR 0 5
2040: PPUSH
2041: CALL_OW 274
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 999999
2051: PPUSH
2052: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
2056: LD_VAR 0 5
2060: PPUSH
2061: CALL_OW 274
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: LD_INT 10000
2071: PPUSH
2072: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , 10000 ) ;
2076: LD_VAR 0 5
2080: PPUSH
2081: CALL_OW 274
2085: PPUSH
2086: LD_INT 3
2088: PPUSH
2089: LD_INT 10000
2091: PPUSH
2092: CALL_OW 277
// TeleportExit ( legion_telep , 224 , 5 ) ;
2096: LD_INT 68
2098: PPUSH
2099: LD_INT 224
2101: PPUSH
2102: LD_INT 5
2104: PPUSH
2105: CALL_OW 243
// PrepareHuman ( sex_male , 1 , 6 ) ;
2109: LD_INT 1
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 6
2117: PPUSH
2118: CALL_OW 380
// hc_name := Nicolas Vervecken ;
2122: LD_ADDR_OWVAR 26
2126: PUSH
2127: LD_STRING Nicolas Vervecken
2129: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2130: LD_ADDR_OWVAR 33
2134: PUSH
2135: LD_STRING SecondCharsGal
2137: ST_TO_ADDR
// hc_face_number := 3 ;
2138: LD_ADDR_OWVAR 34
2142: PUSH
2143: LD_INT 3
2145: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2146: LD_ADDR_OWVAR 29
2150: PUSH
2151: LD_INT 11
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: ST_TO_ADDR
// Vervecken := CreateHuman ;
2161: LD_ADDR_EXP 3
2165: PUSH
2166: CALL_OW 44
2170: ST_TO_ADDR
// PlaceHumanInUnit ( Vervecken , dep ) ;
2171: LD_EXP 3
2175: PPUSH
2176: LD_VAR 0 5
2180: PPUSH
2181: CALL_OW 52
// InitHc_All ( ) ;
2185: CALL_OW 584
// for i = 1 to 4 do
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: DOUBLE
2195: LD_INT 1
2197: DEC
2198: ST_TO_ADDR
2199: LD_INT 4
2201: PUSH
2202: FOR_TO
2203: IFFALSE 2264
// begin PrepareHuman ( false , class_bazooker , skill ) ;
2205: LD_INT 0
2207: PPUSH
2208: LD_INT 9
2210: PPUSH
2211: LD_VAR 0 4
2215: PPUSH
2216: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2220: CALL_OW 44
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_INT 8
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 30
2237: PUSH
2238: LD_INT 5
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: LD_INT 1
2256: ARRAY
2257: PPUSH
2258: CALL_OW 52
// end ;
2262: GO 2202
2264: POP
2265: POP
// for i = 1 to 2 do
2266: LD_ADDR_VAR 0 2
2270: PUSH
2271: DOUBLE
2272: LD_INT 1
2274: DEC
2275: ST_TO_ADDR
2276: LD_INT 2
2278: PUSH
2279: FOR_TO
2280: IFFALSE 2341
// begin PrepareHuman ( false , 4 , skill ) ;
2282: LD_INT 0
2284: PPUSH
2285: LD_INT 4
2287: PPUSH
2288: LD_VAR 0 4
2292: PPUSH
2293: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
2297: CALL_OW 44
2301: PPUSH
2302: LD_INT 22
2304: PUSH
2305: LD_INT 8
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 30
2314: PUSH
2315: LD_INT 8
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PPUSH
2326: CALL_OW 69
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: CALL_OW 52
// end ;
2339: GO 2279
2341: POP
2342: POP
// for i = 1 to 6 do
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: DOUBLE
2349: LD_INT 1
2351: DEC
2352: ST_TO_ADDR
2353: LD_INT 6
2355: PUSH
2356: FOR_TO
2357: IFFALSE 2394
// begin PrepareHuman ( false , 3 , skill + 1 ) ;
2359: LD_INT 0
2361: PPUSH
2362: LD_INT 3
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: PLUS
2373: PPUSH
2374: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac ) ;
2378: CALL_OW 44
2382: PPUSH
2383: LD_VAR 0 6
2387: PPUSH
2388: CALL_OW 52
// end ;
2392: GO 2356
2394: POP
2395: POP
// uc_nation := 0 ;
2396: LD_ADDR_OWVAR 21
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) do
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: FOR_IN
2439: IFFALSE 2476
// begin PrepareHuman ( false , class_apeman_soldier , skill + 1 ) ;
2441: LD_INT 0
2443: PPUSH
2444: LD_INT 15
2446: PPUSH
2447: LD_VAR 0 4
2451: PUSH
2452: LD_INT 1
2454: PLUS
2455: PPUSH
2456: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
2460: CALL_OW 44
2464: PPUSH
2465: LD_VAR 0 2
2469: PPUSH
2470: CALL_OW 52
// end ;
2474: GO 2438
2476: POP
2477: POP
// PrepareHuman ( false , class_sniper , 10 ) ;
2478: LD_INT 0
2480: PPUSH
2481: LD_INT 5
2483: PPUSH
2484: LD_INT 10
2486: PPUSH
2487: CALL_OW 380
// un := CreateHuman ;
2491: LD_ADDR_VAR 0 3
2495: PUSH
2496: CALL_OW 44
2500: ST_TO_ADDR
// PlaceUnitXY ( un , 175 , 128 , false ) ;
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 175
2508: PPUSH
2509: LD_INT 128
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL_OW 48
// ComEnterUnit ( un , ar_ibun ) ;
2519: LD_VAR 0 3
2523: PPUSH
2524: LD_INT 115
2526: PPUSH
2527: CALL_OW 120
// PrepareHuman ( false , class_soldier , 10 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 1
2536: PPUSH
2537: LD_INT 10
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 240 , 128 ) ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 240
2561: PPUSH
2562: LD_INT 128
2564: PPUSH
2565: CALL_OW 428
2569: PPUSH
2570: CALL_OW 52
// un := CreateHuman ;
2574: LD_ADDR_VAR 0 3
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2584: LD_VAR 0 3
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 260 , 147 ) ) ;
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 260
2603: PPUSH
2604: LD_INT 147
2606: PPUSH
2607: CALL_OW 428
2611: PPUSH
2612: CALL_OW 52
// for i = 1 to 2 do
2616: LD_ADDR_VAR 0 2
2620: PUSH
2621: DOUBLE
2622: LD_INT 1
2624: DEC
2625: ST_TO_ADDR
2626: LD_INT 2
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2655
// AddComConstruct ( fac , ar_half_tracked , engine_solar , control_manual , ar_control_tower ) ;
2632: LD_VAR 0 6
2636: PPUSH
2637: LD_INT 14
2639: PPUSH
2640: LD_INT 2
2642: PPUSH
2643: LD_INT 1
2645: PPUSH
2646: LD_INT 31
2648: PPUSH
2649: CALL_OW 185
2653: GO 2629
2655: POP
2656: POP
// end ;
2657: LD_VAR 0 1
2661: RET
// export function PrepareHovercraft ( num ) ; var i ; begin
2662: LD_INT 0
2664: PPUSH
2665: PPUSH
// for i = 1 to num do
2666: LD_ADDR_VAR 0 3
2670: PUSH
2671: DOUBLE
2672: LD_INT 1
2674: DEC
2675: ST_TO_ADDR
2676: LD_VAR 0 1
2680: PUSH
2681: FOR_TO
2682: IFFALSE 2754
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] , ar_hovercraft , engine_combustion , control_remote , [ ar_light_gun , ar_double_machine_gun ] [ rand ( 1 , 2 ) ] ) ;
2684: LD_INT 22
2686: PUSH
2687: LD_INT 8
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 30
2696: PUSH
2697: LD_INT 3
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: LD_INT 1
2715: ARRAY
2716: PPUSH
2717: LD_INT 11
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_INT 23
2728: PUSH
2729: LD_INT 24
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 2
2741: PPUSH
2742: CALL_OW 12
2746: ARRAY
2747: PPUSH
2748: CALL_OW 185
2752: GO 2681
2754: POP
2755: POP
// end ;
2756: LD_VAR 0 2
2760: RET
// export function AddKamikaze ( ) ; var i , un ; begin
2761: LD_INT 0
2763: PPUSH
2764: PPUSH
2765: PPUSH
// uc_side := 8 ;
2766: LD_ADDR_OWVAR 20
2770: PUSH
2771: LD_INT 8
2773: ST_TO_ADDR
// uc_nation := 0 ;
2774: LD_ADDR_OWVAR 21
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// hc_class := 17 ;
2782: LD_ADDR_OWVAR 28
2786: PUSH
2787: LD_INT 17
2789: ST_TO_ADDR
// hc_gallery :=  ;
2790: LD_ADDR_OWVAR 33
2794: PUSH
2795: LD_STRING 
2797: ST_TO_ADDR
// hc_name :=  ;
2798: LD_ADDR_OWVAR 26
2802: PUSH
2803: LD_STRING 
2805: ST_TO_ADDR
// hc_importance := 0 ;
2806: LD_ADDR_OWVAR 32
2810: PUSH
2811: LD_INT 0
2813: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 10
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// if ar_base then
2837: LD_INT 57
2839: IFFALSE 2884
// begin un := CreateHuman ;
2841: LD_ADDR_VAR 0 3
2845: PUSH
2846: CALL_OW 44
2850: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_base ) ;
2851: LD_VAR 0 3
2855: PPUSH
2856: LD_INT 57
2858: PPUSH
2859: CALL_OW 52
// ComExitBuilding ( un ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: CALL_OW 122
// AddComEnterUnit ( un , legion_telep ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_INT 68
2879: PPUSH
2880: CALL_OW 180
// end ; end ;
2884: LD_VAR 0 1
2888: RET
// export legion_force , l_allow_attack ; export function PrepareAttack ( n1 , n2 ) ; var i ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
// legion_force := [ ] ;
2893: LD_ADDR_EXP 33
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// l_allow_attack := false ;
2900: LD_ADDR_EXP 34
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// PrepareHovercraft ( n1 ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: CALL 2662 0 1
// repeat wait ( 0 0$01 ) ;
2917: LD_INT 35
2919: PPUSH
2920: CALL_OW 67
// until legion_force >= n1 ;
2924: LD_EXP 33
2928: PUSH
2929: LD_VAR 0 1
2933: GREATEREQUAL
2934: IFFALSE 2917
// l_allow_attack := true ;
2936: LD_ADDR_EXP 34
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// for i = 1 to n2 do
2944: LD_ADDR_VAR 0 4
2948: PUSH
2949: DOUBLE
2950: LD_INT 1
2952: DEC
2953: ST_TO_ADDR
2954: LD_VAR 0 2
2958: PUSH
2959: FOR_TO
2960: IFFALSE 2968
// begin AddKamikaze ( ) ;
2962: CALL 2761 0 0
// end ;
2966: GO 2959
2968: POP
2969: POP
// end ;
2970: LD_VAR 0 3
2974: RET
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do var i ;
2975: LD_INT 22
2977: PUSH
2978: LD_INT 8
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 50
2987: PUSH
2988: EMPTY
2989: LIST
2990: PUSH
2991: LD_INT 33
2993: PUSH
2994: LD_INT 2
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 3
3003: PUSH
3004: LD_INT 61
3006: PUSH
3007: EMPTY
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 69
3024: IFFALSE 3104
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
// begin enable ;
3032: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) do
3033: LD_ADDR_VAR 0 1
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 8
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 50
3050: PUSH
3051: EMPTY
3052: LIST
3053: PUSH
3054: LD_INT 33
3056: PUSH
3057: LD_INT 2
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: LD_INT 61
3069: PUSH
3070: EMPTY
3071: LIST
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: PPUSH
3083: CALL_OW 69
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3102
// Connect ( i ) ;
3091: LD_VAR 0 1
3095: PPUSH
3096: CALL 40619 0 1
3100: GO 3088
3102: POP
3103: POP
// end ;
3104: PPOPN 1
3106: END
// every 5 5$00 trigger legion_attacks_active do
3107: LD_EXP 7
3111: IFFALSE 3163
3113: GO 3115
3115: DISABLE
// begin enable ;
3116: ENABLE
// Wait ( [ 2 2$30 , 1 1$00 , 0 0$30 ] [ Difficulty ] ) ;
3117: LD_INT 5250
3119: PUSH
3120: LD_INT 2100
3122: PUSH
3123: LD_INT 1050
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: PPUSH
3137: CALL_OW 67
// PrepareAttack ( ( legion_attack_strenght - 2 + Difficulty ) , 2 ) ;
3141: LD_EXP 8
3145: PUSH
3146: LD_INT 2
3148: MINUS
3149: PUSH
3150: LD_OWVAR 67
3154: PLUS
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL 2889 0 2
// end ;
3163: END
// every 0 0$1 trigger l_allow_attack and UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) do var path , units ;
3164: LD_EXP 34
3168: IFFALSE 3211
3170: PUSH
3171: LD_EXP 33
3175: PPUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 60
3181: PUSH
3182: EMPTY
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 61
3191: PUSH
3192: EMPTY
3193: LIST
3194: PUSH
3195: LD_INT 50
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 72
3210: AND
3211: IFFALSE 3342
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
// begin enable ;
3220: ENABLE
// units := UnitFilter ( legion_force , [ [ f_not , [ f_hastask ] ] , [ f_linked ] , [ f_ok ] ] ) ;
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_EXP 33
3230: PPUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 60
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 61
3246: PUSH
3247: EMPTY
3248: LIST
3249: PUSH
3250: LD_INT 50
3252: PUSH
3253: EMPTY
3254: LIST
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: LIST
3260: PPUSH
3261: CALL_OW 72
3265: ST_TO_ADDR
// path := [ [ 150 , 93 ] , [ 232 , 88 ] , [ 209 , 50 ] , [ 208 , 29 ] , [ 191 , 17 ] ] ;
3266: LD_ADDR_VAR 0 1
3270: PUSH
3271: LD_INT 150
3273: PUSH
3274: LD_INT 93
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 232
3283: PUSH
3284: LD_INT 88
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 209
3293: PUSH
3294: LD_INT 50
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 208
3303: PUSH
3304: LD_INT 29
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 191
3313: PUSH
3314: LD_INT 17
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: ST_TO_ADDR
// AgressiveMove ( units , path ) ;
3328: LD_VAR 0 2
3332: PPUSH
3333: LD_VAR 0 1
3337: PPUSH
3338: CALL 73083 0 2
// end ;
3342: PPOPN 2
3344: END
// every 0 0$01 trigger FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do var i ;
3345: LD_INT 6
3347: PPUSH
3348: LD_INT 22
3350: PUSH
3351: LD_INT 8
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 25
3360: PUSH
3361: LD_INT 17
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PPUSH
3372: CALL_OW 70
3376: IFFALSE 3463
3378: GO 3380
3380: DISABLE
3381: LD_INT 0
3383: PPUSH
// begin enable ;
3384: ENABLE
// for i in FilterUnitsInArea ( islandArea , [ [ f_side , 8 ] , [ f_class , 17 ] ] ) do
3385: LD_ADDR_VAR 0 1
3389: PUSH
3390: LD_INT 6
3392: PPUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 8
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 17
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 70
3421: PUSH
3422: FOR_IN
3423: IFFALSE 3461
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , i ) ) ;
3425: LD_VAR 0 1
3429: PPUSH
3430: LD_INT 22
3432: PUSH
3433: LD_INT 6
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: PPUSH
3445: LD_VAR 0 1
3449: PPUSH
3450: CALL_OW 74
3454: PPUSH
3455: CALL_OW 115
3459: GO 3422
3461: POP
3462: POP
// end ;
3463: PPOPN 1
3465: END
// every 6 6$00 trigger legion_telep do var k , xy , i ;
3466: LD_INT 68
3468: IFFALSE 3699
3470: GO 3472
3472: DISABLE
3473: LD_INT 0
3475: PPUSH
3476: PPUSH
3477: PPUSH
// begin enable ;
3478: ENABLE
// xy := [ [ 224 , 5 ] , [ 160 , 4 ] , [ 228 , 56 ] , [ 271 , 87 ] ] ;
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: LD_INT 224
3486: PUSH
3487: LD_INT 5
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 160
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 228
3506: PUSH
3507: LD_INT 56
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 271
3516: PUSH
3517: LD_INT 87
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: ST_TO_ADDR
// for i = 1 to 3 do
3530: LD_ADDR_VAR 0 3
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 3
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3560
// EraseResourceArea ( telArea , i ) ;
3546: LD_INT 7
3548: PPUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: CALL_OW 286
3558: GO 3543
3560: POP
3561: POP
// for i = xy downto 1 do
3562: LD_ADDR_VAR 0 3
3566: PUSH
3567: DOUBLE
3568: LD_VAR 0 2
3572: INC
3573: ST_TO_ADDR
3574: LD_INT 1
3576: PUSH
3577: FOR_DOWNTO
3578: IFFALSE 3660
// begin k := rand ( 1 , xy ) ;
3580: LD_ADDR_VAR 0 1
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_VAR 0 2
3592: PPUSH
3593: CALL_OW 12
3597: ST_TO_ADDR
// if HexInfo ( xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) then
3598: LD_VAR 0 2
3602: PUSH
3603: LD_VAR 0 1
3607: ARRAY
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: PPUSH
3613: LD_VAR 0 2
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PUSH
3624: LD_INT 2
3626: ARRAY
3627: PPUSH
3628: CALL_OW 428
3632: IFFALSE 3656
// xy := Delete ( xy , k ) else
3634: LD_ADDR_VAR 0 2
3638: PUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 1
3648: PPUSH
3649: CALL_OW 3
3653: ST_TO_ADDR
3654: GO 3658
// break ;
3656: GO 3660
// end ;
3658: GO 3577
3660: POP
3661: POP
// TeleportExit ( legion_telep , xy [ k ] [ 1 ] , xy [ k ] [ 2 ] ) ;
3662: LD_INT 68
3664: PPUSH
3665: LD_VAR 0 2
3669: PUSH
3670: LD_VAR 0 1
3674: ARRAY
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: LD_VAR 0 2
3684: PUSH
3685: LD_VAR 0 1
3689: ARRAY
3690: PUSH
3691: LD_INT 2
3693: ARRAY
3694: PPUSH
3695: CALL_OW 243
// end ; end_of_file
3699: PPOPN 3
3701: END
// export function PrepareRussian ; var i , skill , un , tmp , amount , k ; begin
3702: LD_INT 0
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// uc_side := 6 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 6
3718: ST_TO_ADDR
// uc_nation := nation_russian ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 3
3726: ST_TO_ADDR
// SetArtifactRes ( 6 , true ) ;
3727: LD_INT 6
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: CALL_OW 467
// amount := [ [ 9 , 4 ] , [ 8 , 3 ] , [ 8 , 2 ] ] [ Difficulty ] ;
3737: LD_ADDR_VAR 0 6
3741: PUSH
3742: LD_INT 9
3744: PUSH
3745: LD_INT 4
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 8
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 8
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_OWVAR 67
3781: ARRAY
3782: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 8
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_OWVAR 67
3806: ARRAY
3807: ST_TO_ADDR
// tmp := [ ] ;
3808: LD_ADDR_VAR 0 5
3812: PUSH
3813: EMPTY
3814: ST_TO_ADDR
// Davidov := NewCharacter ( Davidov ) ;
3815: LD_ADDR_EXP 2
3819: PUSH
3820: LD_STRING Davidov
3822: PPUSH
3823: CALL_OW 25
3827: ST_TO_ADDR
// SetSkill ( Davidov , 1 , 7 ) ;
3828: LD_EXP 2
3832: PPUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 7
3838: PPUSH
3839: CALL_OW 237
// SetSkill ( Davidov , 2 , 8 ) ;
3843: LD_EXP 2
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: LD_INT 8
3853: PPUSH
3854: CALL_OW 237
// SetSkill ( Davidov , 3 , 6 ) ;
3858: LD_EXP 2
3862: PPUSH
3863: LD_INT 3
3865: PPUSH
3866: LD_INT 6
3868: PPUSH
3869: CALL_OW 237
// SetSkill ( Davidov , 4 , 10 ) ;
3873: LD_EXP 2
3877: PPUSH
3878: LD_INT 4
3880: PPUSH
3881: LD_INT 10
3883: PPUSH
3884: CALL_OW 237
// SetClass ( Davidov , 4 ) ;
3888: LD_EXP 2
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: CALL_OW 336
// InitHc_All ( ) ;
3900: CALL_OW 584
// while amount [ 1 ] do
3904: LD_VAR 0 6
3908: PUSH
3909: LD_INT 1
3911: ARRAY
3912: IFFALSE 4249
// begin Wait ( 1 ) ;
3914: LD_INT 1
3916: PPUSH
3917: CALL_OW 67
// k := rand ( 1 , 4 ) ;
3921: LD_ADDR_VAR 0 7
3925: PUSH
3926: LD_INT 1
3928: PPUSH
3929: LD_INT 4
3931: PPUSH
3932: CALL_OW 12
3936: ST_TO_ADDR
// if amount [ 2 ] and tmp then
3937: LD_VAR 0 6
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: IFFALSE 3953
3947: PUSH
3948: LD_VAR 0 5
3952: AND
3953: IFFALSE 4108
// begin if k in [ 1 , 2 ] then
3955: LD_VAR 0 7
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: IN
3970: IFFALSE 3980
// k := 3 ;
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_INT 3
3979: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] ;
3980: LD_ADDR_OWVAR 37
3984: PUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 24
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 1
3997: PPUSH
3998: LD_INT 2
4000: PPUSH
4001: CALL_OW 12
4005: ARRAY
4006: ST_TO_ADDR
// vc_engine := engine_siberite ;
4007: LD_ADDR_OWVAR 39
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// vc_control := control_manual ;
4015: LD_ADDR_OWVAR 38
4019: PUSH
4020: LD_INT 1
4022: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
4023: LD_ADDR_OWVAR 40
4027: PUSH
4028: LD_INT 44
4030: PUSH
4031: LD_INT 45
4033: PUSH
4034: LD_INT 43
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , CreateVehicle ) ;
4054: LD_ADDR_VAR 0 5
4058: PUSH
4059: LD_VAR 0 5
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: CALL_OW 45
4071: PPUSH
4072: CALL_OW 2
4076: ST_TO_ADDR
// amount := Replace ( amount , 2 , amount [ 2 ] - 1 ) ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_VAR 0 6
4086: PPUSH
4087: LD_INT 2
4089: PPUSH
4090: LD_VAR 0 6
4094: PUSH
4095: LD_INT 2
4097: ARRAY
4098: PUSH
4099: LD_INT 1
4101: MINUS
4102: PPUSH
4103: CALL_OW 1
4107: ST_TO_ADDR
// end ; if not tmp then
4108: LD_VAR 0 5
4112: NOT
4113: IFFALSE 4123
// k := 2 ;
4115: LD_ADDR_VAR 0 7
4119: PUSH
4120: LD_INT 2
4122: ST_TO_ADDR
// if amount [ 2 ] = 0 and k = 3 then
4123: LD_VAR 0 6
4127: PUSH
4128: LD_INT 2
4130: ARRAY
4131: PUSH
4132: LD_INT 0
4134: EQUAL
4135: IFFALSE 4147
4137: PUSH
4138: LD_VAR 0 7
4142: PUSH
4143: LD_INT 3
4145: EQUAL
4146: AND
4147: IFFALSE 4176
// k := [ class_bazooker , class_scientistic ] [ rand ( 1 , 2 ) ] ;
4149: LD_ADDR_VAR 0 7
4153: PUSH
4154: LD_INT 9
4156: PUSH
4157: LD_INT 4
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 12
4174: ARRAY
4175: ST_TO_ADDR
// PrepareHuman ( false , k , skill ) ;
4176: LD_INT 0
4178: PPUSH
4179: LD_VAR 0 7
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 380
// tmp := Insert ( tmp , 1 , CreateHuman ) ;
4193: LD_ADDR_VAR 0 5
4197: PUSH
4198: LD_VAR 0 5
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL_OW 44
4210: PPUSH
4211: CALL_OW 2
4215: ST_TO_ADDR
// amount := Replace ( amount , 1 , amount [ 1 ] - 1 ) ;
4216: LD_ADDR_VAR 0 6
4220: PUSH
4221: LD_VAR 0 6
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: LD_VAR 0 6
4233: PUSH
4234: LD_INT 1
4236: ARRAY
4237: PUSH
4238: LD_INT 1
4240: MINUS
4241: PPUSH
4242: CALL_OW 1
4246: ST_TO_ADDR
// end ;
4247: GO 3904
// tmp := Insert ( tmp , tmp + 1 , Davidov ) ;
4249: LD_ADDR_VAR 0 5
4253: PUSH
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_VAR 0 5
4263: PUSH
4264: LD_INT 1
4266: PLUS
4267: PPUSH
4268: LD_EXP 2
4272: PPUSH
4273: CALL_OW 2
4277: ST_TO_ADDR
// for i = tmp downto 1 do
4278: LD_ADDR_VAR 0 2
4282: PUSH
4283: DOUBLE
4284: LD_VAR 0 5
4288: INC
4289: ST_TO_ADDR
4290: LD_INT 1
4292: PUSH
4293: FOR_DOWNTO
4294: IFFALSE 4456
// begin if GetType ( tmp [ i ] ) = unit_vehicle then
4296: LD_VAR 0 5
4300: PUSH
4301: LD_VAR 0 2
4305: ARRAY
4306: PPUSH
4307: CALL_OW 247
4311: PUSH
4312: LD_INT 2
4314: EQUAL
4315: IFFALSE 4405
// begin SetDir ( tmp [ i ] , 3 ) ;
4317: LD_VAR 0 5
4321: PUSH
4322: LD_VAR 0 2
4326: ARRAY
4327: PPUSH
4328: LD_INT 3
4330: PPUSH
4331: CALL_OW 233
// PlaceUnitXY ( tmp [ i ] , 193 , 3 , false ) ;
4335: LD_VAR 0 5
4339: PUSH
4340: LD_VAR 0 2
4344: ARRAY
4345: PPUSH
4346: LD_INT 193
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 0
4354: PPUSH
4355: CALL_OW 48
// PlaceHumanInUnit ( tmp [ i - 1 ] , tmp [ i ] ) ;
4359: LD_VAR 0 5
4363: PUSH
4364: LD_VAR 0 2
4368: PUSH
4369: LD_INT 1
4371: MINUS
4372: ARRAY
4373: PPUSH
4374: LD_VAR 0 5
4378: PUSH
4379: LD_VAR 0 2
4383: ARRAY
4384: PPUSH
4385: CALL_OW 52
// i := i - 1 ;
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_VAR 0 2
4398: PUSH
4399: LD_INT 1
4401: MINUS
4402: ST_TO_ADDR
// end else
4403: GO 4426
// PlaceUnitArea ( tmp [ i ] , start_area , false ) ;
4405: LD_VAR 0 5
4409: PUSH
4410: LD_VAR 0 2
4414: ARRAY
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
// ComMoveXY ( tmp [ i ] , 197 , 22 ) ;
4426: LD_VAR 0 5
4430: PUSH
4431: LD_VAR 0 2
4435: ARRAY
4436: PPUSH
4437: LD_INT 197
4439: PPUSH
4440: LD_INT 22
4442: PPUSH
4443: CALL_OW 111
// Wait ( 0 0$02 ) ;
4447: LD_INT 70
4449: PPUSH
4450: CALL_OW 67
// end ;
4454: GO 4293
4456: POP
4457: POP
// Wait ( 0 0$02 ) ;
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 67
// vc_chassis := ru_medium_tracked ;
4465: LD_ADDR_OWVAR 37
4469: PUSH
4470: LD_INT 22
4472: ST_TO_ADDR
// vc_engine := engine_siberite ;
4473: LD_ADDR_OWVAR 39
4477: PUSH
4478: LD_INT 3
4480: ST_TO_ADDR
// vc_control := control_computer ;
4481: LD_ADDR_OWVAR 38
4485: PUSH
4486: LD_INT 3
4488: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
4489: LD_ADDR_OWVAR 40
4493: PUSH
4494: LD_INT 51
4496: ST_TO_ADDR
// tmp := CreateVehicle ;
4497: LD_ADDR_VAR 0 5
4501: PUSH
4502: CALL_OW 45
4506: ST_TO_ADDR
// SetDir ( tmp , 3 ) ;
4507: LD_VAR 0 5
4511: PPUSH
4512: LD_INT 3
4514: PPUSH
4515: CALL_OW 233
// PlaceUnitXY ( tmp , 193 , 3 , false ) ;
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_INT 193
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: CALL_OW 48
// SetCargo ( tmp , mat_artifact , 60 ) ;
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_INT 4
4544: PPUSH
4545: LD_INT 60
4547: PPUSH
4548: CALL_OW 290
// ComMoveXY ( tmp , 197 , 22 ) ;
4552: LD_VAR 0 5
4556: PPUSH
4557: LD_INT 197
4559: PPUSH
4560: LD_INT 22
4562: PPUSH
4563: CALL_OW 111
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// on VehicleConstructed ( veh , fac ) do var side ;
4572: LD_INT 0
4574: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
4575: LD_VAR 0 1
4579: PPUSH
4580: LD_VAR 0 2
4584: PPUSH
4585: CALL 9615 0 2
// side := GetSide ( fac ) ;
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_VAR 0 2
4598: PPUSH
4599: CALL_OW 255
4603: ST_TO_ADDR
// case side of 7 :
4604: LD_VAR 0 3
4608: PUSH
4609: LD_INT 7
4611: DOUBLE
4612: EQUAL
4613: IFTRUE 4617
4615: GO 4664
4617: POP
// begin al_force := Replace ( al_force , al_force + 1 , veh ) ;
4618: LD_ADDR_EXP 32
4622: PUSH
4623: LD_EXP 32
4627: PPUSH
4628: LD_EXP 32
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: PPUSH
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL_OW 1
4646: ST_TO_ADDR
// AddComMoveXY ( veh , 112 , 175 ) ;
4647: LD_VAR 0 1
4651: PPUSH
4652: LD_INT 112
4654: PPUSH
4655: LD_INT 175
4657: PPUSH
4658: CALL_OW 171
// end ; 8 :
4662: GO 4750
4664: LD_INT 8
4666: DOUBLE
4667: EQUAL
4668: IFTRUE 4672
4670: GO 4749
4672: POP
// begin if GetWeapon ( veh ) = ar_control_tower then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 264
4682: PUSH
4683: LD_INT 31
4685: EQUAL
4686: IFFALSE 4703
// ComMoveXY ( veh , 145 , 66 ) ;
4688: LD_VAR 0 1
4692: PPUSH
4693: LD_INT 145
4695: PPUSH
4696: LD_INT 66
4698: PPUSH
4699: CALL_OW 111
// if GetChassis ( veh ) = ar_hovercraft then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 265
4712: PUSH
4713: LD_INT 11
4715: EQUAL
4716: IFFALSE 4747
// legion_force := Replace ( legion_force , legion_force + 1 , veh ) ;
4718: LD_ADDR_EXP 33
4722: PUSH
4723: LD_EXP 33
4727: PPUSH
4728: LD_EXP 33
4732: PUSH
4733: LD_INT 1
4735: PLUS
4736: PPUSH
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 1
4746: ST_TO_ADDR
// end ; end ;
4747: GO 4750
4749: POP
// end ;
4750: PPOPN 3
4752: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL 9557 0 1
// if un in legion_force then
4762: LD_VAR 0 1
4766: PUSH
4767: LD_EXP 33
4771: IN
4772: IFFALSE 4790
// legion_force := legion_force diff un ;
4774: LD_ADDR_EXP 33
4778: PUSH
4779: LD_EXP 33
4783: PUSH
4784: LD_VAR 0 1
4788: DIFF
4789: ST_TO_ADDR
// if un in al_force then
4790: LD_VAR 0 1
4794: PUSH
4795: LD_EXP 32
4799: IN
4800: IFFALSE 4818
// al_force := al_force diff un ;
4802: LD_ADDR_EXP 32
4806: PUSH
4807: LD_EXP 32
4811: PUSH
4812: LD_VAR 0 1
4816: DIFF
4817: ST_TO_ADDR
// end ;
4818: PPOPN 1
4820: END
// on UnitTeleported ( b , un ) do begin if b = legion_telep and GetClass ( un ) = 17 then
4821: LD_VAR 0 1
4825: PUSH
4826: LD_INT 68
4828: EQUAL
4829: IFFALSE 4846
4831: PUSH
4832: LD_VAR 0 2
4836: PPUSH
4837: CALL_OW 257
4841: PUSH
4842: LD_INT 17
4844: EQUAL
4845: AND
4846: IFFALSE 4889
// begin Wait ( 0 0$01 ) ;
4848: LD_INT 35
4850: PPUSH
4851: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 6 ] ) , un ) ) ;
4855: LD_VAR 0 2
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: PPUSH
4875: LD_VAR 0 2
4879: PPUSH
4880: CALL_OW 74
4884: PPUSH
4885: CALL_OW 115
// end ; end ;
4889: PPOPN 2
4891: END
// on UnitGoesToRed ( un ) do begin if un in al_force then
4892: LD_VAR 0 1
4896: PUSH
4897: LD_EXP 32
4901: IN
4902: IFFALSE 4920
// al_force := al_force diff un ;
4904: LD_ADDR_EXP 32
4908: PUSH
4909: LD_EXP 32
4913: PUSH
4914: LD_VAR 0 1
4918: DIFF
4919: ST_TO_ADDR
// if GetControl ( un ) = control_remote then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 263
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: IFFALSE 4944
// ComUnlink ( un ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: CALL_OW 136
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] ] ) then
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 22
4951: PUSH
4952: LD_INT 8
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 21
4961: PUSH
4962: LD_INT 2
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: IN
4978: IFFALSE 4996
// begin wait ( 0 0$2 ) ;
4980: LD_INT 70
4982: PPUSH
4983: CALL_OW 67
// ComAutodestruct ( un ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL 65624 0 1
// end ; end ;
4996: PPOPN 1
4998: END
// on ResearchStarted ( tech , lab ) do begin if tech = tech_sibfiss then
4999: LD_VAR 0 1
5003: PUSH
5004: LD_INT 25
5006: EQUAL
5007: IFFALSE 5017
// player_start_res_sib_bomb := true ;
5009: LD_ADDR_EXP 4
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// if tech = tech_artifact then
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 24
5024: EQUAL
5025: IFFALSE 5035
// player_start_res_artifact := true ;
5027: LD_ADDR_EXP 5
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// end ;
5035: PPOPN 2
5037: END
// on ArtifactUnloaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5038: LD_VAR 0 2
5042: PUSH
5043: LD_INT 6
5045: EQUAL
5046: IFFALSE 5056
// player_artifact_loaded := false ;
5048: LD_ADDR_EXP 18
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// end ;
5056: PPOPN 2
5058: END
// on ArtifactLoaded ( cargo , artifact_num ) do begin if artifact_num = 6 then
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 6
5066: EQUAL
5067: IFFALSE 5077
// player_artifact_loaded := true ;
5069: LD_ADDR_EXP 18
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// end ;
5077: PPOPN 2
5079: END
// on SiberiteRocketExploded ( rocket , x , y ) do var i ;
5080: LD_INT 0
5082: PPUSH
// begin player_used_sib_bomb := true ;
5083: LD_ADDR_EXP 12
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// for i = 1 to 3 do
5091: LD_ADDR_VAR 0 4
5095: PUSH
5096: DOUBLE
5097: LD_INT 1
5099: DEC
5100: ST_TO_ADDR
5101: LD_INT 3
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5178
// begin if GetDistXY ( x , y , artifacts_pos [ i ] [ 1 ] , artifacts_pos [ i ] [ 2 ] ) <= sib_rocket_range then
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_VAR 0 3
5116: PPUSH
5117: LD_EXP 15
5121: PUSH
5122: LD_VAR 0 4
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_EXP 15
5136: PUSH
5137: LD_VAR 0 4
5141: ARRAY
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 298
5151: PUSH
5152: LD_EXP 17
5156: LESSEQUAL
5157: IFFALSE 5176
// begin wait ( 0 0$5 ) ;
5159: LD_INT 175
5161: PPUSH
5162: CALL_OW 67
// artifact_destroyed := true ;
5166: LD_ADDR_EXP 16
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// break ;
5174: GO 5178
// end ; end ;
5176: GO 5104
5178: POP
5179: POP
// end ;
5180: PPOPN 4
5182: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: CALL 9591 0 3
// end ;
5202: PPOPN 3
5204: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL 9599 0 1
// end ; end_of_file
5214: PPOPN 1
5216: END
// export function CreateArtifact ( type , x , y ) ; begin
5217: LD_INT 0
5219: PPUSH
// CreateResourcesXY ( mat_artifact , type , x , y , false ) ;
5220: LD_INT 4
5222: PPUSH
5223: LD_VAR 0 1
5227: PPUSH
5228: LD_VAR 0 2
5232: PPUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 0
5240: PPUSH
5241: CALL_OW 58
// end ;
5245: LD_VAR 0 4
5249: RET
// export function GetSibResources ( side ) ; var i , deps ; begin
5250: LD_INT 0
5252: PPUSH
5253: PPUSH
5254: PPUSH
// result := 0 ;
5255: LD_ADDR_VAR 0 2
5259: PUSH
5260: LD_INT 0
5262: ST_TO_ADDR
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5263: LD_ADDR_VAR 0 4
5267: PUSH
5268: LD_INT 22
5270: PUSH
5271: LD_VAR 0 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 2
5282: PUSH
5283: LD_INT 30
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PPUSH
5312: CALL_OW 69
5316: ST_TO_ADDR
// if deps then
5317: LD_VAR 0 4
5321: IFFALSE 5369
// for i in deps do
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: LD_VAR 0 4
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5367
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5336: LD_ADDR_VAR 0 2
5340: PUSH
5341: LD_VAR 0 2
5345: PUSH
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 274
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: CALL_OW 275
5363: PLUS
5364: ST_TO_ADDR
5365: GO 5333
5367: POP
5368: POP
// end ;
5369: LD_VAR 0 2
5373: RET
// export function SetSibResources ( side , val ) ; var i , deps , s ; begin
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
// if val <= 0 then
5380: LD_VAR 0 2
5384: PUSH
5385: LD_INT 0
5387: LESSEQUAL
5388: IFFALSE 5392
// exit ;
5390: GO 5584
// deps := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_VAR 0 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 30
5414: PUSH
5415: LD_INT 0
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 30
5424: PUSH
5425: LD_INT 1
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: ST_TO_ADDR
// if deps then
5446: LD_VAR 0 5
5450: IFFALSE 5584
// for i in deps do
5452: LD_ADDR_VAR 0 4
5456: PUSH
5457: LD_VAR 0 5
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5582
// begin s := GetResourceType ( GetBase ( i ) , mat_siberit ) ;
5465: LD_ADDR_VAR 0 6
5469: PUSH
5470: LD_VAR 0 4
5474: PPUSH
5475: CALL_OW 274
5479: PPUSH
5480: LD_INT 3
5482: PPUSH
5483: CALL_OW 275
5487: ST_TO_ADDR
// if val < s then
5488: LD_VAR 0 2
5492: PUSH
5493: LD_VAR 0 6
5497: LESS
5498: IFFALSE 5544
// begin s := s - val ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_VAR 0 6
5509: PUSH
5510: LD_VAR 0 2
5514: MINUS
5515: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , s ) ;
5516: LD_VAR 0 4
5520: PPUSH
5521: CALL_OW 274
5525: PPUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_VAR 0 6
5533: PPUSH
5534: CALL_OW 277
// exit ;
5538: POP
5539: POP
5540: GO 5584
// end else
5542: GO 5580
// begin val := val - s ;
5544: LD_ADDR_VAR 0 2
5548: PUSH
5549: LD_VAR 0 2
5553: PUSH
5554: LD_VAR 0 6
5558: MINUS
5559: ST_TO_ADDR
// SetResourceType ( GetBase ( i ) , mat_siberit , 0 ) ;
5560: LD_VAR 0 4
5564: PPUSH
5565: CALL_OW 274
5569: PPUSH
5570: LD_INT 3
5572: PPUSH
5573: LD_INT 0
5575: PPUSH
5576: CALL_OW 277
// end ; end ;
5580: GO 5462
5582: POP
5583: POP
// end ;
5584: LD_VAR 0 3
5588: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
5589: LD_VAR 0 1
5593: PUSH
5594: LD_EXP 35
5598: IN
5599: NOT
5600: IFFALSE 5631
// unreachableList := Replace ( unreachableList , unreachableList + 1 , unit ) ;
5602: LD_ADDR_EXP 35
5606: PUSH
5607: LD_EXP 35
5611: PPUSH
5612: LD_EXP 35
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: PPUSH
5621: LD_VAR 0 1
5625: PPUSH
5626: CALL_OW 1
5630: ST_TO_ADDR
// end ;
5631: PPOPN 1
5633: END
// export function DestinationReachable ( unit , x , y ) ; begin
5634: LD_INT 0
5636: PPUSH
// if ValidHex ( x , y ) then
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: CALL_OW 488
5651: IFFALSE 5677
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_VAR 0 2
5662: PPUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: CALL_OW 428
5672: PPUSH
5673: CALL_OW 115
// wait ( 0 0$1 ) ;
5677: LD_INT 35
5679: PPUSH
5680: CALL_OW 67
// if unit in unreachableList then
5684: LD_VAR 0 1
5688: PUSH
5689: LD_EXP 35
5693: IN
5694: IFFALSE 5706
// result := false else
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
5704: GO 5714
// result := true ;
5706: LD_ADDR_VAR 0 4
5710: PUSH
5711: LD_INT 1
5713: ST_TO_ADDR
// if not result then
5714: LD_VAR 0 4
5718: NOT
5719: IFFALSE 5737
// unreachableList := unreachableList diff unit ;
5721: LD_ADDR_EXP 35
5725: PUSH
5726: LD_EXP 35
5730: PUSH
5731: LD_VAR 0 1
5735: DIFF
5736: ST_TO_ADDR
// end ; end_of_file
5737: LD_VAR 0 4
5741: RET
// export function Action ; var dial ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
// CenterNowOnXY ( 192 , 1 ) ;
5746: LD_INT 192
5748: PPUSH
5749: LD_INT 1
5751: PPUSH
5752: CALL_OW 86
// InGameOn ;
5756: CALL_OW 8
// PrepareRussian ;
5760: CALL 3702 0 0
// dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
5764: LD_ADDR_VAR 0 2
5768: PUSH
5769: LD_INT 22
5771: PUSH
5772: LD_INT 6
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 25
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 25
5794: PUSH
5795: LD_INT 2
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 25
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: LD_INT 25
5814: PUSH
5815: LD_INT 4
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: PUSH
5838: LD_EXP 2
5842: DIFF
5843: ST_TO_ADDR
// ComMoveXY ( dial [ 1 ] , 202 , 40 ) ;
5844: LD_VAR 0 2
5848: PUSH
5849: LD_INT 1
5851: ARRAY
5852: PPUSH
5853: LD_INT 202
5855: PPUSH
5856: LD_INT 40
5858: PPUSH
5859: CALL_OW 111
// Wait ( 0 0$03 ) ;
5863: LD_INT 105
5865: PPUSH
5866: CALL_OW 67
// Say ( Davidov , DDav-1 ) ;
5870: LD_EXP 2
5874: PPUSH
5875: LD_STRING DDav-1
5877: PPUSH
5878: CALL_OW 88
// ComTurnUnit ( dial [ 1 ] , Davidov ) ;
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PPUSH
5891: LD_EXP 2
5895: PPUSH
5896: CALL_OW 119
// ComTurnUnit ( Davidov , dial [ 1 ] ) ;
5900: LD_EXP 2
5904: PPUSH
5905: LD_VAR 0 2
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: CALL_OW 119
// CenterOnXY ( 202 , 40 ) ;
5918: LD_INT 202
5920: PPUSH
5921: LD_INT 40
5923: PPUSH
5924: CALL_OW 84
// Say ( dial [ 1 ] , DRus-1 ) ;
5928: LD_VAR 0 2
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PPUSH
5937: LD_STRING DRus-1
5939: PPUSH
5940: CALL_OW 88
// Say ( Davidov , DDav-2 ) ;
5944: LD_EXP 2
5948: PPUSH
5949: LD_STRING DDav-2
5951: PPUSH
5952: CALL_OW 88
// Say ( dial [ 1 ] , DRus-2 ) ;
5956: LD_VAR 0 2
5960: PUSH
5961: LD_INT 1
5963: ARRAY
5964: PPUSH
5965: LD_STRING DRus-2
5967: PPUSH
5968: CALL_OW 88
// Say ( Davidov , DDav-3 ) ;
5972: LD_EXP 2
5976: PPUSH
5977: LD_STRING DDav-3
5979: PPUSH
5980: CALL_OW 88
// InGameOff ;
5984: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
5988: LD_INT 10
5990: PPUSH
5991: CALL_OW 67
// ChangeMissionObjectives ( C1 ) ;
5995: LD_STRING C1
5997: PPUSH
5998: CALL_OW 337
// SaveForQuickRestart ;
6002: CALL_OW 22
// end ;
6006: LD_VAR 0 1
6010: RET
// every 0 0$30 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
6011: LD_INT 22
6013: PUSH
6014: LD_INT 6
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: LD_INT 30
6026: PUSH
6027: LD_INT 6
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 7
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 30
6046: PUSH
6047: LD_INT 8
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PPUSH
6064: CALL_OW 69
6068: IFFALSE 6168
6070: GO 6072
6072: DISABLE
// begin Say ( Davidov , DDav-4 ) ;
6073: LD_EXP 2
6077: PPUSH
6078: LD_STRING DDav-4
6080: PPUSH
6081: CALL_OW 88
// Wait ( 0 0$40 ) ;
6085: LD_INT 1400
6087: PPUSH
6088: CALL_OW 67
// DialogueOn ;
6092: CALL_OW 6
// SayRadio ( Vervecken , Dver-Meet-1 ) ;
6096: LD_EXP 3
6100: PPUSH
6101: LD_STRING Dver-Meet-1
6103: PPUSH
6104: CALL_OW 94
// Say ( Davidov , DDav-Meet-1 ) ;
6108: LD_EXP 2
6112: PPUSH
6113: LD_STRING DDav-Meet-1
6115: PPUSH
6116: CALL_OW 88
// SayRadio ( Vervecken , Dver-Meet-2 ) ;
6120: LD_EXP 3
6124: PPUSH
6125: LD_STRING Dver-Meet-2
6127: PPUSH
6128: CALL_OW 94
// DialogueOff ;
6132: CALL_OW 7
// Wait ( [ 9 9$20 , 7 7$20 , 6 6$20 ] [ Difficulty ] ) ;
6136: LD_INT 19600
6138: PUSH
6139: LD_INT 15400
6141: PUSH
6142: LD_INT 13300
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: PUSH
6150: LD_OWVAR 67
6154: ARRAY
6155: PPUSH
6156: CALL_OW 67
// legion_attacks_active := true ;
6160: LD_ADDR_EXP 7
6164: PUSH
6165: LD_INT 1
6167: ST_TO_ADDR
// end ;
6168: END
// every 0 0$02 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) or tick > 10 10$00 do var dial ;
6169: LD_INT 22
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: IFTRUE 6209
6199: PUSH
6200: LD_OWVAR 1
6204: PUSH
6205: LD_INT 21000
6207: GREATER
6208: OR
6209: IFFALSE 6443
6211: GO 6213
6213: DISABLE
6214: LD_INT 0
6216: PPUSH
// begin dial := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Davidov ;
6217: LD_ADDR_VAR 0 1
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_INT 6
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 2
6234: PUSH
6235: LD_INT 25
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 25
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 25
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 25
6267: PUSH
6268: LD_INT 4
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: PUSH
6291: LD_EXP 2
6295: DIFF
6296: ST_TO_ADDR
// Say ( dial [ 1 ] , DRus-3 ) ;
6297: LD_VAR 0 1
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_STRING DRus-3
6308: PPUSH
6309: CALL_OW 88
// Say ( Davidov , DDav-5 ) ;
6313: LD_EXP 2
6317: PPUSH
6318: LD_STRING DDav-5
6320: PPUSH
6321: CALL_OW 88
// Say ( dial [ 1 ] , DRus-4 ) ;
6325: LD_VAR 0 1
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PPUSH
6334: LD_STRING DRus-4
6336: PPUSH
6337: CALL_OW 88
// Say ( Davidov , DDav-6 ) ;
6341: LD_EXP 2
6345: PPUSH
6346: LD_STRING DDav-6
6348: PPUSH
6349: CALL_OW 88
// ChangeMissionObjectives ( C2 ) ;
6353: LD_STRING C2
6355: PPUSH
6356: CALL_OW 337
// Wait ( 5 5$00 ) ;
6360: LD_INT 10500
6362: PPUSH
6363: CALL_OW 67
// DialogueOn ;
6367: CALL_OW 6
// SayRadio ( Bagins , DBag-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING DBag-1
6378: PPUSH
6379: CALL_OW 94
// Say ( Davidov , DDavB-1 ) ;
6383: LD_EXP 2
6387: PPUSH
6388: LD_STRING DDavB-1
6390: PPUSH
6391: CALL_OW 88
// SayRadio ( Bagins , DBag-2 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING DBag-2
6402: PPUSH
6403: CALL_OW 94
// Say ( Davidov , DDavB-2 ) ;
6407: LD_EXP 2
6411: PPUSH
6412: LD_STRING DDavB-2
6414: PPUSH
6415: CALL_OW 88
// SayRadio ( Bagins , DBag-3 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING DBag-3
6426: PPUSH
6427: CALL_OW 94
// DialogueOff ;
6431: CALL_OW 7
// alliance_attack_active := true ;
6435: LD_ADDR_EXP 9
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger alliance_used_artifact_1 do
6446: LD_EXP 10
6450: IFFALSE 6497
6452: GO 6454
6454: DISABLE
// begin DialogueOn ;
6455: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_1 [ 1 ] , alliance_used_artifact_1 [ 2 ] ) ;
6459: LD_EXP 10
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: LD_EXP 10
6472: PUSH
6473: LD_INT 2
6475: ARRAY
6476: PPUSH
6477: CALL_OW 86
// Say ( Davidov , DDav-Artifact1-1 ) ;
6481: LD_EXP 2
6485: PPUSH
6486: LD_STRING DDav-Artifact1-1
6488: PPUSH
6489: CALL_OW 88
// DialogueOff ;
6493: CALL_OW 7
// end ;
6497: END
// every 0 0$1 trigger alliance_used_artifact_2 do
6498: LD_EXP 11
6502: IFFALSE 6549
6504: GO 6506
6506: DISABLE
// begin DialogueOn ;
6507: CALL_OW 6
// CenterNowOnXY ( alliance_used_artifact_2 [ 1 ] , alliance_used_artifact_2 [ 2 ] ) ;
6511: LD_EXP 11
6515: PUSH
6516: LD_INT 1
6518: ARRAY
6519: PPUSH
6520: LD_EXP 11
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PPUSH
6529: CALL_OW 86
// Say ( Davidov , DDav-Artifact2-1 ) ;
6533: LD_EXP 2
6537: PPUSH
6538: LD_STRING DDav-Artifact2-1
6540: PPUSH
6541: CALL_OW 88
// DialogueOff ;
6545: CALL_OW 7
// end ;
6549: END
// every 0 0$01 trigger artifact_destroyed or ( not FindArtifact ( 6 ) and not player_artifact_loaded ) do
6550: LD_EXP 16
6554: IFTRUE 6575
6556: PUSH
6557: LD_INT 6
6559: PPUSH
6560: CALL_OW 469
6564: NOT
6565: IFFALSE 6574
6567: PUSH
6568: LD_EXP 18
6572: NOT
6573: AND
6574: OR
6575: IFFALSE 6587
6577: GO 6579
6579: DISABLE
// YouLost ( artifact_destroyed ) ;
6580: LD_STRING artifact_destroyed
6582: PPUSH
6583: CALL_OW 104
6587: END
// every 0 0$01 trigger IsDead ( Davidov ) do
6588: LD_EXP 2
6592: PPUSH
6593: CALL_OW 301
6597: IFFALSE 6609
6599: GO 6601
6601: DISABLE
// YouLost ( dead ) ;
6602: LD_STRING dead
6604: PPUSH
6605: CALL_OW 104
6609: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 do
6610: LD_INT 22
6612: PUSH
6613: LD_INT 7
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 21
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: PUSH
6639: LD_INT 0
6641: EQUAL
6642: IFFALSE 6776
6644: GO 6646
6646: DISABLE
// begin if tick < [ 120 120$00 , 100 100$00 , 90 90$00 ] [ Difficulty ] then
6647: LD_OWVAR 1
6651: PUSH
6652: LD_INT 252000
6654: PUSH
6655: LD_INT 210000
6657: PUSH
6658: LD_INT 189000
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_OWVAR 67
6670: ARRAY
6671: LESS
6672: IFFALSE 6686
// AddMedal ( med1 , 1 ) else
6674: LD_STRING med1
6676: PPUSH
6677: LD_INT 1
6679: PPUSH
6680: CALL_OW 101
6684: GO 6697
// AddMedal ( med1 , - 1 ) ;
6686: LD_STRING med1
6688: PPUSH
6689: LD_INT 1
6691: NEG
6692: PPUSH
6693: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) then
6697: LD_INT 22
6699: PUSH
6700: LD_INT 8
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: IFFALSE 6726
// AddMedal ( med2 , - 1 ) else
6713: LD_STRING med2
6715: PPUSH
6716: LD_INT 1
6718: NEG
6719: PPUSH
6720: CALL_OW 101
6724: GO 6736
// AddMedal ( med2 , 1 ) ;
6726: LD_STRING med2
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 101
// if player_used_sib_bomb then
6736: LD_EXP 12
6740: IFFALSE 6755
// AddMedal ( med3 , - 1 ) else
6742: LD_STRING med3
6744: PPUSH
6745: LD_INT 1
6747: NEG
6748: PPUSH
6749: CALL_OW 101
6753: GO 6765
// AddMedal ( med3 , 1 ) ;
6755: LD_STRING med3
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 101
// GiveMedals ( MAIN ) ;
6765: LD_STRING MAIN
6767: PPUSH
6768: CALL_OW 102
// YouWin ;
6772: CALL_OW 103
// end ; end_of_file
6776: END
// every 0 0$22 + 0 0$2 do
6777: GO 6779
6779: DISABLE
// begin enable ;
6780: ENABLE
// CreateCratesArea ( Rand ( 4 , 5 ) , cratesArea , true ) ;
6781: LD_INT 4
6783: PPUSH
6784: LD_INT 5
6786: PPUSH
6787: CALL_OW 12
6791: PPUSH
6792: LD_INT 3
6794: PPUSH
6795: LD_INT 1
6797: PPUSH
6798: CALL_OW 55
// if tick >= 4 4$00 then
6802: LD_OWVAR 1
6806: PUSH
6807: LD_INT 8400
6809: GREATEREQUAL
6810: IFFALSE 6817
// begin disable ;
6812: DISABLE
// CratesSpawn ( ) ;
6813: CALL 6818 0 0
// end ; end ;
6817: END
// function CratesSpawn ( ) ; var i , amount , cr ; begin
6818: LD_INT 0
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
// amount := [ 30000 , 20000 , 10000 ] [ Difficulty ] ;
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_INT 30000
6831: PUSH
6832: LD_INT 20000
6834: PUSH
6835: LD_INT 10000
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_OWVAR 67
6847: ARRAY
6848: ST_TO_ADDR
// while amount > 0 do
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 0
6856: GREATER
6857: IFFALSE 6927
// begin Wait ( rand ( 0 0$30 , 1 1$30 ) ) ;
6859: LD_INT 1050
6861: PPUSH
6862: LD_INT 3150
6864: PPUSH
6865: CALL_OW 12
6869: PPUSH
6870: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
6874: LD_ADDR_VAR 0 4
6878: PUSH
6879: LD_INT 1
6881: PPUSH
6882: LD_INT 5
6884: PPUSH
6885: CALL_OW 12
6889: ST_TO_ADDR
// amount := amount - ( cr * 10 ) ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_VAR 0 3
6899: PUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 10
6907: MUL
6908: MINUS
6909: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
6910: LD_VAR 0 4
6914: PPUSH
6915: LD_INT 3
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: CALL_OW 55
// end ;
6925: GO 6849
// end ; end_of_file
6927: LD_VAR 0 1
6931: RET
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var i ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// InitHc_All ( ) ;
6936: CALL_OW 584
// for i := 1 to num1 do
6940: LD_ADDR_VAR 0 6
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_VAR 0 1
6954: PUSH
6955: FOR_TO
6956: IFFALSE 6984
// begin PrepareApeman ( 5 ) ;
6958: LD_INT 5
6960: PPUSH
6961: CALL 66444 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
6965: CALL_OW 44
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: LD_INT 0
6977: PPUSH
6978: CALL_OW 49
// end ;
6982: GO 6955
6984: POP
6985: POP
// for i := 1 to num2 do
6986: LD_ADDR_VAR 0 6
6990: PUSH
6991: DOUBLE
6992: LD_INT 1
6994: DEC
6995: ST_TO_ADDR
6996: LD_VAR 0 2
7000: PUSH
7001: FOR_TO
7002: IFFALSE 7030
// begin PrepareTiger ( 5 ) ;
7004: LD_INT 5
7006: PPUSH
7007: CALL 66595 0 1
// PlaceUnitArea ( CreateHuman , area , false ) ;
7011: CALL_OW 44
7015: PPUSH
7016: LD_VAR 0 4
7020: PPUSH
7021: LD_INT 0
7023: PPUSH
7024: CALL_OW 49
// end ;
7028: GO 7001
7030: POP
7031: POP
// for i := 1 to num3 do
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: DOUBLE
7038: LD_INT 1
7040: DEC
7041: ST_TO_ADDR
7042: LD_VAR 0 3
7046: PUSH
7047: FOR_TO
7048: IFFALSE 7073
// begin PrepareBird ( ) ;
7050: CALL 66824 0 0
// PlaceUnitArea ( CreateHuman , area , false ) ;
7054: CALL_OW 44
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_INT 0
7066: PPUSH
7067: CALL_OW 49
// end ;
7071: GO 7047
7073: POP
7074: POP
// end ; end_of_file
7075: LD_VAR 0 5
7079: RET
// export function DebugArtifact ; begin
7080: LD_INT 0
7082: PPUSH
// AddToLog ( Artifact is loaded:  & player_artifact_loaded ) ;
7083: LD_STRING Artifact is loaded: 
7085: PUSH
7086: LD_EXP 18
7090: STR
7091: PPUSH
7092: CALL_OW 561
// AddToLog ( Artifact is active:  & player_artifact_ready ) ;
7096: LD_STRING Artifact is active: 
7098: PUSH
7099: LD_EXP 29
7103: STR
7104: PPUSH
7105: CALL_OW 561
// AddToLog ( Artifact is researched:  & player_artifact_researched ) ;
7109: LD_STRING Artifact is researched: 
7111: PUSH
7112: LD_EXP 22
7116: STR
7117: PPUSH
7118: CALL_OW 561
// AddToLog ( Artifact coords  & FindArtifact ( player_artifact_number ) ) ;
7122: LD_STRING Artifact coords 
7124: PUSH
7125: LD_EXP 19
7129: PPUSH
7130: CALL_OW 469
7134: STR
7135: PPUSH
7136: CALL_OW 561
// end ;
7140: LD_VAR 0 1
7144: RET
// export function InitArtifactsPos ( ) ; var i , tmp , possible_pos ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
// possible_pos := [ [ 100 , 185 ] , [ 99 , 175 ] , [ 117 , 191 ] ] ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_INT 100
7158: PUSH
7159: LD_INT 185
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 99
7168: PUSH
7169: LD_INT 175
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 117
7178: PUSH
7179: LD_INT 191
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// for i = 1 to artifacts_type do
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: DOUBLE
7197: LD_INT 1
7199: DEC
7200: ST_TO_ADDR
7201: LD_EXP 14
7205: PUSH
7206: FOR_TO
7207: IFFALSE 7309
// begin tmp := possible_pos [ rand ( 1 , possible_pos ) ] ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_VAR 0 4
7218: PUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_VAR 0 4
7226: PPUSH
7227: CALL_OW 12
7231: ARRAY
7232: ST_TO_ADDR
// possible_pos := possible_pos diff tmp ;
7233: LD_ADDR_VAR 0 4
7237: PUSH
7238: LD_VAR 0 4
7242: PUSH
7243: LD_VAR 0 3
7247: DIFF
7248: ST_TO_ADDR
// artifacts_pos := Insert ( artifacts_pos , i , tmp ) ;
7249: LD_ADDR_EXP 15
7253: PUSH
7254: LD_EXP 15
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: LD_VAR 0 3
7268: PPUSH
7269: CALL_OW 2
7273: ST_TO_ADDR
// CreateArtifact ( artifacts_type [ i ] , tmp [ 1 ] , tmp [ 2 ] ) ;
7274: LD_EXP 14
7278: PUSH
7279: LD_VAR 0 2
7283: ARRAY
7284: PPUSH
7285: LD_VAR 0 3
7289: PUSH
7290: LD_INT 1
7292: ARRAY
7293: PPUSH
7294: LD_VAR 0 3
7298: PUSH
7299: LD_INT 2
7301: ARRAY
7302: PPUSH
7303: CALL 5217 0 3
// end ;
7307: GO 7206
7309: POP
7310: POP
// end ;
7311: LD_VAR 0 1
7315: RET
// export function GetUseCost ( dist ) ; begin
7316: LD_INT 0
7318: PPUSH
// if dist < 30 then
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 30
7326: LESS
7327: IFFALSE 7337
// result := 10 ;
7329: LD_ADDR_VAR 0 2
7333: PUSH
7334: LD_INT 10
7336: ST_TO_ADDR
// if dist >= 30 and dist < 50 then
7337: LD_VAR 0 1
7341: PUSH
7342: LD_INT 30
7344: GREATEREQUAL
7345: IFFALSE 7357
7347: PUSH
7348: LD_VAR 0 1
7352: PUSH
7353: LD_INT 50
7355: LESS
7356: AND
7357: IFFALSE 7367
// result := 35 ;
7359: LD_ADDR_VAR 0 2
7363: PUSH
7364: LD_INT 35
7366: ST_TO_ADDR
// if dist >= 50 and dist < 80 then
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 50
7374: GREATEREQUAL
7375: IFFALSE 7387
7377: PUSH
7378: LD_VAR 0 1
7382: PUSH
7383: LD_INT 80
7385: LESS
7386: AND
7387: IFFALSE 7397
// result := 70 ;
7389: LD_ADDR_VAR 0 2
7393: PUSH
7394: LD_INT 70
7396: ST_TO_ADDR
// if dist >= 80 and dist < 120 then
7397: LD_VAR 0 1
7401: PUSH
7402: LD_INT 80
7404: GREATEREQUAL
7405: IFFALSE 7417
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 120
7415: LESS
7416: AND
7417: IFFALSE 7427
// result := 100 ;
7419: LD_ADDR_VAR 0 2
7423: PUSH
7424: LD_INT 100
7426: ST_TO_ADDR
// if dist >= 120 then
7427: LD_VAR 0 1
7431: PUSH
7432: LD_INT 120
7434: GREATEREQUAL
7435: IFFALSE 7445
// result := 150 ;
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_INT 150
7444: ST_TO_ADDR
// end ;
7445: LD_VAR 0 2
7449: RET
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
7450: LD_VAR 0 1
7454: PPUSH
7455: CALL_OW 255
7459: PUSH
7460: LD_OWVAR 2
7464: EQUAL
7465: IFFALSE 7475
// player_artifact_researched := true ;
7467: LD_ADDR_EXP 22
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// end ;
7475: PPOPN 1
7477: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_artifact_researched and not player_artifact_loaded do var lab , coords ;
7478: LD_INT 22
7480: PUSH
7481: LD_OWVAR 2
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 2
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 30
7505: PUSH
7506: LD_INT 11
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 69
7526: IFFALSE 7534
7528: PUSH
7529: LD_EXP 22
7533: AND
7534: IFFALSE 7543
7536: PUSH
7537: LD_EXP 18
7541: NOT
7542: AND
7543: IFFALSE 7997
7545: GO 7547
7547: DISABLE
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
// begin enable ;
7552: ENABLE
// coords := FindArtifact ( player_artifact_number ) ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_EXP 19
7562: PPUSH
7563: CALL_OW 469
7567: ST_TO_ADDR
// if not coords then
7568: LD_VAR 0 2
7572: NOT
7573: IFFALSE 7577
// exit ;
7575: GO 7997
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
7577: LD_ADDR_VAR 0 1
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_OWVAR 2
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 30
7599: PUSH
7600: LD_INT 8
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 30
7609: PUSH
7610: LD_INT 11
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: PPUSH
7631: LD_VAR 0 2
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 2
7644: PUSH
7645: LD_INT 2
7647: ARRAY
7648: PPUSH
7649: CALL_OW 73
7653: ST_TO_ADDR
// if not lab then
7654: LD_VAR 0 1
7658: NOT
7659: IFFALSE 7676
// begin if debug then
7661: LD_EXP 6
7665: IFFALSE 7674
// AddToLog ( Cannot find lab for artifact! ) ;
7667: LD_STRING Cannot find lab for artifact!
7669: PPUSH
7670: CALL_OW 561
// exit ;
7674: GO 7997
// end ; if not player_artifact_ready then
7676: LD_EXP 29
7680: NOT
7681: IFFALSE 7805
// begin if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7683: LD_VAR 0 1
7687: PPUSH
7688: LD_VAR 0 2
7692: PUSH
7693: LD_INT 1
7695: ARRAY
7696: PPUSH
7697: LD_VAR 0 2
7701: PUSH
7702: LD_INT 2
7704: ARRAY
7705: PPUSH
7706: CALL_OW 297
7710: PUSH
7711: LD_EXP 23
7715: LESS
7716: IFFALSE 7781
// begin if BuildingStatus ( lab ) = bs_idle then
7718: LD_VAR 0 1
7722: PPUSH
7723: CALL_OW 461
7727: PUSH
7728: LD_INT 2
7730: EQUAL
7731: IFFALSE 7757
// SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) else
7733: LD_OWVAR 2
7737: PPUSH
7738: LD_EXP 25
7742: PPUSH
7743: LD_INT 2
7745: PPUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 468
7755: GO 7779
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7757: LD_OWVAR 2
7761: PPUSH
7762: LD_EXP 25
7766: PPUSH
7767: LD_INT 1
7769: PPUSH
7770: LD_VAR 0 1
7774: PPUSH
7775: CALL_OW 468
// end else
7779: GO 7803
// SetArtifactUse ( your_side , player_artifact_icon_res , art_gray , lab ) ;
7781: LD_OWVAR 2
7785: PPUSH
7786: LD_EXP 25
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 468
// end else
7803: GO 7997
// if GetDistUnitXY ( lab , coords [ 1 ] , coords [ 2 ] ) < player_artifact_active_distance then
7805: LD_VAR 0 1
7809: PPUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 2
7823: PUSH
7824: LD_INT 2
7826: ARRAY
7827: PPUSH
7828: CALL_OW 297
7832: PUSH
7833: LD_EXP 23
7837: LESS
7838: IFFALSE 7953
// begin if BuildingStatus ( lab ) = bs_idle then
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 461
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7907
// begin SetArtifactUse ( your_side , player_artifact_icon , art_unit , lab ) ;
7855: LD_OWVAR 2
7859: PPUSH
7860: LD_EXP 20
7864: PPUSH
7865: LD_INT 4
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 468
// if player_artifact_selected_unit then
7877: LD_EXP 30
7881: IFFALSE 7905
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_place , lab ) ;
7883: LD_OWVAR 2
7887: PPUSH
7888: LD_EXP 21
7892: PPUSH
7893: LD_INT 3
7895: PPUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 468
// end else
7905: GO 7951
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7907: LD_OWVAR 2
7911: PPUSH
7912: LD_EXP 20
7916: PPUSH
7917: LD_INT 1
7919: PPUSH
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7929: LD_OWVAR 2
7933: PPUSH
7934: LD_EXP 21
7938: PPUSH
7939: LD_INT 1
7941: PPUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 468
// end ; end else
7951: GO 7997
// begin SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
7953: LD_OWVAR 2
7957: PPUSH
7958: LD_EXP 20
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_gray , lab ) ;
7975: LD_OWVAR 2
7979: PPUSH
7980: LD_EXP 21
7984: PPUSH
7985: LD_INT 1
7987: PPUSH
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL_OW 468
// end ; end ;
7997: PPOPN 2
7999: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var coords , i , lab , side , dist , cost ;
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
8006: PPUSH
8007: PPUSH
// begin coords := FindArtifact ( player_artifact_number ) ;
8008: LD_ADDR_VAR 0 5
8012: PUSH
8013: LD_EXP 19
8017: PPUSH
8018: CALL_OW 469
8022: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , coords [ 1 ] , coords [ 2 ] ) ;
8023: LD_ADDR_VAR 0 7
8027: PUSH
8028: LD_INT 22
8030: PUSH
8031: LD_OWVAR 2
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 2
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 8
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: LD_INT 30
8055: PUSH
8056: LD_INT 11
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: PPUSH
8077: LD_VAR 0 5
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: LD_VAR 0 5
8090: PUSH
8091: LD_INT 2
8093: ARRAY
8094: PPUSH
8095: CALL_OW 73
8099: ST_TO_ADDR
// if not lab then
8100: LD_VAR 0 7
8104: NOT
8105: IFFALSE 8122
// begin if debug then
8107: LD_EXP 6
8111: IFFALSE 8120
// AddToLog ( Cannot find lab! ) ;
8113: LD_STRING Cannot find lab!
8115: PPUSH
8116: CALL_OW 561
// exit ;
8120: GO 8561
// end ; if icon = player_artifact_icon_res then
8122: LD_VAR 0 2
8126: PUSH
8127: LD_EXP 25
8131: EQUAL
8132: IFFALSE 8173
// begin SetSpecResearch ( lab , player_artifact_time_res , true ) ;
8134: LD_VAR 0 7
8138: PPUSH
8139: LD_EXP 27
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 486
// SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8151: LD_OWVAR 2
8155: PPUSH
8156: LD_EXP 25
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: LD_VAR 0 7
8168: PPUSH
8169: CALL_OW 468
// end ; if icon = player_artifact_icon then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_EXP 20
8182: EQUAL
8183: IFFALSE 8224
// begin if GetType ( cr1 ) = unit_human and not IsInUnit ( cr1 ) then
8185: LD_VAR 0 3
8189: PPUSH
8190: CALL_OW 247
8194: PUSH
8195: LD_INT 1
8197: EQUAL
8198: IFFALSE 8212
8200: PUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: CALL_OW 310
8210: NOT
8211: AND
8212: IFFALSE 8224
// player_artifact_selected_unit := cr1 ;
8214: LD_ADDR_EXP 30
8218: PUSH
8219: LD_VAR 0 3
8223: ST_TO_ADDR
// end ; if icon = player_artifact_icon_2 then
8224: LD_VAR 0 2
8228: PUSH
8229: LD_EXP 21
8233: EQUAL
8234: IFFALSE 8551
// begin if HexInfo ( cr1 , cr2 ) <> 0 or GetHexInfo ( cr1 , cr2 ) [ 6 ] in [ 3 , 4 , 5 , 6 ] then
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_VAR 0 4
8245: PPUSH
8246: CALL_OW 428
8250: PUSH
8251: LD_INT 0
8253: NONEQUAL
8254: IFTRUE 8295
8256: PUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL_OW 546
8271: PUSH
8272: LD_INT 6
8274: ARRAY
8275: PUSH
8276: LD_INT 3
8278: PUSH
8279: LD_INT 4
8281: PUSH
8282: LD_INT 5
8284: PUSH
8285: LD_INT 6
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: IN
8294: OR
8295: IFFALSE 8299
// exit ;
8297: GO 8561
// dist := GetDistXY ( GetX ( player_artifact_selected_unit ) , GetY ( player_artifact_selected_unit ) , cr1 , cr2 ) ;
8299: LD_ADDR_VAR 0 9
8303: PUSH
8304: LD_EXP 30
8308: PPUSH
8309: CALL_OW 250
8313: PPUSH
8314: LD_EXP 30
8318: PPUSH
8319: CALL_OW 251
8323: PPUSH
8324: LD_VAR 0 3
8328: PPUSH
8329: LD_VAR 0 4
8333: PPUSH
8334: CALL_OW 298
8338: ST_TO_ADDR
// cost := GetUseCost ( dist ) ;
8339: LD_ADDR_VAR 0 10
8343: PUSH
8344: LD_VAR 0 9
8348: PPUSH
8349: CALL 7316 0 1
8353: ST_TO_ADDR
// if cost > GetSibResources ( your_side ) then
8354: LD_VAR 0 10
8358: PUSH
8359: LD_OWVAR 2
8363: PPUSH
8364: CALL 5250 0 1
8368: GREATER
8369: IFFALSE 8383
// begin HintSpec ( ArtFrogJumpCost , 2 ) ;
8371: LD_STRING ArtFrogJumpCost
8373: PPUSH
8374: LD_INT 2
8376: PPUSH
8377: CALL_OW 338
// exit ;
8381: GO 8561
// end ; SetSibResources ( your_side , cost ) ;
8383: LD_OWVAR 2
8387: PPUSH
8388: LD_VAR 0 10
8392: PPUSH
8393: CALL 5374 0 2
// PlaceSeeing ( cr1 , cr2 , 6 , - 5 ) ;
8397: LD_VAR 0 3
8401: PPUSH
8402: LD_VAR 0 4
8406: PPUSH
8407: LD_INT 6
8409: PPUSH
8410: LD_INT 5
8412: NEG
8413: PPUSH
8414: CALL_OW 330
// RemoveSeeing ( cr1 , cr2 , 6 ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_VAR 0 4
8427: PPUSH
8428: LD_INT 6
8430: PPUSH
8431: CALL_OW 331
// TeleportUnit ( player_artifact_selected_unit , cr1 , cr2 , 0 , true ) ;
8435: LD_EXP 30
8439: PPUSH
8440: LD_VAR 0 3
8444: PPUSH
8445: LD_VAR 0 4
8449: PPUSH
8450: LD_INT 0
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: CALL_OW 483
// CenterOnXY ( cr1 , cr2 ) ;
8460: LD_VAR 0 3
8464: PPUSH
8465: LD_VAR 0 4
8469: PPUSH
8470: CALL_OW 84
// player_artifact_selected_unit := 0 ;
8474: LD_ADDR_EXP 30
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// player_artifact_researched := false ;
8482: LD_ADDR_EXP 22
8486: PUSH
8487: LD_INT 0
8489: ST_TO_ADDR
// SetArtifactUse ( your_side , player_artifact_icon , art_gray , lab ) ;
8490: LD_OWVAR 2
8494: PPUSH
8495: LD_EXP 20
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_VAR 0 7
8507: PPUSH
8508: CALL_OW 468
// SetArtifactUse ( your_side , player_artifact_icon_2 , art_no , lab ) ;
8512: LD_OWVAR 2
8516: PPUSH
8517: LD_EXP 21
8521: PPUSH
8522: LD_INT 0
8524: PPUSH
8525: LD_VAR 0 7
8529: PPUSH
8530: CALL_OW 468
// Wait ( player_artifact_time_refresh ) ;
8534: LD_EXP 26
8538: PPUSH
8539: CALL_OW 67
// player_artifact_researched := true ;
8543: LD_ADDR_EXP 22
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// end ; if debug then
8551: LD_EXP 6
8555: IFFALSE 8561
// DebugArtifact ;
8557: CALL 7080 0 0
// end ;
8561: PPOPN 10
8563: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 255
8573: PUSH
8574: LD_OWVAR 2
8578: EQUAL
8579: IFFALSE 8618
// begin SetArtifactUse ( your_side , player_artifact_icon_res , art_no , lab ) ;
8581: LD_OWVAR 2
8585: PPUSH
8586: LD_EXP 25
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 468
// player_artifact_ready := true ;
8603: LD_ADDR_EXP 29
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// Hint ( ArtFrogJump ) ;
8611: LD_STRING ArtFrogJump
8613: PPUSH
8614: CALL_OW 339
// end ; end ;
8618: PPOPN 1
8620: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , player_artifact_icon_res , art_instant , lab ) ;
8621: LD_OWVAR 2
8625: PPUSH
8626: LD_EXP 25
8630: PPUSH
8631: LD_INT 2
8633: PPUSH
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 468
// end ;
8643: PPOPN 2
8645: END
// export function ActiveArtifact1 ( ) ; var i , tmp , un ; begin
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
8650: PPUSH
8651: PPUSH
// tmp := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_siberium_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_power ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_siberite_mine ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_ext_siberium ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_btype , b_teleport ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_time_lapser ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_bweapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_weapon , ru_rocket ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_chassis , ru_behemoth ] ] ) ^ FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_engine , engine_siberite ] ] ) ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_INT 81
8659: PUSH
8660: LD_INT 7
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 34
8669: PUSH
8670: LD_INT 48
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PPUSH
8681: CALL_OW 69
8685: PUSH
8686: LD_INT 81
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 28
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 69
8714: ADD
8715: PUSH
8716: LD_INT 81
8718: PUSH
8719: LD_INT 7
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 30
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ADD
8745: PUSH
8746: LD_INT 81
8748: PUSH
8749: LD_INT 7
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 21
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ADD
8775: PUSH
8776: LD_INT 81
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 30
8788: PUSH
8789: LD_INT 34
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ADD
8805: PUSH
8806: LD_INT 81
8808: PUSH
8809: LD_INT 7
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 35
8818: PUSH
8819: LD_INT 49
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ADD
8835: PUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 7
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 35
8848: PUSH
8849: LD_INT 47
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PPUSH
8860: CALL_OW 69
8864: ADD
8865: PUSH
8866: LD_INT 81
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 34
8878: PUSH
8879: LD_INT 47
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: PUSH
8896: LD_INT 81
8898: PUSH
8899: LD_INT 7
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 31
8908: PUSH
8909: LD_INT 25
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ADD
8925: PUSH
8926: LD_INT 81
8928: PUSH
8929: LD_INT 7
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 32
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 69
8954: ADD
8955: ST_TO_ADDR
// if not tmp then
8956: LD_VAR 0 3
8960: NOT
8961: IFFALSE 8965
// exit ;
8963: GO 9086
// if UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) then
8965: LD_VAR 0 3
8969: PPUSH
8970: LD_INT 34
8972: PUSH
8973: LD_INT 48
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 72
8984: IFFALSE 9017
// un := UnitFilter ( tmp , [ f_weapon , ru_siberium_rocket ] ) [ 1 ] else
8986: LD_ADDR_VAR 0 4
8990: PUSH
8991: LD_VAR 0 3
8995: PPUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 48
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 72
9010: PUSH
9011: LD_INT 1
9013: ARRAY
9014: ST_TO_ADDR
9015: GO 9041
// un := tmp [ rand ( 1 , tmp ) ] ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 1
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: CALL_OW 12
9039: ARRAY
9040: ST_TO_ADDR
// if not alliance_used_artifact_1 then
9041: LD_EXP 10
9045: NOT
9046: IFFALSE 9077
// alliance_used_artifact_1 := [ GetX ( un ) , GetY ( un ) ] ;
9048: LD_ADDR_EXP 10
9052: PUSH
9053: LD_VAR 0 4
9057: PPUSH
9058: CALL_OW 250
9062: PUSH
9063: LD_VAR 0 4
9067: PPUSH
9068: CALL_OW 251
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: ST_TO_ADDR
// KillUnit ( un ) ;
9077: LD_VAR 0 4
9081: PPUSH
9082: CALL_OW 66
// end ;
9086: LD_VAR 0 1
9090: RET
// export function ActiveArtifact2 ( ) ; var i , un , tmp ; begin
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_ready ] , [ f_not , [ f_hastask ] ] , [ f_control , control_computer ] ] ) ;
9097: LD_ADDR_VAR 0 4
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 50
9114: PUSH
9115: EMPTY
9116: LIST
9117: PUSH
9118: LD_INT 53
9120: PUSH
9121: EMPTY
9122: LIST
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 60
9129: PUSH
9130: EMPTY
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 33
9139: PUSH
9140: LD_INT 3
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: ST_TO_ADDR
// if not tmp then
9159: LD_VAR 0 4
9163: NOT
9164: IFFALSE 9168
// exit ;
9166: GO 9306
// un := tmp [ rand ( 1 , tmp ) ] ;
9168: LD_ADDR_VAR 0 3
9172: PUSH
9173: LD_VAR 0 4
9177: PUSH
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 4
9185: PPUSH
9186: CALL_OW 12
9190: ARRAY
9191: ST_TO_ADDR
// SetSide ( un , 7 ) ;
9192: LD_VAR 0 3
9196: PPUSH
9197: LD_INT 7
9199: PPUSH
9200: CALL_OW 235
// if GetWeapon ( un ) = ru_siberium_rocket then
9204: LD_VAR 0 3
9208: PPUSH
9209: CALL_OW 264
9213: PUSH
9214: LD_INT 48
9216: EQUAL
9217: IFFALSE 9236
// ComAttackPlace ( un , 194 , 19 ) else
9219: LD_VAR 0 3
9223: PPUSH
9224: LD_INT 194
9226: PPUSH
9227: LD_INT 19
9229: PPUSH
9230: CALL_OW 116
9234: GO 9270
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , un ) ) ;
9236: LD_VAR 0 3
9240: PPUSH
9241: LD_INT 81
9243: PUSH
9244: LD_INT 7
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: CALL_OW 74
9265: PPUSH
9266: CALL_OW 115
// if not alliance_used_artifact_2 then
9270: LD_EXP 11
9274: NOT
9275: IFFALSE 9306
// alliance_used_artifact_2 := [ GetX ( un ) , GetY ( un ) ] ;
9277: LD_ADDR_EXP 11
9281: PUSH
9282: LD_VAR 0 3
9286: PPUSH
9287: CALL_OW 250
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: CALL_OW 251
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: ST_TO_ADDR
// end ; end_of_file
9306: LD_VAR 0 1
9310: RET
// export function DebugMode ; var i , j , b ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
// enable_addtolog = true ;
9317: LD_ADDR_OWVAR 81
9321: PUSH
9322: LD_INT 1
9324: ST_TO_ADDR
// FogOff ( 6 ) ;
9325: LD_INT 6
9327: PPUSH
9328: CALL_OW 344
// uc_side = 6 ;
9332: LD_ADDR_OWVAR 20
9336: PUSH
9337: LD_INT 6
9339: ST_TO_ADDR
// uc_nation = 3 ;
9340: LD_ADDR_OWVAR 21
9344: PUSH
9345: LD_INT 3
9347: ST_TO_ADDR
// bc_level = 10 ;
9348: LD_ADDR_OWVAR 43
9352: PUSH
9353: LD_INT 10
9355: ST_TO_ADDR
// bc_type := b_lab_full ;
9356: LD_ADDR_OWVAR 42
9360: PUSH
9361: LD_INT 8
9363: ST_TO_ADDR
// bc_kind1 := 11 ;
9364: LD_ADDR_OWVAR 44
9368: PUSH
9369: LD_INT 11
9371: ST_TO_ADDR
// bc_kind2 := 12 ;
9372: LD_ADDR_OWVAR 45
9376: PUSH
9377: LD_INT 12
9379: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 189 , 20 , 1 ) ;
9380: LD_INT 189
9382: PPUSH
9383: LD_INT 20
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 47
// bc_type := b_warehouse ;
9393: LD_ADDR_OWVAR 42
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 201 , 22 , 4 ) ;
9401: LD_ADDR_VAR 0 4
9405: PUSH
9406: LD_INT 201
9408: PPUSH
9409: LD_INT 22
9411: PPUSH
9412: LD_INT 4
9414: PPUSH
9415: CALL_OW 47
9419: ST_TO_ADDR
// SetResourceType ( GetBase ( b ) , 1 , 10000 ) ;
9420: LD_VAR 0 4
9424: PPUSH
9425: CALL_OW 274
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: LD_INT 10000
9435: PPUSH
9436: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 2 , 10000 ) ;
9440: LD_VAR 0 4
9444: PPUSH
9445: CALL_OW 274
9449: PPUSH
9450: LD_INT 2
9452: PPUSH
9453: LD_INT 10000
9455: PPUSH
9456: CALL_OW 277
// SetResourceType ( GetBase ( b ) , 3 , 10000 ) ;
9460: LD_VAR 0 4
9464: PPUSH
9465: CALL_OW 274
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 10000
9475: PPUSH
9476: CALL_OW 277
// bc_type := b_siberite_power ;
9480: LD_ADDR_OWVAR 42
9484: PUSH
9485: LD_INT 28
9487: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 216 , 16 , 4 ) ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_INT 216
9495: PPUSH
9496: LD_INT 16
9498: PPUSH
9499: LD_INT 4
9501: PPUSH
9502: CALL_OW 47
9506: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 219 , 16 , 4 ) ;
9507: LD_ADDR_VAR 0 4
9511: PUSH
9512: LD_INT 219
9514: PPUSH
9515: LD_INT 16
9517: PPUSH
9518: LD_INT 4
9520: PPUSH
9521: CALL_OW 47
9525: ST_TO_ADDR
// SetTech ( tech_sib2 , 6 , state_researched ) ;
9526: LD_INT 55
9528: PPUSH
9529: LD_INT 6
9531: PPUSH
9532: LD_INT 2
9534: PPUSH
9535: CALL_OW 322
// SetTech ( tech_sib3 , 6 , state_researched ) ;
9539: LD_INT 56
9541: PPUSH
9542: LD_INT 6
9544: PPUSH
9545: LD_INT 2
9547: PPUSH
9548: CALL_OW 322
// end ; end_of_file
9552: LD_VAR 0 1
9556: RET
// export function SOS_UnitDestroyed ( un ) ; begin
9557: LD_INT 0
9559: PPUSH
// ComRadiation ( un ) ;
9560: LD_VAR 0 1
9564: PPUSH
9565: CALL 10727 0 1
// end ;
9569: LD_VAR 0 2
9573: RET
// export function SOS_UnitKamikazed ( un ) ; begin
9574: LD_INT 0
9576: PPUSH
// ComRadiation ( un ) ;
9577: LD_VAR 0 1
9581: PPUSH
9582: CALL 10727 0 1
// end ;
9586: LD_VAR 0 2
9590: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
9591: LD_INT 0
9593: PPUSH
// end ;
9594: LD_VAR 0 4
9598: RET
// export function SOS_Command ( cmd ) ; begin
9599: LD_INT 0
9601: PPUSH
// end ;
9602: LD_VAR 0 2
9606: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
9607: LD_INT 0
9609: PPUSH
// end ;
9610: LD_VAR 0 6
9614: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
9620: PPUSH
9621: PPUSH
// if not vehicle or not factory then
9622: LD_VAR 0 1
9626: NOT
9627: IFTRUE 9636
9629: PUSH
9630: LD_VAR 0 2
9634: NOT
9635: OR
9636: IFFALSE 9640
// exit ;
9638: GO 10302
// weapon := GetWeapon ( vehicle ) ;
9640: LD_ADDR_VAR 0 7
9644: PUSH
9645: LD_VAR 0 1
9649: PPUSH
9650: CALL_OW 264
9654: ST_TO_ADDR
// if weapon = ar_miner then
9655: LD_VAR 0 7
9659: PUSH
9660: LD_INT 81
9662: EQUAL
9663: IFFALSE 9720
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
9665: LD_ADDR_EXP 43
9669: PUSH
9670: LD_EXP 43
9674: PPUSH
9675: LD_EXP 43
9679: PUSH
9680: LD_INT 1
9682: PLUS
9683: PPUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 1
9693: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9694: LD_ADDR_EXP 44
9698: PUSH
9699: LD_EXP 44
9703: PPUSH
9704: LD_EXP 44
9708: PUSH
9709: LD_INT 1
9711: PLUS
9712: PPUSH
9713: EMPTY
9714: PPUSH
9715: CALL_OW 1
9719: ST_TO_ADDR
// end ; if not factoryWaypoints then
9720: LD_EXP 105
9724: NOT
9725: IFFALSE 9729
// exit ;
9727: GO 10302
// for i := 1 to Count ( factoryWaypoints ) do
9729: LD_ADDR_VAR 0 4
9733: PUSH
9734: DOUBLE
9735: LD_INT 1
9737: DEC
9738: ST_TO_ADDR
9739: LD_EXP 105
9743: PPUSH
9744: CALL 34341 0 1
9748: PUSH
9749: FOR_TO
9750: IFFALSE 10300
// if factoryWaypoints [ i ] [ 2 ] = factory then
9752: LD_EXP 105
9756: PUSH
9757: LD_VAR 0 4
9761: ARRAY
9762: PUSH
9763: LD_INT 2
9765: ARRAY
9766: PUSH
9767: LD_VAR 0 2
9771: EQUAL
9772: IFFALSE 10298
// begin if GetControl ( vehicle ) = control_manual then
9774: LD_VAR 0 1
9778: PPUSH
9779: CALL_OW 263
9783: PUSH
9784: LD_INT 1
9786: EQUAL
9787: IFFALSE 10151
// begin driver := IsDrivenBy ( vehicle ) ;
9789: LD_ADDR_VAR 0 5
9793: PUSH
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 311
9803: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
9804: LD_VAR 0 5
9808: PUSH
9809: LD_EXP 106
9813: IN
9814: IFTRUE 9828
9816: PUSH
9817: LD_VAR 0 1
9821: PUSH
9822: LD_EXP 106
9826: IN
9827: OR
9828: IFFALSE 9834
// exit ;
9830: POP
9831: POP
9832: GO 10302
// if not HasTask ( driver ) then
9834: LD_VAR 0 5
9838: PPUSH
9839: CALL_OW 314
9843: NOT
9844: IFFALSE 10149
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
9846: LD_ADDR_EXP 106
9850: PUSH
9851: LD_EXP 106
9855: PPUSH
9856: LD_VAR 0 5
9860: PPUSH
9861: CALL 70317 0 2
9865: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
9866: LD_ADDR_EXP 106
9870: PUSH
9871: LD_EXP 106
9875: PPUSH
9876: LD_VAR 0 1
9880: PPUSH
9881: CALL 70317 0 2
9885: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9886: LD_ADDR_VAR 0 6
9890: PUSH
9891: LD_EXP 105
9895: PUSH
9896: LD_VAR 0 4
9900: ARRAY
9901: PUSH
9902: LD_INT 3
9904: ARRAY
9905: PPUSH
9906: LD_EXP 105
9910: PUSH
9911: LD_VAR 0 4
9915: ARRAY
9916: PUSH
9917: LD_INT 4
9919: ARRAY
9920: PPUSH
9921: CALL_OW 428
9925: ST_TO_ADDR
// if hex then
9926: LD_VAR 0 6
9930: IFFALSE 9948
// ComMoveUnit ( driver , hex ) else
9932: LD_VAR 0 5
9936: PPUSH
9937: LD_VAR 0 6
9941: PPUSH
9942: CALL_OW 112
9946: GO 10032
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
9948: LD_VAR 0 1
9952: PPUSH
9953: LD_EXP 105
9957: PUSH
9958: LD_VAR 0 4
9962: ARRAY
9963: PUSH
9964: LD_INT 3
9966: ARRAY
9967: PPUSH
9968: LD_EXP 105
9972: PUSH
9973: LD_VAR 0 4
9977: ARRAY
9978: PUSH
9979: LD_INT 4
9981: ARRAY
9982: PPUSH
9983: CALL_OW 297
9987: PUSH
9988: LD_INT 0
9990: GREATER
9991: IFFALSE 10032
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
9993: LD_VAR 0 5
9997: PPUSH
9998: LD_EXP 105
10002: PUSH
10003: LD_VAR 0 4
10007: ARRAY
10008: PUSH
10009: LD_INT 3
10011: ARRAY
10012: PPUSH
10013: LD_EXP 105
10017: PUSH
10018: LD_VAR 0 4
10022: ARRAY
10023: PUSH
10024: LD_INT 4
10026: ARRAY
10027: PPUSH
10028: CALL_OW 111
// AddComExitVehicle ( driver ) ;
10032: LD_VAR 0 5
10036: PPUSH
10037: CALL_OW 181
// if Multiplayer then
10041: LD_OWVAR 4
10045: IFFALSE 10094
// begin repeat wait ( 10 ) ;
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 67
// until not IsInUnit ( driver ) ;
10054: LD_VAR 0 5
10058: PPUSH
10059: CALL_OW 310
10063: NOT
10064: IFFALSE 10047
// if not HasTask ( driver ) then
10066: LD_VAR 0 5
10070: PPUSH
10071: CALL_OW 314
10075: NOT
10076: IFFALSE 10092
// ComEnterUnit ( driver , factory ) ;
10078: LD_VAR 0 5
10082: PPUSH
10083: LD_VAR 0 2
10087: PPUSH
10088: CALL_OW 120
// end else
10092: GO 10108
// AddComEnterUnit ( driver , factory ) ;
10094: LD_VAR 0 5
10098: PPUSH
10099: LD_VAR 0 2
10103: PPUSH
10104: CALL_OW 180
// wait ( 0 0$1 ) ;
10108: LD_INT 35
10110: PPUSH
10111: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
10115: LD_ADDR_EXP 106
10119: PUSH
10120: LD_EXP 106
10124: PUSH
10125: LD_VAR 0 5
10129: DIFF
10130: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
10131: LD_ADDR_EXP 106
10135: PUSH
10136: LD_EXP 106
10140: PUSH
10141: LD_VAR 0 1
10145: DIFF
10146: ST_TO_ADDR
// break ;
10147: GO 10300
// end ; end else
10149: GO 10298
// if GetControl ( vehicle ) = control_remote then
10151: LD_VAR 0 1
10155: PPUSH
10156: CALL_OW 263
10160: PUSH
10161: LD_INT 2
10163: EQUAL
10164: IFFALSE 10250
// begin wait ( 0 0$2 ) ;
10166: LD_INT 70
10168: PPUSH
10169: CALL_OW 67
// repeat wait ( 10 ) ;
10173: LD_INT 10
10175: PPUSH
10176: CALL_OW 67
// Connect ( vehicle ) ;
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL 40619 0 1
// until IsControledBy ( vehicle ) ;
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 312
10198: IFFALSE 10173
// wait ( 10 ) ;
10200: LD_INT 10
10202: PPUSH
10203: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10207: LD_VAR 0 1
10211: PPUSH
10212: LD_EXP 105
10216: PUSH
10217: LD_VAR 0 4
10221: ARRAY
10222: PUSH
10223: LD_INT 3
10225: ARRAY
10226: PPUSH
10227: LD_EXP 105
10231: PUSH
10232: LD_VAR 0 4
10236: ARRAY
10237: PUSH
10238: LD_INT 4
10240: ARRAY
10241: PPUSH
10242: CALL_OW 111
// break ;
10246: GO 10300
// end else
10248: GO 10298
// begin wait ( 0 0$3 ) ;
10250: LD_INT 105
10252: PPUSH
10253: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
10257: LD_VAR 0 1
10261: PPUSH
10262: LD_EXP 105
10266: PUSH
10267: LD_VAR 0 4
10271: ARRAY
10272: PUSH
10273: LD_INT 3
10275: ARRAY
10276: PPUSH
10277: LD_EXP 105
10281: PUSH
10282: LD_VAR 0 4
10286: ARRAY
10287: PUSH
10288: LD_INT 4
10290: ARRAY
10291: PPUSH
10292: CALL_OW 111
// break ;
10296: GO 10300
// end ; end ;
10298: GO 9749
10300: POP
10301: POP
// end ;
10302: LD_VAR 0 3
10306: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10307: LD_INT 0
10309: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10310: LD_VAR 0 1
10314: PUSH
10315: LD_INT 250
10317: EQUAL
10318: IFFALSE 10335
10320: PUSH
10321: LD_VAR 0 2
10325: PPUSH
10326: CALL_OW 264
10330: PUSH
10331: LD_INT 81
10333: EQUAL
10334: AND
10335: IFFALSE 10356
// MinerPlaceMine ( unit , x , y ) ;
10337: LD_VAR 0 2
10341: PPUSH
10342: LD_VAR 0 4
10346: PPUSH
10347: LD_VAR 0 5
10351: PPUSH
10352: CALL 13702 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10356: LD_VAR 0 1
10360: PUSH
10361: LD_INT 251
10363: EQUAL
10364: IFFALSE 10381
10366: PUSH
10367: LD_VAR 0 2
10371: PPUSH
10372: CALL_OW 264
10376: PUSH
10377: LD_INT 81
10379: EQUAL
10380: AND
10381: IFFALSE 10402
// MinerDetonateMine ( unit , x , y ) ;
10383: LD_VAR 0 2
10387: PPUSH
10388: LD_VAR 0 4
10392: PPUSH
10393: LD_VAR 0 5
10397: PPUSH
10398: CALL 14109 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10402: LD_VAR 0 1
10406: PUSH
10407: LD_INT 252
10409: EQUAL
10410: IFFALSE 10427
10412: PUSH
10413: LD_VAR 0 2
10417: PPUSH
10418: CALL_OW 264
10422: PUSH
10423: LD_INT 81
10425: EQUAL
10426: AND
10427: IFFALSE 10448
// MinerCreateMinefield ( unit , x , y ) ;
10429: LD_VAR 0 2
10433: PPUSH
10434: LD_VAR 0 4
10438: PPUSH
10439: LD_VAR 0 5
10443: PPUSH
10444: CALL 14341 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10448: LD_VAR 0 1
10452: PUSH
10453: LD_INT 253
10455: EQUAL
10456: IFFALSE 10473
10458: PUSH
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 257
10468: PUSH
10469: LD_INT 5
10471: EQUAL
10472: AND
10473: IFFALSE 10494
// ComBinocular ( unit , x , y ) ;
10475: LD_VAR 0 2
10479: PPUSH
10480: LD_VAR 0 4
10484: PPUSH
10485: LD_VAR 0 5
10489: PPUSH
10490: CALL 14716 0 3
// if selectedUnit then
10494: LD_VAR 0 3
10498: IFFALSE 10558
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 254
10507: EQUAL
10508: IFFALSE 10525
10510: PUSH
10511: LD_VAR 0 2
10515: PPUSH
10516: CALL_OW 264
10520: PUSH
10521: LD_INT 99
10523: EQUAL
10524: AND
10525: IFFALSE 10542
10527: PUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: CALL_OW 263
10537: PUSH
10538: LD_INT 3
10540: EQUAL
10541: AND
10542: IFFALSE 10558
// HackDestroyVehicle ( unit , selectedUnit ) ;
10544: LD_VAR 0 2
10548: PPUSH
10549: LD_VAR 0 3
10553: PPUSH
10554: CALL 12892 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10558: LD_VAR 0 1
10562: PUSH
10563: LD_INT 255
10565: EQUAL
10566: IFFALSE 10590
10568: PUSH
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 264
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: LD_INT 53
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: IN
10589: AND
10590: IFFALSE 10608
10592: PUSH
10593: LD_VAR 0 4
10597: PPUSH
10598: LD_VAR 0 5
10602: PPUSH
10603: CALL_OW 488
10607: AND
10608: IFFALSE 10632
// CutTreeXYR ( unit , x , y , 12 ) ;
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: LD_VAR 0 5
10624: PPUSH
10625: LD_INT 12
10627: PPUSH
10628: CALL 10823 0 4
// if cmd = 256 then
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 256
10639: EQUAL
10640: IFFALSE 10661
// SetFactoryWaypoint ( unit , x , y ) ;
10642: LD_VAR 0 2
10646: PPUSH
10647: LD_VAR 0 4
10651: PPUSH
10652: LD_VAR 0 5
10656: PPUSH
10657: CALL 30662 0 3
// if cmd = 257 then
10661: LD_VAR 0 1
10665: PUSH
10666: LD_INT 257
10668: EQUAL
10669: IFFALSE 10690
// SetWarehouseGatheringPoint ( unit , x , y ) ;
10671: LD_VAR 0 2
10675: PPUSH
10676: LD_VAR 0 4
10680: PPUSH
10681: LD_VAR 0 5
10685: PPUSH
10686: CALL 31158 0 3
// if cmd = 258 then
10690: LD_VAR 0 1
10694: PUSH
10695: LD_INT 258
10697: EQUAL
10698: IFFALSE 10722
// BurnTreeXYR ( unit , x , y , 8 ) ;
10700: LD_VAR 0 2
10704: PPUSH
10705: LD_VAR 0 4
10709: PPUSH
10710: LD_VAR 0 5
10714: PPUSH
10715: LD_INT 8
10717: PPUSH
10718: CALL 11245 0 4
// end ;
10722: LD_VAR 0 6
10726: RET
// export function ComRadiation ( un ) ; var eff ; begin
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 264
10740: PUSH
10741: LD_INT 91
10743: NONEQUAL
10744: IFFALSE 10748
// exit ;
10746: GO 10818
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10748: LD_INT 68
10750: PPUSH
10751: LD_VAR 0 1
10755: PPUSH
10756: CALL_OW 255
10760: PPUSH
10761: CALL_OW 321
10765: PUSH
10766: LD_INT 2
10768: EQUAL
10769: IFFALSE 10781
// eff := 50 else
10771: LD_ADDR_VAR 0 3
10775: PUSH
10776: LD_INT 50
10778: ST_TO_ADDR
10779: GO 10789
// eff := 25 ;
10781: LD_ADDR_VAR 0 3
10785: PUSH
10786: LD_INT 25
10788: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10789: LD_VAR 0 1
10793: PPUSH
10794: CALL_OW 250
10798: PPUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL_OW 251
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: CALL_OW 495
// end ;
10818: LD_VAR 0 2
10822: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
10827: PPUSH
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
10834: LD_VAR 0 1
10838: PPUSH
10839: CALL_OW 302
10843: NOT
10844: IFTRUE 10863
10846: PUSH
10847: LD_VAR 0 2
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: CALL_OW 488
10861: NOT
10862: OR
10863: IFTRUE 10872
10865: PUSH
10866: LD_VAR 0 4
10870: NOT
10871: OR
10872: IFFALSE 10876
// exit ;
10874: GO 11240
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
10876: LD_VAR 0 1
10880: PPUSH
10881: CALL_OW 437
10885: PPUSH
10886: CALL 34341 0 1
10890: PUSH
10891: LD_INT 10
10893: GREATER
10894: IFFALSE 10898
// exit ;
10896: GO 11240
// list := [ ] ;
10898: LD_ADDR_VAR 0 13
10902: PUSH
10903: EMPTY
10904: ST_TO_ADDR
// if x - r < 0 then
10905: LD_VAR 0 2
10909: PUSH
10910: LD_VAR 0 4
10914: MINUS
10915: PUSH
10916: LD_INT 0
10918: LESS
10919: IFFALSE 10931
// min_x := 0 else
10921: LD_ADDR_VAR 0 7
10925: PUSH
10926: LD_INT 0
10928: ST_TO_ADDR
10929: GO 10947
// min_x := x - r ;
10931: LD_ADDR_VAR 0 7
10935: PUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_VAR 0 4
10945: MINUS
10946: ST_TO_ADDR
// if y - r < 0 then
10947: LD_VAR 0 3
10951: PUSH
10952: LD_VAR 0 4
10956: MINUS
10957: PUSH
10958: LD_INT 0
10960: LESS
10961: IFFALSE 10973
// min_y := 0 else
10963: LD_ADDR_VAR 0 8
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
10971: GO 10989
// min_y := y - r ;
10973: LD_ADDR_VAR 0 8
10977: PUSH
10978: LD_VAR 0 3
10982: PUSH
10983: LD_VAR 0 4
10987: MINUS
10988: ST_TO_ADDR
// max_x := x + r ;
10989: LD_ADDR_VAR 0 9
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: LD_VAR 0 4
11003: PLUS
11004: ST_TO_ADDR
// max_y := y + r ;
11005: LD_ADDR_VAR 0 10
11009: PUSH
11010: LD_VAR 0 3
11014: PUSH
11015: LD_VAR 0 4
11019: PLUS
11020: ST_TO_ADDR
// for _x = min_x to max_x do
11021: LD_ADDR_VAR 0 11
11025: PUSH
11026: DOUBLE
11027: LD_VAR 0 7
11031: DEC
11032: ST_TO_ADDR
11033: LD_VAR 0 9
11037: PUSH
11038: FOR_TO
11039: IFFALSE 11158
// for _y = min_y to max_y do
11041: LD_ADDR_VAR 0 12
11045: PUSH
11046: DOUBLE
11047: LD_VAR 0 8
11051: DEC
11052: ST_TO_ADDR
11053: LD_VAR 0 10
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11154
// begin if not ValidHex ( _x , _y ) then
11061: LD_VAR 0 11
11065: PPUSH
11066: LD_VAR 0 12
11070: PPUSH
11071: CALL_OW 488
11075: NOT
11076: IFFALSE 11080
// continue ;
11078: GO 11058
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11080: LD_VAR 0 11
11084: PPUSH
11085: LD_VAR 0 12
11089: PPUSH
11090: CALL_OW 351
11094: IFFALSE 11112
11096: PUSH
11097: LD_VAR 0 11
11101: PPUSH
11102: LD_VAR 0 12
11106: PPUSH
11107: CALL_OW 554
11111: AND
11112: IFFALSE 11152
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11114: LD_ADDR_VAR 0 13
11118: PUSH
11119: LD_VAR 0 13
11123: PPUSH
11124: LD_VAR 0 13
11128: PUSH
11129: LD_INT 1
11131: PLUS
11132: PPUSH
11133: LD_VAR 0 11
11137: PUSH
11138: LD_VAR 0 12
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 2
11151: ST_TO_ADDR
// end ;
11152: GO 11058
11154: POP
11155: POP
11156: GO 11038
11158: POP
11159: POP
// if not list then
11160: LD_VAR 0 13
11164: NOT
11165: IFFALSE 11169
// exit ;
11167: GO 11240
// for i in list do
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 13
11178: PUSH
11179: FOR_IN
11180: IFFALSE 11238
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11182: LD_VAR 0 1
11186: PPUSH
11187: LD_STRING M
11189: PUSH
11190: LD_VAR 0 6
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PUSH
11199: LD_VAR 0 6
11203: PUSH
11204: LD_INT 2
11206: ARRAY
11207: PUSH
11208: LD_INT 0
11210: PUSH
11211: LD_INT 0
11213: PUSH
11214: LD_INT 0
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: PPUSH
11232: CALL_OW 447
11236: GO 11179
11238: POP
11239: POP
// end ;
11240: LD_VAR 0 5
11244: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
11249: PPUSH
11250: PPUSH
11251: PPUSH
11252: PPUSH
11253: PPUSH
11254: PPUSH
11255: PPUSH
11256: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
11257: LD_VAR 0 1
11261: PPUSH
11262: CALL_OW 302
11266: NOT
11267: IFTRUE 11286
11269: PUSH
11270: LD_VAR 0 2
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: CALL_OW 488
11284: NOT
11285: OR
11286: IFTRUE 11295
11288: PUSH
11289: LD_VAR 0 4
11293: NOT
11294: OR
11295: IFFALSE 11299
// exit ;
11297: GO 11838
// if Count ( GetTaskList ( flame ) ) > 10 then
11299: LD_VAR 0 1
11303: PPUSH
11304: CALL_OW 437
11308: PPUSH
11309: CALL 34341 0 1
11313: PUSH
11314: LD_INT 10
11316: GREATER
11317: IFFALSE 11321
// exit ;
11319: GO 11838
// list := [ ] ;
11321: LD_ADDR_VAR 0 13
11325: PUSH
11326: EMPTY
11327: ST_TO_ADDR
// if x - r < 0 then
11328: LD_VAR 0 2
11332: PUSH
11333: LD_VAR 0 4
11337: MINUS
11338: PUSH
11339: LD_INT 0
11341: LESS
11342: IFFALSE 11354
// min_x := 0 else
11344: LD_ADDR_VAR 0 7
11348: PUSH
11349: LD_INT 0
11351: ST_TO_ADDR
11352: GO 11370
// min_x := x - r ;
11354: LD_ADDR_VAR 0 7
11358: PUSH
11359: LD_VAR 0 2
11363: PUSH
11364: LD_VAR 0 4
11368: MINUS
11369: ST_TO_ADDR
// if y - r < 0 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_VAR 0 4
11379: MINUS
11380: PUSH
11381: LD_INT 0
11383: LESS
11384: IFFALSE 11396
// min_y := 0 else
11386: LD_ADDR_VAR 0 8
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
11394: GO 11412
// min_y := y - r ;
11396: LD_ADDR_VAR 0 8
11400: PUSH
11401: LD_VAR 0 3
11405: PUSH
11406: LD_VAR 0 4
11410: MINUS
11411: ST_TO_ADDR
// max_x := x + r ;
11412: LD_ADDR_VAR 0 9
11416: PUSH
11417: LD_VAR 0 2
11421: PUSH
11422: LD_VAR 0 4
11426: PLUS
11427: ST_TO_ADDR
// max_y := y + r ;
11428: LD_ADDR_VAR 0 10
11432: PUSH
11433: LD_VAR 0 3
11437: PUSH
11438: LD_VAR 0 4
11442: PLUS
11443: ST_TO_ADDR
// for _x = min_x to max_x do
11444: LD_ADDR_VAR 0 11
11448: PUSH
11449: DOUBLE
11450: LD_VAR 0 7
11454: DEC
11455: ST_TO_ADDR
11456: LD_VAR 0 9
11460: PUSH
11461: FOR_TO
11462: IFFALSE 11581
// for _y = min_y to max_y do
11464: LD_ADDR_VAR 0 12
11468: PUSH
11469: DOUBLE
11470: LD_VAR 0 8
11474: DEC
11475: ST_TO_ADDR
11476: LD_VAR 0 10
11480: PUSH
11481: FOR_TO
11482: IFFALSE 11577
// begin if not ValidHex ( _x , _y ) then
11484: LD_VAR 0 11
11488: PPUSH
11489: LD_VAR 0 12
11493: PPUSH
11494: CALL_OW 488
11498: NOT
11499: IFFALSE 11503
// continue ;
11501: GO 11481
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11503: LD_VAR 0 11
11507: PPUSH
11508: LD_VAR 0 12
11512: PPUSH
11513: CALL_OW 351
11517: IFFALSE 11535
11519: PUSH
11520: LD_VAR 0 11
11524: PPUSH
11525: LD_VAR 0 12
11529: PPUSH
11530: CALL_OW 554
11534: AND
11535: IFFALSE 11575
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11537: LD_ADDR_VAR 0 13
11541: PUSH
11542: LD_VAR 0 13
11546: PPUSH
11547: LD_VAR 0 13
11551: PUSH
11552: LD_INT 1
11554: PLUS
11555: PPUSH
11556: LD_VAR 0 11
11560: PUSH
11561: LD_VAR 0 12
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PPUSH
11570: CALL_OW 2
11574: ST_TO_ADDR
// end ;
11575: GO 11481
11577: POP
11578: POP
11579: GO 11461
11581: POP
11582: POP
// if not list then
11583: LD_VAR 0 13
11587: NOT
11588: IFFALSE 11592
// exit ;
11590: GO 11838
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
11592: LD_ADDR_VAR 0 13
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: LD_VAR 0 13
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL 37747 0 4
11617: ST_TO_ADDR
// ComStop ( flame ) ;
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL_OW 141
// for i in list do
11627: LD_ADDR_VAR 0 6
11631: PUSH
11632: LD_VAR 0 13
11636: PUSH
11637: FOR_IN
11638: IFFALSE 11669
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
11640: LD_VAR 0 1
11644: PPUSH
11645: LD_VAR 0 6
11649: PUSH
11650: LD_INT 1
11652: ARRAY
11653: PPUSH
11654: LD_VAR 0 6
11658: PUSH
11659: LD_INT 2
11661: ARRAY
11662: PPUSH
11663: CALL_OW 176
11667: GO 11637
11669: POP
11670: POP
// repeat wait ( 0 0$1 ) ;
11671: LD_INT 35
11673: PPUSH
11674: CALL_OW 67
// task := GetTaskList ( flame ) ;
11678: LD_ADDR_VAR 0 14
11682: PUSH
11683: LD_VAR 0 1
11687: PPUSH
11688: CALL_OW 437
11692: ST_TO_ADDR
// if not task then
11693: LD_VAR 0 14
11697: NOT
11698: IFFALSE 11702
// exit ;
11700: GO 11838
// if task [ 1 ] [ 1 ] <> | then
11702: LD_VAR 0 14
11706: PUSH
11707: LD_INT 1
11709: ARRAY
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PUSH
11715: LD_STRING |
11717: NONEQUAL
11718: IFFALSE 11722
// exit ;
11720: GO 11838
// _x := task [ 1 ] [ 2 ] ;
11722: LD_ADDR_VAR 0 11
11726: PUSH
11727: LD_VAR 0 14
11731: PUSH
11732: LD_INT 1
11734: ARRAY
11735: PUSH
11736: LD_INT 2
11738: ARRAY
11739: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
11740: LD_ADDR_VAR 0 12
11744: PUSH
11745: LD_VAR 0 14
11749: PUSH
11750: LD_INT 1
11752: ARRAY
11753: PUSH
11754: LD_INT 3
11756: ARRAY
11757: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
11758: LD_VAR 0 11
11762: PPUSH
11763: LD_VAR 0 12
11767: PPUSH
11768: CALL_OW 351
11772: NOT
11773: IFTRUE 11792
11775: PUSH
11776: LD_VAR 0 11
11780: PPUSH
11781: LD_VAR 0 12
11785: PPUSH
11786: CALL_OW 554
11790: NOT
11791: OR
11792: IFFALSE 11826
// begin task := Delete ( task , 1 ) ;
11794: LD_ADDR_VAR 0 14
11798: PUSH
11799: LD_VAR 0 14
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 3
11811: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_VAR 0 14
11821: PPUSH
11822: CALL_OW 446
// end ; until not HasTask ( flame ) ;
11826: LD_VAR 0 1
11830: PPUSH
11831: CALL_OW 314
11835: NOT
11836: IFFALSE 11671
// end ;
11838: LD_VAR 0 5
11842: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11843: LD_EXP 36
11847: NOT
11848: IFFALSE 11898
11850: GO 11852
11852: DISABLE
// begin initHack := true ;
11853: LD_ADDR_EXP 36
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// hackTanks := [ ] ;
11861: LD_ADDR_EXP 37
11865: PUSH
11866: EMPTY
11867: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11868: LD_ADDR_EXP 38
11872: PUSH
11873: EMPTY
11874: ST_TO_ADDR
// hackLimit := 3 ;
11875: LD_ADDR_EXP 39
11879: PUSH
11880: LD_INT 3
11882: ST_TO_ADDR
// hackDist := 12 ;
11883: LD_ADDR_EXP 40
11887: PUSH
11888: LD_INT 12
11890: ST_TO_ADDR
// hackCounter := [ ] ;
11891: LD_ADDR_EXP 41
11895: PUSH
11896: EMPTY
11897: ST_TO_ADDR
// end ;
11898: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11899: LD_EXP 36
11903: IFFALSE 11921
11905: PUSH
11906: LD_INT 34
11908: PUSH
11909: LD_INT 99
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 69
11920: AND
11921: IFFALSE 12174
11923: GO 11925
11925: DISABLE
11926: LD_INT 0
11928: PPUSH
11929: PPUSH
// begin enable ;
11930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11931: LD_ADDR_VAR 0 1
11935: PUSH
11936: LD_INT 34
11938: PUSH
11939: LD_INT 99
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: PUSH
11951: FOR_IN
11952: IFFALSE 12172
// begin if not i in hackTanks then
11954: LD_VAR 0 1
11958: PUSH
11959: LD_EXP 37
11963: IN
11964: NOT
11965: IFFALSE 12048
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11967: LD_ADDR_EXP 37
11971: PUSH
11972: LD_EXP 37
11976: PPUSH
11977: LD_EXP 37
11981: PUSH
11982: LD_INT 1
11984: PLUS
11985: PPUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: CALL_OW 1
11995: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11996: LD_ADDR_EXP 38
12000: PUSH
12001: LD_EXP 38
12005: PPUSH
12006: LD_EXP 38
12010: PUSH
12011: LD_INT 1
12013: PLUS
12014: PPUSH
12015: EMPTY
12016: PPUSH
12017: CALL_OW 1
12021: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12022: LD_ADDR_EXP 41
12026: PUSH
12027: LD_EXP 41
12031: PPUSH
12032: LD_EXP 41
12036: PUSH
12037: LD_INT 1
12039: PLUS
12040: PPUSH
12041: EMPTY
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12048: LD_VAR 0 1
12052: PPUSH
12053: CALL_OW 302
12057: NOT
12058: IFFALSE 12071
// begin HackUnlinkAll ( i ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: CALL 12177 0 1
// continue ;
12069: GO 11951
// end ; HackCheckCapturedStatus ( i ) ;
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL 12622 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_INT 81
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 255
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 91
12114: PUSH
12115: LD_VAR 0 1
12119: PUSH
12120: LD_EXP 40
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 50
12132: PUSH
12133: EMPTY
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 2
12151: NOT
12152: IFFALSE 12156
// continue ;
12154: GO 11951
// HackLink ( i , tmp ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL 12313 0 2
// end ;
12170: GO 11951
12172: POP
12173: POP
// end ;
12174: PPOPN 2
12176: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12177: LD_INT 0
12179: PPUSH
12180: PPUSH
12181: PPUSH
// if not hack in hackTanks then
12182: LD_VAR 0 1
12186: PUSH
12187: LD_EXP 37
12191: IN
12192: NOT
12193: IFFALSE 12197
// exit ;
12195: GO 12308
// index := GetElementIndex ( hackTanks , hack ) ;
12197: LD_ADDR_VAR 0 4
12201: PUSH
12202: LD_EXP 37
12206: PPUSH
12207: LD_VAR 0 1
12211: PPUSH
12212: CALL 37042 0 2
12216: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12217: LD_EXP 38
12221: PUSH
12222: LD_VAR 0 4
12226: ARRAY
12227: IFFALSE 12308
// begin for i in hackTanksCaptured [ index ] do
12229: LD_ADDR_VAR 0 3
12233: PUSH
12234: LD_EXP 38
12238: PUSH
12239: LD_VAR 0 4
12243: ARRAY
12244: PUSH
12245: FOR_IN
12246: IFFALSE 12272
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12248: LD_VAR 0 3
12252: PUSH
12253: LD_INT 1
12255: ARRAY
12256: PPUSH
12257: LD_VAR 0 3
12261: PUSH
12262: LD_INT 2
12264: ARRAY
12265: PPUSH
12266: CALL_OW 235
12270: GO 12245
12272: POP
12273: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12274: LD_ADDR_EXP 38
12278: PUSH
12279: LD_EXP 38
12283: PPUSH
12284: LD_VAR 0 4
12288: PPUSH
12289: EMPTY
12290: PPUSH
12291: CALL_OW 1
12295: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 505
// end ; end ;
12308: LD_VAR 0 2
12312: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12313: LD_INT 0
12315: PPUSH
12316: PPUSH
12317: PPUSH
// if not hack in hackTanks or not vehicles then
12318: LD_VAR 0 1
12322: PUSH
12323: LD_EXP 37
12327: IN
12328: NOT
12329: IFTRUE 12338
12331: PUSH
12332: LD_VAR 0 2
12336: NOT
12337: OR
12338: IFFALSE 12342
// exit ;
12340: GO 12617
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12342: LD_ADDR_VAR 0 2
12346: PUSH
12347: LD_VAR 0 1
12351: PPUSH
12352: LD_VAR 0 2
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL 37694 0 4
12367: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12368: LD_ADDR_VAR 0 5
12372: PUSH
12373: LD_EXP 37
12377: PPUSH
12378: LD_VAR 0 1
12382: PPUSH
12383: CALL 37042 0 2
12387: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12388: LD_EXP 38
12392: PUSH
12393: LD_VAR 0 5
12397: ARRAY
12398: PUSH
12399: LD_EXP 39
12403: LESS
12404: IFFALSE 12593
// begin for i := 1 to vehicles do
12406: LD_ADDR_VAR 0 4
12410: PUSH
12411: DOUBLE
12412: LD_INT 1
12414: DEC
12415: ST_TO_ADDR
12416: LD_VAR 0 2
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12591
// begin if hackTanksCaptured [ index ] = hackLimit then
12424: LD_EXP 38
12428: PUSH
12429: LD_VAR 0 5
12433: ARRAY
12434: PUSH
12435: LD_EXP 39
12439: EQUAL
12440: IFFALSE 12444
// break ;
12442: GO 12591
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12444: LD_ADDR_EXP 41
12448: PUSH
12449: LD_EXP 41
12453: PPUSH
12454: LD_VAR 0 5
12458: PPUSH
12459: LD_EXP 41
12463: PUSH
12464: LD_VAR 0 5
12468: ARRAY
12469: PUSH
12470: LD_INT 1
12472: PLUS
12473: PPUSH
12474: CALL_OW 1
12478: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12479: LD_ADDR_EXP 38
12483: PUSH
12484: LD_EXP 38
12488: PPUSH
12489: LD_VAR 0 5
12493: PUSH
12494: LD_EXP 38
12498: PUSH
12499: LD_VAR 0 5
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: PLUS
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PPUSH
12513: LD_VAR 0 2
12517: PUSH
12518: LD_VAR 0 4
12522: ARRAY
12523: PUSH
12524: LD_VAR 0 2
12528: PUSH
12529: LD_VAR 0 4
12533: ARRAY
12534: PPUSH
12535: CALL_OW 255
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL 37259 0 3
12548: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12549: LD_VAR 0 2
12553: PUSH
12554: LD_VAR 0 4
12558: ARRAY
12559: PPUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 255
12569: PPUSH
12570: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12574: LD_VAR 0 2
12578: PUSH
12579: LD_VAR 0 4
12583: ARRAY
12584: PPUSH
12585: CALL_OW 141
// end ;
12589: GO 12421
12591: POP
12592: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_EXP 38
12602: PUSH
12603: LD_VAR 0 5
12607: ARRAY
12608: PUSH
12609: LD_INT 0
12611: PLUS
12612: PPUSH
12613: CALL_OW 505
// end ;
12617: LD_VAR 0 3
12621: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
12626: PPUSH
12627: PPUSH
// if not hack in hackTanks then
12628: LD_VAR 0 1
12632: PUSH
12633: LD_EXP 37
12637: IN
12638: NOT
12639: IFFALSE 12643
// exit ;
12641: GO 12887
// index := GetElementIndex ( hackTanks , hack ) ;
12643: LD_ADDR_VAR 0 4
12647: PUSH
12648: LD_EXP 37
12652: PPUSH
12653: LD_VAR 0 1
12657: PPUSH
12658: CALL 37042 0 2
12662: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: DOUBLE
12669: LD_EXP 38
12673: PUSH
12674: LD_VAR 0 4
12678: ARRAY
12679: INC
12680: ST_TO_ADDR
12681: LD_INT 1
12683: PUSH
12684: FOR_DOWNTO
12685: IFFALSE 12861
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12687: LD_ADDR_VAR 0 5
12691: PUSH
12692: LD_EXP 38
12696: PUSH
12697: LD_VAR 0 4
12701: ARRAY
12702: PUSH
12703: LD_VAR 0 3
12707: ARRAY
12708: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12709: LD_VAR 0 5
12713: PUSH
12714: LD_INT 1
12716: ARRAY
12717: PPUSH
12718: CALL_OW 302
12722: NOT
12723: IFTRUE 12751
12725: PUSH
12726: LD_VAR 0 5
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: CALL_OW 255
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 255
12749: NONEQUAL
12750: OR
12751: IFFALSE 12859
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12753: LD_VAR 0 5
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PPUSH
12762: CALL_OW 305
12766: IFFALSE 12794
12768: PUSH
12769: LD_VAR 0 5
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: CALL_OW 255
12782: PUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 255
12792: EQUAL
12793: AND
12794: IFFALSE 12818
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12796: LD_VAR 0 5
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PPUSH
12805: LD_VAR 0 5
12809: PUSH
12810: LD_INT 2
12812: ARRAY
12813: PPUSH
12814: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12818: LD_ADDR_EXP 38
12822: PUSH
12823: LD_EXP 38
12827: PPUSH
12828: LD_VAR 0 4
12832: PPUSH
12833: LD_EXP 38
12837: PUSH
12838: LD_VAR 0 4
12842: ARRAY
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: CALL_OW 3
12853: PPUSH
12854: CALL_OW 1
12858: ST_TO_ADDR
// end ; end ;
12859: GO 12684
12861: POP
12862: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12863: LD_VAR 0 1
12867: PPUSH
12868: LD_EXP 38
12872: PUSH
12873: LD_VAR 0 4
12877: ARRAY
12878: PUSH
12879: LD_INT 0
12881: PLUS
12882: PPUSH
12883: CALL_OW 505
// end ;
12887: LD_VAR 0 2
12891: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
12896: PPUSH
12897: PPUSH
// if not hack in hackTanks then
12898: LD_VAR 0 1
12902: PUSH
12903: LD_EXP 37
12907: IN
12908: NOT
12909: IFFALSE 12913
// exit ;
12911: GO 12998
// index := GetElementIndex ( hackTanks , hack ) ;
12913: LD_ADDR_VAR 0 5
12917: PUSH
12918: LD_EXP 37
12922: PPUSH
12923: LD_VAR 0 1
12927: PPUSH
12928: CALL 37042 0 2
12932: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12933: LD_ADDR_VAR 0 4
12937: PUSH
12938: DOUBLE
12939: LD_INT 1
12941: DEC
12942: ST_TO_ADDR
12943: LD_EXP 38
12947: PUSH
12948: LD_VAR 0 5
12952: ARRAY
12953: PUSH
12954: FOR_TO
12955: IFFALSE 12996
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12957: LD_EXP 38
12961: PUSH
12962: LD_VAR 0 5
12966: ARRAY
12967: PUSH
12968: LD_VAR 0 4
12972: ARRAY
12973: PUSH
12974: LD_INT 1
12976: ARRAY
12977: PUSH
12978: LD_VAR 0 2
12982: EQUAL
12983: IFFALSE 12994
// KillUnit ( vehicle ) ;
12985: LD_VAR 0 2
12989: PPUSH
12990: CALL_OW 66
12994: GO 12954
12996: POP
12997: POP
// end ;
12998: LD_VAR 0 3
13002: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
13003: LD_EXP 42
13007: NOT
13008: IFFALSE 13141
13010: GO 13012
13012: DISABLE
13013: LD_INT 0
13015: PPUSH
// begin initMiner := true ;
13016: LD_ADDR_EXP 42
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// minersList := [ ] ;
13024: LD_ADDR_EXP 43
13028: PUSH
13029: EMPTY
13030: ST_TO_ADDR
// minerMinesList := [ ] ;
13031: LD_ADDR_EXP 44
13035: PUSH
13036: EMPTY
13037: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
13038: LD_ADDR_EXP 45
13042: PUSH
13043: LD_INT 10
13045: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13046: LD_ADDR_VAR 0 1
13050: PUSH
13051: LD_INT 34
13053: PUSH
13054: LD_INT 81
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 69
13065: PUSH
13066: FOR_IN
13067: IFFALSE 13139
// begin if not i in minersList then
13069: LD_VAR 0 1
13073: PUSH
13074: LD_EXP 43
13078: IN
13079: NOT
13080: IFFALSE 13137
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13082: LD_ADDR_EXP 43
13086: PUSH
13087: LD_EXP 43
13091: PPUSH
13092: LD_EXP 43
13096: PUSH
13097: LD_INT 1
13099: PLUS
13100: PPUSH
13101: LD_VAR 0 1
13105: PPUSH
13106: CALL_OW 1
13110: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13111: LD_ADDR_EXP 44
13115: PUSH
13116: LD_EXP 44
13120: PPUSH
13121: LD_EXP 44
13125: PUSH
13126: LD_INT 1
13128: PLUS
13129: PPUSH
13130: EMPTY
13131: PPUSH
13132: CALL_OW 1
13136: ST_TO_ADDR
// end end ;
13137: GO 13066
13139: POP
13140: POP
// end ;
13141: PPOPN 1
13143: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
13144: LD_EXP 42
13148: IFFALSE 13179
13150: PUSH
13151: LD_EXP 44
13155: PPUSH
13156: CALL 34341 0 1
13160: IFTRUE 13178
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 81
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: OR
13178: AND
13179: IFFALSE 13699
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
13188: PPUSH
13189: PPUSH
// begin enable ;
13190: ENABLE
// for i := minerMinesList downto 1 do
13191: LD_ADDR_VAR 0 1
13195: PUSH
13196: DOUBLE
13197: LD_EXP 44
13201: INC
13202: ST_TO_ADDR
13203: LD_INT 1
13205: PUSH
13206: FOR_DOWNTO
13207: IFFALSE 13697
// begin side := GetSide ( minersList [ i ] ) ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_EXP 43
13218: PUSH
13219: LD_VAR 0 1
13223: ARRAY
13224: PPUSH
13225: CALL_OW 255
13229: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
13230: LD_EXP 43
13234: PUSH
13235: LD_VAR 0 1
13239: ARRAY
13240: PPUSH
13241: CALL_OW 300
13245: IFFALSE 13266
13247: PUSH
13248: LD_VAR 0 3
13252: PUSH
13253: LD_OWVAR 2
13257: PUSH
13258: LD_INT 9
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: IN
13265: AND
13266: IFFALSE 13299
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
13268: LD_EXP 43
13272: PUSH
13273: LD_VAR 0 1
13277: ARRAY
13278: PPUSH
13279: LD_EXP 44
13283: PUSH
13284: LD_VAR 0 1
13288: ARRAY
13289: PPUSH
13290: CALL 34341 0 1
13294: PPUSH
13295: CALL_OW 505
// if not minerMinesList [ i ] then
13299: LD_EXP 44
13303: PUSH
13304: LD_VAR 0 1
13308: ARRAY
13309: NOT
13310: IFFALSE 13314
// continue ;
13312: GO 13206
// for j := minerMinesList [ i ] downto 1 do
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: DOUBLE
13320: LD_EXP 44
13324: PUSH
13325: LD_VAR 0 1
13329: ARRAY
13330: INC
13331: ST_TO_ADDR
13332: LD_INT 1
13334: PUSH
13335: FOR_DOWNTO
13336: IFFALSE 13693
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
13338: LD_EXP 43
13342: PUSH
13343: LD_VAR 0 1
13347: ARRAY
13348: PPUSH
13349: CALL_OW 301
13353: IFTRUE 13373
13355: PUSH
13356: LD_EXP 43
13360: PUSH
13361: LD_VAR 0 1
13365: ARRAY
13366: PPUSH
13367: CALL_OW 305
13371: NOT
13372: OR
13373: IFFALSE 13464
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13375: LD_EXP 44
13379: PUSH
13380: LD_VAR 0 1
13384: ARRAY
13385: PUSH
13386: LD_VAR 0 2
13390: ARRAY
13391: PUSH
13392: LD_INT 1
13394: ARRAY
13395: PPUSH
13396: LD_EXP 44
13400: PUSH
13401: LD_VAR 0 1
13405: ARRAY
13406: PUSH
13407: LD_VAR 0 2
13411: ARRAY
13412: PUSH
13413: LD_INT 2
13415: ARRAY
13416: PPUSH
13417: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13421: LD_ADDR_EXP 44
13425: PUSH
13426: LD_EXP 44
13430: PPUSH
13431: LD_VAR 0 1
13435: PPUSH
13436: LD_EXP 44
13440: PUSH
13441: LD_VAR 0 1
13445: ARRAY
13446: PPUSH
13447: LD_VAR 0 2
13451: PPUSH
13452: CALL_OW 3
13456: PPUSH
13457: CALL_OW 1
13461: ST_TO_ADDR
// continue ;
13462: GO 13335
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13464: LD_ADDR_VAR 0 4
13468: PUSH
13469: LD_EXP 44
13473: PUSH
13474: LD_VAR 0 1
13478: ARRAY
13479: PUSH
13480: LD_VAR 0 2
13484: ARRAY
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: LD_EXP 44
13494: PUSH
13495: LD_VAR 0 1
13499: ARRAY
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: PUSH
13507: LD_INT 2
13509: ARRAY
13510: PPUSH
13511: CALL_OW 428
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 4
13520: NOT
13521: IFFALSE 13525
// continue ;
13523: GO 13335
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13525: LD_VAR 0 4
13529: PUSH
13530: LD_INT 81
13532: PUSH
13533: LD_VAR 0 3
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 69
13546: IN
13547: IFFALSE 13597
13549: PUSH
13550: LD_EXP 44
13554: PUSH
13555: LD_VAR 0 1
13559: ARRAY
13560: PUSH
13561: LD_VAR 0 2
13565: ARRAY
13566: PUSH
13567: LD_INT 1
13569: ARRAY
13570: PPUSH
13571: LD_EXP 44
13575: PUSH
13576: LD_VAR 0 1
13580: ARRAY
13581: PUSH
13582: LD_VAR 0 2
13586: ARRAY
13587: PUSH
13588: LD_INT 2
13590: ARRAY
13591: PPUSH
13592: CALL_OW 458
13596: AND
13597: IFFALSE 13691
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13599: LD_EXP 44
13603: PUSH
13604: LD_VAR 0 1
13608: ARRAY
13609: PUSH
13610: LD_VAR 0 2
13614: ARRAY
13615: PUSH
13616: LD_INT 1
13618: ARRAY
13619: PPUSH
13620: LD_EXP 44
13624: PUSH
13625: LD_VAR 0 1
13629: ARRAY
13630: PUSH
13631: LD_VAR 0 2
13635: ARRAY
13636: PUSH
13637: LD_INT 2
13639: ARRAY
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13650: LD_ADDR_EXP 44
13654: PUSH
13655: LD_EXP 44
13659: PPUSH
13660: LD_VAR 0 1
13664: PPUSH
13665: LD_EXP 44
13669: PUSH
13670: LD_VAR 0 1
13674: ARRAY
13675: PPUSH
13676: LD_VAR 0 2
13680: PPUSH
13681: CALL_OW 3
13685: PPUSH
13686: CALL_OW 1
13690: ST_TO_ADDR
// end ; end ;
13691: GO 13335
13693: POP
13694: POP
// end ;
13695: GO 13206
13697: POP
13698: POP
// end ;
13699: PPOPN 4
13701: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
// result := false ;
13708: LD_ADDR_VAR 0 4
13712: PUSH
13713: LD_INT 0
13715: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 264
13725: PUSH
13726: LD_INT 81
13728: EQUAL
13729: NOT
13730: IFFALSE 13734
// exit ;
13732: GO 14104
// side := GetSide ( unit ) ;
13734: LD_ADDR_VAR 0 6
13738: PUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 255
13748: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
13749: LD_ADDR_VAR 0 5
13753: PUSH
13754: LD_EXP 43
13758: PPUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL 37042 0 2
13768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13769: LD_EXP 44
13773: PUSH
13774: LD_VAR 0 5
13778: ARRAY
13779: PUSH
13780: LD_EXP 45
13784: GREATEREQUAL
13785: IFFALSE 13789
// exit ;
13787: GO 14104
// ComMoveXY ( unit , x , y ) ;
13789: LD_VAR 0 1
13793: PPUSH
13794: LD_VAR 0 2
13798: PPUSH
13799: LD_VAR 0 3
13803: PPUSH
13804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13808: LD_INT 35
13810: PPUSH
13811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13815: LD_VAR 0 1
13819: PPUSH
13820: LD_VAR 0 2
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: CALL 69098 0 3
13834: NOT
13835: IFFALSE 13848
13837: PUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 314
13847: AND
13848: IFFALSE 13852
// exit ;
13850: GO 14104
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13852: LD_VAR 0 2
13856: PPUSH
13857: LD_VAR 0 3
13861: PPUSH
13862: CALL_OW 428
13866: PUSH
13867: LD_VAR 0 1
13871: EQUAL
13872: IFFALSE 13886
13874: PUSH
13875: LD_VAR 0 1
13879: PPUSH
13880: CALL_OW 314
13884: NOT
13885: AND
13886: IFFALSE 13808
// if MineAtPos ( x , y ) then
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_VAR 0 3
13897: PPUSH
13898: CALL_OW 458
13902: IFFALSE 13906
// exit ;
13904: GO 14104
// if your_side = side then
13906: LD_OWVAR 2
13910: PUSH
13911: LD_VAR 0 6
13915: EQUAL
13916: IFFALSE 13935
// PlaySoundXY ( x , y , PlantMine ) ;
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: LD_STRING PlantMine
13930: PPUSH
13931: CALL_OW 366
// repeat wait ( 1 ) ;
13935: LD_INT 1
13937: PPUSH
13938: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
13942: LD_VAR 0 2
13946: PPUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_VAR 0 6
13956: PPUSH
13957: LD_INT 0
13959: PPUSH
13960: CALL_OW 454
13964: IFFALSE 13935
// if MineAtPos ( x , y ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 458
13980: IFFALSE 14096
// begin for i in minerMinesList [ index ] do
13982: LD_ADDR_VAR 0 7
13986: PUSH
13987: LD_EXP 44
13991: PUSH
13992: LD_VAR 0 5
13996: ARRAY
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14041
// if i [ 1 ] = x and i [ 2 ] = y then
14001: LD_VAR 0 7
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PUSH
14010: LD_VAR 0 2
14014: EQUAL
14015: IFFALSE 14033
14017: PUSH
14018: LD_VAR 0 7
14022: PUSH
14023: LD_INT 2
14025: ARRAY
14026: PUSH
14027: LD_VAR 0 3
14031: EQUAL
14032: AND
14033: IFFALSE 14039
// exit ;
14035: POP
14036: POP
14037: GO 14104
14039: GO 13998
14041: POP
14042: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14043: LD_ADDR_EXP 44
14047: PUSH
14048: LD_EXP 44
14052: PPUSH
14053: LD_VAR 0 5
14057: PUSH
14058: LD_EXP 44
14062: PUSH
14063: LD_VAR 0 5
14067: ARRAY
14068: PUSH
14069: LD_INT 1
14071: PLUS
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: LD_VAR 0 2
14081: PUSH
14082: LD_VAR 0 3
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL 37259 0 3
14095: ST_TO_ADDR
// end ; result := true ;
14096: LD_ADDR_VAR 0 4
14100: PUSH
14101: LD_INT 1
14103: ST_TO_ADDR
// end ;
14104: LD_VAR 0 4
14108: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14109: LD_INT 0
14111: PPUSH
14112: PPUSH
14113: PPUSH
// if not unit in minersList then
14114: LD_VAR 0 1
14118: PUSH
14119: LD_EXP 43
14123: IN
14124: NOT
14125: IFFALSE 14129
// exit ;
14127: GO 14336
// index := GetElementIndex ( minersList , unit ) ;
14129: LD_ADDR_VAR 0 6
14133: PUSH
14134: LD_EXP 43
14138: PPUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL 37042 0 2
14148: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14149: LD_ADDR_VAR 0 5
14153: PUSH
14154: DOUBLE
14155: LD_EXP 44
14159: PUSH
14160: LD_VAR 0 6
14164: ARRAY
14165: INC
14166: ST_TO_ADDR
14167: LD_INT 1
14169: PUSH
14170: FOR_DOWNTO
14171: IFFALSE 14334
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14173: LD_EXP 44
14177: PUSH
14178: LD_VAR 0 6
14182: ARRAY
14183: PUSH
14184: LD_VAR 0 5
14188: ARRAY
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PPUSH
14194: LD_EXP 44
14198: PUSH
14199: LD_VAR 0 6
14203: ARRAY
14204: PUSH
14205: LD_VAR 0 5
14209: ARRAY
14210: PUSH
14211: LD_INT 2
14213: ARRAY
14214: PPUSH
14215: LD_VAR 0 2
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL_OW 298
14229: PUSH
14230: LD_INT 6
14232: LESS
14233: IFFALSE 14332
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14235: LD_EXP 44
14239: PUSH
14240: LD_VAR 0 6
14244: ARRAY
14245: PUSH
14246: LD_VAR 0 5
14250: ARRAY
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: LD_EXP 44
14260: PUSH
14261: LD_VAR 0 6
14265: ARRAY
14266: PUSH
14267: LD_VAR 0 5
14271: ARRAY
14272: PUSH
14273: LD_INT 2
14275: ARRAY
14276: PPUSH
14277: LD_VAR 0 1
14281: PPUSH
14282: CALL_OW 255
14286: PPUSH
14287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14291: LD_ADDR_EXP 44
14295: PUSH
14296: LD_EXP 44
14300: PPUSH
14301: LD_VAR 0 6
14305: PPUSH
14306: LD_EXP 44
14310: PUSH
14311: LD_VAR 0 6
14315: ARRAY
14316: PPUSH
14317: LD_VAR 0 5
14321: PPUSH
14322: CALL_OW 3
14326: PPUSH
14327: CALL_OW 1
14331: ST_TO_ADDR
// end ; end ;
14332: GO 14170
14334: POP
14335: POP
// end ;
14336: LD_VAR 0 4
14340: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 264
14361: PUSH
14362: LD_INT 81
14364: EQUAL
14365: NOT
14366: IFTRUE 14381
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: LD_EXP 43
14378: IN
14379: NOT
14380: OR
14381: IFFALSE 14385
// exit ;
14383: GO 14711
// index := GetElementIndex ( minersList , unit ) ;
14385: LD_ADDR_VAR 0 6
14389: PUSH
14390: LD_EXP 43
14394: PPUSH
14395: LD_VAR 0 1
14399: PPUSH
14400: CALL 37042 0 2
14404: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14405: LD_ADDR_VAR 0 8
14409: PUSH
14410: LD_EXP 45
14414: PUSH
14415: LD_EXP 44
14419: PUSH
14420: LD_VAR 0 6
14424: ARRAY
14425: MINUS
14426: ST_TO_ADDR
// if not minesFreeAmount then
14427: LD_VAR 0 8
14431: NOT
14432: IFFALSE 14436
// exit ;
14434: GO 14711
// tmp := [ ] ;
14436: LD_ADDR_VAR 0 7
14440: PUSH
14441: EMPTY
14442: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14443: LD_ADDR_VAR 0 5
14447: PUSH
14448: DOUBLE
14449: LD_INT 1
14451: DEC
14452: ST_TO_ADDR
14453: LD_VAR 0 8
14457: PUSH
14458: FOR_TO
14459: IFFALSE 14658
// begin _d := rand ( 0 , 5 ) ;
14461: LD_ADDR_VAR 0 11
14465: PUSH
14466: LD_INT 0
14468: PPUSH
14469: LD_INT 5
14471: PPUSH
14472: CALL_OW 12
14476: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14477: LD_ADDR_VAR 0 12
14481: PUSH
14482: LD_INT 2
14484: PPUSH
14485: LD_INT 6
14487: PPUSH
14488: CALL_OW 12
14492: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14493: LD_ADDR_VAR 0 9
14497: PUSH
14498: LD_VAR 0 2
14502: PPUSH
14503: LD_VAR 0 11
14507: PPUSH
14508: LD_VAR 0 12
14512: PPUSH
14513: CALL_OW 272
14517: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14518: LD_ADDR_VAR 0 10
14522: PUSH
14523: LD_VAR 0 3
14527: PPUSH
14528: LD_VAR 0 11
14532: PPUSH
14533: LD_VAR 0 12
14537: PPUSH
14538: CALL_OW 273
14542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14543: LD_VAR 0 9
14547: PPUSH
14548: LD_VAR 0 10
14552: PPUSH
14553: CALL_OW 488
14557: IFFALSE 14581
14559: PUSH
14560: LD_VAR 0 9
14564: PUSH
14565: LD_VAR 0 10
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_VAR 0 7
14578: IN
14579: NOT
14580: AND
14581: IFFALSE 14600
14583: PUSH
14584: LD_VAR 0 9
14588: PPUSH
14589: LD_VAR 0 10
14593: PPUSH
14594: CALL_OW 458
14598: NOT
14599: AND
14600: IFFALSE 14642
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14602: LD_ADDR_VAR 0 7
14606: PUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 7
14616: PUSH
14617: LD_INT 1
14619: PLUS
14620: PPUSH
14621: LD_VAR 0 9
14625: PUSH
14626: LD_VAR 0 10
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 1
14639: ST_TO_ADDR
14640: GO 14656
// i := i - 1 ;
14642: LD_ADDR_VAR 0 5
14646: PUSH
14647: LD_VAR 0 5
14651: PUSH
14652: LD_INT 1
14654: MINUS
14655: ST_TO_ADDR
// end ;
14656: GO 14458
14658: POP
14659: POP
// for i in tmp do
14660: LD_ADDR_VAR 0 5
14664: PUSH
14665: LD_VAR 0 7
14669: PUSH
14670: FOR_IN
14671: IFFALSE 14709
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14673: LD_VAR 0 1
14677: PPUSH
14678: LD_VAR 0 5
14682: PUSH
14683: LD_INT 1
14685: ARRAY
14686: PPUSH
14687: LD_VAR 0 5
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PPUSH
14696: CALL 13702 0 3
14700: NOT
14701: IFFALSE 14707
// exit ;
14703: POP
14704: POP
14705: GO 14711
14707: GO 14670
14709: POP
14710: POP
// end ;
14711: LD_VAR 0 4
14715: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
14716: LD_INT 0
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
// if GetClass ( unit ) <> class_sniper then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 257
14736: PUSH
14737: LD_INT 5
14739: NONEQUAL
14740: IFFALSE 14744
// exit ;
14742: GO 15214
// dist := 8 ;
14744: LD_ADDR_VAR 0 5
14748: PUSH
14749: LD_INT 8
14751: ST_TO_ADDR
// viewRange := 12 ;
14752: LD_ADDR_VAR 0 8
14756: PUSH
14757: LD_INT 12
14759: ST_TO_ADDR
// side := GetSide ( unit ) ;
14760: LD_ADDR_VAR 0 6
14764: PUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 255
14774: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14775: LD_INT 61
14777: PPUSH
14778: LD_VAR 0 6
14782: PPUSH
14783: CALL_OW 321
14787: PUSH
14788: LD_INT 2
14790: EQUAL
14791: IFFALSE 14801
// viewRange := 16 ;
14793: LD_ADDR_VAR 0 8
14797: PUSH
14798: LD_INT 16
14800: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_VAR 0 2
14810: PPUSH
14811: LD_VAR 0 3
14815: PPUSH
14816: CALL_OW 297
14820: PUSH
14821: LD_VAR 0 5
14825: GREATER
14826: IFFALSE 14905
// begin ComMoveXY ( unit , x , y ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: LD_VAR 0 2
14837: PPUSH
14838: LD_VAR 0 3
14842: PPUSH
14843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14847: LD_INT 35
14849: PPUSH
14850: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14854: LD_VAR 0 1
14858: PPUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_VAR 0 3
14868: PPUSH
14869: CALL 69098 0 3
14873: NOT
14874: IFFALSE 14878
// exit ;
14876: GO 15214
// until GetDistUnitXY ( unit , x , y ) < dist ;
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_VAR 0 3
14892: PPUSH
14893: CALL_OW 297
14897: PUSH
14898: LD_VAR 0 5
14902: LESS
14903: IFFALSE 14847
// end ; ComTurnXY ( unit , x , y ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: LD_VAR 0 3
14919: PPUSH
14920: CALL_OW 118
// repeat if Multiplayer then
14924: LD_OWVAR 4
14928: IFFALSE 14939
// wait ( 35 ) else
14930: LD_INT 35
14932: PPUSH
14933: CALL_OW 67
14937: GO 14946
// wait ( 5 ) ;
14939: LD_INT 5
14941: PPUSH
14942: CALL_OW 67
// _d := GetDir ( unit ) ;
14946: LD_ADDR_VAR 0 11
14950: PUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 254
14960: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
14961: LD_ADDR_VAR 0 7
14965: PUSH
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL_OW 250
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 251
14985: PPUSH
14986: LD_VAR 0 2
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: CALL 71734 0 4
15000: ST_TO_ADDR
// until dir = _d ;
15001: LD_VAR 0 7
15005: PUSH
15006: LD_VAR 0 11
15010: EQUAL
15011: IFFALSE 14924
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
15013: LD_ADDR_VAR 0 9
15017: PUSH
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 250
15027: PPUSH
15028: LD_VAR 0 7
15032: PPUSH
15033: LD_VAR 0 5
15037: PPUSH
15038: CALL_OW 272
15042: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
15043: LD_ADDR_VAR 0 10
15047: PUSH
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL_OW 251
15057: PPUSH
15058: LD_VAR 0 7
15062: PPUSH
15063: LD_VAR 0 5
15067: PPUSH
15068: CALL_OW 273
15072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15073: LD_VAR 0 9
15077: PPUSH
15078: LD_VAR 0 10
15082: PPUSH
15083: CALL_OW 488
15087: NOT
15088: IFFALSE 15092
// exit ;
15090: GO 15214
// ComAnimCustom ( unit , 1 ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 592
// p := 0 ;
15104: LD_ADDR_VAR 0 12
15108: PUSH
15109: LD_INT 0
15111: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15112: LD_VAR 0 9
15116: PPUSH
15117: LD_VAR 0 10
15121: PPUSH
15122: LD_VAR 0 6
15126: PPUSH
15127: LD_VAR 0 8
15131: PPUSH
15132: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
15136: LD_INT 35
15138: PPUSH
15139: CALL_OW 67
// p := Inc ( p ) ;
15143: LD_ADDR_VAR 0 12
15147: PUSH
15148: LD_VAR 0 12
15152: PPUSH
15153: CALL 71690 0 1
15157: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
15158: LD_VAR 0 12
15162: PUSH
15163: LD_INT 3
15165: EQUAL
15166: IFTRUE 15180
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 302
15178: NOT
15179: OR
15180: IFTRUE 15193
15182: PUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 301
15192: OR
15193: IFFALSE 15136
// RemoveSeeing ( _x , _y , side ) ;
15195: LD_VAR 0 9
15199: PPUSH
15200: LD_VAR 0 10
15204: PPUSH
15205: LD_VAR 0 6
15209: PPUSH
15210: CALL_OW 331
// end ;
15214: LD_VAR 0 4
15218: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
15219: LD_INT 0
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
// if not unit then
15232: LD_VAR 0 1
15236: NOT
15237: IFFALSE 15241
// exit ;
15239: GO 15512
// side := GetSide ( unit ) ;
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 255
15255: ST_TO_ADDR
// x := GetX ( unit ) ;
15256: LD_ADDR_VAR 0 5
15260: PUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 250
15270: ST_TO_ADDR
// y := GetY ( unit ) ;
15271: LD_ADDR_VAR 0 6
15275: PUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 251
15285: ST_TO_ADDR
// r := 8 ;
15286: LD_ADDR_VAR 0 4
15290: PUSH
15291: LD_INT 8
15293: ST_TO_ADDR
// if x - r < 0 then
15294: LD_VAR 0 5
15298: PUSH
15299: LD_VAR 0 4
15303: MINUS
15304: PUSH
15305: LD_INT 0
15307: LESS
15308: IFFALSE 15320
// min_x := 0 else
15310: LD_ADDR_VAR 0 7
15314: PUSH
15315: LD_INT 0
15317: ST_TO_ADDR
15318: GO 15336
// min_x := x - r ;
15320: LD_ADDR_VAR 0 7
15324: PUSH
15325: LD_VAR 0 5
15329: PUSH
15330: LD_VAR 0 4
15334: MINUS
15335: ST_TO_ADDR
// if y - r < 0 then
15336: LD_VAR 0 6
15340: PUSH
15341: LD_VAR 0 4
15345: MINUS
15346: PUSH
15347: LD_INT 0
15349: LESS
15350: IFFALSE 15362
// min_y := 0 else
15352: LD_ADDR_VAR 0 8
15356: PUSH
15357: LD_INT 0
15359: ST_TO_ADDR
15360: GO 15378
// min_y := y - r ;
15362: LD_ADDR_VAR 0 8
15366: PUSH
15367: LD_VAR 0 6
15371: PUSH
15372: LD_VAR 0 4
15376: MINUS
15377: ST_TO_ADDR
// max_x := x + r ;
15378: LD_ADDR_VAR 0 9
15382: PUSH
15383: LD_VAR 0 5
15387: PUSH
15388: LD_VAR 0 4
15392: PLUS
15393: ST_TO_ADDR
// max_y := y + r ;
15394: LD_ADDR_VAR 0 10
15398: PUSH
15399: LD_VAR 0 6
15403: PUSH
15404: LD_VAR 0 4
15408: PLUS
15409: ST_TO_ADDR
// for _x = min_x to max_x do
15410: LD_ADDR_VAR 0 11
15414: PUSH
15415: DOUBLE
15416: LD_VAR 0 7
15420: DEC
15421: ST_TO_ADDR
15422: LD_VAR 0 9
15426: PUSH
15427: FOR_TO
15428: IFFALSE 15510
// for _y = min_y to max_y do
15430: LD_ADDR_VAR 0 12
15434: PUSH
15435: DOUBLE
15436: LD_VAR 0 8
15440: DEC
15441: ST_TO_ADDR
15442: LD_VAR 0 10
15446: PUSH
15447: FOR_TO
15448: IFFALSE 15506
// begin if not ValidHex ( _x , _y ) then
15450: LD_VAR 0 11
15454: PPUSH
15455: LD_VAR 0 12
15459: PPUSH
15460: CALL_OW 488
15464: NOT
15465: IFFALSE 15469
// continue ;
15467: GO 15447
// if MineAtPos ( _x , _y ) then
15469: LD_VAR 0 11
15473: PPUSH
15474: LD_VAR 0 12
15478: PPUSH
15479: CALL_OW 458
15483: IFFALSE 15504
// ViewMineAtPos ( _x , _y , side ) ;
15485: LD_VAR 0 11
15489: PPUSH
15490: LD_VAR 0 12
15494: PPUSH
15495: LD_VAR 0 3
15499: PPUSH
15500: CALL_OW 457
// end ;
15504: GO 15447
15506: POP
15507: POP
15508: GO 15427
15510: POP
15511: POP
// end ;
15512: LD_VAR 0 2
15516: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
15517: LD_INT 0
15519: PPUSH
15520: PPUSH
15521: PPUSH
15522: PPUSH
15523: PPUSH
15524: PPUSH
15525: PPUSH
// if not units then
15526: LD_VAR 0 1
15530: NOT
15531: IFFALSE 15535
// exit ;
15533: GO 15999
// scaners := [ ] ;
15535: LD_ADDR_VAR 0 6
15539: PUSH
15540: EMPTY
15541: ST_TO_ADDR
// for i in units do
15542: LD_ADDR_VAR 0 3
15546: PUSH
15547: LD_VAR 0 1
15551: PUSH
15552: FOR_IN
15553: IFFALSE 15710
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
15555: LD_VAR 0 3
15559: PPUSH
15560: CALL_OW 264
15564: PUSH
15565: LD_INT 11
15567: NONEQUAL
15568: IFTRUE 15582
15570: PUSH
15571: LD_VAR 0 3
15575: PPUSH
15576: CALL_OW 302
15580: NOT
15581: OR
15582: IFTRUE 15599
15584: PUSH
15585: LD_VAR 0 3
15589: PPUSH
15590: CALL_OW 110
15594: PUSH
15595: LD_INT 502
15597: EQUAL
15598: OR
15599: IFFALSE 15603
// continue ;
15601: GO 15552
// ComStop ( i ) ;
15603: LD_VAR 0 3
15607: PPUSH
15608: CALL_OW 141
// x := GetX ( i ) ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: CALL_OW 250
15626: ST_TO_ADDR
// y := GetY ( i ) ;
15627: LD_ADDR_VAR 0 5
15631: PUSH
15632: LD_VAR 0 3
15636: PPUSH
15637: CALL_OW 251
15641: ST_TO_ADDR
// if GetSide ( i ) = your_side then
15642: LD_VAR 0 3
15646: PPUSH
15647: CALL_OW 255
15651: PUSH
15652: LD_OWVAR 2
15656: EQUAL
15657: IFFALSE 15676
// PlaySoundXY ( x , y , mineDetector ) ;
15659: LD_VAR 0 4
15663: PPUSH
15664: LD_VAR 0 5
15668: PPUSH
15669: LD_STRING mineDetector
15671: PPUSH
15672: CALL_OW 366
// scaners := Join ( scaners , i ) ;
15676: LD_ADDR_VAR 0 6
15680: PUSH
15681: LD_VAR 0 6
15685: PPUSH
15686: LD_VAR 0 3
15690: PPUSH
15691: CALL 70317 0 2
15695: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
15696: LD_VAR 0 3
15700: PPUSH
15701: LD_INT 502
15703: PPUSH
15704: CALL_OW 109
// end ;
15708: GO 15552
15710: POP
15711: POP
// if not scaners then
15712: LD_VAR 0 6
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15999
// wait ( 3 ) ;
15721: LD_INT 3
15723: PPUSH
15724: CALL_OW 67
// timer := 6 ;
15728: LD_ADDR_VAR 0 7
15732: PUSH
15733: LD_INT 6
15735: ST_TO_ADDR
// repeat for i in scaners do
15736: LD_ADDR_VAR 0 3
15740: PUSH
15741: LD_VAR 0 6
15745: PUSH
15746: FOR_IN
15747: IFFALSE 15897
// begin side := GetSide ( i ) ;
15749: LD_ADDR_VAR 0 8
15753: PUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: CALL_OW 255
15763: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
15764: LD_VAR 0 3
15768: PPUSH
15769: CALL_OW 302
15773: NOT
15774: IFTRUE 15787
15776: PUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: CALL_OW 314
15786: OR
15787: IFTRUE 15818
15789: PUSH
15790: LD_VAR 0 3
15794: PPUSH
15795: CALL_OW 263
15799: PUSH
15800: LD_INT 1
15802: EQUAL
15803: IFFALSE 15817
15805: PUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: CALL_OW 311
15815: NOT
15816: AND
15817: OR
15818: IFFALSE 15862
// begin SetUnitDisplayNumber ( i , 0 ) ;
15820: LD_VAR 0 3
15824: PPUSH
15825: LD_INT 0
15827: PPUSH
15828: CALL_OW 505
// SetTag ( i , 0 ) ;
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_INT 0
15839: PPUSH
15840: CALL_OW 109
// scaners := scaners diff i ;
15844: LD_ADDR_VAR 0 6
15848: PUSH
15849: LD_VAR 0 6
15853: PUSH
15854: LD_VAR 0 3
15858: DIFF
15859: ST_TO_ADDR
// continue ;
15860: GO 15746
// end ; if side in [ your_side , 9 ] then
15862: LD_VAR 0 8
15866: PUSH
15867: LD_OWVAR 2
15871: PUSH
15872: LD_INT 9
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: IN
15879: IFFALSE 15895
// SetUnitDisplayNumber ( i , timer ) ;
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_VAR 0 7
15890: PPUSH
15891: CALL_OW 505
// end ;
15895: GO 15746
15897: POP
15898: POP
// if not scaners then
15899: LD_VAR 0 6
15903: NOT
15904: IFFALSE 15908
// exit ;
15906: GO 15999
// timer := Dec ( timer ) ;
15908: LD_ADDR_VAR 0 7
15912: PUSH
15913: LD_VAR 0 7
15917: PPUSH
15918: CALL 71712 0 1
15922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15923: LD_INT 35
15925: PPUSH
15926: CALL_OW 67
// until timer = 0 ;
15930: LD_VAR 0 7
15934: PUSH
15935: LD_INT 0
15937: EQUAL
15938: IFFALSE 15736
// if not scaners then
15940: LD_VAR 0 6
15944: NOT
15945: IFFALSE 15949
// exit ;
15947: GO 15999
// for i in scaners do
15949: LD_ADDR_VAR 0 3
15953: PUSH
15954: LD_VAR 0 6
15958: PUSH
15959: FOR_IN
15960: IFFALSE 15997
// begin SetUnitDisplayNumber ( i , 0 ) ;
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 0
15969: PPUSH
15970: CALL_OW 505
// SetTag ( i , 0 ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 109
// RevealDetectorMine ( i ) ;
15986: LD_VAR 0 3
15990: PPUSH
15991: CALL 15219 0 1
// end ;
15995: GO 15959
15997: POP
15998: POP
// end ;
15999: LD_VAR 0 2
16003: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
16004: LD_INT 0
16006: PPUSH
// if p1 = mine_detector_mode then
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 103
16014: EQUAL
16015: IFFALSE 16026
// DetectMine ( units ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: CALL 15517 0 1
// end ; end_of_file
16026: LD_VAR 0 7
16030: RET
// export globalGameSaveCounter ; every 0 0$1 do
16031: GO 16033
16033: DISABLE
// begin enable ;
16034: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16035: LD_STRING updateTimer(
16037: PUSH
16038: LD_OWVAR 1
16042: STR
16043: PUSH
16044: LD_STRING );
16046: STR
16047: PPUSH
16048: CALL_OW 559
// end ;
16052: END
// every 0 0$1 do
16053: GO 16055
16055: DISABLE
// begin globalGameSaveCounter := 0 ;
16056: LD_ADDR_EXP 46
16060: PUSH
16061: LD_INT 0
16063: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
16064: LD_STRING setGameSaveCounter(0)
16066: PPUSH
16067: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
16071: LD_STRING initStreamRollete();
16073: PPUSH
16074: CALL_OW 559
// InitStreamMode ;
16078: CALL 17430 0 0
// DefineStreamItems ( false ) ;
16082: LD_INT 0
16084: PPUSH
16085: CALL 17894 0 1
// end ;
16089: END
// export function SOS_MapStart ( ) ; begin
16090: LD_INT 0
16092: PPUSH
// if streamModeActive then
16093: LD_EXP 47
16097: IFFALSE 16106
// DefineStreamItems ( true ) ;
16099: LD_INT 1
16101: PPUSH
16102: CALL 17894 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
16106: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
16108: PPUSH
16109: CALL_OW 559
// UpdateLuaVariables ( ) ;
16113: CALL 16130 0 0
// UpdateFactoryWaypoints ( ) ;
16117: CALL 31016 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16121: CALL 31268 0 0
// end ;
16125: LD_VAR 0 1
16129: RET
// function UpdateLuaVariables ( ) ; begin
16130: LD_INT 0
16132: PPUSH
// if globalGameSaveCounter then
16133: LD_EXP 46
16137: IFFALSE 16171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
16139: LD_ADDR_EXP 46
16143: PUSH
16144: LD_EXP 46
16148: PPUSH
16149: CALL 71690 0 1
16153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16154: LD_STRING setGameSaveCounter(
16156: PUSH
16157: LD_EXP 46
16161: STR
16162: PUSH
16163: LD_STRING )
16165: STR
16166: PPUSH
16167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
16171: LD_STRING setGameDifficulty(
16173: PUSH
16174: LD_OWVAR 67
16178: STR
16179: PUSH
16180: LD_STRING )
16182: STR
16183: PPUSH
16184: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
16188: LD_STRING displayDifficulty(
16190: PUSH
16191: LD_OWVAR 67
16195: STR
16196: PUSH
16197: LD_STRING )
16199: STR
16200: PPUSH
16201: CALL_OW 559
// end ;
16205: LD_VAR 0 1
16209: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16210: LD_INT 0
16212: PPUSH
// if p2 = stream_mode then
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 100
16220: EQUAL
16221: IFFALSE 17224
// begin if not StreamModeActive then
16223: LD_EXP 47
16227: NOT
16228: IFFALSE 16238
// StreamModeActive := true ;
16230: LD_ADDR_EXP 47
16234: PUSH
16235: LD_INT 1
16237: ST_TO_ADDR
// if p3 = 0 then
16238: LD_VAR 0 3
16242: PUSH
16243: LD_INT 0
16245: EQUAL
16246: IFFALSE 16252
// InitStreamMode ;
16248: CALL 17430 0 0
// if p3 = 1 then
16252: LD_VAR 0 3
16256: PUSH
16257: LD_INT 1
16259: EQUAL
16260: IFFALSE 16270
// sRocket := true ;
16262: LD_ADDR_EXP 52
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// if p3 = 2 then
16270: LD_VAR 0 3
16274: PUSH
16275: LD_INT 2
16277: EQUAL
16278: IFFALSE 16288
// sSpeed := true ;
16280: LD_ADDR_EXP 51
16284: PUSH
16285: LD_INT 1
16287: ST_TO_ADDR
// if p3 = 3 then
16288: LD_VAR 0 3
16292: PUSH
16293: LD_INT 3
16295: EQUAL
16296: IFFALSE 16306
// sEngine := true ;
16298: LD_ADDR_EXP 53
16302: PUSH
16303: LD_INT 1
16305: ST_TO_ADDR
// if p3 = 4 then
16306: LD_VAR 0 3
16310: PUSH
16311: LD_INT 4
16313: EQUAL
16314: IFFALSE 16324
// sSpec := true ;
16316: LD_ADDR_EXP 50
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// if p3 = 5 then
16324: LD_VAR 0 3
16328: PUSH
16329: LD_INT 5
16331: EQUAL
16332: IFFALSE 16342
// sLevel := true ;
16334: LD_ADDR_EXP 54
16338: PUSH
16339: LD_INT 1
16341: ST_TO_ADDR
// if p3 = 6 then
16342: LD_VAR 0 3
16346: PUSH
16347: LD_INT 6
16349: EQUAL
16350: IFFALSE 16360
// sArmoury := true ;
16352: LD_ADDR_EXP 55
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// if p3 = 7 then
16360: LD_VAR 0 3
16364: PUSH
16365: LD_INT 7
16367: EQUAL
16368: IFFALSE 16378
// sRadar := true ;
16370: LD_ADDR_EXP 56
16374: PUSH
16375: LD_INT 1
16377: ST_TO_ADDR
// if p3 = 8 then
16378: LD_VAR 0 3
16382: PUSH
16383: LD_INT 8
16385: EQUAL
16386: IFFALSE 16396
// sBunker := true ;
16388: LD_ADDR_EXP 57
16392: PUSH
16393: LD_INT 1
16395: ST_TO_ADDR
// if p3 = 9 then
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 9
16403: EQUAL
16404: IFFALSE 16414
// sHack := true ;
16406: LD_ADDR_EXP 58
16410: PUSH
16411: LD_INT 1
16413: ST_TO_ADDR
// if p3 = 10 then
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 10
16421: EQUAL
16422: IFFALSE 16432
// sFire := true ;
16424: LD_ADDR_EXP 59
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// if p3 = 11 then
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 11
16439: EQUAL
16440: IFFALSE 16450
// sRefresh := true ;
16442: LD_ADDR_EXP 60
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if p3 = 12 then
16450: LD_VAR 0 3
16454: PUSH
16455: LD_INT 12
16457: EQUAL
16458: IFFALSE 16468
// sExp := true ;
16460: LD_ADDR_EXP 61
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// if p3 = 13 then
16468: LD_VAR 0 3
16472: PUSH
16473: LD_INT 13
16475: EQUAL
16476: IFFALSE 16486
// sDepot := true ;
16478: LD_ADDR_EXP 62
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
// if p3 = 14 then
16486: LD_VAR 0 3
16490: PUSH
16491: LD_INT 14
16493: EQUAL
16494: IFFALSE 16504
// sFlag := true ;
16496: LD_ADDR_EXP 63
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// if p3 = 15 then
16504: LD_VAR 0 3
16508: PUSH
16509: LD_INT 15
16511: EQUAL
16512: IFFALSE 16522
// sKamikadze := true ;
16514: LD_ADDR_EXP 71
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// if p3 = 16 then
16522: LD_VAR 0 3
16526: PUSH
16527: LD_INT 16
16529: EQUAL
16530: IFFALSE 16540
// sTroll := true ;
16532: LD_ADDR_EXP 72
16536: PUSH
16537: LD_INT 1
16539: ST_TO_ADDR
// if p3 = 17 then
16540: LD_VAR 0 3
16544: PUSH
16545: LD_INT 17
16547: EQUAL
16548: IFFALSE 16558
// sSlow := true ;
16550: LD_ADDR_EXP 73
16554: PUSH
16555: LD_INT 1
16557: ST_TO_ADDR
// if p3 = 18 then
16558: LD_VAR 0 3
16562: PUSH
16563: LD_INT 18
16565: EQUAL
16566: IFFALSE 16576
// sLack := true ;
16568: LD_ADDR_EXP 74
16572: PUSH
16573: LD_INT 1
16575: ST_TO_ADDR
// if p3 = 19 then
16576: LD_VAR 0 3
16580: PUSH
16581: LD_INT 19
16583: EQUAL
16584: IFFALSE 16594
// sTank := true ;
16586: LD_ADDR_EXP 76
16590: PUSH
16591: LD_INT 1
16593: ST_TO_ADDR
// if p3 = 20 then
16594: LD_VAR 0 3
16598: PUSH
16599: LD_INT 20
16601: EQUAL
16602: IFFALSE 16612
// sRemote := true ;
16604: LD_ADDR_EXP 77
16608: PUSH
16609: LD_INT 1
16611: ST_TO_ADDR
// if p3 = 21 then
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 21
16619: EQUAL
16620: IFFALSE 16630
// sPowell := true ;
16622: LD_ADDR_EXP 78
16626: PUSH
16627: LD_INT 1
16629: ST_TO_ADDR
// if p3 = 22 then
16630: LD_VAR 0 3
16634: PUSH
16635: LD_INT 22
16637: EQUAL
16638: IFFALSE 16648
// sTeleport := true ;
16640: LD_ADDR_EXP 81
16644: PUSH
16645: LD_INT 1
16647: ST_TO_ADDR
// if p3 = 23 then
16648: LD_VAR 0 3
16652: PUSH
16653: LD_INT 23
16655: EQUAL
16656: IFFALSE 16666
// sOilTower := true ;
16658: LD_ADDR_EXP 83
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// if p3 = 24 then
16666: LD_VAR 0 3
16670: PUSH
16671: LD_INT 24
16673: EQUAL
16674: IFFALSE 16684
// sShovel := true ;
16676: LD_ADDR_EXP 84
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// if p3 = 25 then
16684: LD_VAR 0 3
16688: PUSH
16689: LD_INT 25
16691: EQUAL
16692: IFFALSE 16702
// sSheik := true ;
16694: LD_ADDR_EXP 85
16698: PUSH
16699: LD_INT 1
16701: ST_TO_ADDR
// if p3 = 26 then
16702: LD_VAR 0 3
16706: PUSH
16707: LD_INT 26
16709: EQUAL
16710: IFFALSE 16720
// sEarthquake := true ;
16712: LD_ADDR_EXP 87
16716: PUSH
16717: LD_INT 1
16719: ST_TO_ADDR
// if p3 = 27 then
16720: LD_VAR 0 3
16724: PUSH
16725: LD_INT 27
16727: EQUAL
16728: IFFALSE 16738
// sAI := true ;
16730: LD_ADDR_EXP 88
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// if p3 = 28 then
16738: LD_VAR 0 3
16742: PUSH
16743: LD_INT 28
16745: EQUAL
16746: IFFALSE 16756
// sCargo := true ;
16748: LD_ADDR_EXP 91
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// if p3 = 29 then
16756: LD_VAR 0 3
16760: PUSH
16761: LD_INT 29
16763: EQUAL
16764: IFFALSE 16774
// sDLaser := true ;
16766: LD_ADDR_EXP 92
16770: PUSH
16771: LD_INT 1
16773: ST_TO_ADDR
// if p3 = 30 then
16774: LD_VAR 0 3
16778: PUSH
16779: LD_INT 30
16781: EQUAL
16782: IFFALSE 16792
// sExchange := true ;
16784: LD_ADDR_EXP 93
16788: PUSH
16789: LD_INT 1
16791: ST_TO_ADDR
// if p3 = 31 then
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 31
16799: EQUAL
16800: IFFALSE 16810
// sFac := true ;
16802: LD_ADDR_EXP 94
16806: PUSH
16807: LD_INT 1
16809: ST_TO_ADDR
// if p3 = 32 then
16810: LD_VAR 0 3
16814: PUSH
16815: LD_INT 32
16817: EQUAL
16818: IFFALSE 16828
// sPower := true ;
16820: LD_ADDR_EXP 95
16824: PUSH
16825: LD_INT 1
16827: ST_TO_ADDR
// if p3 = 33 then
16828: LD_VAR 0 3
16832: PUSH
16833: LD_INT 33
16835: EQUAL
16836: IFFALSE 16846
// sRandom := true ;
16838: LD_ADDR_EXP 96
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if p3 = 34 then
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 34
16853: EQUAL
16854: IFFALSE 16864
// sShield := true ;
16856: LD_ADDR_EXP 97
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// if p3 = 35 then
16864: LD_VAR 0 3
16868: PUSH
16869: LD_INT 35
16871: EQUAL
16872: IFFALSE 16882
// sTime := true ;
16874: LD_ADDR_EXP 98
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// if p3 = 36 then
16882: LD_VAR 0 3
16886: PUSH
16887: LD_INT 36
16889: EQUAL
16890: IFFALSE 16900
// sTools := true ;
16892: LD_ADDR_EXP 99
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if p3 = 101 then
16900: LD_VAR 0 3
16904: PUSH
16905: LD_INT 101
16907: EQUAL
16908: IFFALSE 16918
// sSold := true ;
16910: LD_ADDR_EXP 64
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// if p3 = 102 then
16918: LD_VAR 0 3
16922: PUSH
16923: LD_INT 102
16925: EQUAL
16926: IFFALSE 16936
// sDiff := true ;
16928: LD_ADDR_EXP 65
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// if p3 = 103 then
16936: LD_VAR 0 3
16940: PUSH
16941: LD_INT 103
16943: EQUAL
16944: IFFALSE 16954
// sFog := true ;
16946: LD_ADDR_EXP 68
16950: PUSH
16951: LD_INT 1
16953: ST_TO_ADDR
// if p3 = 104 then
16954: LD_VAR 0 3
16958: PUSH
16959: LD_INT 104
16961: EQUAL
16962: IFFALSE 16972
// sReset := true ;
16964: LD_ADDR_EXP 69
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// if p3 = 105 then
16972: LD_VAR 0 3
16976: PUSH
16977: LD_INT 105
16979: EQUAL
16980: IFFALSE 16990
// sSun := true ;
16982: LD_ADDR_EXP 70
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// if p3 = 106 then
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 106
16997: EQUAL
16998: IFFALSE 17008
// sTiger := true ;
17000: LD_ADDR_EXP 66
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if p3 = 107 then
17008: LD_VAR 0 3
17012: PUSH
17013: LD_INT 107
17015: EQUAL
17016: IFFALSE 17026
// sBomb := true ;
17018: LD_ADDR_EXP 67
17022: PUSH
17023: LD_INT 1
17025: ST_TO_ADDR
// if p3 = 108 then
17026: LD_VAR 0 3
17030: PUSH
17031: LD_INT 108
17033: EQUAL
17034: IFFALSE 17044
// sWound := true ;
17036: LD_ADDR_EXP 75
17040: PUSH
17041: LD_INT 1
17043: ST_TO_ADDR
// if p3 = 109 then
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 109
17051: EQUAL
17052: IFFALSE 17062
// sBetray := true ;
17054: LD_ADDR_EXP 79
17058: PUSH
17059: LD_INT 1
17061: ST_TO_ADDR
// if p3 = 110 then
17062: LD_VAR 0 3
17066: PUSH
17067: LD_INT 110
17069: EQUAL
17070: IFFALSE 17080
// sContamin := true ;
17072: LD_ADDR_EXP 80
17076: PUSH
17077: LD_INT 1
17079: ST_TO_ADDR
// if p3 = 111 then
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 111
17087: EQUAL
17088: IFFALSE 17098
// sOil := true ;
17090: LD_ADDR_EXP 82
17094: PUSH
17095: LD_INT 1
17097: ST_TO_ADDR
// if p3 = 112 then
17098: LD_VAR 0 3
17102: PUSH
17103: LD_INT 112
17105: EQUAL
17106: IFFALSE 17116
// sStu := true ;
17108: LD_ADDR_EXP 86
17112: PUSH
17113: LD_INT 1
17115: ST_TO_ADDR
// if p3 = 113 then
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 113
17123: EQUAL
17124: IFFALSE 17134
// sBazooka := true ;
17126: LD_ADDR_EXP 89
17130: PUSH
17131: LD_INT 1
17133: ST_TO_ADDR
// if p3 = 114 then
17134: LD_VAR 0 3
17138: PUSH
17139: LD_INT 114
17141: EQUAL
17142: IFFALSE 17152
// sMortar := true ;
17144: LD_ADDR_EXP 90
17148: PUSH
17149: LD_INT 1
17151: ST_TO_ADDR
// if p3 = 115 then
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 115
17159: EQUAL
17160: IFFALSE 17170
// sRanger := true ;
17162: LD_ADDR_EXP 100
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// if p3 = 116 then
17170: LD_VAR 0 3
17174: PUSH
17175: LD_INT 116
17177: EQUAL
17178: IFFALSE 17188
// sComputer := true ;
17180: LD_ADDR_EXP 101
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// if p3 = 117 then
17188: LD_VAR 0 3
17192: PUSH
17193: LD_INT 117
17195: EQUAL
17196: IFFALSE 17206
// s30 := true ;
17198: LD_ADDR_EXP 102
17202: PUSH
17203: LD_INT 1
17205: ST_TO_ADDR
// if p3 = 118 then
17206: LD_VAR 0 3
17210: PUSH
17211: LD_INT 118
17213: EQUAL
17214: IFFALSE 17224
// s60 := true ;
17216: LD_ADDR_EXP 103
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// end ; if p2 = hack_mode then
17224: LD_VAR 0 2
17228: PUSH
17229: LD_INT 101
17231: EQUAL
17232: IFFALSE 17360
// begin case p3 of 1 :
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 1
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17254
17247: POP
// hHackUnlimitedResources ; 2 :
17248: CALL 29623 0 0
17252: GO 17360
17254: LD_INT 2
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17269
17262: POP
// hHackSetLevel10 ; 3 :
17263: CALL 29756 0 0
17267: GO 17360
17269: LD_INT 3
17271: DOUBLE
17272: EQUAL
17273: IFTRUE 17277
17275: GO 17284
17277: POP
// hHackSetLevel10YourUnits ; 4 :
17278: CALL 29841 0 0
17282: GO 17360
17284: LD_INT 4
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17299
17292: POP
// hHackInvincible ; 5 :
17293: CALL 30289 0 0
17297: GO 17360
17299: LD_INT 5
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17314
17307: POP
// hHackInvisible ; 6 :
17308: CALL 30400 0 0
17312: GO 17360
17314: LD_INT 6
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17329
17322: POP
// hHackChangeYourSide ; 7 :
17323: CALL 30457 0 0
17327: GO 17360
17329: LD_INT 7
17331: DOUBLE
17332: EQUAL
17333: IFTRUE 17337
17335: GO 17344
17337: POP
// hHackChangeUnitSide ; 8 :
17338: CALL 30499 0 0
17342: GO 17360
17344: LD_INT 8
17346: DOUBLE
17347: EQUAL
17348: IFTRUE 17352
17350: GO 17359
17352: POP
// hHackFog ; end ;
17353: CALL 30600 0 0
17357: GO 17360
17359: POP
// end ; if p2 = game_save_mode then
17360: LD_VAR 0 2
17364: PUSH
17365: LD_INT 102
17367: EQUAL
17368: IFFALSE 17425
// begin if p3 = 1 then
17370: LD_VAR 0 3
17374: PUSH
17375: LD_INT 1
17377: EQUAL
17378: IFFALSE 17390
// globalGameSaveCounter := p4 ;
17380: LD_ADDR_EXP 46
17384: PUSH
17385: LD_VAR 0 4
17389: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17390: LD_VAR 0 3
17394: PUSH
17395: LD_INT 2
17397: EQUAL
17398: IFFALSE 17406
17400: PUSH
17401: LD_EXP 46
17405: AND
17406: IFFALSE 17425
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17408: LD_STRING setGameSaveCounter(
17410: PUSH
17411: LD_EXP 46
17415: STR
17416: PUSH
17417: LD_STRING )
17419: STR
17420: PPUSH
17421: CALL_OW 559
// end ; end ;
17425: LD_VAR 0 7
17429: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17430: LD_INT 0
17432: PPUSH
// streamModeActive := false ;
17433: LD_ADDR_EXP 47
17437: PUSH
17438: LD_INT 0
17440: ST_TO_ADDR
// normalCounter := 36 ;
17441: LD_ADDR_EXP 48
17445: PUSH
17446: LD_INT 36
17448: ST_TO_ADDR
// hardcoreCounter := 18 ;
17449: LD_ADDR_EXP 49
17453: PUSH
17454: LD_INT 18
17456: ST_TO_ADDR
// sRocket := false ;
17457: LD_ADDR_EXP 52
17461: PUSH
17462: LD_INT 0
17464: ST_TO_ADDR
// sSpeed := false ;
17465: LD_ADDR_EXP 51
17469: PUSH
17470: LD_INT 0
17472: ST_TO_ADDR
// sEngine := false ;
17473: LD_ADDR_EXP 53
17477: PUSH
17478: LD_INT 0
17480: ST_TO_ADDR
// sSpec := false ;
17481: LD_ADDR_EXP 50
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
// sLevel := false ;
17489: LD_ADDR_EXP 54
17493: PUSH
17494: LD_INT 0
17496: ST_TO_ADDR
// sArmoury := false ;
17497: LD_ADDR_EXP 55
17501: PUSH
17502: LD_INT 0
17504: ST_TO_ADDR
// sRadar := false ;
17505: LD_ADDR_EXP 56
17509: PUSH
17510: LD_INT 0
17512: ST_TO_ADDR
// sBunker := false ;
17513: LD_ADDR_EXP 57
17517: PUSH
17518: LD_INT 0
17520: ST_TO_ADDR
// sHack := false ;
17521: LD_ADDR_EXP 58
17525: PUSH
17526: LD_INT 0
17528: ST_TO_ADDR
// sFire := false ;
17529: LD_ADDR_EXP 59
17533: PUSH
17534: LD_INT 0
17536: ST_TO_ADDR
// sRefresh := false ;
17537: LD_ADDR_EXP 60
17541: PUSH
17542: LD_INT 0
17544: ST_TO_ADDR
// sExp := false ;
17545: LD_ADDR_EXP 61
17549: PUSH
17550: LD_INT 0
17552: ST_TO_ADDR
// sDepot := false ;
17553: LD_ADDR_EXP 62
17557: PUSH
17558: LD_INT 0
17560: ST_TO_ADDR
// sFlag := false ;
17561: LD_ADDR_EXP 63
17565: PUSH
17566: LD_INT 0
17568: ST_TO_ADDR
// sKamikadze := false ;
17569: LD_ADDR_EXP 71
17573: PUSH
17574: LD_INT 0
17576: ST_TO_ADDR
// sTroll := false ;
17577: LD_ADDR_EXP 72
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// sSlow := false ;
17585: LD_ADDR_EXP 73
17589: PUSH
17590: LD_INT 0
17592: ST_TO_ADDR
// sLack := false ;
17593: LD_ADDR_EXP 74
17597: PUSH
17598: LD_INT 0
17600: ST_TO_ADDR
// sTank := false ;
17601: LD_ADDR_EXP 76
17605: PUSH
17606: LD_INT 0
17608: ST_TO_ADDR
// sRemote := false ;
17609: LD_ADDR_EXP 77
17613: PUSH
17614: LD_INT 0
17616: ST_TO_ADDR
// sPowell := false ;
17617: LD_ADDR_EXP 78
17621: PUSH
17622: LD_INT 0
17624: ST_TO_ADDR
// sTeleport := false ;
17625: LD_ADDR_EXP 81
17629: PUSH
17630: LD_INT 0
17632: ST_TO_ADDR
// sOilTower := false ;
17633: LD_ADDR_EXP 83
17637: PUSH
17638: LD_INT 0
17640: ST_TO_ADDR
// sShovel := false ;
17641: LD_ADDR_EXP 84
17645: PUSH
17646: LD_INT 0
17648: ST_TO_ADDR
// sSheik := false ;
17649: LD_ADDR_EXP 85
17653: PUSH
17654: LD_INT 0
17656: ST_TO_ADDR
// sEarthquake := false ;
17657: LD_ADDR_EXP 87
17661: PUSH
17662: LD_INT 0
17664: ST_TO_ADDR
// sAI := false ;
17665: LD_ADDR_EXP 88
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// sCargo := false ;
17673: LD_ADDR_EXP 91
17677: PUSH
17678: LD_INT 0
17680: ST_TO_ADDR
// sDLaser := false ;
17681: LD_ADDR_EXP 92
17685: PUSH
17686: LD_INT 0
17688: ST_TO_ADDR
// sExchange := false ;
17689: LD_ADDR_EXP 93
17693: PUSH
17694: LD_INT 0
17696: ST_TO_ADDR
// sFac := false ;
17697: LD_ADDR_EXP 94
17701: PUSH
17702: LD_INT 0
17704: ST_TO_ADDR
// sPower := false ;
17705: LD_ADDR_EXP 95
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// sRandom := false ;
17713: LD_ADDR_EXP 96
17717: PUSH
17718: LD_INT 0
17720: ST_TO_ADDR
// sShield := false ;
17721: LD_ADDR_EXP 97
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// sTime := false ;
17729: LD_ADDR_EXP 98
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
// sTools := false ;
17737: LD_ADDR_EXP 99
17741: PUSH
17742: LD_INT 0
17744: ST_TO_ADDR
// sSold := false ;
17745: LD_ADDR_EXP 64
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// sDiff := false ;
17753: LD_ADDR_EXP 65
17757: PUSH
17758: LD_INT 0
17760: ST_TO_ADDR
// sFog := false ;
17761: LD_ADDR_EXP 68
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// sReset := false ;
17769: LD_ADDR_EXP 69
17773: PUSH
17774: LD_INT 0
17776: ST_TO_ADDR
// sSun := false ;
17777: LD_ADDR_EXP 70
17781: PUSH
17782: LD_INT 0
17784: ST_TO_ADDR
// sTiger := false ;
17785: LD_ADDR_EXP 66
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
// sBomb := false ;
17793: LD_ADDR_EXP 67
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// sWound := false ;
17801: LD_ADDR_EXP 75
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// sBetray := false ;
17809: LD_ADDR_EXP 79
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
// sContamin := false ;
17817: LD_ADDR_EXP 80
17821: PUSH
17822: LD_INT 0
17824: ST_TO_ADDR
// sOil := false ;
17825: LD_ADDR_EXP 82
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
// sStu := false ;
17833: LD_ADDR_EXP 86
17837: PUSH
17838: LD_INT 0
17840: ST_TO_ADDR
// sBazooka := false ;
17841: LD_ADDR_EXP 89
17845: PUSH
17846: LD_INT 0
17848: ST_TO_ADDR
// sMortar := false ;
17849: LD_ADDR_EXP 90
17853: PUSH
17854: LD_INT 0
17856: ST_TO_ADDR
// sRanger := false ;
17857: LD_ADDR_EXP 100
17861: PUSH
17862: LD_INT 0
17864: ST_TO_ADDR
// sComputer := false ;
17865: LD_ADDR_EXP 101
17869: PUSH
17870: LD_INT 0
17872: ST_TO_ADDR
// s30 := false ;
17873: LD_ADDR_EXP 102
17877: PUSH
17878: LD_INT 0
17880: ST_TO_ADDR
// s60 := false ;
17881: LD_ADDR_EXP 103
17885: PUSH
17886: LD_INT 0
17888: ST_TO_ADDR
// end ;
17889: LD_VAR 0 1
17893: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17894: LD_INT 0
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
// result := [ ] ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: EMPTY
17909: ST_TO_ADDR
// if campaign_id = 1 then
17910: LD_OWVAR 69
17914: PUSH
17915: LD_INT 1
17917: EQUAL
17918: IFFALSE 21084
// begin case mission_number of 1 :
17920: LD_OWVAR 70
17924: PUSH
17925: LD_INT 1
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 18009
17933: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17934: LD_ADDR_VAR 0 2
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 4
17944: PUSH
17945: LD_INT 11
17947: PUSH
17948: LD_INT 12
17950: PUSH
17951: LD_INT 15
17953: PUSH
17954: LD_INT 16
17956: PUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 23
17962: PUSH
17963: LD_INT 26
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 101
17979: PUSH
17980: LD_INT 102
17982: PUSH
17983: LD_INT 106
17985: PUSH
17986: LD_INT 116
17988: PUSH
17989: LD_INT 117
17991: PUSH
17992: LD_INT 118
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
18007: GO 21082
18009: LD_INT 2
18011: DOUBLE
18012: EQUAL
18013: IFTRUE 18017
18015: GO 18101
18017: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18018: LD_ADDR_VAR 0 2
18022: PUSH
18023: LD_INT 2
18025: PUSH
18026: LD_INT 4
18028: PUSH
18029: LD_INT 11
18031: PUSH
18032: LD_INT 12
18034: PUSH
18035: LD_INT 15
18037: PUSH
18038: LD_INT 16
18040: PUSH
18041: LD_INT 22
18043: PUSH
18044: LD_INT 23
18046: PUSH
18047: LD_INT 26
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 101
18063: PUSH
18064: LD_INT 102
18066: PUSH
18067: LD_INT 105
18069: PUSH
18070: LD_INT 106
18072: PUSH
18073: LD_INT 108
18075: PUSH
18076: LD_INT 116
18078: PUSH
18079: LD_INT 117
18081: PUSH
18082: LD_INT 118
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: ST_TO_ADDR
18099: GO 21082
18101: LD_INT 3
18103: DOUBLE
18104: EQUAL
18105: IFTRUE 18109
18107: GO 18197
18109: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18110: LD_ADDR_VAR 0 2
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 4
18120: PUSH
18121: LD_INT 5
18123: PUSH
18124: LD_INT 11
18126: PUSH
18127: LD_INT 12
18129: PUSH
18130: LD_INT 15
18132: PUSH
18133: LD_INT 16
18135: PUSH
18136: LD_INT 22
18138: PUSH
18139: LD_INT 26
18141: PUSH
18142: LD_INT 36
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 101
18159: PUSH
18160: LD_INT 102
18162: PUSH
18163: LD_INT 105
18165: PUSH
18166: LD_INT 106
18168: PUSH
18169: LD_INT 108
18171: PUSH
18172: LD_INT 116
18174: PUSH
18175: LD_INT 117
18177: PUSH
18178: LD_INT 118
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: ST_TO_ADDR
18195: GO 21082
18197: LD_INT 4
18199: DOUBLE
18200: EQUAL
18201: IFTRUE 18205
18203: GO 18301
18205: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18206: LD_ADDR_VAR 0 2
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: LD_INT 4
18216: PUSH
18217: LD_INT 5
18219: PUSH
18220: LD_INT 8
18222: PUSH
18223: LD_INT 11
18225: PUSH
18226: LD_INT 12
18228: PUSH
18229: LD_INT 15
18231: PUSH
18232: LD_INT 16
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_INT 23
18240: PUSH
18241: LD_INT 26
18243: PUSH
18244: LD_INT 36
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 101
18263: PUSH
18264: LD_INT 102
18266: PUSH
18267: LD_INT 105
18269: PUSH
18270: LD_INT 106
18272: PUSH
18273: LD_INT 108
18275: PUSH
18276: LD_INT 116
18278: PUSH
18279: LD_INT 117
18281: PUSH
18282: LD_INT 118
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: ST_TO_ADDR
18299: GO 21082
18301: LD_INT 5
18303: DOUBLE
18304: EQUAL
18305: IFTRUE 18309
18307: GO 18421
18309: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18310: LD_ADDR_VAR 0 2
18314: PUSH
18315: LD_INT 2
18317: PUSH
18318: LD_INT 4
18320: PUSH
18321: LD_INT 5
18323: PUSH
18324: LD_INT 6
18326: PUSH
18327: LD_INT 8
18329: PUSH
18330: LD_INT 11
18332: PUSH
18333: LD_INT 12
18335: PUSH
18336: LD_INT 15
18338: PUSH
18339: LD_INT 16
18341: PUSH
18342: LD_INT 22
18344: PUSH
18345: LD_INT 23
18347: PUSH
18348: LD_INT 25
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: LD_INT 36
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 101
18375: PUSH
18376: LD_INT 102
18378: PUSH
18379: LD_INT 105
18381: PUSH
18382: LD_INT 106
18384: PUSH
18385: LD_INT 108
18387: PUSH
18388: LD_INT 109
18390: PUSH
18391: LD_INT 112
18393: PUSH
18394: LD_INT 116
18396: PUSH
18397: LD_INT 117
18399: PUSH
18400: LD_INT 118
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: ST_TO_ADDR
18419: GO 21082
18421: LD_INT 6
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18561
18429: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: LD_INT 5
18443: PUSH
18444: LD_INT 6
18446: PUSH
18447: LD_INT 8
18449: PUSH
18450: LD_INT 11
18452: PUSH
18453: LD_INT 12
18455: PUSH
18456: LD_INT 15
18458: PUSH
18459: LD_INT 16
18461: PUSH
18462: LD_INT 20
18464: PUSH
18465: LD_INT 21
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_INT 23
18473: PUSH
18474: LD_INT 25
18476: PUSH
18477: LD_INT 26
18479: PUSH
18480: LD_INT 30
18482: PUSH
18483: LD_INT 31
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 36
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 101
18515: PUSH
18516: LD_INT 102
18518: PUSH
18519: LD_INT 105
18521: PUSH
18522: LD_INT 106
18524: PUSH
18525: LD_INT 108
18527: PUSH
18528: LD_INT 109
18530: PUSH
18531: LD_INT 112
18533: PUSH
18534: LD_INT 116
18536: PUSH
18537: LD_INT 117
18539: PUSH
18540: LD_INT 118
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: ST_TO_ADDR
18559: GO 21082
18561: LD_INT 7
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 18681
18569: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18570: LD_ADDR_VAR 0 2
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 4
18580: PUSH
18581: LD_INT 5
18583: PUSH
18584: LD_INT 7
18586: PUSH
18587: LD_INT 11
18589: PUSH
18590: LD_INT 12
18592: PUSH
18593: LD_INT 15
18595: PUSH
18596: LD_INT 16
18598: PUSH
18599: LD_INT 20
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 22
18607: PUSH
18608: LD_INT 23
18610: PUSH
18611: LD_INT 25
18613: PUSH
18614: LD_INT 26
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 101
18635: PUSH
18636: LD_INT 102
18638: PUSH
18639: LD_INT 103
18641: PUSH
18642: LD_INT 105
18644: PUSH
18645: LD_INT 106
18647: PUSH
18648: LD_INT 108
18650: PUSH
18651: LD_INT 112
18653: PUSH
18654: LD_INT 116
18656: PUSH
18657: LD_INT 117
18659: PUSH
18660: LD_INT 118
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: ST_TO_ADDR
18679: GO 21082
18681: LD_INT 8
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18829
18689: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18690: LD_ADDR_VAR 0 2
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 4
18700: PUSH
18701: LD_INT 5
18703: PUSH
18704: LD_INT 6
18706: PUSH
18707: LD_INT 7
18709: PUSH
18710: LD_INT 8
18712: PUSH
18713: LD_INT 11
18715: PUSH
18716: LD_INT 12
18718: PUSH
18719: LD_INT 15
18721: PUSH
18722: LD_INT 16
18724: PUSH
18725: LD_INT 20
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_INT 23
18736: PUSH
18737: LD_INT 25
18739: PUSH
18740: LD_INT 26
18742: PUSH
18743: LD_INT 30
18745: PUSH
18746: LD_INT 31
18748: PUSH
18749: LD_INT 32
18751: PUSH
18752: LD_INT 36
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 101
18779: PUSH
18780: LD_INT 102
18782: PUSH
18783: LD_INT 103
18785: PUSH
18786: LD_INT 105
18788: PUSH
18789: LD_INT 106
18791: PUSH
18792: LD_INT 108
18794: PUSH
18795: LD_INT 109
18797: PUSH
18798: LD_INT 112
18800: PUSH
18801: LD_INT 116
18803: PUSH
18804: LD_INT 117
18806: PUSH
18807: LD_INT 118
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: ST_TO_ADDR
18827: GO 21082
18829: LD_INT 9
18831: DOUBLE
18832: EQUAL
18833: IFTRUE 18837
18835: GO 18985
18837: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 4
18848: PUSH
18849: LD_INT 5
18851: PUSH
18852: LD_INT 6
18854: PUSH
18855: LD_INT 7
18857: PUSH
18858: LD_INT 8
18860: PUSH
18861: LD_INT 11
18863: PUSH
18864: LD_INT 12
18866: PUSH
18867: LD_INT 15
18869: PUSH
18870: LD_INT 16
18872: PUSH
18873: LD_INT 20
18875: PUSH
18876: LD_INT 21
18878: PUSH
18879: LD_INT 22
18881: PUSH
18882: LD_INT 23
18884: PUSH
18885: LD_INT 25
18887: PUSH
18888: LD_INT 26
18890: PUSH
18891: LD_INT 28
18893: PUSH
18894: LD_INT 30
18896: PUSH
18897: LD_INT 31
18899: PUSH
18900: LD_INT 32
18902: PUSH
18903: LD_INT 36
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 101
18931: PUSH
18932: LD_INT 102
18934: PUSH
18935: LD_INT 103
18937: PUSH
18938: LD_INT 105
18940: PUSH
18941: LD_INT 106
18943: PUSH
18944: LD_INT 108
18946: PUSH
18947: LD_INT 109
18949: PUSH
18950: LD_INT 112
18952: PUSH
18953: LD_INT 114
18955: PUSH
18956: LD_INT 116
18958: PUSH
18959: LD_INT 117
18961: PUSH
18962: LD_INT 118
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: ST_TO_ADDR
18983: GO 21082
18985: LD_INT 10
18987: DOUBLE
18988: EQUAL
18989: IFTRUE 18993
18991: GO 19189
18993: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18994: LD_ADDR_VAR 0 2
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: LD_INT 5
19007: PUSH
19008: LD_INT 6
19010: PUSH
19011: LD_INT 7
19013: PUSH
19014: LD_INT 8
19016: PUSH
19017: LD_INT 9
19019: PUSH
19020: LD_INT 10
19022: PUSH
19023: LD_INT 11
19025: PUSH
19026: LD_INT 12
19028: PUSH
19029: LD_INT 13
19031: PUSH
19032: LD_INT 14
19034: PUSH
19035: LD_INT 15
19037: PUSH
19038: LD_INT 16
19040: PUSH
19041: LD_INT 17
19043: PUSH
19044: LD_INT 18
19046: PUSH
19047: LD_INT 19
19049: PUSH
19050: LD_INT 20
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 22
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 24
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 26
19070: PUSH
19071: LD_INT 28
19073: PUSH
19074: LD_INT 30
19076: PUSH
19077: LD_INT 31
19079: PUSH
19080: LD_INT 32
19082: PUSH
19083: LD_INT 36
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 101
19119: PUSH
19120: LD_INT 102
19122: PUSH
19123: LD_INT 103
19125: PUSH
19126: LD_INT 104
19128: PUSH
19129: LD_INT 105
19131: PUSH
19132: LD_INT 106
19134: PUSH
19135: LD_INT 107
19137: PUSH
19138: LD_INT 108
19140: PUSH
19141: LD_INT 109
19143: PUSH
19144: LD_INT 110
19146: PUSH
19147: LD_INT 111
19149: PUSH
19150: LD_INT 112
19152: PUSH
19153: LD_INT 114
19155: PUSH
19156: LD_INT 116
19158: PUSH
19159: LD_INT 117
19161: PUSH
19162: LD_INT 118
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: ST_TO_ADDR
19187: GO 21082
19189: LD_INT 11
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19401
19197: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19198: LD_ADDR_VAR 0 2
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 3
19208: PUSH
19209: LD_INT 4
19211: PUSH
19212: LD_INT 5
19214: PUSH
19215: LD_INT 6
19217: PUSH
19218: LD_INT 7
19220: PUSH
19221: LD_INT 8
19223: PUSH
19224: LD_INT 9
19226: PUSH
19227: LD_INT 10
19229: PUSH
19230: LD_INT 11
19232: PUSH
19233: LD_INT 12
19235: PUSH
19236: LD_INT 13
19238: PUSH
19239: LD_INT 14
19241: PUSH
19242: LD_INT 15
19244: PUSH
19245: LD_INT 16
19247: PUSH
19248: LD_INT 17
19250: PUSH
19251: LD_INT 18
19253: PUSH
19254: LD_INT 19
19256: PUSH
19257: LD_INT 20
19259: PUSH
19260: LD_INT 21
19262: PUSH
19263: LD_INT 22
19265: PUSH
19266: LD_INT 23
19268: PUSH
19269: LD_INT 24
19271: PUSH
19272: LD_INT 25
19274: PUSH
19275: LD_INT 26
19277: PUSH
19278: LD_INT 28
19280: PUSH
19281: LD_INT 30
19283: PUSH
19284: LD_INT 31
19286: PUSH
19287: LD_INT 32
19289: PUSH
19290: LD_INT 34
19292: PUSH
19293: LD_INT 36
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 101
19331: PUSH
19332: LD_INT 102
19334: PUSH
19335: LD_INT 103
19337: PUSH
19338: LD_INT 104
19340: PUSH
19341: LD_INT 105
19343: PUSH
19344: LD_INT 106
19346: PUSH
19347: LD_INT 107
19349: PUSH
19350: LD_INT 108
19352: PUSH
19353: LD_INT 109
19355: PUSH
19356: LD_INT 110
19358: PUSH
19359: LD_INT 111
19361: PUSH
19362: LD_INT 112
19364: PUSH
19365: LD_INT 114
19367: PUSH
19368: LD_INT 116
19370: PUSH
19371: LD_INT 117
19373: PUSH
19374: LD_INT 118
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: ST_TO_ADDR
19399: GO 21082
19401: LD_INT 12
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19629
19409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19410: LD_ADDR_VAR 0 2
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 3
19423: PUSH
19424: LD_INT 4
19426: PUSH
19427: LD_INT 5
19429: PUSH
19430: LD_INT 6
19432: PUSH
19433: LD_INT 7
19435: PUSH
19436: LD_INT 8
19438: PUSH
19439: LD_INT 9
19441: PUSH
19442: LD_INT 10
19444: PUSH
19445: LD_INT 11
19447: PUSH
19448: LD_INT 12
19450: PUSH
19451: LD_INT 13
19453: PUSH
19454: LD_INT 14
19456: PUSH
19457: LD_INT 15
19459: PUSH
19460: LD_INT 16
19462: PUSH
19463: LD_INT 17
19465: PUSH
19466: LD_INT 18
19468: PUSH
19469: LD_INT 19
19471: PUSH
19472: LD_INT 20
19474: PUSH
19475: LD_INT 21
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_INT 23
19483: PUSH
19484: LD_INT 24
19486: PUSH
19487: LD_INT 25
19489: PUSH
19490: LD_INT 26
19492: PUSH
19493: LD_INT 27
19495: PUSH
19496: LD_INT 28
19498: PUSH
19499: LD_INT 30
19501: PUSH
19502: LD_INT 31
19504: PUSH
19505: LD_INT 32
19507: PUSH
19508: LD_INT 33
19510: PUSH
19511: LD_INT 34
19513: PUSH
19514: LD_INT 36
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 101
19555: PUSH
19556: LD_INT 102
19558: PUSH
19559: LD_INT 103
19561: PUSH
19562: LD_INT 104
19564: PUSH
19565: LD_INT 105
19567: PUSH
19568: LD_INT 106
19570: PUSH
19571: LD_INT 107
19573: PUSH
19574: LD_INT 108
19576: PUSH
19577: LD_INT 109
19579: PUSH
19580: LD_INT 110
19582: PUSH
19583: LD_INT 111
19585: PUSH
19586: LD_INT 112
19588: PUSH
19589: LD_INT 113
19591: PUSH
19592: LD_INT 114
19594: PUSH
19595: LD_INT 116
19597: PUSH
19598: LD_INT 117
19600: PUSH
19601: LD_INT 118
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: ST_TO_ADDR
19627: GO 21082
19629: LD_INT 13
19631: DOUBLE
19632: EQUAL
19633: IFTRUE 19637
19635: GO 19845
19637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19638: LD_ADDR_VAR 0 2
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 3
19651: PUSH
19652: LD_INT 4
19654: PUSH
19655: LD_INT 5
19657: PUSH
19658: LD_INT 8
19660: PUSH
19661: LD_INT 9
19663: PUSH
19664: LD_INT 10
19666: PUSH
19667: LD_INT 11
19669: PUSH
19670: LD_INT 12
19672: PUSH
19673: LD_INT 14
19675: PUSH
19676: LD_INT 15
19678: PUSH
19679: LD_INT 16
19681: PUSH
19682: LD_INT 17
19684: PUSH
19685: LD_INT 18
19687: PUSH
19688: LD_INT 19
19690: PUSH
19691: LD_INT 20
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_INT 23
19702: PUSH
19703: LD_INT 24
19705: PUSH
19706: LD_INT 25
19708: PUSH
19709: LD_INT 26
19711: PUSH
19712: LD_INT 27
19714: PUSH
19715: LD_INT 28
19717: PUSH
19718: LD_INT 30
19720: PUSH
19721: LD_INT 31
19723: PUSH
19724: LD_INT 32
19726: PUSH
19727: LD_INT 33
19729: PUSH
19730: LD_INT 34
19732: PUSH
19733: LD_INT 36
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 101
19771: PUSH
19772: LD_INT 102
19774: PUSH
19775: LD_INT 103
19777: PUSH
19778: LD_INT 104
19780: PUSH
19781: LD_INT 105
19783: PUSH
19784: LD_INT 106
19786: PUSH
19787: LD_INT 107
19789: PUSH
19790: LD_INT 108
19792: PUSH
19793: LD_INT 109
19795: PUSH
19796: LD_INT 110
19798: PUSH
19799: LD_INT 111
19801: PUSH
19802: LD_INT 112
19804: PUSH
19805: LD_INT 113
19807: PUSH
19808: LD_INT 114
19810: PUSH
19811: LD_INT 116
19813: PUSH
19814: LD_INT 117
19816: PUSH
19817: LD_INT 118
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: ST_TO_ADDR
19843: GO 21082
19845: LD_INT 14
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 20077
19853: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19854: LD_ADDR_VAR 0 2
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: LD_INT 3
19867: PUSH
19868: LD_INT 4
19870: PUSH
19871: LD_INT 5
19873: PUSH
19874: LD_INT 6
19876: PUSH
19877: LD_INT 7
19879: PUSH
19880: LD_INT 8
19882: PUSH
19883: LD_INT 9
19885: PUSH
19886: LD_INT 10
19888: PUSH
19889: LD_INT 11
19891: PUSH
19892: LD_INT 12
19894: PUSH
19895: LD_INT 13
19897: PUSH
19898: LD_INT 14
19900: PUSH
19901: LD_INT 15
19903: PUSH
19904: LD_INT 16
19906: PUSH
19907: LD_INT 17
19909: PUSH
19910: LD_INT 18
19912: PUSH
19913: LD_INT 19
19915: PUSH
19916: LD_INT 20
19918: PUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 22
19924: PUSH
19925: LD_INT 23
19927: PUSH
19928: LD_INT 24
19930: PUSH
19931: LD_INT 25
19933: PUSH
19934: LD_INT 26
19936: PUSH
19937: LD_INT 27
19939: PUSH
19940: LD_INT 28
19942: PUSH
19943: LD_INT 29
19945: PUSH
19946: LD_INT 30
19948: PUSH
19949: LD_INT 31
19951: PUSH
19952: LD_INT 32
19954: PUSH
19955: LD_INT 33
19957: PUSH
19958: LD_INT 34
19960: PUSH
19961: LD_INT 36
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 101
20003: PUSH
20004: LD_INT 102
20006: PUSH
20007: LD_INT 103
20009: PUSH
20010: LD_INT 104
20012: PUSH
20013: LD_INT 105
20015: PUSH
20016: LD_INT 106
20018: PUSH
20019: LD_INT 107
20021: PUSH
20022: LD_INT 108
20024: PUSH
20025: LD_INT 109
20027: PUSH
20028: LD_INT 110
20030: PUSH
20031: LD_INT 111
20033: PUSH
20034: LD_INT 112
20036: PUSH
20037: LD_INT 113
20039: PUSH
20040: LD_INT 114
20042: PUSH
20043: LD_INT 116
20045: PUSH
20046: LD_INT 117
20048: PUSH
20049: LD_INT 118
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: ST_TO_ADDR
20075: GO 21082
20077: LD_INT 15
20079: DOUBLE
20080: EQUAL
20081: IFTRUE 20085
20083: GO 20309
20085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20086: LD_ADDR_VAR 0 2
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: LD_INT 4
20102: PUSH
20103: LD_INT 5
20105: PUSH
20106: LD_INT 6
20108: PUSH
20109: LD_INT 7
20111: PUSH
20112: LD_INT 8
20114: PUSH
20115: LD_INT 9
20117: PUSH
20118: LD_INT 10
20120: PUSH
20121: LD_INT 11
20123: PUSH
20124: LD_INT 12
20126: PUSH
20127: LD_INT 13
20129: PUSH
20130: LD_INT 14
20132: PUSH
20133: LD_INT 15
20135: PUSH
20136: LD_INT 16
20138: PUSH
20139: LD_INT 17
20141: PUSH
20142: LD_INT 18
20144: PUSH
20145: LD_INT 19
20147: PUSH
20148: LD_INT 20
20150: PUSH
20151: LD_INT 21
20153: PUSH
20154: LD_INT 22
20156: PUSH
20157: LD_INT 23
20159: PUSH
20160: LD_INT 24
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 26
20168: PUSH
20169: LD_INT 27
20171: PUSH
20172: LD_INT 28
20174: PUSH
20175: LD_INT 29
20177: PUSH
20178: LD_INT 30
20180: PUSH
20181: LD_INT 31
20183: PUSH
20184: LD_INT 32
20186: PUSH
20187: LD_INT 33
20189: PUSH
20190: LD_INT 34
20192: PUSH
20193: LD_INT 36
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 101
20235: PUSH
20236: LD_INT 102
20238: PUSH
20239: LD_INT 103
20241: PUSH
20242: LD_INT 104
20244: PUSH
20245: LD_INT 105
20247: PUSH
20248: LD_INT 106
20250: PUSH
20251: LD_INT 107
20253: PUSH
20254: LD_INT 108
20256: PUSH
20257: LD_INT 109
20259: PUSH
20260: LD_INT 110
20262: PUSH
20263: LD_INT 111
20265: PUSH
20266: LD_INT 112
20268: PUSH
20269: LD_INT 113
20271: PUSH
20272: LD_INT 114
20274: PUSH
20275: LD_INT 116
20277: PUSH
20278: LD_INT 117
20280: PUSH
20281: LD_INT 118
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: ST_TO_ADDR
20307: GO 21082
20309: LD_INT 16
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 20453
20317: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: LD_INT 4
20328: PUSH
20329: LD_INT 5
20331: PUSH
20332: LD_INT 7
20334: PUSH
20335: LD_INT 11
20337: PUSH
20338: LD_INT 12
20340: PUSH
20341: LD_INT 15
20343: PUSH
20344: LD_INT 16
20346: PUSH
20347: LD_INT 20
20349: PUSH
20350: LD_INT 21
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 23
20358: PUSH
20359: LD_INT 25
20361: PUSH
20362: LD_INT 26
20364: PUSH
20365: LD_INT 30
20367: PUSH
20368: LD_INT 31
20370: PUSH
20371: LD_INT 32
20373: PUSH
20374: LD_INT 33
20376: PUSH
20377: LD_INT 34
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 101
20403: PUSH
20404: LD_INT 102
20406: PUSH
20407: LD_INT 103
20409: PUSH
20410: LD_INT 106
20412: PUSH
20413: LD_INT 108
20415: PUSH
20416: LD_INT 112
20418: PUSH
20419: LD_INT 113
20421: PUSH
20422: LD_INT 114
20424: PUSH
20425: LD_INT 116
20427: PUSH
20428: LD_INT 117
20430: PUSH
20431: LD_INT 118
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: ST_TO_ADDR
20451: GO 21082
20453: LD_INT 17
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20685
20461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: LD_INT 2
20472: PUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 4
20478: PUSH
20479: LD_INT 5
20481: PUSH
20482: LD_INT 6
20484: PUSH
20485: LD_INT 7
20487: PUSH
20488: LD_INT 8
20490: PUSH
20491: LD_INT 9
20493: PUSH
20494: LD_INT 10
20496: PUSH
20497: LD_INT 11
20499: PUSH
20500: LD_INT 12
20502: PUSH
20503: LD_INT 13
20505: PUSH
20506: LD_INT 14
20508: PUSH
20509: LD_INT 15
20511: PUSH
20512: LD_INT 16
20514: PUSH
20515: LD_INT 17
20517: PUSH
20518: LD_INT 18
20520: PUSH
20521: LD_INT 19
20523: PUSH
20524: LD_INT 20
20526: PUSH
20527: LD_INT 21
20529: PUSH
20530: LD_INT 22
20532: PUSH
20533: LD_INT 23
20535: PUSH
20536: LD_INT 24
20538: PUSH
20539: LD_INT 25
20541: PUSH
20542: LD_INT 26
20544: PUSH
20545: LD_INT 27
20547: PUSH
20548: LD_INT 28
20550: PUSH
20551: LD_INT 29
20553: PUSH
20554: LD_INT 30
20556: PUSH
20557: LD_INT 31
20559: PUSH
20560: LD_INT 32
20562: PUSH
20563: LD_INT 33
20565: PUSH
20566: LD_INT 34
20568: PUSH
20569: LD_INT 36
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 101
20611: PUSH
20612: LD_INT 102
20614: PUSH
20615: LD_INT 103
20617: PUSH
20618: LD_INT 104
20620: PUSH
20621: LD_INT 105
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 107
20629: PUSH
20630: LD_INT 108
20632: PUSH
20633: LD_INT 109
20635: PUSH
20636: LD_INT 110
20638: PUSH
20639: LD_INT 111
20641: PUSH
20642: LD_INT 112
20644: PUSH
20645: LD_INT 113
20647: PUSH
20648: LD_INT 114
20650: PUSH
20651: LD_INT 116
20653: PUSH
20654: LD_INT 117
20656: PUSH
20657: LD_INT 118
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: ST_TO_ADDR
20683: GO 21082
20685: LD_INT 18
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20841
20693: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20694: LD_ADDR_VAR 0 2
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 4
20704: PUSH
20705: LD_INT 5
20707: PUSH
20708: LD_INT 7
20710: PUSH
20711: LD_INT 11
20713: PUSH
20714: LD_INT 12
20716: PUSH
20717: LD_INT 15
20719: PUSH
20720: LD_INT 16
20722: PUSH
20723: LD_INT 20
20725: PUSH
20726: LD_INT 21
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 25
20737: PUSH
20738: LD_INT 26
20740: PUSH
20741: LD_INT 30
20743: PUSH
20744: LD_INT 31
20746: PUSH
20747: LD_INT 32
20749: PUSH
20750: LD_INT 33
20752: PUSH
20753: LD_INT 34
20755: PUSH
20756: LD_INT 35
20758: PUSH
20759: LD_INT 36
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 101
20787: PUSH
20788: LD_INT 102
20790: PUSH
20791: LD_INT 103
20793: PUSH
20794: LD_INT 106
20796: PUSH
20797: LD_INT 108
20799: PUSH
20800: LD_INT 112
20802: PUSH
20803: LD_INT 113
20805: PUSH
20806: LD_INT 114
20808: PUSH
20809: LD_INT 115
20811: PUSH
20812: LD_INT 116
20814: PUSH
20815: LD_INT 117
20817: PUSH
20818: LD_INT 118
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: ST_TO_ADDR
20839: GO 21082
20841: LD_INT 19
20843: DOUBLE
20844: EQUAL
20845: IFTRUE 20849
20847: GO 21081
20849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: LD_INT 3
20863: PUSH
20864: LD_INT 4
20866: PUSH
20867: LD_INT 5
20869: PUSH
20870: LD_INT 6
20872: PUSH
20873: LD_INT 7
20875: PUSH
20876: LD_INT 8
20878: PUSH
20879: LD_INT 9
20881: PUSH
20882: LD_INT 10
20884: PUSH
20885: LD_INT 11
20887: PUSH
20888: LD_INT 12
20890: PUSH
20891: LD_INT 13
20893: PUSH
20894: LD_INT 14
20896: PUSH
20897: LD_INT 15
20899: PUSH
20900: LD_INT 16
20902: PUSH
20903: LD_INT 17
20905: PUSH
20906: LD_INT 18
20908: PUSH
20909: LD_INT 19
20911: PUSH
20912: LD_INT 20
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 22
20920: PUSH
20921: LD_INT 23
20923: PUSH
20924: LD_INT 24
20926: PUSH
20927: LD_INT 25
20929: PUSH
20930: LD_INT 26
20932: PUSH
20933: LD_INT 27
20935: PUSH
20936: LD_INT 28
20938: PUSH
20939: LD_INT 29
20941: PUSH
20942: LD_INT 30
20944: PUSH
20945: LD_INT 31
20947: PUSH
20948: LD_INT 32
20950: PUSH
20951: LD_INT 33
20953: PUSH
20954: LD_INT 34
20956: PUSH
20957: LD_INT 35
20959: PUSH
20960: LD_INT 36
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 101
21003: PUSH
21004: LD_INT 102
21006: PUSH
21007: LD_INT 103
21009: PUSH
21010: LD_INT 104
21012: PUSH
21013: LD_INT 105
21015: PUSH
21016: LD_INT 106
21018: PUSH
21019: LD_INT 107
21021: PUSH
21022: LD_INT 108
21024: PUSH
21025: LD_INT 109
21027: PUSH
21028: LD_INT 110
21030: PUSH
21031: LD_INT 111
21033: PUSH
21034: LD_INT 112
21036: PUSH
21037: LD_INT 113
21039: PUSH
21040: LD_INT 114
21042: PUSH
21043: LD_INT 115
21045: PUSH
21046: LD_INT 116
21048: PUSH
21049: LD_INT 117
21051: PUSH
21052: LD_INT 118
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: ST_TO_ADDR
21079: GO 21082
21081: POP
// end else
21082: GO 21313
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21084: LD_ADDR_VAR 0 2
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: LD_INT 3
21097: PUSH
21098: LD_INT 4
21100: PUSH
21101: LD_INT 5
21103: PUSH
21104: LD_INT 6
21106: PUSH
21107: LD_INT 7
21109: PUSH
21110: LD_INT 8
21112: PUSH
21113: LD_INT 9
21115: PUSH
21116: LD_INT 10
21118: PUSH
21119: LD_INT 11
21121: PUSH
21122: LD_INT 12
21124: PUSH
21125: LD_INT 13
21127: PUSH
21128: LD_INT 14
21130: PUSH
21131: LD_INT 15
21133: PUSH
21134: LD_INT 16
21136: PUSH
21137: LD_INT 17
21139: PUSH
21140: LD_INT 18
21142: PUSH
21143: LD_INT 19
21145: PUSH
21146: LD_INT 20
21148: PUSH
21149: LD_INT 21
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 24
21160: PUSH
21161: LD_INT 25
21163: PUSH
21164: LD_INT 26
21166: PUSH
21167: LD_INT 27
21169: PUSH
21170: LD_INT 28
21172: PUSH
21173: LD_INT 29
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 31
21181: PUSH
21182: LD_INT 32
21184: PUSH
21185: LD_INT 33
21187: PUSH
21188: LD_INT 34
21190: PUSH
21191: LD_INT 35
21193: PUSH
21194: LD_INT 36
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 101
21237: PUSH
21238: LD_INT 102
21240: PUSH
21241: LD_INT 103
21243: PUSH
21244: LD_INT 104
21246: PUSH
21247: LD_INT 105
21249: PUSH
21250: LD_INT 106
21252: PUSH
21253: LD_INT 107
21255: PUSH
21256: LD_INT 108
21258: PUSH
21259: LD_INT 109
21261: PUSH
21262: LD_INT 110
21264: PUSH
21265: LD_INT 111
21267: PUSH
21268: LD_INT 112
21270: PUSH
21271: LD_INT 113
21273: PUSH
21274: LD_INT 114
21276: PUSH
21277: LD_INT 115
21279: PUSH
21280: LD_INT 116
21282: PUSH
21283: LD_INT 117
21285: PUSH
21286: LD_INT 118
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// if result then
21313: LD_VAR 0 2
21317: IFFALSE 22103
// begin normal :=  ;
21319: LD_ADDR_VAR 0 5
21323: PUSH
21324: LD_STRING 
21326: ST_TO_ADDR
// hardcore :=  ;
21327: LD_ADDR_VAR 0 6
21331: PUSH
21332: LD_STRING 
21334: ST_TO_ADDR
// active :=  ;
21335: LD_ADDR_VAR 0 7
21339: PUSH
21340: LD_STRING 
21342: ST_TO_ADDR
// for i = 1 to normalCounter do
21343: LD_ADDR_VAR 0 8
21347: PUSH
21348: DOUBLE
21349: LD_INT 1
21351: DEC
21352: ST_TO_ADDR
21353: LD_EXP 48
21357: PUSH
21358: FOR_TO
21359: IFFALSE 21460
// begin tmp := 0 ;
21361: LD_ADDR_VAR 0 3
21365: PUSH
21366: LD_STRING 0
21368: ST_TO_ADDR
// if result [ 1 ] then
21369: LD_VAR 0 2
21373: PUSH
21374: LD_INT 1
21376: ARRAY
21377: IFFALSE 21442
// if result [ 1 ] [ 1 ] = i then
21379: LD_VAR 0 2
21383: PUSH
21384: LD_INT 1
21386: ARRAY
21387: PUSH
21388: LD_INT 1
21390: ARRAY
21391: PUSH
21392: LD_VAR 0 8
21396: EQUAL
21397: IFFALSE 21442
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21399: LD_ADDR_VAR 0 2
21403: PUSH
21404: LD_VAR 0 2
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_VAR 0 2
21416: PUSH
21417: LD_INT 1
21419: ARRAY
21420: PPUSH
21421: LD_INT 1
21423: PPUSH
21424: CALL_OW 3
21428: PPUSH
21429: CALL_OW 1
21433: ST_TO_ADDR
// tmp := 1 ;
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_STRING 1
21441: ST_TO_ADDR
// end ; normal := normal & tmp ;
21442: LD_ADDR_VAR 0 5
21446: PUSH
21447: LD_VAR 0 5
21451: PUSH
21452: LD_VAR 0 3
21456: STR
21457: ST_TO_ADDR
// end ;
21458: GO 21358
21460: POP
21461: POP
// for i = 1 to hardcoreCounter do
21462: LD_ADDR_VAR 0 8
21466: PUSH
21467: DOUBLE
21468: LD_INT 1
21470: DEC
21471: ST_TO_ADDR
21472: LD_EXP 49
21476: PUSH
21477: FOR_TO
21478: IFFALSE 21583
// begin tmp := 0 ;
21480: LD_ADDR_VAR 0 3
21484: PUSH
21485: LD_STRING 0
21487: ST_TO_ADDR
// if result [ 2 ] then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: IFFALSE 21565
// if result [ 2 ] [ 1 ] = 100 + i then
21498: LD_VAR 0 2
21502: PUSH
21503: LD_INT 2
21505: ARRAY
21506: PUSH
21507: LD_INT 1
21509: ARRAY
21510: PUSH
21511: LD_INT 100
21513: PUSH
21514: LD_VAR 0 8
21518: PLUS
21519: EQUAL
21520: IFFALSE 21565
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21522: LD_ADDR_VAR 0 2
21526: PUSH
21527: LD_VAR 0 2
21531: PPUSH
21532: LD_INT 2
21534: PPUSH
21535: LD_VAR 0 2
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 3
21551: PPUSH
21552: CALL_OW 1
21556: ST_TO_ADDR
// tmp := 1 ;
21557: LD_ADDR_VAR 0 3
21561: PUSH
21562: LD_STRING 1
21564: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21565: LD_ADDR_VAR 0 6
21569: PUSH
21570: LD_VAR 0 6
21574: PUSH
21575: LD_VAR 0 3
21579: STR
21580: ST_TO_ADDR
// end ;
21581: GO 21477
21583: POP
21584: POP
// if isGameLoad then
21585: LD_VAR 0 1
21589: IFFALSE 22064
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21591: LD_ADDR_VAR 0 4
21595: PUSH
21596: LD_EXP 52
21600: PUSH
21601: LD_EXP 51
21605: PUSH
21606: LD_EXP 53
21610: PUSH
21611: LD_EXP 50
21615: PUSH
21616: LD_EXP 54
21620: PUSH
21621: LD_EXP 55
21625: PUSH
21626: LD_EXP 56
21630: PUSH
21631: LD_EXP 57
21635: PUSH
21636: LD_EXP 58
21640: PUSH
21641: LD_EXP 59
21645: PUSH
21646: LD_EXP 60
21650: PUSH
21651: LD_EXP 61
21655: PUSH
21656: LD_EXP 62
21660: PUSH
21661: LD_EXP 63
21665: PUSH
21666: LD_EXP 71
21670: PUSH
21671: LD_EXP 72
21675: PUSH
21676: LD_EXP 73
21680: PUSH
21681: LD_EXP 74
21685: PUSH
21686: LD_EXP 76
21690: PUSH
21691: LD_EXP 77
21695: PUSH
21696: LD_EXP 78
21700: PUSH
21701: LD_EXP 81
21705: PUSH
21706: LD_EXP 83
21710: PUSH
21711: LD_EXP 84
21715: PUSH
21716: LD_EXP 85
21720: PUSH
21721: LD_EXP 87
21725: PUSH
21726: LD_EXP 88
21730: PUSH
21731: LD_EXP 91
21735: PUSH
21736: LD_EXP 92
21740: PUSH
21741: LD_EXP 93
21745: PUSH
21746: LD_EXP 94
21750: PUSH
21751: LD_EXP 95
21755: PUSH
21756: LD_EXP 96
21760: PUSH
21761: LD_EXP 97
21765: PUSH
21766: LD_EXP 98
21770: PUSH
21771: LD_EXP 99
21775: PUSH
21776: LD_EXP 64
21780: PUSH
21781: LD_EXP 65
21785: PUSH
21786: LD_EXP 68
21790: PUSH
21791: LD_EXP 69
21795: PUSH
21796: LD_EXP 70
21800: PUSH
21801: LD_EXP 66
21805: PUSH
21806: LD_EXP 67
21810: PUSH
21811: LD_EXP 75
21815: PUSH
21816: LD_EXP 79
21820: PUSH
21821: LD_EXP 80
21825: PUSH
21826: LD_EXP 82
21830: PUSH
21831: LD_EXP 86
21835: PUSH
21836: LD_EXP 89
21840: PUSH
21841: LD_EXP 90
21845: PUSH
21846: LD_EXP 100
21850: PUSH
21851: LD_EXP 101
21855: PUSH
21856: LD_EXP 102
21860: PUSH
21861: LD_EXP 103
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: ST_TO_ADDR
// tmp :=  ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_STRING 
21929: ST_TO_ADDR
// for i = 1 to normalCounter do
21930: LD_ADDR_VAR 0 8
21934: PUSH
21935: DOUBLE
21936: LD_INT 1
21938: DEC
21939: ST_TO_ADDR
21940: LD_EXP 48
21944: PUSH
21945: FOR_TO
21946: IFFALSE 21982
// begin if flags [ i ] then
21948: LD_VAR 0 4
21952: PUSH
21953: LD_VAR 0 8
21957: ARRAY
21958: IFFALSE 21980
// tmp := tmp & i & ; ;
21960: LD_ADDR_VAR 0 3
21964: PUSH
21965: LD_VAR 0 3
21969: PUSH
21970: LD_VAR 0 8
21974: STR
21975: PUSH
21976: LD_STRING ;
21978: STR
21979: ST_TO_ADDR
// end ;
21980: GO 21945
21982: POP
21983: POP
// for i = 1 to hardcoreCounter do
21984: LD_ADDR_VAR 0 8
21988: PUSH
21989: DOUBLE
21990: LD_INT 1
21992: DEC
21993: ST_TO_ADDR
21994: LD_EXP 49
21998: PUSH
21999: FOR_TO
22000: IFFALSE 22046
// begin if flags [ normalCounter + i ] then
22002: LD_VAR 0 4
22006: PUSH
22007: LD_EXP 48
22011: PUSH
22012: LD_VAR 0 8
22016: PLUS
22017: ARRAY
22018: IFFALSE 22044
// tmp := tmp & ( 100 + i ) & ; ;
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_VAR 0 3
22029: PUSH
22030: LD_INT 100
22032: PUSH
22033: LD_VAR 0 8
22037: PLUS
22038: STR
22039: PUSH
22040: LD_STRING ;
22042: STR
22043: ST_TO_ADDR
// end ;
22044: GO 21999
22046: POP
22047: POP
// if tmp then
22048: LD_VAR 0 3
22052: IFFALSE 22064
// active := tmp ;
22054: LD_ADDR_VAR 0 7
22058: PUSH
22059: LD_VAR 0 3
22063: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22064: LD_STRING getStreamItemsFromMission("
22066: PUSH
22067: LD_VAR 0 5
22071: STR
22072: PUSH
22073: LD_STRING ","
22075: STR
22076: PUSH
22077: LD_VAR 0 6
22081: STR
22082: PUSH
22083: LD_STRING ","
22085: STR
22086: PUSH
22087: LD_VAR 0 7
22091: STR
22092: PUSH
22093: LD_STRING ")
22095: STR
22096: PPUSH
22097: CALL_OW 559
// end else
22101: GO 22110
// ToLua ( getStreamItemsFromMission("","","") ) ;
22103: LD_STRING getStreamItemsFromMission("","","")
22105: PPUSH
22106: CALL_OW 559
// end ;
22110: LD_VAR 0 2
22114: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22115: LD_EXP 47
22119: IFFALSE 22127
22121: PUSH
22122: LD_EXP 52
22126: AND
22127: IFFALSE 22251
22129: GO 22131
22131: DISABLE
22132: LD_INT 0
22134: PPUSH
22135: PPUSH
// begin enable ;
22136: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_INT 22
22144: PUSH
22145: LD_OWVAR 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: PUSH
22157: LD_INT 34
22159: PUSH
22160: LD_INT 7
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 34
22169: PUSH
22170: LD_INT 45
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 34
22179: PUSH
22180: LD_INT 28
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 34
22189: PUSH
22190: LD_INT 47
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: ST_TO_ADDR
// if not tmp then
22213: LD_VAR 0 2
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22251
// for i in tmp do
22222: LD_ADDR_VAR 0 1
22226: PUSH
22227: LD_VAR 0 2
22231: PUSH
22232: FOR_IN
22233: IFFALSE 22249
// begin SetLives ( i , 0 ) ;
22235: LD_VAR 0 1
22239: PPUSH
22240: LD_INT 0
22242: PPUSH
22243: CALL_OW 234
// end ;
22247: GO 22232
22249: POP
22250: POP
// end ;
22251: PPOPN 2
22253: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22254: LD_EXP 47
22258: IFFALSE 22266
22260: PUSH
22261: LD_EXP 53
22265: AND
22266: IFFALSE 22350
22268: GO 22270
22270: DISABLE
22271: LD_INT 0
22273: PPUSH
22274: PPUSH
// begin enable ;
22275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22276: LD_ADDR_VAR 0 2
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_OWVAR 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 32
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22350
// for i in tmp do
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_VAR 0 2
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22348
// begin SetLives ( i , 0 ) ;
22334: LD_VAR 0 1
22338: PPUSH
22339: LD_INT 0
22341: PPUSH
22342: CALL_OW 234
// end ;
22346: GO 22331
22348: POP
22349: POP
// end ;
22350: PPOPN 2
22352: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22353: LD_EXP 47
22357: IFFALSE 22365
22359: PUSH
22360: LD_EXP 50
22364: AND
22365: IFFALSE 22458
22367: GO 22369
22369: DISABLE
22370: LD_INT 0
22372: PPUSH
// begin enable ;
22373: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_INT 22
22381: PUSH
22382: LD_OWVAR 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 5
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 25
22406: PUSH
22407: LD_INT 9
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PPUSH
22434: CALL_OW 69
22438: PUSH
22439: FOR_IN
22440: IFFALSE 22456
// begin SetClass ( i , 1 ) ;
22442: LD_VAR 0 1
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: CALL_OW 336
// end ;
22454: GO 22439
22456: POP
22457: POP
// end ;
22458: PPOPN 1
22460: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22461: LD_EXP 47
22465: IFFALSE 22473
22467: PUSH
22468: LD_EXP 51
22472: AND
22473: IFFALSE 22485
22475: PUSH
22476: LD_OWVAR 65
22480: PUSH
22481: LD_INT 7
22483: LESS
22484: AND
22485: IFFALSE 22499
22487: GO 22489
22489: DISABLE
// begin enable ;
22490: ENABLE
// game_speed := 7 ;
22491: LD_ADDR_OWVAR 65
22495: PUSH
22496: LD_INT 7
22498: ST_TO_ADDR
// end ;
22499: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22500: LD_EXP 47
22504: IFFALSE 22512
22506: PUSH
22507: LD_EXP 54
22511: AND
22512: IFFALSE 22714
22514: GO 22516
22516: DISABLE
22517: LD_INT 0
22519: PPUSH
22520: PPUSH
22521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22522: LD_ADDR_VAR 0 3
22526: PUSH
22527: LD_INT 81
22529: PUSH
22530: LD_OWVAR 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PPUSH
22553: CALL_OW 69
22557: ST_TO_ADDR
// if not tmp then
22558: LD_VAR 0 3
22562: NOT
22563: IFFALSE 22567
// exit ;
22565: GO 22714
// if tmp > 5 then
22567: LD_VAR 0 3
22571: PUSH
22572: LD_INT 5
22574: GREATER
22575: IFFALSE 22587
// k := 5 else
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_INT 5
22584: ST_TO_ADDR
22585: GO 22597
// k := tmp ;
22587: LD_ADDR_VAR 0 2
22591: PUSH
22592: LD_VAR 0 3
22596: ST_TO_ADDR
// for i := 1 to k do
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: DOUBLE
22603: LD_INT 1
22605: DEC
22606: ST_TO_ADDR
22607: LD_VAR 0 2
22611: PUSH
22612: FOR_TO
22613: IFFALSE 22712
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22615: LD_VAR 0 3
22619: PUSH
22620: LD_VAR 0 1
22624: ARRAY
22625: PPUSH
22626: LD_VAR 0 1
22630: PUSH
22631: LD_INT 4
22633: MOD
22634: PUSH
22635: LD_INT 1
22637: PLUS
22638: PPUSH
22639: CALL_OW 259
22643: PUSH
22644: LD_INT 10
22646: LESS
22647: IFFALSE 22710
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22649: LD_VAR 0 3
22653: PUSH
22654: LD_VAR 0 1
22658: ARRAY
22659: PPUSH
22660: LD_VAR 0 1
22664: PUSH
22665: LD_INT 4
22667: MOD
22668: PUSH
22669: LD_INT 1
22671: PLUS
22672: PPUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_VAR 0 1
22682: ARRAY
22683: PPUSH
22684: LD_VAR 0 1
22688: PUSH
22689: LD_INT 4
22691: MOD
22692: PUSH
22693: LD_INT 1
22695: PLUS
22696: PPUSH
22697: CALL_OW 259
22701: PUSH
22702: LD_INT 1
22704: PLUS
22705: PPUSH
22706: CALL_OW 237
22710: GO 22612
22712: POP
22713: POP
// end ;
22714: PPOPN 3
22716: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22717: LD_EXP 47
22721: IFFALSE 22729
22723: PUSH
22724: LD_EXP 55
22728: AND
22729: IFFALSE 22749
22731: GO 22733
22733: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22734: LD_INT 4
22736: PPUSH
22737: LD_OWVAR 2
22741: PPUSH
22742: LD_INT 0
22744: PPUSH
22745: CALL_OW 324
22749: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22750: LD_EXP 47
22754: IFFALSE 22762
22756: PUSH
22757: LD_EXP 84
22761: AND
22762: IFFALSE 22782
22764: GO 22766
22766: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22767: LD_INT 19
22769: PPUSH
22770: LD_OWVAR 2
22774: PPUSH
22775: LD_INT 0
22777: PPUSH
22778: CALL_OW 324
22782: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22783: LD_EXP 47
22787: IFFALSE 22795
22789: PUSH
22790: LD_EXP 56
22794: AND
22795: IFFALSE 22897
22797: GO 22799
22799: DISABLE
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
// begin enable ;
22804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22805: LD_ADDR_VAR 0 2
22809: PUSH
22810: LD_INT 22
22812: PUSH
22813: LD_OWVAR 2
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 34
22827: PUSH
22828: LD_INT 11
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 34
22837: PUSH
22838: LD_INT 30
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PPUSH
22854: CALL_OW 69
22858: ST_TO_ADDR
// if not tmp then
22859: LD_VAR 0 2
22863: NOT
22864: IFFALSE 22868
// exit ;
22866: GO 22897
// for i in tmp do
22868: LD_ADDR_VAR 0 1
22872: PUSH
22873: LD_VAR 0 2
22877: PUSH
22878: FOR_IN
22879: IFFALSE 22895
// begin SetLives ( i , 0 ) ;
22881: LD_VAR 0 1
22885: PPUSH
22886: LD_INT 0
22888: PPUSH
22889: CALL_OW 234
// end ;
22893: GO 22878
22895: POP
22896: POP
// end ;
22897: PPOPN 2
22899: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22900: LD_EXP 47
22904: IFFALSE 22912
22906: PUSH
22907: LD_EXP 57
22911: AND
22912: IFFALSE 22932
22914: GO 22916
22916: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22917: LD_INT 32
22919: PPUSH
22920: LD_OWVAR 2
22924: PPUSH
22925: LD_INT 0
22927: PPUSH
22928: CALL_OW 324
22932: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22933: LD_EXP 47
22937: IFFALSE 22945
22939: PUSH
22940: LD_EXP 58
22944: AND
22945: IFFALSE 23128
22947: GO 22949
22949: DISABLE
22950: LD_INT 0
22952: PPUSH
22953: PPUSH
22954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22955: LD_ADDR_VAR 0 2
22959: PUSH
22960: LD_INT 22
22962: PUSH
22963: LD_OWVAR 2
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 33
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PPUSH
22986: CALL_OW 69
22990: ST_TO_ADDR
// if not tmp then
22991: LD_VAR 0 2
22995: NOT
22996: IFFALSE 23000
// exit ;
22998: GO 23128
// side := 0 ;
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 0
23007: ST_TO_ADDR
// for i := 1 to 8 do
23008: LD_ADDR_VAR 0 1
23012: PUSH
23013: DOUBLE
23014: LD_INT 1
23016: DEC
23017: ST_TO_ADDR
23018: LD_INT 8
23020: PUSH
23021: FOR_TO
23022: IFFALSE 23072
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23024: LD_OWVAR 2
23028: PUSH
23029: LD_VAR 0 1
23033: NONEQUAL
23034: IFFALSE 23056
23036: PUSH
23037: LD_OWVAR 2
23041: PPUSH
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 81
23051: PUSH
23052: LD_INT 2
23054: EQUAL
23055: AND
23056: IFFALSE 23070
// begin side := i ;
23058: LD_ADDR_VAR 0 3
23062: PUSH
23063: LD_VAR 0 1
23067: ST_TO_ADDR
// break ;
23068: GO 23072
// end ;
23070: GO 23021
23072: POP
23073: POP
// if not side then
23074: LD_VAR 0 3
23078: NOT
23079: IFFALSE 23083
// exit ;
23081: GO 23128
// for i := 1 to tmp do
23083: LD_ADDR_VAR 0 1
23087: PUSH
23088: DOUBLE
23089: LD_INT 1
23091: DEC
23092: ST_TO_ADDR
23093: LD_VAR 0 2
23097: PUSH
23098: FOR_TO
23099: IFFALSE 23126
// if Prob ( 60 ) then
23101: LD_INT 60
23103: PPUSH
23104: CALL_OW 13
23108: IFFALSE 23124
// SetSide ( i , side ) ;
23110: LD_VAR 0 1
23114: PPUSH
23115: LD_VAR 0 3
23119: PPUSH
23120: CALL_OW 235
23124: GO 23098
23126: POP
23127: POP
// end ;
23128: PPOPN 3
23130: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23131: LD_EXP 47
23135: IFFALSE 23143
23137: PUSH
23138: LD_EXP 60
23142: AND
23143: IFFALSE 23262
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23151: LD_ADDR_VAR 0 1
23155: PUSH
23156: LD_INT 22
23158: PUSH
23159: LD_OWVAR 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 21
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 3
23180: PUSH
23181: LD_INT 23
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 69
23204: PUSH
23205: FOR_IN
23206: IFFALSE 23260
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL_OW 257
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: LD_INT 4
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: IN
23236: IFFALSE 23258
// SetClass ( un , rand ( 1 , 4 ) ) ;
23238: LD_VAR 0 1
23242: PPUSH
23243: LD_INT 1
23245: PPUSH
23246: LD_INT 4
23248: PPUSH
23249: CALL_OW 12
23253: PPUSH
23254: CALL_OW 336
23258: GO 23205
23260: POP
23261: POP
// end ;
23262: PPOPN 1
23264: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23265: LD_EXP 47
23269: IFFALSE 23277
23271: PUSH
23272: LD_EXP 59
23276: AND
23277: IFFALSE 23356
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23285: LD_ADDR_VAR 0 1
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_OWVAR 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 21
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 69
23320: ST_TO_ADDR
// if not tmp then
23321: LD_VAR 0 1
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23330: LD_VAR 0 1
23334: PUSH
23335: LD_INT 1
23337: PPUSH
23338: LD_VAR 0 1
23342: PPUSH
23343: CALL_OW 12
23347: ARRAY
23348: PPUSH
23349: LD_INT 100
23351: PPUSH
23352: CALL_OW 234
// end ;
23356: PPOPN 1
23358: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23359: LD_EXP 47
23363: IFFALSE 23371
23365: PUSH
23366: LD_EXP 61
23370: AND
23371: IFFALSE 23469
23373: GO 23375
23375: DISABLE
23376: LD_INT 0
23378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23379: LD_ADDR_VAR 0 1
23383: PUSH
23384: LD_INT 22
23386: PUSH
23387: LD_OWVAR 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 21
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PPUSH
23410: CALL_OW 69
23414: ST_TO_ADDR
// if not tmp then
23415: LD_VAR 0 1
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23469
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23424: LD_VAR 0 1
23428: PUSH
23429: LD_INT 1
23431: PPUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 12
23441: ARRAY
23442: PPUSH
23443: LD_INT 1
23445: PPUSH
23446: LD_INT 4
23448: PPUSH
23449: CALL_OW 12
23453: PPUSH
23454: LD_INT 3000
23456: PPUSH
23457: LD_INT 9000
23459: PPUSH
23460: CALL_OW 12
23464: PPUSH
23465: CALL_OW 492
// end ;
23469: PPOPN 1
23471: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23472: LD_EXP 47
23476: IFFALSE 23484
23478: PUSH
23479: LD_EXP 62
23483: AND
23484: IFFALSE 23504
23486: GO 23488
23488: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23489: LD_INT 1
23491: PPUSH
23492: LD_OWVAR 2
23496: PPUSH
23497: LD_INT 0
23499: PPUSH
23500: CALL_OW 324
23504: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23505: LD_EXP 47
23509: IFFALSE 23517
23511: PUSH
23512: LD_EXP 63
23516: AND
23517: IFFALSE 23600
23519: GO 23521
23521: DISABLE
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23526: LD_ADDR_VAR 0 2
23530: PUSH
23531: LD_INT 22
23533: PUSH
23534: LD_OWVAR 2
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 21
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 69
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 2
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23600
// for i in tmp do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: LD_VAR 0 2
23580: PUSH
23581: FOR_IN
23582: IFFALSE 23598
// SetBLevel ( i , 10 ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_INT 10
23591: PPUSH
23592: CALL_OW 241
23596: GO 23581
23598: POP
23599: POP
// end ;
23600: PPOPN 2
23602: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23603: LD_EXP 47
23607: IFFALSE 23615
23609: PUSH
23610: LD_EXP 64
23614: AND
23615: IFFALSE 23726
23617: GO 23619
23619: DISABLE
23620: LD_INT 0
23622: PPUSH
23623: PPUSH
23624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23625: LD_ADDR_VAR 0 3
23629: PUSH
23630: LD_INT 22
23632: PUSH
23633: LD_OWVAR 2
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 25
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PPUSH
23656: CALL_OW 69
23660: ST_TO_ADDR
// if not tmp then
23661: LD_VAR 0 3
23665: NOT
23666: IFFALSE 23670
// exit ;
23668: GO 23726
// un := tmp [ rand ( 1 , tmp ) ] ;
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: LD_VAR 0 3
23679: PUSH
23680: LD_INT 1
23682: PPUSH
23683: LD_VAR 0 3
23687: PPUSH
23688: CALL_OW 12
23692: ARRAY
23693: ST_TO_ADDR
// if Crawls ( un ) then
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 318
23703: IFFALSE 23714
// ComWalk ( un ) ;
23705: LD_VAR 0 2
23709: PPUSH
23710: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_INT 5
23721: PPUSH
23722: CALL_OW 336
// end ;
23726: PPOPN 3
23728: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23729: LD_EXP 47
23733: IFFALSE 23741
23735: PUSH
23736: LD_EXP 65
23740: AND
23741: IFFALSE 23753
23743: PUSH
23744: LD_OWVAR 67
23748: PUSH
23749: LD_INT 4
23751: LESS
23752: AND
23753: IFFALSE 23772
23755: GO 23757
23757: DISABLE
// begin Difficulty := Difficulty + 1 ;
23758: LD_ADDR_OWVAR 67
23762: PUSH
23763: LD_OWVAR 67
23767: PUSH
23768: LD_INT 1
23770: PLUS
23771: ST_TO_ADDR
// end ;
23772: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23773: LD_EXP 47
23777: IFFALSE 23785
23779: PUSH
23780: LD_EXP 66
23784: AND
23785: IFFALSE 23888
23787: GO 23789
23789: DISABLE
23790: LD_INT 0
23792: PPUSH
// begin for i := 1 to 5 do
23793: LD_ADDR_VAR 0 1
23797: PUSH
23798: DOUBLE
23799: LD_INT 1
23801: DEC
23802: ST_TO_ADDR
23803: LD_INT 5
23805: PUSH
23806: FOR_TO
23807: IFFALSE 23886
// begin uc_nation := nation_nature ;
23809: LD_ADDR_OWVAR 21
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// uc_side := 0 ;
23817: LD_ADDR_OWVAR 20
23821: PUSH
23822: LD_INT 0
23824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23825: LD_ADDR_OWVAR 29
23829: PUSH
23830: LD_INT 12
23832: PUSH
23833: LD_INT 12
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: ST_TO_ADDR
// hc_agressivity := 20 ;
23840: LD_ADDR_OWVAR 35
23844: PUSH
23845: LD_INT 20
23847: ST_TO_ADDR
// hc_class := class_tiger ;
23848: LD_ADDR_OWVAR 28
23852: PUSH
23853: LD_INT 14
23855: ST_TO_ADDR
// hc_gallery :=  ;
23856: LD_ADDR_OWVAR 33
23860: PUSH
23861: LD_STRING 
23863: ST_TO_ADDR
// hc_name :=  ;
23864: LD_ADDR_OWVAR 26
23868: PUSH
23869: LD_STRING 
23871: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23872: CALL_OW 44
23876: PPUSH
23877: LD_INT 0
23879: PPUSH
23880: CALL_OW 51
// end ;
23884: GO 23806
23886: POP
23887: POP
// end ;
23888: PPOPN 1
23890: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23891: LD_EXP 47
23895: IFFALSE 23903
23897: PUSH
23898: LD_EXP 67
23902: AND
23903: IFFALSE 23912
23905: GO 23907
23907: DISABLE
// StreamSibBomb ;
23908: CALL 23913 0 0
23912: END
// export function StreamSibBomb ; var i , x , y ; begin
23913: LD_INT 0
23915: PPUSH
23916: PPUSH
23917: PPUSH
23918: PPUSH
// result := false ;
23919: LD_ADDR_VAR 0 1
23923: PUSH
23924: LD_INT 0
23926: ST_TO_ADDR
// for i := 1 to 16 do
23927: LD_ADDR_VAR 0 2
23931: PUSH
23932: DOUBLE
23933: LD_INT 1
23935: DEC
23936: ST_TO_ADDR
23937: LD_INT 16
23939: PUSH
23940: FOR_TO
23941: IFFALSE 24140
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23943: LD_ADDR_VAR 0 3
23947: PUSH
23948: LD_INT 10
23950: PUSH
23951: LD_INT 20
23953: PUSH
23954: LD_INT 30
23956: PUSH
23957: LD_INT 40
23959: PUSH
23960: LD_INT 50
23962: PUSH
23963: LD_INT 60
23965: PUSH
23966: LD_INT 70
23968: PUSH
23969: LD_INT 80
23971: PUSH
23972: LD_INT 90
23974: PUSH
23975: LD_INT 100
23977: PUSH
23978: LD_INT 110
23980: PUSH
23981: LD_INT 120
23983: PUSH
23984: LD_INT 130
23986: PUSH
23987: LD_INT 140
23989: PUSH
23990: LD_INT 150
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: PPUSH
24013: LD_INT 15
24015: PPUSH
24016: CALL_OW 12
24020: ARRAY
24021: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24022: LD_ADDR_VAR 0 4
24026: PUSH
24027: LD_INT 10
24029: PUSH
24030: LD_INT 20
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 40
24038: PUSH
24039: LD_INT 50
24041: PUSH
24042: LD_INT 60
24044: PUSH
24045: LD_INT 70
24047: PUSH
24048: LD_INT 80
24050: PUSH
24051: LD_INT 90
24053: PUSH
24054: LD_INT 100
24056: PUSH
24057: LD_INT 110
24059: PUSH
24060: LD_INT 120
24062: PUSH
24063: LD_INT 130
24065: PUSH
24066: LD_INT 140
24068: PUSH
24069: LD_INT 150
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PPUSH
24092: LD_INT 15
24094: PPUSH
24095: CALL_OW 12
24099: ARRAY
24100: ST_TO_ADDR
// if ValidHex ( x , y ) then
24101: LD_VAR 0 3
24105: PPUSH
24106: LD_VAR 0 4
24110: PPUSH
24111: CALL_OW 488
24115: IFFALSE 24138
// begin result := [ x , y ] ;
24117: LD_ADDR_VAR 0 1
24121: PUSH
24122: LD_VAR 0 3
24126: PUSH
24127: LD_VAR 0 4
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: ST_TO_ADDR
// break ;
24136: GO 24140
// end ; end ;
24138: GO 23940
24140: POP
24141: POP
// if result then
24142: LD_VAR 0 1
24146: IFFALSE 24206
// begin ToLua ( playSibBomb() ) ;
24148: LD_STRING playSibBomb()
24150: PPUSH
24151: CALL_OW 559
// wait ( 0 0$14 ) ;
24155: LD_INT 490
24157: PPUSH
24158: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24162: LD_VAR 0 1
24166: PUSH
24167: LD_INT 1
24169: ARRAY
24170: PPUSH
24171: LD_VAR 0 1
24175: PUSH
24176: LD_INT 2
24178: ARRAY
24179: PPUSH
24180: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24184: LD_VAR 0 1
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PPUSH
24193: LD_VAR 0 1
24197: PUSH
24198: LD_INT 2
24200: ARRAY
24201: PPUSH
24202: CALL_OW 429
// end ; end ;
24206: LD_VAR 0 1
24210: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24211: LD_EXP 47
24215: IFFALSE 24223
24217: PUSH
24218: LD_EXP 69
24222: AND
24223: IFFALSE 24235
24225: GO 24227
24227: DISABLE
// YouLost (  ) ;
24228: LD_STRING 
24230: PPUSH
24231: CALL_OW 104
24235: END
// every 0 0$1 trigger StreamModeActive and sFog do
24236: LD_EXP 47
24240: IFFALSE 24248
24242: PUSH
24243: LD_EXP 68
24247: AND
24248: IFFALSE 24262
24250: GO 24252
24252: DISABLE
// FogOff ( your_side ) ;
24253: LD_OWVAR 2
24257: PPUSH
24258: CALL_OW 344
24262: END
// every 0 0$1 trigger StreamModeActive and sSun do
24263: LD_EXP 47
24267: IFFALSE 24275
24269: PUSH
24270: LD_EXP 70
24274: AND
24275: IFFALSE 24303
24277: GO 24279
24279: DISABLE
// begin solar_recharge_percent := 0 ;
24280: LD_ADDR_OWVAR 79
24284: PUSH
24285: LD_INT 0
24287: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24288: LD_INT 10500
24290: PPUSH
24291: CALL_OW 67
// solar_recharge_percent := 100 ;
24295: LD_ADDR_OWVAR 79
24299: PUSH
24300: LD_INT 100
24302: ST_TO_ADDR
// end ;
24303: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24304: LD_EXP 47
24308: IFFALSE 24316
24310: PUSH
24311: LD_EXP 71
24315: AND
24316: IFFALSE 24555
24318: GO 24320
24320: DISABLE
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
24325: PPUSH
// begin tmp := [ ] ;
24326: LD_ADDR_VAR 0 3
24330: PUSH
24331: EMPTY
24332: ST_TO_ADDR
// for i := 1 to 6 do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: DOUBLE
24339: LD_INT 1
24341: DEC
24342: ST_TO_ADDR
24343: LD_INT 6
24345: PUSH
24346: FOR_TO
24347: IFFALSE 24452
// begin uc_nation := nation_nature ;
24349: LD_ADDR_OWVAR 21
24353: PUSH
24354: LD_INT 0
24356: ST_TO_ADDR
// uc_side := 0 ;
24357: LD_ADDR_OWVAR 20
24361: PUSH
24362: LD_INT 0
24364: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24365: LD_ADDR_OWVAR 29
24369: PUSH
24370: LD_INT 12
24372: PUSH
24373: LD_INT 12
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// hc_agressivity := 20 ;
24380: LD_ADDR_OWVAR 35
24384: PUSH
24385: LD_INT 20
24387: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24388: LD_ADDR_OWVAR 28
24392: PUSH
24393: LD_INT 17
24395: ST_TO_ADDR
// hc_gallery :=  ;
24396: LD_ADDR_OWVAR 33
24400: PUSH
24401: LD_STRING 
24403: ST_TO_ADDR
// hc_name :=  ;
24404: LD_ADDR_OWVAR 26
24408: PUSH
24409: LD_STRING 
24411: ST_TO_ADDR
// un := CreateHuman ;
24412: LD_ADDR_VAR 0 2
24416: PUSH
24417: CALL_OW 44
24421: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24422: LD_VAR 0 2
24426: PPUSH
24427: LD_INT 1
24429: PPUSH
24430: CALL_OW 51
// tmp := tmp ^ un ;
24434: LD_ADDR_VAR 0 3
24438: PUSH
24439: LD_VAR 0 3
24443: PUSH
24444: LD_VAR 0 2
24448: ADD
24449: ST_TO_ADDR
// end ;
24450: GO 24346
24452: POP
24453: POP
// repeat wait ( 0 0$1 ) ;
24454: LD_INT 35
24456: PPUSH
24457: CALL_OW 67
// for un in tmp do
24461: LD_ADDR_VAR 0 2
24465: PUSH
24466: LD_VAR 0 3
24470: PUSH
24471: FOR_IN
24472: IFFALSE 24546
// begin if IsDead ( un ) then
24474: LD_VAR 0 2
24478: PPUSH
24479: CALL_OW 301
24483: IFFALSE 24503
// begin tmp := tmp diff un ;
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_VAR 0 3
24494: PUSH
24495: LD_VAR 0 2
24499: DIFF
24500: ST_TO_ADDR
// continue ;
24501: GO 24471
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_INT 3
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PPUSH
24525: CALL_OW 69
24529: PPUSH
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 74
24539: PPUSH
24540: CALL_OW 115
// end ;
24544: GO 24471
24546: POP
24547: POP
// until not tmp ;
24548: LD_VAR 0 3
24552: NOT
24553: IFFALSE 24454
// end ;
24555: PPOPN 3
24557: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24558: LD_EXP 47
24562: IFFALSE 24570
24564: PUSH
24565: LD_EXP 72
24569: AND
24570: IFFALSE 24624
24572: GO 24574
24574: DISABLE
// begin ToLua ( displayTroll(); ) ;
24575: LD_STRING displayTroll();
24577: PPUSH
24578: CALL_OW 559
// wait ( 3 3$00 ) ;
24582: LD_INT 6300
24584: PPUSH
24585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24589: LD_STRING hideTroll();
24591: PPUSH
24592: CALL_OW 559
// wait ( 1 1$00 ) ;
24596: LD_INT 2100
24598: PPUSH
24599: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24603: LD_STRING displayTroll();
24605: PPUSH
24606: CALL_OW 559
// wait ( 1 1$00 ) ;
24610: LD_INT 2100
24612: PPUSH
24613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24617: LD_STRING hideTroll();
24619: PPUSH
24620: CALL_OW 559
// end ;
24624: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24625: LD_EXP 47
24629: IFFALSE 24637
24631: PUSH
24632: LD_EXP 73
24636: AND
24637: IFFALSE 24700
24639: GO 24641
24641: DISABLE
24642: LD_INT 0
24644: PPUSH
// begin p := 0 ;
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: LD_INT 0
24652: ST_TO_ADDR
// repeat game_speed := 1 ;
24653: LD_ADDR_OWVAR 65
24657: PUSH
24658: LD_INT 1
24660: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24661: LD_INT 35
24663: PPUSH
24664: CALL_OW 67
// p := p + 1 ;
24668: LD_ADDR_VAR 0 1
24672: PUSH
24673: LD_VAR 0 1
24677: PUSH
24678: LD_INT 1
24680: PLUS
24681: ST_TO_ADDR
// until p >= 60 ;
24682: LD_VAR 0 1
24686: PUSH
24687: LD_INT 60
24689: GREATEREQUAL
24690: IFFALSE 24653
// game_speed := 4 ;
24692: LD_ADDR_OWVAR 65
24696: PUSH
24697: LD_INT 4
24699: ST_TO_ADDR
// end ;
24700: PPOPN 1
24702: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24703: LD_EXP 47
24707: IFFALSE 24715
24709: PUSH
24710: LD_EXP 74
24714: AND
24715: IFFALSE 24861
24717: GO 24719
24719: DISABLE
24720: LD_INT 0
24722: PPUSH
24723: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24724: LD_ADDR_VAR 0 1
24728: PUSH
24729: LD_INT 22
24731: PUSH
24732: LD_OWVAR 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PPUSH
24773: CALL_OW 69
24777: ST_TO_ADDR
// if not depot then
24778: LD_VAR 0 1
24782: NOT
24783: IFFALSE 24787
// exit ;
24785: GO 24861
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24787: LD_ADDR_VAR 0 2
24791: PUSH
24792: LD_VAR 0 1
24796: PUSH
24797: LD_INT 1
24799: PPUSH
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL_OW 12
24809: ARRAY
24810: PPUSH
24811: CALL_OW 274
24815: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24816: LD_VAR 0 2
24820: PPUSH
24821: LD_INT 1
24823: PPUSH
24824: LD_INT 0
24826: PPUSH
24827: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24831: LD_VAR 0 2
24835: PPUSH
24836: LD_INT 2
24838: PPUSH
24839: LD_INT 0
24841: PPUSH
24842: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24846: LD_VAR 0 2
24850: PPUSH
24851: LD_INT 3
24853: PPUSH
24854: LD_INT 0
24856: PPUSH
24857: CALL_OW 277
// end ;
24861: PPOPN 2
24863: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24864: LD_EXP 47
24868: IFFALSE 24876
24870: PUSH
24871: LD_EXP 75
24875: AND
24876: IFFALSE 24973
24878: GO 24880
24880: DISABLE
24881: LD_INT 0
24883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24884: LD_ADDR_VAR 0 1
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_OWVAR 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: LD_INT 23
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: ST_TO_ADDR
// if not tmp then
24938: LD_VAR 0 1
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 24973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24947: LD_VAR 0 1
24951: PUSH
24952: LD_INT 1
24954: PPUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 12
24964: ARRAY
24965: PPUSH
24966: LD_INT 200
24968: PPUSH
24969: CALL_OW 234
// end ;
24973: PPOPN 1
24975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24976: LD_EXP 47
24980: IFFALSE 24988
24982: PUSH
24983: LD_EXP 76
24987: AND
24988: IFFALSE 25067
24990: GO 24992
24992: DISABLE
24993: LD_INT 0
24995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24996: LD_ADDR_VAR 0 1
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_OWVAR 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 21
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if not tmp then
25032: LD_VAR 0 1
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25041: LD_VAR 0 1
25045: PUSH
25046: LD_INT 1
25048: PPUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 12
25058: ARRAY
25059: PPUSH
25060: LD_INT 60
25062: PPUSH
25063: CALL_OW 234
// end ;
25067: PPOPN 1
25069: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25070: LD_EXP 47
25074: IFFALSE 25082
25076: PUSH
25077: LD_EXP 77
25081: AND
25082: IFFALSE 25181
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
25090: PPUSH
// begin enable ;
25091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25092: LD_ADDR_VAR 0 1
25096: PUSH
25097: LD_INT 22
25099: PUSH
25100: LD_OWVAR 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 61
25111: PUSH
25112: EMPTY
25113: LIST
25114: PUSH
25115: LD_INT 33
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 1
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25181
// for i in tmp do
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_VAR 0 1
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25179
// if IsControledBy ( i ) then
25157: LD_VAR 0 2
25161: PPUSH
25162: CALL_OW 312
25166: IFFALSE 25177
// ComUnlink ( i ) ;
25168: LD_VAR 0 2
25172: PPUSH
25173: CALL_OW 136
25177: GO 25154
25179: POP
25180: POP
// end ;
25181: PPOPN 2
25183: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25184: LD_EXP 47
25188: IFFALSE 25196
25190: PUSH
25191: LD_EXP 78
25195: AND
25196: IFFALSE 25336
25198: GO 25200
25200: DISABLE
25201: LD_INT 0
25203: PPUSH
25204: PPUSH
// begin ToLua ( displayPowell(); ) ;
25205: LD_STRING displayPowell();
25207: PPUSH
25208: CALL_OW 559
// uc_side := 0 ;
25212: LD_ADDR_OWVAR 20
25216: PUSH
25217: LD_INT 0
25219: ST_TO_ADDR
// uc_nation := 2 ;
25220: LD_ADDR_OWVAR 21
25224: PUSH
25225: LD_INT 2
25227: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25228: LD_ADDR_OWVAR 37
25232: PUSH
25233: LD_INT 14
25235: ST_TO_ADDR
// vc_engine := engine_siberite ;
25236: LD_ADDR_OWVAR 39
25240: PUSH
25241: LD_INT 3
25243: ST_TO_ADDR
// vc_control := control_apeman ;
25244: LD_ADDR_OWVAR 38
25248: PUSH
25249: LD_INT 5
25251: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25252: LD_ADDR_OWVAR 40
25256: PUSH
25257: LD_INT 29
25259: ST_TO_ADDR
// un := CreateVehicle ;
25260: LD_ADDR_VAR 0 2
25264: PUSH
25265: CALL_OW 45
25269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25270: LD_VAR 0 2
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25282: LD_INT 35
25284: PPUSH
25285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 22
25296: PUSH
25297: LD_OWVAR 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PPUSH
25306: CALL_OW 69
25310: PPUSH
25311: LD_VAR 0 2
25315: PPUSH
25316: CALL_OW 74
25320: PPUSH
25321: CALL_OW 115
// until IsDead ( un ) ;
25325: LD_VAR 0 2
25329: PPUSH
25330: CALL_OW 301
25334: IFFALSE 25282
// end ;
25336: PPOPN 2
25338: END
// every 0 0$1 trigger StreamModeActive and sStu do
25339: LD_EXP 47
25343: IFFALSE 25351
25345: PUSH
25346: LD_EXP 86
25350: AND
25351: IFFALSE 25367
25353: GO 25355
25355: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25356: LD_STRING displayStucuk();
25358: PPUSH
25359: CALL_OW 559
// ResetFog ;
25363: CALL_OW 335
// end ;
25367: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25368: LD_EXP 47
25372: IFFALSE 25380
25374: PUSH
25375: LD_EXP 79
25379: AND
25380: IFFALSE 25521
25382: GO 25384
25384: DISABLE
25385: LD_INT 0
25387: PPUSH
25388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25389: LD_ADDR_VAR 0 2
25393: PUSH
25394: LD_INT 22
25396: PUSH
25397: LD_OWVAR 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 21
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: CALL_OW 69
25424: ST_TO_ADDR
// if not tmp then
25425: LD_VAR 0 2
25429: NOT
25430: IFFALSE 25434
// exit ;
25432: GO 25521
// un := tmp [ rand ( 1 , tmp ) ] ;
25434: LD_ADDR_VAR 0 1
25438: PUSH
25439: LD_VAR 0 2
25443: PUSH
25444: LD_INT 1
25446: PPUSH
25447: LD_VAR 0 2
25451: PPUSH
25452: CALL_OW 12
25456: ARRAY
25457: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25458: LD_VAR 0 1
25462: PPUSH
25463: LD_INT 0
25465: PPUSH
25466: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_OWVAR 3
25479: PUSH
25480: LD_VAR 0 1
25484: DIFF
25485: PPUSH
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 74
25495: PPUSH
25496: CALL_OW 115
// wait ( 0 0$20 ) ;
25500: LD_INT 700
25502: PPUSH
25503: CALL_OW 67
// SetSide ( un , your_side ) ;
25507: LD_VAR 0 1
25511: PPUSH
25512: LD_OWVAR 2
25516: PPUSH
25517: CALL_OW 235
// end ;
25521: PPOPN 2
25523: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25524: LD_EXP 47
25528: IFFALSE 25536
25530: PUSH
25531: LD_EXP 80
25535: AND
25536: IFFALSE 25642
25538: GO 25540
25540: DISABLE
25541: LD_INT 0
25543: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: LD_INT 22
25551: PUSH
25552: LD_OWVAR 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 30
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 30
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 69
25597: ST_TO_ADDR
// if not depot then
25598: LD_VAR 0 1
25602: NOT
25603: IFFALSE 25607
// exit ;
25605: GO 25642
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25607: LD_VAR 0 1
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PPUSH
25616: CALL_OW 250
25620: PPUSH
25621: LD_VAR 0 1
25625: PUSH
25626: LD_INT 1
25628: ARRAY
25629: PPUSH
25630: CALL_OW 251
25634: PPUSH
25635: LD_INT 70
25637: PPUSH
25638: CALL_OW 495
// end ;
25642: PPOPN 1
25644: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25645: LD_EXP 47
25649: IFFALSE 25657
25651: PUSH
25652: LD_EXP 81
25656: AND
25657: IFFALSE 25868
25659: GO 25661
25661: DISABLE
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25669: LD_ADDR_VAR 0 5
25673: PUSH
25674: LD_INT 22
25676: PUSH
25677: LD_OWVAR 2
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 21
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 69
25704: ST_TO_ADDR
// if not tmp then
25705: LD_VAR 0 5
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 25868
// for i in tmp do
25714: LD_ADDR_VAR 0 1
25718: PUSH
25719: LD_VAR 0 5
25723: PUSH
25724: FOR_IN
25725: IFFALSE 25866
// begin d := rand ( 0 , 5 ) ;
25727: LD_ADDR_VAR 0 4
25731: PUSH
25732: LD_INT 0
25734: PPUSH
25735: LD_INT 5
25737: PPUSH
25738: CALL_OW 12
25742: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25743: LD_ADDR_VAR 0 2
25747: PUSH
25748: LD_VAR 0 1
25752: PPUSH
25753: CALL_OW 250
25757: PPUSH
25758: LD_VAR 0 4
25762: PPUSH
25763: LD_INT 3
25765: PPUSH
25766: LD_INT 12
25768: PPUSH
25769: CALL_OW 12
25773: PPUSH
25774: CALL_OW 272
25778: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 251
25793: PPUSH
25794: LD_VAR 0 4
25798: PPUSH
25799: LD_INT 3
25801: PPUSH
25802: LD_INT 12
25804: PPUSH
25805: CALL_OW 12
25809: PPUSH
25810: CALL_OW 273
25814: ST_TO_ADDR
// if ValidHex ( x , y ) then
25815: LD_VAR 0 2
25819: PPUSH
25820: LD_VAR 0 3
25824: PPUSH
25825: CALL_OW 488
25829: IFFALSE 25864
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_VAR 0 2
25840: PPUSH
25841: LD_VAR 0 3
25845: PPUSH
25846: LD_INT 3
25848: PPUSH
25849: LD_INT 6
25851: PPUSH
25852: CALL_OW 12
25856: PPUSH
25857: LD_INT 1
25859: PPUSH
25860: CALL_OW 483
// end ;
25864: GO 25724
25866: POP
25867: POP
// end ;
25868: PPOPN 5
25870: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25871: LD_EXP 47
25875: IFFALSE 25883
25877: PUSH
25878: LD_EXP 82
25882: AND
25883: IFFALSE 25977
25885: GO 25887
25887: DISABLE
25888: LD_INT 0
25890: PPUSH
25891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25892: LD_ADDR_VAR 0 2
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_OWVAR 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 32
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 21
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 2
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 25977
// for i in tmp do
25948: LD_ADDR_VAR 0 1
25952: PUSH
25953: LD_VAR 0 2
25957: PUSH
25958: FOR_IN
25959: IFFALSE 25975
// SetFuel ( i , 0 ) ;
25961: LD_VAR 0 1
25965: PPUSH
25966: LD_INT 0
25968: PPUSH
25969: CALL_OW 240
25973: GO 25958
25975: POP
25976: POP
// end ;
25977: PPOPN 2
25979: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25980: LD_EXP 47
25984: IFFALSE 25992
25986: PUSH
25987: LD_EXP 83
25991: AND
25992: IFFALSE 26058
25994: GO 25996
25996: DISABLE
25997: LD_INT 0
25999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26000: LD_ADDR_VAR 0 1
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 30
26019: PUSH
26020: LD_INT 29
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: ST_TO_ADDR
// if not tmp then
26036: LD_VAR 0 1
26040: NOT
26041: IFFALSE 26045
// exit ;
26043: GO 26058
// DestroyUnit ( tmp [ 1 ] ) ;
26045: LD_VAR 0 1
26049: PUSH
26050: LD_INT 1
26052: ARRAY
26053: PPUSH
26054: CALL_OW 65
// end ;
26058: PPOPN 1
26060: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26061: LD_EXP 47
26065: IFFALSE 26073
26067: PUSH
26068: LD_EXP 85
26072: AND
26073: IFFALSE 26202
26075: GO 26077
26077: DISABLE
26078: LD_INT 0
26080: PPUSH
// begin uc_side := 0 ;
26081: LD_ADDR_OWVAR 20
26085: PUSH
26086: LD_INT 0
26088: ST_TO_ADDR
// uc_nation := nation_arabian ;
26089: LD_ADDR_OWVAR 21
26093: PUSH
26094: LD_INT 2
26096: ST_TO_ADDR
// hc_gallery :=  ;
26097: LD_ADDR_OWVAR 33
26101: PUSH
26102: LD_STRING 
26104: ST_TO_ADDR
// hc_name :=  ;
26105: LD_ADDR_OWVAR 26
26109: PUSH
26110: LD_STRING 
26112: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26113: LD_INT 1
26115: PPUSH
26116: LD_INT 11
26118: PPUSH
26119: LD_INT 10
26121: PPUSH
26122: CALL_OW 380
// un := CreateHuman ;
26126: LD_ADDR_VAR 0 1
26130: PUSH
26131: CALL_OW 44
26135: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 1
26143: PPUSH
26144: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26148: LD_INT 35
26150: PPUSH
26151: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26155: LD_VAR 0 1
26159: PPUSH
26160: LD_INT 22
26162: PUSH
26163: LD_OWVAR 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: PPUSH
26177: LD_VAR 0 1
26181: PPUSH
26182: CALL_OW 74
26186: PPUSH
26187: CALL_OW 115
// until IsDead ( un ) ;
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 301
26200: IFFALSE 26148
// end ;
26202: PPOPN 1
26204: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26205: LD_EXP 47
26209: IFFALSE 26217
26211: PUSH
26212: LD_EXP 87
26216: AND
26217: IFFALSE 26229
26219: GO 26221
26221: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26222: LD_STRING earthquake(getX(game), 0, 32)
26224: PPUSH
26225: CALL_OW 559
26229: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26230: LD_EXP 47
26234: IFFALSE 26242
26236: PUSH
26237: LD_EXP 88
26241: AND
26242: IFFALSE 26333
26244: GO 26246
26246: DISABLE
26247: LD_INT 0
26249: PPUSH
// begin enable ;
26250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26251: LD_ADDR_VAR 0 1
26255: PUSH
26256: LD_INT 22
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 33
26280: PUSH
26281: LD_INT 3
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: PPUSH
26293: CALL_OW 69
26297: ST_TO_ADDR
// if not tmp then
26298: LD_VAR 0 1
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26307: LD_VAR 0 1
26311: PUSH
26312: LD_INT 1
26314: PPUSH
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL_OW 12
26324: ARRAY
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 234
// end ;
26333: PPOPN 1
26335: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26336: LD_EXP 47
26340: IFFALSE 26348
26342: PUSH
26343: LD_EXP 89
26347: AND
26348: IFFALSE 26489
26350: GO 26352
26352: DISABLE
26353: LD_INT 0
26355: PPUSH
26356: PPUSH
26357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26358: LD_ADDR_VAR 0 3
26362: PUSH
26363: LD_INT 22
26365: PUSH
26366: LD_OWVAR 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 25
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PPUSH
26389: CALL_OW 69
26393: ST_TO_ADDR
// if not tmp then
26394: LD_VAR 0 3
26398: NOT
26399: IFFALSE 26403
// exit ;
26401: GO 26489
// un := tmp [ rand ( 1 , tmp ) ] ;
26403: LD_ADDR_VAR 0 2
26407: PUSH
26408: LD_VAR 0 3
26412: PUSH
26413: LD_INT 1
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: CALL_OW 12
26425: ARRAY
26426: ST_TO_ADDR
// if Crawls ( un ) then
26427: LD_VAR 0 2
26431: PPUSH
26432: CALL_OW 318
26436: IFFALSE 26447
// ComWalk ( un ) ;
26438: LD_VAR 0 2
26442: PPUSH
26443: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_INT 9
26454: PPUSH
26455: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26459: LD_INT 28
26461: PPUSH
26462: LD_OWVAR 2
26466: PPUSH
26467: LD_INT 2
26469: PPUSH
26470: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26474: LD_INT 29
26476: PPUSH
26477: LD_OWVAR 2
26481: PPUSH
26482: LD_INT 2
26484: PPUSH
26485: CALL_OW 322
// end ;
26489: PPOPN 3
26491: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26492: LD_EXP 47
26496: IFFALSE 26504
26498: PUSH
26499: LD_EXP 90
26503: AND
26504: IFFALSE 26615
26506: GO 26508
26508: DISABLE
26509: LD_INT 0
26511: PPUSH
26512: PPUSH
26513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_INT 22
26521: PUSH
26522: LD_OWVAR 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 25
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PPUSH
26545: CALL_OW 69
26549: ST_TO_ADDR
// if not tmp then
26550: LD_VAR 0 3
26554: NOT
26555: IFFALSE 26559
// exit ;
26557: GO 26615
// un := tmp [ rand ( 1 , tmp ) ] ;
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_VAR 0 3
26568: PUSH
26569: LD_INT 1
26571: PPUSH
26572: LD_VAR 0 3
26576: PPUSH
26577: CALL_OW 12
26581: ARRAY
26582: ST_TO_ADDR
// if Crawls ( un ) then
26583: LD_VAR 0 2
26587: PPUSH
26588: CALL_OW 318
26592: IFFALSE 26603
// ComWalk ( un ) ;
26594: LD_VAR 0 2
26598: PPUSH
26599: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26603: LD_VAR 0 2
26607: PPUSH
26608: LD_INT 8
26610: PPUSH
26611: CALL_OW 336
// end ;
26615: PPOPN 3
26617: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26618: LD_EXP 47
26622: IFFALSE 26630
26624: PUSH
26625: LD_EXP 91
26629: AND
26630: IFFALSE 26774
26632: GO 26634
26634: DISABLE
26635: LD_INT 0
26637: PPUSH
26638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26639: LD_ADDR_VAR 0 2
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_OWVAR 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 21
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: LD_INT 34
26671: PUSH
26672: LD_INT 12
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 34
26681: PUSH
26682: LD_INT 51
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 34
26691: PUSH
26692: LD_INT 32
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: PPUSH
26710: CALL_OW 69
26714: ST_TO_ADDR
// if not tmp then
26715: LD_VAR 0 2
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 26774
// for i in tmp do
26724: LD_ADDR_VAR 0 1
26728: PUSH
26729: LD_VAR 0 2
26733: PUSH
26734: FOR_IN
26735: IFFALSE 26772
// if GetCargo ( i , mat_artifact ) = 0 then
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_INT 4
26744: PPUSH
26745: CALL_OW 289
26749: PUSH
26750: LD_INT 0
26752: EQUAL
26753: IFFALSE 26770
// SetCargo ( i , mat_siberit , 100 ) ;
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_INT 3
26762: PPUSH
26763: LD_INT 100
26765: PPUSH
26766: CALL_OW 290
26770: GO 26734
26772: POP
26773: POP
// end ;
26774: PPOPN 2
26776: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26777: LD_EXP 47
26781: IFFALSE 26789
26783: PUSH
26784: LD_EXP 92
26788: AND
26789: IFFALSE 26972
26791: GO 26793
26793: DISABLE
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: LD_INT 22
26805: PUSH
26806: LD_OWVAR 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: ST_TO_ADDR
// if not tmp then
26820: LD_VAR 0 2
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 26972
// for i := 1 to 2 do
26829: LD_ADDR_VAR 0 1
26833: PUSH
26834: DOUBLE
26835: LD_INT 1
26837: DEC
26838: ST_TO_ADDR
26839: LD_INT 2
26841: PUSH
26842: FOR_TO
26843: IFFALSE 26970
// begin uc_side := your_side ;
26845: LD_ADDR_OWVAR 20
26849: PUSH
26850: LD_OWVAR 2
26854: ST_TO_ADDR
// uc_nation := nation_american ;
26855: LD_ADDR_OWVAR 21
26859: PUSH
26860: LD_INT 1
26862: ST_TO_ADDR
// vc_chassis := us_morphling ;
26863: LD_ADDR_OWVAR 37
26867: PUSH
26868: LD_INT 5
26870: ST_TO_ADDR
// vc_engine := engine_siberite ;
26871: LD_ADDR_OWVAR 39
26875: PUSH
26876: LD_INT 3
26878: ST_TO_ADDR
// vc_control := control_computer ;
26879: LD_ADDR_OWVAR 38
26883: PUSH
26884: LD_INT 3
26886: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26887: LD_ADDR_OWVAR 40
26891: PUSH
26892: LD_INT 10
26894: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26895: LD_VAR 0 2
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: PPUSH
26904: CALL_OW 310
26908: NOT
26909: IFFALSE 26956
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26911: CALL_OW 45
26915: PPUSH
26916: LD_VAR 0 2
26920: PUSH
26921: LD_INT 1
26923: ARRAY
26924: PPUSH
26925: CALL_OW 250
26929: PPUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_INT 1
26937: ARRAY
26938: PPUSH
26939: CALL_OW 251
26943: PPUSH
26944: LD_INT 12
26946: PPUSH
26947: LD_INT 1
26949: PPUSH
26950: CALL_OW 50
26954: GO 26968
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26956: CALL_OW 45
26960: PPUSH
26961: LD_INT 1
26963: PPUSH
26964: CALL_OW 51
// end ;
26968: GO 26842
26970: POP
26971: POP
// end ;
26972: PPOPN 2
26974: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26975: LD_EXP 47
26979: IFFALSE 26987
26981: PUSH
26982: LD_EXP 93
26986: AND
26987: IFFALSE 27209
26989: GO 26991
26991: DISABLE
26992: LD_INT 0
26994: PPUSH
26995: PPUSH
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27000: LD_ADDR_VAR 0 6
27004: PUSH
27005: LD_INT 22
27007: PUSH
27008: LD_OWVAR 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 23
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: ST_TO_ADDR
// if not tmp then
27054: LD_VAR 0 6
27058: NOT
27059: IFFALSE 27063
// exit ;
27061: GO 27209
// s1 := rand ( 1 , 4 ) ;
27063: LD_ADDR_VAR 0 2
27067: PUSH
27068: LD_INT 1
27070: PPUSH
27071: LD_INT 4
27073: PPUSH
27074: CALL_OW 12
27078: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27079: LD_ADDR_VAR 0 4
27083: PUSH
27084: LD_VAR 0 6
27088: PUSH
27089: LD_INT 1
27091: ARRAY
27092: PPUSH
27093: LD_VAR 0 2
27097: PPUSH
27098: CALL_OW 259
27102: ST_TO_ADDR
// if s1 = 1 then
27103: LD_VAR 0 2
27107: PUSH
27108: LD_INT 1
27110: EQUAL
27111: IFFALSE 27131
// s2 := rand ( 2 , 4 ) else
27113: LD_ADDR_VAR 0 3
27117: PUSH
27118: LD_INT 2
27120: PPUSH
27121: LD_INT 4
27123: PPUSH
27124: CALL_OW 12
27128: ST_TO_ADDR
27129: GO 27139
// s2 := 1 ;
27131: LD_ADDR_VAR 0 3
27135: PUSH
27136: LD_INT 1
27138: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27139: LD_ADDR_VAR 0 5
27143: PUSH
27144: LD_VAR 0 6
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 259
27162: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27163: LD_VAR 0 6
27167: PUSH
27168: LD_INT 1
27170: ARRAY
27171: PPUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: LD_VAR 0 5
27181: PPUSH
27182: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27186: LD_VAR 0 6
27190: PUSH
27191: LD_INT 1
27193: ARRAY
27194: PPUSH
27195: LD_VAR 0 3
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: CALL_OW 237
// end ;
27209: PPOPN 6
27211: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27212: LD_EXP 47
27216: IFFALSE 27224
27218: PUSH
27219: LD_EXP 94
27223: AND
27224: IFFALSE 27303
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27232: LD_ADDR_VAR 0 1
27236: PUSH
27237: LD_INT 22
27239: PUSH
27240: LD_OWVAR 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 30
27251: PUSH
27252: LD_INT 3
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 69
27267: ST_TO_ADDR
// if not tmp then
27268: LD_VAR 0 1
27272: NOT
27273: IFFALSE 27277
// exit ;
27275: GO 27303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27277: LD_VAR 0 1
27281: PUSH
27282: LD_INT 1
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 12
27294: ARRAY
27295: PPUSH
27296: LD_INT 1
27298: PPUSH
27299: CALL_OW 234
// end ;
27303: PPOPN 1
27305: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27306: LD_EXP 47
27310: IFFALSE 27318
27312: PUSH
27313: LD_EXP 95
27317: AND
27318: IFFALSE 27430
27320: GO 27322
27322: DISABLE
27323: LD_INT 0
27325: PPUSH
27326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27327: LD_ADDR_VAR 0 2
27331: PUSH
27332: LD_INT 22
27334: PUSH
27335: LD_OWVAR 2
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 30
27349: PUSH
27350: LD_INT 27
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 30
27359: PUSH
27360: LD_INT 26
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 30
27369: PUSH
27370: LD_INT 28
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: ST_TO_ADDR
// if not tmp then
27392: LD_VAR 0 2
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 27430
// for i in tmp do
27401: LD_ADDR_VAR 0 1
27405: PUSH
27406: LD_VAR 0 2
27410: PUSH
27411: FOR_IN
27412: IFFALSE 27428
// SetLives ( i , 1 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_INT 1
27421: PPUSH
27422: CALL_OW 234
27426: GO 27411
27428: POP
27429: POP
// end ;
27430: PPOPN 2
27432: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27433: LD_EXP 47
27437: IFFALSE 27445
27439: PUSH
27440: LD_EXP 96
27444: AND
27445: IFFALSE 27732
27447: GO 27449
27449: DISABLE
27450: LD_INT 0
27452: PPUSH
27453: PPUSH
27454: PPUSH
// begin i := rand ( 1 , 7 ) ;
27455: LD_ADDR_VAR 0 1
27459: PUSH
27460: LD_INT 1
27462: PPUSH
27463: LD_INT 7
27465: PPUSH
27466: CALL_OW 12
27470: ST_TO_ADDR
// case i of 1 :
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27484
27482: GO 27494
27484: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27485: LD_STRING earthquake(getX(game), 0, 32)
27487: PPUSH
27488: CALL_OW 559
27492: GO 27732
27494: LD_INT 2
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27502
27500: GO 27516
27502: POP
// begin ToLua ( displayStucuk(); ) ;
27503: LD_STRING displayStucuk();
27505: PPUSH
27506: CALL_OW 559
// ResetFog ;
27510: CALL_OW 335
// end ; 3 :
27514: GO 27732
27516: LD_INT 3
27518: DOUBLE
27519: EQUAL
27520: IFTRUE 27524
27522: GO 27628
27524: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27525: LD_ADDR_VAR 0 2
27529: PUSH
27530: LD_INT 22
27532: PUSH
27533: LD_OWVAR 2
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 25
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: ST_TO_ADDR
// if not tmp then
27561: LD_VAR 0 2
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27732
// un := tmp [ rand ( 1 , tmp ) ] ;
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_VAR 0 2
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_VAR 0 2
27587: PPUSH
27588: CALL_OW 12
27592: ARRAY
27593: ST_TO_ADDR
// if Crawls ( un ) then
27594: LD_VAR 0 3
27598: PPUSH
27599: CALL_OW 318
27603: IFFALSE 27614
// ComWalk ( un ) ;
27605: LD_VAR 0 3
27609: PPUSH
27610: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27614: LD_VAR 0 3
27618: PPUSH
27619: LD_INT 8
27621: PPUSH
27622: CALL_OW 336
// end ; 4 :
27626: GO 27732
27628: LD_INT 4
27630: DOUBLE
27631: EQUAL
27632: IFTRUE 27636
27634: GO 27710
27636: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27637: LD_ADDR_VAR 0 2
27641: PUSH
27642: LD_INT 22
27644: PUSH
27645: LD_OWVAR 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 30
27656: PUSH
27657: LD_INT 29
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PPUSH
27668: CALL_OW 69
27672: ST_TO_ADDR
// if not tmp then
27673: LD_VAR 0 2
27677: NOT
27678: IFFALSE 27682
// exit ;
27680: GO 27732
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27682: LD_VAR 0 2
27686: PUSH
27687: LD_INT 1
27689: ARRAY
27690: PPUSH
27691: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27695: LD_VAR 0 2
27699: PUSH
27700: LD_INT 1
27702: ARRAY
27703: PPUSH
27704: CALL_OW 65
// end ; 5 .. 7 :
27708: GO 27732
27710: LD_INT 5
27712: DOUBLE
27713: GREATEREQUAL
27714: IFFALSE 27722
27716: LD_INT 7
27718: DOUBLE
27719: LESSEQUAL
27720: IFTRUE 27724
27722: GO 27731
27724: POP
// StreamSibBomb ; end ;
27725: CALL 23913 0 0
27729: GO 27732
27731: POP
// end ;
27732: PPOPN 3
27734: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27735: LD_EXP 47
27739: IFFALSE 27747
27741: PUSH
27742: LD_EXP 97
27746: AND
27747: IFFALSE 27903
27749: GO 27751
27751: DISABLE
27752: LD_INT 0
27754: PPUSH
27755: PPUSH
27756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27757: LD_ADDR_VAR 0 2
27761: PUSH
27762: LD_INT 81
27764: PUSH
27765: LD_OWVAR 2
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 21
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 21
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PPUSH
27806: CALL_OW 69
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 2
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 27903
// p := 0 ;
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 0
27827: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27828: LD_INT 35
27830: PPUSH
27831: CALL_OW 67
// p := p + 1 ;
27835: LD_ADDR_VAR 0 3
27839: PUSH
27840: LD_VAR 0 3
27844: PUSH
27845: LD_INT 1
27847: PLUS
27848: ST_TO_ADDR
// for i in tmp do
27849: LD_ADDR_VAR 0 1
27853: PUSH
27854: LD_VAR 0 2
27858: PUSH
27859: FOR_IN
27860: IFFALSE 27891
// if GetLives ( i ) < 1000 then
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 256
27871: PUSH
27872: LD_INT 1000
27874: LESS
27875: IFFALSE 27889
// SetLives ( i , 1000 ) ;
27877: LD_VAR 0 1
27881: PPUSH
27882: LD_INT 1000
27884: PPUSH
27885: CALL_OW 234
27889: GO 27859
27891: POP
27892: POP
// until p > 20 ;
27893: LD_VAR 0 3
27897: PUSH
27898: LD_INT 20
27900: GREATER
27901: IFFALSE 27828
// end ;
27903: PPOPN 3
27905: END
// every 0 0$1 trigger StreamModeActive and sTime do
27906: LD_EXP 47
27910: IFFALSE 27918
27912: PUSH
27913: LD_EXP 98
27917: AND
27918: IFFALSE 27953
27920: GO 27922
27922: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27923: LD_INT 28
27925: PPUSH
27926: LD_OWVAR 2
27930: PPUSH
27931: LD_INT 2
27933: PPUSH
27934: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27938: LD_INT 30
27940: PPUSH
27941: LD_OWVAR 2
27945: PPUSH
27946: LD_INT 2
27948: PPUSH
27949: CALL_OW 322
// end ;
27953: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27954: LD_EXP 47
27958: IFFALSE 27966
27960: PUSH
27961: LD_EXP 99
27965: AND
27966: IFFALSE 28087
27968: GO 27970
27970: DISABLE
27971: LD_INT 0
27973: PPUSH
27974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_INT 22
27982: PUSH
27983: LD_OWVAR 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 21
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 3
28004: PUSH
28005: LD_INT 23
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 69
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 2
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28087
// for i in tmp do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: LD_VAR 0 2
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28085
// begin if Crawls ( i ) then
28051: LD_VAR 0 1
28055: PPUSH
28056: CALL_OW 318
28060: IFFALSE 28071
// ComWalk ( i ) ;
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 138
// SetClass ( i , 2 ) ;
28071: LD_VAR 0 1
28075: PPUSH
28076: LD_INT 2
28078: PPUSH
28079: CALL_OW 336
// end ;
28083: GO 28048
28085: POP
28086: POP
// end ;
28087: PPOPN 2
28089: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28090: LD_EXP 47
28094: IFFALSE 28102
28096: PUSH
28097: LD_EXP 100
28101: AND
28102: IFFALSE 28392
28104: GO 28106
28106: DISABLE
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28112: LD_OWVAR 2
28116: PPUSH
28117: LD_INT 9
28119: PPUSH
28120: LD_INT 1
28122: PPUSH
28123: LD_INT 1
28125: PPUSH
28126: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28130: LD_INT 9
28132: PPUSH
28133: LD_OWVAR 2
28137: PPUSH
28138: CALL_OW 343
// uc_side := 9 ;
28142: LD_ADDR_OWVAR 20
28146: PUSH
28147: LD_INT 9
28149: ST_TO_ADDR
// uc_nation := 2 ;
28150: LD_ADDR_OWVAR 21
28154: PUSH
28155: LD_INT 2
28157: ST_TO_ADDR
// hc_name := Dark Warrior ;
28158: LD_ADDR_OWVAR 26
28162: PUSH
28163: LD_STRING Dark Warrior
28165: ST_TO_ADDR
// hc_gallery :=  ;
28166: LD_ADDR_OWVAR 33
28170: PUSH
28171: LD_STRING 
28173: ST_TO_ADDR
// hc_noskilllimit := true ;
28174: LD_ADDR_OWVAR 76
28178: PUSH
28179: LD_INT 1
28181: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28182: LD_ADDR_OWVAR 31
28186: PUSH
28187: LD_INT 30
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 30
28195: PUSH
28196: LD_INT 30
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// un := CreateHuman ;
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: CALL_OW 44
28214: ST_TO_ADDR
// hc_noskilllimit := false ;
28215: LD_ADDR_OWVAR 76
28219: PUSH
28220: LD_INT 0
28222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28223: LD_VAR 0 3
28227: PPUSH
28228: LD_INT 1
28230: PPUSH
28231: CALL_OW 51
// ToLua ( playRanger() ) ;
28235: LD_STRING playRanger()
28237: PPUSH
28238: CALL_OW 559
// p := 0 ;
28242: LD_ADDR_VAR 0 2
28246: PUSH
28247: LD_INT 0
28249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28250: LD_INT 35
28252: PPUSH
28253: CALL_OW 67
// p := p + 1 ;
28257: LD_ADDR_VAR 0 2
28261: PUSH
28262: LD_VAR 0 2
28266: PUSH
28267: LD_INT 1
28269: PLUS
28270: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28271: LD_VAR 0 3
28275: PPUSH
28276: CALL_OW 256
28280: PUSH
28281: LD_INT 1000
28283: LESS
28284: IFFALSE 28298
// SetLives ( un , 1000 ) ;
28286: LD_VAR 0 3
28290: PPUSH
28291: LD_INT 1000
28293: PPUSH
28294: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28298: LD_VAR 0 3
28302: PPUSH
28303: LD_INT 81
28305: PUSH
28306: LD_OWVAR 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 91
28317: PUSH
28318: LD_VAR 0 3
28322: PUSH
28323: LD_INT 30
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 69
28339: PPUSH
28340: LD_VAR 0 3
28344: PPUSH
28345: CALL_OW 74
28349: PPUSH
28350: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28354: LD_VAR 0 2
28358: PUSH
28359: LD_INT 80
28361: GREATER
28362: IFTRUE 28375
28364: PUSH
28365: LD_VAR 0 3
28369: PPUSH
28370: CALL_OW 301
28374: OR
28375: IFFALSE 28250
// if un then
28377: LD_VAR 0 3
28381: IFFALSE 28392
// RemoveUnit ( un ) ;
28383: LD_VAR 0 3
28387: PPUSH
28388: CALL_OW 64
// end ;
28392: PPOPN 3
28394: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28395: LD_EXP 101
28399: IFFALSE 28515
28401: GO 28403
28403: DISABLE
28404: LD_INT 0
28406: PPUSH
28407: PPUSH
28408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_INT 81
28416: PUSH
28417: LD_OWVAR 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 21
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 69
28444: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28445: LD_STRING playComputer()
28447: PPUSH
28448: CALL_OW 559
// if not tmp then
28452: LD_VAR 0 2
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 28515
// for i in tmp do
28461: LD_ADDR_VAR 0 1
28465: PUSH
28466: LD_VAR 0 2
28470: PUSH
28471: FOR_IN
28472: IFFALSE 28513
// for j := 1 to 4 do
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: DOUBLE
28480: LD_INT 1
28482: DEC
28483: ST_TO_ADDR
28484: LD_INT 4
28486: PUSH
28487: FOR_TO
28488: IFFALSE 28509
// SetSkill ( i , j , 10 ) ;
28490: LD_VAR 0 1
28494: PPUSH
28495: LD_VAR 0 3
28499: PPUSH
28500: LD_INT 10
28502: PPUSH
28503: CALL_OW 237
28507: GO 28487
28509: POP
28510: POP
28511: GO 28471
28513: POP
28514: POP
// end ;
28515: PPOPN 3
28517: END
// every 0 0$1 trigger s30 do var i , tmp ;
28518: LD_EXP 102
28522: IFFALSE 28591
28524: GO 28526
28526: DISABLE
28527: LD_INT 0
28529: PPUSH
28530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28531: LD_ADDR_VAR 0 2
28535: PUSH
28536: LD_INT 22
28538: PUSH
28539: LD_OWVAR 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PPUSH
28548: CALL_OW 69
28552: ST_TO_ADDR
// if not tmp then
28553: LD_VAR 0 2
28557: NOT
28558: IFFALSE 28562
// exit ;
28560: GO 28591
// for i in tmp do
28562: LD_ADDR_VAR 0 1
28566: PUSH
28567: LD_VAR 0 2
28571: PUSH
28572: FOR_IN
28573: IFFALSE 28589
// SetLives ( i , 300 ) ;
28575: LD_VAR 0 1
28579: PPUSH
28580: LD_INT 300
28582: PPUSH
28583: CALL_OW 234
28587: GO 28572
28589: POP
28590: POP
// end ;
28591: PPOPN 2
28593: END
// every 0 0$1 trigger s60 do var i , tmp ;
28594: LD_EXP 103
28598: IFFALSE 28667
28600: GO 28602
28602: DISABLE
28603: LD_INT 0
28605: PPUSH
28606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28607: LD_ADDR_VAR 0 2
28611: PUSH
28612: LD_INT 22
28614: PUSH
28615: LD_OWVAR 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PPUSH
28624: CALL_OW 69
28628: ST_TO_ADDR
// if not tmp then
28629: LD_VAR 0 2
28633: NOT
28634: IFFALSE 28638
// exit ;
28636: GO 28667
// for i in tmp do
28638: LD_ADDR_VAR 0 1
28642: PUSH
28643: LD_VAR 0 2
28647: PUSH
28648: FOR_IN
28649: IFFALSE 28665
// SetLives ( i , 600 ) ;
28651: LD_VAR 0 1
28655: PPUSH
28656: LD_INT 600
28658: PPUSH
28659: CALL_OW 234
28663: GO 28648
28665: POP
28666: POP
// end ;
28667: PPOPN 2
28669: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28670: LD_INT 0
28672: PPUSH
// case cmd of 301 :
28673: LD_VAR 0 1
28677: PUSH
28678: LD_INT 301
28680: DOUBLE
28681: EQUAL
28682: IFTRUE 28686
28684: GO 28718
28686: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28687: LD_VAR 0 6
28691: PPUSH
28692: LD_VAR 0 7
28696: PPUSH
28697: LD_VAR 0 8
28701: PPUSH
28702: LD_VAR 0 4
28706: PPUSH
28707: LD_VAR 0 5
28711: PPUSH
28712: CALL 29931 0 5
28716: GO 28839
28718: LD_INT 302
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28763
28726: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28727: LD_VAR 0 6
28731: PPUSH
28732: LD_VAR 0 7
28736: PPUSH
28737: LD_VAR 0 8
28741: PPUSH
28742: LD_VAR 0 9
28746: PPUSH
28747: LD_VAR 0 4
28751: PPUSH
28752: LD_VAR 0 5
28756: PPUSH
28757: CALL 30022 0 6
28761: GO 28839
28763: LD_INT 303
28765: DOUBLE
28766: EQUAL
28767: IFTRUE 28771
28769: GO 28808
28771: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28772: LD_VAR 0 6
28776: PPUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_VAR 0 8
28786: PPUSH
28787: LD_VAR 0 9
28791: PPUSH
28792: LD_VAR 0 4
28796: PPUSH
28797: LD_VAR 0 5
28801: PPUSH
28802: CALL 28844 0 6
28806: GO 28839
28808: LD_INT 304
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28816
28814: GO 28838
28816: POP
// hHackTeleport ( unit , x , y ) ; end ;
28817: LD_VAR 0 2
28821: PPUSH
28822: LD_VAR 0 4
28826: PPUSH
28827: LD_VAR 0 5
28831: PPUSH
28832: CALL 30615 0 3
28836: GO 28839
28838: POP
// end ;
28839: LD_VAR 0 12
28843: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28844: LD_INT 0
28846: PPUSH
28847: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28848: LD_VAR 0 1
28852: PUSH
28853: LD_INT 1
28855: LESS
28856: IFTRUE 28868
28858: PUSH
28859: LD_VAR 0 1
28863: PUSH
28864: LD_INT 3
28866: GREATER
28867: OR
28868: IFTRUE 28886
28870: PUSH
28871: LD_VAR 0 5
28875: PPUSH
28876: LD_VAR 0 6
28880: PPUSH
28881: CALL_OW 428
28885: OR
28886: IFFALSE 28890
// exit ;
28888: GO 29618
// uc_side := your_side ;
28890: LD_ADDR_OWVAR 20
28894: PUSH
28895: LD_OWVAR 2
28899: ST_TO_ADDR
// uc_nation := nation ;
28900: LD_ADDR_OWVAR 21
28904: PUSH
28905: LD_VAR 0 1
28909: ST_TO_ADDR
// bc_level = 1 ;
28910: LD_ADDR_OWVAR 43
28914: PUSH
28915: LD_INT 1
28917: ST_TO_ADDR
// case btype of 1 :
28918: LD_VAR 0 2
28922: PUSH
28923: LD_INT 1
28925: DOUBLE
28926: EQUAL
28927: IFTRUE 28931
28929: GO 28942
28931: POP
// bc_type := b_depot ; 2 :
28932: LD_ADDR_OWVAR 42
28936: PUSH
28937: LD_INT 0
28939: ST_TO_ADDR
28940: GO 29562
28942: LD_INT 2
28944: DOUBLE
28945: EQUAL
28946: IFTRUE 28950
28948: GO 28961
28950: POP
// bc_type := b_warehouse ; 3 :
28951: LD_ADDR_OWVAR 42
28955: PUSH
28956: LD_INT 1
28958: ST_TO_ADDR
28959: GO 29562
28961: LD_INT 3
28963: DOUBLE
28964: EQUAL
28965: IFTRUE 28969
28967: GO 28980
28969: POP
// bc_type := b_lab ; 4 .. 9 :
28970: LD_ADDR_OWVAR 42
28974: PUSH
28975: LD_INT 6
28977: ST_TO_ADDR
28978: GO 29562
28980: LD_INT 4
28982: DOUBLE
28983: GREATEREQUAL
28984: IFFALSE 28992
28986: LD_INT 9
28988: DOUBLE
28989: LESSEQUAL
28990: IFTRUE 28994
28992: GO 29054
28994: POP
// begin bc_type := b_lab_half ;
28995: LD_ADDR_OWVAR 42
28999: PUSH
29000: LD_INT 7
29002: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29003: LD_ADDR_OWVAR 44
29007: PUSH
29008: LD_INT 10
29010: PUSH
29011: LD_INT 11
29013: PUSH
29014: LD_INT 12
29016: PUSH
29017: LD_INT 15
29019: PUSH
29020: LD_INT 14
29022: PUSH
29023: LD_INT 13
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: PUSH
29034: LD_VAR 0 2
29038: PUSH
29039: LD_INT 3
29041: MINUS
29042: ARRAY
29043: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29044: LD_ADDR_OWVAR 45
29048: PUSH
29049: LD_INT 9
29051: ST_TO_ADDR
// end ; 10 .. 13 :
29052: GO 29562
29054: LD_INT 10
29056: DOUBLE
29057: GREATEREQUAL
29058: IFFALSE 29066
29060: LD_INT 13
29062: DOUBLE
29063: LESSEQUAL
29064: IFTRUE 29068
29066: GO 29145
29068: POP
// begin bc_type := b_lab_full ;
29069: LD_ADDR_OWVAR 42
29073: PUSH
29074: LD_INT 8
29076: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29077: LD_ADDR_OWVAR 44
29081: PUSH
29082: LD_INT 10
29084: PUSH
29085: LD_INT 12
29087: PUSH
29088: LD_INT 14
29090: PUSH
29091: LD_INT 13
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: PUSH
29100: LD_VAR 0 2
29104: PUSH
29105: LD_INT 9
29107: MINUS
29108: ARRAY
29109: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29110: LD_ADDR_OWVAR 45
29114: PUSH
29115: LD_INT 11
29117: PUSH
29118: LD_INT 15
29120: PUSH
29121: LD_INT 12
29123: PUSH
29124: LD_INT 15
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: PUSH
29133: LD_VAR 0 2
29137: PUSH
29138: LD_INT 9
29140: MINUS
29141: ARRAY
29142: ST_TO_ADDR
// end ; 14 :
29143: GO 29562
29145: LD_INT 14
29147: DOUBLE
29148: EQUAL
29149: IFTRUE 29153
29151: GO 29164
29153: POP
// bc_type := b_workshop ; 15 :
29154: LD_ADDR_OWVAR 42
29158: PUSH
29159: LD_INT 2
29161: ST_TO_ADDR
29162: GO 29562
29164: LD_INT 15
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29183
29172: POP
// bc_type := b_factory ; 16 :
29173: LD_ADDR_OWVAR 42
29177: PUSH
29178: LD_INT 3
29180: ST_TO_ADDR
29181: GO 29562
29183: LD_INT 16
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29202
29191: POP
// bc_type := b_ext_gun ; 17 :
29192: LD_ADDR_OWVAR 42
29196: PUSH
29197: LD_INT 17
29199: ST_TO_ADDR
29200: GO 29562
29202: LD_INT 17
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29238
29210: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29211: LD_ADDR_OWVAR 42
29215: PUSH
29216: LD_INT 19
29218: PUSH
29219: LD_INT 23
29221: PUSH
29222: LD_INT 19
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: PUSH
29230: LD_VAR 0 1
29234: ARRAY
29235: ST_TO_ADDR
29236: GO 29562
29238: LD_INT 18
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29257
29246: POP
// bc_type := b_ext_radar ; 19 :
29247: LD_ADDR_OWVAR 42
29251: PUSH
29252: LD_INT 20
29254: ST_TO_ADDR
29255: GO 29562
29257: LD_INT 19
29259: DOUBLE
29260: EQUAL
29261: IFTRUE 29265
29263: GO 29276
29265: POP
// bc_type := b_ext_radio ; 20 :
29266: LD_ADDR_OWVAR 42
29270: PUSH
29271: LD_INT 22
29273: ST_TO_ADDR
29274: GO 29562
29276: LD_INT 20
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29295
29284: POP
// bc_type := b_ext_siberium ; 21 :
29285: LD_ADDR_OWVAR 42
29289: PUSH
29290: LD_INT 21
29292: ST_TO_ADDR
29293: GO 29562
29295: LD_INT 21
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29314
29303: POP
// bc_type := b_ext_computer ; 22 :
29304: LD_ADDR_OWVAR 42
29308: PUSH
29309: LD_INT 24
29311: ST_TO_ADDR
29312: GO 29562
29314: LD_INT 22
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29333
29322: POP
// bc_type := b_ext_track ; 23 :
29323: LD_ADDR_OWVAR 42
29327: PUSH
29328: LD_INT 16
29330: ST_TO_ADDR
29331: GO 29562
29333: LD_INT 23
29335: DOUBLE
29336: EQUAL
29337: IFTRUE 29341
29339: GO 29352
29341: POP
// bc_type := b_ext_laser ; 24 :
29342: LD_ADDR_OWVAR 42
29346: PUSH
29347: LD_INT 25
29349: ST_TO_ADDR
29350: GO 29562
29352: LD_INT 24
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29371
29360: POP
// bc_type := b_control_tower ; 25 :
29361: LD_ADDR_OWVAR 42
29365: PUSH
29366: LD_INT 36
29368: ST_TO_ADDR
29369: GO 29562
29371: LD_INT 25
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29390
29379: POP
// bc_type := b_breastwork ; 26 :
29380: LD_ADDR_OWVAR 42
29384: PUSH
29385: LD_INT 31
29387: ST_TO_ADDR
29388: GO 29562
29390: LD_INT 26
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29409
29398: POP
// bc_type := b_bunker ; 27 :
29399: LD_ADDR_OWVAR 42
29403: PUSH
29404: LD_INT 32
29406: ST_TO_ADDR
29407: GO 29562
29409: LD_INT 27
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29428
29417: POP
// bc_type := b_turret ; 28 :
29418: LD_ADDR_OWVAR 42
29422: PUSH
29423: LD_INT 33
29425: ST_TO_ADDR
29426: GO 29562
29428: LD_INT 28
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29447
29436: POP
// bc_type := b_armoury ; 29 :
29437: LD_ADDR_OWVAR 42
29441: PUSH
29442: LD_INT 4
29444: ST_TO_ADDR
29445: GO 29562
29447: LD_INT 29
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29466
29455: POP
// bc_type := b_barracks ; 30 :
29456: LD_ADDR_OWVAR 42
29460: PUSH
29461: LD_INT 5
29463: ST_TO_ADDR
29464: GO 29562
29466: LD_INT 30
29468: DOUBLE
29469: EQUAL
29470: IFTRUE 29474
29472: GO 29485
29474: POP
// bc_type := b_solar_power ; 31 :
29475: LD_ADDR_OWVAR 42
29479: PUSH
29480: LD_INT 27
29482: ST_TO_ADDR
29483: GO 29562
29485: LD_INT 31
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29504
29493: POP
// bc_type := b_oil_power ; 32 :
29494: LD_ADDR_OWVAR 42
29498: PUSH
29499: LD_INT 26
29501: ST_TO_ADDR
29502: GO 29562
29504: LD_INT 32
29506: DOUBLE
29507: EQUAL
29508: IFTRUE 29512
29510: GO 29523
29512: POP
// bc_type := b_siberite_power ; 33 :
29513: LD_ADDR_OWVAR 42
29517: PUSH
29518: LD_INT 28
29520: ST_TO_ADDR
29521: GO 29562
29523: LD_INT 33
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29542
29531: POP
// bc_type := b_oil_mine ; 34 :
29532: LD_ADDR_OWVAR 42
29536: PUSH
29537: LD_INT 29
29539: ST_TO_ADDR
29540: GO 29562
29542: LD_INT 34
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29561
29550: POP
// bc_type := b_siberite_mine ; end ;
29551: LD_ADDR_OWVAR 42
29555: PUSH
29556: LD_INT 30
29558: ST_TO_ADDR
29559: GO 29562
29561: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29562: LD_ADDR_VAR 0 8
29566: PUSH
29567: LD_VAR 0 5
29571: PPUSH
29572: LD_VAR 0 6
29576: PPUSH
29577: LD_VAR 0 3
29581: PPUSH
29582: CALL_OW 47
29586: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29587: LD_OWVAR 42
29591: PUSH
29592: LD_INT 32
29594: PUSH
29595: LD_INT 33
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: IN
29602: IFFALSE 29618
// PlaceWeaponTurret ( b , weapon ) ;
29604: LD_VAR 0 8
29608: PPUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: CALL_OW 431
// end ;
29618: LD_VAR 0 7
29622: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29629: LD_ADDR_VAR 0 4
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_OWVAR 2
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 30
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 30
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PPUSH
29678: CALL_OW 69
29682: ST_TO_ADDR
// if not tmp then
29683: LD_VAR 0 4
29687: NOT
29688: IFFALSE 29692
// exit ;
29690: GO 29751
// for i in tmp do
29692: LD_ADDR_VAR 0 2
29696: PUSH
29697: LD_VAR 0 4
29701: PUSH
29702: FOR_IN
29703: IFFALSE 29749
// for j = 1 to 3 do
29705: LD_ADDR_VAR 0 3
29709: PUSH
29710: DOUBLE
29711: LD_INT 1
29713: DEC
29714: ST_TO_ADDR
29715: LD_INT 3
29717: PUSH
29718: FOR_TO
29719: IFFALSE 29745
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29721: LD_VAR 0 2
29725: PPUSH
29726: CALL_OW 274
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: LD_INT 99999
29738: PPUSH
29739: CALL_OW 277
29743: GO 29718
29745: POP
29746: POP
29747: GO 29702
29749: POP
29750: POP
// end ;
29751: LD_VAR 0 1
29755: RET
// export function hHackSetLevel10 ; var i , j ; begin
29756: LD_INT 0
29758: PPUSH
29759: PPUSH
29760: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29761: LD_ADDR_VAR 0 2
29765: PUSH
29766: LD_INT 21
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PPUSH
29776: CALL_OW 69
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29834
// if IsSelected ( i ) then
29784: LD_VAR 0 2
29788: PPUSH
29789: CALL_OW 306
29793: IFFALSE 29832
// begin for j := 1 to 4 do
29795: LD_ADDR_VAR 0 3
29799: PUSH
29800: DOUBLE
29801: LD_INT 1
29803: DEC
29804: ST_TO_ADDR
29805: LD_INT 4
29807: PUSH
29808: FOR_TO
29809: IFFALSE 29830
// SetSkill ( i , j , 10 ) ;
29811: LD_VAR 0 2
29815: PPUSH
29816: LD_VAR 0 3
29820: PPUSH
29821: LD_INT 10
29823: PPUSH
29824: CALL_OW 237
29828: GO 29808
29830: POP
29831: POP
// end ;
29832: GO 29781
29834: POP
29835: POP
// end ;
29836: LD_VAR 0 1
29840: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29841: LD_INT 0
29843: PPUSH
29844: PPUSH
29845: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29846: LD_ADDR_VAR 0 2
29850: PUSH
29851: LD_INT 22
29853: PUSH
29854: LD_OWVAR 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 21
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 69
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29924
// begin for j := 1 to 4 do
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: DOUBLE
29891: LD_INT 1
29893: DEC
29894: ST_TO_ADDR
29895: LD_INT 4
29897: PUSH
29898: FOR_TO
29899: IFFALSE 29920
// SetSkill ( i , j , 10 ) ;
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: LD_INT 10
29913: PPUSH
29914: CALL_OW 237
29918: GO 29898
29920: POP
29921: POP
// end ;
29922: GO 29882
29924: POP
29925: POP
// end ;
29926: LD_VAR 0 1
29930: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29931: LD_INT 0
29933: PPUSH
// uc_side := your_side ;
29934: LD_ADDR_OWVAR 20
29938: PUSH
29939: LD_OWVAR 2
29943: ST_TO_ADDR
// uc_nation := nation ;
29944: LD_ADDR_OWVAR 21
29948: PUSH
29949: LD_VAR 0 1
29953: ST_TO_ADDR
// InitHc ;
29954: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29958: LD_INT 0
29960: PPUSH
29961: LD_VAR 0 2
29965: PPUSH
29966: LD_VAR 0 3
29970: PPUSH
29971: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29975: LD_VAR 0 4
29979: PPUSH
29980: LD_VAR 0 5
29984: PPUSH
29985: CALL_OW 428
29989: PUSH
29990: LD_INT 0
29992: EQUAL
29993: IFFALSE 30017
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29995: CALL_OW 44
29999: PPUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: LD_VAR 0 5
30009: PPUSH
30010: LD_INT 1
30012: PPUSH
30013: CALL_OW 48
// end ;
30017: LD_VAR 0 6
30021: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30022: LD_INT 0
30024: PPUSH
30025: PPUSH
// uc_side := your_side ;
30026: LD_ADDR_OWVAR 20
30030: PUSH
30031: LD_OWVAR 2
30035: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30036: LD_VAR 0 1
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: LD_INT 4
30052: PUSH
30053: LD_INT 5
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: IN
30063: IFFALSE 30075
// uc_nation := nation_american else
30065: LD_ADDR_OWVAR 21
30069: PUSH
30070: LD_INT 1
30072: ST_TO_ADDR
30073: GO 30118
// if chassis in [ 11 , 12 , 13 , 14 ] then
30075: LD_VAR 0 1
30079: PUSH
30080: LD_INT 11
30082: PUSH
30083: LD_INT 12
30085: PUSH
30086: LD_INT 13
30088: PUSH
30089: LD_INT 14
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: IN
30098: IFFALSE 30110
// uc_nation := nation_arabian else
30100: LD_ADDR_OWVAR 21
30104: PUSH
30105: LD_INT 2
30107: ST_TO_ADDR
30108: GO 30118
// uc_nation := nation_russian ;
30110: LD_ADDR_OWVAR 21
30114: PUSH
30115: LD_INT 3
30117: ST_TO_ADDR
// vc_chassis := chassis ;
30118: LD_ADDR_OWVAR 37
30122: PUSH
30123: LD_VAR 0 1
30127: ST_TO_ADDR
// vc_engine := engine ;
30128: LD_ADDR_OWVAR 39
30132: PUSH
30133: LD_VAR 0 2
30137: ST_TO_ADDR
// vc_control := control ;
30138: LD_ADDR_OWVAR 38
30142: PUSH
30143: LD_VAR 0 3
30147: ST_TO_ADDR
// vc_weapon := weapon ;
30148: LD_ADDR_OWVAR 40
30152: PUSH
30153: LD_VAR 0 4
30157: ST_TO_ADDR
// un := CreateVehicle ;
30158: LD_ADDR_VAR 0 8
30162: PUSH
30163: CALL_OW 45
30167: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30168: LD_VAR 0 8
30172: PPUSH
30173: LD_INT 0
30175: PPUSH
30176: LD_INT 5
30178: PPUSH
30179: CALL_OW 12
30183: PPUSH
30184: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30188: LD_VAR 0 8
30192: PPUSH
30193: LD_VAR 0 5
30197: PPUSH
30198: LD_VAR 0 6
30202: PPUSH
30203: LD_INT 1
30205: PPUSH
30206: CALL_OW 48
// end ;
30210: LD_VAR 0 7
30214: RET
// export hInvincible ; every 1 do
30215: GO 30217
30217: DISABLE
// hInvincible := [ ] ;
30218: LD_ADDR_EXP 104
30222: PUSH
30223: EMPTY
30224: ST_TO_ADDR
30225: END
// every 10 do var i ;
30226: GO 30228
30228: DISABLE
30229: LD_INT 0
30231: PPUSH
// begin enable ;
30232: ENABLE
// if not hInvincible then
30233: LD_EXP 104
30237: NOT
30238: IFFALSE 30242
// exit ;
30240: GO 30286
// for i in hInvincible do
30242: LD_ADDR_VAR 0 1
30246: PUSH
30247: LD_EXP 104
30251: PUSH
30252: FOR_IN
30253: IFFALSE 30284
// if GetLives ( i ) < 1000 then
30255: LD_VAR 0 1
30259: PPUSH
30260: CALL_OW 256
30264: PUSH
30265: LD_INT 1000
30267: LESS
30268: IFFALSE 30282
// SetLives ( i , 1000 ) ;
30270: LD_VAR 0 1
30274: PPUSH
30275: LD_INT 1000
30277: PPUSH
30278: CALL_OW 234
30282: GO 30252
30284: POP
30285: POP
// end ;
30286: PPOPN 1
30288: END
// export function hHackInvincible ; var i ; begin
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30293: LD_ADDR_VAR 0 2
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: LD_INT 21
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 21
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: PPUSH
30326: CALL_OW 69
30330: PUSH
30331: FOR_IN
30332: IFFALSE 30393
// if IsSelected ( i ) then
30334: LD_VAR 0 2
30338: PPUSH
30339: CALL_OW 306
30343: IFFALSE 30391
// begin if i in hInvincible then
30345: LD_VAR 0 2
30349: PUSH
30350: LD_EXP 104
30354: IN
30355: IFFALSE 30375
// hInvincible := hInvincible diff i else
30357: LD_ADDR_EXP 104
30361: PUSH
30362: LD_EXP 104
30366: PUSH
30367: LD_VAR 0 2
30371: DIFF
30372: ST_TO_ADDR
30373: GO 30391
// hInvincible := hInvincible union i ;
30375: LD_ADDR_EXP 104
30379: PUSH
30380: LD_EXP 104
30384: PUSH
30385: LD_VAR 0 2
30389: UNION
30390: ST_TO_ADDR
// end ;
30391: GO 30331
30393: POP
30394: POP
// end ;
30395: LD_VAR 0 1
30399: RET
// export function hHackInvisible ; var i , j ; begin
30400: LD_INT 0
30402: PPUSH
30403: PPUSH
30404: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30405: LD_ADDR_VAR 0 2
30409: PUSH
30410: LD_INT 21
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: PUSH
30425: FOR_IN
30426: IFFALSE 30450
// if IsSelected ( i ) then
30428: LD_VAR 0 2
30432: PPUSH
30433: CALL_OW 306
30437: IFFALSE 30448
// ComForceInvisible ( i ) ;
30439: LD_VAR 0 2
30443: PPUSH
30444: CALL_OW 496
30448: GO 30425
30450: POP
30451: POP
// end ;
30452: LD_VAR 0 1
30456: RET
// export function hHackChangeYourSide ; begin
30457: LD_INT 0
30459: PPUSH
// if your_side = 8 then
30460: LD_OWVAR 2
30464: PUSH
30465: LD_INT 8
30467: EQUAL
30468: IFFALSE 30480
// your_side := 0 else
30470: LD_ADDR_OWVAR 2
30474: PUSH
30475: LD_INT 0
30477: ST_TO_ADDR
30478: GO 30494
// your_side := your_side + 1 ;
30480: LD_ADDR_OWVAR 2
30484: PUSH
30485: LD_OWVAR 2
30489: PUSH
30490: LD_INT 1
30492: PLUS
30493: ST_TO_ADDR
// end ;
30494: LD_VAR 0 1
30498: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30499: LD_INT 0
30501: PPUSH
30502: PPUSH
30503: PPUSH
// for i in all_units do
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: LD_OWVAR 3
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30593
// if IsSelected ( i ) then
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL_OW 306
30526: IFFALSE 30591
// begin j := GetSide ( i ) ;
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_VAR 0 2
30537: PPUSH
30538: CALL_OW 255
30542: ST_TO_ADDR
// if j = 8 then
30543: LD_VAR 0 3
30547: PUSH
30548: LD_INT 8
30550: EQUAL
30551: IFFALSE 30563
// j := 0 else
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 0
30560: ST_TO_ADDR
30561: GO 30577
// j := j + 1 ;
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_VAR 0 3
30572: PUSH
30573: LD_INT 1
30575: PLUS
30576: ST_TO_ADDR
// SetSide ( i , j ) ;
30577: LD_VAR 0 2
30581: PPUSH
30582: LD_VAR 0 3
30586: PPUSH
30587: CALL_OW 235
// end ;
30591: GO 30514
30593: POP
30594: POP
// end ;
30595: LD_VAR 0 1
30599: RET
// export function hHackFog ; begin
30600: LD_INT 0
30602: PPUSH
// FogOff ( true ) ;
30603: LD_INT 1
30605: PPUSH
30606: CALL_OW 344
// end ;
30610: LD_VAR 0 1
30614: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30615: LD_INT 0
30617: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_VAR 0 2
30627: PPUSH
30628: LD_VAR 0 3
30632: PPUSH
30633: LD_INT 1
30635: PPUSH
30636: LD_INT 1
30638: PPUSH
30639: CALL_OW 483
// CenterOnXY ( x , y ) ;
30643: LD_VAR 0 2
30647: PPUSH
30648: LD_VAR 0 3
30652: PPUSH
30653: CALL_OW 84
// end ;
30657: LD_VAR 0 4
30661: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30666: LD_VAR 0 1
30670: NOT
30671: IFTRUE 30690
30673: PUSH
30674: LD_VAR 0 2
30678: PPUSH
30679: LD_VAR 0 3
30683: PPUSH
30684: CALL_OW 488
30688: NOT
30689: OR
30690: IFTRUE 30725
30692: PUSH
30693: LD_VAR 0 1
30697: PPUSH
30698: CALL_OW 266
30702: PUSH
30703: LD_INT 3
30705: NONEQUAL
30706: IFFALSE 30724
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 247
30718: PUSH
30719: LD_INT 1
30721: EQUAL
30722: NOT
30723: AND
30724: OR
30725: IFFALSE 30729
// exit ;
30727: GO 31011
// if GetType ( factory ) = unit_human then
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 247
30738: PUSH
30739: LD_INT 1
30741: EQUAL
30742: IFFALSE 30759
// factory := IsInUnit ( factory ) ;
30744: LD_ADDR_VAR 0 1
30748: PUSH
30749: LD_VAR 0 1
30753: PPUSH
30754: CALL_OW 310
30758: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 266
30768: PUSH
30769: LD_INT 3
30771: NONEQUAL
30772: IFFALSE 30776
// exit ;
30774: GO 31011
// for i := 1 to Count ( factoryWaypoints ) do
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: DOUBLE
30782: LD_INT 1
30784: DEC
30785: ST_TO_ADDR
30786: LD_EXP 105
30790: PPUSH
30791: CALL 34341 0 1
30795: PUSH
30796: FOR_TO
30797: IFFALSE 30959
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30799: LD_VAR 0 2
30803: PPUSH
30804: LD_VAR 0 3
30808: PPUSH
30809: CALL_OW 428
30813: PUSH
30814: LD_EXP 105
30818: PUSH
30819: LD_VAR 0 5
30823: ARRAY
30824: PUSH
30825: LD_INT 2
30827: ARRAY
30828: EQUAL
30829: IFFALSE 30861
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30831: LD_ADDR_EXP 105
30835: PUSH
30836: LD_EXP 105
30840: PPUSH
30841: LD_VAR 0 5
30845: PPUSH
30846: CALL_OW 3
30850: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30851: CALL 31016 0 0
// exit ;
30855: POP
30856: POP
30857: GO 31011
// end else
30859: GO 30957
// if factory = factoryWaypoints [ i ] [ 2 ] then
30861: LD_VAR 0 1
30865: PUSH
30866: LD_EXP 105
30870: PUSH
30871: LD_VAR 0 5
30875: ARRAY
30876: PUSH
30877: LD_INT 2
30879: ARRAY
30880: EQUAL
30881: IFFALSE 30957
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30883: LD_ADDR_EXP 105
30887: PUSH
30888: LD_EXP 105
30892: PPUSH
30893: LD_VAR 0 5
30897: PPUSH
30898: CALL_OW 3
30902: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30903: LD_ADDR_EXP 105
30907: PUSH
30908: LD_EXP 105
30912: PPUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL_OW 255
30922: PUSH
30923: LD_VAR 0 1
30927: PUSH
30928: LD_VAR 0 2
30932: PUSH
30933: LD_VAR 0 3
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: PPUSH
30944: CALL 70317 0 2
30948: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30949: CALL 31016 0 0
// exit ;
30953: POP
30954: POP
30955: GO 31011
// end ; end ;
30957: GO 30796
30959: POP
30960: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30961: LD_ADDR_EXP 105
30965: PUSH
30966: LD_EXP 105
30970: PPUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 255
30980: PUSH
30981: LD_VAR 0 1
30985: PUSH
30986: LD_VAR 0 2
30990: PUSH
30991: LD_VAR 0 3
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL 70317 0 2
31006: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31007: CALL 31016 0 0
// end ;
31011: LD_VAR 0 4
31015: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31016: LD_INT 0
31018: PPUSH
31019: PPUSH
31020: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31021: LD_STRING resetFactoryWaypoint();
31023: PPUSH
31024: CALL_OW 559
// if factoryWaypoints then
31028: LD_EXP 105
31032: IFFALSE 31153
// begin list := factoryWaypoints ;
31034: LD_ADDR_VAR 0 3
31038: PUSH
31039: LD_EXP 105
31043: ST_TO_ADDR
// for i := 1 to list do
31044: LD_ADDR_VAR 0 2
31048: PUSH
31049: DOUBLE
31050: LD_INT 1
31052: DEC
31053: ST_TO_ADDR
31054: LD_VAR 0 3
31058: PUSH
31059: FOR_TO
31060: IFFALSE 31151
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31062: LD_STRING setFactoryWaypointXY(
31064: PUSH
31065: LD_VAR 0 3
31069: PUSH
31070: LD_VAR 0 2
31074: ARRAY
31075: PUSH
31076: LD_INT 1
31078: ARRAY
31079: STR
31080: PUSH
31081: LD_STRING ,
31083: STR
31084: PUSH
31085: LD_VAR 0 3
31089: PUSH
31090: LD_VAR 0 2
31094: ARRAY
31095: PUSH
31096: LD_INT 2
31098: ARRAY
31099: STR
31100: PUSH
31101: LD_STRING ,
31103: STR
31104: PUSH
31105: LD_VAR 0 3
31109: PUSH
31110: LD_VAR 0 2
31114: ARRAY
31115: PUSH
31116: LD_INT 3
31118: ARRAY
31119: STR
31120: PUSH
31121: LD_STRING ,
31123: STR
31124: PUSH
31125: LD_VAR 0 3
31129: PUSH
31130: LD_VAR 0 2
31134: ARRAY
31135: PUSH
31136: LD_INT 4
31138: ARRAY
31139: STR
31140: PUSH
31141: LD_STRING )
31143: STR
31144: PPUSH
31145: CALL_OW 559
31149: GO 31059
31151: POP
31152: POP
// end ; end ;
31153: LD_VAR 0 1
31157: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31158: LD_INT 0
31160: PPUSH
// if HexInfo ( x , y ) = warehouse then
31161: LD_VAR 0 2
31165: PPUSH
31166: LD_VAR 0 3
31170: PPUSH
31171: CALL_OW 428
31175: PUSH
31176: LD_VAR 0 1
31180: EQUAL
31181: IFFALSE 31208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31183: LD_ADDR_EXP 107
31187: PUSH
31188: LD_EXP 107
31192: PPUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: LD_INT 0
31200: PPUSH
31201: CALL_OW 1
31205: ST_TO_ADDR
31206: GO 31259
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31208: LD_ADDR_EXP 107
31212: PUSH
31213: LD_EXP 107
31217: PPUSH
31218: LD_VAR 0 1
31222: PPUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 255
31232: PUSH
31233: LD_VAR 0 1
31237: PUSH
31238: LD_VAR 0 2
31242: PUSH
31243: LD_VAR 0 3
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: PPUSH
31254: CALL_OW 1
31258: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31259: CALL 31268 0 0
// end ;
31263: LD_VAR 0 4
31267: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31273: LD_STRING resetWarehouseGatheringPoints();
31275: PPUSH
31276: CALL_OW 559
// if warehouseGatheringPoints then
31280: LD_EXP 107
31284: IFFALSE 31410
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_EXP 107
31295: PPUSH
31296: CALL 74251 0 1
31300: ST_TO_ADDR
// for i := 1 to list do
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: DOUBLE
31307: LD_INT 1
31309: DEC
31310: ST_TO_ADDR
31311: LD_VAR 0 3
31315: PUSH
31316: FOR_TO
31317: IFFALSE 31408
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31319: LD_STRING setWarehouseGatheringPointXY(
31321: PUSH
31322: LD_VAR 0 3
31326: PUSH
31327: LD_VAR 0 2
31331: ARRAY
31332: PUSH
31333: LD_INT 1
31335: ARRAY
31336: STR
31337: PUSH
31338: LD_STRING ,
31340: STR
31341: PUSH
31342: LD_VAR 0 3
31346: PUSH
31347: LD_VAR 0 2
31351: ARRAY
31352: PUSH
31353: LD_INT 2
31355: ARRAY
31356: STR
31357: PUSH
31358: LD_STRING ,
31360: STR
31361: PUSH
31362: LD_VAR 0 3
31366: PUSH
31367: LD_VAR 0 2
31371: ARRAY
31372: PUSH
31373: LD_INT 3
31375: ARRAY
31376: STR
31377: PUSH
31378: LD_STRING ,
31380: STR
31381: PUSH
31382: LD_VAR 0 3
31386: PUSH
31387: LD_VAR 0 2
31391: ARRAY
31392: PUSH
31393: LD_INT 4
31395: ARRAY
31396: STR
31397: PUSH
31398: LD_STRING )
31400: STR
31401: PPUSH
31402: CALL_OW 559
31406: GO 31316
31408: POP
31409: POP
// end ; end ;
31410: LD_VAR 0 1
31414: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31415: LD_EXP 107
31419: IFFALSE 32114
31421: GO 31423
31423: DISABLE
31424: LD_INT 0
31426: PPUSH
31427: PPUSH
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
// begin enable ;
31435: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_EXP 107
31445: PPUSH
31446: CALL 74251 0 1
31450: ST_TO_ADDR
// if not list then
31451: LD_VAR 0 3
31455: NOT
31456: IFFALSE 31460
// exit ;
31458: GO 32114
// for i := 1 to list do
31460: LD_ADDR_VAR 0 1
31464: PUSH
31465: DOUBLE
31466: LD_INT 1
31468: DEC
31469: ST_TO_ADDR
31470: LD_VAR 0 3
31474: PUSH
31475: FOR_TO
31476: IFFALSE 32112
// begin depot := list [ i ] [ 2 ] ;
31478: LD_ADDR_VAR 0 8
31482: PUSH
31483: LD_VAR 0 3
31487: PUSH
31488: LD_VAR 0 1
31492: ARRAY
31493: PUSH
31494: LD_INT 2
31496: ARRAY
31497: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31498: LD_ADDR_VAR 0 5
31502: PUSH
31503: LD_VAR 0 3
31507: PUSH
31508: LD_VAR 0 1
31512: ARRAY
31513: PUSH
31514: LD_INT 1
31516: ARRAY
31517: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31518: LD_VAR 0 8
31522: PPUSH
31523: CALL_OW 301
31527: IFTRUE 31546
31529: PUSH
31530: LD_VAR 0 5
31534: PUSH
31535: LD_VAR 0 8
31539: PPUSH
31540: CALL_OW 255
31544: NONEQUAL
31545: OR
31546: IFFALSE 31575
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31548: LD_ADDR_EXP 107
31552: PUSH
31553: LD_EXP 107
31557: PPUSH
31558: LD_VAR 0 8
31562: PPUSH
31563: LD_INT 0
31565: PPUSH
31566: CALL_OW 1
31570: ST_TO_ADDR
// exit ;
31571: POP
31572: POP
31573: GO 32114
// end ; x := list [ i ] [ 3 ] ;
31575: LD_ADDR_VAR 0 6
31579: PUSH
31580: LD_VAR 0 3
31584: PUSH
31585: LD_VAR 0 1
31589: ARRAY
31590: PUSH
31591: LD_INT 3
31593: ARRAY
31594: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31595: LD_ADDR_VAR 0 7
31599: PUSH
31600: LD_VAR 0 3
31604: PUSH
31605: LD_VAR 0 1
31609: ARRAY
31610: PUSH
31611: LD_INT 4
31613: ARRAY
31614: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31615: LD_ADDR_VAR 0 9
31619: PUSH
31620: LD_VAR 0 6
31624: PPUSH
31625: LD_VAR 0 7
31629: PPUSH
31630: LD_INT 16
31632: PPUSH
31633: CALL 72825 0 3
31637: ST_TO_ADDR
// if not cratesNearbyPoint then
31638: LD_VAR 0 9
31642: NOT
31643: IFFALSE 31649
// exit ;
31645: POP
31646: POP
31647: GO 32114
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31649: LD_ADDR_VAR 0 4
31653: PUSH
31654: LD_INT 22
31656: PUSH
31657: LD_VAR 0 5
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: LD_INT 60
31671: PUSH
31672: EMPTY
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 91
31681: PUSH
31682: LD_VAR 0 8
31686: PUSH
31687: LD_INT 6
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 25
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 25
31710: PUSH
31711: LD_INT 16
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: PPUSH
31729: CALL_OW 69
31733: PUSH
31734: LD_VAR 0 8
31738: PPUSH
31739: CALL_OW 313
31743: PPUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 60
31749: PUSH
31750: EMPTY
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 25
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 25
31772: PUSH
31773: LD_INT 16
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PPUSH
31789: CALL_OW 72
31793: UNION
31794: ST_TO_ADDR
// if tmp then
31795: LD_VAR 0 4
31799: IFFALSE 31879
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31801: LD_ADDR_VAR 0 4
31805: PUSH
31806: LD_VAR 0 4
31810: PPUSH
31811: LD_INT 3
31813: PPUSH
31814: CALL 70632 0 2
31818: ST_TO_ADDR
// for j in tmp do
31819: LD_ADDR_VAR 0 2
31823: PUSH
31824: LD_VAR 0 4
31828: PUSH
31829: FOR_IN
31830: IFFALSE 31873
// begin if IsInUnit ( j ) then
31832: LD_VAR 0 2
31836: PPUSH
31837: CALL_OW 310
31841: IFFALSE 31852
// ComExit ( j ) ;
31843: LD_VAR 0 2
31847: PPUSH
31848: CALL 70715 0 1
// AddComCollect ( j , x , y ) ;
31852: LD_VAR 0 2
31856: PPUSH
31857: LD_VAR 0 6
31861: PPUSH
31862: LD_VAR 0 7
31866: PPUSH
31867: CALL_OW 177
// end ;
31871: GO 31829
31873: POP
31874: POP
// exit ;
31875: POP
31876: POP
31877: GO 32114
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31879: LD_ADDR_VAR 0 4
31883: PUSH
31884: LD_INT 22
31886: PUSH
31887: LD_VAR 0 5
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 91
31898: PUSH
31899: LD_VAR 0 8
31903: PUSH
31904: LD_INT 8
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 34
31917: PUSH
31918: LD_INT 12
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 34
31927: PUSH
31928: LD_INT 51
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 34
31937: PUSH
31938: LD_INT 32
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 34
31947: PUSH
31948: LD_INT 89
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: PPUSH
31967: CALL_OW 69
31971: ST_TO_ADDR
// if tmp then
31972: LD_VAR 0 4
31976: IFFALSE 32110
// begin for j in tmp do
31978: LD_ADDR_VAR 0 2
31982: PUSH
31983: LD_VAR 0 4
31987: PUSH
31988: FOR_IN
31989: IFFALSE 32108
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31991: LD_VAR 0 2
31995: PPUSH
31996: CALL_OW 262
32000: PUSH
32001: LD_INT 3
32003: EQUAL
32004: IFTRUE 32021
32006: PUSH
32007: LD_VAR 0 2
32011: PPUSH
32012: CALL_OW 261
32016: PUSH
32017: LD_INT 20
32019: GREATER
32020: OR
32021: IFFALSE 32035
32023: PUSH
32024: LD_VAR 0 2
32028: PPUSH
32029: CALL_OW 314
32033: NOT
32034: AND
32035: IFFALSE 32065
32037: PUSH
32038: LD_VAR 0 2
32042: PPUSH
32043: CALL_OW 263
32047: PUSH
32048: LD_INT 1
32050: NONEQUAL
32051: IFTRUE 32064
32053: PUSH
32054: LD_VAR 0 2
32058: PPUSH
32059: CALL_OW 311
32063: OR
32064: AND
32065: IFFALSE 32106
// begin ComCollect ( j , x , y ) ;
32067: LD_VAR 0 2
32071: PPUSH
32072: LD_VAR 0 6
32076: PPUSH
32077: LD_VAR 0 7
32081: PPUSH
32082: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32086: LD_VAR 0 2
32090: PPUSH
32091: LD_VAR 0 8
32095: PPUSH
32096: CALL_OW 172
// exit ;
32100: POP
32101: POP
32102: POP
32103: POP
32104: GO 32114
// end ;
32106: GO 31988
32108: POP
32109: POP
// end ; end ;
32110: GO 31475
32112: POP
32113: POP
// end ; end_of_file end_of_file
32114: PPOPN 9
32116: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32117: LD_INT 0
32119: PPUSH
32120: PPUSH
// if exist_mode then
32121: LD_VAR 0 2
32125: IFFALSE 32171
// begin unit := CreateCharacter ( prefix & ident ) ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: LD_VAR 0 3
32136: PUSH
32137: LD_VAR 0 1
32141: STR
32142: PPUSH
32143: CALL_OW 34
32147: ST_TO_ADDR
// if unit then
32148: LD_VAR 0 5
32152: IFFALSE 32169
// DeleteCharacters ( prefix & ident ) ;
32154: LD_VAR 0 3
32158: PUSH
32159: LD_VAR 0 1
32163: STR
32164: PPUSH
32165: CALL_OW 40
// end else
32169: GO 32186
// unit := NewCharacter ( ident ) ;
32171: LD_ADDR_VAR 0 5
32175: PUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 25
32185: ST_TO_ADDR
// result := unit ;
32186: LD_ADDR_VAR 0 4
32190: PUSH
32191: LD_VAR 0 5
32195: ST_TO_ADDR
// end ;
32196: LD_VAR 0 4
32200: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32201: LD_INT 0
32203: PPUSH
32204: PPUSH
// if exist_mode then
32205: LD_VAR 0 2
32209: IFFALSE 32234
// unit := CreateCharacter ( prefix & ident ) else
32211: LD_ADDR_VAR 0 5
32215: PUSH
32216: LD_VAR 0 3
32220: PUSH
32221: LD_VAR 0 1
32225: STR
32226: PPUSH
32227: CALL_OW 34
32231: ST_TO_ADDR
32232: GO 32249
// unit := NewCharacter ( ident ) ;
32234: LD_ADDR_VAR 0 5
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 25
32248: ST_TO_ADDR
// result := unit ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 5
32258: ST_TO_ADDR
// end ;
32259: LD_VAR 0 4
32263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32264: LD_INT 0
32266: PPUSH
32267: PPUSH
// if not side or not nation then
32268: LD_VAR 0 1
32272: NOT
32273: IFTRUE 32282
32275: PUSH
32276: LD_VAR 0 2
32280: NOT
32281: OR
32282: IFFALSE 32286
// exit ;
32284: GO 33080
// case nation of nation_american :
32286: LD_VAR 0 2
32290: PUSH
32291: LD_INT 1
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32521
32299: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
32300: LD_ADDR_VAR 0 4
32304: PUSH
32305: LD_INT 35
32307: PUSH
32308: LD_INT 45
32310: PUSH
32311: LD_INT 46
32313: PUSH
32314: LD_INT 47
32316: PUSH
32317: LD_INT 82
32319: PUSH
32320: LD_INT 83
32322: PUSH
32323: LD_INT 84
32325: PUSH
32326: LD_INT 85
32328: PUSH
32329: LD_INT 86
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 6
32340: PUSH
32341: LD_INT 15
32343: PUSH
32344: LD_INT 16
32346: PUSH
32347: LD_INT 7
32349: PUSH
32350: LD_INT 12
32352: PUSH
32353: LD_INT 13
32355: PUSH
32356: LD_INT 10
32358: PUSH
32359: LD_INT 14
32361: PUSH
32362: LD_INT 20
32364: PUSH
32365: LD_INT 21
32367: PUSH
32368: LD_INT 22
32370: PUSH
32371: LD_INT 25
32373: PUSH
32374: LD_INT 32
32376: PUSH
32377: LD_INT 27
32379: PUSH
32380: LD_INT 36
32382: PUSH
32383: LD_INT 69
32385: PUSH
32386: LD_INT 39
32388: PUSH
32389: LD_INT 34
32391: PUSH
32392: LD_INT 40
32394: PUSH
32395: LD_INT 48
32397: PUSH
32398: LD_INT 49
32400: PUSH
32401: LD_INT 50
32403: PUSH
32404: LD_INT 51
32406: PUSH
32407: LD_INT 52
32409: PUSH
32410: LD_INT 53
32412: PUSH
32413: LD_INT 54
32415: PUSH
32416: LD_INT 55
32418: PUSH
32419: LD_INT 56
32421: PUSH
32422: LD_INT 57
32424: PUSH
32425: LD_INT 58
32427: PUSH
32428: LD_INT 59
32430: PUSH
32431: LD_INT 60
32433: PUSH
32434: LD_INT 61
32436: PUSH
32437: LD_INT 62
32439: PUSH
32440: LD_INT 80
32442: PUSH
32443: LD_INT 82
32445: PUSH
32446: LD_INT 83
32448: PUSH
32449: LD_INT 84
32451: PUSH
32452: LD_INT 85
32454: PUSH
32455: LD_INT 86
32457: PUSH
32458: LD_INT 90
32460: PUSH
32461: LD_INT 93
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: ST_TO_ADDR
32519: GO 33002
32521: LD_INT 2
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32763
32529: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: LD_INT 35
32537: PUSH
32538: LD_INT 45
32540: PUSH
32541: LD_INT 46
32543: PUSH
32544: LD_INT 47
32546: PUSH
32547: LD_INT 82
32549: PUSH
32550: LD_INT 83
32552: PUSH
32553: LD_INT 84
32555: PUSH
32556: LD_INT 85
32558: PUSH
32559: LD_INT 87
32561: PUSH
32562: LD_INT 70
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 11
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: LD_INT 5
32579: PUSH
32580: LD_INT 6
32582: PUSH
32583: LD_INT 15
32585: PUSH
32586: LD_INT 18
32588: PUSH
32589: LD_INT 7
32591: PUSH
32592: LD_INT 17
32594: PUSH
32595: LD_INT 8
32597: PUSH
32598: LD_INT 20
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 22
32606: PUSH
32607: LD_INT 72
32609: PUSH
32610: LD_INT 26
32612: PUSH
32613: LD_INT 69
32615: PUSH
32616: LD_INT 39
32618: PUSH
32619: LD_INT 40
32621: PUSH
32622: LD_INT 41
32624: PUSH
32625: LD_INT 42
32627: PUSH
32628: LD_INT 43
32630: PUSH
32631: LD_INT 48
32633: PUSH
32634: LD_INT 49
32636: PUSH
32637: LD_INT 50
32639: PUSH
32640: LD_INT 51
32642: PUSH
32643: LD_INT 52
32645: PUSH
32646: LD_INT 53
32648: PUSH
32649: LD_INT 54
32651: PUSH
32652: LD_INT 55
32654: PUSH
32655: LD_INT 56
32657: PUSH
32658: LD_INT 60
32660: PUSH
32661: LD_INT 61
32663: PUSH
32664: LD_INT 62
32666: PUSH
32667: LD_INT 66
32669: PUSH
32670: LD_INT 67
32672: PUSH
32673: LD_INT 68
32675: PUSH
32676: LD_INT 81
32678: PUSH
32679: LD_INT 82
32681: PUSH
32682: LD_INT 83
32684: PUSH
32685: LD_INT 84
32687: PUSH
32688: LD_INT 85
32690: PUSH
32691: LD_INT 87
32693: PUSH
32694: LD_INT 88
32696: PUSH
32697: LD_INT 92
32699: PUSH
32700: LD_INT 94
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: ST_TO_ADDR
32761: GO 33002
32763: LD_INT 3
32765: DOUBLE
32766: EQUAL
32767: IFTRUE 32771
32769: GO 33001
32771: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
32772: LD_ADDR_VAR 0 4
32776: PUSH
32777: LD_INT 46
32779: PUSH
32780: LD_INT 47
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 82
32791: PUSH
32792: LD_INT 83
32794: PUSH
32795: LD_INT 84
32797: PUSH
32798: LD_INT 85
32800: PUSH
32801: LD_INT 86
32803: PUSH
32804: LD_INT 11
32806: PUSH
32807: LD_INT 9
32809: PUSH
32810: LD_INT 20
32812: PUSH
32813: LD_INT 19
32815: PUSH
32816: LD_INT 21
32818: PUSH
32819: LD_INT 24
32821: PUSH
32822: LD_INT 22
32824: PUSH
32825: LD_INT 25
32827: PUSH
32828: LD_INT 28
32830: PUSH
32831: LD_INT 29
32833: PUSH
32834: LD_INT 30
32836: PUSH
32837: LD_INT 31
32839: PUSH
32840: LD_INT 37
32842: PUSH
32843: LD_INT 38
32845: PUSH
32846: LD_INT 32
32848: PUSH
32849: LD_INT 27
32851: PUSH
32852: LD_INT 33
32854: PUSH
32855: LD_INT 69
32857: PUSH
32858: LD_INT 39
32860: PUSH
32861: LD_INT 34
32863: PUSH
32864: LD_INT 40
32866: PUSH
32867: LD_INT 71
32869: PUSH
32870: LD_INT 23
32872: PUSH
32873: LD_INT 44
32875: PUSH
32876: LD_INT 48
32878: PUSH
32879: LD_INT 49
32881: PUSH
32882: LD_INT 50
32884: PUSH
32885: LD_INT 51
32887: PUSH
32888: LD_INT 52
32890: PUSH
32891: LD_INT 53
32893: PUSH
32894: LD_INT 54
32896: PUSH
32897: LD_INT 55
32899: PUSH
32900: LD_INT 56
32902: PUSH
32903: LD_INT 57
32905: PUSH
32906: LD_INT 58
32908: PUSH
32909: LD_INT 59
32911: PUSH
32912: LD_INT 63
32914: PUSH
32915: LD_INT 64
32917: PUSH
32918: LD_INT 65
32920: PUSH
32921: LD_INT 82
32923: PUSH
32924: LD_INT 83
32926: PUSH
32927: LD_INT 84
32929: PUSH
32930: LD_INT 85
32932: PUSH
32933: LD_INT 86
32935: PUSH
32936: LD_INT 89
32938: PUSH
32939: LD_INT 91
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33002
33001: POP
// if state > - 1 and state < 3 then
33002: LD_VAR 0 3
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: GREATER
33011: IFFALSE 33023
33013: PUSH
33014: LD_VAR 0 3
33018: PUSH
33019: LD_INT 3
33021: LESS
33022: AND
33023: IFFALSE 33080
// for i in result do
33025: LD_ADDR_VAR 0 5
33029: PUSH
33030: LD_VAR 0 4
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33078
// if GetTech ( i , side ) <> state then
33038: LD_VAR 0 5
33042: PPUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 321
33052: PUSH
33053: LD_VAR 0 3
33057: NONEQUAL
33058: IFFALSE 33076
// result := result diff i ;
33060: LD_ADDR_VAR 0 4
33064: PUSH
33065: LD_VAR 0 4
33069: PUSH
33070: LD_VAR 0 5
33074: DIFF
33075: ST_TO_ADDR
33076: GO 33035
33078: POP
33079: POP
// end ;
33080: LD_VAR 0 4
33084: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33085: LD_INT 0
33087: PPUSH
33088: PPUSH
33089: PPUSH
// result := true ;
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_INT 1
33097: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33098: LD_ADDR_VAR 0 5
33102: PUSH
33103: LD_VAR 0 2
33107: PPUSH
33108: CALL_OW 480
33112: ST_TO_ADDR
// if not tmp then
33113: LD_VAR 0 5
33117: NOT
33118: IFFALSE 33122
// exit ;
33120: GO 33171
// for i in tmp do
33122: LD_ADDR_VAR 0 4
33126: PUSH
33127: LD_VAR 0 5
33131: PUSH
33132: FOR_IN
33133: IFFALSE 33169
// if GetTech ( i , side ) <> state_researched then
33135: LD_VAR 0 4
33139: PPUSH
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL_OW 321
33149: PUSH
33150: LD_INT 2
33152: NONEQUAL
33153: IFFALSE 33167
// begin result := false ;
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 0
33162: ST_TO_ADDR
// exit ;
33163: POP
33164: POP
33165: GO 33171
// end ;
33167: GO 33132
33169: POP
33170: POP
// end ;
33171: LD_VAR 0 3
33175: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33191: LD_VAR 0 1
33195: NOT
33196: IFTRUE 33213
33198: PUSH
33199: LD_VAR 0 1
33203: PPUSH
33204: CALL_OW 257
33208: PUSH
33209: LD_INT 9
33211: NONEQUAL
33212: OR
33213: IFFALSE 33217
// exit ;
33215: GO 33796
// side := GetSide ( unit ) ;
33217: LD_ADDR_VAR 0 9
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 255
33231: ST_TO_ADDR
// tech_space := tech_spacanom ;
33232: LD_ADDR_VAR 0 12
33236: PUSH
33237: LD_INT 29
33239: ST_TO_ADDR
// tech_time := tech_taurad ;
33240: LD_ADDR_VAR 0 13
33244: PUSH
33245: LD_INT 28
33247: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33248: LD_ADDR_VAR 0 11
33252: PUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 310
33262: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33263: LD_VAR 0 11
33267: PPUSH
33268: CALL_OW 247
33272: PUSH
33273: LD_INT 2
33275: EQUAL
33276: IFFALSE 33280
// exit ;
33278: GO 33796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33280: LD_ADDR_VAR 0 8
33284: PUSH
33285: LD_INT 81
33287: PUSH
33288: LD_VAR 0 9
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 3
33299: PUSH
33300: LD_INT 21
33302: PUSH
33303: LD_INT 3
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PPUSH
33318: CALL_OW 69
33322: ST_TO_ADDR
// if not tmp then
33323: LD_VAR 0 8
33327: NOT
33328: IFFALSE 33332
// exit ;
33330: GO 33796
// if in_unit then
33332: LD_VAR 0 11
33336: IFFALSE 33360
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33338: LD_ADDR_VAR 0 10
33342: PUSH
33343: LD_VAR 0 8
33347: PPUSH
33348: LD_VAR 0 11
33352: PPUSH
33353: CALL_OW 74
33357: ST_TO_ADDR
33358: GO 33380
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33360: LD_ADDR_VAR 0 10
33364: PUSH
33365: LD_VAR 0 8
33369: PPUSH
33370: LD_VAR 0 1
33374: PPUSH
33375: CALL_OW 74
33379: ST_TO_ADDR
// if not enemy then
33380: LD_VAR 0 10
33384: NOT
33385: IFFALSE 33389
// exit ;
33387: GO 33796
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33389: LD_VAR 0 11
33393: IFFALSE 33415
33395: PUSH
33396: LD_VAR 0 11
33400: PPUSH
33401: LD_VAR 0 10
33405: PPUSH
33406: CALL_OW 296
33410: PUSH
33411: LD_INT 13
33413: GREATER
33414: AND
33415: IFTRUE 33437
33417: PUSH
33418: LD_VAR 0 1
33422: PPUSH
33423: LD_VAR 0 10
33427: PPUSH
33428: CALL_OW 296
33432: PUSH
33433: LD_INT 12
33435: GREATER
33436: OR
33437: IFFALSE 33441
// exit ;
33439: GO 33796
// missile := [ 1 ] ;
33441: LD_ADDR_VAR 0 14
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33452: LD_VAR 0 9
33456: PPUSH
33457: LD_VAR 0 12
33461: PPUSH
33462: CALL_OW 325
33466: IFFALSE 33495
// missile := Replace ( missile , missile + 1 , 2 ) ;
33468: LD_ADDR_VAR 0 14
33472: PUSH
33473: LD_VAR 0 14
33477: PPUSH
33478: LD_VAR 0 14
33482: PUSH
33483: LD_INT 1
33485: PLUS
33486: PPUSH
33487: LD_INT 2
33489: PPUSH
33490: CALL_OW 1
33494: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33495: LD_VAR 0 9
33499: PPUSH
33500: LD_VAR 0 13
33504: PPUSH
33505: CALL_OW 325
33509: IFFALSE 33533
33511: PUSH
33512: LD_VAR 0 10
33516: PPUSH
33517: CALL_OW 255
33521: PPUSH
33522: LD_VAR 0 13
33526: PPUSH
33527: CALL_OW 325
33531: NOT
33532: AND
33533: IFFALSE 33562
// missile := Replace ( missile , missile + 1 , 3 ) ;
33535: LD_ADDR_VAR 0 14
33539: PUSH
33540: LD_VAR 0 14
33544: PPUSH
33545: LD_VAR 0 14
33549: PUSH
33550: LD_INT 1
33552: PLUS
33553: PPUSH
33554: LD_INT 3
33556: PPUSH
33557: CALL_OW 1
33561: ST_TO_ADDR
// if missile < 2 then
33562: LD_VAR 0 14
33566: PUSH
33567: LD_INT 2
33569: LESS
33570: IFFALSE 33574
// exit ;
33572: GO 33796
// x := GetX ( enemy ) ;
33574: LD_ADDR_VAR 0 4
33578: PUSH
33579: LD_VAR 0 10
33583: PPUSH
33584: CALL_OW 250
33588: ST_TO_ADDR
// y := GetY ( enemy ) ;
33589: LD_ADDR_VAR 0 5
33593: PUSH
33594: LD_VAR 0 10
33598: PPUSH
33599: CALL_OW 251
33603: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33604: LD_ADDR_VAR 0 6
33608: PUSH
33609: LD_VAR 0 4
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PPUSH
33618: LD_INT 1
33620: PPUSH
33621: CALL_OW 12
33625: PLUS
33626: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33627: LD_ADDR_VAR 0 7
33631: PUSH
33632: LD_VAR 0 5
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PPUSH
33641: LD_INT 1
33643: PPUSH
33644: CALL_OW 12
33648: PLUS
33649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33650: LD_VAR 0 6
33654: PPUSH
33655: LD_VAR 0 7
33659: PPUSH
33660: CALL_OW 488
33664: NOT
33665: IFFALSE 33687
// begin _x := x ;
33667: LD_ADDR_VAR 0 6
33671: PUSH
33672: LD_VAR 0 4
33676: ST_TO_ADDR
// _y := y ;
33677: LD_ADDR_VAR 0 7
33681: PUSH
33682: LD_VAR 0 5
33686: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33687: LD_ADDR_VAR 0 3
33691: PUSH
33692: LD_INT 1
33694: PPUSH
33695: LD_VAR 0 14
33699: PPUSH
33700: CALL_OW 12
33704: ST_TO_ADDR
// case i of 1 :
33705: LD_VAR 0 3
33709: PUSH
33710: LD_INT 1
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33735
33718: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33719: LD_VAR 0 1
33723: PPUSH
33724: LD_VAR 0 10
33728: PPUSH
33729: CALL_OW 115
33733: GO 33796
33735: LD_INT 2
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33765
33743: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_VAR 0 6
33753: PPUSH
33754: LD_VAR 0 7
33758: PPUSH
33759: CALL_OW 153
33763: GO 33796
33765: LD_INT 3
33767: DOUBLE
33768: EQUAL
33769: IFTRUE 33773
33771: GO 33795
33773: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33774: LD_VAR 0 1
33778: PPUSH
33779: LD_VAR 0 6
33783: PPUSH
33784: LD_VAR 0 7
33788: PPUSH
33789: CALL_OW 154
33793: GO 33796
33795: POP
// end ;
33796: LD_VAR 0 2
33800: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
// if not unit or not building then
33809: LD_VAR 0 1
33813: NOT
33814: IFTRUE 33823
33816: PUSH
33817: LD_VAR 0 2
33821: NOT
33822: OR
33823: IFFALSE 33827
// exit ;
33825: GO 33985
// x := GetX ( building ) ;
33827: LD_ADDR_VAR 0 5
33831: PUSH
33832: LD_VAR 0 2
33836: PPUSH
33837: CALL_OW 250
33841: ST_TO_ADDR
// y := GetY ( building ) ;
33842: LD_ADDR_VAR 0 6
33846: PUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL_OW 251
33856: ST_TO_ADDR
// for i := 0 to 5 do
33857: LD_ADDR_VAR 0 4
33861: PUSH
33862: DOUBLE
33863: LD_INT 0
33865: DEC
33866: ST_TO_ADDR
33867: LD_INT 5
33869: PUSH
33870: FOR_TO
33871: IFFALSE 33983
// begin _x := ShiftX ( x , i , 3 ) ;
33873: LD_ADDR_VAR 0 7
33877: PUSH
33878: LD_VAR 0 5
33882: PPUSH
33883: LD_VAR 0 4
33887: PPUSH
33888: LD_INT 3
33890: PPUSH
33891: CALL_OW 272
33895: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33896: LD_ADDR_VAR 0 8
33900: PUSH
33901: LD_VAR 0 6
33905: PPUSH
33906: LD_VAR 0 4
33910: PPUSH
33911: LD_INT 3
33913: PPUSH
33914: CALL_OW 273
33918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33919: LD_VAR 0 7
33923: PPUSH
33924: LD_VAR 0 8
33928: PPUSH
33929: CALL_OW 488
33933: NOT
33934: IFFALSE 33938
// continue ;
33936: GO 33870
// if HexInfo ( _x , _y ) = 0 then
33938: LD_VAR 0 7
33942: PPUSH
33943: LD_VAR 0 8
33947: PPUSH
33948: CALL_OW 428
33952: PUSH
33953: LD_INT 0
33955: EQUAL
33956: IFFALSE 33981
// begin ComMoveXY ( unit , _x , _y ) ;
33958: LD_VAR 0 1
33962: PPUSH
33963: LD_VAR 0 7
33967: PPUSH
33968: LD_VAR 0 8
33972: PPUSH
33973: CALL_OW 111
// exit ;
33977: POP
33978: POP
33979: GO 33985
// end ; end ;
33981: GO 33870
33983: POP
33984: POP
// end ;
33985: LD_VAR 0 3
33989: RET
// export function ScanBase ( side , base_area ) ; begin
33990: LD_INT 0
33992: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33993: LD_ADDR_VAR 0 3
33997: PUSH
33998: LD_VAR 0 2
34002: PPUSH
34003: LD_INT 81
34005: PUSH
34006: LD_VAR 0 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PPUSH
34015: CALL_OW 70
34019: ST_TO_ADDR
// end ;
34020: LD_VAR 0 3
34024: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34025: LD_INT 0
34027: PPUSH
34028: PPUSH
34029: PPUSH
34030: PPUSH
// result := false ;
34031: LD_ADDR_VAR 0 2
34035: PUSH
34036: LD_INT 0
34038: ST_TO_ADDR
// side := GetSide ( unit ) ;
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_VAR 0 1
34048: PPUSH
34049: CALL_OW 255
34053: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34054: LD_ADDR_VAR 0 4
34058: PUSH
34059: LD_VAR 0 1
34063: PPUSH
34064: CALL_OW 248
34068: ST_TO_ADDR
// case nat of 1 :
34069: LD_VAR 0 4
34073: PUSH
34074: LD_INT 1
34076: DOUBLE
34077: EQUAL
34078: IFTRUE 34082
34080: GO 34093
34082: POP
// tech := tech_lassight ; 2 :
34083: LD_ADDR_VAR 0 5
34087: PUSH
34088: LD_INT 12
34090: ST_TO_ADDR
34091: GO 34132
34093: LD_INT 2
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34112
34101: POP
// tech := tech_mortar ; 3 :
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_INT 41
34109: ST_TO_ADDR
34110: GO 34132
34112: LD_INT 3
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34131
34120: POP
// tech := tech_bazooka ; end ;
34121: LD_ADDR_VAR 0 5
34125: PUSH
34126: LD_INT 44
34128: ST_TO_ADDR
34129: GO 34132
34131: POP
// if Researched ( side , tech ) then
34132: LD_VAR 0 3
34136: PPUSH
34137: LD_VAR 0 5
34141: PPUSH
34142: CALL_OW 325
34146: IFFALSE 34173
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34148: LD_ADDR_VAR 0 2
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: LD_INT 8
34158: PUSH
34159: LD_INT 9
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: PUSH
34167: LD_VAR 0 4
34171: ARRAY
34172: ST_TO_ADDR
// end ;
34173: LD_VAR 0 2
34177: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34178: LD_INT 0
34180: PPUSH
34181: PPUSH
34182: PPUSH
// if not mines then
34183: LD_VAR 0 2
34187: NOT
34188: IFFALSE 34192
// exit ;
34190: GO 34336
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34192: LD_ADDR_VAR 0 5
34196: PUSH
34197: LD_INT 81
34199: PUSH
34200: LD_VAR 0 1
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 3
34211: PUSH
34212: LD_INT 21
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PPUSH
34230: CALL_OW 69
34234: ST_TO_ADDR
// for i in mines do
34235: LD_ADDR_VAR 0 4
34239: PUSH
34240: LD_VAR 0 2
34244: PUSH
34245: FOR_IN
34246: IFFALSE 34334
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34248: LD_VAR 0 4
34252: PUSH
34253: LD_INT 1
34255: ARRAY
34256: PPUSH
34257: LD_VAR 0 4
34261: PUSH
34262: LD_INT 2
34264: ARRAY
34265: PPUSH
34266: CALL_OW 458
34270: NOT
34271: IFFALSE 34275
// continue ;
34273: GO 34245
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34275: LD_VAR 0 4
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: PPUSH
34284: LD_VAR 0 4
34288: PUSH
34289: LD_INT 2
34291: ARRAY
34292: PPUSH
34293: CALL_OW 428
34297: PUSH
34298: LD_VAR 0 5
34302: IN
34303: IFFALSE 34332
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34305: LD_VAR 0 4
34309: PUSH
34310: LD_INT 1
34312: ARRAY
34313: PPUSH
34314: LD_VAR 0 4
34318: PUSH
34319: LD_INT 2
34321: ARRAY
34322: PPUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 456
// end ;
34332: GO 34245
34334: POP
34335: POP
// end ;
34336: LD_VAR 0 3
34340: RET
// export function Count ( array ) ; begin
34341: LD_INT 0
34343: PPUSH
// result := array + 0 ;
34344: LD_ADDR_VAR 0 2
34348: PUSH
34349: LD_VAR 0 1
34353: PUSH
34354: LD_INT 0
34356: PLUS
34357: ST_TO_ADDR
// end ;
34358: LD_VAR 0 2
34362: RET
// export function IsEmpty ( building ) ; begin
34363: LD_INT 0
34365: PPUSH
// if not building then
34366: LD_VAR 0 1
34370: NOT
34371: IFFALSE 34375
// exit ;
34373: GO 34418
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34375: LD_ADDR_VAR 0 2
34379: PUSH
34380: LD_VAR 0 1
34384: PUSH
34385: LD_INT 22
34387: PUSH
34388: LD_VAR 0 1
34392: PPUSH
34393: CALL_OW 255
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 58
34404: PUSH
34405: EMPTY
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PPUSH
34412: CALL_OW 69
34416: IN
34417: ST_TO_ADDR
// end ;
34418: LD_VAR 0 2
34422: RET
// export function IsNotFull ( building ) ; var places ; begin
34423: LD_INT 0
34425: PPUSH
34426: PPUSH
// if not building then
34427: LD_VAR 0 1
34431: NOT
34432: IFFALSE 34436
// exit ;
34434: GO 34464
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34436: LD_ADDR_VAR 0 2
34440: PUSH
34441: LD_VAR 0 1
34445: PPUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 62
34451: PUSH
34452: EMPTY
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PPUSH
34459: CALL_OW 72
34463: ST_TO_ADDR
// end ;
34464: LD_VAR 0 2
34468: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34469: LD_INT 0
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
// tmp := [ ] ;
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: EMPTY
34481: ST_TO_ADDR
// list := [ ] ;
34482: LD_ADDR_VAR 0 5
34486: PUSH
34487: EMPTY
34488: ST_TO_ADDR
// for i = 16 to 25 do
34489: LD_ADDR_VAR 0 4
34493: PUSH
34494: DOUBLE
34495: LD_INT 16
34497: DEC
34498: ST_TO_ADDR
34499: LD_INT 25
34501: PUSH
34502: FOR_TO
34503: IFFALSE 34576
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_INT 22
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 255
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 91
34534: PUSH
34535: LD_VAR 0 1
34539: PUSH
34540: LD_INT 6
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 30
34550: PUSH
34551: LD_VAR 0 4
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: PPUSH
34568: CALL_OW 69
34572: ADD
34573: ST_TO_ADDR
34574: GO 34502
34576: POP
34577: POP
// for i = 1 to tmp do
34578: LD_ADDR_VAR 0 4
34582: PUSH
34583: DOUBLE
34584: LD_INT 1
34586: DEC
34587: ST_TO_ADDR
34588: LD_VAR 0 3
34592: PUSH
34593: FOR_TO
34594: IFFALSE 34682
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34596: LD_ADDR_VAR 0 5
34600: PUSH
34601: LD_VAR 0 5
34605: PUSH
34606: LD_VAR 0 3
34610: PUSH
34611: LD_VAR 0 4
34615: ARRAY
34616: PPUSH
34617: CALL_OW 266
34621: PUSH
34622: LD_VAR 0 3
34626: PUSH
34627: LD_VAR 0 4
34631: ARRAY
34632: PPUSH
34633: CALL_OW 250
34637: PUSH
34638: LD_VAR 0 3
34642: PUSH
34643: LD_VAR 0 4
34647: ARRAY
34648: PPUSH
34649: CALL_OW 251
34653: PUSH
34654: LD_VAR 0 3
34658: PUSH
34659: LD_VAR 0 4
34663: ARRAY
34664: PPUSH
34665: CALL_OW 254
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: ADD
34679: ST_TO_ADDR
34680: GO 34593
34682: POP
34683: POP
// result := list ;
34684: LD_ADDR_VAR 0 2
34688: PUSH
34689: LD_VAR 0 5
34693: ST_TO_ADDR
// end ;
34694: LD_VAR 0 2
34698: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34699: LD_INT 0
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
// if not factory then
34708: LD_VAR 0 1
34712: NOT
34713: IFFALSE 34717
// exit ;
34715: GO 35320
// if control = control_apeman then
34717: LD_VAR 0 4
34721: PUSH
34722: LD_INT 5
34724: EQUAL
34725: IFFALSE 34834
// begin tmp := UnitsInside ( factory ) ;
34727: LD_ADDR_VAR 0 8
34731: PUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 313
34741: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34742: LD_VAR 0 8
34746: PPUSH
34747: LD_INT 25
34749: PUSH
34750: LD_INT 12
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PPUSH
34757: CALL_OW 72
34761: NOT
34762: IFFALSE 34772
// control := control_manual ;
34764: LD_ADDR_VAR 0 4
34768: PUSH
34769: LD_INT 1
34771: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34772: LD_ADDR_VAR 0 8
34776: PUSH
34777: LD_VAR 0 1
34781: PPUSH
34782: CALL 34469 0 1
34786: ST_TO_ADDR
// if tmp then
34787: LD_VAR 0 8
34791: IFFALSE 34834
// begin for i in tmp do
34793: LD_ADDR_VAR 0 7
34797: PUSH
34798: LD_VAR 0 8
34802: PUSH
34803: FOR_IN
34804: IFFALSE 34832
// if i [ 1 ] = b_ext_radio then
34806: LD_VAR 0 7
34810: PUSH
34811: LD_INT 1
34813: ARRAY
34814: PUSH
34815: LD_INT 22
34817: EQUAL
34818: IFFALSE 34830
// begin control := control_remote ;
34820: LD_ADDR_VAR 0 4
34824: PUSH
34825: LD_INT 2
34827: ST_TO_ADDR
// break ;
34828: GO 34832
// end ;
34830: GO 34803
34832: POP
34833: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34834: LD_VAR 0 1
34838: PPUSH
34839: LD_VAR 0 2
34843: PPUSH
34844: LD_VAR 0 3
34848: PPUSH
34849: LD_VAR 0 4
34853: PPUSH
34854: LD_VAR 0 5
34858: PPUSH
34859: CALL_OW 448
34863: IFFALSE 34898
// begin result := [ chassis , engine , control , weapon ] ;
34865: LD_ADDR_VAR 0 6
34869: PUSH
34870: LD_VAR 0 2
34874: PUSH
34875: LD_VAR 0 3
34879: PUSH
34880: LD_VAR 0 4
34884: PUSH
34885: LD_VAR 0 5
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// exit ;
34896: GO 35320
// end ; _chassis := AvailableChassisList ( factory ) ;
34898: LD_ADDR_VAR 0 9
34902: PUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 475
34912: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34913: LD_ADDR_VAR 0 11
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 476
34927: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34928: LD_ADDR_VAR 0 12
34932: PUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 477
34942: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34943: LD_ADDR_VAR 0 10
34947: PUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 478
34957: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34958: LD_VAR 0 9
34962: NOT
34963: IFTRUE 34972
34965: PUSH
34966: LD_VAR 0 11
34970: NOT
34971: OR
34972: IFTRUE 34981
34974: PUSH
34975: LD_VAR 0 12
34979: NOT
34980: OR
34981: IFTRUE 34990
34983: PUSH
34984: LD_VAR 0 10
34988: NOT
34989: OR
34990: IFFALSE 35025
// begin result := [ chassis , engine , control , weapon ] ;
34992: LD_ADDR_VAR 0 6
34996: PUSH
34997: LD_VAR 0 2
35001: PUSH
35002: LD_VAR 0 3
35006: PUSH
35007: LD_VAR 0 4
35011: PUSH
35012: LD_VAR 0 5
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: ST_TO_ADDR
// exit ;
35023: GO 35320
// end ; if not chassis in _chassis then
35025: LD_VAR 0 2
35029: PUSH
35030: LD_VAR 0 9
35034: IN
35035: NOT
35036: IFFALSE 35062
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35038: LD_ADDR_VAR 0 2
35042: PUSH
35043: LD_VAR 0 9
35047: PUSH
35048: LD_INT 1
35050: PPUSH
35051: LD_VAR 0 9
35055: PPUSH
35056: CALL_OW 12
35060: ARRAY
35061: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 3
35071: PPUSH
35072: CALL 35325 0 2
35076: NOT
35077: IFFALSE 35138
// repeat engine := _engine [ 1 ] ;
35079: LD_ADDR_VAR 0 3
35083: PUSH
35084: LD_VAR 0 11
35088: PUSH
35089: LD_INT 1
35091: ARRAY
35092: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35093: LD_ADDR_VAR 0 11
35097: PUSH
35098: LD_VAR 0 11
35102: PPUSH
35103: LD_INT 1
35105: PPUSH
35106: CALL_OW 3
35110: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35111: LD_VAR 0 2
35115: PPUSH
35116: LD_VAR 0 3
35120: PPUSH
35121: CALL 35325 0 2
35125: IFTRUE 35136
35127: PUSH
35128: LD_VAR 0 11
35132: PUSH
35133: EMPTY
35134: EQUAL
35135: OR
35136: IFFALSE 35079
// if not control in _control then
35138: LD_VAR 0 4
35142: PUSH
35143: LD_VAR 0 12
35147: IN
35148: NOT
35149: IFFALSE 35175
// control := _control [ rand ( 1 , _control ) ] ;
35151: LD_ADDR_VAR 0 4
35155: PUSH
35156: LD_VAR 0 12
35160: PUSH
35161: LD_INT 1
35163: PPUSH
35164: LD_VAR 0 12
35168: PPUSH
35169: CALL_OW 12
35173: ARRAY
35174: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35175: LD_VAR 0 2
35179: PPUSH
35180: LD_VAR 0 5
35184: PPUSH
35185: CALL 35547 0 2
35189: NOT
35190: IFFALSE 35251
// repeat weapon := _weapon [ 1 ] ;
35192: LD_ADDR_VAR 0 5
35196: PUSH
35197: LD_VAR 0 10
35201: PUSH
35202: LD_INT 1
35204: ARRAY
35205: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35206: LD_ADDR_VAR 0 10
35210: PUSH
35211: LD_VAR 0 10
35215: PPUSH
35216: LD_INT 1
35218: PPUSH
35219: CALL_OW 3
35223: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35224: LD_VAR 0 2
35228: PPUSH
35229: LD_VAR 0 5
35233: PPUSH
35234: CALL 35547 0 2
35238: IFTRUE 35249
35240: PUSH
35241: LD_VAR 0 10
35245: PUSH
35246: EMPTY
35247: EQUAL
35248: OR
35249: IFFALSE 35192
// result := [ ] ;
35251: LD_ADDR_VAR 0 6
35255: PUSH
35256: EMPTY
35257: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35258: LD_VAR 0 1
35262: PPUSH
35263: LD_VAR 0 2
35267: PPUSH
35268: LD_VAR 0 3
35272: PPUSH
35273: LD_VAR 0 4
35277: PPUSH
35278: LD_VAR 0 5
35282: PPUSH
35283: CALL_OW 448
35287: IFFALSE 35320
// result := [ chassis , engine , control , weapon ] ;
35289: LD_ADDR_VAR 0 6
35293: PUSH
35294: LD_VAR 0 2
35298: PUSH
35299: LD_VAR 0 3
35303: PUSH
35304: LD_VAR 0 4
35308: PUSH
35309: LD_VAR 0 5
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
// end ;
35320: LD_VAR 0 6
35324: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35325: LD_INT 0
35327: PPUSH
// if not chassis or not engine then
35328: LD_VAR 0 1
35332: NOT
35333: IFTRUE 35342
35335: PUSH
35336: LD_VAR 0 2
35340: NOT
35341: OR
35342: IFFALSE 35346
// exit ;
35344: GO 35542
// case engine of engine_solar :
35346: LD_VAR 0 2
35350: PUSH
35351: LD_INT 2
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35359
35357: GO 35397
35359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_INT 11
35367: PUSH
35368: LD_INT 12
35370: PUSH
35371: LD_INT 13
35373: PUSH
35374: LD_INT 14
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
35395: GO 35526
35397: LD_INT 1
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35405
35403: GO 35467
35405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_INT 11
35413: PUSH
35414: LD_INT 12
35416: PUSH
35417: LD_INT 13
35419: PUSH
35420: LD_INT 14
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: LD_INT 4
35434: PUSH
35435: LD_INT 5
35437: PUSH
35438: LD_INT 21
35440: PUSH
35441: LD_INT 23
35443: PUSH
35444: LD_INT 22
35446: PUSH
35447: LD_INT 24
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
35465: GO 35526
35467: LD_INT 3
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35475
35473: GO 35525
35475: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_INT 13
35483: PUSH
35484: LD_INT 14
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: LD_INT 4
35495: PUSH
35496: LD_INT 5
35498: PUSH
35499: LD_INT 21
35501: PUSH
35502: LD_INT 22
35504: PUSH
35505: LD_INT 23
35507: PUSH
35508: LD_INT 24
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
35523: GO 35526
35525: POP
// result := ( chassis in result ) ;
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_VAR 0 1
35535: PUSH
35536: LD_VAR 0 3
35540: IN
35541: ST_TO_ADDR
// end ;
35542: LD_VAR 0 3
35546: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35547: LD_INT 0
35549: PPUSH
// if not chassis or not weapon then
35550: LD_VAR 0 1
35554: NOT
35555: IFTRUE 35564
35557: PUSH
35558: LD_VAR 0 2
35562: NOT
35563: OR
35564: IFFALSE 35568
// exit ;
35566: GO 36662
// case weapon of us_machine_gun :
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 2
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35611
35581: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: LD_INT 5
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
35609: GO 36646
35611: LD_INT 3
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35649
35619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 4
35636: PUSH
35637: LD_INT 5
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
35647: GO 36646
35649: LD_INT 11
35651: DOUBLE
35652: EQUAL
35653: IFTRUE 35657
35655: GO 35687
35657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35658: LD_ADDR_VAR 0 3
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: LD_INT 4
35674: PUSH
35675: LD_INT 5
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
35685: GO 36646
35687: LD_INT 4
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35721
35695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35696: LD_ADDR_VAR 0 3
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: LD_INT 3
35706: PUSH
35707: LD_INT 4
35709: PUSH
35710: LD_INT 5
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 36646
35721: LD_INT 5
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35755
35729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 4
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
35753: GO 36646
35755: LD_INT 9
35757: DOUBLE
35758: EQUAL
35759: IFTRUE 35763
35761: GO 35789
35763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35764: LD_ADDR_VAR 0 3
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 3
35774: PUSH
35775: LD_INT 4
35777: PUSH
35778: LD_INT 5
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: ST_TO_ADDR
35787: GO 36646
35789: LD_INT 7
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35823
35797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35798: LD_ADDR_VAR 0 3
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 3
35808: PUSH
35809: LD_INT 4
35811: PUSH
35812: LD_INT 5
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
35821: GO 36646
35823: LD_INT 12
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35857
35831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35832: LD_ADDR_VAR 0 3
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: LD_INT 4
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
35855: GO 36646
35857: LD_INT 13
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35891
35865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: LD_INT 4
35879: PUSH
35880: LD_INT 5
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
35889: GO 36646
35891: LD_INT 14
35893: DOUBLE
35894: EQUAL
35895: IFTRUE 35899
35897: GO 35917
35899: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_INT 4
35907: PUSH
35908: LD_INT 5
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: ST_TO_ADDR
35915: GO 36646
35917: LD_INT 6
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 35943
35925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: LD_INT 5
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: ST_TO_ADDR
35941: GO 36646
35943: LD_INT 10
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35951
35949: GO 35969
35951: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 4
35959: PUSH
35960: LD_INT 5
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: ST_TO_ADDR
35967: GO 36646
35969: LD_INT 22
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 36003
35977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 11
35985: PUSH
35986: LD_INT 12
35988: PUSH
35989: LD_INT 13
35991: PUSH
35992: LD_INT 14
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36646
36003: LD_INT 23
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36037
36011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 11
36019: PUSH
36020: LD_INT 12
36022: PUSH
36023: LD_INT 13
36025: PUSH
36026: LD_INT 14
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36646
36037: LD_INT 24
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36071
36045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 11
36053: PUSH
36054: LD_INT 12
36056: PUSH
36057: LD_INT 13
36059: PUSH
36060: LD_INT 14
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
36069: GO 36646
36071: LD_INT 30
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36105
36079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 13
36093: PUSH
36094: LD_INT 14
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 36646
36105: LD_INT 25
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36131
36113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 13
36121: PUSH
36122: LD_INT 14
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: ST_TO_ADDR
36129: GO 36646
36131: LD_INT 27
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36157
36139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36140: LD_ADDR_VAR 0 3
36144: PUSH
36145: LD_INT 13
36147: PUSH
36148: LD_INT 14
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: ST_TO_ADDR
36155: GO 36646
36157: LD_INT 92
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36191
36165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_INT 11
36173: PUSH
36174: LD_INT 12
36176: PUSH
36177: LD_INT 13
36179: PUSH
36180: LD_INT 14
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36646
36191: LD_INT 28
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36217
36199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 13
36207: PUSH
36208: LD_INT 14
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36646
36217: LD_INT 29
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36243
36225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 13
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36646
36243: LD_INT 31
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36269
36251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 13
36259: PUSH
36260: LD_INT 14
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36646
36269: LD_INT 26
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36646
36295: LD_INT 42
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36329
36303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36304: LD_ADDR_VAR 0 3
36308: PUSH
36309: LD_INT 21
36311: PUSH
36312: LD_INT 22
36314: PUSH
36315: LD_INT 23
36317: PUSH
36318: LD_INT 24
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
36327: GO 36646
36329: LD_INT 43
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36363
36337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 21
36345: PUSH
36346: LD_INT 22
36348: PUSH
36349: LD_INT 23
36351: PUSH
36352: LD_INT 24
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: ST_TO_ADDR
36361: GO 36646
36363: LD_INT 44
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36371
36369: GO 36397
36371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_INT 21
36379: PUSH
36380: LD_INT 22
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: LD_INT 24
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
36395: GO 36646
36397: LD_INT 45
36399: DOUBLE
36400: EQUAL
36401: IFTRUE 36405
36403: GO 36431
36405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36406: LD_ADDR_VAR 0 3
36410: PUSH
36411: LD_INT 21
36413: PUSH
36414: LD_INT 22
36416: PUSH
36417: LD_INT 23
36419: PUSH
36420: LD_INT 24
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: ST_TO_ADDR
36429: GO 36646
36431: LD_INT 49
36433: DOUBLE
36434: EQUAL
36435: IFTRUE 36439
36437: GO 36465
36439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36440: LD_ADDR_VAR 0 3
36444: PUSH
36445: LD_INT 21
36447: PUSH
36448: LD_INT 22
36450: PUSH
36451: LD_INT 23
36453: PUSH
36454: LD_INT 24
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
36463: GO 36646
36465: LD_INT 51
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36499
36473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_INT 21
36481: PUSH
36482: LD_INT 22
36484: PUSH
36485: LD_INT 23
36487: PUSH
36488: LD_INT 24
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
36497: GO 36646
36499: LD_INT 52
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36507
36505: GO 36533
36507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36508: LD_ADDR_VAR 0 3
36512: PUSH
36513: LD_INT 21
36515: PUSH
36516: LD_INT 22
36518: PUSH
36519: LD_INT 23
36521: PUSH
36522: LD_INT 24
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
36531: GO 36646
36533: LD_INT 53
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36541
36539: GO 36559
36541: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: LD_INT 23
36549: PUSH
36550: LD_INT 24
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 36646
36559: LD_INT 46
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36585
36567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 23
36575: PUSH
36576: LD_INT 24
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36646
36585: LD_INT 47
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36611
36593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 23
36601: PUSH
36602: LD_INT 24
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36646
36611: LD_INT 98
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36645
36619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 21
36627: PUSH
36628: LD_INT 22
36630: PUSH
36631: LD_INT 23
36633: PUSH
36634: LD_INT 24
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: ST_TO_ADDR
36643: GO 36646
36645: POP
// result := ( chassis in result ) ;
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_VAR 0 1
36655: PUSH
36656: LD_VAR 0 3
36660: IN
36661: ST_TO_ADDR
// end ;
36662: LD_VAR 0 3
36666: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36667: LD_INT 0
36669: PPUSH
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
36674: PPUSH
36675: PPUSH
// result := array ;
36676: LD_ADDR_VAR 0 5
36680: PUSH
36681: LD_VAR 0 1
36685: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36686: LD_VAR 0 1
36690: NOT
36691: IFTRUE 36700
36693: PUSH
36694: LD_VAR 0 2
36698: NOT
36699: OR
36700: IFTRUE 36709
36702: PUSH
36703: LD_VAR 0 3
36707: NOT
36708: OR
36709: IFTRUE 36723
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_VAR 0 1
36721: GREATER
36722: OR
36723: IFTRUE 36737
36725: PUSH
36726: LD_VAR 0 3
36730: PUSH
36731: LD_VAR 0 1
36735: GREATER
36736: OR
36737: IFFALSE 36741
// exit ;
36739: GO 37037
// if direction then
36741: LD_VAR 0 4
36745: IFFALSE 36809
// begin d := 1 ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 1
36754: ST_TO_ADDR
// if i_from > i_to then
36755: LD_VAR 0 2
36759: PUSH
36760: LD_VAR 0 3
36764: GREATER
36765: IFFALSE 36791
// length := ( array - i_from ) + i_to else
36767: LD_ADDR_VAR 0 11
36771: PUSH
36772: LD_VAR 0 1
36776: PUSH
36777: LD_VAR 0 2
36781: MINUS
36782: PUSH
36783: LD_VAR 0 3
36787: PLUS
36788: ST_TO_ADDR
36789: GO 36807
// length := i_to - i_from ;
36791: LD_ADDR_VAR 0 11
36795: PUSH
36796: LD_VAR 0 3
36800: PUSH
36801: LD_VAR 0 2
36805: MINUS
36806: ST_TO_ADDR
// end else
36807: GO 36870
// begin d := - 1 ;
36809: LD_ADDR_VAR 0 9
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: ST_TO_ADDR
// if i_from > i_to then
36818: LD_VAR 0 2
36822: PUSH
36823: LD_VAR 0 3
36827: GREATER
36828: IFFALSE 36848
// length := i_from - i_to else
36830: LD_ADDR_VAR 0 11
36834: PUSH
36835: LD_VAR 0 2
36839: PUSH
36840: LD_VAR 0 3
36844: MINUS
36845: ST_TO_ADDR
36846: GO 36870
// length := ( array - i_to ) + i_from ;
36848: LD_ADDR_VAR 0 11
36852: PUSH
36853: LD_VAR 0 1
36857: PUSH
36858: LD_VAR 0 3
36862: MINUS
36863: PUSH
36864: LD_VAR 0 2
36868: PLUS
36869: ST_TO_ADDR
// end ; if not length then
36870: LD_VAR 0 11
36874: NOT
36875: IFFALSE 36879
// exit ;
36877: GO 37037
// tmp := array ;
36879: LD_ADDR_VAR 0 10
36883: PUSH
36884: LD_VAR 0 1
36888: ST_TO_ADDR
// for i = 1 to length do
36889: LD_ADDR_VAR 0 6
36893: PUSH
36894: DOUBLE
36895: LD_INT 1
36897: DEC
36898: ST_TO_ADDR
36899: LD_VAR 0 11
36903: PUSH
36904: FOR_TO
36905: IFFALSE 37025
// begin for j = 1 to array do
36907: LD_ADDR_VAR 0 7
36911: PUSH
36912: DOUBLE
36913: LD_INT 1
36915: DEC
36916: ST_TO_ADDR
36917: LD_VAR 0 1
36921: PUSH
36922: FOR_TO
36923: IFFALSE 37011
// begin k := j + d ;
36925: LD_ADDR_VAR 0 8
36929: PUSH
36930: LD_VAR 0 7
36934: PUSH
36935: LD_VAR 0 9
36939: PLUS
36940: ST_TO_ADDR
// if k > array then
36941: LD_VAR 0 8
36945: PUSH
36946: LD_VAR 0 1
36950: GREATER
36951: IFFALSE 36961
// k := 1 ;
36953: LD_ADDR_VAR 0 8
36957: PUSH
36958: LD_INT 1
36960: ST_TO_ADDR
// if not k then
36961: LD_VAR 0 8
36965: NOT
36966: IFFALSE 36978
// k := array ;
36968: LD_ADDR_VAR 0 8
36972: PUSH
36973: LD_VAR 0 1
36977: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36978: LD_ADDR_VAR 0 10
36982: PUSH
36983: LD_VAR 0 10
36987: PPUSH
36988: LD_VAR 0 8
36992: PPUSH
36993: LD_VAR 0 1
36997: PUSH
36998: LD_VAR 0 7
37002: ARRAY
37003: PPUSH
37004: CALL_OW 1
37008: ST_TO_ADDR
// end ;
37009: GO 36922
37011: POP
37012: POP
// array := tmp ;
37013: LD_ADDR_VAR 0 1
37017: PUSH
37018: LD_VAR 0 10
37022: ST_TO_ADDR
// end ;
37023: GO 36904
37025: POP
37026: POP
// result := array ;
37027: LD_ADDR_VAR 0 5
37031: PUSH
37032: LD_VAR 0 1
37036: ST_TO_ADDR
// end ;
37037: LD_VAR 0 5
37041: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37042: LD_INT 0
37044: PPUSH
37045: PPUSH
// result := 0 ;
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 0
37053: ST_TO_ADDR
// if not array or not value in array then
37054: LD_VAR 0 1
37058: NOT
37059: IFTRUE 37074
37061: PUSH
37062: LD_VAR 0 2
37066: PUSH
37067: LD_VAR 0 1
37071: IN
37072: NOT
37073: OR
37074: IFFALSE 37078
// exit ;
37076: GO 37132
// for i = 1 to array do
37078: LD_ADDR_VAR 0 4
37082: PUSH
37083: DOUBLE
37084: LD_INT 1
37086: DEC
37087: ST_TO_ADDR
37088: LD_VAR 0 1
37092: PUSH
37093: FOR_TO
37094: IFFALSE 37130
// if value = array [ i ] then
37096: LD_VAR 0 2
37100: PUSH
37101: LD_VAR 0 1
37105: PUSH
37106: LD_VAR 0 4
37110: ARRAY
37111: EQUAL
37112: IFFALSE 37128
// begin result := i ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_VAR 0 4
37123: ST_TO_ADDR
// exit ;
37124: POP
37125: POP
37126: GO 37132
// end ;
37128: GO 37093
37130: POP
37131: POP
// end ;
37132: LD_VAR 0 3
37136: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37137: LD_INT 0
37139: PPUSH
// vc_chassis := chassis ;
37140: LD_ADDR_OWVAR 37
37144: PUSH
37145: LD_VAR 0 1
37149: ST_TO_ADDR
// vc_engine := engine ;
37150: LD_ADDR_OWVAR 39
37154: PUSH
37155: LD_VAR 0 2
37159: ST_TO_ADDR
// vc_control := control ;
37160: LD_ADDR_OWVAR 38
37164: PUSH
37165: LD_VAR 0 3
37169: ST_TO_ADDR
// vc_weapon := weapon ;
37170: LD_ADDR_OWVAR 40
37174: PUSH
37175: LD_VAR 0 4
37179: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37180: LD_ADDR_OWVAR 41
37184: PUSH
37185: LD_VAR 0 5
37189: ST_TO_ADDR
// end ;
37190: LD_VAR 0 6
37194: RET
// export function WantPlant ( unit ) ; var task ; begin
37195: LD_INT 0
37197: PPUSH
37198: PPUSH
// result := false ;
37199: LD_ADDR_VAR 0 2
37203: PUSH
37204: LD_INT 0
37206: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37207: LD_ADDR_VAR 0 3
37211: PUSH
37212: LD_VAR 0 1
37216: PPUSH
37217: CALL_OW 437
37221: ST_TO_ADDR
// if task then
37222: LD_VAR 0 3
37226: IFFALSE 37254
// if task [ 1 ] [ 1 ] = p then
37228: LD_VAR 0 3
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PUSH
37237: LD_INT 1
37239: ARRAY
37240: PUSH
37241: LD_STRING p
37243: EQUAL
37244: IFFALSE 37254
// result := true ;
37246: LD_ADDR_VAR 0 2
37250: PUSH
37251: LD_INT 1
37253: ST_TO_ADDR
// end ;
37254: LD_VAR 0 2
37258: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37259: LD_INT 0
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
// if pos < 1 then
37265: LD_VAR 0 2
37269: PUSH
37270: LD_INT 1
37272: LESS
37273: IFFALSE 37277
// exit ;
37275: GO 37580
// if pos = 1 then
37277: LD_VAR 0 2
37281: PUSH
37282: LD_INT 1
37284: EQUAL
37285: IFFALSE 37318
// result := Replace ( arr , pos [ 1 ] , value ) else
37287: LD_ADDR_VAR 0 4
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: LD_VAR 0 2
37301: PUSH
37302: LD_INT 1
37304: ARRAY
37305: PPUSH
37306: LD_VAR 0 3
37310: PPUSH
37311: CALL_OW 1
37315: ST_TO_ADDR
37316: GO 37580
// begin tmp := arr ;
37318: LD_ADDR_VAR 0 6
37322: PUSH
37323: LD_VAR 0 1
37327: ST_TO_ADDR
// s_arr := [ tmp ] ;
37328: LD_ADDR_VAR 0 7
37332: PUSH
37333: LD_VAR 0 6
37337: PUSH
37338: EMPTY
37339: LIST
37340: ST_TO_ADDR
// for i = 1 to pos - 1 do
37341: LD_ADDR_VAR 0 5
37345: PUSH
37346: DOUBLE
37347: LD_INT 1
37349: DEC
37350: ST_TO_ADDR
37351: LD_VAR 0 2
37355: PUSH
37356: LD_INT 1
37358: MINUS
37359: PUSH
37360: FOR_TO
37361: IFFALSE 37406
// begin tmp := tmp [ pos [ i ] ] ;
37363: LD_ADDR_VAR 0 6
37367: PUSH
37368: LD_VAR 0 6
37372: PUSH
37373: LD_VAR 0 2
37377: PUSH
37378: LD_VAR 0 5
37382: ARRAY
37383: ARRAY
37384: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37385: LD_ADDR_VAR 0 7
37389: PUSH
37390: LD_VAR 0 7
37394: PUSH
37395: LD_VAR 0 6
37399: PUSH
37400: EMPTY
37401: LIST
37402: ADD
37403: ST_TO_ADDR
// end ;
37404: GO 37360
37406: POP
37407: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 6
37417: PPUSH
37418: LD_VAR 0 2
37422: PUSH
37423: LD_VAR 0 2
37427: ARRAY
37428: PPUSH
37429: LD_VAR 0 3
37433: PPUSH
37434: CALL_OW 1
37438: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37439: LD_ADDR_VAR 0 7
37443: PUSH
37444: LD_VAR 0 7
37448: PPUSH
37449: LD_VAR 0 7
37453: PPUSH
37454: LD_VAR 0 6
37458: PPUSH
37459: CALL_OW 1
37463: ST_TO_ADDR
// for i = s_arr downto 2 do
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: DOUBLE
37470: LD_VAR 0 7
37474: INC
37475: ST_TO_ADDR
37476: LD_INT 2
37478: PUSH
37479: FOR_DOWNTO
37480: IFFALSE 37564
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37482: LD_ADDR_VAR 0 6
37486: PUSH
37487: LD_VAR 0 7
37491: PUSH
37492: LD_VAR 0 5
37496: PUSH
37497: LD_INT 1
37499: MINUS
37500: ARRAY
37501: PPUSH
37502: LD_VAR 0 2
37506: PUSH
37507: LD_VAR 0 5
37511: PUSH
37512: LD_INT 1
37514: MINUS
37515: ARRAY
37516: PPUSH
37517: LD_VAR 0 7
37521: PUSH
37522: LD_VAR 0 5
37526: ARRAY
37527: PPUSH
37528: CALL_OW 1
37532: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37533: LD_ADDR_VAR 0 7
37537: PUSH
37538: LD_VAR 0 7
37542: PPUSH
37543: LD_VAR 0 5
37547: PUSH
37548: LD_INT 1
37550: MINUS
37551: PPUSH
37552: LD_VAR 0 6
37556: PPUSH
37557: CALL_OW 1
37561: ST_TO_ADDR
// end ;
37562: GO 37479
37564: POP
37565: POP
// result := s_arr [ 1 ] ;
37566: LD_ADDR_VAR 0 4
37570: PUSH
37571: LD_VAR 0 7
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: ST_TO_ADDR
// end ; end ;
37580: LD_VAR 0 4
37584: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37585: LD_INT 0
37587: PPUSH
37588: PPUSH
// if not list then
37589: LD_VAR 0 1
37593: NOT
37594: IFFALSE 37598
// exit ;
37596: GO 37689
// i := list [ pos1 ] ;
37598: LD_ADDR_VAR 0 5
37602: PUSH
37603: LD_VAR 0 1
37607: PUSH
37608: LD_VAR 0 2
37612: ARRAY
37613: ST_TO_ADDR
// if not i then
37614: LD_VAR 0 5
37618: NOT
37619: IFFALSE 37623
// exit ;
37621: GO 37689
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37623: LD_ADDR_VAR 0 1
37627: PUSH
37628: LD_VAR 0 1
37632: PPUSH
37633: LD_VAR 0 2
37637: PPUSH
37638: LD_VAR 0 1
37642: PUSH
37643: LD_VAR 0 3
37647: ARRAY
37648: PPUSH
37649: CALL_OW 1
37653: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37654: LD_ADDR_VAR 0 1
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: LD_VAR 0 3
37668: PPUSH
37669: LD_VAR 0 5
37673: PPUSH
37674: CALL_OW 1
37678: ST_TO_ADDR
// result := list ;
37679: LD_ADDR_VAR 0 4
37683: PUSH
37684: LD_VAR 0 1
37688: ST_TO_ADDR
// end ;
37689: LD_VAR 0 4
37693: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37694: LD_INT 0
37696: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37697: LD_ADDR_VAR 0 5
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 250
37711: PPUSH
37712: LD_VAR 0 1
37716: PPUSH
37717: CALL_OW 251
37721: PPUSH
37722: LD_VAR 0 2
37726: PPUSH
37727: LD_VAR 0 3
37731: PPUSH
37732: LD_VAR 0 4
37736: PPUSH
37737: CALL 38119 0 5
37741: ST_TO_ADDR
// end ;
37742: LD_VAR 0 5
37746: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37747: LD_INT 0
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
// if not list or not unit then
37753: LD_VAR 0 2
37757: NOT
37758: IFTRUE 37767
37760: PUSH
37761: LD_VAR 0 1
37765: NOT
37766: OR
37767: IFFALSE 37771
// exit ;
37769: GO 38114
// result := [ ] ;
37771: LD_ADDR_VAR 0 5
37775: PUSH
37776: EMPTY
37777: ST_TO_ADDR
// for i in list do
37778: LD_ADDR_VAR 0 6
37782: PUSH
37783: LD_VAR 0 2
37787: PUSH
37788: FOR_IN
37789: IFFALSE 38007
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37791: LD_ADDR_VAR 0 8
37795: PUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: LD_VAR 0 6
37805: PUSH
37806: LD_INT 1
37808: ARRAY
37809: PPUSH
37810: LD_VAR 0 6
37814: PUSH
37815: LD_INT 2
37817: ARRAY
37818: PPUSH
37819: CALL_OW 297
37823: ST_TO_ADDR
// if not Count ( result ) then
37824: LD_VAR 0 5
37828: PPUSH
37829: CALL 34341 0 1
37833: NOT
37834: IFFALSE 37867
// begin result := Join ( result , [ i , tmp ] ) ;
37836: LD_ADDR_VAR 0 5
37840: PUSH
37841: LD_VAR 0 5
37845: PPUSH
37846: LD_VAR 0 6
37850: PUSH
37851: LD_VAR 0 8
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PPUSH
37860: CALL 70317 0 2
37864: ST_TO_ADDR
// continue ;
37865: GO 37788
// end ; if result [ result ] [ 2 ] <= tmp then
37867: LD_VAR 0 5
37871: PUSH
37872: LD_VAR 0 5
37876: ARRAY
37877: PUSH
37878: LD_INT 2
37880: ARRAY
37881: PUSH
37882: LD_VAR 0 8
37886: LESSEQUAL
37887: IFFALSE 37920
// result := Join ( result , [ i , tmp ] ) else
37889: LD_ADDR_VAR 0 5
37893: PUSH
37894: LD_VAR 0 5
37898: PPUSH
37899: LD_VAR 0 6
37903: PUSH
37904: LD_VAR 0 8
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PPUSH
37913: CALL 70317 0 2
37917: ST_TO_ADDR
37918: GO 38005
// begin for j := 1 to Count ( result ) do
37920: LD_ADDR_VAR 0 7
37924: PUSH
37925: DOUBLE
37926: LD_INT 1
37928: DEC
37929: ST_TO_ADDR
37930: LD_VAR 0 5
37934: PPUSH
37935: CALL 34341 0 1
37939: PUSH
37940: FOR_TO
37941: IFFALSE 38003
// begin if tmp < result [ j ] [ 2 ] then
37943: LD_VAR 0 8
37947: PUSH
37948: LD_VAR 0 5
37952: PUSH
37953: LD_VAR 0 7
37957: ARRAY
37958: PUSH
37959: LD_INT 2
37961: ARRAY
37962: LESS
37963: IFFALSE 38001
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37965: LD_ADDR_VAR 0 5
37969: PUSH
37970: LD_VAR 0 5
37974: PPUSH
37975: LD_VAR 0 7
37979: PPUSH
37980: LD_VAR 0 6
37984: PUSH
37985: LD_VAR 0 8
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PPUSH
37994: CALL_OW 2
37998: ST_TO_ADDR
// break ;
37999: GO 38003
// end ; end ;
38001: GO 37940
38003: POP
38004: POP
// end ; end ;
38005: GO 37788
38007: POP
38008: POP
// if result and not asc then
38009: LD_VAR 0 5
38013: IFFALSE 38022
38015: PUSH
38016: LD_VAR 0 3
38020: NOT
38021: AND
38022: IFFALSE 38039
// result := ReverseArray ( result ) ;
38024: LD_ADDR_VAR 0 5
38028: PUSH
38029: LD_VAR 0 5
38033: PPUSH
38034: CALL 65397 0 1
38038: ST_TO_ADDR
// tmp := [ ] ;
38039: LD_ADDR_VAR 0 8
38043: PUSH
38044: EMPTY
38045: ST_TO_ADDR
// if mode then
38046: LD_VAR 0 4
38050: IFFALSE 38114
// begin for i := 1 to result do
38052: LD_ADDR_VAR 0 6
38056: PUSH
38057: DOUBLE
38058: LD_INT 1
38060: DEC
38061: ST_TO_ADDR
38062: LD_VAR 0 5
38066: PUSH
38067: FOR_TO
38068: IFFALSE 38102
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38070: LD_ADDR_VAR 0 8
38074: PUSH
38075: LD_VAR 0 8
38079: PPUSH
38080: LD_VAR 0 5
38084: PUSH
38085: LD_VAR 0 6
38089: ARRAY
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PPUSH
38095: CALL 70317 0 2
38099: ST_TO_ADDR
38100: GO 38067
38102: POP
38103: POP
// result := tmp ;
38104: LD_ADDR_VAR 0 5
38108: PUSH
38109: LD_VAR 0 8
38113: ST_TO_ADDR
// end ; end ;
38114: LD_VAR 0 5
38118: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38119: LD_INT 0
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
// if not list then
38125: LD_VAR 0 3
38129: NOT
38130: IFFALSE 38134
// exit ;
38132: GO 38524
// result := [ ] ;
38134: LD_ADDR_VAR 0 6
38138: PUSH
38139: EMPTY
38140: ST_TO_ADDR
// for i in list do
38141: LD_ADDR_VAR 0 7
38145: PUSH
38146: LD_VAR 0 3
38150: PUSH
38151: FOR_IN
38152: IFFALSE 38354
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38154: LD_ADDR_VAR 0 9
38158: PUSH
38159: LD_VAR 0 7
38163: PPUSH
38164: LD_VAR 0 1
38168: PPUSH
38169: LD_VAR 0 2
38173: PPUSH
38174: CALL_OW 297
38178: ST_TO_ADDR
// if not result then
38179: LD_VAR 0 6
38183: NOT
38184: IFFALSE 38210
// result := [ [ i , tmp ] ] else
38186: LD_ADDR_VAR 0 6
38190: PUSH
38191: LD_VAR 0 7
38195: PUSH
38196: LD_VAR 0 9
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: ST_TO_ADDR
38208: GO 38352
// begin if result [ result ] [ 2 ] <= tmp then
38210: LD_VAR 0 6
38214: PUSH
38215: LD_VAR 0 6
38219: ARRAY
38220: PUSH
38221: LD_INT 2
38223: ARRAY
38224: PUSH
38225: LD_VAR 0 9
38229: LESSEQUAL
38230: IFFALSE 38272
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38232: LD_ADDR_VAR 0 6
38236: PUSH
38237: LD_VAR 0 6
38241: PPUSH
38242: LD_VAR 0 6
38246: PUSH
38247: LD_INT 1
38249: PLUS
38250: PPUSH
38251: LD_VAR 0 7
38255: PUSH
38256: LD_VAR 0 9
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PPUSH
38265: CALL_OW 2
38269: ST_TO_ADDR
38270: GO 38352
// for j := 1 to result do
38272: LD_ADDR_VAR 0 8
38276: PUSH
38277: DOUBLE
38278: LD_INT 1
38280: DEC
38281: ST_TO_ADDR
38282: LD_VAR 0 6
38286: PUSH
38287: FOR_TO
38288: IFFALSE 38350
// begin if tmp < result [ j ] [ 2 ] then
38290: LD_VAR 0 9
38294: PUSH
38295: LD_VAR 0 6
38299: PUSH
38300: LD_VAR 0 8
38304: ARRAY
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: LESS
38310: IFFALSE 38348
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38312: LD_ADDR_VAR 0 6
38316: PUSH
38317: LD_VAR 0 6
38321: PPUSH
38322: LD_VAR 0 8
38326: PPUSH
38327: LD_VAR 0 7
38331: PUSH
38332: LD_VAR 0 9
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PPUSH
38341: CALL_OW 2
38345: ST_TO_ADDR
// break ;
38346: GO 38350
// end ; end ;
38348: GO 38287
38350: POP
38351: POP
// end ; end ;
38352: GO 38151
38354: POP
38355: POP
// if result and not asc then
38356: LD_VAR 0 6
38360: IFFALSE 38369
38362: PUSH
38363: LD_VAR 0 4
38367: NOT
38368: AND
38369: IFFALSE 38444
// begin tmp := result ;
38371: LD_ADDR_VAR 0 9
38375: PUSH
38376: LD_VAR 0 6
38380: ST_TO_ADDR
// for i = tmp downto 1 do
38381: LD_ADDR_VAR 0 7
38385: PUSH
38386: DOUBLE
38387: LD_VAR 0 9
38391: INC
38392: ST_TO_ADDR
38393: LD_INT 1
38395: PUSH
38396: FOR_DOWNTO
38397: IFFALSE 38442
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38399: LD_ADDR_VAR 0 6
38403: PUSH
38404: LD_VAR 0 6
38408: PPUSH
38409: LD_VAR 0 9
38413: PUSH
38414: LD_VAR 0 7
38418: MINUS
38419: PUSH
38420: LD_INT 1
38422: PLUS
38423: PPUSH
38424: LD_VAR 0 9
38428: PUSH
38429: LD_VAR 0 7
38433: ARRAY
38434: PPUSH
38435: CALL_OW 1
38439: ST_TO_ADDR
38440: GO 38396
38442: POP
38443: POP
// end ; tmp := [ ] ;
38444: LD_ADDR_VAR 0 9
38448: PUSH
38449: EMPTY
38450: ST_TO_ADDR
// if mode then
38451: LD_VAR 0 5
38455: IFFALSE 38524
// begin for i = 1 to result do
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: DOUBLE
38463: LD_INT 1
38465: DEC
38466: ST_TO_ADDR
38467: LD_VAR 0 6
38471: PUSH
38472: FOR_TO
38473: IFFALSE 38512
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38475: LD_ADDR_VAR 0 9
38479: PUSH
38480: LD_VAR 0 9
38484: PPUSH
38485: LD_VAR 0 7
38489: PPUSH
38490: LD_VAR 0 6
38494: PUSH
38495: LD_VAR 0 7
38499: ARRAY
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: PPUSH
38505: CALL_OW 1
38509: ST_TO_ADDR
38510: GO 38472
38512: POP
38513: POP
// result := tmp ;
38514: LD_ADDR_VAR 0 6
38518: PUSH
38519: LD_VAR 0 9
38523: ST_TO_ADDR
// end ; end ;
38524: LD_VAR 0 6
38528: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38529: LD_INT 0
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38537: LD_ADDR_VAR 0 5
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: EMPTY
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if not x or not y then
38559: LD_VAR 0 2
38563: NOT
38564: IFTRUE 38573
38566: PUSH
38567: LD_VAR 0 3
38571: NOT
38572: OR
38573: IFFALSE 38577
// exit ;
38575: GO 40233
// if not range then
38577: LD_VAR 0 4
38581: NOT
38582: IFFALSE 38592
// range := 10 ;
38584: LD_ADDR_VAR 0 4
38588: PUSH
38589: LD_INT 10
38591: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38592: LD_ADDR_VAR 0 8
38596: PUSH
38597: LD_INT 81
38599: PUSH
38600: LD_VAR 0 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 92
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_VAR 0 3
38621: PUSH
38622: LD_VAR 0 4
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: LD_INT 21
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: PPUSH
38655: CALL_OW 69
38659: ST_TO_ADDR
// if not tmp then
38660: LD_VAR 0 8
38664: NOT
38665: IFFALSE 38669
// exit ;
38667: GO 40233
// for i in tmp do
38669: LD_ADDR_VAR 0 6
38673: PUSH
38674: LD_VAR 0 8
38678: PUSH
38679: FOR_IN
38680: IFFALSE 40208
// begin points := [ 0 , 0 , 0 ] ;
38682: LD_ADDR_VAR 0 9
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// bpoints := 1 ;
38701: LD_ADDR_VAR 0 10
38705: PUSH
38706: LD_INT 1
38708: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38709: LD_VAR 0 6
38713: PPUSH
38714: CALL_OW 247
38718: PUSH
38719: LD_INT 1
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 39309
38727: POP
// begin if GetClass ( i ) = 1 then
38728: LD_VAR 0 6
38732: PPUSH
38733: CALL_OW 257
38737: PUSH
38738: LD_INT 1
38740: EQUAL
38741: IFFALSE 38762
// points := [ 10 , 5 , 3 ] ;
38743: LD_ADDR_VAR 0 9
38747: PUSH
38748: LD_INT 10
38750: PUSH
38751: LD_INT 5
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38762: LD_VAR 0 6
38766: PPUSH
38767: CALL_OW 257
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: IN
38786: IFFALSE 38807
// points := [ 3 , 2 , 1 ] ;
38788: LD_ADDR_VAR 0 9
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38807: LD_VAR 0 6
38811: PPUSH
38812: CALL_OW 257
38816: PUSH
38817: LD_INT 5
38819: EQUAL
38820: IFFALSE 38841
// points := [ 130 , 5 , 2 ] ;
38822: LD_ADDR_VAR 0 9
38826: PUSH
38827: LD_INT 130
38829: PUSH
38830: LD_INT 5
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38841: LD_VAR 0 6
38845: PPUSH
38846: CALL_OW 257
38850: PUSH
38851: LD_INT 8
38853: EQUAL
38854: IFFALSE 38875
// points := [ 35 , 35 , 30 ] ;
38856: LD_ADDR_VAR 0 9
38860: PUSH
38861: LD_INT 35
38863: PUSH
38864: LD_INT 35
38866: PUSH
38867: LD_INT 30
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38875: LD_VAR 0 6
38879: PPUSH
38880: CALL_OW 257
38884: PUSH
38885: LD_INT 9
38887: EQUAL
38888: IFFALSE 38909
// points := [ 20 , 55 , 40 ] ;
38890: LD_ADDR_VAR 0 9
38894: PUSH
38895: LD_INT 20
38897: PUSH
38898: LD_INT 55
38900: PUSH
38901: LD_INT 40
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38909: LD_VAR 0 6
38913: PPUSH
38914: CALL_OW 257
38918: PUSH
38919: LD_INT 12
38921: PUSH
38922: LD_INT 16
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: IN
38929: IFFALSE 38950
// points := [ 5 , 3 , 2 ] ;
38931: LD_ADDR_VAR 0 9
38935: PUSH
38936: LD_INT 5
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38950: LD_VAR 0 6
38954: PPUSH
38955: CALL_OW 257
38959: PUSH
38960: LD_INT 17
38962: EQUAL
38963: IFFALSE 38984
// points := [ 100 , 50 , 75 ] ;
38965: LD_ADDR_VAR 0 9
38969: PUSH
38970: LD_INT 100
38972: PUSH
38973: LD_INT 50
38975: PUSH
38976: LD_INT 75
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38984: LD_VAR 0 6
38988: PPUSH
38989: CALL_OW 257
38993: PUSH
38994: LD_INT 15
38996: EQUAL
38997: IFFALSE 39018
// points := [ 10 , 5 , 3 ] ;
38999: LD_ADDR_VAR 0 9
39003: PUSH
39004: LD_INT 10
39006: PUSH
39007: LD_INT 5
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39018: LD_VAR 0 6
39022: PPUSH
39023: CALL_OW 257
39027: PUSH
39028: LD_INT 14
39030: EQUAL
39031: IFFALSE 39052
// points := [ 10 , 0 , 0 ] ;
39033: LD_ADDR_VAR 0 9
39037: PUSH
39038: LD_INT 10
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39052: LD_VAR 0 6
39056: PPUSH
39057: CALL_OW 257
39061: PUSH
39062: LD_INT 11
39064: EQUAL
39065: IFFALSE 39086
// points := [ 30 , 10 , 5 ] ;
39067: LD_ADDR_VAR 0 9
39071: PUSH
39072: LD_INT 30
39074: PUSH
39075: LD_INT 10
39077: PUSH
39078: LD_INT 5
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_INT 5
39093: PPUSH
39094: CALL_OW 321
39098: PUSH
39099: LD_INT 2
39101: EQUAL
39102: IFFALSE 39119
// bpoints := bpoints * 1.8 ;
39104: LD_ADDR_VAR 0 10
39108: PUSH
39109: LD_VAR 0 10
39113: PUSH
39114: LD_REAL  1.80000000000000E+0000
39117: MUL
39118: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39119: LD_VAR 0 6
39123: PPUSH
39124: CALL_OW 257
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 3
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: IN
39147: IFFALSE 39167
39149: PUSH
39150: LD_VAR 0 1
39154: PPUSH
39155: LD_INT 51
39157: PPUSH
39158: CALL_OW 321
39162: PUSH
39163: LD_INT 2
39165: EQUAL
39166: AND
39167: IFFALSE 39184
// bpoints := bpoints * 1.2 ;
39169: LD_ADDR_VAR 0 10
39173: PUSH
39174: LD_VAR 0 10
39178: PUSH
39179: LD_REAL  1.20000000000000E+0000
39182: MUL
39183: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39184: LD_VAR 0 6
39188: PPUSH
39189: CALL_OW 257
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 7
39199: PUSH
39200: LD_INT 9
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: IN
39208: IFFALSE 39228
39210: PUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: LD_INT 52
39218: PPUSH
39219: CALL_OW 321
39223: PUSH
39224: LD_INT 2
39226: EQUAL
39227: AND
39228: IFFALSE 39245
// bpoints := bpoints * 1.5 ;
39230: LD_ADDR_VAR 0 10
39234: PUSH
39235: LD_VAR 0 10
39239: PUSH
39240: LD_REAL  1.50000000000000E+0000
39243: MUL
39244: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39245: LD_VAR 0 1
39249: PPUSH
39250: LD_INT 66
39252: PPUSH
39253: CALL_OW 321
39257: PUSH
39258: LD_INT 2
39260: EQUAL
39261: IFFALSE 39278
// bpoints := bpoints * 1.1 ;
39263: LD_ADDR_VAR 0 10
39267: PUSH
39268: LD_VAR 0 10
39272: PUSH
39273: LD_REAL  1.10000000000000E+0000
39276: MUL
39277: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39278: LD_ADDR_VAR 0 10
39282: PUSH
39283: LD_VAR 0 10
39287: PUSH
39288: LD_VAR 0 6
39292: PPUSH
39293: LD_INT 1
39295: PPUSH
39296: CALL_OW 259
39300: PUSH
39301: LD_REAL  1.15000000000000E+0000
39304: MUL
39305: MUL
39306: ST_TO_ADDR
// end ; unit_vehicle :
39307: GO 40137
39309: LD_INT 2
39311: DOUBLE
39312: EQUAL
39313: IFTRUE 39317
39315: GO 40125
39317: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 264
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: LD_INT 42
39333: PUSH
39334: LD_INT 24
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: IN
39342: IFFALSE 39363
// points := [ 25 , 5 , 3 ] ;
39344: LD_ADDR_VAR 0 9
39348: PUSH
39349: LD_INT 25
39351: PUSH
39352: LD_INT 5
39354: PUSH
39355: LD_INT 3
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39363: LD_VAR 0 6
39367: PPUSH
39368: CALL_OW 264
39372: PUSH
39373: LD_INT 4
39375: PUSH
39376: LD_INT 43
39378: PUSH
39379: LD_INT 25
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: IN
39387: IFFALSE 39408
// points := [ 40 , 15 , 5 ] ;
39389: LD_ADDR_VAR 0 9
39393: PUSH
39394: LD_INT 40
39396: PUSH
39397: LD_INT 15
39399: PUSH
39400: LD_INT 5
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39408: LD_VAR 0 6
39412: PPUSH
39413: CALL_OW 264
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: LD_INT 23
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: IN
39428: IFFALSE 39449
// points := [ 7 , 25 , 8 ] ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_INT 7
39437: PUSH
39438: LD_INT 25
39440: PUSH
39441: LD_INT 8
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39449: LD_VAR 0 6
39453: PPUSH
39454: CALL_OW 264
39458: PUSH
39459: LD_INT 5
39461: PUSH
39462: LD_INT 27
39464: PUSH
39465: LD_INT 44
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: IN
39473: IFFALSE 39494
// points := [ 14 , 50 , 16 ] ;
39475: LD_ADDR_VAR 0 9
39479: PUSH
39480: LD_INT 14
39482: PUSH
39483: LD_INT 50
39485: PUSH
39486: LD_INT 16
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39494: LD_VAR 0 6
39498: PPUSH
39499: CALL_OW 264
39503: PUSH
39504: LD_INT 6
39506: PUSH
39507: LD_INT 46
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: IN
39514: IFFALSE 39535
// points := [ 32 , 120 , 70 ] ;
39516: LD_ADDR_VAR 0 9
39520: PUSH
39521: LD_INT 32
39523: PUSH
39524: LD_INT 120
39526: PUSH
39527: LD_INT 70
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39535: LD_VAR 0 6
39539: PPUSH
39540: CALL_OW 264
39544: PUSH
39545: LD_INT 7
39547: PUSH
39548: LD_INT 28
39550: PUSH
39551: LD_INT 45
39553: PUSH
39554: LD_INT 92
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: IN
39563: IFFALSE 39584
// points := [ 35 , 20 , 45 ] ;
39565: LD_ADDR_VAR 0 9
39569: PUSH
39570: LD_INT 35
39572: PUSH
39573: LD_INT 20
39575: PUSH
39576: LD_INT 45
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39584: LD_VAR 0 6
39588: PPUSH
39589: CALL_OW 264
39593: PUSH
39594: LD_INT 47
39596: PUSH
39597: EMPTY
39598: LIST
39599: IN
39600: IFFALSE 39621
// points := [ 67 , 45 , 75 ] ;
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_INT 67
39609: PUSH
39610: LD_INT 45
39612: PUSH
39613: LD_INT 75
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39621: LD_VAR 0 6
39625: PPUSH
39626: CALL_OW 264
39630: PUSH
39631: LD_INT 26
39633: PUSH
39634: EMPTY
39635: LIST
39636: IN
39637: IFFALSE 39658
// points := [ 120 , 30 , 80 ] ;
39639: LD_ADDR_VAR 0 9
39643: PUSH
39644: LD_INT 120
39646: PUSH
39647: LD_INT 30
39649: PUSH
39650: LD_INT 80
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39658: LD_VAR 0 6
39662: PPUSH
39663: CALL_OW 264
39667: PUSH
39668: LD_INT 22
39670: PUSH
39671: EMPTY
39672: LIST
39673: IN
39674: IFFALSE 39695
// points := [ 40 , 1 , 1 ] ;
39676: LD_ADDR_VAR 0 9
39680: PUSH
39681: LD_INT 40
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39695: LD_VAR 0 6
39699: PPUSH
39700: CALL_OW 264
39704: PUSH
39705: LD_INT 29
39707: PUSH
39708: EMPTY
39709: LIST
39710: IN
39711: IFFALSE 39732
// points := [ 70 , 200 , 400 ] ;
39713: LD_ADDR_VAR 0 9
39717: PUSH
39718: LD_INT 70
39720: PUSH
39721: LD_INT 200
39723: PUSH
39724: LD_INT 400
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39732: LD_VAR 0 6
39736: PPUSH
39737: CALL_OW 264
39741: PUSH
39742: LD_INT 14
39744: PUSH
39745: LD_INT 53
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: IN
39752: IFFALSE 39773
// points := [ 40 , 10 , 20 ] ;
39754: LD_ADDR_VAR 0 9
39758: PUSH
39759: LD_INT 40
39761: PUSH
39762: LD_INT 10
39764: PUSH
39765: LD_INT 20
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39773: LD_VAR 0 6
39777: PPUSH
39778: CALL_OW 264
39782: PUSH
39783: LD_INT 9
39785: PUSH
39786: EMPTY
39787: LIST
39788: IN
39789: IFFALSE 39810
// points := [ 5 , 70 , 20 ] ;
39791: LD_ADDR_VAR 0 9
39795: PUSH
39796: LD_INT 5
39798: PUSH
39799: LD_INT 70
39801: PUSH
39802: LD_INT 20
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39810: LD_VAR 0 6
39814: PPUSH
39815: CALL_OW 264
39819: PUSH
39820: LD_INT 10
39822: PUSH
39823: EMPTY
39824: LIST
39825: IN
39826: IFFALSE 39847
// points := [ 35 , 110 , 70 ] ;
39828: LD_ADDR_VAR 0 9
39832: PUSH
39833: LD_INT 35
39835: PUSH
39836: LD_INT 110
39838: PUSH
39839: LD_INT 70
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39847: LD_VAR 0 6
39851: PPUSH
39852: CALL_OW 265
39856: PUSH
39857: LD_INT 25
39859: EQUAL
39860: IFFALSE 39881
// points := [ 80 , 65 , 100 ] ;
39862: LD_ADDR_VAR 0 9
39866: PUSH
39867: LD_INT 80
39869: PUSH
39870: LD_INT 65
39872: PUSH
39873: LD_INT 100
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39881: LD_VAR 0 6
39885: PPUSH
39886: CALL_OW 263
39890: PUSH
39891: LD_INT 1
39893: EQUAL
39894: IFFALSE 39929
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39896: LD_ADDR_VAR 0 10
39900: PUSH
39901: LD_VAR 0 10
39905: PUSH
39906: LD_VAR 0 6
39910: PPUSH
39911: CALL_OW 311
39915: PPUSH
39916: LD_INT 3
39918: PPUSH
39919: CALL_OW 259
39923: PUSH
39924: LD_INT 4
39926: MUL
39927: MUL
39928: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39929: LD_VAR 0 6
39933: PPUSH
39934: CALL_OW 263
39938: PUSH
39939: LD_INT 2
39941: EQUAL
39942: IFFALSE 39993
// begin j := IsControledBy ( i ) ;
39944: LD_ADDR_VAR 0 7
39948: PUSH
39949: LD_VAR 0 6
39953: PPUSH
39954: CALL_OW 312
39958: ST_TO_ADDR
// if j then
39959: LD_VAR 0 7
39963: IFFALSE 39993
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39965: LD_ADDR_VAR 0 10
39969: PUSH
39970: LD_VAR 0 10
39974: PUSH
39975: LD_VAR 0 7
39979: PPUSH
39980: LD_INT 3
39982: PPUSH
39983: CALL_OW 259
39987: PUSH
39988: LD_INT 3
39990: MUL
39991: MUL
39992: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39993: LD_VAR 0 6
39997: PPUSH
39998: CALL_OW 264
40002: PUSH
40003: LD_INT 5
40005: PUSH
40006: LD_INT 6
40008: PUSH
40009: LD_INT 46
40011: PUSH
40012: LD_INT 44
40014: PUSH
40015: LD_INT 47
40017: PUSH
40018: LD_INT 45
40020: PUSH
40021: LD_INT 28
40023: PUSH
40024: LD_INT 7
40026: PUSH
40027: LD_INT 27
40029: PUSH
40030: LD_INT 29
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: IN
40045: IFFALSE 40065
40047: PUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_INT 52
40055: PPUSH
40056: CALL_OW 321
40060: PUSH
40061: LD_INT 2
40063: EQUAL
40064: AND
40065: IFFALSE 40082
// bpoints := bpoints * 1.2 ;
40067: LD_ADDR_VAR 0 10
40071: PUSH
40072: LD_VAR 0 10
40076: PUSH
40077: LD_REAL  1.20000000000000E+0000
40080: MUL
40081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40082: LD_VAR 0 6
40086: PPUSH
40087: CALL_OW 264
40091: PUSH
40092: LD_INT 6
40094: PUSH
40095: LD_INT 46
40097: PUSH
40098: LD_INT 47
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: IN
40106: IFFALSE 40123
// bpoints := bpoints * 1.2 ;
40108: LD_ADDR_VAR 0 10
40112: PUSH
40113: LD_VAR 0 10
40117: PUSH
40118: LD_REAL  1.20000000000000E+0000
40121: MUL
40122: ST_TO_ADDR
// end ; unit_building :
40123: GO 40137
40125: LD_INT 3
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40136
40133: POP
// ; end ;
40134: GO 40137
40136: POP
// for j = 1 to 3 do
40137: LD_ADDR_VAR 0 7
40141: PUSH
40142: DOUBLE
40143: LD_INT 1
40145: DEC
40146: ST_TO_ADDR
40147: LD_INT 3
40149: PUSH
40150: FOR_TO
40151: IFFALSE 40204
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40153: LD_ADDR_VAR 0 5
40157: PUSH
40158: LD_VAR 0 5
40162: PPUSH
40163: LD_VAR 0 7
40167: PPUSH
40168: LD_VAR 0 5
40172: PUSH
40173: LD_VAR 0 7
40177: ARRAY
40178: PUSH
40179: LD_VAR 0 9
40183: PUSH
40184: LD_VAR 0 7
40188: ARRAY
40189: PUSH
40190: LD_VAR 0 10
40194: MUL
40195: PLUS
40196: PPUSH
40197: CALL_OW 1
40201: ST_TO_ADDR
40202: GO 40150
40204: POP
40205: POP
// end ;
40206: GO 38679
40208: POP
40209: POP
// result := Replace ( result , 4 , tmp ) ;
40210: LD_ADDR_VAR 0 5
40214: PUSH
40215: LD_VAR 0 5
40219: PPUSH
40220: LD_INT 4
40222: PPUSH
40223: LD_VAR 0 8
40227: PPUSH
40228: CALL_OW 1
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 5
40237: RET
// export function DangerAtRange ( unit , range ) ; begin
40238: LD_INT 0
40240: PPUSH
// if not unit then
40241: LD_VAR 0 1
40245: NOT
40246: IFFALSE 40250
// exit ;
40248: GO 40295
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 255
40264: PPUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 250
40274: PPUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 251
40284: PPUSH
40285: LD_VAR 0 2
40289: PPUSH
40290: CALL 38529 0 4
40294: ST_TO_ADDR
// end ;
40295: LD_VAR 0 3
40299: RET
// export function DangerInArea ( side , area ) ; begin
40300: LD_INT 0
40302: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_VAR 0 2
40312: PPUSH
40313: LD_INT 81
40315: PUSH
40316: LD_VAR 0 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PPUSH
40325: CALL_OW 70
40329: ST_TO_ADDR
// end ;
40330: LD_VAR 0 3
40334: RET
// export function IsExtension ( b ) ; begin
40335: LD_INT 0
40337: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40338: LD_ADDR_VAR 0 2
40342: PUSH
40343: LD_VAR 0 1
40347: PUSH
40348: LD_INT 23
40350: PUSH
40351: LD_INT 20
40353: PUSH
40354: LD_INT 22
40356: PUSH
40357: LD_INT 17
40359: PUSH
40360: LD_INT 24
40362: PUSH
40363: LD_INT 21
40365: PUSH
40366: LD_INT 19
40368: PUSH
40369: LD_INT 16
40371: PUSH
40372: LD_INT 25
40374: PUSH
40375: LD_INT 18
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: IN
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 2
40395: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
// result := [ ] ;
40401: LD_ADDR_VAR 0 4
40405: PUSH
40406: EMPTY
40407: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40408: LD_ADDR_VAR 0 5
40412: PUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PPUSH
40428: CALL_OW 70
40432: ST_TO_ADDR
// if not tmp then
40433: LD_VAR 0 5
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 40506
// if checkLink then
40442: LD_VAR 0 3
40446: IFFALSE 40496
// begin for i in tmp do
40448: LD_ADDR_VAR 0 6
40452: PUSH
40453: LD_VAR 0 5
40457: PUSH
40458: FOR_IN
40459: IFFALSE 40494
// if GetBase ( i ) <> base then
40461: LD_VAR 0 6
40465: PPUSH
40466: CALL_OW 274
40470: PUSH
40471: LD_VAR 0 1
40475: NONEQUAL
40476: IFFALSE 40492
// ComLinkToBase ( base , i ) ;
40478: LD_VAR 0 1
40482: PPUSH
40483: LD_VAR 0 6
40487: PPUSH
40488: CALL_OW 169
40492: GO 40458
40494: POP
40495: POP
// end ; result := tmp ;
40496: LD_ADDR_VAR 0 4
40500: PUSH
40501: LD_VAR 0 5
40505: ST_TO_ADDR
// end ;
40506: LD_VAR 0 4
40510: RET
// export function ComComplete ( units , b ) ; var i ; begin
40511: LD_INT 0
40513: PPUSH
40514: PPUSH
// if not units then
40515: LD_VAR 0 1
40519: NOT
40520: IFFALSE 40524
// exit ;
40522: GO 40614
// for i in units do
40524: LD_ADDR_VAR 0 4
40528: PUSH
40529: LD_VAR 0 1
40533: PUSH
40534: FOR_IN
40535: IFFALSE 40612
// if BuildingStatus ( b ) = bs_build then
40537: LD_VAR 0 2
40541: PPUSH
40542: CALL_OW 461
40546: PUSH
40547: LD_INT 1
40549: EQUAL
40550: IFFALSE 40610
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40552: LD_VAR 0 4
40556: PPUSH
40557: LD_STRING h
40559: PUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: CALL_OW 250
40569: PUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: CALL_OW 251
40579: PUSH
40580: LD_VAR 0 2
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: PPUSH
40606: CALL_OW 446
40610: GO 40534
40612: POP
40613: POP
// end ;
40614: LD_VAR 0 3
40618: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40619: LD_INT 0
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40627: LD_VAR 0 1
40631: NOT
40632: IFTRUE 40649
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 263
40644: PUSH
40645: LD_INT 2
40647: NONEQUAL
40648: OR
40649: IFFALSE 40653
// exit ;
40651: GO 40969
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40653: LD_ADDR_VAR 0 6
40657: PUSH
40658: LD_INT 22
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 255
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 30
40680: PUSH
40681: LD_INT 36
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 34
40690: PUSH
40691: LD_INT 31
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PPUSH
40707: CALL_OW 69
40711: ST_TO_ADDR
// if not tmp then
40712: LD_VAR 0 6
40716: NOT
40717: IFFALSE 40721
// exit ;
40719: GO 40969
// result := [ ] ;
40721: LD_ADDR_VAR 0 2
40725: PUSH
40726: EMPTY
40727: ST_TO_ADDR
// for i in tmp do
40728: LD_ADDR_VAR 0 3
40732: PUSH
40733: LD_VAR 0 6
40737: PUSH
40738: FOR_IN
40739: IFFALSE 40810
// begin t := UnitsInside ( i ) ;
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_VAR 0 3
40750: PPUSH
40751: CALL_OW 313
40755: ST_TO_ADDR
// if t then
40756: LD_VAR 0 4
40760: IFFALSE 40808
// for j in t do
40762: LD_ADDR_VAR 0 7
40766: PUSH
40767: LD_VAR 0 4
40771: PUSH
40772: FOR_IN
40773: IFFALSE 40806
// result := Replace ( result , result + 1 , j ) ;
40775: LD_ADDR_VAR 0 2
40779: PUSH
40780: LD_VAR 0 2
40784: PPUSH
40785: LD_VAR 0 2
40789: PUSH
40790: LD_INT 1
40792: PLUS
40793: PPUSH
40794: LD_VAR 0 7
40798: PPUSH
40799: CALL_OW 1
40803: ST_TO_ADDR
40804: GO 40772
40806: POP
40807: POP
// end ;
40808: GO 40738
40810: POP
40811: POP
// if not result then
40812: LD_VAR 0 2
40816: NOT
40817: IFFALSE 40821
// exit ;
40819: GO 40969
// mech := result [ 1 ] ;
40821: LD_ADDR_VAR 0 5
40825: PUSH
40826: LD_VAR 0 2
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: ST_TO_ADDR
// if result > 1 then
40835: LD_VAR 0 2
40839: PUSH
40840: LD_INT 1
40842: GREATER
40843: IFFALSE 40955
// begin for i = 2 to result do
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: DOUBLE
40851: LD_INT 2
40853: DEC
40854: ST_TO_ADDR
40855: LD_VAR 0 2
40859: PUSH
40860: FOR_TO
40861: IFFALSE 40953
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40863: LD_ADDR_VAR 0 4
40867: PUSH
40868: LD_VAR 0 2
40872: PUSH
40873: LD_VAR 0 3
40877: ARRAY
40878: PPUSH
40879: LD_INT 3
40881: PPUSH
40882: CALL_OW 259
40886: PUSH
40887: LD_VAR 0 2
40891: PUSH
40892: LD_VAR 0 3
40896: ARRAY
40897: PPUSH
40898: CALL_OW 432
40902: MINUS
40903: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40904: LD_VAR 0 4
40908: PUSH
40909: LD_VAR 0 5
40913: PPUSH
40914: LD_INT 3
40916: PPUSH
40917: CALL_OW 259
40921: PUSH
40922: LD_VAR 0 5
40926: PPUSH
40927: CALL_OW 432
40931: MINUS
40932: GREATEREQUAL
40933: IFFALSE 40951
// mech := result [ i ] ;
40935: LD_ADDR_VAR 0 5
40939: PUSH
40940: LD_VAR 0 2
40944: PUSH
40945: LD_VAR 0 3
40949: ARRAY
40950: ST_TO_ADDR
// end ;
40951: GO 40860
40953: POP
40954: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40955: LD_VAR 0 1
40959: PPUSH
40960: LD_VAR 0 5
40964: PPUSH
40965: CALL_OW 135
// end ;
40969: LD_VAR 0 2
40973: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
// result := [ ] ;
40989: LD_ADDR_VAR 0 7
40993: PUSH
40994: EMPTY
40995: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40996: LD_VAR 0 1
41000: PPUSH
41001: CALL_OW 266
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: IN
41016: NOT
41017: IFFALSE 41021
// exit ;
41019: GO 42661
// if name then
41021: LD_VAR 0 3
41025: IFFALSE 41041
// SetBName ( base_dep , name ) ;
41027: LD_VAR 0 1
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: CALL_OW 500
// base := GetBase ( base_dep ) ;
41041: LD_ADDR_VAR 0 15
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 274
41055: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41056: LD_ADDR_VAR 0 16
41060: PUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 255
41070: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41071: LD_ADDR_VAR 0 17
41075: PUSH
41076: LD_VAR 0 1
41080: PPUSH
41081: CALL_OW 248
41085: ST_TO_ADDR
// if sources then
41086: LD_VAR 0 5
41090: IFFALSE 41137
// for i = 1 to 3 do
41092: LD_ADDR_VAR 0 8
41096: PUSH
41097: DOUBLE
41098: LD_INT 1
41100: DEC
41101: ST_TO_ADDR
41102: LD_INT 3
41104: PUSH
41105: FOR_TO
41106: IFFALSE 41135
// AddResourceType ( base , i , sources [ i ] ) ;
41108: LD_VAR 0 15
41112: PPUSH
41113: LD_VAR 0 8
41117: PPUSH
41118: LD_VAR 0 5
41122: PUSH
41123: LD_VAR 0 8
41127: ARRAY
41128: PPUSH
41129: CALL_OW 276
41133: GO 41105
41135: POP
41136: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41137: LD_ADDR_VAR 0 18
41141: PUSH
41142: LD_VAR 0 15
41146: PPUSH
41147: LD_VAR 0 2
41151: PPUSH
41152: LD_INT 1
41154: PPUSH
41155: CALL 40396 0 3
41159: ST_TO_ADDR
// InitHc ;
41160: CALL_OW 19
// InitUc ;
41164: CALL_OW 18
// uc_side := side ;
41168: LD_ADDR_OWVAR 20
41172: PUSH
41173: LD_VAR 0 16
41177: ST_TO_ADDR
// uc_nation := nation ;
41178: LD_ADDR_OWVAR 21
41182: PUSH
41183: LD_VAR 0 17
41187: ST_TO_ADDR
// if buildings then
41188: LD_VAR 0 18
41192: IFFALSE 42520
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41194: LD_ADDR_VAR 0 19
41198: PUSH
41199: LD_VAR 0 18
41203: PPUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 30
41209: PUSH
41210: LD_INT 29
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 30
41219: PUSH
41220: LD_INT 30
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: PPUSH
41232: CALL_OW 72
41236: ST_TO_ADDR
// if tmp then
41237: LD_VAR 0 19
41241: IFFALSE 41289
// for i in tmp do
41243: LD_ADDR_VAR 0 8
41247: PUSH
41248: LD_VAR 0 19
41252: PUSH
41253: FOR_IN
41254: IFFALSE 41287
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41256: LD_VAR 0 8
41260: PPUSH
41261: CALL_OW 250
41265: PPUSH
41266: LD_VAR 0 8
41270: PPUSH
41271: CALL_OW 251
41275: PPUSH
41276: LD_VAR 0 16
41280: PPUSH
41281: CALL_OW 441
41285: GO 41253
41287: POP
41288: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41289: LD_VAR 0 18
41293: PPUSH
41294: LD_INT 2
41296: PUSH
41297: LD_INT 30
41299: PUSH
41300: LD_INT 32
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 30
41309: PUSH
41310: LD_INT 33
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: PPUSH
41322: CALL_OW 72
41326: IFFALSE 41414
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41328: LD_ADDR_VAR 0 8
41332: PUSH
41333: LD_VAR 0 18
41337: PPUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 30
41343: PUSH
41344: LD_INT 32
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 30
41353: PUSH
41354: LD_INT 33
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: PPUSH
41366: CALL_OW 72
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41412
// begin if not GetBWeapon ( i ) then
41374: LD_VAR 0 8
41378: PPUSH
41379: CALL_OW 269
41383: NOT
41384: IFFALSE 41410
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41386: LD_VAR 0 8
41390: PPUSH
41391: LD_VAR 0 8
41395: PPUSH
41396: LD_VAR 0 2
41400: PPUSH
41401: CALL 42666 0 2
41405: PPUSH
41406: CALL_OW 431
// end ;
41410: GO 41371
41412: POP
41413: POP
// end ; for i = 1 to personel do
41414: LD_ADDR_VAR 0 8
41418: PUSH
41419: DOUBLE
41420: LD_INT 1
41422: DEC
41423: ST_TO_ADDR
41424: LD_VAR 0 6
41428: PUSH
41429: FOR_TO
41430: IFFALSE 42500
// begin if i > 4 then
41432: LD_VAR 0 8
41436: PUSH
41437: LD_INT 4
41439: GREATER
41440: IFFALSE 41444
// break ;
41442: GO 42500
// case i of 1 :
41444: LD_VAR 0 8
41448: PUSH
41449: LD_INT 1
41451: DOUBLE
41452: EQUAL
41453: IFTRUE 41457
41455: GO 41537
41457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41458: LD_ADDR_VAR 0 12
41462: PUSH
41463: LD_VAR 0 18
41467: PPUSH
41468: LD_INT 22
41470: PUSH
41471: LD_VAR 0 16
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 58
41482: PUSH
41483: EMPTY
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 30
41491: PUSH
41492: LD_INT 32
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 30
41501: PUSH
41502: LD_INT 4
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 30
41511: PUSH
41512: LD_INT 5
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: PPUSH
41530: CALL_OW 72
41534: ST_TO_ADDR
41535: GO 41759
41537: LD_INT 2
41539: DOUBLE
41540: EQUAL
41541: IFTRUE 41545
41543: GO 41607
41545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41546: LD_ADDR_VAR 0 12
41550: PUSH
41551: LD_VAR 0 18
41555: PPUSH
41556: LD_INT 22
41558: PUSH
41559: LD_VAR 0 16
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 30
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 30
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PPUSH
41600: CALL_OW 72
41604: ST_TO_ADDR
41605: GO 41759
41607: LD_INT 3
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41615
41613: GO 41677
41615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41616: LD_ADDR_VAR 0 12
41620: PUSH
41621: LD_VAR 0 18
41625: PPUSH
41626: LD_INT 22
41628: PUSH
41629: LD_VAR 0 16
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: LD_INT 30
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 30
41653: PUSH
41654: LD_INT 3
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PPUSH
41670: CALL_OW 72
41674: ST_TO_ADDR
41675: GO 41759
41677: LD_INT 4
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41685
41683: GO 41758
41685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41686: LD_ADDR_VAR 0 12
41690: PUSH
41691: LD_VAR 0 18
41695: PPUSH
41696: LD_INT 22
41698: PUSH
41699: LD_VAR 0 16
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 30
41713: PUSH
41714: LD_INT 6
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 30
41723: PUSH
41724: LD_INT 7
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 30
41733: PUSH
41734: LD_INT 8
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 72
41755: ST_TO_ADDR
41756: GO 41759
41758: POP
// if i = 1 then
41759: LD_VAR 0 8
41763: PUSH
41764: LD_INT 1
41766: EQUAL
41767: IFFALSE 41878
// begin tmp := [ ] ;
41769: LD_ADDR_VAR 0 19
41773: PUSH
41774: EMPTY
41775: ST_TO_ADDR
// for j in f do
41776: LD_ADDR_VAR 0 9
41780: PUSH
41781: LD_VAR 0 12
41785: PUSH
41786: FOR_IN
41787: IFFALSE 41860
// if GetBType ( j ) = b_bunker then
41789: LD_VAR 0 9
41793: PPUSH
41794: CALL_OW 266
41798: PUSH
41799: LD_INT 32
41801: EQUAL
41802: IFFALSE 41829
// tmp := Insert ( tmp , 1 , j ) else
41804: LD_ADDR_VAR 0 19
41808: PUSH
41809: LD_VAR 0 19
41813: PPUSH
41814: LD_INT 1
41816: PPUSH
41817: LD_VAR 0 9
41821: PPUSH
41822: CALL_OW 2
41826: ST_TO_ADDR
41827: GO 41858
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41829: LD_ADDR_VAR 0 19
41833: PUSH
41834: LD_VAR 0 19
41838: PPUSH
41839: LD_VAR 0 19
41843: PUSH
41844: LD_INT 1
41846: PLUS
41847: PPUSH
41848: LD_VAR 0 9
41852: PPUSH
41853: CALL_OW 2
41857: ST_TO_ADDR
41858: GO 41786
41860: POP
41861: POP
// if tmp then
41862: LD_VAR 0 19
41866: IFFALSE 41878
// f := tmp ;
41868: LD_ADDR_VAR 0 12
41872: PUSH
41873: LD_VAR 0 19
41877: ST_TO_ADDR
// end ; x := personel [ i ] ;
41878: LD_ADDR_VAR 0 13
41882: PUSH
41883: LD_VAR 0 6
41887: PUSH
41888: LD_VAR 0 8
41892: ARRAY
41893: ST_TO_ADDR
// if x = - 1 then
41894: LD_VAR 0 13
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: EQUAL
41903: IFFALSE 42114
// begin for j in f do
41905: LD_ADDR_VAR 0 9
41909: PUSH
41910: LD_VAR 0 12
41914: PUSH
41915: FOR_IN
41916: IFFALSE 42110
// repeat InitHc ;
41918: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41922: LD_VAR 0 9
41926: PPUSH
41927: CALL_OW 266
41931: PUSH
41932: LD_INT 5
41934: EQUAL
41935: IFFALSE 42005
// begin if UnitsInside ( j ) < 3 then
41937: LD_VAR 0 9
41941: PPUSH
41942: CALL_OW 313
41946: PUSH
41947: LD_INT 3
41949: LESS
41950: IFFALSE 41986
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41952: LD_INT 0
41954: PPUSH
41955: LD_INT 5
41957: PUSH
41958: LD_INT 8
41960: PUSH
41961: LD_INT 9
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: PUSH
41969: LD_VAR 0 17
41973: ARRAY
41974: PPUSH
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 380
41984: GO 42003
// PrepareHuman ( false , i , skill ) ;
41986: LD_INT 0
41988: PPUSH
41989: LD_VAR 0 8
41993: PPUSH
41994: LD_VAR 0 4
41998: PPUSH
41999: CALL_OW 380
// end else
42003: GO 42022
// PrepareHuman ( false , i , skill ) ;
42005: LD_INT 0
42007: PPUSH
42008: LD_VAR 0 8
42012: PPUSH
42013: LD_VAR 0 4
42017: PPUSH
42018: CALL_OW 380
// un := CreateHuman ;
42022: LD_ADDR_VAR 0 14
42026: PUSH
42027: CALL_OW 44
42031: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42032: LD_ADDR_VAR 0 7
42036: PUSH
42037: LD_VAR 0 7
42041: PPUSH
42042: LD_INT 1
42044: PPUSH
42045: LD_VAR 0 14
42049: PPUSH
42050: CALL_OW 2
42054: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42055: LD_VAR 0 14
42059: PPUSH
42060: LD_VAR 0 9
42064: PPUSH
42065: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42069: LD_VAR 0 9
42073: PPUSH
42074: CALL_OW 313
42078: PUSH
42079: LD_INT 6
42081: EQUAL
42082: IFTRUE 42106
42084: PUSH
42085: LD_VAR 0 9
42089: PPUSH
42090: CALL_OW 266
42094: PUSH
42095: LD_INT 32
42097: PUSH
42098: LD_INT 31
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: IN
42105: OR
42106: IFFALSE 41918
42108: GO 41915
42110: POP
42111: POP
// end else
42112: GO 42498
// for j = 1 to x do
42114: LD_ADDR_VAR 0 9
42118: PUSH
42119: DOUBLE
42120: LD_INT 1
42122: DEC
42123: ST_TO_ADDR
42124: LD_VAR 0 13
42128: PUSH
42129: FOR_TO
42130: IFFALSE 42496
// begin InitHc ;
42132: CALL_OW 19
// if not f then
42136: LD_VAR 0 12
42140: NOT
42141: IFFALSE 42230
// begin PrepareHuman ( false , i , skill ) ;
42143: LD_INT 0
42145: PPUSH
42146: LD_VAR 0 8
42150: PPUSH
42151: LD_VAR 0 4
42155: PPUSH
42156: CALL_OW 380
// un := CreateHuman ;
42160: LD_ADDR_VAR 0 14
42164: PUSH
42165: CALL_OW 44
42169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42170: LD_ADDR_VAR 0 7
42174: PUSH
42175: LD_VAR 0 7
42179: PPUSH
42180: LD_INT 1
42182: PPUSH
42183: LD_VAR 0 14
42187: PPUSH
42188: CALL_OW 2
42192: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42193: LD_VAR 0 14
42197: PPUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 250
42207: PPUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: CALL_OW 251
42217: PPUSH
42218: LD_INT 10
42220: PPUSH
42221: LD_INT 0
42223: PPUSH
42224: CALL_OW 50
// continue ;
42228: GO 42129
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42230: LD_VAR 0 12
42234: PUSH
42235: LD_INT 1
42237: ARRAY
42238: PPUSH
42239: CALL_OW 313
42243: IFFALSE 42271
42245: PUSH
42246: LD_VAR 0 12
42250: PUSH
42251: LD_INT 1
42253: ARRAY
42254: PPUSH
42255: CALL_OW 266
42259: PUSH
42260: LD_INT 32
42262: PUSH
42263: LD_INT 31
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: IN
42270: AND
42271: IFTRUE 42292
42273: PUSH
42274: LD_VAR 0 12
42278: PUSH
42279: LD_INT 1
42281: ARRAY
42282: PPUSH
42283: CALL_OW 313
42287: PUSH
42288: LD_INT 6
42290: EQUAL
42291: OR
42292: IFFALSE 42312
// f := Delete ( f , 1 ) ;
42294: LD_ADDR_VAR 0 12
42298: PUSH
42299: LD_VAR 0 12
42303: PPUSH
42304: LD_INT 1
42306: PPUSH
42307: CALL_OW 3
42311: ST_TO_ADDR
// if not f then
42312: LD_VAR 0 12
42316: NOT
42317: IFFALSE 42335
// begin x := x + 2 ;
42319: LD_ADDR_VAR 0 13
42323: PUSH
42324: LD_VAR 0 13
42328: PUSH
42329: LD_INT 2
42331: PLUS
42332: ST_TO_ADDR
// continue ;
42333: GO 42129
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42335: LD_VAR 0 12
42339: PUSH
42340: LD_INT 1
42342: ARRAY
42343: PPUSH
42344: CALL_OW 266
42348: PUSH
42349: LD_INT 5
42351: EQUAL
42352: IFFALSE 42426
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42354: LD_VAR 0 12
42358: PUSH
42359: LD_INT 1
42361: ARRAY
42362: PPUSH
42363: CALL_OW 313
42367: PUSH
42368: LD_INT 3
42370: LESS
42371: IFFALSE 42407
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42373: LD_INT 0
42375: PPUSH
42376: LD_INT 5
42378: PUSH
42379: LD_INT 8
42381: PUSH
42382: LD_INT 9
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: PUSH
42390: LD_VAR 0 17
42394: ARRAY
42395: PPUSH
42396: LD_VAR 0 4
42400: PPUSH
42401: CALL_OW 380
42405: GO 42424
// PrepareHuman ( false , i , skill ) ;
42407: LD_INT 0
42409: PPUSH
42410: LD_VAR 0 8
42414: PPUSH
42415: LD_VAR 0 4
42419: PPUSH
42420: CALL_OW 380
// end else
42424: GO 42443
// PrepareHuman ( false , i , skill ) ;
42426: LD_INT 0
42428: PPUSH
42429: LD_VAR 0 8
42433: PPUSH
42434: LD_VAR 0 4
42438: PPUSH
42439: CALL_OW 380
// un := CreateHuman ;
42443: LD_ADDR_VAR 0 14
42447: PUSH
42448: CALL_OW 44
42452: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42453: LD_ADDR_VAR 0 7
42457: PUSH
42458: LD_VAR 0 7
42462: PPUSH
42463: LD_INT 1
42465: PPUSH
42466: LD_VAR 0 14
42470: PPUSH
42471: CALL_OW 2
42475: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42476: LD_VAR 0 14
42480: PPUSH
42481: LD_VAR 0 12
42485: PUSH
42486: LD_INT 1
42488: ARRAY
42489: PPUSH
42490: CALL_OW 52
// end ;
42494: GO 42129
42496: POP
42497: POP
// end ;
42498: GO 41429
42500: POP
42501: POP
// result := result ^ buildings ;
42502: LD_ADDR_VAR 0 7
42506: PUSH
42507: LD_VAR 0 7
42511: PUSH
42512: LD_VAR 0 18
42516: ADD
42517: ST_TO_ADDR
// end else
42518: GO 42661
// begin for i = 1 to personel do
42520: LD_ADDR_VAR 0 8
42524: PUSH
42525: DOUBLE
42526: LD_INT 1
42528: DEC
42529: ST_TO_ADDR
42530: LD_VAR 0 6
42534: PUSH
42535: FOR_TO
42536: IFFALSE 42659
// begin if i > 4 then
42538: LD_VAR 0 8
42542: PUSH
42543: LD_INT 4
42545: GREATER
42546: IFFALSE 42550
// break ;
42548: GO 42659
// x := personel [ i ] ;
42550: LD_ADDR_VAR 0 13
42554: PUSH
42555: LD_VAR 0 6
42559: PUSH
42560: LD_VAR 0 8
42564: ARRAY
42565: ST_TO_ADDR
// if x = - 1 then
42566: LD_VAR 0 13
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: EQUAL
42575: IFFALSE 42579
// continue ;
42577: GO 42535
// PrepareHuman ( false , i , skill ) ;
42579: LD_INT 0
42581: PPUSH
42582: LD_VAR 0 8
42586: PPUSH
42587: LD_VAR 0 4
42591: PPUSH
42592: CALL_OW 380
// un := CreateHuman ;
42596: LD_ADDR_VAR 0 14
42600: PUSH
42601: CALL_OW 44
42605: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42606: LD_VAR 0 14
42610: PPUSH
42611: LD_VAR 0 1
42615: PPUSH
42616: CALL_OW 250
42620: PPUSH
42621: LD_VAR 0 1
42625: PPUSH
42626: CALL_OW 251
42630: PPUSH
42631: LD_INT 10
42633: PPUSH
42634: LD_INT 0
42636: PPUSH
42637: CALL_OW 50
// result := result ^ un ;
42641: LD_ADDR_VAR 0 7
42645: PUSH
42646: LD_VAR 0 7
42650: PUSH
42651: LD_VAR 0 14
42655: ADD
42656: ST_TO_ADDR
// end ;
42657: GO 42535
42659: POP
42660: POP
// end ; end ;
42661: LD_VAR 0 7
42665: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42666: LD_INT 0
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
// result := false ;
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_INT 0
42691: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42692: LD_VAR 0 1
42696: NOT
42697: IFTRUE 42722
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: CALL_OW 266
42709: PUSH
42710: LD_INT 32
42712: PUSH
42713: LD_INT 33
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: IN
42720: NOT
42721: OR
42722: IFFALSE 42726
// exit ;
42724: GO 43861
// nat := GetNation ( tower ) ;
42726: LD_ADDR_VAR 0 12
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 248
42740: ST_TO_ADDR
// side := GetSide ( tower ) ;
42741: LD_ADDR_VAR 0 16
42745: PUSH
42746: LD_VAR 0 1
42750: PPUSH
42751: CALL_OW 255
42755: ST_TO_ADDR
// x := GetX ( tower ) ;
42756: LD_ADDR_VAR 0 10
42760: PUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 250
42770: ST_TO_ADDR
// y := GetY ( tower ) ;
42771: LD_ADDR_VAR 0 11
42775: PUSH
42776: LD_VAR 0 1
42780: PPUSH
42781: CALL_OW 251
42785: ST_TO_ADDR
// if not x or not y then
42786: LD_VAR 0 10
42790: NOT
42791: IFTRUE 42800
42793: PUSH
42794: LD_VAR 0 11
42798: NOT
42799: OR
42800: IFFALSE 42804
// exit ;
42802: GO 43861
// weapon := 0 ;
42804: LD_ADDR_VAR 0 18
42808: PUSH
42809: LD_INT 0
42811: ST_TO_ADDR
// fac_list := [ ] ;
42812: LD_ADDR_VAR 0 17
42816: PUSH
42817: EMPTY
42818: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42819: LD_ADDR_VAR 0 6
42823: PUSH
42824: LD_VAR 0 1
42828: PPUSH
42829: CALL_OW 274
42833: PPUSH
42834: LD_VAR 0 2
42838: PPUSH
42839: LD_INT 0
42841: PPUSH
42842: CALL 40396 0 3
42846: PPUSH
42847: LD_INT 30
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PPUSH
42857: CALL_OW 72
42861: ST_TO_ADDR
// if not factories then
42862: LD_VAR 0 6
42866: NOT
42867: IFFALSE 42871
// exit ;
42869: GO 43861
// for i in factories do
42871: LD_ADDR_VAR 0 8
42875: PUSH
42876: LD_VAR 0 6
42880: PUSH
42881: FOR_IN
42882: IFFALSE 42907
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42884: LD_ADDR_VAR 0 17
42888: PUSH
42889: LD_VAR 0 17
42893: PUSH
42894: LD_VAR 0 8
42898: PPUSH
42899: CALL_OW 478
42903: UNION
42904: ST_TO_ADDR
42905: GO 42881
42907: POP
42908: POP
// if not fac_list then
42909: LD_VAR 0 17
42913: NOT
42914: IFFALSE 42918
// exit ;
42916: GO 43861
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42918: LD_ADDR_VAR 0 5
42922: PUSH
42923: LD_INT 4
42925: PUSH
42926: LD_INT 5
42928: PUSH
42929: LD_INT 9
42931: PUSH
42932: LD_INT 10
42934: PUSH
42935: LD_INT 6
42937: PUSH
42938: LD_INT 7
42940: PUSH
42941: LD_INT 11
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 27
42955: PUSH
42956: LD_INT 28
42958: PUSH
42959: LD_INT 26
42961: PUSH
42962: LD_INT 30
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 43
42973: PUSH
42974: LD_INT 44
42976: PUSH
42977: LD_INT 46
42979: PUSH
42980: LD_INT 45
42982: PUSH
42983: LD_INT 47
42985: PUSH
42986: LD_INT 49
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: PUSH
43002: LD_VAR 0 12
43006: ARRAY
43007: ST_TO_ADDR
// list := list isect fac_list ;
43008: LD_ADDR_VAR 0 5
43012: PUSH
43013: LD_VAR 0 5
43017: PUSH
43018: LD_VAR 0 17
43022: ISECT
43023: ST_TO_ADDR
// if not list then
43024: LD_VAR 0 5
43028: NOT
43029: IFFALSE 43033
// exit ;
43031: GO 43861
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43033: LD_VAR 0 12
43037: PUSH
43038: LD_INT 3
43040: EQUAL
43041: IFFALSE 43053
43043: PUSH
43044: LD_INT 49
43046: PUSH
43047: LD_VAR 0 5
43051: IN
43052: AND
43053: IFFALSE 43073
43055: PUSH
43056: LD_INT 31
43058: PPUSH
43059: LD_VAR 0 16
43063: PPUSH
43064: CALL_OW 321
43068: PUSH
43069: LD_INT 2
43071: EQUAL
43072: AND
43073: IFFALSE 43133
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43075: LD_INT 22
43077: PUSH
43078: LD_VAR 0 16
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 35
43089: PUSH
43090: LD_INT 49
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 91
43099: PUSH
43100: LD_VAR 0 1
43104: PUSH
43105: LD_INT 10
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: PPUSH
43118: CALL_OW 69
43122: NOT
43123: IFFALSE 43133
// weapon := ru_time_lapser ;
43125: LD_ADDR_VAR 0 18
43129: PUSH
43130: LD_INT 49
43132: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43133: LD_VAR 0 12
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: IN
43148: IFFALSE 43172
43150: PUSH
43151: LD_INT 11
43153: PUSH
43154: LD_VAR 0 5
43158: IN
43159: IFTRUE 43171
43161: PUSH
43162: LD_INT 30
43164: PUSH
43165: LD_VAR 0 5
43169: IN
43170: OR
43171: AND
43172: IFFALSE 43192
43174: PUSH
43175: LD_INT 6
43177: PPUSH
43178: LD_VAR 0 16
43182: PPUSH
43183: CALL_OW 321
43187: PUSH
43188: LD_INT 2
43190: EQUAL
43191: AND
43192: IFFALSE 43359
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43194: LD_INT 22
43196: PUSH
43197: LD_VAR 0 16
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 35
43211: PUSH
43212: LD_INT 11
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 35
43221: PUSH
43222: LD_INT 30
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 91
43236: PUSH
43237: LD_VAR 0 1
43241: PUSH
43242: LD_INT 18
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: PPUSH
43255: CALL_OW 69
43259: NOT
43260: IFFALSE 43336
43262: PUSH
43263: LD_INT 22
43265: PUSH
43266: LD_VAR 0 16
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 30
43280: PUSH
43281: LD_INT 32
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 30
43290: PUSH
43291: LD_INT 33
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 91
43305: PUSH
43306: LD_VAR 0 1
43310: PUSH
43311: LD_INT 12
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: PPUSH
43327: CALL_OW 69
43331: PUSH
43332: LD_INT 2
43334: GREATER
43335: AND
43336: IFFALSE 43359
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43338: LD_ADDR_VAR 0 18
43342: PUSH
43343: LD_INT 11
43345: PUSH
43346: LD_INT 30
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_VAR 0 12
43357: ARRAY
43358: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43359: LD_VAR 0 18
43363: NOT
43364: IFFALSE 43384
43366: PUSH
43367: LD_INT 40
43369: PPUSH
43370: LD_VAR 0 16
43374: PPUSH
43375: CALL_OW 321
43379: PUSH
43380: LD_INT 2
43382: EQUAL
43383: AND
43384: IFFALSE 43420
43386: PUSH
43387: LD_INT 7
43389: PUSH
43390: LD_VAR 0 5
43394: IN
43395: IFTRUE 43407
43397: PUSH
43398: LD_INT 28
43400: PUSH
43401: LD_VAR 0 5
43405: IN
43406: OR
43407: IFTRUE 43419
43409: PUSH
43410: LD_INT 45
43412: PUSH
43413: LD_VAR 0 5
43417: IN
43418: OR
43419: AND
43420: IFFALSE 43674
// begin hex := GetHexInfo ( x , y ) ;
43422: LD_ADDR_VAR 0 4
43426: PUSH
43427: LD_VAR 0 10
43431: PPUSH
43432: LD_VAR 0 11
43436: PPUSH
43437: CALL_OW 546
43441: ST_TO_ADDR
// if hex [ 1 ] then
43442: LD_VAR 0 4
43446: PUSH
43447: LD_INT 1
43449: ARRAY
43450: IFFALSE 43454
// exit ;
43452: GO 43861
// height := hex [ 2 ] ;
43454: LD_ADDR_VAR 0 15
43458: PUSH
43459: LD_VAR 0 4
43463: PUSH
43464: LD_INT 2
43466: ARRAY
43467: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43468: LD_ADDR_VAR 0 14
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// for i in tmp do
43491: LD_ADDR_VAR 0 8
43495: PUSH
43496: LD_VAR 0 14
43500: PUSH
43501: FOR_IN
43502: IFFALSE 43672
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_VAR 0 10
43513: PPUSH
43514: LD_VAR 0 8
43518: PPUSH
43519: LD_INT 5
43521: PPUSH
43522: CALL_OW 272
43526: PUSH
43527: LD_VAR 0 11
43531: PPUSH
43532: LD_VAR 0 8
43536: PPUSH
43537: LD_INT 5
43539: PPUSH
43540: CALL_OW 273
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43549: LD_VAR 0 9
43553: PUSH
43554: LD_INT 1
43556: ARRAY
43557: PPUSH
43558: LD_VAR 0 9
43562: PUSH
43563: LD_INT 2
43565: ARRAY
43566: PPUSH
43567: CALL_OW 488
43571: IFFALSE 43670
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43573: LD_ADDR_VAR 0 4
43577: PUSH
43578: LD_VAR 0 9
43582: PUSH
43583: LD_INT 1
43585: ARRAY
43586: PPUSH
43587: LD_VAR 0 9
43591: PUSH
43592: LD_INT 2
43594: ARRAY
43595: PPUSH
43596: CALL_OW 546
43600: ST_TO_ADDR
// if hex [ 1 ] then
43601: LD_VAR 0 4
43605: PUSH
43606: LD_INT 1
43608: ARRAY
43609: IFFALSE 43613
// continue ;
43611: GO 43501
// h := hex [ 2 ] ;
43613: LD_ADDR_VAR 0 13
43617: PUSH
43618: LD_VAR 0 4
43622: PUSH
43623: LD_INT 2
43625: ARRAY
43626: ST_TO_ADDR
// if h + 7 < height then
43627: LD_VAR 0 13
43631: PUSH
43632: LD_INT 7
43634: PLUS
43635: PUSH
43636: LD_VAR 0 15
43640: LESS
43641: IFFALSE 43670
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43643: LD_ADDR_VAR 0 18
43647: PUSH
43648: LD_INT 7
43650: PUSH
43651: LD_INT 28
43653: PUSH
43654: LD_INT 45
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: PUSH
43662: LD_VAR 0 12
43666: ARRAY
43667: ST_TO_ADDR
// break ;
43668: GO 43672
// end ; end ; end ;
43670: GO 43501
43672: POP
43673: POP
// end ; if not weapon then
43674: LD_VAR 0 18
43678: NOT
43679: IFFALSE 43739
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43681: LD_ADDR_VAR 0 5
43685: PUSH
43686: LD_VAR 0 5
43690: PUSH
43691: LD_INT 11
43693: PUSH
43694: LD_INT 30
43696: PUSH
43697: LD_INT 49
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: DIFF
43705: ST_TO_ADDR
// if not list then
43706: LD_VAR 0 5
43710: NOT
43711: IFFALSE 43715
// exit ;
43713: GO 43861
// weapon := list [ rand ( 1 , list ) ] ;
43715: LD_ADDR_VAR 0 18
43719: PUSH
43720: LD_VAR 0 5
43724: PUSH
43725: LD_INT 1
43727: PPUSH
43728: LD_VAR 0 5
43732: PPUSH
43733: CALL_OW 12
43737: ARRAY
43738: ST_TO_ADDR
// end ; if weapon then
43739: LD_VAR 0 18
43743: IFFALSE 43861
// begin tmp := CostOfWeapon ( weapon ) ;
43745: LD_ADDR_VAR 0 14
43749: PUSH
43750: LD_VAR 0 18
43754: PPUSH
43755: CALL_OW 451
43759: ST_TO_ADDR
// j := GetBase ( tower ) ;
43760: LD_ADDR_VAR 0 9
43764: PUSH
43765: LD_VAR 0 1
43769: PPUSH
43770: CALL_OW 274
43774: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43775: LD_VAR 0 9
43779: PPUSH
43780: LD_INT 1
43782: PPUSH
43783: CALL_OW 275
43787: PUSH
43788: LD_VAR 0 14
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: GREATEREQUAL
43797: IFFALSE 43823
43799: PUSH
43800: LD_VAR 0 9
43804: PPUSH
43805: LD_INT 2
43807: PPUSH
43808: CALL_OW 275
43812: PUSH
43813: LD_VAR 0 14
43817: PUSH
43818: LD_INT 2
43820: ARRAY
43821: GREATEREQUAL
43822: AND
43823: IFFALSE 43849
43825: PUSH
43826: LD_VAR 0 9
43830: PPUSH
43831: LD_INT 3
43833: PPUSH
43834: CALL_OW 275
43838: PUSH
43839: LD_VAR 0 14
43843: PUSH
43844: LD_INT 3
43846: ARRAY
43847: GREATEREQUAL
43848: AND
43849: IFFALSE 43861
// result := weapon ;
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_VAR 0 18
43860: ST_TO_ADDR
// end ; end ;
43861: LD_VAR 0 3
43865: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43866: LD_INT 0
43868: PPUSH
43869: PPUSH
// result := true ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_INT 1
43877: ST_TO_ADDR
// if array1 = array2 then
43878: LD_VAR 0 1
43882: PUSH
43883: LD_VAR 0 2
43887: EQUAL
43888: IFFALSE 43948
// begin for i = 1 to array1 do
43890: LD_ADDR_VAR 0 4
43894: PUSH
43895: DOUBLE
43896: LD_INT 1
43898: DEC
43899: ST_TO_ADDR
43900: LD_VAR 0 1
43904: PUSH
43905: FOR_TO
43906: IFFALSE 43944
// if array1 [ i ] <> array2 [ i ] then
43908: LD_VAR 0 1
43912: PUSH
43913: LD_VAR 0 4
43917: ARRAY
43918: PUSH
43919: LD_VAR 0 2
43923: PUSH
43924: LD_VAR 0 4
43928: ARRAY
43929: NONEQUAL
43930: IFFALSE 43942
// begin result := false ;
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 0
43939: ST_TO_ADDR
// break ;
43940: GO 43944
// end ;
43942: GO 43905
43944: POP
43945: POP
// end else
43946: GO 43956
// result := false ;
43948: LD_ADDR_VAR 0 3
43952: PUSH
43953: LD_INT 0
43955: ST_TO_ADDR
// end ;
43956: LD_VAR 0 3
43960: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43961: LD_INT 0
43963: PPUSH
43964: PPUSH
// if not array1 or not array2 then
43965: LD_VAR 0 1
43969: NOT
43970: IFTRUE 43979
43972: PUSH
43973: LD_VAR 0 2
43977: NOT
43978: OR
43979: IFFALSE 43983
// exit ;
43981: GO 44047
// result := true ;
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_INT 1
43990: ST_TO_ADDR
// for i = 1 to array1 do
43991: LD_ADDR_VAR 0 4
43995: PUSH
43996: DOUBLE
43997: LD_INT 1
43999: DEC
44000: ST_TO_ADDR
44001: LD_VAR 0 1
44005: PUSH
44006: FOR_TO
44007: IFFALSE 44045
// if array1 [ i ] <> array2 [ i ] then
44009: LD_VAR 0 1
44013: PUSH
44014: LD_VAR 0 4
44018: ARRAY
44019: PUSH
44020: LD_VAR 0 2
44024: PUSH
44025: LD_VAR 0 4
44029: ARRAY
44030: NONEQUAL
44031: IFFALSE 44043
// begin result := false ;
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_INT 0
44040: ST_TO_ADDR
// break ;
44041: GO 44045
// end ;
44043: GO 44006
44045: POP
44046: POP
// end ;
44047: LD_VAR 0 3
44051: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44052: LD_INT 0
44054: PPUSH
44055: PPUSH
44056: PPUSH
// pom := GetBase ( fac ) ;
44057: LD_ADDR_VAR 0 5
44061: PUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 274
44071: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44072: LD_ADDR_VAR 0 4
44076: PUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_INT 1
44084: ARRAY
44085: PPUSH
44086: LD_VAR 0 2
44090: PUSH
44091: LD_INT 2
44093: ARRAY
44094: PPUSH
44095: LD_VAR 0 2
44099: PUSH
44100: LD_INT 3
44102: ARRAY
44103: PPUSH
44104: LD_VAR 0 2
44108: PUSH
44109: LD_INT 4
44111: ARRAY
44112: PPUSH
44113: CALL_OW 449
44117: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44118: LD_ADDR_VAR 0 3
44122: PUSH
44123: LD_VAR 0 5
44127: PPUSH
44128: LD_INT 1
44130: PPUSH
44131: CALL_OW 275
44135: PUSH
44136: LD_VAR 0 4
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: GREATEREQUAL
44145: IFFALSE 44171
44147: PUSH
44148: LD_VAR 0 5
44152: PPUSH
44153: LD_INT 2
44155: PPUSH
44156: CALL_OW 275
44160: PUSH
44161: LD_VAR 0 4
44165: PUSH
44166: LD_INT 2
44168: ARRAY
44169: GREATEREQUAL
44170: AND
44171: IFFALSE 44197
44173: PUSH
44174: LD_VAR 0 5
44178: PPUSH
44179: LD_INT 3
44181: PPUSH
44182: CALL_OW 275
44186: PUSH
44187: LD_VAR 0 4
44191: PUSH
44192: LD_INT 3
44194: ARRAY
44195: GREATEREQUAL
44196: AND
44197: ST_TO_ADDR
// end ;
44198: LD_VAR 0 3
44202: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44203: LD_INT 0
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
// pom := GetBase ( building ) ;
44209: LD_ADDR_VAR 0 3
44213: PUSH
44214: LD_VAR 0 1
44218: PPUSH
44219: CALL_OW 274
44223: ST_TO_ADDR
// if not pom then
44224: LD_VAR 0 3
44228: NOT
44229: IFFALSE 44233
// exit ;
44231: GO 44407
// btype := GetBType ( building ) ;
44233: LD_ADDR_VAR 0 5
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: CALL_OW 266
44247: ST_TO_ADDR
// if btype = b_armoury then
44248: LD_VAR 0 5
44252: PUSH
44253: LD_INT 4
44255: EQUAL
44256: IFFALSE 44266
// btype := b_barracks ;
44258: LD_ADDR_VAR 0 5
44262: PUSH
44263: LD_INT 5
44265: ST_TO_ADDR
// if btype = b_depot then
44266: LD_VAR 0 5
44270: PUSH
44271: LD_INT 0
44273: EQUAL
44274: IFFALSE 44284
// btype := b_warehouse ;
44276: LD_ADDR_VAR 0 5
44280: PUSH
44281: LD_INT 1
44283: ST_TO_ADDR
// if btype = b_workshop then
44284: LD_VAR 0 5
44288: PUSH
44289: LD_INT 2
44291: EQUAL
44292: IFFALSE 44302
// btype := b_factory ;
44294: LD_ADDR_VAR 0 5
44298: PUSH
44299: LD_INT 3
44301: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44302: LD_ADDR_VAR 0 4
44306: PUSH
44307: LD_VAR 0 5
44311: PPUSH
44312: LD_VAR 0 1
44316: PPUSH
44317: CALL_OW 248
44321: PPUSH
44322: CALL_OW 450
44326: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44327: LD_ADDR_VAR 0 2
44331: PUSH
44332: LD_VAR 0 3
44336: PPUSH
44337: LD_INT 1
44339: PPUSH
44340: CALL_OW 275
44344: PUSH
44345: LD_VAR 0 4
44349: PUSH
44350: LD_INT 1
44352: ARRAY
44353: GREATEREQUAL
44354: IFFALSE 44380
44356: PUSH
44357: LD_VAR 0 3
44361: PPUSH
44362: LD_INT 2
44364: PPUSH
44365: CALL_OW 275
44369: PUSH
44370: LD_VAR 0 4
44374: PUSH
44375: LD_INT 2
44377: ARRAY
44378: GREATEREQUAL
44379: AND
44380: IFFALSE 44406
44382: PUSH
44383: LD_VAR 0 3
44387: PPUSH
44388: LD_INT 3
44390: PPUSH
44391: CALL_OW 275
44395: PUSH
44396: LD_VAR 0 4
44400: PUSH
44401: LD_INT 3
44403: ARRAY
44404: GREATEREQUAL
44405: AND
44406: ST_TO_ADDR
// end ;
44407: LD_VAR 0 2
44411: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44412: LD_INT 0
44414: PPUSH
44415: PPUSH
44416: PPUSH
// pom := GetBase ( building ) ;
44417: LD_ADDR_VAR 0 4
44421: PUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 274
44431: ST_TO_ADDR
// if not pom then
44432: LD_VAR 0 4
44436: NOT
44437: IFFALSE 44441
// exit ;
44439: GO 44546
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44441: LD_ADDR_VAR 0 5
44445: PUSH
44446: LD_VAR 0 2
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 248
44460: PPUSH
44461: CALL_OW 450
44465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44466: LD_ADDR_VAR 0 3
44470: PUSH
44471: LD_VAR 0 4
44475: PPUSH
44476: LD_INT 1
44478: PPUSH
44479: CALL_OW 275
44483: PUSH
44484: LD_VAR 0 5
44488: PUSH
44489: LD_INT 1
44491: ARRAY
44492: GREATEREQUAL
44493: IFFALSE 44519
44495: PUSH
44496: LD_VAR 0 4
44500: PPUSH
44501: LD_INT 2
44503: PPUSH
44504: CALL_OW 275
44508: PUSH
44509: LD_VAR 0 5
44513: PUSH
44514: LD_INT 2
44516: ARRAY
44517: GREATEREQUAL
44518: AND
44519: IFFALSE 44545
44521: PUSH
44522: LD_VAR 0 4
44526: PPUSH
44527: LD_INT 3
44529: PPUSH
44530: CALL_OW 275
44534: PUSH
44535: LD_VAR 0 5
44539: PUSH
44540: LD_INT 3
44542: ARRAY
44543: GREATEREQUAL
44544: AND
44545: ST_TO_ADDR
// end ;
44546: LD_VAR 0 3
44550: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
// result := false ;
44564: LD_ADDR_VAR 0 8
44568: PUSH
44569: LD_INT 0
44571: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44572: LD_VAR 0 5
44576: NOT
44577: IFTRUE 44586
44579: PUSH
44580: LD_VAR 0 1
44584: NOT
44585: OR
44586: IFTRUE 44595
44588: PUSH
44589: LD_VAR 0 2
44593: NOT
44594: OR
44595: IFTRUE 44604
44597: PUSH
44598: LD_VAR 0 3
44602: NOT
44603: OR
44604: IFFALSE 44608
// exit ;
44606: GO 45434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44608: LD_ADDR_VAR 0 14
44612: PUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: LD_VAR 0 2
44622: PPUSH
44623: LD_VAR 0 3
44627: PPUSH
44628: LD_VAR 0 4
44632: PPUSH
44633: LD_VAR 0 5
44637: PUSH
44638: LD_INT 1
44640: ARRAY
44641: PPUSH
44642: CALL_OW 248
44646: PPUSH
44647: LD_INT 0
44649: PPUSH
44650: CALL 46715 0 6
44654: ST_TO_ADDR
// if not hexes then
44655: LD_VAR 0 14
44659: NOT
44660: IFFALSE 44664
// exit ;
44662: GO 45434
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44664: LD_ADDR_VAR 0 17
44668: PUSH
44669: LD_VAR 0 5
44673: PPUSH
44674: LD_INT 22
44676: PUSH
44677: LD_VAR 0 13
44681: PPUSH
44682: CALL_OW 255
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 30
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 30
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PPUSH
44723: CALL_OW 72
44727: ST_TO_ADDR
// for i = 1 to hexes do
44728: LD_ADDR_VAR 0 9
44732: PUSH
44733: DOUBLE
44734: LD_INT 1
44736: DEC
44737: ST_TO_ADDR
44738: LD_VAR 0 14
44742: PUSH
44743: FOR_TO
44744: IFFALSE 45432
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44746: LD_ADDR_VAR 0 13
44750: PUSH
44751: LD_VAR 0 14
44755: PUSH
44756: LD_VAR 0 9
44760: ARRAY
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PPUSH
44766: LD_VAR 0 14
44770: PUSH
44771: LD_VAR 0 9
44775: ARRAY
44776: PUSH
44777: LD_INT 2
44779: ARRAY
44780: PPUSH
44781: CALL_OW 428
44785: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44786: LD_VAR 0 14
44790: PUSH
44791: LD_VAR 0 9
44795: ARRAY
44796: PUSH
44797: LD_INT 1
44799: ARRAY
44800: PPUSH
44801: LD_VAR 0 14
44805: PUSH
44806: LD_VAR 0 9
44810: ARRAY
44811: PUSH
44812: LD_INT 2
44814: ARRAY
44815: PPUSH
44816: CALL_OW 351
44820: IFTRUE 44859
44822: PUSH
44823: LD_VAR 0 14
44827: PUSH
44828: LD_VAR 0 9
44832: ARRAY
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PPUSH
44838: LD_VAR 0 14
44842: PUSH
44843: LD_VAR 0 9
44847: ARRAY
44848: PUSH
44849: LD_INT 2
44851: ARRAY
44852: PPUSH
44853: CALL_OW 488
44857: NOT
44858: OR
44859: IFTRUE 44876
44861: PUSH
44862: LD_VAR 0 13
44866: PPUSH
44867: CALL_OW 247
44871: PUSH
44872: LD_INT 3
44874: EQUAL
44875: OR
44876: IFFALSE 44882
// exit ;
44878: POP
44879: POP
44880: GO 45434
// if not tmp then
44882: LD_VAR 0 13
44886: NOT
44887: IFFALSE 44891
// continue ;
44889: GO 44743
// result := true ;
44891: LD_ADDR_VAR 0 8
44895: PUSH
44896: LD_INT 1
44898: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44899: LD_VAR 0 6
44903: IFFALSE 44920
44905: PUSH
44906: LD_VAR 0 13
44910: PPUSH
44911: CALL_OW 247
44915: PUSH
44916: LD_INT 2
44918: EQUAL
44919: AND
44920: IFFALSE 44937
44922: PUSH
44923: LD_VAR 0 13
44927: PPUSH
44928: CALL_OW 263
44932: PUSH
44933: LD_INT 1
44935: EQUAL
44936: AND
44937: IFFALSE 45101
// begin if IsDrivenBy ( tmp ) then
44939: LD_VAR 0 13
44943: PPUSH
44944: CALL_OW 311
44948: IFFALSE 44952
// continue ;
44950: GO 44743
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44952: LD_VAR 0 6
44956: PPUSH
44957: LD_INT 3
44959: PUSH
44960: LD_INT 60
44962: PUSH
44963: EMPTY
44964: LIST
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: LD_INT 55
44975: PUSH
44976: EMPTY
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PPUSH
44987: CALL_OW 72
44991: IFFALSE 45099
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44993: LD_ADDR_VAR 0 18
44997: PUSH
44998: LD_VAR 0 6
45002: PPUSH
45003: LD_INT 3
45005: PUSH
45006: LD_INT 60
45008: PUSH
45009: EMPTY
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 55
45021: PUSH
45022: EMPTY
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PPUSH
45033: CALL_OW 72
45037: PUSH
45038: LD_INT 1
45040: ARRAY
45041: ST_TO_ADDR
// if IsInUnit ( driver ) then
45042: LD_VAR 0 18
45046: PPUSH
45047: CALL_OW 310
45051: IFFALSE 45062
// ComExit ( driver ) ;
45053: LD_VAR 0 18
45057: PPUSH
45058: CALL 70715 0 1
// AddComEnterUnit ( driver , tmp ) ;
45062: LD_VAR 0 18
45066: PPUSH
45067: LD_VAR 0 13
45071: PPUSH
45072: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45076: LD_VAR 0 18
45080: PPUSH
45081: LD_VAR 0 7
45085: PPUSH
45086: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45090: LD_VAR 0 18
45094: PPUSH
45095: CALL_OW 181
// end ; continue ;
45099: GO 44743
// end ; if not cleaners or not tmp in cleaners then
45101: LD_VAR 0 6
45105: NOT
45106: IFTRUE 45121
45108: PUSH
45109: LD_VAR 0 13
45113: PUSH
45114: LD_VAR 0 6
45118: IN
45119: NOT
45120: OR
45121: IFFALSE 45430
// begin if dep then
45123: LD_VAR 0 17
45127: IFFALSE 45263
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45129: LD_ADDR_VAR 0 16
45133: PUSH
45134: LD_VAR 0 17
45138: PUSH
45139: LD_INT 1
45141: ARRAY
45142: PPUSH
45143: CALL_OW 250
45147: PPUSH
45148: LD_VAR 0 17
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: PPUSH
45157: CALL_OW 254
45161: PPUSH
45162: LD_INT 5
45164: PPUSH
45165: CALL_OW 272
45169: PUSH
45170: LD_VAR 0 17
45174: PUSH
45175: LD_INT 1
45177: ARRAY
45178: PPUSH
45179: CALL_OW 251
45183: PPUSH
45184: LD_VAR 0 17
45188: PUSH
45189: LD_INT 1
45191: ARRAY
45192: PPUSH
45193: CALL_OW 254
45197: PPUSH
45198: LD_INT 5
45200: PPUSH
45201: CALL_OW 273
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45210: LD_VAR 0 16
45214: PUSH
45215: LD_INT 1
45217: ARRAY
45218: PPUSH
45219: LD_VAR 0 16
45223: PUSH
45224: LD_INT 2
45226: ARRAY
45227: PPUSH
45228: CALL_OW 488
45232: IFFALSE 45263
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45234: LD_VAR 0 13
45238: PPUSH
45239: LD_VAR 0 16
45243: PUSH
45244: LD_INT 1
45246: ARRAY
45247: PPUSH
45248: LD_VAR 0 16
45252: PUSH
45253: LD_INT 2
45255: ARRAY
45256: PPUSH
45257: CALL_OW 111
// continue ;
45261: GO 44743
// end ; end ; r := GetDir ( tmp ) ;
45263: LD_ADDR_VAR 0 15
45267: PUSH
45268: LD_VAR 0 13
45272: PPUSH
45273: CALL_OW 254
45277: ST_TO_ADDR
// if r = 5 then
45278: LD_VAR 0 15
45282: PUSH
45283: LD_INT 5
45285: EQUAL
45286: IFFALSE 45296
// r := 0 ;
45288: LD_ADDR_VAR 0 15
45292: PUSH
45293: LD_INT 0
45295: ST_TO_ADDR
// for j = r to 5 do
45296: LD_ADDR_VAR 0 10
45300: PUSH
45301: DOUBLE
45302: LD_VAR 0 15
45306: DEC
45307: ST_TO_ADDR
45308: LD_INT 5
45310: PUSH
45311: FOR_TO
45312: IFFALSE 45428
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45314: LD_ADDR_VAR 0 11
45318: PUSH
45319: LD_VAR 0 13
45323: PPUSH
45324: CALL_OW 250
45328: PPUSH
45329: LD_VAR 0 10
45333: PPUSH
45334: LD_INT 2
45336: PPUSH
45337: CALL_OW 272
45341: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45342: LD_ADDR_VAR 0 12
45346: PUSH
45347: LD_VAR 0 13
45351: PPUSH
45352: CALL_OW 251
45356: PPUSH
45357: LD_VAR 0 10
45361: PPUSH
45362: LD_INT 2
45364: PPUSH
45365: CALL_OW 273
45369: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45370: LD_VAR 0 11
45374: PPUSH
45375: LD_VAR 0 12
45379: PPUSH
45380: CALL_OW 488
45384: IFFALSE 45403
45386: PUSH
45387: LD_VAR 0 11
45391: PPUSH
45392: LD_VAR 0 12
45396: PPUSH
45397: CALL_OW 428
45401: NOT
45402: AND
45403: IFFALSE 45426
// begin ComMoveXY ( tmp , _x , _y ) ;
45405: LD_VAR 0 13
45409: PPUSH
45410: LD_VAR 0 11
45414: PPUSH
45415: LD_VAR 0 12
45419: PPUSH
45420: CALL_OW 111
// break ;
45424: GO 45428
// end ; end ;
45426: GO 45311
45428: POP
45429: POP
// end ; end ;
45430: GO 44743
45432: POP
45433: POP
// end ;
45434: LD_VAR 0 8
45438: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45439: LD_INT 0
45441: PPUSH
// result := true ;
45442: LD_ADDR_VAR 0 3
45446: PUSH
45447: LD_INT 1
45449: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45450: LD_VAR 0 2
45454: PUSH
45455: LD_INT 24
45457: DOUBLE
45458: EQUAL
45459: IFTRUE 45469
45461: LD_INT 33
45463: DOUBLE
45464: EQUAL
45465: IFTRUE 45469
45467: GO 45494
45469: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_INT 32
45477: PPUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: CALL_OW 321
45487: PUSH
45488: LD_INT 2
45490: EQUAL
45491: ST_TO_ADDR
45492: GO 45810
45494: LD_INT 20
45496: DOUBLE
45497: EQUAL
45498: IFTRUE 45502
45500: GO 45527
45502: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45503: LD_ADDR_VAR 0 3
45507: PUSH
45508: LD_INT 6
45510: PPUSH
45511: LD_VAR 0 1
45515: PPUSH
45516: CALL_OW 321
45520: PUSH
45521: LD_INT 2
45523: EQUAL
45524: ST_TO_ADDR
45525: GO 45810
45527: LD_INT 22
45529: DOUBLE
45530: EQUAL
45531: IFTRUE 45541
45533: LD_INT 36
45535: DOUBLE
45536: EQUAL
45537: IFTRUE 45541
45539: GO 45566
45541: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45542: LD_ADDR_VAR 0 3
45546: PUSH
45547: LD_INT 15
45549: PPUSH
45550: LD_VAR 0 1
45554: PPUSH
45555: CALL_OW 321
45559: PUSH
45560: LD_INT 2
45562: EQUAL
45563: ST_TO_ADDR
45564: GO 45810
45566: LD_INT 30
45568: DOUBLE
45569: EQUAL
45570: IFTRUE 45574
45572: GO 45599
45574: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45575: LD_ADDR_VAR 0 3
45579: PUSH
45580: LD_INT 20
45582: PPUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 321
45592: PUSH
45593: LD_INT 2
45595: EQUAL
45596: ST_TO_ADDR
45597: GO 45810
45599: LD_INT 28
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45613
45605: LD_INT 21
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45613
45611: GO 45638
45613: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_INT 21
45621: PPUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 321
45631: PUSH
45632: LD_INT 2
45634: EQUAL
45635: ST_TO_ADDR
45636: GO 45810
45638: LD_INT 16
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45671
45646: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_INT 84
45654: PPUSH
45655: LD_VAR 0 1
45659: PPUSH
45660: CALL_OW 321
45664: PUSH
45665: LD_INT 2
45667: EQUAL
45668: ST_TO_ADDR
45669: GO 45810
45671: LD_INT 19
45673: DOUBLE
45674: EQUAL
45675: IFTRUE 45685
45677: LD_INT 23
45679: DOUBLE
45680: EQUAL
45681: IFTRUE 45685
45683: GO 45710
45685: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45686: LD_ADDR_VAR 0 3
45690: PUSH
45691: LD_INT 83
45693: PPUSH
45694: LD_VAR 0 1
45698: PPUSH
45699: CALL_OW 321
45703: PUSH
45704: LD_INT 2
45706: EQUAL
45707: ST_TO_ADDR
45708: GO 45810
45710: LD_INT 17
45712: DOUBLE
45713: EQUAL
45714: IFTRUE 45718
45716: GO 45743
45718: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45719: LD_ADDR_VAR 0 3
45723: PUSH
45724: LD_INT 39
45726: PPUSH
45727: LD_VAR 0 1
45731: PPUSH
45732: CALL_OW 321
45736: PUSH
45737: LD_INT 2
45739: EQUAL
45740: ST_TO_ADDR
45741: GO 45810
45743: LD_INT 18
45745: DOUBLE
45746: EQUAL
45747: IFTRUE 45751
45749: GO 45776
45751: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_INT 40
45759: PPUSH
45760: LD_VAR 0 1
45764: PPUSH
45765: CALL_OW 321
45769: PUSH
45770: LD_INT 2
45772: EQUAL
45773: ST_TO_ADDR
45774: GO 45810
45776: LD_INT 27
45778: DOUBLE
45779: EQUAL
45780: IFTRUE 45784
45782: GO 45809
45784: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45785: LD_ADDR_VAR 0 3
45789: PUSH
45790: LD_INT 35
45792: PPUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: CALL_OW 321
45802: PUSH
45803: LD_INT 2
45805: EQUAL
45806: ST_TO_ADDR
45807: GO 45810
45809: POP
// end ;
45810: LD_VAR 0 3
45814: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45815: LD_INT 0
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
// result := false ;
45828: LD_ADDR_VAR 0 6
45832: PUSH
45833: LD_INT 0
45835: ST_TO_ADDR
// if btype = b_depot then
45836: LD_VAR 0 2
45840: PUSH
45841: LD_INT 0
45843: EQUAL
45844: IFFALSE 45856
// begin result := true ;
45846: LD_ADDR_VAR 0 6
45850: PUSH
45851: LD_INT 1
45853: ST_TO_ADDR
// exit ;
45854: GO 46710
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45856: LD_VAR 0 1
45860: NOT
45861: IFTRUE 45886
45863: PUSH
45864: LD_VAR 0 1
45868: PPUSH
45869: CALL_OW 266
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: IN
45884: NOT
45885: OR
45886: IFTRUE 45895
45888: PUSH
45889: LD_VAR 0 2
45893: NOT
45894: OR
45895: IFTRUE 45931
45897: PUSH
45898: LD_VAR 0 5
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 4
45917: PUSH
45918: LD_INT 5
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: IN
45929: NOT
45930: OR
45931: IFTRUE 45950
45933: PUSH
45934: LD_VAR 0 3
45938: PPUSH
45939: LD_VAR 0 4
45943: PPUSH
45944: CALL_OW 488
45948: NOT
45949: OR
45950: IFFALSE 45954
// exit ;
45952: GO 46710
// side := GetSide ( depot ) ;
45954: LD_ADDR_VAR 0 9
45958: PUSH
45959: LD_VAR 0 1
45963: PPUSH
45964: CALL_OW 255
45968: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45969: LD_VAR 0 9
45973: PPUSH
45974: LD_VAR 0 2
45978: PPUSH
45979: CALL 45439 0 2
45983: NOT
45984: IFFALSE 45988
// exit ;
45986: GO 46710
// pom := GetBase ( depot ) ;
45988: LD_ADDR_VAR 0 10
45992: PUSH
45993: LD_VAR 0 1
45997: PPUSH
45998: CALL_OW 274
46002: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46003: LD_ADDR_VAR 0 11
46007: PUSH
46008: LD_VAR 0 2
46012: PPUSH
46013: LD_VAR 0 1
46017: PPUSH
46018: CALL_OW 248
46022: PPUSH
46023: CALL_OW 450
46027: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46028: LD_VAR 0 10
46032: PPUSH
46033: LD_INT 1
46035: PPUSH
46036: CALL_OW 275
46040: PUSH
46041: LD_VAR 0 11
46045: PUSH
46046: LD_INT 1
46048: ARRAY
46049: GREATEREQUAL
46050: IFFALSE 46076
46052: PUSH
46053: LD_VAR 0 10
46057: PPUSH
46058: LD_INT 2
46060: PPUSH
46061: CALL_OW 275
46065: PUSH
46066: LD_VAR 0 11
46070: PUSH
46071: LD_INT 2
46073: ARRAY
46074: GREATEREQUAL
46075: AND
46076: IFFALSE 46102
46078: PUSH
46079: LD_VAR 0 10
46083: PPUSH
46084: LD_INT 3
46086: PPUSH
46087: CALL_OW 275
46091: PUSH
46092: LD_VAR 0 11
46096: PUSH
46097: LD_INT 3
46099: ARRAY
46100: GREATEREQUAL
46101: AND
46102: NOT
46103: IFFALSE 46107
// exit ;
46105: GO 46710
// if GetBType ( depot ) = b_depot then
46107: LD_VAR 0 1
46111: PPUSH
46112: CALL_OW 266
46116: PUSH
46117: LD_INT 0
46119: EQUAL
46120: IFFALSE 46132
// dist := 28 else
46122: LD_ADDR_VAR 0 14
46126: PUSH
46127: LD_INT 28
46129: ST_TO_ADDR
46130: GO 46140
// dist := 36 ;
46132: LD_ADDR_VAR 0 14
46136: PUSH
46137: LD_INT 36
46139: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46140: LD_VAR 0 1
46144: PPUSH
46145: LD_VAR 0 3
46149: PPUSH
46150: LD_VAR 0 4
46154: PPUSH
46155: CALL_OW 297
46159: PUSH
46160: LD_VAR 0 14
46164: GREATER
46165: IFFALSE 46169
// exit ;
46167: GO 46710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46169: LD_ADDR_VAR 0 12
46173: PUSH
46174: LD_VAR 0 2
46178: PPUSH
46179: LD_VAR 0 3
46183: PPUSH
46184: LD_VAR 0 4
46188: PPUSH
46189: LD_VAR 0 5
46193: PPUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: CALL_OW 248
46203: PPUSH
46204: LD_INT 0
46206: PPUSH
46207: CALL 46715 0 6
46211: ST_TO_ADDR
// if not hexes then
46212: LD_VAR 0 12
46216: NOT
46217: IFFALSE 46221
// exit ;
46219: GO 46710
// hex := GetHexInfo ( x , y ) ;
46221: LD_ADDR_VAR 0 15
46225: PUSH
46226: LD_VAR 0 3
46230: PPUSH
46231: LD_VAR 0 4
46235: PPUSH
46236: CALL_OW 546
46240: ST_TO_ADDR
// if hex [ 1 ] then
46241: LD_VAR 0 15
46245: PUSH
46246: LD_INT 1
46248: ARRAY
46249: IFFALSE 46253
// exit ;
46251: GO 46710
// height := hex [ 2 ] ;
46253: LD_ADDR_VAR 0 13
46257: PUSH
46258: LD_VAR 0 15
46262: PUSH
46263: LD_INT 2
46265: ARRAY
46266: ST_TO_ADDR
// for i = 1 to hexes do
46267: LD_ADDR_VAR 0 7
46271: PUSH
46272: DOUBLE
46273: LD_INT 1
46275: DEC
46276: ST_TO_ADDR
46277: LD_VAR 0 12
46281: PUSH
46282: FOR_TO
46283: IFFALSE 46627
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46285: LD_VAR 0 12
46289: PUSH
46290: LD_VAR 0 7
46294: ARRAY
46295: PUSH
46296: LD_INT 1
46298: ARRAY
46299: PPUSH
46300: LD_VAR 0 12
46304: PUSH
46305: LD_VAR 0 7
46309: ARRAY
46310: PUSH
46311: LD_INT 2
46313: ARRAY
46314: PPUSH
46315: CALL_OW 488
46319: NOT
46320: IFTRUE 46362
46322: PUSH
46323: LD_VAR 0 12
46327: PUSH
46328: LD_VAR 0 7
46332: ARRAY
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: PPUSH
46338: LD_VAR 0 12
46342: PUSH
46343: LD_VAR 0 7
46347: ARRAY
46348: PUSH
46349: LD_INT 2
46351: ARRAY
46352: PPUSH
46353: CALL_OW 428
46357: PUSH
46358: LD_INT 0
46360: GREATER
46361: OR
46362: IFTRUE 46400
46364: PUSH
46365: LD_VAR 0 12
46369: PUSH
46370: LD_VAR 0 7
46374: ARRAY
46375: PUSH
46376: LD_INT 1
46378: ARRAY
46379: PPUSH
46380: LD_VAR 0 12
46384: PUSH
46385: LD_VAR 0 7
46389: ARRAY
46390: PUSH
46391: LD_INT 2
46393: ARRAY
46394: PPUSH
46395: CALL_OW 351
46399: OR
46400: IFFALSE 46406
// exit ;
46402: POP
46403: POP
46404: GO 46710
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46406: LD_ADDR_VAR 0 8
46410: PUSH
46411: LD_VAR 0 12
46415: PUSH
46416: LD_VAR 0 7
46420: ARRAY
46421: PUSH
46422: LD_INT 1
46424: ARRAY
46425: PPUSH
46426: LD_VAR 0 12
46430: PUSH
46431: LD_VAR 0 7
46435: ARRAY
46436: PUSH
46437: LD_INT 2
46439: ARRAY
46440: PPUSH
46441: CALL_OW 546
46445: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46446: LD_VAR 0 8
46450: PUSH
46451: LD_INT 1
46453: ARRAY
46454: IFTRUE 46476
46456: PUSH
46457: LD_VAR 0 8
46461: PUSH
46462: LD_INT 2
46464: ARRAY
46465: PUSH
46466: LD_VAR 0 13
46470: PUSH
46471: LD_INT 2
46473: PLUS
46474: GREATER
46475: OR
46476: IFTRUE 46498
46478: PUSH
46479: LD_VAR 0 8
46483: PUSH
46484: LD_INT 2
46486: ARRAY
46487: PUSH
46488: LD_VAR 0 13
46492: PUSH
46493: LD_INT 2
46495: MINUS
46496: LESS
46497: OR
46498: IFTRUE 46566
46500: PUSH
46501: LD_VAR 0 8
46505: PUSH
46506: LD_INT 3
46508: ARRAY
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 8
46515: PUSH
46516: LD_INT 9
46518: PUSH
46519: LD_INT 10
46521: PUSH
46522: LD_INT 11
46524: PUSH
46525: LD_INT 12
46527: PUSH
46528: LD_INT 13
46530: PUSH
46531: LD_INT 16
46533: PUSH
46534: LD_INT 17
46536: PUSH
46537: LD_INT 18
46539: PUSH
46540: LD_INT 19
46542: PUSH
46543: LD_INT 20
46545: PUSH
46546: LD_INT 21
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: IN
46564: NOT
46565: OR
46566: IFTRUE 46579
46568: PUSH
46569: LD_VAR 0 8
46573: PUSH
46574: LD_INT 5
46576: ARRAY
46577: NOT
46578: OR
46579: IFTRUE 46619
46581: PUSH
46582: LD_VAR 0 8
46586: PUSH
46587: LD_INT 6
46589: ARRAY
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 7
46599: PUSH
46600: LD_INT 9
46602: PUSH
46603: LD_INT 10
46605: PUSH
46606: LD_INT 11
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: IN
46617: NOT
46618: OR
46619: IFFALSE 46625
// exit ;
46621: POP
46622: POP
46623: GO 46710
// end ;
46625: GO 46282
46627: POP
46628: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46629: LD_VAR 0 9
46633: PPUSH
46634: LD_VAR 0 3
46638: PPUSH
46639: LD_VAR 0 4
46643: PPUSH
46644: LD_INT 20
46646: PPUSH
46647: CALL 38529 0 4
46651: PUSH
46652: LD_INT 4
46654: ARRAY
46655: IFFALSE 46659
// exit ;
46657: GO 46710
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46659: LD_VAR 0 2
46663: PUSH
46664: LD_INT 29
46666: PUSH
46667: LD_INT 30
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: IN
46674: IFFALSE 46698
46676: PUSH
46677: LD_VAR 0 3
46681: PPUSH
46682: LD_VAR 0 4
46686: PPUSH
46687: LD_VAR 0 9
46691: PPUSH
46692: CALL_OW 440
46696: NOT
46697: AND
46698: IFFALSE 46702
// exit ;
46700: GO 46710
// result := true ;
46702: LD_ADDR_VAR 0 6
46706: PUSH
46707: LD_INT 1
46709: ST_TO_ADDR
// end ;
46710: LD_VAR 0 6
46714: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46715: LD_INT 0
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
46732: PPUSH
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
46771: PPUSH
46772: PPUSH
46773: PPUSH
46774: PPUSH
// result = [ ] ;
46775: LD_ADDR_VAR 0 7
46779: PUSH
46780: EMPTY
46781: ST_TO_ADDR
// temp_list = [ ] ;
46782: LD_ADDR_VAR 0 9
46786: PUSH
46787: EMPTY
46788: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46789: LD_VAR 0 4
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: LD_INT 4
46808: PUSH
46809: LD_INT 5
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: IN
46820: NOT
46821: IFTRUE 46864
46823: PUSH
46824: LD_VAR 0 1
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: IN
46839: IFFALSE 46863
46841: PUSH
46842: LD_VAR 0 5
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: IN
46861: NOT
46862: AND
46863: OR
46864: IFFALSE 46868
// exit ;
46866: GO 65267
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46868: LD_VAR 0 1
46872: PUSH
46873: LD_INT 6
46875: PUSH
46876: LD_INT 7
46878: PUSH
46879: LD_INT 8
46881: PUSH
46882: LD_INT 13
46884: PUSH
46885: LD_INT 12
46887: PUSH
46888: LD_INT 15
46890: PUSH
46891: LD_INT 11
46893: PUSH
46894: LD_INT 14
46896: PUSH
46897: LD_INT 10
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: IN
46911: IFFALSE 46921
// btype = b_lab ;
46913: LD_ADDR_VAR 0 1
46917: PUSH
46918: LD_INT 6
46920: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46921: LD_VAR 0 6
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: IN
46940: NOT
46941: IFTRUE 47009
46943: PUSH
46944: LD_VAR 0 1
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 6
46963: PUSH
46964: LD_INT 36
46966: PUSH
46967: LD_INT 4
46969: PUSH
46970: LD_INT 5
46972: PUSH
46973: LD_INT 31
46975: PUSH
46976: LD_INT 32
46978: PUSH
46979: LD_INT 33
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: IN
46995: NOT
46996: IFFALSE 47008
46998: PUSH
46999: LD_VAR 0 6
47003: PUSH
47004: LD_INT 1
47006: EQUAL
47007: AND
47008: OR
47009: IFTRUE 47041
47011: PUSH
47012: LD_VAR 0 1
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: IN
47027: NOT
47028: IFFALSE 47040
47030: PUSH
47031: LD_VAR 0 6
47035: PUSH
47036: LD_INT 2
47038: EQUAL
47039: AND
47040: OR
47041: IFFALSE 47051
// mode = 0 ;
47043: LD_ADDR_VAR 0 6
47047: PUSH
47048: LD_INT 0
47050: ST_TO_ADDR
// case mode of 0 :
47051: LD_VAR 0 6
47055: PUSH
47056: LD_INT 0
47058: DOUBLE
47059: EQUAL
47060: IFTRUE 47064
47062: GO 58517
47064: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47065: LD_ADDR_VAR 0 11
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47258: LD_ADDR_VAR 0 12
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47454: LD_ADDR_VAR 0 13
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47653: LD_ADDR_VAR 0 14
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47849: LD_ADDR_VAR 0 15
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48042: LD_ADDR_VAR 0 16
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48235: LD_ADDR_VAR 0 17
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48465: LD_ADDR_VAR 0 18
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48695: LD_ADDR_VAR 0 19
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48925: LD_ADDR_VAR 0 20
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49155: LD_ADDR_VAR 0 21
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49385: LD_ADDR_VAR 0 22
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 23
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 3
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49895: LD_ADDR_VAR 0 24
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50171: LD_ADDR_VAR 0 25
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50445: LD_ADDR_VAR 0 26
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50721: LD_ADDR_VAR 0 27
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51001: LD_ADDR_VAR 0 28
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51283: LD_ADDR_VAR 0 29
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51562: LD_ADDR_VAR 0 30
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51840: LD_ADDR_VAR 0 31
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52118: LD_ADDR_VAR 0 32
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 3
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52396: LD_ADDR_VAR 0 33
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52675: LD_ADDR_VAR 0 34
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52955: LD_ADDR_VAR 0 35
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53067: LD_ADDR_VAR 0 36
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53179: LD_ADDR_VAR 0 37
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53291: LD_ADDR_VAR 0 38
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53403: LD_ADDR_VAR 0 39
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53515: LD_ADDR_VAR 0 40
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53627: LD_ADDR_VAR 0 41
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53977: LD_ADDR_VAR 0 42
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54327: LD_ADDR_VAR 0 43
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54675: LD_ADDR_VAR 0 44
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55025: LD_ADDR_VAR 0 45
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55375: LD_ADDR_VAR 0 46
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55723: LD_ADDR_VAR 0 47
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55874: LD_ADDR_VAR 0 48
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56021: LD_ADDR_VAR 0 49
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56165: LD_ADDR_VAR 0 50
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56309: LD_ADDR_VAR 0 51
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56456: LD_ADDR_VAR 0 52
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56607: LD_ADDR_VAR 0 53
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56837: LD_ADDR_VAR 0 54
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57067: LD_ADDR_VAR 0 55
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57297: LD_ADDR_VAR 0 56
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57527: LD_ADDR_VAR 0 57
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57757: LD_ADDR_VAR 0 58
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57987: LD_ADDR_VAR 0 59
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58075: LD_ADDR_VAR 0 60
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58163: LD_ADDR_VAR 0 61
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58251: LD_ADDR_VAR 0 62
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58339: LD_ADDR_VAR 0 63
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58427: LD_ADDR_VAR 0 64
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// end ; 1 :
58515: GO 64412
58517: LD_INT 1
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58525
58523: GO 61148
58525: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58526: LD_ADDR_VAR 0 11
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: LIST
58569: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58570: LD_ADDR_VAR 0 12
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58611: LD_ADDR_VAR 0 13
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58651: LD_ADDR_VAR 0 14
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58692: LD_ADDR_VAR 0 15
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58736: LD_ADDR_VAR 0 16
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58782: LD_ADDR_VAR 0 17
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58826: LD_ADDR_VAR 0 18
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58867: LD_ADDR_VAR 0 19
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58907: LD_ADDR_VAR 0 20
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58948: LD_ADDR_VAR 0 21
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58992: LD_ADDR_VAR 0 22
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59038: LD_ADDR_VAR 0 23
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 3
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 4
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59082: LD_ADDR_VAR 0 24
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59123: LD_ADDR_VAR 0 25
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 4
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59163: LD_ADDR_VAR 0 26
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59204: LD_ADDR_VAR 0 27
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 4
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59248: LD_ADDR_VAR 0 28
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 4
59279: NEG
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59294: LD_ADDR_VAR 0 29
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 4
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 5
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 6
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 6
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59449: LD_ADDR_VAR 0 30
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 4
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 5
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 5
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 6
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 6
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59592: LD_ADDR_VAR 0 31
59596: PUSH
59597: LD_INT 3
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 3
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 4
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 5
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 5
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: LD_INT 5
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 6
59689: PUSH
59690: LD_INT 5
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 6
59699: PUSH
59700: LD_INT 6
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 6
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59731: LD_ADDR_VAR 0 32
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 3
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 5
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 4
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 6
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 6
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59874: LD_ADDR_VAR 0 33
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 3
59892: NEG
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 4
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 5
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 5
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 5
59983: NEG
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 6
59994: NEG
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 6
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60029: LD_ADDR_VAR 0 34
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 4
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 4
60084: NEG
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: LD_INT 4
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 4
60108: NEG
60109: PUSH
60110: LD_INT 5
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: LD_INT 4
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 5
60132: NEG
60133: PUSH
60134: LD_INT 5
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 6
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 6
60156: NEG
60157: PUSH
60158: LD_INT 5
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 6
60168: NEG
60169: PUSH
60170: LD_INT 6
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60192: LD_ADDR_VAR 0 41
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60236: LD_ADDR_VAR 0 42
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60277: LD_ADDR_VAR 0 43
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60317: LD_ADDR_VAR 0 44
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60358: LD_ADDR_VAR 0 45
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60402: LD_ADDR_VAR 0 46
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60448: LD_ADDR_VAR 0 47
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60481: LD_ADDR_VAR 0 48
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60512: LD_ADDR_VAR 0 49
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60541: LD_ADDR_VAR 0 50
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60570: LD_ADDR_VAR 0 51
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60601: LD_ADDR_VAR 0 52
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60634: LD_ADDR_VAR 0 53
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60678: LD_ADDR_VAR 0 54
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60719: LD_ADDR_VAR 0 55
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: LD_INT 3
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60759: LD_ADDR_VAR 0 56
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60800: LD_ADDR_VAR 0 57
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60844: LD_ADDR_VAR 0 58
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60890: LD_ADDR_VAR 0 59
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60934: LD_ADDR_VAR 0 60
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60975: LD_ADDR_VAR 0 61
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61015: LD_ADDR_VAR 0 62
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61056: LD_ADDR_VAR 0 63
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61100: LD_ADDR_VAR 0 64
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// end ; 2 :
61146: GO 64412
61148: LD_INT 2
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61156
61154: GO 64411
61156: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61157: LD_ADDR_VAR 0 29
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 4
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 5
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 4
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 5
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 5
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 4
61496: NEG
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 4
61519: NEG
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 4
61542: NEG
61543: PUSH
61544: LD_INT 4
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 4
61554: NEG
61555: PUSH
61556: LD_INT 5
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: NEG
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: NEG
61603: PUSH
61604: LD_INT 4
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: LD_INT 5
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: LD_INT 5
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61695: LD_ADDR_VAR 0 30
61699: PUSH
61700: LD_INT 4
61702: PUSH
61703: LD_INT 4
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 4
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 5
61722: PUSH
61723: LD_INT 4
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 5
61732: PUSH
61733: LD_INT 5
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 4
61742: PUSH
61743: LD_INT 5
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: LD_INT 4
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 5
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: LD_INT 5
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 4
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 4
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 4
61885: NEG
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 4
61896: NEG
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 5
61941: NEG
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 5
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 5
61964: NEG
61965: PUSH
61966: LD_INT 2
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: LD_INT 3
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 4
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: NEG
62024: PUSH
62025: LD_INT 2
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 4
62047: NEG
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 4
62059: NEG
62060: PUSH
62061: LD_INT 4
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 4
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 4
62083: NEG
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 4
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 5
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 4
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 5
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62242: LD_ADDR_VAR 0 31
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 5
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 5
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 4
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: LD_INT 5
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 3
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 4
62398: NEG
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 4
62409: NEG
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 4
62421: NEG
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 4
62444: NEG
62445: PUSH
62446: LD_INT 4
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 4
62456: NEG
62457: PUSH
62458: LD_INT 5
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: LD_INT 4
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: LD_INT 3
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 5
62504: NEG
62505: PUSH
62506: LD_INT 4
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 5
62516: NEG
62517: PUSH
62518: LD_INT 5
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: NEG
62529: PUSH
62530: LD_INT 5
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 3
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 4
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: LD_INT 4
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 4
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 5
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 5
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 5
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62792: LD_ADDR_VAR 0 32
62796: PUSH
62797: LD_INT 4
62799: NEG
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 4
62810: NEG
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: NEG
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: NEG
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 5
62855: NEG
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 5
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: NEG
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: LD_INT 4
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 4
62961: NEG
62962: PUSH
62963: LD_INT 3
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 4
62973: NEG
62974: PUSH
62975: LD_INT 4
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 2
62985: NEG
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 4
62997: NEG
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 4
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 5
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 3
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 4
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: LD_INT 5
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: LD_INT 3
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 5
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 4
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 4
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 5
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 5
63234: PUSH
63235: LD_INT 5
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 4
63244: PUSH
63245: LD_INT 5
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 3
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 5
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63339: LD_ADDR_VAR 0 33
63343: PUSH
63344: LD_INT 4
63346: NEG
63347: PUSH
63348: LD_INT 4
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 4
63358: NEG
63359: PUSH
63360: LD_INT 5
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: LD_INT 4
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: NEG
63383: PUSH
63384: LD_INT 3
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 4
63394: NEG
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 5
63406: NEG
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 5
63418: NEG
63419: PUSH
63420: LD_INT 5
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: LD_INT 5
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 5
63442: NEG
63443: PUSH
63444: LD_INT 3
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 3
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 4
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 4
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 4
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 4
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 5
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 5
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 4
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: LD_INT 2
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 5
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 3
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 4
63669: PUSH
63670: LD_INT 3
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 4
63679: PUSH
63680: LD_INT 4
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: PUSH
63690: LD_INT 4
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 4
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 5
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 5
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 4
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63877: LD_ADDR_VAR 0 34
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 4
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 5
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 4
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 3
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 4
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: PUSH
63964: LD_INT 3
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 3
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 4
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 4
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 4
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 5
64099: PUSH
64100: LD_INT 4
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 5
64109: PUSH
64110: LD_INT 5
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: PUSH
64120: LD_INT 5
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 5
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: PUSH
64160: LD_INT 5
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: LD_INT 4
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 4
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: NEG
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 4
64262: NEG
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 4
64273: NEG
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 4
64307: NEG
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 5
64318: NEG
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 5
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 5
64341: NEG
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// end ; end ;
64409: GO 64412
64411: POP
// case btype of b_depot , b_warehouse :
64412: LD_VAR 0 1
64416: PUSH
64417: LD_INT 0
64419: DOUBLE
64420: EQUAL
64421: IFTRUE 64431
64423: LD_INT 1
64425: DOUBLE
64426: EQUAL
64427: IFTRUE 64431
64429: GO 64632
64431: POP
// case nation of nation_american :
64432: LD_VAR 0 5
64436: PUSH
64437: LD_INT 1
64439: DOUBLE
64440: EQUAL
64441: IFTRUE 64445
64443: GO 64501
64445: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64446: LD_ADDR_VAR 0 9
64450: PUSH
64451: LD_VAR 0 11
64455: PUSH
64456: LD_VAR 0 12
64460: PUSH
64461: LD_VAR 0 13
64465: PUSH
64466: LD_VAR 0 14
64470: PUSH
64471: LD_VAR 0 15
64475: PUSH
64476: LD_VAR 0 16
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: PUSH
64489: LD_VAR 0 4
64493: PUSH
64494: LD_INT 1
64496: PLUS
64497: ARRAY
64498: ST_TO_ADDR
64499: GO 64630
64501: LD_INT 2
64503: DOUBLE
64504: EQUAL
64505: IFTRUE 64509
64507: GO 64565
64509: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64510: LD_ADDR_VAR 0 9
64514: PUSH
64515: LD_VAR 0 17
64519: PUSH
64520: LD_VAR 0 18
64524: PUSH
64525: LD_VAR 0 19
64529: PUSH
64530: LD_VAR 0 20
64534: PUSH
64535: LD_VAR 0 21
64539: PUSH
64540: LD_VAR 0 22
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_VAR 0 4
64557: PUSH
64558: LD_INT 1
64560: PLUS
64561: ARRAY
64562: ST_TO_ADDR
64563: GO 64630
64565: LD_INT 3
64567: DOUBLE
64568: EQUAL
64569: IFTRUE 64573
64571: GO 64629
64573: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64574: LD_ADDR_VAR 0 9
64578: PUSH
64579: LD_VAR 0 23
64583: PUSH
64584: LD_VAR 0 24
64588: PUSH
64589: LD_VAR 0 25
64593: PUSH
64594: LD_VAR 0 26
64598: PUSH
64599: LD_VAR 0 27
64603: PUSH
64604: LD_VAR 0 28
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: PUSH
64617: LD_VAR 0 4
64621: PUSH
64622: LD_INT 1
64624: PLUS
64625: ARRAY
64626: ST_TO_ADDR
64627: GO 64630
64629: POP
64630: GO 65185
64632: LD_INT 2
64634: DOUBLE
64635: EQUAL
64636: IFTRUE 64646
64638: LD_INT 3
64640: DOUBLE
64641: EQUAL
64642: IFTRUE 64646
64644: GO 64702
64646: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64647: LD_ADDR_VAR 0 9
64651: PUSH
64652: LD_VAR 0 29
64656: PUSH
64657: LD_VAR 0 30
64661: PUSH
64662: LD_VAR 0 31
64666: PUSH
64667: LD_VAR 0 32
64671: PUSH
64672: LD_VAR 0 33
64676: PUSH
64677: LD_VAR 0 34
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: PUSH
64690: LD_VAR 0 4
64694: PUSH
64695: LD_INT 1
64697: PLUS
64698: ARRAY
64699: ST_TO_ADDR
64700: GO 65185
64702: LD_INT 16
64704: DOUBLE
64705: EQUAL
64706: IFTRUE 64764
64708: LD_INT 17
64710: DOUBLE
64711: EQUAL
64712: IFTRUE 64764
64714: LD_INT 18
64716: DOUBLE
64717: EQUAL
64718: IFTRUE 64764
64720: LD_INT 19
64722: DOUBLE
64723: EQUAL
64724: IFTRUE 64764
64726: LD_INT 22
64728: DOUBLE
64729: EQUAL
64730: IFTRUE 64764
64732: LD_INT 20
64734: DOUBLE
64735: EQUAL
64736: IFTRUE 64764
64738: LD_INT 21
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64764
64744: LD_INT 23
64746: DOUBLE
64747: EQUAL
64748: IFTRUE 64764
64750: LD_INT 24
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64764
64756: LD_INT 25
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64820
64764: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64765: LD_ADDR_VAR 0 9
64769: PUSH
64770: LD_VAR 0 35
64774: PUSH
64775: LD_VAR 0 36
64779: PUSH
64780: LD_VAR 0 37
64784: PUSH
64785: LD_VAR 0 38
64789: PUSH
64790: LD_VAR 0 39
64794: PUSH
64795: LD_VAR 0 40
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: LD_VAR 0 4
64812: PUSH
64813: LD_INT 1
64815: PLUS
64816: ARRAY
64817: ST_TO_ADDR
64818: GO 65185
64820: LD_INT 6
64822: DOUBLE
64823: EQUAL
64824: IFTRUE 64876
64826: LD_INT 7
64828: DOUBLE
64829: EQUAL
64830: IFTRUE 64876
64832: LD_INT 8
64834: DOUBLE
64835: EQUAL
64836: IFTRUE 64876
64838: LD_INT 13
64840: DOUBLE
64841: EQUAL
64842: IFTRUE 64876
64844: LD_INT 12
64846: DOUBLE
64847: EQUAL
64848: IFTRUE 64876
64850: LD_INT 15
64852: DOUBLE
64853: EQUAL
64854: IFTRUE 64876
64856: LD_INT 11
64858: DOUBLE
64859: EQUAL
64860: IFTRUE 64876
64862: LD_INT 14
64864: DOUBLE
64865: EQUAL
64866: IFTRUE 64876
64868: LD_INT 10
64870: DOUBLE
64871: EQUAL
64872: IFTRUE 64876
64874: GO 64932
64876: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64877: LD_ADDR_VAR 0 9
64881: PUSH
64882: LD_VAR 0 41
64886: PUSH
64887: LD_VAR 0 42
64891: PUSH
64892: LD_VAR 0 43
64896: PUSH
64897: LD_VAR 0 44
64901: PUSH
64902: LD_VAR 0 45
64906: PUSH
64907: LD_VAR 0 46
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 4
64924: PUSH
64925: LD_INT 1
64927: PLUS
64928: ARRAY
64929: ST_TO_ADDR
64930: GO 65185
64932: LD_INT 36
64934: DOUBLE
64935: EQUAL
64936: IFTRUE 64940
64938: GO 64996
64940: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64941: LD_ADDR_VAR 0 9
64945: PUSH
64946: LD_VAR 0 47
64950: PUSH
64951: LD_VAR 0 48
64955: PUSH
64956: LD_VAR 0 49
64960: PUSH
64961: LD_VAR 0 50
64965: PUSH
64966: LD_VAR 0 51
64970: PUSH
64971: LD_VAR 0 52
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: PUSH
64984: LD_VAR 0 4
64988: PUSH
64989: LD_INT 1
64991: PLUS
64992: ARRAY
64993: ST_TO_ADDR
64994: GO 65185
64996: LD_INT 4
64998: DOUBLE
64999: EQUAL
65000: IFTRUE 65022
65002: LD_INT 5
65004: DOUBLE
65005: EQUAL
65006: IFTRUE 65022
65008: LD_INT 34
65010: DOUBLE
65011: EQUAL
65012: IFTRUE 65022
65014: LD_INT 37
65016: DOUBLE
65017: EQUAL
65018: IFTRUE 65022
65020: GO 65078
65022: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65023: LD_ADDR_VAR 0 9
65027: PUSH
65028: LD_VAR 0 53
65032: PUSH
65033: LD_VAR 0 54
65037: PUSH
65038: LD_VAR 0 55
65042: PUSH
65043: LD_VAR 0 56
65047: PUSH
65048: LD_VAR 0 57
65052: PUSH
65053: LD_VAR 0 58
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: LD_VAR 0 4
65070: PUSH
65071: LD_INT 1
65073: PLUS
65074: ARRAY
65075: ST_TO_ADDR
65076: GO 65185
65078: LD_INT 31
65080: DOUBLE
65081: EQUAL
65082: IFTRUE 65128
65084: LD_INT 32
65086: DOUBLE
65087: EQUAL
65088: IFTRUE 65128
65090: LD_INT 33
65092: DOUBLE
65093: EQUAL
65094: IFTRUE 65128
65096: LD_INT 27
65098: DOUBLE
65099: EQUAL
65100: IFTRUE 65128
65102: LD_INT 26
65104: DOUBLE
65105: EQUAL
65106: IFTRUE 65128
65108: LD_INT 28
65110: DOUBLE
65111: EQUAL
65112: IFTRUE 65128
65114: LD_INT 29
65116: DOUBLE
65117: EQUAL
65118: IFTRUE 65128
65120: LD_INT 30
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65128
65126: GO 65184
65128: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65129: LD_ADDR_VAR 0 9
65133: PUSH
65134: LD_VAR 0 59
65138: PUSH
65139: LD_VAR 0 60
65143: PUSH
65144: LD_VAR 0 61
65148: PUSH
65149: LD_VAR 0 62
65153: PUSH
65154: LD_VAR 0 63
65158: PUSH
65159: LD_VAR 0 64
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: PUSH
65172: LD_VAR 0 4
65176: PUSH
65177: LD_INT 1
65179: PLUS
65180: ARRAY
65181: ST_TO_ADDR
65182: GO 65185
65184: POP
// temp_list2 = [ ] ;
65185: LD_ADDR_VAR 0 10
65189: PUSH
65190: EMPTY
65191: ST_TO_ADDR
// for i in temp_list do
65192: LD_ADDR_VAR 0 8
65196: PUSH
65197: LD_VAR 0 9
65201: PUSH
65202: FOR_IN
65203: IFFALSE 65255
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65205: LD_ADDR_VAR 0 10
65209: PUSH
65210: LD_VAR 0 10
65214: PUSH
65215: LD_VAR 0 8
65219: PUSH
65220: LD_INT 1
65222: ARRAY
65223: PUSH
65224: LD_VAR 0 2
65228: PLUS
65229: PUSH
65230: LD_VAR 0 8
65234: PUSH
65235: LD_INT 2
65237: ARRAY
65238: PUSH
65239: LD_VAR 0 3
65243: PLUS
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: ADD
65252: ST_TO_ADDR
65253: GO 65202
65255: POP
65256: POP
// result = temp_list2 ;
65257: LD_ADDR_VAR 0 7
65261: PUSH
65262: LD_VAR 0 10
65266: ST_TO_ADDR
// end ;
65267: LD_VAR 0 7
65271: RET
// export function EnemyInRange ( unit , dist ) ; begin
65272: LD_INT 0
65274: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65275: LD_ADDR_VAR 0 3
65279: PUSH
65280: LD_VAR 0 1
65284: PPUSH
65285: CALL_OW 255
65289: PPUSH
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 250
65299: PPUSH
65300: LD_VAR 0 1
65304: PPUSH
65305: CALL_OW 251
65309: PPUSH
65310: LD_VAR 0 2
65314: PPUSH
65315: CALL 38529 0 4
65319: PUSH
65320: LD_INT 4
65322: ARRAY
65323: ST_TO_ADDR
// end ;
65324: LD_VAR 0 3
65328: RET
// export function PlayerSeeMe ( unit ) ; begin
65329: LD_INT 0
65331: PPUSH
// result := See ( your_side , unit ) ;
65332: LD_ADDR_VAR 0 2
65336: PUSH
65337: LD_OWVAR 2
65341: PPUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: CALL_OW 292
65351: ST_TO_ADDR
// end ;
65352: LD_VAR 0 2
65356: RET
// export function ReverseDir ( unit ) ; begin
65357: LD_INT 0
65359: PPUSH
// if not unit then
65360: LD_VAR 0 1
65364: NOT
65365: IFFALSE 65369
// exit ;
65367: GO 65392
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65369: LD_ADDR_VAR 0 2
65373: PUSH
65374: LD_VAR 0 1
65378: PPUSH
65379: CALL_OW 254
65383: PUSH
65384: LD_INT 3
65386: PLUS
65387: PUSH
65388: LD_INT 6
65390: MOD
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 2
65396: RET
// export function ReverseArray ( array ) ; var i ; begin
65397: LD_INT 0
65399: PPUSH
65400: PPUSH
// if not array then
65401: LD_VAR 0 1
65405: NOT
65406: IFFALSE 65410
// exit ;
65408: GO 65465
// result := [ ] ;
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: EMPTY
65416: ST_TO_ADDR
// for i := array downto 1 do
65417: LD_ADDR_VAR 0 3
65421: PUSH
65422: DOUBLE
65423: LD_VAR 0 1
65427: INC
65428: ST_TO_ADDR
65429: LD_INT 1
65431: PUSH
65432: FOR_DOWNTO
65433: IFFALSE 65463
// result := Join ( result , array [ i ] ) ;
65435: LD_ADDR_VAR 0 2
65439: PUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: LD_VAR 0 1
65449: PUSH
65450: LD_VAR 0 3
65454: ARRAY
65455: PPUSH
65456: CALL 70317 0 2
65460: ST_TO_ADDR
65461: GO 65432
65463: POP
65464: POP
// end ;
65465: LD_VAR 0 2
65469: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65470: LD_INT 0
65472: PPUSH
65473: PPUSH
65474: PPUSH
65475: PPUSH
65476: PPUSH
65477: PPUSH
// if not unit or not hexes then
65478: LD_VAR 0 1
65482: NOT
65483: IFTRUE 65492
65485: PUSH
65486: LD_VAR 0 2
65490: NOT
65491: OR
65492: IFFALSE 65496
// exit ;
65494: GO 65619
// dist := 9999 ;
65496: LD_ADDR_VAR 0 5
65500: PUSH
65501: LD_INT 9999
65503: ST_TO_ADDR
// for i = 1 to hexes do
65504: LD_ADDR_VAR 0 4
65508: PUSH
65509: DOUBLE
65510: LD_INT 1
65512: DEC
65513: ST_TO_ADDR
65514: LD_VAR 0 2
65518: PUSH
65519: FOR_TO
65520: IFFALSE 65607
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65522: LD_ADDR_VAR 0 6
65526: PUSH
65527: LD_VAR 0 1
65531: PPUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_VAR 0 4
65541: ARRAY
65542: PUSH
65543: LD_INT 1
65545: ARRAY
65546: PPUSH
65547: LD_VAR 0 2
65551: PUSH
65552: LD_VAR 0 4
65556: ARRAY
65557: PUSH
65558: LD_INT 2
65560: ARRAY
65561: PPUSH
65562: CALL_OW 297
65566: ST_TO_ADDR
// if tdist < dist then
65567: LD_VAR 0 6
65571: PUSH
65572: LD_VAR 0 5
65576: LESS
65577: IFFALSE 65605
// begin hex := hexes [ i ] ;
65579: LD_ADDR_VAR 0 8
65583: PUSH
65584: LD_VAR 0 2
65588: PUSH
65589: LD_VAR 0 4
65593: ARRAY
65594: ST_TO_ADDR
// dist := tdist ;
65595: LD_ADDR_VAR 0 5
65599: PUSH
65600: LD_VAR 0 6
65604: ST_TO_ADDR
// end ; end ;
65605: GO 65519
65607: POP
65608: POP
// result := hex ;
65609: LD_ADDR_VAR 0 3
65613: PUSH
65614: LD_VAR 0 8
65618: ST_TO_ADDR
// end ;
65619: LD_VAR 0 3
65623: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65624: LD_INT 0
65626: PPUSH
65627: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65628: LD_VAR 0 1
65632: NOT
65633: IFTRUE 65672
65635: PUSH
65636: LD_VAR 0 1
65640: PUSH
65641: LD_INT 21
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 23
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PPUSH
65665: CALL_OW 69
65669: IN
65670: NOT
65671: OR
65672: IFFALSE 65676
// exit ;
65674: GO 65723
// for i = 1 to 3 do
65676: LD_ADDR_VAR 0 3
65680: PUSH
65681: DOUBLE
65682: LD_INT 1
65684: DEC
65685: ST_TO_ADDR
65686: LD_INT 3
65688: PUSH
65689: FOR_TO
65690: IFFALSE 65721
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65692: LD_VAR 0 1
65696: PPUSH
65697: CALL_OW 250
65701: PPUSH
65702: LD_VAR 0 1
65706: PPUSH
65707: CALL_OW 251
65711: PPUSH
65712: LD_INT 1
65714: PPUSH
65715: CALL_OW 453
65719: GO 65689
65721: POP
65722: POP
// end ;
65723: LD_VAR 0 2
65727: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65728: LD_INT 0
65730: PPUSH
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
65735: PPUSH
// if not unit or not enemy_unit then
65736: LD_VAR 0 1
65740: NOT
65741: IFTRUE 65750
65743: PUSH
65744: LD_VAR 0 2
65748: NOT
65749: OR
65750: IFFALSE 65754
// exit ;
65752: GO 66235
// if GetLives ( i ) < 250 then
65754: LD_VAR 0 4
65758: PPUSH
65759: CALL_OW 256
65763: PUSH
65764: LD_INT 250
65766: LESS
65767: IFFALSE 65780
// begin ComAutodestruct ( i ) ;
65769: LD_VAR 0 4
65773: PPUSH
65774: CALL 65624 0 1
// exit ;
65778: GO 66235
// end ; x := GetX ( enemy_unit ) ;
65780: LD_ADDR_VAR 0 7
65784: PUSH
65785: LD_VAR 0 2
65789: PPUSH
65790: CALL_OW 250
65794: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65795: LD_ADDR_VAR 0 8
65799: PUSH
65800: LD_VAR 0 2
65804: PPUSH
65805: CALL_OW 251
65809: ST_TO_ADDR
// if not x or not y then
65810: LD_VAR 0 7
65814: NOT
65815: IFTRUE 65824
65817: PUSH
65818: LD_VAR 0 8
65822: NOT
65823: OR
65824: IFFALSE 65828
// exit ;
65826: GO 66235
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65828: LD_ADDR_VAR 0 6
65832: PUSH
65833: LD_VAR 0 7
65837: PPUSH
65838: LD_INT 0
65840: PPUSH
65841: LD_INT 4
65843: PPUSH
65844: CALL_OW 272
65848: PUSH
65849: LD_VAR 0 8
65853: PPUSH
65854: LD_INT 0
65856: PPUSH
65857: LD_INT 4
65859: PPUSH
65860: CALL_OW 273
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_VAR 0 7
65873: PPUSH
65874: LD_INT 1
65876: PPUSH
65877: LD_INT 4
65879: PPUSH
65880: CALL_OW 272
65884: PUSH
65885: LD_VAR 0 8
65889: PPUSH
65890: LD_INT 1
65892: PPUSH
65893: LD_INT 4
65895: PPUSH
65896: CALL_OW 273
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_VAR 0 7
65909: PPUSH
65910: LD_INT 2
65912: PPUSH
65913: LD_INT 4
65915: PPUSH
65916: CALL_OW 272
65920: PUSH
65921: LD_VAR 0 8
65925: PPUSH
65926: LD_INT 2
65928: PPUSH
65929: LD_INT 4
65931: PPUSH
65932: CALL_OW 273
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_VAR 0 7
65945: PPUSH
65946: LD_INT 3
65948: PPUSH
65949: LD_INT 4
65951: PPUSH
65952: CALL_OW 272
65956: PUSH
65957: LD_VAR 0 8
65961: PPUSH
65962: LD_INT 3
65964: PPUSH
65965: LD_INT 4
65967: PPUSH
65968: CALL_OW 273
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_VAR 0 7
65981: PPUSH
65982: LD_INT 4
65984: PPUSH
65985: LD_INT 4
65987: PPUSH
65988: CALL_OW 272
65992: PUSH
65993: LD_VAR 0 8
65997: PPUSH
65998: LD_INT 4
66000: PPUSH
66001: LD_INT 4
66003: PPUSH
66004: CALL_OW 273
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_VAR 0 7
66017: PPUSH
66018: LD_INT 5
66020: PPUSH
66021: LD_INT 4
66023: PPUSH
66024: CALL_OW 272
66028: PUSH
66029: LD_VAR 0 8
66033: PPUSH
66034: LD_INT 5
66036: PPUSH
66037: LD_INT 4
66039: PPUSH
66040: CALL_OW 273
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// for i = tmp downto 1 do
66057: LD_ADDR_VAR 0 4
66061: PUSH
66062: DOUBLE
66063: LD_VAR 0 6
66067: INC
66068: ST_TO_ADDR
66069: LD_INT 1
66071: PUSH
66072: FOR_DOWNTO
66073: IFFALSE 66176
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66075: LD_VAR 0 6
66079: PUSH
66080: LD_VAR 0 4
66084: ARRAY
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PPUSH
66090: LD_VAR 0 6
66094: PUSH
66095: LD_VAR 0 4
66099: ARRAY
66100: PUSH
66101: LD_INT 2
66103: ARRAY
66104: PPUSH
66105: CALL_OW 488
66109: NOT
66110: IFTRUE 66152
66112: PUSH
66113: LD_VAR 0 6
66117: PUSH
66118: LD_VAR 0 4
66122: ARRAY
66123: PUSH
66124: LD_INT 1
66126: ARRAY
66127: PPUSH
66128: LD_VAR 0 6
66132: PUSH
66133: LD_VAR 0 4
66137: ARRAY
66138: PUSH
66139: LD_INT 2
66141: ARRAY
66142: PPUSH
66143: CALL_OW 428
66147: PUSH
66148: LD_INT 0
66150: NONEQUAL
66151: OR
66152: IFFALSE 66174
// tmp := Delete ( tmp , i ) ;
66154: LD_ADDR_VAR 0 6
66158: PUSH
66159: LD_VAR 0 6
66163: PPUSH
66164: LD_VAR 0 4
66168: PPUSH
66169: CALL_OW 3
66173: ST_TO_ADDR
66174: GO 66072
66176: POP
66177: POP
// j := GetClosestHex ( unit , tmp ) ;
66178: LD_ADDR_VAR 0 5
66182: PUSH
66183: LD_VAR 0 1
66187: PPUSH
66188: LD_VAR 0 6
66192: PPUSH
66193: CALL 65470 0 2
66197: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66198: LD_VAR 0 1
66202: PPUSH
66203: LD_VAR 0 5
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PPUSH
66212: LD_VAR 0 5
66216: PUSH
66217: LD_INT 2
66219: ARRAY
66220: PPUSH
66221: CALL_OW 111
// result := j ;
66225: LD_ADDR_VAR 0 3
66229: PUSH
66230: LD_VAR 0 5
66234: ST_TO_ADDR
// end ;
66235: LD_VAR 0 3
66239: RET
// export function PrepareApemanSoldier ( ) ; begin
66240: LD_INT 0
66242: PPUSH
// uc_nation := 0 ;
66243: LD_ADDR_OWVAR 21
66247: PUSH
66248: LD_INT 0
66250: ST_TO_ADDR
// hc_sex := sex_male ;
66251: LD_ADDR_OWVAR 27
66255: PUSH
66256: LD_INT 1
66258: ST_TO_ADDR
// hc_name :=  ;
66259: LD_ADDR_OWVAR 26
66263: PUSH
66264: LD_STRING 
66266: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66267: LD_ADDR_OWVAR 28
66271: PUSH
66272: LD_INT 15
66274: ST_TO_ADDR
// hc_gallery :=  ;
66275: LD_ADDR_OWVAR 33
66279: PUSH
66280: LD_STRING 
66282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66283: LD_ADDR_OWVAR 31
66287: PUSH
66288: LD_INT 0
66290: PPUSH
66291: LD_INT 3
66293: PPUSH
66294: CALL_OW 12
66298: PUSH
66299: LD_INT 0
66301: PPUSH
66302: LD_INT 3
66304: PPUSH
66305: CALL_OW 12
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66322: LD_ADDR_OWVAR 29
66326: PUSH
66327: LD_INT 10
66329: PUSH
66330: LD_INT 12
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: ST_TO_ADDR
// end ;
66337: LD_VAR 0 1
66341: RET
// export function PrepareApemanEngineer ( ) ; begin
66342: LD_INT 0
66344: PPUSH
// uc_nation := 0 ;
66345: LD_ADDR_OWVAR 21
66349: PUSH
66350: LD_INT 0
66352: ST_TO_ADDR
// hc_sex := sex_male ;
66353: LD_ADDR_OWVAR 27
66357: PUSH
66358: LD_INT 1
66360: ST_TO_ADDR
// hc_name :=  ;
66361: LD_ADDR_OWVAR 26
66365: PUSH
66366: LD_STRING 
66368: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66369: LD_ADDR_OWVAR 28
66373: PUSH
66374: LD_INT 16
66376: ST_TO_ADDR
// hc_gallery :=  ;
66377: LD_ADDR_OWVAR 33
66381: PUSH
66382: LD_STRING 
66384: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66385: LD_ADDR_OWVAR 31
66389: PUSH
66390: LD_INT 0
66392: PPUSH
66393: LD_INT 3
66395: PPUSH
66396: CALL_OW 12
66400: PUSH
66401: LD_INT 0
66403: PPUSH
66404: LD_INT 3
66406: PPUSH
66407: CALL_OW 12
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66424: LD_ADDR_OWVAR 29
66428: PUSH
66429: LD_INT 10
66431: PUSH
66432: LD_INT 12
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: ST_TO_ADDR
// end ;
66439: LD_VAR 0 1
66443: RET
// export function PrepareApeman ( agressivity ) ; begin
66444: LD_INT 0
66446: PPUSH
// uc_side := 0 ;
66447: LD_ADDR_OWVAR 20
66451: PUSH
66452: LD_INT 0
66454: ST_TO_ADDR
// uc_nation := 0 ;
66455: LD_ADDR_OWVAR 21
66459: PUSH
66460: LD_INT 0
66462: ST_TO_ADDR
// hc_sex := sex_male ;
66463: LD_ADDR_OWVAR 27
66467: PUSH
66468: LD_INT 1
66470: ST_TO_ADDR
// hc_class := class_apeman ;
66471: LD_ADDR_OWVAR 28
66475: PUSH
66476: LD_INT 12
66478: ST_TO_ADDR
// hc_gallery :=  ;
66479: LD_ADDR_OWVAR 33
66483: PUSH
66484: LD_STRING 
66486: ST_TO_ADDR
// hc_name :=  ;
66487: LD_ADDR_OWVAR 26
66491: PUSH
66492: LD_STRING 
66494: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
66495: LD_ADDR_OWVAR 29
66499: PUSH
66500: LD_INT 10
66502: PUSH
66503: LD_INT 12
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// if agressivity = 0 then
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 0
66517: EQUAL
66518: IFFALSE 66530
// hc_agressivity := 0 else
66520: LD_ADDR_OWVAR 35
66524: PUSH
66525: LD_INT 0
66527: ST_TO_ADDR
66528: GO 66551
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66530: LD_ADDR_OWVAR 35
66534: PUSH
66535: LD_VAR 0 1
66539: NEG
66540: PPUSH
66541: LD_VAR 0 1
66545: PPUSH
66546: CALL_OW 12
66550: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66551: LD_ADDR_OWVAR 31
66555: PUSH
66556: LD_INT 0
66558: PPUSH
66559: LD_INT 3
66561: PPUSH
66562: CALL_OW 12
66566: PUSH
66567: LD_INT 0
66569: PPUSH
66570: LD_INT 3
66572: PPUSH
66573: CALL_OW 12
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// end ;
66590: LD_VAR 0 2
66594: RET
// export function PrepareTiger ( agressivity ) ; begin
66595: LD_INT 0
66597: PPUSH
// uc_side := 0 ;
66598: LD_ADDR_OWVAR 20
66602: PUSH
66603: LD_INT 0
66605: ST_TO_ADDR
// uc_nation := 0 ;
66606: LD_ADDR_OWVAR 21
66610: PUSH
66611: LD_INT 0
66613: ST_TO_ADDR
// InitHc ;
66614: CALL_OW 19
// hc_class := class_tiger ;
66618: LD_ADDR_OWVAR 28
66622: PUSH
66623: LD_INT 14
66625: ST_TO_ADDR
// hc_gallery :=  ;
66626: LD_ADDR_OWVAR 33
66630: PUSH
66631: LD_STRING 
66633: ST_TO_ADDR
// hc_name :=  ;
66634: LD_ADDR_OWVAR 26
66638: PUSH
66639: LD_STRING 
66641: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66642: LD_ADDR_OWVAR 35
66646: PUSH
66647: LD_VAR 0 1
66651: NEG
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL_OW 12
66662: ST_TO_ADDR
// end ;
66663: LD_VAR 0 2
66667: RET
// export function PrepareEnchidna ( ) ; begin
66668: LD_INT 0
66670: PPUSH
// uc_side := 0 ;
66671: LD_ADDR_OWVAR 20
66675: PUSH
66676: LD_INT 0
66678: ST_TO_ADDR
// uc_nation := 0 ;
66679: LD_ADDR_OWVAR 21
66683: PUSH
66684: LD_INT 0
66686: ST_TO_ADDR
// InitHc ;
66687: CALL_OW 19
// hc_class := class_baggie ;
66691: LD_ADDR_OWVAR 28
66695: PUSH
66696: LD_INT 13
66698: ST_TO_ADDR
// hc_gallery :=  ;
66699: LD_ADDR_OWVAR 33
66703: PUSH
66704: LD_STRING 
66706: ST_TO_ADDR
// hc_name :=  ;
66707: LD_ADDR_OWVAR 26
66711: PUSH
66712: LD_STRING 
66714: ST_TO_ADDR
// end ;
66715: LD_VAR 0 1
66719: RET
// export function PrepareFrog ( ) ; begin
66720: LD_INT 0
66722: PPUSH
// uc_side := 0 ;
66723: LD_ADDR_OWVAR 20
66727: PUSH
66728: LD_INT 0
66730: ST_TO_ADDR
// uc_nation := 0 ;
66731: LD_ADDR_OWVAR 21
66735: PUSH
66736: LD_INT 0
66738: ST_TO_ADDR
// InitHc ;
66739: CALL_OW 19
// hc_class := class_frog ;
66743: LD_ADDR_OWVAR 28
66747: PUSH
66748: LD_INT 19
66750: ST_TO_ADDR
// hc_gallery :=  ;
66751: LD_ADDR_OWVAR 33
66755: PUSH
66756: LD_STRING 
66758: ST_TO_ADDR
// hc_name :=  ;
66759: LD_ADDR_OWVAR 26
66763: PUSH
66764: LD_STRING 
66766: ST_TO_ADDR
// end ;
66767: LD_VAR 0 1
66771: RET
// export function PrepareFish ( ) ; begin
66772: LD_INT 0
66774: PPUSH
// uc_side := 0 ;
66775: LD_ADDR_OWVAR 20
66779: PUSH
66780: LD_INT 0
66782: ST_TO_ADDR
// uc_nation := 0 ;
66783: LD_ADDR_OWVAR 21
66787: PUSH
66788: LD_INT 0
66790: ST_TO_ADDR
// InitHc ;
66791: CALL_OW 19
// hc_class := class_fish ;
66795: LD_ADDR_OWVAR 28
66799: PUSH
66800: LD_INT 20
66802: ST_TO_ADDR
// hc_gallery :=  ;
66803: LD_ADDR_OWVAR 33
66807: PUSH
66808: LD_STRING 
66810: ST_TO_ADDR
// hc_name :=  ;
66811: LD_ADDR_OWVAR 26
66815: PUSH
66816: LD_STRING 
66818: ST_TO_ADDR
// end ;
66819: LD_VAR 0 1
66823: RET
// export function PrepareBird ( ) ; begin
66824: LD_INT 0
66826: PPUSH
// uc_side := 0 ;
66827: LD_ADDR_OWVAR 20
66831: PUSH
66832: LD_INT 0
66834: ST_TO_ADDR
// uc_nation := 0 ;
66835: LD_ADDR_OWVAR 21
66839: PUSH
66840: LD_INT 0
66842: ST_TO_ADDR
// InitHc ;
66843: CALL_OW 19
// hc_class := class_phororhacos ;
66847: LD_ADDR_OWVAR 28
66851: PUSH
66852: LD_INT 18
66854: ST_TO_ADDR
// hc_gallery :=  ;
66855: LD_ADDR_OWVAR 33
66859: PUSH
66860: LD_STRING 
66862: ST_TO_ADDR
// hc_name :=  ;
66863: LD_ADDR_OWVAR 26
66867: PUSH
66868: LD_STRING 
66870: ST_TO_ADDR
// end ;
66871: LD_VAR 0 1
66875: RET
// export function PrepareHorse ( ) ; begin
66876: LD_INT 0
66878: PPUSH
// uc_side := 0 ;
66879: LD_ADDR_OWVAR 20
66883: PUSH
66884: LD_INT 0
66886: ST_TO_ADDR
// uc_nation := 0 ;
66887: LD_ADDR_OWVAR 21
66891: PUSH
66892: LD_INT 0
66894: ST_TO_ADDR
// InitHc ;
66895: CALL_OW 19
// hc_class := class_horse ;
66899: LD_ADDR_OWVAR 28
66903: PUSH
66904: LD_INT 21
66906: ST_TO_ADDR
// hc_gallery :=  ;
66907: LD_ADDR_OWVAR 33
66911: PUSH
66912: LD_STRING 
66914: ST_TO_ADDR
// hc_name :=  ;
66915: LD_ADDR_OWVAR 26
66919: PUSH
66920: LD_STRING 
66922: ST_TO_ADDR
// end ;
66923: LD_VAR 0 1
66927: RET
// export function PrepareMastodont ( ) ; begin
66928: LD_INT 0
66930: PPUSH
// uc_side := 0 ;
66931: LD_ADDR_OWVAR 20
66935: PUSH
66936: LD_INT 0
66938: ST_TO_ADDR
// uc_nation := 0 ;
66939: LD_ADDR_OWVAR 21
66943: PUSH
66944: LD_INT 0
66946: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66947: LD_ADDR_OWVAR 37
66951: PUSH
66952: LD_INT 31
66954: ST_TO_ADDR
// vc_control := control_rider ;
66955: LD_ADDR_OWVAR 38
66959: PUSH
66960: LD_INT 4
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 1
66967: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66968: LD_INT 0
66970: PPUSH
66971: PPUSH
66972: PPUSH
// uc_side = 0 ;
66973: LD_ADDR_OWVAR 20
66977: PUSH
66978: LD_INT 0
66980: ST_TO_ADDR
// uc_nation = 0 ;
66981: LD_ADDR_OWVAR 21
66985: PUSH
66986: LD_INT 0
66988: ST_TO_ADDR
// InitHc_All ( ) ;
66989: CALL_OW 584
// InitVc ;
66993: CALL_OW 20
// if mastodonts then
66997: LD_VAR 0 6
67001: IFFALSE 67068
// for i = 1 to mastodonts do
67003: LD_ADDR_VAR 0 11
67007: PUSH
67008: DOUBLE
67009: LD_INT 1
67011: DEC
67012: ST_TO_ADDR
67013: LD_VAR 0 6
67017: PUSH
67018: FOR_TO
67019: IFFALSE 67066
// begin vc_chassis := 31 ;
67021: LD_ADDR_OWVAR 37
67025: PUSH
67026: LD_INT 31
67028: ST_TO_ADDR
// vc_control := control_rider ;
67029: LD_ADDR_OWVAR 38
67033: PUSH
67034: LD_INT 4
67036: ST_TO_ADDR
// animal := CreateVehicle ;
67037: LD_ADDR_VAR 0 12
67041: PUSH
67042: CALL_OW 45
67046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67047: LD_VAR 0 12
67051: PPUSH
67052: LD_VAR 0 8
67056: PPUSH
67057: LD_INT 0
67059: PPUSH
67060: CALL 69210 0 3
// end ;
67064: GO 67018
67066: POP
67067: POP
// if horses then
67068: LD_VAR 0 5
67072: IFFALSE 67139
// for i = 1 to horses do
67074: LD_ADDR_VAR 0 11
67078: PUSH
67079: DOUBLE
67080: LD_INT 1
67082: DEC
67083: ST_TO_ADDR
67084: LD_VAR 0 5
67088: PUSH
67089: FOR_TO
67090: IFFALSE 67137
// begin hc_class := 21 ;
67092: LD_ADDR_OWVAR 28
67096: PUSH
67097: LD_INT 21
67099: ST_TO_ADDR
// hc_gallery :=  ;
67100: LD_ADDR_OWVAR 33
67104: PUSH
67105: LD_STRING 
67107: ST_TO_ADDR
// animal := CreateHuman ;
67108: LD_ADDR_VAR 0 12
67112: PUSH
67113: CALL_OW 44
67117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67118: LD_VAR 0 12
67122: PPUSH
67123: LD_VAR 0 8
67127: PPUSH
67128: LD_INT 0
67130: PPUSH
67131: CALL 69210 0 3
// end ;
67135: GO 67089
67137: POP
67138: POP
// if birds then
67139: LD_VAR 0 1
67143: IFFALSE 67210
// for i = 1 to birds do
67145: LD_ADDR_VAR 0 11
67149: PUSH
67150: DOUBLE
67151: LD_INT 1
67153: DEC
67154: ST_TO_ADDR
67155: LD_VAR 0 1
67159: PUSH
67160: FOR_TO
67161: IFFALSE 67208
// begin hc_class := 18 ;
67163: LD_ADDR_OWVAR 28
67167: PUSH
67168: LD_INT 18
67170: ST_TO_ADDR
// hc_gallery =  ;
67171: LD_ADDR_OWVAR 33
67175: PUSH
67176: LD_STRING 
67178: ST_TO_ADDR
// animal := CreateHuman ;
67179: LD_ADDR_VAR 0 12
67183: PUSH
67184: CALL_OW 44
67188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67189: LD_VAR 0 12
67193: PPUSH
67194: LD_VAR 0 8
67198: PPUSH
67199: LD_INT 0
67201: PPUSH
67202: CALL 69210 0 3
// end ;
67206: GO 67160
67208: POP
67209: POP
// if tigers then
67210: LD_VAR 0 2
67214: IFFALSE 67298
// for i = 1 to tigers do
67216: LD_ADDR_VAR 0 11
67220: PUSH
67221: DOUBLE
67222: LD_INT 1
67224: DEC
67225: ST_TO_ADDR
67226: LD_VAR 0 2
67230: PUSH
67231: FOR_TO
67232: IFFALSE 67296
// begin hc_class = class_tiger ;
67234: LD_ADDR_OWVAR 28
67238: PUSH
67239: LD_INT 14
67241: ST_TO_ADDR
// hc_gallery =  ;
67242: LD_ADDR_OWVAR 33
67246: PUSH
67247: LD_STRING 
67249: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67250: LD_ADDR_OWVAR 35
67254: PUSH
67255: LD_INT 7
67257: NEG
67258: PPUSH
67259: LD_INT 7
67261: PPUSH
67262: CALL_OW 12
67266: ST_TO_ADDR
// animal := CreateHuman ;
67267: LD_ADDR_VAR 0 12
67271: PUSH
67272: CALL_OW 44
67276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67277: LD_VAR 0 12
67281: PPUSH
67282: LD_VAR 0 8
67286: PPUSH
67287: LD_INT 0
67289: PPUSH
67290: CALL 69210 0 3
// end ;
67294: GO 67231
67296: POP
67297: POP
// if apemans then
67298: LD_VAR 0 3
67302: IFFALSE 67425
// for i = 1 to apemans do
67304: LD_ADDR_VAR 0 11
67308: PUSH
67309: DOUBLE
67310: LD_INT 1
67312: DEC
67313: ST_TO_ADDR
67314: LD_VAR 0 3
67318: PUSH
67319: FOR_TO
67320: IFFALSE 67423
// begin hc_class = class_apeman ;
67322: LD_ADDR_OWVAR 28
67326: PUSH
67327: LD_INT 12
67329: ST_TO_ADDR
// hc_gallery =  ;
67330: LD_ADDR_OWVAR 33
67334: PUSH
67335: LD_STRING 
67337: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67338: LD_ADDR_OWVAR 35
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PPUSH
67347: LD_INT 2
67349: PPUSH
67350: CALL_OW 12
67354: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67355: LD_ADDR_OWVAR 31
67359: PUSH
67360: LD_INT 1
67362: PPUSH
67363: LD_INT 3
67365: PPUSH
67366: CALL_OW 12
67370: PUSH
67371: LD_INT 1
67373: PPUSH
67374: LD_INT 3
67376: PPUSH
67377: CALL_OW 12
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// animal := CreateHuman ;
67394: LD_ADDR_VAR 0 12
67398: PUSH
67399: CALL_OW 44
67403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67404: LD_VAR 0 12
67408: PPUSH
67409: LD_VAR 0 8
67413: PPUSH
67414: LD_INT 0
67416: PPUSH
67417: CALL 69210 0 3
// end ;
67421: GO 67319
67423: POP
67424: POP
// if enchidnas then
67425: LD_VAR 0 4
67429: IFFALSE 67496
// for i = 1 to enchidnas do
67431: LD_ADDR_VAR 0 11
67435: PUSH
67436: DOUBLE
67437: LD_INT 1
67439: DEC
67440: ST_TO_ADDR
67441: LD_VAR 0 4
67445: PUSH
67446: FOR_TO
67447: IFFALSE 67494
// begin hc_class = 13 ;
67449: LD_ADDR_OWVAR 28
67453: PUSH
67454: LD_INT 13
67456: ST_TO_ADDR
// hc_gallery =  ;
67457: LD_ADDR_OWVAR 33
67461: PUSH
67462: LD_STRING 
67464: ST_TO_ADDR
// animal := CreateHuman ;
67465: LD_ADDR_VAR 0 12
67469: PUSH
67470: CALL_OW 44
67474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67475: LD_VAR 0 12
67479: PPUSH
67480: LD_VAR 0 8
67484: PPUSH
67485: LD_INT 0
67487: PPUSH
67488: CALL 69210 0 3
// end ;
67492: GO 67446
67494: POP
67495: POP
// if fishes then
67496: LD_VAR 0 7
67500: IFFALSE 67567
// for i = 1 to fishes do
67502: LD_ADDR_VAR 0 11
67506: PUSH
67507: DOUBLE
67508: LD_INT 1
67510: DEC
67511: ST_TO_ADDR
67512: LD_VAR 0 7
67516: PUSH
67517: FOR_TO
67518: IFFALSE 67565
// begin hc_class = 20 ;
67520: LD_ADDR_OWVAR 28
67524: PUSH
67525: LD_INT 20
67527: ST_TO_ADDR
// hc_gallery =  ;
67528: LD_ADDR_OWVAR 33
67532: PUSH
67533: LD_STRING 
67535: ST_TO_ADDR
// animal := CreateHuman ;
67536: LD_ADDR_VAR 0 12
67540: PUSH
67541: CALL_OW 44
67545: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67546: LD_VAR 0 12
67550: PPUSH
67551: LD_VAR 0 9
67555: PPUSH
67556: LD_INT 0
67558: PPUSH
67559: CALL 69210 0 3
// end ;
67563: GO 67517
67565: POP
67566: POP
// end ;
67567: LD_VAR 0 10
67571: RET
// export function WantHeal ( sci , unit ) ; begin
67572: LD_INT 0
67574: PPUSH
// if GetTaskList ( sci ) > 0 then
67575: LD_VAR 0 1
67579: PPUSH
67580: CALL_OW 437
67584: PUSH
67585: LD_INT 0
67587: GREATER
67588: IFFALSE 67660
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 437
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: PUSH
67604: LD_INT 1
67606: ARRAY
67607: PUSH
67608: LD_STRING l
67610: EQUAL
67611: IFFALSE 67638
67613: PUSH
67614: LD_VAR 0 1
67618: PPUSH
67619: CALL_OW 437
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: PUSH
67628: LD_INT 4
67630: ARRAY
67631: PUSH
67632: LD_VAR 0 2
67636: EQUAL
67637: AND
67638: IFFALSE 67650
// result := true else
67640: LD_ADDR_VAR 0 3
67644: PUSH
67645: LD_INT 1
67647: ST_TO_ADDR
67648: GO 67658
// result := false ;
67650: LD_ADDR_VAR 0 3
67654: PUSH
67655: LD_INT 0
67657: ST_TO_ADDR
// end else
67658: GO 67668
// result := false ;
67660: LD_ADDR_VAR 0 3
67664: PUSH
67665: LD_INT 0
67667: ST_TO_ADDR
// end ;
67668: LD_VAR 0 3
67672: RET
// export function HealTarget ( sci ) ; begin
67673: LD_INT 0
67675: PPUSH
// if not sci then
67676: LD_VAR 0 1
67680: NOT
67681: IFFALSE 67685
// exit ;
67683: GO 67750
// result := 0 ;
67685: LD_ADDR_VAR 0 2
67689: PUSH
67690: LD_INT 0
67692: ST_TO_ADDR
// if GetTaskList ( sci ) then
67693: LD_VAR 0 1
67697: PPUSH
67698: CALL_OW 437
67702: IFFALSE 67750
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67704: LD_VAR 0 1
67708: PPUSH
67709: CALL_OW 437
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PUSH
67718: LD_INT 1
67720: ARRAY
67721: PUSH
67722: LD_STRING l
67724: EQUAL
67725: IFFALSE 67750
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67727: LD_ADDR_VAR 0 2
67731: PUSH
67732: LD_VAR 0 1
67736: PPUSH
67737: CALL_OW 437
67741: PUSH
67742: LD_INT 1
67744: ARRAY
67745: PUSH
67746: LD_INT 4
67748: ARRAY
67749: ST_TO_ADDR
// end ;
67750: LD_VAR 0 2
67754: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67755: LD_INT 0
67757: PPUSH
67758: PPUSH
67759: PPUSH
67760: PPUSH
// if not base_units then
67761: LD_VAR 0 1
67765: NOT
67766: IFFALSE 67770
// exit ;
67768: GO 67857
// result := false ;
67770: LD_ADDR_VAR 0 2
67774: PUSH
67775: LD_INT 0
67777: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67778: LD_ADDR_VAR 0 5
67782: PUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: LD_INT 21
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PPUSH
67798: CALL_OW 72
67802: ST_TO_ADDR
// if not tmp then
67803: LD_VAR 0 5
67807: NOT
67808: IFFALSE 67812
// exit ;
67810: GO 67857
// for i in tmp do
67812: LD_ADDR_VAR 0 3
67816: PUSH
67817: LD_VAR 0 5
67821: PUSH
67822: FOR_IN
67823: IFFALSE 67855
// begin result := EnemyInRange ( i , 22 ) ;
67825: LD_ADDR_VAR 0 2
67829: PUSH
67830: LD_VAR 0 3
67834: PPUSH
67835: LD_INT 22
67837: PPUSH
67838: CALL 65272 0 2
67842: ST_TO_ADDR
// if result then
67843: LD_VAR 0 2
67847: IFFALSE 67853
// exit ;
67849: POP
67850: POP
67851: GO 67857
// end ;
67853: GO 67822
67855: POP
67856: POP
// end ;
67857: LD_VAR 0 2
67861: RET
// export function FilterByTag ( units , tag ) ; begin
67862: LD_INT 0
67864: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67865: LD_ADDR_VAR 0 3
67869: PUSH
67870: LD_VAR 0 1
67874: PPUSH
67875: LD_INT 120
67877: PUSH
67878: LD_VAR 0 2
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PPUSH
67887: CALL_OW 72
67891: ST_TO_ADDR
// end ;
67892: LD_VAR 0 3
67896: RET
// export function IsDriver ( un ) ; begin
67897: LD_INT 0
67899: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67900: LD_ADDR_VAR 0 2
67904: PUSH
67905: LD_VAR 0 1
67909: PUSH
67910: LD_INT 55
67912: PUSH
67913: EMPTY
67914: LIST
67915: PPUSH
67916: CALL_OW 69
67920: IN
67921: ST_TO_ADDR
// end ;
67922: LD_VAR 0 2
67926: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67927: LD_INT 0
67929: PPUSH
67930: PPUSH
// list := [ ] ;
67931: LD_ADDR_VAR 0 5
67935: PUSH
67936: EMPTY
67937: ST_TO_ADDR
// case d of 0 :
67938: LD_VAR 0 3
67942: PUSH
67943: LD_INT 0
67945: DOUBLE
67946: EQUAL
67947: IFTRUE 67951
67949: GO 68084
67951: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67952: LD_ADDR_VAR 0 5
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: LD_INT 4
67964: MINUS
67965: PUSH
67966: LD_VAR 0 2
67970: PUSH
67971: LD_INT 4
67973: MINUS
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: LIST
67982: PUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_INT 3
67990: MINUS
67991: PUSH
67992: LD_VAR 0 2
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: LD_VAR 0 1
68009: PUSH
68010: LD_INT 4
68012: PLUS
68013: PUSH
68014: LD_VAR 0 2
68018: PUSH
68019: LD_INT 4
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_INT 3
68034: PLUS
68035: PUSH
68036: LD_VAR 0 2
68040: PUSH
68041: LD_INT 3
68043: PLUS
68044: PUSH
68045: LD_INT 5
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: PUSH
68053: LD_VAR 0 1
68057: PUSH
68058: LD_VAR 0 2
68062: PUSH
68063: LD_INT 4
68065: PLUS
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: ST_TO_ADDR
// end ; 1 :
68082: GO 68782
68084: LD_INT 1
68086: DOUBLE
68087: EQUAL
68088: IFTRUE 68092
68090: GO 68225
68092: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68093: LD_ADDR_VAR 0 5
68097: PUSH
68098: LD_VAR 0 1
68102: PUSH
68103: LD_VAR 0 2
68107: PUSH
68108: LD_INT 4
68110: MINUS
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: PUSH
68120: LD_VAR 0 1
68124: PUSH
68125: LD_INT 3
68127: MINUS
68128: PUSH
68129: LD_VAR 0 2
68133: PUSH
68134: LD_INT 3
68136: MINUS
68137: PUSH
68138: LD_INT 2
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: PUSH
68146: LD_VAR 0 1
68150: PUSH
68151: LD_INT 4
68153: MINUS
68154: PUSH
68155: LD_VAR 0 2
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: PUSH
68168: LD_VAR 0 1
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 3
68180: PLUS
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: PUSH
68190: LD_VAR 0 1
68194: PUSH
68195: LD_INT 4
68197: PLUS
68198: PUSH
68199: LD_VAR 0 2
68203: PUSH
68204: LD_INT 4
68206: PLUS
68207: PUSH
68208: LD_INT 5
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: ST_TO_ADDR
// end ; 2 :
68223: GO 68782
68225: LD_INT 2
68227: DOUBLE
68228: EQUAL
68229: IFTRUE 68233
68231: GO 68362
68233: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68234: LD_ADDR_VAR 0 5
68238: PUSH
68239: LD_VAR 0 1
68243: PUSH
68244: LD_VAR 0 2
68248: PUSH
68249: LD_INT 3
68251: MINUS
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: LIST
68260: PUSH
68261: LD_VAR 0 1
68265: PUSH
68266: LD_INT 4
68268: PLUS
68269: PUSH
68270: LD_VAR 0 2
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: PUSH
68283: LD_VAR 0 1
68287: PUSH
68288: LD_VAR 0 2
68292: PUSH
68293: LD_INT 4
68295: PLUS
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 1
68309: PUSH
68310: LD_INT 3
68312: MINUS
68313: PUSH
68314: LD_VAR 0 2
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_VAR 0 1
68331: PUSH
68332: LD_INT 4
68334: MINUS
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 4
68343: MINUS
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// end ; 3 :
68360: GO 68782
68362: LD_INT 3
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68370
68368: GO 68503
68370: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68371: LD_ADDR_VAR 0 5
68375: PUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_INT 3
68383: PLUS
68384: PUSH
68385: LD_VAR 0 2
68389: PUSH
68390: LD_INT 4
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: PUSH
68398: LD_VAR 0 1
68402: PUSH
68403: LD_INT 4
68405: PLUS
68406: PUSH
68407: LD_VAR 0 2
68411: PUSH
68412: LD_INT 4
68414: PLUS
68415: PUSH
68416: LD_INT 5
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 4
68431: MINUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_VAR 0 2
68455: PUSH
68456: LD_INT 4
68458: MINUS
68459: PUSH
68460: LD_INT 3
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: LD_VAR 0 1
68472: PUSH
68473: LD_INT 3
68475: MINUS
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 3
68484: MINUS
68485: PUSH
68486: LD_INT 2
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// end ; 4 :
68501: GO 68782
68503: LD_INT 4
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68511
68509: GO 68644
68511: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68512: LD_ADDR_VAR 0 5
68516: PUSH
68517: LD_VAR 0 1
68521: PUSH
68522: LD_VAR 0 2
68526: PUSH
68527: LD_INT 4
68529: PLUS
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: PUSH
68539: LD_VAR 0 1
68543: PUSH
68544: LD_INT 3
68546: PLUS
68547: PUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_INT 3
68555: PLUS
68556: PUSH
68557: LD_INT 5
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_INT 4
68572: PLUS
68573: PUSH
68574: LD_VAR 0 2
68578: PUSH
68579: LD_INT 4
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 1
68591: PUSH
68592: LD_VAR 0 2
68596: PUSH
68597: LD_INT 3
68599: MINUS
68600: PUSH
68601: LD_INT 3
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 4
68616: MINUS
68617: PUSH
68618: LD_VAR 0 2
68622: PUSH
68623: LD_INT 4
68625: MINUS
68626: PUSH
68627: LD_INT 2
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: ST_TO_ADDR
// end ; 5 :
68642: GO 68782
68644: LD_INT 5
68646: DOUBLE
68647: EQUAL
68648: IFTRUE 68652
68650: GO 68781
68652: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68653: LD_ADDR_VAR 0 5
68657: PUSH
68658: LD_VAR 0 1
68662: PUSH
68663: LD_INT 4
68665: MINUS
68666: PUSH
68667: LD_VAR 0 2
68671: PUSH
68672: LD_INT 1
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: LIST
68679: PUSH
68680: LD_VAR 0 1
68684: PUSH
68685: LD_VAR 0 2
68689: PUSH
68690: LD_INT 4
68692: MINUS
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: LIST
68701: PUSH
68702: LD_VAR 0 1
68706: PUSH
68707: LD_INT 4
68709: PLUS
68710: PUSH
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 4
68718: PLUS
68719: PUSH
68720: LD_INT 5
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: LIST
68727: PUSH
68728: LD_VAR 0 1
68732: PUSH
68733: LD_INT 3
68735: PLUS
68736: PUSH
68737: LD_VAR 0 2
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: LIST
68749: PUSH
68750: LD_VAR 0 1
68754: PUSH
68755: LD_VAR 0 2
68759: PUSH
68760: LD_INT 3
68762: PLUS
68763: PUSH
68764: LD_INT 0
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// end ; end ;
68779: GO 68782
68781: POP
// result := list ;
68782: LD_ADDR_VAR 0 4
68786: PUSH
68787: LD_VAR 0 5
68791: ST_TO_ADDR
// end ;
68792: LD_VAR 0 4
68796: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68797: LD_INT 0
68799: PPUSH
68800: PPUSH
68801: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68802: LD_VAR 0 1
68806: NOT
68807: IFTRUE 68835
68809: PUSH
68810: LD_VAR 0 2
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 2
68820: PUSH
68821: LD_INT 3
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: IN
68833: NOT
68834: OR
68835: IFFALSE 68839
// exit ;
68837: GO 68922
// tmp := [ ] ;
68839: LD_ADDR_VAR 0 5
68843: PUSH
68844: EMPTY
68845: ST_TO_ADDR
// for i in units do
68846: LD_ADDR_VAR 0 4
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: FOR_IN
68857: IFFALSE 68891
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68859: LD_ADDR_VAR 0 5
68863: PUSH
68864: LD_VAR 0 5
68868: PPUSH
68869: LD_VAR 0 4
68873: PPUSH
68874: LD_VAR 0 2
68878: PPUSH
68879: CALL_OW 259
68883: PPUSH
68884: CALL 70317 0 2
68888: ST_TO_ADDR
68889: GO 68856
68891: POP
68892: POP
// if not tmp then
68893: LD_VAR 0 5
68897: NOT
68898: IFFALSE 68902
// exit ;
68900: GO 68922
// result := SortListByListDesc ( units , tmp ) ;
68902: LD_ADDR_VAR 0 3
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: LD_VAR 0 5
68916: PPUSH
68917: CALL_OW 77
68921: ST_TO_ADDR
// end ;
68922: LD_VAR 0 3
68926: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
68931: PPUSH
// result := false ;
68932: LD_ADDR_VAR 0 3
68936: PUSH
68937: LD_INT 0
68939: ST_TO_ADDR
// if not building then
68940: LD_VAR 0 2
68944: NOT
68945: IFFALSE 68949
// exit ;
68947: GO 69093
// x := GetX ( building ) ;
68949: LD_ADDR_VAR 0 4
68953: PUSH
68954: LD_VAR 0 2
68958: PPUSH
68959: CALL_OW 250
68963: ST_TO_ADDR
// y := GetY ( building ) ;
68964: LD_ADDR_VAR 0 5
68968: PUSH
68969: LD_VAR 0 2
68973: PPUSH
68974: CALL_OW 251
68978: ST_TO_ADDR
// if not x or not y then
68979: LD_VAR 0 4
68983: NOT
68984: IFTRUE 68993
68986: PUSH
68987: LD_VAR 0 5
68991: NOT
68992: OR
68993: IFFALSE 68997
// exit ;
68995: GO 69093
// if GetTaskList ( unit ) then
68997: LD_VAR 0 1
69001: PPUSH
69002: CALL_OW 437
69006: IFFALSE 69093
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69008: LD_STRING e
69010: PUSH
69011: LD_VAR 0 1
69015: PPUSH
69016: CALL_OW 437
69020: PUSH
69021: LD_INT 1
69023: ARRAY
69024: PUSH
69025: LD_INT 1
69027: ARRAY
69028: EQUAL
69029: IFFALSE 69056
69031: PUSH
69032: LD_VAR 0 4
69036: PUSH
69037: LD_VAR 0 1
69041: PPUSH
69042: CALL_OW 437
69046: PUSH
69047: LD_INT 1
69049: ARRAY
69050: PUSH
69051: LD_INT 2
69053: ARRAY
69054: EQUAL
69055: AND
69056: IFFALSE 69083
69058: PUSH
69059: LD_VAR 0 5
69063: PUSH
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 437
69073: PUSH
69074: LD_INT 1
69076: ARRAY
69077: PUSH
69078: LD_INT 3
69080: ARRAY
69081: EQUAL
69082: AND
69083: IFFALSE 69093
// result := true end ;
69085: LD_ADDR_VAR 0 3
69089: PUSH
69090: LD_INT 1
69092: ST_TO_ADDR
// end ;
69093: LD_VAR 0 3
69097: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69098: LD_INT 0
69100: PPUSH
// result := false ;
69101: LD_ADDR_VAR 0 4
69105: PUSH
69106: LD_INT 0
69108: ST_TO_ADDR
// if GetTaskList ( unit ) then
69109: LD_VAR 0 1
69113: PPUSH
69114: CALL_OW 437
69118: IFFALSE 69205
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69120: LD_STRING M
69122: PUSH
69123: LD_VAR 0 1
69127: PPUSH
69128: CALL_OW 437
69132: PUSH
69133: LD_INT 1
69135: ARRAY
69136: PUSH
69137: LD_INT 1
69139: ARRAY
69140: EQUAL
69141: IFFALSE 69168
69143: PUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_VAR 0 1
69153: PPUSH
69154: CALL_OW 437
69158: PUSH
69159: LD_INT 1
69161: ARRAY
69162: PUSH
69163: LD_INT 2
69165: ARRAY
69166: EQUAL
69167: AND
69168: IFFALSE 69195
69170: PUSH
69171: LD_VAR 0 3
69175: PUSH
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 437
69185: PUSH
69186: LD_INT 1
69188: ARRAY
69189: PUSH
69190: LD_INT 3
69192: ARRAY
69193: EQUAL
69194: AND
69195: IFFALSE 69205
// result := true ;
69197: LD_ADDR_VAR 0 4
69201: PUSH
69202: LD_INT 1
69204: ST_TO_ADDR
// end ; end ;
69205: LD_VAR 0 4
69209: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69210: LD_INT 0
69212: PPUSH
69213: PPUSH
69214: PPUSH
69215: PPUSH
// if not unit or not area then
69216: LD_VAR 0 1
69220: NOT
69221: IFTRUE 69230
69223: PUSH
69224: LD_VAR 0 2
69228: NOT
69229: OR
69230: IFFALSE 69234
// exit ;
69232: GO 69410
// tmp := AreaToList ( area , i ) ;
69234: LD_ADDR_VAR 0 6
69238: PUSH
69239: LD_VAR 0 2
69243: PPUSH
69244: LD_VAR 0 5
69248: PPUSH
69249: CALL_OW 517
69253: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69254: LD_ADDR_VAR 0 5
69258: PUSH
69259: DOUBLE
69260: LD_INT 1
69262: DEC
69263: ST_TO_ADDR
69264: LD_VAR 0 6
69268: PUSH
69269: LD_INT 1
69271: ARRAY
69272: PUSH
69273: FOR_TO
69274: IFFALSE 69408
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69276: LD_ADDR_VAR 0 7
69280: PUSH
69281: LD_VAR 0 6
69285: PUSH
69286: LD_INT 1
69288: ARRAY
69289: PUSH
69290: LD_VAR 0 5
69294: ARRAY
69295: PUSH
69296: LD_VAR 0 6
69300: PUSH
69301: LD_INT 2
69303: ARRAY
69304: PUSH
69305: LD_VAR 0 5
69309: ARRAY
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69315: LD_INT 92
69317: PUSH
69318: LD_VAR 0 7
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PUSH
69327: LD_VAR 0 7
69331: PUSH
69332: LD_INT 2
69334: ARRAY
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: PPUSH
69345: CALL_OW 69
69349: PUSH
69350: LD_INT 0
69352: EQUAL
69353: IFFALSE 69406
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69355: LD_VAR 0 1
69359: PPUSH
69360: LD_VAR 0 7
69364: PUSH
69365: LD_INT 1
69367: ARRAY
69368: PPUSH
69369: LD_VAR 0 7
69373: PUSH
69374: LD_INT 2
69376: ARRAY
69377: PPUSH
69378: LD_VAR 0 3
69382: PPUSH
69383: CALL_OW 48
// result := IsPlaced ( unit ) ;
69387: LD_ADDR_VAR 0 4
69391: PUSH
69392: LD_VAR 0 1
69396: PPUSH
69397: CALL_OW 305
69401: ST_TO_ADDR
// exit ;
69402: POP
69403: POP
69404: GO 69410
// end ; end ;
69406: GO 69273
69408: POP
69409: POP
// end ;
69410: LD_VAR 0 4
69414: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69415: LD_INT 0
69417: PPUSH
69418: PPUSH
69419: PPUSH
// if not side or side > 8 then
69420: LD_VAR 0 1
69424: NOT
69425: IFTRUE 69437
69427: PUSH
69428: LD_VAR 0 1
69432: PUSH
69433: LD_INT 8
69435: GREATER
69436: OR
69437: IFFALSE 69441
// exit ;
69439: GO 69628
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69441: LD_ADDR_VAR 0 4
69445: PUSH
69446: LD_INT 22
69448: PUSH
69449: LD_VAR 0 1
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 21
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PPUSH
69472: CALL_OW 69
69476: ST_TO_ADDR
// if not tmp then
69477: LD_VAR 0 4
69481: NOT
69482: IFFALSE 69486
// exit ;
69484: GO 69628
// enable_addtolog := true ;
69486: LD_ADDR_OWVAR 81
69490: PUSH
69491: LD_INT 1
69493: ST_TO_ADDR
// AddToLog ( [ ) ;
69494: LD_STRING [
69496: PPUSH
69497: CALL_OW 561
// for i in tmp do
69501: LD_ADDR_VAR 0 3
69505: PUSH
69506: LD_VAR 0 4
69510: PUSH
69511: FOR_IN
69512: IFFALSE 69619
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69514: LD_STRING [
69516: PUSH
69517: LD_VAR 0 3
69521: PPUSH
69522: CALL_OW 266
69526: STR
69527: PUSH
69528: LD_STRING , 
69530: STR
69531: PUSH
69532: LD_VAR 0 3
69536: PPUSH
69537: CALL_OW 250
69541: STR
69542: PUSH
69543: LD_STRING , 
69545: STR
69546: PUSH
69547: LD_VAR 0 3
69551: PPUSH
69552: CALL_OW 251
69556: STR
69557: PUSH
69558: LD_STRING , 
69560: STR
69561: PUSH
69562: LD_VAR 0 3
69566: PPUSH
69567: CALL_OW 254
69571: STR
69572: PUSH
69573: LD_STRING , 
69575: STR
69576: PUSH
69577: LD_VAR 0 3
69581: PPUSH
69582: LD_INT 1
69584: PPUSH
69585: CALL_OW 268
69589: STR
69590: PUSH
69591: LD_STRING , 
69593: STR
69594: PUSH
69595: LD_VAR 0 3
69599: PPUSH
69600: LD_INT 2
69602: PPUSH
69603: CALL_OW 268
69607: STR
69608: PUSH
69609: LD_STRING ],
69611: STR
69612: PPUSH
69613: CALL_OW 561
// end ;
69617: GO 69511
69619: POP
69620: POP
// AddToLog ( ]; ) ;
69621: LD_STRING ];
69623: PPUSH
69624: CALL_OW 561
// end ;
69628: LD_VAR 0 2
69632: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
// if not area or not rate or not max then
69640: LD_VAR 0 1
69644: NOT
69645: IFTRUE 69654
69647: PUSH
69648: LD_VAR 0 2
69652: NOT
69653: OR
69654: IFTRUE 69663
69656: PUSH
69657: LD_VAR 0 4
69661: NOT
69662: OR
69663: IFFALSE 69667
// exit ;
69665: GO 69856
// while 1 do
69667: LD_INT 1
69669: IFFALSE 69856
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69671: LD_ADDR_VAR 0 9
69675: PUSH
69676: LD_VAR 0 1
69680: PPUSH
69681: LD_INT 1
69683: PPUSH
69684: CALL_OW 287
69688: PUSH
69689: LD_INT 10
69691: MUL
69692: ST_TO_ADDR
// r := rate / 10 ;
69693: LD_ADDR_VAR 0 7
69697: PUSH
69698: LD_VAR 0 2
69702: PUSH
69703: LD_INT 10
69705: DIVREAL
69706: ST_TO_ADDR
// time := 1 1$00 ;
69707: LD_ADDR_VAR 0 8
69711: PUSH
69712: LD_INT 2100
69714: ST_TO_ADDR
// if amount < min then
69715: LD_VAR 0 9
69719: PUSH
69720: LD_VAR 0 3
69724: LESS
69725: IFFALSE 69743
// r := r * 2 else
69727: LD_ADDR_VAR 0 7
69731: PUSH
69732: LD_VAR 0 7
69736: PUSH
69737: LD_INT 2
69739: MUL
69740: ST_TO_ADDR
69741: GO 69769
// if amount > max then
69743: LD_VAR 0 9
69747: PUSH
69748: LD_VAR 0 4
69752: GREATER
69753: IFFALSE 69769
// r := r / 2 ;
69755: LD_ADDR_VAR 0 7
69759: PUSH
69760: LD_VAR 0 7
69764: PUSH
69765: LD_INT 2
69767: DIVREAL
69768: ST_TO_ADDR
// time := time / r ;
69769: LD_ADDR_VAR 0 8
69773: PUSH
69774: LD_VAR 0 8
69778: PUSH
69779: LD_VAR 0 7
69783: DIVREAL
69784: ST_TO_ADDR
// if time < 0 then
69785: LD_VAR 0 8
69789: PUSH
69790: LD_INT 0
69792: LESS
69793: IFFALSE 69810
// time := time * - 1 ;
69795: LD_ADDR_VAR 0 8
69799: PUSH
69800: LD_VAR 0 8
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: MUL
69809: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69810: LD_VAR 0 8
69814: PUSH
69815: LD_INT 35
69817: PPUSH
69818: LD_INT 875
69820: PPUSH
69821: CALL_OW 12
69825: PLUS
69826: PPUSH
69827: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69831: LD_INT 1
69833: PPUSH
69834: LD_INT 5
69836: PPUSH
69837: CALL_OW 12
69841: PPUSH
69842: LD_VAR 0 1
69846: PPUSH
69847: LD_INT 1
69849: PPUSH
69850: CALL_OW 55
// end ;
69854: GO 69667
// end ;
69856: LD_VAR 0 5
69860: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69861: LD_INT 0
69863: PPUSH
69864: PPUSH
69865: PPUSH
69866: PPUSH
69867: PPUSH
69868: PPUSH
69869: PPUSH
69870: PPUSH
// if not turrets or not factories then
69871: LD_VAR 0 1
69875: NOT
69876: IFTRUE 69885
69878: PUSH
69879: LD_VAR 0 2
69883: NOT
69884: OR
69885: IFFALSE 69889
// exit ;
69887: GO 70196
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69889: LD_ADDR_VAR 0 10
69893: PUSH
69894: LD_INT 5
69896: PUSH
69897: LD_INT 6
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 2
69906: PUSH
69907: LD_INT 4
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 3
69916: PUSH
69917: LD_INT 5
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 24
69931: PUSH
69932: LD_INT 25
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 23
69941: PUSH
69942: LD_INT 27
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 42
69955: PUSH
69956: LD_INT 43
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 44
69965: PUSH
69966: LD_INT 46
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 45
69975: PUSH
69976: LD_INT 47
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: LIST
69992: ST_TO_ADDR
// result := [ ] ;
69993: LD_ADDR_VAR 0 3
69997: PUSH
69998: EMPTY
69999: ST_TO_ADDR
// for i in turrets do
70000: LD_ADDR_VAR 0 4
70004: PUSH
70005: LD_VAR 0 1
70009: PUSH
70010: FOR_IN
70011: IFFALSE 70194
// begin nat := GetNation ( i ) ;
70013: LD_ADDR_VAR 0 7
70017: PUSH
70018: LD_VAR 0 4
70022: PPUSH
70023: CALL_OW 248
70027: ST_TO_ADDR
// weapon := 0 ;
70028: LD_ADDR_VAR 0 8
70032: PUSH
70033: LD_INT 0
70035: ST_TO_ADDR
// if not nat then
70036: LD_VAR 0 7
70040: NOT
70041: IFFALSE 70045
// continue ;
70043: GO 70010
// for j in list [ nat ] do
70045: LD_ADDR_VAR 0 5
70049: PUSH
70050: LD_VAR 0 10
70054: PUSH
70055: LD_VAR 0 7
70059: ARRAY
70060: PUSH
70061: FOR_IN
70062: IFFALSE 70103
// if GetBWeapon ( i ) = j [ 1 ] then
70064: LD_VAR 0 4
70068: PPUSH
70069: CALL_OW 269
70073: PUSH
70074: LD_VAR 0 5
70078: PUSH
70079: LD_INT 1
70081: ARRAY
70082: EQUAL
70083: IFFALSE 70101
// begin weapon := j [ 2 ] ;
70085: LD_ADDR_VAR 0 8
70089: PUSH
70090: LD_VAR 0 5
70094: PUSH
70095: LD_INT 2
70097: ARRAY
70098: ST_TO_ADDR
// break ;
70099: GO 70103
// end ;
70101: GO 70061
70103: POP
70104: POP
// if not weapon then
70105: LD_VAR 0 8
70109: NOT
70110: IFFALSE 70114
// continue ;
70112: GO 70010
// for k in factories do
70114: LD_ADDR_VAR 0 6
70118: PUSH
70119: LD_VAR 0 2
70123: PUSH
70124: FOR_IN
70125: IFFALSE 70190
// begin weapons := AvailableWeaponList ( k ) ;
70127: LD_ADDR_VAR 0 9
70131: PUSH
70132: LD_VAR 0 6
70136: PPUSH
70137: CALL_OW 478
70141: ST_TO_ADDR
// if not weapons then
70142: LD_VAR 0 9
70146: NOT
70147: IFFALSE 70151
// continue ;
70149: GO 70124
// if weapon in weapons then
70151: LD_VAR 0 8
70155: PUSH
70156: LD_VAR 0 9
70160: IN
70161: IFFALSE 70188
// begin result := [ i , weapon ] ;
70163: LD_ADDR_VAR 0 3
70167: PUSH
70168: LD_VAR 0 4
70172: PUSH
70173: LD_VAR 0 8
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// exit ;
70182: POP
70183: POP
70184: POP
70185: POP
70186: GO 70196
// end ; end ;
70188: GO 70124
70190: POP
70191: POP
// end ;
70192: GO 70010
70194: POP
70195: POP
// end ;
70196: LD_VAR 0 3
70200: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70201: LD_INT 0
70203: PPUSH
// if not side or side > 8 then
70204: LD_VAR 0 3
70208: NOT
70209: IFTRUE 70221
70211: PUSH
70212: LD_VAR 0 3
70216: PUSH
70217: LD_INT 8
70219: GREATER
70220: OR
70221: IFFALSE 70225
// exit ;
70223: GO 70284
// if not range then
70225: LD_VAR 0 4
70229: NOT
70230: IFFALSE 70241
// range := - 12 ;
70232: LD_ADDR_VAR 0 4
70236: PUSH
70237: LD_INT 12
70239: NEG
70240: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 2
70250: PPUSH
70251: LD_VAR 0 3
70255: PPUSH
70256: LD_VAR 0 4
70260: PPUSH
70261: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70265: LD_VAR 0 1
70269: PPUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: LD_VAR 0 3
70279: PPUSH
70280: CALL_OW 331
// end ;
70284: LD_VAR 0 5
70288: RET
// export function Video ( mode ) ; begin
70289: LD_INT 0
70291: PPUSH
// ingame_video = mode ;
70292: LD_ADDR_OWVAR 52
70296: PUSH
70297: LD_VAR 0 1
70301: ST_TO_ADDR
// interface_hidden = mode ;
70302: LD_ADDR_OWVAR 54
70306: PUSH
70307: LD_VAR 0 1
70311: ST_TO_ADDR
// end ;
70312: LD_VAR 0 2
70316: RET
// export function Join ( array , element ) ; begin
70317: LD_INT 0
70319: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70320: LD_ADDR_VAR 0 3
70324: PUSH
70325: LD_VAR 0 1
70329: PPUSH
70330: LD_VAR 0 1
70334: PUSH
70335: LD_INT 1
70337: PLUS
70338: PPUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: CALL_OW 1
70348: ST_TO_ADDR
// end ;
70349: LD_VAR 0 3
70353: RET
// export function JoinUnion ( array , element ) ; begin
70354: LD_INT 0
70356: PPUSH
// result := array union element ;
70357: LD_ADDR_VAR 0 3
70361: PUSH
70362: LD_VAR 0 1
70366: PUSH
70367: LD_VAR 0 2
70371: UNION
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 3
70377: RET
// export function GetBehemoths ( side ) ; begin
70378: LD_INT 0
70380: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70381: LD_ADDR_VAR 0 2
70385: PUSH
70386: LD_INT 22
70388: PUSH
70389: LD_VAR 0 1
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 31
70400: PUSH
70401: LD_INT 25
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PPUSH
70412: CALL_OW 69
70416: ST_TO_ADDR
// end ;
70417: LD_VAR 0 2
70421: RET
// export function Shuffle ( array ) ; var i , index ; begin
70422: LD_INT 0
70424: PPUSH
70425: PPUSH
70426: PPUSH
// result := [ ] ;
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: EMPTY
70433: ST_TO_ADDR
// if not array then
70434: LD_VAR 0 1
70438: NOT
70439: IFFALSE 70443
// exit ;
70441: GO 70542
// Randomize ;
70443: CALL_OW 10
// for i = array downto 1 do
70447: LD_ADDR_VAR 0 3
70451: PUSH
70452: DOUBLE
70453: LD_VAR 0 1
70457: INC
70458: ST_TO_ADDR
70459: LD_INT 1
70461: PUSH
70462: FOR_DOWNTO
70463: IFFALSE 70540
// begin index := rand ( 1 , array ) ;
70465: LD_ADDR_VAR 0 4
70469: PUSH
70470: LD_INT 1
70472: PPUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: CALL_OW 12
70482: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: LD_VAR 0 2
70492: PPUSH
70493: LD_VAR 0 2
70497: PUSH
70498: LD_INT 1
70500: PLUS
70501: PPUSH
70502: LD_VAR 0 1
70506: PUSH
70507: LD_VAR 0 4
70511: ARRAY
70512: PPUSH
70513: CALL_OW 2
70517: ST_TO_ADDR
// array := Delete ( array , index ) ;
70518: LD_ADDR_VAR 0 1
70522: PUSH
70523: LD_VAR 0 1
70527: PPUSH
70528: LD_VAR 0 4
70532: PPUSH
70533: CALL_OW 3
70537: ST_TO_ADDR
// end ;
70538: GO 70462
70540: POP
70541: POP
// end ;
70542: LD_VAR 0 2
70546: RET
// export function GetBaseMaterials ( base ) ; begin
70547: LD_INT 0
70549: PPUSH
// result := [ 0 , 0 , 0 ] ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: ST_TO_ADDR
// if not base then
70569: LD_VAR 0 1
70573: NOT
70574: IFFALSE 70578
// exit ;
70576: GO 70627
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: LD_INT 1
70590: PPUSH
70591: CALL_OW 275
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: LD_INT 2
70603: PPUSH
70604: CALL_OW 275
70608: PUSH
70609: LD_VAR 0 1
70613: PPUSH
70614: LD_INT 3
70616: PPUSH
70617: CALL_OW 275
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: LIST
70626: ST_TO_ADDR
// end ;
70627: LD_VAR 0 2
70631: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70632: LD_INT 0
70634: PPUSH
70635: PPUSH
// result := array ;
70636: LD_ADDR_VAR 0 3
70640: PUSH
70641: LD_VAR 0 1
70645: ST_TO_ADDR
// if size >= result then
70646: LD_VAR 0 2
70650: PUSH
70651: LD_VAR 0 3
70655: GREATEREQUAL
70656: IFFALSE 70660
// exit ;
70658: GO 70710
// if size then
70660: LD_VAR 0 2
70664: IFFALSE 70710
// for i := array downto size do
70666: LD_ADDR_VAR 0 4
70670: PUSH
70671: DOUBLE
70672: LD_VAR 0 1
70676: INC
70677: ST_TO_ADDR
70678: LD_VAR 0 2
70682: PUSH
70683: FOR_DOWNTO
70684: IFFALSE 70708
// result := Delete ( result , result ) ;
70686: LD_ADDR_VAR 0 3
70690: PUSH
70691: LD_VAR 0 3
70695: PPUSH
70696: LD_VAR 0 3
70700: PPUSH
70701: CALL_OW 3
70705: ST_TO_ADDR
70706: GO 70683
70708: POP
70709: POP
// end ;
70710: LD_VAR 0 3
70714: RET
// export function ComExit ( unit ) ; var tmp ; begin
70715: LD_INT 0
70717: PPUSH
70718: PPUSH
// if not IsInUnit ( unit ) then
70719: LD_VAR 0 1
70723: PPUSH
70724: CALL_OW 310
70728: NOT
70729: IFFALSE 70733
// exit ;
70731: GO 70793
// tmp := IsInUnit ( unit ) ;
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 1
70742: PPUSH
70743: CALL_OW 310
70747: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70748: LD_VAR 0 3
70752: PPUSH
70753: CALL_OW 247
70757: PUSH
70758: LD_INT 2
70760: EQUAL
70761: IFFALSE 70774
// ComExitVehicle ( unit ) else
70763: LD_VAR 0 1
70767: PPUSH
70768: CALL_OW 121
70772: GO 70783
// ComExitBuilding ( unit ) ;
70774: LD_VAR 0 1
70778: PPUSH
70779: CALL_OW 122
// result := tmp ;
70783: LD_ADDR_VAR 0 2
70787: PUSH
70788: LD_VAR 0 3
70792: ST_TO_ADDR
// end ;
70793: LD_VAR 0 2
70797: RET
// export function ComExitAll ( units ) ; var i ; begin
70798: LD_INT 0
70800: PPUSH
70801: PPUSH
// if not units then
70802: LD_VAR 0 1
70806: NOT
70807: IFFALSE 70811
// exit ;
70809: GO 70837
// for i in units do
70811: LD_ADDR_VAR 0 3
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: FOR_IN
70822: IFFALSE 70835
// ComExit ( i ) ;
70824: LD_VAR 0 3
70828: PPUSH
70829: CALL 70715 0 1
70833: GO 70821
70835: POP
70836: POP
// end ;
70837: LD_VAR 0 2
70841: RET
// export function ResetHc ; begin
70842: LD_INT 0
70844: PPUSH
// InitHc ;
70845: CALL_OW 19
// hc_importance := 0 ;
70849: LD_ADDR_OWVAR 32
70853: PUSH
70854: LD_INT 0
70856: ST_TO_ADDR
// end ;
70857: LD_VAR 0 1
70861: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70862: LD_INT 0
70864: PPUSH
70865: PPUSH
70866: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70867: LD_ADDR_VAR 0 6
70871: PUSH
70872: LD_VAR 0 1
70876: PUSH
70877: LD_VAR 0 3
70881: PLUS
70882: PUSH
70883: LD_INT 2
70885: DIV
70886: ST_TO_ADDR
// if _x < 0 then
70887: LD_VAR 0 6
70891: PUSH
70892: LD_INT 0
70894: LESS
70895: IFFALSE 70912
// _x := _x * - 1 ;
70897: LD_ADDR_VAR 0 6
70901: PUSH
70902: LD_VAR 0 6
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: MUL
70911: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70912: LD_ADDR_VAR 0 7
70916: PUSH
70917: LD_VAR 0 2
70921: PUSH
70922: LD_VAR 0 4
70926: PLUS
70927: PUSH
70928: LD_INT 2
70930: DIV
70931: ST_TO_ADDR
// if _y < 0 then
70932: LD_VAR 0 7
70936: PUSH
70937: LD_INT 0
70939: LESS
70940: IFFALSE 70957
// _y := _y * - 1 ;
70942: LD_ADDR_VAR 0 7
70946: PUSH
70947: LD_VAR 0 7
70951: PUSH
70952: LD_INT 1
70954: NEG
70955: MUL
70956: ST_TO_ADDR
// result := [ _x , _y ] ;
70957: LD_ADDR_VAR 0 5
70961: PUSH
70962: LD_VAR 0 6
70966: PUSH
70967: LD_VAR 0 7
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: ST_TO_ADDR
// end ;
70976: LD_VAR 0 5
70980: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70981: LD_INT 0
70983: PPUSH
70984: PPUSH
70985: PPUSH
70986: PPUSH
// task := GetTaskList ( unit ) ;
70987: LD_ADDR_VAR 0 7
70991: PUSH
70992: LD_VAR 0 1
70996: PPUSH
70997: CALL_OW 437
71001: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71002: LD_VAR 0 7
71006: NOT
71007: IFFALSE 71026
71009: PUSH
71010: LD_VAR 0 1
71014: PPUSH
71015: LD_VAR 0 2
71019: PPUSH
71020: CALL_OW 308
71024: NOT
71025: AND
71026: IFFALSE 71030
// exit ;
71028: GO 71148
// if IsInArea ( unit , area ) then
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 2
71039: PPUSH
71040: CALL_OW 308
71044: IFFALSE 71062
// begin ComMoveToArea ( unit , goAway ) ;
71046: LD_VAR 0 1
71050: PPUSH
71051: LD_VAR 0 3
71055: PPUSH
71056: CALL_OW 113
// exit ;
71060: GO 71148
// end ; if task [ 1 ] [ 1 ] <> M then
71062: LD_VAR 0 7
71066: PUSH
71067: LD_INT 1
71069: ARRAY
71070: PUSH
71071: LD_INT 1
71073: ARRAY
71074: PUSH
71075: LD_STRING M
71077: NONEQUAL
71078: IFFALSE 71082
// exit ;
71080: GO 71148
// x := task [ 1 ] [ 2 ] ;
71082: LD_ADDR_VAR 0 5
71086: PUSH
71087: LD_VAR 0 7
71091: PUSH
71092: LD_INT 1
71094: ARRAY
71095: PUSH
71096: LD_INT 2
71098: ARRAY
71099: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71100: LD_ADDR_VAR 0 6
71104: PUSH
71105: LD_VAR 0 7
71109: PUSH
71110: LD_INT 1
71112: ARRAY
71113: PUSH
71114: LD_INT 3
71116: ARRAY
71117: ST_TO_ADDR
// if InArea ( x , y , area ) then
71118: LD_VAR 0 5
71122: PPUSH
71123: LD_VAR 0 6
71127: PPUSH
71128: LD_VAR 0 2
71132: PPUSH
71133: CALL_OW 309
71137: IFFALSE 71148
// ComStop ( unit ) ;
71139: LD_VAR 0 1
71143: PPUSH
71144: CALL_OW 141
// end ;
71148: LD_VAR 0 4
71152: RET
// export function Abs ( value ) ; begin
71153: LD_INT 0
71155: PPUSH
// result := value ;
71156: LD_ADDR_VAR 0 2
71160: PUSH
71161: LD_VAR 0 1
71165: ST_TO_ADDR
// if value < 0 then
71166: LD_VAR 0 1
71170: PUSH
71171: LD_INT 0
71173: LESS
71174: IFFALSE 71191
// result := value * - 1 ;
71176: LD_ADDR_VAR 0 2
71180: PUSH
71181: LD_VAR 0 1
71185: PUSH
71186: LD_INT 1
71188: NEG
71189: MUL
71190: ST_TO_ADDR
// end ;
71191: LD_VAR 0 2
71195: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71196: LD_INT 0
71198: PPUSH
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
71203: PPUSH
71204: PPUSH
71205: PPUSH
// if not unit or not building then
71206: LD_VAR 0 1
71210: NOT
71211: IFTRUE 71220
71213: PUSH
71214: LD_VAR 0 2
71218: NOT
71219: OR
71220: IFFALSE 71224
// exit ;
71222: GO 71452
// x := GetX ( building ) ;
71224: LD_ADDR_VAR 0 4
71228: PUSH
71229: LD_VAR 0 2
71233: PPUSH
71234: CALL_OW 250
71238: ST_TO_ADDR
// y := GetY ( building ) ;
71239: LD_ADDR_VAR 0 6
71243: PUSH
71244: LD_VAR 0 2
71248: PPUSH
71249: CALL_OW 251
71253: ST_TO_ADDR
// d := GetDir ( building ) ;
71254: LD_ADDR_VAR 0 8
71258: PUSH
71259: LD_VAR 0 2
71263: PPUSH
71264: CALL_OW 254
71268: ST_TO_ADDR
// r := 4 ;
71269: LD_ADDR_VAR 0 9
71273: PUSH
71274: LD_INT 4
71276: ST_TO_ADDR
// for i := 1 to 5 do
71277: LD_ADDR_VAR 0 10
71281: PUSH
71282: DOUBLE
71283: LD_INT 1
71285: DEC
71286: ST_TO_ADDR
71287: LD_INT 5
71289: PUSH
71290: FOR_TO
71291: IFFALSE 71450
// begin _x := ShiftX ( x , d , r + i ) ;
71293: LD_ADDR_VAR 0 5
71297: PUSH
71298: LD_VAR 0 4
71302: PPUSH
71303: LD_VAR 0 8
71307: PPUSH
71308: LD_VAR 0 9
71312: PUSH
71313: LD_VAR 0 10
71317: PLUS
71318: PPUSH
71319: CALL_OW 272
71323: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71324: LD_ADDR_VAR 0 7
71328: PUSH
71329: LD_VAR 0 6
71333: PPUSH
71334: LD_VAR 0 8
71338: PPUSH
71339: LD_VAR 0 9
71343: PUSH
71344: LD_VAR 0 10
71348: PLUS
71349: PPUSH
71350: CALL_OW 273
71354: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71355: LD_VAR 0 5
71359: PPUSH
71360: LD_VAR 0 7
71364: PPUSH
71365: CALL_OW 488
71369: IFFALSE 71404
71371: PUSH
71372: LD_VAR 0 5
71376: PPUSH
71377: LD_VAR 0 7
71381: PPUSH
71382: CALL_OW 428
71386: PPUSH
71387: CALL_OW 247
71391: PUSH
71392: LD_INT 3
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: IN
71402: NOT
71403: AND
71404: IFFALSE 71448
// begin ComMoveXY ( unit , _x , _y ) ;
71406: LD_VAR 0 1
71410: PPUSH
71411: LD_VAR 0 5
71415: PPUSH
71416: LD_VAR 0 7
71420: PPUSH
71421: CALL_OW 111
// result := [ _x , _y ] ;
71425: LD_ADDR_VAR 0 3
71429: PUSH
71430: LD_VAR 0 5
71434: PUSH
71435: LD_VAR 0 7
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: ST_TO_ADDR
// exit ;
71444: POP
71445: POP
71446: GO 71452
// end ; end ;
71448: GO 71290
71450: POP
71451: POP
// end ;
71452: LD_VAR 0 3
71456: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71457: LD_INT 0
71459: PPUSH
71460: PPUSH
71461: PPUSH
// result := 0 ;
71462: LD_ADDR_VAR 0 3
71466: PUSH
71467: LD_INT 0
71469: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71470: LD_VAR 0 1
71474: PUSH
71475: LD_INT 0
71477: LESS
71478: IFTRUE 71490
71480: PUSH
71481: LD_VAR 0 1
71485: PUSH
71486: LD_INT 8
71488: GREATER
71489: OR
71490: IFTRUE 71502
71492: PUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_INT 0
71500: LESS
71501: OR
71502: IFTRUE 71514
71504: PUSH
71505: LD_VAR 0 2
71509: PUSH
71510: LD_INT 8
71512: GREATER
71513: OR
71514: IFFALSE 71518
// exit ;
71516: GO 71593
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71518: LD_ADDR_VAR 0 4
71522: PUSH
71523: LD_INT 22
71525: PUSH
71526: LD_VAR 0 2
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PPUSH
71535: CALL_OW 69
71539: PUSH
71540: FOR_IN
71541: IFFALSE 71591
// begin un := UnitShoot ( i ) ;
71543: LD_ADDR_VAR 0 5
71547: PUSH
71548: LD_VAR 0 4
71552: PPUSH
71553: CALL_OW 504
71557: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71558: LD_VAR 0 5
71562: PPUSH
71563: CALL_OW 255
71567: PUSH
71568: LD_VAR 0 1
71572: EQUAL
71573: IFFALSE 71589
// begin result := un ;
71575: LD_ADDR_VAR 0 3
71579: PUSH
71580: LD_VAR 0 5
71584: ST_TO_ADDR
// exit ;
71585: POP
71586: POP
71587: GO 71593
// end ; end ;
71589: GO 71540
71591: POP
71592: POP
// end ;
71593: LD_VAR 0 3
71597: RET
// export function GetCargoBay ( units ) ; begin
71598: LD_INT 0
71600: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71601: LD_ADDR_VAR 0 2
71605: PUSH
71606: LD_VAR 0 1
71610: PPUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 34
71616: PUSH
71617: LD_INT 12
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 34
71626: PUSH
71627: LD_INT 51
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 34
71636: PUSH
71637: LD_INT 32
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 34
71646: PUSH
71647: LD_INT 89
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: PPUSH
71661: CALL_OW 72
71665: ST_TO_ADDR
// end ;
71666: LD_VAR 0 2
71670: RET
// export function Negate ( value ) ; begin
71671: LD_INT 0
71673: PPUSH
// result := not value ;
71674: LD_ADDR_VAR 0 2
71678: PUSH
71679: LD_VAR 0 1
71683: NOT
71684: ST_TO_ADDR
// end ;
71685: LD_VAR 0 2
71689: RET
// export function Inc ( value ) ; begin
71690: LD_INT 0
71692: PPUSH
// result := value + 1 ;
71693: LD_ADDR_VAR 0 2
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_INT 1
71705: PLUS
71706: ST_TO_ADDR
// end ;
71707: LD_VAR 0 2
71711: RET
// export function Dec ( value ) ; begin
71712: LD_INT 0
71714: PPUSH
// result := value - 1 ;
71715: LD_ADDR_VAR 0 2
71719: PUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_INT 1
71727: MINUS
71728: ST_TO_ADDR
// end ;
71729: LD_VAR 0 2
71733: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71734: LD_INT 0
71736: PPUSH
71737: PPUSH
71738: PPUSH
71739: PPUSH
71740: PPUSH
71741: PPUSH
71742: PPUSH
71743: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71744: LD_VAR 0 1
71748: PPUSH
71749: LD_VAR 0 2
71753: PPUSH
71754: CALL_OW 488
71758: NOT
71759: IFTRUE 71778
71761: PUSH
71762: LD_VAR 0 3
71766: PPUSH
71767: LD_VAR 0 4
71771: PPUSH
71772: CALL_OW 488
71776: NOT
71777: OR
71778: IFFALSE 71791
// begin result := - 1 ;
71780: LD_ADDR_VAR 0 5
71784: PUSH
71785: LD_INT 1
71787: NEG
71788: ST_TO_ADDR
// exit ;
71789: GO 72026
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71791: LD_ADDR_VAR 0 12
71795: PUSH
71796: LD_VAR 0 1
71800: PPUSH
71801: LD_VAR 0 2
71805: PPUSH
71806: LD_VAR 0 3
71810: PPUSH
71811: LD_VAR 0 4
71815: PPUSH
71816: CALL 70862 0 4
71820: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71821: LD_ADDR_VAR 0 11
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: LD_VAR 0 2
71835: PPUSH
71836: LD_VAR 0 12
71840: PUSH
71841: LD_INT 1
71843: ARRAY
71844: PPUSH
71845: LD_VAR 0 12
71849: PUSH
71850: LD_INT 2
71852: ARRAY
71853: PPUSH
71854: CALL_OW 298
71858: ST_TO_ADDR
// distance := 9999 ;
71859: LD_ADDR_VAR 0 10
71863: PUSH
71864: LD_INT 9999
71866: ST_TO_ADDR
// for i := 0 to 5 do
71867: LD_ADDR_VAR 0 6
71871: PUSH
71872: DOUBLE
71873: LD_INT 0
71875: DEC
71876: ST_TO_ADDR
71877: LD_INT 5
71879: PUSH
71880: FOR_TO
71881: IFFALSE 72024
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71883: LD_ADDR_VAR 0 7
71887: PUSH
71888: LD_VAR 0 1
71892: PPUSH
71893: LD_VAR 0 6
71897: PPUSH
71898: LD_VAR 0 11
71902: PPUSH
71903: CALL_OW 272
71907: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71908: LD_ADDR_VAR 0 8
71912: PUSH
71913: LD_VAR 0 2
71917: PPUSH
71918: LD_VAR 0 6
71922: PPUSH
71923: LD_VAR 0 11
71927: PPUSH
71928: CALL_OW 273
71932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71933: LD_VAR 0 7
71937: PPUSH
71938: LD_VAR 0 8
71942: PPUSH
71943: CALL_OW 488
71947: NOT
71948: IFFALSE 71952
// continue ;
71950: GO 71880
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71952: LD_ADDR_VAR 0 9
71956: PUSH
71957: LD_VAR 0 12
71961: PUSH
71962: LD_INT 1
71964: ARRAY
71965: PPUSH
71966: LD_VAR 0 12
71970: PUSH
71971: LD_INT 2
71973: ARRAY
71974: PPUSH
71975: LD_VAR 0 7
71979: PPUSH
71980: LD_VAR 0 8
71984: PPUSH
71985: CALL_OW 298
71989: ST_TO_ADDR
// if tmp < distance then
71990: LD_VAR 0 9
71994: PUSH
71995: LD_VAR 0 10
71999: LESS
72000: IFFALSE 72022
// begin result := i ;
72002: LD_ADDR_VAR 0 5
72006: PUSH
72007: LD_VAR 0 6
72011: ST_TO_ADDR
// distance := tmp ;
72012: LD_ADDR_VAR 0 10
72016: PUSH
72017: LD_VAR 0 9
72021: ST_TO_ADDR
// end ; end ;
72022: GO 71880
72024: POP
72025: POP
// end ;
72026: LD_VAR 0 5
72030: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72031: LD_INT 0
72033: PPUSH
72034: PPUSH
// if not driver or not IsInUnit ( driver ) then
72035: LD_VAR 0 1
72039: NOT
72040: IFTRUE 72054
72042: PUSH
72043: LD_VAR 0 1
72047: PPUSH
72048: CALL_OW 310
72052: NOT
72053: OR
72054: IFFALSE 72058
// exit ;
72056: GO 72148
// vehicle := IsInUnit ( driver ) ;
72058: LD_ADDR_VAR 0 3
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: CALL_OW 310
72072: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72073: LD_VAR 0 1
72077: PPUSH
72078: LD_STRING \
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: PUSH
72108: LD_STRING E
72110: PUSH
72111: LD_INT 0
72113: PUSH
72114: LD_INT 0
72116: PUSH
72117: LD_VAR 0 3
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PPUSH
72144: CALL_OW 446
// end ;
72148: LD_VAR 0 2
72152: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72153: LD_INT 0
72155: PPUSH
72156: PPUSH
// if not driver or not IsInUnit ( driver ) then
72157: LD_VAR 0 1
72161: NOT
72162: IFTRUE 72176
72164: PUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL_OW 310
72174: NOT
72175: OR
72176: IFFALSE 72180
// exit ;
72178: GO 72270
// vehicle := IsInUnit ( driver ) ;
72180: LD_ADDR_VAR 0 3
72184: PUSH
72185: LD_VAR 0 1
72189: PPUSH
72190: CALL_OW 310
72194: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72195: LD_VAR 0 1
72199: PPUSH
72200: LD_STRING \
72202: PUSH
72203: LD_INT 0
72205: PUSH
72206: LD_INT 0
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: LD_INT 0
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: PUSH
72230: LD_STRING E
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: LD_VAR 0 3
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_INT 0
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PPUSH
72266: CALL_OW 447
// end ;
72270: LD_VAR 0 2
72274: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72275: LD_INT 0
72277: PPUSH
72278: PPUSH
72279: PPUSH
// tmp := [ ] ;
72280: LD_ADDR_VAR 0 5
72284: PUSH
72285: EMPTY
72286: ST_TO_ADDR
// for i in units do
72287: LD_ADDR_VAR 0 4
72291: PUSH
72292: LD_VAR 0 1
72296: PUSH
72297: FOR_IN
72298: IFFALSE 72336
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72300: LD_ADDR_VAR 0 5
72304: PUSH
72305: LD_VAR 0 5
72309: PPUSH
72310: LD_VAR 0 5
72314: PUSH
72315: LD_INT 1
72317: PLUS
72318: PPUSH
72319: LD_VAR 0 4
72323: PPUSH
72324: CALL_OW 256
72328: PPUSH
72329: CALL_OW 2
72333: ST_TO_ADDR
72334: GO 72297
72336: POP
72337: POP
// if not tmp then
72338: LD_VAR 0 5
72342: NOT
72343: IFFALSE 72347
// exit ;
72345: GO 72395
// if asc then
72347: LD_VAR 0 2
72351: IFFALSE 72375
// result := SortListByListAsc ( units , tmp ) else
72353: LD_ADDR_VAR 0 3
72357: PUSH
72358: LD_VAR 0 1
72362: PPUSH
72363: LD_VAR 0 5
72367: PPUSH
72368: CALL_OW 76
72372: ST_TO_ADDR
72373: GO 72395
// result := SortListByListDesc ( units , tmp ) ;
72375: LD_ADDR_VAR 0 3
72379: PUSH
72380: LD_VAR 0 1
72384: PPUSH
72385: LD_VAR 0 5
72389: PPUSH
72390: CALL_OW 77
72394: ST_TO_ADDR
// end ;
72395: LD_VAR 0 3
72399: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72400: LD_INT 0
72402: PPUSH
72403: PPUSH
// task := GetTaskList ( mech ) ;
72404: LD_ADDR_VAR 0 4
72408: PUSH
72409: LD_VAR 0 1
72413: PPUSH
72414: CALL_OW 437
72418: ST_TO_ADDR
// if not task then
72419: LD_VAR 0 4
72423: NOT
72424: IFFALSE 72428
// exit ;
72426: GO 72472
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72428: LD_ADDR_VAR 0 3
72432: PUSH
72433: LD_VAR 0 4
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PUSH
72446: LD_STRING r
72448: EQUAL
72449: IFFALSE 72471
72451: PUSH
72452: LD_VAR 0 4
72456: PUSH
72457: LD_INT 1
72459: ARRAY
72460: PUSH
72461: LD_INT 4
72463: ARRAY
72464: PUSH
72465: LD_VAR 0 2
72469: EQUAL
72470: AND
72471: ST_TO_ADDR
// end ;
72472: LD_VAR 0 3
72476: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72477: LD_INT 0
72479: PPUSH
// SetDir ( unit , d ) ;
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_VAR 0 4
72489: PPUSH
72490: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72494: LD_ADDR_VAR 0 6
72498: PUSH
72499: LD_VAR 0 1
72503: PPUSH
72504: LD_VAR 0 2
72508: PPUSH
72509: LD_VAR 0 3
72513: PPUSH
72514: LD_VAR 0 5
72518: PPUSH
72519: CALL_OW 48
72523: ST_TO_ADDR
// end ;
72524: LD_VAR 0 6
72528: RET
// export function ToNaturalNumber ( number ) ; begin
72529: LD_INT 0
72531: PPUSH
// result := number div 1 ;
72532: LD_ADDR_VAR 0 2
72536: PUSH
72537: LD_VAR 0 1
72541: PUSH
72542: LD_INT 1
72544: DIV
72545: ST_TO_ADDR
// if number < 0 then
72546: LD_VAR 0 1
72550: PUSH
72551: LD_INT 0
72553: LESS
72554: IFFALSE 72564
// result := 0 ;
72556: LD_ADDR_VAR 0 2
72560: PUSH
72561: LD_INT 0
72563: ST_TO_ADDR
// end ;
72564: LD_VAR 0 2
72568: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
72569: LD_INT 0
72571: PPUSH
72572: PPUSH
72573: PPUSH
// if not buildings then
72574: LD_VAR 0 1
72578: NOT
72579: IFFALSE 72583
// exit ;
72581: GO 72698
// tmp := [ ] ;
72583: LD_ADDR_VAR 0 5
72587: PUSH
72588: EMPTY
72589: ST_TO_ADDR
// for b in buildings do
72590: LD_ADDR_VAR 0 4
72594: PUSH
72595: LD_VAR 0 1
72599: PUSH
72600: FOR_IN
72601: IFFALSE 72639
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
72603: LD_ADDR_VAR 0 5
72607: PUSH
72608: LD_VAR 0 5
72612: PPUSH
72613: LD_VAR 0 5
72617: PUSH
72618: LD_INT 1
72620: PLUS
72621: PPUSH
72622: LD_VAR 0 4
72626: PPUSH
72627: CALL_OW 266
72631: PPUSH
72632: CALL_OW 1
72636: ST_TO_ADDR
72637: GO 72600
72639: POP
72640: POP
// if not tmp then
72641: LD_VAR 0 5
72645: NOT
72646: IFFALSE 72650
// exit ;
72648: GO 72698
// if asc then
72650: LD_VAR 0 2
72654: IFFALSE 72678
// result := SortListByListAsc ( buildings , tmp ) else
72656: LD_ADDR_VAR 0 3
72660: PUSH
72661: LD_VAR 0 1
72665: PPUSH
72666: LD_VAR 0 5
72670: PPUSH
72671: CALL_OW 76
72675: ST_TO_ADDR
72676: GO 72698
// result := SortListByListDesc ( buildings , tmp ) ;
72678: LD_ADDR_VAR 0 3
72682: PUSH
72683: LD_VAR 0 1
72687: PPUSH
72688: LD_VAR 0 5
72692: PPUSH
72693: CALL_OW 77
72697: ST_TO_ADDR
// end ;
72698: LD_VAR 0 3
72702: RET
// export function SortByClass ( units , class ) ; var un ; begin
72703: LD_INT 0
72705: PPUSH
72706: PPUSH
// if not units or not class then
72707: LD_VAR 0 1
72711: NOT
72712: IFTRUE 72721
72714: PUSH
72715: LD_VAR 0 2
72719: NOT
72720: OR
72721: IFFALSE 72725
// exit ;
72723: GO 72820
// result := [ ] ;
72725: LD_ADDR_VAR 0 3
72729: PUSH
72730: EMPTY
72731: ST_TO_ADDR
// for un in units do
72732: LD_ADDR_VAR 0 4
72736: PUSH
72737: LD_VAR 0 1
72741: PUSH
72742: FOR_IN
72743: IFFALSE 72818
// if GetClass ( un ) = class then
72745: LD_VAR 0 4
72749: PPUSH
72750: CALL_OW 257
72754: PUSH
72755: LD_VAR 0 2
72759: EQUAL
72760: IFFALSE 72787
// result := Insert ( result , 1 , un ) else
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: LD_VAR 0 3
72771: PPUSH
72772: LD_INT 1
72774: PPUSH
72775: LD_VAR 0 4
72779: PPUSH
72780: CALL_OW 2
72784: ST_TO_ADDR
72785: GO 72816
// result := Replace ( result , result + 1 , un ) ;
72787: LD_ADDR_VAR 0 3
72791: PUSH
72792: LD_VAR 0 3
72796: PPUSH
72797: LD_VAR 0 3
72801: PUSH
72802: LD_INT 1
72804: PLUS
72805: PPUSH
72806: LD_VAR 0 4
72810: PPUSH
72811: CALL_OW 1
72815: ST_TO_ADDR
72816: GO 72742
72818: POP
72819: POP
// end ;
72820: LD_VAR 0 3
72824: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72825: LD_INT 0
72827: PPUSH
72828: PPUSH
72829: PPUSH
72830: PPUSH
72831: PPUSH
72832: PPUSH
72833: PPUSH
// result := [ ] ;
72834: LD_ADDR_VAR 0 4
72838: PUSH
72839: EMPTY
72840: ST_TO_ADDR
// if x - r < 0 then
72841: LD_VAR 0 1
72845: PUSH
72846: LD_VAR 0 3
72850: MINUS
72851: PUSH
72852: LD_INT 0
72854: LESS
72855: IFFALSE 72867
// min_x := 0 else
72857: LD_ADDR_VAR 0 8
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
72865: GO 72883
// min_x := x - r ;
72867: LD_ADDR_VAR 0 8
72871: PUSH
72872: LD_VAR 0 1
72876: PUSH
72877: LD_VAR 0 3
72881: MINUS
72882: ST_TO_ADDR
// if y - r < 0 then
72883: LD_VAR 0 2
72887: PUSH
72888: LD_VAR 0 3
72892: MINUS
72893: PUSH
72894: LD_INT 0
72896: LESS
72897: IFFALSE 72909
// min_y := 0 else
72899: LD_ADDR_VAR 0 7
72903: PUSH
72904: LD_INT 0
72906: ST_TO_ADDR
72907: GO 72925
// min_y := y - r ;
72909: LD_ADDR_VAR 0 7
72913: PUSH
72914: LD_VAR 0 2
72918: PUSH
72919: LD_VAR 0 3
72923: MINUS
72924: ST_TO_ADDR
// max_x := x + r ;
72925: LD_ADDR_VAR 0 9
72929: PUSH
72930: LD_VAR 0 1
72934: PUSH
72935: LD_VAR 0 3
72939: PLUS
72940: ST_TO_ADDR
// max_y := y + r ;
72941: LD_ADDR_VAR 0 10
72945: PUSH
72946: LD_VAR 0 2
72950: PUSH
72951: LD_VAR 0 3
72955: PLUS
72956: ST_TO_ADDR
// for _x = min_x to max_x do
72957: LD_ADDR_VAR 0 5
72961: PUSH
72962: DOUBLE
72963: LD_VAR 0 8
72967: DEC
72968: ST_TO_ADDR
72969: LD_VAR 0 9
72973: PUSH
72974: FOR_TO
72975: IFFALSE 73076
// for _y = min_y to max_y do
72977: LD_ADDR_VAR 0 6
72981: PUSH
72982: DOUBLE
72983: LD_VAR 0 7
72987: DEC
72988: ST_TO_ADDR
72989: LD_VAR 0 10
72993: PUSH
72994: FOR_TO
72995: IFFALSE 73072
// begin if not ValidHex ( _x , _y ) then
72997: LD_VAR 0 5
73001: PPUSH
73002: LD_VAR 0 6
73006: PPUSH
73007: CALL_OW 488
73011: NOT
73012: IFFALSE 73016
// continue ;
73014: GO 72994
// if GetResourceTypeXY ( _x , _y ) then
73016: LD_VAR 0 5
73020: PPUSH
73021: LD_VAR 0 6
73025: PPUSH
73026: CALL_OW 283
73030: IFFALSE 73070
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73032: LD_ADDR_VAR 0 4
73036: PUSH
73037: LD_VAR 0 4
73041: PPUSH
73042: LD_VAR 0 4
73046: PUSH
73047: LD_INT 1
73049: PLUS
73050: PPUSH
73051: LD_VAR 0 5
73055: PUSH
73056: LD_VAR 0 6
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PPUSH
73065: CALL_OW 1
73069: ST_TO_ADDR
// end ;
73070: GO 72994
73072: POP
73073: POP
73074: GO 72974
73076: POP
73077: POP
// end ;
73078: LD_VAR 0 4
73082: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73083: LD_INT 0
73085: PPUSH
73086: PPUSH
73087: PPUSH
73088: PPUSH
73089: PPUSH
73090: PPUSH
73091: PPUSH
73092: PPUSH
// if not units then
73093: LD_VAR 0 1
73097: NOT
73098: IFFALSE 73102
// exit ;
73100: GO 73634
// result := UnitFilter ( units , [ f_ok ] ) ;
73102: LD_ADDR_VAR 0 3
73106: PUSH
73107: LD_VAR 0 1
73111: PPUSH
73112: LD_INT 50
73114: PUSH
73115: EMPTY
73116: LIST
73117: PPUSH
73118: CALL_OW 72
73122: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73123: LD_ADDR_VAR 0 8
73127: PUSH
73128: LD_VAR 0 1
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PPUSH
73137: CALL_OW 255
73141: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73142: LD_ADDR_VAR 0 10
73146: PUSH
73147: LD_INT 29
73149: PUSH
73150: LD_INT 91
73152: PUSH
73153: LD_INT 49
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: LIST
73160: ST_TO_ADDR
// if not result then
73161: LD_VAR 0 3
73165: NOT
73166: IFFALSE 73170
// exit ;
73168: GO 73634
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73170: LD_ADDR_VAR 0 5
73174: PUSH
73175: LD_INT 81
73177: PUSH
73178: LD_VAR 0 8
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PPUSH
73187: CALL_OW 69
73191: ST_TO_ADDR
// for i in result do
73192: LD_ADDR_VAR 0 4
73196: PUSH
73197: LD_VAR 0 3
73201: PUSH
73202: FOR_IN
73203: IFFALSE 73632
// begin tag := GetTag ( i ) + 1 ;
73205: LD_ADDR_VAR 0 9
73209: PUSH
73210: LD_VAR 0 4
73214: PPUSH
73215: CALL_OW 110
73219: PUSH
73220: LD_INT 1
73222: PLUS
73223: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73224: LD_ADDR_VAR 0 7
73228: PUSH
73229: LD_VAR 0 4
73233: PPUSH
73234: CALL_OW 250
73238: PPUSH
73239: LD_VAR 0 4
73243: PPUSH
73244: CALL_OW 251
73248: PPUSH
73249: LD_INT 4
73251: PPUSH
73252: CALL 72825 0 3
73256: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73257: LD_VAR 0 4
73261: PPUSH
73262: CALL_OW 247
73266: PUSH
73267: LD_INT 2
73269: EQUAL
73270: IFFALSE 73282
73272: PUSH
73273: LD_VAR 0 7
73277: PUSH
73278: LD_INT 2
73280: GREATER
73281: AND
73282: IFFALSE 73302
73284: PUSH
73285: LD_VAR 0 4
73289: PPUSH
73290: CALL_OW 264
73294: PUSH
73295: LD_VAR 0 10
73299: IN
73300: NOT
73301: AND
73302: IFFALSE 73341
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73304: LD_VAR 0 4
73308: PPUSH
73309: LD_VAR 0 7
73313: PUSH
73314: LD_INT 1
73316: ARRAY
73317: PUSH
73318: LD_INT 1
73320: ARRAY
73321: PPUSH
73322: LD_VAR 0 7
73326: PUSH
73327: LD_INT 1
73329: ARRAY
73330: PUSH
73331: LD_INT 2
73333: ARRAY
73334: PPUSH
73335: CALL_OW 116
73339: GO 73630
// if path > tag then
73341: LD_VAR 0 2
73345: PUSH
73346: LD_VAR 0 9
73350: GREATER
73351: IFFALSE 73559
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73353: LD_ADDR_VAR 0 6
73357: PUSH
73358: LD_VAR 0 5
73362: PPUSH
73363: LD_INT 91
73365: PUSH
73366: LD_VAR 0 4
73370: PUSH
73371: LD_INT 8
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: LIST
73378: PPUSH
73379: CALL_OW 72
73383: ST_TO_ADDR
// if nearEnemy then
73384: LD_VAR 0 6
73388: IFFALSE 73457
// begin if GetWeapon ( i ) = ru_time_lapser then
73390: LD_VAR 0 4
73394: PPUSH
73395: CALL_OW 264
73399: PUSH
73400: LD_INT 49
73402: EQUAL
73403: IFFALSE 73431
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73405: LD_VAR 0 4
73409: PPUSH
73410: LD_VAR 0 6
73414: PPUSH
73415: LD_VAR 0 4
73419: PPUSH
73420: CALL_OW 74
73424: PPUSH
73425: CALL_OW 112
73429: GO 73455
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73431: LD_VAR 0 4
73435: PPUSH
73436: LD_VAR 0 6
73440: PPUSH
73441: LD_VAR 0 4
73445: PPUSH
73446: CALL_OW 74
73450: PPUSH
73451: CALL 74715 0 2
// end else
73455: GO 73557
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73457: LD_VAR 0 4
73461: PPUSH
73462: LD_VAR 0 2
73466: PUSH
73467: LD_VAR 0 9
73471: ARRAY
73472: PUSH
73473: LD_INT 1
73475: ARRAY
73476: PPUSH
73477: LD_VAR 0 2
73481: PUSH
73482: LD_VAR 0 9
73486: ARRAY
73487: PUSH
73488: LD_INT 2
73490: ARRAY
73491: PPUSH
73492: CALL_OW 297
73496: PUSH
73497: LD_INT 6
73499: GREATER
73500: IFFALSE 73543
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73502: LD_VAR 0 4
73506: PPUSH
73507: LD_VAR 0 2
73511: PUSH
73512: LD_VAR 0 9
73516: ARRAY
73517: PUSH
73518: LD_INT 1
73520: ARRAY
73521: PPUSH
73522: LD_VAR 0 2
73526: PUSH
73527: LD_VAR 0 9
73531: ARRAY
73532: PUSH
73533: LD_INT 2
73535: ARRAY
73536: PPUSH
73537: CALL_OW 114
73541: GO 73557
// SetTag ( i , tag ) ;
73543: LD_VAR 0 4
73547: PPUSH
73548: LD_VAR 0 9
73552: PPUSH
73553: CALL_OW 109
// end else
73557: GO 73630
// if enemy then
73559: LD_VAR 0 5
73563: IFFALSE 73630
// begin if GetWeapon ( i ) = ru_time_lapser then
73565: LD_VAR 0 4
73569: PPUSH
73570: CALL_OW 264
73574: PUSH
73575: LD_INT 49
73577: EQUAL
73578: IFFALSE 73606
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73580: LD_VAR 0 4
73584: PPUSH
73585: LD_VAR 0 5
73589: PPUSH
73590: LD_VAR 0 4
73594: PPUSH
73595: CALL_OW 74
73599: PPUSH
73600: CALL_OW 112
73604: GO 73630
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73606: LD_VAR 0 4
73610: PPUSH
73611: LD_VAR 0 5
73615: PPUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: CALL_OW 74
73625: PPUSH
73626: CALL 74715 0 2
// end ; end ;
73630: GO 73202
73632: POP
73633: POP
// end ;
73634: LD_VAR 0 3
73638: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73639: LD_INT 0
73641: PPUSH
73642: PPUSH
73643: PPUSH
// if not unit or IsInUnit ( unit ) then
73644: LD_VAR 0 1
73648: NOT
73649: IFTRUE 73662
73651: PUSH
73652: LD_VAR 0 1
73656: PPUSH
73657: CALL_OW 310
73661: OR
73662: IFFALSE 73666
// exit ;
73664: GO 73757
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73666: LD_ADDR_VAR 0 4
73670: PUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: CALL_OW 250
73680: PPUSH
73681: LD_VAR 0 2
73685: PPUSH
73686: LD_INT 1
73688: PPUSH
73689: CALL_OW 272
73693: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73694: LD_ADDR_VAR 0 5
73698: PUSH
73699: LD_VAR 0 1
73703: PPUSH
73704: CALL_OW 251
73708: PPUSH
73709: LD_VAR 0 2
73713: PPUSH
73714: LD_INT 1
73716: PPUSH
73717: CALL_OW 273
73721: ST_TO_ADDR
// if ValidHex ( x , y ) then
73722: LD_VAR 0 4
73726: PPUSH
73727: LD_VAR 0 5
73731: PPUSH
73732: CALL_OW 488
73736: IFFALSE 73757
// ComTurnXY ( unit , x , y ) ;
73738: LD_VAR 0 1
73742: PPUSH
73743: LD_VAR 0 4
73747: PPUSH
73748: LD_VAR 0 5
73752: PPUSH
73753: CALL_OW 118
// end ;
73757: LD_VAR 0 3
73761: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73762: LD_INT 0
73764: PPUSH
73765: PPUSH
// result := false ;
73766: LD_ADDR_VAR 0 3
73770: PUSH
73771: LD_INT 0
73773: ST_TO_ADDR
// if not units then
73774: LD_VAR 0 2
73778: NOT
73779: IFFALSE 73783
// exit ;
73781: GO 73828
// for i in units do
73783: LD_ADDR_VAR 0 4
73787: PUSH
73788: LD_VAR 0 2
73792: PUSH
73793: FOR_IN
73794: IFFALSE 73826
// if See ( side , i ) then
73796: LD_VAR 0 1
73800: PPUSH
73801: LD_VAR 0 4
73805: PPUSH
73806: CALL_OW 292
73810: IFFALSE 73824
// begin result := true ;
73812: LD_ADDR_VAR 0 3
73816: PUSH
73817: LD_INT 1
73819: ST_TO_ADDR
// exit ;
73820: POP
73821: POP
73822: GO 73828
// end ;
73824: GO 73793
73826: POP
73827: POP
// end ;
73828: LD_VAR 0 3
73832: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73833: LD_INT 0
73835: PPUSH
73836: PPUSH
73837: PPUSH
73838: PPUSH
// if not unit or not points then
73839: LD_VAR 0 1
73843: NOT
73844: IFTRUE 73853
73846: PUSH
73847: LD_VAR 0 2
73851: NOT
73852: OR
73853: IFFALSE 73857
// exit ;
73855: GO 73947
// dist := 99999 ;
73857: LD_ADDR_VAR 0 5
73861: PUSH
73862: LD_INT 99999
73864: ST_TO_ADDR
// for i in points do
73865: LD_ADDR_VAR 0 4
73869: PUSH
73870: LD_VAR 0 2
73874: PUSH
73875: FOR_IN
73876: IFFALSE 73945
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73878: LD_ADDR_VAR 0 6
73882: PUSH
73883: LD_VAR 0 1
73887: PPUSH
73888: LD_VAR 0 4
73892: PUSH
73893: LD_INT 1
73895: ARRAY
73896: PPUSH
73897: LD_VAR 0 4
73901: PUSH
73902: LD_INT 2
73904: ARRAY
73905: PPUSH
73906: CALL_OW 297
73910: ST_TO_ADDR
// if tmpDist < dist then
73911: LD_VAR 0 6
73915: PUSH
73916: LD_VAR 0 5
73920: LESS
73921: IFFALSE 73943
// begin result := i ;
73923: LD_ADDR_VAR 0 3
73927: PUSH
73928: LD_VAR 0 4
73932: ST_TO_ADDR
// dist := tmpDist ;
73933: LD_ADDR_VAR 0 5
73937: PUSH
73938: LD_VAR 0 6
73942: ST_TO_ADDR
// end ; end ;
73943: GO 73875
73945: POP
73946: POP
// end ;
73947: LD_VAR 0 3
73951: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73952: LD_INT 0
73954: PPUSH
// uc_side := side ;
73955: LD_ADDR_OWVAR 20
73959: PUSH
73960: LD_VAR 0 1
73964: ST_TO_ADDR
// uc_nation := 3 ;
73965: LD_ADDR_OWVAR 21
73969: PUSH
73970: LD_INT 3
73972: ST_TO_ADDR
// vc_chassis := 25 ;
73973: LD_ADDR_OWVAR 37
73977: PUSH
73978: LD_INT 25
73980: ST_TO_ADDR
// vc_engine := engine_siberite ;
73981: LD_ADDR_OWVAR 39
73985: PUSH
73986: LD_INT 3
73988: ST_TO_ADDR
// vc_control := control_computer ;
73989: LD_ADDR_OWVAR 38
73993: PUSH
73994: LD_INT 3
73996: ST_TO_ADDR
// vc_weapon := 59 ;
73997: LD_ADDR_OWVAR 40
74001: PUSH
74002: LD_INT 59
74004: ST_TO_ADDR
// result := CreateVehicle ;
74005: LD_ADDR_VAR 0 5
74009: PUSH
74010: CALL_OW 45
74014: ST_TO_ADDR
// SetDir ( result , d ) ;
74015: LD_VAR 0 5
74019: PPUSH
74020: LD_VAR 0 4
74024: PPUSH
74025: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74029: LD_VAR 0 5
74033: PPUSH
74034: LD_VAR 0 2
74038: PPUSH
74039: LD_VAR 0 3
74043: PPUSH
74044: LD_INT 0
74046: PPUSH
74047: CALL_OW 48
// end ;
74051: LD_VAR 0 5
74055: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74056: LD_INT 0
74058: PPUSH
74059: PPUSH
74060: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74061: LD_ADDR_VAR 0 2
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: LD_INT 0
74071: PUSH
74072: LD_INT 0
74074: PUSH
74075: LD_INT 0
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74084: LD_VAR 0 1
74088: NOT
74089: IFTRUE 74122
74091: PUSH
74092: LD_VAR 0 1
74096: PPUSH
74097: CALL_OW 264
74101: PUSH
74102: LD_INT 12
74104: PUSH
74105: LD_INT 51
74107: PUSH
74108: LD_INT 32
74110: PUSH
74111: LD_INT 89
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: IN
74120: NOT
74121: OR
74122: IFFALSE 74126
// exit ;
74124: GO 74224
// for i := 1 to 3 do
74126: LD_ADDR_VAR 0 3
74130: PUSH
74131: DOUBLE
74132: LD_INT 1
74134: DEC
74135: ST_TO_ADDR
74136: LD_INT 3
74138: PUSH
74139: FOR_TO
74140: IFFALSE 74222
// begin tmp := GetCargo ( cargo , i ) ;
74142: LD_ADDR_VAR 0 4
74146: PUSH
74147: LD_VAR 0 1
74151: PPUSH
74152: LD_VAR 0 3
74156: PPUSH
74157: CALL_OW 289
74161: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74162: LD_ADDR_VAR 0 2
74166: PUSH
74167: LD_VAR 0 2
74171: PPUSH
74172: LD_VAR 0 3
74176: PPUSH
74177: LD_VAR 0 4
74181: PPUSH
74182: CALL_OW 1
74186: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74187: LD_ADDR_VAR 0 2
74191: PUSH
74192: LD_VAR 0 2
74196: PPUSH
74197: LD_INT 4
74199: PPUSH
74200: LD_VAR 0 2
74204: PUSH
74205: LD_INT 4
74207: ARRAY
74208: PUSH
74209: LD_VAR 0 4
74213: PLUS
74214: PPUSH
74215: CALL_OW 1
74219: ST_TO_ADDR
// end ;
74220: GO 74139
74222: POP
74223: POP
// end ;
74224: LD_VAR 0 2
74228: RET
// export function Length ( array ) ; begin
74229: LD_INT 0
74231: PPUSH
// result := array + 0 ;
74232: LD_ADDR_VAR 0 2
74236: PUSH
74237: LD_VAR 0 1
74241: PUSH
74242: LD_INT 0
74244: PLUS
74245: ST_TO_ADDR
// end ;
74246: LD_VAR 0 2
74250: RET
// export function PrepareArray ( array ) ; begin
74251: LD_INT 0
74253: PPUSH
// result := array diff 0 ;
74254: LD_ADDR_VAR 0 2
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: LD_INT 0
74266: DIFF
74267: ST_TO_ADDR
// if not result [ 1 ] then
74268: LD_VAR 0 2
74272: PUSH
74273: LD_INT 1
74275: ARRAY
74276: NOT
74277: IFFALSE 74297
// result := Delete ( result , 1 ) ;
74279: LD_ADDR_VAR 0 2
74283: PUSH
74284: LD_VAR 0 2
74288: PPUSH
74289: LD_INT 1
74291: PPUSH
74292: CALL_OW 3
74296: ST_TO_ADDR
// end ;
74297: LD_VAR 0 2
74301: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74302: LD_INT 0
74304: PPUSH
74305: PPUSH
74306: PPUSH
74307: PPUSH
// sibRocketRange := 25 ;
74308: LD_ADDR_VAR 0 6
74312: PUSH
74313: LD_INT 25
74315: ST_TO_ADDR
// result := false ;
74316: LD_ADDR_VAR 0 4
74320: PUSH
74321: LD_INT 0
74323: ST_TO_ADDR
// for i := 0 to 5 do
74324: LD_ADDR_VAR 0 5
74328: PUSH
74329: DOUBLE
74330: LD_INT 0
74332: DEC
74333: ST_TO_ADDR
74334: LD_INT 5
74336: PUSH
74337: FOR_TO
74338: IFFALSE 74405
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74340: LD_VAR 0 1
74344: PPUSH
74345: LD_VAR 0 5
74349: PPUSH
74350: LD_VAR 0 6
74354: PPUSH
74355: CALL_OW 272
74359: PPUSH
74360: LD_VAR 0 2
74364: PPUSH
74365: LD_VAR 0 5
74369: PPUSH
74370: LD_VAR 0 6
74374: PPUSH
74375: CALL_OW 273
74379: PPUSH
74380: LD_VAR 0 3
74384: PPUSH
74385: CALL_OW 309
74389: IFFALSE 74403
// begin result := true ;
74391: LD_ADDR_VAR 0 4
74395: PUSH
74396: LD_INT 1
74398: ST_TO_ADDR
// exit ;
74399: POP
74400: POP
74401: GO 74407
// end ;
74403: GO 74337
74405: POP
74406: POP
// end ;
74407: LD_VAR 0 4
74411: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74412: LD_INT 0
74414: PPUSH
74415: PPUSH
74416: PPUSH
// if btype = b_depot then
74417: LD_VAR 0 2
74421: PUSH
74422: LD_INT 0
74424: EQUAL
74425: IFFALSE 74437
// begin result := true ;
74427: LD_ADDR_VAR 0 3
74431: PUSH
74432: LD_INT 1
74434: ST_TO_ADDR
// exit ;
74435: GO 74557
// end ; pom := GetBase ( depot ) ;
74437: LD_ADDR_VAR 0 4
74441: PUSH
74442: LD_VAR 0 1
74446: PPUSH
74447: CALL_OW 274
74451: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74452: LD_ADDR_VAR 0 5
74456: PUSH
74457: LD_VAR 0 2
74461: PPUSH
74462: LD_VAR 0 1
74466: PPUSH
74467: CALL_OW 248
74471: PPUSH
74472: CALL_OW 450
74476: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74477: LD_ADDR_VAR 0 3
74481: PUSH
74482: LD_VAR 0 4
74486: PPUSH
74487: LD_INT 1
74489: PPUSH
74490: CALL_OW 275
74494: PUSH
74495: LD_VAR 0 5
74499: PUSH
74500: LD_INT 1
74502: ARRAY
74503: GREATEREQUAL
74504: IFFALSE 74530
74506: PUSH
74507: LD_VAR 0 4
74511: PPUSH
74512: LD_INT 2
74514: PPUSH
74515: CALL_OW 275
74519: PUSH
74520: LD_VAR 0 5
74524: PUSH
74525: LD_INT 2
74527: ARRAY
74528: GREATEREQUAL
74529: AND
74530: IFFALSE 74556
74532: PUSH
74533: LD_VAR 0 4
74537: PPUSH
74538: LD_INT 3
74540: PPUSH
74541: CALL_OW 275
74545: PUSH
74546: LD_VAR 0 5
74550: PUSH
74551: LD_INT 3
74553: ARRAY
74554: GREATEREQUAL
74555: AND
74556: ST_TO_ADDR
// end ;
74557: LD_VAR 0 3
74561: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74562: LD_INT 0
74564: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74565: LD_VAR 0 1
74569: PPUSH
74570: LD_VAR 0 2
74574: PPUSH
74575: LD_INT 0
74577: PPUSH
74578: LD_INT 0
74580: PPUSH
74581: LD_INT 1
74583: PPUSH
74584: LD_INT 0
74586: PPUSH
74587: CALL_OW 587
// end ;
74591: LD_VAR 0 3
74595: RET
// export function CenterOnNow ( unit ) ; begin
74596: LD_INT 0
74598: PPUSH
// result := IsInUnit ( unit ) ;
74599: LD_ADDR_VAR 0 2
74603: PUSH
74604: LD_VAR 0 1
74608: PPUSH
74609: CALL_OW 310
74613: ST_TO_ADDR
// if not result then
74614: LD_VAR 0 2
74618: NOT
74619: IFFALSE 74631
// result := unit ;
74621: LD_ADDR_VAR 0 2
74625: PUSH
74626: LD_VAR 0 1
74630: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74631: LD_VAR 0 1
74635: PPUSH
74636: CALL_OW 87
// end ;
74640: LD_VAR 0 2
74644: RET
// export function ComMoveHex ( unit , hex ) ; begin
74645: LD_INT 0
74647: PPUSH
// if not hex then
74648: LD_VAR 0 2
74652: NOT
74653: IFFALSE 74657
// exit ;
74655: GO 74710
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74657: LD_VAR 0 2
74661: PUSH
74662: LD_INT 1
74664: ARRAY
74665: PPUSH
74666: LD_VAR 0 2
74670: PUSH
74671: LD_INT 2
74673: ARRAY
74674: PPUSH
74675: CALL_OW 428
74679: IFFALSE 74683
// exit ;
74681: GO 74710
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74683: LD_VAR 0 1
74687: PPUSH
74688: LD_VAR 0 2
74692: PUSH
74693: LD_INT 1
74695: ARRAY
74696: PPUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_INT 2
74704: ARRAY
74705: PPUSH
74706: CALL_OW 111
// end ;
74710: LD_VAR 0 3
74714: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74715: LD_INT 0
74717: PPUSH
74718: PPUSH
74719: PPUSH
// if not unit or not enemy then
74720: LD_VAR 0 1
74724: NOT
74725: IFTRUE 74734
74727: PUSH
74728: LD_VAR 0 2
74732: NOT
74733: OR
74734: IFFALSE 74738
// exit ;
74736: GO 74864
// x := GetX ( enemy ) ;
74738: LD_ADDR_VAR 0 4
74742: PUSH
74743: LD_VAR 0 2
74747: PPUSH
74748: CALL_OW 250
74752: ST_TO_ADDR
// y := GetY ( enemy ) ;
74753: LD_ADDR_VAR 0 5
74757: PUSH
74758: LD_VAR 0 2
74762: PPUSH
74763: CALL_OW 251
74767: ST_TO_ADDR
// if ValidHex ( x , y ) then
74768: LD_VAR 0 4
74772: PPUSH
74773: LD_VAR 0 5
74777: PPUSH
74778: CALL_OW 488
74782: IFFALSE 74864
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74784: LD_VAR 0 2
74788: PPUSH
74789: CALL_OW 247
74793: PUSH
74794: LD_INT 3
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: IN
74804: IFTRUE 74827
74806: PUSH
74807: LD_VAR 0 1
74811: PPUSH
74812: CALL_OW 255
74816: PPUSH
74817: LD_VAR 0 2
74821: PPUSH
74822: CALL_OW 292
74826: OR
74827: IFFALSE 74845
// ComAttackUnit ( unit , enemy ) else
74829: LD_VAR 0 1
74833: PPUSH
74834: LD_VAR 0 2
74838: PPUSH
74839: CALL_OW 115
74843: GO 74864
// ComAgressiveMove ( unit , x , y ) ;
74845: LD_VAR 0 1
74849: PPUSH
74850: LD_VAR 0 4
74854: PPUSH
74855: LD_VAR 0 5
74859: PPUSH
74860: CALL_OW 114
// end ;
74864: LD_VAR 0 3
74868: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74869: LD_INT 0
74871: PPUSH
74872: PPUSH
74873: PPUSH
// list := AreaToList ( area , 0 ) ;
74874: LD_ADDR_VAR 0 5
74878: PUSH
74879: LD_VAR 0 1
74883: PPUSH
74884: LD_INT 0
74886: PPUSH
74887: CALL_OW 517
74891: ST_TO_ADDR
// if not list then
74892: LD_VAR 0 5
74896: NOT
74897: IFFALSE 74901
// exit ;
74899: GO 75031
// if all then
74901: LD_VAR 0 2
74905: IFFALSE 74993
// begin for i := 1 to list [ 1 ] do
74907: LD_ADDR_VAR 0 4
74911: PUSH
74912: DOUBLE
74913: LD_INT 1
74915: DEC
74916: ST_TO_ADDR
74917: LD_VAR 0 5
74921: PUSH
74922: LD_INT 1
74924: ARRAY
74925: PUSH
74926: FOR_TO
74927: IFFALSE 74989
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74929: LD_ADDR_VAR 0 3
74933: PUSH
74934: LD_VAR 0 3
74938: PPUSH
74939: LD_VAR 0 3
74943: PUSH
74944: LD_INT 1
74946: PLUS
74947: PPUSH
74948: LD_VAR 0 5
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: PUSH
74957: LD_VAR 0 4
74961: ARRAY
74962: PUSH
74963: LD_VAR 0 5
74967: PUSH
74968: LD_INT 2
74970: ARRAY
74971: PUSH
74972: LD_VAR 0 4
74976: ARRAY
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PPUSH
74982: CALL_OW 1
74986: ST_TO_ADDR
74987: GO 74926
74989: POP
74990: POP
// exit ;
74991: GO 75031
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74993: LD_ADDR_VAR 0 3
74997: PUSH
74998: LD_VAR 0 5
75002: PUSH
75003: LD_INT 1
75005: ARRAY
75006: PUSH
75007: LD_INT 1
75009: ARRAY
75010: PUSH
75011: LD_VAR 0 5
75015: PUSH
75016: LD_INT 2
75018: ARRAY
75019: PUSH
75020: LD_INT 1
75022: ARRAY
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: EMPTY
75029: LIST
75030: ST_TO_ADDR
// end ;
75031: LD_VAR 0 3
75035: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75036: LD_INT 0
75038: PPUSH
75039: PPUSH
// list := AreaToList ( area , 0 ) ;
75040: LD_ADDR_VAR 0 4
75044: PUSH
75045: LD_VAR 0 1
75049: PPUSH
75050: LD_INT 0
75052: PPUSH
75053: CALL_OW 517
75057: ST_TO_ADDR
// if not list then
75058: LD_VAR 0 4
75062: NOT
75063: IFFALSE 75067
// exit ;
75065: GO 75108
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75067: LD_ADDR_VAR 0 3
75071: PUSH
75072: LD_VAR 0 4
75076: PUSH
75077: LD_INT 1
75079: ARRAY
75080: PUSH
75081: LD_INT 1
75083: ARRAY
75084: PUSH
75085: LD_VAR 0 4
75089: PUSH
75090: LD_INT 2
75092: ARRAY
75093: PUSH
75094: LD_INT 1
75096: ARRAY
75097: PUSH
75098: LD_VAR 0 2
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: ST_TO_ADDR
// end ;
75108: LD_VAR 0 3
75112: RET
// export function First ( array ) ; begin
75113: LD_INT 0
75115: PPUSH
// if not array then
75116: LD_VAR 0 1
75120: NOT
75121: IFFALSE 75125
// exit ;
75123: GO 75139
// result := array [ 1 ] ;
75125: LD_ADDR_VAR 0 2
75129: PUSH
75130: LD_VAR 0 1
75134: PUSH
75135: LD_INT 1
75137: ARRAY
75138: ST_TO_ADDR
// end ;
75139: LD_VAR 0 2
75143: RET
// export function Last ( array ) ; begin
75144: LD_INT 0
75146: PPUSH
// if not array then
75147: LD_VAR 0 1
75151: NOT
75152: IFFALSE 75156
// exit ;
75154: GO 75172
// result := array [ array ] ;
75156: LD_ADDR_VAR 0 2
75160: PUSH
75161: LD_VAR 0 1
75165: PUSH
75166: LD_VAR 0 1
75170: ARRAY
75171: ST_TO_ADDR
// end ;
75172: LD_VAR 0 2
75176: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75177: LD_INT 0
75179: PPUSH
75180: PPUSH
// result := [ ] ;
75181: LD_ADDR_VAR 0 5
75185: PUSH
75186: EMPTY
75187: ST_TO_ADDR
// if not array then
75188: LD_VAR 0 1
75192: NOT
75193: IFFALSE 75197
// exit ;
75195: GO 75309
// for i := 1 to array do
75197: LD_ADDR_VAR 0 6
75201: PUSH
75202: DOUBLE
75203: LD_INT 1
75205: DEC
75206: ST_TO_ADDR
75207: LD_VAR 0 1
75211: PUSH
75212: FOR_TO
75213: IFFALSE 75307
// if array [ i ] [ index ] = value then
75215: LD_VAR 0 1
75219: PUSH
75220: LD_VAR 0 6
75224: ARRAY
75225: PUSH
75226: LD_VAR 0 2
75230: ARRAY
75231: PUSH
75232: LD_VAR 0 3
75236: EQUAL
75237: IFFALSE 75305
// begin if indexColumn then
75239: LD_VAR 0 4
75243: IFFALSE 75279
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75245: LD_ADDR_VAR 0 5
75249: PUSH
75250: LD_VAR 0 5
75254: PPUSH
75255: LD_VAR 0 1
75259: PUSH
75260: LD_VAR 0 6
75264: ARRAY
75265: PUSH
75266: LD_VAR 0 4
75270: ARRAY
75271: PPUSH
75272: CALL 70317 0 2
75276: ST_TO_ADDR
75277: GO 75305
// result := Join ( result , array [ i ] ) ;
75279: LD_ADDR_VAR 0 5
75283: PUSH
75284: LD_VAR 0 5
75288: PPUSH
75289: LD_VAR 0 1
75293: PUSH
75294: LD_VAR 0 6
75298: ARRAY
75299: PPUSH
75300: CALL 70317 0 2
75304: ST_TO_ADDR
// end ;
75305: GO 75212
75307: POP
75308: POP
// end ;
75309: LD_VAR 0 5
75313: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75314: LD_INT 0
75316: PPUSH
// if not vehicles or not parkingPoint then
75317: LD_VAR 0 1
75321: NOT
75322: IFTRUE 75331
75324: PUSH
75325: LD_VAR 0 2
75329: NOT
75330: OR
75331: IFFALSE 75335
// exit ;
75333: GO 75433
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75335: LD_ADDR_VAR 0 1
75339: PUSH
75340: LD_VAR 0 1
75344: PPUSH
75345: LD_INT 50
75347: PUSH
75348: EMPTY
75349: LIST
75350: PUSH
75351: LD_INT 3
75353: PUSH
75354: LD_INT 92
75356: PUSH
75357: LD_VAR 0 2
75361: PUSH
75362: LD_INT 1
75364: ARRAY
75365: PUSH
75366: LD_VAR 0 2
75370: PUSH
75371: LD_INT 2
75373: ARRAY
75374: PUSH
75375: LD_INT 8
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PPUSH
75392: CALL_OW 72
75396: ST_TO_ADDR
// if not vehicles then
75397: LD_VAR 0 1
75401: NOT
75402: IFFALSE 75406
// exit ;
75404: GO 75433
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_VAR 0 2
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PPUSH
75420: LD_VAR 0 2
75424: PUSH
75425: LD_INT 2
75427: ARRAY
75428: PPUSH
75429: CALL_OW 111
// end ;
75433: LD_VAR 0 3
75437: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75438: LD_INT 0
75440: PPUSH
75441: PPUSH
75442: PPUSH
// if not side or not area then
75443: LD_VAR 0 1
75447: NOT
75448: IFTRUE 75457
75450: PUSH
75451: LD_VAR 0 2
75455: NOT
75456: OR
75457: IFFALSE 75461
// exit ;
75459: GO 75580
// tmp := AreaToList ( area , 0 ) ;
75461: LD_ADDR_VAR 0 5
75465: PUSH
75466: LD_VAR 0 2
75470: PPUSH
75471: LD_INT 0
75473: PPUSH
75474: CALL_OW 517
75478: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75479: LD_ADDR_VAR 0 4
75483: PUSH
75484: DOUBLE
75485: LD_INT 1
75487: DEC
75488: ST_TO_ADDR
75489: LD_VAR 0 5
75493: PUSH
75494: LD_INT 1
75496: ARRAY
75497: PUSH
75498: FOR_TO
75499: IFFALSE 75578
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75501: LD_VAR 0 5
75505: PUSH
75506: LD_INT 1
75508: ARRAY
75509: PUSH
75510: LD_VAR 0 4
75514: ARRAY
75515: PPUSH
75516: LD_VAR 0 5
75520: PUSH
75521: LD_INT 2
75523: ARRAY
75524: PUSH
75525: LD_VAR 0 4
75529: ARRAY
75530: PPUSH
75531: CALL_OW 351
75535: IFFALSE 75576
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75537: LD_VAR 0 5
75541: PUSH
75542: LD_INT 1
75544: ARRAY
75545: PUSH
75546: LD_VAR 0 4
75550: ARRAY
75551: PPUSH
75552: LD_VAR 0 5
75556: PUSH
75557: LD_INT 2
75559: ARRAY
75560: PUSH
75561: LD_VAR 0 4
75565: ARRAY
75566: PPUSH
75567: LD_VAR 0 1
75571: PPUSH
75572: CALL_OW 244
// end ;
75576: GO 75498
75578: POP
75579: POP
// end ;
75580: LD_VAR 0 3
75584: RET
// export function UniqueArray ( array ) ; var i ; begin
75585: LD_INT 0
75587: PPUSH
75588: PPUSH
// result := [ ] ;
75589: LD_ADDR_VAR 0 2
75593: PUSH
75594: EMPTY
75595: ST_TO_ADDR
// if not array then
75596: LD_VAR 0 1
75600: NOT
75601: IFFALSE 75605
// exit ;
75603: GO 75666
// for i := 1 to array do
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: DOUBLE
75611: LD_INT 1
75613: DEC
75614: ST_TO_ADDR
75615: LD_VAR 0 1
75619: PUSH
75620: FOR_TO
75621: IFFALSE 75664
// if not array [ i ] in result then
75623: LD_VAR 0 1
75627: PUSH
75628: LD_VAR 0 3
75632: ARRAY
75633: PUSH
75634: LD_VAR 0 2
75638: IN
75639: NOT
75640: IFFALSE 75662
// result := Join ( result , i ) ;
75642: LD_ADDR_VAR 0 2
75646: PUSH
75647: LD_VAR 0 2
75651: PPUSH
75652: LD_VAR 0 3
75656: PPUSH
75657: CALL 70317 0 2
75661: ST_TO_ADDR
75662: GO 75620
75664: POP
75665: POP
// end ; end_of_file
75666: LD_VAR 0 2
75670: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75671: LD_VAR 0 1
75675: PUSH
75676: LD_INT 200
75678: DOUBLE
75679: GREATEREQUAL
75680: IFFALSE 75688
75682: LD_INT 299
75684: DOUBLE
75685: LESSEQUAL
75686: IFTRUE 75690
75688: GO 75722
75690: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75691: LD_VAR 0 1
75695: PPUSH
75696: LD_VAR 0 2
75700: PPUSH
75701: LD_VAR 0 3
75705: PPUSH
75706: LD_VAR 0 4
75710: PPUSH
75711: LD_VAR 0 5
75715: PPUSH
75716: CALL 10307 0 5
75720: GO 75799
75722: LD_INT 300
75724: DOUBLE
75725: GREATEREQUAL
75726: IFFALSE 75734
75728: LD_INT 399
75730: DOUBLE
75731: LESSEQUAL
75732: IFTRUE 75736
75734: GO 75798
75736: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75737: LD_VAR 0 1
75741: PPUSH
75742: LD_VAR 0 2
75746: PPUSH
75747: LD_VAR 0 3
75751: PPUSH
75752: LD_VAR 0 4
75756: PPUSH
75757: LD_VAR 0 5
75761: PPUSH
75762: LD_VAR 0 6
75766: PPUSH
75767: LD_VAR 0 7
75771: PPUSH
75772: LD_VAR 0 8
75776: PPUSH
75777: LD_VAR 0 9
75781: PPUSH
75782: LD_VAR 0 10
75786: PPUSH
75787: LD_VAR 0 11
75791: PPUSH
75792: CALL 28670 0 11
75796: GO 75799
75798: POP
// end ;
75799: PPOPN 11
75801: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_VAR 0 2
75811: PPUSH
75812: LD_VAR 0 3
75816: PPUSH
75817: LD_VAR 0 4
75821: PPUSH
75822: LD_VAR 0 5
75826: PPUSH
75827: CALL 9607 0 5
// end ; end_of_file
75831: PPOPN 5
75833: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75834: LD_VAR 0 1
75838: PPUSH
75839: LD_VAR 0 2
75843: PPUSH
75844: LD_VAR 0 3
75848: PPUSH
75849: LD_VAR 0 4
75853: PPUSH
75854: LD_VAR 0 5
75858: PPUSH
75859: LD_VAR 0 6
75863: PPUSH
75864: CALL 16210 0 6
// end ;
75868: PPOPN 6
75870: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75871: LD_INT 0
75873: PPUSH
// begin if not units then
75874: LD_VAR 0 1
75878: NOT
75879: IFFALSE 75883
// exit ;
75881: GO 75917
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
75883: LD_VAR 0 1
75887: PPUSH
75888: LD_VAR 0 2
75892: PPUSH
75893: LD_VAR 0 3
75897: PPUSH
75898: LD_VAR 0 4
75902: PPUSH
75903: LD_VAR 0 5
75907: PPUSH
75908: LD_VAR 0 6
75912: PPUSH
75913: CALL 16004 0 6
// end ;
75917: PPOPN 7
75919: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75920: CALL 16090 0 0
// end ;
75924: PPOPN 1
75926: END
